r3_kernel            INFO  Hello, kernel world!
r3_kernel::boot_proto INFO  Bootloader version: 0.10.9
r3_kernel::boot_proto INFO  RSDT Address: Some(1009872)
r3_kernel::boot_proto INFO  Memory offset: 0xffffa00000000000
r3_kernel::boot_proto INFO  MemoryRegion { start: 0, end: 654336, kind: Bootloader }
r3_kernel::boot_proto INFO  MemoryRegion { start: 654336, end: 655360, kind: UnknownBios(2) }
r3_kernel::boot_proto INFO  MemoryRegion { start: 983040, end: 1048576, kind: UnknownBios(2) }
r3_kernel::boot_proto INFO  MemoryRegion { start: 1048576, end: 4722688, kind: Bootloader }
r3_kernel::boot_proto INFO  MemoryRegion { start: 4722688, end: 1073610752, kind: Usable }
r3_kernel::boot_proto INFO  MemoryRegion { start: 1073610752, end: 1073741824, kind: UnknownBios(2) }
r3_kernel::boot_proto INFO  MemoryRegion { start: 4278173696, end: 4278190080, kind: UnknownBios(2) }
r3_kernel::boot_proto INFO  MemoryRegion { start: 4294705152, end: 4294967296, kind: UnknownBios(2) }
r3_kernel::boot_proto INFO  Framebuffer address: 0x10000000000
r3_kernel::boot_proto DEBUG Framebuffer info: width=1024 height=768 bps=4 pixel_format=BGR
r3_kernel::cpu::cpuid INFO  Probing CPU Features with cpuid instruction.
r3_kernel::cpu::cpuid DEBUG cpuid register ecx=0xf7fa3223, edx=0xf8bfbff, ebx=800
r3_kernel::cpu::cpuid DEBUG CPUID max_standard_level=14, ebx=756e6547.
r3_kernel::cpu::cpuid DEBUG CPUID max_extended_level=80000008, ebx=756e6547.
r3_kernel::cpu::cpuid INFO  Feature Register ecx=SSE3 | PCLMUL | VMX | SSSE3 | FMA | CX16 | PCIDE | SSE4_1 | SSE4_2 | X2APIC | MOVBE | POPCNT | TSCD | AES | XSAVE | AVX
r3_kernel::cpu::cpuid INFO  Feature Register edx=FPU | VME | DE | PSE | TSC | MSR | PAE | MCE | CX8 | APIC | SEP | MTRR | PGE | MCA | CMOV | PAT | PSE36 | CLF | MMX | FXSR | SSE | SSE2 | SS
r3_kernel::cpu::cpuid INFO  Max standard level 0x14
r3_kernel::cpu::cpuid INFO  Max extended level 0x80000008
r3_kernel::cpu::cpuid INFO  CPU level checks passed.
r3_kernel::cpu::segments DEBUG TSS descriptor high=0x0, low=0x892363f10067
r3_kernel::cpu::segments DEBUG Verified Code Segment Register value: 0x8
r3_kernel::cpu::segments INFO  Initialized GDT.
r3_kernel::cpu::segments INFO  Initialized TSS.
r3_kernel::cpu::exceptions INFO  Prepared basic exceptions.
r3_kernel::cpu::exceptions INFO  Initialized Interrupt descriptor table.
r3_kernel::cpu::exceptions ERROR Breakpoint exception
Exception info: Exception Info {
    instruction_pointer: 2148225,
    code_segment: 8,
    cpu_flags: 2,
    stack_pointer: 549755891480,
    stack_segment: 0,
}
r3_kernel::cpu       INFO  Recovered from breakpoint, interrupts properly working.
r3_kernel::mm        INFO  Enabling frame allocator...
r3_kernel::mm::phy   DEBUG Found memory region start=0x481000, end=0x3ffe0000 as usable.
r3_kernel::mm::phy   INFO  Found 2 memory regions as usable.
r3_kernel::mm::phy   INFO  Set-up Linear memory allocator for Physical memory successfull, regions=1
r3_kernel::mm        INFO  Enabling kernel paging...
r3_kernel::mm::paging INFO  Page table at Virtual address: 0xffffa0000044b000
r3_kernel::mm::paging INFO  Kernel paging is initialized, address at: 0xffffa0000044b000
r3_kernel::mm        INFO  Running simple paging test....
r3_kernel::mm        DEBUG The expected value is at virtual address=0x8000012c48
r3_kernel::mm        INFO  Virtual Memory test passed, expected=0x34445544, got=0x34445544
r3_kernel::mm        INFO  Enabling kernel heap...
r3_kernel::mm::heap  DEBUG n_heap_pages=2560.
r3_kernel::mm::heap  DEBUG Mapping kernel virtual memory for heap at 0x7fff00000000
r3_kernel::mm::paging DEBUG Created new page table at 0xffffa00000800000
r3_kernel::mm::paging DEBUG Created new page table at 0xffffa00000801000
r3_kernel::mm::heap  INFO  Allocated 10485760bytes at 0x7fff00000000
r3_kernel::mm::heap  DEBUG Testing heap by allocating a vector: 
r3_kernel::mm::heap  DEBUG Test vector allocated at: 0x7fff00000000
r3_kernel::mm::heap  INFO  Passed heap allocator test, successfully allocated and freed heap memory.
r3_kernel::mm::heap  INFO  Setting up Kernel heap as Rust Global allocator is successful.
