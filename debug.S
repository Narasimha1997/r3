
kbin/x86_64/debug/r3_kernel:     file format elf64-x86-64


Disassembly of section .text:

0000000000206330 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  206330:	48 83 ec 38          	sub    $0x38,%rsp
  206334:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206339:	48 89 f8             	mov    %rdi,%rax
  20633c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206341:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206346:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20634b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  206350:	e8 8b 1b 03 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  206355:	88 44 24 26          	mov    %al,0x26(%rsp)
  206359:	8a 44 24 26          	mov    0x26(%rsp),%al
  20635d:	a8 01                	test   $0x1,%al
  20635f:	75 12                	jne    206373 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x43>
  206361:	eb 00                	jmp    206363 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x33>
  206363:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
  206368:	e8 83 1b 03 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20636d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206371:	eb 25                	jmp    206398 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x68>
  206373:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206378:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20637d:	e8 ce e7 02 00       	callq  234b50 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE>
  206382:	24 01                	and    $0x1,%al
  206384:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  206388:	eb 00                	jmp    20638a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x5a>
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
                }
            }
  20638a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20638e:	24 01                	and    $0x1,%al
  206390:	0f b6 c0             	movzbl %al,%eax
  206393:	48 83 c4 38          	add    $0x38,%rsp
  206397:	c3                   	retq   
  206398:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20639c:	a8 01                	test   $0x1,%al
  20639e:	75 19                	jne    2063b9 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x89>
  2063a0:	eb 00                	jmp    2063a2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x72>
  2063a2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2063a7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2063ac:	e8 7f 06 03 00       	callq  236a30 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E>
  2063b1:	24 01                	and    $0x1,%al
  2063b3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2063b7:	eb 19                	jmp    2063d2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa2>
  2063b9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2063be:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  2063c3:	e8 18 e8 02 00       	callq  234be0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E>
  2063c8:	24 01                	and    $0x1,%al
  2063ca:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  2063ce:	eb 00                	jmp    2063d0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa0>
                if f.debug_lower_hex() {
  2063d0:	eb b8                	jmp    20638a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x5a>
                } else if f.debug_upper_hex() {
  2063d2:	eb fc                	jmp    2063d0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa0>
  2063d4:	cc                   	int3   
  2063d5:	cc                   	int3   
  2063d6:	cc                   	int3   
  2063d7:	cc                   	int3   
  2063d8:	cc                   	int3   
  2063d9:	cc                   	int3   
  2063da:	cc                   	int3   
  2063db:	cc                   	int3   
  2063dc:	cc                   	int3   
  2063dd:	cc                   	int3   
  2063de:	cc                   	int3   
  2063df:	cc                   	int3   

00000000002063e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  2063e0:	48 83 ec 38          	sub    $0x38,%rsp
  2063e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2063e9:	48 89 f8             	mov    %rdi,%rax
  2063ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2063f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2063f6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2063fb:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  206400:	e8 db 1a 03 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  206405:	88 44 24 26          	mov    %al,0x26(%rsp)
  206409:	8a 44 24 26          	mov    0x26(%rsp),%al
  20640d:	a8 01                	test   $0x1,%al
  20640f:	75 12                	jne    206423 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x43>
  206411:	eb 00                	jmp    206413 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x33>
  206413:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  206418:	e8 d3 1a 03 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20641d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206421:	eb 25                	jmp    206448 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x68>
  206423:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206428:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20642d:	e8 9e ea 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  206432:	24 01                	and    $0x1,%al
  206434:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  206438:	eb 00                	jmp    20643a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x5a>
            }
  20643a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20643e:	24 01                	and    $0x1,%al
  206440:	0f b6 c0             	movzbl %al,%eax
  206443:	48 83 c4 38          	add    $0x38,%rsp
  206447:	c3                   	retq   
  206448:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20644c:	a8 01                	test   $0x1,%al
  20644e:	75 19                	jne    206469 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x89>
  206450:	eb 00                	jmp    206452 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x72>
  206452:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206457:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  20645c:	e8 9f 08 03 00       	callq  236d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  206461:	24 01                	and    $0x1,%al
  206463:	88 44 24 27          	mov    %al,0x27(%rsp)
  206467:	eb 19                	jmp    206482 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa2>
  206469:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20646e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  206473:	e8 f8 ea 02 00       	callq  234f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  206478:	24 01                	and    $0x1,%al
  20647a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20647e:	eb 00                	jmp    206480 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa0>
                if f.debug_lower_hex() {
  206480:	eb b8                	jmp    20643a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x5a>
                } else if f.debug_upper_hex() {
  206482:	eb fc                	jmp    206480 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa0>
  206484:	cc                   	int3   
  206485:	cc                   	int3   
  206486:	cc                   	int3   
  206487:	cc                   	int3   
  206488:	cc                   	int3   
  206489:	cc                   	int3   
  20648a:	cc                   	int3   
  20648b:	cc                   	int3   
  20648c:	cc                   	int3   
  20648d:	cc                   	int3   
  20648e:	cc                   	int3   
  20648f:	cc                   	int3   

0000000000206490 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3231da5c25fe9b6bE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  206490:	48 83 ec 28          	sub    $0x28,%rsp
  206494:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206499:	48 89 f8             	mov    %rdi,%rax
  20649c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2064a1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2064a6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        f.pad("()")
  2064ab:	48 8d 35 4e 9d ff ff 	lea    -0x62b2(%rip),%rsi        # 200200 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x176>
  2064b2:	ba 02 00 00 00       	mov    $0x2,%edx
  2064b7:	e8 74 16 03 00       	callq  237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  2064bc:	88 44 24 17          	mov    %al,0x17(%rsp)
  2064c0:	8a 44 24 17          	mov    0x17(%rsp),%al
    }
  2064c4:	24 01                	and    $0x1,%al
  2064c6:	0f b6 c0             	movzbl %al,%eax
  2064c9:	48 83 c4 28          	add    $0x28,%rsp
  2064cd:	c3                   	retq   
  2064ce:	cc                   	int3   
  2064cf:	cc                   	int3   

00000000002064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>:
    pub const fn new_v1_formatted(
  2064d0:	48 83 ec 48          	sub    $0x48,%rsp
  2064d4:	4d 89 ca             	mov    %r9,%r10
  2064d7:	48 89 f8             	mov    %rdi,%rax
  2064da:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  2064df:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2064e4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2064e9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2064ee:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  2064f3:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  2064f8:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
        Arguments { pieces, fmt: Some(fmt), args }
  2064fd:	4c 89 14 24          	mov    %r10,(%rsp)
  206501:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  206506:	48 89 37             	mov    %rsi,(%rdi)
  206509:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  20650d:	48 8b 34 24          	mov    (%rsp),%rsi
  206511:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206516:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  20651a:	48 89 57 18          	mov    %rdx,0x18(%rdi)
  20651e:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
  206522:	4c 89 47 28          	mov    %r8,0x28(%rdi)
    }
  206526:	48 83 c4 48          	add    $0x48,%rsp
  20652a:	c3                   	retq   
  20652b:	cc                   	int3   
  20652c:	cc                   	int3   
  20652d:	cc                   	int3   
  20652e:	cc                   	int3   
  20652f:	cc                   	int3   

0000000000206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  206530:	48 83 ec 68          	sub    $0x68,%rsp
  206534:	4c 89 04 24          	mov    %r8,(%rsp)
  206538:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20653d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  206542:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206547:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20654c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  206551:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  206556:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20655b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  206560:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  206565:	4c 39 c2             	cmp    %r8,%rdx
  206568:	72 1b                	jb     206585 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0x55>
  20656a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20656f:	48 8b 0c 24          	mov    (%rsp),%rcx
  206573:	48 83 c1 01          	add    $0x1,%rcx
  206577:	48 39 c8             	cmp    %rcx,%rax
  20657a:	0f 97 c0             	seta   %al
  20657d:	24 01                	and    $0x1,%al
  20657f:	88 44 24 37          	mov    %al,0x37(%rsp)
  206583:	eb 05                	jmp    20658a <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0x5a>
  206585:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20658a:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20658f:	75 4c                	jne    2065dd <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0xad>
  206591:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206596:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20659b:	48 8b 14 24          	mov    (%rsp),%rdx
  20659f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2065a4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2065a9:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  2065ae:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  2065b5:	00 00 
  2065b7:	4c 89 01             	mov    %r8,(%rcx)
  2065ba:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  2065be:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  2065c3:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2065c8:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  2065cc:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  2065d0:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  2065d4:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  2065d8:	48 83 c4 68          	add    $0x68,%rsp
  2065dc:	c3                   	retq   
            panic!("invalid args");
  2065dd:	48 8d 3d 1e 9c ff ff 	lea    -0x63e2(%rip),%rdi        # 200202 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x174>
  2065e4:	48 8d 15 85 37 03 00 	lea    0x33785(%rip),%rdx        # 239d70 <memcmp+0x1030>
  2065eb:	be 0c 00 00 00       	mov    $0xc,%esi
  2065f0:	e8 fb f5 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2065f5:	0f 0b                	ud2    
  2065f7:	cc                   	int3   
  2065f8:	cc                   	int3   
  2065f9:	cc                   	int3   
  2065fa:	cc                   	int3   
  2065fb:	cc                   	int3   
  2065fc:	cc                   	int3   
  2065fd:	cc                   	int3   
  2065fe:	cc                   	int3   
  2065ff:	cc                   	int3   

0000000000206600 <_ZN9r3_kernel3cpu13hw_interrupts16pit_irq0_handler17h052240fa4a00c4aaE>:
use exceptions::IDT;
use interrupts::{prepare_default_handle, prepare_naked_handler, InterruptStackFrame};
use pic::CHAINED_PIC;
use pit::pit_callback;

extern "x86-interrupt" fn pit_irq0_handler(_stk: InterruptStackFrame) {
  206600:	41 53                	push   %r11
  206602:	41 52                	push   %r10
  206604:	41 51                	push   %r9
  206606:	41 50                	push   %r8
  206608:	57                   	push   %rdi
  206609:	56                   	push   %rsi
  20660a:	52                   	push   %rdx
  20660b:	51                   	push   %rcx
  20660c:	50                   	push   %rax
  20660d:	48 83 ec 20          	sub    $0x20,%rsp
  206611:	fc                   	cld    
    pit_callback();
  206612:	e8 d9 8a 02 00       	callq  22f0f0 <_ZN9r3_kernel3cpu3pit12pit_callback17ha4008cf7d5ddd5c3E>
    // 0th line is PIT
    CHAINED_PIC
  206617:	48 8d 3d 6c d0 ff ff 	lea    -0x2f94(%rip),%rdi        # 20368a <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  20661e:	e8 5d 71 02 00       	callq  22d780 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  206623:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206628:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20662d:	e8 6e 85 02 00       	callq  22eba0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  206632:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  206637:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20663c:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  206641:	e8 3a 86 02 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  206646:	48 89 04 24          	mov    %rax,(%rsp)
  20664a:	48 8b 3c 24          	mov    (%rsp),%rdi
  20664e:	be 20 00 00 00       	mov    $0x20,%esi
  206653:	e8 d8 6b 02 00       	callq  22d230 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E>
        .lock()
        .send_eoi((HARDWARE_INTERRUPTS_BASE + PIT_INTERRUPT_LINE) as u8);
  206658:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20665d:	e8 be 5b 00 00       	callq  20c220 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
}
  206662:	48 83 c4 20          	add    $0x20,%rsp
  206666:	58                   	pop    %rax
  206667:	59                   	pop    %rcx
  206668:	5a                   	pop    %rdx
  206669:	5e                   	pop    %rsi
  20666a:	5f                   	pop    %rdi
  20666b:	41 58                	pop    %r8
  20666d:	41 59                	pop    %r9
  20666f:	41 5a                	pop    %r10
  206671:	41 5b                	pop    %r11
  206673:	48 cf                	iretq  
  206675:	cc                   	int3   
  206676:	cc                   	int3   
  206677:	cc                   	int3   
  206678:	cc                   	int3   
  206679:	cc                   	int3   
  20667a:	cc                   	int3   
  20667b:	cc                   	int3   
  20667c:	cc                   	int3   
  20667d:	cc                   	int3   
  20667e:	cc                   	int3   
  20667f:	cc                   	int3   

0000000000206680 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE>:
    #[inline(always)]
    pub fn get_state() -> *const Self {
        // saves all the register states:
        let state_repr: *const Self;
        unsafe {
            asm!(
  206680:	41 57                	push   %r15
  206682:	41 56                	push   %r14
  206684:	41 55                	push   %r13
  206686:	41 54                	push   %r12
  206688:	41 53                	push   %r11
  20668a:	41 52                	push   %r10
  20668c:	41 51                	push   %r9
  20668e:	41 50                	push   %r8
  206690:	57                   	push   %rdi
  206691:	56                   	push   %rsi
  206692:	52                   	push   %rdx
  206693:	51                   	push   %rcx
  206694:	53                   	push   %rbx
  206695:	50                   	push   %rax
  206696:	55                   	push   %rbp
  206697:	48 89 e0             	mov    %rsp,%rax
  20669a:	48 81 ec 00 04 00 00 	sub    $0x400,%rsp
  2066a1:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2066a8:	00 
                out(reg) state_repr
            );
        }

        state_repr
    }
  2066a9:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  2066b0:	00 
  2066b1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2066b6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    // saves the CPU states, performs some work and enables
    // the next timer event, then loads the previously saved state
    // so execution can continue normally.
    unsafe {
        let state = CPURegistersState::get_state();
        let ctx = (*state).clone();
  2066bb:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2066c0:	e8 3b 95 00 00       	callq  20fc00 <_ZN79_$LT$r3_kernel..cpu..state..CPURegistersState$u20$as$u20$core..clone..Clone$GT$5clone17hcfd3dcfacdc6f887E>

        log::info!("Context: {:?}", ctx);
  2066c5:	48 c7 84 24 c8 00 00 	movq   $0x3,0xc8(%rsp)
  2066cc:	00 03 00 00 00 
  2066d1:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2066d8:	00 
  2066d9:	48 8d 35 18 9c ff ff 	lea    -0x63e8(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2066e0:	e8 eb c8 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2066e5:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2066e9:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2066ed:	a8 01                	test   $0x1,%al
  2066ef:	75 0c                	jne    2066fd <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0x7d>
  2066f1:	eb 00                	jmp    2066f3 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0x73>
  2066f3:	c6 84 24 d7 00 00 00 	movb   $0x0,0xd7(%rsp)
  2066fa:	00 
  2066fb:	eb 5a                	jmp    206757 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0xd7>
    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
    // is set to a usize that is a valid discriminant for `LevelFilter`.
    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  2066fd:	c6 84 24 2f 01 00 00 	movb   $0x0,0x12f(%rsp)
  206704:	00 
  206705:	48 8b 3d 3c 74 03 00 	mov    0x3743c(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20670c:	0f b6 b4 24 2f 01 00 	movzbl 0x12f(%rsp),%esi
  206713:	00 
  206714:	e8 d7 4a 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  206719:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  206720:	00 
  206721:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  206728:	00 
  206729:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  206730:	00 
  206731:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  206738:	00 
  206739:	48 8d b4 24 d8 00 00 	lea    0xd8(%rsp),%rsi
  206740:	00 
  206741:	e8 8a c8 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  206746:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20674a:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20674e:	24 01                	and    $0x1,%al
  206750:	88 84 24 d7 00 00 00 	mov    %al,0xd7(%rsp)
  206757:	f6 84 24 d7 00 00 00 	testb  $0x1,0xd7(%rsp)
  20675e:	01 
  20675f:	75 0a                	jne    20676b <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0xeb>

        lapic::LAPICUtils::eoi();
  206761:	e8 7a fa 00 00       	callq  2161e0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils3eoi17hc1efca52a063c38bE>
  206766:	e9 8b 00 00 00       	jmpq   2067f6 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0x176>
        log::info!("Context: {:?}", ctx);
  20676b:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  206770:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  206777:	00 
  206778:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  20677f:	00 
  206780:	48 8d 35 c9 98 00 00 	lea    0x98c9(%rip),%rsi        # 210050 <_ZN77_$LT$r3_kernel..cpu..state..CPURegistersState$u20$as$u20$core..fmt..Debug$GT$3fmt17h4d280037658e2b33E>
  206787:	e8 14 8f 00 00       	callq  20f6a0 <_ZN4core3fmt10ArgumentV13new17hcce5101e42e4aeb9E>
  20678c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206791:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  206796:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20679b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2067a0:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  2067a7:	00 
  2067a8:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  2067af:	00 
  2067b0:	48 8d 8c 24 10 01 00 	lea    0x110(%rsp),%rcx
  2067b7:	00 
  2067b8:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  2067bf:	00 
  2067c0:	48 8d 35 c1 35 03 00 	lea    0x335c1(%rip),%rsi        # 239d88 <memcmp+0x1048>
  2067c7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2067cd:	4c 89 c2             	mov    %r8,%rdx
  2067d0:	e8 5b fd ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2067d5:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  2067dc:	00 
  2067dd:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  2067e4:	00 
  2067e5:	48 8d 15 ac 35 03 00 	lea    0x335ac(%rip),%rdx        # 239d98 <memcmp+0x1058>
  2067ec:	e8 8f c5 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2067f1:	e9 6b ff ff ff       	jmpq   206761 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE+0xe1>
        SystemTimer::post_shot();
  2067f6:	e8 85 f7 00 00       	callq  215f80 <_ZN9r3_kernel6system5timer11SystemTimer9post_shot17h42190481ab8f033aE>
  2067fb:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  206800:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  206807:	00 
  206808:	48 8d 44 24 28       	lea    0x28(%rsp),%rax

    #[inline(always)]
    pub fn load_state(state: &Self) {
        unsafe {
            asm!(
  20680d:	48 89 c4             	mov    %rax,%rsp
  206810:	5d                   	pop    %rbp
  206811:	58                   	pop    %rax
  206812:	5b                   	pop    %rbx
  206813:	59                   	pop    %rcx
  206814:	5a                   	pop    %rdx
  206815:	5e                   	pop    %rsi
  206816:	5f                   	pop    %rdi
  206817:	41 58                	pop    %r8
  206819:	41 59                	pop    %r9
  20681b:	41 5a                	pop    %r10
  20681d:	41 5b                	pop    %r11
  20681f:	41 5c                	pop    %r12
  206821:	41 5d                	pop    %r13
  206823:	41 5e                	pop    %r14
  206825:	41 5f                	pop    %r15
  206827:	48 cf                	iretq  

        CPURegistersState::load_state(&ctx);
    }
}
  206829:	c3                   	retq   
  20682a:	cc                   	int3   
  20682b:	cc                   	int3   
  20682c:	cc                   	int3   
  20682d:	cc                   	int3   
  20682e:	cc                   	int3   
  20682f:	cc                   	int3   

0000000000206830 <_ZN9r3_kernel3cpu13hw_interrupts19setup_hw_interrupts17ha6aa69e3fa23ad1eE>:

pub fn setup_hw_interrupts() {
  206830:	48 83 ec 58          	sub    $0x58,%rsp
    let irq0_handle = prepare_default_handle(pit_irq0_handler);
  206834:	48 8d 3d c5 fd ff ff 	lea    -0x23b(%rip),%rdi        # 206600 <_ZN9r3_kernel3cpu13hw_interrupts16pit_irq0_handler17h052240fa4a00c4aaE>
  20683b:	e8 70 3a 02 00       	callq  22a2b0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  206840:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  206845:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20684a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20684f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206854:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  206859:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    IDT.lock().interrupts[PIT_INTERRUPT_LINE] = irq0_handle;
  20685e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206863:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206868:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20686d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206872:	48 8d 3d c6 cb ff ff 	lea    -0x343a(%rip),%rdi        # 20343f <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E>
  206879:	e8 72 57 02 00       	callq  22bff0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17hde3a1d3397207210E>
  20687e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206883:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206888:	e8 93 80 02 00       	callq  22e920 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h46cb2ac63999c8e5E>
  20688d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  206892:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206897:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20689c:	e8 4f 84 02 00       	callq  22ecf0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h244ec967040ad6ccE>
  2068a1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2068a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2068ab:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2068b0:	48 89 88 00 02 00 00 	mov    %rcx,0x200(%rax)
  2068b7:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2068bc:	48 89 88 08 02 00 00 	mov    %rcx,0x208(%rax)
  2068c3:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2068c8:	e8 83 56 00 00       	callq  20bf50 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h2928cdecfeff22d4E>
}
  2068cd:	48 83 c4 58          	add    $0x58,%rsp
  2068d1:	c3                   	retq   
  2068d2:	cc                   	int3   
  2068d3:	cc                   	int3   
  2068d4:	cc                   	int3   
  2068d5:	cc                   	int3   
  2068d6:	cc                   	int3   
  2068d7:	cc                   	int3   
  2068d8:	cc                   	int3   
  2068d9:	cc                   	int3   
  2068da:	cc                   	int3   
  2068db:	cc                   	int3   
  2068dc:	cc                   	int3   
  2068dd:	cc                   	int3   
  2068de:	cc                   	int3   
  2068df:	cc                   	int3   

00000000002068e0 <_ZN9r3_kernel3cpu13hw_interrupts26setup_post_apic_interrupts17h4c88a57af7e8306bE>:

pub fn setup_post_apic_interrupts() {
  2068e0:	48 83 ec 58          	sub    $0x58,%rsp
    let irq0x30_handle = prepare_naked_handler(tsc_deadline_interrupt);
  2068e4:	48 8d 3d 95 fd ff ff 	lea    -0x26b(%rip),%rdi        # 206680 <_ZN9r3_kernel3cpu13hw_interrupts22tsc_deadline_interrupt17ha3e37ec624d9591eE>
  2068eb:	e8 e0 3a 02 00       	callq  22a3d0 <_ZN9r3_kernel3cpu10interrupts21prepare_naked_handler17h2659abea1fa354fbE>
  2068f0:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2068f5:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2068fa:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2068ff:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206904:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  206909:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    IDT.lock().naked_0 = irq0x30_handle;
  20690e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206913:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206918:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20691d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206922:	48 8d 3d 16 cb ff ff 	lea    -0x34ea(%rip),%rdi        # 20343f <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E>
  206929:	e8 c2 56 02 00       	callq  22bff0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17hde3a1d3397207210E>
  20692e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206933:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206938:	e8 e3 7f 02 00       	callq  22e920 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h46cb2ac63999c8e5E>
  20693d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  206942:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206947:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20694c:	e8 9f 83 02 00       	callq  22ecf0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h244ec967040ad6ccE>
  206951:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206956:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20695b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  206960:	48 89 88 00 03 00 00 	mov    %rcx,0x300(%rax)
  206967:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20696c:	48 89 88 08 03 00 00 	mov    %rcx,0x308(%rax)
  206973:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206978:	e8 d3 55 00 00       	callq  20bf50 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h2928cdecfeff22d4E>
}
  20697d:	48 83 c4 58          	add    $0x58,%rsp
  206981:	c3                   	retq   
  206982:	cc                   	int3   
  206983:	cc                   	int3   
  206984:	cc                   	int3   
  206985:	cc                   	int3   
  206986:	cc                   	int3   
  206987:	cc                   	int3   
  206988:	cc                   	int3   
  206989:	cc                   	int3   
  20698a:	cc                   	int3   
  20698b:	cc                   	int3   
  20698c:	cc                   	int3   
  20698d:	cc                   	int3   
  20698e:	cc                   	int3   
  20698f:	cc                   	int3   

0000000000206990 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h6e8530f8c2c6f51bE>:
        impl const From<$Small> for $Large {
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline]
            fn from(small: $Small) -> Self {
  206990:	48 83 ec 02          	sub    $0x2,%rsp
  206994:	66 89 f8             	mov    %di,%ax
  206997:	66 89 04 24          	mov    %ax,(%rsp)
                small as Self
  20699b:	0f b7 c0             	movzwl %ax,%eax
            }
  20699e:	48 83 c4 02          	add    $0x2,%rsp
  2069a2:	c3                   	retq   
  2069a3:	cc                   	int3   
  2069a4:	cc                   	int3   
  2069a5:	cc                   	int3   
  2069a6:	cc                   	int3   
  2069a7:	cc                   	int3   
  2069a8:	cc                   	int3   
  2069a9:	cc                   	int3   
  2069aa:	cc                   	int3   
  2069ab:	cc                   	int3   
  2069ac:	cc                   	int3   
  2069ad:	cc                   	int3   
  2069ae:	cc                   	int3   
  2069af:	cc                   	int3   

00000000002069b0 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE>:
}

impl UART {
    // set UART in loopback mode and check if same data written is read
    // as it is, if not, the chip is faulty.
    fn chip_works_fine(port_4: &Port, port_0: &Port) -> bool {
  2069b0:	48 83 ec 38          	sub    $0x38,%rsp
  2069b4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2069b9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2069be:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2069c3:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        port_4.write_u8(X86_COM_PORT_LOOPBACK_MODE);
  2069c8:	be 1b 00 00 00       	mov    $0x1b,%esi
  2069cd:	e8 fe 28 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  2069d2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // write some dummy byte
        port_0.write_u8(0xaf);
  2069d7:	be af 00 00 00       	mov    $0xaf,%esi
  2069dc:	e8 ef 28 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  2069e1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // try reading the same byte:
        match port_0.read_u8() {
  2069e6:	e8 c5 28 01 00       	callq  2192b0 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>
  2069eb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2069ef:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2069f3:	3c af                	cmp    $0xaf,%al
  2069f5:	75 11                	jne    206a08 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x58>
  2069f7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            0xaf => {
                // set chip in normal mode
                port_4.write_u8(0x0f);
  2069fc:	be 0f 00 00 00       	mov    $0xf,%esi
  206a01:	e8 ca 28 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  206a06:	eb 13                	jmp    206a1b <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x6b>
                return true;
            }
            _ => return false,
  206a08:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
        }
    }
  206a0d:	8a 44 24 27          	mov    0x27(%rsp),%al
  206a11:	24 01                	and    $0x1,%al
  206a13:	0f b6 c0             	movzbl %al,%eax
  206a16:	48 83 c4 38          	add    $0x38,%rsp
  206a1a:	c3                   	retq   
                return true;
  206a1b:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  206a20:	eb eb                	jmp    206a0d <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x5d>
  206a22:	cc                   	int3   
  206a23:	cc                   	int3   
  206a24:	cc                   	int3   
  206a25:	cc                   	int3   
  206a26:	cc                   	int3   
  206a27:	cc                   	int3   
  206a28:	cc                   	int3   
  206a29:	cc                   	int3   
  206a2a:	cc                   	int3   
  206a2b:	cc                   	int3   
  206a2c:	cc                   	int3   
  206a2d:	cc                   	int3   
  206a2e:	cc                   	int3   
  206a2f:	cc                   	int3   

0000000000206a30 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E>:

    pub fn new() -> Option<Self> {
  206a30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  206a37:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  206a3c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206a41:	bf f8 03 00 00       	mov    $0x3f8,%edi
  206a46:	31 f6                	xor    %esi,%esi
        // configuration
        let port_0 = Port::new(X86_COM_PORT, false);
  206a48:	e8 33 28 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206a4d:	88 54 24 30          	mov    %dl,0x30(%rsp)
  206a51:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206a56:	bf f9 03 00 00       	mov    $0x3f9,%edi
  206a5b:	31 f6                	xor    %esi,%esi
        let port_1 = Port::new(X86_COM_PORT + 1, false);
  206a5d:	e8 1e 28 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206a62:	88 54 24 40          	mov    %dl,0x40(%rsp)
  206a66:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206a6b:	bf fa 03 00 00       	mov    $0x3fa,%edi
  206a70:	31 f6                	xor    %esi,%esi
        let port_2 = Port::new(X86_COM_PORT + 2, false);
  206a72:	e8 09 28 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206a77:	88 54 24 50          	mov    %dl,0x50(%rsp)
  206a7b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  206a80:	bf fb 03 00 00       	mov    $0x3fb,%edi
  206a85:	31 f6                	xor    %esi,%esi
        let port_3 = Port::new(X86_COM_PORT + 3, false);
  206a87:	e8 f4 27 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206a8c:	88 54 24 60          	mov    %dl,0x60(%rsp)
  206a90:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  206a95:	bf fc 03 00 00       	mov    $0x3fc,%edi
  206a9a:	31 f6                	xor    %esi,%esi
        let port_4 = Port::new(X86_COM_PORT + 4, false);
  206a9c:	e8 df 27 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206aa1:	88 54 24 70          	mov    %dl,0x70(%rsp)
  206aa5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)

        // read only port.
        let port_5 = Port::new(X86_COM_PORT + 5, true);
  206aaa:	bf fd 03 00 00       	mov    $0x3fd,%edi
  206aaf:	be 01 00 00 00       	mov    $0x1,%esi
  206ab4:	e8 c7 27 01 00       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206ab9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206abe:	88 54 24 17          	mov    %dl,0x17(%rsp)
  206ac2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  206ac9:	00 
  206aca:	80 e2 01             	and    $0x1,%dl
  206acd:	88 94 24 a0 00 00 00 	mov    %dl,0xa0(%rsp)

        port_1.write_u8(0x00);
  206ad4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206ad9:	31 f6                	xor    %esi,%esi
  206adb:	e8 f0 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_3.write_u8(0x80);
  206ae0:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  206ae5:	be 80 00 00 00       	mov    $0x80,%esi
  206aea:	e8 e1 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_0.write_u8(0x03);
  206aef:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  206af4:	be 03 00 00 00       	mov    $0x3,%esi
  206af9:	e8 d2 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_1.write_u8(0x00);
  206afe:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206b03:	31 f6                	xor    %esi,%esi
  206b05:	e8 c6 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_3.write_u8(0x03);
  206b0a:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  206b0f:	be 03 00 00 00       	mov    $0x3,%esi
  206b14:	e8 b7 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_2.write_u8(0xC7);
  206b19:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  206b1e:	be c7 00 00 00       	mov    $0xc7,%esi
  206b23:	e8 a8 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_4.write_u8(0x0B);
  206b28:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  206b2d:	be 0b 00 00 00       	mov    $0xb,%esi
  206b32:	e8 99 27 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>

        // check for faulty chip:
        if !UART::chip_works_fine(&port_4, &port_0) {
  206b37:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  206b3c:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  206b41:	e8 6a fe ff ff       	callq  2069b0 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE>
  206b46:	88 44 24 07          	mov    %al,0x7(%rsp)
  206b4a:	8a 44 24 07          	mov    0x7(%rsp),%al
  206b4e:	34 ff                	xor    $0xff,%al
  206b50:	a8 01                	test   $0x1,%al
  206b52:	75 69                	jne    206bbd <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E+0x18d>
  206b54:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206b59:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  206b5d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            return None;
        }

        // return the UART instance:
        Some(UART {
            port_0: port_0,
  206b62:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  206b67:	40 8a 74 24 30       	mov    0x30(%rsp),%sil
        Some(UART {
  206b6c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  206b71:	40 80 e6 01          	and    $0x1,%sil
  206b75:	40 88 b4 24 80 00 00 	mov    %sil,0x80(%rsp)
  206b7c:	00 
  206b7d:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  206b84:	00 
  206b85:	80 e1 01             	and    $0x1,%cl
  206b88:	88 8c 24 90 00 00 00 	mov    %cl,0x90(%rsp)
  206b8f:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  206b94:	48 89 08             	mov    %rcx,(%rax)
  206b97:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  206b9e:	00 
  206b9f:	48 89 48 08          	mov    %rcx,0x8(%rax)
  206ba3:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  206baa:	00 
  206bab:	48 89 48 10          	mov    %rcx,0x10(%rax)
  206baf:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  206bb6:	00 
  206bb7:	48 89 48 18          	mov    %rcx,0x18(%rax)
            port_5: port_5,
        })
    }
  206bbb:	eb 09                	jmp    206bc6 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E+0x196>
  206bbd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            return None;
  206bc2:	c6 40 08 02          	movb   $0x2,0x8(%rax)
  206bc6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  206bcb:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  206bd2:	c3                   	retq   
  206bd3:	cc                   	int3   
  206bd4:	cc                   	int3   
  206bd5:	cc                   	int3   
  206bd6:	cc                   	int3   
  206bd7:	cc                   	int3   
  206bd8:	cc                   	int3   
  206bd9:	cc                   	int3   
  206bda:	cc                   	int3   
  206bdb:	cc                   	int3   
  206bdc:	cc                   	int3   
  206bdd:	cc                   	int3   
  206bde:	cc                   	int3   
  206bdf:	cc                   	int3   

0000000000206be0 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17ha7bcda3ea9842aa9E>:

    #[inline]
    pub fn transit_empty(&self) -> bool {
  206be0:	48 83 ec 18          	sub    $0x18,%rsp
  206be4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.port_5.read_u8() & X86_COM_PORT_EMPTY_FLAG != 0
  206be9:	48 83 c7 10          	add    $0x10,%rdi
  206bed:	e8 be 26 01 00       	callq  2192b0 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>
  206bf2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206bf6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206bfa:	24 20                	and    $0x20,%al
  206bfc:	3c 00                	cmp    $0x0,%al
  206bfe:	0f 95 c0             	setne  %al
    }
  206c01:	24 01                	and    $0x1,%al
  206c03:	0f b6 c0             	movzbl %al,%eax
  206c06:	48 83 c4 18          	add    $0x18,%rsp
  206c0a:	c3                   	retq   
  206c0b:	cc                   	int3   
  206c0c:	cc                   	int3   
  206c0d:	cc                   	int3   
  206c0e:	cc                   	int3   
  206c0f:	cc                   	int3   

0000000000206c10 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>:
    pub fn read_u8(&self) -> u8 {
        while !self.transit_received() {}
        self.port_0.read_u8()
    }

    pub fn write_u8(&self, value: u8) {
  206c10:	48 83 ec 28          	sub    $0x28,%rsp
  206c14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206c19:	40 88 f0             	mov    %sil,%al
  206c1c:	88 44 24 17          	mov    %al,0x17(%rsp)
  206c20:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  206c25:	88 44 24 27          	mov    %al,0x27(%rsp)
  206c29:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.transit_empty() {}
  206c2e:	e8 ad ff ff ff       	callq  206be0 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17ha7bcda3ea9842aa9E>
  206c33:	88 44 24 07          	mov    %al,0x7(%rsp)
  206c37:	8a 44 24 07          	mov    0x7(%rsp),%al
  206c3b:	34 ff                	xor    $0xff,%al
  206c3d:	a8 01                	test   $0x1,%al
  206c3f:	75 e8                	jne    206c29 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E+0x19>
  206c41:	8a 44 24 17          	mov    0x17(%rsp),%al
  206c45:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.port_0.write_u8(value);
  206c4a:	0f b6 f0             	movzbl %al,%esi
  206c4d:	e8 7e 26 01 00       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  206c52:	48 83 c4 28          	add    $0x28,%rsp
  206c56:	c3                   	retq   
  206c57:	cc                   	int3   
  206c58:	cc                   	int3   
  206c59:	cc                   	int3   
  206c5a:	cc                   	int3   
  206c5b:	cc                   	int3   
  206c5c:	cc                   	int3   
  206c5d:	cc                   	int3   
  206c5e:	cc                   	int3   
  206c5f:	cc                   	int3   

0000000000206c60 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE>:
            buffer[index] = self.read_u8();
        }
    }

    #[inline]
    fn is_writable_char(&self, char: &u8) -> bool {
  206c60:	48 83 ec 20          	sub    $0x20,%rsp
  206c64:	48 89 34 24          	mov    %rsi,(%rsp)
  206c68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206c6d:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        return *char >= 0x20 && *char <= 0x7e;
  206c72:	80 3e 20             	cmpb   $0x20,(%rsi)
  206c75:	73 07                	jae    206c7e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE+0x1e>
  206c77:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  206c7c:	eb 10                	jmp    206c8e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE+0x2e>
  206c7e:	48 8b 04 24          	mov    (%rsp),%rax
  206c82:	80 38 7e             	cmpb   $0x7e,(%rax)
  206c85:	0f 96 c0             	setbe  %al
  206c88:	24 01                	and    $0x1,%al
  206c8a:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  206c8e:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206c92:	24 01                	and    $0x1,%al
  206c94:	0f b6 c0             	movzbl %al,%eax
  206c97:	48 83 c4 20          	add    $0x20,%rsp
  206c9b:	c3                   	retq   
  206c9c:	cc                   	int3   
  206c9d:	cc                   	int3   
  206c9e:	cc                   	int3   
  206c9f:	cc                   	int3   

0000000000206ca0 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE>:

    pub fn write_safe_string(&self, string: &str) {
  206ca0:	48 83 ec 78          	sub    $0x78,%rsp
  206ca4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  206ca9:	48 89 f0             	mov    %rsi,%rax
  206cac:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  206cb1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206cb6:	48 89 f8             	mov    %rdi,%rax
  206cb9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  206cbe:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206cc3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  206cc8:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  206ccd:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
        for char in string.bytes() {
  206cd2:	e8 19 9c 00 00       	callq  2108f0 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h43a7e9e40985a180E>
  206cd7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206cdc:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  206ce1:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  206ce6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  206ceb:	e8 70 c7 02 00       	callq  233460 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>
  206cf0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206cf5:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  206cfa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  206cff:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  206d04:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  206d09:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  206d0e:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  206d13:	e8 28 3f 00 00       	callq  20ac40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdbc274460ee4dd34E>
  206d18:	88 54 24 51          	mov    %dl,0x51(%rsp)
  206d1c:	88 44 24 50          	mov    %al,0x50(%rsp)
  206d20:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  206d25:	a8 01                	test   $0x1,%al
  206d27:	74 06                	je     206d2f <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x8f>
  206d29:	eb 00                	jmp    206d2b <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x8b>
  206d2b:	eb 07                	jmp    206d34 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x94>
  206d2d:	0f 0b                	ud2    
            } else {
                // invalid char byte
                self.write_u8(COM_INVALID_CHAR_BYTE);
            }
        }
    }
  206d2f:	48 83 c4 78          	add    $0x78,%rsp
  206d33:	c3                   	retq   
        for char in string.bytes() {
  206d34:	8a 44 24 51          	mov    0x51(%rsp),%al
  206d38:	88 44 24 76          	mov    %al,0x76(%rsp)
  206d3c:	88 44 24 77          	mov    %al,0x77(%rsp)
  206d40:	88 44 24 57          	mov    %al,0x57(%rsp)
            if char == b'\n' {
  206d44:	80 7c 24 57 0a       	cmpb   $0xa,0x57(%rsp)
  206d49:	75 11                	jne    206d5c <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xbc>
  206d4b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\r');
  206d50:	be 0d 00 00 00       	mov    $0xd,%esi
  206d55:	e8 b6 fe ff ff       	callq  206c10 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  206d5a:	eb 42                	jmp    206d9e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xfe>
  206d5c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            } else if self.is_writable_char(&char) {
  206d61:	48 8d 74 24 57       	lea    0x57(%rsp),%rsi
  206d66:	e8 f5 fe ff ff       	callq  206c60 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE>
  206d6b:	88 44 24 07          	mov    %al,0x7(%rsp)
  206d6f:	8a 44 24 07          	mov    0x7(%rsp),%al
  206d73:	a8 01                	test   $0x1,%al
  206d75:	75 13                	jne    206d8a <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xea>
  206d77:	eb 00                	jmp    206d79 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xd9>
  206d79:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(COM_INVALID_CHAR_BYTE);
  206d7e:	be 3f 00 00 00       	mov    $0x3f,%esi
  206d83:	e8 88 fe ff ff       	callq  206c10 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  206d88:	eb 84                	jmp    206d0e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  206d8a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(char);
  206d8f:	0f b6 74 24 57       	movzbl 0x57(%rsp),%esi
  206d94:	e8 77 fe ff ff       	callq  206c10 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  206d99:	e9 70 ff ff ff       	jmpq   206d0e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  206d9e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\n');
  206da3:	be 0a 00 00 00       	mov    $0xa,%esi
  206da8:	e8 63 fe ff ff       	callq  206c10 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  206dad:	e9 5c ff ff ff       	jmpq   206d0e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  206db2:	cc                   	int3   
  206db3:	cc                   	int3   
  206db4:	cc                   	int3   
  206db5:	cc                   	int3   
  206db6:	cc                   	int3   
  206db7:	cc                   	int3   
  206db8:	cc                   	int3   
  206db9:	cc                   	int3   
  206dba:	cc                   	int3   
  206dbb:	cc                   	int3   
  206dbc:	cc                   	int3   
  206dbd:	cc                   	int3   
  206dbe:	cc                   	int3   
  206dbf:	cc                   	int3   

0000000000206dc0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>:
}

impl fmt::Write for UART {
    fn write_str(&mut self, string: &str) -> fmt::Result {
  206dc0:	48 83 ec 28          	sub    $0x28,%rsp
  206dc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206dc9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206dce:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write_safe_string(string);
  206dd3:	e8 c8 fe ff ff       	callq  206ca0 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE>
        return Ok(());
  206dd8:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  206ddd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206de1:	24 01                	and    $0x1,%al
  206de3:	0f b6 c0             	movzbl %al,%eax
  206de6:	48 83 c4 28          	add    $0x28,%rsp
  206dea:	c3                   	retq   
  206deb:	cc                   	int3   
  206dec:	cc                   	int3   
  206ded:	cc                   	int3   
  206dee:	cc                   	int3   
  206def:	cc                   	int3   

0000000000206df0 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE>:
}

fn init_uart() -> Option<Mutex<UART>> {
  206df0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  206df7:	48 89 3c 24          	mov    %rdi,(%rsp)
  206dfb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if let Some(uart) = UART::new() {
  206e00:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  206e05:	e8 26 fc ff ff       	callq  206a30 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E>
  206e0a:	8a 54 24 18          	mov    0x18(%rsp),%dl
  206e0e:	80 ea 02             	sub    $0x2,%dl
  206e11:	b8 01 00 00 00       	mov    $0x1,%eax
  206e16:	31 c9                	xor    %ecx,%ecx
  206e18:	80 fa 00             	cmp    $0x0,%dl
  206e1b:	48 0f 44 c1          	cmove  %rcx,%rax
  206e1f:	48 83 f8 01          	cmp    $0x1,%rax
  206e23:	75 6a                	jne    206e8f <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0x9f>
  206e25:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  206e2a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206e2f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206e34:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206e39:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  206e3e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  206e43:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206e48:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        return Some(Mutex::new(uart));
  206e4d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206e52:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  206e57:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  206e5c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  206e63:	00 
  206e64:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  206e69:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  206e70:	00 
  206e71:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206e76:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  206e7d:	00 
  206e7e:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  206e83:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  206e88:	e8 03 78 02 00       	callq  22e690 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hba9b1c03bd7af26fE>
  206e8d:	eb 18                	jmp    206ea7 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0xb7>
  206e8f:	48 8b 04 24          	mov    (%rsp),%rax
    }
    None
  206e93:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  206e9a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  206e9f:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  206ea6:	c3                   	retq   
  206ea7:	48 8b 3c 24          	mov    (%rsp),%rdi
        return Some(Mutex::new(uart));
  206eab:	48 83 c7 08          	add    $0x8,%rdi
  206eaf:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  206eb4:	ba 28 00 00 00       	mov    $0x28,%edx
  206eb9:	e8 32 1e 03 00       	callq  238cf0 <memcpy>
  206ebe:	48 8b 04 24          	mov    (%rsp),%rax
  206ec2:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  206ec9:	eb cf                	jmp    206e9a <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0xaa>
  206ecb:	cc                   	int3   
  206ecc:	cc                   	int3   
  206ecd:	cc                   	int3   
  206ece:	cc                   	int3   
  206ecf:	cc                   	int3   

0000000000206ed0 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>:
        lazy_static!($($t)*);
    };
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
  206ed0:	48 83 ec 18          	sub    $0x18,%rsp
  206ed4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206ed9:	48 8d 05 08 7d 03 00 	lea    0x37d08(%rip),%rax        # 23ebe8 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha6c567e751ae2da6E>
  206ee0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
  206ee5:	48 8d 3d fc 7c 03 00 	lea    0x37cfc(%rip),%rdi        # 23ebe8 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha6c567e751ae2da6E>
  206eec:	e8 6f 28 00 00       	callq  209760 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE>
  206ef1:	48 89 04 24          	mov    %rax,(%rsp)
  206ef5:	48 8b 04 24          	mov    (%rsp),%rax
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
  206ef9:	48 83 c4 18          	add    $0x18,%rsp
  206efd:	c3                   	retq   
  206efe:	cc                   	int3   
  206eff:	cc                   	int3   

0000000000206f00 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>:
// This function is outside `RawVec` to minimize compile times. See the comment
// above `RawVec::grow_amortized` for details. (The `A` parameter isn't
// significant, because the number of different `A` types seen in practice is
// much smaller than the number of `T` types.)
#[inline(never)]
fn finish_grow<A>(
  206f00:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  206f07:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  206f0c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  206f11:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  206f16:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  206f1b:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  206f22:	00 
  206f23:	48 89 94 24 d8 00 00 	mov    %rdx,0xd8(%rsp)
  206f2a:	00 
  206f2b:	4c 89 84 24 e0 00 00 	mov    %r8,0xe0(%rsp)
  206f32:	00 
) -> Result<NonNull<[u8]>, TryReserveError>
where
    A: Allocator,
{
    // Check for the error here to minimize the size of `RawVec::grow_*`.
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  206f33:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  206f38:	e8 03 47 00 00       	callq  20b640 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE>
  206f3d:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  206f42:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  206f47:	e8 a4 4b 00 00       	callq  20baf0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E>
  206f4c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206f51:	48 85 c0             	test   %rax,%rax
  206f54:	74 06                	je     206f5c <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x5c>
  206f56:	eb 00                	jmp    206f58 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x58>
  206f58:	eb 37                	jmp    206f91 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x91>
  206f5a:	0f 0b                	ud2    
  206f5c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  206f61:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  206f66:	48 89 8c 24 00 01 00 	mov    %rcx,0x100(%rsp)
  206f6d:	00 
  206f6e:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  206f75:	00 
  206f76:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  206f7b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)

    alloc_guard(new_layout.size())?;
  206f80:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206f85:	e8 06 51 01 00       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  206f8a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206f8f:	eb 28                	jmp    206fb9 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb9>
  206f91:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  206f96:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  206f9b:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  206fa0:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  206fa7:	00 
  206fa8:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
  206faf:	00 
  206fb0:	e8 ab 3d 00 00       	callq  20ad60 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h6bce559bf06336b0E>
#![no_std] // don't link the Rust standard library
  206fb5:	eb 00                	jmp    206fb7 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb7>
    } else {
        alloc.allocate(new_layout)
    };

    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
}
  206fb7:	eb 7c                	jmp    207035 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x135>
  206fb9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    alloc_guard(new_layout.size())?;
  206fbe:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  206fc5:	00 
  206fc6:	e8 75 0a 01 00       	callq  217a40 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E>
  206fcb:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  206fd0:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  206fd7:	00 
  206fd8:	e8 d3 48 00 00       	callq  20b8b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E>
  206fdd:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  206fe2:	48 85 c0             	test   %rax,%rax
  206fe5:	74 06                	je     206fed <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xed>
  206fe7:	eb 00                	jmp    206fe9 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xe9>
  206fe9:	eb 1e                	jmp    207009 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x109>
  206feb:	0f 0b                	ud2    
  206fed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    let memory = if let Some((ptr, old_layout)) = current_memory {
  206ff2:	b8 01 00 00 00       	mov    $0x1,%eax
  206ff7:	31 c9                	xor    %ecx,%ecx
  206ff9:	48 83 3a 00          	cmpq   $0x0,(%rdx)
  206ffd:	48 0f 44 c1          	cmove  %rcx,%rax
  207001:	48 83 f8 01          	cmp    $0x1,%rax
  207005:	74 3b                	je     207042 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x142>
  207007:	eb 75                	jmp    20707e <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x17e>
  207009:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    alloc_guard(new_layout.size())?;
  20700e:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207015:	00 
  207016:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  20701d:	00 
  20701e:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  207025:	00 
  207026:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  20702d:	00 
  20702e:	e8 bd 3c 00 00       	callq  20acf0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h49782eb3ee2624a2E>
  207033:	eb 82                	jmp    206fb7 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb7>
  207035:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
}
  20703a:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  207041:	c3                   	retq   
  207042:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    let memory = if let Some((ptr, old_layout)) = current_memory {
  207047:	48 8b 08             	mov    (%rax),%rcx
  20704a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20704f:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  207056:	00 
  207057:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20705b:	48 8b 40 10          	mov    0x10(%rax),%rax
  20705f:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  207066:	00 
  207067:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20706e:	00 
            intrinsics::assume(old_layout.align() == new_layout.align());
  20706f:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  207076:	00 
  207077:	e8 24 50 01 00       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  20707c:	eb 57                	jmp    2070d5 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1d5>
  20707e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        alloc.allocate(new_layout)
  207083:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  207088:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20708d:	e8 de 9f 01 00       	callq  221070 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h02f8801b0183b761E>
  207092:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  207099:	00 
  20709a:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2070a1:	00 
    let memory = if let Some((ptr, old_layout)) = current_memory {
  2070a2:	eb 00                	jmp    2070a4 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1a4>
  2070a4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
  2070a9:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  2070b0:	00 
  2070b1:	48 8b 94 24 b0 00 00 	mov    0xb0(%rsp),%rdx
  2070b8:	00 
  2070b9:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  2070be:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2070c5:	00 
  2070c6:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  2070cd:	00 
  2070ce:	e8 1d 46 00 00       	callq  20b6f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E>
  2070d3:	eb 45                	jmp    20711a <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x21a>
            intrinsics::assume(old_layout.align() == new_layout.align());
  2070d5:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2070da:	e8 c1 4f 01 00       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  2070df:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2070e4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            alloc.grow(ptr, old_layout, new_layout)
  2070e9:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  2070f0:	00 
  2070f1:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  2070f8:	00 
  2070f9:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  2070fe:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
  207103:	e8 18 9f 01 00       	callq  221020 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf6a7d38fd3e79973E>
  207108:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  20710f:	00 
  207110:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  207117:	00 
    let memory = if let Some((ptr, old_layout)) = current_memory {
  207118:	eb 8a                	jmp    2070a4 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1a4>
}
  20711a:	e9 16 ff ff ff       	jmpq   207035 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x135>
  20711f:	cc                   	int3   

0000000000207120 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h86893349264546edE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
  207120:	48 83 ec 38          	sub    $0x38,%rsp
  207124:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  207129:	48 8b 0f             	mov    (%rdi),%rcx
  20712c:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207130:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207135:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20713a:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20713f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207144:	e8 47 4c 01 00       	callq  21bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  207149:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20714e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  207153:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  207158:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20715d:	48 83 c4 38          	add    $0x38,%rsp
  207161:	c3                   	retq   
  207162:	cc                   	int3   
  207163:	cc                   	int3   
  207164:	cc                   	int3   
  207165:	cc                   	int3   
  207166:	cc                   	int3   
  207167:	cc                   	int3   
  207168:	cc                   	int3   
  207169:	cc                   	int3   
  20716a:	cc                   	int3   
  20716b:	cc                   	int3   
  20716c:	cc                   	int3   
  20716d:	cc                   	int3   
  20716e:	cc                   	int3   
  20716f:	cc                   	int3   

0000000000207170 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hf886e098f4878047E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  207170:	48 83 ec 20          	sub    $0x20,%rsp
  207174:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20717b:	00 00 
  20717d:	48 8b 04 24          	mov    (%rsp),%rax
  207181:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207186:	48 83 c4 20          	add    $0x20,%rsp
  20718a:	c3                   	retq   
  20718b:	cc                   	int3   
  20718c:	cc                   	int3   
  20718d:	cc                   	int3   
  20718e:	cc                   	int3   
  20718f:	cc                   	int3   

0000000000207190 <_ZN5alloc7raw_vec14handle_reserve28_$u7b$$u7b$closure$u7d$$u7d$17h1efb542338459167E>:

// Central function for reserve error handling.
#[cfg(not(no_global_oom_handling))]
#[inline]
fn handle_reserve(result: Result<(), TryReserveError>) {
    match result.map_err(|e| e.kind()) {
  207190:	48 83 ec 28          	sub    $0x28,%rsp
  207194:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207199:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20719e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2071a3:	e8 78 76 01 00       	callq  21e820 <_ZN5alloc11collections15TryReserveError4kind17h258eb8c8c0660a86E>
  2071a8:	48 89 04 24          	mov    %rax,(%rsp)
  2071ac:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2071b1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2071b6:	48 8b 04 24          	mov    (%rsp),%rax
  2071ba:	48 83 c4 28          	add    $0x28,%rsp
  2071be:	c3                   	retq   
  2071bf:	cc                   	int3   

00000000002071c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h5ef58445af2f1ffdE>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  2071c0:	48 83 ec 58          	sub    $0x58,%rsp
  2071c4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2071c9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2071ce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2071d3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2071d8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2071dd:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  2071e2:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2071e6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  2071eb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2071f0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2071f5:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2071fa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2071ff:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207204:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn wrapping_sub(self, rhs: Self) -> Self {
            intrinsics::wrapping_sub(self, rhs)
  207209:	48 29 c8             	sub    %rcx,%rax
  20720c:	48 89 04 24          	mov    %rax,(%rsp)
  207210:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207215:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  207219:	48 39 c8             	cmp    %rcx,%rax
  20721c:	0f 97 c0             	seta   %al
    }
  20721f:	24 01                	and    $0x1,%al
  207221:	0f b6 c0             	movzbl %al,%eax
  207224:	48 83 c4 58          	add    $0x58,%rsp
  207228:	c3                   	retq   
  207229:	cc                   	int3   
  20722a:	cc                   	int3   
  20722b:	cc                   	int3   
  20722c:	cc                   	int3   
  20722d:	cc                   	int3   
  20722e:	cc                   	int3   
  20722f:	cc                   	int3   

0000000000207230 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h6c9536dd384d8cd6E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  207230:	48 83 ec 58          	sub    $0x58,%rsp
  207234:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  207239:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20723e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207243:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207248:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20724d:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  207252:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207256:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  20725b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  207260:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207265:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20726a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20726f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207274:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  207279:	48 29 c8             	sub    %rcx,%rax
  20727c:	48 89 04 24          	mov    %rax,(%rsp)
  207280:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207285:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  207289:	48 39 c8             	cmp    %rcx,%rax
  20728c:	0f 97 c0             	seta   %al
    }
  20728f:	24 01                	and    $0x1,%al
  207291:	0f b6 c0             	movzbl %al,%eax
  207294:	48 83 c4 58          	add    $0x58,%rsp
  207298:	c3                   	retq   
  207299:	cc                   	int3   
  20729a:	cc                   	int3   
  20729b:	cc                   	int3   
  20729c:	cc                   	int3   
  20729d:	cc                   	int3   
  20729e:	cc                   	int3   
  20729f:	cc                   	int3   

00000000002072a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17he7f2300bb740c949E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  2072a0:	48 83 ec 58          	sub    $0x58,%rsp
  2072a4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2072a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2072ae:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2072b3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2072b8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2072bd:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  2072c2:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2072c6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  2072cb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2072d0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2072d5:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2072da:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2072df:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2072e4:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2072e9:	48 29 c8             	sub    %rcx,%rax
  2072ec:	48 89 04 24          	mov    %rax,(%rsp)
  2072f0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2072f5:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  2072f9:	48 39 c8             	cmp    %rcx,%rax
  2072fc:	0f 97 c0             	seta   %al
    }
  2072ff:	24 01                	and    $0x1,%al
  207301:	0f b6 c0             	movzbl %al,%eax
  207304:	48 83 c4 58          	add    $0x58,%rsp
  207308:	c3                   	retq   
  207309:	cc                   	int3   
  20730a:	cc                   	int3   
  20730b:	cc                   	int3   
  20730c:	cc                   	int3   
  20730d:	cc                   	int3   
  20730e:	cc                   	int3   
  20730f:	cc                   	int3   

0000000000207310 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  207310:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  207317:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20731c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207321:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  207326:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20732b:	b8 20 00 00 00       	mov    $0x20,%eax
  207330:	48 83 f8 00          	cmp    $0x0,%rax
  207334:	75 07                	jne    20733d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x2d>
  207336:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20733b:	eb 13                	jmp    207350 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x40>
  20733d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207342:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  207347:	0f 94 c0             	sete   %al
  20734a:	24 01                	and    $0x1,%al
  20734c:	88 44 24 47          	mov    %al,0x47(%rsp)
  207350:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  207355:	75 0b                	jne    207362 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x52>
                let align = mem::align_of::<T>();
  207357:	48 c7 44 24 68 04 00 	movq   $0x4,0x68(%rsp)
  20735e:	00 00 
  207360:	eb 19                	jmp    20737b <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x6b>
  207362:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  207367:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20736e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  207373:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20737a:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  20737b:	eb 00                	jmp    20737d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x6d>
  20737d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207382:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207386:	48 c1 e7 05          	shl    $0x5,%rdi
  20738a:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  20738f:	be 04 00 00 00       	mov    $0x4,%esi
  207394:	e8 a7 4c 01 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  207399:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20739e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2073a3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2073a8:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  2073af:	00 
  2073b0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  2073b5:	48 8b 38             	mov    (%rax),%rdi
  2073b8:	e8 e3 20 01 00       	callq  2194a0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h2891587fd6e47c2cE>
  2073bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2073c2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2073c7:	e8 a4 21 01 00       	callq  219570 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  2073cc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2073d1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2073d6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2073db:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2073e0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2073e5:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2073ea:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2073ef:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2073f4:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  2073f9:	48 89 08             	mov    %rcx,(%rax)
  2073fc:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  207401:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207405:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  20740a:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20740e:	e9 5b ff ff ff       	jmpq   20736e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x5e>
  207413:	cc                   	int3   
  207414:	cc                   	int3   
  207415:	cc                   	int3   
  207416:	cc                   	int3   
  207417:	cc                   	int3   
  207418:	cc                   	int3   
  207419:	cc                   	int3   
  20741a:	cc                   	int3   
  20741b:	cc                   	int3   
  20741c:	cc                   	int3   
  20741d:	cc                   	int3   
  20741e:	cc                   	int3   
  20741f:	cc                   	int3   

0000000000207420 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  207420:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  207427:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20742c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207431:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  207436:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20743b:	b8 08 00 00 00       	mov    $0x8,%eax
  207440:	48 83 f8 00          	cmp    $0x0,%rax
  207444:	75 07                	jne    20744d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x2d>
  207446:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20744b:	eb 13                	jmp    207460 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x40>
  20744d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207452:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  207457:	0f 94 c0             	sete   %al
  20745a:	24 01                	and    $0x1,%al
  20745c:	88 44 24 47          	mov    %al,0x47(%rsp)
  207460:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  207465:	75 0b                	jne    207472 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x52>
                let align = mem::align_of::<T>();
  207467:	48 c7 44 24 68 08 00 	movq   $0x8,0x68(%rsp)
  20746e:	00 00 
  207470:	eb 19                	jmp    20748b <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x6b>
  207472:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  207477:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20747e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  207483:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20748a:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  20748b:	eb 00                	jmp    20748d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x6d>
  20748d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207492:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207496:	48 c1 e7 03          	shl    $0x3,%rdi
  20749a:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  20749f:	be 08 00 00 00       	mov    $0x8,%esi
  2074a4:	e8 97 4b 01 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  2074a9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2074ae:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2074b3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2074b8:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  2074bf:	00 
  2074c0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  2074c5:	48 8b 38             	mov    (%rax),%rdi
  2074c8:	e8 33 20 01 00       	callq  219500 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hf2b47319a3fe8fdcE>
  2074cd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2074d2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2074d7:	e8 94 20 01 00       	callq  219570 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  2074dc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2074e1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2074e6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2074eb:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2074f0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2074f5:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2074fa:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2074ff:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207504:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  207509:	48 89 08             	mov    %rcx,(%rax)
  20750c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  207511:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207515:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  20751a:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20751e:	e9 5b ff ff ff       	jmpq   20747e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x5e>
  207523:	cc                   	int3   
  207524:	cc                   	int3   
  207525:	cc                   	int3   
  207526:	cc                   	int3   
  207527:	cc                   	int3   
  207528:	cc                   	int3   
  207529:	cc                   	int3   
  20752a:	cc                   	int3   
  20752b:	cc                   	int3   
  20752c:	cc                   	int3   
  20752d:	cc                   	int3   
  20752e:	cc                   	int3   
  20752f:	cc                   	int3   

0000000000207530 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  207530:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  207537:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20753c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207541:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  207546:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20754b:	b8 06 00 00 00       	mov    $0x6,%eax
  207550:	48 83 f8 00          	cmp    $0x0,%rax
  207554:	75 07                	jne    20755d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x2d>
  207556:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20755b:	eb 13                	jmp    207570 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x40>
  20755d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207562:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  207567:	0f 94 c0             	sete   %al
  20756a:	24 01                	and    $0x1,%al
  20756c:	88 44 24 47          	mov    %al,0x47(%rsp)
  207570:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  207575:	75 0b                	jne    207582 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x52>
                let align = mem::align_of::<T>();
  207577:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  20757e:	00 00 
  207580:	eb 19                	jmp    20759b <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x6b>
  207582:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  207587:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20758e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  207593:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20759a:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  20759b:	eb 00                	jmp    20759d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x6d>
  20759d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2075a2:	48 6b 78 08 06       	imul   $0x6,0x8(%rax),%rdi
  2075a7:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  2075ac:	be 01 00 00 00       	mov    $0x1,%esi
  2075b1:	e8 8a 4a 01 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  2075b6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2075bb:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2075c0:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2075c5:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  2075cc:	00 
  2075cd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  2075d2:	48 8b 38             	mov    (%rax),%rdi
  2075d5:	e8 f6 1e 01 00       	callq  2194d0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h4b66210a99f50f58E>
  2075da:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2075df:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2075e4:	e8 87 1f 01 00       	callq  219570 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  2075e9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2075ee:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2075f3:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2075f8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2075fd:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207602:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  207607:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20760c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207611:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  207616:	48 89 08             	mov    %rcx,(%rax)
  207619:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  20761e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207622:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  207627:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20762b:	e9 5e ff ff ff       	jmpq   20758e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x5e>

0000000000207630 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  207630:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  207637:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20763c:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  207641:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  207646:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20764b:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  207650:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  207657:	00 
  207658:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  20765f:	00 
  207660:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  207667:	00 
        if mem::size_of::<T>() == 0 {
  207668:	b8 08 00 00 00       	mov    $0x8,%eax
  20766d:	48 83 f8 00          	cmp    $0x0,%rax
  207671:	75 27                	jne    20769a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x6a>
            return Err(CapacityOverflow.into());
  207673:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  20767a:	00 00 
  20767c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  207681:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  207686:	e8 05 47 01 00       	callq  21bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  20768b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207690:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  207695:	e9 fa 01 00 00       	jmpq   207894 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x264>
  20769a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  20769f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  2076a4:	e8 57 33 02 00       	callq  22aa00 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  2076a9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2076ae:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2076b3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2076b8:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2076bd:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  2076c4:	00 00 00 00 00 
  2076c9:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  2076d0:	00 
  2076d1:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  2076d8:	00 
  2076d9:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2076e0:	00 
  2076e1:	e8 9a 95 00 00       	callq  210c80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  2076e6:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2076eb:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  2076f2:	00 
  2076f3:	e8 68 43 00 00       	callq  20ba60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  2076f8:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2076fd:	48 85 c0             	test   %rax,%rax
  207700:	74 06                	je     207708 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0xd8>
  207702:	eb 00                	jmp    207704 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0xd4>
  207704:	eb 3b                	jmp    207741 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x111>
  207706:	0f 0b                	ud2    
  207708:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20770d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207714:	00 
  207715:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  20771c:	00 
  20771d:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  207724:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  207725:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207729:	48 c1 e7 01          	shl    $0x1,%rdi
  20772d:	e8 2e 36 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207732:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207737:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20773e:	00 
  20773f:	eb 31                	jmp    207772 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x142>
  207741:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207746:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20774d:	00 
  20774e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  207755:	00 
  207756:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  20775d:	00 
  20775e:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  207765:	00 
  207766:	e8 05 37 00 00       	callq  20ae70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  20776b:	eb 00                	jmp    20776d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x13d>
  20776d:	e9 07 01 00 00       	jmpq   207879 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  207772:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  207777:	bf 04 00 00 00       	mov    $0x4,%edi
  20777c:	e8 df 35 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207781:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207786:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20778d:	00 
  20778e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  207793:	e8 38 d5 00 00       	callq  214cd0 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E>
  207798:	48 89 04 24          	mov    %rax,(%rsp)
  20779c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2077a1:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2077a8:	00 
  2077a9:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  2077b0:	00 
  2077b1:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  2077b6:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2077bd:	00 
  2077be:	e8 5d fc ff ff       	callq  207420 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>
  2077c3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2077c8:	48 8b 34 24          	mov    (%rsp),%rsi
  2077cc:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  2077d1:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  2077d8:	00 
  2077d9:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  2077e0:	00 
  2077e1:	e8 1a f7 ff ff       	callq  206f00 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  2077e6:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2077ed:	00 
  2077ee:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  2077f5:	00 
  2077f6:	e8 85 41 00 00       	callq  20b980 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  2077fb:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207802:	00 
  207803:	48 85 c0             	test   %rax,%rax
  207806:	74 06                	je     20780e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x1de>
  207808:	eb 00                	jmp    20780a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x1da>
  20780a:	eb 3e                	jmp    20784a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x21a>
  20780c:	0f 0b                	ud2    
  20780e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  207813:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  20781a:	00 
  20781b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207822:	00 
  207823:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  20782a:	00 
  20782b:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  207832:	00 
  207833:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  20783a:	00 
  20783b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207842:	00 
        self.set_ptr(ptr);
  207843:	e8 d8 09 00 00       	callq  208220 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h9b9ccef11e164c81E>
  207848:	eb 3c                	jmp    207886 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x256>
  20784a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  20784f:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207856:	00 
  207857:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  20785e:	00 
  20785f:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  207866:	00 
  207867:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  20786e:	00 
  20786f:	e8 5c 35 00 00       	callq  20add0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  207874:	e9 f4 fe ff ff       	jmpq   20776d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x13d>
  207879:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  20787e:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  207885:	c3                   	retq   
  207886:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  20788b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  207892:	eb e5                	jmp    207879 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  207894:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207899:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20789e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  2078a3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  2078a7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2078ab:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  2078b2:	eb c5                	jmp    207879 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  2078b4:	cc                   	int3   
  2078b5:	cc                   	int3   
  2078b6:	cc                   	int3   
  2078b7:	cc                   	int3   
  2078b8:	cc                   	int3   
  2078b9:	cc                   	int3   
  2078ba:	cc                   	int3   
  2078bb:	cc                   	int3   
  2078bc:	cc                   	int3   
  2078bd:	cc                   	int3   
  2078be:	cc                   	int3   
  2078bf:	cc                   	int3   

00000000002078c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  2078c0:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  2078c7:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2078cc:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  2078d1:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  2078d6:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  2078db:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  2078e0:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  2078e7:	00 
  2078e8:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  2078ef:	00 
  2078f0:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  2078f7:	00 
        if mem::size_of::<T>() == 0 {
  2078f8:	b8 20 00 00 00       	mov    $0x20,%eax
  2078fd:	48 83 f8 00          	cmp    $0x0,%rax
  207901:	75 27                	jne    20792a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x6a>
            return Err(CapacityOverflow.into());
  207903:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  20790a:	00 00 
  20790c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  207911:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  207916:	e8 75 44 01 00       	callq  21bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  20791b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207920:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  207925:	e9 fa 01 00 00       	jmpq   207b24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x264>
  20792a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  20792f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207934:	e8 c7 30 02 00       	callq  22aa00 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  207939:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20793e:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207943:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207948:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20794d:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  207954:	00 00 00 00 00 
  207959:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  207960:	00 
  207961:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  207968:	00 
  207969:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  207970:	00 
  207971:	e8 0a 93 00 00       	callq  210c80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  207976:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20797b:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  207982:	00 
  207983:	e8 d8 40 00 00       	callq  20ba60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  207988:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20798d:	48 85 c0             	test   %rax,%rax
  207990:	74 06                	je     207998 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0xd8>
  207992:	eb 00                	jmp    207994 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0xd4>
  207994:	eb 3b                	jmp    2079d1 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x111>
  207996:	0f 0b                	ud2    
  207998:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20799d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  2079a4:	00 
  2079a5:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  2079ac:	00 
  2079ad:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  2079b4:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  2079b5:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2079b9:	48 c1 e7 01          	shl    $0x1,%rdi
  2079bd:	e8 9e 33 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  2079c2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2079c7:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2079ce:	00 
  2079cf:	eb 31                	jmp    207a02 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x142>
  2079d1:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  2079d6:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  2079dd:	00 
  2079de:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  2079e5:	00 
  2079e6:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  2079ed:	00 
  2079ee:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  2079f5:	00 
  2079f6:	e8 75 34 00 00       	callq  20ae70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  2079fb:	eb 00                	jmp    2079fd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x13d>
  2079fd:	e9 07 01 00 00       	jmpq   207b09 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207a02:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  207a07:	bf 04 00 00 00       	mov    $0x4,%edi
  207a0c:	e8 4f 33 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207a11:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207a16:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  207a1d:	00 
  207a1e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  207a23:	e8 d8 d3 00 00       	callq  214e00 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E>
  207a28:	48 89 04 24          	mov    %rax,(%rsp)
  207a2c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  207a31:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  207a38:	00 
  207a39:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  207a40:	00 
  207a41:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207a46:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  207a4d:	00 
  207a4e:	e8 bd f8 ff ff       	callq  207310 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>
  207a53:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207a58:	48 8b 34 24          	mov    (%rsp),%rsi
  207a5c:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  207a61:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  207a68:	00 
  207a69:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  207a70:	00 
  207a71:	e8 8a f4 ff ff       	callq  206f00 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  207a76:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  207a7d:	00 
  207a7e:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  207a85:	00 
  207a86:	e8 f5 3e 00 00       	callq  20b980 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  207a8b:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207a92:	00 
  207a93:	48 85 c0             	test   %rax,%rax
  207a96:	74 06                	je     207a9e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x1de>
  207a98:	eb 00                	jmp    207a9a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x1da>
  207a9a:	eb 3e                	jmp    207ada <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x21a>
  207a9c:	0f 0b                	ud2    
  207a9e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  207aa3:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207aaa:	00 
  207aab:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207ab2:	00 
  207ab3:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  207aba:	00 
  207abb:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  207ac2:	00 
  207ac3:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  207aca:	00 
  207acb:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207ad2:	00 
        self.set_ptr(ptr);
  207ad3:	e8 a8 06 00 00       	callq  208180 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h88bff482bda567aeE>
  207ad8:	eb 3c                	jmp    207b16 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x256>
  207ada:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207adf:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207ae6:	00 
  207ae7:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207aee:	00 
  207aef:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  207af6:	00 
  207af7:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  207afe:	00 
  207aff:	e8 cc 32 00 00       	callq  20add0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  207b04:	e9 f4 fe ff ff       	jmpq   2079fd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x13d>
  207b09:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  207b0e:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  207b15:	c3                   	retq   
  207b16:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  207b1b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  207b22:	eb e5                	jmp    207b09 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207b24:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207b29:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  207b2e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  207b33:	48 89 50 08          	mov    %rdx,0x8(%rax)
  207b37:	48 89 48 10          	mov    %rcx,0x10(%rax)
  207b3b:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  207b42:	eb c5                	jmp    207b09 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207b44:	cc                   	int3   
  207b45:	cc                   	int3   
  207b46:	cc                   	int3   
  207b47:	cc                   	int3   
  207b48:	cc                   	int3   
  207b49:	cc                   	int3   
  207b4a:	cc                   	int3   
  207b4b:	cc                   	int3   
  207b4c:	cc                   	int3   
  207b4d:	cc                   	int3   
  207b4e:	cc                   	int3   
  207b4f:	cc                   	int3   

0000000000207b50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  207b50:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  207b57:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  207b5c:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  207b61:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  207b66:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  207b6b:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  207b70:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  207b77:	00 
  207b78:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  207b7f:	00 
  207b80:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  207b87:	00 
        if mem::size_of::<T>() == 0 {
  207b88:	b8 06 00 00 00       	mov    $0x6,%eax
  207b8d:	48 83 f8 00          	cmp    $0x0,%rax
  207b91:	75 27                	jne    207bba <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x6a>
            return Err(CapacityOverflow.into());
  207b93:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  207b9a:	00 00 
  207b9c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  207ba1:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  207ba6:	e8 e5 41 01 00       	callq  21bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  207bab:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207bb0:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  207bb5:	e9 fa 01 00 00       	jmpq   207db4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x264>
  207bba:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  207bbf:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207bc4:	e8 37 2e 02 00       	callq  22aa00 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  207bc9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207bce:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207bd3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207bd8:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207bdd:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  207be4:	00 00 00 00 00 
  207be9:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  207bf0:	00 
  207bf1:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  207bf8:	00 
  207bf9:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  207c00:	00 
  207c01:	e8 7a 90 00 00       	callq  210c80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  207c06:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  207c0b:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  207c12:	00 
  207c13:	e8 48 3e 00 00       	callq  20ba60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  207c18:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  207c1d:	48 85 c0             	test   %rax,%rax
  207c20:	74 06                	je     207c28 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0xd8>
  207c22:	eb 00                	jmp    207c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0xd4>
  207c24:	eb 3b                	jmp    207c61 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x111>
  207c26:	0f 0b                	ud2    
  207c28:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  207c2d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207c34:	00 
  207c35:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  207c3c:	00 
  207c3d:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  207c44:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  207c45:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207c49:	48 c1 e7 01          	shl    $0x1,%rdi
  207c4d:	e8 0e 31 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207c52:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207c57:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  207c5e:	00 
  207c5f:	eb 31                	jmp    207c92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x142>
  207c61:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207c66:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207c6d:	00 
  207c6e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  207c75:	00 
  207c76:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  207c7d:	00 
  207c7e:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  207c85:	00 
  207c86:	e8 e5 31 00 00       	callq  20ae70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  207c8b:	eb 00                	jmp    207c8d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x13d>
  207c8d:	e9 07 01 00 00       	jmpq   207d99 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  207c92:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  207c97:	bf 04 00 00 00       	mov    $0x4,%edi
  207c9c:	e8 bf 30 02 00       	callq  22ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207ca1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207ca6:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  207cad:	00 
  207cae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  207cb3:	e8 78 d2 00 00       	callq  214f30 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE>
  207cb8:	48 89 04 24          	mov    %rax,(%rsp)
  207cbc:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  207cc1:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  207cc8:	00 
  207cc9:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  207cd0:	00 
  207cd1:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207cd6:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  207cdd:	00 
  207cde:	e8 4d f8 ff ff       	callq  207530 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>
  207ce3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207ce8:	48 8b 34 24          	mov    (%rsp),%rsi
  207cec:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  207cf1:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  207cf8:	00 
  207cf9:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  207d00:	00 
  207d01:	e8 fa f1 ff ff       	callq  206f00 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  207d06:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  207d0d:	00 
  207d0e:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  207d15:	00 
  207d16:	e8 65 3c 00 00       	callq  20b980 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  207d1b:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207d22:	00 
  207d23:	48 85 c0             	test   %rax,%rax
  207d26:	74 06                	je     207d2e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x1de>
  207d28:	eb 00                	jmp    207d2a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x1da>
  207d2a:	eb 3e                	jmp    207d6a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x21a>
  207d2c:	0f 0b                	ud2    
  207d2e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  207d33:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207d3a:	00 
  207d3b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207d42:	00 
  207d43:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  207d4a:	00 
  207d4b:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  207d52:	00 
  207d53:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  207d5a:	00 
  207d5b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207d62:	00 
        self.set_ptr(ptr);
  207d63:	e8 78 03 00 00       	callq  2080e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h22022347191ab383E>
  207d68:	eb 3c                	jmp    207da6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x256>
  207d6a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207d6f:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207d76:	00 
  207d77:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207d7e:	00 
  207d7f:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  207d86:	00 
  207d87:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  207d8e:	00 
  207d8f:	e8 3c 30 00 00       	callq  20add0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  207d94:	e9 f4 fe ff ff       	jmpq   207c8d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x13d>
  207d99:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  207d9e:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  207da5:	c3                   	retq   
  207da6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  207dab:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  207db2:	eb e5                	jmp    207d99 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  207db4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207db9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  207dbe:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  207dc3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  207dc7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  207dcb:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  207dd2:	eb c5                	jmp    207d99 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  207dd4:	cc                   	int3   
  207dd5:	cc                   	int3   
  207dd6:	cc                   	int3   
  207dd7:	cc                   	int3   
  207dd8:	cc                   	int3   
  207dd9:	cc                   	int3   
  207dda:	cc                   	int3   
  207ddb:	cc                   	int3   
  207ddc:	cc                   	int3   
  207ddd:	cc                   	int3   
  207dde:	cc                   	int3   
  207ddf:	cc                   	int3   

0000000000207de0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE>:
    fn capacity_from_bytes(excess: usize) -> usize {
  207de0:	48 83 ec 18          	sub    $0x18,%rsp
  207de4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207de9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  207dee:	b8 20 00 00 00       	mov    $0x20,%eax
  207df3:	48 83 f8 00          	cmp    $0x0,%rax
  207df7:	0f 94 c0             	sete   %al
  207dfa:	a8 01                	test   $0x1,%al
  207dfc:	75 0e                	jne    207e0c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE+0x2c>
  207dfe:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207e03:	48 c1 e8 05          	shr    $0x5,%rax
    }
  207e07:	48 83 c4 18          	add    $0x18,%rsp
  207e0b:	c3                   	retq   
        excess / mem::size_of::<T>()
  207e0c:	48 8d 3d dd 85 ff ff 	lea    -0x7a23(%rip),%rdi        # 2003f0 <str.0>
  207e13:	48 8d 15 b6 1f 03 00 	lea    0x31fb6(%rip),%rdx        # 239dd0 <memcmp+0x1090>
  207e1a:	be 19 00 00 00       	mov    $0x19,%esi
  207e1f:	e8 cc dd 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207e24:	0f 0b                	ud2    
  207e26:	cc                   	int3   
  207e27:	cc                   	int3   
  207e28:	cc                   	int3   
  207e29:	cc                   	int3   
  207e2a:	cc                   	int3   
  207e2b:	cc                   	int3   
  207e2c:	cc                   	int3   
  207e2d:	cc                   	int3   
  207e2e:	cc                   	int3   
  207e2f:	cc                   	int3   

0000000000207e30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E>:
    fn capacity_from_bytes(excess: usize) -> usize {
  207e30:	48 83 ec 18          	sub    $0x18,%rsp
  207e34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207e39:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  207e3e:	b8 06 00 00 00       	mov    $0x6,%eax
  207e43:	48 83 f8 00          	cmp    $0x0,%rax
  207e47:	0f 94 c0             	sete   %al
  207e4a:	a8 01                	test   $0x1,%al
  207e4c:	75 14                	jne    207e62 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E+0x32>
  207e4e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207e53:	b9 06 00 00 00       	mov    $0x6,%ecx
  207e58:	31 d2                	xor    %edx,%edx
  207e5a:	48 f7 f1             	div    %rcx
    }
  207e5d:	48 83 c4 18          	add    $0x18,%rsp
  207e61:	c3                   	retq   
        excess / mem::size_of::<T>()
  207e62:	48 8d 3d 87 85 ff ff 	lea    -0x7a79(%rip),%rdi        # 2003f0 <str.0>
  207e69:	48 8d 15 60 1f 03 00 	lea    0x31f60(%rip),%rdx        # 239dd0 <memcmp+0x1090>
  207e70:	be 19 00 00 00       	mov    $0x19,%esi
  207e75:	e8 76 dd 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207e7a:	0f 0b                	ud2    
  207e7c:	cc                   	int3   
  207e7d:	cc                   	int3   
  207e7e:	cc                   	int3   
  207e7f:	cc                   	int3   

0000000000207e80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E>:
    fn capacity_from_bytes(excess: usize) -> usize {
  207e80:	48 83 ec 18          	sub    $0x18,%rsp
  207e84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207e89:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  207e8e:	b8 08 00 00 00       	mov    $0x8,%eax
  207e93:	48 83 f8 00          	cmp    $0x0,%rax
  207e97:	0f 94 c0             	sete   %al
  207e9a:	a8 01                	test   $0x1,%al
  207e9c:	75 0e                	jne    207eac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E+0x2c>
  207e9e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207ea3:	48 c1 e8 03          	shr    $0x3,%rax
    }
  207ea7:	48 83 c4 18          	add    $0x18,%rsp
  207eab:	c3                   	retq   
        excess / mem::size_of::<T>()
  207eac:	48 8d 3d 3d 85 ff ff 	lea    -0x7ac3(%rip),%rdi        # 2003f0 <str.0>
  207eb3:	48 8d 15 16 1f 03 00 	lea    0x31f16(%rip),%rdx        # 239dd0 <memcmp+0x1090>
  207eba:	be 19 00 00 00       	mov    $0x19,%esi
  207ebf:	e8 2c dd 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207ec4:	0f 0b                	ud2    
  207ec6:	cc                   	int3   
  207ec7:	cc                   	int3   
  207ec8:	cc                   	int3   
  207ec9:	cc                   	int3   
  207eca:	cc                   	int3   
  207ecb:	cc                   	int3   
  207ecc:	cc                   	int3   
  207ecd:	cc                   	int3   
  207ece:	cc                   	int3   
  207ecf:	cc                   	int3   

0000000000207ed0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>:
    pub fn ptr(&self) -> *mut T {
  207ed0:	48 83 ec 18          	sub    $0x18,%rsp
  207ed4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207ed9:	48 8b 3f             	mov    (%rdi),%rdi
  207edc:	e8 7f 16 01 00       	callq  219560 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>
  207ee1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207ee6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207eeb:	48 83 c4 18          	add    $0x18,%rsp
  207eef:	c3                   	retq   

0000000000207ef0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>:
    pub fn ptr(&self) -> *mut T {
  207ef0:	48 83 ec 18          	sub    $0x18,%rsp
  207ef4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207ef9:	48 8b 3f             	mov    (%rdi),%rdi
  207efc:	e8 4f 16 01 00       	callq  219550 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>
  207f01:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207f06:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207f0b:	48 83 c4 18          	add    $0x18,%rsp
  207f0f:	c3                   	retq   

0000000000207f10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h878b30743715fdd5E>:
    pub fn ptr(&self) -> *mut T {
  207f10:	48 83 ec 18          	sub    $0x18,%rsp
  207f14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207f19:	48 8b 3f             	mov    (%rdi),%rdi
  207f1c:	e8 0f 16 01 00       	callq  219530 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>
  207f21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207f26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207f2b:	48 83 c4 18          	add    $0x18,%rsp
  207f2f:	c3                   	retq   

0000000000207f30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207f30:	48 83 ec 38          	sub    $0x38,%rsp
  207f34:	48 89 14 24          	mov    %rdx,(%rsp)
  207f38:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207f3d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207f42:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207f47:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207f4c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207f51:	e8 4a f3 ff ff       	callq  2072a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17he7f2300bb740c949E>
  207f56:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207f5a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207f5e:	a8 01                	test   $0x1,%al
  207f60:	75 07                	jne    207f69 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x39>
  207f62:	eb 00                	jmp    207f64 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x34>
    }
  207f64:	48 83 c4 38          	add    $0x38,%rsp
  207f68:	c3                   	retq   
  207f69:	48 8b 14 24          	mov    (%rsp),%rdx
  207f6d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207f72:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  207f77:	e8 e4 00 00 00       	callq  208060 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9c721d4c845ce776E>
        if self.needs_to_grow(len, additional) {
  207f7c:	eb e6                	jmp    207f64 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x34>
  207f7e:	cc                   	int3   
  207f7f:	cc                   	int3   

0000000000207f80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207f80:	48 83 ec 38          	sub    $0x38,%rsp
  207f84:	48 89 14 24          	mov    %rdx,(%rsp)
  207f88:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207f8d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207f92:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207f97:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207f9c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207fa1:	e8 8a f2 ff ff       	callq  207230 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h6c9536dd384d8cd6E>
  207fa6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207faa:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207fae:	a8 01                	test   $0x1,%al
  207fb0:	75 07                	jne    207fb9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x39>
  207fb2:	eb 00                	jmp    207fb4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x34>
    }
  207fb4:	48 83 c4 38          	add    $0x38,%rsp
  207fb8:	c3                   	retq   
  207fb9:	48 8b 14 24          	mov    (%rsp),%rdx
  207fbd:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207fc2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  207fc7:	e8 d4 00 00 00       	callq  2080a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hdfd6a07f45ba3a7cE>
        if self.needs_to_grow(len, additional) {
  207fcc:	eb e6                	jmp    207fb4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x34>
  207fce:	cc                   	int3   
  207fcf:	cc                   	int3   

0000000000207fd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207fd0:	48 83 ec 38          	sub    $0x38,%rsp
  207fd4:	48 89 14 24          	mov    %rdx,(%rsp)
  207fd8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207fdd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207fe2:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207fe7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207fec:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207ff1:	e8 ca f1 ff ff       	callq  2071c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h5ef58445af2f1ffdE>
  207ff6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207ffa:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207ffe:	a8 01                	test   $0x1,%al
  208000:	75 07                	jne    208009 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x39>
  208002:	eb 00                	jmp    208004 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x34>
    }
  208004:	48 83 c4 38          	add    $0x38,%rsp
  208008:	c3                   	retq   
  208009:	48 8b 14 24          	mov    (%rsp),%rdx
  20800d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  208012:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  208017:	e8 04 00 00 00       	callq  208020 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9904d31e0c150511E>
        if self.needs_to_grow(len, additional) {
  20801c:	eb e6                	jmp    208004 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x34>
  20801e:	cc                   	int3   
  20801f:	cc                   	int3   

0000000000208020 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9904d31e0c150511E>:
        fn do_reserve_and_handle<T, A: Allocator>(
  208020:	48 83 ec 38          	sub    $0x38,%rsp
  208024:	48 89 d1             	mov    %rdx,%rcx
  208027:	48 89 f2             	mov    %rsi,%rdx
  20802a:	48 89 fe             	mov    %rdi,%rsi
  20802d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  208032:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  208037:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  20803c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  208041:	e8 ea f5 ff ff       	callq  207630 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE>
  208046:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20804b:	e8 60 fa 00 00       	callq  217ab0 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  208050:	48 83 c4 38          	add    $0x38,%rsp
  208054:	c3                   	retq   
  208055:	cc                   	int3   
  208056:	cc                   	int3   
  208057:	cc                   	int3   
  208058:	cc                   	int3   
  208059:	cc                   	int3   
  20805a:	cc                   	int3   
  20805b:	cc                   	int3   
  20805c:	cc                   	int3   
  20805d:	cc                   	int3   
  20805e:	cc                   	int3   
  20805f:	cc                   	int3   

0000000000208060 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9c721d4c845ce776E>:
        fn do_reserve_and_handle<T, A: Allocator>(
  208060:	48 83 ec 38          	sub    $0x38,%rsp
  208064:	48 89 d1             	mov    %rdx,%rcx
  208067:	48 89 f2             	mov    %rsi,%rdx
  20806a:	48 89 fe             	mov    %rdi,%rsi
  20806d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  208072:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  208077:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  20807c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  208081:	e8 3a f8 ff ff       	callq  2078c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E>
  208086:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20808b:	e8 20 fa 00 00       	callq  217ab0 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  208090:	48 83 c4 38          	add    $0x38,%rsp
  208094:	c3                   	retq   
  208095:	cc                   	int3   
  208096:	cc                   	int3   
  208097:	cc                   	int3   
  208098:	cc                   	int3   
  208099:	cc                   	int3   
  20809a:	cc                   	int3   
  20809b:	cc                   	int3   
  20809c:	cc                   	int3   
  20809d:	cc                   	int3   
  20809e:	cc                   	int3   
  20809f:	cc                   	int3   

00000000002080a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hdfd6a07f45ba3a7cE>:
        fn do_reserve_and_handle<T, A: Allocator>(
  2080a0:	48 83 ec 38          	sub    $0x38,%rsp
  2080a4:	48 89 d1             	mov    %rdx,%rcx
  2080a7:	48 89 f2             	mov    %rsi,%rdx
  2080aa:	48 89 fe             	mov    %rdi,%rsi
  2080ad:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2080b2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2080b7:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  2080bc:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  2080c1:	e8 8a fa ff ff       	callq  207b50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E>
  2080c6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  2080cb:	e8 e0 f9 00 00       	callq  217ab0 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  2080d0:	48 83 c4 38          	add    $0x38,%rsp
  2080d4:	c3                   	retq   
  2080d5:	cc                   	int3   
  2080d6:	cc                   	int3   
  2080d7:	cc                   	int3   
  2080d8:	cc                   	int3   
  2080d9:	cc                   	int3   
  2080da:	cc                   	int3   
  2080db:	cc                   	int3   
  2080dc:	cc                   	int3   
  2080dd:	cc                   	int3   
  2080de:	cc                   	int3   
  2080df:	cc                   	int3   

00000000002080e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h22022347191ab383E>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  2080e0:	48 83 ec 58          	sub    $0x58,%rsp
  2080e4:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2080e9:	48 89 f0             	mov    %rsi,%rax
  2080ec:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2080f1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2080f6:	48 89 f8             	mov    %rdi,%rax
  2080f9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2080fe:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  208103:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208108:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20810d:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  208112:	e8 59 24 02 00       	callq  22a570 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he83c423481392309E>
  208117:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20811c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  208121:	e8 2a 25 02 00       	callq  22a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  208126:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20812b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208130:	e8 2b 13 01 00       	callq  219460 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h6c462c971cf16ae0E>
  208135:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20813a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20813f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  208144:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208149:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20814e:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  208151:	e8 fa 25 02 00       	callq  22a750 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  208156:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20815b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  208160:	e8 cb fc ff ff       	callq  207e30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E>
  208165:	48 89 04 24          	mov    %rax,(%rsp)
  208169:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20816e:	48 8b 0c 24          	mov    (%rsp),%rcx
  208172:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  208176:	48 83 c4 58          	add    $0x58,%rsp
  20817a:	c3                   	retq   
  20817b:	cc                   	int3   
  20817c:	cc                   	int3   
  20817d:	cc                   	int3   
  20817e:	cc                   	int3   
  20817f:	cc                   	int3   

0000000000208180 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h88bff482bda567aeE>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  208180:	48 83 ec 58          	sub    $0x58,%rsp
  208184:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  208189:	48 89 f0             	mov    %rsi,%rax
  20818c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  208191:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208196:	48 89 f8             	mov    %rdi,%rax
  208199:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20819e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2081a3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2081a8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  2081ad:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  2081b2:	e8 79 23 02 00       	callq  22a530 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85f07a89a7a7a8a1E>
  2081b7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2081bc:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2081c1:	e8 3a 24 02 00       	callq  22a600 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h552a258b54bc04b4E>
  2081c6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2081cb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2081d0:	e8 6b 12 01 00       	callq  219440 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h490cf4a7df51fc38E>
  2081d5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2081da:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2081df:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2081e4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2081e9:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2081ee:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  2081f1:	e8 5a 25 02 00       	callq  22a750 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  2081f6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2081fb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  208200:	e8 db fb ff ff       	callq  207de0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE>
  208205:	48 89 04 24          	mov    %rax,(%rsp)
  208209:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20820e:	48 8b 0c 24          	mov    (%rsp),%rcx
  208212:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  208216:	48 83 c4 58          	add    $0x58,%rsp
  20821a:	c3                   	retq   
  20821b:	cc                   	int3   
  20821c:	cc                   	int3   
  20821d:	cc                   	int3   
  20821e:	cc                   	int3   
  20821f:	cc                   	int3   

0000000000208220 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h9b9ccef11e164c81E>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  208220:	48 83 ec 58          	sub    $0x58,%rsp
  208224:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  208229:	48 89 f0             	mov    %rsi,%rax
  20822c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  208231:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208236:	48 89 f8             	mov    %rdi,%rax
  208239:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20823e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  208243:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208248:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20824d:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  208252:	e8 59 23 02 00       	callq  22a5b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17heceef75a4b1639c3E>
  208257:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20825c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  208261:	e8 8a 23 02 00       	callq  22a5f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4044b6540ffdc00bE>
  208266:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20826b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208270:	e8 ab 11 01 00       	callq  219420 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h26d845bbebccc84cE>
  208275:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20827a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20827f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  208284:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208289:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20828e:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  208291:	e8 ba 24 02 00       	callq  22a750 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  208296:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20829b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2082a0:	e8 db fb ff ff       	callq  207e80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E>
  2082a5:	48 89 04 24          	mov    %rax,(%rsp)
  2082a9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2082ae:	48 8b 0c 24          	mov    (%rsp),%rcx
  2082b2:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  2082b6:	48 83 c4 58          	add    $0x58,%rsp
  2082ba:	c3                   	retq   
  2082bb:	cc                   	int3   
  2082bc:	cc                   	int3   
  2082bd:	cc                   	int3   
  2082be:	cc                   	int3   
  2082bf:	cc                   	int3   

00000000002082c0 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
  2082c0:	48 83 ec 48          	sub    $0x48,%rsp
  2082c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2082c9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2082ce:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2082d3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let size = layout.size();
  2082d8:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2082dd:	e8 ae 3d 01 00       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  2082e2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2082e7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2082ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
  2082f1:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2082f6:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2082fb:	e8 f0 75 02 00       	callq  22f8f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  208300:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208305:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20830a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        if !ptr.is_null() {
  20830f:	e8 3c 98 02 00       	callq  231b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  208314:	88 44 24 07          	mov    %al,0x7(%rsp)
  208318:	8a 44 24 07          	mov    0x7(%rsp),%al
  20831c:	34 ff                	xor    $0xff,%al
  20831e:	a8 01                	test   $0x1,%al
  208320:	75 0a                	jne    20832c <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E+0x6c>
  208322:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
        }
        ptr
    }
  208327:	48 83 c4 48          	add    $0x48,%rsp
  20832b:	c3                   	retq   
  20832c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  208331:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            unsafe { ptr::write_bytes(ptr, 0, size) };
  208336:	31 f6                	xor    %esi,%esi
  208338:	e8 a3 29 02 00       	callq  22ace0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>
        if !ptr.is_null() {
  20833d:	eb e3                	jmp    208322 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E+0x62>
  20833f:	cc                   	int3   

0000000000208340 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  208340:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  208347:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  20834c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  208351:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  208356:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20835b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  208360:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  208365:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  20836a:	4c 89 44 24 78       	mov    %r8,0x78(%rsp)
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
  20836f:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  208374:	e8 27 3d 01 00       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  208379:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20837e:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  208383:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  208388:	e8 b3 3c 01 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  20838d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208392:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  208397:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20839e:	00 
  20839f:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2083a6:	00 
  2083a7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2083ac:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  2083b1:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
  2083b6:	e8 35 75 02 00       	callq  22f8f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  2083bb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2083c0:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2083c7:	00 
  2083c8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        if !new_ptr.is_null() {
  2083cd:	e8 7e 97 02 00       	callq  231b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  2083d2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2083d6:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2083da:	34 ff                	xor    $0xff,%al
  2083dc:	a8 01                	test   $0x1,%al
  2083de:	75 0d                	jne    2083ed <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E+0xad>
  2083e0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
                self.dealloc(ptr, layout);
            }
        }
        new_ptr
    }
  2083e5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2083ec:	c3                   	retq   
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
  2083ed:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2083f2:	e8 99 3c 01 00       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  2083f7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2083fc:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  208401:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  208406:	e8 e5 ae 02 00       	callq  2332f0 <_ZN4core3cmp3min17he6f664f09d7a8d9bE>
  20840b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208410:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208415:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20841a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  20841f:	e8 ec 28 02 00       	callq  22ad10 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
  208424:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  208429:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
                self.dealloc(ptr, layout);
  20842e:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  208433:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  208438:	e8 43 75 02 00       	callq  22f980 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>
        if !new_ptr.is_null() {
  20843d:	eb a1                	jmp    2083e0 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E+0xa0>
  20843f:	cc                   	int3   

0000000000208440 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208440:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  208447:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20844c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  208453:	00 
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
  208454:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  20845b:	00 
  20845c:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  208463:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208464:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208469:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20846e:	e8 7d 2d 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208473:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208478:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20847e:	74 29                	je     2084a9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x69>
            match status {
  208480:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208485:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20848a:	48 83 e8 03          	sub    $0x3,%rax
  20848e:	0f 87 35 01 00 00    	ja     2085c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x189>
  208494:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208499:	48 8d 0d 6c 7f ff ff 	lea    -0x8094(%rip),%rcx        # 20040c <str.0+0x1c>
  2084a0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2084a4:	48 01 c8             	add    %rcx,%rax
  2084a7:	ff e0                	jmpq   *%rax
  2084a9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2084ae:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2084b3:	31 c0                	xor    %eax,%eax
  2084b5:	89 c6                	mov    %eax,%esi
  2084b7:	ba 01 00 00 00       	mov    $0x1,%edx
  2084bc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2084c1:	e8 0a 2c 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2084c6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2084cb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2084d0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2084d5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2084db:	75 a3                	jne    208480 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x40>
  2084dd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2084e2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2084e7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2084ec:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2084f3:	00 
  2084f4:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2084fb:	00 
  2084fc:	e8 ef 37 00 00       	callq  20bcf0 <_ZN4core3ops8function6FnOnce9call_once17h4985b7a711a6d100E>
  208501:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208506:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20850d:	00 
  20850e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208513:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20851a:	00 
  20851b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208520:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  208527:	00 
  208528:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20852d:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  208534:	00 
  208535:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20853c:	00 
  20853d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208544:	00 00 
  208546:	48 83 c0 08          	add    $0x8,%rax
  20854a:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  208551:	00 
  208552:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208557:	eb 00                	jmp    208559 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x119>
  208559:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20855e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208563:	ba 28 00 00 00       	mov    $0x28,%edx
  208568:	e8 83 07 03 00       	callq  238cf0 <memcpy>
  20856d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208572:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208577:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20857e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208580:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  208587:	04 
  208588:	be 02 00 00 00       	mov    $0x2,%esi
  20858d:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  208594:	00 
  208595:	e8 96 2c 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20859a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20859f:	e8 2c 23 00 00       	callq  20a8d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>
  2085a4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2085a9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2085ae:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2085b3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2085b8:	e8 f3 3a 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
            }
        }
    }
  2085bd:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  2085c4:	01 
  2085c5:	75 6c                	jne    208633 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1f3>
  2085c7:	eb 5d                	jmp    208626 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1e6>
                _ => unsafe { unreachable() },
  2085c9:	e8 92 0c 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2085ce:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2085d0:	48 8d 3d 9c 7f ff ff 	lea    -0x8064(%rip),%rdi        # 200573 <str.0+0x183>
  2085d7:	48 8d 15 22 18 03 00 	lea    0x31822(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2085de:	be 28 00 00 00       	mov    $0x28,%esi
  2085e3:	e8 08 d6 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2085e8:	0f 0b                	ud2    
                    cpu_relax();
  2085ea:	e8 d1 2c 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2085ef:	eb 44                	jmp    208635 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1f5>
                PANICKED => panic!("Once has panicked"),
  2085f1:	48 8d 3d 14 7f ff ff 	lea    -0x80ec(%rip),%rdi        # 20050c <str.0+0x11c>
  2085f8:	48 8d 15 e9 17 03 00 	lea    0x317e9(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2085ff:	be 11 00 00 00       	mov    $0x11,%esi
  208604:	e8 e7 d5 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208609:	0f 0b                	ud2    
  20860b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208610:	e8 bb 22 00 00       	callq  20a8d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>
  208615:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20861a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20861f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208624:	eb 97                	jmp    2085bd <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x17d>
    }
  208626:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20862b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208632:	c3                   	retq   
  208633:	eb f1                	jmp    208626 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1e6>
  208635:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20863a:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  208641:	04 
  208642:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  208649:	00 
  20864a:	e8 a1 2b 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20864f:	48 89 04 24          	mov    %rax,(%rsp)
  208653:	48 8b 04 24          	mov    (%rsp),%rax
  208657:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20865c:	e9 1f fe ff ff       	jmpq   208480 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x40>
  208661:	cc                   	int3   
  208662:	cc                   	int3   
  208663:	cc                   	int3   
  208664:	cc                   	int3   
  208665:	cc                   	int3   
  208666:	cc                   	int3   
  208667:	cc                   	int3   
  208668:	cc                   	int3   
  208669:	cc                   	int3   
  20866a:	cc                   	int3   
  20866b:	cc                   	int3   
  20866c:	cc                   	int3   
  20866d:	cc                   	int3   
  20866e:	cc                   	int3   
  20866f:	cc                   	int3   

0000000000208670 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208670:	48 81 ec b8 20 00 00 	sub    $0x20b8,%rsp
  208677:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20867c:	48 89 bc 24 a0 20 00 	mov    %rdi,0x20a0(%rsp)
  208683:	00 
        loop {
  208684:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  20868b:	00 
  20868c:	c6 84 24 9f 20 00 00 	movb   $0x1,0x209f(%rsp)
  208693:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208694:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  20869b:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2086a0:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2086a5:	e8 46 2b 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2086aa:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2086af:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2086b5:	74 29                	je     2086e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x70>
            match status {
  2086b7:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2086bc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2086c1:	48 83 e8 03          	sub    $0x3,%rax
  2086c5:	0f 87 25 01 00 00    	ja     2087f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x180>
  2086cb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2086d0:	48 8d 0d 45 7d ff ff 	lea    -0x82bb(%rip),%rcx        # 20041c <str.0+0x2c>
  2086d7:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2086db:	48 01 c8             	add    %rcx,%rax
  2086de:	ff e0                	jmpq   *%rax
  2086e0:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            status = self.state.compare_and_swap(INCOMPLETE,
  2086e5:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
                                                 Ordering::SeqCst);
  2086ec:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2086f1:	31 c0                	xor    %eax,%eax
  2086f3:	89 c6                	mov    %eax,%esi
  2086f5:	ba 01 00 00 00       	mov    $0x1,%edx
  2086fa:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2086ff:	e8 cc 29 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208704:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208709:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20870e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208713:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208719:	75 9c                	jne    2086b7 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x47>
  20871b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208720:	48 05 20 10 00 00    	add    $0x1020,%rax
  208726:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20872b:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208730:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  208737:	00 
  208738:	48 8d bc 24 80 10 00 	lea    0x1080(%rsp),%rdi
  20873f:	00 
  208740:	e8 4b 35 00 00       	callq  20bc90 <_ZN4core3ops8function6FnOnce9call_once17h2ba66678938adde7E>
  208745:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20874a:	48 83 c7 10          	add    $0x10,%rdi
  20874e:	48 8d b4 24 80 10 00 	lea    0x1080(%rsp),%rsi
  208755:	00 
  208756:	ba 10 10 00 00       	mov    $0x1010,%edx
  20875b:	e8 90 05 03 00       	callq  238cf0 <memcpy>
  208760:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208765:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  20876a:	48 89 84 24 b0 20 00 	mov    %rax,0x20b0(%rsp)
  208771:	00 
  208772:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208777:	eb 00                	jmp    208779 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x109>
  208779:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20877e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208783:	ba 20 10 00 00       	mov    $0x1020,%edx
  208788:	e8 63 05 03 00       	callq  238cf0 <memcpy>
  20878d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208792:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208797:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20879e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2087a0:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  2087a7:	c6 84 24 9d 20 00 00 	movb   $0x4,0x209d(%rsp)
  2087ae:	04 
  2087af:	be 02 00 00 00       	mov    $0x2,%esi
  2087b4:	0f b6 94 24 9d 20 00 	movzbl 0x209d(%rsp),%edx
  2087bb:	00 
  2087bc:	e8 6f 2a 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2087c1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2087c6:	e8 25 22 00 00       	callq  20a9f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE>
  2087cb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2087d0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2087d5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2087da:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2087df:	e8 cc 38 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2087e4:	f6 84 24 9f 20 00 00 	testb  $0x1,0x209f(%rsp)
  2087eb:	01 
  2087ec:	75 6c                	jne    20885a <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x1ea>
  2087ee:	eb 5d                	jmp    20884d <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x1dd>
                _ => unsafe { unreachable() },
  2087f0:	e8 6b 0a 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2087f5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2087f7:	48 8d 3d 75 7d ff ff 	lea    -0x828b(%rip),%rdi        # 200573 <str.0+0x183>
  2087fe:	48 8d 15 fb 15 03 00 	lea    0x315fb(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  208805:	be 28 00 00 00       	mov    $0x28,%esi
  20880a:	e8 e1 d3 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20880f:	0f 0b                	ud2    
                    cpu_relax();
  208811:	e8 aa 2a 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208816:	eb 44                	jmp    20885c <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x1ec>
                PANICKED => panic!("Once has panicked"),
  208818:	48 8d 3d ed 7c ff ff 	lea    -0x8313(%rip),%rdi        # 20050c <str.0+0x11c>
  20881f:	48 8d 15 c2 15 03 00 	lea    0x315c2(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  208826:	be 11 00 00 00       	mov    $0x11,%esi
  20882b:	e8 c0 d3 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208830:	0f 0b                	ud2    
  208832:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208837:	e8 b4 21 00 00       	callq  20a9f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE>
  20883c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208841:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208846:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20884b:	eb 97                	jmp    2087e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x174>
    }
  20884d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208852:	48 81 c4 b8 20 00 00 	add    $0x20b8,%rsp
  208859:	c3                   	retq   
  20885a:	eb f1                	jmp    20884d <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x1dd>
  20885c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208861:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  208868:	c6 84 24 9e 20 00 00 	movb   $0x4,0x209e(%rsp)
  20886f:	04 
  208870:	0f b6 b4 24 9e 20 00 	movzbl 0x209e(%rsp),%esi
  208877:	00 
  208878:	e8 73 29 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20887d:	48 89 04 24          	mov    %rax,(%rsp)
  208881:	48 8b 04 24          	mov    (%rsp),%rax
  208885:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20888a:	e9 28 fe ff ff       	jmpq   2086b7 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E+0x47>
  20888f:	cc                   	int3   

0000000000208890 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208890:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  208897:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20889c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  2088a3:	00 
        loop {
  2088a4:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2088ab:	00 
  2088ac:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  2088b3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2088b4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2088b9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2088be:	e8 2d 29 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2088c3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2088c8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2088ce:	74 29                	je     2088f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x69>
            match status {
  2088d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2088d5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2088da:	48 83 e8 03          	sub    $0x3,%rax
  2088de:	0f 87 35 01 00 00    	ja     208a19 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x189>
  2088e4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2088e9:	48 8d 0d 3c 7b ff ff 	lea    -0x84c4(%rip),%rcx        # 20042c <str.0+0x3c>
  2088f0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2088f4:	48 01 c8             	add    %rcx,%rax
  2088f7:	ff e0                	jmpq   *%rax
  2088f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2088fe:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208903:	31 c0                	xor    %eax,%eax
  208905:	89 c6                	mov    %eax,%esi
  208907:	ba 01 00 00 00       	mov    $0x1,%edx
  20890c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208911:	e8 ba 27 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208916:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20891b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208920:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208925:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20892b:	75 a3                	jne    2088d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x40>
  20892d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208932:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208937:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20893c:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  208943:	00 
  208944:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20894b:	00 
  20894c:	e8 9f 32 00 00       	callq  20bbf0 <_ZN4core3ops8function6FnOnce9call_once17h1edd667f22cfc967E>
  208951:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208956:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20895d:	00 
  20895e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208963:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20896a:	00 
  20896b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208970:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  208977:	00 
  208978:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20897d:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  208984:	00 
  208985:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20898c:	00 
  20898d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208994:	00 00 
  208996:	48 83 c0 08          	add    $0x8,%rax
  20899a:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2089a1:	00 
  2089a2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2089a7:	eb 00                	jmp    2089a9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x119>
  2089a9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2089ae:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2089b3:	ba 28 00 00 00       	mov    $0x28,%edx
  2089b8:	e8 33 03 03 00       	callq  238cf0 <memcpy>
  2089bd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2089c2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2089c7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2089ce:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2089d0:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  2089d7:	04 
  2089d8:	be 02 00 00 00       	mov    $0x2,%esi
  2089dd:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  2089e4:	00 
  2089e5:	e8 46 28 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2089ea:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2089ef:	e8 1c 1e 00 00       	callq  20a810 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>
  2089f4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2089f9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2089fe:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208a03:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208a08:	e8 a3 36 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208a0d:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  208a14:	01 
  208a15:	75 6c                	jne    208a83 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1f3>
  208a17:	eb 5d                	jmp    208a76 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1e6>
                _ => unsafe { unreachable() },
  208a19:	e8 42 08 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208a1e:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208a20:	48 8d 3d 4c 7b ff ff 	lea    -0x84b4(%rip),%rdi        # 200573 <str.0+0x183>
  208a27:	48 8d 15 d2 13 03 00 	lea    0x313d2(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  208a2e:	be 28 00 00 00       	mov    $0x28,%esi
  208a33:	e8 b8 d1 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a38:	0f 0b                	ud2    
                    cpu_relax();
  208a3a:	e8 81 28 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208a3f:	eb 44                	jmp    208a85 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1f5>
                PANICKED => panic!("Once has panicked"),
  208a41:	48 8d 3d c4 7a ff ff 	lea    -0x853c(%rip),%rdi        # 20050c <str.0+0x11c>
  208a48:	48 8d 15 99 13 03 00 	lea    0x31399(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  208a4f:	be 11 00 00 00       	mov    $0x11,%esi
  208a54:	e8 97 d1 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a59:	0f 0b                	ud2    
  208a5b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208a60:	e8 ab 1d 00 00       	callq  20a810 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>
  208a65:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208a6a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208a6f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208a74:	eb 97                	jmp    208a0d <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x17d>
    }
  208a76:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208a7b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208a82:	c3                   	retq   
  208a83:	eb f1                	jmp    208a76 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1e6>
  208a85:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208a8a:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  208a91:	04 
  208a92:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  208a99:	00 
  208a9a:	e8 51 27 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208a9f:	48 89 04 24          	mov    %rax,(%rsp)
  208aa3:	48 8b 04 24          	mov    (%rsp),%rax
  208aa7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208aac:	e9 1f fe ff ff       	jmpq   2088d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x40>
  208ab1:	cc                   	int3   
  208ab2:	cc                   	int3   
  208ab3:	cc                   	int3   
  208ab4:	cc                   	int3   
  208ab5:	cc                   	int3   
  208ab6:	cc                   	int3   
  208ab7:	cc                   	int3   
  208ab8:	cc                   	int3   
  208ab9:	cc                   	int3   
  208aba:	cc                   	int3   
  208abb:	cc                   	int3   
  208abc:	cc                   	int3   
  208abd:	cc                   	int3   
  208abe:	cc                   	int3   
  208abf:	cc                   	int3   

0000000000208ac0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208ac0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  208ac7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208acc:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  208ad3:	00 
        loop {
  208ad4:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  208adb:	00 
  208adc:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  208ae3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208ae4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208ae9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208aee:	e8 fd 26 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208af3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208af8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208afe:	74 29                	je     208b29 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x69>
            match status {
  208b00:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208b05:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208b0a:	48 83 e8 03          	sub    $0x3,%rax
  208b0e:	0f 87 39 01 00 00    	ja     208c4d <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x18d>
  208b14:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208b19:	48 8d 0d 1c 79 ff ff 	lea    -0x86e4(%rip),%rcx        # 20043c <str.0+0x4c>
  208b20:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208b24:	48 01 c8             	add    %rcx,%rax
  208b27:	ff e0                	jmpq   *%rax
  208b29:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208b2e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208b33:	31 c0                	xor    %eax,%eax
  208b35:	89 c6                	mov    %eax,%esi
  208b37:	ba 01 00 00 00       	mov    $0x1,%edx
  208b3c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208b41:	e8 8a 25 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208b46:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208b4b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208b50:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208b55:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208b5b:	75 a3                	jne    208b00 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x40>
  208b5d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208b62:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208b67:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208b6c:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  208b73:	00 
  208b74:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  208b7b:	00 
  208b7c:	e8 2f 33 00 00       	callq  20beb0 <_ZN4core3ops8function6FnOnce9call_once17hc0401856d345fdcbE>
  208b81:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208b86:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  208b8d:	00 
  208b8e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208b93:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  208b9a:	00 
  208b9b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208ba0:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  208ba7:	00 
  208ba8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  208bad:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208bb4:	00 00 
  208bb6:	48 83 c0 08          	add    $0x8,%rax
  208bba:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  208bc1:	00 
  208bc2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208bc7:	eb 00                	jmp    208bc9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x109>
  208bc9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  208bce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  208bd3:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  208bd8:	48 89 08             	mov    %rcx,(%rax)
  208bdb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  208be0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  208be4:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  208be9:	48 89 48 10          	mov    %rcx,0x10(%rax)
  208bed:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  208bf2:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  208bf6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208bfb:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208c02:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208c04:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  208c0b:	04 
  208c0c:	be 02 00 00 00       	mov    $0x2,%esi
  208c11:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  208c18:	00 
  208c19:	e8 12 26 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208c1e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208c23:	e8 48 1c 00 00       	callq  20a870 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>
  208c28:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208c2d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208c32:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208c37:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208c3c:	e8 6f 34 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208c41:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  208c48:	01 
  208c49:	75 6c                	jne    208cb7 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1f7>
  208c4b:	eb 5d                	jmp    208caa <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1ea>
                _ => unsafe { unreachable() },
  208c4d:	e8 0e 06 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208c52:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208c54:	48 8d 3d 18 79 ff ff 	lea    -0x86e8(%rip),%rdi        # 200573 <str.0+0x183>
  208c5b:	48 8d 15 9e 11 03 00 	lea    0x3119e(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  208c62:	be 28 00 00 00       	mov    $0x28,%esi
  208c67:	e8 84 cf 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c6c:	0f 0b                	ud2    
                    cpu_relax();
  208c6e:	e8 4d 26 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208c73:	eb 44                	jmp    208cb9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1f9>
                PANICKED => panic!("Once has panicked"),
  208c75:	48 8d 3d 90 78 ff ff 	lea    -0x8770(%rip),%rdi        # 20050c <str.0+0x11c>
  208c7c:	48 8d 15 65 11 03 00 	lea    0x31165(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  208c83:	be 11 00 00 00       	mov    $0x11,%esi
  208c88:	e8 63 cf 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c8d:	0f 0b                	ud2    
  208c8f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208c94:	e8 d7 1b 00 00       	callq  20a870 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>
  208c99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208c9e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208ca3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208ca8:	eb 97                	jmp    208c41 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x181>
    }
  208caa:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208caf:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  208cb6:	c3                   	retq   
  208cb7:	eb f1                	jmp    208caa <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1ea>
  208cb9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208cbe:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  208cc5:	04 
  208cc6:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  208ccd:	00 
  208cce:	e8 1d 25 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208cd3:	48 89 04 24          	mov    %rax,(%rsp)
  208cd7:	48 8b 04 24          	mov    (%rsp),%rax
  208cdb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208ce0:	e9 1b fe ff ff       	jmpq   208b00 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x40>
  208ce5:	cc                   	int3   
  208ce6:	cc                   	int3   
  208ce7:	cc                   	int3   
  208ce8:	cc                   	int3   
  208ce9:	cc                   	int3   
  208cea:	cc                   	int3   
  208ceb:	cc                   	int3   
  208cec:	cc                   	int3   
  208ced:	cc                   	int3   
  208cee:	cc                   	int3   
  208cef:	cc                   	int3   

0000000000208cf0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208cf0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  208cf7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208cfc:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  208d03:	00 
        loop {
  208d04:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  208d0b:	00 
  208d0c:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  208d13:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208d14:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208d19:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208d1e:	e8 cd 24 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208d23:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208d28:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208d2e:	74 29                	je     208d59 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x69>
            match status {
  208d30:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208d35:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208d3a:	48 83 e8 03          	sub    $0x3,%rax
  208d3e:	0f 87 3d 01 00 00    	ja     208e81 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x191>
  208d44:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208d49:	48 8d 0d fc 76 ff ff 	lea    -0x8904(%rip),%rcx        # 20044c <str.0+0x5c>
  208d50:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208d54:	48 01 c8             	add    %rcx,%rax
  208d57:	ff e0                	jmpq   *%rax
  208d59:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208d5e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208d63:	31 c0                	xor    %eax,%eax
  208d65:	89 c6                	mov    %eax,%esi
  208d67:	ba 01 00 00 00       	mov    $0x1,%edx
  208d6c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208d71:	e8 5a 23 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208d76:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208d7b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208d80:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208d85:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208d8b:	75 a3                	jne    208d30 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x40>
  208d8d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208d92:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208d97:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208d9c:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  208da3:	00 
  208da4:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  208dab:	00 
  208dac:	e8 7f 2f 00 00       	callq  20bd30 <_ZN4core3ops8function6FnOnce9call_once17h598ec53524868f86E>
  208db1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208db6:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  208dbd:	00 
  208dbe:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208dc3:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  208dca:	00 
  208dcb:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208dd0:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  208dd7:	00 
  208dd8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  208ddd:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  208de4:	00 
  208de5:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  208dec:	00 
  208ded:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208df4:	00 00 
  208df6:	48 83 c0 08          	add    $0x8,%rax
  208dfa:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  208e01:	00 
  208e02:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208e07:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208e0c:	e8 cf 31 00 00       	callq  20bfe0 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E>
  208e11:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208e16:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208e1b:	ba 28 00 00 00       	mov    $0x28,%edx
  208e20:	e8 cb fe 02 00       	callq  238cf0 <memcpy>
  208e25:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208e2a:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208e2f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208e36:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208e38:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  208e3f:	04 
  208e40:	be 02 00 00 00       	mov    $0x2,%esi
  208e45:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  208e4c:	00 
  208e4d:	e8 de 23 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208e52:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208e57:	e8 a4 1c 00 00       	callq  20ab00 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>
  208e5c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208e61:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208e66:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208e6b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208e70:	e8 3b 32 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208e75:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  208e7c:	01 
  208e7d:	75 6c                	jne    208eeb <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1fb>
  208e7f:	eb 5d                	jmp    208ede <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1ee>
                _ => unsafe { unreachable() },
  208e81:	e8 da 03 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208e86:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208e88:	48 8d 3d e4 76 ff ff 	lea    -0x891c(%rip),%rdi        # 200573 <str.0+0x183>
  208e8f:	48 8d 15 6a 0f 03 00 	lea    0x30f6a(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  208e96:	be 28 00 00 00       	mov    $0x28,%esi
  208e9b:	e8 50 cd 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208ea0:	0f 0b                	ud2    
                    cpu_relax();
  208ea2:	e8 19 24 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208ea7:	eb 44                	jmp    208eed <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1fd>
                PANICKED => panic!("Once has panicked"),
  208ea9:	48 8d 3d 5c 76 ff ff 	lea    -0x89a4(%rip),%rdi        # 20050c <str.0+0x11c>
  208eb0:	48 8d 15 31 0f 03 00 	lea    0x30f31(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  208eb7:	be 11 00 00 00       	mov    $0x11,%esi
  208ebc:	e8 2f cd 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208ec1:	0f 0b                	ud2    
  208ec3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208ec8:	e8 33 1c 00 00       	callq  20ab00 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>
  208ecd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208ed2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208ed7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208edc:	eb 97                	jmp    208e75 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x185>
    }
  208ede:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208ee3:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208eea:	c3                   	retq   
  208eeb:	eb f1                	jmp    208ede <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1ee>
  208eed:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208ef2:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  208ef9:	04 
  208efa:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  208f01:	00 
  208f02:	e8 e9 22 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208f07:	48 89 04 24          	mov    %rax,(%rsp)
  208f0b:	48 8b 04 24          	mov    (%rsp),%rax
  208f0f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208f14:	e9 17 fe ff ff       	jmpq   208d30 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x40>
  208f19:	cc                   	int3   
  208f1a:	cc                   	int3   
  208f1b:	cc                   	int3   
  208f1c:	cc                   	int3   
  208f1d:	cc                   	int3   
  208f1e:	cc                   	int3   
  208f1f:	cc                   	int3   

0000000000208f20 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208f20:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  208f27:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208f2c:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  208f33:	00 
        loop {
  208f34:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  208f3b:	00 
  208f3c:	c6 84 24 bf 00 00 00 	movb   $0x1,0xbf(%rsp)
  208f43:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208f44:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208f49:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208f4e:	e8 9d 22 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208f53:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208f58:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208f5e:	74 29                	je     208f89 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x69>
            match status {
  208f60:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208f65:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208f6a:	48 83 e8 03          	sub    $0x3,%rax
  208f6e:	0f 87 19 01 00 00    	ja     20908d <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x16d>
  208f74:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208f79:	48 8d 0d dc 74 ff ff 	lea    -0x8b24(%rip),%rcx        # 20045c <str.0+0x6c>
  208f80:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208f84:	48 01 c8             	add    %rcx,%rax
  208f87:	ff e0                	jmpq   *%rax
  208f89:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208f8e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208f93:	31 c0                	xor    %eax,%eax
  208f95:	89 c6                	mov    %eax,%esi
  208f97:	ba 01 00 00 00       	mov    $0x1,%edx
  208f9c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208fa1:	e8 2a 21 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208fa6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208fab:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208fb0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208fb5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208fbb:	75 a3                	jne    208f60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x40>
  208fbd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208fc2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208fc7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208fcc:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  208fd3:	00 
  208fd4:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  208fdb:	00 
  208fdc:	e8 7f 2d 00 00       	callq  20bd60 <_ZN4core3ops8function6FnOnce9call_once17h5dfa833bf631dad7E>
  208fe1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  208fe6:	48 83 c7 08          	add    $0x8,%rdi
  208fea:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  208ff1:	00 
  208ff2:	ba 28 00 00 00       	mov    $0x28,%edx
  208ff7:	e8 f4 fc 02 00       	callq  238cf0 <memcpy>
  208ffc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209001:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209008:	00 00 
  20900a:	48 83 c0 08          	add    $0x8,%rax
  20900e:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  209015:	00 
  209016:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20901b:	eb 00                	jmp    20901d <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0xfd>
  20901d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209022:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209027:	ba 30 00 00 00       	mov    $0x30,%edx
  20902c:	e8 bf fc 02 00       	callq  238cf0 <memcpy>
  209031:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209036:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20903b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209042:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209044:	c6 84 24 bd 00 00 00 	movb   $0x4,0xbd(%rsp)
  20904b:	04 
  20904c:	be 02 00 00 00       	mov    $0x2,%esi
  209051:	0f b6 94 24 bd 00 00 	movzbl 0xbd(%rsp),%edx
  209058:	00 
  209059:	e8 d2 21 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20905e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209063:	e8 88 16 00 00       	callq  20a6f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE>
  209068:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20906d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209072:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209077:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20907c:	e8 2f 30 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209081:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  209088:	01 
  209089:	75 6c                	jne    2090f7 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x1d7>
  20908b:	eb 5d                	jmp    2090ea <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x1ca>
                _ => unsafe { unreachable() },
  20908d:	e8 ce 01 01 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209092:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209094:	48 8d 3d d8 74 ff ff 	lea    -0x8b28(%rip),%rdi        # 200573 <str.0+0x183>
  20909b:	48 8d 15 5e 0d 03 00 	lea    0x30d5e(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2090a2:	be 28 00 00 00       	mov    $0x28,%esi
  2090a7:	e8 44 cb 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2090ac:	0f 0b                	ud2    
                    cpu_relax();
  2090ae:	e8 0d 22 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2090b3:	eb 44                	jmp    2090f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  2090b5:	48 8d 3d 50 74 ff ff 	lea    -0x8bb0(%rip),%rdi        # 20050c <str.0+0x11c>
  2090bc:	48 8d 15 25 0d 03 00 	lea    0x30d25(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2090c3:	be 11 00 00 00       	mov    $0x11,%esi
  2090c8:	e8 23 cb 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2090cd:	0f 0b                	ud2    
  2090cf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2090d4:	e8 17 16 00 00       	callq  20a6f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE>
  2090d9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2090de:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2090e3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2090e8:	eb 97                	jmp    209081 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x161>
    }
  2090ea:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2090ef:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  2090f6:	c3                   	retq   
  2090f7:	eb f1                	jmp    2090ea <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x1ca>
  2090f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  2090fe:	c6 84 24 be 00 00 00 	movb   $0x4,0xbe(%rsp)
  209105:	04 
  209106:	0f b6 b4 24 be 00 00 	movzbl 0xbe(%rsp),%esi
  20910d:	00 
  20910e:	e8 dd 20 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209113:	48 89 04 24          	mov    %rax,(%rsp)
  209117:	48 8b 04 24          	mov    (%rsp),%rax
  20911b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209120:	e9 3b fe ff ff       	jmpq   208f60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE+0x40>
  209125:	cc                   	int3   
  209126:	cc                   	int3   
  209127:	cc                   	int3   
  209128:	cc                   	int3   
  209129:	cc                   	int3   
  20912a:	cc                   	int3   
  20912b:	cc                   	int3   
  20912c:	cc                   	int3   
  20912d:	cc                   	int3   
  20912e:	cc                   	int3   
  20912f:	cc                   	int3   

0000000000209130 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209130:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  209137:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20913c:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  209143:	00 
        loop {
  209144:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20914b:	00 
  20914c:	c6 84 24 bf 00 00 00 	movb   $0x1,0xbf(%rsp)
  209153:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209154:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209159:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20915e:	e8 8d 20 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209163:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209168:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20916e:	74 29                	je     209199 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x69>
            match status {
  209170:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209175:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20917a:	48 83 e8 03          	sub    $0x3,%rax
  20917e:	0f 87 21 01 00 00    	ja     2092a5 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x175>
  209184:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209189:	48 8d 0d dc 72 ff ff 	lea    -0x8d24(%rip),%rcx        # 20046c <str.0+0x7c>
  209190:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209194:	48 01 c8             	add    %rcx,%rax
  209197:	ff e0                	jmpq   *%rax
  209199:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20919e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2091a3:	31 c0                	xor    %eax,%eax
  2091a5:	89 c6                	mov    %eax,%esi
  2091a7:	ba 01 00 00 00       	mov    $0x1,%edx
  2091ac:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2091b1:	e8 1a 1f 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2091b6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2091bb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2091c0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2091c5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2091cb:	75 a3                	jne    209170 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x40>
  2091cd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2091d2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2091d7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2091dc:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  2091e3:	00 
  2091e4:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2091eb:	00 
  2091ec:	e8 1f 2a 00 00       	callq  20bc10 <_ZN4core3ops8function6FnOnce9call_once17h292df0ed92871557E>
  2091f1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2091f6:	48 83 c7 08          	add    $0x8,%rdi
  2091fa:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  209201:	00 
  209202:	ba 28 00 00 00       	mov    $0x28,%edx
  209207:	e8 e4 fa 02 00       	callq  238cf0 <memcpy>
  20920c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209211:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209218:	00 00 
  20921a:	48 83 c0 08          	add    $0x8,%rax
  20921e:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  209225:	00 
  209226:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20922b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209230:	e8 5b 2d 00 00       	callq  20bf90 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE>
  209235:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20923a:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  20923f:	ba 30 00 00 00       	mov    $0x30,%edx
  209244:	e8 a7 fa 02 00       	callq  238cf0 <memcpy>
  209249:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  20924e:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209253:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20925a:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20925c:	c6 84 24 bd 00 00 00 	movb   $0x4,0xbd(%rsp)
  209263:	04 
  209264:	be 02 00 00 00       	mov    $0x2,%esi
  209269:	0f b6 94 24 bd 00 00 	movzbl 0xbd(%rsp),%edx
  209270:	00 
  209271:	e8 ba 1f 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209276:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20927b:	e8 b0 13 00 00       	callq  20a630 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>
  209280:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209285:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20928a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20928f:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209294:	e8 17 2e 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209299:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  2092a0:	01 
  2092a1:	75 6c                	jne    20930f <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1df>
  2092a3:	eb 5d                	jmp    209302 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1d2>
                _ => unsafe { unreachable() },
  2092a5:	e8 b6 ff 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2092aa:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2092ac:	48 8d 3d c0 72 ff ff 	lea    -0x8d40(%rip),%rdi        # 200573 <str.0+0x183>
  2092b3:	48 8d 15 46 0b 03 00 	lea    0x30b46(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2092ba:	be 28 00 00 00       	mov    $0x28,%esi
  2092bf:	e8 2c c9 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2092c4:	0f 0b                	ud2    
                    cpu_relax();
  2092c6:	e8 f5 1f 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2092cb:	eb 44                	jmp    209311 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1e1>
                PANICKED => panic!("Once has panicked"),
  2092cd:	48 8d 3d 38 72 ff ff 	lea    -0x8dc8(%rip),%rdi        # 20050c <str.0+0x11c>
  2092d4:	48 8d 15 0d 0b 03 00 	lea    0x30b0d(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2092db:	be 11 00 00 00       	mov    $0x11,%esi
  2092e0:	e8 0b c9 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2092e5:	0f 0b                	ud2    
  2092e7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2092ec:	e8 3f 13 00 00       	callq  20a630 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>
  2092f1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2092f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2092fb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209300:	eb 97                	jmp    209299 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x169>
    }
  209302:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209307:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  20930e:	c3                   	retq   
  20930f:	eb f1                	jmp    209302 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1d2>
  209311:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209316:	c6 84 24 be 00 00 00 	movb   $0x4,0xbe(%rsp)
  20931d:	04 
  20931e:	0f b6 b4 24 be 00 00 	movzbl 0xbe(%rsp),%esi
  209325:	00 
  209326:	e8 c5 1e 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20932b:	48 89 04 24          	mov    %rax,(%rsp)
  20932f:	48 8b 04 24          	mov    (%rsp),%rax
  209333:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209338:	e9 33 fe ff ff       	jmpq   209170 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x40>
  20933d:	cc                   	int3   
  20933e:	cc                   	int3   
  20933f:	cc                   	int3   

0000000000209340 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209340:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  209347:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20934c:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  209353:	00 
        loop {
  209354:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  20935b:	00 
  20935c:	c6 84 24 3f 01 00 00 	movb   $0x1,0x13f(%rsp)
  209363:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209364:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209369:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20936e:	e8 7d 1e 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209373:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209378:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20937e:	74 29                	je     2093a9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x69>
            match status {
  209380:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209385:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20938a:	48 83 e8 03          	sub    $0x3,%rax
  20938e:	0f 87 15 01 00 00    	ja     2094a9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x169>
  209394:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209399:	48 8d 0d dc 70 ff ff 	lea    -0x8f24(%rip),%rcx        # 20047c <str.0+0x8c>
  2093a0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2093a4:	48 01 c8             	add    %rcx,%rax
  2093a7:	ff e0                	jmpq   *%rax
  2093a9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2093ae:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2093b3:	31 c0                	xor    %eax,%eax
  2093b5:	89 c6                	mov    %eax,%esi
  2093b7:	ba 01 00 00 00       	mov    $0x1,%edx
  2093bc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2093c1:	e8 0a 1d 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2093c6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2093cb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2093d0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2093d5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2093db:	75 a3                	jne    209380 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x40>
  2093dd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2093e2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2093e7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2093ec:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  2093f3:	00 
  2093f4:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  2093fb:	00 
  2093fc:	e8 1f 2b 00 00       	callq  20bf20 <_ZN4core3ops8function6FnOnce9call_once17hd8203fd94ba4d5e4E>
  209401:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209406:	48 83 c7 01          	add    $0x1,%rdi
  20940a:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  209411:	00 
  209412:	ba 68 00 00 00       	mov    $0x68,%edx
  209417:	e8 d4 f8 02 00       	callq  238cf0 <memcpy>
  20941c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209421:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  209426:	48 83 c0 08          	add    $0x8,%rax
  20942a:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  209431:	00 
  209432:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209437:	eb 00                	jmp    209439 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0xf9>
  209439:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20943e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209443:	ba 69 00 00 00       	mov    $0x69,%edx
  209448:	e8 a3 f8 02 00       	callq  238cf0 <memcpy>
  20944d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209452:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209457:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20945e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209460:	c6 84 24 3d 01 00 00 	movb   $0x4,0x13d(%rsp)
  209467:	04 
  209468:	be 02 00 00 00       	mov    $0x2,%esi
  20946d:	0f b6 94 24 3d 01 00 	movzbl 0x13d(%rsp),%edx
  209474:	00 
  209475:	e8 b6 1d 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20947a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20947f:	e8 2c 13 00 00       	callq  20a7b0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>
  209484:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209489:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20948e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209493:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209498:	e8 13 2c 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  20949d:	f6 84 24 3f 01 00 00 	testb  $0x1,0x13f(%rsp)
  2094a4:	01 
  2094a5:	75 6c                	jne    209513 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1d3>
  2094a7:	eb 5d                	jmp    209506 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1c6>
                _ => unsafe { unreachable() },
  2094a9:	e8 b2 fd 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2094ae:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2094b0:	48 8d 3d bc 70 ff ff 	lea    -0x8f44(%rip),%rdi        # 200573 <str.0+0x183>
  2094b7:	48 8d 15 42 09 03 00 	lea    0x30942(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2094be:	be 28 00 00 00       	mov    $0x28,%esi
  2094c3:	e8 28 c7 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2094c8:	0f 0b                	ud2    
                    cpu_relax();
  2094ca:	e8 f1 1d 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2094cf:	eb 44                	jmp    209515 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1d5>
                PANICKED => panic!("Once has panicked"),
  2094d1:	48 8d 3d 34 70 ff ff 	lea    -0x8fcc(%rip),%rdi        # 20050c <str.0+0x11c>
  2094d8:	48 8d 15 09 09 03 00 	lea    0x30909(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2094df:	be 11 00 00 00       	mov    $0x11,%esi
  2094e4:	e8 07 c7 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2094e9:	0f 0b                	ud2    
  2094eb:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2094f0:	e8 bb 12 00 00       	callq  20a7b0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>
  2094f5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2094fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2094ff:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209504:	eb 97                	jmp    20949d <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x15d>
    }
  209506:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20950b:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  209512:	c3                   	retq   
  209513:	eb f1                	jmp    209506 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1c6>
  209515:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20951a:	c6 84 24 3e 01 00 00 	movb   $0x4,0x13e(%rsp)
  209521:	04 
  209522:	0f b6 b4 24 3e 01 00 	movzbl 0x13e(%rsp),%esi
  209529:	00 
  20952a:	e8 c1 1c 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20952f:	48 89 04 24          	mov    %rax,(%rsp)
  209533:	48 8b 04 24          	mov    (%rsp),%rax
  209537:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20953c:	e9 3f fe ff ff       	jmpq   209380 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x40>
  209541:	cc                   	int3   
  209542:	cc                   	int3   
  209543:	cc                   	int3   
  209544:	cc                   	int3   
  209545:	cc                   	int3   
  209546:	cc                   	int3   
  209547:	cc                   	int3   
  209548:	cc                   	int3   
  209549:	cc                   	int3   
  20954a:	cc                   	int3   
  20954b:	cc                   	int3   
  20954c:	cc                   	int3   
  20954d:	cc                   	int3   
  20954e:	cc                   	int3   
  20954f:	cc                   	int3   

0000000000209550 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209550:	48 81 ec a8 10 00 00 	sub    $0x10a8,%rsp
  209557:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20955c:	48 89 bc 24 90 10 00 	mov    %rdi,0x1090(%rsp)
  209563:	00 
        loop {
  209564:	c6 84 24 8f 10 00 00 	movb   $0x0,0x108f(%rsp)
  20956b:	00 
  20956c:	c6 84 24 8f 10 00 00 	movb   $0x1,0x108f(%rsp)
  209573:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209574:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209579:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20957e:	e8 6d 1c 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209583:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209588:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20958e:	74 29                	je     2095b9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x69>
            match status {
  209590:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209595:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20959a:	48 83 e8 03          	sub    $0x3,%rax
  20959e:	0f 87 19 01 00 00    	ja     2096bd <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x16d>
  2095a4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2095a9:	48 8d 0d dc 6e ff ff 	lea    -0x9124(%rip),%rcx        # 20048c <str.0+0x9c>
  2095b0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2095b4:	48 01 c8             	add    %rcx,%rax
  2095b7:	ff e0                	jmpq   *%rax
  2095b9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2095be:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2095c3:	31 c0                	xor    %eax,%eax
  2095c5:	89 c6                	mov    %eax,%esi
  2095c7:	ba 01 00 00 00       	mov    $0x1,%edx
  2095cc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2095d1:	e8 fa 1a 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2095d6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2095db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2095e0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2095e5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2095eb:	75 a3                	jne    209590 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x40>
  2095ed:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2095f2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2095f7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2095fc:	c6 84 24 8f 10 00 00 	movb   $0x0,0x108f(%rsp)
  209603:	00 
  209604:	48 8d bc 24 78 08 00 	lea    0x878(%rsp),%rdi
  20960b:	00 
  20960c:	e8 cf 28 00 00       	callq  20bee0 <_ZN4core3ops8function6FnOnce9call_once17hc979a394b9036ee6E>
  209611:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209616:	48 83 c7 08          	add    $0x8,%rdi
  20961a:	48 8d b4 24 78 08 00 	lea    0x878(%rsp),%rsi
  209621:	00 
  209622:	ba 10 08 00 00       	mov    $0x810,%edx
  209627:	e8 c4 f6 02 00       	callq  238cf0 <memcpy>
  20962c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209631:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209638:	00 00 
  20963a:	48 83 c0 08          	add    $0x8,%rax
  20963e:	48 89 84 24 a0 10 00 	mov    %rax,0x10a0(%rsp)
  209645:	00 
  209646:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20964b:	eb 00                	jmp    20964d <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0xfd>
  20964d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209652:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209657:	ba 18 08 00 00       	mov    $0x818,%edx
  20965c:	e8 8f f6 02 00       	callq  238cf0 <memcpy>
  209661:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209666:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20966b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209672:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209674:	c6 84 24 8d 10 00 00 	movb   $0x4,0x108d(%rsp)
  20967b:	04 
  20967c:	be 02 00 00 00       	mov    $0x2,%esi
  209681:	0f b6 94 24 8d 10 00 	movzbl 0x108d(%rsp),%edx
  209688:	00 
  209689:	e8 a2 1b 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20968e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209693:	e8 f8 0f 00 00       	callq  20a690 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>
  209698:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20969d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2096a2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2096a7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2096ac:	e8 ff 29 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2096b1:	f6 84 24 8f 10 00 00 	testb  $0x1,0x108f(%rsp)
  2096b8:	01 
  2096b9:	75 6c                	jne    209727 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1d7>
  2096bb:	eb 5d                	jmp    20971a <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1ca>
                _ => unsafe { unreachable() },
  2096bd:	e8 9e fb 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2096c2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2096c4:	48 8d 3d a8 6e ff ff 	lea    -0x9158(%rip),%rdi        # 200573 <str.0+0x183>
  2096cb:	48 8d 15 2e 07 03 00 	lea    0x3072e(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2096d2:	be 28 00 00 00       	mov    $0x28,%esi
  2096d7:	e8 14 c5 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2096dc:	0f 0b                	ud2    
                    cpu_relax();
  2096de:	e8 dd 1b 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2096e3:	eb 44                	jmp    209729 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  2096e5:	48 8d 3d 20 6e ff ff 	lea    -0x91e0(%rip),%rdi        # 20050c <str.0+0x11c>
  2096ec:	48 8d 15 f5 06 03 00 	lea    0x306f5(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2096f3:	be 11 00 00 00       	mov    $0x11,%esi
  2096f8:	e8 f3 c4 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2096fd:	0f 0b                	ud2    
  2096ff:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209704:	e8 87 0f 00 00       	callq  20a690 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>
  209709:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20970e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209713:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209718:	eb 97                	jmp    2096b1 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x161>
    }
  20971a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20971f:	48 81 c4 a8 10 00 00 	add    $0x10a8,%rsp
  209726:	c3                   	retq   
  209727:	eb f1                	jmp    20971a <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1ca>
  209729:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20972e:	c6 84 24 8e 10 00 00 	movb   $0x4,0x108e(%rsp)
  209735:	04 
  209736:	0f b6 b4 24 8e 10 00 	movzbl 0x108e(%rsp),%esi
  20973d:	00 
  20973e:	e8 ad 1a 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209743:	48 89 04 24          	mov    %rax,(%rsp)
  209747:	48 8b 04 24          	mov    (%rsp),%rax
  20974b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209750:	e9 3b fe ff ff       	jmpq   209590 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x40>
  209755:	cc                   	int3   
  209756:	cc                   	int3   
  209757:	cc                   	int3   
  209758:	cc                   	int3   
  209759:	cc                   	int3   
  20975a:	cc                   	int3   
  20975b:	cc                   	int3   
  20975c:	cc                   	int3   
  20975d:	cc                   	int3   
  20975e:	cc                   	int3   
  20975f:	cc                   	int3   

0000000000209760 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209760:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  209767:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20976c:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  209773:	00 
        loop {
  209774:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  20977b:	00 
  20977c:	c6 84 24 cf 00 00 00 	movb   $0x1,0xcf(%rsp)
  209783:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209784:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  209789:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  20978e:	e8 5d 1a 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209793:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  209798:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  20979e:	74 29                	je     2097c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x69>
            match status {
  2097a0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2097a5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2097aa:	48 83 e8 03          	sub    $0x3,%rax
  2097ae:	0f 87 0c 01 00 00    	ja     2098c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x160>
  2097b4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2097b9:	48 8d 0d dc 6c ff ff 	lea    -0x9324(%rip),%rcx        # 20049c <str.0+0xac>
  2097c0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2097c4:	48 01 c8             	add    %rcx,%rax
  2097c7:	ff e0                	jmpq   *%rax
  2097c9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  2097ce:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2097d3:	31 c0                	xor    %eax,%eax
  2097d5:	89 c6                	mov    %eax,%esi
  2097d7:	ba 01 00 00 00       	mov    $0x1,%edx
  2097dc:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  2097e1:	e8 ea 18 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2097e6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2097eb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2097f0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  2097f5:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  2097fb:	75 a3                	jne    2097a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x40>
  2097fd:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209802:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209807:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20980c:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  209813:	00 
  209814:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20981b:	00 
  20981c:	e8 af 24 00 00       	callq  20bcd0 <_ZN4core3ops8function6FnOnce9call_once17h35dfcc7c677b1963E>
  209821:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209826:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  20982d:	00 
  20982e:	ba 30 00 00 00       	mov    $0x30,%edx
  209833:	e8 b8 f4 02 00       	callq  238cf0 <memcpy>
  209838:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20983d:	48 83 c0 08          	add    $0x8,%rax
  209841:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  209848:	00 
  209849:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20984e:	eb 00                	jmp    209850 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0xf0>
  209850:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  209855:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  20985a:	ba 30 00 00 00       	mov    $0x30,%edx
  20985f:	e8 8c f4 02 00       	callq  238cf0 <memcpy>
  209864:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  209869:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  20986e:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  209875:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209877:	c6 84 24 cd 00 00 00 	movb   $0x4,0xcd(%rsp)
  20987e:	04 
  20987f:	be 02 00 00 00       	mov    $0x2,%esi
  209884:	0f b6 94 24 cd 00 00 	movzbl 0xcd(%rsp),%edx
  20988b:	00 
  20988c:	e8 9f 19 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209891:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  209896:	e8 c5 12 00 00       	callq  20ab60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>
  20989b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2098a0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2098a5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  2098aa:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2098af:	e8 fc 27 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2098b4:	f6 84 24 cf 00 00 00 	testb  $0x1,0xcf(%rsp)
  2098bb:	01 
  2098bc:	75 6c                	jne    20992a <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1ca>
  2098be:	eb 5d                	jmp    20991d <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1bd>
                _ => unsafe { unreachable() },
  2098c0:	e8 9b f9 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2098c5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2098c7:	48 8d 3d a5 6c ff ff 	lea    -0x935b(%rip),%rdi        # 200573 <str.0+0x183>
  2098ce:	48 8d 15 2b 05 03 00 	lea    0x3052b(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  2098d5:	be 28 00 00 00       	mov    $0x28,%esi
  2098da:	e8 11 c3 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2098df:	0f 0b                	ud2    
                    cpu_relax();
  2098e1:	e8 da 19 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2098e6:	eb 44                	jmp    20992c <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1cc>
                PANICKED => panic!("Once has panicked"),
  2098e8:	48 8d 3d 1d 6c ff ff 	lea    -0x93e3(%rip),%rdi        # 20050c <str.0+0x11c>
  2098ef:	48 8d 15 f2 04 03 00 	lea    0x304f2(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  2098f6:	be 11 00 00 00       	mov    $0x11,%esi
  2098fb:	e8 f0 c2 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209900:	0f 0b                	ud2    
  209902:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209907:	e8 54 12 00 00       	callq  20ab60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>
  20990c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209911:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209916:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20991b:	eb 97                	jmp    2098b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x154>
    }
  20991d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209922:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  209929:	c3                   	retq   
  20992a:	eb f1                	jmp    20991d <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1bd>
  20992c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209931:	c6 84 24 ce 00 00 00 	movb   $0x4,0xce(%rsp)
  209938:	04 
  209939:	0f b6 b4 24 ce 00 00 	movzbl 0xce(%rsp),%esi
  209940:	00 
  209941:	e8 aa 18 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209946:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20994b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209950:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209955:	e9 46 fe ff ff       	jmpq   2097a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x40>
  20995a:	cc                   	int3   
  20995b:	cc                   	int3   
  20995c:	cc                   	int3   
  20995d:	cc                   	int3   
  20995e:	cc                   	int3   
  20995f:	cc                   	int3   

0000000000209960 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209960:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  209967:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20996c:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  209973:	00 
        loop {
  209974:	c6 84 24 2f 01 00 00 	movb   $0x0,0x12f(%rsp)
  20997b:	00 
  20997c:	c6 84 24 2f 01 00 00 	movb   $0x1,0x12f(%rsp)
  209983:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209984:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209989:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20998e:	e8 5d 18 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209993:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209998:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20999e:	74 29                	je     2099c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x69>
            match status {
  2099a0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2099a5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2099aa:	48 83 e8 03          	sub    $0x3,%rax
  2099ae:	0f 87 19 01 00 00    	ja     209acd <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x16d>
  2099b4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2099b9:	48 8d 0d ec 6a ff ff 	lea    -0x9514(%rip),%rcx        # 2004ac <str.0+0xbc>
  2099c0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2099c4:	48 01 c8             	add    %rcx,%rax
  2099c7:	ff e0                	jmpq   *%rax
  2099c9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2099ce:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2099d3:	31 c0                	xor    %eax,%eax
  2099d5:	89 c6                	mov    %eax,%esi
  2099d7:	ba 01 00 00 00       	mov    $0x1,%edx
  2099dc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2099e1:	e8 ea 16 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2099e6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2099eb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2099f0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2099f5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2099fb:	75 a3                	jne    2099a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x40>
  2099fd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209a02:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209a07:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209a0c:	c6 84 24 2f 01 00 00 	movb   $0x0,0x12f(%rsp)
  209a13:	00 
  209a14:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  209a1b:	00 
  209a1c:	e8 2f 22 00 00       	callq  20bc50 <_ZN4core3ops8function6FnOnce9call_once17h2a57aa7eac2aa15bE>
  209a21:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209a26:	48 83 c7 08          	add    $0x8,%rdi
  209a2a:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  209a31:	00 
  209a32:	ba 60 00 00 00       	mov    $0x60,%edx
  209a37:	e8 b4 f2 02 00       	callq  238cf0 <memcpy>
  209a3c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209a41:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209a48:	00 00 
  209a4a:	48 83 c0 08          	add    $0x8,%rax
  209a4e:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  209a55:	00 
  209a56:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209a5b:	eb 00                	jmp    209a5d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0xfd>
  209a5d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209a62:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209a67:	ba 68 00 00 00       	mov    $0x68,%edx
  209a6c:	e8 7f f2 02 00       	callq  238cf0 <memcpy>
  209a71:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209a76:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209a7b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209a82:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209a84:	c6 84 24 2d 01 00 00 	movb   $0x4,0x12d(%rsp)
  209a8b:	04 
  209a8c:	be 02 00 00 00       	mov    $0x2,%esi
  209a91:	0f b6 94 24 2d 01 00 	movzbl 0x12d(%rsp),%edx
  209a98:	00 
  209a99:	e8 92 17 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209a9e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209aa3:	e8 88 0e 00 00       	callq  20a930 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>
  209aa8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209aad:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209ab2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209ab7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209abc:	e8 ef 25 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209ac1:	f6 84 24 2f 01 00 00 	testb  $0x1,0x12f(%rsp)
  209ac8:	01 
  209ac9:	75 6c                	jne    209b37 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1d7>
  209acb:	eb 5d                	jmp    209b2a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1ca>
                _ => unsafe { unreachable() },
  209acd:	e8 8e f7 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209ad2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209ad4:	48 8d 3d 98 6a ff ff 	lea    -0x9568(%rip),%rdi        # 200573 <str.0+0x183>
  209adb:	48 8d 15 1e 03 03 00 	lea    0x3031e(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  209ae2:	be 28 00 00 00       	mov    $0x28,%esi
  209ae7:	e8 04 c1 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209aec:	0f 0b                	ud2    
                    cpu_relax();
  209aee:	e8 cd 17 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209af3:	eb 44                	jmp    209b39 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209af5:	48 8d 3d 10 6a ff ff 	lea    -0x95f0(%rip),%rdi        # 20050c <str.0+0x11c>
  209afc:	48 8d 15 e5 02 03 00 	lea    0x302e5(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  209b03:	be 11 00 00 00       	mov    $0x11,%esi
  209b08:	e8 e3 c0 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209b0d:	0f 0b                	ud2    
  209b0f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209b14:	e8 17 0e 00 00       	callq  20a930 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>
  209b19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209b1e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209b23:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209b28:	eb 97                	jmp    209ac1 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x161>
    }
  209b2a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209b2f:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  209b36:	c3                   	retq   
  209b37:	eb f1                	jmp    209b2a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1ca>
  209b39:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209b3e:	c6 84 24 2e 01 00 00 	movb   $0x4,0x12e(%rsp)
  209b45:	04 
  209b46:	0f b6 b4 24 2e 01 00 	movzbl 0x12e(%rsp),%esi
  209b4d:	00 
  209b4e:	e8 9d 16 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209b53:	48 89 04 24          	mov    %rax,(%rsp)
  209b57:	48 8b 04 24          	mov    (%rsp),%rax
  209b5b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209b60:	e9 3b fe ff ff       	jmpq   2099a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x40>
  209b65:	cc                   	int3   
  209b66:	cc                   	int3   
  209b67:	cc                   	int3   
  209b68:	cc                   	int3   
  209b69:	cc                   	int3   
  209b6a:	cc                   	int3   
  209b6b:	cc                   	int3   
  209b6c:	cc                   	int3   
  209b6d:	cc                   	int3   
  209b6e:	cc                   	int3   
  209b6f:	cc                   	int3   

0000000000209b70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209b70:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  209b77:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  209b7c:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  209b83:	00 
        loop {
  209b84:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  209b8b:	00 
  209b8c:	c6 84 24 df 00 00 00 	movb   $0x1,0xdf(%rsp)
  209b93:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209b94:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  209b99:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  209b9e:	e8 4d 16 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209ba3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  209ba8:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  209bae:	74 29                	je     209bd9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x69>
            match status {
  209bb0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  209bb5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  209bba:	48 83 e8 03          	sub    $0x3,%rax
  209bbe:	0f 87 0c 01 00 00    	ja     209cd0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x160>
  209bc4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209bc9:	48 8d 0d ec 68 ff ff 	lea    -0x9714(%rip),%rcx        # 2004bc <str.0+0xcc>
  209bd0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209bd4:	48 01 c8             	add    %rcx,%rax
  209bd7:	ff e0                	jmpq   *%rax
  209bd9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  209bde:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209be3:	31 c0                	xor    %eax,%eax
  209be5:	89 c6                	mov    %eax,%esi
  209be7:	ba 01 00 00 00       	mov    $0x1,%edx
  209bec:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  209bf1:	e8 da 14 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209bf6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209bfb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209c00:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  209c05:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  209c0b:	75 a3                	jne    209bb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x40>
  209c0d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209c12:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209c17:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209c1c:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  209c23:	00 
  209c24:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  209c2b:	00 
  209c2c:	e8 df 21 00 00       	callq  20be10 <_ZN4core3ops8function6FnOnce9call_once17h904af9fc8ad763bdE>
  209c31:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209c36:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  209c3d:	00 
  209c3e:	ba 38 00 00 00       	mov    $0x38,%edx
  209c43:	e8 a8 f0 02 00       	callq  238cf0 <memcpy>
  209c48:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209c4d:	48 83 c0 08          	add    $0x8,%rax
  209c51:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  209c58:	00 
  209c59:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209c5e:	eb 00                	jmp    209c60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0xf0>
  209c60:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  209c65:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  209c6a:	ba 38 00 00 00       	mov    $0x38,%edx
  209c6f:	e8 7c f0 02 00       	callq  238cf0 <memcpy>
  209c74:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  209c79:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  209c7e:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  209c85:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209c87:	c6 84 24 dd 00 00 00 	movb   $0x4,0xdd(%rsp)
  209c8e:	04 
  209c8f:	be 02 00 00 00       	mov    $0x2,%esi
  209c94:	0f b6 94 24 dd 00 00 	movzbl 0xdd(%rsp),%edx
  209c9b:	00 
  209c9c:	e8 8f 15 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209ca1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  209ca6:	e8 95 0d 00 00       	callq  20aa40 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>
  209cab:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209cb0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209cb5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  209cba:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  209cbf:	e8 ec 23 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209cc4:	f6 84 24 df 00 00 00 	testb  $0x1,0xdf(%rsp)
  209ccb:	01 
  209ccc:	75 6c                	jne    209d3a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1ca>
  209cce:	eb 5d                	jmp    209d2d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1bd>
                _ => unsafe { unreachable() },
  209cd0:	e8 8b f5 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209cd5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209cd7:	48 8d 3d 95 68 ff ff 	lea    -0x976b(%rip),%rdi        # 200573 <str.0+0x183>
  209cde:	48 8d 15 1b 01 03 00 	lea    0x3011b(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  209ce5:	be 28 00 00 00       	mov    $0x28,%esi
  209cea:	e8 01 bf 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209cef:	0f 0b                	ud2    
                    cpu_relax();
  209cf1:	e8 ca 15 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209cf6:	eb 44                	jmp    209d3c <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1cc>
                PANICKED => panic!("Once has panicked"),
  209cf8:	48 8d 3d 0d 68 ff ff 	lea    -0x97f3(%rip),%rdi        # 20050c <str.0+0x11c>
  209cff:	48 8d 15 e2 00 03 00 	lea    0x300e2(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  209d06:	be 11 00 00 00       	mov    $0x11,%esi
  209d0b:	e8 e0 be 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209d10:	0f 0b                	ud2    
  209d12:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209d17:	e8 24 0d 00 00       	callq  20aa40 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>
  209d1c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209d21:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209d26:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209d2b:	eb 97                	jmp    209cc4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x154>
    }
  209d2d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209d32:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  209d39:	c3                   	retq   
  209d3a:	eb f1                	jmp    209d2d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1bd>
  209d3c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209d41:	c6 84 24 de 00 00 00 	movb   $0x4,0xde(%rsp)
  209d48:	04 
  209d49:	0f b6 b4 24 de 00 00 	movzbl 0xde(%rsp),%esi
  209d50:	00 
  209d51:	e8 9a 14 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209d56:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209d5b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209d60:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209d65:	e9 46 fe ff ff       	jmpq   209bb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x40>
  209d6a:	cc                   	int3   
  209d6b:	cc                   	int3   
  209d6c:	cc                   	int3   
  209d6d:	cc                   	int3   
  209d6e:	cc                   	int3   
  209d6f:	cc                   	int3   

0000000000209d70 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209d70:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  209d77:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  209d7c:	48 89 bc 24 00 01 00 	mov    %rdi,0x100(%rsp)
  209d83:	00 
        loop {
  209d84:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  209d8b:	00 
  209d8c:	c6 84 24 ff 00 00 00 	movb   $0x1,0xff(%rsp)
  209d93:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209d94:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209d99:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  209d9e:	e8 4d 14 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209da3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209da8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209dae:	74 29                	je     209dd9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x69>
            match status {
  209db0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209db5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209dba:	48 83 e8 03          	sub    $0x3,%rax
  209dbe:	0f 87 19 01 00 00    	ja     209edd <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x16d>
  209dc4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209dc9:	48 8d 0d fc 66 ff ff 	lea    -0x9904(%rip),%rcx        # 2004cc <str.0+0xdc>
  209dd0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209dd4:	48 01 c8             	add    %rcx,%rax
  209dd7:	ff e0                	jmpq   *%rax
  209dd9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  209dde:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209de3:	31 c0                	xor    %eax,%eax
  209de5:	89 c6                	mov    %eax,%esi
  209de7:	ba 01 00 00 00       	mov    $0x1,%edx
  209dec:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209df1:	e8 da 12 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209df6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209dfb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209e00:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209e05:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209e0b:	75 a3                	jne    209db0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x40>
  209e0d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209e12:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209e17:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209e1c:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  209e23:	00 
  209e24:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  209e2b:	00 
  209e2c:	e8 ff 1f 00 00       	callq  20be30 <_ZN4core3ops8function6FnOnce9call_once17h9b71252915a475a7E>
  209e31:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209e36:	48 83 c7 08          	add    $0x8,%rdi
  209e3a:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  209e41:	00 
  209e42:	ba 48 00 00 00       	mov    $0x48,%edx
  209e47:	e8 a4 ee 02 00       	callq  238cf0 <memcpy>
  209e4c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209e51:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209e58:	00 00 
  209e5a:	48 83 c0 08          	add    $0x8,%rax
  209e5e:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  209e65:	00 
  209e66:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209e6b:	eb 00                	jmp    209e6d <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0xfd>
  209e6d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209e72:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209e77:	ba 50 00 00 00       	mov    $0x50,%edx
  209e7c:	e8 6f ee 02 00       	callq  238cf0 <memcpy>
  209e81:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209e86:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209e8b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209e92:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209e94:	c6 84 24 fd 00 00 00 	movb   $0x4,0xfd(%rsp)
  209e9b:	04 
  209e9c:	be 02 00 00 00       	mov    $0x2,%esi
  209ea1:	0f b6 94 24 fd 00 00 	movzbl 0xfd(%rsp),%edx
  209ea8:	00 
  209ea9:	e8 82 13 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209eae:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209eb3:	e8 18 07 00 00       	callq  20a5d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>
  209eb8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209ebd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209ec2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209ec7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209ecc:	e8 df 21 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209ed1:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  209ed8:	01 
  209ed9:	75 6c                	jne    209f47 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1d7>
  209edb:	eb 5d                	jmp    209f3a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1ca>
                _ => unsafe { unreachable() },
  209edd:	e8 7e f3 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209ee2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209ee4:	48 8d 3d 88 66 ff ff 	lea    -0x9978(%rip),%rdi        # 200573 <str.0+0x183>
  209eeb:	48 8d 15 0e ff 02 00 	lea    0x2ff0e(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  209ef2:	be 28 00 00 00       	mov    $0x28,%esi
  209ef7:	e8 f4 bc 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209efc:	0f 0b                	ud2    
                    cpu_relax();
  209efe:	e8 bd 13 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209f03:	eb 44                	jmp    209f49 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209f05:	48 8d 3d 00 66 ff ff 	lea    -0x9a00(%rip),%rdi        # 20050c <str.0+0x11c>
  209f0c:	48 8d 15 d5 fe 02 00 	lea    0x2fed5(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  209f13:	be 11 00 00 00       	mov    $0x11,%esi
  209f18:	e8 d3 bc 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209f1d:	0f 0b                	ud2    
  209f1f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209f24:	e8 a7 06 00 00       	callq  20a5d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>
  209f29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209f2e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209f33:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209f38:	eb 97                	jmp    209ed1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x161>
    }
  209f3a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209f3f:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  209f46:	c3                   	retq   
  209f47:	eb f1                	jmp    209f3a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1ca>
  209f49:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209f4e:	c6 84 24 fe 00 00 00 	movb   $0x4,0xfe(%rsp)
  209f55:	04 
  209f56:	0f b6 b4 24 fe 00 00 	movzbl 0xfe(%rsp),%esi
  209f5d:	00 
  209f5e:	e8 8d 12 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209f63:	48 89 04 24          	mov    %rax,(%rsp)
  209f67:	48 8b 04 24          	mov    (%rsp),%rax
  209f6b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209f70:	e9 3b fe ff ff       	jmpq   209db0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x40>
  209f75:	cc                   	int3   
  209f76:	cc                   	int3   
  209f77:	cc                   	int3   
  209f78:	cc                   	int3   
  209f79:	cc                   	int3   
  209f7a:	cc                   	int3   
  209f7b:	cc                   	int3   
  209f7c:	cc                   	int3   
  209f7d:	cc                   	int3   
  209f7e:	cc                   	int3   
  209f7f:	cc                   	int3   

0000000000209f80 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209f80:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  209f87:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  209f8c:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  209f93:	00 
        loop {
  209f94:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  209f9b:	00 
  209f9c:	c6 84 24 0f 01 00 00 	movb   $0x1,0x10f(%rsp)
  209fa3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209fa4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209fa9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  209fae:	e8 3d 12 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209fb3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209fb8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209fbe:	74 29                	je     209fe9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x69>
            match status {
  209fc0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209fc5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209fca:	48 83 e8 03          	sub    $0x3,%rax
  209fce:	0f 87 19 01 00 00    	ja     20a0ed <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x16d>
  209fd4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209fd9:	48 8d 0d fc 64 ff ff 	lea    -0x9b04(%rip),%rcx        # 2004dc <str.0+0xec>
  209fe0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209fe4:	48 01 c8             	add    %rcx,%rax
  209fe7:	ff e0                	jmpq   *%rax
  209fe9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  209fee:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209ff3:	31 c0                	xor    %eax,%eax
  209ff5:	89 c6                	mov    %eax,%esi
  209ff7:	ba 01 00 00 00       	mov    $0x1,%edx
  209ffc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  20a001:	e8 ca 10 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  20a006:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a00b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a010:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  20a015:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20a01b:	75 a3                	jne    209fc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x40>
  20a01d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  20a022:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20a027:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20a02c:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  20a033:	00 
  20a034:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20a03b:	00 
  20a03c:	e8 8f 1b 00 00       	callq  20bbd0 <_ZN4core3ops8function6FnOnce9call_once17h113bbf498259d8e9E>
  20a041:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20a046:	48 83 c7 08          	add    $0x8,%rdi
  20a04a:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  20a051:	00 
  20a052:	ba 50 00 00 00       	mov    $0x50,%edx
  20a057:	e8 94 ec 02 00       	callq  238cf0 <memcpy>
  20a05c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20a061:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  20a068:	00 00 
  20a06a:	48 83 c0 08          	add    $0x8,%rax
  20a06e:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20a075:	00 
  20a076:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a07b:	eb 00                	jmp    20a07d <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0xfd>
  20a07d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20a082:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  20a087:	ba 58 00 00 00       	mov    $0x58,%edx
  20a08c:	e8 5f ec 02 00       	callq  238cf0 <memcpy>
  20a091:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  20a096:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20a09b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20a0a2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20a0a4:	c6 84 24 0d 01 00 00 	movb   $0x4,0x10d(%rsp)
  20a0ab:	04 
  20a0ac:	be 02 00 00 00       	mov    $0x2,%esi
  20a0b1:	0f b6 94 24 0d 01 00 	movzbl 0x10d(%rsp),%edx
  20a0b8:	00 
  20a0b9:	e8 72 11 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20a0be:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20a0c3:	e8 c8 08 00 00       	callq  20a990 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>
  20a0c8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a0cd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a0d2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20a0d7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20a0dc:	e8 cf 1f 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  20a0e1:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  20a0e8:	01 
  20a0e9:	75 6c                	jne    20a157 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1d7>
  20a0eb:	eb 5d                	jmp    20a14a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1ca>
                _ => unsafe { unreachable() },
  20a0ed:	e8 6e f1 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a0f2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  20a0f4:	48 8d 3d 78 64 ff ff 	lea    -0x9b88(%rip),%rdi        # 200573 <str.0+0x183>
  20a0fb:	48 8d 15 fe fc 02 00 	lea    0x2fcfe(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  20a102:	be 28 00 00 00       	mov    $0x28,%esi
  20a107:	e8 e4 ba 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a10c:	0f 0b                	ud2    
                    cpu_relax();
  20a10e:	e8 ad 11 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  20a113:	eb 44                	jmp    20a159 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  20a115:	48 8d 3d f0 63 ff ff 	lea    -0x9c10(%rip),%rdi        # 20050c <str.0+0x11c>
  20a11c:	48 8d 15 c5 fc 02 00 	lea    0x2fcc5(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  20a123:	be 11 00 00 00       	mov    $0x11,%esi
  20a128:	e8 c3 ba 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a12d:	0f 0b                	ud2    
  20a12f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  20a134:	e8 57 08 00 00       	callq  20a990 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>
  20a139:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a13e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a143:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a148:	eb 97                	jmp    20a0e1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x161>
    }
  20a14a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20a14f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  20a156:	c3                   	retq   
  20a157:	eb f1                	jmp    20a14a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1ca>
  20a159:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20a15e:	c6 84 24 0e 01 00 00 	movb   $0x4,0x10e(%rsp)
  20a165:	04 
  20a166:	0f b6 b4 24 0e 01 00 	movzbl 0x10e(%rsp),%esi
  20a16d:	00 
  20a16e:	e8 7d 10 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20a173:	48 89 04 24          	mov    %rax,(%rsp)
  20a177:	48 8b 04 24          	mov    (%rsp),%rax
  20a17b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20a180:	e9 3b fe ff ff       	jmpq   209fc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x40>
  20a185:	cc                   	int3   
  20a186:	cc                   	int3   
  20a187:	cc                   	int3   
  20a188:	cc                   	int3   
  20a189:	cc                   	int3   
  20a18a:	cc                   	int3   
  20a18b:	cc                   	int3   
  20a18c:	cc                   	int3   
  20a18d:	cc                   	int3   
  20a18e:	cc                   	int3   
  20a18f:	cc                   	int3   

000000000020a190 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  20a190:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  20a197:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a19c:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  20a1a3:	00 
        loop {
  20a1a4:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  20a1ab:	00 
  20a1ac:	c6 84 24 8f 00 00 00 	movb   $0x1,0x8f(%rsp)
  20a1b3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  20a1b4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  20a1b9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20a1be:	e8 2d 10 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20a1c3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  20a1c8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20a1ce:	74 29                	je     20a1f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x69>
            match status {
  20a1d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20a1d5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a1da:	48 83 e8 03          	sub    $0x3,%rax
  20a1de:	0f 87 42 01 00 00    	ja     20a326 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x196>
  20a1e4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20a1e9:	48 8d 0d fc 62 ff ff 	lea    -0x9d04(%rip),%rcx        # 2004ec <str.0+0xfc>
  20a1f0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20a1f4:	48 01 c8             	add    %rcx,%rax
  20a1f7:	ff e0                	jmpq   *%rax
  20a1f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20a1fe:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  20a203:	31 c0                	xor    %eax,%eax
  20a205:	89 c6                	mov    %eax,%esi
  20a207:	ba 01 00 00 00       	mov    $0x1,%edx
  20a20c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  20a211:	e8 ba 0e 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  20a216:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a21b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a220:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  20a225:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20a22b:	75 a3                	jne    20a1d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x40>
  20a22d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  20a232:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20a237:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20a23c:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  20a243:	00 
  20a244:	e8 07 1c 00 00       	callq  20be50 <_ZN4core3ops8function6FnOnce9call_once17ha33d620dcb6c3e32E>
  20a249:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  20a250:	00 
  20a251:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20a258:	00 
  20a259:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20a260:	00 
  20a261:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20a266:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20a26d:	00 
  20a26e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20a275:	00 
  20a276:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20a27b:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  20a280:	48 89 4c 24 64       	mov    %rcx,0x64(%rsp)
  20a285:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20a28c:	00 
  20a28d:	48 89 4c 24 6c       	mov    %rcx,0x6c(%rsp)
  20a292:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
  20a299:	00 
  20a29a:	48 83 c0 08          	add    $0x8,%rax
  20a29e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20a2a5:	00 
  20a2a6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a2ab:	eb 00                	jmp    20a2ad <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x11d>
  20a2ad:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20a2b2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20a2b7:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  20a2bc:	48 89 08             	mov    %rcx,(%rax)
  20a2bf:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20a2c4:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20a2c8:	8b 4c 24 70          	mov    0x70(%rsp),%ecx
  20a2cc:	89 48 10             	mov    %ecx,0x10(%rax)
                finish.panicked = false;
  20a2cf:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20a2d4:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20a2db:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20a2dd:	c6 84 24 8d 00 00 00 	movb   $0x4,0x8d(%rsp)
  20a2e4:	04 
  20a2e5:	be 02 00 00 00       	mov    $0x2,%esi
  20a2ea:	0f b6 94 24 8d 00 00 	movzbl 0x8d(%rsp),%edx
  20a2f1:	00 
  20a2f2:	e8 39 0f 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20a2f7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20a2fc:	e8 9f 07 00 00       	callq  20aaa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>
  20a301:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a306:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a30b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20a310:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20a315:	e8 96 1d 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  20a31a:	f6 84 24 8f 00 00 00 	testb  $0x1,0x8f(%rsp)
  20a321:	01 
  20a322:	75 6c                	jne    20a390 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x200>
  20a324:	eb 5d                	jmp    20a383 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x1f3>
                _ => unsafe { unreachable() },
  20a326:	e8 35 ef 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a32b:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  20a32d:	48 8d 3d 3f 62 ff ff 	lea    -0x9dc1(%rip),%rdi        # 200573 <str.0+0x183>
  20a334:	48 8d 15 c5 fa 02 00 	lea    0x2fac5(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  20a33b:	be 28 00 00 00       	mov    $0x28,%esi
  20a340:	e8 ab b8 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a345:	0f 0b                	ud2    
                    cpu_relax();
  20a347:	e8 74 0f 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  20a34c:	eb 44                	jmp    20a392 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x202>
                PANICKED => panic!("Once has panicked"),
  20a34e:	48 8d 3d b7 61 ff ff 	lea    -0x9e49(%rip),%rdi        # 20050c <str.0+0x11c>
  20a355:	48 8d 15 8c fa 02 00 	lea    0x2fa8c(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  20a35c:	be 11 00 00 00       	mov    $0x11,%esi
  20a361:	e8 8a b8 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a366:	0f 0b                	ud2    
  20a368:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  20a36d:	e8 2e 07 00 00       	callq  20aaa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>
  20a372:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a377:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a37c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a381:	eb 97                	jmp    20a31a <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x18a>
    }
  20a383:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20a388:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  20a38f:	c3                   	retq   
  20a390:	eb f1                	jmp    20a383 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x1f3>
  20a392:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20a397:	c6 84 24 8e 00 00 00 	movb   $0x4,0x8e(%rsp)
  20a39e:	04 
  20a39f:	0f b6 b4 24 8e 00 00 	movzbl 0x8e(%rsp),%esi
  20a3a6:	00 
  20a3a7:	e8 44 0e 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20a3ac:	48 89 04 24          	mov    %rax,(%rsp)
  20a3b0:	48 8b 04 24          	mov    (%rsp),%rax
  20a3b4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20a3b9:	e9 12 fe ff ff       	jmpq   20a1d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x40>
  20a3be:	cc                   	int3   
  20a3bf:	cc                   	int3   

000000000020a3c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  20a3c0:	48 81 ec b8 03 00 00 	sub    $0x3b8,%rsp
  20a3c7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a3cc:	48 89 bc 24 a0 03 00 	mov    %rdi,0x3a0(%rsp)
  20a3d3:	00 
        loop {
  20a3d4:	c6 84 24 9f 03 00 00 	movb   $0x0,0x39f(%rsp)
  20a3db:	00 
  20a3dc:	c6 84 24 9f 03 00 00 	movb   $0x1,0x39f(%rsp)
  20a3e3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  20a3e4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  20a3e9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20a3ee:	e8 fd 0d 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20a3f3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  20a3f8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20a3fe:	74 29                	je     20a429 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x69>
            match status {
  20a400:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20a405:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a40a:	48 83 e8 03          	sub    $0x3,%rax
  20a40e:	0f 87 19 01 00 00    	ja     20a52d <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x16d>
  20a414:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20a419:	48 8d 0d dc 60 ff ff 	lea    -0x9f24(%rip),%rcx        # 2004fc <str.0+0x10c>
  20a420:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20a424:	48 01 c8             	add    %rcx,%rax
  20a427:	ff e0                	jmpq   *%rax
  20a429:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20a42e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  20a433:	31 c0                	xor    %eax,%eax
  20a435:	89 c6                	mov    %eax,%esi
  20a437:	ba 01 00 00 00       	mov    $0x1,%edx
  20a43c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  20a441:	e8 8a 0c 02 00       	callq  22b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  20a446:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a44b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a450:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  20a455:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20a45b:	75 a3                	jne    20a400 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x40>
  20a45d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  20a462:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20a467:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20a46c:	c6 84 24 9f 03 00 00 	movb   $0x0,0x39f(%rsp)
  20a473:	00 
  20a474:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  20a47b:	00 
  20a47c:	e8 4f 19 00 00       	callq  20bdd0 <_ZN4core3ops8function6FnOnce9call_once17h818c130c4421a1d0E>
  20a481:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20a486:	48 83 c7 08          	add    $0x8,%rdi
  20a48a:	48 8d b4 24 00 02 00 	lea    0x200(%rsp),%rsi
  20a491:	00 
  20a492:	ba 98 01 00 00       	mov    $0x198,%edx
  20a497:	e8 54 e8 02 00       	callq  238cf0 <memcpy>
  20a49c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20a4a1:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  20a4a8:	00 00 
  20a4aa:	48 83 c0 08          	add    $0x8,%rax
  20a4ae:	48 89 84 24 b0 03 00 	mov    %rax,0x3b0(%rsp)
  20a4b5:	00 
  20a4b6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a4bb:	eb 00                	jmp    20a4bd <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0xfd>
  20a4bd:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20a4c2:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  20a4c7:	ba a0 01 00 00       	mov    $0x1a0,%edx
  20a4cc:	e8 1f e8 02 00       	callq  238cf0 <memcpy>
  20a4d1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  20a4d6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20a4db:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20a4e2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20a4e4:	c6 84 24 9d 03 00 00 	movb   $0x4,0x39d(%rsp)
  20a4eb:	04 
  20a4ec:	be 02 00 00 00       	mov    $0x2,%esi
  20a4f1:	0f b6 94 24 9d 03 00 	movzbl 0x39d(%rsp),%edx
  20a4f8:	00 
  20a4f9:	e8 32 0d 02 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20a4fe:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20a503:	e8 48 02 00 00       	callq  20a750 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>
  20a508:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a50d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a512:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20a517:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20a51c:	e8 8f 1b 00 00       	callq  20c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  20a521:	f6 84 24 9f 03 00 00 	testb  $0x1,0x39f(%rsp)
  20a528:	01 
  20a529:	75 6c                	jne    20a597 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1d7>
  20a52b:	eb 5d                	jmp    20a58a <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1ca>
                _ => unsafe { unreachable() },
  20a52d:	e8 2e ed 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a532:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  20a534:	48 8d 3d 38 60 ff ff 	lea    -0x9fc8(%rip),%rdi        # 200573 <str.0+0x183>
  20a53b:	48 8d 15 be f8 02 00 	lea    0x2f8be(%rip),%rdx        # 239e00 <memcmp+0x10c0>
  20a542:	be 28 00 00 00       	mov    $0x28,%esi
  20a547:	e8 a4 b6 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a54c:	0f 0b                	ud2    
                    cpu_relax();
  20a54e:	e8 6d 0d 02 00       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  20a553:	eb 44                	jmp    20a599 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  20a555:	48 8d 3d b0 5f ff ff 	lea    -0xa050(%rip),%rdi        # 20050c <str.0+0x11c>
  20a55c:	48 8d 15 85 f8 02 00 	lea    0x2f885(%rip),%rdx        # 239de8 <memcmp+0x10a8>
  20a563:	be 11 00 00 00       	mov    $0x11,%esi
  20a568:	e8 83 b6 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a56d:	0f 0b                	ud2    
  20a56f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  20a574:	e8 d7 01 00 00       	callq  20a750 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>
  20a579:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a57e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a583:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a588:	eb 97                	jmp    20a521 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x161>
    }
  20a58a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20a58f:	48 81 c4 b8 03 00 00 	add    $0x3b8,%rsp
  20a596:	c3                   	retq   
  20a597:	eb f1                	jmp    20a58a <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1ca>
  20a599:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20a59e:	c6 84 24 9e 03 00 00 	movb   $0x4,0x39e(%rsp)
  20a5a5:	04 
  20a5a6:	0f b6 b4 24 9e 03 00 	movzbl 0x39e(%rsp),%esi
  20a5ad:	00 
  20a5ae:	e8 3d 0c 02 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20a5b3:	48 89 04 24          	mov    %rax,(%rsp)
  20a5b7:	48 8b 04 24          	mov    (%rsp),%rax
  20a5bb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20a5c0:	e9 3b fe ff ff       	jmpq   20a400 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x40>
  20a5c5:	cc                   	int3   
  20a5c6:	cc                   	int3   
  20a5c7:	cc                   	int3   
  20a5c8:	cc                   	int3   
  20a5c9:	cc                   	int3   
  20a5ca:	cc                   	int3   
  20a5cb:	cc                   	int3   
  20a5cc:	cc                   	int3   
  20a5cd:	cc                   	int3   
  20a5ce:	cc                   	int3   
  20a5cf:	cc                   	int3   

000000000020a5d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a5d0:	48 83 ec 28          	sub    $0x28,%rsp
  20a5d4:	48 89 f8             	mov    %rdi,%rax
  20a5d7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a5dc:	48 83 c0 08          	add    $0x8,%rax
  20a5e0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a5e5:	48 89 04 24          	mov    %rax,(%rsp)
  20a5e9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a5ed:	e8 3e 68 00 00       	callq  210e30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E>
  20a5f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a5f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a5fc:	48 85 c0             	test   %rax,%rax
  20a5ff:	0f 95 c0             	setne  %al
  20a602:	0f b6 c0             	movzbl %al,%eax
  20a605:	74 06                	je     20a60d <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x3d>
  20a607:	eb 00                	jmp    20a609 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x39>
  20a609:	eb 09                	jmp    20a614 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x44>
  20a60b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a60d:	e8 4e ec 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a612:	0f 0b                	ud2    
            Some(p) => p,
  20a614:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a619:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a61e:	48 83 c4 28          	add    $0x28,%rsp
  20a622:	c3                   	retq   
  20a623:	cc                   	int3   
  20a624:	cc                   	int3   
  20a625:	cc                   	int3   
  20a626:	cc                   	int3   
  20a627:	cc                   	int3   
  20a628:	cc                   	int3   
  20a629:	cc                   	int3   
  20a62a:	cc                   	int3   
  20a62b:	cc                   	int3   
  20a62c:	cc                   	int3   
  20a62d:	cc                   	int3   
  20a62e:	cc                   	int3   
  20a62f:	cc                   	int3   

000000000020a630 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a630:	48 83 ec 28          	sub    $0x28,%rsp
  20a634:	48 89 f8             	mov    %rdi,%rax
  20a637:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a63c:	48 83 c0 08          	add    $0x8,%rax
  20a640:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a645:	48 89 04 24          	mov    %rax,(%rsp)
  20a649:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a64d:	e8 8e 6c 00 00       	callq  2112e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E>
  20a652:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a657:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a65c:	48 85 c0             	test   %rax,%rax
  20a65f:	0f 95 c0             	setne  %al
  20a662:	0f b6 c0             	movzbl %al,%eax
  20a665:	74 06                	je     20a66d <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x3d>
  20a667:	eb 00                	jmp    20a669 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x39>
  20a669:	eb 09                	jmp    20a674 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x44>
  20a66b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a66d:	e8 ee eb 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a672:	0f 0b                	ud2    
            Some(p) => p,
  20a674:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a679:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a67e:	48 83 c4 28          	add    $0x28,%rsp
  20a682:	c3                   	retq   
  20a683:	cc                   	int3   
  20a684:	cc                   	int3   
  20a685:	cc                   	int3   
  20a686:	cc                   	int3   
  20a687:	cc                   	int3   
  20a688:	cc                   	int3   
  20a689:	cc                   	int3   
  20a68a:	cc                   	int3   
  20a68b:	cc                   	int3   
  20a68c:	cc                   	int3   
  20a68d:	cc                   	int3   
  20a68e:	cc                   	int3   
  20a68f:	cc                   	int3   

000000000020a690 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a690:	48 83 ec 28          	sub    $0x28,%rsp
  20a694:	48 89 f8             	mov    %rdi,%rax
  20a697:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a69c:	48 83 c0 08          	add    $0x8,%rax
  20a6a0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a6a5:	48 89 04 24          	mov    %rax,(%rsp)
  20a6a9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a6ad:	e8 de 66 00 00       	callq  210d90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E>
  20a6b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a6b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a6bc:	48 85 c0             	test   %rax,%rax
  20a6bf:	0f 95 c0             	setne  %al
  20a6c2:	0f b6 c0             	movzbl %al,%eax
  20a6c5:	74 06                	je     20a6cd <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x3d>
  20a6c7:	eb 00                	jmp    20a6c9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x39>
  20a6c9:	eb 09                	jmp    20a6d4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x44>
  20a6cb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a6cd:	e8 8e eb 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a6d2:	0f 0b                	ud2    
            Some(p) => p,
  20a6d4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a6d9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a6de:	48 83 c4 28          	add    $0x28,%rsp
  20a6e2:	c3                   	retq   
  20a6e3:	cc                   	int3   
  20a6e4:	cc                   	int3   
  20a6e5:	cc                   	int3   
  20a6e6:	cc                   	int3   
  20a6e7:	cc                   	int3   
  20a6e8:	cc                   	int3   
  20a6e9:	cc                   	int3   
  20a6ea:	cc                   	int3   
  20a6eb:	cc                   	int3   
  20a6ec:	cc                   	int3   
  20a6ed:	cc                   	int3   
  20a6ee:	cc                   	int3   
  20a6ef:	cc                   	int3   

000000000020a6f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a6f0:	48 83 ec 28          	sub    $0x28,%rsp
  20a6f4:	48 89 f8             	mov    %rdi,%rax
  20a6f7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a6fc:	48 83 c0 08          	add    $0x8,%rax
  20a700:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a705:	48 89 04 24          	mov    %rax,(%rsp)
  20a709:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a70d:	e8 7e 6b 00 00       	callq  211290 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E>
  20a712:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a717:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a71c:	48 85 c0             	test   %rax,%rax
  20a71f:	0f 95 c0             	setne  %al
  20a722:	0f b6 c0             	movzbl %al,%eax
  20a725:	74 06                	je     20a72d <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE+0x3d>
  20a727:	eb 00                	jmp    20a729 <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE+0x39>
  20a729:	eb 09                	jmp    20a734 <_ZN4spin4once13Once$LT$T$GT$9force_get17h49a95afb1ae0366cE+0x44>
  20a72b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a72d:	e8 2e eb 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a732:	0f 0b                	ud2    
            Some(p) => p,
  20a734:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a739:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a73e:	48 83 c4 28          	add    $0x28,%rsp
  20a742:	c3                   	retq   
  20a743:	cc                   	int3   
  20a744:	cc                   	int3   
  20a745:	cc                   	int3   
  20a746:	cc                   	int3   
  20a747:	cc                   	int3   
  20a748:	cc                   	int3   
  20a749:	cc                   	int3   
  20a74a:	cc                   	int3   
  20a74b:	cc                   	int3   
  20a74c:	cc                   	int3   
  20a74d:	cc                   	int3   
  20a74e:	cc                   	int3   
  20a74f:	cc                   	int3   

000000000020a750 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a750:	48 83 ec 28          	sub    $0x28,%rsp
  20a754:	48 89 f8             	mov    %rdi,%rax
  20a757:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a75c:	48 83 c0 08          	add    $0x8,%rax
  20a760:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a765:	48 89 04 24          	mov    %rax,(%rsp)
  20a769:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a76d:	e8 5e 67 00 00       	callq  210ed0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E>
  20a772:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a777:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a77c:	48 85 c0             	test   %rax,%rax
  20a77f:	0f 95 c0             	setne  %al
  20a782:	0f b6 c0             	movzbl %al,%eax
  20a785:	74 06                	je     20a78d <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x3d>
  20a787:	eb 00                	jmp    20a789 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x39>
  20a789:	eb 09                	jmp    20a794 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x44>
  20a78b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a78d:	e8 ce ea 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a792:	0f 0b                	ud2    
            Some(p) => p,
  20a794:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a799:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a79e:	48 83 c4 28          	add    $0x28,%rsp
  20a7a2:	c3                   	retq   
  20a7a3:	cc                   	int3   
  20a7a4:	cc                   	int3   
  20a7a5:	cc                   	int3   
  20a7a6:	cc                   	int3   
  20a7a7:	cc                   	int3   
  20a7a8:	cc                   	int3   
  20a7a9:	cc                   	int3   
  20a7aa:	cc                   	int3   
  20a7ab:	cc                   	int3   
  20a7ac:	cc                   	int3   
  20a7ad:	cc                   	int3   
  20a7ae:	cc                   	int3   
  20a7af:	cc                   	int3   

000000000020a7b0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a7b0:	48 83 ec 28          	sub    $0x28,%rsp
  20a7b4:	48 89 f8             	mov    %rdi,%rax
  20a7b7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a7bc:	48 83 c0 08          	add    $0x8,%rax
  20a7c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a7c5:	48 89 04 24          	mov    %rax,(%rsp)
  20a7c9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a7cd:	e8 1e 6a 00 00       	callq  2111f0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E>
  20a7d2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a7d7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a7dc:	48 85 c0             	test   %rax,%rax
  20a7df:	0f 95 c0             	setne  %al
  20a7e2:	0f b6 c0             	movzbl %al,%eax
  20a7e5:	74 06                	je     20a7ed <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x3d>
  20a7e7:	eb 00                	jmp    20a7e9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x39>
  20a7e9:	eb 09                	jmp    20a7f4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x44>
  20a7eb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a7ed:	e8 6e ea 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a7f2:	0f 0b                	ud2    
            Some(p) => p,
  20a7f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a7f9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a7fe:	48 83 c4 28          	add    $0x28,%rsp
  20a802:	c3                   	retq   
  20a803:	cc                   	int3   
  20a804:	cc                   	int3   
  20a805:	cc                   	int3   
  20a806:	cc                   	int3   
  20a807:	cc                   	int3   
  20a808:	cc                   	int3   
  20a809:	cc                   	int3   
  20a80a:	cc                   	int3   
  20a80b:	cc                   	int3   
  20a80c:	cc                   	int3   
  20a80d:	cc                   	int3   
  20a80e:	cc                   	int3   
  20a80f:	cc                   	int3   

000000000020a810 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a810:	48 83 ec 28          	sub    $0x28,%rsp
  20a814:	48 89 f8             	mov    %rdi,%rax
  20a817:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a81c:	48 83 c0 08          	add    $0x8,%rax
  20a820:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a825:	48 89 04 24          	mov    %rax,(%rsp)
  20a829:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a82d:	e8 3e 67 00 00       	callq  210f70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE>
  20a832:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a837:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a83c:	48 85 c0             	test   %rax,%rax
  20a83f:	0f 95 c0             	setne  %al
  20a842:	0f b6 c0             	movzbl %al,%eax
  20a845:	74 06                	je     20a84d <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x3d>
  20a847:	eb 00                	jmp    20a849 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x39>
  20a849:	eb 09                	jmp    20a854 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x44>
  20a84b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a84d:	e8 0e ea 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a852:	0f 0b                	ud2    
            Some(p) => p,
  20a854:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a859:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a85e:	48 83 c4 28          	add    $0x28,%rsp
  20a862:	c3                   	retq   
  20a863:	cc                   	int3   
  20a864:	cc                   	int3   
  20a865:	cc                   	int3   
  20a866:	cc                   	int3   
  20a867:	cc                   	int3   
  20a868:	cc                   	int3   
  20a869:	cc                   	int3   
  20a86a:	cc                   	int3   
  20a86b:	cc                   	int3   
  20a86c:	cc                   	int3   
  20a86d:	cc                   	int3   
  20a86e:	cc                   	int3   
  20a86f:	cc                   	int3   

000000000020a870 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a870:	48 83 ec 28          	sub    $0x28,%rsp
  20a874:	48 89 f8             	mov    %rdi,%rax
  20a877:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a87c:	48 83 c0 08          	add    $0x8,%rax
  20a880:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a885:	48 89 04 24          	mov    %rax,(%rsp)
  20a889:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a88d:	e8 0e 69 00 00       	callq  2111a0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE>
  20a892:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a897:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a89c:	48 85 c0             	test   %rax,%rax
  20a89f:	0f 95 c0             	setne  %al
  20a8a2:	0f b6 c0             	movzbl %al,%eax
  20a8a5:	74 06                	je     20a8ad <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x3d>
  20a8a7:	eb 00                	jmp    20a8a9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x39>
  20a8a9:	eb 09                	jmp    20a8b4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x44>
  20a8ab:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a8ad:	e8 ae e9 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a8b2:	0f 0b                	ud2    
            Some(p) => p,
  20a8b4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a8b9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a8be:	48 83 c4 28          	add    $0x28,%rsp
  20a8c2:	c3                   	retq   
  20a8c3:	cc                   	int3   
  20a8c4:	cc                   	int3   
  20a8c5:	cc                   	int3   
  20a8c6:	cc                   	int3   
  20a8c7:	cc                   	int3   
  20a8c8:	cc                   	int3   
  20a8c9:	cc                   	int3   
  20a8ca:	cc                   	int3   
  20a8cb:	cc                   	int3   
  20a8cc:	cc                   	int3   
  20a8cd:	cc                   	int3   
  20a8ce:	cc                   	int3   
  20a8cf:	cc                   	int3   

000000000020a8d0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a8d0:	48 83 ec 28          	sub    $0x28,%rsp
  20a8d4:	48 89 f8             	mov    %rdi,%rax
  20a8d7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a8dc:	48 83 c0 08          	add    $0x8,%rax
  20a8e0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a8e5:	48 89 04 24          	mov    %rax,(%rsp)
  20a8e9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a8ed:	e8 ee 64 00 00       	callq  210de0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E>
  20a8f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a8f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a8fc:	48 85 c0             	test   %rax,%rax
  20a8ff:	0f 95 c0             	setne  %al
  20a902:	0f b6 c0             	movzbl %al,%eax
  20a905:	74 06                	je     20a90d <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x3d>
  20a907:	eb 00                	jmp    20a909 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x39>
  20a909:	eb 09                	jmp    20a914 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x44>
  20a90b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a90d:	e8 4e e9 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a912:	0f 0b                	ud2    
            Some(p) => p,
  20a914:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a919:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a91e:	48 83 c4 28          	add    $0x28,%rsp
  20a922:	c3                   	retq   
  20a923:	cc                   	int3   
  20a924:	cc                   	int3   
  20a925:	cc                   	int3   
  20a926:	cc                   	int3   
  20a927:	cc                   	int3   
  20a928:	cc                   	int3   
  20a929:	cc                   	int3   
  20a92a:	cc                   	int3   
  20a92b:	cc                   	int3   
  20a92c:	cc                   	int3   
  20a92d:	cc                   	int3   
  20a92e:	cc                   	int3   
  20a92f:	cc                   	int3   

000000000020a930 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a930:	48 83 ec 28          	sub    $0x28,%rsp
  20a934:	48 89 f8             	mov    %rdi,%rax
  20a937:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a93c:	48 83 c0 08          	add    $0x8,%rax
  20a940:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a945:	48 89 04 24          	mov    %rax,(%rsp)
  20a949:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a94d:	e8 6e 66 00 00       	callq  210fc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E>
  20a952:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a957:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a95c:	48 85 c0             	test   %rax,%rax
  20a95f:	0f 95 c0             	setne  %al
  20a962:	0f b6 c0             	movzbl %al,%eax
  20a965:	74 06                	je     20a96d <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x3d>
  20a967:	eb 00                	jmp    20a969 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x39>
  20a969:	eb 09                	jmp    20a974 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x44>
  20a96b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a96d:	e8 ee e8 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a972:	0f 0b                	ud2    
            Some(p) => p,
  20a974:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a979:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a97e:	48 83 c4 28          	add    $0x28,%rsp
  20a982:	c3                   	retq   
  20a983:	cc                   	int3   
  20a984:	cc                   	int3   
  20a985:	cc                   	int3   
  20a986:	cc                   	int3   
  20a987:	cc                   	int3   
  20a988:	cc                   	int3   
  20a989:	cc                   	int3   
  20a98a:	cc                   	int3   
  20a98b:	cc                   	int3   
  20a98c:	cc                   	int3   
  20a98d:	cc                   	int3   
  20a98e:	cc                   	int3   
  20a98f:	cc                   	int3   

000000000020a990 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a990:	48 83 ec 28          	sub    $0x28,%rsp
  20a994:	48 89 f8             	mov    %rdi,%rax
  20a997:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a99c:	48 83 c0 08          	add    $0x8,%rax
  20a9a0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a9a5:	48 89 04 24          	mov    %rax,(%rsp)
  20a9a9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a9ad:	e8 6e 65 00 00       	callq  210f20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E>
  20a9b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a9b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a9bc:	48 85 c0             	test   %rax,%rax
  20a9bf:	0f 95 c0             	setne  %al
  20a9c2:	0f b6 c0             	movzbl %al,%eax
  20a9c5:	74 06                	je     20a9cd <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x3d>
  20a9c7:	eb 00                	jmp    20a9c9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x39>
  20a9c9:	eb 09                	jmp    20a9d4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x44>
  20a9cb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a9cd:	e8 8e e8 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a9d2:	0f 0b                	ud2    
            Some(p) => p,
  20a9d4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a9d9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a9de:	48 83 c4 28          	add    $0x28,%rsp
  20a9e2:	c3                   	retq   
  20a9e3:	cc                   	int3   
  20a9e4:	cc                   	int3   
  20a9e5:	cc                   	int3   
  20a9e6:	cc                   	int3   
  20a9e7:	cc                   	int3   
  20a9e8:	cc                   	int3   
  20a9e9:	cc                   	int3   
  20a9ea:	cc                   	int3   
  20a9eb:	cc                   	int3   
  20a9ec:	cc                   	int3   
  20a9ed:	cc                   	int3   
  20a9ee:	cc                   	int3   
  20a9ef:	cc                   	int3   

000000000020a9f0 <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a9f0:	48 83 ec 28          	sub    $0x28,%rsp
  20a9f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a9f9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a9fe:	48 89 3c 24          	mov    %rdi,(%rsp)
  20aa02:	48 8b 3c 24          	mov    (%rsp),%rdi
        match unsafe { &*self.data.get() }.as_ref() {
  20aa06:	e8 35 68 00 00       	callq  211240 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE>
  20aa0b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20aa10:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa15:	48 85 c0             	test   %rax,%rax
  20aa18:	0f 95 c0             	setne  %al
  20aa1b:	0f b6 c0             	movzbl %al,%eax
  20aa1e:	74 06                	je     20aa26 <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE+0x36>
  20aa20:	eb 00                	jmp    20aa22 <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE+0x32>
  20aa22:	eb 09                	jmp    20aa2d <_ZN4spin4once13Once$LT$T$GT$9force_get17ha60336eecc3b7dbaE+0x3d>
  20aa24:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20aa26:	e8 35 e8 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20aa2b:	0f 0b                	ud2    
            Some(p) => p,
  20aa2d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa32:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20aa37:	48 83 c4 28          	add    $0x28,%rsp
  20aa3b:	c3                   	retq   
  20aa3c:	cc                   	int3   
  20aa3d:	cc                   	int3   
  20aa3e:	cc                   	int3   
  20aa3f:	cc                   	int3   

000000000020aa40 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20aa40:	48 83 ec 28          	sub    $0x28,%rsp
  20aa44:	48 89 f8             	mov    %rdi,%rax
  20aa47:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20aa4c:	48 83 c0 08          	add    $0x8,%rax
  20aa50:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20aa55:	48 89 04 24          	mov    %rax,(%rsp)
  20aa59:	48 8b 3c 24          	mov    (%rsp),%rdi
  20aa5d:	e8 ae 65 00 00       	callq  211010 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E>
  20aa62:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20aa67:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa6c:	48 85 c0             	test   %rax,%rax
  20aa6f:	0f 95 c0             	setne  %al
  20aa72:	0f b6 c0             	movzbl %al,%eax
  20aa75:	74 06                	je     20aa7d <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x3d>
  20aa77:	eb 00                	jmp    20aa79 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x39>
  20aa79:	eb 09                	jmp    20aa84 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x44>
  20aa7b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20aa7d:	e8 de e7 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20aa82:	0f 0b                	ud2    
            Some(p) => p,
  20aa84:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa89:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20aa8e:	48 83 c4 28          	add    $0x28,%rsp
  20aa92:	c3                   	retq   
  20aa93:	cc                   	int3   
  20aa94:	cc                   	int3   
  20aa95:	cc                   	int3   
  20aa96:	cc                   	int3   
  20aa97:	cc                   	int3   
  20aa98:	cc                   	int3   
  20aa99:	cc                   	int3   
  20aa9a:	cc                   	int3   
  20aa9b:	cc                   	int3   
  20aa9c:	cc                   	int3   
  20aa9d:	cc                   	int3   
  20aa9e:	cc                   	int3   
  20aa9f:	cc                   	int3   

000000000020aaa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20aaa0:	48 83 ec 28          	sub    $0x28,%rsp
  20aaa4:	48 89 f8             	mov    %rdi,%rax
  20aaa7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20aaac:	48 83 c0 08          	add    $0x8,%rax
  20aab0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20aab5:	48 89 04 24          	mov    %rax,(%rsp)
  20aab9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20aabd:	e8 ee 65 00 00       	callq  2110b0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE>
  20aac2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20aac7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aacc:	48 85 c0             	test   %rax,%rax
  20aacf:	0f 95 c0             	setne  %al
  20aad2:	0f b6 c0             	movzbl %al,%eax
  20aad5:	74 06                	je     20aadd <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x3d>
  20aad7:	eb 00                	jmp    20aad9 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x39>
  20aad9:	eb 09                	jmp    20aae4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x44>
  20aadb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20aadd:	e8 7e e7 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20aae2:	0f 0b                	ud2    
            Some(p) => p,
  20aae4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aae9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20aaee:	48 83 c4 28          	add    $0x28,%rsp
  20aaf2:	c3                   	retq   
  20aaf3:	cc                   	int3   
  20aaf4:	cc                   	int3   
  20aaf5:	cc                   	int3   
  20aaf6:	cc                   	int3   
  20aaf7:	cc                   	int3   
  20aaf8:	cc                   	int3   
  20aaf9:	cc                   	int3   
  20aafa:	cc                   	int3   
  20aafb:	cc                   	int3   
  20aafc:	cc                   	int3   
  20aafd:	cc                   	int3   
  20aafe:	cc                   	int3   
  20aaff:	cc                   	int3   

000000000020ab00 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20ab00:	48 83 ec 28          	sub    $0x28,%rsp
  20ab04:	48 89 f8             	mov    %rdi,%rax
  20ab07:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20ab0c:	48 83 c0 08          	add    $0x8,%rax
  20ab10:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ab15:	48 89 04 24          	mov    %rax,(%rsp)
  20ab19:	48 8b 3c 24          	mov    (%rsp),%rdi
  20ab1d:	e8 0e 68 00 00       	callq  211330 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE>
  20ab22:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ab27:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ab2c:	48 85 c0             	test   %rax,%rax
  20ab2f:	0f 95 c0             	setne  %al
  20ab32:	0f b6 c0             	movzbl %al,%eax
  20ab35:	74 06                	je     20ab3d <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x3d>
  20ab37:	eb 00                	jmp    20ab39 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x39>
  20ab39:	eb 09                	jmp    20ab44 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x44>
  20ab3b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20ab3d:	e8 1e e7 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20ab42:	0f 0b                	ud2    
            Some(p) => p,
  20ab44:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ab49:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20ab4e:	48 83 c4 28          	add    $0x28,%rsp
  20ab52:	c3                   	retq   
  20ab53:	cc                   	int3   
  20ab54:	cc                   	int3   
  20ab55:	cc                   	int3   
  20ab56:	cc                   	int3   
  20ab57:	cc                   	int3   
  20ab58:	cc                   	int3   
  20ab59:	cc                   	int3   
  20ab5a:	cc                   	int3   
  20ab5b:	cc                   	int3   
  20ab5c:	cc                   	int3   
  20ab5d:	cc                   	int3   
  20ab5e:	cc                   	int3   
  20ab5f:	cc                   	int3   

000000000020ab60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20ab60:	48 83 ec 28          	sub    $0x28,%rsp
  20ab64:	48 89 f8             	mov    %rdi,%rax
  20ab67:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20ab6c:	48 83 c0 08          	add    $0x8,%rax
  20ab70:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ab75:	48 89 04 24          	mov    %rax,(%rsp)
  20ab79:	48 8b 3c 24          	mov    (%rsp),%rdi
  20ab7d:	e8 ce 65 00 00       	callq  211150 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E>
  20ab82:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ab87:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ab8c:	48 85 c0             	test   %rax,%rax
  20ab8f:	0f 95 c0             	setne  %al
  20ab92:	0f b6 c0             	movzbl %al,%eax
  20ab95:	74 06                	je     20ab9d <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x3d>
  20ab97:	eb 00                	jmp    20ab99 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x39>
  20ab99:	eb 09                	jmp    20aba4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x44>
  20ab9b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20ab9d:	e8 be e6 00 00       	callq  219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20aba2:	0f 0b                	ud2    
            Some(p) => p,
  20aba4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aba9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20abae:	48 83 c4 28          	add    $0x28,%rsp
  20abb2:	c3                   	retq   
  20abb3:	cc                   	int3   
  20abb4:	cc                   	int3   
  20abb5:	cc                   	int3   
  20abb6:	cc                   	int3   
  20abb7:	cc                   	int3   
  20abb8:	cc                   	int3   
  20abb9:	cc                   	int3   
  20abba:	cc                   	int3   
  20abbb:	cc                   	int3   
  20abbc:	cc                   	int3   
  20abbd:	cc                   	int3   
  20abbe:	cc                   	int3   
  20abbf:	cc                   	int3   

000000000020abc0 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E>:
        impl Mul for $t {
            type Output = $t;

            #[inline]
            #[rustc_inherit_overflow_checks]
            fn mul(self, other: $t) -> $t { self * other }
  20abc0:	48 83 ec 18          	sub    $0x18,%rsp
  20abc4:	48 89 f8             	mov    %rdi,%rax
  20abc7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20abcc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20abd1:	48 f7 e6             	mul    %rsi
  20abd4:	48 89 04 24          	mov    %rax,(%rsp)
  20abd8:	0f 90 c0             	seto   %al
  20abdb:	a8 01                	test   $0x1,%al
  20abdd:	75 09                	jne    20abe8 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E+0x28>
  20abdf:	48 8b 04 24          	mov    (%rsp),%rax
  20abe3:	48 83 c4 18          	add    $0x18,%rsp
  20abe7:	c3                   	retq   
  20abe8:	48 8d 3d 31 5a ff ff 	lea    -0xa5cf(%rip),%rdi        # 200620 <str.0>
  20abef:	48 8d 15 22 f2 02 00 	lea    0x2f222(%rip),%rdx        # 239e18 <memcmp+0x10d8>
  20abf6:	be 21 00 00 00       	mov    $0x21,%esi
  20abfb:	e8 f0 af 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ac00:	0f 0b                	ud2    
  20ac02:	cc                   	int3   
  20ac03:	cc                   	int3   
  20ac04:	cc                   	int3   
  20ac05:	cc                   	int3   
  20ac06:	cc                   	int3   
  20ac07:	cc                   	int3   
  20ac08:	cc                   	int3   
  20ac09:	cc                   	int3   
  20ac0a:	cc                   	int3   
  20ac0b:	cc                   	int3   
  20ac0c:	cc                   	int3   
  20ac0d:	cc                   	int3   
  20ac0e:	cc                   	int3   
  20ac0f:	cc                   	int3   

000000000020ac10 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>:
        #[$attr]
        impl<'a> $imp<$u> for &'a $t {
            type Output = <$t as $imp<$u>>::Output;

            #[inline]
            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {
  20ac10:	48 83 ec 18          	sub    $0x18,%rsp
  20ac14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ac19:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                $imp::$method(*self, other)
  20ac1e:	48 8b 3f             	mov    (%rdi),%rdi
  20ac21:	e8 9a ff ff ff       	callq  20abc0 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E>
  20ac26:	48 89 04 24          	mov    %rax,(%rsp)
  20ac2a:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20ac2e:	48 83 c4 18          	add    $0x18,%rsp
  20ac32:	c3                   	retq   
  20ac33:	cc                   	int3   
  20ac34:	cc                   	int3   
  20ac35:	cc                   	int3   
  20ac36:	cc                   	int3   
  20ac37:	cc                   	int3   
  20ac38:	cc                   	int3   
  20ac39:	cc                   	int3   
  20ac3a:	cc                   	int3   
  20ac3b:	cc                   	int3   
  20ac3c:	cc                   	int3   
  20ac3d:	cc                   	int3   
  20ac3e:	cc                   	int3   
  20ac3f:	cc                   	int3   

000000000020ac40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdbc274460ee4dd34E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
  20ac40:	48 83 ec 18          	sub    $0x18,%rsp
  20ac44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.next()
  20ac49:	e8 b2 83 00 00       	callq  213000 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9893b0f9eccf63e0E>
  20ac4e:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20ac52:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  20ac56:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  20ac5a:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  20ac5e:	24 01                	and    $0x1,%al
  20ac60:	48 83 c4 18          	add    $0x18,%rsp
  20ac64:	c3                   	retq   
  20ac65:	cc                   	int3   
  20ac66:	cc                   	int3   
  20ac67:	cc                   	int3   
  20ac68:	cc                   	int3   
  20ac69:	cc                   	int3   
  20ac6a:	cc                   	int3   
  20ac6b:	cc                   	int3   
  20ac6c:	cc                   	int3   
  20ac6d:	cc                   	int3   
  20ac6e:	cc                   	int3   
  20ac6f:	cc                   	int3   

000000000020ac70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20ac70:	48 83 ec 28          	sub    $0x28,%rsp
        match residual {
            Err(e) => Err(From::from(e)),
  20ac74:	e8 07 5a 01 00       	callq  220680 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17habc6910e9567a3dbE>
  20ac79:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20ac80:	00 00 
        }
    }
  20ac82:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ac87:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20ac8c:	48 83 c4 28          	add    $0x28,%rsp
  20ac90:	c3                   	retq   
  20ac91:	cc                   	int3   
  20ac92:	cc                   	int3   
  20ac93:	cc                   	int3   
  20ac94:	cc                   	int3   
  20ac95:	cc                   	int3   
  20ac96:	cc                   	int3   
  20ac97:	cc                   	int3   
  20ac98:	cc                   	int3   
  20ac99:	cc                   	int3   
  20ac9a:	cc                   	int3   
  20ac9b:	cc                   	int3   
  20ac9c:	cc                   	int3   
  20ac9d:	cc                   	int3   
  20ac9e:	cc                   	int3   
  20ac9f:	cc                   	int3   

000000000020aca0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20aca0:	48 83 ec 28          	sub    $0x28,%rsp
            Err(e) => Err(From::from(e)),
  20aca4:	e8 b7 a3 00 00       	callq  215060 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>
  20aca9:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20acb0:	00 00 
    }
  20acb2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20acb7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20acbc:	48 83 c4 28          	add    $0x28,%rsp
  20acc0:	c3                   	retq   
  20acc1:	cc                   	int3   
  20acc2:	cc                   	int3   
  20acc3:	cc                   	int3   
  20acc4:	cc                   	int3   
  20acc5:	cc                   	int3   
  20acc6:	cc                   	int3   
  20acc7:	cc                   	int3   
  20acc8:	cc                   	int3   
  20acc9:	cc                   	int3   
  20acca:	cc                   	int3   
  20accb:	cc                   	int3   
  20accc:	cc                   	int3   
  20accd:	cc                   	int3   
  20acce:	cc                   	int3   
  20accf:	cc                   	int3   

000000000020acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20acd0:	48 83 ec 18          	sub    $0x18,%rsp
            Err(e) => Err(From::from(e)),
  20acd4:	e8 a7 4b 00 00       	callq  20f880 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h818e9191d55a10c0E>
  20acd9:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  20acde:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ace2:	24 01                	and    $0x1,%al
  20ace4:	0f b6 c0             	movzbl %al,%eax
  20ace7:	48 83 c4 18          	add    $0x18,%rsp
  20aceb:	c3                   	retq   
  20acec:	cc                   	int3   
  20aced:	cc                   	int3   
  20acee:	cc                   	int3   
  20acef:	cc                   	int3   

000000000020acf0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h49782eb3ee2624a2E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20acf0:	48 83 ec 48          	sub    $0x48,%rsp
  20acf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20acf9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20acfe:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20ad03:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20ad08:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ad0d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20ad12:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20ad17:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20ad1c:	e8 4f 10 01 00       	callq  21bd70 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>
  20ad21:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ad26:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20ad2b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ad30:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20ad35:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ad3a:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20ad3f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20ad43:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20ad47:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20ad4e:	48 83 c4 48          	add    $0x48,%rsp
  20ad52:	c3                   	retq   
  20ad53:	cc                   	int3   
  20ad54:	cc                   	int3   
  20ad55:	cc                   	int3   
  20ad56:	cc                   	int3   
  20ad57:	cc                   	int3   
  20ad58:	cc                   	int3   
  20ad59:	cc                   	int3   
  20ad5a:	cc                   	int3   
  20ad5b:	cc                   	int3   
  20ad5c:	cc                   	int3   
  20ad5d:	cc                   	int3   
  20ad5e:	cc                   	int3   
  20ad5f:	cc                   	int3   

000000000020ad60 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h6bce559bf06336b0E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20ad60:	48 83 ec 48          	sub    $0x48,%rsp
  20ad64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ad69:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ad6e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20ad73:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20ad78:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ad7d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20ad82:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20ad87:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20ad8c:	e8 5f 3a 01 00       	callq  21e7f0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  20ad91:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ad96:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20ad9b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ada0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20ada5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20adaa:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20adaf:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20adb3:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20adb7:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20adbe:	48 83 c4 48          	add    $0x48,%rsp
  20adc2:	c3                   	retq   
  20adc3:	cc                   	int3   
  20adc4:	cc                   	int3   
  20adc5:	cc                   	int3   
  20adc6:	cc                   	int3   
  20adc7:	cc                   	int3   
  20adc8:	cc                   	int3   
  20adc9:	cc                   	int3   
  20adca:	cc                   	int3   
  20adcb:	cc                   	int3   
  20adcc:	cc                   	int3   
  20adcd:	cc                   	int3   
  20adce:	cc                   	int3   
  20adcf:	cc                   	int3   

000000000020add0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20add0:	48 83 ec 48          	sub    $0x48,%rsp
  20add4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20add9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20adde:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20ade3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20ade8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20aded:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20adf2:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20adf7:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20adfc:	e8 6f 0f 01 00       	callq  21bd70 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>
  20ae01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ae06:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20ae0b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ae10:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20ae15:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ae1a:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20ae1f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20ae23:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20ae27:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20ae2e:	48 83 c4 48          	add    $0x48,%rsp
  20ae32:	c3                   	retq   
  20ae33:	cc                   	int3   
  20ae34:	cc                   	int3   
  20ae35:	cc                   	int3   
  20ae36:	cc                   	int3   
  20ae37:	cc                   	int3   
  20ae38:	cc                   	int3   
  20ae39:	cc                   	int3   
  20ae3a:	cc                   	int3   
  20ae3b:	cc                   	int3   
  20ae3c:	cc                   	int3   
  20ae3d:	cc                   	int3   
  20ae3e:	cc                   	int3   
  20ae3f:	cc                   	int3   

000000000020ae40 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h9b93c8b5a9bc9b46E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20ae40:	48 83 ec 28          	sub    $0x28,%rsp
  20ae44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ae49:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            Err(e) => Err(From::from(e)),
  20ae4e:	e8 0d a2 00 00       	callq  215060 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>
  20ae53:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ae58:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20ae5d:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  20ae64:	00 
    }
  20ae65:	48 83 c4 28          	add    $0x28,%rsp
  20ae69:	c3                   	retq   
  20ae6a:	cc                   	int3   
  20ae6b:	cc                   	int3   
  20ae6c:	cc                   	int3   
  20ae6d:	cc                   	int3   
  20ae6e:	cc                   	int3   
  20ae6f:	cc                   	int3   

000000000020ae70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20ae70:	48 83 ec 48          	sub    $0x48,%rsp
  20ae74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ae79:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ae7e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20ae83:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20ae88:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ae8d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20ae92:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20ae97:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20ae9c:	e8 4f 39 01 00       	callq  21e7f0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  20aea1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20aea6:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20aeab:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20aeb0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20aeb5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20aeba:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20aebf:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20aec3:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20aec7:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20aece:	48 83 c4 48          	add    $0x48,%rsp
  20aed2:	c3                   	retq   
  20aed3:	cc                   	int3   
  20aed4:	cc                   	int3   
  20aed5:	cc                   	int3   
  20aed6:	cc                   	int3   
  20aed7:	cc                   	int3   
  20aed8:	cc                   	int3   
  20aed9:	cc                   	int3   
  20aeda:	cc                   	int3   
  20aedb:	cc                   	int3   
  20aedc:	cc                   	int3   
  20aedd:	cc                   	int3   
  20aede:	cc                   	int3   
  20aedf:	cc                   	int3   

000000000020aee0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>:
    pub fn unwrap_err(self) -> E {
  20aee0:	48 83 ec 28          	sub    $0x28,%rsp
  20aee4:	48 89 34 24          	mov    %rsi,(%rsp)
  20aee8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20aeed:	0f b7 07             	movzwl (%rdi),%eax
  20aef0:	48 85 c0             	test   %rax,%rax
  20aef3:	74 06                	je     20aefb <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x1b>
  20aef5:	eb 00                	jmp    20aef7 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x17>
  20aef7:	eb 33                	jmp    20af2c <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x4c>
  20aef9:	0f 0b                	ud2    
  20aefb:	4c 8b 04 24          	mov    (%rsp),%r8
  20aeff:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20af04:	66 8b 40 02          	mov    0x2(%rax),%ax
  20af08:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  20af0d:	48 8d 3d 2d 57 ff ff 	lea    -0xa8d3(%rip),%rdi        # 200641 <str.0+0x21>
  20af14:	48 8d 0d 15 ef 02 00 	lea    0x2ef15(%rip),%rcx        # 239e30 <memcmp+0x10f0>
  20af1b:	be 2e 00 00 00       	mov    $0x2e,%esi
  20af20:	48 8d 54 24 16       	lea    0x16(%rsp),%rdx
  20af25:	e8 f6 a0 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20af2a:	0f 0b                	ud2    
  20af2c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Err(e) => e,
  20af31:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20af35:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  20af39:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20af3e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    }
  20af43:	48 83 c4 28          	add    $0x28,%rsp
  20af47:	c3                   	retq   
  20af48:	cc                   	int3   
  20af49:	cc                   	int3   
  20af4a:	cc                   	int3   
  20af4b:	cc                   	int3   
  20af4c:	cc                   	int3   
  20af4d:	cc                   	int3   
  20af4e:	cc                   	int3   
  20af4f:	cc                   	int3   

000000000020af50 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E>:
    pub fn unwrap_err(self) -> E {
  20af50:	48 83 ec 48          	sub    $0x48,%rsp
  20af54:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20af59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20af5e:	48 8b 07             	mov    (%rdi),%rax
  20af61:	48 85 c0             	test   %rax,%rax
  20af64:	74 06                	je     20af6c <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x1c>
  20af66:	eb 00                	jmp    20af68 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x18>
  20af68:	eb 4f                	jmp    20afb9 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x69>
  20af6a:	0f 0b                	ud2    
  20af6c:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  20af71:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20af76:	48 8b 41 20          	mov    0x20(%rcx),%rax
  20af7a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20af7f:	48 8b 41 18          	mov    0x18(%rcx),%rax
  20af83:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20af88:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20af8c:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20af90:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20af95:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20af9a:	48 8d 3d a0 56 ff ff 	lea    -0xa960(%rip),%rdi        # 200641 <str.0+0x21>
  20afa1:	48 8d 0d a8 ee 02 00 	lea    0x2eea8(%rip),%rcx        # 239e50 <memcmp+0x1110>
  20afa8:	be 2e 00 00 00       	mov    $0x2e,%esi
  20afad:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
  20afb2:	e8 69 a0 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20afb7:	0f 0b                	ud2    
  20afb9:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            Err(e) => e,
  20afbe:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20afc2:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20afc6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20afcb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20afd0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20afd5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20afda:	48 83 c4 48          	add    $0x48,%rsp
  20afde:	c3                   	retq   
  20afdf:	cc                   	int3   

000000000020afe0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E>:
    pub fn unwrap_err(self) -> E {
  20afe0:	48 83 ec 28          	sub    $0x28,%rsp
  20afe4:	48 89 34 24          	mov    %rsi,(%rsp)
  20afe8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20afed:	0f b6 07             	movzbl (%rdi),%eax
  20aff0:	a8 01                	test   $0x1,%al
  20aff2:	74 06                	je     20affa <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x1a>
  20aff4:	eb 00                	jmp    20aff6 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x16>
  20aff6:	eb 3c                	jmp    20b034 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x54>
  20aff8:	0f 0b                	ud2    
  20affa:	4c 8b 04 24          	mov    (%rsp),%r8
  20affe:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20b003:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20b007:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b00b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20b010:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b015:	48 8d 3d 25 56 ff ff 	lea    -0xa9db(%rip),%rdi        # 200641 <str.0+0x21>
  20b01c:	48 8d 0d 4d ee 02 00 	lea    0x2ee4d(%rip),%rcx        # 239e70 <memcmp+0x1130>
  20b023:	be 2e 00 00 00       	mov    $0x2e,%esi
  20b028:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20b02d:	e8 ee 9f 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b032:	0f 0b                	ud2    
  20b034:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => e,
  20b039:	8a 40 01             	mov    0x1(%rax),%al
  20b03c:	88 44 24 27          	mov    %al,0x27(%rsp)
    }
  20b040:	48 83 c4 28          	add    $0x28,%rsp
  20b044:	c3                   	retq   
  20b045:	cc                   	int3   
  20b046:	cc                   	int3   
  20b047:	cc                   	int3   
  20b048:	cc                   	int3   
  20b049:	cc                   	int3   
  20b04a:	cc                   	int3   
  20b04b:	cc                   	int3   
  20b04c:	cc                   	int3   
  20b04d:	cc                   	int3   
  20b04e:	cc                   	int3   
  20b04f:	cc                   	int3   

000000000020b050 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE>:
    pub fn unwrap_err(self) -> E {
  20b050:	48 83 ec 38          	sub    $0x38,%rsp
  20b054:	48 89 34 24          	mov    %rsi,(%rsp)
  20b058:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20b05d:	0f b6 07             	movzbl (%rdi),%eax
  20b060:	a8 01                	test   $0x1,%al
  20b062:	74 06                	je     20b06a <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x1a>
  20b064:	eb 00                	jmp    20b066 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x16>
  20b066:	eb 4e                	jmp    20b0b6 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x66>
  20b068:	0f 0b                	ud2    
  20b06a:	4c 8b 04 24          	mov    (%rsp),%r8
  20b06e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20b073:	48 8b 41 20          	mov    0x20(%rcx),%rax
  20b077:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20b07c:	48 8b 41 18          	mov    0x18(%rcx),%rax
  20b080:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b085:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20b089:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b08d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20b092:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b097:	48 8d 3d a3 55 ff ff 	lea    -0xaa5d(%rip),%rdi        # 200641 <str.0+0x21>
  20b09e:	48 8d 0d eb ed 02 00 	lea    0x2edeb(%rip),%rcx        # 239e90 <memcmp+0x1150>
  20b0a5:	be 2e 00 00 00       	mov    $0x2e,%esi
  20b0aa:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20b0af:	e8 6c 9f 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b0b4:	0f 0b                	ud2    
  20b0b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => e,
  20b0bb:	8a 40 01             	mov    0x1(%rax),%al
  20b0be:	88 c1                	mov    %al,%cl
  20b0c0:	80 e1 01             	and    $0x1,%cl
  20b0c3:	88 4c 24 37          	mov    %cl,0x37(%rsp)
    }
  20b0c7:	24 01                	and    $0x1,%al
  20b0c9:	0f b6 c0             	movzbl %al,%eax
  20b0cc:	48 83 c4 38          	add    $0x38,%rsp
  20b0d0:	c3                   	retq   
  20b0d1:	cc                   	int3   
  20b0d2:	cc                   	int3   
  20b0d3:	cc                   	int3   
  20b0d4:	cc                   	int3   
  20b0d5:	cc                   	int3   
  20b0d6:	cc                   	int3   
  20b0d7:	cc                   	int3   
  20b0d8:	cc                   	int3   
  20b0d9:	cc                   	int3   
  20b0da:	cc                   	int3   
  20b0db:	cc                   	int3   
  20b0dc:	cc                   	int3   
  20b0dd:	cc                   	int3   
  20b0de:	cc                   	int3   
  20b0df:	cc                   	int3   

000000000020b0e0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>:
    pub fn unwrap_err(self) -> E {
  20b0e0:	48 83 ec 48          	sub    $0x48,%rsp
  20b0e4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20b0e9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20b0ee:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20b0f3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b0f8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20b0fd:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20b102:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  20b107:	66 8b 44 24 10       	mov    0x10(%rsp),%ax
  20b10c:	66 83 c0 f9          	add    $0xfff9,%ax
  20b110:	0f 95 c0             	setne  %al
  20b113:	0f b6 c0             	movzbl %al,%eax
  20b116:	74 06                	je     20b11e <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x3e>
  20b118:	eb 00                	jmp    20b11a <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x3a>
  20b11a:	eb 26                	jmp    20b142 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x62>
  20b11c:	0f 0b                	ud2    
  20b11e:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20b123:	48 8d 3d 17 55 ff ff 	lea    -0xaae9(%rip),%rdi        # 200641 <str.0+0x21>
  20b12a:	48 8d 0d 7f ed 02 00 	lea    0x2ed7f(%rip),%rcx        # 239eb0 <memcmp+0x1170>
  20b131:	be 2e 00 00 00       	mov    $0x2e,%esi
  20b136:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  20b13b:	e8 e0 9e 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b140:	0f 0b                	ud2    
            Err(e) => e,
  20b142:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b147:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20b14c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b151:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  20b156:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20b15b:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20b160:	48 83 c4 48          	add    $0x48,%rsp
  20b164:	c3                   	retq   
  20b165:	cc                   	int3   
  20b166:	cc                   	int3   
  20b167:	cc                   	int3   
  20b168:	cc                   	int3   
  20b169:	cc                   	int3   
  20b16a:	cc                   	int3   
  20b16b:	cc                   	int3   
  20b16c:	cc                   	int3   
  20b16d:	cc                   	int3   
  20b16e:	cc                   	int3   
  20b16f:	cc                   	int3   

000000000020b170 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>:
    pub fn ok(self) -> Option<T> {
  20b170:	48 83 ec 28          	sub    $0x28,%rsp
  20b174:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  20b178:	48 8b 07             	mov    (%rdi),%rax
  20b17b:	48 85 c0             	test   %rax,%rax
  20b17e:	74 06                	je     20b186 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x16>
  20b180:	eb 00                	jmp    20b182 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x12>
  20b182:	eb 2e                	jmp    20b1b2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x42>
  20b184:	0f 0b                	ud2    
  20b186:	48 8b 04 24          	mov    (%rsp),%rax
            Ok(x) => Some(x),
  20b18a:	48 8b 40 08          	mov    0x8(%rax),%rax
  20b18e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b193:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b198:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b19d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b1a2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b1a7:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  20b1ae:	00 00 
    }
  20b1b0:	eb 09                	jmp    20b1bb <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x4b>
            Err(_) => None,
  20b1b2:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20b1b9:	00 00 
  20b1bb:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20b1bf:	48 83 38 00          	cmpq   $0x0,(%rax)
  20b1c3:	75 0f                	jne    20b1d4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x64>
  20b1c5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b1ca:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20b1cf:	48 83 c4 28          	add    $0x28,%rsp
  20b1d3:	c3                   	retq   
  20b1d4:	eb ef                	jmp    20b1c5 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x55>
  20b1d6:	cc                   	int3   
  20b1d7:	cc                   	int3   
  20b1d8:	cc                   	int3   
  20b1d9:	cc                   	int3   
  20b1da:	cc                   	int3   
  20b1db:	cc                   	int3   
  20b1dc:	cc                   	int3   
  20b1dd:	cc                   	int3   
  20b1de:	cc                   	int3   
  20b1df:	cc                   	int3   

000000000020b1e0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E>:
    pub const fn is_ok(&self) -> bool {
  20b1e0:	48 83 ec 10          	sub    $0x10,%rsp
  20b1e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20b1e9:	8a 07                	mov    (%rdi),%al
  20b1eb:	24 01                	and    $0x1,%al
  20b1ed:	0f b6 c0             	movzbl %al,%eax
  20b1f0:	48 83 f8 00          	cmp    $0x0,%rax
  20b1f4:	75 07                	jne    20b1fd <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E+0x1d>
  20b1f6:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20b1fb:	eb 05                	jmp    20b202 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E+0x22>
  20b1fd:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20b202:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b206:	24 01                	and    $0x1,%al
  20b208:	0f b6 c0             	movzbl %al,%eax
  20b20b:	48 83 c4 10          	add    $0x10,%rsp
  20b20f:	c3                   	retq   

000000000020b210 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE>:
    pub const fn is_ok(&self) -> bool {
  20b210:	48 83 ec 10          	sub    $0x10,%rsp
  20b214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20b219:	8a 07                	mov    (%rdi),%al
  20b21b:	24 01                	and    $0x1,%al
  20b21d:	0f b6 c0             	movzbl %al,%eax
  20b220:	48 83 f8 00          	cmp    $0x0,%rax
  20b224:	75 07                	jne    20b22d <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE+0x1d>
  20b226:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20b22b:	eb 05                	jmp    20b232 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE+0x22>
  20b22d:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20b232:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b236:	24 01                	and    $0x1,%al
  20b238:	0f b6 c0             	movzbl %al,%eax
  20b23b:	48 83 c4 10          	add    $0x10,%rsp
  20b23f:	c3                   	retq   

000000000020b240 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E>:
    pub const fn is_ok(&self) -> bool {
  20b240:	48 83 ec 10          	sub    $0x10,%rsp
  20b244:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20b249:	66 8b 17             	mov    (%rdi),%dx
  20b24c:	66 83 ea 07          	sub    $0x7,%dx
  20b250:	b8 01 00 00 00       	mov    $0x1,%eax
  20b255:	31 c9                	xor    %ecx,%ecx
  20b257:	66 83 fa 00          	cmp    $0x0,%dx
  20b25b:	48 0f 44 c1          	cmove  %rcx,%rax
  20b25f:	48 83 f8 00          	cmp    $0x0,%rax
  20b263:	75 07                	jne    20b26c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E+0x2c>
  20b265:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20b26a:	eb 05                	jmp    20b271 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E+0x31>
  20b26c:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20b271:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b275:	24 01                	and    $0x1,%al
  20b277:	0f b6 c0             	movzbl %al,%eax
  20b27a:	48 83 c4 10          	add    $0x10,%rsp
  20b27e:	c3                   	retq   
  20b27f:	cc                   	int3   

000000000020b280 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E>:
    pub const fn is_ok(&self) -> bool {
  20b280:	48 83 ec 10          	sub    $0x10,%rsp
  20b284:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20b289:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20b28d:	75 07                	jne    20b296 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E+0x16>
  20b28f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20b294:	eb 05                	jmp    20b29b <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E+0x1b>
  20b296:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20b29b:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b29f:	24 01                	and    $0x1,%al
  20b2a1:	0f b6 c0             	movzbl %al,%eax
  20b2a4:	48 83 c4 10          	add    $0x10,%rsp
  20b2a8:	c3                   	retq   
  20b2a9:	cc                   	int3   
  20b2aa:	cc                   	int3   
  20b2ab:	cc                   	int3   
  20b2ac:	cc                   	int3   
  20b2ad:	cc                   	int3   
  20b2ae:	cc                   	int3   
  20b2af:	cc                   	int3   

000000000020b2b0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE>:
    pub const fn is_ok(&self) -> bool {
  20b2b0:	48 83 ec 10          	sub    $0x10,%rsp
  20b2b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20b2b9:	0f b7 07             	movzwl (%rdi),%eax
  20b2bc:	48 83 f8 00          	cmp    $0x0,%rax
  20b2c0:	75 07                	jne    20b2c9 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE+0x19>
  20b2c2:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20b2c7:	eb 05                	jmp    20b2ce <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE+0x1e>
  20b2c9:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20b2ce:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b2d2:	24 01                	and    $0x1,%al
  20b2d4:	0f b6 c0             	movzbl %al,%eax
  20b2d7:	48 83 c4 10          	add    $0x10,%rsp
  20b2db:	c3                   	retq   
  20b2dc:	cc                   	int3   
  20b2dd:	cc                   	int3   
  20b2de:	cc                   	int3   
  20b2df:	cc                   	int3   

000000000020b2e0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>:
    pub const fn is_err(&self) -> bool {
  20b2e0:	48 83 ec 18          	sub    $0x18,%rsp
  20b2e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20b2e9:	e8 c2 ff ff ff       	callq  20b2b0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE>
  20b2ee:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b2f2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b2f6:	34 ff                	xor    $0xff,%al
    }
  20b2f8:	24 01                	and    $0x1,%al
  20b2fa:	0f b6 c0             	movzbl %al,%eax
  20b2fd:	48 83 c4 18          	add    $0x18,%rsp
  20b301:	c3                   	retq   
  20b302:	cc                   	int3   
  20b303:	cc                   	int3   
  20b304:	cc                   	int3   
  20b305:	cc                   	int3   
  20b306:	cc                   	int3   
  20b307:	cc                   	int3   
  20b308:	cc                   	int3   
  20b309:	cc                   	int3   
  20b30a:	cc                   	int3   
  20b30b:	cc                   	int3   
  20b30c:	cc                   	int3   
  20b30d:	cc                   	int3   
  20b30e:	cc                   	int3   
  20b30f:	cc                   	int3   

000000000020b310 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>:
    pub const fn is_err(&self) -> bool {
  20b310:	48 83 ec 18          	sub    $0x18,%rsp
  20b314:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20b319:	e8 22 ff ff ff       	callq  20b240 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E>
  20b31e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b322:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b326:	34 ff                	xor    $0xff,%al
    }
  20b328:	24 01                	and    $0x1,%al
  20b32a:	0f b6 c0             	movzbl %al,%eax
  20b32d:	48 83 c4 18          	add    $0x18,%rsp
  20b331:	c3                   	retq   
  20b332:	cc                   	int3   
  20b333:	cc                   	int3   
  20b334:	cc                   	int3   
  20b335:	cc                   	int3   
  20b336:	cc                   	int3   
  20b337:	cc                   	int3   
  20b338:	cc                   	int3   
  20b339:	cc                   	int3   
  20b33a:	cc                   	int3   
  20b33b:	cc                   	int3   
  20b33c:	cc                   	int3   
  20b33d:	cc                   	int3   
  20b33e:	cc                   	int3   
  20b33f:	cc                   	int3   

000000000020b340 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h82bd04722172da00E>:
    pub const fn is_err(&self) -> bool {
  20b340:	48 83 ec 18          	sub    $0x18,%rsp
  20b344:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20b349:	e8 92 fe ff ff       	callq  20b1e0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E>
  20b34e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b352:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b356:	34 ff                	xor    $0xff,%al
    }
  20b358:	24 01                	and    $0x1,%al
  20b35a:	0f b6 c0             	movzbl %al,%eax
  20b35d:	48 83 c4 18          	add    $0x18,%rsp
  20b361:	c3                   	retq   
  20b362:	cc                   	int3   
  20b363:	cc                   	int3   
  20b364:	cc                   	int3   
  20b365:	cc                   	int3   
  20b366:	cc                   	int3   
  20b367:	cc                   	int3   
  20b368:	cc                   	int3   
  20b369:	cc                   	int3   
  20b36a:	cc                   	int3   
  20b36b:	cc                   	int3   
  20b36c:	cc                   	int3   
  20b36d:	cc                   	int3   
  20b36e:	cc                   	int3   
  20b36f:	cc                   	int3   

000000000020b370 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17haa604f8299c01af4E>:
    pub const fn is_err(&self) -> bool {
  20b370:	48 83 ec 18          	sub    $0x18,%rsp
  20b374:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20b379:	e8 92 fe ff ff       	callq  20b210 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE>
  20b37e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b382:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b386:	34 ff                	xor    $0xff,%al
    }
  20b388:	24 01                	and    $0x1,%al
  20b38a:	0f b6 c0             	movzbl %al,%eax
  20b38d:	48 83 c4 18          	add    $0x18,%rsp
  20b391:	c3                   	retq   
  20b392:	cc                   	int3   
  20b393:	cc                   	int3   
  20b394:	cc                   	int3   
  20b395:	cc                   	int3   
  20b396:	cc                   	int3   
  20b397:	cc                   	int3   
  20b398:	cc                   	int3   
  20b399:	cc                   	int3   
  20b39a:	cc                   	int3   
  20b39b:	cc                   	int3   
  20b39c:	cc                   	int3   
  20b39d:	cc                   	int3   
  20b39e:	cc                   	int3   
  20b39f:	cc                   	int3   

000000000020b3a0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf7814dd879df2886E>:
    pub const fn is_err(&self) -> bool {
  20b3a0:	48 83 ec 18          	sub    $0x18,%rsp
  20b3a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20b3a9:	e8 d2 fe ff ff       	callq  20b280 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E>
  20b3ae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b3b2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b3b6:	34 ff                	xor    $0xff,%al
    }
  20b3b8:	24 01                	and    $0x1,%al
  20b3ba:	0f b6 c0             	movzbl %al,%eax
  20b3bd:	48 83 c4 18          	add    $0x18,%rsp
  20b3c1:	c3                   	retq   
  20b3c2:	cc                   	int3   
  20b3c3:	cc                   	int3   
  20b3c4:	cc                   	int3   
  20b3c5:	cc                   	int3   
  20b3c6:	cc                   	int3   
  20b3c7:	cc                   	int3   
  20b3c8:	cc                   	int3   
  20b3c9:	cc                   	int3   
  20b3ca:	cc                   	int3   
  20b3cb:	cc                   	int3   
  20b3cc:	cc                   	int3   
  20b3cd:	cc                   	int3   
  20b3ce:	cc                   	int3   
  20b3cf:	cc                   	int3   

000000000020b3d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>:
    pub fn unwrap(self) -> T {
  20b3d0:	48 83 ec 28          	sub    $0x28,%rsp
  20b3d4:	48 89 34 24          	mov    %rsi,(%rsp)
  20b3d8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20b3dd:	0f b7 07             	movzwl (%rdi),%eax
  20b3e0:	48 85 c0             	test   %rax,%rax
  20b3e3:	74 06                	je     20b3eb <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x1b>
  20b3e5:	eb 00                	jmp    20b3e7 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x17>
  20b3e7:	eb 15                	jmp    20b3fe <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x2e>
  20b3e9:	0f 0b                	ud2    
  20b3eb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => t,
  20b3f0:	66 8b 40 02          	mov    0x2(%rax),%ax
  20b3f4:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
    }
  20b3f9:	48 83 c4 28          	add    $0x28,%rsp
  20b3fd:	c3                   	retq   
  20b3fe:	4c 8b 04 24          	mov    (%rsp),%r8
  20b402:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20b407:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20b40b:	48 8b 40 10          	mov    0x10(%rax),%rax
  20b40f:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20b414:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b419:	48 8d 3d 4f 52 ff ff 	lea    -0xadb1(%rip),%rdi        # 20066f <str.0+0x4f>
  20b420:	48 8d 0d a9 ea 02 00 	lea    0x2eaa9(%rip),%rcx        # 239ed0 <memcmp+0x1190>
  20b427:	be 2b 00 00 00       	mov    $0x2b,%esi
  20b42c:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20b431:	e8 ea 9b 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b436:	0f 0b                	ud2    
  20b438:	cc                   	int3   
  20b439:	cc                   	int3   
  20b43a:	cc                   	int3   
  20b43b:	cc                   	int3   
  20b43c:	cc                   	int3   
  20b43d:	cc                   	int3   
  20b43e:	cc                   	int3   
  20b43f:	cc                   	int3   

000000000020b440 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E>:
    pub fn unwrap(self) -> T {
  20b440:	48 83 ec 28          	sub    $0x28,%rsp
  20b444:	48 89 14 24          	mov    %rdx,(%rsp)
  20b448:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20b44d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b452:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  20b457:	0f b6 06             	movzbl (%rsi),%eax
  20b45a:	a8 01                	test   $0x1,%al
  20b45c:	74 06                	je     20b464 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x24>
  20b45e:	eb 00                	jmp    20b460 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x20>
  20b460:	eb 35                	jmp    20b497 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x57>
  20b462:	0f 0b                	ud2    
  20b464:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b469:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b46e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            Ok(t) => t,
  20b473:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  20b477:	48 89 31             	mov    %rsi,(%rcx)
  20b47a:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  20b47e:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20b482:	48 8b 72 18          	mov    0x18(%rdx),%rsi
  20b486:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  20b48a:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  20b48e:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  20b492:	48 83 c4 28          	add    $0x28,%rsp
  20b496:	c3                   	retq   
  20b497:	4c 8b 04 24          	mov    (%rsp),%r8
  20b49b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20b4a0:	8a 40 01             	mov    0x1(%rax),%al
  20b4a3:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b4a7:	48 8d 3d c1 51 ff ff 	lea    -0xae3f(%rip),%rdi        # 20066f <str.0+0x4f>
  20b4ae:	48 8d 0d 3b ea 02 00 	lea    0x2ea3b(%rip),%rcx        # 239ef0 <memcmp+0x11b0>
  20b4b5:	be 2b 00 00 00       	mov    $0x2b,%esi
  20b4ba:	48 8d 54 24 27       	lea    0x27(%rsp),%rdx
  20b4bf:	e8 5c 9b 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b4c4:	0f 0b                	ud2    
  20b4c6:	cc                   	int3   
  20b4c7:	cc                   	int3   
  20b4c8:	cc                   	int3   
  20b4c9:	cc                   	int3   
  20b4ca:	cc                   	int3   
  20b4cb:	cc                   	int3   
  20b4cc:	cc                   	int3   
  20b4cd:	cc                   	int3   
  20b4ce:	cc                   	int3   
  20b4cf:	cc                   	int3   

000000000020b4d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE>:
    pub fn unwrap(self) -> T {
  20b4d0:	48 83 ec 28          	sub    $0x28,%rsp
  20b4d4:	48 89 34 24          	mov    %rsi,(%rsp)
  20b4d8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20b4dd:	0f b6 07             	movzbl (%rdi),%eax
  20b4e0:	a8 01                	test   $0x1,%al
  20b4e2:	74 06                	je     20b4ea <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x1a>
  20b4e4:	eb 00                	jmp    20b4e6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x16>
  20b4e6:	eb 28                	jmp    20b510 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x40>
  20b4e8:	0f 0b                	ud2    
  20b4ea:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => t,
  20b4ef:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20b4f3:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b4f7:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20b4fc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  20b501:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b506:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b50b:	48 83 c4 28          	add    $0x28,%rsp
  20b50f:	c3                   	retq   
  20b510:	4c 8b 04 24          	mov    (%rsp),%r8
  20b514:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20b519:	8a 40 01             	mov    0x1(%rax),%al
  20b51c:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b520:	48 8d 3d 48 51 ff ff 	lea    -0xaeb8(%rip),%rdi        # 20066f <str.0+0x4f>
  20b527:	48 8d 0d e2 e9 02 00 	lea    0x2e9e2(%rip),%rcx        # 239f10 <memcmp+0x11d0>
  20b52e:	be 2b 00 00 00       	mov    $0x2b,%esi
  20b533:	48 8d 54 24 27       	lea    0x27(%rsp),%rdx
  20b538:	e8 e3 9a 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b53d:	0f 0b                	ud2    
  20b53f:	cc                   	int3   

000000000020b540 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE>:
    pub fn unwrap(self) -> T {
  20b540:	48 83 ec 28          	sub    $0x28,%rsp
  20b544:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20b549:	40 88 f8             	mov    %dil,%al
  20b54c:	24 01                	and    $0x1,%al
  20b54e:	88 44 24 17          	mov    %al,0x17(%rsp)
        match self {
  20b552:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  20b557:	a8 01                	test   $0x1,%al
  20b559:	74 06                	je     20b561 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x21>
  20b55b:	eb 00                	jmp    20b55d <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x1d>
  20b55d:	eb 07                	jmp    20b566 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x26>
  20b55f:	0f 0b                	ud2    
    }
  20b561:	48 83 c4 28          	add    $0x28,%rsp
  20b565:	c3                   	retq   
  20b566:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20b56b:	48 8d 3d fd 50 ff ff 	lea    -0xaf03(%rip),%rdi        # 20066f <str.0+0x4f>
  20b572:	48 8d 0d b7 e9 02 00 	lea    0x2e9b7(%rip),%rcx        # 239f30 <memcmp+0x11f0>
  20b579:	be 2b 00 00 00       	mov    $0x2b,%esi
  20b57e:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  20b583:	e8 98 9a 02 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20b588:	0f 0b                	ud2    
  20b58a:	cc                   	int3   
  20b58b:	cc                   	int3   
  20b58c:	cc                   	int3   
  20b58d:	cc                   	int3   
  20b58e:	cc                   	int3   
  20b58f:	cc                   	int3   

000000000020b590 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20b590:	48 83 ec 68          	sub    $0x68,%rsp
  20b594:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20b599:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20b59e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        match self {
  20b5a3:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b5a8:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20b5ad:	48 8b 06             	mov    (%rsi),%rax
  20b5b0:	48 85 c0             	test   %rax,%rax
  20b5b3:	74 06                	je     20b5bb <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x2b>
  20b5b5:	eb 00                	jmp    20b5b7 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x27>
  20b5b7:	eb 10                	jmp    20b5c9 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x39>
  20b5b9:	0f 0b                	ud2    
  20b5bb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            Ok(t) => Ok(t),
  20b5c0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b5c7:	eb 5d                	jmp    20b626 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x96>
  20b5c9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Err(e) => Err(op(e)),
  20b5ce:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20b5d2:	48 8b 40 10          	mov    0x10(%rax),%rax
  20b5d6:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20b5db:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20b5e0:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b5e5:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b5ea:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b5ef:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20b5f4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20b5f9:	e8 92 bb ff ff       	callq  207190 <_ZN5alloc7raw_vec14handle_reserve28_$u7b$$u7b$closure$u7d$$u7d$17h1efb542338459167E>
  20b5fe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b603:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20b608:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b60d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b612:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20b617:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b61b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b61f:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20b626:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b62b:	75 0a                	jne    20b637 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0xa7>
  20b62d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b632:	48 83 c4 68          	add    $0x68,%rsp
  20b636:	c3                   	retq   
  20b637:	eb f4                	jmp    20b62d <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x9d>
  20b639:	cc                   	int3   
  20b63a:	cc                   	int3   
  20b63b:	cc                   	int3   
  20b63c:	cc                   	int3   
  20b63d:	cc                   	int3   
  20b63e:	cc                   	int3   
  20b63f:	cc                   	int3   

000000000020b640 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20b640:	48 83 ec 58          	sub    $0x58,%rsp
  20b644:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b649:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20b64e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20b653:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        match self {
  20b658:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20b65d:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20b662:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b667:	48 85 c0             	test   %rax,%rax
  20b66a:	0f 94 c0             	sete   %al
  20b66d:	0f b6 c0             	movzbl %al,%eax
  20b670:	75 06                	jne    20b678 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x38>
  20b672:	eb 00                	jmp    20b674 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x34>
  20b674:	eb 2c                	jmp    20b6a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x62>
  20b676:	0f 0b                	ud2    
  20b678:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Ok(t) => Ok(t),
  20b67d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20b682:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20b687:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  20b68c:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20b691:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b695:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b699:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b6a0:	eb 30                	jmp    20b6d2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x92>
            Err(e) => Err(op(e)),
  20b6a2:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20b6a7:	e8 c4 ba ff ff       	callq  207170 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hf886e098f4878047E>
  20b6ac:	48 89 04 24          	mov    %rax,(%rsp)
  20b6b0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20b6b5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b6ba:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20b6bf:	48 8b 14 24          	mov    (%rsp),%rdx
  20b6c3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b6c7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b6cb:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20b6d2:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20b6d7:	75 0a                	jne    20b6e3 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0xa3>
  20b6d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b6de:	48 83 c4 58          	add    $0x58,%rsp
  20b6e2:	c3                   	retq   
  20b6e3:	eb f4                	jmp    20b6d9 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x99>
  20b6e5:	cc                   	int3   
  20b6e6:	cc                   	int3   
  20b6e7:	cc                   	int3   
  20b6e8:	cc                   	int3   
  20b6e9:	cc                   	int3   
  20b6ea:	cc                   	int3   
  20b6eb:	cc                   	int3   
  20b6ec:	cc                   	int3   
  20b6ed:	cc                   	int3   
  20b6ee:	cc                   	int3   
  20b6ef:	cc                   	int3   

000000000020b6f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20b6f0:	48 83 ec 68          	sub    $0x68,%rsp
  20b6f4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20b6f9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20b6fe:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20b703:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20b708:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20b70d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
        match self {
  20b712:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b717:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20b71c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20b721:	48 85 c0             	test   %rax,%rax
  20b724:	0f 94 c0             	sete   %al
  20b727:	0f b6 c0             	movzbl %al,%eax
  20b72a:	75 06                	jne    20b732 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x42>
  20b72c:	eb 00                	jmp    20b72e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x3e>
  20b72e:	eb 2c                	jmp    20b75c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x6c>
  20b730:	0f 0b                	ud2    
  20b732:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            Ok(t) => Ok(t),
  20b737:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20b73c:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20b741:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20b746:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20b74b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b74f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b753:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b75a:	eb 37                	jmp    20b793 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xa3>
  20b75c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Err(e) => Err(op(e)),
  20b761:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b766:	e8 b5 b9 ff ff       	callq  207120 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h86893349264546edE>
  20b76b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b770:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20b775:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b77a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b77f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20b784:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b788:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b78c:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20b793:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b798:	75 0a                	jne    20b7a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xb4>
  20b79a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b79f:	48 83 c4 68          	add    $0x68,%rsp
  20b7a3:	c3                   	retq   
  20b7a4:	eb f4                	jmp    20b79a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xaa>
  20b7a6:	cc                   	int3   
  20b7a7:	cc                   	int3   
  20b7a8:	cc                   	int3   
  20b7a9:	cc                   	int3   
  20b7aa:	cc                   	int3   
  20b7ab:	cc                   	int3   
  20b7ac:	cc                   	int3   
  20b7ad:	cc                   	int3   
  20b7ae:	cc                   	int3   
  20b7af:	cc                   	int3   

000000000020b7b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b7b0:	48 83 ec 40          	sub    $0x40,%rsp
  20b7b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b7b8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  20b7bd:	48 8b 04 24          	mov    (%rsp),%rax
  20b7c1:	48 85 c0             	test   %rax,%rax
  20b7c4:	0f 94 c0             	sete   %al
  20b7c7:	0f b6 c0             	movzbl %al,%eax
  20b7ca:	75 06                	jne    20b7d2 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x22>
  20b7cc:	eb 00                	jmp    20b7ce <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x1e>
  20b7ce:	eb 21                	jmp    20b7f1 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x41>
  20b7d0:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b7d2:	48 8b 0c 24          	mov    (%rsp),%rcx
  20b7d6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b7db:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b7e0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b7e5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20b7ea:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b7ef:	eb 09                	jmp    20b7fa <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x4a>
            Err(e) => ControlFlow::Break(Err(e)),
  20b7f1:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20b7f8:	00 00 
    }
  20b7fa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b7ff:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b804:	48 83 c4 40          	add    $0x40,%rsp
  20b808:	c3                   	retq   
  20b809:	cc                   	int3   
  20b80a:	cc                   	int3   
  20b80b:	cc                   	int3   
  20b80c:	cc                   	int3   
  20b80d:	cc                   	int3   
  20b80e:	cc                   	int3   
  20b80f:	cc                   	int3   

000000000020b810 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b810:	48 83 ec 58          	sub    $0x58,%rsp
  20b814:	48 89 34 24          	mov    %rsi,(%rsp)
  20b818:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b81d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b822:	48 8b 46 08          	mov    0x8(%rsi),%rax
  20b826:	48 85 c0             	test   %rax,%rax
  20b829:	0f 94 c0             	sete   %al
  20b82c:	0f b6 c0             	movzbl %al,%eax
  20b82f:	75 06                	jne    20b837 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x27>
  20b831:	eb 00                	jmp    20b833 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x23>
  20b833:	eb 5f                	jmp    20b894 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x84>
  20b835:	0f 0b                	ud2    
  20b837:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b83c:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b840:	48 8b 11             	mov    (%rcx),%rdx
  20b843:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b848:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b84c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20b851:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b855:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20b85a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20b85f:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b864:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b869:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b86e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20b873:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b878:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20b87d:	48 89 08             	mov    %rcx,(%rax)
  20b880:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20b885:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20b889:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20b88e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b892:	eb 0d                	jmp    20b8a1 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x91>
  20b894:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => ControlFlow::Break(Err(e)),
  20b899:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  20b8a0:	00 
  20b8a1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b8a6:	48 83 c4 58          	add    $0x58,%rsp
  20b8aa:	c3                   	retq   
  20b8ab:	cc                   	int3   
  20b8ac:	cc                   	int3   
  20b8ad:	cc                   	int3   
  20b8ae:	cc                   	int3   
  20b8af:	cc                   	int3   

000000000020b8b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b8b0:	48 83 ec 40          	sub    $0x40,%rsp
  20b8b4:	48 89 34 24          	mov    %rsi,(%rsp)
  20b8b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b8bd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b8c2:	48 8b 06             	mov    (%rsi),%rax
  20b8c5:	48 85 c0             	test   %rax,%rax
  20b8c8:	74 06                	je     20b8d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x20>
  20b8ca:	eb 00                	jmp    20b8cc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x1c>
  20b8cc:	eb 10                	jmp    20b8de <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x2e>
  20b8ce:	0f 0b                	ud2    
  20b8d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(v) => ControlFlow::Continue(v),
  20b8d5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b8dc:	eb 3e                	jmp    20b91c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x6c>
  20b8de:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b8e3:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b8e7:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b8eb:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b8ef:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20b8f4:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b8f9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b8fe:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b903:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b908:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b90d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b911:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b915:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20b91c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b921:	48 83 c4 40          	add    $0x40,%rsp
  20b925:	c3                   	retq   
  20b926:	cc                   	int3   
  20b927:	cc                   	int3   
  20b928:	cc                   	int3   
  20b929:	cc                   	int3   
  20b92a:	cc                   	int3   
  20b92b:	cc                   	int3   
  20b92c:	cc                   	int3   
  20b92d:	cc                   	int3   
  20b92e:	cc                   	int3   
  20b92f:	cc                   	int3   

000000000020b930 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b930:	48 83 ec 38          	sub    $0x38,%rsp
  20b934:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b938:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  20b93d:	48 8b 04 24          	mov    (%rsp),%rax
  20b941:	48 85 c0             	test   %rax,%rax
  20b944:	74 06                	je     20b94c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x1c>
  20b946:	eb 00                	jmp    20b948 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x18>
  20b948:	eb 1c                	jmp    20b966 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x36>
  20b94a:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b94c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b951:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20b956:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b95b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20b962:	00 00 
  20b964:	eb 09                	jmp    20b96f <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x3f>
            Err(e) => ControlFlow::Break(Err(e)),
  20b966:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  20b96d:	00 00 
    }
  20b96f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b974:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b979:	48 83 c4 38          	add    $0x38,%rsp
  20b97d:	c3                   	retq   
  20b97e:	cc                   	int3   
  20b97f:	cc                   	int3   

000000000020b980 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b980:	48 83 ec 48          	sub    $0x48,%rsp
  20b984:	48 89 34 24          	mov    %rsi,(%rsp)
  20b988:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b98d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b992:	48 8b 06             	mov    (%rsi),%rax
  20b995:	48 85 c0             	test   %rax,%rax
  20b998:	74 06                	je     20b9a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x20>
  20b99a:	eb 00                	jmp    20b99c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x1c>
  20b99c:	eb 2e                	jmp    20b9cc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x4c>
  20b99e:	0f 0b                	ud2    
  20b9a0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b9a5:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b9a9:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b9ad:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b9b1:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20b9b6:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b9bb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b9bf:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b9c3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b9ca:	eb 3e                	jmp    20ba0a <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x8a>
  20b9cc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b9d1:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b9d5:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b9d9:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b9dd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b9e2:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b9e7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b9ec:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b9f1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b9f6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b9fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b9ff:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20ba03:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20ba0a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20ba0f:	48 83 c4 48          	add    $0x48,%rsp
  20ba13:	c3                   	retq   
  20ba14:	cc                   	int3   
  20ba15:	cc                   	int3   
  20ba16:	cc                   	int3   
  20ba17:	cc                   	int3   
  20ba18:	cc                   	int3   
  20ba19:	cc                   	int3   
  20ba1a:	cc                   	int3   
  20ba1b:	cc                   	int3   
  20ba1c:	cc                   	int3   
  20ba1d:	cc                   	int3   
  20ba1e:	cc                   	int3   
  20ba1f:	cc                   	int3   

000000000020ba20 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20ba20:	48 83 ec 28          	sub    $0x28,%rsp
  20ba24:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  20ba28:	48 8b 04 24          	mov    (%rsp),%rax
  20ba2c:	48 85 c0             	test   %rax,%rax
  20ba2f:	0f 94 c0             	sete   %al
  20ba32:	0f b6 c0             	movzbl %al,%eax
  20ba35:	75 06                	jne    20ba3d <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x1d>
  20ba37:	eb 00                	jmp    20ba39 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x19>
  20ba39:	eb 12                	jmp    20ba4d <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x2d>
  20ba3b:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20ba3d:	48 8b 04 24          	mov    (%rsp),%rax
  20ba41:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ba46:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ba4b:	eb 09                	jmp    20ba56 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x36>
            Err(e) => ControlFlow::Break(Err(e)),
  20ba4d:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20ba54:	00 00 
    }
  20ba56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ba5b:	48 83 c4 28          	add    $0x28,%rsp
  20ba5f:	c3                   	retq   

000000000020ba60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20ba60:	48 83 ec 40          	sub    $0x40,%rsp
  20ba64:	48 89 34 24          	mov    %rsi,(%rsp)
  20ba68:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ba6d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20ba72:	48 8b 06             	mov    (%rsi),%rax
  20ba75:	48 85 c0             	test   %rax,%rax
  20ba78:	74 06                	je     20ba80 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x20>
  20ba7a:	eb 00                	jmp    20ba7c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x1c>
  20ba7c:	eb 21                	jmp    20ba9f <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x3f>
  20ba7e:	0f 0b                	ud2    
  20ba80:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ba85:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20ba89:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  20ba8d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20ba92:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20ba96:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20ba9d:	eb 3e                	jmp    20badd <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x7d>
  20ba9f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20baa4:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20baa8:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20baac:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20bab0:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20bab5:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20baba:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20babf:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20bac4:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20bac9:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20bace:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20bad2:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20bad6:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20badd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20bae2:	48 83 c4 40          	add    $0x40,%rsp
  20bae6:	c3                   	retq   
  20bae7:	cc                   	int3   
  20bae8:	cc                   	int3   
  20bae9:	cc                   	int3   
  20baea:	cc                   	int3   
  20baeb:	cc                   	int3   
  20baec:	cc                   	int3   
  20baed:	cc                   	int3   
  20baee:	cc                   	int3   
  20baef:	cc                   	int3   

000000000020baf0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20baf0:	48 83 ec 48          	sub    $0x48,%rsp
  20baf4:	48 89 34 24          	mov    %rsi,(%rsp)
  20baf8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bafd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20bb02:	48 8b 06             	mov    (%rsi),%rax
  20bb05:	48 85 c0             	test   %rax,%rax
  20bb08:	74 06                	je     20bb10 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x20>
  20bb0a:	eb 00                	jmp    20bb0c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x1c>
  20bb0c:	eb 2e                	jmp    20bb3c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x4c>
  20bb0e:	0f 0b                	ud2    
  20bb10:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bb15:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20bb19:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20bb1d:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20bb21:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20bb26:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20bb2b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20bb2f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20bb33:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20bb3a:	eb 3e                	jmp    20bb7a <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x8a>
  20bb3c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bb41:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20bb45:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20bb49:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20bb4d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20bb52:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20bb57:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20bb5c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20bb61:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20bb66:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20bb6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20bb6f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20bb73:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20bb7a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20bb7f:	48 83 c4 48          	add    $0x48,%rsp
  20bb83:	c3                   	retq   
  20bb84:	cc                   	int3   
  20bb85:	cc                   	int3   
  20bb86:	cc                   	int3   
  20bb87:	cc                   	int3   
  20bb88:	cc                   	int3   
  20bb89:	cc                   	int3   
  20bb8a:	cc                   	int3   
  20bb8b:	cc                   	int3   
  20bb8c:	cc                   	int3   
  20bb8d:	cc                   	int3   
  20bb8e:	cc                   	int3   
  20bb8f:	cc                   	int3   

000000000020bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20bb90:	48 83 ec 20          	sub    $0x20,%rsp
  20bb94:	40 88 f8             	mov    %dil,%al
  20bb97:	24 01                	and    $0x1,%al
  20bb99:	88 44 24 06          	mov    %al,0x6(%rsp)
        match self {
  20bb9d:	0f b6 44 24 06       	movzbl 0x6(%rsp),%eax
  20bba2:	a8 01                	test   $0x1,%al
  20bba4:	74 06                	je     20bbac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x1c>
  20bba6:	eb 00                	jmp    20bba8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x18>
  20bba8:	eb 09                	jmp    20bbb3 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x23>
  20bbaa:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20bbac:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  20bbb1:	eb 05                	jmp    20bbb8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x28>
            Err(e) => ControlFlow::Break(Err(e)),
  20bbb3:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  20bbb8:	8a 44 24 07          	mov    0x7(%rsp),%al
  20bbbc:	24 01                	and    $0x1,%al
  20bbbe:	0f b6 c0             	movzbl %al,%eax
  20bbc1:	48 83 c4 20          	add    $0x20,%rsp
  20bbc5:	c3                   	retq   
  20bbc6:	cc                   	int3   
  20bbc7:	cc                   	int3   
  20bbc8:	cc                   	int3   
  20bbc9:	cc                   	int3   
  20bbca:	cc                   	int3   
  20bbcb:	cc                   	int3   
  20bbcc:	cc                   	int3   
  20bbcd:	cc                   	int3   
  20bbce:	cc                   	int3   
  20bbcf:	cc                   	int3   

000000000020bbd0 <_ZN4core3ops8function6FnOnce9call_once17h113bbf498259d8e9E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
  20bbd0:	48 83 ec 18          	sub    $0x18,%rsp
  20bbd4:	48 89 f8             	mov    %rdi,%rax
  20bbd7:	48 89 04 24          	mov    %rax,(%rsp)
        kernel_tss_selector: k_tss_segment_result.unwrap(),
    }
}

lazy_static! {
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
  20bbdb:	e8 b0 12 01 00       	callq  21ce90 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE>
  20bbe0:	48 8b 04 24          	mov    (%rsp),%rax
  20bbe4:	48 83 c4 18          	add    $0x18,%rsp
  20bbe8:	c3                   	retq   
  20bbe9:	cc                   	int3   
  20bbea:	cc                   	int3   
  20bbeb:	cc                   	int3   
  20bbec:	cc                   	int3   
  20bbed:	cc                   	int3   
  20bbee:	cc                   	int3   
  20bbef:	cc                   	int3   

000000000020bbf0 <_ZN4core3ops8function6FnOnce9call_once17h1edd667f22cfc967E>:
  20bbf0:	48 83 ec 18          	sub    $0x18,%rsp
  20bbf4:	48 89 f8             	mov    %rdi,%rax
  20bbf7:	48 89 04 24          	mov    %rax,(%rsp)

    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
}

lazy_static! {
    pub static ref KERNEL_PAGING: VirtualMemoryManager = init_kernel_vmm();
  20bbfb:	e8 90 24 00 00       	callq  20e090 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE>
  20bc00:	48 8b 04 24          	mov    (%rsp),%rax
  20bc04:	48 83 c4 18          	add    $0x18,%rsp
  20bc08:	c3                   	retq   
  20bc09:	cc                   	int3   
  20bc0a:	cc                   	int3   
  20bc0b:	cc                   	int3   
  20bc0c:	cc                   	int3   
  20bc0d:	cc                   	int3   
  20bc0e:	cc                   	int3   
  20bc0f:	cc                   	int3   

000000000020bc10 <_ZN4core3ops8function6FnOnce9call_once17h292df0ed92871557E>:
  20bc10:	48 83 ec 48          	sub    $0x48,%rsp
  20bc14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bc19:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

    probe_res.unwrap()
}

lazy_static! {
    pub static ref PROCESSORS: Mutex<Processors> = Mutex::new(probe_cpus());
  20bc1e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20bc23:	e8 48 bd 01 00       	callq  227970 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E>
  20bc28:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bc2d:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20bc32:	e8 69 29 02 00       	callq  22e5a0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb8a225ac51d82457E>
  20bc37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bc3c:	48 83 c4 48          	add    $0x48,%rsp
  20bc40:	c3                   	retq   
  20bc41:	cc                   	int3   
  20bc42:	cc                   	int3   
  20bc43:	cc                   	int3   
  20bc44:	cc                   	int3   
  20bc45:	cc                   	int3   
  20bc46:	cc                   	int3   
  20bc47:	cc                   	int3   
  20bc48:	cc                   	int3   
  20bc49:	cc                   	int3   
  20bc4a:	cc                   	int3   
  20bc4b:	cc                   	int3   
  20bc4c:	cc                   	int3   
  20bc4d:	cc                   	int3   
  20bc4e:	cc                   	int3   
  20bc4f:	cc                   	int3   

000000000020bc50 <_ZN4core3ops8function6FnOnce9call_once17h2a57aa7eac2aa15bE>:
  20bc50:	48 83 ec 78          	sub    $0x78,%rsp
  20bc54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bc59:	48 89 3c 24          	mov    %rdi,(%rsp)
        cpcis
    }
}

lazy_static! {
    pub static ref CHAINED_PIC: Mutex<ChainedPIC> = Mutex::new(ChainedPIC::init(0xff, 0xff));
  20bc5d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bc62:	ba ff 00 00 00       	mov    $0xff,%edx
  20bc67:	89 d6                	mov    %edx,%esi
  20bc69:	e8 d2 17 02 00       	callq  22d440 <_ZN9r3_kernel3cpu3pic10ChainedPIC4init17hfc2fdf5ad2bb63a7E>
  20bc6e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bc73:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20bc78:	e8 03 25 02 00       	callq  22e180 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3fd6b3d9821e2ef0E>
  20bc7d:	48 8b 04 24          	mov    (%rsp),%rax
  20bc81:	48 83 c4 78          	add    $0x78,%rsp
  20bc85:	c3                   	retq   
  20bc86:	cc                   	int3   
  20bc87:	cc                   	int3   
  20bc88:	cc                   	int3   
  20bc89:	cc                   	int3   
  20bc8a:	cc                   	int3   
  20bc8b:	cc                   	int3   
  20bc8c:	cc                   	int3   
  20bc8d:	cc                   	int3   
  20bc8e:	cc                   	int3   
  20bc8f:	cc                   	int3   

000000000020bc90 <_ZN4core3ops8function6FnOnce9call_once17h2ba66678938adde7E>:
  20bc90:	48 81 ec 28 10 00 00 	sub    $0x1028,%rsp
  20bc97:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bc9c:	48 89 3c 24          	mov    %rdi,(%rsp)
    log::info!("Prepared basic exceptions.");
    return idt;
}

lazy_static! {
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
  20bca0:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bca5:	e8 a6 ff 01 00       	callq  22bc50 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE>
  20bcaa:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bcaf:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20bcb4:	e8 c7 22 02 00       	callq  22df80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h03eb79ebae1e7aadE>
  20bcb9:	48 8b 04 24          	mov    (%rsp),%rax
  20bcbd:	48 81 c4 28 10 00 00 	add    $0x1028,%rsp
  20bcc4:	c3                   	retq   
  20bcc5:	cc                   	int3   
  20bcc6:	cc                   	int3   
  20bcc7:	cc                   	int3   
  20bcc8:	cc                   	int3   
  20bcc9:	cc                   	int3   
  20bcca:	cc                   	int3   
  20bccb:	cc                   	int3   
  20bccc:	cc                   	int3   
  20bccd:	cc                   	int3   
  20bcce:	cc                   	int3   
  20bccf:	cc                   	int3   

000000000020bcd0 <_ZN4core3ops8function6FnOnce9call_once17h35dfcc7c677b1963E>:
  20bcd0:	48 83 ec 18          	sub    $0x18,%rsp
  20bcd4:	48 89 f8             	mov    %rdi,%rax
  20bcd7:	48 89 04 24          	mov    %rax,(%rsp)

lazy_static! {
    pub static ref UART_DRIVER: Option<Mutex<UART>> = init_uart();
  20bcdb:	e8 10 b1 ff ff       	callq  206df0 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE>
  20bce0:	48 8b 04 24          	mov    (%rsp),%rax
  20bce4:	48 83 c4 18          	add    $0x18,%rsp
  20bce8:	c3                   	retq   
  20bce9:	cc                   	int3   
  20bcea:	cc                   	int3   
  20bceb:	cc                   	int3   
  20bcec:	cc                   	int3   
  20bced:	cc                   	int3   
  20bcee:	cc                   	int3   
  20bcef:	cc                   	int3   

000000000020bcf0 <_ZN4core3ops8function6FnOnce9call_once17h4985b7a711a6d100E>:
  20bcf0:	48 83 ec 28          	sub    $0x28,%rsp
  20bcf4:	48 89 f8             	mov    %rdi,%rax
  20bcf7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    Mutex::new(FramebufferLogger::init(color))
}

lazy_static! {
    pub static ref FRAMEBUFFER_LOGGER: Mutex<FramebufferLogger> =
        setup_framebuffer(framebuffer::Pixel {
  20bcfc:	c6 44 24 20 ff       	movb   $0xff,0x20(%rsp)
  20bd01:	c6 44 24 21 ff       	movb   $0xff,0x21(%rsp)
  20bd06:	c6 44 24 22 ff       	movb   $0xff,0x22(%rsp)
  20bd0b:	c6 44 24 23 00       	movb   $0x0,0x23(%rsp)
  20bd10:	8b 74 24 20          	mov    0x20(%rsp),%esi
  20bd14:	e8 07 3a 01 00       	callq  21f720 <_ZN9r3_kernel7drivers7display7fb_text17setup_framebuffer17hacd8dd41e1df2539E>
  20bd19:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bd1e:	48 83 c4 28          	add    $0x28,%rsp
  20bd22:	c3                   	retq   
  20bd23:	cc                   	int3   
  20bd24:	cc                   	int3   
  20bd25:	cc                   	int3   
  20bd26:	cc                   	int3   
  20bd27:	cc                   	int3   
  20bd28:	cc                   	int3   
  20bd29:	cc                   	int3   
  20bd2a:	cc                   	int3   
  20bd2b:	cc                   	int3   
  20bd2c:	cc                   	int3   
  20bd2d:	cc                   	int3   
  20bd2e:	cc                   	int3   
  20bd2f:	cc                   	int3   

000000000020bd30 <_ZN4core3ops8function6FnOnce9call_once17h598ec53524868f86E>:
  20bd30:	48 83 ec 38          	sub    $0x38,%rsp
  20bd34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bd39:	48 89 3c 24          	mov    %rdi,(%rsp)
        config_reg.write_config(value);
    }
}

lazy_static! {
    pub static ref PCI_DEVICES: Mutex<Vec<PCIDevice>> = Mutex::new(Vec::new());
  20bd3d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bd42:	e8 69 65 00 00       	callq  2122b0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc024dbab028df719E>
  20bd47:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bd4c:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20bd51:	e8 ca 22 02 00       	callq  22e020 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1d35398e75f8f15cE>
  20bd56:	48 8b 04 24          	mov    (%rsp),%rax
  20bd5a:	48 83 c4 38          	add    $0x38,%rsp
  20bd5e:	c3                   	retq   
  20bd5f:	cc                   	int3   

000000000020bd60 <_ZN4core3ops8function6FnOnce9call_once17h5dfa833bf631dad7E>:
  20bd60:	48 83 ec 48          	sub    $0x48,%rsp
  20bd64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bd69:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        return Err(StackAllocatorError::InvalidAddress);
    }
}

lazy_static! {
    pub static ref STACK_ALLOCATOR: Mutex<StackAllocator> = Mutex::new(StackAllocator::new());
  20bd6e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20bd73:	e8 48 54 01 00       	callq  2211c0 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E>
  20bd78:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bd7d:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20bd82:	e8 d9 25 02 00       	callq  22e360 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h697fd96977702439E>
  20bd87:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bd8c:	48 83 c4 48          	add    $0x48,%rsp
  20bd90:	c3                   	retq   
  20bd91:	cc                   	int3   
  20bd92:	cc                   	int3   
  20bd93:	cc                   	int3   
  20bd94:	cc                   	int3   
  20bd95:	cc                   	int3   
  20bd96:	cc                   	int3   
  20bd97:	cc                   	int3   
  20bd98:	cc                   	int3   
  20bd99:	cc                   	int3   
  20bd9a:	cc                   	int3   
  20bd9b:	cc                   	int3   
  20bd9c:	cc                   	int3   
  20bd9d:	cc                   	int3   
  20bd9e:	cc                   	int3   
  20bd9f:	cc                   	int3   

000000000020bda0 <_ZN4core3ops8function6FnOnce9call_once17h764d520568e619d0E>:
  20bda0:	48 83 ec 28          	sub    $0x28,%rsp
  20bda4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bda9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20bdae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bdb3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20bdb8:	e8 b3 d1 01 00       	callq  228f70 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E>
  20bdbd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20bdc1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20bdc5:	48 83 c4 28          	add    $0x28,%rsp
  20bdc9:	c3                   	retq   
  20bdca:	cc                   	int3   
  20bdcb:	cc                   	int3   
  20bdcc:	cc                   	int3   
  20bdcd:	cc                   	int3   
  20bdce:	cc                   	int3   
  20bdcf:	cc                   	int3   

000000000020bdd0 <_ZN4core3ops8function6FnOnce9call_once17h818c130c4421a1d0E>:
  20bdd0:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
  20bdd7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bddc:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        None
    }
}

lazy_static! {
    pub static ref ACPI: Mutex<Option<Acpi>> = Mutex::new(init_acpi());
  20bde1:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20bde6:	e8 45 79 00 00       	callq  213730 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E>
  20bdeb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bdf0:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20bdf5:	e8 e6 22 02 00       	callq  22e0e0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3237b67d888c05a7E>
  20bdfa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bdff:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
  20be06:	c3                   	retq   
  20be07:	cc                   	int3   
  20be08:	cc                   	int3   
  20be09:	cc                   	int3   
  20be0a:	cc                   	int3   
  20be0b:	cc                   	int3   
  20be0c:	cc                   	int3   
  20be0d:	cc                   	int3   
  20be0e:	cc                   	int3   
  20be0f:	cc                   	int3   

000000000020be10 <_ZN4core3ops8function6FnOnce9call_once17h904af9fc8ad763bdE>:
  20be10:	48 83 ec 18          	sub    $0x18,%rsp
  20be14:	48 89 f8             	mov    %rdi,%rax
  20be17:	48 89 04 24          	mov    %rax,(%rsp)

    Some(Mutex::new(fb_opt.unwrap()))
}

lazy_static! {
    pub static ref FRAMEBUFFER: Option<LockedFramebuffer> = init_framebuffer();
  20be1b:	e8 50 ab 00 00       	callq  216970 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE>
  20be20:	48 8b 04 24          	mov    (%rsp),%rax
  20be24:	48 83 c4 18          	add    $0x18,%rsp
  20be28:	c3                   	retq   
  20be29:	cc                   	int3   
  20be2a:	cc                   	int3   
  20be2b:	cc                   	int3   
  20be2c:	cc                   	int3   
  20be2d:	cc                   	int3   
  20be2e:	cc                   	int3   
  20be2f:	cc                   	int3   

000000000020be30 <_ZN4core3ops8function6FnOnce9call_once17h9b71252915a475a7E>:
  20be30:	48 83 ec 18          	sub    $0x18,%rsp
  20be34:	48 89 f8             	mov    %rdi,%rax
  20be37:	48 89 04 24          	mov    %rax,(%rsp)
    let pit = PITCommandControl::new();
    pit
}

lazy_static! {
    pub static ref PIT: PITCommandControl = init();
  20be3b:	e8 d0 30 02 00       	callq  22ef10 <_ZN9r3_kernel3cpu3pit4init17hf03d8e373d7c27d5E>
  20be40:	48 8b 04 24          	mov    (%rsp),%rax
  20be44:	48 83 c4 18          	add    $0x18,%rsp
  20be48:	c3                   	retq   
  20be49:	cc                   	int3   
  20be4a:	cc                   	int3   
  20be4b:	cc                   	int3   
  20be4c:	cc                   	int3   
  20be4d:	cc                   	int3   
  20be4e:	cc                   	int3   
  20be4f:	cc                   	int3   

000000000020be50 <_ZN4core3ops8function6FnOnce9call_once17ha33d620dcb6c3e32E>:
  20be50:	48 83 ec 58          	sub    $0x58,%rsp
        max_standard_level,
    }
}

lazy_static! {
    static ref CPU_FEATURES: CPUFeatures = probe_cpu_features();
  20be54:	e8 f7 5c 01 00       	callq  221b50 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE>
  20be59:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20be5e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20be63:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20be68:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  20be6d:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20be72:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
                fn __static_ref_initialize() -> $T { $e }
  20be77:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20be7c:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20be81:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20be86:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20be8b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20be90:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20be95:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20be9a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20be9f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20bea4:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20bea9:	48 83 c4 58          	add    $0x58,%rsp
  20bead:	c3                   	retq   
  20beae:	cc                   	int3   
  20beaf:	cc                   	int3   

000000000020beb0 <_ZN4core3ops8function6FnOnce9call_once17hc0401856d345fdcbE>:
  20beb0:	48 83 ec 28          	sub    $0x28,%rsp
  20beb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20beb9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        self.boot_info = Some(b_proto);
    }
}

lazy_static! {
    pub static ref BOOT_INFO: Mutex<BootProtoContainer> = Mutex::new(BootProtoContainer::empty());
  20bebe:	e8 fd d9 00 00       	callq  2198c0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h18c47f5fed896c76E>
  20bec3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bec8:	48 89 c6             	mov    %rax,%rsi
  20becb:	e8 80 25 02 00       	callq  22e450 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h7b64888ecb399409E>
  20bed0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bed5:	48 83 c4 28          	add    $0x28,%rsp
  20bed9:	c3                   	retq   
  20beda:	cc                   	int3   
  20bedb:	cc                   	int3   
  20bedc:	cc                   	int3   
  20bedd:	cc                   	int3   
  20bede:	cc                   	int3   
  20bedf:	cc                   	int3   

000000000020bee0 <_ZN4core3ops8function6FnOnce9call_once17hc979a394b9036ee6E>:
  20bee0:	48 81 ec 28 08 00 00 	sub    $0x828,%rsp
  20bee7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20beec:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
}

lazy_static! {
    pub static ref LINEAR_ALLOCATOR: Mutex<LinearFrameAllocator> =
        Mutex::new(LinearFrameAllocator::init());
  20bef0:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bef5:	e8 36 c6 00 00       	callq  218530 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E>
  20befa:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20beff:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20bf04:	e8 77 28 02 00       	callq  22e780 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hd79f873b25981983E>
  20bf09:	48 8b 04 24          	mov    (%rsp),%rax
  20bf0d:	48 81 c4 28 08 00 00 	add    $0x828,%rsp
  20bf14:	c3                   	retq   
  20bf15:	cc                   	int3   
  20bf16:	cc                   	int3   
  20bf17:	cc                   	int3   
  20bf18:	cc                   	int3   
  20bf19:	cc                   	int3   
  20bf1a:	cc                   	int3   
  20bf1b:	cc                   	int3   
  20bf1c:	cc                   	int3   
  20bf1d:	cc                   	int3   
  20bf1e:	cc                   	int3   
  20bf1f:	cc                   	int3   

000000000020bf20 <_ZN4core3ops8function6FnOnce9call_once17hd8203fd94ba4d5e4E>:
  20bf20:	48 83 ec 18          	sub    $0x18,%rsp
  20bf24:	48 89 f8             	mov    %rdi,%rax
  20bf27:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
  20bf2b:	e8 f0 0e 01 00       	callq  21ce20 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E>
  20bf30:	48 8b 04 24          	mov    (%rsp),%rax
  20bf34:	48 83 c4 18          	add    $0x18,%rsp
  20bf38:	c3                   	retq   
  20bf39:	cc                   	int3   
  20bf3a:	cc                   	int3   
  20bf3b:	cc                   	int3   
  20bf3c:	cc                   	int3   
  20bf3d:	cc                   	int3   
  20bf3e:	cc                   	int3   
  20bf3f:	cc                   	int3   

000000000020bf40 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h12077539360bc3b9E>:
/// assert!(weak.upgrade().is_none());
/// ```
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  20bf40:	50                   	push   %rax
  20bf41:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf45:	48 83 c7 08          	add    $0x8,%rdi
  20bf49:	e8 32 00 00 00       	callq  20bf80 <_ZN4core3ptr108drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h0909451fada9f1cfE>
  20bf4e:	58                   	pop    %rax
  20bf4f:	c3                   	retq   

000000000020bf50 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h2928cdecfeff22d4E>:
  20bf50:	50                   	push   %rax
  20bf51:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf55:	e8 46 04 00 00       	callq  20c3a0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h08c6da264312282cE>
  20bf5a:	58                   	pop    %rax
  20bf5b:	c3                   	retq   
  20bf5c:	cc                   	int3   
  20bf5d:	cc                   	int3   
  20bf5e:	cc                   	int3   
  20bf5f:	cc                   	int3   

000000000020bf60 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>:
  20bf60:	50                   	push   %rax
  20bf61:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf65:	e8 86 05 00 00       	callq  20c4f0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h756125f32cd8645dE>
  20bf6a:	58                   	pop    %rax
  20bf6b:	c3                   	retq   
  20bf6c:	cc                   	int3   
  20bf6d:	cc                   	int3   
  20bf6e:	cc                   	int3   
  20bf6f:	cc                   	int3   

000000000020bf70 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$$GT$17h46c9f61d2c18a255E>:
  20bf70:	50                   	push   %rax
  20bf71:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf75:	e8 16 05 00 00       	callq  20c490 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d20b1d630f88b51E>
  20bf7a:	58                   	pop    %rax
  20bf7b:	c3                   	retq   
  20bf7c:	cc                   	int3   
  20bf7d:	cc                   	int3   
  20bf7e:	cc                   	int3   
  20bf7f:	cc                   	int3   

000000000020bf80 <_ZN4core3ptr108drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h0909451fada9f1cfE>:
  20bf80:	50                   	push   %rax
  20bf81:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf85:	e8 46 02 00 00       	callq  20c1d0 <_ZN4core3ptr78drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17h216fad7122761ab4E>
  20bf8a:	58                   	pop    %rax
  20bf8b:	c3                   	retq   
  20bf8c:	cc                   	int3   
  20bf8d:	cc                   	int3   
  20bf8e:	cc                   	int3   
  20bf8f:	cc                   	int3   

000000000020bf90 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE>:
  20bf90:	48 83 ec 18          	sub    $0x18,%rsp
  20bf94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bf99:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bf9e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20bfa2:	75 05                	jne    20bfa9 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE+0x19>
  20bfa4:	48 83 c4 18          	add    $0x18,%rsp
  20bfa8:	c3                   	retq   
  20bfa9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bfae:	48 83 c7 08          	add    $0x8,%rdi
  20bfb2:	e8 49 02 00 00       	callq  20c200 <_ZN4core3ptr80drop_in_place$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17he0385d7b1a1e9266E>
  20bfb7:	eb eb                	jmp    20bfa4 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE+0x14>
  20bfb9:	cc                   	int3   
  20bfba:	cc                   	int3   
  20bfbb:	cc                   	int3   
  20bfbc:	cc                   	int3   
  20bfbd:	cc                   	int3   
  20bfbe:	cc                   	int3   
  20bfbf:	cc                   	int3   

000000000020bfc0 <_ZN4core3ptr109drop_in_place$LT$spin..mutex..MutexGuard$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h8235977f861fb9cdE>:
  20bfc0:	50                   	push   %rax
  20bfc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bfc5:	e8 16 06 00 00       	callq  20c5e0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfd8a5de3b3c2f6f2E>
  20bfca:	58                   	pop    %rax
  20bfcb:	c3                   	retq   
  20bfcc:	cc                   	int3   
  20bfcd:	cc                   	int3   
  20bfce:	cc                   	int3   
  20bfcf:	cc                   	int3   

000000000020bfd0 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>:
  20bfd0:	50                   	push   %rax
  20bfd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bfd5:	e8 86 04 00 00       	callq  20c460 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5adf5324be6f8979E>
  20bfda:	58                   	pop    %rax
  20bfdb:	c3                   	retq   
  20bfdc:	cc                   	int3   
  20bfdd:	cc                   	int3   
  20bfde:	cc                   	int3   
  20bfdf:	cc                   	int3   

000000000020bfe0 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E>:
  20bfe0:	48 83 ec 18          	sub    $0x18,%rsp
  20bfe4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bfe9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bfee:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20bff2:	75 05                	jne    20bff9 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E+0x19>
  20bff4:	48 83 c4 18          	add    $0x18,%rsp
  20bff8:	c3                   	retq   
  20bff9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bffe:	48 83 c7 08          	add    $0x8,%rdi
  20c002:	e8 39 ff ff ff       	callq  20bf40 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h12077539360bc3b9E>
  20c007:	eb eb                	jmp    20bff4 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E+0x14>
  20c009:	cc                   	int3   
  20c00a:	cc                   	int3   
  20c00b:	cc                   	int3   
  20c00c:	cc                   	int3   
  20c00d:	cc                   	int3   
  20c00e:	cc                   	int3   
  20c00f:	cc                   	int3   

000000000020c010 <_ZN4core3ptr24drop_in_place$LT$u64$GT$17hacdc4778a9e1453eE>:
  20c010:	50                   	push   %rax
  20c011:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c015:	58                   	pop    %rax
  20c016:	c3                   	retq   
  20c017:	cc                   	int3   
  20c018:	cc                   	int3   
  20c019:	cc                   	int3   
  20c01a:	cc                   	int3   
  20c01b:	cc                   	int3   
  20c01c:	cc                   	int3   
  20c01d:	cc                   	int3   
  20c01e:	cc                   	int3   
  20c01f:	cc                   	int3   

000000000020c020 <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17h109654ab3046a581E>:
  20c020:	50                   	push   %rax
  20c021:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c025:	58                   	pop    %rax
  20c026:	c3                   	retq   
  20c027:	cc                   	int3   
  20c028:	cc                   	int3   
  20c029:	cc                   	int3   
  20c02a:	cc                   	int3   
  20c02b:	cc                   	int3   
  20c02c:	cc                   	int3   
  20c02d:	cc                   	int3   
  20c02e:	cc                   	int3   
  20c02f:	cc                   	int3   

000000000020c030 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17ha56bfcebe0ce7549E>:
  20c030:	50                   	push   %rax
  20c031:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c035:	58                   	pop    %rax
  20c036:	c3                   	retq   
  20c037:	cc                   	int3   
  20c038:	cc                   	int3   
  20c039:	cc                   	int3   
  20c03a:	cc                   	int3   
  20c03b:	cc                   	int3   
  20c03c:	cc                   	int3   
  20c03d:	cc                   	int3   
  20c03e:	cc                   	int3   
  20c03f:	cc                   	int3   

000000000020c040 <_ZN4core3ptr28drop_in_place$LT$$RF$u16$GT$17h950920499e87b73aE>:
  20c040:	50                   	push   %rax
  20c041:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c045:	58                   	pop    %rax
  20c046:	c3                   	retq   
  20c047:	cc                   	int3   
  20c048:	cc                   	int3   
  20c049:	cc                   	int3   
  20c04a:	cc                   	int3   
  20c04b:	cc                   	int3   
  20c04c:	cc                   	int3   
  20c04d:	cc                   	int3   
  20c04e:	cc                   	int3   
  20c04f:	cc                   	int3   

000000000020c050 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17hb731a3b520d8f0dbE>:
  20c050:	50                   	push   %rax
  20c051:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c055:	58                   	pop    %rax
  20c056:	c3                   	retq   
  20c057:	cc                   	int3   
  20c058:	cc                   	int3   
  20c059:	cc                   	int3   
  20c05a:	cc                   	int3   
  20c05b:	cc                   	int3   
  20c05c:	cc                   	int3   
  20c05d:	cc                   	int3   
  20c05e:	cc                   	int3   
  20c05f:	cc                   	int3   

000000000020c060 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h97dba134a3a50395E>:
  20c060:	50                   	push   %rax
  20c061:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c065:	58                   	pop    %rax
  20c066:	c3                   	retq   
  20c067:	cc                   	int3   
  20c068:	cc                   	int3   
  20c069:	cc                   	int3   
  20c06a:	cc                   	int3   
  20c06b:	cc                   	int3   
  20c06c:	cc                   	int3   
  20c06d:	cc                   	int3   
  20c06e:	cc                   	int3   
  20c06f:	cc                   	int3   

000000000020c070 <_ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17hfbe49c2abb5d14daE>:
  20c070:	50                   	push   %rax
  20c071:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c075:	58                   	pop    %rax
  20c076:	c3                   	retq   
  20c077:	cc                   	int3   
  20c078:	cc                   	int3   
  20c079:	cc                   	int3   
  20c07a:	cc                   	int3   
  20c07b:	cc                   	int3   
  20c07c:	cc                   	int3   
  20c07d:	cc                   	int3   
  20c07e:	cc                   	int3   
  20c07f:	cc                   	int3   

000000000020c080 <_ZN4core3ptr29drop_in_place$LT$$RF$bool$GT$17h94a6c33174cb40b8E>:
  20c080:	50                   	push   %rax
  20c081:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c085:	58                   	pop    %rax
  20c086:	c3                   	retq   
  20c087:	cc                   	int3   
  20c088:	cc                   	int3   
  20c089:	cc                   	int3   
  20c08a:	cc                   	int3   
  20c08b:	cc                   	int3   
  20c08c:	cc                   	int3   
  20c08d:	cc                   	int3   
  20c08e:	cc                   	int3   
  20c08f:	cc                   	int3   

000000000020c090 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4a227c68c5b45683E>:
  20c090:	50                   	push   %rax
  20c091:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c095:	58                   	pop    %rax
  20c096:	c3                   	retq   
  20c097:	cc                   	int3   
  20c098:	cc                   	int3   
  20c099:	cc                   	int3   
  20c09a:	cc                   	int3   
  20c09b:	cc                   	int3   
  20c09c:	cc                   	int3   
  20c09d:	cc                   	int3   
  20c09e:	cc                   	int3   
  20c09f:	cc                   	int3   

000000000020c0a0 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hfa77002b7bdeb0afE>:
  20c0a0:	50                   	push   %rax
  20c0a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c0a5:	58                   	pop    %rax
  20c0a6:	c3                   	retq   
  20c0a7:	cc                   	int3   
  20c0a8:	cc                   	int3   
  20c0a9:	cc                   	int3   
  20c0aa:	cc                   	int3   
  20c0ab:	cc                   	int3   
  20c0ac:	cc                   	int3   
  20c0ad:	cc                   	int3   
  20c0ae:	cc                   	int3   
  20c0af:	cc                   	int3   

000000000020c0b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>:
  20c0b0:	50                   	push   %rax
  20c0b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c0b5:	e8 d6 64 02 00       	callq  232590 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>
  20c0ba:	58                   	pop    %rax
  20c0bb:	c3                   	retq   
  20c0bc:	cc                   	int3   
  20c0bd:	cc                   	int3   
  20c0be:	cc                   	int3   
  20c0bf:	cc                   	int3   

000000000020c0c0 <_ZN4core3ptr47drop_in_place$LT$alloc..vec..Vec$LT$u64$GT$$GT$17h366995e978bb6b5fE>:
  20c0c0:	48 83 ec 18          	sub    $0x18,%rsp
  20c0c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20c0c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c0ce:	e8 3d 02 00 00       	callq  20c310 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E>
  20c0d3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c0d8:	e8 43 00 00 00       	callq  20c120 <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u64$GT$$GT$17hab641697e021095cE>
  20c0dd:	48 83 c4 18          	add    $0x18,%rsp
  20c0e1:	c3                   	retq   
  20c0e2:	cc                   	int3   
  20c0e3:	cc                   	int3   
  20c0e4:	cc                   	int3   
  20c0e5:	cc                   	int3   
  20c0e6:	cc                   	int3   
  20c0e7:	cc                   	int3   
  20c0e8:	cc                   	int3   
  20c0e9:	cc                   	int3   
  20c0ea:	cc                   	int3   
  20c0eb:	cc                   	int3   
  20c0ec:	cc                   	int3   
  20c0ed:	cc                   	int3   
  20c0ee:	cc                   	int3   
  20c0ef:	cc                   	int3   

000000000020c0f0 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..acpi..madt..MADTError$GT$17hbabe6cec272370d1E>:
  20c0f0:	50                   	push   %rax
  20c0f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c0f5:	58                   	pop    %rax
  20c0f6:	c3                   	retq   
  20c0f7:	cc                   	int3   
  20c0f8:	cc                   	int3   
  20c0f9:	cc                   	int3   
  20c0fa:	cc                   	int3   
  20c0fb:	cc                   	int3   
  20c0fc:	cc                   	int3   
  20c0fd:	cc                   	int3   
  20c0fe:	cc                   	int3   
  20c0ff:	cc                   	int3   

000000000020c100 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..logging..KernelLogger$GT$17h7b3f54a96c00704eE>:
  20c100:	50                   	push   %rax
  20c101:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c105:	58                   	pop    %rax
  20c106:	c3                   	retq   
  20c107:	cc                   	int3   
  20c108:	cc                   	int3   
  20c109:	cc                   	int3   
  20c10a:	cc                   	int3   
  20c10b:	cc                   	int3   
  20c10c:	cc                   	int3   
  20c10d:	cc                   	int3   
  20c10e:	cc                   	int3   
  20c10f:	cc                   	int3   

000000000020c110 <_ZN4core3ptr54drop_in_place$LT$$RF$r3_kernel..mm..VirtualAddress$GT$17h17ae9654d06dc752E>:
  20c110:	50                   	push   %rax
  20c111:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c115:	58                   	pop    %rax
  20c116:	c3                   	retq   
  20c117:	cc                   	int3   
  20c118:	cc                   	int3   
  20c119:	cc                   	int3   
  20c11a:	cc                   	int3   
  20c11b:	cc                   	int3   
  20c11c:	cc                   	int3   
  20c11d:	cc                   	int3   
  20c11e:	cc                   	int3   
  20c11f:	cc                   	int3   

000000000020c120 <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u64$GT$$GT$17hab641697e021095cE>:
  20c120:	50                   	push   %rax
  20c121:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c125:	e8 56 05 00 00       	callq  20c680 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE>
  20c12a:	58                   	pop    %rax
  20c12b:	c3                   	retq   
  20c12c:	cc                   	int3   
  20c12d:	cc                   	int3   
  20c12e:	cc                   	int3   
  20c12f:	cc                   	int3   

000000000020c130 <_ZN4core3ptr54drop_in_place$LT$r3_kernel..acpi..madt..Processors$GT$17h9494aa1cdddb7d39E>:
  20c130:	50                   	push   %rax
  20c131:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c135:	e8 f6 00 00 00       	callq  20c230 <_ZN4core3ptr84drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hb9a1b0e74e8717b4E>
  20c13a:	58                   	pop    %rax
  20c13b:	c3                   	retq   
  20c13c:	cc                   	int3   
  20c13d:	cc                   	int3   
  20c13e:	cc                   	int3   
  20c13f:	cc                   	int3   

000000000020c140 <_ZN4core3ptr56drop_in_place$LT$$RF$r3_kernel..mm..paging..PageSize$GT$17h46036be801aa4055E>:
  20c140:	50                   	push   %rax
  20c141:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c145:	58                   	pop    %rax
  20c146:	c3                   	retq   
  20c147:	cc                   	int3   
  20c148:	cc                   	int3   
  20c149:	cc                   	int3   
  20c14a:	cc                   	int3   
  20c14b:	cc                   	int3   
  20c14c:	cc                   	int3   
  20c14d:	cc                   	int3   
  20c14e:	cc                   	int3   
  20c14f:	cc                   	int3   

000000000020c150 <_ZN4core3ptr57drop_in_place$LT$$RF$r3_kernel..mm..paging..PageRange$GT$17h1f5c059d298fae03E>:
  20c150:	50                   	push   %rax
  20c151:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c155:	58                   	pop    %rax
  20c156:	c3                   	retq   
  20c157:	cc                   	int3   
  20c158:	cc                   	int3   
  20c159:	cc                   	int3   
  20c15a:	cc                   	int3   
  20c15b:	cc                   	int3   
  20c15c:	cc                   	int3   
  20c15d:	cc                   	int3   
  20c15e:	cc                   	int3   
  20c15f:	cc                   	int3   

000000000020c160 <_ZN4core3ptr61drop_in_place$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$GT$17hfc98157e614409bfE>:
  20c160:	50                   	push   %rax
  20c161:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c165:	58                   	pop    %rax
  20c166:	c3                   	retq   
  20c167:	cc                   	int3   
  20c168:	cc                   	int3   
  20c169:	cc                   	int3   
  20c16a:	cc                   	int3   
  20c16b:	cc                   	int3   
  20c16c:	cc                   	int3   
  20c16d:	cc                   	int3   
  20c16e:	cc                   	int3   
  20c16f:	cc                   	int3   

000000000020c170 <_ZN4core3ptr61drop_in_place$LT$r3_kernel..mm..paging..PageRangeIterator$GT$17h811d1757875a6025E>:
  20c170:	50                   	push   %rax
  20c171:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c175:	58                   	pop    %rax
  20c176:	c3                   	retq   
  20c177:	cc                   	int3   
  20c178:	cc                   	int3   
  20c179:	cc                   	int3   
  20c17a:	cc                   	int3   
  20c17b:	cc                   	int3   
  20c17c:	cc                   	int3   
  20c17d:	cc                   	int3   
  20c17e:	cc                   	int3   
  20c17f:	cc                   	int3   

000000000020c180 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$GT$17he2257fd5e183e821E>:
  20c180:	50                   	push   %rax
  20c181:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c185:	58                   	pop    %rax
  20c186:	c3                   	retq   
  20c187:	cc                   	int3   
  20c188:	cc                   	int3   
  20c189:	cc                   	int3   
  20c18a:	cc                   	int3   
  20c18b:	cc                   	int3   
  20c18c:	cc                   	int3   
  20c18d:	cc                   	int3   
  20c18e:	cc                   	int3   
  20c18f:	cc                   	int3   

000000000020c190 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..cpu..segments..SegmentSelector$GT$17h1f9fea70a88ab9f9E>:
  20c190:	50                   	push   %rax
  20c191:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c195:	58                   	pop    %rax
  20c196:	c3                   	retq   
  20c197:	cc                   	int3   
  20c198:	cc                   	int3   
  20c199:	cc                   	int3   
  20c19a:	cc                   	int3   
  20c19b:	cc                   	int3   
  20c19c:	cc                   	int3   
  20c19d:	cc                   	int3   
  20c19e:	cc                   	int3   
  20c19f:	cc                   	int3   

000000000020c1a0 <_ZN4core3ptr63drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..uart..UART$GT$17h75b93f733fea1da2E>:
  20c1a0:	50                   	push   %rax
  20c1a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c1a5:	58                   	pop    %rax
  20c1a6:	c3                   	retq   
  20c1a7:	cc                   	int3   
  20c1a8:	cc                   	int3   
  20c1a9:	cc                   	int3   
  20c1aa:	cc                   	int3   
  20c1ab:	cc                   	int3   
  20c1ac:	cc                   	int3   
  20c1ad:	cc                   	int3   
  20c1ae:	cc                   	int3   
  20c1af:	cc                   	int3   

000000000020c1b0 <_ZN4core3ptr65drop_in_place$LT$$RF$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$17h5cc250ff6beb8c54E>:
  20c1b0:	50                   	push   %rax
  20c1b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c1b5:	58                   	pop    %rax
  20c1b6:	c3                   	retq   
  20c1b7:	cc                   	int3   
  20c1b8:	cc                   	int3   
  20c1b9:	cc                   	int3   
  20c1ba:	cc                   	int3   
  20c1bb:	cc                   	int3   
  20c1bc:	cc                   	int3   
  20c1bd:	cc                   	int3   
  20c1be:	cc                   	int3   
  20c1bf:	cc                   	int3   

000000000020c1c0 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>:
  20c1c0:	50                   	push   %rax
  20c1c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c1c5:	e8 06 02 00 00       	callq  20c3d0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238699b63bfd6d36E>
  20c1ca:	58                   	pop    %rax
  20c1cb:	c3                   	retq   
  20c1cc:	cc                   	int3   
  20c1cd:	cc                   	int3   
  20c1ce:	cc                   	int3   
  20c1cf:	cc                   	int3   

000000000020c1d0 <_ZN4core3ptr78drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17h216fad7122761ab4E>:
  20c1d0:	48 83 ec 18          	sub    $0x18,%rsp
  20c1d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20c1d9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c1de:	e8 5d 01 00 00       	callq  20c340 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E>
  20c1e3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c1e8:	e8 83 00 00 00       	callq  20c270 <_ZN4core3ptr85drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17he886184af3ec47c2E>
  20c1ed:	48 83 c4 18          	add    $0x18,%rsp
  20c1f1:	c3                   	retq   
  20c1f2:	cc                   	int3   
  20c1f3:	cc                   	int3   
  20c1f4:	cc                   	int3   
  20c1f5:	cc                   	int3   
  20c1f6:	cc                   	int3   
  20c1f7:	cc                   	int3   
  20c1f8:	cc                   	int3   
  20c1f9:	cc                   	int3   
  20c1fa:	cc                   	int3   
  20c1fb:	cc                   	int3   
  20c1fc:	cc                   	int3   
  20c1fd:	cc                   	int3   
  20c1fe:	cc                   	int3   
  20c1ff:	cc                   	int3   

000000000020c200 <_ZN4core3ptr80drop_in_place$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17he0385d7b1a1e9266E>:
  20c200:	50                   	push   %rax
  20c201:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c205:	48 83 c7 08          	add    $0x8,%rdi
  20c209:	e8 52 00 00 00       	callq  20c260 <_ZN4core3ptr84drop_in_place$LT$core..cell..UnsafeCell$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17h2a43fe36e5d999bbE>
  20c20e:	58                   	pop    %rax
  20c20f:	c3                   	retq   

000000000020c210 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17ha1bb7375bd21c262E>:
  20c210:	50                   	push   %rax
  20c211:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c215:	e8 e6 01 00 00       	callq  20c400 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33502fe759f98579E>
  20c21a:	58                   	pop    %rax
  20c21b:	c3                   	retq   
  20c21c:	cc                   	int3   
  20c21d:	cc                   	int3   
  20c21e:	cc                   	int3   
  20c21f:	cc                   	int3   

000000000020c220 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>:
  20c220:	50                   	push   %rax
  20c221:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c225:	e8 56 03 00 00       	callq  20c580 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hdc9394d9dc611043E>
  20c22a:	58                   	pop    %rax
  20c22b:	c3                   	retq   
  20c22c:	cc                   	int3   
  20c22d:	cc                   	int3   
  20c22e:	cc                   	int3   
  20c22f:	cc                   	int3   

000000000020c230 <_ZN4core3ptr84drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hb9a1b0e74e8717b4E>:
  20c230:	48 83 ec 18          	sub    $0x18,%rsp
  20c234:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20c239:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c23e:	e8 2d 01 00 00       	callq  20c370 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E>
  20c243:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c248:	e8 83 00 00 00       	callq  20c2d0 <_ZN4core3ptr91drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17h60395535fe151d29E>
  20c24d:	48 83 c4 18          	add    $0x18,%rsp
  20c251:	c3                   	retq   
  20c252:	cc                   	int3   
  20c253:	cc                   	int3   
  20c254:	cc                   	int3   
  20c255:	cc                   	int3   
  20c256:	cc                   	int3   
  20c257:	cc                   	int3   
  20c258:	cc                   	int3   
  20c259:	cc                   	int3   
  20c25a:	cc                   	int3   
  20c25b:	cc                   	int3   
  20c25c:	cc                   	int3   
  20c25d:	cc                   	int3   
  20c25e:	cc                   	int3   
  20c25f:	cc                   	int3   

000000000020c260 <_ZN4core3ptr84drop_in_place$LT$core..cell..UnsafeCell$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17h2a43fe36e5d999bbE>:
  20c260:	50                   	push   %rax
  20c261:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c265:	e8 c6 fe ff ff       	callq  20c130 <_ZN4core3ptr54drop_in_place$LT$r3_kernel..acpi..madt..Processors$GT$17h9494aa1cdddb7d39E>
  20c26a:	58                   	pop    %rax
  20c26b:	c3                   	retq   
  20c26c:	cc                   	int3   
  20c26d:	cc                   	int3   
  20c26e:	cc                   	int3   
  20c26f:	cc                   	int3   

000000000020c270 <_ZN4core3ptr85drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17he886184af3ec47c2E>:
  20c270:	50                   	push   %rax
  20c271:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c275:	e8 76 04 00 00       	callq  20c6f0 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E>
  20c27a:	58                   	pop    %rax
  20c27b:	c3                   	retq   
  20c27c:	cc                   	int3   
  20c27d:	cc                   	int3   
  20c27e:	cc                   	int3   
  20c27f:	cc                   	int3   

000000000020c280 <_ZN4core3ptr85drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17ha6c6c78d0d7b5940E>:
  20c280:	50                   	push   %rax
  20c281:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c285:	e8 a6 01 00 00       	callq  20c430 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3bc9d3885aad2c98E>
  20c28a:	58                   	pop    %rax
  20c28b:	c3                   	retq   
  20c28c:	cc                   	int3   
  20c28d:	cc                   	int3   
  20c28e:	cc                   	int3   
  20c28f:	cc                   	int3   

000000000020c290 <_ZN4core3ptr88drop_in_place$LT$$RF$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hc101a363ddd88117E>:
  20c290:	50                   	push   %rax
  20c291:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c295:	58                   	pop    %rax
  20c296:	c3                   	retq   
  20c297:	cc                   	int3   
  20c298:	cc                   	int3   
  20c299:	cc                   	int3   
  20c29a:	cc                   	int3   
  20c29b:	cc                   	int3   
  20c29c:	cc                   	int3   
  20c29d:	cc                   	int3   
  20c29e:	cc                   	int3   
  20c29f:	cc                   	int3   

000000000020c2a0 <_ZN4core3ptr88drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$17h84ecd27d0b038aa5E>:
  20c2a0:	50                   	push   %rax
  20c2a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2a5:	58                   	pop    %rax
  20c2a6:	c3                   	retq   
  20c2a7:	cc                   	int3   
  20c2a8:	cc                   	int3   
  20c2a9:	cc                   	int3   
  20c2aa:	cc                   	int3   
  20c2ab:	cc                   	int3   
  20c2ac:	cc                   	int3   
  20c2ad:	cc                   	int3   
  20c2ae:	cc                   	int3   
  20c2af:	cc                   	int3   

000000000020c2b0 <_ZN4core3ptr88drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..stack..StackAllocator$GT$$GT$17hdacda5b08df944d6E>:
  20c2b0:	50                   	push   %rax
  20c2b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2b5:	e8 96 02 00 00       	callq  20c550 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd05b545d577a728cE>
  20c2ba:	58                   	pop    %rax
  20c2bb:	c3                   	retq   
  20c2bc:	cc                   	int3   
  20c2bd:	cc                   	int3   
  20c2be:	cc                   	int3   
  20c2bf:	cc                   	int3   

000000000020c2c0 <_ZN4core3ptr90drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..system..timer..SystemTicker$GT$$GT$17h976a9ee0ef554056E>:
  20c2c0:	50                   	push   %rax
  20c2c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2c5:	e8 f6 01 00 00       	callq  20c4c0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d44f2c7accd1ce0E>
  20c2ca:	58                   	pop    %rax
  20c2cb:	c3                   	retq   
  20c2cc:	cc                   	int3   
  20c2cd:	cc                   	int3   
  20c2ce:	cc                   	int3   
  20c2cf:	cc                   	int3   

000000000020c2d0 <_ZN4core3ptr91drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17h60395535fe151d29E>:
  20c2d0:	50                   	push   %rax
  20c2d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2d5:	e8 36 03 00 00       	callq  20c610 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE>
  20c2da:	58                   	pop    %rax
  20c2db:	c3                   	retq   
  20c2dc:	cc                   	int3   
  20c2dd:	cc                   	int3   
  20c2de:	cc                   	int3   
  20c2df:	cc                   	int3   

000000000020c2e0 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>:
  20c2e0:	50                   	push   %rax
  20c2e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2e5:	e8 36 02 00 00       	callq  20c520 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9812ecd4aea0404dE>
  20c2ea:	58                   	pop    %rax
  20c2eb:	c3                   	retq   
  20c2ec:	cc                   	int3   
  20c2ed:	cc                   	int3   
  20c2ee:	cc                   	int3   
  20c2ef:	cc                   	int3   

000000000020c2f0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>:
  20c2f0:	50                   	push   %rax
  20c2f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c2f5:	e8 b6 02 00 00       	callq  20c5b0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf64dd5ac2c6d25faE>
  20c2fa:	58                   	pop    %rax
  20c2fb:	c3                   	retq   
  20c2fc:	cc                   	int3   
  20c2fd:	cc                   	int3   
  20c2fe:	cc                   	int3   
  20c2ff:	cc                   	int3   

000000000020c300 <_ZN4core5clone5Clone5clone17h3340d57e31d9f28aE>:
    ///
    /// assert_eq!("Hello", hello.clone());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use = "cloning is often expensive and is not expected to have side effects"]
    fn clone(&self) -> Self;
  20c300:	50                   	push   %rax
  20c301:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c305:	58                   	pop    %rax
  20c306:	c3                   	retq   
  20c307:	cc                   	int3   
  20c308:	cc                   	int3   
  20c309:	cc                   	int3   
  20c30a:	cc                   	int3   
  20c30b:	cc                   	int3   
  20c30c:	cc                   	int3   
  20c30d:	cc                   	int3   
  20c30e:	cc                   	int3   
  20c30f:	cc                   	int3   

000000000020c310 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
  20c310:	48 83 ec 18          	sub    $0x18,%rsp
  20c314:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c318:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20c31d:	e8 4e 60 00 00       	callq  212370 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>
  20c322:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c327:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c32c:	48 8b 04 24          	mov    (%rsp),%rax
  20c330:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20c334:	e8 77 56 01 00       	callq  2219b0 <_ZN4core3ptr24slice_from_raw_parts_mut17hc788c569ab4f87efE>
  20c339:	eb 00                	jmp    20c33b <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E+0x2b>
        }
        // RawVec handles deallocation
    }
  20c33b:	48 83 c4 18          	add    $0x18,%rsp
  20c33f:	c3                   	retq   

000000000020c340 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E>:
    fn drop(&mut self) {
  20c340:	48 83 ec 18          	sub    $0x18,%rsp
  20c344:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c348:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20c34d:	e8 be 5f 00 00       	callq  212310 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>
  20c352:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c357:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c35c:	48 8b 04 24          	mov    (%rsp),%rax
  20c360:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20c364:	e8 f7 55 01 00       	callq  221960 <_ZN4core3ptr24slice_from_raw_parts_mut17h4baadfda013033adE>
  20c369:	eb 00                	jmp    20c36b <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E+0x2b>
    }
  20c36b:	48 83 c4 18          	add    $0x18,%rsp
  20c36f:	c3                   	retq   

000000000020c370 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E>:
    fn drop(&mut self) {
  20c370:	48 83 ec 18          	sub    $0x18,%rsp
  20c374:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c378:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20c37d:	e8 be 5f 00 00       	callq  212340 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>
  20c382:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c387:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c38c:	48 8b 04 24          	mov    (%rsp),%rax
  20c390:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20c394:	e8 67 56 01 00       	callq  221a00 <_ZN4core3ptr24slice_from_raw_parts_mut17hccce3149d2f44078E>
  20c399:	eb 00                	jmp    20c39b <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E+0x2b>
    }
  20c39b:	48 83 c4 18          	add    $0x18,%rsp
  20c39f:	c3                   	retq   

000000000020c3a0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h08c6da264312282cE>:
}

impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>
{
    /// The dropping of the MutexGuard will release the lock it was created from.
    fn drop(&mut self)
  20c3a0:	48 83 ec 18          	sub    $0x18,%rsp
  20c3a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    {
        self.lock.store(false, Ordering::Release);
  20c3a9:	48 8b 3f             	mov    (%rdi),%rdi
  20c3ac:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c3b1:	31 f6                	xor    %esi,%esi
  20c3b3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c3b8:	e8 c3 ec 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c3bd:	48 83 c4 18          	add    $0x18,%rsp
  20c3c1:	c3                   	retq   
  20c3c2:	cc                   	int3   
  20c3c3:	cc                   	int3   
  20c3c4:	cc                   	int3   
  20c3c5:	cc                   	int3   
  20c3c6:	cc                   	int3   
  20c3c7:	cc                   	int3   
  20c3c8:	cc                   	int3   
  20c3c9:	cc                   	int3   
  20c3ca:	cc                   	int3   
  20c3cb:	cc                   	int3   
  20c3cc:	cc                   	int3   
  20c3cd:	cc                   	int3   
  20c3ce:	cc                   	int3   
  20c3cf:	cc                   	int3   

000000000020c3d0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238699b63bfd6d36E>:
    fn drop(&mut self)
  20c3d0:	48 83 ec 18          	sub    $0x18,%rsp
  20c3d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c3d9:	48 8b 3f             	mov    (%rdi),%rdi
  20c3dc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c3e1:	31 f6                	xor    %esi,%esi
  20c3e3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c3e8:	e8 93 ec 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c3ed:	48 83 c4 18          	add    $0x18,%rsp
  20c3f1:	c3                   	retq   
  20c3f2:	cc                   	int3   
  20c3f3:	cc                   	int3   
  20c3f4:	cc                   	int3   
  20c3f5:	cc                   	int3   
  20c3f6:	cc                   	int3   
  20c3f7:	cc                   	int3   
  20c3f8:	cc                   	int3   
  20c3f9:	cc                   	int3   
  20c3fa:	cc                   	int3   
  20c3fb:	cc                   	int3   
  20c3fc:	cc                   	int3   
  20c3fd:	cc                   	int3   
  20c3fe:	cc                   	int3   
  20c3ff:	cc                   	int3   

000000000020c400 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33502fe759f98579E>:
    fn drop(&mut self)
  20c400:	48 83 ec 18          	sub    $0x18,%rsp
  20c404:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c409:	48 8b 3f             	mov    (%rdi),%rdi
  20c40c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c411:	31 f6                	xor    %esi,%esi
  20c413:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c418:	e8 63 ec 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c41d:	48 83 c4 18          	add    $0x18,%rsp
  20c421:	c3                   	retq   
  20c422:	cc                   	int3   
  20c423:	cc                   	int3   
  20c424:	cc                   	int3   
  20c425:	cc                   	int3   
  20c426:	cc                   	int3   
  20c427:	cc                   	int3   
  20c428:	cc                   	int3   
  20c429:	cc                   	int3   
  20c42a:	cc                   	int3   
  20c42b:	cc                   	int3   
  20c42c:	cc                   	int3   
  20c42d:	cc                   	int3   
  20c42e:	cc                   	int3   
  20c42f:	cc                   	int3   

000000000020c430 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3bc9d3885aad2c98E>:
    fn drop(&mut self)
  20c430:	48 83 ec 18          	sub    $0x18,%rsp
  20c434:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c439:	48 8b 3f             	mov    (%rdi),%rdi
  20c43c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c441:	31 f6                	xor    %esi,%esi
  20c443:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c448:	e8 33 ec 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c44d:	48 83 c4 18          	add    $0x18,%rsp
  20c451:	c3                   	retq   
  20c452:	cc                   	int3   
  20c453:	cc                   	int3   
  20c454:	cc                   	int3   
  20c455:	cc                   	int3   
  20c456:	cc                   	int3   
  20c457:	cc                   	int3   
  20c458:	cc                   	int3   
  20c459:	cc                   	int3   
  20c45a:	cc                   	int3   
  20c45b:	cc                   	int3   
  20c45c:	cc                   	int3   
  20c45d:	cc                   	int3   
  20c45e:	cc                   	int3   
  20c45f:	cc                   	int3   

000000000020c460 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5adf5324be6f8979E>:
    fn drop(&mut self)
  20c460:	48 83 ec 18          	sub    $0x18,%rsp
  20c464:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c469:	48 8b 3f             	mov    (%rdi),%rdi
  20c46c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c471:	31 f6                	xor    %esi,%esi
  20c473:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c478:	e8 03 ec 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c47d:	48 83 c4 18          	add    $0x18,%rsp
  20c481:	c3                   	retq   
  20c482:	cc                   	int3   
  20c483:	cc                   	int3   
  20c484:	cc                   	int3   
  20c485:	cc                   	int3   
  20c486:	cc                   	int3   
  20c487:	cc                   	int3   
  20c488:	cc                   	int3   
  20c489:	cc                   	int3   
  20c48a:	cc                   	int3   
  20c48b:	cc                   	int3   
  20c48c:	cc                   	int3   
  20c48d:	cc                   	int3   
  20c48e:	cc                   	int3   
  20c48f:	cc                   	int3   

000000000020c490 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d20b1d630f88b51E>:
    fn drop(&mut self)
  20c490:	48 83 ec 18          	sub    $0x18,%rsp
  20c494:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c499:	48 8b 3f             	mov    (%rdi),%rdi
  20c49c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c4a1:	31 f6                	xor    %esi,%esi
  20c4a3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c4a8:	e8 d3 eb 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c4ad:	48 83 c4 18          	add    $0x18,%rsp
  20c4b1:	c3                   	retq   
  20c4b2:	cc                   	int3   
  20c4b3:	cc                   	int3   
  20c4b4:	cc                   	int3   
  20c4b5:	cc                   	int3   
  20c4b6:	cc                   	int3   
  20c4b7:	cc                   	int3   
  20c4b8:	cc                   	int3   
  20c4b9:	cc                   	int3   
  20c4ba:	cc                   	int3   
  20c4bb:	cc                   	int3   
  20c4bc:	cc                   	int3   
  20c4bd:	cc                   	int3   
  20c4be:	cc                   	int3   
  20c4bf:	cc                   	int3   

000000000020c4c0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d44f2c7accd1ce0E>:
    fn drop(&mut self)
  20c4c0:	48 83 ec 18          	sub    $0x18,%rsp
  20c4c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c4c9:	48 8b 3f             	mov    (%rdi),%rdi
  20c4cc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c4d1:	31 f6                	xor    %esi,%esi
  20c4d3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c4d8:	e8 a3 eb 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c4dd:	48 83 c4 18          	add    $0x18,%rsp
  20c4e1:	c3                   	retq   
  20c4e2:	cc                   	int3   
  20c4e3:	cc                   	int3   
  20c4e4:	cc                   	int3   
  20c4e5:	cc                   	int3   
  20c4e6:	cc                   	int3   
  20c4e7:	cc                   	int3   
  20c4e8:	cc                   	int3   
  20c4e9:	cc                   	int3   
  20c4ea:	cc                   	int3   
  20c4eb:	cc                   	int3   
  20c4ec:	cc                   	int3   
  20c4ed:	cc                   	int3   
  20c4ee:	cc                   	int3   
  20c4ef:	cc                   	int3   

000000000020c4f0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h756125f32cd8645dE>:
    fn drop(&mut self)
  20c4f0:	48 83 ec 18          	sub    $0x18,%rsp
  20c4f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c4f9:	48 8b 3f             	mov    (%rdi),%rdi
  20c4fc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c501:	31 f6                	xor    %esi,%esi
  20c503:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c508:	e8 73 eb 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c50d:	48 83 c4 18          	add    $0x18,%rsp
  20c511:	c3                   	retq   
  20c512:	cc                   	int3   
  20c513:	cc                   	int3   
  20c514:	cc                   	int3   
  20c515:	cc                   	int3   
  20c516:	cc                   	int3   
  20c517:	cc                   	int3   
  20c518:	cc                   	int3   
  20c519:	cc                   	int3   
  20c51a:	cc                   	int3   
  20c51b:	cc                   	int3   
  20c51c:	cc                   	int3   
  20c51d:	cc                   	int3   
  20c51e:	cc                   	int3   
  20c51f:	cc                   	int3   

000000000020c520 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9812ecd4aea0404dE>:
    fn drop(&mut self)
  20c520:	48 83 ec 18          	sub    $0x18,%rsp
  20c524:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c529:	48 8b 3f             	mov    (%rdi),%rdi
  20c52c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c531:	31 f6                	xor    %esi,%esi
  20c533:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c538:	e8 43 eb 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c53d:	48 83 c4 18          	add    $0x18,%rsp
  20c541:	c3                   	retq   
  20c542:	cc                   	int3   
  20c543:	cc                   	int3   
  20c544:	cc                   	int3   
  20c545:	cc                   	int3   
  20c546:	cc                   	int3   
  20c547:	cc                   	int3   
  20c548:	cc                   	int3   
  20c549:	cc                   	int3   
  20c54a:	cc                   	int3   
  20c54b:	cc                   	int3   
  20c54c:	cc                   	int3   
  20c54d:	cc                   	int3   
  20c54e:	cc                   	int3   
  20c54f:	cc                   	int3   

000000000020c550 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd05b545d577a728cE>:
    fn drop(&mut self)
  20c550:	48 83 ec 18          	sub    $0x18,%rsp
  20c554:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c559:	48 8b 3f             	mov    (%rdi),%rdi
  20c55c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c561:	31 f6                	xor    %esi,%esi
  20c563:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c568:	e8 13 eb 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c56d:	48 83 c4 18          	add    $0x18,%rsp
  20c571:	c3                   	retq   
  20c572:	cc                   	int3   
  20c573:	cc                   	int3   
  20c574:	cc                   	int3   
  20c575:	cc                   	int3   
  20c576:	cc                   	int3   
  20c577:	cc                   	int3   
  20c578:	cc                   	int3   
  20c579:	cc                   	int3   
  20c57a:	cc                   	int3   
  20c57b:	cc                   	int3   
  20c57c:	cc                   	int3   
  20c57d:	cc                   	int3   
  20c57e:	cc                   	int3   
  20c57f:	cc                   	int3   

000000000020c580 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hdc9394d9dc611043E>:
    fn drop(&mut self)
  20c580:	48 83 ec 18          	sub    $0x18,%rsp
  20c584:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c589:	48 8b 3f             	mov    (%rdi),%rdi
  20c58c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c591:	31 f6                	xor    %esi,%esi
  20c593:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c598:	e8 e3 ea 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c59d:	48 83 c4 18          	add    $0x18,%rsp
  20c5a1:	c3                   	retq   
  20c5a2:	cc                   	int3   
  20c5a3:	cc                   	int3   
  20c5a4:	cc                   	int3   
  20c5a5:	cc                   	int3   
  20c5a6:	cc                   	int3   
  20c5a7:	cc                   	int3   
  20c5a8:	cc                   	int3   
  20c5a9:	cc                   	int3   
  20c5aa:	cc                   	int3   
  20c5ab:	cc                   	int3   
  20c5ac:	cc                   	int3   
  20c5ad:	cc                   	int3   
  20c5ae:	cc                   	int3   
  20c5af:	cc                   	int3   

000000000020c5b0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf64dd5ac2c6d25faE>:
    fn drop(&mut self)
  20c5b0:	48 83 ec 18          	sub    $0x18,%rsp
  20c5b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c5b9:	48 8b 3f             	mov    (%rdi),%rdi
  20c5bc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c5c1:	31 f6                	xor    %esi,%esi
  20c5c3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c5c8:	e8 b3 ea 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c5cd:	48 83 c4 18          	add    $0x18,%rsp
  20c5d1:	c3                   	retq   
  20c5d2:	cc                   	int3   
  20c5d3:	cc                   	int3   
  20c5d4:	cc                   	int3   
  20c5d5:	cc                   	int3   
  20c5d6:	cc                   	int3   
  20c5d7:	cc                   	int3   
  20c5d8:	cc                   	int3   
  20c5d9:	cc                   	int3   
  20c5da:	cc                   	int3   
  20c5db:	cc                   	int3   
  20c5dc:	cc                   	int3   
  20c5dd:	cc                   	int3   
  20c5de:	cc                   	int3   
  20c5df:	cc                   	int3   

000000000020c5e0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfd8a5de3b3c2f6f2E>:
    fn drop(&mut self)
  20c5e0:	48 83 ec 18          	sub    $0x18,%rsp
  20c5e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20c5e9:	48 8b 3f             	mov    (%rdi),%rdi
  20c5ec:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20c5f1:	31 f6                	xor    %esi,%esi
  20c5f3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20c5f8:	e8 83 ea 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20c5fd:	48 83 c4 18          	add    $0x18,%rsp
  20c601:	c3                   	retq   
  20c602:	cc                   	int3   
  20c603:	cc                   	int3   
  20c604:	cc                   	int3   
  20c605:	cc                   	int3   
  20c606:	cc                   	int3   
  20c607:	cc                   	int3   
  20c608:	cc                   	int3   
  20c609:	cc                   	int3   
  20c60a:	cc                   	int3   
  20c60b:	cc                   	int3   
  20c60c:	cc                   	int3   
  20c60d:	cc                   	int3   
  20c60e:	cc                   	int3   
  20c60f:	cc                   	int3   

000000000020c610 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE>:
    fn drop(&mut self) {
  20c610:	48 83 ec 48          	sub    $0x48,%rsp
  20c614:	48 89 fe             	mov    %rdi,%rsi
  20c617:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c61c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20c621:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c626:	e8 05 af ff ff       	callq  207530 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>
  20c62b:	b8 01 00 00 00       	mov    $0x1,%eax
  20c630:	31 c9                	xor    %ecx,%ecx
  20c632:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20c638:	48 0f 44 c1          	cmove  %rcx,%rax
  20c63c:	48 83 f8 01          	cmp    $0x1,%rax
  20c640:	75 2a                	jne    20c66c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x5c>
  20c642:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c647:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20c64c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20c651:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20c656:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20c65b:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20c660:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20c665:	e8 46 49 01 00       	callq  220fb0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20c66a:	eb 05                	jmp    20c671 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x61>
    }
  20c66c:	48 83 c4 48          	add    $0x48,%rsp
  20c670:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20c671:	eb f9                	jmp    20c66c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x5c>
  20c673:	cc                   	int3   
  20c674:	cc                   	int3   
  20c675:	cc                   	int3   
  20c676:	cc                   	int3   
  20c677:	cc                   	int3   
  20c678:	cc                   	int3   
  20c679:	cc                   	int3   
  20c67a:	cc                   	int3   
  20c67b:	cc                   	int3   
  20c67c:	cc                   	int3   
  20c67d:	cc                   	int3   
  20c67e:	cc                   	int3   
  20c67f:	cc                   	int3   

000000000020c680 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE>:
    fn drop(&mut self) {
  20c680:	48 83 ec 48          	sub    $0x48,%rsp
  20c684:	48 89 fe             	mov    %rdi,%rsi
  20c687:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c68c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20c691:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c696:	e8 85 ad ff ff       	callq  207420 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>
  20c69b:	b8 01 00 00 00       	mov    $0x1,%eax
  20c6a0:	31 c9                	xor    %ecx,%ecx
  20c6a2:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20c6a8:	48 0f 44 c1          	cmove  %rcx,%rax
  20c6ac:	48 83 f8 01          	cmp    $0x1,%rax
  20c6b0:	75 2a                	jne    20c6dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x5c>
  20c6b2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c6b7:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20c6bc:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20c6c1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20c6c6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20c6cb:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20c6d0:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20c6d5:	e8 d6 48 01 00       	callq  220fb0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20c6da:	eb 05                	jmp    20c6e1 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x61>
    }
  20c6dc:	48 83 c4 48          	add    $0x48,%rsp
  20c6e0:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20c6e1:	eb f9                	jmp    20c6dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x5c>
  20c6e3:	cc                   	int3   
  20c6e4:	cc                   	int3   
  20c6e5:	cc                   	int3   
  20c6e6:	cc                   	int3   
  20c6e7:	cc                   	int3   
  20c6e8:	cc                   	int3   
  20c6e9:	cc                   	int3   
  20c6ea:	cc                   	int3   
  20c6eb:	cc                   	int3   
  20c6ec:	cc                   	int3   
  20c6ed:	cc                   	int3   
  20c6ee:	cc                   	int3   
  20c6ef:	cc                   	int3   

000000000020c6f0 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E>:
    fn drop(&mut self) {
  20c6f0:	48 83 ec 48          	sub    $0x48,%rsp
  20c6f4:	48 89 fe             	mov    %rdi,%rsi
  20c6f7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c6fc:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20c701:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c706:	e8 05 ac ff ff       	callq  207310 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>
  20c70b:	b8 01 00 00 00       	mov    $0x1,%eax
  20c710:	31 c9                	xor    %ecx,%ecx
  20c712:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20c718:	48 0f 44 c1          	cmove  %rcx,%rax
  20c71c:	48 83 f8 01          	cmp    $0x1,%rax
  20c720:	75 2a                	jne    20c74c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x5c>
  20c722:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c727:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20c72c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20c731:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20c736:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20c73b:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20c740:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20c745:	e8 66 48 01 00       	callq  220fb0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20c74a:	eb 05                	jmp    20c751 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x61>
    }
  20c74c:	48 83 c4 48          	add    $0x48,%rsp
  20c750:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20c751:	eb f9                	jmp    20c74c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x5c>
  20c753:	cc                   	int3   
  20c754:	cc                   	int3   
  20c755:	cc                   	int3   
  20c756:	cc                   	int3   
  20c757:	cc                   	int3   
  20c758:	cc                   	int3   
  20c759:	cc                   	int3   
  20c75a:	cc                   	int3   
  20c75b:	cc                   	int3   
  20c75c:	cc                   	int3   
  20c75d:	cc                   	int3   
  20c75e:	cc                   	int3   
  20c75f:	cc                   	int3   

000000000020c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>:
    pub fn size(&self) -> u64 {
  20c760:	48 83 ec 18          	sub    $0x18,%rsp
  20c764:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20c769:	0f b6 07             	movzbl (%rdi),%eax
  20c76c:	48 89 04 24          	mov    %rax,(%rsp)
  20c770:	48 85 c0             	test   %rax,%rax
  20c773:	74 12                	je     20c787 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x27>
  20c775:	eb 00                	jmp    20c777 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x17>
  20c777:	48 8b 04 24          	mov    (%rsp),%rax
  20c77b:	48 83 e8 01          	sub    $0x1,%rax
  20c77f:	74 11                	je     20c792 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x32>
  20c781:	eb 00                	jmp    20c783 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x23>
  20c783:	eb 18                	jmp    20c79d <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x3d>
  20c785:	0f 0b                	ud2    
            Self::Page4KiB => 4 * 1024,
  20c787:	48 c7 44 24 08 00 10 	movq   $0x1000,0x8(%rsp)
  20c78e:	00 00 
  20c790:	eb 14                	jmp    20c7a6 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x46>
            Self::Page2MiB => 2 * 1024 * 1024,
  20c792:	48 c7 44 24 08 00 00 	movq   $0x200000,0x8(%rsp)
  20c799:	20 00 
  20c79b:	eb 09                	jmp    20c7a6 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x46>
            Self::Page1GiB => 1024 * 1024 * 1024,
  20c79d:	48 c7 44 24 08 00 00 	movq   $0x40000000,0x8(%rsp)
  20c7a4:	00 40 
    }
  20c7a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c7ab:	48 83 c4 18          	add    $0x18,%rsp
  20c7af:	c3                   	retq   

000000000020c7b0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>:
    pub fn new(value: u16) -> Self {
  20c7b0:	48 83 ec 04          	sub    $0x4,%rsp
  20c7b4:	66 89 f8             	mov    %di,%ax
  20c7b7:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
        PageTableIndex(value % MAX_ENTRIES_PER_LEVEL)
  20c7bc:	66 25 ff 01          	and    $0x1ff,%ax
  20c7c0:	66 89 04 24          	mov    %ax,(%rsp)
    }
  20c7c4:	66 8b 04 24          	mov    (%rsp),%ax
  20c7c8:	48 83 c4 04          	add    $0x4,%rsp
  20c7cc:	c3                   	retq   
  20c7cd:	cc                   	int3   
  20c7ce:	cc                   	int3   
  20c7cf:	cc                   	int3   

000000000020c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>:
    pub fn as_usize(&self) -> usize {
  20c7d0:	50                   	push   %rax
  20c7d1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as usize
  20c7d5:	0f b7 07             	movzwl (%rdi),%eax
    }
  20c7d8:	59                   	pop    %rcx
  20c7d9:	c3                   	retq   
  20c7da:	cc                   	int3   
  20c7db:	cc                   	int3   
  20c7dc:	cc                   	int3   
  20c7dd:	cc                   	int3   
  20c7de:	cc                   	int3   
  20c7df:	cc                   	int3   

000000000020c7e0 <_ZN9r3_kernel2mm6paging4Page12from_address17h3af72bb28e0481a7E>:
    pub fn from_address(addr: mm::VirtualAddress) -> Self {
  20c7e0:	48 83 ec 28          	sub    $0x28,%rsp
  20c7e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Page(addr.new_align_down(PageSize::Page4KiB.size()))
  20c7e9:	48 8d 3d c8 3e ff ff 	lea    -0xc138(%rip),%rdi        # 2006b8 <str.0+0x98>
  20c7f0:	e8 6b ff ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20c7f5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c7fa:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20c7ff:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20c804:	e8 e7 ba 01 00       	callq  2282f0 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17hf7ff72a768299b95E>
  20c809:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c80e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c813:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20c818:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20c81d:	48 83 c4 28          	add    $0x28,%rsp
  20c821:	c3                   	retq   
  20c822:	cc                   	int3   
  20c823:	cc                   	int3   
  20c824:	cc                   	int3   
  20c825:	cc                   	int3   
  20c826:	cc                   	int3   
  20c827:	cc                   	int3   
  20c828:	cc                   	int3   
  20c829:	cc                   	int3   
  20c82a:	cc                   	int3   
  20c82b:	cc                   	int3   
  20c82c:	cc                   	int3   
  20c82d:	cc                   	int3   
  20c82e:	cc                   	int3   
  20c82f:	cc                   	int3   

000000000020c830 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>:
    pub fn addr(&self) -> mm::VirtualAddress {
  20c830:	50                   	push   %rax
  20c831:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  20c835:	48 8b 07             	mov    (%rdi),%rax
    }
  20c838:	59                   	pop    %rcx
  20c839:	c3                   	retq   
  20c83a:	cc                   	int3   
  20c83b:	cc                   	int3   
  20c83c:	cc                   	int3   
  20c83d:	cc                   	int3   
  20c83e:	cc                   	int3   
  20c83f:	cc                   	int3   

000000000020c840 <_ZN9r3_kernel2mm6paging4Page6as_u6417h562c4c3e06a8062eE>:
    pub fn as_u64(&self) -> u64 {
  20c840:	48 83 ec 18          	sub    $0x18,%rsp
  20c844:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  20c849:	e8 72 ba 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20c84e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c853:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c858:	48 83 c4 18          	add    $0x18,%rsp
  20c85c:	c3                   	retq   
  20c85d:	cc                   	int3   
  20c85e:	cc                   	int3   
  20c85f:	cc                   	int3   

000000000020c860 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h97321716d9d017ceE>:
    pub fn kernel_flags() -> PageEntryFlags {
  20c860:	48 83 ec 28          	sub    $0x28,%rsp
        let value: u64 = PageEntryFlags::PRESENT.bits() | PageEntryFlags::READ_WRITE.bits();
  20c864:	48 8d 3d 65 3a ff ff 	lea    -0xc59b(%rip),%rdi        # 2002d0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xa6>
  20c86b:	e8 30 22 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c870:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c875:	48 8d 3d 24 3a ff ff 	lea    -0xc5dc(%rip),%rdi        # 2002a0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xd6>
  20c87c:	e8 1f 22 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c881:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c886:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c88b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20c890:	48 09 c7             	or     %rax,%rdi
  20c893:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(value)
  20c898:	e8 13 22 00 00       	callq  20eab0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20c89d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c8a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c8a7:	48 83 c4 28          	add    $0x28,%rsp
  20c8ab:	c3                   	retq   
  20c8ac:	cc                   	int3   
  20c8ad:	cc                   	int3   
  20c8ae:	cc                   	int3   
  20c8af:	cc                   	int3   

000000000020c8b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags21kernel_hugepage_flags17he0b9fa3eb36123b3E>:
    pub fn kernel_hugepage_flags() -> PageEntryFlags {
  20c8b0:	48 83 ec 38          	sub    $0x38,%rsp
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c8b4:	48 8d 3d 15 3a ff ff 	lea    -0xc5eb(%rip),%rdi        # 2002d0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xa6>
  20c8bb:	e8 e0 21 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c8c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            | PageEntryFlags::READ_WRITE.bits()
  20c8c5:	48 8d 3d d4 39 ff ff 	lea    -0xc62c(%rip),%rdi        # 2002a0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xd6>
  20c8cc:	e8 cf 21 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c8d1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c8d6:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c8db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c8e0:	48 09 c8             	or     %rcx,%rax
  20c8e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            | PageEntryFlags::HUGE_PAGE.bits();
  20c8e8:	48 8d 3d 11 3a ff ff 	lea    -0xc5ef(%rip),%rdi        # 200300 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x76>
  20c8ef:	e8 ac 21 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c8f4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c8f9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c8fe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c903:	48 09 c7             	or     %rax,%rdi
  20c906:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let flags = PageEntryFlags::from_bits_truncate(value);
  20c90b:	e8 a0 21 00 00       	callq  20eab0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20c910:	48 89 04 24          	mov    %rax,(%rsp)
  20c914:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c919:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20c91d:	48 83 c4 38          	add    $0x38,%rsp
  20c921:	c3                   	retq   
  20c922:	cc                   	int3   
  20c923:	cc                   	int3   
  20c924:	cc                   	int3   
  20c925:	cc                   	int3   
  20c926:	cc                   	int3   
  20c927:	cc                   	int3   
  20c928:	cc                   	int3   
  20c929:	cc                   	int3   
  20c92a:	cc                   	int3   
  20c92b:	cc                   	int3   
  20c92c:	cc                   	int3   
  20c92d:	cc                   	int3   
  20c92e:	cc                   	int3   
  20c92f:	cc                   	int3   

000000000020c930 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>:
    pub fn is_mapped(&self) -> bool {
  20c930:	50                   	push   %rax
  20c931:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 != 0
  20c935:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20c939:	0f 95 c0             	setne  %al
    }
  20c93c:	24 01                	and    $0x1,%al
  20c93e:	0f b6 c0             	movzbl %al,%eax
  20c941:	59                   	pop    %rcx
  20c942:	c3                   	retq   
  20c943:	cc                   	int3   
  20c944:	cc                   	int3   
  20c945:	cc                   	int3   
  20c946:	cc                   	int3   
  20c947:	cc                   	int3   
  20c948:	cc                   	int3   
  20c949:	cc                   	int3   
  20c94a:	cc                   	int3   
  20c94b:	cc                   	int3   
  20c94c:	cc                   	int3   
  20c94d:	cc                   	int3   
  20c94e:	cc                   	int3   
  20c94f:	cc                   	int3   

000000000020c950 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>:
    pub fn addr(&self) -> mm::PhysicalAddress {
  20c950:	48 83 ec 18          	sub    $0x18,%rsp
  20c954:	48 89 f8             	mov    %rdi,%rax
  20c957:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        mm::PhysicalAddress::from_u64(self.0 & ENTRY_ADDR_BIT_MASK)
  20c95c:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
  20c963:	ff 0f 00 
  20c966:	48 23 38             	and    (%rax),%rdi
  20c969:	e8 22 bb 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  20c96e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c973:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c978:	48 83 c4 18          	add    $0x18,%rsp
  20c97c:	c3                   	retq   
  20c97d:	cc                   	int3   
  20c97e:	cc                   	int3   
  20c97f:	cc                   	int3   

000000000020c980 <_ZN9r3_kernel2mm6paging9PageEntry11unmap_entry17h3e90615ec2a5f16fE>:
    pub fn unmap_entry(&mut self) {
  20c980:	50                   	push   %rax
  20c981:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 = 0;
  20c985:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    }
  20c98c:	58                   	pop    %rax
  20c98d:	c3                   	retq   
  20c98e:	cc                   	int3   
  20c98f:	cc                   	int3   

000000000020c990 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E>:
    pub fn set_address(
  20c990:	48 83 ec 78          	sub    $0x78,%rsp
  20c994:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20c999:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20c99e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20c9a3:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        if !addr.is_aligned_at(PageSize::Page4KiB.size()) {
  20c9a8:	48 8d 3d 09 3d ff ff 	lea    -0xc2f7(%rip),%rdi        # 2006b8 <str.0+0x98>
  20c9af:	e8 ac fd ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20c9b4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c9b9:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20c9be:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c9c3:	e8 e8 ba 01 00       	callq  2284b0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  20c9c8:	88 44 24 27          	mov    %al,0x27(%rsp)
  20c9cc:	8a 44 24 27          	mov    0x27(%rsp),%al
  20c9d0:	34 ff                	xor    $0xff,%al
  20c9d2:	a8 01                	test   $0x1,%al
  20c9d4:	75 11                	jne    20c9e7 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x57>
        let entry_value = addr.as_u64() | flags.bits();
  20c9d6:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c9db:	e8 a0 ba 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c9e0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c9e5:	eb 43                	jmp    20ca2a <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x9a>
            return Err(PagingError::UnalignedAddress(addr.as_u64()));
  20c9e7:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c9ec:	e8 8f ba 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c9f1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c9f6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c9fb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20ca00:	66 c7 44 24 58 03 00 	movw   $0x3,0x58(%rsp)
  20ca07:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20ca0c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ca11:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20ca16:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    }
  20ca1b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20ca20:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  20ca25:	48 83 c4 78          	add    $0x78,%rsp
  20ca29:	c3                   	retq   
        let entry_value = addr.as_u64() | flags.bits();
  20ca2a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20ca2f:	e8 6c 20 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20ca34:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ca39:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20ca3e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20ca43:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20ca48:	48 09 d1             	or     %rdx,%rcx
  20ca4b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        self.0 = entry_value;
  20ca50:	48 89 08             	mov    %rcx,(%rax)
        Ok(())
  20ca53:	66 c7 44 24 48 07 00 	movw   $0x7,0x48(%rsp)
    }
  20ca5a:	eb bf                	jmp    20ca1b <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x8b>
  20ca5c:	cc                   	int3   
  20ca5d:	cc                   	int3   
  20ca5e:	cc                   	int3   
  20ca5f:	cc                   	int3   

000000000020ca60 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17h15fa22b15023e643E>:
    pub fn set_phy_frame(&mut self, addr: Frame, flags: PageEntryFlags) {
  20ca60:	48 83 ec 48          	sub    $0x48,%rsp
  20ca64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ca69:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20ca6e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20ca73:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ca78:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20ca7d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let phy_addr = addr.as_u64();
  20ca82:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20ca87:	e8 b4 b1 00 00       	callq  217c40 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>
  20ca8c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ca91:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        self.0 = phy_addr | flags.bits();
  20ca96:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ca9b:	e8 00 20 00 00       	callq  20eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20caa0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20caa5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20caaa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20caaf:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20cab4:	48 09 d1             	or     %rdx,%rcx
  20cab7:	48 89 08             	mov    %rcx,(%rax)
    }
  20caba:	48 83 c4 48          	add    $0x48,%rsp
  20cabe:	c3                   	retq   
  20cabf:	cc                   	int3   

000000000020cac0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>:
    pub fn has_flag(&self, flag: PageEntryFlags) -> bool {
  20cac0:	48 83 ec 28          	sub    $0x28,%rsp
  20cac4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20cac9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20cace:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(self.0).contains(flag)
  20cad3:	48 8b 3f             	mov    (%rdi),%rdi
  20cad6:	e8 d5 1f 00 00       	callq  20eab0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20cadb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20cae0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20cae5:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20caea:	e8 01 20 00 00       	callq  20eaf0 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17hd3ff2771bf260abaE>
  20caef:	88 44 24 07          	mov    %al,0x7(%rsp)
  20caf3:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20caf7:	24 01                	and    $0x1,%al
  20caf9:	0f b6 c0             	movzbl %al,%eax
  20cafc:	48 83 c4 28          	add    $0x28,%rsp
  20cb00:	c3                   	retq   
  20cb01:	cc                   	int3   
  20cb02:	cc                   	int3   
  20cb03:	cc                   	int3   
  20cb04:	cc                   	int3   
  20cb05:	cc                   	int3   
  20cb06:	cc                   	int3   
  20cb07:	cc                   	int3   
  20cb08:	cc                   	int3   
  20cb09:	cc                   	int3   
  20cb0a:	cc                   	int3   
  20cb0b:	cc                   	int3   
  20cb0c:	cc                   	int3   
  20cb0d:	cc                   	int3   
  20cb0e:	cc                   	int3   
  20cb0f:	cc                   	int3   

000000000020cb10 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E>:
    pub fn reset(&mut self) {
  20cb10:	48 83 ec 58          	sub    $0x58,%rsp
  20cb14:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        for entry in self.entries.iter_mut() {
  20cb19:	be 00 02 00 00       	mov    $0x200,%esi
  20cb1e:	e8 7d 7e 00 00       	callq  2149a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h21f431eaaa4aac60E>
  20cb23:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20cb28:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20cb2d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20cb32:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20cb37:	e8 44 e4 00 00       	callq  21af80 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h47923d31c017090eE>
  20cb3c:	48 89 04 24          	mov    %rax,(%rsp)
  20cb40:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20cb45:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20cb4a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20cb4e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20cb53:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20cb58:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20cb5d:	e8 5e e7 00 00       	callq  21b2c0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE>
  20cb62:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20cb67:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20cb6c:	48 85 c0             	test   %rax,%rax
  20cb6f:	0f 95 c0             	setne  %al
  20cb72:	0f b6 c0             	movzbl %al,%eax
  20cb75:	74 06                	je     20cb7d <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x6d>
  20cb77:	eb 00                	jmp    20cb79 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x69>
  20cb79:	eb 07                	jmp    20cb82 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x72>
  20cb7b:	0f 0b                	ud2    
    }
  20cb7d:	48 83 c4 58          	add    $0x58,%rsp
  20cb81:	c3                   	retq   
        for entry in self.entries.iter_mut() {
  20cb82:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20cb87:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20cb8c:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20cb91:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
            entry.unmap_entry();
  20cb96:	e8 e5 fd ff ff       	callq  20c980 <_ZN9r3_kernel2mm6paging9PageEntry11unmap_entry17h3e90615ec2a5f16fE>
  20cb9b:	eb bb                	jmp    20cb58 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x48>
  20cb9d:	cc                   	int3   
  20cb9e:	cc                   	int3   
  20cb9f:	cc                   	int3   

000000000020cba0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE>:
    pub fn from_cr3(phy_offset: u64) -> VirtualMemoryManager {
  20cba0:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20cba7:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20cbac:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20cbb1:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  20cbb6:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  20cbbd:	00 
        let current_pt_addr = mmu::get_page_table_address();
  20cbbe:	e8 1d 86 00 00       	callq  2151e0 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17h99c814258e74bc8aE>
  20cbc3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  20cbc8:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20cbcd:	be 00 10 00 00       	mov    $0x1000,%esi
  20cbd2:	e8 d9 b8 01 00       	callq  2284b0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  20cbd7:	24 01                	and    $0x1,%al
  20cbd9:	88 44 24 76          	mov    %al,0x76(%rsp)
  20cbdd:	48 8d 44 24 76       	lea    0x76(%rsp),%rax
  20cbe2:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20cbe7:	48 8d 05 cb 3a ff ff 	lea    -0xc535(%rip),%rax        # 2006b9 <str.0+0x99>
  20cbee:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20cbf3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20cbf8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20cbfd:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20cc04:	00 
  20cc05:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20cc0a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20cc0f:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  20cc16:	00 
  20cc17:	8a 00                	mov    (%rax),%al
  20cc19:	34 ff                	xor    $0xff,%al
  20cc1b:	a8 01                	test   $0x1,%al
  20cc1d:	75 11                	jne    20cc30 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x90>
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  20cc1f:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20cc24:	e8 57 b8 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20cc29:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20cc2e:	eb 2d                	jmp    20cc5d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0xbd>
  20cc30:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20cc35:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  20cc3a:	c6 44 24 77 00       	movb   $0x0,0x77(%rsp)
  20cc3f:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  20cc46:	00 00 
  20cc48:	4c 8d 05 01 d3 02 00 	lea    0x2d301(%rip),%r8        # 239f50 <memcmp+0x1210>
  20cc4f:	31 ff                	xor    %edi,%edi
  20cc51:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  20cc56:	e8 35 3b 01 00       	callq  220790 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  20cc5b:	0f 0b                	ud2    
  20cc5d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20cc62:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  20cc67:	48 01 c8             	add    %rcx,%rax
  20cc6a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20cc6f:	0f 92 c0             	setb   %al
  20cc72:	a8 01                	test   $0x1,%al
  20cc74:	75 14                	jne    20cc8a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0xea>
  20cc76:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20cc7b:	e8 50 b6 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20cc80:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20cc87:	00 
  20cc88:	eb 1a                	jmp    20cca4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x104>
  20cc8a:	48 8d 3d 3f 3b ff ff 	lea    -0xc4c1(%rip),%rdi        # 2007d0 <str.0>
  20cc91:	48 8d 15 d0 d2 02 00 	lea    0x2d2d0(%rip),%rdx        # 239f68 <memcmp+0x1228>
  20cc98:	be 1c 00 00 00       	mov    $0x1c,%esi
  20cc9d:	e8 4e 8f 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20cca2:	0f 0b                	ud2    
        log::info!(
  20cca4:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  20ccab:	00 03 00 00 00 
  20ccb0:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20ccb7:	00 
  20ccb8:	48 8d 35 39 36 ff ff 	lea    -0xc9c7(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  20ccbf:	e8 0c 63 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20ccc4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20ccc8:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20cccc:	a8 01                	test   $0x1,%al
  20ccce:	75 0c                	jne    20ccdc <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x13c>
  20ccd0:	eb 00                	jmp    20ccd2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x132>
  20ccd2:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20ccd9:	00 
  20ccda:	eb 5a                	jmp    20cd36 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x196>
  20ccdc:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  20cce3:	00 
  20cce4:	48 8b 3d 5d 0e 03 00 	mov    0x30e5d(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20cceb:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  20ccf2:	00 
  20ccf3:	e8 f8 e4 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20ccf8:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20ccff:	00 
  20cd00:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  20cd07:	00 
  20cd08:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20cd0f:	00 
  20cd10:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20cd17:	00 
  20cd18:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  20cd1f:	00 
  20cd20:	e8 ab 62 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20cd25:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20cd29:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20cd2d:	24 01                	and    $0x1,%al
  20cd2f:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  20cd36:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  20cd3d:	01 
  20cd3e:	75 0a                	jne    20cd4a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x1aa>
        mmu::reload_flush();
  20cd40:	e8 fb 84 00 00       	callq  215240 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>
  20cd45:	e9 ab 00 00 00       	jmpq   20cdf5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x255>
            mapped_vmm_addr.as_u64()
  20cd4a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20cd51:	00 
  20cd52:	e8 69 b5 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20cd57:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20cd5e:	00 
        log::info!(
  20cd5f:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  20cd66:	00 
  20cd67:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20cd6e:	00 
  20cd6f:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  20cd76:	00 
  20cd77:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  20cd7e:	00 
  20cd7f:	48 8b 35 ca 0d 03 00 	mov    0x30dca(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20cd86:	e8 b5 28 00 00       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  20cd8b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cd90:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20cd95:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20cd9a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20cd9f:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  20cda6:	00 
  20cda7:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20cdae:	00 
  20cdaf:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  20cdb6:	00 
  20cdb7:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20cdbe:	00 
  20cdbf:	48 8d 35 ba d1 02 00 	lea    0x2d1ba(%rip),%rsi        # 239f80 <memcmp+0x1240>
  20cdc6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20cdcc:	4c 89 c2             	mov    %r8,%rdx
  20cdcf:	e8 5c 97 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20cdd4:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  20cddb:	00 
  20cddc:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20cde3:	00 
  20cde4:	48 8d 15 a5 d1 02 00 	lea    0x2d1a5(%rip),%rdx        # 239f90 <memcmp+0x1250>
  20cdeb:	e8 90 5f 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20cdf0:	e9 4b ff ff ff       	jmpq   20cd40 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x1a0>
  20cdf5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20cdfa:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20cdff:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            l4_virtual_address: mapped_vmm_addr,
  20ce04:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  20ce0b:	00 
            l4_phy_addr: current_pt_addr,
  20ce0c:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
        VirtualMemoryManager {
  20ce11:	48 c7 01 04 00 00 00 	movq   $0x4,(%rcx)
  20ce18:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  20ce1c:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  20ce20:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  20ce24:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20ce2b:	c3                   	retq   
  20ce2c:	cc                   	int3   
  20ce2d:	cc                   	int3   
  20ce2e:	cc                   	int3   
  20ce2f:	cc                   	int3   

000000000020ce30 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE>:
    fn get_level_address(&self, next_addr: u64) -> mm::VirtualAddress {
  20ce30:	48 83 ec 58          	sub    $0x58,%rsp
  20ce34:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20ce39:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ce3e:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20ce43:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let offset = next_addr - self.l4_phy_addr.as_u64();
  20ce48:	48 83 c7 10          	add    $0x10,%rdi
  20ce4c:	e8 2f b6 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20ce51:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ce56:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20ce5b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20ce60:	48 29 c8             	sub    %rcx,%rax
  20ce63:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ce68:	0f 92 c0             	setb   %al
  20ce6b:	a8 01                	test   $0x1,%al
  20ce6d:	75 1f                	jne    20ce8e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0x5e>
  20ce6f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ce74:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ce79:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20ce7e:	48 83 c7 08          	add    $0x8,%rdi
  20ce82:	e8 39 b4 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20ce87:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ce8c:	eb 1a                	jmp    20cea8 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0x78>
        let offset = next_addr - self.l4_phy_addr.as_u64();
  20ce8e:	48 8d 3d 9b 39 ff ff 	lea    -0xc665(%rip),%rdi        # 200830 <str.1>
  20ce95:	48 8d 15 2c d1 02 00 	lea    0x2d12c(%rip),%rdx        # 239fc8 <memcmp+0x1288>
  20ce9c:	be 21 00 00 00       	mov    $0x21,%esi
  20cea1:	e8 4a 8d 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20cea6:	0f 0b                	ud2    
  20cea8:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20cead:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20ceb2:	48 01 c8             	add    %rcx,%rax
  20ceb5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ceba:	0f 92 c0             	setb   %al
  20cebd:	a8 01                	test   $0x1,%al
  20cebf:	75 14                	jne    20ced5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0xa5>
  20cec1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20cec6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  20cecb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ced0:	48 83 c4 58          	add    $0x58,%rsp
  20ced4:	c3                   	retq   
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20ced5:	48 8d 3d f4 38 ff ff 	lea    -0xc70c(%rip),%rdi        # 2007d0 <str.0>
  20cedc:	48 8d 15 fd d0 02 00 	lea    0x2d0fd(%rip),%rdx        # 239fe0 <memcmp+0x12a0>
  20cee3:	be 1c 00 00 00       	mov    $0x1c,%esi
  20cee8:	e8 03 8d 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ceed:	0f 0b                	ud2    
  20ceef:	cc                   	int3   

000000000020cef0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>:
    fn get_or_create_table(
  20cef0:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  20cef7:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  20cefe:	00 
  20ceff:	48 89 f9             	mov    %rdi,%rcx
  20cf02:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20cf09:	00 
  20cf0a:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20cf11:	00 
  20cf12:	88 d0                	mov    %dl,%al
  20cf14:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  20cf1b:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  20cf22:	00 
  20cf23:	48 89 bc 24 c8 01 00 	mov    %rdi,0x1c8(%rsp)
  20cf2a:	00 
  20cf2b:	24 01                	and    $0x1,%al
  20cf2d:	88 84 24 d7 01 00 00 	mov    %al,0x1d7(%rsp)
        if entry.is_mapped() {
  20cf34:	e8 f7 f9 ff ff       	callq  20c930 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20cf39:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  20cf40:	8a 84 24 9f 00 00 00 	mov    0x9f(%rsp),%al
  20cf47:	a8 01                	test   $0x1,%al
  20cf49:	75 13                	jne    20cf5e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x6e>
  20cf4b:	eb 00                	jmp    20cf4d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x5d>
  20cf4d:	8a 84 24 9e 00 00 00 	mov    0x9e(%rsp),%al
        if create {
  20cf54:	a8 01                	test   $0x1,%al
  20cf56:	0f 85 88 00 00 00    	jne    20cfe4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xf4>
  20cf5c:	eb 78                	jmp    20cfd6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xe6>
  20cf5e:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20cf65:	00 
                unsafe { &mut *self.get_level_address(entry.addr().as_u64()).get_mut_ptr() };
  20cf66:	e8 e5 f9 ff ff       	callq  20c950 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20cf6b:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20cf72:	00 
  20cf73:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20cf7a:	00 
  20cf7b:	e8 00 b5 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20cf80:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20cf87:	00 
  20cf88:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20cf8f:	00 
  20cf90:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20cf97:	00 
  20cf98:	e8 93 fe ff ff       	callq  20ce30 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE>
  20cf9d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20cfa2:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  20cfa7:	e8 c4 c7 00 00       	callq  219770 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20cfac:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20cfb1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20cfb6:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  20cfbd:	00 
            return Some(pt);
  20cfbe:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20cfc5:	00 
    }
  20cfc6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20cfcd:	00 
  20cfce:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  20cfd5:	c3                   	retq   
        return None;
  20cfd6:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  20cfdd:	00 00 00 00 00 
  20cfe2:	eb e2                	jmp    20cfc6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xd6>
            let frame_for_pt_opt = PhysicalMemoryManager::alloc();
  20cfe4:	e8 e7 c0 00 00       	callq  2190d0 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17hc6e626f75c02576bE>
  20cfe9:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  20cff0:	00 
  20cff1:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  20cff8:	00 
  20cff9:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  20d000:	00 
  20d001:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20d008:	00 
  20d009:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  20d010:	00 
  20d011:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20d018:	00 
            if frame_for_pt_opt.is_none() {
  20d019:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20d020:	00 
  20d021:	e8 7a 49 00 00       	callq  2119a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20d026:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20d02a:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  20d02e:	a8 01                	test   $0x1,%al
  20d030:	75 58                	jne    20d08a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x19a>
  20d032:	eb 00                	jmp    20d034 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x144>
            let frame_addr = frame_for_pt_opt.unwrap().addr();
  20d034:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20d03b:	00 
  20d03c:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  20d043:	00 
  20d044:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  20d04b:	00 
  20d04c:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20d053:	00 
  20d054:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  20d05b:	00 
  20d05c:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  20d063:	00 
  20d064:	48 8d 15 a5 cf 02 00 	lea    0x2cfa5(%rip),%rdx        # 23a010 <memcmp+0x12d0>
  20d06b:	e8 50 44 00 00       	callq  2114c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20d070:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  20d077:	00 
  20d078:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  20d07f:	00 
  20d080:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20d087:	00 
  20d088:	eb 1a                	jmp    20d0a4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x1b4>
                panic!("Failed to create new page table because of OOM.");
  20d08a:	48 8d 3d c0 37 ff ff 	lea    -0xc840(%rip),%rdi        # 200851 <str.1+0x21>
  20d091:	48 8d 15 60 cf 02 00 	lea    0x2cf60(%rip),%rdx        # 239ff8 <memcmp+0x12b8>
  20d098:	be 2f 00 00 00       	mov    $0x2f,%esi
  20d09d:	e8 4e 8b 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d0a2:	0f 0b                	ud2    
            let frame_addr = frame_for_pt_opt.unwrap().addr();
  20d0a4:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20d0ab:	00 
  20d0ac:	e8 7f ab 00 00       	callq  217c30 <_ZN9r3_kernel2mm3phy5Frame4addr17h1a4e3a91f04f8e02E>
  20d0b1:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20d0b8:	00 
            let res = entry.set_address(frame_addr, PageEntryFlags::kernel_flags());
  20d0b9:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20d0c0:	00 
  20d0c1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d0c6:	e8 95 f7 ff ff       	callq  20c860 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h97321716d9d017ceE>
  20d0cb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20d0d0:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  20d0d5:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  20d0da:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20d0e1:	00 
  20d0e2:	e8 a9 f8 ff ff       	callq  20c990 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E>
  20d0e7:	48 89 94 24 00 02 00 	mov    %rdx,0x200(%rsp)
  20d0ee:	00 
  20d0ef:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  20d0f6:	00 
  20d0f7:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  20d0fe:	00 
  20d0ff:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20d106:	00 
  20d107:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  20d10e:	00 
  20d10f:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20d116:	00 
            if res.is_err() {
  20d117:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  20d11e:	00 
  20d11f:	e8 ec e1 ff ff       	callq  20b310 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>
  20d124:	88 44 24 57          	mov    %al,0x57(%rsp)
  20d128:	8a 44 24 57          	mov    0x57(%rsp),%al
  20d12c:	a8 01                	test   $0x1,%al
  20d12e:	75 19                	jne    20d149 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x259>
  20d130:	eb 00                	jmp    20d132 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x242>
                &mut *mm::VirtualAddress::from_u64(frame_addr.as_u64() + self.phy_offset)
  20d132:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20d139:	00 
  20d13a:	e8 41 b3 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20d13f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d144:	e9 f7 00 00 00       	jmpq   20d240 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x350>
                panic!("{:?}", res.unwrap_err());
  20d149:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20d150:	00 
  20d151:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  20d158:	00 
  20d159:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  20d160:	00 
  20d161:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  20d168:	00 
  20d169:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
  20d170:	00 
  20d171:	48 8b b4 24 50 01 00 	mov    0x150(%rsp),%rsi
  20d178:	00 
  20d179:	48 8d 15 b8 ce 02 00 	lea    0x2ceb8(%rip),%rdx        # 23a038 <memcmp+0x12f8>
  20d180:	e8 5b df ff ff       	callq  20b0e0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>
  20d185:	48 89 94 24 10 02 00 	mov    %rdx,0x210(%rsp)
  20d18c:	00 
  20d18d:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  20d194:	00 
  20d195:	48 8b 84 24 08 02 00 	mov    0x208(%rsp),%rax
  20d19c:	00 
  20d19d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20d1a4:	00 
  20d1a5:	48 8b 84 24 10 02 00 	mov    0x210(%rsp),%rax
  20d1ac:	00 
  20d1ad:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20d1b4:	00 
  20d1b5:	48 8d 84 24 38 01 00 	lea    0x138(%rsp),%rax
  20d1bc:	00 
  20d1bd:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  20d1c4:	00 
  20d1c5:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
  20d1cc:	00 
  20d1cd:	48 89 bc 24 18 02 00 	mov    %rdi,0x218(%rsp)
  20d1d4:	00 
  20d1d5:	48 8d 35 84 14 00 00 	lea    0x1484(%rip),%rsi        # 20e660 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>
  20d1dc:	e8 9f 20 00 00       	callq  20f280 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>
  20d1e1:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d1e6:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20d1eb:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d1f0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20d1f5:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20d1fc:	00 
  20d1fd:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20d204:	00 
  20d205:	48 8d 8c 24 20 01 00 	lea    0x120(%rsp),%rcx
  20d20c:	00 
  20d20d:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20d214:	00 
  20d215:	48 8d 35 0c ce 02 00 	lea    0x2ce0c(%rip),%rsi        # 23a028 <memcmp+0x12e8>
  20d21c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20d222:	4c 89 c2             	mov    %r8,%rdx
  20d225:	e8 06 93 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20d22a:	48 8d 35 1f ce 02 00 	lea    0x2ce1f(%rip),%rsi        # 23a050 <memcmp+0x1310>
  20d231:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20d238:	00 
  20d239:	e8 82 8a 02 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20d23e:	0f 0b                	ud2    
  20d240:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20d247:	00 
  20d248:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                &mut *mm::VirtualAddress::from_u64(frame_addr.as_u64() + self.phy_offset)
  20d24d:	48 03 41 18          	add    0x18(%rcx),%rax
  20d251:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20d256:	0f 92 c0             	setb   %al
  20d259:	a8 01                	test   $0x1,%al
  20d25b:	75 11                	jne    20d26e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x37e>
  20d25d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20d262:	e8 69 b0 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20d267:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d26c:	eb 1a                	jmp    20d288 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x398>
  20d26e:	48 8d 3d 5b 35 ff ff 	lea    -0xcaa5(%rip),%rdi        # 2007d0 <str.0>
  20d275:	48 8d 15 ec cd 02 00 	lea    0x2cdec(%rip),%rdx        # 23a068 <memcmp+0x1328>
  20d27c:	be 1c 00 00 00       	mov    $0x1c,%esi
  20d281:	e8 6a 89 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d286:	0f 0b                	ud2    
  20d288:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20d28d:	e8 de c4 00 00       	callq  219770 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20d292:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d297:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d29c:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  20d2a3:	00 
            new_pt.reset();
  20d2a4:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
  20d2ab:	00 
  20d2ac:	e8 5f f8 ff ff       	callq  20cb10 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E>
            log::debug!("Created new page table at {:p}", new_pt);
  20d2b1:	48 c7 84 24 60 01 00 	movq   $0x4,0x160(%rsp)
  20d2b8:	00 04 00 00 00 
  20d2bd:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20d2c4:	00 
  20d2c5:	48 8d 35 2c 30 ff ff 	lea    -0xcfd4(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  20d2cc:	e8 ff 5c 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20d2d1:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d2d5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20d2d9:	a8 01                	test   $0x1,%al
  20d2db:	75 0c                	jne    20d2e9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x3f9>
  20d2dd:	eb 00                	jmp    20d2df <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x3ef>
  20d2df:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  20d2e6:	00 
  20d2e7:	eb 5a                	jmp    20d343 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x453>
  20d2e9:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  20d2f0:	00 
  20d2f1:	48 8b 3d 50 08 03 00 	mov    0x30850(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20d2f8:	0f b6 b4 24 2f 02 00 	movzbl 0x22f(%rsp),%esi
  20d2ff:	00 
  20d300:	e8 eb de 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20d305:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  20d30c:	00 
  20d30d:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  20d314:	00 
  20d315:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  20d31c:	00 
  20d31d:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20d324:	00 
  20d325:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  20d32c:	00 
  20d32d:	e8 9e 5c 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20d332:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20d336:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20d33a:	24 01                	and    $0x1,%al
  20d33c:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  20d343:	f6 84 24 6f 01 00 00 	testb  $0x1,0x16f(%rsp)
  20d34a:	01 
  20d34b:	75 15                	jne    20d362 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x472>
            return Some(new_pt);
  20d34d:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  20d354:	00 
  20d355:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d35c:	00 
  20d35d:	e9 64 fc ff ff       	jmpq   20cfc6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xd6>
            log::debug!("Created new page table at {:p}", new_pt);
  20d362:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
  20d369:	00 
  20d36a:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  20d371:	00 
  20d372:	48 8b bc 24 b8 01 00 	mov    0x1b8(%rsp),%rdi
  20d379:	00 
  20d37a:	48 89 bc 24 20 02 00 	mov    %rdi,0x220(%rsp)
  20d381:	00 
  20d382:	48 8d 35 47 76 00 00 	lea    0x7647(%rip),%rsi        # 2149d0 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h50650571f0c00760E>
  20d389:	e8 32 21 00 00       	callq  20f4c0 <_ZN4core3fmt10ArgumentV13new17ha27f7629ef6a1995E>
  20d38e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d393:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20d398:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d39d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20d3a2:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  20d3a9:	00 
  20d3aa:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20d3b1:	00 
  20d3b2:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  20d3b9:	00 
  20d3ba:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  20d3c1:	00 
  20d3c2:	48 8d 35 b7 cc 02 00 	lea    0x2ccb7(%rip),%rsi        # 23a080 <memcmp+0x1340>
  20d3c9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20d3cf:	4c 89 c2             	mov    %r8,%rdx
  20d3d2:	e8 59 91 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20d3d7:	48 8b b4 24 60 01 00 	mov    0x160(%rsp),%rsi
  20d3de:	00 
  20d3df:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  20d3e6:	00 
  20d3e7:	48 8d 15 a2 cc 02 00 	lea    0x2cca2(%rip),%rdx        # 23a090 <memcmp+0x1350>
  20d3ee:	e8 8d 59 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20d3f3:	e9 55 ff ff ff       	jmpq   20d34d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x45d>
  20d3f8:	cc                   	int3   
  20d3f9:	cc                   	int3   
  20d3fa:	cc                   	int3   
  20d3fb:	cc                   	int3   
  20d3fc:	cc                   	int3   
  20d3fd:	cc                   	int3   
  20d3fe:	cc                   	int3   
  20d3ff:	cc                   	int3   

000000000020d400 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>:
    fn walk_hierarchy(
  20d400:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20d407:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  20d40c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20d411:	44 88 c0             	mov    %r8b,%al
  20d414:	88 44 24 75          	mov    %al,0x75(%rsp)
  20d418:	88 4c 24 76          	mov    %cl,0x76(%rsp)
  20d41c:	88 54 24 77          	mov    %dl,0x77(%rsp)
  20d420:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  20d427:	00 
  20d428:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  20d42f:	00 
  20d430:	80 e2 01             	and    $0x1,%dl
  20d433:	88 94 24 05 01 00 00 	mov    %dl,0x105(%rsp)
  20d43a:	80 e1 01             	and    $0x1,%cl
  20d43d:	88 8c 24 06 01 00 00 	mov    %cl,0x106(%rsp)
  20d444:	24 01                	and    $0x1,%al
  20d446:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
        let l4_table: &mut PageTable = unsafe { &mut *self.l4_virtual_address.get_mut_ptr() };
  20d44d:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  20d451:	e8 1a c3 00 00       	callq  219770 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20d456:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20d45b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  20d460:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20d465:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20d46c:	00 
        let l4_index = address.get_level_index(mm::PageTableLevel::Level4);
  20d46d:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  20d474:	00 
  20d475:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  20d47c:	00 
  20d47d:	e8 ae ae 01 00       	callq  228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d482:	66 89 84 24 8c 00 00 	mov    %ax,0x8c(%rsp)
  20d489:	00 
  20d48a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l3_index = address.get_level_index(mm::PageTableLevel::Level3);
  20d48f:	c6 84 24 93 00 00 00 	movb   $0x1,0x93(%rsp)
  20d496:	01 
  20d497:	0f b6 b4 24 93 00 00 	movzbl 0x93(%rsp),%esi
  20d49e:	00 
  20d49f:	e8 8c ae 01 00       	callq  228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d4a4:	66 89 84 24 90 00 00 	mov    %ax,0x90(%rsp)
  20d4ab:	00 
  20d4ac:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l2_index = address.get_level_index(mm::PageTableLevel::Level2);
  20d4b1:	c6 84 24 97 00 00 00 	movb   $0x2,0x97(%rsp)
  20d4b8:	02 
  20d4b9:	0f b6 b4 24 97 00 00 	movzbl 0x97(%rsp),%esi
  20d4c0:	00 
  20d4c1:	e8 6a ae 01 00       	callq  228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d4c6:	66 89 84 24 94 00 00 	mov    %ax,0x94(%rsp)
  20d4cd:	00 
        let l4_entry: &mut PageEntry = &mut l4_table.entries[l4_index.as_usize()];
  20d4ce:	48 8d bc 24 8c 00 00 	lea    0x8c(%rsp),%rdi
  20d4d5:	00 
  20d4d6:	e8 f5 f2 ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d4db:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d4e0:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20d4e5:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d4eb:	0f 92 c0             	setb   %al
  20d4ee:	a8 01                	test   $0x1,%al
  20d4f0:	75 02                	jne    20d4f4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0xf4>
  20d4f2:	eb 37                	jmp    20d52b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x12b>
  20d4f4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  20d4f9:	8a 44 24 77          	mov    0x77(%rsp),%al
  20d4fd:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  20d502:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  20d507:	48 c1 e1 03          	shl    $0x3,%rcx
  20d50b:	48 01 ce             	add    %rcx,%rsi
  20d50e:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  20d515:	00 
        let l3_table_opt = self.get_or_create_table(l4_entry, create);
  20d516:	0f b6 d0             	movzbl %al,%edx
  20d519:	83 e2 01             	and    $0x1,%edx
  20d51c:	e8 cf f9 ff ff       	callq  20cef0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20d521:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20d528:	00 
  20d529:	eb 18                	jmp    20d543 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x143>
  20d52b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let l4_entry: &mut PageEntry = &mut l4_table.entries[l4_index.as_usize()];
  20d530:	48 8d 15 91 cb 02 00 	lea    0x2cb91(%rip),%rdx        # 23a0c8 <memcmp+0x1388>
  20d537:	be 00 02 00 00       	mov    $0x200,%esi
  20d53c:	e8 ff 86 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d541:	0f 0b                	ud2    
        if l3_table_opt.is_none() {
  20d543:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20d54a:	00 
  20d54b:	e8 30 43 00 00       	callq  211880 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20d550:	88 44 24 57          	mov    %al,0x57(%rsp)
  20d554:	8a 44 24 57          	mov    0x57(%rsp),%al
  20d558:	a8 01                	test   $0x1,%al
  20d55a:	75 25                	jne    20d581 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x181>
  20d55c:	eb 00                	jmp    20d55e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x15e>
        let l3_table = l3_table_opt.unwrap();
  20d55e:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20d565:	00 
  20d566:	48 8d 35 73 cb 02 00 	lea    0x2cb73(%rip),%rsi        # 23a0e0 <memcmp+0x13a0>
  20d56d:	e8 2e 40 00 00       	callq  2115a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20d572:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d577:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  20d57e:	00 
  20d57f:	eb 1c                	jmp    20d59d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x19d>
            return None;
  20d581:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  20d588:	00 00 00 00 00 
    }
  20d58d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20d594:	00 
  20d595:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20d59c:	c3                   	retq   
        let l3_entry: &mut PageEntry = &mut l3_table.entries[l3_index.as_usize()];
  20d59d:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  20d5a4:	00 
  20d5a5:	e8 26 f2 ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d5aa:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20d5af:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d5b4:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d5ba:	0f 92 c0             	setb   %al
  20d5bd:	a8 01                	test   $0x1,%al
  20d5bf:	75 02                	jne    20d5c3 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x1c3>
  20d5c1:	eb 28                	jmp    20d5eb <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x1eb>
  20d5c3:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d5c7:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20d5cc:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20d5d1:	48 c1 e2 03          	shl    $0x3,%rdx
  20d5d5:	48 01 d1             	add    %rdx,%rcx
  20d5d8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20d5dd:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20d5e4:	00 
        if l3 {
  20d5e5:	a8 01                	test   $0x1,%al
  20d5e7:	75 3d                	jne    20d626 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x226>
  20d5e9:	eb 18                	jmp    20d603 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x203>
  20d5eb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let l3_entry: &mut PageEntry = &mut l3_table.entries[l3_index.as_usize()];
  20d5f0:	48 8d 15 01 cb 02 00 	lea    0x2cb01(%rip),%rdx        # 23a0f8 <memcmp+0x13b8>
  20d5f7:	be 00 02 00 00       	mov    $0x200,%esi
  20d5fc:	e8 3f 86 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d601:	0f 0b                	ud2    
  20d603:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20d608:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  20d60d:	8a 44 24 77          	mov    0x77(%rsp),%al
        let l2_table_opt = self.get_or_create_table(l3_entry, create);
  20d611:	0f b6 d0             	movzbl %al,%edx
  20d614:	83 e2 01             	and    $0x1,%edx
  20d617:	e8 d4 f8 ff ff       	callq  20cef0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20d61c:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d623:	00 
  20d624:	eb 12                	jmp    20d638 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x238>
  20d626:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Some(l3_entry);
  20d62b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20d632:	00 
  20d633:	e9 55 ff ff ff       	jmpq   20d58d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
        if l2_table_opt.is_none() {
  20d638:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20d63f:	00 
  20d640:	e8 3b 42 00 00       	callq  211880 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20d645:	88 44 24 37          	mov    %al,0x37(%rsp)
  20d649:	8a 44 24 37          	mov    0x37(%rsp),%al
  20d64d:	a8 01                	test   $0x1,%al
  20d64f:	75 25                	jne    20d676 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x276>
  20d651:	eb 00                	jmp    20d653 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x253>
        let l2_table = l2_table_opt.unwrap();
  20d653:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  20d65a:	00 
  20d65b:	48 8d 35 ae ca 02 00 	lea    0x2caae(%rip),%rsi        # 23a110 <memcmp+0x13d0>
  20d662:	e8 39 3f 00 00       	callq  2115a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20d667:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d66c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20d673:	00 
  20d674:	eb 11                	jmp    20d687 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x287>
            return None;
  20d676:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  20d67d:	00 00 00 00 00 
  20d682:	e9 06 ff ff ff       	jmpq   20d58d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
        let l2_entry: &mut PageEntry = &mut l2_table.entries[l2_index.as_usize()];
  20d687:	48 8d bc 24 94 00 00 	lea    0x94(%rsp),%rdi
  20d68e:	00 
  20d68f:	e8 3c f1 ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d694:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d699:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d69e:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d6a4:	0f 92 c0             	setb   %al
  20d6a7:	a8 01                	test   $0x1,%al
  20d6a9:	75 02                	jne    20d6ad <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ad>
  20d6ab:	eb 28                	jmp    20d6d5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2d5>
  20d6ad:	8a 44 24 76          	mov    0x76(%rsp),%al
  20d6b1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20d6b6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20d6bb:	48 c1 e2 03          	shl    $0x3,%rdx
  20d6bf:	48 01 d1             	add    %rdx,%rcx
  20d6c2:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20d6c7:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  20d6ce:	00 
        if assert_huge_page {
  20d6cf:	a8 01                	test   $0x1,%al
  20d6d1:	75 2c                	jne    20d6ff <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ff>
  20d6d3:	eb 18                	jmp    20d6ed <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ed>
  20d6d5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let l2_entry: &mut PageEntry = &mut l2_table.entries[l2_index.as_usize()];
  20d6da:	48 8d 15 47 ca 02 00 	lea    0x2ca47(%rip),%rdx        # 23a128 <memcmp+0x13e8>
  20d6e1:	be 00 02 00 00       	mov    $0x200,%esi
  20d6e6:	e8 55 85 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d6eb:	0f 0b                	ud2    
  20d6ed:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Some(l2_entry)
  20d6f2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20d6f9:	00 
    }
  20d6fa:	e9 8e fe ff ff       	jmpq   20d58d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
  20d6ff:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            assert_eq!(l2_entry.has_flag(PageEntryFlags::HUGE_PAGE), true);
  20d704:	be 80 00 00 00       	mov    $0x80,%esi
  20d709:	e8 b2 f3 ff ff       	callq  20cac0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>
  20d70e:	24 01                	and    $0x1,%al
  20d710:	88 84 24 be 00 00 00 	mov    %al,0xbe(%rsp)
  20d717:	48 8d 84 24 be 00 00 	lea    0xbe(%rsp),%rax
  20d71e:	00 
  20d71f:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20d726:	00 
  20d727:	48 8d 05 8b 2f ff ff 	lea    -0xd075(%rip),%rax        # 2006b9 <str.0+0x99>
  20d72e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20d735:	00 
  20d736:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20d73d:	00 
  20d73e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d743:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20d74a:	00 
  20d74b:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  20d752:	00 
  20d753:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20d758:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  20d75f:	00 
  20d760:	8a 00                	mov    (%rax),%al
  20d762:	34 ff                	xor    $0xff,%al
  20d764:	a8 01                	test   $0x1,%al
  20d766:	75 02                	jne    20d76a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x36a>
  20d768:	eb 83                	jmp    20d6ed <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ed>
  20d76a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20d76f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20d774:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20d77b:	00 
  20d77c:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  20d783:	00 00 00 00 00 
  20d788:	4c 8d 05 b1 c9 02 00 	lea    0x2c9b1(%rip),%r8        # 23a140 <memcmp+0x1400>
  20d78f:	31 ff                	xor    %edi,%edi
  20d791:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  20d798:	00 
  20d799:	e8 f2 2f 01 00       	callq  220790 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  20d79e:	0f 0b                	ud2    

000000000020d7a0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E>:
    pub fn translate_to_frame(&self, address: &mm::VirtualAddress) -> Option<Frame> {
  20d7a0:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  20d7a7:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  20d7ac:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20d7b1:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  20d7b8:	00 
  20d7b9:	48 89 b4 24 c8 00 00 	mov    %rsi,0xc8(%rsp)
  20d7c0:	00 
        let resolved_opt = self.walk_hierarchy(address, false, false, false);
  20d7c1:	45 31 c0             	xor    %r8d,%r8d
  20d7c4:	44 89 c2             	mov    %r8d,%edx
  20d7c7:	44 89 c1             	mov    %r8d,%ecx
  20d7ca:	e8 31 fc ff ff       	callq  20d400 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>
  20d7cf:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
        if resolved_opt.is_none() {
  20d7d4:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20d7d9:	e8 72 40 00 00       	callq  211850 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>
  20d7de:	88 44 24 57          	mov    %al,0x57(%rsp)
  20d7e2:	8a 44 24 57          	mov    0x57(%rsp),%al
  20d7e6:	a8 01                	test   $0x1,%al
  20d7e8:	75 22                	jne    20d80c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x6c>
  20d7ea:	eb 00                	jmp    20d7ec <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x4c>
        let l2_entry = resolved_opt.unwrap();
  20d7ec:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  20d7f1:	48 8d 35 60 c9 02 00 	lea    0x2c960(%rip),%rsi        # 23a158 <memcmp+0x1418>
  20d7f8:	e8 73 3c 00 00       	callq  211470 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>
  20d7fd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d802:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20d809:	00 
  20d80a:	eb 1b                	jmp    20d827 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x87>
            return None;
  20d80c:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d813:	00 00 
    }
  20d815:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20d81a:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  20d81f:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  20d826:	c3                   	retq   
  20d827:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        if l2_entry.has_flag(PageEntryFlags::HUGE_PAGE) {
  20d82c:	be 80 00 00 00       	mov    $0x80,%esi
  20d831:	e8 8a f2 ff ff       	callq  20cac0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>
  20d836:	88 44 24 47          	mov    %al,0x47(%rsp)
  20d83a:	8a 44 24 47          	mov    0x47(%rsp),%al
  20d83e:	a8 01                	test   $0x1,%al
  20d840:	75 26                	jne    20d868 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0xc8>
  20d842:	eb 00                	jmp    20d844 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0xa4>
  20d844:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let l1_index = address.get_level_index(mm::PageTableLevel::Level1);
  20d849:	c6 84 24 9f 00 00 00 	movb   $0x3,0x9f(%rsp)
  20d850:	03 
  20d851:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  20d858:	00 
  20d859:	e8 d2 aa 01 00       	callq  228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d85e:	66 89 84 24 9c 00 00 	mov    %ax,0x9c(%rsp)
  20d865:	00 
  20d866:	eb 5d                	jmp    20d8c5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x125>
  20d868:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
            return Frame::from_aligned_address(l2_entry.addr()).ok();
  20d86d:	e8 de f0 ff ff       	callq  20c950 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20d872:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d877:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20d87c:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20d883:	00 
  20d884:	e8 a7 a2 00 00       	callq  217b30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>
  20d889:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20d890:	00 
  20d891:	e8 da d8 ff ff       	callq  20b170 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>
  20d896:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  20d89d:	00 
  20d89e:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20d8a5:	00 
  20d8a6:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20d8ad:	00 
  20d8ae:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20d8b3:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20d8ba:	00 
  20d8bb:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20d8c0:	e9 50 ff ff ff       	jmpq   20d815 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20d8c5:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  20d8ca:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l1_table_opt = self.get_or_create_table(l2_entry, false);
  20d8cf:	31 d2                	xor    %edx,%edx
  20d8d1:	e8 1a f6 ff ff       	callq  20cef0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20d8d6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d8dd:	00 
        if l1_table_opt.is_none() {
  20d8de:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20d8e5:	00 
  20d8e6:	e8 95 3f 00 00       	callq  211880 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20d8eb:	88 44 24 37          	mov    %al,0x37(%rsp)
  20d8ef:	8a 44 24 37          	mov    0x37(%rsp),%al
  20d8f3:	a8 01                	test   $0x1,%al
  20d8f5:	75 25                	jne    20d91c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x17c>
  20d8f7:	eb 00                	jmp    20d8f9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x159>
        let l1_table = l1_table_opt.unwrap();
  20d8f9:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  20d900:	00 
  20d901:	48 8d 35 68 c8 02 00 	lea    0x2c868(%rip),%rsi        # 23a170 <memcmp+0x1430>
  20d908:	e8 93 3c 00 00       	callq  2115a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20d90d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d912:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20d919:	00 
  20d91a:	eb 0e                	jmp    20d92a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x18a>
            return None;
  20d91c:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d923:	00 00 
  20d925:	e9 eb fe ff ff       	jmpq   20d815 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  20d92a:	48 8d bc 24 9c 00 00 	lea    0x9c(%rsp),%rdi
  20d931:	00 
  20d932:	e8 99 ee ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d937:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d93c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d941:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d947:	0f 92 c0             	setb   %al
  20d94a:	a8 01                	test   $0x1,%al
  20d94c:	75 02                	jne    20d950 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1b0>
  20d94e:	eb 29                	jmp    20d979 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1d9>
  20d950:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d955:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20d95a:	48 c1 e0 03          	shl    $0x3,%rax
  20d95e:	48 01 c7             	add    %rax,%rdi
  20d961:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d966:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  20d96d:	00 
        if !l1_entry.is_mapped() {
  20d96e:	e8 bd ef ff ff       	callq  20c930 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20d973:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d977:	eb 18                	jmp    20d991 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1f1>
  20d979:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  20d97e:	48 8d 15 03 c8 02 00 	lea    0x2c803(%rip),%rdx        # 23a188 <memcmp+0x1448>
  20d985:	be 00 02 00 00       	mov    $0x200,%esi
  20d98a:	e8 b1 82 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d98f:	0f 0b                	ud2    
  20d991:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        if !l1_entry.is_mapped() {
  20d995:	34 ff                	xor    $0xff,%al
  20d997:	a8 01                	test   $0x1,%al
  20d999:	75 11                	jne    20d9ac <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x20c>
  20d99b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  20d9a0:	e8 ab ef ff ff       	callq  20c950 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20d9a5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d9aa:	eb 0e                	jmp    20d9ba <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x21a>
            return None;
  20d9ac:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d9b3:	00 00 
  20d9b5:	e9 5b fe ff ff       	jmpq   20d815 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20d9ba:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  20d9bf:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20d9c6:	00 
  20d9c7:	e8 64 a1 00 00       	callq  217b30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>
  20d9cc:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20d9d3:	00 
  20d9d4:	e8 97 d7 ff ff       	callq  20b170 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>
  20d9d9:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  20d9e0:	00 
  20d9e1:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20d9e8:	00 
  20d9e9:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20d9f0:	00 
  20d9f1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20d9f6:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20d9fd:	00 
  20d9fe:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20da03:	e9 0d fe ff ff       	jmpq   20d815 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20da08:	cc                   	int3   
  20da09:	cc                   	int3   
  20da0a:	cc                   	int3   
  20da0b:	cc                   	int3   
  20da0c:	cc                   	int3   
  20da0d:	cc                   	int3   
  20da0e:	cc                   	int3   
  20da0f:	cc                   	int3   

000000000020da10 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E>:
    pub fn translate(&self, addr: mm::VirtualAddress) -> Option<mm::PhysicalAddress> {
  20da10:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  20da17:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20da1c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20da21:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
        let translated_frame = self.translate_to_frame(&addr);
  20da26:	e8 75 fd ff ff       	callq  20d7a0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E>
  20da2b:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  20da30:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20da35:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20da3a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20da3f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20da44:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if translated_frame.is_none() {
  20da49:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20da4e:	e8 4d 3f 00 00       	callq  2119a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20da53:	88 44 24 27          	mov    %al,0x27(%rsp)
  20da57:	8a 44 24 27          	mov    0x27(%rsp),%al
  20da5b:	a8 01                	test   $0x1,%al
  20da5d:	75 43                	jne    20daa2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x92>
  20da5f:	eb 00                	jmp    20da61 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x51>
        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  20da61:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20da66:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20da6b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20da70:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20da75:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  20da7a:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20da7f:	48 8d 15 1a c7 02 00 	lea    0x2c71a(%rip),%rdx        # 23a1a0 <memcmp+0x1460>
  20da86:	e8 35 3a 00 00       	callq  2114c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20da8b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20da92:	00 
  20da93:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20da9a:	00 
  20da9b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20daa0:	eb 1b                	jmp    20dabd <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0xad>
            return None;
  20daa2:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  20daa9:	00 00 
    }
  20daab:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20dab0:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20dab5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  20dabc:	c3                   	retq   
        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  20dabd:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20dac2:	e8 79 a1 00 00       	callq  217c40 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>
  20dac7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20dacc:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20dad3:	00 
        let phy_offset = addr.get_page_offset() as u64;
  20dad4:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20dad9:	e8 92 a9 01 00       	callq  228470 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17ha2e641ae4c72d812E>
  20dade:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  20dae3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20dae8:	66 8b 4c 24 16       	mov    0x16(%rsp),%cx
  20daed:	0f b7 c9             	movzwl %cx,%ecx
  20daf0:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20daf7:	00 
            phy_u64_frame_addr + phy_offset,
  20daf8:	48 01 c8             	add    %rcx,%rax
  20dafb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20db00:	0f 92 c0             	setb   %al
  20db03:	a8 01                	test   $0x1,%al
  20db05:	75 10                	jne    20db17 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x107>
  20db07:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Some(mm::PhysicalAddress::from_u64(
  20db0c:	e8 7f a9 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  20db11:	48 89 04 24          	mov    %rax,(%rsp)
  20db15:	eb 1a                	jmp    20db31 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x121>
            phy_u64_frame_addr + phy_offset,
  20db17:	48 8d 3d b2 2c ff ff 	lea    -0xd34e(%rip),%rdi        # 2007d0 <str.0>
  20db1e:	48 8d 15 93 c6 02 00 	lea    0x2c693(%rip),%rdx        # 23a1b8 <memcmp+0x1478>
  20db25:	be 1c 00 00 00       	mov    $0x1c,%esi
  20db2a:	e8 c1 80 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20db2f:	0f 0b                	ud2    
  20db31:	48 8b 04 24          	mov    (%rsp),%rax
        Some(mm::PhysicalAddress::from_u64(
  20db35:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20db3a:	48 c7 44 24 30 01 00 	movq   $0x1,0x30(%rsp)
  20db41:	00 00 
    }
  20db43:	e9 63 ff ff ff       	jmpq   20daab <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x9b>
  20db48:	cc                   	int3   
  20db49:	cc                   	int3   
  20db4a:	cc                   	int3   
  20db4b:	cc                   	int3   
  20db4c:	cc                   	int3   
  20db4d:	cc                   	int3   
  20db4e:	cc                   	int3   
  20db4f:	cc                   	int3   

000000000020db50 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE>:
    pub fn map_huge_page(
  20db50:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  20db57:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20db5c:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20db61:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  20db66:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20db6b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20db70:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  20db77:	00 
  20db78:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20db7f:	00 
  20db80:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20db85:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  20db8c:	00 
  20db8d:	48 89 8c 24 18 01 00 	mov    %rcx,0x118(%rsp)
  20db94:	00 
        let resolved_opt = self.walk_hierarchy(&page.addr(), true, false, true);
  20db95:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20db9a:	e8 91 ec ff ff       	callq  20c830 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20db9f:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20dba6:	00 
  20dba7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  20dbac:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  20dbb3:	00 
  20dbb4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20dbba:	31 c9                	xor    %ecx,%ecx
  20dbbc:	44 89 c2             	mov    %r8d,%edx
  20dbbf:	e8 3c f8 ff ff       	callq  20d400 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>
  20dbc4:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20dbcb:	00 
        if resolved_opt.is_none() {
  20dbcc:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20dbd3:	00 
  20dbd4:	e8 77 3c 00 00       	callq  211850 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>
  20dbd9:	88 44 24 57          	mov    %al,0x57(%rsp)
  20dbdd:	8a 44 24 57          	mov    0x57(%rsp),%al
  20dbe1:	a8 01                	test   $0x1,%al
  20dbe3:	75 25                	jne    20dc0a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0xba>
  20dbe5:	eb 00                	jmp    20dbe7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x97>
        let l3_entry = resolved_opt.unwrap();
  20dbe7:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20dbee:	00 
  20dbef:	48 8d 35 da c5 02 00 	lea    0x2c5da(%rip),%rsi        # 23a1d0 <memcmp+0x1490>
  20dbf6:	e8 75 38 00 00       	callq  211470 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>
  20dbfb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20dc00:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20dc07:	00 
  20dc08:	eb 5e                	jmp    20dc68 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x118>
            return Err(PagingError::MappingError(page.as_u64()));
  20dc0a:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20dc0f:	e8 2c ec ff ff       	callq  20c840 <_ZN9r3_kernel2mm6paging4Page6as_u6417h562c4c3e06a8062eE>
  20dc14:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20dc19:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20dc1e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20dc25:	00 
  20dc26:	66 c7 84 24 a8 00 00 	movw   $0x4,0xa8(%rsp)
  20dc2d:	00 04 00 
  20dc30:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20dc37:	00 
  20dc38:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20dc3f:	00 
  20dc40:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20dc47:	00 
  20dc48:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20dc4f:	00 
    }
  20dc50:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20dc57:	00 
  20dc58:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  20dc5f:	00 
  20dc60:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  20dc67:	c3                   	retq   
        let l2_index = page.addr().get_level_index(mm::PageTableLevel::Level2);
  20dc68:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20dc6d:	e8 be eb ff ff       	callq  20c830 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20dc72:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20dc79:	00 
  20dc7a:	c6 84 24 cf 00 00 00 	movb   $0x2,0xcf(%rsp)
  20dc81:	02 
  20dc82:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20dc89:	00 
  20dc8a:	0f b6 b4 24 cf 00 00 	movzbl 0xcf(%rsp),%esi
  20dc91:	00 
  20dc92:	e8 99 a6 01 00       	callq  228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20dc97:	66 89 84 24 be 00 00 	mov    %ax,0xbe(%rsp)
  20dc9e:	00 
  20dc9f:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  20dca4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l2_table_opt = self.get_or_create_table(l3_entry, true);
  20dca9:	ba 01 00 00 00       	mov    $0x1,%edx
  20dcae:	e8 3d f2 ff ff       	callq  20cef0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20dcb3:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20dcba:	00 
        if l2_table_opt.is_none() {
  20dcbb:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  20dcc2:	00 
  20dcc3:	e8 b8 3b 00 00       	callq  211880 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20dcc8:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20dccc:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20dcd0:	a8 01                	test   $0x1,%al
  20dcd2:	75 25                	jne    20dcf9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x1a9>
  20dcd4:	eb 00                	jmp    20dcd6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x186>
        let l2_table = l2_table_opt.unwrap();
  20dcd6:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  20dcdd:	00 
  20dcde:	48 8d 35 03 c5 02 00 	lea    0x2c503(%rip),%rsi        # 23a1e8 <memcmp+0x14a8>
  20dce5:	e8 b6 38 00 00       	callq  2115a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20dcea:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20dcef:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20dcf6:	00 
  20dcf7:	eb 60                	jmp    20dd59 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x209>
            return Err(PagingError::MappingError(page.addr().as_u64()));
  20dcf9:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20dcfe:	e8 2d eb ff ff       	callq  20c830 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20dd03:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20dd0a:	00 
  20dd0b:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20dd12:	00 
  20dd13:	e8 a8 a5 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20dd18:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20dd1d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20dd22:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20dd29:	00 
  20dd2a:	66 c7 84 24 d8 00 00 	movw   $0x4,0xd8(%rsp)
  20dd31:	00 04 00 
  20dd34:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20dd3b:	00 
  20dd3c:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20dd43:	00 
  20dd44:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20dd4b:	00 
  20dd4c:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20dd53:	00 
  20dd54:	e9 f7 fe ff ff       	jmpq   20dc50 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
        let page_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  20dd59:	48 8d bc 24 be 00 00 	lea    0xbe(%rsp),%rdi
  20dd60:	00 
  20dd61:	e8 6a ea ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20dd66:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20dd6b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20dd70:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20dd76:	0f 92 c0             	setb   %al
  20dd79:	a8 01                	test   $0x1,%al
  20dd7b:	75 02                	jne    20dd7f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x22f>
  20dd7d:	eb 24                	jmp    20dda3 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x253>
  20dd7f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20dd84:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20dd89:	48 c1 e0 03          	shl    $0x3,%rax
  20dd8d:	48 01 c7             	add    %rax,%rdi
  20dd90:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  20dd97:	00 
        if page_entry.is_mapped() {
  20dd98:	e8 93 eb ff ff       	callq  20c930 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20dd9d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20dda1:	eb 18                	jmp    20ddbb <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x26b>
  20dda3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let page_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  20dda8:	48 8d 15 51 c4 02 00 	lea    0x2c451(%rip),%rdx        # 23a200 <memcmp+0x14c0>
  20ddaf:	be 00 02 00 00       	mov    $0x200,%esi
  20ddb4:	e8 87 7e 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ddb9:	0f 0b                	ud2    
  20ddbb:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        if page_entry.is_mapped() {
  20ddbf:	a8 01                	test   $0x1,%al
  20ddc1:	75 16                	jne    20ddd9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x289>
  20ddc3:	eb 00                	jmp    20ddc5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x275>
        l2_table.entries[l2_index.as_usize()].set_phy_frame(frame, flags);
  20ddc5:	48 8d bc 24 be 00 00 	lea    0xbe(%rsp),%rdi
  20ddcc:	00 
  20ddcd:	e8 fe e9 ff ff       	callq  20c7d0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20ddd2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ddd7:	eb 60                	jmp    20de39 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x2e9>
            return Err(PagingError::MappingError(page.addr().as_u64()));
  20ddd9:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20ddde:	e8 4d ea ff ff       	callq  20c830 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20dde3:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20ddea:	00 
  20ddeb:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20ddf2:	00 
  20ddf3:	e8 c8 a4 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20ddf8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ddfd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20de02:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20de09:	00 
  20de0a:	66 c7 84 24 f0 00 00 	movw   $0x4,0xf0(%rsp)
  20de11:	00 04 00 
  20de14:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20de1b:	00 
  20de1c:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20de23:	00 
  20de24:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20de2b:	00 
  20de2c:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20de33:	00 
  20de34:	e9 17 fe ff ff       	jmpq   20dc50 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
  20de39:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        l2_table.entries[l2_index.as_usize()].set_phy_frame(frame, flags);
  20de3e:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20de44:	0f 92 c0             	setb   %al
  20de47:	a8 01                	test   $0x1,%al
  20de49:	75 02                	jne    20de4d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x2fd>
  20de4b:	eb 32                	jmp    20de7f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x32f>
  20de4d:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20de52:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20de57:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20de5c:	48 c1 e0 03          	shl    $0x3,%rax
  20de60:	48 01 c7             	add    %rax,%rdi
  20de63:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20de68:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20de6f:	00 
  20de70:	48 8b b4 24 08 01 00 	mov    0x108(%rsp),%rsi
  20de77:	00 
  20de78:	e8 e3 eb ff ff       	callq  20ca60 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17h15fa22b15023e643E>
  20de7d:	eb 18                	jmp    20de97 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x347>
  20de7f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20de84:	48 8d 15 8d c3 02 00 	lea    0x2c38d(%rip),%rdx        # 23a218 <memcmp+0x14d8>
  20de8b:	be 00 02 00 00       	mov    $0x200,%esi
  20de90:	e8 ab 7d 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20de95:	0f 0b                	ud2    
        Ok(())
  20de97:	66 c7 84 24 88 00 00 	movw   $0x7,0x88(%rsp)
  20de9e:	00 07 00 
    }
  20dea1:	e9 aa fd ff ff       	jmpq   20dc50 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
  20dea6:	cc                   	int3   
  20dea7:	cc                   	int3   
  20dea8:	cc                   	int3   
  20dea9:	cc                   	int3   
  20deaa:	cc                   	int3   
  20deab:	cc                   	int3   
  20deac:	cc                   	int3   
  20dead:	cc                   	int3   
  20deae:	cc                   	int3   
  20deaf:	cc                   	int3   

000000000020deb0 <_ZN9r3_kernel2mm6paging9PageRange3new17h47b633cb9e347323E>:
    pub fn new(start: mm::VirtualAddress, n: usize, size: PageSize) -> Self {
  20deb0:	48 83 ec 18          	sub    $0x18,%rsp
  20deb4:	48 89 f8             	mov    %rdi,%rax
  20deb7:	48 89 34 24          	mov    %rsi,(%rsp)
  20debb:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20dec0:	88 4c 24 17          	mov    %cl,0x17(%rsp)
        PageRange { start, n, size }
  20dec4:	48 89 37             	mov    %rsi,(%rdi)
  20dec7:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  20decb:	88 4f 10             	mov    %cl,0x10(%rdi)
    }
  20dece:	48 83 c4 18          	add    $0x18,%rsp
  20ded2:	c3                   	retq   
  20ded3:	cc                   	int3   
  20ded4:	cc                   	int3   
  20ded5:	cc                   	int3   
  20ded6:	cc                   	int3   
  20ded7:	cc                   	int3   
  20ded8:	cc                   	int3   
  20ded9:	cc                   	int3   
  20deda:	cc                   	int3   
  20dedb:	cc                   	int3   
  20dedc:	cc                   	int3   
  20dedd:	cc                   	int3   
  20dede:	cc                   	int3   
  20dedf:	cc                   	int3   

000000000020dee0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>:
    pub fn new(page_range: PageRange) -> Self {
  20dee0:	48 83 ec 18          	sub    $0x18,%rsp
  20dee4:	48 89 f8             	mov    %rdi,%rax
            page_range,
  20dee7:	48 8b 0e             	mov    (%rsi),%rcx
  20deea:	48 89 0c 24          	mov    %rcx,(%rsp)
  20deee:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  20def2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20def7:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  20defb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
        PageRangeIterator {
  20df00:	48 8b 0c 24          	mov    (%rsp),%rcx
  20df04:	48 89 0f             	mov    %rcx,(%rdi)
  20df07:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20df0c:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  20df10:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20df15:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  20df19:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
  20df20:	00 
    }
  20df21:	48 83 c4 18          	add    $0x18,%rsp
  20df25:	c3                   	retq   
  20df26:	cc                   	int3   
  20df27:	cc                   	int3   
  20df28:	cc                   	int3   
  20df29:	cc                   	int3   
  20df2a:	cc                   	int3   
  20df2b:	cc                   	int3   
  20df2c:	cc                   	int3   
  20df2d:	cc                   	int3   
  20df2e:	cc                   	int3   
  20df2f:	cc                   	int3   

000000000020df30 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E>:
    fn next(&mut self) -> Option<Self::Item> {
  20df30:	48 83 ec 78          	sub    $0x78,%rsp
  20df34:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20df39:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        if self.current >= self.page_range.n {
  20df3e:	48 8b 47 18          	mov    0x18(%rdi),%rax
  20df42:	48 3b 47 08          	cmp    0x8(%rdi),%rax
  20df46:	73 11                	jae    20df59 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x29>
  20df48:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20df4d:	e8 6e a3 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20df52:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20df57:	eb 18                	jmp    20df71 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x41>
            return None;
  20df59:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20df60:	00 00 
    }
  20df62:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20df67:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  20df6c:	48 83 c4 78          	add    $0x78,%rsp
  20df70:	c3                   	retq   
  20df71:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20df76:	48 8b 47 18          	mov    0x18(%rdi),%rax
  20df7a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20df7f:	48 83 c7 10          	add    $0x10,%rdi
  20df83:	e8 d8 e7 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20df88:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20df8d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20df92:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20df97:	48 f7 e1             	mul    %rcx
  20df9a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20df9f:	0f 90 c0             	seto   %al
  20dfa2:	a8 01                	test   $0x1,%al
  20dfa4:	75 1b                	jne    20dfc1 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x91>
  20dfa6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20dfab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20dfb0:	48 01 c8             	add    %rcx,%rax
  20dfb3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20dfb8:	0f 92 c0             	setb   %al
  20dfbb:	a8 01                	test   $0x1,%al
  20dfbd:	75 2d                	jne    20dfec <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xbc>
  20dfbf:	eb 1a                	jmp    20dfdb <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xab>
  20dfc1:	48 8d 3d d8 28 ff ff 	lea    -0xd728(%rip),%rdi        # 2008a0 <str.2>
  20dfc8:	48 8d 15 61 c2 02 00 	lea    0x2c261(%rip),%rdx        # 23a230 <memcmp+0x14f0>
  20dfcf:	be 21 00 00 00       	mov    $0x21,%esi
  20dfd4:	e8 17 7c 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20dfd9:	0f 0b                	ud2    
  20dfdb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        let current_page = Page::from_address(mm::VirtualAddress::from_u64(
  20dfe0:	e8 eb a2 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20dfe5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20dfea:	eb 1a                	jmp    20e006 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xd6>
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20dfec:	48 8d 3d dd 27 ff ff 	lea    -0xd823(%rip),%rdi        # 2007d0 <str.0>
  20dff3:	48 8d 15 4e c2 02 00 	lea    0x2c24e(%rip),%rdx        # 23a248 <memcmp+0x1508>
  20dffa:	be 1c 00 00 00       	mov    $0x1c,%esi
  20dfff:	e8 ec 7b 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20e004:	0f 0b                	ud2    
  20e006:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let current_page = Page::from_address(mm::VirtualAddress::from_u64(
  20e00b:	e8 d0 e7 ff ff       	callq  20c7e0 <_ZN9r3_kernel2mm6paging4Page12from_address17h3af72bb28e0481a7E>
  20e010:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20e015:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20e01a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20e01f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        self.current += 1;
  20e024:	48 8b 40 18          	mov    0x18(%rax),%rax
  20e028:	48 83 c0 01          	add    $0x1,%rax
  20e02c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e031:	0f 92 c0             	setb   %al
  20e034:	a8 01                	test   $0x1,%al
  20e036:	75 30                	jne    20e068 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x138>
  20e038:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e03d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20e042:	48 89 48 18          	mov    %rcx,0x18(%rax)
        Some(current_page)
  20e046:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20e04b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20e050:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20e055:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20e05a:	48 c7 44 24 48 01 00 	movq   $0x1,0x48(%rsp)
  20e061:	00 00 
    }
  20e063:	e9 fa fe ff ff       	jmpq   20df62 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x32>
        self.current += 1;
  20e068:	48 8d 3d 61 27 ff ff 	lea    -0xd89f(%rip),%rdi        # 2007d0 <str.0>
  20e06f:	48 8d 15 ea c1 02 00 	lea    0x2c1ea(%rip),%rdx        # 23a260 <memcmp+0x1520>
  20e076:	be 1c 00 00 00       	mov    $0x1c,%esi
  20e07b:	e8 70 7b 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20e080:	0f 0b                	ud2    
  20e082:	cc                   	int3   
  20e083:	cc                   	int3   
  20e084:	cc                   	int3   
  20e085:	cc                   	int3   
  20e086:	cc                   	int3   
  20e087:	cc                   	int3   
  20e088:	cc                   	int3   
  20e089:	cc                   	int3   
  20e08a:	cc                   	int3   
  20e08b:	cc                   	int3   
  20e08c:	cc                   	int3   
  20e08d:	cc                   	int3   
  20e08e:	cc                   	int3   
  20e08f:	cc                   	int3   

000000000020e090 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE>:
pub fn init_kernel_vmm() -> VirtualMemoryManager {
  20e090:	48 83 ec 38          	sub    $0x38,%rsp
  20e094:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e099:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let phy_offset = BootProtocol::get_phy_offset();
  20e09e:	e8 2d bb 00 00       	callq  219bd0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  20e0a3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20e0a8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if phy_offset.is_none() {
  20e0ad:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20e0b2:	e8 29 38 00 00       	callq  2118e0 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  20e0b7:	88 44 24 17          	mov    %al,0x17(%rsp)
  20e0bb:	8a 44 24 17          	mov    0x17(%rsp),%al
  20e0bf:	a8 01                	test   $0x1,%al
  20e0c1:	75 1f                	jne    20e0e2 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x52>
  20e0c3:	eb 00                	jmp    20e0c5 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x35>
    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  20e0c5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20e0ca:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20e0cf:	48 8d 15 ba c1 02 00 	lea    0x2c1ba(%rip),%rdx        # 23a290 <memcmp+0x1550>
  20e0d6:	e8 f5 32 00 00       	callq  2113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  20e0db:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e0e0:	eb 1a                	jmp    20e0fc <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x6c>
        panic!("Boot protocol did not provide physical memory offset.");
  20e0e2:	48 8d 3d d8 27 ff ff 	lea    -0xd828(%rip),%rdi        # 2008c1 <str.2+0x21>
  20e0e9:	48 8d 15 88 c1 02 00 	lea    0x2c188(%rip),%rdx        # 23a278 <memcmp+0x1538>
  20e0f0:	be 35 00 00 00       	mov    $0x35,%esi
  20e0f5:	e8 f6 7a 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20e0fa:	0f 0b                	ud2    
  20e0fc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20e101:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  20e106:	e8 95 ea ff ff       	callq  20cba0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE>
  20e10b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  20e110:	48 83 c4 38          	add    $0x38,%rsp
  20e114:	c3                   	retq   
  20e115:	cc                   	int3   
  20e116:	cc                   	int3   
  20e117:	cc                   	int3   
  20e118:	cc                   	int3   
  20e119:	cc                   	int3   
  20e11a:	cc                   	int3   
  20e11b:	cc                   	int3   
  20e11c:	cc                   	int3   
  20e11d:	cc                   	int3   
  20e11e:	cc                   	int3   
  20e11f:	cc                   	int3   

000000000020e120 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE>:
}

pub fn setup_paging() {
  20e120:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    // this function will make static lazy function to initialize
    log::info!(
  20e127:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  20e12e:	00 00 
  20e130:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20e135:	48 8d 35 bc 21 ff ff 	lea    -0xde44(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  20e13c:	e8 8f 4e 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20e141:	88 44 24 27          	mov    %al,0x27(%rsp)
  20e145:	8a 44 24 27          	mov    0x27(%rsp),%al
  20e149:	a8 01                	test   $0x1,%al
  20e14b:	75 09                	jne    20e156 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x36>
  20e14d:	eb 00                	jmp    20e14f <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x2f>
  20e14f:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20e154:	eb 4e                	jmp    20e1a4 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x84>
  20e156:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  20e15d:	00 
  20e15e:	48 8b 3d e3 f9 02 00 	mov    0x2f9e3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20e165:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  20e16c:	00 
  20e16d:	e8 7e d0 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20e172:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20e179:	00 
  20e17a:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20e181:	00 
  20e182:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20e187:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20e18c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  20e191:	e8 3a 4e 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20e196:	88 44 24 26          	mov    %al,0x26(%rsp)
  20e19a:	8a 44 24 26          	mov    0x26(%rsp),%al
  20e19e:	24 01                	and    $0x1,%al
  20e1a0:	88 44 24 37          	mov    %al,0x37(%rsp)
  20e1a4:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20e1a9:	75 08                	jne    20e1b3 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x93>
        "Kernel paging is initialized, address at: 0x{:x}",
        KERNEL_PAGING.l4_virtual_address.as_u64()
    );
}
  20e1ab:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20e1b2:	c3                   	retq   
        KERNEL_PAGING.l4_virtual_address.as_u64()
  20e1b3:	48 8d 3d 3c 28 ff ff 	lea    -0xd7c4(%rip),%rdi        # 2009f6 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20e1ba:	e8 21 0c 00 00       	callq  20ede0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20e1bf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20e1c4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20e1c9:	48 83 c7 08          	add    $0x8,%rdi
  20e1cd:	e8 ee a0 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20e1d2:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20e1d9:	00 
    log::info!(
  20e1da:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  20e1e1:	00 
  20e1e2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20e1e9:	00 
  20e1ea:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  20e1f1:	00 
  20e1f2:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  20e1f9:	00 
  20e1fa:	48 8b 35 4f f9 02 00 	mov    0x2f94f(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20e201:	e8 3a 14 00 00       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  20e206:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e20b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20e210:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e215:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20e21a:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20e21f:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20e224:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  20e229:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20e22e:	48 8d 35 73 c0 02 00 	lea    0x2c073(%rip),%rsi        # 23a2a8 <memcmp+0x1568>
  20e235:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20e23b:	4c 89 c2             	mov    %r8,%rdx
  20e23e:	e8 ed 82 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20e243:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20e248:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20e24d:	48 8d 15 64 c0 02 00 	lea    0x2c064(%rip),%rdx        # 23a2b8 <memcmp+0x1578>
  20e254:	e8 27 4b 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20e259:	e9 4d ff ff ff       	jmpq   20e1ab <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x8b>
  20e25e:	cc                   	int3   
  20e25f:	cc                   	int3   

000000000020e260 <_ZN9r3_kernel2mm6paging16get_kernel_table17h7f76f9d3055d33d3E>:

pub fn get_kernel_table() -> &'static VirtualMemoryManager {
  20e260:	50                   	push   %rax
    &KERNEL_PAGING
  20e261:	48 8d 3d 8e 27 ff ff 	lea    -0xd872(%rip),%rdi        # 2009f6 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20e268:	e8 73 0b 00 00       	callq  20ede0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20e26d:	48 89 04 24          	mov    %rax,(%rsp)
  20e271:	48 8b 04 24          	mov    (%rsp),%rax
}
  20e275:	59                   	pop    %rcx
  20e276:	c3                   	retq   
  20e277:	cc                   	int3   
  20e278:	cc                   	int3   
  20e279:	cc                   	int3   
  20e27a:	cc                   	int3   
  20e27b:	cc                   	int3   
  20e27c:	cc                   	int3   
  20e27d:	cc                   	int3   
  20e27e:	cc                   	int3   
  20e27f:	cc                   	int3   

000000000020e280 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E>:

        // return the iterator
        Ok(PageRangeIterator::new(region))
    }

    pub fn alloc_huge_page_region(
  20e280:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  20e287:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20e28c:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20e291:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e296:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20e29b:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  20e2a2:	00 
        region: PageRange,
        flags: PageEntryFlags,
    ) -> Result<PageRangeIterator, PagingError> {
        let range_iterator = PageRangeIterator::new(region.clone());
  20e2a3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20e2a8:	e8 73 08 00 00       	callq  20eb20 <_ZN71_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..clone..Clone$GT$5clone17h9fd30caad970ce48E>
  20e2ad:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20e2b2:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  20e2b7:	e8 24 fc ff ff       	callq  20dee0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>

        for page in range_iterator {
  20e2bc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e2c1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20e2c8:	00 
  20e2c9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e2ce:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20e2d5:	00 
  20e2d6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20e2db:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20e2e2:	00 
  20e2e3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20e2e8:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20e2ef:	00 
  20e2f0:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  20e2f5:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  20e2fc:	00 
  20e2fd:	e8 1e 68 00 00       	callq  214b20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4c4b5ea2e2ac9d28E>
  20e302:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20e307:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20e30e:	00 
  20e30f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20e314:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20e31b:	00 
  20e31c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20e323:	00 
  20e324:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20e32b:	00 
  20e32c:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20e333:	00 
  20e334:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20e33b:	00 
  20e33c:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20e343:	00 
  20e344:	e8 e7 fb ff ff       	callq  20df30 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E>
  20e349:	48 89 94 24 b8 01 00 	mov    %rdx,0x1b8(%rsp)
  20e350:	00 
  20e351:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20e358:	00 
  20e359:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  20e360:	00 
  20e361:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20e368:	00 
  20e369:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  20e370:	00 
  20e371:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20e378:	00 
  20e379:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20e380:	00 
  20e381:	48 85 c0             	test   %rax,%rax
  20e384:	74 06                	je     20e38c <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x10c>
  20e386:	eb 00                	jmp    20e388 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x108>
  20e388:	eb 0c                	jmp    20e396 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x116>
  20e38a:	0f 0b                	ud2    
            if result.is_err() {
                return Err(result.unwrap_err());
            }
        }

        mmu::reload_flush();
  20e38c:	e8 af 6e 00 00       	callq  215240 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>
  20e391:	e9 44 02 00 00       	jmpq   20e5da <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x35a>
        for page in range_iterator {
  20e396:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20e39d:	00 
  20e39e:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20e3a5:	00 
  20e3a6:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  20e3ad:	00 
  20e3ae:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20e3b5:	00 
  20e3b6:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20e3bd:	00 
  20e3be:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20e3c5:	00 
  20e3c6:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20e3cd:	00 
  20e3ce:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20e3d5:	00 
            let frame_opt = PhysicalMemoryManager::alloc_huge_page();
  20e3d6:	e8 75 ad 00 00       	callq  219150 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE>
  20e3db:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  20e3e2:	00 
  20e3e3:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  20e3ea:	00 
  20e3eb:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  20e3f2:	00 
  20e3f3:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20e3fa:	00 
  20e3fb:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  20e402:	00 
  20e403:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20e40a:	00 
            if frame_opt.is_none() {
  20e40b:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20e412:	00 
  20e413:	e8 88 35 00 00       	callq  2119a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20e418:	88 44 24 17          	mov    %al,0x17(%rsp)
  20e41c:	8a 44 24 17          	mov    0x17(%rsp),%al
  20e420:	a8 01                	test   $0x1,%al
  20e422:	75 15                	jne    20e439 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1b9>
  20e424:	eb 00                	jmp    20e426 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1a6>
            let result = KERNEL_PAGING.map_huge_page(page, frame_opt.unwrap(), flags);
  20e426:	48 8d 3d c9 25 ff ff 	lea    -0xda37(%rip),%rdi        # 2009f6 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20e42d:	e8 ae 09 00 00       	callq  20ede0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20e432:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e437:	eb 3b                	jmp    20e474 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1f4>
  20e439:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                return Err(PagingError::OOM);
  20e43e:	66 c7 84 24 10 01 00 	movw   $0x0,0x110(%rsp)
  20e445:	00 00 00 
  20e448:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  20e44f:	00 
  20e450:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20e454:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  20e45b:	00 
  20e45c:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20e460:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20e467:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

        Ok(PageRangeIterator::new(region))
    }
  20e46c:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  20e473:	c3                   	retq   
            let result = KERNEL_PAGING.map_huge_page(page, frame_opt.unwrap(), flags);
  20e474:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20e47b:	00 
  20e47c:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  20e483:	00 
  20e484:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20e48b:	00 
  20e48c:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  20e493:	00 
  20e494:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  20e49b:	00 
  20e49c:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20e4a3:	00 
  20e4a4:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  20e4ab:	00 
  20e4ac:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  20e4b3:	00 
  20e4b4:	48 8d 15 35 be 02 00 	lea    0x2be35(%rip),%rdx        # 23a2f0 <memcmp+0x15b0>
  20e4bb:	e8 00 30 00 00       	callq  2114c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20e4c0:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  20e4c7:	00 
  20e4c8:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  20e4cf:	00 
  20e4d0:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20e4d7:	00 
  20e4d8:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20e4dd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e4e2:	48 8b b4 24 30 01 00 	mov    0x130(%rsp),%rsi
  20e4e9:	00 
  20e4ea:	48 8b 94 24 38 01 00 	mov    0x138(%rsp),%rdx
  20e4f1:	00 
  20e4f2:	e8 59 f6 ff ff       	callq  20db50 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE>
  20e4f7:	48 89 94 24 e0 01 00 	mov    %rdx,0x1e0(%rsp)
  20e4fe:	00 
  20e4ff:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  20e506:	00 
  20e507:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  20e50e:	00 
  20e50f:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20e516:	00 
  20e517:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  20e51e:	00 
  20e51f:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20e526:	00 
            if result.is_err() {
  20e527:	48 8d bc 24 20 01 00 	lea    0x120(%rsp),%rdi
  20e52e:	00 
  20e52f:	e8 dc cd ff ff       	callq  20b310 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>
  20e534:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e538:	8a 44 24 07          	mov    0x7(%rsp),%al
  20e53c:	a8 01                	test   $0x1,%al
  20e53e:	75 05                	jne    20e545 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x2c5>
  20e540:	e9 f7 fd ff ff       	jmpq   20e33c <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0xbc>
                return Err(result.unwrap_err());
  20e545:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  20e54c:	00 
  20e54d:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  20e554:	00 
  20e555:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  20e55c:	00 
  20e55d:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  20e564:	00 
  20e565:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  20e56c:	00 
  20e56d:	48 8b b4 24 68 01 00 	mov    0x168(%rsp),%rsi
  20e574:	00 
  20e575:	48 8d 15 8c bd 02 00 	lea    0x2bd8c(%rip),%rdx        # 23a308 <memcmp+0x15c8>
  20e57c:	e8 5f cb ff ff       	callq  20b0e0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>
  20e581:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  20e588:	00 
  20e589:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  20e590:	00 
  20e591:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  20e598:	00 
  20e599:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  20e5a0:	00 
  20e5a1:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  20e5a8:	00 
  20e5a9:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  20e5b0:	00 
  20e5b1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20e5b6:	48 8b 8c 24 50 01 00 	mov    0x150(%rsp),%rcx
  20e5bd:	00 
  20e5be:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20e5c2:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  20e5c9:	00 
  20e5ca:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20e5ce:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20e5d5:	e9 8d fe ff ff       	jmpq   20e467 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1e7>
  20e5da:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        Ok(PageRangeIterator::new(region))
  20e5df:	48 8b 08             	mov    (%rax),%rcx
  20e5e2:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  20e5e9:	00 
  20e5ea:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20e5ee:	48 89 8c 24 98 01 00 	mov    %rcx,0x198(%rsp)
  20e5f5:	00 
  20e5f6:	48 8b 40 10          	mov    0x10(%rax),%rax
  20e5fa:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  20e601:	00 
  20e602:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  20e609:	00 
  20e60a:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  20e611:	00 
  20e612:	e8 c9 f8 ff ff       	callq  20dee0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>
  20e617:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20e61c:	48 8b 8c 24 70 01 00 	mov    0x170(%rsp),%rcx
  20e623:	00 
  20e624:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20e628:	48 8b 8c 24 78 01 00 	mov    0x178(%rsp),%rcx
  20e62f:	00 
  20e630:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20e634:	48 8b 8c 24 80 01 00 	mov    0x180(%rsp),%rcx
  20e63b:	00 
  20e63c:	48 89 48 18          	mov    %rcx,0x18(%rax)
  20e640:	48 8b 8c 24 88 01 00 	mov    0x188(%rsp),%rcx
  20e647:	00 
  20e648:	48 89 48 20          	mov    %rcx,0x20(%rax)
  20e64c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  20e653:	e9 0f fe ff ff       	jmpq   20e467 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1e7>
  20e658:	cc                   	int3   
  20e659:	cc                   	int3   
  20e65a:	cc                   	int3   
  20e65b:	cc                   	int3   
  20e65c:	cc                   	int3   
  20e65d:	cc                   	int3   
  20e65e:	cc                   	int3   
  20e65f:	cc                   	int3   

000000000020e660 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>:
#[derive(Debug)]
  20e660:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20e667:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20e66c:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  20e673:	00 
  20e674:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  20e67b:	00 
  20e67c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20e681:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e686:	0f b7 00             	movzwl (%rax),%eax
  20e689:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e68e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20e693:	48 8d 0d 02 20 ff ff 	lea    -0xdffe(%rip),%rcx        # 20069c <str.0+0x7c>
  20e69a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20e69e:	48 01 c8             	add    %rcx,%rax
  20e6a1:	ff e0                	jmpq   *%rax
  20e6a3:	0f 0b                	ud2    
  20e6a5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20e6aa:	48 8d 35 ab 22 ff ff 	lea    -0xdd55(%rip),%rsi        # 20095c <str.2+0xbc>
  20e6b1:	ba 03 00 00 00       	mov    $0x3,%edx
  20e6b6:	e8 f5 97 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e6bb:	24 01                	and    $0x1,%al
  20e6bd:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e6c1:	e9 7d 01 00 00       	jmpq   20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e6c6:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20e6cb:	48 8d 35 78 22 ff ff 	lea    -0xdd88(%rip),%rsi        # 20094a <str.2+0xaa>
  20e6d2:	ba 12 00 00 00       	mov    $0x12,%edx
  20e6d7:	e8 d4 97 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e6dc:	24 01                	and    $0x1,%al
  20e6de:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e6e2:	e9 5c 01 00 00       	jmpq   20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e6e7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    OutOfBoundsIndex(u16),
  20e6ec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e6f1:	48 83 c0 02          	add    $0x2,%rax
  20e6f5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20e6fa:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20e701:	00 
#[derive(Debug)]
  20e702:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e707:	48 8d 15 d2 1f ff ff 	lea    -0xe02e(%rip),%rdx        # 2006e0 <str.0+0xc0>
  20e70e:	b9 10 00 00 00       	mov    $0x10,%ecx
  20e713:	e8 08 98 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20e718:	e9 1e 02 00 00       	jmpq   20e93b <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x2db>
  20e71d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    UnalignedAddress(u64),
  20e722:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e727:	48 83 c0 08          	add    $0x8,%rax
  20e72b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20e730:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20e737:	00 
#[derive(Debug)]
  20e738:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20e73d:	48 8d 15 2c 20 ff ff 	lea    -0xdfd4(%rip),%rdx        # 200770 <str.0+0x150>
  20e744:	b9 10 00 00 00       	mov    $0x10,%ecx
  20e749:	e8 d2 97 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20e74e:	e9 a0 01 00 00       	jmpq   20e8f3 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x293>
  20e753:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    MappingError(u64),
  20e758:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e75d:	48 83 c0 08          	add    $0x8,%rax
  20e761:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e766:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  20e76d:	00 
#[derive(Debug)]
  20e76e:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20e775:	00 
  20e776:	48 8d 15 c1 21 ff ff 	lea    -0xde3f(%rip),%rdx        # 20093e <str.2+0x9e>
  20e77d:	b9 0c 00 00 00       	mov    $0xc,%ecx
  20e782:	e8 99 97 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20e787:	e9 16 01 00 00       	jmpq   20e8a2 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x242>
  20e78c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    IsAlreadyMapped(u64),
  20e791:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e796:	48 83 c0 08          	add    $0x8,%rax
  20e79a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e79f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20e7a6:	00 
#[derive(Debug)]
  20e7a7:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20e7ae:	00 
  20e7af:	48 8d 15 79 21 ff ff 	lea    -0xde87(%rip),%rdx        # 20092f <str.2+0x8f>
  20e7b6:	b9 0f 00 00 00       	mov    $0xf,%ecx
  20e7bb:	e8 60 97 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20e7c0:	e9 8f 00 00 00       	jmpq   20e854 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1f4>
  20e7c5:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    PageNotMapped(u64),
  20e7ca:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e7cf:	48 83 c0 08          	add    $0x8,%rax
  20e7d3:	48 89 04 24          	mov    %rax,(%rsp)
  20e7d7:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20e7de:	00 
#[derive(Debug)]
  20e7df:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20e7e6:	00 
  20e7e7:	48 8d 15 34 21 ff ff 	lea    -0xdecc(%rip),%rdx        # 200922 <str.2+0x82>
  20e7ee:	b9 0d 00 00 00       	mov    $0xd,%ecx
  20e7f3:	e8 28 97 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20e7f8:	48 8b 04 24          	mov    (%rsp),%rax
  20e7fc:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  20e803:	00 
  20e804:	48 89 8c 24 00 01 00 	mov    %rcx,0x100(%rsp)
  20e80b:	00 
    PageNotMapped(u64),
  20e80c:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20e813:	00 
  20e814:	48 8d b4 24 e0 00 00 	lea    0xe0(%rsp),%rsi
  20e81b:	00 
#[derive(Debug)]
  20e81c:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20e823:	00 
  20e824:	48 8d 15 f5 ba 02 00 	lea    0x2baf5(%rip),%rdx        # 23a320 <memcmp+0x15e0>
  20e82b:	e8 70 6c 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e830:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20e837:	00 
  20e838:	e8 d3 6d 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e83d:	24 01                	and    $0x1,%al
  20e83f:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e843:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20e847:	24 01                	and    $0x1,%al
  20e849:	0f b6 c0             	movzbl %al,%eax
  20e84c:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20e853:	c3                   	retq   
  20e854:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e859:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  20e860:	00 
  20e861:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  20e868:	00 
    IsAlreadyMapped(u64),
  20e869:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20e870:	00 
  20e871:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  20e878:	00 
#[derive(Debug)]
  20e879:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20e880:	00 
  20e881:	48 8d 15 98 ba 02 00 	lea    0x2ba98(%rip),%rdx        # 23a320 <memcmp+0x15e0>
  20e888:	e8 13 6c 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e88d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20e894:	00 
  20e895:	e8 76 6d 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e89a:	24 01                	and    $0x1,%al
  20e89c:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e8a0:	eb a1                	jmp    20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e8a2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e8a7:	48 8d 8c 24 88 00 00 	lea    0x88(%rsp),%rcx
  20e8ae:	00 
  20e8af:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20e8b6:	00 
    MappingError(u64),
  20e8b7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20e8be:	00 
  20e8bf:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  20e8c6:	00 
#[derive(Debug)]
  20e8c7:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20e8ce:	00 
  20e8cf:	48 8d 15 4a ba 02 00 	lea    0x2ba4a(%rip),%rdx        # 23a320 <memcmp+0x15e0>
  20e8d6:	e8 c5 6b 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e8db:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20e8e2:	00 
  20e8e3:	e8 28 6d 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e8e8:	24 01                	and    $0x1,%al
  20e8ea:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e8ee:	e9 50 ff ff ff       	jmpq   20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e8f3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e8f8:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  20e8fd:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  20e904:	00 
    UnalignedAddress(u64),
  20e905:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20e90c:	00 
  20e90d:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  20e914:	00 
#[derive(Debug)]
  20e915:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20e91a:	48 8d 15 ff b9 02 00 	lea    0x2b9ff(%rip),%rdx        # 23a320 <memcmp+0x15e0>
  20e921:	e8 7a 6b 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e926:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20e92b:	e8 e0 6c 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e930:	24 01                	and    $0x1,%al
  20e932:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e936:	e9 08 ff ff ff       	jmpq   20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e93b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20e940:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  20e945:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  20e94c:	00 
    OutOfBoundsIndex(u16),
  20e94d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20e952:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
#[derive(Debug)]
  20e957:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e95c:	48 8d 15 dd b9 02 00 	lea    0x2b9dd(%rip),%rdx        # 23a340 <memcmp+0x1600>
  20e963:	e8 38 6b 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e968:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e96d:	e8 9e 6c 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e972:	24 01                	and    $0x1,%al
  20e974:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e978:	e9 c6 fe ff ff       	jmpq   20e843 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e97d:	cc                   	int3   
  20e97e:	cc                   	int3   
  20e97f:	cc                   	int3   

000000000020e980 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE>:
#[derive(Debug, Clone)]
  20e980:	48 83 ec 38          	sub    $0x38,%rsp
  20e984:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20e989:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e98e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20e993:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20e998:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20e99d:	0f b6 00             	movzbl (%rax),%eax
  20e9a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e9a5:	48 85 c0             	test   %rax,%rax
  20e9a8:	74 13                	je     20e9bd <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x3d>
  20e9aa:	eb 00                	jmp    20e9ac <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x2c>
  20e9ac:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e9b1:	48 83 e8 01          	sub    $0x1,%rax
  20e9b5:	74 24                	je     20e9db <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x5b>
  20e9b7:	eb 00                	jmp    20e9b9 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x39>
  20e9b9:	eb 3e                	jmp    20e9f9 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x79>
  20e9bb:	0f 0b                	ud2    
  20e9bd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e9c2:	48 8d 35 ef 18 ff ff 	lea    -0xe711(%rip),%rsi        # 2002b8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xbe>
  20e9c9:	ba 08 00 00 00       	mov    $0x8,%edx
  20e9ce:	e8 dd 94 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e9d3:	24 01                	and    $0x1,%al
  20e9d5:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e9d9:	eb 3a                	jmp    20ea15 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x95>
  20e9db:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e9e0:	48 8d 35 c9 18 ff ff 	lea    -0xe737(%rip),%rsi        # 2002b0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xc6>
  20e9e7:	ba 08 00 00 00       	mov    $0x8,%edx
  20e9ec:	e8 bf 94 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e9f1:	24 01                	and    $0x1,%al
  20e9f3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e9f7:	eb 1c                	jmp    20ea15 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x95>
  20e9f9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e9fe:	48 8d 35 13 19 ff ff 	lea    -0xe6ed(%rip),%rsi        # 200318 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x5e>
  20ea05:	ba 08 00 00 00       	mov    $0x8,%edx
  20ea0a:	e8 a1 94 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ea0f:	24 01                	and    $0x1,%al
  20ea11:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20ea15:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20ea19:	24 01                	and    $0x1,%al
  20ea1b:	0f b6 c0             	movzbl %al,%eax
  20ea1e:	48 83 c4 38          	add    $0x38,%rsp
  20ea22:	c3                   	retq   
  20ea23:	cc                   	int3   
  20ea24:	cc                   	int3   
  20ea25:	cc                   	int3   
  20ea26:	cc                   	int3   
  20ea27:	cc                   	int3   
  20ea28:	cc                   	int3   
  20ea29:	cc                   	int3   
  20ea2a:	cc                   	int3   
  20ea2b:	cc                   	int3   
  20ea2c:	cc                   	int3   
  20ea2d:	cc                   	int3   
  20ea2e:	cc                   	int3   
  20ea2f:	cc                   	int3   

000000000020ea30 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE>:
  20ea30:	48 83 ec 20          	sub    $0x20,%rsp
  20ea34:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20ea39:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ea3e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ea43:	0f b6 00             	movzbl (%rax),%eax
  20ea46:	48 89 04 24          	mov    %rax,(%rsp)
  20ea4a:	48 85 c0             	test   %rax,%rax
  20ea4d:	74 12                	je     20ea61 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x31>
  20ea4f:	eb 00                	jmp    20ea51 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x21>
  20ea51:	48 8b 04 24          	mov    (%rsp),%rax
  20ea55:	48 83 e8 01          	sub    $0x1,%rax
  20ea59:	74 0d                	je     20ea68 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x38>
  20ea5b:	eb 00                	jmp    20ea5d <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x2d>
  20ea5d:	eb 10                	jmp    20ea6f <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x3f>
  20ea5f:	0f 0b                	ud2    
  20ea61:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  20ea66:	eb 0c                	jmp    20ea74 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x44>
  20ea68:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20ea6d:	eb 05                	jmp    20ea74 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x44>
  20ea6f:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  20ea74:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ea78:	48 83 c4 20          	add    $0x20,%rsp
  20ea7c:	c3                   	retq   
  20ea7d:	cc                   	int3   
  20ea7e:	cc                   	int3   
  20ea7f:	cc                   	int3   

000000000020ea80 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17h1fac2bbdf4c0d6e2E>:
                Self { bits: 0 }
            }

            /// Returns the set containing all flags.
            #[inline]
            pub const fn all() -> Self {
  20ea80:	50                   	push   %rax
                __impl_all_bitflags! {
  20ea81:	48 b8 ff 01 00 00 00 	movabs $0x80000000000001ff,%rax
  20ea88:	00 00 80 
  20ea8b:	48 89 04 24          	mov    %rax,(%rsp)
                            $(#[$attr $($args)*])*
                            $Flag = $value;
                        )*
                    }
                }
            }
  20ea8f:	48 8b 04 24          	mov    (%rsp),%rax
  20ea93:	59                   	pop    %rcx
  20ea94:	c3                   	retq   
  20ea95:	cc                   	int3   
  20ea96:	cc                   	int3   
  20ea97:	cc                   	int3   
  20ea98:	cc                   	int3   
  20ea99:	cc                   	int3   
  20ea9a:	cc                   	int3   
  20ea9b:	cc                   	int3   
  20ea9c:	cc                   	int3   
  20ea9d:	cc                   	int3   
  20ea9e:	cc                   	int3   
  20ea9f:	cc                   	int3   

000000000020eaa0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>:

            /// Returns the raw value of the flags currently stored.
            #[inline]
            pub const fn bits(&self) -> $T {
  20eaa0:	50                   	push   %rax
  20eaa1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  20eaa5:	48 8b 07             	mov    (%rdi),%rax
            }
  20eaa8:	59                   	pop    %rcx
  20eaa9:	c3                   	retq   
  20eaaa:	cc                   	int3   
  20eaab:	cc                   	int3   
  20eaac:	cc                   	int3   
  20eaad:	cc                   	int3   
  20eaae:	cc                   	int3   
  20eaaf:	cc                   	int3   

000000000020eab0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>:
            }

            /// Convert from underlying bit representation, dropping any bits
            /// that do not correspond to flags.
            #[inline]
            pub const fn from_bits_truncate(bits: $T) -> Self {
  20eab0:	48 83 ec 28          	sub    $0x28,%rsp
  20eab4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eab9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                Self { bits: bits & Self::all().bits }
  20eabe:	e8 bd ff ff ff       	callq  20ea80 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17h1fac2bbdf4c0d6e2E>
  20eac3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eac8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20eacd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ead2:	48 21 c8             	and    %rcx,%rax
  20ead5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
            }
  20eada:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eadf:	48 83 c4 28          	add    $0x28,%rsp
  20eae3:	c3                   	retq   
  20eae4:	cc                   	int3   
  20eae5:	cc                   	int3   
  20eae6:	cc                   	int3   
  20eae7:	cc                   	int3   
  20eae8:	cc                   	int3   
  20eae9:	cc                   	int3   
  20eaea:	cc                   	int3   
  20eaeb:	cc                   	int3   
  20eaec:	cc                   	int3   
  20eaed:	cc                   	int3   
  20eaee:	cc                   	int3   
  20eaef:	cc                   	int3   

000000000020eaf0 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17hd3ff2771bf260abaE>:
                !(Self { bits: self.bits & other.bits}).is_empty()
            }

            /// Returns `true` if all of the flags in `other` are contained within `self`.
            #[inline]
            pub const fn contains(&self, other: Self) -> bool {
  20eaf0:	48 83 ec 10          	sub    $0x10,%rsp
  20eaf4:	48 89 f0             	mov    %rsi,%rax
  20eaf7:	48 89 3c 24          	mov    %rdi,(%rsp)
  20eafb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
                (self.bits & other.bits) == other.bits
  20eb00:	48 89 c6             	mov    %rax,%rsi
  20eb03:	48 23 37             	and    (%rdi),%rsi
  20eb06:	48 39 c6             	cmp    %rax,%rsi
  20eb09:	0f 94 c0             	sete   %al
            }
  20eb0c:	24 01                	and    $0x1,%al
  20eb0e:	0f b6 c0             	movzbl %al,%eax
  20eb11:	48 83 c4 10          	add    $0x10,%rsp
  20eb15:	c3                   	retq   
  20eb16:	cc                   	int3   
  20eb17:	cc                   	int3   
  20eb18:	cc                   	int3   
  20eb19:	cc                   	int3   
  20eb1a:	cc                   	int3   
  20eb1b:	cc                   	int3   
  20eb1c:	cc                   	int3   
  20eb1d:	cc                   	int3   
  20eb1e:	cc                   	int3   
  20eb1f:	cc                   	int3   

000000000020eb20 <_ZN71_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..clone..Clone$GT$5clone17h9fd30caad970ce48E>:
#[derive(Clone, Debug)]
  20eb20:	48 83 ec 58          	sub    $0x58,%rsp
  20eb24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20eb29:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20eb2e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
    pub start: mm::VirtualAddress,
  20eb33:	48 89 f7             	mov    %rsi,%rdi
  20eb36:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
    pub n: usize,
  20eb3b:	48 89 f0             	mov    %rsi,%rax
  20eb3e:	48 83 c0 08          	add    $0x8,%rax
  20eb42:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20eb47:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    pub size: PageSize,
  20eb4c:	48 83 c6 10          	add    $0x10,%rsi
  20eb50:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20eb55:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
    pub start: mm::VirtualAddress,
  20eb5a:	e8 01 a4 01 00       	callq  228f60 <_ZN68_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..clone..Clone$GT$5clone17h4032ae80f4183b4aE>
  20eb5f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20eb64:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    pub n: usize,
  20eb69:	e8 02 2d 01 00       	callq  221870 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>
  20eb6e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20eb73:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    pub size: PageSize,
  20eb78:	e8 b3 fe ff ff       	callq  20ea30 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE>
  20eb7d:	88 44 24 07          	mov    %al,0x7(%rsp)
  20eb81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eb86:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20eb8b:	8a 54 24 07          	mov    0x7(%rsp),%dl
  20eb8f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20eb94:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
#[derive(Clone, Debug)]
  20eb99:	48 89 39             	mov    %rdi,(%rcx)
  20eb9c:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20eba0:	88 51 10             	mov    %dl,0x10(%rcx)
  20eba3:	48 83 c4 58          	add    $0x58,%rsp
  20eba7:	c3                   	retq   
  20eba8:	cc                   	int3   
  20eba9:	cc                   	int3   
  20ebaa:	cc                   	int3   
  20ebab:	cc                   	int3   
  20ebac:	cc                   	int3   
  20ebad:	cc                   	int3   
  20ebae:	cc                   	int3   
  20ebaf:	cc                   	int3   

000000000020ebb0 <_ZN69_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..fmt..Debug$GT$3fmt17h063c54f93d0e7a84E>:
  20ebb0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  20ebb7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20ebbc:	48 89 f8             	mov    %rdi,%rax
  20ebbf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20ebc4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20ebc9:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: mm::VirtualAddress,
  20ebce:	48 89 c1             	mov    %rax,%rcx
  20ebd1:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ebd6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub n: usize,
  20ebdb:	48 89 c1             	mov    %rax,%rcx
  20ebde:	48 83 c1 08          	add    $0x8,%rcx
  20ebe2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20ebe7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub size: PageSize,
  20ebec:	48 83 c0 10          	add    $0x10,%rax
  20ebf0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ebf5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Clone, Debug)]
  20ebfa:	48 8d 35 5e 1d ff ff 	lea    -0xe2a2(%rip),%rsi        # 20095f <str.2+0xbf>
  20ec01:	ba 09 00 00 00       	mov    $0x9,%edx
  20ec06:	e8 f5 92 02 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  20ec0b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20ec12:	00 
  20ec13:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20ec1a:	00 
  20ec1b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20ec22:	00 
  20ec23:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ec28:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20ec2f:	00 
  20ec30:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20ec35:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ec3a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  20ec3f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20ec46:	00 
    pub start: mm::VirtualAddress,
  20ec47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ec4c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Clone, Debug)]
  20ec51:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ec56:	48 8d 35 0b 1d ff ff 	lea    -0xe2f5(%rip),%rsi        # 200968 <str.2+0xc8>
  20ec5d:	ba 05 00 00 00       	mov    $0x5,%edx
  20ec62:	4c 8d 05 f7 b6 02 00 	lea    0x2b6f7(%rip),%r8        # 23a360 <memcmp+0x1620>
  20ec69:	e8 22 66 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ec6e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub n: usize,
  20ec73:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ec78:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Clone, Debug)]
  20ec7d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ec82:	48 8d 35 e4 1c ff ff 	lea    -0xe31c(%rip),%rsi        # 20096d <str.2+0xcd>
  20ec89:	ba 01 00 00 00       	mov    $0x1,%edx
  20ec8e:	4c 8d 05 eb b6 02 00 	lea    0x2b6eb(%rip),%r8        # 23a380 <memcmp+0x1640>
  20ec95:	e8 f6 65 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ec9a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub size: PageSize,
  20ec9f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20eca4:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Clone, Debug)]
  20eca9:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ecae:	48 8d 35 c3 1c ff ff 	lea    -0xe33d(%rip),%rsi        # 200978 <str.2+0xd8>
  20ecb5:	ba 04 00 00 00       	mov    $0x4,%edx
  20ecba:	4c 8d 05 df b6 02 00 	lea    0x2b6df(%rip),%r8        # 23a3a0 <memcmp+0x1660>
  20ecc1:	e8 ca 65 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ecc6:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20eccb:	e8 80 67 02 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  20ecd0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ecd4:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ecd8:	24 01                	and    $0x1,%al
  20ecda:	0f b6 c0             	movzbl %al,%eax
  20ecdd:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  20ece4:	c3                   	retq   
  20ece5:	cc                   	int3   
  20ece6:	cc                   	int3   
  20ece7:	cc                   	int3   
  20ece8:	cc                   	int3   
  20ece9:	cc                   	int3   
  20ecea:	cc                   	int3   
  20eceb:	cc                   	int3   
  20ecec:	cc                   	int3   
  20eced:	cc                   	int3   
  20ecee:	cc                   	int3   
  20ecef:	cc                   	int3   

000000000020ecf0 <_ZN77_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..fmt..Debug$GT$3fmt17hb7c92e24f629fa2bE>:
#[derive(Debug)]
  20ecf0:	48 83 ec 78          	sub    $0x78,%rsp
  20ecf4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20ecf9:	48 89 f8             	mov    %rdi,%rax
  20ecfc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20ed01:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ed06:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub page_range: PageRange,
  20ed0b:	48 89 c1             	mov    %rax,%rcx
  20ed0e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20ed13:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    pub current: usize,
  20ed18:	48 83 c0 18          	add    $0x18,%rax
  20ed1c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ed21:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug)]
  20ed26:	48 8d 35 a7 1c ff ff 	lea    -0xe359(%rip),%rsi        # 2009d4 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x3c>
  20ed2d:	ba 11 00 00 00       	mov    $0x11,%edx
  20ed32:	e8 c9 91 02 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  20ed37:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  20ed3c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20ed41:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20ed46:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ed4b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20ed50:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ed55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ed5a:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
  20ed5f:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub page_range: PageRange,
  20ed64:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ed69:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug)]
  20ed6e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20ed73:	48 8d 35 6b 1c ff ff 	lea    -0xe395(%rip),%rsi        # 2009e5 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4d>
  20ed7a:	ba 0a 00 00 00       	mov    $0xa,%edx
  20ed7f:	4c 8d 05 3a b6 02 00 	lea    0x2b63a(%rip),%r8        # 23a3c0 <memcmp+0x1680>
  20ed86:	e8 05 65 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ed8b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    pub current: usize,
  20ed90:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20ed95:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug)]
  20ed9a:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20ed9f:	48 8d 35 49 1c ff ff 	lea    -0xe3b7(%rip),%rsi        # 2009ef <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x57>
  20eda6:	ba 07 00 00 00       	mov    $0x7,%edx
  20edab:	4c 8d 05 ce b5 02 00 	lea    0x2b5ce(%rip),%r8        # 23a380 <memcmp+0x1640>
  20edb2:	e8 d9 64 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20edb7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20edbc:	e8 8f 66 02 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  20edc1:	88 44 24 07          	mov    %al,0x7(%rsp)
  20edc5:	8a 44 24 07          	mov    0x7(%rsp),%al
  20edc9:	24 01                	and    $0x1,%al
  20edcb:	0f b6 c0             	movzbl %al,%eax
  20edce:	48 83 c4 78          	add    $0x78,%rsp
  20edd2:	c3                   	retq   
  20edd3:	cc                   	int3   
  20edd4:	cc                   	int3   
  20edd5:	cc                   	int3   
  20edd6:	cc                   	int3   
  20edd7:	cc                   	int3   
  20edd8:	cc                   	int3   
  20edd9:	cc                   	int3   
  20edda:	cc                   	int3   
  20eddb:	cc                   	int3   
  20eddc:	cc                   	int3   
  20eddd:	cc                   	int3   
  20edde:	cc                   	int3   
  20eddf:	cc                   	int3   

000000000020ede0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>:
            fn deref(&self) -> &$T {
  20ede0:	48 83 ec 18          	sub    $0x18,%rsp
  20ede4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ede9:	48 8d 05 80 fe 02 00 	lea    0x2fe80(%rip),%rax        # 23ec70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h896b6b0eb703483bE>
  20edf0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20edf5:	48 8d 3d 74 fe 02 00 	lea    0x2fe74(%rip),%rdi        # 23ec70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h896b6b0eb703483bE>
  20edfc:	e8 8f 9a ff ff       	callq  208890 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E>
  20ee01:	48 89 04 24          	mov    %rax,(%rsp)
  20ee05:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20ee09:	48 83 c4 18          	add    $0x18,%rsp
  20ee0d:	c3                   	retq   
  20ee0e:	cc                   	int3   
  20ee0f:	cc                   	int3   

000000000020ee10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94a3007700c16cf1E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20ee10:	48 83 ec 18          	sub    $0x18,%rsp
  20ee14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ee19:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20ee1e:	48 8b 3f             	mov    (%rdi),%rdi
  20ee21:	e8 0a 75 ff ff       	callq  206330 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE>
  20ee26:	88 44 24 07          	mov    %al,0x7(%rsp)
  20ee2a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ee2e:	24 01                	and    $0x1,%al
  20ee30:	0f b6 c0             	movzbl %al,%eax
  20ee33:	48 83 c4 18          	add    $0x18,%rsp
  20ee37:	c3                   	retq   
  20ee38:	cc                   	int3   
  20ee39:	cc                   	int3   
  20ee3a:	cc                   	int3   
  20ee3b:	cc                   	int3   
  20ee3c:	cc                   	int3   
  20ee3d:	cc                   	int3   
  20ee3e:	cc                   	int3   
  20ee3f:	cc                   	int3   

000000000020ee40 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>:
  20ee40:	48 83 ec 18          	sub    $0x18,%rsp
  20ee44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ee49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20ee4e:	48 8b 3f             	mov    (%rdi),%rdi
  20ee51:	e8 1a 86 02 00       	callq  237470 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>
  20ee56:	88 44 24 07          	mov    %al,0x7(%rsp)
  20ee5a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ee5e:	24 01                	and    $0x1,%al
  20ee60:	0f b6 c0             	movzbl %al,%eax
  20ee63:	48 83 c4 18          	add    $0x18,%rsp
  20ee67:	c3                   	retq   
  20ee68:	cc                   	int3   
  20ee69:	cc                   	int3   
  20ee6a:	cc                   	int3   
  20ee6b:	cc                   	int3   
  20ee6c:	cc                   	int3   
  20ee6d:	cc                   	int3   
  20ee6e:	cc                   	int3   
  20ee6f:	cc                   	int3   

000000000020ee70 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h3368779d22478805E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20ee70:	48 83 ec 28          	sub    $0x28,%rsp
  20ee74:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20ee79:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(*self as *const T), f)
  20ee7e:	48 8b 07             	mov    (%rdi),%rax
  20ee81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ee86:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20ee8b:	e8 40 0a 00 00       	callq  20f8d0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E>
  20ee90:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ee94:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  20ee98:	24 01                	and    $0x1,%al
  20ee9a:	0f b6 c0             	movzbl %al,%eax
  20ee9d:	48 83 c4 28          	add    $0x28,%rsp
  20eea1:	c3                   	retq   
  20eea2:	cc                   	int3   
  20eea3:	cc                   	int3   
  20eea4:	cc                   	int3   
  20eea5:	cc                   	int3   
  20eea6:	cc                   	int3   
  20eea7:	cc                   	int3   
  20eea8:	cc                   	int3   
  20eea9:	cc                   	int3   
  20eeaa:	cc                   	int3   
  20eeab:	cc                   	int3   
  20eeac:	cc                   	int3   
  20eead:	cc                   	int3   
  20eeae:	cc                   	int3   
  20eeaf:	cc                   	int3   

000000000020eeb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20eeb0:	48 83 ec 28          	sub    $0x28,%rsp
  20eeb4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20eeb9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(*self as *const T), f)
  20eebe:	48 8b 07             	mov    (%rdi),%rax
  20eec1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eec6:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20eecb:	e8 10 0b 00 00       	callq  20f9e0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E>
  20eed0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20eed4:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  20eed8:	24 01                	and    $0x1,%al
  20eeda:	0f b6 c0             	movzbl %al,%eax
  20eedd:	48 83 c4 28          	add    $0x28,%rsp
  20eee1:	c3                   	retq   
  20eee2:	cc                   	int3   
  20eee3:	cc                   	int3   
  20eee4:	cc                   	int3   
  20eee5:	cc                   	int3   
  20eee6:	cc                   	int3   
  20eee7:	cc                   	int3   
  20eee8:	cc                   	int3   
  20eee9:	cc                   	int3   
  20eeea:	cc                   	int3   
  20eeeb:	cc                   	int3   
  20eeec:	cc                   	int3   
  20eeed:	cc                   	int3   
  20eeee:	cc                   	int3   
  20eeef:	cc                   	int3   

000000000020eef0 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17h48c3c6680a24267dE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20eef0:	48 83 ec 18          	sub    $0x18,%rsp
  20eef4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eef9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20eefe:	48 8b 3f             	mov    (%rdi),%rdi
  20ef01:	e8 ca 5f 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20ef06:	88 44 24 07          	mov    %al,0x7(%rsp)
  20ef0a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ef0e:	24 01                	and    $0x1,%al
  20ef10:	0f b6 c0             	movzbl %al,%eax
  20ef13:	48 83 c4 18          	add    $0x18,%rsp
  20ef17:	c3                   	retq   
  20ef18:	cc                   	int3   
  20ef19:	cc                   	int3   
  20ef1a:	cc                   	int3   
  20ef1b:	cc                   	int3   
  20ef1c:	cc                   	int3   
  20ef1d:	cc                   	int3   
  20ef1e:	cc                   	int3   
  20ef1f:	cc                   	int3   

000000000020ef20 <_ZN4core3fmt10ArgumentV13new17h2217d787161c4c39E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ef20:	48 83 ec 48          	sub    $0x48,%rsp
  20ef24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ef29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ef2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ef33:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ef38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ef3d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ef42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ef47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ef4c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ef51:	48 89 04 24          	mov    %rax,(%rsp)
  20ef55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ef5a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ef5e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ef63:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ef68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ef6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ef72:	48 83 c4 48          	add    $0x48,%rsp
  20ef76:	c3                   	retq   
  20ef77:	cc                   	int3   
  20ef78:	cc                   	int3   
  20ef79:	cc                   	int3   
  20ef7a:	cc                   	int3   
  20ef7b:	cc                   	int3   
  20ef7c:	cc                   	int3   
  20ef7d:	cc                   	int3   
  20ef7e:	cc                   	int3   
  20ef7f:	cc                   	int3   

000000000020ef80 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ef80:	48 83 ec 48          	sub    $0x48,%rsp
  20ef84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ef89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ef8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ef93:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ef98:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ef9d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20efa2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20efa7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20efac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20efb1:	48 89 04 24          	mov    %rax,(%rsp)
  20efb5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20efba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20efbe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20efc3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20efc8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20efcd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20efd2:	48 83 c4 48          	add    $0x48,%rsp
  20efd6:	c3                   	retq   
  20efd7:	cc                   	int3   
  20efd8:	cc                   	int3   
  20efd9:	cc                   	int3   
  20efda:	cc                   	int3   
  20efdb:	cc                   	int3   
  20efdc:	cc                   	int3   
  20efdd:	cc                   	int3   
  20efde:	cc                   	int3   
  20efdf:	cc                   	int3   

000000000020efe0 <_ZN4core3fmt10ArgumentV13new17h3b537045eb59a5d6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20efe0:	48 83 ec 48          	sub    $0x48,%rsp
  20efe4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20efe9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20efee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20eff3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20eff8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20effd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f002:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f007:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f00c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f011:	48 89 04 24          	mov    %rax,(%rsp)
  20f015:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f01a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f01e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f023:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f028:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f02d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f032:	48 83 c4 48          	add    $0x48,%rsp
  20f036:	c3                   	retq   
  20f037:	cc                   	int3   
  20f038:	cc                   	int3   
  20f039:	cc                   	int3   
  20f03a:	cc                   	int3   
  20f03b:	cc                   	int3   
  20f03c:	cc                   	int3   
  20f03d:	cc                   	int3   
  20f03e:	cc                   	int3   
  20f03f:	cc                   	int3   

000000000020f040 <_ZN4core3fmt10ArgumentV13new17h40a1deb68c3db053E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f040:	48 83 ec 48          	sub    $0x48,%rsp
  20f044:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f049:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f04e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f053:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f058:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f05d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f062:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f067:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f06c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f071:	48 89 04 24          	mov    %rax,(%rsp)
  20f075:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f07a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f07e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f083:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f088:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f08d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f092:	48 83 c4 48          	add    $0x48,%rsp
  20f096:	c3                   	retq   
  20f097:	cc                   	int3   
  20f098:	cc                   	int3   
  20f099:	cc                   	int3   
  20f09a:	cc                   	int3   
  20f09b:	cc                   	int3   
  20f09c:	cc                   	int3   
  20f09d:	cc                   	int3   
  20f09e:	cc                   	int3   
  20f09f:	cc                   	int3   

000000000020f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f0a0:	48 83 ec 48          	sub    $0x48,%rsp
  20f0a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f0a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f0ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f0b3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f0b8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f0bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f0c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f0c7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f0cc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f0d1:	48 89 04 24          	mov    %rax,(%rsp)
  20f0d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f0da:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f0de:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f0e3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f0e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f0ed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f0f2:	48 83 c4 48          	add    $0x48,%rsp
  20f0f6:	c3                   	retq   
  20f0f7:	cc                   	int3   
  20f0f8:	cc                   	int3   
  20f0f9:	cc                   	int3   
  20f0fa:	cc                   	int3   
  20f0fb:	cc                   	int3   
  20f0fc:	cc                   	int3   
  20f0fd:	cc                   	int3   
  20f0fe:	cc                   	int3   
  20f0ff:	cc                   	int3   

000000000020f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f100:	48 83 ec 48          	sub    $0x48,%rsp
  20f104:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f109:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f10e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f113:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f118:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f11d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f122:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f127:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f12c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f131:	48 89 04 24          	mov    %rax,(%rsp)
  20f135:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f13a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f13e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f143:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f148:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f14d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f152:	48 83 c4 48          	add    $0x48,%rsp
  20f156:	c3                   	retq   
  20f157:	cc                   	int3   
  20f158:	cc                   	int3   
  20f159:	cc                   	int3   
  20f15a:	cc                   	int3   
  20f15b:	cc                   	int3   
  20f15c:	cc                   	int3   
  20f15d:	cc                   	int3   
  20f15e:	cc                   	int3   
  20f15f:	cc                   	int3   

000000000020f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f160:	48 83 ec 48          	sub    $0x48,%rsp
  20f164:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f169:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f16e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f173:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f178:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f17d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f182:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f187:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f18c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f191:	48 89 04 24          	mov    %rax,(%rsp)
  20f195:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f19a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f19e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f1a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f1a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f1ad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f1b2:	48 83 c4 48          	add    $0x48,%rsp
  20f1b6:	c3                   	retq   
  20f1b7:	cc                   	int3   
  20f1b8:	cc                   	int3   
  20f1b9:	cc                   	int3   
  20f1ba:	cc                   	int3   
  20f1bb:	cc                   	int3   
  20f1bc:	cc                   	int3   
  20f1bd:	cc                   	int3   
  20f1be:	cc                   	int3   
  20f1bf:	cc                   	int3   

000000000020f1c0 <_ZN4core3fmt10ArgumentV13new17h645304c68732e54fE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f1c0:	48 83 ec 48          	sub    $0x48,%rsp
  20f1c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f1c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f1ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f1d3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f1d8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f1dd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f1e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f1e7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f1ec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f1f1:	48 89 04 24          	mov    %rax,(%rsp)
  20f1f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f1fa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f1fe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f203:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f208:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f20d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f212:	48 83 c4 48          	add    $0x48,%rsp
  20f216:	c3                   	retq   
  20f217:	cc                   	int3   
  20f218:	cc                   	int3   
  20f219:	cc                   	int3   
  20f21a:	cc                   	int3   
  20f21b:	cc                   	int3   
  20f21c:	cc                   	int3   
  20f21d:	cc                   	int3   
  20f21e:	cc                   	int3   
  20f21f:	cc                   	int3   

000000000020f220 <_ZN4core3fmt10ArgumentV13new17h6761285cd85d6144E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f220:	48 83 ec 48          	sub    $0x48,%rsp
  20f224:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f229:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f22e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f233:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f238:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f23d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f242:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f247:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f24c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f251:	48 89 04 24          	mov    %rax,(%rsp)
  20f255:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f25a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f25e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f263:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f268:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f26d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f272:	48 83 c4 48          	add    $0x48,%rsp
  20f276:	c3                   	retq   
  20f277:	cc                   	int3   
  20f278:	cc                   	int3   
  20f279:	cc                   	int3   
  20f27a:	cc                   	int3   
  20f27b:	cc                   	int3   
  20f27c:	cc                   	int3   
  20f27d:	cc                   	int3   
  20f27e:	cc                   	int3   
  20f27f:	cc                   	int3   

000000000020f280 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f280:	48 83 ec 48          	sub    $0x48,%rsp
  20f284:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f289:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f28e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f293:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f298:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f29d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f2a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f2a7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f2ac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f2b1:	48 89 04 24          	mov    %rax,(%rsp)
  20f2b5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f2ba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f2be:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f2c3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f2c8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f2cd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f2d2:	48 83 c4 48          	add    $0x48,%rsp
  20f2d6:	c3                   	retq   
  20f2d7:	cc                   	int3   
  20f2d8:	cc                   	int3   
  20f2d9:	cc                   	int3   
  20f2da:	cc                   	int3   
  20f2db:	cc                   	int3   
  20f2dc:	cc                   	int3   
  20f2dd:	cc                   	int3   
  20f2de:	cc                   	int3   
  20f2df:	cc                   	int3   

000000000020f2e0 <_ZN4core3fmt10ArgumentV13new17h6eb9a36efcd2d487E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f2e0:	48 83 ec 48          	sub    $0x48,%rsp
  20f2e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f2e9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f2ee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f2f3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f2f8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f2fd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f302:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f307:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f30c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f311:	48 89 04 24          	mov    %rax,(%rsp)
  20f315:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f31a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f31e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f323:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f328:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f32d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f332:	48 83 c4 48          	add    $0x48,%rsp
  20f336:	c3                   	retq   
  20f337:	cc                   	int3   
  20f338:	cc                   	int3   
  20f339:	cc                   	int3   
  20f33a:	cc                   	int3   
  20f33b:	cc                   	int3   
  20f33c:	cc                   	int3   
  20f33d:	cc                   	int3   
  20f33e:	cc                   	int3   
  20f33f:	cc                   	int3   

000000000020f340 <_ZN4core3fmt10ArgumentV13new17h731e686b89db936cE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f340:	48 83 ec 48          	sub    $0x48,%rsp
  20f344:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f349:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f34e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f353:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f358:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f35d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f362:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f367:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f36c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f371:	48 89 04 24          	mov    %rax,(%rsp)
  20f375:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f37a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f37e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f383:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f388:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f38d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f392:	48 83 c4 48          	add    $0x48,%rsp
  20f396:	c3                   	retq   
  20f397:	cc                   	int3   
  20f398:	cc                   	int3   
  20f399:	cc                   	int3   
  20f39a:	cc                   	int3   
  20f39b:	cc                   	int3   
  20f39c:	cc                   	int3   
  20f39d:	cc                   	int3   
  20f39e:	cc                   	int3   
  20f39f:	cc                   	int3   

000000000020f3a0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f3a0:	48 83 ec 48          	sub    $0x48,%rsp
  20f3a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f3a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f3ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f3b3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f3b8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f3bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f3c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f3c7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f3cc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f3d1:	48 89 04 24          	mov    %rax,(%rsp)
  20f3d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f3da:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f3de:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f3e3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f3e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f3ed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f3f2:	48 83 c4 48          	add    $0x48,%rsp
  20f3f6:	c3                   	retq   
  20f3f7:	cc                   	int3   
  20f3f8:	cc                   	int3   
  20f3f9:	cc                   	int3   
  20f3fa:	cc                   	int3   
  20f3fb:	cc                   	int3   
  20f3fc:	cc                   	int3   
  20f3fd:	cc                   	int3   
  20f3fe:	cc                   	int3   
  20f3ff:	cc                   	int3   

000000000020f400 <_ZN4core3fmt10ArgumentV13new17h8dab2205c245e810E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f400:	48 83 ec 48          	sub    $0x48,%rsp
  20f404:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f409:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f40e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f413:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f418:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f41d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f422:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f427:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f42c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f431:	48 89 04 24          	mov    %rax,(%rsp)
  20f435:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f43a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f43e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f443:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f448:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f44d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f452:	48 83 c4 48          	add    $0x48,%rsp
  20f456:	c3                   	retq   
  20f457:	cc                   	int3   
  20f458:	cc                   	int3   
  20f459:	cc                   	int3   
  20f45a:	cc                   	int3   
  20f45b:	cc                   	int3   
  20f45c:	cc                   	int3   
  20f45d:	cc                   	int3   
  20f45e:	cc                   	int3   
  20f45f:	cc                   	int3   

000000000020f460 <_ZN4core3fmt10ArgumentV13new17ha12a9edfec13e26aE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f460:	48 83 ec 48          	sub    $0x48,%rsp
  20f464:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f469:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f46e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f473:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f478:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f47d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f482:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f487:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f48c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f491:	48 89 04 24          	mov    %rax,(%rsp)
  20f495:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f49a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f49e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f4a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f4a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f4ad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f4b2:	48 83 c4 48          	add    $0x48,%rsp
  20f4b6:	c3                   	retq   
  20f4b7:	cc                   	int3   
  20f4b8:	cc                   	int3   
  20f4b9:	cc                   	int3   
  20f4ba:	cc                   	int3   
  20f4bb:	cc                   	int3   
  20f4bc:	cc                   	int3   
  20f4bd:	cc                   	int3   
  20f4be:	cc                   	int3   
  20f4bf:	cc                   	int3   

000000000020f4c0 <_ZN4core3fmt10ArgumentV13new17ha27f7629ef6a1995E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f4c0:	48 83 ec 48          	sub    $0x48,%rsp
  20f4c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f4c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f4ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f4d3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f4d8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f4dd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f4e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f4e7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f4ec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f4f1:	48 89 04 24          	mov    %rax,(%rsp)
  20f4f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f4fa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f4fe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f503:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f508:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f50d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f512:	48 83 c4 48          	add    $0x48,%rsp
  20f516:	c3                   	retq   
  20f517:	cc                   	int3   
  20f518:	cc                   	int3   
  20f519:	cc                   	int3   
  20f51a:	cc                   	int3   
  20f51b:	cc                   	int3   
  20f51c:	cc                   	int3   
  20f51d:	cc                   	int3   
  20f51e:	cc                   	int3   
  20f51f:	cc                   	int3   

000000000020f520 <_ZN4core3fmt10ArgumentV13new17haa5e6f547645fb6cE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f520:	48 83 ec 48          	sub    $0x48,%rsp
  20f524:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f529:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f52e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f533:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f538:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f53d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f542:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f547:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f54c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f551:	48 89 04 24          	mov    %rax,(%rsp)
  20f555:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f55a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f55e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f563:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f568:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f56d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f572:	48 83 c4 48          	add    $0x48,%rsp
  20f576:	c3                   	retq   
  20f577:	cc                   	int3   
  20f578:	cc                   	int3   
  20f579:	cc                   	int3   
  20f57a:	cc                   	int3   
  20f57b:	cc                   	int3   
  20f57c:	cc                   	int3   
  20f57d:	cc                   	int3   
  20f57e:	cc                   	int3   
  20f57f:	cc                   	int3   

000000000020f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f580:	48 83 ec 48          	sub    $0x48,%rsp
  20f584:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f589:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f58e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f593:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f598:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f59d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f5a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f5a7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f5ac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f5b1:	48 89 04 24          	mov    %rax,(%rsp)
  20f5b5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f5ba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f5be:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f5c3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f5c8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f5cd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f5d2:	48 83 c4 48          	add    $0x48,%rsp
  20f5d6:	c3                   	retq   
  20f5d7:	cc                   	int3   
  20f5d8:	cc                   	int3   
  20f5d9:	cc                   	int3   
  20f5da:	cc                   	int3   
  20f5db:	cc                   	int3   
  20f5dc:	cc                   	int3   
  20f5dd:	cc                   	int3   
  20f5de:	cc                   	int3   
  20f5df:	cc                   	int3   

000000000020f5e0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f5e0:	48 83 ec 48          	sub    $0x48,%rsp
  20f5e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f5e9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f5ee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f5f3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f5f8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f5fd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f602:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f607:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f60c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f611:	48 89 04 24          	mov    %rax,(%rsp)
  20f615:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f61a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f61e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f623:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f628:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f62d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f632:	48 83 c4 48          	add    $0x48,%rsp
  20f636:	c3                   	retq   
  20f637:	cc                   	int3   
  20f638:	cc                   	int3   
  20f639:	cc                   	int3   
  20f63a:	cc                   	int3   
  20f63b:	cc                   	int3   
  20f63c:	cc                   	int3   
  20f63d:	cc                   	int3   
  20f63e:	cc                   	int3   
  20f63f:	cc                   	int3   

000000000020f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f640:	48 83 ec 48          	sub    $0x48,%rsp
  20f644:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f649:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f64e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f653:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f658:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f65d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f662:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f667:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f66c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f671:	48 89 04 24          	mov    %rax,(%rsp)
  20f675:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f67a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f67e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f683:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f688:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f68d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f692:	48 83 c4 48          	add    $0x48,%rsp
  20f696:	c3                   	retq   
  20f697:	cc                   	int3   
  20f698:	cc                   	int3   
  20f699:	cc                   	int3   
  20f69a:	cc                   	int3   
  20f69b:	cc                   	int3   
  20f69c:	cc                   	int3   
  20f69d:	cc                   	int3   
  20f69e:	cc                   	int3   
  20f69f:	cc                   	int3   

000000000020f6a0 <_ZN4core3fmt10ArgumentV13new17hcce5101e42e4aeb9E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f6a0:	48 83 ec 48          	sub    $0x48,%rsp
  20f6a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f6a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f6ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f6b3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f6b8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f6bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f6c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f6c7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f6cc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f6d1:	48 89 04 24          	mov    %rax,(%rsp)
  20f6d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f6da:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f6de:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f6e3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f6e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f6ed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f6f2:	48 83 c4 48          	add    $0x48,%rsp
  20f6f6:	c3                   	retq   
  20f6f7:	cc                   	int3   
  20f6f8:	cc                   	int3   
  20f6f9:	cc                   	int3   
  20f6fa:	cc                   	int3   
  20f6fb:	cc                   	int3   
  20f6fc:	cc                   	int3   
  20f6fd:	cc                   	int3   
  20f6fe:	cc                   	int3   
  20f6ff:	cc                   	int3   

000000000020f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f700:	48 83 ec 48          	sub    $0x48,%rsp
  20f704:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f709:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f70e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f713:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f718:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f71d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f722:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f727:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f72c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f731:	48 89 04 24          	mov    %rax,(%rsp)
  20f735:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f73a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f73e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f743:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f748:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f74d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f752:	48 83 c4 48          	add    $0x48,%rsp
  20f756:	c3                   	retq   
  20f757:	cc                   	int3   
  20f758:	cc                   	int3   
  20f759:	cc                   	int3   
  20f75a:	cc                   	int3   
  20f75b:	cc                   	int3   
  20f75c:	cc                   	int3   
  20f75d:	cc                   	int3   
  20f75e:	cc                   	int3   
  20f75f:	cc                   	int3   

000000000020f760 <_ZN4core3fmt10ArgumentV13new17hedb1e574926a384eE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f760:	48 83 ec 48          	sub    $0x48,%rsp
  20f764:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f769:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f76e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f773:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f778:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f77d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f782:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f787:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f78c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f791:	48 89 04 24          	mov    %rax,(%rsp)
  20f795:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f79a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f79e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f7a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f7a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f7ad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f7b2:	48 83 c4 48          	add    $0x48,%rsp
  20f7b6:	c3                   	retq   
  20f7b7:	cc                   	int3   
  20f7b8:	cc                   	int3   
  20f7b9:	cc                   	int3   
  20f7ba:	cc                   	int3   
  20f7bb:	cc                   	int3   
  20f7bc:	cc                   	int3   
  20f7bd:	cc                   	int3   
  20f7be:	cc                   	int3   
  20f7bf:	cc                   	int3   

000000000020f7c0 <_ZN4core3fmt10ArgumentV13new17hf1f1870160aa1ab8E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f7c0:	48 83 ec 48          	sub    $0x48,%rsp
  20f7c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f7c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f7ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f7d3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f7d8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f7dd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f7e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f7e7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f7ec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f7f1:	48 89 04 24          	mov    %rax,(%rsp)
  20f7f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f7fa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f7fe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f803:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f808:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f80d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f812:	48 83 c4 48          	add    $0x48,%rsp
  20f816:	c3                   	retq   
  20f817:	cc                   	int3   
  20f818:	cc                   	int3   
  20f819:	cc                   	int3   
  20f81a:	cc                   	int3   
  20f81b:	cc                   	int3   
  20f81c:	cc                   	int3   
  20f81d:	cc                   	int3   
  20f81e:	cc                   	int3   
  20f81f:	cc                   	int3   

000000000020f820 <_ZN4core3fmt10ArgumentV13new17hf674b26383cf8570E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20f820:	48 83 ec 48          	sub    $0x48,%rsp
  20f824:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f829:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20f82e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20f833:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20f838:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f83d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f842:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f847:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f84c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20f851:	48 89 04 24          	mov    %rax,(%rsp)
  20f855:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f85a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f85e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f863:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f868:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f86d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f872:	48 83 c4 48          	add    $0x48,%rsp
  20f876:	c3                   	retq   
  20f877:	cc                   	int3   
  20f878:	cc                   	int3   
  20f879:	cc                   	int3   
  20f87a:	cc                   	int3   
  20f87b:	cc                   	int3   
  20f87c:	cc                   	int3   
  20f87d:	cc                   	int3   
  20f87e:	cc                   	int3   
  20f87f:	cc                   	int3   

000000000020f880 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h818e9191d55a10c0E>:

// From (and thus Into) is reflexive
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_convert", issue = "88674")]
impl<T> const From<T> for T {
    fn from(t: T) -> T {
  20f880:	50                   	push   %rax
        t
    }
  20f881:	58                   	pop    %rax
  20f882:	c3                   	retq   
  20f883:	cc                   	int3   
  20f884:	cc                   	int3   
  20f885:	cc                   	int3   
  20f886:	cc                   	int3   
  20f887:	cc                   	int3   
  20f888:	cc                   	int3   
  20f889:	cc                   	int3   
  20f88a:	cc                   	int3   
  20f88b:	cc                   	int3   
  20f88c:	cc                   	int3   
  20f88d:	cc                   	int3   
  20f88e:	cc                   	int3   
  20f88f:	cc                   	int3   

000000000020f890 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h358b726a10840d4fE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f890:	48 83 ec 28          	sub    $0x28,%rsp
  20f894:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20f899:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(&**self as *const T), f)
  20f89e:	48 8b 0f             	mov    (%rdi),%rcx
  20f8a1:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f8a5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20f8aa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f8af:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20f8b4:	e8 37 02 00 00       	callq  20faf0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E>
  20f8b9:	88 44 24 07          	mov    %al,0x7(%rsp)
  20f8bd:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20f8c1:	24 01                	and    $0x1,%al
  20f8c3:	0f b6 c0             	movzbl %al,%eax
  20f8c6:	48 83 c4 28          	add    $0x28,%rsp
  20f8ca:	c3                   	retq   
  20f8cb:	cc                   	int3   
  20f8cc:	cc                   	int3   
  20f8cd:	cc                   	int3   
  20f8ce:	cc                   	int3   
  20f8cf:	cc                   	int3   

000000000020f8d0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f8d0:	48 83 ec 78          	sub    $0x78,%rsp
  20f8d4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f8d9:	48 89 f8             	mov    %rdi,%rax
  20f8dc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20f8e1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f8e6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f8eb:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20f8f0:	48 8b 0f             	mov    (%rdi),%rcx
  20f8f3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20f8f8:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f8fc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20f901:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20f906:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20f90b:	8b 47 30             	mov    0x30(%rdi),%eax
  20f90e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20f912:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20f916:	e8 b5 85 02 00       	callq  237ed0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20f91b:	88 44 24 37          	mov    %al,0x37(%rsp)
  20f91f:	8a 44 24 37          	mov    0x37(%rsp),%al
  20f923:	a8 01                	test   $0x1,%al
  20f925:	75 33                	jne    20f95a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x8a>
  20f927:	eb 00                	jmp    20f929 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x59>
  20f929:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f92e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20f933:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20f936:	83 c9 04             	or     $0x4,%ecx
  20f939:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20f93c:	48 8b 00             	mov    (%rax),%rax
  20f93f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f944:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20f949:	e8 82 55 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20f94e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f952:	24 01                	and    $0x1,%al
  20f954:	88 44 24 77          	mov    %al,0x77(%rsp)
  20f958:	eb 4d                	jmp    20f9a7 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xd7>
  20f95a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20f95f:	8b 47 30             	mov    0x30(%rdi),%eax
  20f962:	83 c8 08             	or     $0x8,%eax
  20f965:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20f968:	e8 f3 4c 02 00       	callq  234660 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20f96d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f971:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f975:	a8 01                	test   $0x1,%al
  20f977:	75 04                	jne    20f97d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xad>
  20f979:	eb 00                	jmp    20f97b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xab>
        if f.alternate() {
  20f97b:	eb ac                	jmp    20f929 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x59>
  20f97d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20f982:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20f989:	00 00 
  20f98b:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20f992:	00 00 
  20f994:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20f999:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20f99e:	48 89 10             	mov    %rdx,(%rax)
  20f9a1:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20f9a5:	eb d4                	jmp    20f97b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xab>
  20f9a7:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f9ab:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f9b0:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20f9b4:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20f9b9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20f9be:	48 89 39             	mov    %rdi,(%rcx)
  20f9c1:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20f9c5:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20f9c8:	24 01                	and    $0x1,%al
  20f9ca:	0f b6 c0             	movzbl %al,%eax
  20f9cd:	48 83 c4 78          	add    $0x78,%rsp
  20f9d1:	c3                   	retq   
  20f9d2:	cc                   	int3   
  20f9d3:	cc                   	int3   
  20f9d4:	cc                   	int3   
  20f9d5:	cc                   	int3   
  20f9d6:	cc                   	int3   
  20f9d7:	cc                   	int3   
  20f9d8:	cc                   	int3   
  20f9d9:	cc                   	int3   
  20f9da:	cc                   	int3   
  20f9db:	cc                   	int3   
  20f9dc:	cc                   	int3   
  20f9dd:	cc                   	int3   
  20f9de:	cc                   	int3   
  20f9df:	cc                   	int3   

000000000020f9e0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f9e0:	48 83 ec 78          	sub    $0x78,%rsp
  20f9e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f9e9:	48 89 f8             	mov    %rdi,%rax
  20f9ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20f9f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f9f6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f9fb:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20fa00:	48 8b 0f             	mov    (%rdi),%rcx
  20fa03:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20fa08:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20fa0c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20fa11:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20fa16:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20fa1b:	8b 47 30             	mov    0x30(%rdi),%eax
  20fa1e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20fa22:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20fa26:	e8 a5 84 02 00       	callq  237ed0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20fa2b:	88 44 24 37          	mov    %al,0x37(%rsp)
  20fa2f:	8a 44 24 37          	mov    0x37(%rsp),%al
  20fa33:	a8 01                	test   $0x1,%al
  20fa35:	75 33                	jne    20fa6a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x8a>
  20fa37:	eb 00                	jmp    20fa39 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x59>
  20fa39:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20fa3e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20fa43:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20fa46:	83 c9 04             	or     $0x4,%ecx
  20fa49:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20fa4c:	48 8b 00             	mov    (%rax),%rax
  20fa4f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20fa54:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20fa59:	e8 72 54 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20fa5e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20fa62:	24 01                	and    $0x1,%al
  20fa64:	88 44 24 77          	mov    %al,0x77(%rsp)
  20fa68:	eb 4d                	jmp    20fab7 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xd7>
  20fa6a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20fa6f:	8b 47 30             	mov    0x30(%rdi),%eax
  20fa72:	83 c8 08             	or     $0x8,%eax
  20fa75:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20fa78:	e8 e3 4b 02 00       	callq  234660 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20fa7d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20fa81:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20fa85:	a8 01                	test   $0x1,%al
  20fa87:	75 04                	jne    20fa8d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xad>
  20fa89:	eb 00                	jmp    20fa8b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xab>
        if f.alternate() {
  20fa8b:	eb ac                	jmp    20fa39 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x59>
  20fa8d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20fa92:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20fa99:	00 00 
  20fa9b:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20faa2:	00 00 
  20faa4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20faa9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20faae:	48 89 10             	mov    %rdx,(%rax)
  20fab1:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20fab5:	eb d4                	jmp    20fa8b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xab>
  20fab7:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20fabb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20fac0:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20fac4:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20fac9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20face:	48 89 39             	mov    %rdi,(%rcx)
  20fad1:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20fad5:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20fad8:	24 01                	and    $0x1,%al
  20fada:	0f b6 c0             	movzbl %al,%eax
  20fadd:	48 83 c4 78          	add    $0x78,%rsp
  20fae1:	c3                   	retq   
  20fae2:	cc                   	int3   
  20fae3:	cc                   	int3   
  20fae4:	cc                   	int3   
  20fae5:	cc                   	int3   
  20fae6:	cc                   	int3   
  20fae7:	cc                   	int3   
  20fae8:	cc                   	int3   
  20fae9:	cc                   	int3   
  20faea:	cc                   	int3   
  20faeb:	cc                   	int3   
  20faec:	cc                   	int3   
  20faed:	cc                   	int3   
  20faee:	cc                   	int3   
  20faef:	cc                   	int3   

000000000020faf0 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20faf0:	48 83 ec 78          	sub    $0x78,%rsp
  20faf4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20faf9:	48 89 f8             	mov    %rdi,%rax
  20fafc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20fb01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fb06:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20fb0b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20fb10:	48 8b 0f             	mov    (%rdi),%rcx
  20fb13:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20fb18:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20fb1c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20fb21:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20fb26:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20fb2b:	8b 47 30             	mov    0x30(%rdi),%eax
  20fb2e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20fb32:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20fb36:	e8 95 83 02 00       	callq  237ed0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20fb3b:	88 44 24 37          	mov    %al,0x37(%rsp)
  20fb3f:	8a 44 24 37          	mov    0x37(%rsp),%al
  20fb43:	a8 01                	test   $0x1,%al
  20fb45:	75 33                	jne    20fb7a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x8a>
  20fb47:	eb 00                	jmp    20fb49 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x59>
  20fb49:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20fb4e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20fb53:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20fb56:	83 c9 04             	or     $0x4,%ecx
  20fb59:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20fb5c:	48 8b 00             	mov    (%rax),%rax
  20fb5f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20fb64:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20fb69:	e8 62 53 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20fb6e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20fb72:	24 01                	and    $0x1,%al
  20fb74:	88 44 24 77          	mov    %al,0x77(%rsp)
  20fb78:	eb 4d                	jmp    20fbc7 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xd7>
  20fb7a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20fb7f:	8b 47 30             	mov    0x30(%rdi),%eax
  20fb82:	83 c8 08             	or     $0x8,%eax
  20fb85:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20fb88:	e8 d3 4a 02 00       	callq  234660 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20fb8d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20fb91:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20fb95:	a8 01                	test   $0x1,%al
  20fb97:	75 04                	jne    20fb9d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xad>
  20fb99:	eb 00                	jmp    20fb9b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xab>
        if f.alternate() {
  20fb9b:	eb ac                	jmp    20fb49 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x59>
  20fb9d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20fba2:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20fba9:	00 00 
  20fbab:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20fbb2:	00 00 
  20fbb4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20fbb9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20fbbe:	48 89 10             	mov    %rdx,(%rax)
  20fbc1:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20fbc5:	eb d4                	jmp    20fb9b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xab>
  20fbc7:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20fbcb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20fbd0:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20fbd4:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20fbd9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20fbde:	48 89 39             	mov    %rdi,(%rcx)
  20fbe1:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20fbe5:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20fbe8:	24 01                	and    $0x1,%al
  20fbea:	0f b6 c0             	movzbl %al,%eax
  20fbed:	48 83 c4 78          	add    $0x78,%rsp
  20fbf1:	c3                   	retq   
  20fbf2:	cc                   	int3   
  20fbf3:	cc                   	int3   
  20fbf4:	cc                   	int3   
  20fbf5:	cc                   	int3   
  20fbf6:	cc                   	int3   
  20fbf7:	cc                   	int3   
  20fbf8:	cc                   	int3   
  20fbf9:	cc                   	int3   
  20fbfa:	cc                   	int3   
  20fbfb:	cc                   	int3   
  20fbfc:	cc                   	int3   
  20fbfd:	cc                   	int3   
  20fbfe:	cc                   	int3   
  20fbff:	cc                   	int3   

000000000020fc00 <_ZN79_$LT$r3_kernel..cpu..state..CPURegistersState$u20$as$u20$core..clone..Clone$GT$5clone17hcfd3dcfacdc6f887E>:
#[derive(Clone, Debug)]
  20fc00:	55                   	push   %rbp
  20fc01:	41 57                	push   %r15
  20fc03:	41 56                	push   %r14
  20fc05:	41 55                	push   %r13
  20fc07:	41 54                	push   %r12
  20fc09:	53                   	push   %rbx
  20fc0a:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  20fc11:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  20fc18:	00 
  20fc19:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  20fc20:	00 
  20fc21:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  20fc28:	00 
  20fc29:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  20fc30:	00 
    pub rbp: u64,
  20fc31:	48 89 f7             	mov    %rsi,%rdi
  20fc34:	48 89 bc 24 58 01 00 	mov    %rdi,0x158(%rsp)
  20fc3b:	00 
    pub rax: u64,
  20fc3c:	48 89 f0             	mov    %rsi,%rax
  20fc3f:	48 83 c0 08          	add    $0x8,%rax
  20fc43:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20fc4a:	00 
  20fc4b:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  20fc52:	00 
    pub rbx: u64,
  20fc53:	48 89 f0             	mov    %rsi,%rax
  20fc56:	48 83 c0 10          	add    $0x10,%rax
  20fc5a:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20fc61:	00 
  20fc62:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  20fc69:	00 
    pub rcx: u64,
  20fc6a:	48 89 f0             	mov    %rsi,%rax
  20fc6d:	48 83 c0 18          	add    $0x18,%rax
  20fc71:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20fc78:	00 
  20fc79:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  20fc80:	00 
    pub rdx: u64,
  20fc81:	48 89 f0             	mov    %rsi,%rax
  20fc84:	48 83 c0 20          	add    $0x20,%rax
  20fc88:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20fc8f:	00 
  20fc90:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  20fc97:	00 
    pub rsi: u64,
  20fc98:	48 89 f0             	mov    %rsi,%rax
  20fc9b:	48 83 c0 28          	add    $0x28,%rax
  20fc9f:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20fca6:	00 
  20fca7:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  20fcae:	00 
    pub rdi: u64,
  20fcaf:	48 89 f0             	mov    %rsi,%rax
  20fcb2:	48 83 c0 30          	add    $0x30,%rax
  20fcb6:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20fcbd:	00 
  20fcbe:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  20fcc5:	00 
    pub r8: u64,
  20fcc6:	48 89 f0             	mov    %rsi,%rax
  20fcc9:	48 83 c0 38          	add    $0x38,%rax
  20fccd:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20fcd4:	00 
  20fcd5:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  20fcdc:	00 
    pub r9: u64,
  20fcdd:	48 89 f0             	mov    %rsi,%rax
  20fce0:	48 83 c0 40          	add    $0x40,%rax
  20fce4:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20fceb:	00 
  20fcec:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  20fcf3:	00 
    pub r10: u64,
  20fcf4:	48 89 f0             	mov    %rsi,%rax
  20fcf7:	48 83 c0 48          	add    $0x48,%rax
  20fcfb:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20fd02:	00 
  20fd03:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  20fd0a:	00 
    pub r11: u64,
  20fd0b:	48 89 f0             	mov    %rsi,%rax
  20fd0e:	48 83 c0 50          	add    $0x50,%rax
  20fd12:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20fd19:	00 
  20fd1a:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  20fd21:	00 
    pub r12: u64,
  20fd22:	48 89 f0             	mov    %rsi,%rax
  20fd25:	48 83 c0 58          	add    $0x58,%rax
  20fd29:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20fd30:	00 
  20fd31:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20fd38:	00 
    pub r13: u64,
  20fd39:	48 89 f0             	mov    %rsi,%rax
  20fd3c:	48 83 c0 60          	add    $0x60,%rax
  20fd40:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20fd47:	00 
  20fd48:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  20fd4f:	00 
    pub r14: u64,
  20fd50:	48 89 f0             	mov    %rsi,%rax
  20fd53:	48 83 c0 68          	add    $0x68,%rax
  20fd57:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20fd5e:	00 
  20fd5f:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  20fd66:	00 
    pub r15: u64,
  20fd67:	48 89 f0             	mov    %rsi,%rax
  20fd6a:	48 83 c0 70          	add    $0x70,%rax
  20fd6e:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  20fd75:	00 
  20fd76:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  20fd7d:	00 
    pub rip: u64,
  20fd7e:	48 89 f0             	mov    %rsi,%rax
  20fd81:	48 83 c0 78          	add    $0x78,%rax
  20fd85:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20fd8c:	00 
  20fd8d:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  20fd94:	00 
    pub cs: u64,
  20fd95:	48 89 f0             	mov    %rsi,%rax
  20fd98:	48 05 80 00 00 00    	add    $0x80,%rax
  20fd9e:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20fda5:	00 
  20fda6:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  20fdad:	00 
    pub rflags: u64,
  20fdae:	48 89 f0             	mov    %rsi,%rax
  20fdb1:	48 05 88 00 00 00    	add    $0x88,%rax
  20fdb7:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  20fdbe:	00 
  20fdbf:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  20fdc6:	00 
    pub rsp: u64,
  20fdc7:	48 89 f0             	mov    %rsi,%rax
  20fdca:	48 05 90 00 00 00    	add    $0x90,%rax
  20fdd0:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20fdd7:	00 
  20fdd8:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  20fddf:	00 
    pub ss: u64,
  20fde0:	48 81 c6 98 00 00 00 	add    $0x98,%rsi
  20fde7:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  20fdee:	00 
  20fdef:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  20fdf6:	00 
    pub rbp: u64,
  20fdf7:	e8 64 1a 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fdfc:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  20fe03:	00 
  20fe04:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  20fe0b:	00 
    pub rax: u64,
  20fe0c:	e8 4f 1a 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe11:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20fe18:	00 
  20fe19:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  20fe20:	00 
    pub rbx: u64,
  20fe21:	e8 3a 1a 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe26:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20fe2d:	00 
  20fe2e:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  20fe35:	00 
    pub rcx: u64,
  20fe36:	e8 25 1a 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe3b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20fe42:	00 
  20fe43:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  20fe4a:	00 
    pub rdx: u64,
  20fe4b:	e8 10 1a 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe50:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20fe55:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  20fe5c:	00 
    pub rsi: u64,
  20fe5d:	e8 fe 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe62:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20fe67:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  20fe6e:	00 
    pub rdi: u64,
  20fe6f:	e8 ec 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe74:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20fe79:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  20fe80:	00 
    pub r8: u64,
  20fe81:	e8 da 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe86:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20fe8b:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  20fe92:	00 
    pub r9: u64,
  20fe93:	e8 c8 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fe98:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20fe9d:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  20fea4:	00 
    pub r10: u64,
  20fea5:	e8 b6 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20feaa:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20feaf:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  20feb6:	00 
    pub r11: u64,
  20feb7:	e8 a4 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20febc:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20fec1:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  20fec8:	00 
    pub r12: u64,
  20fec9:	e8 92 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fece:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20fed3:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  20feda:	00 
    pub r13: u64,
  20fedb:	e8 80 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fee0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20fee5:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  20feec:	00 
    pub r14: u64,
  20feed:	e8 6e 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20fef2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20fef7:	48 8b bc 24 18 01 00 	mov    0x118(%rsp),%rdi
  20fefe:	00 
    pub r15: u64,
  20feff:	e8 5c 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff04:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ff09:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  20ff10:	00 
    pub rip: u64,
  20ff11:	e8 4a 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff16:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ff1b:	48 8b bc 24 28 01 00 	mov    0x128(%rsp),%rdi
  20ff22:	00 
    pub cs: u64,
  20ff23:	e8 38 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff28:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ff2d:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
  20ff34:	00 
    pub rflags: u64,
  20ff35:	e8 26 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff3a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ff3f:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  20ff46:	00 
    pub rsp: u64,
  20ff47:	e8 14 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff4c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ff51:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  20ff58:	00 
    pub ss: u64,
  20ff59:	e8 02 19 01 00       	callq  221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>
  20ff5e:	48 89 04 24          	mov    %rax,(%rsp)
  20ff62:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  20ff69:	00 
  20ff6a:	48 8b 14 24          	mov    (%rsp),%rdx
  20ff6e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20ff73:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20ff78:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
  20ff7d:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
  20ff82:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  20ff87:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  20ff8c:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
  20ff91:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
  20ff96:	4c 8b 7c 24 48       	mov    0x48(%rsp),%r15
  20ff9b:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
  20ffa0:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
  20ffa5:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
  20ffaa:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  20ffb1:	00 
#[derive(Clone, Debug)]
  20ffb2:	48 89 01             	mov    %rax,(%rcx)
  20ffb5:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  20ffbc:	00 
  20ffbd:	48 89 41 08          	mov    %rax,0x8(%rcx)
  20ffc1:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20ffc8:	00 
  20ffc9:	48 89 41 10          	mov    %rax,0x10(%rcx)
  20ffcd:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20ffd4:	00 
  20ffd5:	48 89 41 18          	mov    %rax,0x18(%rcx)
  20ffd9:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20ffde:	48 89 41 20          	mov    %rax,0x20(%rcx)
  20ffe2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20ffe7:	48 89 41 28          	mov    %rax,0x28(%rcx)
  20ffeb:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20fff0:	48 89 41 30          	mov    %rax,0x30(%rcx)
  20fff4:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20fffb:	00 
  20fffc:	48 89 69 38          	mov    %rbp,0x38(%rcx)
  210000:	4c 89 69 40          	mov    %r13,0x40(%rcx)
  210004:	4c 89 61 48          	mov    %r12,0x48(%rcx)
  210008:	4c 89 79 50          	mov    %r15,0x50(%rcx)
  21000c:	4c 89 71 58          	mov    %r14,0x58(%rcx)
  210010:	48 89 59 60          	mov    %rbx,0x60(%rcx)
  210014:	4c 89 59 68          	mov    %r11,0x68(%rcx)
  210018:	4c 89 51 70          	mov    %r10,0x70(%rcx)
  21001c:	4c 89 49 78          	mov    %r9,0x78(%rcx)
  210020:	4c 89 81 80 00 00 00 	mov    %r8,0x80(%rcx)
  210027:	48 89 b9 88 00 00 00 	mov    %rdi,0x88(%rcx)
  21002e:	48 89 b1 90 00 00 00 	mov    %rsi,0x90(%rcx)
  210035:	48 89 91 98 00 00 00 	mov    %rdx,0x98(%rcx)
  21003c:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  210043:	5b                   	pop    %rbx
  210044:	41 5c                	pop    %r12
  210046:	41 5d                	pop    %r13
  210048:	41 5e                	pop    %r14
  21004a:	41 5f                	pop    %r15
  21004c:	5d                   	pop    %rbp
  21004d:	c3                   	retq   
  21004e:	cc                   	int3   
  21004f:	cc                   	int3   

0000000000210050 <_ZN77_$LT$r3_kernel..cpu..state..CPURegistersState$u20$as$u20$core..fmt..Debug$GT$3fmt17h4d280037658e2b33E>:
  210050:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  210057:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21005c:	48 89 f8             	mov    %rdi,%rax
  21005f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210064:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210069:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  210070:	00 
  210071:	48 89 bc 24 78 01 00 	mov    %rdi,0x178(%rsp)
  210078:	00 
    pub rbp: u64,
  210079:	48 89 c1             	mov    %rax,%rcx
  21007c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  210081:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  210088:	00 
    pub rax: u64,
  210089:	48 89 c1             	mov    %rax,%rcx
  21008c:	48 83 c1 08          	add    $0x8,%rcx
  210090:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  210095:	48 89 8c 24 88 01 00 	mov    %rcx,0x188(%rsp)
  21009c:	00 
    pub rbx: u64,
  21009d:	48 89 c1             	mov    %rax,%rcx
  2100a0:	48 83 c1 10          	add    $0x10,%rcx
  2100a4:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2100a9:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  2100b0:	00 
    pub rcx: u64,
  2100b1:	48 89 c1             	mov    %rax,%rcx
  2100b4:	48 83 c1 18          	add    $0x18,%rcx
  2100b8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2100bd:	48 89 8c 24 98 01 00 	mov    %rcx,0x198(%rsp)
  2100c4:	00 
    pub rdx: u64,
  2100c5:	48 89 c1             	mov    %rax,%rcx
  2100c8:	48 83 c1 20          	add    $0x20,%rcx
  2100cc:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2100d1:	48 89 8c 24 a0 01 00 	mov    %rcx,0x1a0(%rsp)
  2100d8:	00 
    pub rsi: u64,
  2100d9:	48 89 c1             	mov    %rax,%rcx
  2100dc:	48 83 c1 28          	add    $0x28,%rcx
  2100e0:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2100e5:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  2100ec:	00 
    pub rdi: u64,
  2100ed:	48 89 c1             	mov    %rax,%rcx
  2100f0:	48 83 c1 30          	add    $0x30,%rcx
  2100f4:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  2100f9:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  210100:	00 
    pub r8: u64,
  210101:	48 89 c1             	mov    %rax,%rcx
  210104:	48 83 c1 38          	add    $0x38,%rcx
  210108:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21010d:	48 89 8c 24 b8 01 00 	mov    %rcx,0x1b8(%rsp)
  210114:	00 
    pub r9: u64,
  210115:	48 89 c1             	mov    %rax,%rcx
  210118:	48 83 c1 40          	add    $0x40,%rcx
  21011c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  210121:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  210128:	00 
    pub r10: u64,
  210129:	48 89 c1             	mov    %rax,%rcx
  21012c:	48 83 c1 48          	add    $0x48,%rcx
  210130:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  210135:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  21013c:	00 
    pub r11: u64,
  21013d:	48 89 c1             	mov    %rax,%rcx
  210140:	48 83 c1 50          	add    $0x50,%rcx
  210144:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  210149:	48 89 8c 24 d0 01 00 	mov    %rcx,0x1d0(%rsp)
  210150:	00 
    pub r12: u64,
  210151:	48 89 c1             	mov    %rax,%rcx
  210154:	48 83 c1 58          	add    $0x58,%rcx
  210158:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  21015d:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  210164:	00 
    pub r13: u64,
  210165:	48 89 c1             	mov    %rax,%rcx
  210168:	48 83 c1 60          	add    $0x60,%rcx
  21016c:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  210173:	00 
  210174:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  21017b:	00 
    pub r14: u64,
  21017c:	48 89 c1             	mov    %rax,%rcx
  21017f:	48 83 c1 68          	add    $0x68,%rcx
  210183:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21018a:	00 
  21018b:	48 89 8c 24 e8 01 00 	mov    %rcx,0x1e8(%rsp)
  210192:	00 
    pub r15: u64,
  210193:	48 89 c1             	mov    %rax,%rcx
  210196:	48 83 c1 70          	add    $0x70,%rcx
  21019a:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  2101a1:	00 
  2101a2:	48 89 8c 24 f0 01 00 	mov    %rcx,0x1f0(%rsp)
  2101a9:	00 
    pub rip: u64,
  2101aa:	48 89 c1             	mov    %rax,%rcx
  2101ad:	48 83 c1 78          	add    $0x78,%rcx
  2101b1:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2101b8:	00 
  2101b9:	48 89 8c 24 f8 01 00 	mov    %rcx,0x1f8(%rsp)
  2101c0:	00 
    pub cs: u64,
  2101c1:	48 89 c1             	mov    %rax,%rcx
  2101c4:	48 83 e9 80          	sub    $0xffffffffffffff80,%rcx
  2101c8:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  2101cf:	00 
  2101d0:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  2101d7:	00 
    pub rflags: u64,
  2101d8:	48 89 c1             	mov    %rax,%rcx
  2101db:	48 81 c1 88 00 00 00 	add    $0x88,%rcx
  2101e2:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  2101e9:	00 
  2101ea:	48 89 8c 24 08 02 00 	mov    %rcx,0x208(%rsp)
  2101f1:	00 
    pub rsp: u64,
  2101f2:	48 89 c1             	mov    %rax,%rcx
  2101f5:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
  2101fc:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  210203:	00 
  210204:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  21020b:	00 
    pub ss: u64,
  21020c:	48 05 98 00 00 00    	add    $0x98,%rax
  210212:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  210219:	00 
  21021a:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  210221:	00 
#[derive(Clone, Debug)]
  210222:	48 8d 35 cd 07 ff ff 	lea    -0xf833(%rip),%rsi        # 2009f6 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  210229:	ba 11 00 00 00       	mov    $0x11,%edx
  21022e:	e8 cd 7c 02 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  210233:	48 89 94 24 28 02 00 	mov    %rdx,0x228(%rsp)
  21023a:	00 
  21023b:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  210242:	00 
  210243:	48 8b 84 24 20 02 00 	mov    0x220(%rsp),%rax
  21024a:	00 
  21024b:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  210252:	00 
  210253:	48 8b 84 24 28 02 00 	mov    0x228(%rsp),%rax
  21025a:	00 
  21025b:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  210262:	00 
  210263:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210268:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  21026f:	00 
  210270:	48 89 8c 24 30 02 00 	mov    %rcx,0x230(%rsp)
  210277:	00 
    pub rbp: u64,
  210278:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21027f:	00 
  210280:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  210287:	00 
#[derive(Clone, Debug)]
  210288:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21028f:	00 
  210290:	48 8d 35 70 07 ff ff 	lea    -0xf890(%rip),%rsi        # 200a07 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x11>
  210297:	ba 03 00 00 00       	mov    $0x3,%edx
  21029c:	4c 8d 05 3d a1 02 00 	lea    0x2a13d(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2102a3:	e8 e8 4f 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2102a8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub rax: u64,
  2102ad:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2102b4:	00 
  2102b5:	48 8d 8c 24 d8 00 00 	lea    0xd8(%rsp),%rcx
  2102bc:	00 
#[derive(Clone, Debug)]
  2102bd:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2102c4:	00 
  2102c5:	48 8d 35 3e 07 ff ff 	lea    -0xf8c2(%rip),%rsi        # 200a0a <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x14>
  2102cc:	ba 03 00 00 00       	mov    $0x3,%edx
  2102d1:	4c 8d 05 08 a1 02 00 	lea    0x2a108(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2102d8:	e8 b3 4f 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2102dd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    pub rbx: u64,
  2102e2:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2102e9:	00 
  2102ea:	48 8d 8c 24 e0 00 00 	lea    0xe0(%rsp),%rcx
  2102f1:	00 
#[derive(Clone, Debug)]
  2102f2:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2102f9:	00 
  2102fa:	48 8d 35 0c 07 ff ff 	lea    -0xf8f4(%rip),%rsi        # 200a0d <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x17>
  210301:	ba 03 00 00 00       	mov    $0x3,%edx
  210306:	4c 8d 05 d3 a0 02 00 	lea    0x2a0d3(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  21030d:	e8 7e 4f 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210312:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    pub rcx: u64,
  210317:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21031e:	00 
  21031f:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  210326:	00 
#[derive(Clone, Debug)]
  210327:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21032e:	00 
  21032f:	48 8d 35 da 06 ff ff 	lea    -0xf926(%rip),%rsi        # 200a10 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x1a>
  210336:	ba 03 00 00 00       	mov    $0x3,%edx
  21033b:	4c 8d 05 9e a0 02 00 	lea    0x2a09e(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210342:	e8 49 4f 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210347:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    pub rdx: u64,
  21034c:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  210353:	00 
  210354:	48 8d 8c 24 f0 00 00 	lea    0xf0(%rsp),%rcx
  21035b:	00 
#[derive(Clone, Debug)]
  21035c:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210363:	00 
  210364:	48 8d 35 a8 06 ff ff 	lea    -0xf958(%rip),%rsi        # 200a13 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x1d>
  21036b:	ba 03 00 00 00       	mov    $0x3,%edx
  210370:	4c 8d 05 69 a0 02 00 	lea    0x2a069(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210377:	e8 14 4f 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  21037c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    pub rsi: u64,
  210381:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  210388:	00 
  210389:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  210390:	00 
#[derive(Clone, Debug)]
  210391:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210398:	00 
  210399:	48 8d 35 76 06 ff ff 	lea    -0xf98a(%rip),%rsi        # 200a16 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x20>
  2103a0:	ba 03 00 00 00       	mov    $0x3,%edx
  2103a5:	4c 8d 05 34 a0 02 00 	lea    0x2a034(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2103ac:	e8 df 4e 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2103b1:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    pub rdi: u64,
  2103b6:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  2103bd:	00 
  2103be:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  2103c5:	00 
#[derive(Clone, Debug)]
  2103c6:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2103cd:	00 
  2103ce:	48 8d 35 44 06 ff ff 	lea    -0xf9bc(%rip),%rsi        # 200a19 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x23>
  2103d5:	ba 03 00 00 00       	mov    $0x3,%edx
  2103da:	4c 8d 05 ff 9f 02 00 	lea    0x29fff(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2103e1:	e8 aa 4e 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2103e6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    pub r8: u64,
  2103eb:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  2103f2:	00 
  2103f3:	48 8d 8c 24 08 01 00 	lea    0x108(%rsp),%rcx
  2103fa:	00 
#[derive(Clone, Debug)]
  2103fb:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210402:	00 
  210403:	48 8d 35 12 06 ff ff 	lea    -0xf9ee(%rip),%rsi        # 200a1c <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x26>
  21040a:	ba 02 00 00 00       	mov    $0x2,%edx
  21040f:	4c 8d 05 ca 9f 02 00 	lea    0x29fca(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210416:	e8 75 4e 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  21041b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    pub r9: u64,
  210420:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  210427:	00 
  210428:	48 8d 8c 24 10 01 00 	lea    0x110(%rsp),%rcx
  21042f:	00 
#[derive(Clone, Debug)]
  210430:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210437:	00 
  210438:	48 8d 35 df 05 ff ff 	lea    -0xfa21(%rip),%rsi        # 200a1e <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x28>
  21043f:	ba 02 00 00 00       	mov    $0x2,%edx
  210444:	4c 8d 05 95 9f 02 00 	lea    0x29f95(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  21044b:	e8 40 4e 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210450:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    pub r10: u64,
  210455:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  21045c:	00 
  21045d:	48 8d 8c 24 18 01 00 	lea    0x118(%rsp),%rcx
  210464:	00 
#[derive(Clone, Debug)]
  210465:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21046c:	00 
  21046d:	48 8d 35 ac 05 ff ff 	lea    -0xfa54(%rip),%rsi        # 200a20 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x2a>
  210474:	ba 03 00 00 00       	mov    $0x3,%edx
  210479:	4c 8d 05 60 9f 02 00 	lea    0x29f60(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210480:	e8 0b 4e 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210485:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
    pub r11: u64,
  21048a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  210491:	00 
  210492:	48 8d 8c 24 20 01 00 	lea    0x120(%rsp),%rcx
  210499:	00 
#[derive(Clone, Debug)]
  21049a:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2104a1:	00 
  2104a2:	48 8d 35 7a 05 ff ff 	lea    -0xfa86(%rip),%rsi        # 200a23 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x2d>
  2104a9:	ba 03 00 00 00       	mov    $0x3,%edx
  2104ae:	4c 8d 05 2b 9f 02 00 	lea    0x29f2b(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2104b5:	e8 d6 4d 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2104ba:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    pub r12: u64,
  2104bf:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2104c6:	00 
  2104c7:	48 8d 8c 24 28 01 00 	lea    0x128(%rsp),%rcx
  2104ce:	00 
#[derive(Clone, Debug)]
  2104cf:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2104d6:	00 
  2104d7:	48 8d 35 48 05 ff ff 	lea    -0xfab8(%rip),%rsi        # 200a26 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x30>
  2104de:	ba 03 00 00 00       	mov    $0x3,%edx
  2104e3:	4c 8d 05 f6 9e 02 00 	lea    0x29ef6(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2104ea:	e8 a1 4d 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2104ef:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2104f6:	00 
    pub r13: u64,
  2104f7:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2104fe:	00 
  2104ff:	48 8d 8c 24 30 01 00 	lea    0x130(%rsp),%rcx
  210506:	00 
#[derive(Clone, Debug)]
  210507:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21050e:	00 
  21050f:	48 8d 35 13 05 ff ff 	lea    -0xfaed(%rip),%rsi        # 200a29 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x33>
  210516:	ba 03 00 00 00       	mov    $0x3,%edx
  21051b:	4c 8d 05 be 9e 02 00 	lea    0x29ebe(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210522:	e8 69 4d 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210527:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21052e:	00 
    pub r14: u64,
  21052f:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  210536:	00 
  210537:	48 8d 8c 24 38 01 00 	lea    0x138(%rsp),%rcx
  21053e:	00 
#[derive(Clone, Debug)]
  21053f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210546:	00 
  210547:	48 8d 35 de 04 ff ff 	lea    -0xfb22(%rip),%rsi        # 200a2c <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x36>
  21054e:	ba 03 00 00 00       	mov    $0x3,%edx
  210553:	4c 8d 05 86 9e 02 00 	lea    0x29e86(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  21055a:	e8 31 4d 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  21055f:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  210566:	00 
    pub r15: u64,
  210567:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21056e:	00 
  21056f:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  210576:	00 
#[derive(Clone, Debug)]
  210577:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21057e:	00 
  21057f:	48 8d 35 a9 04 ff ff 	lea    -0xfb57(%rip),%rsi        # 200a2f <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x39>
  210586:	ba 03 00 00 00       	mov    $0x3,%edx
  21058b:	4c 8d 05 4e 9e 02 00 	lea    0x29e4e(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210592:	e8 f9 4c 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210597:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21059e:	00 
    pub rip: u64,
  21059f:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2105a6:	00 
  2105a7:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  2105ae:	00 
#[derive(Clone, Debug)]
  2105af:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2105b6:	00 
  2105b7:	48 8d 35 74 04 ff ff 	lea    -0xfb8c(%rip),%rsi        # 200a32 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x3c>
  2105be:	ba 03 00 00 00       	mov    $0x3,%edx
  2105c3:	4c 8d 05 16 9e 02 00 	lea    0x29e16(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2105ca:	e8 c1 4c 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2105cf:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2105d6:	00 
    pub cs: u64,
  2105d7:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2105de:	00 
  2105df:	48 8d 8c 24 50 01 00 	lea    0x150(%rsp),%rcx
  2105e6:	00 
#[derive(Clone, Debug)]
  2105e7:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2105ee:	00 
  2105ef:	48 8d 35 3f 04 ff ff 	lea    -0xfbc1(%rip),%rsi        # 200a35 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x3f>
  2105f6:	ba 02 00 00 00       	mov    $0x2,%edx
  2105fb:	4c 8d 05 de 9d 02 00 	lea    0x29dde(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210602:	e8 89 4c 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210607:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21060e:	00 
    pub rflags: u64,
  21060f:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  210616:	00 
  210617:	48 8d 8c 24 58 01 00 	lea    0x158(%rsp),%rcx
  21061e:	00 
#[derive(Clone, Debug)]
  21061f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210626:	00 
  210627:	48 8d 35 09 04 ff ff 	lea    -0xfbf7(%rip),%rsi        # 200a37 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x41>
  21062e:	ba 06 00 00 00       	mov    $0x6,%edx
  210633:	4c 8d 05 a6 9d 02 00 	lea    0x29da6(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  21063a:	e8 51 4c 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  21063f:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  210646:	00 
    pub rsp: u64,
  210647:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21064e:	00 
  21064f:	48 8d 8c 24 60 01 00 	lea    0x160(%rsp),%rcx
  210656:	00 
#[derive(Clone, Debug)]
  210657:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21065e:	00 
  21065f:	48 8d 35 d7 03 ff ff 	lea    -0xfc29(%rip),%rsi        # 200a3d <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x47>
  210666:	ba 03 00 00 00       	mov    $0x3,%edx
  21066b:	4c 8d 05 6e 9d 02 00 	lea    0x29d6e(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  210672:	e8 19 4c 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  210677:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21067e:	00 
    pub ss: u64,
  21067f:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  210686:	00 
  210687:	48 8d 8c 24 68 01 00 	lea    0x168(%rsp),%rcx
  21068e:	00 
#[derive(Clone, Debug)]
  21068f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  210696:	00 
  210697:	48 8d 35 a2 03 ff ff 	lea    -0xfc5e(%rip),%rsi        # 200a40 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x4a>
  21069e:	ba 02 00 00 00       	mov    $0x2,%edx
  2106a3:	4c 8d 05 36 9d 02 00 	lea    0x29d36(%rip),%r8        # 23a3e0 <memcmp+0x16a0>
  2106aa:	e8 e1 4b 02 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2106af:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2106b6:	00 
  2106b7:	e8 94 4d 02 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  2106bc:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2106c0:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2106c4:	24 01                	and    $0x1,%al
  2106c6:	0f b6 c0             	movzbl %al,%eax
  2106c9:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  2106d0:	c3                   	retq   
  2106d1:	cc                   	int3   
  2106d2:	cc                   	int3   
  2106d3:	cc                   	int3   
  2106d4:	cc                   	int3   
  2106d5:	cc                   	int3   
  2106d6:	cc                   	int3   
  2106d7:	cc                   	int3   
  2106d8:	cc                   	int3   
  2106d9:	cc                   	int3   
  2106da:	cc                   	int3   
  2106db:	cc                   	int3   
  2106dc:	cc                   	int3   
  2106dd:	cc                   	int3   
  2106de:	cc                   	int3   
  2106df:	cc                   	int3   

00000000002106e0 <_ZN9r3_kernel3cpu17enable_interrupts17hadc75702e8511745E>:
pub mod tsc;
pub mod state;

pub fn enable_interrupts() {
    unsafe {
        asm!("sti", options(nomem, nostack));
  2106e0:	fb                   	sti    
    }
}
  2106e1:	c3                   	retq   
  2106e2:	cc                   	int3   
  2106e3:	cc                   	int3   
  2106e4:	cc                   	int3   
  2106e5:	cc                   	int3   
  2106e6:	cc                   	int3   
  2106e7:	cc                   	int3   
  2106e8:	cc                   	int3   
  2106e9:	cc                   	int3   
  2106ea:	cc                   	int3   
  2106eb:	cc                   	int3   
  2106ec:	cc                   	int3   
  2106ed:	cc                   	int3   
  2106ee:	cc                   	int3   
  2106ef:	cc                   	int3   

00000000002106f0 <_ZN9r3_kernel3cpu18disable_interrupts17hfd635ca60ca5bd45E>:

pub fn disable_interrupts() {
    unsafe {
        asm!("cli", options(nomem, nostack));
  2106f0:	fa                   	cli    
    }
}
  2106f1:	c3                   	retq   
  2106f2:	cc                   	int3   
  2106f3:	cc                   	int3   
  2106f4:	cc                   	int3   
  2106f5:	cc                   	int3   
  2106f6:	cc                   	int3   
  2106f7:	cc                   	int3   
  2106f8:	cc                   	int3   
  2106f9:	cc                   	int3   
  2106fa:	cc                   	int3   
  2106fb:	cc                   	int3   
  2106fc:	cc                   	int3   
  2106fd:	cc                   	int3   
  2106fe:	cc                   	int3   
  2106ff:	cc                   	int3   

0000000000210700 <_ZN9r3_kernel3cpu17create_breakpoint17hba9b2e782d41c415E>:
    rflags::RFlags::is_set(rflags::RFlagsStruct::INTERRUPT_FLAG)
}

pub fn create_breakpoint() {
    unsafe {
        asm!("int3", options(nomem, nostack));
  210700:	cc                   	int3   
    }
}
  210701:	c3                   	retq   
  210702:	cc                   	int3   
  210703:	cc                   	int3   
  210704:	cc                   	int3   
  210705:	cc                   	int3   
  210706:	cc                   	int3   
  210707:	cc                   	int3   
  210708:	cc                   	int3   
  210709:	cc                   	int3   
  21070a:	cc                   	int3   
  21070b:	cc                   	int3   
  21070c:	cc                   	int3   
  21070d:	cc                   	int3   
  21070e:	cc                   	int3   
  21070f:	cc                   	int3   

0000000000210710 <_ZN9r3_kernel3cpu20halt_with_interrupts17hfe1a7524354522bdE>:
    unsafe {
        asm!("hlt");
    }
}

pub fn halt_with_interrupts() -> ! {
  210710:	50                   	push   %rax
    enable_interrupts();
  210711:	e8 ca ff ff ff       	callq  2106e0 <_ZN9r3_kernel3cpu17enable_interrupts17hadc75702e8511745E>
    unsafe {
        loop {
            asm!("hlt", options(nomem, nostack));
  210716:	f4                   	hlt    
  210717:	eb fd                	jmp    210716 <_ZN9r3_kernel3cpu20halt_with_interrupts17hfe1a7524354522bdE+0x6>
  210719:	cc                   	int3   
  21071a:	cc                   	int3   
  21071b:	cc                   	int3   
  21071c:	cc                   	int3   
  21071d:	cc                   	int3   
  21071e:	cc                   	int3   
  21071f:	cc                   	int3   

0000000000210720 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>:
        }
    }
}

pub fn halt_no_interrupts() -> ! {
  210720:	50                   	push   %rax
    disable_interrupts();
  210721:	e8 ca ff ff ff       	callq  2106f0 <_ZN9r3_kernel3cpu18disable_interrupts17hfd635ca60ca5bd45E>
    unsafe {
        loop {
            asm!("hlt", options(nomem, nostack));
  210726:	f4                   	hlt    
  210727:	eb fd                	jmp    210726 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E+0x6>
  210729:	cc                   	int3   
  21072a:	cc                   	int3   
  21072b:	cc                   	int3   
  21072c:	cc                   	int3   
  21072d:	cc                   	int3   
  21072e:	cc                   	int3   
  21072f:	cc                   	int3   

0000000000210730 <_ZN9r3_kernel3cpu26init_base_processor_tables17he70b2cdd0f8622b9E>:
        }
    }
}

pub fn init_base_processor_tables() {
  210730:	50                   	push   %rax
    segments::init_gdt();
  210731:	e8 da c9 00 00       	callq  21d110 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E>
    exceptions::init_exceptions();
  210736:	e8 a5 b7 01 00       	callq  22bee0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E>
}
  21073b:	58                   	pop    %rax
  21073c:	c3                   	retq   
  21073d:	cc                   	int3   
  21073e:	cc                   	int3   
  21073f:	cc                   	int3   

0000000000210740 <_ZN9r3_kernel3cpu23init_features_detection17he58408ebd0f89f65E>:

pub fn init_features_detection() {
  210740:	50                   	push   %rax
    // this will call the lazy static to initialize
    cpuid::display_features();
  210741:	e8 ba 1d 01 00       	callq  222500 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E>
    cpuid::assert_min_levels();
  210746:	e8 35 1b 01 00       	callq  222280 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E>
}
  21074b:	58                   	pop    %rax
  21074c:	c3                   	retq   
  21074d:	cc                   	int3   
  21074e:	cc                   	int3   
  21074f:	cc                   	int3   

0000000000210750 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE>:

pub fn run_test_breakpoint_recovery() {
  210750:	48 83 ec 68          	sub    $0x68,%rsp
    create_breakpoint();
  210754:	e8 a7 ff ff ff       	callq  210700 <_ZN9r3_kernel3cpu17create_breakpoint17hba9b2e782d41c415E>
    log::info!("Recovered from breakpoint, interrupts properly working.");
  210759:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  210760:	00 00 
  210762:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  210767:	48 8d 35 8a fb fe ff 	lea    -0x10476(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21076e:	e8 5d 28 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  210773:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210777:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21077b:	a8 01                	test   $0x1,%al
  21077d:	75 09                	jne    210788 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x38>
  21077f:	eb 00                	jmp    210781 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x31>
  210781:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  210786:	eb 42                	jmp    2107ca <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x7a>
  210788:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  21078d:	48 8b 3d b4 d3 02 00 	mov    0x2d3b4(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  210794:	0f b6 74 24 5f       	movzbl 0x5f(%rsp),%esi
  210799:	e8 52 aa 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21079e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2107a3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2107a8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2107ad:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2107b2:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  2107b7:	e8 14 28 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2107bc:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2107c0:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2107c4:	24 01                	and    $0x1,%al
  2107c6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2107ca:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  2107cf:	75 05                	jne    2107d6 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x86>
}
  2107d1:	48 83 c4 68          	add    $0x68,%rsp
  2107d5:	c3                   	retq   
    log::info!("Recovered from breakpoint, interrupts properly working.");
  2107d6:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2107db:	48 8d 35 1e 9c 02 00 	lea    0x29c1e(%rip),%rsi        # 23a400 <memcmp+0x16c0>
  2107e2:	ba 01 00 00 00       	mov    $0x1,%edx
  2107e7:	48 8d 0d 92 02 ff ff 	lea    -0xfd6e(%rip),%rcx        # 200a80 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x8a>
  2107ee:	31 c0                	xor    %eax,%eax
  2107f0:	41 89 c0             	mov    %eax,%r8d
  2107f3:	e8 38 5d ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2107f8:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2107fd:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  210802:	48 8d 15 07 9c 02 00 	lea    0x29c07(%rip),%rdx        # 23a410 <memcmp+0x16d0>
  210809:	e8 72 25 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21080e:	eb c1                	jmp    2107d1 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x81>

0000000000210810 <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE>:

pub fn init_core_legacy_hardware() {
  210810:	48 83 ec 68          	sub    $0x68,%rsp
    pic::setup_pics();
  210814:	e8 f7 cd 01 00       	callq  22d610 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E>
    hw_interrupts::setup_hw_interrupts();
  210819:	e8 12 60 ff ff       	callq  206830 <_ZN9r3_kernel3cpu13hw_interrupts19setup_hw_interrupts17ha6aa69e3fa23ad1eE>

    // enable legacy interrupts:
    pic::enable_legacy_interrupts();
  21081e:	e8 ed cc 01 00       	callq  22d510 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE>
    log::info!("Enabled legacy PIC chip.");
  210823:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  21082a:	00 00 
  21082c:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  210831:	48 8d 35 c0 fa fe ff 	lea    -0x10540(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  210838:	e8 93 27 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21083d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210841:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210845:	a8 01                	test   $0x1,%al
  210847:	75 09                	jne    210852 <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0x42>
  210849:	eb 00                	jmp    21084b <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0x3b>
  21084b:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  210850:	eb 42                	jmp    210894 <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0x84>
  210852:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  210857:	48 8b 3d ea d2 02 00 	mov    0x2d2ea(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21085e:	0f b6 74 24 5f       	movzbl 0x5f(%rsp),%esi
  210863:	e8 88 a9 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  210868:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21086d:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  210872:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210877:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21087c:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  210881:	e8 4a 27 00 00       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  210886:	88 44 24 0e          	mov    %al,0xe(%rsp)
  21088a:	8a 44 24 0e          	mov    0xe(%rsp),%al
  21088e:	24 01                	and    $0x1,%al
  210890:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  210894:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  210899:	75 07                	jne    2108a2 <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0x92>
    tsc::init_timer();
  21089b:	e8 30 b2 00 00       	callq  21bad0 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E>
  2108a0:	eb 3a                	jmp    2108dc <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0xcc>
    log::info!("Enabled legacy PIC chip.");
  2108a2:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2108a7:	48 8d 35 9a 9b 02 00 	lea    0x29b9a(%rip),%rsi        # 23a448 <memcmp+0x1708>
  2108ae:	ba 01 00 00 00       	mov    $0x1,%edx
  2108b3:	48 8d 0d c6 01 ff ff 	lea    -0xfe3a(%rip),%rcx        # 200a80 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x8a>
  2108ba:	31 c0                	xor    %eax,%eax
  2108bc:	41 89 c0             	mov    %eax,%r8d
  2108bf:	e8 6c 5c ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2108c4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2108c9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2108ce:	48 8d 15 83 9b 02 00 	lea    0x29b83(%rip),%rdx        # 23a458 <memcmp+0x1718>
  2108d5:	e8 a6 24 02 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2108da:	eb bf                	jmp    21089b <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE+0x8b>
}
  2108dc:	48 83 c4 68          	add    $0x68,%rsp
  2108e0:	c3                   	retq   
  2108e1:	cc                   	int3   
  2108e2:	cc                   	int3   
  2108e3:	cc                   	int3   
  2108e4:	cc                   	int3   
  2108e5:	cc                   	int3   
  2108e6:	cc                   	int3   
  2108e7:	cc                   	int3   
  2108e8:	cc                   	int3   
  2108e9:	cc                   	int3   
  2108ea:	cc                   	int3   
  2108eb:	cc                   	int3   
  2108ec:	cc                   	int3   
  2108ed:	cc                   	int3   
  2108ee:	cc                   	int3   
  2108ef:	cc                   	int3   

00000000002108f0 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h43a7e9e40985a180E>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
  2108f0:	48 83 ec 78          	sub    $0x78,%rsp
  2108f4:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  2108f9:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  2108fe:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  210903:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        unsafe { mem::transmute(self) }
  210908:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  21090d:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  210912:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  210917:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21091c:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  210921:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210926:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  21092b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        Bytes(self.as_bytes().iter().copied())
  210930:	e8 ab 2a 02 00       	callq  2333e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  210935:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21093a:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21093f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  210944:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  210949:	e8 52 28 02 00       	callq  2331a0 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>
  21094e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210953:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  210958:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21095d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  210962:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  210967:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  21096c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  210971:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  210976:	48 83 c4 78          	add    $0x78,%rsp
  21097a:	c3                   	retq   
  21097b:	cc                   	int3   
  21097c:	cc                   	int3   
  21097d:	cc                   	int3   
  21097e:	cc                   	int3   
  21097f:	cc                   	int3   

0000000000210980 <_ZN4core5slice3raw14from_raw_parts17h0ef61f3524b7899cE>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  210980:	48 83 ec 28          	sub    $0x28,%rsp
  210984:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210989:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  21098e:	e8 7d 0f 01 00       	callq  221910 <_ZN4core3ptr20slice_from_raw_parts17h7a7af0f1530c382dE>
  210993:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210998:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21099d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2109a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2109a7:	48 83 c4 28          	add    $0x28,%rsp
  2109ab:	c3                   	retq   
  2109ac:	cc                   	int3   
  2109ad:	cc                   	int3   
  2109ae:	cc                   	int3   
  2109af:	cc                   	int3   

00000000002109b0 <_ZN4core5slice3raw14from_raw_parts17h756c0bd16b5a8f40E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  2109b0:	48 83 ec 28          	sub    $0x28,%rsp
  2109b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2109b9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  2109be:	e8 fd 0e 01 00       	callq  2218c0 <_ZN4core3ptr20slice_from_raw_parts17h006612fc5f972f0cE>
  2109c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2109c8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2109cd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2109d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2109d7:	48 83 c4 28          	add    $0x28,%rsp
  2109db:	c3                   	retq   
  2109dc:	cc                   	int3   
  2109dd:	cc                   	int3   
  2109de:	cc                   	int3   
  2109df:	cc                   	int3   

00000000002109e0 <_ZN4core3mem11size_of_val17h492ca49025244003E>:
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
  2109e0:	48 83 ec 20          	sub    $0x20,%rsp
  2109e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2109e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    // SAFETY: `val` is a reference, so it's a valid raw pointer
    unsafe { intrinsics::size_of_val(val) }
  2109ee:	48 c1 e6 00          	shl    $0x0,%rsi
  2109f2:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2109f7:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2109fc:	48 89 04 24          	mov    %rax,(%rsp)
  210a00:	48 8b 04 24          	mov    (%rsp),%rax
}
  210a04:	48 83 c4 20          	add    $0x20,%rsp
  210a08:	c3                   	retq   
  210a09:	cc                   	int3   
  210a0a:	cc                   	int3   
  210a0b:	cc                   	int3   
  210a0c:	cc                   	int3   
  210a0d:	cc                   	int3   
  210a0e:	cc                   	int3   
  210a0f:	cc                   	int3   

0000000000210a10 <_ZN4core3mem4drop17hf04176b36ca2e197E>:
///
/// [`RefCell`]: crate::cell::RefCell
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
pub fn drop<T>(_x: T) {}
  210a10:	50                   	push   %rax
  210a11:	e8 aa b6 ff ff       	callq  20c0c0 <_ZN4core3ptr47drop_in_place$LT$alloc..vec..Vec$LT$u64$GT$$GT$17h366995e978bb6b5fE>
  210a16:	58                   	pop    %rax
  210a17:	c3                   	retq   
  210a18:	cc                   	int3   
  210a19:	cc                   	int3   
  210a1a:	cc                   	int3   
  210a1b:	cc                   	int3   
  210a1c:	cc                   	int3   
  210a1d:	cc                   	int3   
  210a1e:	cc                   	int3   
  210a1f:	cc                   	int3   

0000000000210a20 <_ZN4core3mem7replace17h71040b40dccb5c97E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  210a20:	48 83 ec 38          	sub    $0x38,%rsp
  210a24:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  210a29:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210a2e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210a33:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let result = ptr::read(dest);
  210a38:	e8 13 10 01 00       	callq  221a50 <_ZN4core3ptr4read17ha982fcfdc18f6787E>
  210a3d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210a42:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210a47:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  210a4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  210a51:	e8 9a 10 01 00       	callq  221af0 <_ZN4core3ptr5write17ha68771186095c4e2E>
  210a56:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  210a5b:	48 83 c4 38          	add    $0x38,%rsp
  210a5f:	c3                   	retq   

0000000000210a60 <_ZN4core3ptr8metadata14from_raw_parts17h4b6be9df4538dfecE>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
  210a60:	48 83 ec 30          	sub    $0x30,%rsp
  210a64:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210a69:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  210a6e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210a73:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210a78:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210a7d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210a82:	48 89 0c 24          	mov    %rcx,(%rsp)
  210a86:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210a8b:	48 8b 04 24          	mov    (%rsp),%rax
  210a8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  210a94:	48 83 c4 30          	add    $0x30,%rsp
  210a98:	c3                   	retq   
  210a99:	cc                   	int3   
  210a9a:	cc                   	int3   
  210a9b:	cc                   	int3   
  210a9c:	cc                   	int3   
  210a9d:	cc                   	int3   
  210a9e:	cc                   	int3   
  210a9f:	cc                   	int3   

0000000000210aa0 <_ZN4core3ptr8metadata14from_raw_parts17h9179a140a682e91aE>:
pub const fn from_raw_parts<T: ?Sized>(
  210aa0:	48 83 ec 30          	sub    $0x30,%rsp
  210aa4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210aa9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  210aae:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210ab3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210ab8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210abd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210ac2:	48 89 0c 24          	mov    %rcx,(%rsp)
  210ac6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210acb:	48 8b 04 24          	mov    (%rsp),%rax
  210acf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  210ad4:	48 83 c4 30          	add    $0x30,%rsp
  210ad8:	c3                   	retq   
  210ad9:	cc                   	int3   
  210ada:	cc                   	int3   
  210adb:	cc                   	int3   
  210adc:	cc                   	int3   
  210add:	cc                   	int3   
  210ade:	cc                   	int3   
  210adf:	cc                   	int3   

0000000000210ae0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2c270490821ca612E>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
  210ae0:	48 83 ec 30          	sub    $0x30,%rsp
  210ae4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210ae9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  210aee:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210af3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210af8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210afd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210b02:	48 89 0c 24          	mov    %rcx,(%rsp)
  210b06:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210b0b:	48 8b 04 24          	mov    (%rsp),%rax
  210b0f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  210b14:	48 83 c4 30          	add    $0x30,%rsp
  210b18:	c3                   	retq   
  210b19:	cc                   	int3   
  210b1a:	cc                   	int3   
  210b1b:	cc                   	int3   
  210b1c:	cc                   	int3   
  210b1d:	cc                   	int3   
  210b1e:	cc                   	int3   
  210b1f:	cc                   	int3   

0000000000210b20 <_ZN4core3ptr8metadata18from_raw_parts_mut17hb0ed2208ea82b504E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  210b20:	48 83 ec 30          	sub    $0x30,%rsp
  210b24:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210b29:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  210b2e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210b33:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210b38:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210b3d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210b42:	48 89 0c 24          	mov    %rcx,(%rsp)
  210b46:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210b4b:	48 8b 04 24          	mov    (%rsp),%rax
  210b4f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  210b54:	48 83 c4 30          	add    $0x30,%rsp
  210b58:	c3                   	retq   
  210b59:	cc                   	int3   
  210b5a:	cc                   	int3   
  210b5b:	cc                   	int3   
  210b5c:	cc                   	int3   
  210b5d:	cc                   	int3   
  210b5e:	cc                   	int3   
  210b5f:	cc                   	int3   

0000000000210b60 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd84bf2ccf7ccd3a2E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  210b60:	48 83 ec 30          	sub    $0x30,%rsp
  210b64:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210b69:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  210b6e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210b73:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210b78:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210b7d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210b82:	48 89 0c 24          	mov    %rcx,(%rsp)
  210b86:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210b8b:	48 8b 04 24          	mov    (%rsp),%rax
  210b8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  210b94:	48 83 c4 30          	add    $0x30,%rsp
  210b98:	c3                   	retq   
  210b99:	cc                   	int3   
  210b9a:	cc                   	int3   
  210b9b:	cc                   	int3   
  210b9c:	cc                   	int3   
  210b9d:	cc                   	int3   
  210b9e:	cc                   	int3   
  210b9f:	cc                   	int3   

0000000000210ba0 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
  210ba0:	48 83 ec 20          	sub    $0x20,%rsp
  210ba4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210ba9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
  210bae:	48 89 3c 24          	mov    %rdi,(%rsp)
  210bb2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  210bb7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  210bbc:	48 83 c4 20          	add    $0x20,%rsp
  210bc0:	c3                   	retq   
  210bc1:	cc                   	int3   
  210bc2:	cc                   	int3   
  210bc3:	cc                   	int3   
  210bc4:	cc                   	int3   
  210bc5:	cc                   	int3   
  210bc6:	cc                   	int3   
  210bc7:	cc                   	int3   
  210bc8:	cc                   	int3   
  210bc9:	cc                   	int3   
  210bca:	cc                   	int3   
  210bcb:	cc                   	int3   
  210bcc:	cc                   	int3   
  210bcd:	cc                   	int3   
  210bce:	cc                   	int3   
  210bcf:	cc                   	int3   

0000000000210bd0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E>:
        }
    }
}

impl<T> From<Optional<T>> for Option<T> {
    fn from(optional: Optional<T>) -> Option<T> {
  210bd0:	48 83 ec 28          	sub    $0x28,%rsp
  210bd4:	89 3c 24             	mov    %edi,(%rsp)
  210bd7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match optional {
  210bdc:	8b 04 24             	mov    (%rsp),%eax
  210bdf:	48 85 c0             	test   %rax,%rax
  210be2:	74 06                	je     210bea <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x1a>
  210be4:	eb 00                	jmp    210be6 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x16>
  210be6:	eb 1c                	jmp    210c04 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x34>
  210be8:	0f 0b                	ud2    
            Optional::Some(v) => Some(v),
  210bea:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210bef:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210bf4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210bf9:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  210c00:	00 00 
            Optional::None => None,
        }
    }
  210c02:	eb 09                	jmp    210c0d <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x3d>
            Optional::None => None,
  210c04:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  210c0b:	00 00 
    }
  210c0d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210c12:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  210c17:	48 83 c4 28          	add    $0x28,%rsp
  210c1b:	c3                   	retq   
  210c1c:	cc                   	int3   
  210c1d:	cc                   	int3   
  210c1e:	cc                   	int3   
  210c1f:	cc                   	int3   

0000000000210c20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>:
    /// let x: Option<&str> = None;
    /// assert_eq!(x.ok_or(0), Err(0));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  210c20:	48 83 ec 28          	sub    $0x28,%rsp
  210c24:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  210c28:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  210c2d:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
  210c32:	48 8b 04 24          	mov    (%rsp),%rax
  210c36:	48 85 c0             	test   %rax,%rax
  210c39:	0f 95 c0             	setne  %al
  210c3c:	0f b6 c0             	movzbl %al,%eax
  210c3f:	74 06                	je     210c47 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x27>
  210c41:	eb 00                	jmp    210c43 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x23>
  210c43:	eb 12                	jmp    210c57 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x37>
  210c45:	0f 0b                	ud2    
            Some(v) => Ok(v),
            None => Err(err),
  210c47:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  210c4c:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210c53:	00 00 
  210c55:	eb 0e                	jmp    210c65 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x45>
            Some(v) => Ok(v),
  210c57:	48 8b 04 24          	mov    (%rsp),%rax
  210c5b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210c60:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        }
    }
  210c65:	f6 44 24 17 01       	testb  $0x1,0x17(%rsp)
  210c6a:	75 0a                	jne    210c76 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x56>
  210c6c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210c71:	48 83 c4 28          	add    $0x28,%rsp
  210c75:	c3                   	retq   
  210c76:	eb f4                	jmp    210c6c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x4c>
  210c78:	cc                   	int3   
  210c79:	cc                   	int3   
  210c7a:	cc                   	int3   
  210c7b:	cc                   	int3   
  210c7c:	cc                   	int3   
  210c7d:	cc                   	int3   
  210c7e:	cc                   	int3   
  210c7f:	cc                   	int3   

0000000000210c80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  210c80:	48 83 ec 50          	sub    $0x50,%rsp
  210c84:	4c 89 04 24          	mov    %r8,(%rsp)
  210c88:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  210c8d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210c92:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210c97:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  210c9c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  210ca1:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  210ca6:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
        match self {
  210cab:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  210cb0:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  210cb5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210cba:	48 85 c0             	test   %rax,%rax
  210cbd:	74 06                	je     210cc5 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x45>
  210cbf:	eb 00                	jmp    210cc1 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x41>
  210cc1:	eb 26                	jmp    210ce9 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x69>
  210cc3:	0f 0b                	ud2    
  210cc5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210cca:	48 8b 0c 24          	mov    (%rsp),%rcx
  210cce:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => Err(err),
  210cd3:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  210cd8:	48 89 50 08          	mov    %rdx,0x8(%rax)
  210cdc:	48 89 48 10          	mov    %rcx,0x10(%rax)
  210ce0:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  210ce7:	eb 1a                	jmp    210d03 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x83>
  210ce9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Some(v) => Ok(v),
  210cee:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  210cf3:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  210cf8:	48 89 48 08          	mov    %rcx,0x8(%rax)
  210cfc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  210d03:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  210d08:	75 0a                	jne    210d14 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x94>
  210d0a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210d0f:	48 83 c4 50          	add    $0x50,%rsp
  210d13:	c3                   	retq   
  210d14:	eb f4                	jmp    210d0a <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x8a>
  210d16:	cc                   	int3   
  210d17:	cc                   	int3   
  210d18:	cc                   	int3   
  210d19:	cc                   	int3   
  210d1a:	cc                   	int3   
  210d1b:	cc                   	int3   
  210d1c:	cc                   	int3   
  210d1d:	cc                   	int3   
  210d1e:	cc                   	int3   
  210d1f:	cc                   	int3   

0000000000210d20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  210d20:	48 83 ec 38          	sub    $0x38,%rsp
  210d24:	48 89 3c 24          	mov    %rdi,(%rsp)
  210d28:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  210d2d:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  210d32:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  210d37:	48 8b 04 24          	mov    (%rsp),%rax
  210d3b:	48 85 c0             	test   %rax,%rax
  210d3e:	74 06                	je     210d46 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x26>
  210d40:	eb 00                	jmp    210d42 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x22>
  210d42:	eb 12                	jmp    210d56 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x36>
  210d44:	0f 0b                	ud2    
            None => Err(err),
  210d46:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  210d4b:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  210d52:	00 00 
  210d54:	eb 18                	jmp    210d6e <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x4e>
            Some(v) => Ok(v),
  210d56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210d5b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210d60:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210d65:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  210d6c:	00 00 
    }
  210d6e:	f6 44 24 27 01       	testb  $0x1,0x27(%rsp)
  210d73:	75 0f                	jne    210d84 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x64>
  210d75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210d7a:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  210d7f:	48 83 c4 38          	add    $0x38,%rsp
  210d83:	c3                   	retq   
  210d84:	eb ef                	jmp    210d75 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x55>
  210d86:	cc                   	int3   
  210d87:	cc                   	int3   
  210d88:	cc                   	int3   
  210d89:	cc                   	int3   
  210d8a:	cc                   	int3   
  210d8b:	cc                   	int3   
  210d8c:	cc                   	int3   
  210d8d:	cc                   	int3   
  210d8e:	cc                   	int3   
  210d8f:	cc                   	int3   

0000000000210d90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210d90:	48 83 ec 20          	sub    $0x20,%rsp
  210d94:	48 89 3c 24          	mov    %rdi,(%rsp)
  210d98:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210d9d:	48 8b 07             	mov    (%rdi),%rax
  210da0:	48 85 c0             	test   %rax,%rax
  210da3:	74 06                	je     210dab <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x1b>
  210da5:	eb 00                	jmp    210da7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x17>
  210da7:	eb 0d                	jmp    210db6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x26>
  210da9:	0f 0b                	ud2    
            None => None,
  210dab:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210db2:	00 00 
  210db4:	eb 12                	jmp    210dc8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x38>
  210db6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210dba:	48 83 c0 08          	add    $0x8,%rax
  210dbe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210dc3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210dc8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210dcd:	48 83 c4 20          	add    $0x20,%rsp
  210dd1:	c3                   	retq   
  210dd2:	cc                   	int3   
  210dd3:	cc                   	int3   
  210dd4:	cc                   	int3   
  210dd5:	cc                   	int3   
  210dd6:	cc                   	int3   
  210dd7:	cc                   	int3   
  210dd8:	cc                   	int3   
  210dd9:	cc                   	int3   
  210dda:	cc                   	int3   
  210ddb:	cc                   	int3   
  210ddc:	cc                   	int3   
  210ddd:	cc                   	int3   
  210dde:	cc                   	int3   
  210ddf:	cc                   	int3   

0000000000210de0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210de0:	48 83 ec 20          	sub    $0x20,%rsp
  210de4:	48 89 3c 24          	mov    %rdi,(%rsp)
  210de8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210ded:	48 8b 07             	mov    (%rdi),%rax
  210df0:	48 85 c0             	test   %rax,%rax
  210df3:	74 06                	je     210dfb <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x1b>
  210df5:	eb 00                	jmp    210df7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x17>
  210df7:	eb 0d                	jmp    210e06 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x26>
  210df9:	0f 0b                	ud2    
            None => None,
  210dfb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210e02:	00 00 
  210e04:	eb 12                	jmp    210e18 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x38>
  210e06:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210e0a:	48 83 c0 08          	add    $0x8,%rax
  210e0e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210e13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210e18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210e1d:	48 83 c4 20          	add    $0x20,%rsp
  210e21:	c3                   	retq   
  210e22:	cc                   	int3   
  210e23:	cc                   	int3   
  210e24:	cc                   	int3   
  210e25:	cc                   	int3   
  210e26:	cc                   	int3   
  210e27:	cc                   	int3   
  210e28:	cc                   	int3   
  210e29:	cc                   	int3   
  210e2a:	cc                   	int3   
  210e2b:	cc                   	int3   
  210e2c:	cc                   	int3   
  210e2d:	cc                   	int3   
  210e2e:	cc                   	int3   
  210e2f:	cc                   	int3   

0000000000210e30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210e30:	48 83 ec 20          	sub    $0x20,%rsp
  210e34:	48 89 3c 24          	mov    %rdi,(%rsp)
  210e38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210e3d:	48 8b 07             	mov    (%rdi),%rax
  210e40:	48 85 c0             	test   %rax,%rax
  210e43:	74 06                	je     210e4b <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x1b>
  210e45:	eb 00                	jmp    210e47 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x17>
  210e47:	eb 0d                	jmp    210e56 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x26>
  210e49:	0f 0b                	ud2    
            None => None,
  210e4b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210e52:	00 00 
  210e54:	eb 12                	jmp    210e68 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x38>
  210e56:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210e5a:	48 83 c0 08          	add    $0x8,%rax
  210e5e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210e63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210e68:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210e6d:	48 83 c4 20          	add    $0x20,%rsp
  210e71:	c3                   	retq   
  210e72:	cc                   	int3   
  210e73:	cc                   	int3   
  210e74:	cc                   	int3   
  210e75:	cc                   	int3   
  210e76:	cc                   	int3   
  210e77:	cc                   	int3   
  210e78:	cc                   	int3   
  210e79:	cc                   	int3   
  210e7a:	cc                   	int3   
  210e7b:	cc                   	int3   
  210e7c:	cc                   	int3   
  210e7d:	cc                   	int3   
  210e7e:	cc                   	int3   
  210e7f:	cc                   	int3   

0000000000210e80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210e80:	48 83 ec 20          	sub    $0x20,%rsp
  210e84:	48 89 3c 24          	mov    %rdi,(%rsp)
  210e88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210e8d:	48 8b 07             	mov    (%rdi),%rax
  210e90:	48 85 c0             	test   %rax,%rax
  210e93:	74 06                	je     210e9b <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x1b>
  210e95:	eb 00                	jmp    210e97 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x17>
  210e97:	eb 0d                	jmp    210ea6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x26>
  210e99:	0f 0b                	ud2    
            None => None,
  210e9b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210ea2:	00 00 
  210ea4:	eb 12                	jmp    210eb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x38>
  210ea6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210eaa:	48 83 c0 08          	add    $0x8,%rax
  210eae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210eb3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210eb8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210ebd:	48 83 c4 20          	add    $0x20,%rsp
  210ec1:	c3                   	retq   
  210ec2:	cc                   	int3   
  210ec3:	cc                   	int3   
  210ec4:	cc                   	int3   
  210ec5:	cc                   	int3   
  210ec6:	cc                   	int3   
  210ec7:	cc                   	int3   
  210ec8:	cc                   	int3   
  210ec9:	cc                   	int3   
  210eca:	cc                   	int3   
  210ecb:	cc                   	int3   
  210ecc:	cc                   	int3   
  210ecd:	cc                   	int3   
  210ece:	cc                   	int3   
  210ecf:	cc                   	int3   

0000000000210ed0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210ed0:	48 83 ec 20          	sub    $0x20,%rsp
  210ed4:	48 89 3c 24          	mov    %rdi,(%rsp)
  210ed8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210edd:	48 8b 07             	mov    (%rdi),%rax
  210ee0:	48 85 c0             	test   %rax,%rax
  210ee3:	74 06                	je     210eeb <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x1b>
  210ee5:	eb 00                	jmp    210ee7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x17>
  210ee7:	eb 0d                	jmp    210ef6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x26>
  210ee9:	0f 0b                	ud2    
            None => None,
  210eeb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210ef2:	00 00 
  210ef4:	eb 12                	jmp    210f08 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x38>
  210ef6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210efa:	48 83 c0 08          	add    $0x8,%rax
  210efe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210f03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210f08:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210f0d:	48 83 c4 20          	add    $0x20,%rsp
  210f11:	c3                   	retq   
  210f12:	cc                   	int3   
  210f13:	cc                   	int3   
  210f14:	cc                   	int3   
  210f15:	cc                   	int3   
  210f16:	cc                   	int3   
  210f17:	cc                   	int3   
  210f18:	cc                   	int3   
  210f19:	cc                   	int3   
  210f1a:	cc                   	int3   
  210f1b:	cc                   	int3   
  210f1c:	cc                   	int3   
  210f1d:	cc                   	int3   
  210f1e:	cc                   	int3   
  210f1f:	cc                   	int3   

0000000000210f20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210f20:	48 83 ec 20          	sub    $0x20,%rsp
  210f24:	48 89 3c 24          	mov    %rdi,(%rsp)
  210f28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210f2d:	48 8b 07             	mov    (%rdi),%rax
  210f30:	48 85 c0             	test   %rax,%rax
  210f33:	74 06                	je     210f3b <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x1b>
  210f35:	eb 00                	jmp    210f37 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x17>
  210f37:	eb 0d                	jmp    210f46 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x26>
  210f39:	0f 0b                	ud2    
            None => None,
  210f3b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210f42:	00 00 
  210f44:	eb 12                	jmp    210f58 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x38>
  210f46:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210f4a:	48 83 c0 08          	add    $0x8,%rax
  210f4e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210f53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210f58:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210f5d:	48 83 c4 20          	add    $0x20,%rsp
  210f61:	c3                   	retq   
  210f62:	cc                   	int3   
  210f63:	cc                   	int3   
  210f64:	cc                   	int3   
  210f65:	cc                   	int3   
  210f66:	cc                   	int3   
  210f67:	cc                   	int3   
  210f68:	cc                   	int3   
  210f69:	cc                   	int3   
  210f6a:	cc                   	int3   
  210f6b:	cc                   	int3   
  210f6c:	cc                   	int3   
  210f6d:	cc                   	int3   
  210f6e:	cc                   	int3   
  210f6f:	cc                   	int3   

0000000000210f70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE>:
    pub const fn as_ref(&self) -> Option<&T> {
  210f70:	48 83 ec 20          	sub    $0x20,%rsp
  210f74:	48 89 3c 24          	mov    %rdi,(%rsp)
  210f78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210f7d:	48 8b 07             	mov    (%rdi),%rax
  210f80:	48 85 c0             	test   %rax,%rax
  210f83:	74 06                	je     210f8b <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x1b>
  210f85:	eb 00                	jmp    210f87 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x17>
  210f87:	eb 0d                	jmp    210f96 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x26>
  210f89:	0f 0b                	ud2    
            None => None,
  210f8b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210f92:	00 00 
  210f94:	eb 12                	jmp    210fa8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x38>
  210f96:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210f9a:	48 83 c0 08          	add    $0x8,%rax
  210f9e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210fa3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210fa8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210fad:	48 83 c4 20          	add    $0x20,%rsp
  210fb1:	c3                   	retq   
  210fb2:	cc                   	int3   
  210fb3:	cc                   	int3   
  210fb4:	cc                   	int3   
  210fb5:	cc                   	int3   
  210fb6:	cc                   	int3   
  210fb7:	cc                   	int3   
  210fb8:	cc                   	int3   
  210fb9:	cc                   	int3   
  210fba:	cc                   	int3   
  210fbb:	cc                   	int3   
  210fbc:	cc                   	int3   
  210fbd:	cc                   	int3   
  210fbe:	cc                   	int3   
  210fbf:	cc                   	int3   

0000000000210fc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E>:
    pub const fn as_ref(&self) -> Option<&T> {
  210fc0:	48 83 ec 20          	sub    $0x20,%rsp
  210fc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  210fc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  210fcd:	48 8b 07             	mov    (%rdi),%rax
  210fd0:	48 85 c0             	test   %rax,%rax
  210fd3:	74 06                	je     210fdb <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x1b>
  210fd5:	eb 00                	jmp    210fd7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x17>
  210fd7:	eb 0d                	jmp    210fe6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x26>
  210fd9:	0f 0b                	ud2    
            None => None,
  210fdb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  210fe2:	00 00 
  210fe4:	eb 12                	jmp    210ff8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x38>
  210fe6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  210fea:	48 83 c0 08          	add    $0x8,%rax
  210fee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210ff3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  210ff8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210ffd:	48 83 c4 20          	add    $0x20,%rsp
  211001:	c3                   	retq   
  211002:	cc                   	int3   
  211003:	cc                   	int3   
  211004:	cc                   	int3   
  211005:	cc                   	int3   
  211006:	cc                   	int3   
  211007:	cc                   	int3   
  211008:	cc                   	int3   
  211009:	cc                   	int3   
  21100a:	cc                   	int3   
  21100b:	cc                   	int3   
  21100c:	cc                   	int3   
  21100d:	cc                   	int3   
  21100e:	cc                   	int3   
  21100f:	cc                   	int3   

0000000000211010 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E>:
    pub const fn as_ref(&self) -> Option<&T> {
  211010:	48 83 ec 20          	sub    $0x20,%rsp
  211014:	48 89 3c 24          	mov    %rdi,(%rsp)
  211018:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21101d:	48 8b 07             	mov    (%rdi),%rax
  211020:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  211024:	0f 95 c0             	setne  %al
  211027:	0f b6 c0             	movzbl %al,%eax
  21102a:	74 06                	je     211032 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x22>
  21102c:	eb 00                	jmp    21102e <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x1e>
  21102e:	eb 0d                	jmp    21103d <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x2d>
  211030:	0f 0b                	ud2    
            None => None,
  211032:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211039:	00 00 
  21103b:	eb 0e                	jmp    21104b <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x3b>
  21103d:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  211041:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211046:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  21104b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211050:	48 83 c4 20          	add    $0x20,%rsp
  211054:	c3                   	retq   
  211055:	cc                   	int3   
  211056:	cc                   	int3   
  211057:	cc                   	int3   
  211058:	cc                   	int3   
  211059:	cc                   	int3   
  21105a:	cc                   	int3   
  21105b:	cc                   	int3   
  21105c:	cc                   	int3   
  21105d:	cc                   	int3   
  21105e:	cc                   	int3   
  21105f:	cc                   	int3   

0000000000211060 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  211060:	48 83 ec 20          	sub    $0x20,%rsp
  211064:	48 89 3c 24          	mov    %rdi,(%rsp)
  211068:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21106d:	8a 87 88 01 00 00    	mov    0x188(%rdi),%al
  211073:	04 fe                	add    $0xfe,%al
  211075:	0f 95 c0             	setne  %al
  211078:	0f b6 c0             	movzbl %al,%eax
  21107b:	74 06                	je     211083 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x23>
  21107d:	eb 00                	jmp    21107f <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x1f>
  21107f:	eb 0d                	jmp    21108e <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x2e>
  211081:	0f 0b                	ud2    
            None => None,
  211083:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  21108a:	00 00 
  21108c:	eb 0e                	jmp    21109c <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x3c>
  21108e:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  211092:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211097:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  21109c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2110a1:	48 83 c4 20          	add    $0x20,%rsp
  2110a5:	c3                   	retq   
  2110a6:	cc                   	int3   
  2110a7:	cc                   	int3   
  2110a8:	cc                   	int3   
  2110a9:	cc                   	int3   
  2110aa:	cc                   	int3   
  2110ab:	cc                   	int3   
  2110ac:	cc                   	int3   
  2110ad:	cc                   	int3   
  2110ae:	cc                   	int3   
  2110af:	cc                   	int3   

00000000002110b0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2110b0:	48 83 ec 20          	sub    $0x20,%rsp
  2110b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2110b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2110bd:	8b 07                	mov    (%rdi),%eax
  2110bf:	48 85 c0             	test   %rax,%rax
  2110c2:	74 06                	je     2110ca <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x1a>
  2110c4:	eb 00                	jmp    2110c6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x16>
  2110c6:	eb 0d                	jmp    2110d5 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x25>
  2110c8:	0f 0b                	ud2    
            None => None,
  2110ca:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2110d1:	00 00 
  2110d3:	eb 12                	jmp    2110e7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x37>
  2110d5:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2110d9:	48 83 c0 04          	add    $0x4,%rax
  2110dd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2110e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2110e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2110ec:	48 83 c4 20          	add    $0x20,%rsp
  2110f0:	c3                   	retq   
  2110f1:	cc                   	int3   
  2110f2:	cc                   	int3   
  2110f3:	cc                   	int3   
  2110f4:	cc                   	int3   
  2110f5:	cc                   	int3   
  2110f6:	cc                   	int3   
  2110f7:	cc                   	int3   
  2110f8:	cc                   	int3   
  2110f9:	cc                   	int3   
  2110fa:	cc                   	int3   
  2110fb:	cc                   	int3   
  2110fc:	cc                   	int3   
  2110fd:	cc                   	int3   
  2110fe:	cc                   	int3   
  2110ff:	cc                   	int3   

0000000000211100 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E>:
    pub const fn as_ref(&self) -> Option<&T> {
  211100:	48 83 ec 20          	sub    $0x20,%rsp
  211104:	48 89 3c 24          	mov    %rdi,(%rsp)
  211108:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21110d:	48 8b 07             	mov    (%rdi),%rax
  211110:	48 85 c0             	test   %rax,%rax
  211113:	74 06                	je     21111b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x1b>
  211115:	eb 00                	jmp    211117 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x17>
  211117:	eb 0d                	jmp    211126 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x26>
  211119:	0f 0b                	ud2    
            None => None,
  21111b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211122:	00 00 
  211124:	eb 12                	jmp    211138 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x38>
  211126:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  21112a:	48 83 c0 08          	add    $0x8,%rax
  21112e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211133:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  211138:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21113d:	48 83 c4 20          	add    $0x20,%rsp
  211141:	c3                   	retq   
  211142:	cc                   	int3   
  211143:	cc                   	int3   
  211144:	cc                   	int3   
  211145:	cc                   	int3   
  211146:	cc                   	int3   
  211147:	cc                   	int3   
  211148:	cc                   	int3   
  211149:	cc                   	int3   
  21114a:	cc                   	int3   
  21114b:	cc                   	int3   
  21114c:	cc                   	int3   
  21114d:	cc                   	int3   
  21114e:	cc                   	int3   
  21114f:	cc                   	int3   

0000000000211150 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E>:
    pub const fn as_ref(&self) -> Option<&T> {
  211150:	48 83 ec 20          	sub    $0x20,%rsp
  211154:	48 89 3c 24          	mov    %rdi,(%rsp)
  211158:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21115d:	48 8b 07             	mov    (%rdi),%rax
  211160:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  211164:	0f 95 c0             	setne  %al
  211167:	0f b6 c0             	movzbl %al,%eax
  21116a:	74 06                	je     211172 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x22>
  21116c:	eb 00                	jmp    21116e <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x1e>
  21116e:	eb 0d                	jmp    21117d <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x2d>
  211170:	0f 0b                	ud2    
            None => None,
  211172:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211179:	00 00 
  21117b:	eb 0e                	jmp    21118b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x3b>
  21117d:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  211181:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211186:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  21118b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211190:	48 83 c4 20          	add    $0x20,%rsp
  211194:	c3                   	retq   
  211195:	cc                   	int3   
  211196:	cc                   	int3   
  211197:	cc                   	int3   
  211198:	cc                   	int3   
  211199:	cc                   	int3   
  21119a:	cc                   	int3   
  21119b:	cc                   	int3   
  21119c:	cc                   	int3   
  21119d:	cc                   	int3   
  21119e:	cc                   	int3   
  21119f:	cc                   	int3   

00000000002111a0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2111a0:	48 83 ec 20          	sub    $0x20,%rsp
  2111a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2111a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2111ad:	48 8b 07             	mov    (%rdi),%rax
  2111b0:	48 85 c0             	test   %rax,%rax
  2111b3:	74 06                	je     2111bb <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x1b>
  2111b5:	eb 00                	jmp    2111b7 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x17>
  2111b7:	eb 0d                	jmp    2111c6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x26>
  2111b9:	0f 0b                	ud2    
            None => None,
  2111bb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2111c2:	00 00 
  2111c4:	eb 12                	jmp    2111d8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x38>
  2111c6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2111ca:	48 83 c0 08          	add    $0x8,%rax
  2111ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2111d3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2111d8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2111dd:	48 83 c4 20          	add    $0x20,%rsp
  2111e1:	c3                   	retq   
  2111e2:	cc                   	int3   
  2111e3:	cc                   	int3   
  2111e4:	cc                   	int3   
  2111e5:	cc                   	int3   
  2111e6:	cc                   	int3   
  2111e7:	cc                   	int3   
  2111e8:	cc                   	int3   
  2111e9:	cc                   	int3   
  2111ea:	cc                   	int3   
  2111eb:	cc                   	int3   
  2111ec:	cc                   	int3   
  2111ed:	cc                   	int3   
  2111ee:	cc                   	int3   
  2111ef:	cc                   	int3   

00000000002111f0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E>:
    pub const fn as_ref(&self) -> Option<&T> {
  2111f0:	48 83 ec 20          	sub    $0x20,%rsp
  2111f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2111f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2111fd:	0f b6 07             	movzbl (%rdi),%eax
  211200:	a8 01                	test   $0x1,%al
  211202:	74 06                	je     21120a <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x1a>
  211204:	eb 00                	jmp    211206 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x16>
  211206:	eb 0d                	jmp    211215 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x25>
  211208:	0f 0b                	ud2    
            None => None,
  21120a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211211:	00 00 
  211213:	eb 12                	jmp    211227 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x37>
  211215:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  211219:	48 83 c0 01          	add    $0x1,%rax
  21121d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211222:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  211227:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21122c:	48 83 c4 20          	add    $0x20,%rsp
  211230:	c3                   	retq   
  211231:	cc                   	int3   
  211232:	cc                   	int3   
  211233:	cc                   	int3   
  211234:	cc                   	int3   
  211235:	cc                   	int3   
  211236:	cc                   	int3   
  211237:	cc                   	int3   
  211238:	cc                   	int3   
  211239:	cc                   	int3   
  21123a:	cc                   	int3   
  21123b:	cc                   	int3   
  21123c:	cc                   	int3   
  21123d:	cc                   	int3   
  21123e:	cc                   	int3   
  21123f:	cc                   	int3   

0000000000211240 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE>:
    pub const fn as_ref(&self) -> Option<&T> {
  211240:	48 83 ec 20          	sub    $0x20,%rsp
  211244:	48 89 3c 24          	mov    %rdi,(%rsp)
  211248:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21124d:	0f b6 07             	movzbl (%rdi),%eax
  211250:	a8 01                	test   $0x1,%al
  211252:	74 06                	je     21125a <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE+0x1a>
  211254:	eb 00                	jmp    211256 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE+0x16>
  211256:	eb 0d                	jmp    211265 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE+0x25>
  211258:	0f 0b                	ud2    
            None => None,
  21125a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211261:	00 00 
  211263:	eb 12                	jmp    211277 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc36180cf849f18fE+0x37>
  211265:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  211269:	48 83 c0 10          	add    $0x10,%rax
  21126d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211272:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  211277:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21127c:	48 83 c4 20          	add    $0x20,%rsp
  211280:	c3                   	retq   
  211281:	cc                   	int3   
  211282:	cc                   	int3   
  211283:	cc                   	int3   
  211284:	cc                   	int3   
  211285:	cc                   	int3   
  211286:	cc                   	int3   
  211287:	cc                   	int3   
  211288:	cc                   	int3   
  211289:	cc                   	int3   
  21128a:	cc                   	int3   
  21128b:	cc                   	int3   
  21128c:	cc                   	int3   
  21128d:	cc                   	int3   
  21128e:	cc                   	int3   
  21128f:	cc                   	int3   

0000000000211290 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E>:
    pub const fn as_ref(&self) -> Option<&T> {
  211290:	48 83 ec 20          	sub    $0x20,%rsp
  211294:	48 89 3c 24          	mov    %rdi,(%rsp)
  211298:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21129d:	48 8b 07             	mov    (%rdi),%rax
  2112a0:	48 85 c0             	test   %rax,%rax
  2112a3:	74 06                	je     2112ab <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E+0x1b>
  2112a5:	eb 00                	jmp    2112a7 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E+0x17>
  2112a7:	eb 0d                	jmp    2112b6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E+0x26>
  2112a9:	0f 0b                	ud2    
            None => None,
  2112ab:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2112b2:	00 00 
  2112b4:	eb 12                	jmp    2112c8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdbad68ad61e03d48E+0x38>
  2112b6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2112ba:	48 83 c0 08          	add    $0x8,%rax
  2112be:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2112c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2112c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2112cd:	48 83 c4 20          	add    $0x20,%rsp
  2112d1:	c3                   	retq   
  2112d2:	cc                   	int3   
  2112d3:	cc                   	int3   
  2112d4:	cc                   	int3   
  2112d5:	cc                   	int3   
  2112d6:	cc                   	int3   
  2112d7:	cc                   	int3   
  2112d8:	cc                   	int3   
  2112d9:	cc                   	int3   
  2112da:	cc                   	int3   
  2112db:	cc                   	int3   
  2112dc:	cc                   	int3   
  2112dd:	cc                   	int3   
  2112de:	cc                   	int3   
  2112df:	cc                   	int3   

00000000002112e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E>:
    pub const fn as_ref(&self) -> Option<&T> {
  2112e0:	48 83 ec 20          	sub    $0x20,%rsp
  2112e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2112e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2112ed:	48 8b 07             	mov    (%rdi),%rax
  2112f0:	48 85 c0             	test   %rax,%rax
  2112f3:	74 06                	je     2112fb <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x1b>
  2112f5:	eb 00                	jmp    2112f7 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x17>
  2112f7:	eb 0d                	jmp    211306 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x26>
  2112f9:	0f 0b                	ud2    
            None => None,
  2112fb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211302:	00 00 
  211304:	eb 12                	jmp    211318 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x38>
  211306:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  21130a:	48 83 c0 08          	add    $0x8,%rax
  21130e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211313:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  211318:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21131d:	48 83 c4 20          	add    $0x20,%rsp
  211321:	c3                   	retq   
  211322:	cc                   	int3   
  211323:	cc                   	int3   
  211324:	cc                   	int3   
  211325:	cc                   	int3   
  211326:	cc                   	int3   
  211327:	cc                   	int3   
  211328:	cc                   	int3   
  211329:	cc                   	int3   
  21132a:	cc                   	int3   
  21132b:	cc                   	int3   
  21132c:	cc                   	int3   
  21132d:	cc                   	int3   
  21132e:	cc                   	int3   
  21132f:	cc                   	int3   

0000000000211330 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE>:
    pub const fn as_ref(&self) -> Option<&T> {
  211330:	48 83 ec 20          	sub    $0x20,%rsp
  211334:	48 89 3c 24          	mov    %rdi,(%rsp)
  211338:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  21133d:	48 8b 07             	mov    (%rdi),%rax
  211340:	48 85 c0             	test   %rax,%rax
  211343:	74 06                	je     21134b <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x1b>
  211345:	eb 00                	jmp    211347 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x17>
  211347:	eb 0d                	jmp    211356 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x26>
  211349:	0f 0b                	ud2    
            None => None,
  21134b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  211352:	00 00 
  211354:	eb 12                	jmp    211368 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x38>
  211356:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  21135a:	48 83 c0 08          	add    $0x8,%rax
  21135e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211363:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  211368:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21136d:	48 83 c4 20          	add    $0x20,%rsp
  211371:	c3                   	retq   
  211372:	cc                   	int3   
  211373:	cc                   	int3   
  211374:	cc                   	int3   
  211375:	cc                   	int3   
  211376:	cc                   	int3   
  211377:	cc                   	int3   
  211378:	cc                   	int3   
  211379:	cc                   	int3   
  21137a:	cc                   	int3   
  21137b:	cc                   	int3   
  21137c:	cc                   	int3   
  21137d:	cc                   	int3   
  21137e:	cc                   	int3   
  21137f:	cc                   	int3   

0000000000211380 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>:
    pub const fn unwrap(self) -> T {
  211380:	48 83 ec 18          	sub    $0x18,%rsp
  211384:	48 89 34 24          	mov    %rsi,(%rsp)
  211388:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21138d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211392:	48 85 c0             	test   %rax,%rax
  211395:	0f 95 c0             	setne  %al
  211398:	0f b6 c0             	movzbl %al,%eax
  21139b:	74 06                	je     2113a3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x23>
  21139d:	eb 00                	jmp    21139f <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x1f>
  21139f:	eb 19                	jmp    2113ba <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x3a>
  2113a1:	0f 0b                	ud2    
  2113a3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2113a7:	48 8d 3d 06 f7 fe ff 	lea    -0x108fa(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  2113ae:	be 2b 00 00 00       	mov    $0x2b,%esi
  2113b3:	e8 38 48 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2113b8:	0f 0b                	ud2    
            Some(val) => val,
  2113ba:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2113bf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2113c4:	48 83 c4 18          	add    $0x18,%rsp
  2113c8:	c3                   	retq   
  2113c9:	cc                   	int3   
  2113ca:	cc                   	int3   
  2113cb:	cc                   	int3   
  2113cc:	cc                   	int3   
  2113cd:	cc                   	int3   
  2113ce:	cc                   	int3   
  2113cf:	cc                   	int3   

00000000002113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>:
    pub const fn unwrap(self) -> T {
  2113d0:	48 83 ec 28          	sub    $0x28,%rsp
  2113d4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2113d9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2113de:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  2113e3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2113e8:	48 85 c0             	test   %rax,%rax
  2113eb:	74 06                	je     2113f3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x23>
  2113ed:	eb 00                	jmp    2113ef <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x1f>
  2113ef:	eb 1a                	jmp    21140b <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x3b>
  2113f1:	0f 0b                	ud2    
  2113f3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2113f8:	48 8d 3d b5 f6 fe ff 	lea    -0x1094b(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  2113ff:	be 2b 00 00 00       	mov    $0x2b,%esi
  211404:	e8 e7 47 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211409:	0f 0b                	ud2    
            Some(val) => val,
  21140b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211410:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  211415:	48 83 c4 28          	add    $0x28,%rsp
  211419:	c3                   	retq   
  21141a:	cc                   	int3   
  21141b:	cc                   	int3   
  21141c:	cc                   	int3   
  21141d:	cc                   	int3   
  21141e:	cc                   	int3   
  21141f:	cc                   	int3   

0000000000211420 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E>:
    pub const fn unwrap(self) -> T {
  211420:	48 83 ec 18          	sub    $0x18,%rsp
  211424:	48 89 34 24          	mov    %rsi,(%rsp)
  211428:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21142d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211432:	48 85 c0             	test   %rax,%rax
  211435:	0f 95 c0             	setne  %al
  211438:	0f b6 c0             	movzbl %al,%eax
  21143b:	74 06                	je     211443 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x23>
  21143d:	eb 00                	jmp    21143f <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x1f>
  21143f:	eb 19                	jmp    21145a <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x3a>
  211441:	0f 0b                	ud2    
  211443:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211447:	48 8d 3d 66 f6 fe ff 	lea    -0x1099a(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  21144e:	be 2b 00 00 00       	mov    $0x2b,%esi
  211453:	e8 98 47 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211458:	0f 0b                	ud2    
            Some(val) => val,
  21145a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21145f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  211464:	48 83 c4 18          	add    $0x18,%rsp
  211468:	c3                   	retq   
  211469:	cc                   	int3   
  21146a:	cc                   	int3   
  21146b:	cc                   	int3   
  21146c:	cc                   	int3   
  21146d:	cc                   	int3   
  21146e:	cc                   	int3   
  21146f:	cc                   	int3   

0000000000211470 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>:
    pub const fn unwrap(self) -> T {
  211470:	48 83 ec 18          	sub    $0x18,%rsp
  211474:	48 89 34 24          	mov    %rsi,(%rsp)
  211478:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21147d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211482:	48 85 c0             	test   %rax,%rax
  211485:	0f 95 c0             	setne  %al
  211488:	0f b6 c0             	movzbl %al,%eax
  21148b:	74 06                	je     211493 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x23>
  21148d:	eb 00                	jmp    21148f <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x1f>
  21148f:	eb 19                	jmp    2114aa <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x3a>
  211491:	0f 0b                	ud2    
  211493:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211497:	48 8d 3d 16 f6 fe ff 	lea    -0x109ea(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  21149e:	be 2b 00 00 00       	mov    $0x2b,%esi
  2114a3:	e8 48 47 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2114a8:	0f 0b                	ud2    
            Some(val) => val,
  2114aa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2114af:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2114b4:	48 83 c4 18          	add    $0x18,%rsp
  2114b8:	c3                   	retq   
  2114b9:	cc                   	int3   
  2114ba:	cc                   	int3   
  2114bb:	cc                   	int3   
  2114bc:	cc                   	int3   
  2114bd:	cc                   	int3   
  2114be:	cc                   	int3   
  2114bf:	cc                   	int3   

00000000002114c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>:
    pub const fn unwrap(self) -> T {
  2114c0:	48 83 ec 38          	sub    $0x38,%rsp
  2114c4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2114c9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2114ce:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2114d3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2114d8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2114dd:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2114e2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  2114e7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2114ec:	48 85 c0             	test   %rax,%rax
  2114ef:	74 06                	je     2114f7 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x37>
  2114f1:	eb 00                	jmp    2114f3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x33>
  2114f3:	eb 1a                	jmp    21150f <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x4f>
  2114f5:	0f 0b                	ud2    
  2114f7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2114fc:	48 8d 3d b1 f5 fe ff 	lea    -0x10a4f(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  211503:	be 2b 00 00 00       	mov    $0x2b,%esi
  211508:	e8 e3 46 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21150d:	0f 0b                	ud2    
            Some(val) => val,
  21150f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211514:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  211519:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21151e:	48 83 c4 38          	add    $0x38,%rsp
  211522:	c3                   	retq   
  211523:	cc                   	int3   
  211524:	cc                   	int3   
  211525:	cc                   	int3   
  211526:	cc                   	int3   
  211527:	cc                   	int3   
  211528:	cc                   	int3   
  211529:	cc                   	int3   
  21152a:	cc                   	int3   
  21152b:	cc                   	int3   
  21152c:	cc                   	int3   
  21152d:	cc                   	int3   
  21152e:	cc                   	int3   
  21152f:	cc                   	int3   

0000000000211530 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E>:
    pub const fn unwrap(self) -> T {
  211530:	48 83 ec 28          	sub    $0x28,%rsp
  211534:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  211539:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21153e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  211543:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match self {
  211548:	8b 46 18             	mov    0x18(%rsi),%eax
  21154b:	83 c0 fd             	add    $0xfffffffd,%eax
  21154e:	0f 95 c0             	setne  %al
  211551:	0f b6 c0             	movzbl %al,%eax
  211554:	74 06                	je     21155c <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x2c>
  211556:	eb 00                	jmp    211558 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x28>
  211558:	eb 1a                	jmp    211574 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x44>
  21155a:	0f 0b                	ud2    
  21155c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211561:	48 8d 3d 4c f5 fe ff 	lea    -0x10ab4(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  211568:	be 2b 00 00 00       	mov    $0x2b,%esi
  21156d:	e8 7e 46 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211572:	0f 0b                	ud2    
  211574:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  211579:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
            Some(val) => val,
  21157e:	ba 30 00 00 00       	mov    $0x30,%edx
  211583:	e8 68 77 02 00       	callq  238cf0 <memcpy>
  211588:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  21158d:	48 83 c4 28          	add    $0x28,%rsp
  211591:	c3                   	retq   
  211592:	cc                   	int3   
  211593:	cc                   	int3   
  211594:	cc                   	int3   
  211595:	cc                   	int3   
  211596:	cc                   	int3   
  211597:	cc                   	int3   
  211598:	cc                   	int3   
  211599:	cc                   	int3   
  21159a:	cc                   	int3   
  21159b:	cc                   	int3   
  21159c:	cc                   	int3   
  21159d:	cc                   	int3   
  21159e:	cc                   	int3   
  21159f:	cc                   	int3   

00000000002115a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>:
    pub const fn unwrap(self) -> T {
  2115a0:	48 83 ec 18          	sub    $0x18,%rsp
  2115a4:	48 89 34 24          	mov    %rsi,(%rsp)
  2115a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2115ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2115b2:	48 85 c0             	test   %rax,%rax
  2115b5:	0f 95 c0             	setne  %al
  2115b8:	0f b6 c0             	movzbl %al,%eax
  2115bb:	74 06                	je     2115c3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x23>
  2115bd:	eb 00                	jmp    2115bf <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x1f>
  2115bf:	eb 19                	jmp    2115da <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x3a>
  2115c1:	0f 0b                	ud2    
  2115c3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2115c7:	48 8d 3d e6 f4 fe ff 	lea    -0x10b1a(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  2115ce:	be 2b 00 00 00       	mov    $0x2b,%esi
  2115d3:	e8 18 46 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2115d8:	0f 0b                	ud2    
            Some(val) => val,
  2115da:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2115df:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2115e4:	48 83 c4 18          	add    $0x18,%rsp
  2115e8:	c3                   	retq   
  2115e9:	cc                   	int3   
  2115ea:	cc                   	int3   
  2115eb:	cc                   	int3   
  2115ec:	cc                   	int3   
  2115ed:	cc                   	int3   
  2115ee:	cc                   	int3   
  2115ef:	cc                   	int3   

00000000002115f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E>:
    pub const fn unwrap(self) -> T {
  2115f0:	48 83 ec 28          	sub    $0x28,%rsp
  2115f4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2115f9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2115fe:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  211603:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211608:	48 85 c0             	test   %rax,%rax
  21160b:	74 06                	je     211613 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x23>
  21160d:	eb 00                	jmp    21160f <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x1f>
  21160f:	eb 1a                	jmp    21162b <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x3b>
  211611:	0f 0b                	ud2    
  211613:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211618:	48 8d 3d 95 f4 fe ff 	lea    -0x10b6b(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  21161f:	be 2b 00 00 00       	mov    $0x2b,%esi
  211624:	e8 c7 45 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211629:	0f 0b                	ud2    
            Some(val) => val,
  21162b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211630:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  211635:	48 83 c4 28          	add    $0x28,%rsp
  211639:	c3                   	retq   
  21163a:	cc                   	int3   
  21163b:	cc                   	int3   
  21163c:	cc                   	int3   
  21163d:	cc                   	int3   
  21163e:	cc                   	int3   
  21163f:	cc                   	int3   

0000000000211640 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E>:
    pub const fn unwrap(self) -> T {
  211640:	48 83 ec 28          	sub    $0x28,%rsp
  211644:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  211649:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21164e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  211653:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211658:	48 85 c0             	test   %rax,%rax
  21165b:	74 06                	je     211663 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x23>
  21165d:	eb 00                	jmp    21165f <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x1f>
  21165f:	eb 1a                	jmp    21167b <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x3b>
  211661:	0f 0b                	ud2    
  211663:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211668:	48 8d 3d 45 f4 fe ff 	lea    -0x10bbb(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  21166f:	be 2b 00 00 00       	mov    $0x2b,%esi
  211674:	e8 77 45 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211679:	0f 0b                	ud2    
            Some(val) => val,
  21167b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211680:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  211685:	48 83 c4 28          	add    $0x28,%rsp
  211689:	c3                   	retq   
  21168a:	cc                   	int3   
  21168b:	cc                   	int3   
  21168c:	cc                   	int3   
  21168d:	cc                   	int3   
  21168e:	cc                   	int3   
  21168f:	cc                   	int3   

0000000000211690 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E>:
    pub const fn unwrap(self) -> T {
  211690:	48 83 ec 18          	sub    $0x18,%rsp
  211694:	48 89 34 24          	mov    %rsi,(%rsp)
  211698:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21169d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2116a2:	48 85 c0             	test   %rax,%rax
  2116a5:	0f 95 c0             	setne  %al
  2116a8:	0f b6 c0             	movzbl %al,%eax
  2116ab:	74 06                	je     2116b3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x23>
  2116ad:	eb 00                	jmp    2116af <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x1f>
  2116af:	eb 19                	jmp    2116ca <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x3a>
  2116b1:	0f 0b                	ud2    
  2116b3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2116b7:	48 8d 3d f6 f3 fe ff 	lea    -0x10c0a(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  2116be:	be 2b 00 00 00       	mov    $0x2b,%esi
  2116c3:	e8 28 45 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2116c8:	0f 0b                	ud2    
            Some(val) => val,
  2116ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2116cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2116d4:	48 83 c4 18          	add    $0x18,%rsp
  2116d8:	c3                   	retq   
  2116d9:	cc                   	int3   
  2116da:	cc                   	int3   
  2116db:	cc                   	int3   
  2116dc:	cc                   	int3   
  2116dd:	cc                   	int3   
  2116de:	cc                   	int3   
  2116df:	cc                   	int3   

00000000002116e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE>:
    pub const fn unwrap(self) -> T {
  2116e0:	48 83 ec 28          	sub    $0x28,%rsp
  2116e4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2116e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2116ee:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2116f3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match self {
  2116f8:	48 8b 06             	mov    (%rsi),%rax
  2116fb:	48 85 c0             	test   %rax,%rax
  2116fe:	0f 95 c0             	setne  %al
  211701:	0f b6 c0             	movzbl %al,%eax
  211704:	74 06                	je     21170c <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x2c>
  211706:	eb 00                	jmp    211708 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x28>
  211708:	eb 1a                	jmp    211724 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x44>
  21170a:	0f 0b                	ud2    
  21170c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211711:	48 8d 3d 9c f3 fe ff 	lea    -0x10c64(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  211718:	be 2b 00 00 00       	mov    $0x2b,%esi
  21171d:	e8 ce 44 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211722:	0f 0b                	ud2    
  211724:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  211729:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
            Some(val) => val,
  21172e:	ba 28 00 00 00       	mov    $0x28,%edx
  211733:	e8 b8 75 02 00       	callq  238cf0 <memcpy>
  211738:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  21173d:	48 83 c4 28          	add    $0x28,%rsp
  211741:	c3                   	retq   
  211742:	cc                   	int3   
  211743:	cc                   	int3   
  211744:	cc                   	int3   
  211745:	cc                   	int3   
  211746:	cc                   	int3   
  211747:	cc                   	int3   
  211748:	cc                   	int3   
  211749:	cc                   	int3   
  21174a:	cc                   	int3   
  21174b:	cc                   	int3   
  21174c:	cc                   	int3   
  21174d:	cc                   	int3   
  21174e:	cc                   	int3   
  21174f:	cc                   	int3   

0000000000211750 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE>:
    pub const fn unwrap(self) -> T {
  211750:	48 83 ec 18          	sub    $0x18,%rsp
  211754:	48 89 34 24          	mov    %rsi,(%rsp)
  211758:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21175d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211762:	48 85 c0             	test   %rax,%rax
  211765:	0f 95 c0             	setne  %al
  211768:	0f b6 c0             	movzbl %al,%eax
  21176b:	74 06                	je     211773 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x23>
  21176d:	eb 00                	jmp    21176f <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x1f>
  21176f:	eb 19                	jmp    21178a <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x3a>
  211771:	0f 0b                	ud2    
  211773:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  211777:	48 8d 3d 36 f3 fe ff 	lea    -0x10cca(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  21177e:	be 2b 00 00 00       	mov    $0x2b,%esi
  211783:	e8 68 44 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211788:	0f 0b                	ud2    
            Some(val) => val,
  21178a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21178f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  211794:	48 83 c4 18          	add    $0x18,%rsp
  211798:	c3                   	retq   
  211799:	cc                   	int3   
  21179a:	cc                   	int3   
  21179b:	cc                   	int3   
  21179c:	cc                   	int3   
  21179d:	cc                   	int3   
  21179e:	cc                   	int3   
  21179f:	cc                   	int3   

00000000002117a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>:
    pub const fn unwrap(self) -> T {
  2117a0:	48 83 ec 18          	sub    $0x18,%rsp
  2117a4:	48 89 34 24          	mov    %rsi,(%rsp)
  2117a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2117ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2117b2:	48 85 c0             	test   %rax,%rax
  2117b5:	0f 95 c0             	setne  %al
  2117b8:	0f b6 c0             	movzbl %al,%eax
  2117bb:	74 06                	je     2117c3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x23>
  2117bd:	eb 00                	jmp    2117bf <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x1f>
  2117bf:	eb 19                	jmp    2117da <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x3a>
  2117c1:	0f 0b                	ud2    
  2117c3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2117c7:	48 8d 3d e6 f2 fe ff 	lea    -0x10d1a(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  2117ce:	be 2b 00 00 00       	mov    $0x2b,%esi
  2117d3:	e8 18 44 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2117d8:	0f 0b                	ud2    
            Some(val) => val,
  2117da:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2117df:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2117e4:	48 83 c4 18          	add    $0x18,%rsp
  2117e8:	c3                   	retq   
  2117e9:	cc                   	int3   
  2117ea:	cc                   	int3   
  2117eb:	cc                   	int3   
  2117ec:	cc                   	int3   
  2117ed:	cc                   	int3   
  2117ee:	cc                   	int3   
  2117ef:	cc                   	int3   

00000000002117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>:
    pub const fn unwrap(self) -> T {
  2117f0:	48 83 ec 28          	sub    $0x28,%rsp
  2117f4:	48 89 14 24          	mov    %rdx,(%rsp)
  2117f8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2117fd:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        match self {
  211802:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211807:	48 85 c0             	test   %rax,%rax
  21180a:	0f 95 c0             	setne  %al
  21180d:	0f b6 c0             	movzbl %al,%eax
  211810:	74 06                	je     211818 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x28>
  211812:	eb 00                	jmp    211814 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x24>
  211814:	eb 19                	jmp    21182f <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x3f>
  211816:	0f 0b                	ud2    
  211818:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  21181c:	48 8d 3d 91 f2 fe ff 	lea    -0x10d6f(%rip),%rdi        # 200ab4 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xbe>
  211823:	be 2b 00 00 00       	mov    $0x2b,%esi
  211828:	e8 c3 43 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21182d:	0f 0b                	ud2    
            Some(val) => val,
  21182f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211834:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211839:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21183e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    }
  211843:	48 83 c4 28          	add    $0x28,%rsp
  211847:	c3                   	retq   
  211848:	cc                   	int3   
  211849:	cc                   	int3   
  21184a:	cc                   	int3   
  21184b:	cc                   	int3   
  21184c:	cc                   	int3   
  21184d:	cc                   	int3   
  21184e:	cc                   	int3   
  21184f:	cc                   	int3   

0000000000211850 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>:
    pub const fn is_none(&self) -> bool {
  211850:	48 83 ec 18          	sub    $0x18,%rsp
  211854:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211859:	e8 62 02 00 00       	callq  211ac0 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E>
  21185e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211862:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211866:	34 ff                	xor    $0xff,%al
    }
  211868:	24 01                	and    $0x1,%al
  21186a:	0f b6 c0             	movzbl %al,%eax
  21186d:	48 83 c4 18          	add    $0x18,%rsp
  211871:	c3                   	retq   
  211872:	cc                   	int3   
  211873:	cc                   	int3   
  211874:	cc                   	int3   
  211875:	cc                   	int3   
  211876:	cc                   	int3   
  211877:	cc                   	int3   
  211878:	cc                   	int3   
  211879:	cc                   	int3   
  21187a:	cc                   	int3   
  21187b:	cc                   	int3   
  21187c:	cc                   	int3   
  21187d:	cc                   	int3   
  21187e:	cc                   	int3   
  21187f:	cc                   	int3   

0000000000211880 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>:
    pub const fn is_none(&self) -> bool {
  211880:	48 83 ec 18          	sub    $0x18,%rsp
  211884:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211889:	e8 a2 04 00 00       	callq  211d30 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E>
  21188e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211892:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211896:	34 ff                	xor    $0xff,%al
    }
  211898:	24 01                	and    $0x1,%al
  21189a:	0f b6 c0             	movzbl %al,%eax
  21189d:	48 83 c4 18          	add    $0x18,%rsp
  2118a1:	c3                   	retq   
  2118a2:	cc                   	int3   
  2118a3:	cc                   	int3   
  2118a4:	cc                   	int3   
  2118a5:	cc                   	int3   
  2118a6:	cc                   	int3   
  2118a7:	cc                   	int3   
  2118a8:	cc                   	int3   
  2118a9:	cc                   	int3   
  2118aa:	cc                   	int3   
  2118ab:	cc                   	int3   
  2118ac:	cc                   	int3   
  2118ad:	cc                   	int3   
  2118ae:	cc                   	int3   
  2118af:	cc                   	int3   

00000000002118b0 <_ZN4core6option15Option$LT$T$GT$7is_none17h2db87b08cdf3ef67E>:
    pub const fn is_none(&self) -> bool {
  2118b0:	48 83 ec 18          	sub    $0x18,%rsp
  2118b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2118b9:	e8 62 03 00 00       	callq  211c20 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE>
  2118be:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2118c2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2118c6:	34 ff                	xor    $0xff,%al
    }
  2118c8:	24 01                	and    $0x1,%al
  2118ca:	0f b6 c0             	movzbl %al,%eax
  2118cd:	48 83 c4 18          	add    $0x18,%rsp
  2118d1:	c3                   	retq   
  2118d2:	cc                   	int3   
  2118d3:	cc                   	int3   
  2118d4:	cc                   	int3   
  2118d5:	cc                   	int3   
  2118d6:	cc                   	int3   
  2118d7:	cc                   	int3   
  2118d8:	cc                   	int3   
  2118d9:	cc                   	int3   
  2118da:	cc                   	int3   
  2118db:	cc                   	int3   
  2118dc:	cc                   	int3   
  2118dd:	cc                   	int3   
  2118de:	cc                   	int3   
  2118df:	cc                   	int3   

00000000002118e0 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>:
    pub const fn is_none(&self) -> bool {
  2118e0:	48 83 ec 18          	sub    $0x18,%rsp
  2118e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2118e9:	e8 92 03 00 00       	callq  211c80 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE>
  2118ee:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2118f2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2118f6:	34 ff                	xor    $0xff,%al
    }
  2118f8:	24 01                	and    $0x1,%al
  2118fa:	0f b6 c0             	movzbl %al,%eax
  2118fd:	48 83 c4 18          	add    $0x18,%rsp
  211901:	c3                   	retq   
  211902:	cc                   	int3   
  211903:	cc                   	int3   
  211904:	cc                   	int3   
  211905:	cc                   	int3   
  211906:	cc                   	int3   
  211907:	cc                   	int3   
  211908:	cc                   	int3   
  211909:	cc                   	int3   
  21190a:	cc                   	int3   
  21190b:	cc                   	int3   
  21190c:	cc                   	int3   
  21190d:	cc                   	int3   
  21190e:	cc                   	int3   
  21190f:	cc                   	int3   

0000000000211910 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>:
    pub const fn is_none(&self) -> bool {
  211910:	48 83 ec 18          	sub    $0x18,%rsp
  211914:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211919:	e8 d2 02 00 00       	callq  211bf0 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>
  21191e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211922:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211926:	34 ff                	xor    $0xff,%al
    }
  211928:	24 01                	and    $0x1,%al
  21192a:	0f b6 c0             	movzbl %al,%eax
  21192d:	48 83 c4 18          	add    $0x18,%rsp
  211931:	c3                   	retq   
  211932:	cc                   	int3   
  211933:	cc                   	int3   
  211934:	cc                   	int3   
  211935:	cc                   	int3   
  211936:	cc                   	int3   
  211937:	cc                   	int3   
  211938:	cc                   	int3   
  211939:	cc                   	int3   
  21193a:	cc                   	int3   
  21193b:	cc                   	int3   
  21193c:	cc                   	int3   
  21193d:	cc                   	int3   
  21193e:	cc                   	int3   
  21193f:	cc                   	int3   

0000000000211940 <_ZN4core6option15Option$LT$T$GT$7is_none17h6d69479f60fd2274E>:
    pub const fn is_none(&self) -> bool {
  211940:	48 83 ec 18          	sub    $0x18,%rsp
  211944:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211949:	e8 a2 03 00 00       	callq  211cf0 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>
  21194e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211952:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211956:	34 ff                	xor    $0xff,%al
    }
  211958:	24 01                	and    $0x1,%al
  21195a:	0f b6 c0             	movzbl %al,%eax
  21195d:	48 83 c4 18          	add    $0x18,%rsp
  211961:	c3                   	retq   
  211962:	cc                   	int3   
  211963:	cc                   	int3   
  211964:	cc                   	int3   
  211965:	cc                   	int3   
  211966:	cc                   	int3   
  211967:	cc                   	int3   
  211968:	cc                   	int3   
  211969:	cc                   	int3   
  21196a:	cc                   	int3   
  21196b:	cc                   	int3   
  21196c:	cc                   	int3   
  21196d:	cc                   	int3   
  21196e:	cc                   	int3   
  21196f:	cc                   	int3   

0000000000211970 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>:
    pub const fn is_none(&self) -> bool {
  211970:	48 83 ec 18          	sub    $0x18,%rsp
  211974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211979:	e8 f2 01 00 00       	callq  211b70 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E>
  21197e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211982:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211986:	34 ff                	xor    $0xff,%al
    }
  211988:	24 01                	and    $0x1,%al
  21198a:	0f b6 c0             	movzbl %al,%eax
  21198d:	48 83 c4 18          	add    $0x18,%rsp
  211991:	c3                   	retq   
  211992:	cc                   	int3   
  211993:	cc                   	int3   
  211994:	cc                   	int3   
  211995:	cc                   	int3   
  211996:	cc                   	int3   
  211997:	cc                   	int3   
  211998:	cc                   	int3   
  211999:	cc                   	int3   
  21199a:	cc                   	int3   
  21199b:	cc                   	int3   
  21199c:	cc                   	int3   
  21199d:	cc                   	int3   
  21199e:	cc                   	int3   
  21199f:	cc                   	int3   

00000000002119a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>:
    pub const fn is_none(&self) -> bool {
  2119a0:	48 83 ec 18          	sub    $0x18,%rsp
  2119a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2119a9:	e8 e2 00 00 00       	callq  211a90 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE>
  2119ae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2119b2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2119b6:	34 ff                	xor    $0xff,%al
    }
  2119b8:	24 01                	and    $0x1,%al
  2119ba:	0f b6 c0             	movzbl %al,%eax
  2119bd:	48 83 c4 18          	add    $0x18,%rsp
  2119c1:	c3                   	retq   
  2119c2:	cc                   	int3   
  2119c3:	cc                   	int3   
  2119c4:	cc                   	int3   
  2119c5:	cc                   	int3   
  2119c6:	cc                   	int3   
  2119c7:	cc                   	int3   
  2119c8:	cc                   	int3   
  2119c9:	cc                   	int3   
  2119ca:	cc                   	int3   
  2119cb:	cc                   	int3   
  2119cc:	cc                   	int3   
  2119cd:	cc                   	int3   
  2119ce:	cc                   	int3   
  2119cf:	cc                   	int3   

00000000002119d0 <_ZN4core6option15Option$LT$T$GT$7is_none17ha4bca2175564180aE>:
    pub const fn is_none(&self) -> bool {
  2119d0:	48 83 ec 18          	sub    $0x18,%rsp
  2119d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2119d9:	e8 d2 01 00 00       	callq  211bb0 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE>
  2119de:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2119e2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2119e6:	34 ff                	xor    $0xff,%al
    }
  2119e8:	24 01                	and    $0x1,%al
  2119ea:	0f b6 c0             	movzbl %al,%eax
  2119ed:	48 83 c4 18          	add    $0x18,%rsp
  2119f1:	c3                   	retq   
  2119f2:	cc                   	int3   
  2119f3:	cc                   	int3   
  2119f4:	cc                   	int3   
  2119f5:	cc                   	int3   
  2119f6:	cc                   	int3   
  2119f7:	cc                   	int3   
  2119f8:	cc                   	int3   
  2119f9:	cc                   	int3   
  2119fa:	cc                   	int3   
  2119fb:	cc                   	int3   
  2119fc:	cc                   	int3   
  2119fd:	cc                   	int3   
  2119fe:	cc                   	int3   
  2119ff:	cc                   	int3   

0000000000211a00 <_ZN4core6option15Option$LT$T$GT$7is_none17hb3d124720ea273cbE>:
    pub const fn is_none(&self) -> bool {
  211a00:	48 83 ec 18          	sub    $0x18,%rsp
  211a04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211a09:	e8 a2 02 00 00       	callq  211cb0 <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE>
  211a0e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211a12:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211a16:	34 ff                	xor    $0xff,%al
    }
  211a18:	24 01                	and    $0x1,%al
  211a1a:	0f b6 c0             	movzbl %al,%eax
  211a1d:	48 83 c4 18          	add    $0x18,%rsp
  211a21:	c3                   	retq   
  211a22:	cc                   	int3   
  211a23:	cc                   	int3   
  211a24:	cc                   	int3   
  211a25:	cc                   	int3   
  211a26:	cc                   	int3   
  211a27:	cc                   	int3   
  211a28:	cc                   	int3   
  211a29:	cc                   	int3   
  211a2a:	cc                   	int3   
  211a2b:	cc                   	int3   
  211a2c:	cc                   	int3   
  211a2d:	cc                   	int3   
  211a2e:	cc                   	int3   
  211a2f:	cc                   	int3   

0000000000211a30 <_ZN4core6option15Option$LT$T$GT$7is_none17hb5d79c86d77403d8E>:
    pub const fn is_none(&self) -> bool {
  211a30:	48 83 ec 18          	sub    $0x18,%rsp
  211a34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211a39:	e8 f2 00 00 00       	callq  211b30 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E>
  211a3e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211a42:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211a46:	34 ff                	xor    $0xff,%al
    }
  211a48:	24 01                	and    $0x1,%al
  211a4a:	0f b6 c0             	movzbl %al,%eax
  211a4d:	48 83 c4 18          	add    $0x18,%rsp
  211a51:	c3                   	retq   
  211a52:	cc                   	int3   
  211a53:	cc                   	int3   
  211a54:	cc                   	int3   
  211a55:	cc                   	int3   
  211a56:	cc                   	int3   
  211a57:	cc                   	int3   
  211a58:	cc                   	int3   
  211a59:	cc                   	int3   
  211a5a:	cc                   	int3   
  211a5b:	cc                   	int3   
  211a5c:	cc                   	int3   
  211a5d:	cc                   	int3   
  211a5e:	cc                   	int3   
  211a5f:	cc                   	int3   

0000000000211a60 <_ZN4core6option15Option$LT$T$GT$7is_none17hbe8b97c331f96930E>:
    pub const fn is_none(&self) -> bool {
  211a60:	48 83 ec 18          	sub    $0x18,%rsp
  211a64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  211a69:	e8 92 00 00 00       	callq  211b00 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE>
  211a6e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211a72:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211a76:	34 ff                	xor    $0xff,%al
    }
  211a78:	24 01                	and    $0x1,%al
  211a7a:	0f b6 c0             	movzbl %al,%eax
  211a7d:	48 83 c4 18          	add    $0x18,%rsp
  211a81:	c3                   	retq   
  211a82:	cc                   	int3   
  211a83:	cc                   	int3   
  211a84:	cc                   	int3   
  211a85:	cc                   	int3   
  211a86:	cc                   	int3   
  211a87:	cc                   	int3   
  211a88:	cc                   	int3   
  211a89:	cc                   	int3   
  211a8a:	cc                   	int3   
  211a8b:	cc                   	int3   
  211a8c:	cc                   	int3   
  211a8d:	cc                   	int3   
  211a8e:	cc                   	int3   
  211a8f:	cc                   	int3   

0000000000211a90 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE>:
    pub const fn is_some(&self) -> bool {
  211a90:	48 83 ec 10          	sub    $0x10,%rsp
  211a94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211a99:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211a9d:	75 07                	jne    211aa6 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE+0x16>
  211a9f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211aa4:	eb 05                	jmp    211aab <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE+0x1b>
  211aa6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211aab:	8a 44 24 07          	mov    0x7(%rsp),%al
  211aaf:	24 01                	and    $0x1,%al
  211ab1:	0f b6 c0             	movzbl %al,%eax
  211ab4:	48 83 c4 10          	add    $0x10,%rsp
  211ab8:	c3                   	retq   
  211ab9:	cc                   	int3   
  211aba:	cc                   	int3   
  211abb:	cc                   	int3   
  211abc:	cc                   	int3   
  211abd:	cc                   	int3   
  211abe:	cc                   	int3   
  211abf:	cc                   	int3   

0000000000211ac0 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E>:
    pub const fn is_some(&self) -> bool {
  211ac0:	48 83 ec 10          	sub    $0x10,%rsp
  211ac4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211ac9:	b8 01 00 00 00       	mov    $0x1,%eax
  211ace:	31 c9                	xor    %ecx,%ecx
  211ad0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  211ad4:	48 0f 44 c1          	cmove  %rcx,%rax
  211ad8:	48 83 f8 01          	cmp    $0x1,%rax
  211adc:	75 07                	jne    211ae5 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E+0x25>
  211ade:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211ae3:	eb 05                	jmp    211aea <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E+0x2a>
  211ae5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211aea:	8a 44 24 07          	mov    0x7(%rsp),%al
  211aee:	24 01                	and    $0x1,%al
  211af0:	0f b6 c0             	movzbl %al,%eax
  211af3:	48 83 c4 10          	add    $0x10,%rsp
  211af7:	c3                   	retq   
  211af8:	cc                   	int3   
  211af9:	cc                   	int3   
  211afa:	cc                   	int3   
  211afb:	cc                   	int3   
  211afc:	cc                   	int3   
  211afd:	cc                   	int3   
  211afe:	cc                   	int3   
  211aff:	cc                   	int3   

0000000000211b00 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE>:
    pub const fn is_some(&self) -> bool {
  211b00:	48 83 ec 10          	sub    $0x10,%rsp
  211b04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211b09:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211b0d:	75 07                	jne    211b16 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE+0x16>
  211b0f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211b14:	eb 05                	jmp    211b1b <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE+0x1b>
  211b16:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211b1b:	8a 44 24 07          	mov    0x7(%rsp),%al
  211b1f:	24 01                	and    $0x1,%al
  211b21:	0f b6 c0             	movzbl %al,%eax
  211b24:	48 83 c4 10          	add    $0x10,%rsp
  211b28:	c3                   	retq   
  211b29:	cc                   	int3   
  211b2a:	cc                   	int3   
  211b2b:	cc                   	int3   
  211b2c:	cc                   	int3   
  211b2d:	cc                   	int3   
  211b2e:	cc                   	int3   
  211b2f:	cc                   	int3   

0000000000211b30 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E>:
    pub const fn is_some(&self) -> bool {
  211b30:	48 83 ec 10          	sub    $0x10,%rsp
  211b34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211b39:	b8 01 00 00 00       	mov    $0x1,%eax
  211b3e:	31 c9                	xor    %ecx,%ecx
  211b40:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  211b44:	48 0f 44 c1          	cmove  %rcx,%rax
  211b48:	48 83 f8 01          	cmp    $0x1,%rax
  211b4c:	75 07                	jne    211b55 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E+0x25>
  211b4e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211b53:	eb 05                	jmp    211b5a <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E+0x2a>
  211b55:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211b5a:	8a 44 24 07          	mov    0x7(%rsp),%al
  211b5e:	24 01                	and    $0x1,%al
  211b60:	0f b6 c0             	movzbl %al,%eax
  211b63:	48 83 c4 10          	add    $0x10,%rsp
  211b67:	c3                   	retq   
  211b68:	cc                   	int3   
  211b69:	cc                   	int3   
  211b6a:	cc                   	int3   
  211b6b:	cc                   	int3   
  211b6c:	cc                   	int3   
  211b6d:	cc                   	int3   
  211b6e:	cc                   	int3   
  211b6f:	cc                   	int3   

0000000000211b70 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E>:
    pub const fn is_some(&self) -> bool {
  211b70:	48 83 ec 10          	sub    $0x10,%rsp
  211b74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211b79:	b8 01 00 00 00       	mov    $0x1,%eax
  211b7e:	31 c9                	xor    %ecx,%ecx
  211b80:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  211b84:	48 0f 44 c1          	cmove  %rcx,%rax
  211b88:	48 83 f8 01          	cmp    $0x1,%rax
  211b8c:	75 07                	jne    211b95 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E+0x25>
  211b8e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211b93:	eb 05                	jmp    211b9a <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E+0x2a>
  211b95:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211b9a:	8a 44 24 07          	mov    0x7(%rsp),%al
  211b9e:	24 01                	and    $0x1,%al
  211ba0:	0f b6 c0             	movzbl %al,%eax
  211ba3:	48 83 c4 10          	add    $0x10,%rsp
  211ba7:	c3                   	retq   
  211ba8:	cc                   	int3   
  211ba9:	cc                   	int3   
  211baa:	cc                   	int3   
  211bab:	cc                   	int3   
  211bac:	cc                   	int3   
  211bad:	cc                   	int3   
  211bae:	cc                   	int3   
  211baf:	cc                   	int3   

0000000000211bb0 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE>:
    pub const fn is_some(&self) -> bool {
  211bb0:	48 83 ec 10          	sub    $0x10,%rsp
  211bb4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211bb9:	b8 01 00 00 00       	mov    $0x1,%eax
  211bbe:	31 c9                	xor    %ecx,%ecx
  211bc0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  211bc4:	48 0f 44 c1          	cmove  %rcx,%rax
  211bc8:	48 83 f8 01          	cmp    $0x1,%rax
  211bcc:	75 07                	jne    211bd5 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE+0x25>
  211bce:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211bd3:	eb 05                	jmp    211bda <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE+0x2a>
  211bd5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211bda:	8a 44 24 07          	mov    0x7(%rsp),%al
  211bde:	24 01                	and    $0x1,%al
  211be0:	0f b6 c0             	movzbl %al,%eax
  211be3:	48 83 c4 10          	add    $0x10,%rsp
  211be7:	c3                   	retq   
  211be8:	cc                   	int3   
  211be9:	cc                   	int3   
  211bea:	cc                   	int3   
  211beb:	cc                   	int3   
  211bec:	cc                   	int3   
  211bed:	cc                   	int3   
  211bee:	cc                   	int3   
  211bef:	cc                   	int3   

0000000000211bf0 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>:
    pub const fn is_some(&self) -> bool {
  211bf0:	48 83 ec 10          	sub    $0x10,%rsp
  211bf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211bf9:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211bfd:	75 07                	jne    211c06 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E+0x16>
  211bff:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211c04:	eb 05                	jmp    211c0b <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E+0x1b>
  211c06:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211c0b:	8a 44 24 07          	mov    0x7(%rsp),%al
  211c0f:	24 01                	and    $0x1,%al
  211c11:	0f b6 c0             	movzbl %al,%eax
  211c14:	48 83 c4 10          	add    $0x10,%rsp
  211c18:	c3                   	retq   
  211c19:	cc                   	int3   
  211c1a:	cc                   	int3   
  211c1b:	cc                   	int3   
  211c1c:	cc                   	int3   
  211c1d:	cc                   	int3   
  211c1e:	cc                   	int3   
  211c1f:	cc                   	int3   

0000000000211c20 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE>:
    pub const fn is_some(&self) -> bool {
  211c20:	48 83 ec 10          	sub    $0x10,%rsp
  211c24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211c29:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211c2d:	75 07                	jne    211c36 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE+0x16>
  211c2f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211c34:	eb 05                	jmp    211c3b <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE+0x1b>
  211c36:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211c3b:	8a 44 24 07          	mov    0x7(%rsp),%al
  211c3f:	24 01                	and    $0x1,%al
  211c41:	0f b6 c0             	movzbl %al,%eax
  211c44:	48 83 c4 10          	add    $0x10,%rsp
  211c48:	c3                   	retq   
  211c49:	cc                   	int3   
  211c4a:	cc                   	int3   
  211c4b:	cc                   	int3   
  211c4c:	cc                   	int3   
  211c4d:	cc                   	int3   
  211c4e:	cc                   	int3   
  211c4f:	cc                   	int3   

0000000000211c50 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E>:
    pub const fn is_some(&self) -> bool {
  211c50:	48 83 ec 10          	sub    $0x10,%rsp
  211c54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211c59:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211c5d:	75 07                	jne    211c66 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E+0x16>
  211c5f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211c64:	eb 05                	jmp    211c6b <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E+0x1b>
  211c66:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211c6b:	8a 44 24 07          	mov    0x7(%rsp),%al
  211c6f:	24 01                	and    $0x1,%al
  211c71:	0f b6 c0             	movzbl %al,%eax
  211c74:	48 83 c4 10          	add    $0x10,%rsp
  211c78:	c3                   	retq   
  211c79:	cc                   	int3   
  211c7a:	cc                   	int3   
  211c7b:	cc                   	int3   
  211c7c:	cc                   	int3   
  211c7d:	cc                   	int3   
  211c7e:	cc                   	int3   
  211c7f:	cc                   	int3   

0000000000211c80 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE>:
    pub const fn is_some(&self) -> bool {
  211c80:	48 83 ec 10          	sub    $0x10,%rsp
  211c84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211c89:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  211c8d:	75 07                	jne    211c96 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE+0x16>
  211c8f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211c94:	eb 05                	jmp    211c9b <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE+0x1b>
  211c96:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211c9b:	8a 44 24 07          	mov    0x7(%rsp),%al
  211c9f:	24 01                	and    $0x1,%al
  211ca1:	0f b6 c0             	movzbl %al,%eax
  211ca4:	48 83 c4 10          	add    $0x10,%rsp
  211ca8:	c3                   	retq   
  211ca9:	cc                   	int3   
  211caa:	cc                   	int3   
  211cab:	cc                   	int3   
  211cac:	cc                   	int3   
  211cad:	cc                   	int3   
  211cae:	cc                   	int3   
  211caf:	cc                   	int3   

0000000000211cb0 <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE>:
    pub const fn is_some(&self) -> bool {
  211cb0:	48 83 ec 10          	sub    $0x10,%rsp
  211cb4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211cb9:	8b 57 18             	mov    0x18(%rdi),%edx
  211cbc:	83 ea 03             	sub    $0x3,%edx
  211cbf:	b8 01 00 00 00       	mov    $0x1,%eax
  211cc4:	31 c9                	xor    %ecx,%ecx
  211cc6:	83 fa 00             	cmp    $0x0,%edx
  211cc9:	48 0f 44 c1          	cmove  %rcx,%rax
  211ccd:	48 83 f8 01          	cmp    $0x1,%rax
  211cd1:	75 07                	jne    211cda <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE+0x2a>
  211cd3:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211cd8:	eb 05                	jmp    211cdf <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE+0x2f>
  211cda:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211cdf:	8a 44 24 07          	mov    0x7(%rsp),%al
  211ce3:	24 01                	and    $0x1,%al
  211ce5:	0f b6 c0             	movzbl %al,%eax
  211ce8:	48 83 c4 10          	add    $0x10,%rsp
  211cec:	c3                   	retq   
  211ced:	cc                   	int3   
  211cee:	cc                   	int3   
  211cef:	cc                   	int3   

0000000000211cf0 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>:
    pub const fn is_some(&self) -> bool {
  211cf0:	48 83 ec 10          	sub    $0x10,%rsp
  211cf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211cf9:	8a 97 88 01 00 00    	mov    0x188(%rdi),%dl
  211cff:	80 ea 02             	sub    $0x2,%dl
  211d02:	b8 01 00 00 00       	mov    $0x1,%eax
  211d07:	31 c9                	xor    %ecx,%ecx
  211d09:	80 fa 00             	cmp    $0x0,%dl
  211d0c:	48 0f 44 c1          	cmove  %rcx,%rax
  211d10:	48 83 f8 01          	cmp    $0x1,%rax
  211d14:	75 07                	jne    211d1d <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE+0x2d>
  211d16:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211d1b:	eb 05                	jmp    211d22 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE+0x32>
  211d1d:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211d22:	8a 44 24 07          	mov    0x7(%rsp),%al
  211d26:	24 01                	and    $0x1,%al
  211d28:	0f b6 c0             	movzbl %al,%eax
  211d2b:	48 83 c4 10          	add    $0x10,%rsp
  211d2f:	c3                   	retq   

0000000000211d30 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E>:
    pub const fn is_some(&self) -> bool {
  211d30:	48 83 ec 10          	sub    $0x10,%rsp
  211d34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  211d39:	b8 01 00 00 00       	mov    $0x1,%eax
  211d3e:	31 c9                	xor    %ecx,%ecx
  211d40:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  211d44:	48 0f 44 c1          	cmove  %rcx,%rax
  211d48:	48 83 f8 01          	cmp    $0x1,%rax
  211d4c:	75 07                	jne    211d55 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E+0x25>
  211d4e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  211d53:	eb 05                	jmp    211d5a <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E+0x2a>
  211d55:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  211d5a:	8a 44 24 07          	mov    0x7(%rsp),%al
  211d5e:	24 01                	and    $0x1,%al
  211d60:	0f b6 c0             	movzbl %al,%eax
  211d63:	48 83 c4 10          	add    $0x10,%rsp
  211d67:	c3                   	retq   
  211d68:	cc                   	int3   
  211d69:	cc                   	int3   
  211d6a:	cc                   	int3   
  211d6b:	cc                   	int3   
  211d6c:	cc                   	int3   
  211d6d:	cc                   	int3   
  211d6e:	cc                   	int3   
  211d6f:	cc                   	int3   

0000000000211d70 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE>:
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn copied(self) -> Option<T> {
  211d70:	48 83 ec 10          	sub    $0x10,%rsp
  211d74:	48 89 3c 24          	mov    %rdi,(%rsp)
        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        // ready yet, should be reverted when possible to avoid code repetition
        match self {
  211d78:	48 8b 04 24          	mov    (%rsp),%rax
  211d7c:	48 85 c0             	test   %rax,%rax
  211d7f:	0f 95 c0             	setne  %al
  211d82:	0f b6 c0             	movzbl %al,%eax
  211d85:	74 06                	je     211d8d <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x1d>
  211d87:	eb 00                	jmp    211d89 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x19>
  211d89:	eb 09                	jmp    211d94 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x24>
  211d8b:	0f 0b                	ud2    
            Some(&v) => Some(v),
            None => None,
  211d8d:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
  211d92:	eb 13                	jmp    211da7 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x37>
            Some(&v) => Some(v),
  211d94:	48 8b 04 24          	mov    (%rsp),%rax
  211d98:	8a 00                	mov    (%rax),%al
  211d9a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211d9e:	88 44 24 09          	mov    %al,0x9(%rsp)
  211da2:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
        }
    }
  211da7:	8a 44 24 08          	mov    0x8(%rsp),%al
  211dab:	8a 54 24 09          	mov    0x9(%rsp),%dl
  211daf:	48 83 c4 10          	add    $0x10,%rsp
  211db3:	c3                   	retq   
  211db4:	cc                   	int3   
  211db5:	cc                   	int3   
  211db6:	cc                   	int3   
  211db7:	cc                   	int3   
  211db8:	cc                   	int3   
  211db9:	cc                   	int3   
  211dba:	cc                   	int3   
  211dbb:	cc                   	int3   
  211dbc:	cc                   	int3   
  211dbd:	cc                   	int3   
  211dbe:	cc                   	int3   
  211dbf:	cc                   	int3   

0000000000211dc0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9cd07eb2aa0d9c46E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  211dc0:	48 83 ec 18          	sub    $0x18,%rsp
  211dc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211dc9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  211dce:	48 8b 3f             	mov    (%rdi),%rdi
  211dd1:	e8 3a 61 01 00       	callq  227f10 <_ZN77_$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$u20$as$u20$core..fmt..Debug$GT$3fmt17hd4b2e02536c1f22aE>
  211dd6:	88 44 24 07          	mov    %al,0x7(%rsp)
  211dda:	8a 44 24 07          	mov    0x7(%rsp),%al
  211dde:	24 01                	and    $0x1,%al
  211de0:	0f b6 c0             	movzbl %al,%eax
  211de3:	48 83 c4 18          	add    $0x18,%rsp
  211de7:	c3                   	retq   
  211de8:	cc                   	int3   
  211de9:	cc                   	int3   
  211dea:	cc                   	int3   
  211deb:	cc                   	int3   
  211dec:	cc                   	int3   
  211ded:	cc                   	int3   
  211dee:	cc                   	int3   
  211def:	cc                   	int3   

0000000000211df0 <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17hcd787f1212a7fd9fE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  211df0:	48 83 ec 78          	sub    $0x78,%rsp
  211df4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  211df9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  211dfe:	48 89 f8             	mov    %rdi,%rax
  211e01:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  211e06:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  211e0b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  211e10:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  211e15:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        f.debug_list().entries(self.iter()).finish()
  211e1a:	e8 41 61 02 00       	callq  237f60 <_ZN4core3fmt9Formatter10debug_list17h63f19364d11dcc32E>
  211e1f:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  211e24:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  211e29:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  211e2e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  211e33:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  211e38:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  211e3d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  211e42:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  211e47:	e8 b4 00 00 00       	callq  211f00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>
  211e4c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211e51:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  211e56:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  211e5b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  211e60:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  211e65:	e8 26 03 00 00       	callq  212190 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE>
  211e6a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211e6f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  211e74:	e8 67 39 02 00       	callq  2357e0 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E>
  211e79:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211e7d:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  211e81:	24 01                	and    $0x1,%al
  211e83:	0f b6 c0             	movzbl %al,%eax
  211e86:	48 83 c4 78          	add    $0x78,%rsp
  211e8a:	c3                   	retq   
  211e8b:	cc                   	int3   
  211e8c:	cc                   	int3   
  211e8d:	cc                   	int3   
  211e8e:	cc                   	int3   
  211e8f:	cc                   	int3   

0000000000211e90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>:
    /// assert!(!ptr.is_null());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
    #[inline]
    pub const fn is_null(self) -> bool {
  211e90:	48 83 ec 18          	sub    $0x18,%rsp
  211e94:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211e99:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211e9e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        // Compare via a cast to a thin pointer, so fat pointers are only
        // considering their "data" part for null-ness.
        (self as *mut u8).guaranteed_eq(null_mut())
  211ea3:	31 c0                	xor    %eax,%eax
  211ea5:	89 c6                	mov    %eax,%esi
  211ea7:	e8 74 20 02 00       	callq  233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  211eac:	88 44 24 07          	mov    %al,0x7(%rsp)
  211eb0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  211eb4:	24 01                	and    $0x1,%al
  211eb6:	0f b6 c0             	movzbl %al,%eax
  211eb9:	48 83 c4 18          	add    $0x18,%rsp
  211ebd:	c3                   	retq   
  211ebe:	cc                   	int3   
  211ebf:	cc                   	int3   

0000000000211ec0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb9afce9db5d0b565E>:

    /// Casts to a pointer of another type.
    #[stable(feature = "ptr_cast", since = "1.38.0")]
    #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
    #[inline]
    pub const fn cast<U>(self) -> *const U {
  211ec0:	50                   	push   %rax
  211ec1:	48 89 f8             	mov    %rdi,%rax
  211ec4:	48 89 04 24          	mov    %rax,(%rsp)
        self as _
    }
  211ec8:	59                   	pop    %rcx
  211ec9:	c3                   	retq   
  211eca:	cc                   	int3   
  211ecb:	cc                   	int3   
  211ecc:	cc                   	int3   
  211ecd:	cc                   	int3   
  211ece:	cc                   	int3   
  211ecf:	cc                   	int3   

0000000000211ed0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>:
    pub const fn is_null(self) -> bool {
  211ed0:	48 83 ec 18          	sub    $0x18,%rsp
  211ed4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211ed9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211ede:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  211ee3:	31 c0                	xor    %eax,%eax
  211ee5:	89 c6                	mov    %eax,%esi
  211ee7:	e8 e4 20 02 00       	callq  233fd0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  211eec:	88 44 24 07          	mov    %al,0x7(%rsp)
  211ef0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  211ef4:	24 01                	and    $0x1,%al
  211ef6:	0f b6 c0             	movzbl %al,%eax
  211ef9:	48 83 c4 18          	add    $0x18,%rsp
  211efd:	c3                   	retq   
  211efe:	cc                   	int3   
  211eff:	cc                   	int3   

0000000000211f00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
  211f00:	48 83 ec 28          	sub    $0x28,%rsp
  211f04:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  211f09:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  211f0e:	e8 1d 8d 00 00       	callq  21ac30 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E>
  211f13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211f18:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  211f1d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211f22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  211f27:	48 83 c4 28          	add    $0x28,%rsp
  211f2b:	c3                   	retq   
  211f2c:	cc                   	int3   
  211f2d:	cc                   	int3   
  211f2e:	cc                   	int3   
  211f2f:	cc                   	int3   

0000000000211f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h17e65275eff91432E>:
    pub const fn as_ptr(&self) -> *const T {
  211f30:	48 83 ec 10          	sub    $0x10,%rsp
  211f34:	48 89 f8             	mov    %rdi,%rax
  211f37:	48 89 04 24          	mov    %rax,(%rsp)
  211f3b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  211f40:	48 83 c4 10          	add    $0x10,%rsp
  211f44:	c3                   	retq   
  211f45:	cc                   	int3   
  211f46:	cc                   	int3   
  211f47:	cc                   	int3   
  211f48:	cc                   	int3   
  211f49:	cc                   	int3   
  211f4a:	cc                   	int3   
  211f4b:	cc                   	int3   
  211f4c:	cc                   	int3   
  211f4d:	cc                   	int3   
  211f4e:	cc                   	int3   
  211f4f:	cc                   	int3   

0000000000211f50 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc18e36f70da5f5c7E>:
        R: Try<Output = Acc>,
    {
        self.iter.try_fold(init, map_try_fold(&mut self.f, g))
    }

    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
  211f50:	48 83 ec 48          	sub    $0x48,%rsp
  211f54:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  211f59:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  211f5e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  211f63:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211f68:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  211f6d:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
    where
        G: FnMut(Acc, Self::Item) -> Acc,
    {
        self.iter.fold(init, map_fold(self.f, g))
  211f72:	e8 19 01 00 00       	callq  212090 <_ZN4core4iter8adapters3map8map_fold17hb50d230422ac5205E>
  211f77:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211f7c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  211f81:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  211f86:	e8 85 8b 00 00       	callq  21ab10 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE>
  211f8b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211f90:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  211f95:	48 83 c4 48          	add    $0x48,%rsp
  211f99:	c3                   	retq   
  211f9a:	cc                   	int3   
  211f9b:	cc                   	int3   
  211f9c:	cc                   	int3   
  211f9d:	cc                   	int3   
  211f9e:	cc                   	int3   
  211f9f:	cc                   	int3   

0000000000211fa0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hd5e1626c4c81dd16E>:
    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
  211fa0:	48 83 ec 48          	sub    $0x48,%rsp
  211fa4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  211fa9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  211fae:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  211fb3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211fb8:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  211fbd:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
        self.iter.fold(init, map_fold(self.f, g))
  211fc2:	e8 d9 00 00 00       	callq  2120a0 <_ZN4core4iter8adapters3map8map_fold17hc9048eddb7122dc0E>
  211fc7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211fcc:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  211fd1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  211fd6:	e8 c5 8b 00 00       	callq  21aba0 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE>
  211fdb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211fe0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  211fe5:	48 83 c4 48          	add    $0x48,%rsp
  211fe9:	c3                   	retq   
  211fea:	cc                   	int3   
  211feb:	cc                   	int3   
  211fec:	cc                   	int3   
  211fed:	cc                   	int3   
  211fee:	cc                   	int3   
  211fef:	cc                   	int3   

0000000000211ff0 <_ZN4core4iter6traits8iterator8Iterator3sum17h000ba1b36b9ccc77E>:
    /// let sum: i32 = a.iter().sum();
    ///
    /// assert_eq!(sum, 6);
    /// ```
    #[stable(feature = "iter_arith", since = "1.11.0")]
    fn sum<S>(self) -> S
  211ff0:	48 83 ec 18          	sub    $0x18,%rsp
  211ff4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211ff9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        Self: Sized,
        S: Sum<Self::Item>,
    {
        Sum::sum(self)
  211ffe:	e8 4d d4 01 00       	callq  22f450 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h94087771308e1a59E>
  212003:	48 89 04 24          	mov    %rax,(%rsp)
  212007:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21200b:	48 83 c4 18          	add    $0x18,%rsp
  21200f:	c3                   	retq   

0000000000212010 <_ZN4core4iter6traits8iterator8Iterator3sum17hfd8a934b45b619cfE>:
    fn sum<S>(self) -> S
  212010:	48 83 ec 18          	sub    $0x18,%rsp
  212014:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212019:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        Sum::sum(self)
  21201e:	e8 fd d3 01 00       	callq  22f420 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h8428de84206d5ca3E>
  212023:	48 89 04 24          	mov    %rax,(%rsp)
  212027:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21202b:	48 83 c4 18          	add    $0x18,%rsp
  21202f:	c3                   	retq   

0000000000212030 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h12ca5be8f998c4eaE>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  212030:	48 83 ec 28          	sub    $0x28,%rsp
  212034:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212039:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  21203e:	48 89 3c 24          	mov    %rdi,(%rsp)
  212042:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  212047:	48 8b 04 24          	mov    (%rsp),%rax
  21204b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212050:	48 83 c4 28          	add    $0x28,%rsp
  212054:	c3                   	retq   
  212055:	cc                   	int3   
  212056:	cc                   	int3   
  212057:	cc                   	int3   
  212058:	cc                   	int3   
  212059:	cc                   	int3   
  21205a:	cc                   	int3   
  21205b:	cc                   	int3   
  21205c:	cc                   	int3   
  21205d:	cc                   	int3   
  21205e:	cc                   	int3   
  21205f:	cc                   	int3   

0000000000212060 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h6cb0038798678fbaE>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  212060:	48 83 ec 28          	sub    $0x28,%rsp
  212064:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212069:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  21206e:	48 89 3c 24          	mov    %rdi,(%rsp)
  212072:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  212077:	48 8b 04 24          	mov    (%rsp),%rax
  21207b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212080:	48 83 c4 28          	add    $0x28,%rsp
  212084:	c3                   	retq   
  212085:	cc                   	int3   
  212086:	cc                   	int3   
  212087:	cc                   	int3   
  212088:	cc                   	int3   
  212089:	cc                   	int3   
  21208a:	cc                   	int3   
  21208b:	cc                   	int3   
  21208c:	cc                   	int3   
  21208d:	cc                   	int3   
  21208e:	cc                   	int3   
  21208f:	cc                   	int3   

0000000000212090 <_ZN4core4iter8adapters3map8map_fold17hb50d230422ac5205E>:
}
  212090:	c3                   	retq   
  212091:	cc                   	int3   
  212092:	cc                   	int3   
  212093:	cc                   	int3   
  212094:	cc                   	int3   
  212095:	cc                   	int3   
  212096:	cc                   	int3   
  212097:	cc                   	int3   
  212098:	cc                   	int3   
  212099:	cc                   	int3   
  21209a:	cc                   	int3   
  21209b:	cc                   	int3   
  21209c:	cc                   	int3   
  21209d:	cc                   	int3   
  21209e:	cc                   	int3   
  21209f:	cc                   	int3   

00000000002120a0 <_ZN4core4iter8adapters3map8map_fold17hc9048eddb7122dc0E>:
  2120a0:	c3                   	retq   
  2120a1:	cc                   	int3   
  2120a2:	cc                   	int3   
  2120a3:	cc                   	int3   
  2120a4:	cc                   	int3   
  2120a5:	cc                   	int3   
  2120a6:	cc                   	int3   
  2120a7:	cc                   	int3   
  2120a8:	cc                   	int3   
  2120a9:	cc                   	int3   
  2120aa:	cc                   	int3   
  2120ab:	cc                   	int3   
  2120ac:	cc                   	int3   
  2120ad:	cc                   	int3   
  2120ae:	cc                   	int3   
  2120af:	cc                   	int3   

00000000002120b0 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h062e9aab7d422d50E>:
    move |acc, elt| g(acc, f(elt))
  2120b0:	48 83 ec 58          	sub    $0x58,%rsp
  2120b4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2120b9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  2120be:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2120c3:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2120c8:	48 89 f8             	mov    %rdi,%rax
  2120cb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2120d0:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2120d5:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2120da:	e8 e1 86 01 00       	callq  22a7c0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17ha90416735f970b6fE>
  2120df:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2120e4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2120e9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2120ee:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2120f3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2120f8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2120fd:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  212102:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  212107:	e8 74 d3 01 00       	callq  22f480 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E>
  21210c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212111:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212116:	48 83 c4 58          	add    $0x58,%rsp
  21211a:	c3                   	retq   
  21211b:	cc                   	int3   
  21211c:	cc                   	int3   
  21211d:	cc                   	int3   
  21211e:	cc                   	int3   
  21211f:	cc                   	int3   

0000000000212120 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17hce0c6cf362607ce0E>:
  212120:	48 83 ec 58          	sub    $0x58,%rsp
  212124:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  212129:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21212e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  212133:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  212138:	48 89 f8             	mov    %rdi,%rax
  21213b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212140:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  212145:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21214a:	e8 51 86 01 00       	callq  22a7a0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17hced56ca8bff65c61E>
  21214f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  212154:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  212159:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21215e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212163:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  212168:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21216d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  212172:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  212177:	e8 54 d3 01 00       	callq  22f4d0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E>
  21217c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212181:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212186:	48 83 c4 58          	add    $0x58,%rsp
  21218a:	c3                   	retq   
  21218b:	cc                   	int3   
  21218c:	cc                   	int3   
  21218d:	cc                   	int3   
  21218e:	cc                   	int3   
  21218f:	cc                   	int3   

0000000000212190 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE>:
    ///     format!("{:?}", Foo(vec![10, 11], vec![12, 13])),
    ///     "[10, 11, 12, 13]",
    /// );
    /// ```
    #[stable(feature = "debug_builders", since = "1.2.0")]
    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self
  212190:	48 83 ec 78          	sub    $0x78,%rsp
  212194:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212199:	48 89 f0             	mov    %rsi,%rax
  21219c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2121a1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2121a6:	48 89 f8             	mov    %rdi,%rax
  2121a9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2121ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2121b3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2121b8:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  2121bd:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
    where
        D: fmt::Debug,
        I: IntoIterator<Item = D>,
    {
        for entry in entries {
  2121c2:	e8 99 8d 00 00       	callq  21af60 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h39afff3affafd620E>
  2121c7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2121cc:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2121d1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2121d6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2121db:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2121e0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2121e5:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2121ea:	e8 d1 8d 00 00       	callq  21afc0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>
  2121ef:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2121f4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2121f9:	48 85 c0             	test   %rax,%rax
  2121fc:	0f 95 c0             	setne  %al
  2121ff:	0f b6 c0             	movzbl %al,%eax
  212202:	74 06                	je     21220a <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x7a>
  212204:	eb 00                	jmp    212206 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x76>
  212206:	eb 04                	jmp    21220c <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x7c>
  212208:	0f 0b                	ud2    
            self.entry(&entry);
        }
  21220a:	eb 2e                	jmp    21223a <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0xaa>
  21220c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        for entry in entries {
  212211:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  212216:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21221b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  212220:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            self.entry(&entry);
  212225:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  21222a:	48 8d 15 5f 82 02 00 	lea    0x2825f(%rip),%rdx        # 23a490 <memcmp+0x1750>
  212231:	e8 9a 35 02 00       	callq  2357d0 <_ZN4core3fmt8builders8DebugSet5entry17ha462e373088cbeaaE>
        }
  212236:	eb 00                	jmp    212238 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0xa8>
        for entry in entries {
  212238:	eb ab                	jmp    2121e5 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x55>
  21223a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        self
    }
  21223f:	48 83 c4 78          	add    $0x78,%rsp
  212243:	c3                   	retq   
  212244:	cc                   	int3   
  212245:	cc                   	int3   
  212246:	cc                   	int3   
  212247:	cc                   	int3   
  212248:	cc                   	int3   
  212249:	cc                   	int3   
  21224a:	cc                   	int3   
  21224b:	cc                   	int3   
  21224c:	cc                   	int3   
  21224d:	cc                   	int3   
  21224e:	cc                   	int3   
  21224f:	cc                   	int3   

0000000000212250 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he903c6faddf346e6E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  212250:	48 83 ec 18          	sub    $0x18,%rsp
  212254:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212259:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21225e:	48 8b 3f             	mov    (%rdi),%rdi
  212261:	e8 4a 05 00 00       	callq  2127b0 <_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h54f7276e96e0decdE>
  212266:	88 44 24 07          	mov    %al,0x7(%rsp)
  21226a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21226e:	24 01                	and    $0x1,%al
  212270:	0f b6 c0             	movzbl %al,%eax
  212273:	48 83 c4 18          	add    $0x18,%rsp
  212277:	c3                   	retq   
  212278:	cc                   	int3   
  212279:	cc                   	int3   
  21227a:	cc                   	int3   
  21227b:	cc                   	int3   
  21227c:	cc                   	int3   
  21227d:	cc                   	int3   
  21227e:	cc                   	int3   
  21227f:	cc                   	int3   

0000000000212280 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h683916163281641eE>:
    pub const fn new() -> Self {
  212280:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  212283:	48 8b 15 86 e4 fe ff 	mov    -0x11b7a(%rip),%rdx        # 200710 <str.0+0xf0>
  21228a:	48 8b 0d 87 e4 fe ff 	mov    -0x11b79(%rip),%rcx        # 200718 <str.0+0xf8>
  212291:	48 89 17             	mov    %rdx,(%rdi)
  212294:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  212298:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  21229f:	00 
    }
  2122a0:	c3                   	retq   
  2122a1:	cc                   	int3   
  2122a2:	cc                   	int3   
  2122a3:	cc                   	int3   
  2122a4:	cc                   	int3   
  2122a5:	cc                   	int3   
  2122a6:	cc                   	int3   
  2122a7:	cc                   	int3   
  2122a8:	cc                   	int3   
  2122a9:	cc                   	int3   
  2122aa:	cc                   	int3   
  2122ab:	cc                   	int3   
  2122ac:	cc                   	int3   
  2122ad:	cc                   	int3   
  2122ae:	cc                   	int3   
  2122af:	cc                   	int3   

00000000002122b0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc024dbab028df719E>:
    pub const fn new() -> Self {
  2122b0:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  2122b3:	48 8b 15 36 e4 fe ff 	mov    -0x11bca(%rip),%rdx        # 2006f0 <str.0+0xd0>
  2122ba:	48 8b 0d 37 e4 fe ff 	mov    -0x11bc9(%rip),%rcx        # 2006f8 <str.0+0xd8>
  2122c1:	48 89 17             	mov    %rdx,(%rdi)
  2122c4:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  2122c8:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  2122cf:	00 
    }
  2122d0:	c3                   	retq   
  2122d1:	cc                   	int3   
  2122d2:	cc                   	int3   
  2122d3:	cc                   	int3   
  2122d4:	cc                   	int3   
  2122d5:	cc                   	int3   
  2122d6:	cc                   	int3   
  2122d7:	cc                   	int3   
  2122d8:	cc                   	int3   
  2122d9:	cc                   	int3   
  2122da:	cc                   	int3   
  2122db:	cc                   	int3   
  2122dc:	cc                   	int3   
  2122dd:	cc                   	int3   
  2122de:	cc                   	int3   
  2122df:	cc                   	int3   

00000000002122e0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdf791d5e5fd80031E>:
    pub const fn new() -> Self {
  2122e0:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  2122e3:	48 8b 15 36 e4 fe ff 	mov    -0x11bca(%rip),%rdx        # 200720 <str.0+0x100>
  2122ea:	48 8b 0d 37 e4 fe ff 	mov    -0x11bc9(%rip),%rcx        # 200728 <str.0+0x108>
  2122f1:	48 89 17             	mov    %rdx,(%rdi)
  2122f4:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  2122f8:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  2122ff:	00 
    }
  212300:	c3                   	retq   
  212301:	cc                   	int3   
  212302:	cc                   	int3   
  212303:	cc                   	int3   
  212304:	cc                   	int3   
  212305:	cc                   	int3   
  212306:	cc                   	int3   
  212307:	cc                   	int3   
  212308:	cc                   	int3   
  212309:	cc                   	int3   
  21230a:	cc                   	int3   
  21230b:	cc                   	int3   
  21230c:	cc                   	int3   
  21230d:	cc                   	int3   
  21230e:	cc                   	int3   
  21230f:	cc                   	int3   

0000000000212310 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  212310:	48 83 ec 18          	sub    $0x18,%rsp
  212314:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  212319:	e8 f2 5b ff ff       	callq  207f10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h878b30743715fdd5E>
  21231e:	48 89 04 24          	mov    %rax,(%rsp)
  212322:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212327:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21232b:	e8 70 9f 00 00       	callq  21c2a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7fce53aeb6f9a2ccE>
  212330:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212334:	48 83 c4 18          	add    $0x18,%rsp
  212338:	c3                   	retq   
  212339:	cc                   	int3   
  21233a:	cc                   	int3   
  21233b:	cc                   	int3   
  21233c:	cc                   	int3   
  21233d:	cc                   	int3   
  21233e:	cc                   	int3   
  21233f:	cc                   	int3   

0000000000212340 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  212340:	48 83 ec 18          	sub    $0x18,%rsp
  212344:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  212349:	e8 82 5b ff ff       	callq  207ed0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>
  21234e:	48 89 04 24          	mov    %rax,(%rsp)
  212352:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212357:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21235b:	e8 30 fb ff ff       	callq  211e90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
  212360:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212364:	48 83 c4 18          	add    $0x18,%rsp
  212368:	c3                   	retq   
  212369:	cc                   	int3   
  21236a:	cc                   	int3   
  21236b:	cc                   	int3   
  21236c:	cc                   	int3   
  21236d:	cc                   	int3   
  21236e:	cc                   	int3   
  21236f:	cc                   	int3   

0000000000212370 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  212370:	48 83 ec 18          	sub    $0x18,%rsp
  212374:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  212379:	e8 72 5b ff ff       	callq  207ef0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>
  21237e:	48 89 04 24          	mov    %rax,(%rsp)
  212382:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212387:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21238b:	e8 60 0b 00 00       	callq  212ef0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>
  212390:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212394:	48 83 c4 18          	add    $0x18,%rsp
  212398:	c3                   	retq   
  212399:	cc                   	int3   
  21239a:	cc                   	int3   
  21239b:	cc                   	int3   
  21239c:	cc                   	int3   
  21239d:	cc                   	int3   
  21239e:	cc                   	int3   
  21239f:	cc                   	int3   

00000000002123a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h5323d9ea74175e6cE>:
    pub fn len(&self) -> usize {
  2123a0:	50                   	push   %rax
  2123a1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.len
  2123a5:	48 8b 47 10          	mov    0x10(%rdi),%rax
    }
  2123a9:	59                   	pop    %rcx
  2123aa:	c3                   	retq   
  2123ab:	cc                   	int3   
  2123ac:	cc                   	int3   
  2123ad:	cc                   	int3   
  2123ae:	cc                   	int3   
  2123af:	cc                   	int3   

00000000002123b0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h86fcf6085494c979E>:
    pub fn len(&self) -> usize {
  2123b0:	50                   	push   %rax
  2123b1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.len
  2123b5:	48 8b 47 10          	mov    0x10(%rdi),%rax
    }
  2123b9:	59                   	pop    %rcx
  2123ba:	c3                   	retq   
  2123bb:	cc                   	int3   
  2123bc:	cc                   	int3   
  2123bd:	cc                   	int3   
  2123be:	cc                   	int3   
  2123bf:	cc                   	int3   

00000000002123c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>:
    pub fn push(&mut self, value: T) {
  2123c0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2123c7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2123cc:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2123d1:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  2123d6:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        if self.len == self.buf.capacity() {
  2123db:	48 8b 47 10          	mov    0x10(%rdi),%rax
  2123df:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2123e4:	48 89 f8             	mov    %rdi,%rax
  2123e7:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2123ee:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  2123ef:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2123f3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    }
  2123f8:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2123fd:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  212402:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  212407:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21240c:	48 39 c8             	cmp    %rcx,%rax
  21240f:	74 11                	je     212422 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x62>
  212411:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  212416:	e8 55 ff ff ff       	callq  212370 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>
  21241b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212420:	eb 11                	jmp    212433 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x73>
  212422:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            self.reserve(1);
  212427:	be 01 00 00 00       	mov    $0x1,%esi
  21242c:	e8 4f 03 00 00       	callq  212780 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h889d26193bda6811E>
        if self.len == self.buf.capacity() {
  212431:	eb de                	jmp    212411 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x51>
  212433:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212438:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  21243d:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  212441:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  212446:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21244b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212450:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // The obtained pointer is valid for writes since the caller must
        // guarantee that it points to the same allocated object as `self`.
        unsafe { intrinsics::offset(self, count) as *mut T }
  212455:	48 c1 e1 03          	shl    $0x3,%rcx
  212459:	48 01 c8             	add    %rcx,%rax
  21245c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  212461:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  212466:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21246b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212470:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  212475:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            ptr::write(end, value);
  21247a:	e8 51 f6 00 00       	callq  221ad0 <_ZN4core3ptr5write17h869cc00e30cd30f8E>
  21247f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            self.len += 1;
  212484:	48 8b 48 10          	mov    0x10(%rax),%rcx
  212488:	48 83 c1 01          	add    $0x1,%rcx
  21248c:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  212490:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  212497:	c3                   	retq   
  212498:	cc                   	int3   
  212499:	cc                   	int3   
  21249a:	cc                   	int3   
  21249b:	cc                   	int3   
  21249c:	cc                   	int3   
  21249d:	cc                   	int3   
  21249e:	cc                   	int3   
  21249f:	cc                   	int3   

00000000002124a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E>:
    pub fn push(&mut self, value: T) {
  2124a0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  2124a7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2124ac:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2124b1:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if self.len == self.buf.capacity() {
  2124b6:	48 8b 47 10          	mov    0x10(%rdi),%rax
  2124ba:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2124bf:	48 89 f8             	mov    %rdi,%rax
  2124c2:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2124c9:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  2124ca:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2124ce:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2124d5:	00 
    }
  2124d6:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2124dd:	00 
  2124de:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2124e3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2124e8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2124ed:	48 39 c8             	cmp    %rcx,%rax
  2124f0:	74 11                	je     212503 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x63>
  2124f2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  2124f7:	e8 14 fe ff ff       	callq  212310 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>
  2124fc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212501:	eb 11                	jmp    212514 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x74>
  212503:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            self.reserve(1);
  212508:	be 01 00 00 00       	mov    $0x1,%esi
  21250d:	e8 3e 02 00 00       	callq  212750 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h611d7870e33ffd1fE>
        if self.len == self.buf.capacity() {
  212512:	eb de                	jmp    2124f2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x52>
  212514:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212519:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  21251e:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  212522:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212527:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  21252c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  212531:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  212536:	48 c1 e1 05          	shl    $0x5,%rcx
  21253a:	48 01 c8             	add    %rcx,%rax
  21253d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  212544:	00 
  212545:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21254c:	00 
  21254d:	48 89 04 24          	mov    %rax,(%rsp)
  212551:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  212556:	48 8b 3c 24          	mov    (%rsp),%rdi
  21255a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            ptr::write(end, value);
  21255f:	48 8b 08             	mov    (%rax),%rcx
  212562:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  212567:	48 8b 48 08          	mov    0x8(%rax),%rcx
  21256b:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  212570:	48 8b 48 10          	mov    0x10(%rax),%rcx
  212574:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  212579:	48 8b 40 18          	mov    0x18(%rax),%rax
  21257d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212582:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  212587:	e8 14 f5 00 00       	callq  221aa0 <_ZN4core3ptr5write17h04e3884830525521E>
  21258c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            self.len += 1;
  212591:	48 8b 48 10          	mov    0x10(%rax),%rcx
  212595:	48 83 c1 01          	add    $0x1,%rcx
  212599:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  21259d:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2125a4:	c3                   	retq   
  2125a5:	cc                   	int3   
  2125a6:	cc                   	int3   
  2125a7:	cc                   	int3   
  2125a8:	cc                   	int3   
  2125a9:	cc                   	int3   
  2125aa:	cc                   	int3   
  2125ab:	cc                   	int3   
  2125ac:	cc                   	int3   
  2125ad:	cc                   	int3   
  2125ae:	cc                   	int3   
  2125af:	cc                   	int3   

00000000002125b0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E>:
    pub fn push(&mut self, value: T) {
  2125b0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2125b7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2125bc:	89 f0                	mov    %esi,%eax
  2125be:	89 44 24 30          	mov    %eax,0x30(%rsp)
  2125c2:	48 c1 ee 20          	shr    $0x20,%rsi
  2125c6:	66 89 f0             	mov    %si,%ax
  2125c9:	66 89 44 24 34       	mov    %ax,0x34(%rsp)
  2125ce:	8b 44 24 30          	mov    0x30(%rsp),%eax
  2125d2:	89 44 24 28          	mov    %eax,0x28(%rsp)
  2125d6:	66 8b 44 24 34       	mov    0x34(%rsp),%ax
  2125db:	66 89 44 24 2c       	mov    %ax,0x2c(%rsp)
  2125e0:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        if self.len == self.buf.capacity() {
  2125e5:	48 8b 47 10          	mov    0x10(%rdi),%rax
  2125e9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2125ee:	48 89 f8             	mov    %rdi,%rax
  2125f1:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2125f8:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  2125f9:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2125fd:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    }
  212602:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  212607:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21260c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  212611:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  212616:	48 39 c8             	cmp    %rcx,%rax
  212619:	74 11                	je     21262c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x7c>
  21261b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  212620:	e8 1b fd ff ff       	callq  212340 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>
  212625:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21262a:	eb 11                	jmp    21263d <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x8d>
  21262c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            self.reserve(1);
  212631:	be 01 00 00 00       	mov    $0x1,%esi
  212636:	e8 e5 00 00 00       	callq  212720 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h15149a1eb7a60bceE>
        if self.len == self.buf.capacity() {
  21263b:	eb de                	jmp    21261b <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x6b>
  21263d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212642:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  212647:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  21264b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  212650:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  212655:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21265a:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  21265f:	48 6b c9 06          	imul   $0x6,%rcx,%rcx
  212663:	48 01 c8             	add    %rcx,%rax
  212666:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21266b:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  212670:	48 89 04 24          	mov    %rax,(%rsp)
  212674:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212679:	48 8b 3c 24          	mov    (%rsp),%rdi
            ptr::write(end, value);
  21267d:	66 8b 44 24 2c       	mov    0x2c(%rsp),%ax
  212682:	66 89 44 24 3c       	mov    %ax,0x3c(%rsp)
  212687:	8b 44 24 28          	mov    0x28(%rsp),%eax
  21268b:	89 44 24 38          	mov    %eax,0x38(%rsp)
  21268f:	8b 44 24 38          	mov    0x38(%rsp),%eax
  212693:	89 c6                	mov    %eax,%esi
  212695:	0f b7 44 24 3c       	movzwl 0x3c(%rsp),%eax
  21269a:	48 c1 e0 20          	shl    $0x20,%rax
  21269e:	48 09 c6             	or     %rax,%rsi
  2126a1:	e8 6a f4 00 00       	callq  221b10 <_ZN4core3ptr5write17hc73781c1f294320dE>
  2126a6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            self.len += 1;
  2126ab:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2126af:	48 83 c1 01          	add    $0x1,%rcx
  2126b3:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  2126b7:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2126be:	c3                   	retq   
  2126bf:	cc                   	int3   

00000000002126c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hcea6d2ce5f1d181eE>:
    pub fn as_ptr(&self) -> *const T {
  2126c0:	48 83 ec 18          	sub    $0x18,%rsp
  2126c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  2126c9:	e8 22 58 ff ff       	callq  207ef0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>
  2126ce:	48 89 04 24          	mov    %rax,(%rsp)
  2126d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2126d7:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  2126db:	e8 10 08 00 00       	callq  212ef0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>
  2126e0:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2126e4:	48 83 c4 18          	add    $0x18,%rsp
  2126e8:	c3                   	retq   
  2126e9:	cc                   	int3   
  2126ea:	cc                   	int3   
  2126eb:	cc                   	int3   
  2126ec:	cc                   	int3   
  2126ed:	cc                   	int3   
  2126ee:	cc                   	int3   
  2126ef:	cc                   	int3   

00000000002126f0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hdea908836609253bE>:
    pub fn as_ptr(&self) -> *const T {
  2126f0:	48 83 ec 18          	sub    $0x18,%rsp
  2126f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  2126f9:	e8 d2 57 ff ff       	callq  207ed0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>
  2126fe:	48 89 04 24          	mov    %rax,(%rsp)
  212702:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212707:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21270b:	e8 80 f7 ff ff       	callq  211e90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
  212710:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212714:	48 83 c4 18          	add    $0x18,%rsp
  212718:	c3                   	retq   
  212719:	cc                   	int3   
  21271a:	cc                   	int3   
  21271b:	cc                   	int3   
  21271c:	cc                   	int3   
  21271d:	cc                   	int3   
  21271e:	cc                   	int3   
  21271f:	cc                   	int3   

0000000000212720 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h15149a1eb7a60bceE>:
    pub fn reserve(&mut self, additional: usize) {
  212720:	48 83 ec 18          	sub    $0x18,%rsp
  212724:	48 89 f2             	mov    %rsi,%rdx
  212727:	48 89 f8             	mov    %rdi,%rax
  21272a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21272f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  212734:	48 89 c7             	mov    %rax,%rdi
  212737:	48 8b 70 10          	mov    0x10(%rax),%rsi
  21273b:	e8 40 58 ff ff       	callq  207f80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E>
    }
  212740:	48 83 c4 18          	add    $0x18,%rsp
  212744:	c3                   	retq   
  212745:	cc                   	int3   
  212746:	cc                   	int3   
  212747:	cc                   	int3   
  212748:	cc                   	int3   
  212749:	cc                   	int3   
  21274a:	cc                   	int3   
  21274b:	cc                   	int3   
  21274c:	cc                   	int3   
  21274d:	cc                   	int3   
  21274e:	cc                   	int3   
  21274f:	cc                   	int3   

0000000000212750 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h611d7870e33ffd1fE>:
    pub fn reserve(&mut self, additional: usize) {
  212750:	48 83 ec 18          	sub    $0x18,%rsp
  212754:	48 89 f2             	mov    %rsi,%rdx
  212757:	48 89 f8             	mov    %rdi,%rax
  21275a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21275f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  212764:	48 89 c7             	mov    %rax,%rdi
  212767:	48 8b 70 10          	mov    0x10(%rax),%rsi
  21276b:	e8 c0 57 ff ff       	callq  207f30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E>
    }
  212770:	48 83 c4 18          	add    $0x18,%rsp
  212774:	c3                   	retq   
  212775:	cc                   	int3   
  212776:	cc                   	int3   
  212777:	cc                   	int3   
  212778:	cc                   	int3   
  212779:	cc                   	int3   
  21277a:	cc                   	int3   
  21277b:	cc                   	int3   
  21277c:	cc                   	int3   
  21277d:	cc                   	int3   
  21277e:	cc                   	int3   
  21277f:	cc                   	int3   

0000000000212780 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h889d26193bda6811E>:
    pub fn reserve(&mut self, additional: usize) {
  212780:	48 83 ec 18          	sub    $0x18,%rsp
  212784:	48 89 f2             	mov    %rsi,%rdx
  212787:	48 89 f8             	mov    %rdi,%rax
  21278a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21278f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  212794:	48 89 c7             	mov    %rax,%rdi
  212797:	48 8b 70 10          	mov    0x10(%rax),%rsi
  21279b:	e8 30 58 ff ff       	callq  207fd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E>
    }
  2127a0:	48 83 c4 18          	add    $0x18,%rsp
  2127a4:	c3                   	retq   
  2127a5:	cc                   	int3   
  2127a6:	cc                   	int3   
  2127a7:	cc                   	int3   
  2127a8:	cc                   	int3   
  2127a9:	cc                   	int3   
  2127aa:	cc                   	int3   
  2127ab:	cc                   	int3   
  2127ac:	cc                   	int3   
  2127ad:	cc                   	int3   
  2127ae:	cc                   	int3   
  2127af:	cc                   	int3   

00000000002127b0 <_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h54f7276e96e0decdE>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: fmt::Debug, A: Allocator> fmt::Debug for Vec<T, A> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  2127b0:	48 83 ec 38          	sub    $0x38,%rsp
  2127b4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2127b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2127be:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt::Debug::fmt(&**self, f)
  2127c3:	e8 38 00 00 00       	callq  212800 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>
  2127c8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2127cd:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2127d2:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2127d7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2127dc:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2127e1:	e8 0a f6 ff ff       	callq  211df0 <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17hcd787f1212a7fd9fE>
  2127e6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2127ea:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2127ee:	24 01                	and    $0x1,%al
  2127f0:	0f b6 c0             	movzbl %al,%eax
  2127f3:	48 83 c4 38          	add    $0x38,%rsp
  2127f7:	c3                   	retq   
  2127f8:	cc                   	int3   
  2127f9:	cc                   	int3   
  2127fa:	cc                   	int3   
  2127fb:	cc                   	int3   
  2127fc:	cc                   	int3   
  2127fd:	cc                   	int3   
  2127fe:	cc                   	int3   
  2127ff:	cc                   	int3   

0000000000212800 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>:
    fn deref(&self) -> &[T] {
  212800:	48 83 ec 28          	sub    $0x28,%rsp
  212804:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212809:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
  21280e:	e8 dd fe ff ff       	callq  2126f0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hdea908836609253bE>
  212813:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212818:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21281d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212822:	48 8b 70 10          	mov    0x10(%rax),%rsi
  212826:	e8 85 e1 ff ff       	callq  2109b0 <_ZN4core5slice3raw14from_raw_parts17h756c0bd16b5a8f40E>
  21282b:	48 89 04 24          	mov    %rax,(%rsp)
  21282f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212834:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212839:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21283d:	48 83 c4 28          	add    $0x28,%rsp
  212841:	c3                   	retq   
  212842:	cc                   	int3   
  212843:	cc                   	int3   
  212844:	cc                   	int3   
  212845:	cc                   	int3   
  212846:	cc                   	int3   
  212847:	cc                   	int3   
  212848:	cc                   	int3   
  212849:	cc                   	int3   
  21284a:	cc                   	int3   
  21284b:	cc                   	int3   
  21284c:	cc                   	int3   
  21284d:	cc                   	int3   
  21284e:	cc                   	int3   
  21284f:	cc                   	int3   

0000000000212850 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbecd21e546c3f9bdE>:
    fn deref(&self) -> &[T] {
  212850:	48 83 ec 28          	sub    $0x28,%rsp
  212854:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212859:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
  21285e:	e8 5d fe ff ff       	callq  2126c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hcea6d2ce5f1d181eE>
  212863:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212868:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21286d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212872:	48 8b 70 10          	mov    0x10(%rax),%rsi
  212876:	e8 05 e1 ff ff       	callq  210980 <_ZN4core5slice3raw14from_raw_parts17h0ef61f3524b7899cE>
  21287b:	48 89 04 24          	mov    %rax,(%rsp)
  21287f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212884:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212889:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21288d:	48 83 c4 28          	add    $0x28,%rsp
  212891:	c3                   	retq   
  212892:	cc                   	int3   
  212893:	cc                   	int3   
  212894:	cc                   	int3   
  212895:	cc                   	int3   
  212896:	cc                   	int3   
  212897:	cc                   	int3   
  212898:	cc                   	int3   
  212899:	cc                   	int3   
  21289a:	cc                   	int3   
  21289b:	cc                   	int3   
  21289c:	cc                   	int3   
  21289d:	cc                   	int3   
  21289e:	cc                   	int3   
  21289f:	cc                   	int3   

00000000002128a0 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb9a8b3d4d7d4adebE>:
    fn index(&self, index: I) -> &Self::Output {
  2128a0:	48 83 ec 38          	sub    $0x38,%rsp
  2128a4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2128a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2128ae:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2128b3:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        Index::index(&**self, index)
  2128b8:	e8 93 ff ff ff       	callq  212850 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbecd21e546c3f9bdE>
  2128bd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2128c2:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2128c7:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2128cc:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2128d1:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2128d6:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2128db:	e8 60 7f 01 00       	callq  22a840 <_ZN4core5slice5index74_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$5index17h0b3526a5757c1304E>
  2128e0:	48 89 04 24          	mov    %rax,(%rsp)
  2128e4:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2128e8:	48 83 c4 38          	add    $0x38,%rsp
  2128ec:	c3                   	retq   
  2128ed:	cc                   	int3   
  2128ee:	cc                   	int3   
  2128ef:	cc                   	int3   

00000000002128f0 <_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9f38b1c324b07e96E>:
    fn into_iter(self) -> slice::Iter<'a, T> {
  2128f0:	48 83 ec 28          	sub    $0x28,%rsp
  2128f4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        self.iter()
  2128f9:	e8 02 ff ff ff       	callq  212800 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>
  2128fe:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  212903:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  212908:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21290d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212912:	e8 e9 f5 ff ff       	callq  211f00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>
  212917:	48 89 04 24          	mov    %rax,(%rsp)
  21291b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212920:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212925:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212929:	48 83 c4 28          	add    $0x28,%rsp
  21292d:	c3                   	retq   
  21292e:	cc                   	int3   
  21292f:	cc                   	int3   

0000000000212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>:
    }
}

impl<T> InterruptDescriptorEntry<T> {
    #[inline]
    pub fn empty() -> Self {
  212930:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  212934:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21293a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  212941:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  212948:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21294f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  212956:	00 
  212957:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  21295e:	00 
            options: DEFAULT_INTERRUPT_OPTION_BITS,
            gdt_selector: 0,
            reserved: 0,
            handler_type: PhantomData,
        }
    }
  21295f:	48 8b 04 24          	mov    (%rsp),%rax
  212963:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212968:	48 83 c4 10          	add    $0x10,%rsp
  21296c:	c3                   	retq   
  21296d:	cc                   	int3   
  21296e:	cc                   	int3   
  21296f:	cc                   	int3   

0000000000212970 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>:
    pub fn empty() -> Self {
  212970:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  212974:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21297a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  212981:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  212988:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21298f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  212996:	00 
  212997:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  21299e:	00 
    }
  21299f:	48 8b 04 24          	mov    (%rsp),%rax
  2129a3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2129a8:	48 83 c4 10          	add    $0x10,%rsp
  2129ac:	c3                   	retq   
  2129ad:	cc                   	int3   
  2129ae:	cc                   	int3   
  2129af:	cc                   	int3   

00000000002129b0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hac5a2b431e8a6007E>:
    pub fn empty() -> Self {
  2129b0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  2129b4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  2129ba:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  2129c1:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  2129c8:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  2129cf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  2129d6:	00 
  2129d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  2129de:	00 
    }
  2129df:	48 8b 04 24          	mov    (%rsp),%rax
  2129e3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2129e8:	48 83 c4 10          	add    $0x10,%rsp
  2129ec:	c3                   	retq   
  2129ed:	cc                   	int3   
  2129ee:	cc                   	int3   
  2129ef:	cc                   	int3   

00000000002129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>:
    pub fn empty() -> Self {
  2129f0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  2129f4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  2129fa:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  212a01:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  212a08:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  212a0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  212a16:	00 
  212a17:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  212a1e:	00 
    }
  212a1f:	48 8b 04 24          	mov    (%rsp),%rax
  212a23:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212a28:	48 83 c4 10          	add    $0x10,%rsp
  212a2c:	c3                   	retq   
  212a2d:	cc                   	int3   
  212a2e:	cc                   	int3   
  212a2f:	cc                   	int3   

0000000000212a30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>:
    pub fn empty() -> Self {
  212a30:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  212a34:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  212a3a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  212a41:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  212a48:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  212a4f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  212a56:	00 
  212a57:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  212a5e:	00 
    }
  212a5f:	48 8b 04 24          	mov    (%rsp),%rax
  212a63:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212a68:	48 83 c4 10          	add    $0x10,%rsp
  212a6c:	c3                   	retq   
  212a6d:	cc                   	int3   
  212a6e:	cc                   	int3   
  212a6f:	cc                   	int3   

0000000000212a70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf4ab43b81317ed53E>:
    pub fn empty() -> Self {
  212a70:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  212a74:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  212a7a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  212a81:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  212a88:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  212a8f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  212a96:	00 
  212a97:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  212a9e:	00 
    }
  212a9f:	48 8b 04 24          	mov    (%rsp),%rax
  212aa3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212aa8:	48 83 c4 10          	add    $0x10,%rsp
  212aac:	c3                   	retq   
  212aad:	cc                   	int3   
  212aae:	cc                   	int3   
  212aaf:	cc                   	int3   

0000000000212ab0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h1a0e97b842ddc7e7E>:

    #[inline]
    fn read_cs(&self) -> u16 {
  212ab0:	48 83 ec 18          	sub    $0x18,%rsp
  212ab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  212ab9:	48 8d 3d 1f e0 fe ff 	lea    -0x11fe1(%rip),%rdi        # 200adf <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xe9>
  212ac0:	e8 8b 99 00 00       	callq  21c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  212ac5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212aca:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  212acf:	48 83 c4 18          	add    $0x18,%rsp
  212ad3:	c3                   	retq   
  212ad4:	cc                   	int3   
  212ad5:	cc                   	int3   
  212ad6:	cc                   	int3   
  212ad7:	cc                   	int3   
  212ad8:	cc                   	int3   
  212ad9:	cc                   	int3   
  212ada:	cc                   	int3   
  212adb:	cc                   	int3   
  212adc:	cc                   	int3   
  212add:	cc                   	int3   
  212ade:	cc                   	int3   
  212adf:	cc                   	int3   

0000000000212ae0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hcc15ebcda2d58b3aE>:
    fn read_cs(&self) -> u16 {
  212ae0:	48 83 ec 18          	sub    $0x18,%rsp
  212ae4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  212ae9:	48 8d 3d ef df fe ff 	lea    -0x12011(%rip),%rdi        # 200adf <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xe9>
  212af0:	e8 5b 99 00 00       	callq  21c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  212af5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212afa:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  212aff:	48 83 c4 18          	add    $0x18,%rsp
  212b03:	c3                   	retq   
  212b04:	cc                   	int3   
  212b05:	cc                   	int3   
  212b06:	cc                   	int3   
  212b07:	cc                   	int3   
  212b08:	cc                   	int3   
  212b09:	cc                   	int3   
  212b0a:	cc                   	int3   
  212b0b:	cc                   	int3   
  212b0c:	cc                   	int3   
  212b0d:	cc                   	int3   
  212b0e:	cc                   	int3   
  212b0f:	cc                   	int3   

0000000000212b10 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17he76b61bcb18d04e3E>:
    fn read_cs(&self) -> u16 {
  212b10:	48 83 ec 18          	sub    $0x18,%rsp
  212b14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  212b19:	48 8d 3d bf df fe ff 	lea    -0x12041(%rip),%rdi        # 200adf <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xe9>
  212b20:	e8 2b 99 00 00       	callq  21c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  212b25:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212b2a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  212b2f:	48 83 c4 18          	add    $0x18,%rsp
  212b33:	c3                   	retq   
  212b34:	cc                   	int3   
  212b35:	cc                   	int3   
  212b36:	cc                   	int3   
  212b37:	cc                   	int3   
  212b38:	cc                   	int3   
  212b39:	cc                   	int3   
  212b3a:	cc                   	int3   
  212b3b:	cc                   	int3   
  212b3c:	cc                   	int3   
  212b3d:	cc                   	int3   
  212b3e:	cc                   	int3   
  212b3f:	cc                   	int3   

0000000000212b40 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hed034d7671a9e6d1E>:
    fn read_cs(&self) -> u16 {
  212b40:	48 83 ec 18          	sub    $0x18,%rsp
  212b44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  212b49:	48 8d 3d 8f df fe ff 	lea    -0x12071(%rip),%rdi        # 200adf <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0xe9>
  212b50:	e8 fb 98 00 00       	callq  21c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  212b55:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212b5a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  212b5f:	48 83 c4 18          	add    $0x18,%rsp
  212b63:	c3                   	retq   
  212b64:	cc                   	int3   
  212b65:	cc                   	int3   
  212b66:	cc                   	int3   
  212b67:	cc                   	int3   
  212b68:	cc                   	int3   
  212b69:	cc                   	int3   
  212b6a:	cc                   	int3   
  212b6b:	cc                   	int3   
  212b6c:	cc                   	int3   
  212b6d:	cc                   	int3   
  212b6e:	cc                   	int3   
  212b6f:	cc                   	int3   

0000000000212b70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h405eec068033d244E>:

    #[inline]
    fn set_pointers(&mut self, addr: u64) {
  212b70:	48 83 ec 30          	sub    $0x30,%rsp
  212b74:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  212b79:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212b7e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212b83:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  212b88:	48 89 f0             	mov    %rsi,%rax
  212b8b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  212b91:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  212b94:	48 c1 ee 10          	shr    $0x10,%rsi
  212b98:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212b9d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212ba2:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212ba7:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  212bac:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  212bb3:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  212bb7:	48 c1 e8 20          	shr    $0x20,%rax
  212bbb:	48 89 04 24          	mov    %rax,(%rsp)
  212bbf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212bc4:	48 8b 0c 24          	mov    (%rsp),%rcx
  212bc8:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  212bcf:	00 00 00 
  212bd2:	48 21 d1             	and    %rdx,%rcx
  212bd5:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  212bd8:	48 83 c4 30          	add    $0x30,%rsp
  212bdc:	c3                   	retq   
  212bdd:	cc                   	int3   
  212bde:	cc                   	int3   
  212bdf:	cc                   	int3   

0000000000212be0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h52ea135a040c928dE>:
    fn set_pointers(&mut self, addr: u64) {
  212be0:	48 83 ec 30          	sub    $0x30,%rsp
  212be4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  212be9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212bee:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212bf3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  212bf8:	48 89 f0             	mov    %rsi,%rax
  212bfb:	48 25 ff ff 00 00    	and    $0xffff,%rax
  212c01:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  212c04:	48 c1 ee 10          	shr    $0x10,%rsi
  212c08:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212c0d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212c12:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212c17:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  212c1c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  212c23:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  212c27:	48 c1 e8 20          	shr    $0x20,%rax
  212c2b:	48 89 04 24          	mov    %rax,(%rsp)
  212c2f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212c34:	48 8b 0c 24          	mov    (%rsp),%rcx
  212c38:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  212c3f:	00 00 00 
  212c42:	48 21 d1             	and    %rdx,%rcx
  212c45:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  212c48:	48 83 c4 30          	add    $0x30,%rsp
  212c4c:	c3                   	retq   
  212c4d:	cc                   	int3   
  212c4e:	cc                   	int3   
  212c4f:	cc                   	int3   

0000000000212c50 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h6bdb624b9dce4562E>:
    fn set_pointers(&mut self, addr: u64) {
  212c50:	48 83 ec 30          	sub    $0x30,%rsp
  212c54:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  212c59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212c5e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212c63:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  212c68:	48 89 f0             	mov    %rsi,%rax
  212c6b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  212c71:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  212c74:	48 c1 ee 10          	shr    $0x10,%rsi
  212c78:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212c7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212c82:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212c87:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  212c8c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  212c93:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  212c97:	48 c1 e8 20          	shr    $0x20,%rax
  212c9b:	48 89 04 24          	mov    %rax,(%rsp)
  212c9f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212ca4:	48 8b 0c 24          	mov    (%rsp),%rcx
  212ca8:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  212caf:	00 00 00 
  212cb2:	48 21 d1             	and    %rdx,%rcx
  212cb5:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  212cb8:	48 83 c4 30          	add    $0x30,%rsp
  212cbc:	c3                   	retq   
  212cbd:	cc                   	int3   
  212cbe:	cc                   	int3   
  212cbf:	cc                   	int3   

0000000000212cc0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h9080365b9cc36586E>:
    fn set_pointers(&mut self, addr: u64) {
  212cc0:	48 83 ec 30          	sub    $0x30,%rsp
  212cc4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  212cc9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212cce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212cd3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  212cd8:	48 89 f0             	mov    %rsi,%rax
  212cdb:	48 25 ff ff 00 00    	and    $0xffff,%rax
  212ce1:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  212ce4:	48 c1 ee 10          	shr    $0x10,%rsi
  212ce8:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212ced:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212cf2:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212cf7:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  212cfc:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  212d03:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  212d07:	48 c1 e8 20          	shr    $0x20,%rax
  212d0b:	48 89 04 24          	mov    %rax,(%rsp)
  212d0f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212d14:	48 8b 0c 24          	mov    (%rsp),%rcx
  212d18:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  212d1f:	00 00 00 
  212d22:	48 21 d1             	and    %rdx,%rcx
  212d25:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  212d28:	48 83 c4 30          	add    $0x30,%rsp
  212d2c:	c3                   	retq   
  212d2d:	cc                   	int3   
  212d2e:	cc                   	int3   
  212d2f:	cc                   	int3   

0000000000212d30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h45b4c043149096bbE>:

        low | high | middle
    }

    #[inline]
    pub fn set_handler(&mut self, handler_address: u64) {
  212d30:	48 83 ec 28          	sub    $0x28,%rsp
  212d34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212d39:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212d3e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        // set high, low and middle pointers
        self.set_pointers(handler_address);
  212d43:	e8 98 fe ff ff       	callq  212be0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h52ea135a040c928dE>
  212d48:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi

        // get the cs register:
        self.gdt_selector = self.read_cs();
  212d4d:	e8 be fd ff ff       	callq  212b10 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17he76b61bcb18d04e3E>
  212d52:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212d57:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212d5c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  212d61:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  212d65:	48 83 c7 04          	add    $0x4,%rdi
  212d69:	be 0f 00 00 00       	mov    $0xf,%esi
  212d6e:	ba 01 00 00 00       	mov    $0x1,%edx
  212d73:	e8 38 e3 00 00       	callq  2210b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  212d78:	48 83 c4 28          	add    $0x28,%rsp
  212d7c:	c3                   	retq   
  212d7d:	cc                   	int3   
  212d7e:	cc                   	int3   
  212d7f:	cc                   	int3   

0000000000212d80 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h7367ced91298c5daE>:
    pub fn set_handler(&mut self, handler_address: u64) {
  212d80:	48 83 ec 28          	sub    $0x28,%rsp
  212d84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212d89:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212d8e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  212d93:	e8 d8 fd ff ff       	callq  212b70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h405eec068033d244E>
  212d98:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  212d9d:	e8 0e fd ff ff       	callq  212ab0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h1a0e97b842ddc7e7E>
  212da2:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212da7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212dac:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  212db1:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  212db5:	48 83 c7 04          	add    $0x4,%rdi
  212db9:	be 0f 00 00 00       	mov    $0xf,%esi
  212dbe:	ba 01 00 00 00       	mov    $0x1,%edx
  212dc3:	e8 e8 e2 00 00       	callq  2210b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  212dc8:	48 83 c4 28          	add    $0x28,%rsp
  212dcc:	c3                   	retq   
  212dcd:	cc                   	int3   
  212dce:	cc                   	int3   
  212dcf:	cc                   	int3   

0000000000212dd0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hc36dc393644916b4E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  212dd0:	48 83 ec 28          	sub    $0x28,%rsp
  212dd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212dd9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212dde:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  212de3:	e8 68 fe ff ff       	callq  212c50 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h6bdb624b9dce4562E>
  212de8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  212ded:	e8 4e fd ff ff       	callq  212b40 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hed034d7671a9e6d1E>
  212df2:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212df7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212dfc:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  212e01:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  212e05:	48 83 c7 04          	add    $0x4,%rdi
  212e09:	be 0f 00 00 00       	mov    $0xf,%esi
  212e0e:	ba 01 00 00 00       	mov    $0x1,%edx
  212e13:	e8 98 e2 00 00       	callq  2210b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  212e18:	48 83 c4 28          	add    $0x28,%rsp
  212e1c:	c3                   	retq   
  212e1d:	cc                   	int3   
  212e1e:	cc                   	int3   
  212e1f:	cc                   	int3   

0000000000212e20 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf6fc0362a19ebe78E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  212e20:	48 83 ec 28          	sub    $0x28,%rsp
  212e24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212e29:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212e2e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  212e33:	e8 88 fe ff ff       	callq  212cc0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h9080365b9cc36586E>
  212e38:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  212e3d:	e8 9e fc ff ff       	callq  212ae0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hcc15ebcda2d58b3aE>
  212e42:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  212e47:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212e4c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  212e51:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  212e55:	48 83 c7 04          	add    $0x4,%rdi
  212e59:	be 0f 00 00 00       	mov    $0xf,%esi
  212e5e:	ba 01 00 00 00       	mov    $0x1,%edx
  212e63:	e8 48 e2 00 00       	callq  2210b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  212e68:	48 83 c4 28          	add    $0x28,%rsp
  212e6c:	c3                   	retq   
  212e6d:	cc                   	int3   
  212e6e:	cc                   	int3   
  212e6f:	cc                   	int3   

0000000000212e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E>:

    #[inline]
    pub fn set_stack_index(&mut self, stack_index: u16) {
  212e70:	48 83 ec 38          	sub    $0x38,%rsp
  212e74:	66 89 f0             	mov    %si,%ax
  212e77:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  212e7c:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
        self.options.set_bits(0..3, stack_index + 1);
  212e81:	48 83 c7 04          	add    $0x4,%rdi
  212e85:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212e8a:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  212e91:	00 00 
  212e93:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  212e9a:	00 00 
  212e9c:	66 83 c0 01          	add    $0x1,%ax
  212ea0:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  212ea5:	0f 92 c0             	setb   %al
  212ea8:	a8 01                	test   $0x1,%al
  212eaa:	75 1e                	jne    212eca <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E+0x5a>
  212eac:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
  212eb1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  212eb6:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  212ebb:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  212ec0:	0f b7 c8             	movzwl %ax,%ecx
  212ec3:	e8 d8 c8 00 00       	callq  21f7a0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E>
  212ec8:	eb 1a                	jmp    212ee4 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E+0x74>
  212eca:	48 8d 3d 2f dc fe ff 	lea    -0x123d1(%rip),%rdi        # 200b00 <str.0>
  212ed1:	48 8d 15 d8 75 02 00 	lea    0x275d8(%rip),%rdx        # 23a4b0 <memcmp+0x1770>
  212ed8:	be 1c 00 00 00       	mov    $0x1c,%esi
  212edd:	e8 0e 2d 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  212ee2:	0f 0b                	ud2    
    }
  212ee4:	48 83 c4 38          	add    $0x38,%rsp
  212ee8:	c3                   	retq   
  212ee9:	cc                   	int3   
  212eea:	cc                   	int3   
  212eeb:	cc                   	int3   
  212eec:	cc                   	int3   
  212eed:	cc                   	int3   
  212eee:	cc                   	int3   
  212eef:	cc                   	int3   

0000000000212ef0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>:
    pub const fn is_null(self) -> bool {
  212ef0:	48 83 ec 18          	sub    $0x18,%rsp
  212ef4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212ef9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212efe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  212f03:	31 c0                	xor    %eax,%eax
  212f05:	89 c6                	mov    %eax,%esi
  212f07:	e8 14 10 02 00       	callq  233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  212f0c:	88 44 24 07          	mov    %al,0x7(%rsp)
  212f10:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  212f14:	24 01                	and    $0x1,%al
  212f16:	0f b6 c0             	movzbl %al,%eax
  212f19:	48 83 c4 18          	add    $0x18,%rsp
  212f1d:	c3                   	retq   
  212f1e:	cc                   	int3   
  212f1f:	cc                   	int3   

0000000000212f20 <_ZN3log13set_max_level17ha683ad6dd9a2a3f2E>:
pub fn set_max_level(level: LevelFilter) {
  212f20:	48 83 ec 18          	sub    $0x18,%rsp
  212f24:	48 89 fe             	mov    %rdi,%rsi
  212f27:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    MAX_LOG_LEVEL_FILTER.store(level as usize, Ordering::SeqCst)
  212f2c:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  212f31:	48 8b 3d 10 ac 02 00 	mov    0x2ac10(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  212f38:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  212f3d:	e8 ee 82 01 00       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
}
  212f42:	48 83 c4 18          	add    $0x18,%rsp
  212f46:	c3                   	retq   
  212f47:	cc                   	int3   
  212f48:	cc                   	int3   
  212f49:	cc                   	int3   
  212f4a:	cc                   	int3   
  212f4b:	cc                   	int3   
  212f4c:	cc                   	int3   
  212f4d:	cc                   	int3   
  212f4e:	cc                   	int3   
  212f4f:	cc                   	int3   

0000000000212f50 <_ZN3log6Record4args17h9dae30359519c3ecE>:
    pub fn args(&self) -> &fmt::Arguments<'a> {
  212f50:	50                   	push   %rax
  212f51:	48 89 f8             	mov    %rdi,%rax
  212f54:	48 89 04 24          	mov    %rax,(%rsp)
        &self.args
  212f58:	48 83 c0 18          	add    $0x18,%rax
    }
  212f5c:	59                   	pop    %rcx
  212f5d:	c3                   	retq   
  212f5e:	cc                   	int3   
  212f5f:	cc                   	int3   

0000000000212f60 <_ZN3log6Record5level17h1be5adb9d5eedc77E>:
    pub fn level(&self) -> Level {
  212f60:	48 83 ec 18          	sub    $0x18,%rsp
  212f64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.level()
  212f69:	e8 42 00 00 00       	callq  212fb0 <_ZN3log8Metadata5level17h2d915eac1d5db22aE>
  212f6e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212f73:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  212f78:	48 83 c4 18          	add    $0x18,%rsp
  212f7c:	c3                   	retq   
  212f7d:	cc                   	int3   
  212f7e:	cc                   	int3   
  212f7f:	cc                   	int3   

0000000000212f80 <_ZN3log6Record6target17h757367dd169b837eE>:
    pub fn target(&self) -> &'a str {
  212f80:	48 83 ec 18          	sub    $0x18,%rsp
  212f84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.target()
  212f89:	e8 32 00 00 00       	callq  212fc0 <_ZN3log8Metadata6target17hbe8e82ffab88ce5dE>
  212f8e:	48 89 04 24          	mov    %rax,(%rsp)
  212f92:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212f97:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212f9c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212fa0:	48 83 c4 18          	add    $0x18,%rsp
  212fa4:	c3                   	retq   
  212fa5:	cc                   	int3   
  212fa6:	cc                   	int3   
  212fa7:	cc                   	int3   
  212fa8:	cc                   	int3   
  212fa9:	cc                   	int3   
  212faa:	cc                   	int3   
  212fab:	cc                   	int3   
  212fac:	cc                   	int3   
  212fad:	cc                   	int3   
  212fae:	cc                   	int3   
  212faf:	cc                   	int3   

0000000000212fb0 <_ZN3log8Metadata5level17h2d915eac1d5db22aE>:
    pub fn level(&self) -> Level {
  212fb0:	50                   	push   %rax
  212fb1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.level
  212fb5:	48 8b 07             	mov    (%rdi),%rax
    }
  212fb8:	59                   	pop    %rcx
  212fb9:	c3                   	retq   
  212fba:	cc                   	int3   
  212fbb:	cc                   	int3   
  212fbc:	cc                   	int3   
  212fbd:	cc                   	int3   
  212fbe:	cc                   	int3   
  212fbf:	cc                   	int3   

0000000000212fc0 <_ZN3log8Metadata6target17hbe8e82ffab88ce5dE>:
    pub fn target(&self) -> &'a str {
  212fc0:	50                   	push   %rax
  212fc1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.target
  212fc5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  212fc9:	48 8b 57 10          	mov    0x10(%rdi),%rdx
    }
  212fcd:	59                   	pop    %rcx
  212fce:	c3                   	retq   
  212fcf:	cc                   	int3   

0000000000212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>:
    fn le(&self, other: &LevelFilter) -> bool {
  212fd0:	48 83 ec 10          	sub    $0x10,%rsp
  212fd4:	48 89 3c 24          	mov    %rdi,(%rsp)
  212fd8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        *self as usize <= *other as usize
  212fdd:	48 8b 07             	mov    (%rdi),%rax
  212fe0:	48 8b 0e             	mov    (%rsi),%rcx
  212fe3:	48 39 c8             	cmp    %rcx,%rax
  212fe6:	0f 96 c0             	setbe  %al
    }
  212fe9:	24 01                	and    $0x1,%al
  212feb:	0f b6 c0             	movzbl %al,%eax
  212fee:	48 83 c4 10          	add    $0x10,%rsp
  212ff2:	c3                   	retq   
  212ff3:	cc                   	int3   
  212ff4:	cc                   	int3   
  212ff5:	cc                   	int3   
  212ff6:	cc                   	int3   
  212ff7:	cc                   	int3   
  212ff8:	cc                   	int3   
  212ff9:	cc                   	int3   
  212ffa:	cc                   	int3   
  212ffb:	cc                   	int3   
  212ffc:	cc                   	int3   
  212ffd:	cc                   	int3   
  212ffe:	cc                   	int3   
  212fff:	cc                   	int3   

0000000000213000 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9893b0f9eccf63e0E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
  213000:	48 83 ec 18          	sub    $0x18,%rsp
  213004:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.it.next().copied()
  213009:	e8 b2 80 00 00       	callq  21b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  21300e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213013:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  213018:	e8 53 ed ff ff       	callq  211d70 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE>
  21301d:	88 44 24 06          	mov    %al,0x6(%rsp)
  213021:	88 54 24 07          	mov    %dl,0x7(%rsp)
  213025:	8a 54 24 07          	mov    0x7(%rsp),%dl
  213029:	8a 44 24 06          	mov    0x6(%rsp),%al
    }
  21302d:	24 01                	and    $0x1,%al
  21302f:	48 83 c4 18          	add    $0x18,%rsp
  213033:	c3                   	retq   
  213034:	cc                   	int3   
  213035:	cc                   	int3   
  213036:	cc                   	int3   
  213037:	cc                   	int3   
  213038:	cc                   	int3   
  213039:	cc                   	int3   
  21303a:	cc                   	int3   
  21303b:	cc                   	int3   
  21303c:	cc                   	int3   
  21303d:	cc                   	int3   
  21303e:	cc                   	int3   
  21303f:	cc                   	int3   

0000000000213040 <_ZN9r3_kernel4acpi4rsdt16is_extended_rsdp17h6343edd57b7b4b03E>:
pub fn is_extended_rsdp(rsdp: &RSDPDescriptor) -> bool {
  213040:	50                   	push   %rax
  213041:	48 89 3c 24          	mov    %rdi,(%rsp)
    rsdp.revision == 2
  213045:	80 7f 0f 02          	cmpb   $0x2,0xf(%rdi)
  213049:	0f 94 c0             	sete   %al
}
  21304c:	24 01                	and    $0x1,%al
  21304e:	0f b6 c0             	movzbl %al,%eax
  213051:	59                   	pop    %rcx
  213052:	c3                   	retq   
  213053:	cc                   	int3   
  213054:	cc                   	int3   
  213055:	cc                   	int3   
  213056:	cc                   	int3   
  213057:	cc                   	int3   
  213058:	cc                   	int3   
  213059:	cc                   	int3   
  21305a:	cc                   	int3   
  21305b:	cc                   	int3   
  21305c:	cc                   	int3   
  21305d:	cc                   	int3   
  21305e:	cc                   	int3   
  21305f:	cc                   	int3   

0000000000213060 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E>:
    pub fn parse_from_bootinfo() -> Result<AcpiRootTableKind, AcpiRootTableError> {
  213060:	48 81 ec b8 02 00 00 	sub    $0x2b8,%rsp
  213067:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  21306e:	00 
  21306f:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  213076:	00 
        let boot_info = BootProtocol::get_boot_proto();
  213077:	e8 a4 68 00 00       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  21307c:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  213083:	00 
  213084:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  21308b:	00 
  21308c:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  213093:	00 
        let rsdp_opt = boot_info.unwrap().rsdp_addr;
  213094:	48 8d 35 2d 74 02 00 	lea    0x2742d(%rip),%rsi        # 23a4c8 <memcmp+0x1788>
  21309b:	e8 f0 e5 ff ff       	callq  211690 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E>
  2130a0:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2130a7:	00 
  2130a8:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  2130af:	00 
  2130b0:	8b 78 78             	mov    0x78(%rax),%edi
  2130b3:	89 bc 24 d4 00 00 00 	mov    %edi,0xd4(%rsp)
  2130ba:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
  2130c1:	48 89 b4 24 d8 00 00 	mov    %rsi,0xd8(%rsp)
  2130c8:	00 
  2130c9:	89 bc 24 40 02 00 00 	mov    %edi,0x240(%rsp)
  2130d0:	48 89 b4 24 48 02 00 	mov    %rsi,0x248(%rsp)
  2130d7:	00 
        if rsdp_opt.into_option().is_none() {
  2130d8:	e8 e3 82 00 00       	callq  21b3c0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  2130dd:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  2130e4:	00 
  2130e5:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  2130ec:	00 
  2130ed:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2130f4:	00 
  2130f5:	e8 e6 e7 ff ff       	callq  2118e0 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  2130fa:	88 84 24 d3 00 00 00 	mov    %al,0xd3(%rsp)
  213101:	8a 84 24 d3 00 00 00 	mov    0xd3(%rsp),%al
  213108:	a8 01                	test   $0x1,%al
  21310a:	75 28                	jne    213134 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xd4>
  21310c:	eb 00                	jmp    21310e <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xae>
  21310e:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  213115:	00 
  213116:	8b bc 24 d4 00 00 00 	mov    0xd4(%rsp),%edi
        let rsdp_addr = p_to_v(PhysicalAddress::from_u64(rsdp_opt.into_option().unwrap()));
  21311d:	e8 9e 82 00 00       	callq  21b3c0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  213122:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  213129:	00 
  21312a:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  213131:	00 
  213132:	eb 1f                	jmp    213153 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xf3>
  213134:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  21313b:	00 
            return Err(AcpiRootTableError::NotFound);
  21313c:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  213140:	c6 00 01             	movb   $0x1,(%rax)
  213143:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  21314a:	00 
    }
  21314b:	48 81 c4 b8 02 00 00 	add    $0x2b8,%rsp
  213152:	c3                   	retq   
  213153:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  21315a:	00 
  21315b:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  213162:	00 
        let rsdp_addr = p_to_v(PhysicalAddress::from_u64(rsdp_opt.into_option().unwrap()));
  213163:	48 8d 15 76 73 02 00 	lea    0x27376(%rip),%rdx        # 23a4e0 <memcmp+0x17a0>
  21316a:	e8 61 e2 ff ff       	callq  2113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  21316f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  213176:	00 
  213177:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21317e:	00 
  21317f:	e8 0c 53 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  213184:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21318b:	00 
  21318c:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  213193:	00 
  213194:	e8 97 53 01 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  213199:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2131a0:	00 
  2131a1:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2131a8:	00 
  2131a9:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  2131b0:	00 
        let bytes_slice: &[u8; 20] = unsafe { &*rsdp_addr.get_ptr() };
  2131b1:	e8 8a 65 00 00       	callq  219740 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17he019b606acc39f32E>
  2131b6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2131bd:	00 
  2131be:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  2131c5:	00 
  2131c6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2131cd:	00 
  2131ce:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  2131d5:	00 
        let rsdp_struct: &RSDPDescriptor = unsafe { &*rsdp_addr.get_ptr() };
  2131d6:	e8 45 64 00 00       	callq  219620 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h495d47d78e1748e7E>
  2131db:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2131e2:	00 
  2131e3:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2131ea:	00 
  2131eb:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  2131f2:	00 
            if str::from_utf8_unchecked(&rsdp_struct.signature) != RSDT_SIG {
  2131f3:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  2131fa:	00 
  2131fb:	be 08 00 00 00       	mov    $0x8,%esi
  213200:	e8 db 75 01 00       	callq  22a7e0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  213205:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  21320c:	00 
  21320d:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  213214:	00 
  213215:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  21321c:	00 
  21321d:	48 8d 35 d4 72 02 00 	lea    0x272d4(%rip),%rsi        # 23a4f8 <memcmp+0x17b8>
  213224:	e8 07 82 01 00       	callq  22b430 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>
  213229:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  213230:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  213237:	a8 01                	test   $0x1,%al
  213239:	75 29                	jne    213264 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x204>
  21323b:	eb 00                	jmp    21323d <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x1dd>
  21323d:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  213244:	00 
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  213245:	be 14 00 00 00       	mov    $0x14,%esi
  21324a:	e8 91 01 02 00       	callq  2333e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  21324f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  213256:	00 
  213257:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21325e:	00 
  21325f:	e9 45 01 00 00       	jmpq   2133a9 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x349>
                log::error!("Invalid rsdp signature, expected={}", RSDT_SIG);
  213264:	48 c7 84 24 28 01 00 	movq   $0x1,0x128(%rsp)
  21326b:	00 01 00 00 00 
  213270:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  213277:	00 
  213278:	48 8d 35 79 d0 fe ff 	lea    -0x12f87(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21327f:	e8 4c fd ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213284:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  213288:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  21328c:	a8 01                	test   $0x1,%al
  21328e:	75 0c                	jne    21329c <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x23c>
  213290:	eb 00                	jmp    213292 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x232>
  213292:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  213299:	00 
  21329a:	eb 5a                	jmp    2132f6 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x296>
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  21329c:	c6 84 24 af 02 00 00 	movb   $0x0,0x2af(%rsp)
  2132a3:	00 
  2132a4:	48 8b 3d 9d a8 02 00 	mov    0x2a89d(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2132ab:	0f b6 b4 24 af 02 00 	movzbl 0x2af(%rsp),%esi
  2132b2:	00 
  2132b3:	e8 38 7f 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2132b8:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  2132bf:	00 
  2132c0:	48 8b 84 24 b0 02 00 	mov    0x2b0(%rsp),%rax
  2132c7:	00 
  2132c8:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2132cf:	00 
  2132d0:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  2132d7:	00 
  2132d8:	48 8d b4 24 38 01 00 	lea    0x138(%rsp),%rsi
  2132df:	00 
  2132e0:	e8 eb fc ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2132e5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2132e9:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  2132ed:	24 01                	and    $0x1,%al
  2132ef:	88 84 24 37 01 00 00 	mov    %al,0x137(%rsp)
  2132f6:	f6 84 24 37 01 00 00 	testb  $0x1,0x137(%rsp)
  2132fd:	01 
  2132fe:	75 14                	jne    213314 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x2b4>
  213300:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  213307:	00 
                return Err(AcpiRootTableError::InvalidSignature);
  213308:	c6 40 01 01          	movb   $0x1,0x1(%rax)
  21330c:	c6 00 01             	movb   $0x1,(%rax)
  21330f:	e9 2f fe ff ff       	jmpq   213143 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid rsdp signature, expected={}", RSDT_SIG);
  213314:	48 8d 05 dd 71 02 00 	lea    0x271dd(%rip),%rax        # 23a4f8 <memcmp+0x17b8>
  21331b:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  213322:	00 
  213323:	48 8b bc 24 80 01 00 	mov    0x180(%rsp),%rdi
  21332a:	00 
  21332b:	48 89 bc 24 60 02 00 	mov    %rdi,0x260(%rsp)
  213332:	00 
  213333:	48 8b 35 1e a8 02 00 	mov    0x2a81e(%rip),%rsi        # 23db58 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  21333a:	e8 61 09 02 00       	callq  233ca0 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  21333f:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  213344:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  213349:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21334e:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  213353:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  21335a:	00 
  21335b:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  213362:	00 
  213363:	48 8d 8c 24 70 01 00 	lea    0x170(%rsp),%rcx
  21336a:	00 
  21336b:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  213372:	00 
  213373:	48 8d 35 8e 71 02 00 	lea    0x2718e(%rip),%rsi        # 23a508 <memcmp+0x17c8>
  21337a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  213380:	4c 89 c2             	mov    %r8,%rdx
  213383:	e8 a8 31 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213388:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  21338f:	00 
  213390:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  213397:	00 
  213398:	48 8d 15 79 71 02 00 	lea    0x27179(%rip),%rdx        # 23a518 <memcmp+0x17d8>
  21339f:	e8 dc f9 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2133a4:	e9 57 ff ff ff       	jmpq   213300 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x2a0>
  2133a9:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  2133b0:	00 
  2133b1:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2133b8:	00 
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  2133b9:	e8 f2 76 00 00       	callq  21aab0 <_ZN4core4iter6traits8iterator8Iterator3map17h249dee666523cc13E>
  2133be:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2133c3:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  2133c8:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  2133cd:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  2133d2:	e8 39 ec ff ff       	callq  212010 <_ZN4core4iter6traits8iterator8Iterator3sum17hfd8a934b45b619cfE>
  2133d7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2133dc:	48 89 84 24 68 02 00 	mov    %rax,0x268(%rsp)
  2133e3:	00 
  2133e4:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        if legacy_checksum & 0xff != 0 {
  2133e9:	48 25 ff 00 00 00    	and    $0xff,%rax
  2133ef:	48 83 f8 00          	cmp    $0x0,%rax
  2133f3:	75 16                	jne    21340b <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3ab>
        if is_extended_rsdp(&rsdp_struct) {
  2133f5:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  2133fc:	00 
  2133fd:	e8 3e fc ff ff       	callq  213040 <_ZN9r3_kernel4acpi4rsdt16is_extended_rsdp17h6343edd57b7b4b03E>
  213402:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  213406:	e9 f3 00 00 00       	jmpq   2134fe <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x49e>
            log::error!("Invalid legacy rsdt checksum");
  21340b:	48 c7 84 24 88 01 00 	movq   $0x1,0x188(%rsp)
  213412:	00 01 00 00 00 
  213417:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  21341e:	00 
  21341f:	48 8d 35 d2 ce fe ff 	lea    -0x1312e(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  213426:	e8 a5 fb ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21342b:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  21342f:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  213433:	a8 01                	test   $0x1,%al
  213435:	75 0c                	jne    213443 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3e3>
  213437:	eb 00                	jmp    213439 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3d9>
  213439:	c6 84 24 97 01 00 00 	movb   $0x0,0x197(%rsp)
  213440:	00 
  213441:	eb 5a                	jmp    21349d <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x43d>
  213443:	c6 84 24 9f 02 00 00 	movb   $0x0,0x29f(%rsp)
  21344a:	00 
  21344b:	48 8b 3d f6 a6 02 00 	mov    0x2a6f6(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213452:	0f b6 b4 24 9f 02 00 	movzbl 0x29f(%rsp),%esi
  213459:	00 
  21345a:	e8 91 7d 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21345f:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  213466:	00 
  213467:	48 8b 84 24 a0 02 00 	mov    0x2a0(%rsp),%rax
  21346e:	00 
  21346f:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  213476:	00 
  213477:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  21347e:	00 
  21347f:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  213486:	00 
  213487:	e8 44 fb ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21348c:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  213490:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  213494:	24 01                	and    $0x1,%al
  213496:	88 84 24 97 01 00 00 	mov    %al,0x197(%rsp)
  21349d:	f6 84 24 97 01 00 00 	testb  $0x1,0x197(%rsp)
  2134a4:	01 
  2134a5:	75 14                	jne    2134bb <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x45b>
  2134a7:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  2134ae:	00 
            return Err(AcpiRootTableError::InvalidChecksum);
  2134af:	c6 40 01 02          	movb   $0x2,0x1(%rax)
  2134b3:	c6 00 01             	movb   $0x1,(%rax)
  2134b6:	e9 88 fc ff ff       	jmpq   213143 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
            log::error!("Invalid legacy rsdt checksum");
  2134bb:	48 8d bc 24 a0 01 00 	lea    0x1a0(%rsp),%rdi
  2134c2:	00 
  2134c3:	48 8d 35 86 70 02 00 	lea    0x27086(%rip),%rsi        # 23a550 <memcmp+0x1810>
  2134ca:	ba 01 00 00 00       	mov    $0x1,%edx
  2134cf:	48 8d 0d aa d6 fe ff 	lea    -0x12956(%rip),%rcx        # 200b80 <str.0+0x80>
  2134d6:	31 c0                	xor    %eax,%eax
  2134d8:	41 89 c0             	mov    %eax,%r8d
  2134db:	e8 50 30 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2134e0:	48 8b b4 24 88 01 00 	mov    0x188(%rsp),%rsi
  2134e7:	00 
  2134e8:	48 8d bc 24 a0 01 00 	lea    0x1a0(%rsp),%rdi
  2134ef:	00 
  2134f0:	48 8d 15 69 70 02 00 	lea    0x27069(%rip),%rdx        # 23a560 <memcmp+0x1820>
  2134f7:	e8 84 f8 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2134fc:	eb a9                	jmp    2134a7 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x447>
  2134fe:	8a 44 24 4f          	mov    0x4f(%rsp),%al
        if is_extended_rsdp(&rsdp_struct) {
  213502:	a8 01                	test   $0x1,%al
  213504:	75 47                	jne    21354d <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x4ed>
  213506:	eb 00                	jmp    213508 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x4a8>
  213508:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  21350f:	00 
        return Ok(AcpiRootTableKind::RSDT(rsdp_struct.rsdt_address));
  213510:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  213517:	00 
  213518:	8b 49 10             	mov    0x10(%rcx),%ecx
  21351b:	89 8c 24 2c 02 00 00 	mov    %ecx,0x22c(%rsp)
  213522:	c7 84 24 28 02 00 00 	movl   $0x0,0x228(%rsp)
  213529:	00 00 00 00 
  21352d:	48 8b 8c 24 28 02 00 	mov    0x228(%rsp),%rcx
  213534:	00 
  213535:	48 89 48 08          	mov    %rcx,0x8(%rax)
  213539:	48 8b 8c 24 30 02 00 	mov    0x230(%rsp),%rcx
  213540:	00 
  213541:	48 89 48 10          	mov    %rcx,0x10(%rax)
  213545:	c6 00 00             	movb   $0x0,(%rax)
  213548:	e9 f6 fb ff ff       	jmpq   213143 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
  21354d:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  213554:	00 
            let ext_bytes_slice: &[u8; 64] = unsafe { &*rsdp_addr.get_ptr() };
  213555:	e8 96 60 00 00       	callq  2195f0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h1701dfd31619c5daE>
  21355a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21355f:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  213566:	00 
  213567:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21356c:	48 89 84 24 70 02 00 	mov    %rax,0x270(%rsp)
  213573:	00 
            let ext_rsdp_struct: &RSDPDescriptor2x = unsafe { &*rsdp_addr.get_ptr() };
  213574:	e8 47 60 00 00       	callq  2195c0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h02d01444721cb389E>
  213579:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21357e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213583:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  213588:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  21358f:	00 
            let ext_checksum: usize = ext_bytes_slice.iter().map(|val| *val as usize).sum();
  213590:	be 40 00 00 00       	mov    $0x40,%esi
  213595:	e8 46 fe 01 00       	callq  2333e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  21359a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21359f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2135a4:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  2135a9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2135ae:	e8 2d 75 00 00       	callq  21aae0 <_ZN4core4iter6traits8iterator8Iterator3map17hbd9539eb03a80085E>
  2135b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2135b8:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2135bd:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2135c2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2135c7:	e8 24 ea ff ff       	callq  211ff0 <_ZN4core4iter6traits8iterator8Iterator3sum17h000ba1b36b9ccc77E>
  2135cc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2135d1:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  2135d8:	00 
  2135d9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            if ext_checksum & 0xff != 0 {
  2135de:	48 25 ff 00 00 00    	and    $0xff,%rax
  2135e4:	48 83 f8 00          	cmp    $0x0,%rax
  2135e8:	75 44                	jne    21362e <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x5ce>
  2135ea:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  2135f1:	00 
  2135f2:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
            return Ok(AcpiRootTableKind::XSDT(ext_rsdp_struct.xsdt_address));
  2135f7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  2135fb:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  213602:	00 
  213603:	c7 84 24 18 02 00 00 	movl   $0x1,0x218(%rsp)
  21360a:	01 00 00 00 
  21360e:	48 8b 8c 24 18 02 00 	mov    0x218(%rsp),%rcx
  213615:	00 
  213616:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21361a:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  213621:	00 
  213622:	48 89 48 10          	mov    %rcx,0x10(%rax)
  213626:	c6 00 00             	movb   $0x0,(%rax)
  213629:	e9 15 fb ff ff       	jmpq   213143 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid ACPI 2.0 checksum.");
  21362e:	48 c7 84 24 d0 01 00 	movq   $0x1,0x1d0(%rsp)
  213635:	00 01 00 00 00 
  21363a:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  213641:	00 
  213642:	48 8d 35 af cc fe ff 	lea    -0x13351(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  213649:	e8 82 f9 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21364e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213652:	8a 44 24 0f          	mov    0xf(%rsp),%al
  213656:	a8 01                	test   $0x1,%al
  213658:	75 0c                	jne    213666 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x606>
  21365a:	eb 00                	jmp    21365c <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x5fc>
  21365c:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  213663:	00 
  213664:	eb 5a                	jmp    2136c0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x660>
  213666:	c6 84 24 8f 02 00 00 	movb   $0x0,0x28f(%rsp)
  21366d:	00 
  21366e:	48 8b 3d d3 a4 02 00 	mov    0x2a4d3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213675:	0f b6 b4 24 8f 02 00 	movzbl 0x28f(%rsp),%esi
  21367c:	00 
  21367d:	e8 6e 7b 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  213682:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
  213689:	00 
  21368a:	48 8b 84 24 90 02 00 	mov    0x290(%rsp),%rax
  213691:	00 
  213692:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  213699:	00 
  21369a:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  2136a1:	00 
  2136a2:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
  2136a9:	00 
  2136aa:	e8 21 f9 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2136af:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2136b3:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2136b7:	24 01                	and    $0x1,%al
  2136b9:	88 84 24 df 01 00 00 	mov    %al,0x1df(%rsp)
  2136c0:	f6 84 24 df 01 00 00 	testb  $0x1,0x1df(%rsp)
  2136c7:	01 
  2136c8:	75 14                	jne    2136de <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x67e>
  2136ca:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  2136d1:	00 
                return Err(AcpiRootTableError::InvalidChecksum2x);
  2136d2:	c6 40 01 03          	movb   $0x3,0x1(%rax)
  2136d6:	c6 00 01             	movb   $0x1,(%rax)
  2136d9:	e9 65 fa ff ff       	jmpq   213143 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid ACPI 2.0 checksum.");
  2136de:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  2136e5:	00 
  2136e6:	48 8d 35 ab 6e 02 00 	lea    0x26eab(%rip),%rsi        # 23a598 <memcmp+0x1858>
  2136ed:	ba 01 00 00 00       	mov    $0x1,%edx
  2136f2:	48 8d 0d 87 d4 fe ff 	lea    -0x12b79(%rip),%rcx        # 200b80 <str.0+0x80>
  2136f9:	31 c0                	xor    %eax,%eax
  2136fb:	41 89 c0             	mov    %eax,%r8d
  2136fe:	e8 2d 2e ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213703:	48 8b b4 24 d0 01 00 	mov    0x1d0(%rsp),%rsi
  21370a:	00 
  21370b:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  213712:	00 
  213713:	48 8d 15 8e 6e 02 00 	lea    0x26e8e(%rip),%rdx        # 23a5a8 <memcmp+0x1868>
  21371a:	e8 61 f6 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21371f:	eb a9                	jmp    2136ca <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x66a>
  213721:	cc                   	int3   
  213722:	cc                   	int3   
  213723:	cc                   	int3   
  213724:	cc                   	int3   
  213725:	cc                   	int3   
  213726:	cc                   	int3   
  213727:	cc                   	int3   
  213728:	cc                   	int3   
  213729:	cc                   	int3   
  21372a:	cc                   	int3   
  21372b:	cc                   	int3   
  21372c:	cc                   	int3   
  21372d:	cc                   	int3   
  21372e:	cc                   	int3   
  21372f:	cc                   	int3   

0000000000213730 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E>:
pub fn init_acpi() -> Option<Acpi> {
  213730:	48 81 ec d8 08 00 00 	sub    $0x8d8,%rsp
  213737:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  21373e:	00 
  21373f:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  213746:	00 
    let root_table_result = AcpiRootTableKind::parse_from_bootinfo();
  213747:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21374e:	00 
  21374f:	e8 0c f9 ff ff       	callq  213060 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E>
    if root_table_result.is_err() {
  213754:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21375b:	00 
  21375c:	e8 0f 7c ff ff       	callq  20b370 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17haa604f8299c01af4E>
  213761:	88 84 24 3f 01 00 00 	mov    %al,0x13f(%rsp)
  213768:	8a 84 24 3f 01 00 00 	mov    0x13f(%rsp),%al
  21376f:	a8 01                	test   $0x1,%al
  213771:	75 2e                	jne    2137a1 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x71>
  213773:	eb 00                	jmp    213775 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x45>
    log::info!("Initializing ACPI tables.");
  213775:	48 c7 84 24 e8 01 00 	movq   $0x3,0x1e8(%rsp)
  21377c:	00 03 00 00 00 
  213781:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  213788:	00 
  213789:	48 8d 35 68 cb fe ff 	lea    -0x13498(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  213790:	e8 3b f8 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213795:	88 84 24 3e 01 00 00 	mov    %al,0x13e(%rsp)
  21379c:	e9 b9 01 00 00       	jmpq   21395a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x22a>
        log::error!("ACPI Init Error: {:?}", root_table_result.unwrap_err());
  2137a1:	48 c7 84 24 68 01 00 	movq   $0x1,0x168(%rsp)
  2137a8:	00 01 00 00 00 
  2137ad:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  2137b4:	00 
  2137b5:	48 8d 35 3c cb fe ff 	lea    -0x134c4(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2137bc:	e8 0f f8 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2137c1:	88 84 24 3d 01 00 00 	mov    %al,0x13d(%rsp)
  2137c8:	8a 84 24 3d 01 00 00 	mov    0x13d(%rsp),%al
  2137cf:	a8 01                	test   $0x1,%al
  2137d1:	75 0c                	jne    2137df <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xaf>
  2137d3:	eb 00                	jmp    2137d5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa5>
  2137d5:	c6 84 24 77 01 00 00 	movb   $0x0,0x177(%rsp)
  2137dc:	00 
  2137dd:	eb 60                	jmp    21383f <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x10f>
  2137df:	c6 84 24 cf 08 00 00 	movb   $0x0,0x8cf(%rsp)
  2137e6:	00 
  2137e7:	48 8b 3d 5a a3 02 00 	mov    0x2a35a(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2137ee:	0f b6 b4 24 cf 08 00 	movzbl 0x8cf(%rsp),%esi
  2137f5:	00 
  2137f6:	e8 f5 79 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2137fb:	48 89 84 24 d0 08 00 	mov    %rax,0x8d0(%rsp)
  213802:	00 
  213803:	48 8b 84 24 d0 08 00 	mov    0x8d0(%rsp),%rax
  21380a:	00 
  21380b:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  213812:	00 
  213813:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  21381a:	00 
  21381b:	48 8d b4 24 78 01 00 	lea    0x178(%rsp),%rsi
  213822:	00 
  213823:	e8 a8 f7 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213828:	88 84 24 3c 01 00 00 	mov    %al,0x13c(%rsp)
  21382f:	8a 84 24 3c 01 00 00 	mov    0x13c(%rsp),%al
  213836:	24 01                	and    $0x1,%al
  213838:	88 84 24 77 01 00 00 	mov    %al,0x177(%rsp)
  21383f:	f6 84 24 77 01 00 00 	testb  $0x1,0x177(%rsp)
  213846:	01 
  213847:	75 14                	jne    21385d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x12d>
  213849:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  213850:	00 
        return None;
  213851:	c6 80 88 01 00 00 02 	movb   $0x2,0x188(%rax)
  213858:	e9 ed 00 00 00       	jmpq   21394a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
        log::error!("ACPI Init Error: {:?}", root_table_result.unwrap_err());
  21385d:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  213864:	00 
  213865:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  21386c:	00 
  21386d:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  213874:	00 
  213875:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  21387c:	00 
  21387d:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  213884:	00 
  213885:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  21388c:	00 
  21388d:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  213894:	00 
  213895:	48 8d 35 54 6d 02 00 	lea    0x26d54(%rip),%rsi        # 23a5f0 <memcmp+0x18b0>
  21389c:	e8 3f 77 ff ff       	callq  20afe0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E>
  2138a1:	88 84 24 cf 01 00 00 	mov    %al,0x1cf(%rsp)
  2138a8:	48 8d 84 24 cf 01 00 	lea    0x1cf(%rsp),%rax
  2138af:	00 
  2138b0:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  2138b7:	00 
  2138b8:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
  2138bf:	00 
  2138c0:	48 89 bc 24 18 08 00 	mov    %rdi,0x818(%rsp)
  2138c7:	00 
  2138c8:	48 8d 35 31 0f 00 00 	lea    0xf31(%rip),%rsi        # 214800 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E>
  2138cf:	e8 6c b7 ff ff       	callq  20f040 <_ZN4core3fmt10ArgumentV13new17h40a1deb68c3db053E>
  2138d4:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2138db:	00 
  2138dc:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  2138e3:	00 
  2138e4:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  2138eb:	00 
  2138ec:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  2138f3:	00 
  2138f4:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  2138fb:	00 
  2138fc:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  213903:	00 
  213904:	48 8d 8c 24 b0 01 00 	lea    0x1b0(%rsp),%rcx
  21390b:	00 
  21390c:	48 8d bc 24 80 01 00 	lea    0x180(%rsp),%rdi
  213913:	00 
  213914:	48 8d 35 c5 6c 02 00 	lea    0x26cc5(%rip),%rsi        # 23a5e0 <memcmp+0x18a0>
  21391b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  213921:	4c 89 c2             	mov    %r8,%rdx
  213924:	e8 07 2c ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213929:	48 8b b4 24 68 01 00 	mov    0x168(%rsp),%rsi
  213930:	00 
  213931:	48 8d bc 24 80 01 00 	lea    0x180(%rsp),%rdi
  213938:	00 
  213939:	48 8d 15 c8 6c 02 00 	lea    0x26cc8(%rip),%rdx        # 23a608 <memcmp+0x18c8>
  213940:	e8 3b f4 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  213945:	e9 ff fe ff ff       	jmpq   213849 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x119>
  21394a:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  213951:	00 
}
  213952:	48 81 c4 d8 08 00 00 	add    $0x8d8,%rsp
  213959:	c3                   	retq   
  21395a:	8a 84 24 3e 01 00 00 	mov    0x13e(%rsp),%al
    log::info!("Initializing ACPI tables.");
  213961:	a8 01                	test   $0x1,%al
  213963:	75 0c                	jne    213971 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x241>
  213965:	eb 00                	jmp    213967 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x237>
  213967:	c6 84 24 f7 01 00 00 	movb   $0x0,0x1f7(%rsp)
  21396e:	00 
  21396f:	eb 60                	jmp    2139d1 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x2a1>
  213971:	c6 84 24 bf 08 00 00 	movb   $0x0,0x8bf(%rsp)
  213978:	00 
  213979:	48 8b 3d c8 a1 02 00 	mov    0x2a1c8(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213980:	0f b6 b4 24 bf 08 00 	movzbl 0x8bf(%rsp),%esi
  213987:	00 
  213988:	e8 63 78 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21398d:	48 89 84 24 c0 08 00 	mov    %rax,0x8c0(%rsp)
  213994:	00 
  213995:	48 8b 84 24 c0 08 00 	mov    0x8c0(%rsp),%rax
  21399c:	00 
  21399d:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2139a4:	00 
  2139a5:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  2139ac:	00 
  2139ad:	48 8d b4 24 f8 01 00 	lea    0x1f8(%rsp),%rsi
  2139b4:	00 
  2139b5:	e8 16 f6 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2139ba:	88 84 24 27 01 00 00 	mov    %al,0x127(%rsp)
  2139c1:	8a 84 24 27 01 00 00 	mov    0x127(%rsp),%al
  2139c8:	24 01                	and    $0x1,%al
  2139ca:	88 84 24 f7 01 00 00 	mov    %al,0x1f7(%rsp)
  2139d1:	f6 84 24 f7 01 00 00 	testb  $0x1,0x1f7(%rsp)
  2139d8:	01 
  2139d9:	75 76                	jne    213a51 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x321>
    let root_table = root_table_result.unwrap();
  2139db:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  2139e2:	00 
  2139e3:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2139ea:	00 
  2139eb:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  2139f2:	00 
  2139f3:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  2139fa:	00 
  2139fb:	48 89 8c 24 48 02 00 	mov    %rcx,0x248(%rsp)
  213a02:	00 
  213a03:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  213a0a:	00 
  213a0b:	48 8d 35 76 6c 02 00 	lea    0x26c76(%rip),%rsi        # 23a688 <memcmp+0x1948>
  213a12:	48 8d bc 24 40 02 00 	lea    0x240(%rsp),%rdi
  213a19:	00 
  213a1a:	e8 b1 7a ff ff       	callq  20b4d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE>
  213a1f:	48 89 94 24 28 08 00 	mov    %rdx,0x828(%rsp)
  213a26:	00 
  213a27:	48 89 84 24 20 08 00 	mov    %rax,0x820(%rsp)
  213a2e:	00 
  213a2f:	48 8b 84 24 20 08 00 	mov    0x820(%rsp),%rax
  213a36:	00 
  213a37:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  213a3e:	00 
  213a3f:	48 8b 84 24 28 08 00 	mov    0x828(%rsp),%rax
  213a46:	00 
  213a47:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  213a4e:	00 
  213a4f:	eb 46                	jmp    213a97 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x367>
    log::info!("Initializing ACPI tables.");
  213a51:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  213a58:	00 
  213a59:	48 8d 35 e0 6b 02 00 	lea    0x26be0(%rip),%rsi        # 23a640 <memcmp+0x1900>
  213a60:	ba 01 00 00 00       	mov    $0x1,%edx
  213a65:	48 8d 0d 14 d1 fe ff 	lea    -0x12eec(%rip),%rcx        # 200b80 <str.0+0x80>
  213a6c:	31 c0                	xor    %eax,%eax
  213a6e:	41 89 c0             	mov    %eax,%r8d
  213a71:	e8 ba 2a ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213a76:	48 8b b4 24 e8 01 00 	mov    0x1e8(%rsp),%rsi
  213a7d:	00 
  213a7e:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  213a85:	00 
  213a86:	48 8d 15 c3 6b 02 00 	lea    0x26bc3(%rip),%rdx        # 23a650 <memcmp+0x1910>
  213a8d:	e8 ee f2 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  213a92:	e9 44 ff ff ff       	jmpq   2139db <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x2ab>
    let (head_addr, ptr_size, supports_2x) = match root_table {
  213a97:	8b 84 24 30 02 00 00 	mov    0x230(%rsp),%eax
  213a9e:	48 85 c0             	test   %rax,%rax
  213aa1:	74 06                	je     213aa9 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x379>
  213aa3:	eb 00                	jmp    213aa5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x375>
  213aa5:	eb 26                	jmp    213acd <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x39d>
  213aa7:	0f 0b                	ud2    
        AcpiRootTableKind::RSDT(addr) => (
  213aa9:	8b 84 24 34 02 00 00 	mov    0x234(%rsp),%eax
  213ab0:	89 84 24 3c 08 00 00 	mov    %eax,0x83c(%rsp)
            PhysicalAddress::from_u64(addr as u64),
  213ab7:	89 c0                	mov    %eax,%eax
  213ab9:	89 c7                	mov    %eax,%edi
  213abb:	e8 d0 49 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  213ac0:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  213ac7:	00 
  213ac8:	e9 a1 00 00 00       	jmpq   213b6e <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x43e>
        AcpiRootTableKind::XSDT(addr) => {
  213acd:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
  213ad4:	00 
  213ad5:	48 89 bc 24 30 08 00 	mov    %rdi,0x830(%rsp)
  213adc:	00 
            (PhysicalAddress::from_u64(addr), mem::size_of::<u64>(), true)
  213add:	e8 ae 49 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  213ae2:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  213ae9:	00 
  213aea:	eb 00                	jmp    213aec <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x3bc>
  213aec:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  213af3:	00 
  213af4:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  213afb:	00 
  213afc:	48 c7 84 24 68 02 00 	movq   $0x8,0x268(%rsp)
  213b03:	00 08 00 00 00 
  213b08:	c6 84 24 70 02 00 00 	movb   $0x1,0x270(%rsp)
  213b0f:	01 
    let (head_addr, ptr_size, supports_2x) = match root_table {
  213b10:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  213b17:	00 
  213b18:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  213b1f:	00 
  213b20:	48 8b 84 24 68 02 00 	mov    0x268(%rsp),%rax
  213b27:	00 
  213b28:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  213b2f:	00 
  213b30:	48 89 84 24 40 08 00 	mov    %rax,0x840(%rsp)
  213b37:	00 
  213b38:	8a 84 24 70 02 00 00 	mov    0x270(%rsp),%al
  213b3f:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  213b46:	24 01                	and    $0x1,%al
  213b48:	88 84 24 4f 08 00 00 	mov    %al,0x84f(%rsp)
    let head_v_addr = p_to_v(head_addr);
  213b4f:	48 8b bc 24 58 02 00 	mov    0x258(%rsp),%rdi
  213b56:	00 
  213b57:	e8 d4 49 01 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  213b5c:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  213b63:	00 
  213b64:	48 89 84 24 50 08 00 	mov    %rax,0x850(%rsp)
  213b6b:	00 
  213b6c:	eb 2b                	jmp    213b99 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x469>
            mem::size_of::<u32>(),
  213b6e:	eb 00                	jmp    213b70 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x440>
  213b70:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  213b77:	00 
        AcpiRootTableKind::RSDT(addr) => (
  213b78:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  213b7f:	00 
  213b80:	48 c7 84 24 68 02 00 	movq   $0x4,0x268(%rsp)
  213b87:	00 04 00 00 00 
  213b8c:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  213b93:	00 
        ),
  213b94:	e9 77 ff ff ff       	jmpq   213b10 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x3e0>
  213b99:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  213ba0:	00 
    let root_header: &SDTHeader = unsafe { &*head_v_addr.get_ptr() };
  213ba1:	e8 6a 5b 00 00       	callq  219710 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>
  213ba6:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  213bad:	00 
  213bae:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  213bb5:	00 
  213bb6:	48 89 bc 24 58 08 00 	mov    %rdi,0x858(%rsp)
  213bbd:	00 
  213bbe:	be 04 00 00 00       	mov    $0x4,%esi
        if str::from_utf8_unchecked(&root_header.signature) != "RSDT" {
  213bc3:	e8 18 6c 01 00       	callq  22a7e0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  213bc8:	48 89 94 24 80 02 00 	mov    %rdx,0x280(%rsp)
  213bcf:	00 
  213bd0:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  213bd7:	00 
  213bd8:	48 8d bc 24 78 02 00 	lea    0x278(%rsp),%rdi
  213bdf:	00 
  213be0:	48 8d 35 b9 6a 02 00 	lea    0x26ab9(%rip),%rsi        # 23a6a0 <memcmp+0x1960>
  213be7:	e8 44 78 01 00       	callq  22b430 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>
  213bec:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  213bf3:	8a 84 24 ef 00 00 00 	mov    0xef(%rsp),%al
  213bfa:	a8 01                	test   $0x1,%al
  213bfc:	75 1a                	jne    213c18 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x4e8>
  213bfe:	eb 00                	jmp    213c00 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x4d0>
  213c00:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  213c07:	00 
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  213c08:	8b 40 04             	mov    0x4(%rax),%eax
  213c0b:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  213c12:	00 
  213c13:	e9 ff 00 00 00       	jmpq   213d17 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x5e7>
            log::error!("Invalid root table header, expected RSDT.");
  213c18:	48 c7 84 24 88 02 00 	movq   $0x1,0x288(%rsp)
  213c1f:	00 01 00 00 00 
  213c24:	48 8d bc 24 88 02 00 	lea    0x288(%rsp),%rdi
  213c2b:	00 
  213c2c:	48 8d 35 c5 c6 fe ff 	lea    -0x1393b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  213c33:	e8 98 f3 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213c38:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  213c3f:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  213c46:	a8 01                	test   $0x1,%al
  213c48:	75 0c                	jne    213c56 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x526>
  213c4a:	eb 00                	jmp    213c4c <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x51c>
  213c4c:	c6 84 24 97 02 00 00 	movb   $0x0,0x297(%rsp)
  213c53:	00 
  213c54:	eb 60                	jmp    213cb6 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x586>
  213c56:	c6 84 24 af 08 00 00 	movb   $0x0,0x8af(%rsp)
  213c5d:	00 
  213c5e:	48 8b 3d e3 9e 02 00 	mov    0x29ee3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213c65:	0f b6 b4 24 af 08 00 	movzbl 0x8af(%rsp),%esi
  213c6c:	00 
  213c6d:	e8 7e 75 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  213c72:	48 89 84 24 b0 08 00 	mov    %rax,0x8b0(%rsp)
  213c79:	00 
  213c7a:	48 8b 84 24 b0 08 00 	mov    0x8b0(%rsp),%rax
  213c81:	00 
  213c82:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
  213c89:	00 
  213c8a:	48 8d bc 24 88 02 00 	lea    0x288(%rsp),%rdi
  213c91:	00 
  213c92:	48 8d b4 24 98 02 00 	lea    0x298(%rsp),%rsi
  213c99:	00 
  213c9a:	e8 31 f3 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213c9f:	88 84 24 de 00 00 00 	mov    %al,0xde(%rsp)
  213ca6:	8a 84 24 de 00 00 00 	mov    0xde(%rsp),%al
  213cad:	24 01                	and    $0x1,%al
  213caf:	88 84 24 97 02 00 00 	mov    %al,0x297(%rsp)
  213cb6:	f6 84 24 97 02 00 00 	testb  $0x1,0x297(%rsp)
  213cbd:	01 
  213cbe:	75 14                	jne    213cd4 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x5a4>
  213cc0:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  213cc7:	00 
            return None;
  213cc8:	c6 80 88 01 00 00 02 	movb   $0x2,0x188(%rax)
  213ccf:	e9 76 fc ff ff       	jmpq   21394a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
            log::error!("Invalid root table header, expected RSDT.");
  213cd4:	48 8d bc 24 a0 02 00 	lea    0x2a0(%rsp),%rdi
  213cdb:	00 
  213cdc:	48 8d 35 cd 69 02 00 	lea    0x269cd(%rip),%rsi        # 23a6b0 <memcmp+0x1970>
  213ce3:	ba 01 00 00 00       	mov    $0x1,%edx
  213ce8:	48 8d 0d 91 ce fe ff 	lea    -0x1316f(%rip),%rcx        # 200b80 <str.0+0x80>
  213cef:	31 c0                	xor    %eax,%eax
  213cf1:	41 89 c0             	mov    %eax,%r8d
  213cf4:	e8 37 28 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213cf9:	48 8b b4 24 88 02 00 	mov    0x288(%rsp),%rsi
  213d00:	00 
  213d01:	48 8d bc 24 a0 02 00 	lea    0x2a0(%rsp),%rdi
  213d08:	00 
  213d09:	48 8d 15 b0 69 02 00 	lea    0x269b0(%rip),%rdx        # 23a6c0 <memcmp+0x1980>
  213d10:	e8 6b f0 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  213d15:	eb a9                	jmp    213cc0 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x590>
  213d17:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  213d1e:	00 
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  213d1f:	48 83 e8 24          	sub    $0x24,%rax
  213d23:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  213d2a:	00 
  213d2b:	0f 92 c0             	setb   %al
  213d2e:	a8 01                	test   $0x1,%al
  213d30:	75 15                	jne    213d47 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x617>
  213d32:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  213d39:	00 
  213d3a:	48 83 f8 00          	cmp    $0x0,%rax
  213d3e:	0f 94 c0             	sete   %al
  213d41:	a8 01                	test   $0x1,%al
  213d43:	75 46                	jne    213d8b <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x65b>
  213d45:	eb 1a                	jmp    213d61 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x631>
  213d47:	48 8d 3d a2 ce fe ff 	lea    -0x1315e(%rip),%rdi        # 200bf0 <str.0>
  213d4e:	48 8d 15 a3 69 02 00 	lea    0x269a3(%rip),%rdx        # 23a6f8 <memcmp+0x19b8>
  213d55:	be 21 00 00 00       	mov    $0x21,%esi
  213d5a:	e8 91 1e 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  213d5f:	0f 0b                	ud2    
  213d61:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  213d68:	00 
  213d69:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  213d70:	00 
  213d71:	31 d2                	xor    %edx,%edx
  213d73:	48 f7 f1             	div    %rcx
  213d76:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  213d7d:	00 
    if n_tables > MAX_ACPI_TABLES {
  213d7e:	48 83 bc 24 d0 02 00 	cmpq   $0x30,0x2d0(%rsp)
  213d85:	00 30 
  213d87:	77 32                	ja     213dbb <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x68b>
  213d89:	eb 1a                	jmp    213da5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x675>
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  213d8b:	48 8d 3d 8e ce fe ff 	lea    -0x13172(%rip),%rdi        # 200c20 <str.1>
  213d92:	48 8d 15 5f 69 02 00 	lea    0x2695f(%rip),%rdx        # 23a6f8 <memcmp+0x19b8>
  213d99:	be 19 00 00 00       	mov    $0x19,%esi
  213d9e:	e8 4d 1e 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  213da3:	0f 0b                	ud2    
    let mut acpi_tables = [VirtualAddress::from_u64(0); MAX_ACPI_TABLES];
  213da5:	31 c0                	xor    %eax,%eax
  213da7:	89 c7                	mov    %eax,%edi
  213da9:	e8 22 45 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  213dae:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  213db5:	00 
  213db6:	e9 c8 01 00 00       	jmpq   213f83 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x853>
        log::warn!(
  213dbb:	48 c7 84 24 d8 02 00 	movq   $0x2,0x2d8(%rsp)
  213dc2:	00 02 00 00 00 
  213dc7:	48 8d bc 24 d8 02 00 	lea    0x2d8(%rsp),%rdi
  213dce:	00 
  213dcf:	48 8d 35 22 c5 fe ff 	lea    -0x13ade(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  213dd6:	e8 f5 f1 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213ddb:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  213de2:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
  213de9:	a8 01                	test   $0x1,%al
  213deb:	75 0c                	jne    213df9 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x6c9>
  213ded:	eb 00                	jmp    213def <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x6bf>
  213def:	c6 84 24 e7 02 00 00 	movb   $0x0,0x2e7(%rsp)
  213df6:	00 
  213df7:	eb 60                	jmp    213e59 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x729>
  213df9:	c6 84 24 9f 08 00 00 	movb   $0x0,0x89f(%rsp)
  213e00:	00 
  213e01:	48 8b 3d 40 9d 02 00 	mov    0x29d40(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213e08:	0f b6 b4 24 9f 08 00 	movzbl 0x89f(%rsp),%esi
  213e0f:	00 
  213e10:	e8 db 73 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  213e15:	48 89 84 24 a0 08 00 	mov    %rax,0x8a0(%rsp)
  213e1c:	00 
  213e1d:	48 8b 84 24 a0 08 00 	mov    0x8a0(%rsp),%rax
  213e24:	00 
  213e25:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  213e2c:	00 
  213e2d:	48 8d bc 24 d8 02 00 	lea    0x2d8(%rsp),%rdi
  213e34:	00 
  213e35:	48 8d b4 24 e8 02 00 	lea    0x2e8(%rsp),%rsi
  213e3c:	00 
  213e3d:	e8 8e f1 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213e42:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  213e49:	8a 84 24 c6 00 00 00 	mov    0xc6(%rsp),%al
  213e50:	24 01                	and    $0x1,%al
  213e52:	88 84 24 e7 02 00 00 	mov    %al,0x2e7(%rsp)
  213e59:	f6 84 24 e7 02 00 00 	testb  $0x1,0x2e7(%rsp)
  213e60:	01 
  213e61:	75 11                	jne    213e74 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x744>
        n_tables = MAX_ACPI_TABLES;
  213e63:	48 c7 84 24 d0 02 00 	movq   $0x30,0x2d0(%rsp)
  213e6a:	00 30 00 00 00 
    if n_tables > MAX_ACPI_TABLES {
  213e6f:	e9 31 ff ff ff       	jmpq   213da5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x675>
        log::warn!(
  213e74:	48 8d 84 24 d0 02 00 	lea    0x2d0(%rsp),%rax
  213e7b:	00 
  213e7c:	48 89 84 24 40 03 00 	mov    %rax,0x340(%rsp)
  213e83:	00 
  213e84:	48 8d 05 95 c4 fe ff 	lea    -0x13b6b(%rip),%rax        # 200320 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x56>
  213e8b:	48 89 84 24 48 03 00 	mov    %rax,0x348(%rsp)
  213e92:	00 
  213e93:	48 8b bc 24 40 03 00 	mov    0x340(%rsp),%rdi
  213e9a:	00 
  213e9b:	48 89 bc 24 60 08 00 	mov    %rdi,0x860(%rsp)
  213ea2:	00 
  213ea3:	48 8b 84 24 48 03 00 	mov    0x348(%rsp),%rax
  213eaa:	00 
  213eab:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  213eb2:	00 
  213eb3:	48 89 84 24 68 08 00 	mov    %rax,0x868(%rsp)
  213eba:	00 
  213ebb:	48 8b 35 9e 9c 02 00 	mov    0x29c9e(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  213ec2:	e8 b9 b6 ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  213ec7:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  213ece:	00 
  213ecf:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  213ed6:	00 
  213ed7:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  213ede:	00 
  213edf:	48 8b 35 7a 9c 02 00 	mov    0x29c7a(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  213ee6:	e8 95 b6 ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  213eeb:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  213ef2:	00 
  213ef3:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  213efa:	00 
  213efb:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  213f02:	00 
  213f03:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  213f0a:	00 
  213f0b:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  213f12:	00 
  213f13:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  213f1a:	00 
  213f1b:	48 89 b4 24 20 03 00 	mov    %rsi,0x320(%rsp)
  213f22:	00 
  213f23:	48 89 94 24 28 03 00 	mov    %rdx,0x328(%rsp)
  213f2a:	00 
  213f2b:	48 89 8c 24 30 03 00 	mov    %rcx,0x330(%rsp)
  213f32:	00 
  213f33:	48 89 84 24 38 03 00 	mov    %rax,0x338(%rsp)
  213f3a:	00 
  213f3b:	48 8d 8c 24 20 03 00 	lea    0x320(%rsp),%rcx
  213f42:	00 
  213f43:	48 8d bc 24 f0 02 00 	lea    0x2f0(%rsp),%rdi
  213f4a:	00 
  213f4b:	48 8d 35 be 67 02 00 	lea    0x267be(%rip),%rsi        # 23a710 <memcmp+0x19d0>
  213f52:	ba 03 00 00 00       	mov    $0x3,%edx
  213f57:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  213f5d:	e8 ce 25 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  213f62:	48 8b b4 24 d8 02 00 	mov    0x2d8(%rsp),%rsi
  213f69:	00 
  213f6a:	48 8d bc 24 f0 02 00 	lea    0x2f0(%rsp),%rdi
  213f71:	00 
  213f72:	48 8d 15 c7 67 02 00 	lea    0x267c7(%rip),%rdx        # 23a740 <memcmp+0x1a00>
  213f79:	e8 02 ee 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  213f7e:	e9 e0 fe ff ff       	jmpq   213e63 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x733>
    let mut acpi_tables = [VirtualAddress::from_u64(0); MAX_ACPI_TABLES];
  213f83:	48 8d 84 24 50 03 00 	lea    0x350(%rsp),%rax
  213f8a:	00 
  213f8b:	48 8d 8c 24 50 03 00 	lea    0x350(%rsp),%rcx
  213f92:	00 
  213f93:	48 81 c1 80 01 00 00 	add    $0x180,%rcx
  213f9a:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  213fa1:	00 
  213fa2:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  213fa9:	00 
  213faa:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  213fb1:	00 
  213fb2:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  213fb9:	00 
  213fba:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  213fc1:	00 
  213fc2:	48 39 c8             	cmp    %rcx,%rax
  213fc5:	74 21                	je     213fe8 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x8b8>
  213fc7:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  213fce:	00 
  213fcf:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  213fd6:	00 
  213fd7:	48 89 08             	mov    %rcx,(%rax)
  213fda:	48 83 c0 08          	add    $0x8,%rax
  213fde:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  213fe5:	00 
  213fe6:	eb c2                	jmp    213faa <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x87a>
    for idx in 0..n_tables {
  213fe8:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  213fef:	00 
  213ff0:	48 c7 84 24 d0 04 00 	movq   $0x0,0x4d0(%rsp)
  213ff7:	00 00 00 00 00 
  213ffc:	48 89 84 24 d8 04 00 	mov    %rax,0x4d8(%rsp)
  214003:	00 
  214004:	48 8b bc 24 d0 04 00 	mov    0x4d0(%rsp),%rdi
  21400b:	00 
  21400c:	48 8b b4 24 d8 04 00 	mov    0x4d8(%rsp),%rsi
  214013:	00 
  214014:	e8 97 a6 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  214019:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21401e:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  214023:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  214028:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21402d:	48 89 8c 24 e0 04 00 	mov    %rcx,0x4e0(%rsp)
  214034:	00 
  214035:	48 89 84 24 e8 04 00 	mov    %rax,0x4e8(%rsp)
  21403c:	00 
  21403d:	48 8d bc 24 e0 04 00 	lea    0x4e0(%rsp),%rdi
  214044:	00 
  214045:	e8 36 a6 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21404a:	48 89 94 24 f8 04 00 	mov    %rdx,0x4f8(%rsp)
  214051:	00 
  214052:	48 89 84 24 f0 04 00 	mov    %rax,0x4f0(%rsp)
  214059:	00 
  21405a:	48 8b 84 24 f0 04 00 	mov    0x4f0(%rsp),%rax
  214061:	00 
  214062:	48 85 c0             	test   %rax,%rax
  214065:	74 06                	je     21406d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x93d>
  214067:	eb 00                	jmp    214069 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x939>
  214069:	eb 7f                	jmp    2140ea <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x9ba>
  21406b:	0f 0b                	ud2    
        tables: acpi_tables,
  21406d:	48 8d bc 24 98 06 00 	lea    0x698(%rsp),%rdi
  214074:	00 
  214075:	48 8d b4 24 50 03 00 	lea    0x350(%rsp),%rsi
  21407c:	00 
  21407d:	ba 80 01 00 00       	mov    $0x180,%edx
  214082:	e8 69 4c 02 00       	callq  238cf0 <memcpy>
        n_entries: n_tables,
  214087:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  21408e:	00 
  21408f:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    Some(Acpi {
  214094:	48 8d bc 24 08 05 00 	lea    0x508(%rsp),%rdi
  21409b:	00 
  21409c:	48 8d b4 24 98 06 00 	lea    0x698(%rsp),%rsi
  2140a3:	00 
  2140a4:	ba 80 01 00 00       	mov    $0x180,%edx
  2140a9:	e8 42 4c 02 00       	callq  238cf0 <memcpy>
  2140ae:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2140b3:	8a 84 24 07 01 00 00 	mov    0x107(%rsp),%al
  2140ba:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  2140c1:	00 
  2140c2:	48 89 8c 24 88 06 00 	mov    %rcx,0x688(%rsp)
  2140c9:	00 
  2140ca:	24 01                	and    $0x1,%al
  2140cc:	88 84 24 90 06 00 00 	mov    %al,0x690(%rsp)
  2140d3:	48 8d b4 24 08 05 00 	lea    0x508(%rsp),%rsi
  2140da:	00 
  2140db:	ba 90 01 00 00       	mov    $0x190,%edx
  2140e0:	e8 0b 4c 02 00       	callq  238cf0 <memcpy>
}
  2140e5:	e9 60 f8 ff ff       	jmpq   21394a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
    for idx in 0..n_tables {
  2140ea:	48 8b 84 24 f8 04 00 	mov    0x4f8(%rsp),%rax
  2140f1:	00 
  2140f2:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2140f7:	48 89 84 24 70 08 00 	mov    %rax,0x870(%rsp)
  2140fe:	00 
  2140ff:	48 89 84 24 78 08 00 	mov    %rax,0x878(%rsp)
  214106:	00 
  214107:	48 89 84 24 80 08 00 	mov    %rax,0x880(%rsp)
  21410e:	00 
            head_addr.as_u64() + (mem::size_of::<SDTHeader>() + idx * ptr_size) as u64,
  21410f:	48 8d bc 24 58 02 00 	lea    0x258(%rsp),%rdi
  214116:	00 
  214117:	e8 64 43 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  21411c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  214121:	eb 00                	jmp    214123 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x9f3>
  214123:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  21412a:	00 
  21412b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  214130:	48 f7 e1             	mul    %rcx
  214133:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214138:	0f 90 c0             	seto   %al
  21413b:	a8 01                	test   $0x1,%al
  21413d:	75 17                	jne    214156 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa26>
  21413f:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  214144:	48 83 c0 24          	add    $0x24,%rax
  214148:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21414d:	0f 92 c0             	setb   %al
  214150:	a8 01                	test   $0x1,%al
  214152:	75 37                	jne    21418b <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa5b>
  214154:	eb 1a                	jmp    214170 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa40>
  214156:	48 8d 3d 23 cb fe ff 	lea    -0x134dd(%rip),%rdi        # 200c80 <str.2>
  21415d:	48 8d 15 14 66 02 00 	lea    0x26614(%rip),%rdx        # 23a778 <memcmp+0x1a38>
  214164:	be 21 00 00 00       	mov    $0x21,%esi
  214169:	e8 82 1a 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21416e:	0f 0b                	ud2    
  214170:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  214175:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21417a:	48 01 c8             	add    %rcx,%rax
  21417d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214182:	0f 92 c0             	setb   %al
  214185:	a8 01                	test   $0x1,%al
  214187:	75 2d                	jne    2141b6 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa86>
  214189:	eb 1a                	jmp    2141a5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa75>
  21418b:	48 8d 3d 1e cb fe ff 	lea    -0x134e2(%rip),%rdi        # 200cb0 <str.3>
  214192:	48 8d 15 f7 65 02 00 	lea    0x265f7(%rip),%rdx        # 23a790 <memcmp+0x1a50>
  214199:	be 1c 00 00 00       	mov    $0x1c,%esi
  21419e:	e8 4d 1a 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2141a3:	0f 0b                	ud2    
  2141a5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let address = p_to_v(PhysicalAddress::from_u64(
  2141aa:	e8 e1 42 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  2141af:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2141b4:	eb 1a                	jmp    2141d0 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xaa0>
            head_addr.as_u64() + (mem::size_of::<SDTHeader>() + idx * ptr_size) as u64,
  2141b6:	48 8d 3d f3 ca fe ff 	lea    -0x1350d(%rip),%rdi        # 200cb0 <str.3>
  2141bd:	48 8d 15 e4 65 02 00 	lea    0x265e4(%rip),%rdx        # 23a7a8 <memcmp+0x1a68>
  2141c4:	be 1c 00 00 00       	mov    $0x1c,%esi
  2141c9:	e8 22 1a 02 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2141ce:	0f 0b                	ud2    
  2141d0:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        let address = p_to_v(PhysicalAddress::from_u64(
  2141d5:	e8 56 43 01 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  2141da:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2141df:	48 89 84 24 88 08 00 	mov    %rax,0x888(%rsp)
  2141e6:	00 
        let table_address = match root_table {
  2141e7:	8b 84 24 30 02 00 00 	mov    0x230(%rsp),%eax
  2141ee:	48 85 c0             	test   %rax,%rax
  2141f1:	74 06                	je     2141f9 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xac9>
  2141f3:	eb 00                	jmp    2141f5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xac5>
  2141f5:	eb 13                	jmp    21420a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xada>
  2141f7:	0f 0b                	ud2    
  2141f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                let ptr: u32 = unsafe { *address.get_ptr() };
  2141fe:	e8 ad 54 00 00       	callq  2196b0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8a329c0bfc3028c0E>
  214203:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214208:	eb 5a                	jmp    214264 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb34>
  21420a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                let ptr: u64 = unsafe { *address.get_ptr() };
  21420f:	e8 6c 54 00 00       	callq  219680 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8922eeaa7ea1b07fE>
  214214:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214219:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21421e:	48 8b 38             	mov    (%rax),%rdi
  214221:	48 89 bc 24 90 08 00 	mov    %rdi,0x890(%rsp)
  214228:	00 
                p_to_v(PhysicalAddress::from_u64(ptr))
  214229:	e8 62 42 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  21422e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214233:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  214238:	e8 f3 42 01 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  21423d:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  214244:	00 
  214245:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        acpi_tables[idx] = table_address;
  21424a:	48 8b 8c 24 00 05 00 	mov    0x500(%rsp),%rcx
  214251:	00 
  214252:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  214257:	48 83 f8 30          	cmp    $0x30,%rax
  21425b:	0f 92 c0             	setb   %al
  21425e:	a8 01                	test   $0x1,%al
  214260:	75 32                	jne    214294 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb64>
  214262:	eb 47                	jmp    2142ab <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb7b>
  214264:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                let ptr: u32 = unsafe { *address.get_ptr() };
  214269:	8b 00                	mov    (%rax),%eax
  21426b:	89 84 24 98 08 00 00 	mov    %eax,0x898(%rsp)
                p_to_v(PhysicalAddress::from_u64(ptr as u64))
  214272:	89 c0                	mov    %eax,%eax
  214274:	89 c7                	mov    %eax,%edi
  214276:	e8 15 42 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  21427b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214280:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  214285:	e8 a6 42 01 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  21428a:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  214291:	00 
  214292:	eb b1                	jmp    214245 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb15>
  214294:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  214299:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        acpi_tables[idx] = table_address;
  21429e:	48 89 8c c4 50 03 00 	mov    %rcx,0x350(%rsp,%rax,8)
  2142a5:	00 
    for idx in 0..n_tables {
  2142a6:	e9 92 fd ff ff       	jmpq   21403d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x90d>
  2142ab:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        acpi_tables[idx] = table_address;
  2142b0:	48 8d 15 09 65 02 00 	lea    0x26509(%rip),%rdx        # 23a7c0 <memcmp+0x1a80>
  2142b7:	be 30 00 00 00       	mov    $0x30,%esi
  2142bc:	e8 7f 19 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2142c1:	0f 0b                	ud2    
  2142c3:	cc                   	int3   
  2142c4:	cc                   	int3   
  2142c5:	cc                   	int3   
  2142c6:	cc                   	int3   
  2142c7:	cc                   	int3   
  2142c8:	cc                   	int3   
  2142c9:	cc                   	int3   
  2142ca:	cc                   	int3   
  2142cb:	cc                   	int3   
  2142cc:	cc                   	int3   
  2142cd:	cc                   	int3   
  2142ce:	cc                   	int3   
  2142cf:	cc                   	int3   

00000000002142d0 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E>:
    fn has_signature(&self, idx: usize, signature: &str) -> bool {
  2142d0:	48 83 ec 58          	sub    $0x58,%rsp
  2142d4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2142d9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2142de:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2142e3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2142e8:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  2142ed:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
            let sdt_header: &SDTHeader = &*self.tables[idx].get_ptr();
  2142f2:	48 83 fe 30          	cmp    $0x30,%rsi
  2142f6:	0f 92 c0             	setb   %al
  2142f9:	a8 01                	test   $0x1,%al
  2142fb:	75 02                	jne    2142ff <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x2f>
  2142fd:	eb 1a                	jmp    214319 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x49>
  2142ff:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  214304:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  214309:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
  21430d:	e8 fe 53 00 00       	callq  219710 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>
  214312:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214317:	eb 18                	jmp    214331 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x61>
  214319:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21431e:	48 8d 15 b3 64 02 00 	lea    0x264b3(%rip),%rdx        # 23a7d8 <memcmp+0x1a98>
  214325:	be 30 00 00 00       	mov    $0x30,%esi
  21432a:	e8 11 19 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21432f:	0f 0b                	ud2    
  214331:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  214336:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21433b:	be 04 00 00 00       	mov    $0x4,%esi
            let st = str::from_utf8_unchecked(&sdt_header.signature);
  214340:	e8 9b 64 01 00       	callq  22a7e0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  214345:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21434a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
            st == signature
  21434f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  214354:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  214359:	e8 92 70 01 00       	callq  22b3f0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17hc4e39ee727fe4555E>
  21435e:	88 44 24 07          	mov    %al,0x7(%rsp)
  214362:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  214366:	24 01                	and    $0x1,%al
  214368:	0f b6 c0             	movzbl %al,%eax
  21436b:	48 83 c4 58          	add    $0x58,%rsp
  21436f:	c3                   	retq   

0000000000214370 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E>:
    pub fn get_table(&self, signature: &str) -> Option<VirtualAddress> {
  214370:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  214377:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21437c:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  214381:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  214386:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  21438b:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  214392:	00 
  214393:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21439a:	00 
        for idx in 0..self.n_entries {
  21439b:	48 8b 87 80 01 00 00 	mov    0x180(%rdi),%rax
  2143a2:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  2143a9:	00 00 
  2143ab:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2143b0:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  2143b5:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2143ba:	e8 f1 a2 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  2143bf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2143c4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2143c9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2143ce:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2143d3:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2143d8:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2143dd:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2143e2:	e8 99 a2 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  2143e7:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  2143ec:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2143f1:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2143f6:	48 85 c0             	test   %rax,%rax
  2143f9:	74 06                	je     214401 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x91>
  2143fb:	eb 00                	jmp    2143fd <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x8d>
  2143fd:	eb 10                	jmp    21440f <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x9f>
  2143ff:	0f 0b                	ud2    
        None
  214401:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  214408:	00 00 
    }
  21440a:	e9 88 00 00 00       	jmpq   214497 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x127>
  21440f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  214414:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  214419:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        for idx in 0..self.n_entries {
  21441e:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  214423:	48 89 34 24          	mov    %rsi,(%rsp)
  214427:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  21442e:	00 
  21442f:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  214436:	00 
  214437:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  21443e:	00 
            if self.has_signature(idx, signature) {
  21443f:	e8 8c fe ff ff       	callq  2142d0 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E>
  214444:	88 44 24 0f          	mov    %al,0xf(%rsp)
  214448:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21444c:	a8 01                	test   $0x1,%al
  21444e:	75 02                	jne    214452 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0xe2>
  214450:	eb 8b                	jmp    2143dd <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x6d>
  214452:	48 8b 04 24          	mov    (%rsp),%rax
                return Some(self.tables[idx]);
  214456:	48 83 f8 30          	cmp    $0x30,%rax
  21445a:	0f 92 c0             	setb   %al
  21445d:	a8 01                	test   $0x1,%al
  21445f:	75 02                	jne    214463 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0xf3>
  214461:	eb 1d                	jmp    214480 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x110>
  214463:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214468:	48 8b 0c 24          	mov    (%rsp),%rcx
  21446c:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
  214470:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214475:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  21447c:	00 00 
    }
  21447e:	eb 17                	jmp    214497 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x127>
  214480:	48 8b 3c 24          	mov    (%rsp),%rdi
                return Some(self.tables[idx]);
  214484:	48 8d 15 65 63 02 00 	lea    0x26365(%rip),%rdx        # 23a7f0 <memcmp+0x1ab0>
  21448b:	be 30 00 00 00       	mov    $0x30,%esi
  214490:	e8 ab 17 02 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  214495:	0f 0b                	ud2    
    }
  214497:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21449c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  2144a1:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  2144a8:	c3                   	retq   
  2144a9:	cc                   	int3   
  2144aa:	cc                   	int3   
  2144ab:	cc                   	int3   
  2144ac:	cc                   	int3   
  2144ad:	cc                   	int3   
  2144ae:	cc                   	int3   
  2144af:	cc                   	int3   

00000000002144b0 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E>:
}

pub fn setup_acpi() {
  2144b0:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    let acpi_opt = ACPI.lock();
  2144b7:	48 8d 3d 5c c8 fe ff 	lea    -0x137a4(%rip),%rdi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2144be:	e8 fd 03 00 00       	callq  2148c0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>
  2144c3:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2144c8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  2144cd:	e8 5e a3 01 00       	callq  22e830 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>
  2144d2:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  2144d7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    if acpi_opt.is_some() {
  2144dc:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2144e1:	e8 da a7 01 00       	callq  22ecc0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  2144e6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2144eb:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  2144f0:	e8 fb d7 ff ff       	callq  211cf0 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>
  2144f5:	88 44 24 57          	mov    %al,0x57(%rsp)
  2144f9:	8a 44 24 57          	mov    0x57(%rsp),%al
  2144fd:	a8 01                	test   $0x1,%al
  2144ff:	75 11                	jne    214512 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x62>
  214501:	eb 00                	jmp    214503 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
            "ACPI initialized, n_entries={}, supports_acpi_2={}",
            acpi.n_entries,
            acpi.supports_2x
        );
    }
}
  214503:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  214508:	e8 53 7a ff ff       	callq  20bf60 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  21450d:	e9 c5 01 00 00       	jmpq   2146d7 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x227>
        let acpi = acpi_opt.as_ref().unwrap();
  214512:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  214517:	e8 a4 a7 01 00       	callq  22ecc0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  21451c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214521:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  214526:	e8 35 cb ff ff       	callq  211060 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>
  21452b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214530:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  214535:	48 8d 35 cc 62 02 00 	lea    0x262cc(%rip),%rsi        # 23a808 <memcmp+0x1ac8>
  21453c:	e8 3f ce ff ff       	callq  211380 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>
  214541:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214546:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21454d:	00 
        log::info!(
  21454e:	48 c7 44 24 78 03 00 	movq   $0x3,0x78(%rsp)
  214555:	00 00 
  214557:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  21455c:	48 8d 35 95 bd fe ff 	lea    -0x1426b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  214563:	e8 68 ea ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  214568:	88 44 24 37          	mov    %al,0x37(%rsp)
  21456c:	8a 44 24 37          	mov    0x37(%rsp),%al
  214570:	a8 01                	test   $0x1,%al
  214572:	75 0c                	jne    214580 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0xd0>
  214574:	eb 00                	jmp    214576 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0xc6>
  214576:	c6 84 24 87 00 00 00 	movb   $0x0,0x87(%rsp)
  21457d:	00 
  21457e:	eb 57                	jmp    2145d7 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x127>
  214580:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  214587:	00 
  214588:	48 8b 3d b9 95 02 00 	mov    0x295b9(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21458f:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  214596:	00 
  214597:	e8 54 6c 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21459c:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  2145a3:	00 
  2145a4:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2145ab:	00 
  2145ac:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2145b3:	00 
  2145b4:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2145b9:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  2145c0:	00 
  2145c1:	e8 0a ea ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2145c6:	88 44 24 36          	mov    %al,0x36(%rsp)
  2145ca:	8a 44 24 36          	mov    0x36(%rsp),%al
  2145ce:	24 01                	and    $0x1,%al
  2145d0:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  2145d7:	f6 84 24 87 00 00 00 	testb  $0x1,0x87(%rsp)
  2145de:	01 
  2145df:	0f 84 1e ff ff ff    	je     214503 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
  2145e5:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            acpi.n_entries,
  2145ea:	48 89 c1             	mov    %rax,%rcx
  2145ed:	48 81 c1 80 01 00 00 	add    $0x180,%rcx
            acpi.supports_2x
  2145f4:	48 05 88 01 00 00    	add    $0x188,%rax
        log::info!(
  2145fa:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  214601:	00 
  214602:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  214609:	00 
  21460a:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  214611:	00 
  214612:	48 89 bc 24 f8 00 00 	mov    %rdi,0xf8(%rsp)
  214619:	00 
  21461a:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  214621:	00 
  214622:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214627:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21462e:	00 
  21462f:	48 8b 35 2a 95 02 00 	mov    0x2952a(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  214636:	e8 45 af ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21463b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214640:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  214645:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21464a:	48 8b 35 17 95 02 00 	mov    0x29517(%rip),%rsi        # 23db68 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x80>
  214651:	e8 8a ac ff ff       	callq  20f2e0 <_ZN4core3fmt10ArgumentV13new17h6eb9a36efcd2d487E>
  214656:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21465b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214660:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214665:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21466a:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21466f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214674:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  21467b:	00 
  21467c:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  214683:	00 
  214684:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  21468b:	00 
  21468c:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  214693:	00 
  214694:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  21469b:	00 
  21469c:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2146a3:	00 
  2146a4:	48 8d 35 75 61 02 00 	lea    0x26175(%rip),%rsi        # 23a820 <memcmp+0x1ae0>
  2146ab:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2146b1:	4c 89 c2             	mov    %r8,%rdx
  2146b4:	e8 77 1e ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2146b9:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  2146be:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2146c5:	00 
  2146c6:	48 8d 15 73 61 02 00 	lea    0x26173(%rip),%rdx        # 23a840 <memcmp+0x1b00>
  2146cd:	e8 ae e6 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2146d2:	e9 2c fe ff ff       	jmpq   214503 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
}
  2146d7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  2146de:	c3                   	retq   
  2146df:	cc                   	int3   

00000000002146e0 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE>:
#[derive(Debug)]
  2146e0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  2146e7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2146ec:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  2146f1:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  2146f6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2146fb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214700:	8b 00                	mov    (%rax),%eax
  214702:	48 85 c0             	test   %rax,%rax
  214705:	74 06                	je     21470d <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x2d>
  214707:	eb 00                	jmp    214709 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x29>
  214709:	eb 35                	jmp    214740 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x60>
  21470b:	0f 0b                	ud2    
  21470d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    RSDT(u32),
  214712:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214717:	48 83 c0 04          	add    $0x4,%rax
  21471b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214720:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  214727:	00 
#[derive(Debug)]
  214728:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21472d:	48 8d 15 6c c2 fe ff 	lea    -0x13d94(%rip),%rdx        # 2009a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x8>
  214734:	b9 04 00 00 00       	mov    $0x4,%ecx
  214739:	e8 e2 37 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21473e:	eb 7a                	jmp    2147ba <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0xda>
  214740:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    XSDT(u64),
  214745:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21474a:	48 83 c0 08          	add    $0x8,%rax
  21474e:	48 89 04 24          	mov    %rax,(%rsp)
  214752:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug)]
  214757:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21475c:	48 8d 15 45 c2 fe ff 	lea    -0x13dbb(%rip),%rdx        # 2009a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x10>
  214763:	b9 04 00 00 00       	mov    $0x4,%ecx
  214768:	e8 b3 37 02 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21476d:	48 8b 04 24          	mov    (%rsp),%rax
  214771:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  214776:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21477d:	00 
    XSDT(u64),
  21477e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  214783:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
#[derive(Debug)]
  214788:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21478d:	48 8d 15 e4 60 02 00 	lea    0x260e4(%rip),%rdx        # 23a878 <memcmp+0x1b38>
  214794:	e8 07 0d 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  214799:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21479e:	e8 6d 0e 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2147a3:	24 01                	and    $0x1,%al
  2147a5:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2147a9:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2147ad:	24 01                	and    $0x1,%al
  2147af:	0f b6 c0             	movzbl %al,%eax
  2147b2:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2147b9:	c3                   	retq   
  2147ba:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2147bf:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  2147c4:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  2147cb:	00 
    RSDT(u32),
  2147cc:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2147d1:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug)]
  2147d6:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2147db:	48 8d 15 b6 60 02 00 	lea    0x260b6(%rip),%rdx        # 23a898 <memcmp+0x1b58>
  2147e2:	e8 b9 0c 02 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2147e7:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2147ec:	e8 1f 0e 02 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2147f1:	24 01                	and    $0x1,%al
  2147f3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2147f7:	eb b0                	jmp    2147a9 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0xc9>
  2147f9:	cc                   	int3   
  2147fa:	cc                   	int3   
  2147fb:	cc                   	int3   
  2147fc:	cc                   	int3   
  2147fd:	cc                   	int3   
  2147fe:	cc                   	int3   
  2147ff:	cc                   	int3   

0000000000214800 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E>:
#[derive(Debug)]
  214800:	48 83 ec 38          	sub    $0x38,%rsp
  214804:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  214809:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21480e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  214813:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  214818:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21481d:	0f b6 00             	movzbl (%rax),%eax
  214820:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214825:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21482a:	48 8d 0d eb c2 fe ff 	lea    -0x13d15(%rip),%rcx        # 200b1c <str.0+0x1c>
  214831:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  214835:	48 01 c8             	add    %rcx,%rax
  214838:	ff e0                	jmpq   *%rax
  21483a:	0f 0b                	ud2    
  21483c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  214841:	48 8d 35 80 ba fe ff 	lea    -0x14580(%rip),%rsi        # 2002c8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xae>
  214848:	ba 08 00 00 00       	mov    $0x8,%edx
  21484d:	e8 5e 36 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214852:	24 01                	and    $0x1,%al
  214854:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214858:	eb 58                	jmp    2148b2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  21485a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21485f:	48 8d 35 5a be fe ff 	lea    -0x141a6(%rip),%rsi        # 2006c0 <str.0+0xa0>
  214866:	ba 10 00 00 00       	mov    $0x10,%edx
  21486b:	e8 40 36 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214870:	24 01                	and    $0x1,%al
  214872:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214876:	eb 3a                	jmp    2148b2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  214878:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21487d:	48 8d 35 87 c4 fe ff 	lea    -0x13b79(%rip),%rsi        # 200d0b <str.3+0x5b>
  214884:	ba 0f 00 00 00       	mov    $0xf,%edx
  214889:	e8 22 36 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21488e:	24 01                	and    $0x1,%al
  214890:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214894:	eb 1c                	jmp    2148b2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  214896:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21489b:	48 8d 35 58 c4 fe ff 	lea    -0x13ba8(%rip),%rsi        # 200cfa <str.3+0x4a>
  2148a2:	ba 11 00 00 00       	mov    $0x11,%edx
  2148a7:	e8 04 36 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2148ac:	24 01                	and    $0x1,%al
  2148ae:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2148b2:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2148b6:	24 01                	and    $0x1,%al
  2148b8:	0f b6 c0             	movzbl %al,%eax
  2148bb:	48 83 c4 38          	add    $0x38,%rsp
  2148bf:	c3                   	retq   

00000000002148c0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>:
            fn deref(&self) -> &$T {
  2148c0:	48 83 ec 18          	sub    $0x18,%rsp
  2148c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2148c9:	48 8d 05 d0 a3 02 00 	lea    0x2a3d0(%rip),%rax        # 23eca0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb6aa66892d79afddE>
  2148d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2148d5:	48 8d 3d c4 a3 02 00 	lea    0x2a3c4(%rip),%rdi        # 23eca0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb6aa66892d79afddE>
  2148dc:	e8 df 5a ff ff       	callq  20a3c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE>
  2148e1:	48 89 04 24          	mov    %rax,(%rsp)
  2148e5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  2148e9:	48 83 c4 18          	add    $0x18,%rsp
  2148ed:	c3                   	retq   
  2148ee:	cc                   	int3   
  2148ef:	cc                   	int3   

00000000002148f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h477bb3e9a00069c1E>:
  2148f0:	48 83 ec 18          	sub    $0x18,%rsp
  2148f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2148f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2148fe:	48 8b 3f             	mov    (%rdi),%rdi
  214901:	e8 aa a2 ff ff       	callq  20ebb0 <_ZN69_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..fmt..Debug$GT$3fmt17h063c54f93d0e7a84E>
  214906:	88 44 24 07          	mov    %al,0x7(%rsp)
  21490a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21490e:	24 01                	and    $0x1,%al
  214910:	0f b6 c0             	movzbl %al,%eax
  214913:	48 83 c4 18          	add    $0x18,%rsp
  214917:	c3                   	retq   
  214918:	cc                   	int3   
  214919:	cc                   	int3   
  21491a:	cc                   	int3   
  21491b:	cc                   	int3   
  21491c:	cc                   	int3   
  21491d:	cc                   	int3   
  21491e:	cc                   	int3   
  21491f:	cc                   	int3   

0000000000214920 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hddb2de07a8fbd8d2E>:
  214920:	48 83 ec 18          	sub    $0x18,%rsp
  214924:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214929:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21492e:	48 8b 3f             	mov    (%rdi),%rdi
  214931:	e8 4a a0 ff ff       	callq  20e980 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE>
  214936:	88 44 24 07          	mov    %al,0x7(%rsp)
  21493a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21493e:	24 01                	and    $0x1,%al
  214940:	0f b6 c0             	movzbl %al,%eax
  214943:	48 83 c4 18          	add    $0x18,%rsp
  214947:	c3                   	retq   
  214948:	cc                   	int3   
  214949:	cc                   	int3   
  21494a:	cc                   	int3   
  21494b:	cc                   	int3   
  21494c:	cc                   	int3   
  21494d:	cc                   	int3   
  21494e:	cc                   	int3   
  21494f:	cc                   	int3   

0000000000214950 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>:
    pub const fn is_null(self) -> bool {
  214950:	48 83 ec 18          	sub    $0x18,%rsp
  214954:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  214959:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21495e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  214963:	31 c0                	xor    %eax,%eax
  214965:	89 c6                	mov    %eax,%esi
  214967:	e8 b4 f5 01 00       	callq  233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21496c:	88 44 24 07          	mov    %al,0x7(%rsp)
  214970:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  214974:	24 01                	and    $0x1,%al
  214976:	0f b6 c0             	movzbl %al,%eax
  214979:	48 83 c4 18          	add    $0x18,%rsp
  21497d:	c3                   	retq   
  21497e:	cc                   	int3   
  21497f:	cc                   	int3   

0000000000214980 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h77ff0a5df0613473E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
  214980:	48 83 ec 10          	sub    $0x10,%rsp
  214984:	48 89 f8             	mov    %rdi,%rax
  214987:	48 89 04 24          	mov    %rax,(%rsp)
  21498b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  214990:	48 83 c4 10          	add    $0x10,%rsp
  214994:	c3                   	retq   
  214995:	cc                   	int3   
  214996:	cc                   	int3   
  214997:	cc                   	int3   
  214998:	cc                   	int3   
  214999:	cc                   	int3   
  21499a:	cc                   	int3   
  21499b:	cc                   	int3   
  21499c:	cc                   	int3   
  21499d:	cc                   	int3   
  21499e:	cc                   	int3   
  21499f:	cc                   	int3   

00000000002149a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h21f431eaaa4aac60E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
  2149a0:	48 83 ec 28          	sub    $0x28,%rsp
  2149a4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2149a9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        IterMut::new(self)
  2149ae:	e8 7d 64 00 00       	callq  21ae30 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE>
  2149b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2149b8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2149bd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2149c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2149c7:	48 83 c4 28          	add    $0x28,%rsp
  2149cb:	c3                   	retq   
  2149cc:	cc                   	int3   
  2149cd:	cc                   	int3   
  2149ce:	cc                   	int3   
  2149cf:	cc                   	int3   

00000000002149d0 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h50650571f0c00760E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  2149d0:	48 83 ec 28          	sub    $0x28,%rsp
  2149d4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2149d9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(&**self as *const T), f)
  2149de:	48 8b 07             	mov    (%rdi),%rax
  2149e1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2149e6:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2149eb:	e8 20 00 00 00       	callq  214a10 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE>
  2149f0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2149f4:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2149f8:	24 01                	and    $0x1,%al
  2149fa:	0f b6 c0             	movzbl %al,%eax
  2149fd:	48 83 c4 28          	add    $0x28,%rsp
  214a01:	c3                   	retq   
  214a02:	cc                   	int3   
  214a03:	cc                   	int3   
  214a04:	cc                   	int3   
  214a05:	cc                   	int3   
  214a06:	cc                   	int3   
  214a07:	cc                   	int3   
  214a08:	cc                   	int3   
  214a09:	cc                   	int3   
  214a0a:	cc                   	int3   
  214a0b:	cc                   	int3   
  214a0c:	cc                   	int3   
  214a0d:	cc                   	int3   
  214a0e:	cc                   	int3   
  214a0f:	cc                   	int3   

0000000000214a10 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  214a10:	48 83 ec 78          	sub    $0x78,%rsp
  214a14:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  214a19:	48 89 f8             	mov    %rdi,%rax
  214a1c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214a21:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214a26:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214a2b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  214a30:	48 8b 0f             	mov    (%rdi),%rcx
  214a33:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  214a38:	48 8b 47 08          	mov    0x8(%rdi),%rax
  214a3c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214a41:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  214a46:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  214a4b:	8b 47 30             	mov    0x30(%rdi),%eax
  214a4e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  214a52:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  214a56:	e8 75 34 02 00       	callq  237ed0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  214a5b:	88 44 24 37          	mov    %al,0x37(%rsp)
  214a5f:	8a 44 24 37          	mov    0x37(%rsp),%al
  214a63:	a8 01                	test   $0x1,%al
  214a65:	75 33                	jne    214a9a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x8a>
  214a67:	eb 00                	jmp    214a69 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x59>
  214a69:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  214a6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  214a73:	8b 4e 30             	mov    0x30(%rsi),%ecx
  214a76:	83 c9 04             	or     $0x4,%ecx
  214a79:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  214a7c:	48 8b 00             	mov    (%rax),%rax
  214a7f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214a84:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  214a89:	e8 42 04 02 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  214a8e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  214a92:	24 01                	and    $0x1,%al
  214a94:	88 44 24 77          	mov    %al,0x77(%rsp)
  214a98:	eb 4d                	jmp    214ae7 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xd7>
  214a9a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  214a9f:	8b 47 30             	mov    0x30(%rdi),%eax
  214aa2:	83 c8 08             	or     $0x8,%eax
  214aa5:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  214aa8:	e8 b3 fb 01 00       	callq  234660 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  214aad:	88 44 24 0e          	mov    %al,0xe(%rsp)
  214ab1:	8a 44 24 0e          	mov    0xe(%rsp),%al
  214ab5:	a8 01                	test   $0x1,%al
  214ab7:	75 04                	jne    214abd <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xad>
  214ab9:	eb 00                	jmp    214abb <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xab>
        if f.alternate() {
  214abb:	eb ac                	jmp    214a69 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x59>
  214abd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  214ac2:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  214ac9:	00 00 
  214acb:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  214ad2:	00 00 
  214ad4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  214ad9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  214ade:	48 89 10             	mov    %rdx,(%rax)
  214ae1:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  214ae5:	eb d4                	jmp    214abb <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xab>
  214ae7:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214aeb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  214af0:	8b 54 24 30          	mov    0x30(%rsp),%edx
  214af4:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  214af9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  214afe:	48 89 39             	mov    %rdi,(%rcx)
  214b01:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  214b05:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  214b08:	24 01                	and    $0x1,%al
  214b0a:	0f b6 c0             	movzbl %al,%eax
  214b0d:	48 83 c4 78          	add    $0x78,%rsp
  214b11:	c3                   	retq   
  214b12:	cc                   	int3   
  214b13:	cc                   	int3   
  214b14:	cc                   	int3   
  214b15:	cc                   	int3   
  214b16:	cc                   	int3   
  214b17:	cc                   	int3   
  214b18:	cc                   	int3   
  214b19:	cc                   	int3   
  214b1a:	cc                   	int3   
  214b1b:	cc                   	int3   
  214b1c:	cc                   	int3   
  214b1d:	cc                   	int3   
  214b1e:	cc                   	int3   
  214b1f:	cc                   	int3   

0000000000214b20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4c4b5ea2e2ac9d28E>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
  214b20:	48 89 f8             	mov    %rdi,%rax
        self
  214b23:	48 8b 0e             	mov    (%rsi),%rcx
  214b26:	48 89 0f             	mov    %rcx,(%rdi)
  214b29:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  214b2d:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  214b31:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  214b35:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  214b39:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
  214b3d:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    }
  214b41:	c3                   	retq   
  214b42:	cc                   	int3   
  214b43:	cc                   	int3   
  214b44:	cc                   	int3   
  214b45:	cc                   	int3   
  214b46:	cc                   	int3   
  214b47:	cc                   	int3   
  214b48:	cc                   	int3   
  214b49:	cc                   	int3   
  214b4a:	cc                   	int3   
  214b4b:	cc                   	int3   
  214b4c:	cc                   	int3   
  214b4d:	cc                   	int3   
  214b4e:	cc                   	int3   
  214b4f:	cc                   	int3   

0000000000214b50 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE>:
// could be inlined, the previous attempts to do so made rustc
// slower:
//
// * https://github.com/rust-lang/rust/pull/72189
// * https://github.com/rust-lang/rust/pull/79827
const fn size_align<T>() -> (usize, usize) {
  214b50:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  214b54:	eb 00                	jmp    214b56 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE+0x6>
  214b56:	48 c7 04 24 20 00 00 	movq   $0x20,(%rsp)
  214b5d:	00 
  214b5e:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  214b65:	00 00 
}
  214b67:	48 8b 04 24          	mov    (%rsp),%rax
  214b6b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  214b70:	48 83 c4 10          	add    $0x10,%rsp
  214b74:	c3                   	retq   
  214b75:	cc                   	int3   
  214b76:	cc                   	int3   
  214b77:	cc                   	int3   
  214b78:	cc                   	int3   
  214b79:	cc                   	int3   
  214b7a:	cc                   	int3   
  214b7b:	cc                   	int3   
  214b7c:	cc                   	int3   
  214b7d:	cc                   	int3   
  214b7e:	cc                   	int3   
  214b7f:	cc                   	int3   

0000000000214b80 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE>:
const fn size_align<T>() -> (usize, usize) {
  214b80:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  214b84:	eb 00                	jmp    214b86 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE+0x6>
  214b86:	48 c7 04 24 06 00 00 	movq   $0x6,(%rsp)
  214b8d:	00 
  214b8e:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  214b95:	00 00 
}
  214b97:	48 8b 04 24          	mov    (%rsp),%rax
  214b9b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  214ba0:	48 83 c4 10          	add    $0x10,%rsp
  214ba4:	c3                   	retq   
  214ba5:	cc                   	int3   
  214ba6:	cc                   	int3   
  214ba7:	cc                   	int3   
  214ba8:	cc                   	int3   
  214ba9:	cc                   	int3   
  214baa:	cc                   	int3   
  214bab:	cc                   	int3   
  214bac:	cc                   	int3   
  214bad:	cc                   	int3   
  214bae:	cc                   	int3   
  214baf:	cc                   	int3   

0000000000214bb0 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E>:
const fn size_align<T>() -> (usize, usize) {
  214bb0:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  214bb4:	eb 00                	jmp    214bb6 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E+0x6>
  214bb6:	48 c7 04 24 08 00 00 	movq   $0x8,(%rsp)
  214bbd:	00 
  214bbe:	48 c7 44 24 08 08 00 	movq   $0x8,0x8(%rsp)
  214bc5:	00 00 
}
  214bc7:	48 8b 04 24          	mov    (%rsp),%rax
  214bcb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  214bd0:	48 83 c4 10          	add    $0x10,%rsp
  214bd4:	c3                   	retq   
  214bd5:	cc                   	int3   
  214bd6:	cc                   	int3   
  214bd7:	cc                   	int3   
  214bd8:	cc                   	int3   
  214bd9:	cc                   	int3   
  214bda:	cc                   	int3   
  214bdb:	cc                   	int3   
  214bdc:	cc                   	int3   
  214bdd:	cc                   	int3   
  214bde:	cc                   	int3   
  214bdf:	cc                   	int3   

0000000000214be0 <_ZN4core5alloc6layout6Layout3new17h14e49274c2912963E>:
    /// Constructs a `Layout` suitable for holding a value of type `T`.
    #[stable(feature = "alloc_layout", since = "1.28.0")]
    #[rustc_const_stable(feature = "alloc_layout_const_new", since = "1.42.0")]
    #[must_use]
    #[inline]
    pub const fn new<T>() -> Self {
  214be0:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  214be4:	e8 67 ff ff ff       	callq  214b50 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE>
  214be9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214bee:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  214bf3:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214bf8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  214bfd:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  214c02:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        // SAFETY: the align is guaranteed by Rust to be a power of two and
        // the size+align combo is guaranteed to fit in our address space. As a
        // result use the unchecked constructor here to avoid inserting code
        // that panics if it isn't optimized well enough.
        unsafe { Layout::from_size_align_unchecked(size, align) }
  214c07:	e8 34 74 00 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  214c0c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214c11:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214c16:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  214c1b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  214c20:	48 83 c4 38          	add    $0x38,%rsp
  214c24:	c3                   	retq   
  214c25:	cc                   	int3   
  214c26:	cc                   	int3   
  214c27:	cc                   	int3   
  214c28:	cc                   	int3   
  214c29:	cc                   	int3   
  214c2a:	cc                   	int3   
  214c2b:	cc                   	int3   
  214c2c:	cc                   	int3   
  214c2d:	cc                   	int3   
  214c2e:	cc                   	int3   
  214c2f:	cc                   	int3   

0000000000214c30 <_ZN4core5alloc6layout6Layout3new17h5ba2216a2bb47243E>:
    pub const fn new<T>() -> Self {
  214c30:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  214c34:	e8 77 ff ff ff       	callq  214bb0 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E>
  214c39:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214c3e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  214c43:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214c48:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  214c4d:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  214c52:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
  214c57:	e8 e4 73 00 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  214c5c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214c61:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214c66:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  214c6b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  214c70:	48 83 c4 38          	add    $0x38,%rsp
  214c74:	c3                   	retq   
  214c75:	cc                   	int3   
  214c76:	cc                   	int3   
  214c77:	cc                   	int3   
  214c78:	cc                   	int3   
  214c79:	cc                   	int3   
  214c7a:	cc                   	int3   
  214c7b:	cc                   	int3   
  214c7c:	cc                   	int3   
  214c7d:	cc                   	int3   
  214c7e:	cc                   	int3   
  214c7f:	cc                   	int3   

0000000000214c80 <_ZN4core5alloc6layout6Layout3new17hba5f1941af14a5a4E>:
    pub const fn new<T>() -> Self {
  214c80:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  214c84:	e8 f7 fe ff ff       	callq  214b80 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE>
  214c89:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214c8e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  214c93:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214c98:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  214c9d:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  214ca2:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
  214ca7:	e8 94 73 00 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  214cac:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214cb1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214cb6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  214cbb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  214cc0:	48 83 c4 38          	add    $0x38,%rsp
  214cc4:	c3                   	retq   
  214cc5:	cc                   	int3   
  214cc6:	cc                   	int3   
  214cc7:	cc                   	int3   
  214cc8:	cc                   	int3   
  214cc9:	cc                   	int3   
  214cca:	cc                   	int3   
  214ccb:	cc                   	int3   
  214ccc:	cc                   	int3   
  214ccd:	cc                   	int3   
  214cce:	cc                   	int3   
  214ccf:	cc                   	int3   

0000000000214cd0 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E>:
    /// Creates a layout describing the record for a `[T; n]`.
    ///
    /// On arithmetic overflow, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[inline]
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  214cd0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  214cd7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  214cdc:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  214ce3:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  214ce4:	e8 47 ff ff ff       	callq  214c30 <_ZN4core5alloc6layout6Layout3new17h5ba2216a2bb47243E>
  214ce9:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  214cf0:	00 
  214cf1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  214cf8:	00 
  214cf9:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  214cfe:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  214d03:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  214d0a:	00 
  214d0b:	e8 c0 73 00 00       	callq  21c0d0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  214d10:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214d15:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  214d1a:	e8 f1 6a ff ff       	callq  20b810 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  214d1f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214d24:	48 85 c0             	test   %rax,%rax
  214d27:	0f 94 c0             	sete   %al
  214d2a:	0f b6 c0             	movzbl %al,%eax
  214d2d:	75 09                	jne    214d38 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x68>
  214d2f:	eb 00                	jmp    214d31 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x61>
  214d31:	e9 87 00 00 00       	jmpq   214dbd <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xed>
  214d36:	0f 0b                	ud2    
  214d38:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  214d3d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  214d44:	00 
  214d45:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214d4a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  214d51:	00 
  214d52:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  214d57:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  214d5e:	00 
  214d5f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  214d66:	00 
  214d67:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214d6c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  214d73:	00 
  214d74:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214d79:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  214d80:	00 
  214d81:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214d86:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  214d8b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  214d90:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  214d95:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214d9a:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  214d9f:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  214da6:	00 
        debug_assert_eq!(offset, mem::size_of::<T>());
        Ok(layout.pad_to_align())
  214da7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  214dac:	e8 0f 70 00 00       	callq  21bdc0 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  214db1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214db6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214dbb:	eb 23                	jmp    214de0 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  214dbd:	e8 de 5e ff ff       	callq  20aca0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  214dc2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  214dc7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  214dcc:	eb 00                	jmp    214dce <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xfe>
  214dce:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214dd3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  214dd8:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  214ddf:	c3                   	retq   
  214de0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214de5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  214dea:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  214def:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  214df4:	eb d8                	jmp    214dce <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xfe>
  214df6:	cc                   	int3   
  214df7:	cc                   	int3   
  214df8:	cc                   	int3   
  214df9:	cc                   	int3   
  214dfa:	cc                   	int3   
  214dfb:	cc                   	int3   
  214dfc:	cc                   	int3   
  214dfd:	cc                   	int3   
  214dfe:	cc                   	int3   
  214dff:	cc                   	int3   

0000000000214e00 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E>:
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  214e00:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  214e07:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  214e0c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  214e13:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  214e14:	e8 c7 fd ff ff       	callq  214be0 <_ZN4core5alloc6layout6Layout3new17h14e49274c2912963E>
  214e19:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  214e20:	00 
  214e21:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  214e28:	00 
  214e29:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  214e2e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  214e33:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  214e3a:	00 
  214e3b:	e8 90 72 00 00       	callq  21c0d0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  214e40:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214e45:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  214e4a:	e8 c1 69 ff ff       	callq  20b810 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  214e4f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214e54:	48 85 c0             	test   %rax,%rax
  214e57:	0f 94 c0             	sete   %al
  214e5a:	0f b6 c0             	movzbl %al,%eax
  214e5d:	75 09                	jne    214e68 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x68>
  214e5f:	eb 00                	jmp    214e61 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x61>
  214e61:	e9 87 00 00 00       	jmpq   214eed <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xed>
  214e66:	0f 0b                	ud2    
  214e68:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  214e6d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  214e74:	00 
  214e75:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214e7a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  214e81:	00 
  214e82:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  214e87:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  214e8e:	00 
  214e8f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  214e96:	00 
  214e97:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214e9c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  214ea3:	00 
  214ea4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214ea9:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  214eb0:	00 
  214eb1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214eb6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  214ebb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  214ec0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  214ec5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214eca:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  214ecf:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  214ed6:	00 
        Ok(layout.pad_to_align())
  214ed7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  214edc:	e8 df 6e 00 00       	callq  21bdc0 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  214ee1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214ee6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214eeb:	eb 23                	jmp    214f10 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  214eed:	e8 ae 5d ff ff       	callq  20aca0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  214ef2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  214ef7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  214efc:	eb 00                	jmp    214efe <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xfe>
  214efe:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214f03:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  214f08:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  214f0f:	c3                   	retq   
  214f10:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214f15:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  214f1a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  214f1f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  214f24:	eb d8                	jmp    214efe <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xfe>
  214f26:	cc                   	int3   
  214f27:	cc                   	int3   
  214f28:	cc                   	int3   
  214f29:	cc                   	int3   
  214f2a:	cc                   	int3   
  214f2b:	cc                   	int3   
  214f2c:	cc                   	int3   
  214f2d:	cc                   	int3   
  214f2e:	cc                   	int3   
  214f2f:	cc                   	int3   

0000000000214f30 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE>:
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  214f30:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  214f37:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  214f3c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  214f43:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  214f44:	e8 37 fd ff ff       	callq  214c80 <_ZN4core5alloc6layout6Layout3new17hba5f1941af14a5a4E>
  214f49:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  214f50:	00 
  214f51:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  214f58:	00 
  214f59:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  214f5e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  214f63:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  214f6a:	00 
  214f6b:	e8 60 71 00 00       	callq  21c0d0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  214f70:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214f75:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  214f7a:	e8 91 68 ff ff       	callq  20b810 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  214f7f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214f84:	48 85 c0             	test   %rax,%rax
  214f87:	0f 94 c0             	sete   %al
  214f8a:	0f b6 c0             	movzbl %al,%eax
  214f8d:	75 09                	jne    214f98 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x68>
  214f8f:	eb 00                	jmp    214f91 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x61>
  214f91:	e9 87 00 00 00       	jmpq   21501d <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xed>
  214f96:	0f 0b                	ud2    
  214f98:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  214f9d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  214fa4:	00 
  214fa5:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214faa:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  214fb1:	00 
  214fb2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  214fb7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  214fbe:	00 
  214fbf:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  214fc6:	00 
  214fc7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214fcc:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  214fd3:	00 
  214fd4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214fd9:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  214fe0:	00 
  214fe1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214fe6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  214feb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  214ff0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  214ff5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214ffa:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  214fff:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  215006:	00 
        Ok(layout.pad_to_align())
  215007:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  21500c:	e8 af 6d 00 00       	callq  21bdc0 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  215011:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215016:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21501b:	eb 23                	jmp    215040 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  21501d:	e8 7e 5c ff ff       	callq  20aca0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  215022:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  215027:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  21502c:	eb 00                	jmp    21502e <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xfe>
  21502e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  215033:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  215038:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  21503f:	c3                   	retq   
  215040:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215045:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  21504a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21504f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  215054:	eb d8                	jmp    21502e <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xfe>
  215056:	cc                   	int3   
  215057:	cc                   	int3   
  215058:	cc                   	int3   
  215059:	cc                   	int3   
  21505a:	cc                   	int3   
  21505b:	cc                   	int3   
  21505c:	cc                   	int3   
  21505d:	cc                   	int3   
  21505e:	cc                   	int3   
  21505f:	cc                   	int3   

0000000000215060 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>:
    fn from(t: T) -> T {
  215060:	50                   	push   %rax
    }
  215061:	58                   	pop    %rax
  215062:	c3                   	retq   
  215063:	cc                   	int3   
  215064:	cc                   	int3   
  215065:	cc                   	int3   
  215066:	cc                   	int3   
  215067:	cc                   	int3   
  215068:	cc                   	int3   
  215069:	cc                   	int3   
  21506a:	cc                   	int3   
  21506b:	cc                   	int3   
  21506c:	cc                   	int3   
  21506d:	cc                   	int3   
  21506e:	cc                   	int3   
  21506f:	cc                   	int3   

0000000000215070 <_ZN4core3fmt5Write10write_char17ha396e41c707486b5E>:
    fn write_char(&mut self, c: char) -> Result {
  215070:	48 83 ec 48          	sub    $0x48,%rsp
  215074:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  215078:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21507d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  215082:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  215086:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  21508b:	31 f6                	xor    %esi,%esi
  21508d:	ba 04 00 00 00       	mov    $0x4,%edx
  215092:	e8 79 3c 02 00       	callq  238d10 <memset>
  215097:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  21509b:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  2150a0:	ba 04 00 00 00       	mov    $0x4,%edx
  2150a5:	e8 d6 28 00 00       	callq  217980 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>
  2150aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2150af:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2150b4:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2150b9:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2150be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2150c3:	e8 f8 1c ff ff       	callq  206dc0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>
  2150c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2150cc:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2150d0:	24 01                	and    $0x1,%al
  2150d2:	0f b6 c0             	movzbl %al,%eax
  2150d5:	48 83 c4 48          	add    $0x48,%rsp
  2150d9:	c3                   	retq   
  2150da:	cc                   	int3   
  2150db:	cc                   	int3   
  2150dc:	cc                   	int3   
  2150dd:	cc                   	int3   
  2150de:	cc                   	int3   
  2150df:	cc                   	int3   

00000000002150e0 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  2150e0:	48 83 ec 48          	sub    $0x48,%rsp
  2150e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  2150e9:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2150ee:	48 89 04 24          	mov    %rax,(%rsp)
  2150f2:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2150f7:	ba 30 00 00 00       	mov    $0x30,%edx
  2150fc:	e8 ef 3b 02 00       	callq  238cf0 <memcpy>
  215101:	48 8b 3c 24          	mov    (%rsp),%rdi
  215105:	48 8d 35 ac 57 02 00 	lea    0x257ac(%rip),%rsi        # 23a8b8 <memcmp+0x1b78>
  21510c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  215111:	e8 ba 23 02 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  215116:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21511a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  21511e:	24 01                	and    $0x1,%al
  215120:	0f b6 c0             	movzbl %al,%eax
  215123:	48 83 c4 48          	add    $0x48,%rsp
  215127:	c3                   	retq   
  215128:	cc                   	int3   
  215129:	cc                   	int3   
  21512a:	cc                   	int3   
  21512b:	cc                   	int3   
  21512c:	cc                   	int3   
  21512d:	cc                   	int3   
  21512e:	cc                   	int3   
  21512f:	cc                   	int3   

0000000000215130 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h5d79f033f2b7bc07E>:
    fn write_char(&mut self, c: char) -> Result {
  215130:	48 83 ec 18          	sub    $0x18,%rsp
  215134:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  215139:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  21513d:	48 8b 3f             	mov    (%rdi),%rdi
  215140:	e8 2b ff ff ff       	callq  215070 <_ZN4core3fmt5Write10write_char17ha396e41c707486b5E>
  215145:	88 44 24 07          	mov    %al,0x7(%rsp)
  215149:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21514d:	24 01                	and    $0x1,%al
  21514f:	0f b6 c0             	movzbl %al,%eax
  215152:	48 83 c4 18          	add    $0x18,%rsp
  215156:	c3                   	retq   
  215157:	cc                   	int3   
  215158:	cc                   	int3   
  215159:	cc                   	int3   
  21515a:	cc                   	int3   
  21515b:	cc                   	int3   
  21515c:	cc                   	int3   
  21515d:	cc                   	int3   
  21515e:	cc                   	int3   
  21515f:	cc                   	int3   

0000000000215160 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h20c7314e44ff1427E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  215160:	48 83 ec 48          	sub    $0x48,%rsp
  215164:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  215169:	48 8b 07             	mov    (%rdi),%rax
  21516c:	48 89 04 24          	mov    %rax,(%rsp)
  215170:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  215175:	ba 30 00 00 00       	mov    $0x30,%edx
  21517a:	e8 71 3b 02 00       	callq  238cf0 <memcpy>
  21517f:	48 8b 3c 24          	mov    (%rsp),%rdi
  215183:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  215188:	e8 53 ff ff ff       	callq  2150e0 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>
  21518d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215191:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  215195:	24 01                	and    $0x1,%al
  215197:	0f b6 c0             	movzbl %al,%eax
  21519a:	48 83 c4 48          	add    $0x48,%rsp
  21519e:	c3                   	retq   
  21519f:	cc                   	int3   

00000000002151a0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h496f3945fad8b724E>:
    fn write_str(&mut self, s: &str) -> Result {
  2151a0:	48 83 ec 28          	sub    $0x28,%rsp
  2151a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2151a9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2151ae:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  2151b3:	48 8b 3f             	mov    (%rdi),%rdi
  2151b6:	e8 05 1c ff ff       	callq  206dc0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>
  2151bb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2151bf:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2151c3:	24 01                	and    $0x1,%al
  2151c5:	0f b6 c0             	movzbl %al,%eax
  2151c8:	48 83 c4 28          	add    $0x28,%rsp
  2151cc:	c3                   	retq   
  2151cd:	cc                   	int3   
  2151ce:	cc                   	int3   
  2151cf:	cc                   	int3   

00000000002151d0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>:
        const SGX = 1 << 15;
        const RMP = 1 << 31;
    }
}

pub fn read_cr3() -> u64 {
  2151d0:	50                   	push   %rax
    let cr3_val: u64;
    unsafe {
        asm!(
  2151d1:	0f 20 d8             	mov    %cr3,%rax
  2151d4:	48 89 04 24          	mov    %rax,(%rsp)
            options(nomem, nostack, preserves_flags)
        );
    }

    cr3_val
}
  2151d8:	48 8b 04 24          	mov    (%rsp),%rax
  2151dc:	59                   	pop    %rcx
  2151dd:	c3                   	retq   
  2151de:	cc                   	int3   
  2151df:	cc                   	int3   

00000000002151e0 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17h99c814258e74bc8aE>:

pub fn get_page_table_address() -> PhysicalAddress {
  2151e0:	48 83 ec 18          	sub    $0x18,%rsp
    let cr3_val = read_cr3();
  2151e4:	e8 e7 ff ff ff       	callq  2151d0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>
  2151e9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2151ee:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2151f3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    PhysicalAddress::from_u64(cr3_val & CR3_PHY_ADDR_MASK)
  2151f8:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
  2151ff:	ff 0f 00 
  215202:	48 21 c7             	and    %rax,%rdi
  215205:	e8 86 32 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  21520a:	48 89 04 24          	mov    %rax,(%rsp)
  21520e:	48 8b 04 24          	mov    (%rsp),%rax
}
  215212:	48 83 c4 18          	add    $0x18,%rsp
  215216:	c3                   	retq   
  215217:	cc                   	int3   
  215218:	cc                   	int3   
  215219:	cc                   	int3   
  21521a:	cc                   	int3   
  21521b:	cc                   	int3   
  21521c:	cc                   	int3   
  21521d:	cc                   	int3   
  21521e:	cc                   	int3   
  21521f:	cc                   	int3   

0000000000215220 <_ZN9r3_kernel3cpu3mmu9write_cr317he315686a68ce45f2E>:
pub fn get_page_table_flags() -> u16 {
    let cr3_val = read_cr3();
    (cr3_val & 0xfff) as u16
}

pub fn write_cr3(value: u64) {
  215220:	50                   	push   %rax
  215221:	48 89 3c 24          	mov    %rdi,(%rsp)
    unsafe {
        asm!(
  215225:	0f 22 df             	mov    %rdi,%cr3
            "mov cr3, {}",
            in(reg) value,
            options(nostack, preserves_flags)
        );
    }
}
  215228:	58                   	pop    %rax
  215229:	c3                   	retq   
  21522a:	cc                   	int3   
  21522b:	cc                   	int3   
  21522c:	cc                   	int3   
  21522d:	cc                   	int3   
  21522e:	cc                   	int3   
  21522f:	cc                   	int3   

0000000000215230 <_ZN9r3_kernel3cpu3mmu8read_cr217hb14237c00b02fb42E>:

pub fn read_cr2() -> u64 {
  215230:	50                   	push   %rax
    let cr2_val: u64;
    unsafe {
        asm!(
  215231:	0f 20 d0             	mov    %cr2,%rax
  215234:	48 89 04 24          	mov    %rax,(%rsp)
            options(nostack, nomem, preserves_flags)
        )
    }

    cr2_val
}
  215238:	48 8b 04 24          	mov    (%rsp),%rax
  21523c:	59                   	pop    %rcx
  21523d:	c3                   	retq   
  21523e:	cc                   	int3   
  21523f:	cc                   	int3   

0000000000215240 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>:

pub fn reload_flush() {
  215240:	48 83 ec 18          	sub    $0x18,%rsp
    // reloading the CR3 register will cause TLB to flush automatically.
    let cr3_val = read_cr3();
  215244:	e8 87 ff ff ff       	callq  2151d0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>
  215249:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21524e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215253:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    write_cr3(cr3_val);
  215258:	e8 c3 ff ff ff       	callq  215220 <_ZN9r3_kernel3cpu3mmu9write_cr317he315686a68ce45f2E>
}
  21525d:	48 83 c4 18          	add    $0x18,%rsp
  215261:	c3                   	retq   
  215262:	cc                   	int3   
  215263:	cc                   	int3   
  215264:	cc                   	int3   
  215265:	cc                   	int3   
  215266:	cc                   	int3   
  215267:	cc                   	int3   
  215268:	cc                   	int3   
  215269:	cc                   	int3   
  21526a:	cc                   	int3   
  21526b:	cc                   	int3   
  21526c:	cc                   	int3   
  21526d:	cc                   	int3   
  21526e:	cc                   	int3   
  21526f:	cc                   	int3   

0000000000215270 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  215270:	48 81 ec e8 01 00 00 	sub    $0x1e8,%rsp
  215277:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21527c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  215281:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  215286:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  21528d:	00 
                let mut first = true;
  21528e:	c6 44 24 4d 01       	movb   $0x1,0x4d(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  215293:	e8 08 09 00 00       	callq  215ba0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E>
  215298:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  21529c:	8a 44 24 4b          	mov    0x4b(%rsp),%al
bitflags! {
  2152a0:	a8 01                	test   $0x1,%al
  2152a2:	75 15                	jne    2152b9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x49>
  2152a4:	eb 00                	jmp    2152a6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36>
  2152a6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2152ab:	e8 30 09 00 00       	callq  215be0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE>
  2152b0:	88 44 24 37          	mov    %al,0x37(%rsp)
  2152b4:	e9 ba 00 00 00       	jmpq   215373 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x103>
                        if !first {
  2152b9:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2152bd:	34 ff                	xor    $0xff,%al
  2152bf:	a8 01                	test   $0x1,%al
  2152c1:	75 21                	jne    2152e4 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x74>
  2152c3:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  2152c8:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2152cd:	48 8d 35 49 ba fe ff 	lea    -0x145b7(%rip),%rsi        # 200d1d <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x3>
  2152d4:	ba 14 00 00 00       	mov    $0x14,%edx
  2152d9:	e8 d2 2b 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2152de:	88 44 24 36          	mov    %al,0x36(%rsp)
  2152e2:	eb 5a                	jmp    21533e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xce>
  2152e4:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2152e9:	48 8d 35 2a ba fe ff 	lea    -0x145d6(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2152f0:	ba 03 00 00 00       	mov    $0x3,%edx
  2152f5:	e8 b6 2b 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2152fa:	88 44 24 35          	mov    %al,0x35(%rsp)
  2152fe:	8a 44 24 35          	mov    0x35(%rsp),%al
  215302:	0f b6 f8             	movzbl %al,%edi
  215305:	83 e7 01             	and    $0x1,%edi
  215308:	e8 83 68 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21530d:	24 01                	and    $0x1,%al
  21530f:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  215313:	0f b6 44 24 4e       	movzbl 0x4e(%rsp),%eax
  215318:	a8 01                	test   $0x1,%al
  21531a:	74 a7                	je     2152c3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x53>
  21531c:	eb 00                	jmp    21531e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xae>
  21531e:	eb 02                	jmp    215322 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xb2>
  215320:	0f 0b                	ud2    
  215322:	e8 a9 59 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215327:	24 01                	and    $0x1,%al
  215329:	88 44 24 4c          	mov    %al,0x4c(%rsp)
            }
  21532d:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  215331:	24 01                	and    $0x1,%al
  215333:	0f b6 c0             	movzbl %al,%eax
  215336:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  21533d:	c3                   	retq   
  21533e:	8a 44 24 36          	mov    0x36(%rsp),%al
  215342:	0f b6 f8             	movzbl %al,%edi
  215345:	83 e7 01             	and    $0x1,%edi
  215348:	e8 43 68 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21534d:	24 01                	and    $0x1,%al
  21534f:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  215353:	0f b6 44 24 4f       	movzbl 0x4f(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  215358:	a8 01                	test   $0x1,%al
  21535a:	0f 84 46 ff ff ff    	je     2152a6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36>
  215360:	eb 00                	jmp    215362 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xf2>
  215362:	eb 02                	jmp    215366 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xf6>
  215364:	0f 0b                	ud2    
  215366:	e8 65 59 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21536b:	24 01                	and    $0x1,%al
  21536d:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215371:	eb ba                	jmp    21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215373:	8a 44 24 37          	mov    0x37(%rsp),%al
  215377:	a8 01                	test   $0x1,%al
  215379:	75 15                	jne    215390 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x120>
  21537b:	eb 00                	jmp    21537d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x10d>
  21537d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  215382:	e8 99 08 00 00       	callq  215c20 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E>
  215387:	88 44 24 34          	mov    %al,0x34(%rsp)
  21538b:	e9 b1 00 00 00       	jmpq   215441 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1d1>
                        if !first {
  215390:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  215394:	34 ff                	xor    $0xff,%al
  215396:	a8 01                	test   $0x1,%al
  215398:	75 21                	jne    2153bb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x14b>
  21539a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21539f:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2153a4:	48 8d 35 86 b9 fe ff 	lea    -0x1467a(%rip),%rsi        # 200d31 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x17>
  2153ab:	ba 0f 00 00 00       	mov    $0xf,%edx
  2153b0:	e8 fb 2a 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2153b5:	88 44 24 33          	mov    %al,0x33(%rsp)
  2153b9:	eb 4e                	jmp    215409 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x199>
  2153bb:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2153c0:	48 8d 35 53 b9 fe ff 	lea    -0x146ad(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2153c7:	ba 03 00 00 00       	mov    $0x3,%edx
  2153cc:	e8 df 2a 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2153d1:	88 44 24 32          	mov    %al,0x32(%rsp)
  2153d5:	8a 44 24 32          	mov    0x32(%rsp),%al
  2153d9:	0f b6 f8             	movzbl %al,%edi
  2153dc:	83 e7 01             	and    $0x1,%edi
  2153df:	e8 ac 67 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2153e4:	24 01                	and    $0x1,%al
  2153e6:	88 44 24 50          	mov    %al,0x50(%rsp)
  2153ea:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  2153ef:	a8 01                	test   $0x1,%al
  2153f1:	74 a7                	je     21539a <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x12a>
  2153f3:	eb 00                	jmp    2153f5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x185>
  2153f5:	eb 02                	jmp    2153f9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x189>
  2153f7:	0f 0b                	ud2    
  2153f9:	e8 d2 58 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2153fe:	24 01                	and    $0x1,%al
  215400:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215404:	e9 24 ff ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215409:	8a 44 24 33          	mov    0x33(%rsp),%al
  21540d:	0f b6 f8             	movzbl %al,%edi
  215410:	83 e7 01             	and    $0x1,%edi
  215413:	e8 78 67 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215418:	24 01                	and    $0x1,%al
  21541a:	88 44 24 51          	mov    %al,0x51(%rsp)
  21541e:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  215423:	a8 01                	test   $0x1,%al
  215425:	0f 84 52 ff ff ff    	je     21537d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x10d>
  21542b:	eb 00                	jmp    21542d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1bd>
  21542d:	eb 02                	jmp    215431 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1c1>
  21542f:	0f 0b                	ud2    
  215431:	e8 9a 58 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215436:	24 01                	and    $0x1,%al
  215438:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21543c:	e9 ec fe ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215441:	8a 44 24 34          	mov    0x34(%rsp),%al
  215445:	a8 01                	test   $0x1,%al
  215447:	75 15                	jne    21545e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1ee>
  215449:	eb 00                	jmp    21544b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1db>
  21544b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  215450:	e8 0b 08 00 00       	callq  215c60 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E>
  215455:	88 44 24 31          	mov    %al,0x31(%rsp)
  215459:	e9 b1 00 00 00       	jmpq   21550f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x29f>
                        if !first {
  21545e:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  215462:	34 ff                	xor    $0xff,%al
  215464:	a8 01                	test   $0x1,%al
  215466:	75 21                	jne    215489 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x219>
  215468:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21546d:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  215472:	48 8d 35 c7 b8 fe ff 	lea    -0x14739(%rip),%rsi        # 200d40 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x26>
  215479:	ba 09 00 00 00       	mov    $0x9,%edx
  21547e:	e8 2d 2a 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215483:	88 44 24 30          	mov    %al,0x30(%rsp)
  215487:	eb 4e                	jmp    2154d7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x267>
  215489:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21548e:	48 8d 35 85 b8 fe ff 	lea    -0x1477b(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  215495:	ba 03 00 00 00       	mov    $0x3,%edx
  21549a:	e8 11 2a 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21549f:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2154a3:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  2154a7:	0f b6 f8             	movzbl %al,%edi
  2154aa:	83 e7 01             	and    $0x1,%edi
  2154ad:	e8 de 66 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2154b2:	24 01                	and    $0x1,%al
  2154b4:	88 44 24 52          	mov    %al,0x52(%rsp)
  2154b8:	0f b6 44 24 52       	movzbl 0x52(%rsp),%eax
  2154bd:	a8 01                	test   $0x1,%al
  2154bf:	74 a7                	je     215468 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1f8>
  2154c1:	eb 00                	jmp    2154c3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x253>
  2154c3:	eb 02                	jmp    2154c7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x257>
  2154c5:	0f 0b                	ud2    
  2154c7:	e8 04 58 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2154cc:	24 01                	and    $0x1,%al
  2154ce:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2154d2:	e9 56 fe ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2154d7:	8a 44 24 30          	mov    0x30(%rsp),%al
  2154db:	0f b6 f8             	movzbl %al,%edi
  2154de:	83 e7 01             	and    $0x1,%edi
  2154e1:	e8 aa 66 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2154e6:	24 01                	and    $0x1,%al
  2154e8:	88 44 24 53          	mov    %al,0x53(%rsp)
  2154ec:	0f b6 44 24 53       	movzbl 0x53(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  2154f1:	a8 01                	test   $0x1,%al
  2154f3:	0f 84 52 ff ff ff    	je     21544b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1db>
  2154f9:	eb 00                	jmp    2154fb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x28b>
  2154fb:	eb 02                	jmp    2154ff <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x28f>
  2154fd:	0f 0b                	ud2    
  2154ff:	e8 cc 57 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215504:	24 01                	and    $0x1,%al
  215506:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21550a:	e9 1e fe ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21550f:	8a 44 24 31          	mov    0x31(%rsp),%al
  215513:	a8 01                	test   $0x1,%al
  215515:	75 15                	jne    21552c <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2bc>
  215517:	eb 00                	jmp    215519 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2a9>
  215519:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  21551e:	e8 7d 07 00 00       	callq  215ca0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E>
  215523:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  215527:	e9 b1 00 00 00       	jmpq   2155dd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36d>
                        if !first {
  21552c:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  215530:	34 ff                	xor    $0xff,%al
  215532:	a8 01                	test   $0x1,%al
  215534:	75 21                	jne    215557 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2e7>
  215536:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21553b:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  215540:	48 8d 35 02 b8 fe ff 	lea    -0x147fe(%rip),%rsi        # 200d49 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x2f>
  215547:	ba 0f 00 00 00       	mov    $0xf,%edx
  21554c:	e8 5f 29 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215551:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  215555:	eb 4e                	jmp    2155a5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x335>
  215557:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21555c:	48 8d 35 b7 b7 fe ff 	lea    -0x14849(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  215563:	ba 03 00 00 00       	mov    $0x3,%edx
  215568:	e8 43 29 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21556d:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  215571:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  215575:	0f b6 f8             	movzbl %al,%edi
  215578:	83 e7 01             	and    $0x1,%edi
  21557b:	e8 10 66 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215580:	24 01                	and    $0x1,%al
  215582:	88 44 24 54          	mov    %al,0x54(%rsp)
  215586:	0f b6 44 24 54       	movzbl 0x54(%rsp),%eax
  21558b:	a8 01                	test   $0x1,%al
  21558d:	74 a7                	je     215536 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2c6>
  21558f:	eb 00                	jmp    215591 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x321>
  215591:	eb 02                	jmp    215595 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x325>
  215593:	0f 0b                	ud2    
  215595:	e8 36 57 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21559a:	24 01                	and    $0x1,%al
  21559c:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2155a0:	e9 88 fd ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2155a5:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  2155a9:	0f b6 f8             	movzbl %al,%edi
  2155ac:	83 e7 01             	and    $0x1,%edi
  2155af:	e8 dc 65 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2155b4:	24 01                	and    $0x1,%al
  2155b6:	88 44 24 55          	mov    %al,0x55(%rsp)
  2155ba:	0f b6 44 24 55       	movzbl 0x55(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  2155bf:	a8 01                	test   $0x1,%al
  2155c1:	0f 84 52 ff ff ff    	je     215519 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2a9>
  2155c7:	eb 00                	jmp    2155c9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x359>
  2155c9:	eb 02                	jmp    2155cd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x35d>
  2155cb:	0f 0b                	ud2    
  2155cd:	e8 fe 56 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2155d2:	24 01                	and    $0x1,%al
  2155d4:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2155d8:	e9 50 fd ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2155dd:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  2155e1:	a8 01                	test   $0x1,%al
  2155e3:	75 15                	jne    2155fa <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x38a>
  2155e5:	eb 00                	jmp    2155e7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x377>
  2155e7:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2155ec:	e8 ef 06 00 00       	callq  215ce0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E>
  2155f1:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  2155f5:	e9 b1 00 00 00       	jmpq   2156ab <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x43b>
                        if !first {
  2155fa:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2155fe:	34 ff                	xor    $0xff,%al
  215600:	a8 01                	test   $0x1,%al
  215602:	75 21                	jne    215625 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3b5>
  215604:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  215609:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  21560e:	48 8d 35 43 b7 fe ff 	lea    -0x148bd(%rip),%rsi        # 200d58 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x3e>
  215615:	ba 11 00 00 00       	mov    $0x11,%edx
  21561a:	e8 91 28 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21561f:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  215623:	eb 4e                	jmp    215673 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x403>
  215625:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21562a:	48 8d 35 e9 b6 fe ff 	lea    -0x14917(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  215631:	ba 03 00 00 00       	mov    $0x3,%edx
  215636:	e8 75 28 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21563b:	88 44 24 29          	mov    %al,0x29(%rsp)
  21563f:	8a 44 24 29          	mov    0x29(%rsp),%al
  215643:	0f b6 f8             	movzbl %al,%edi
  215646:	83 e7 01             	and    $0x1,%edi
  215649:	e8 42 65 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21564e:	24 01                	and    $0x1,%al
  215650:	88 44 24 56          	mov    %al,0x56(%rsp)
  215654:	0f b6 44 24 56       	movzbl 0x56(%rsp),%eax
  215659:	a8 01                	test   $0x1,%al
  21565b:	74 a7                	je     215604 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x394>
  21565d:	eb 00                	jmp    21565f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3ef>
  21565f:	eb 02                	jmp    215663 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3f3>
  215661:	0f 0b                	ud2    
  215663:	e8 68 56 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215668:	24 01                	and    $0x1,%al
  21566a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21566e:	e9 ba fc ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215673:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  215677:	0f b6 f8             	movzbl %al,%edi
  21567a:	83 e7 01             	and    $0x1,%edi
  21567d:	e8 0e 65 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215682:	24 01                	and    $0x1,%al
  215684:	88 44 24 57          	mov    %al,0x57(%rsp)
  215688:	0f b6 44 24 57       	movzbl 0x57(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  21568d:	a8 01                	test   $0x1,%al
  21568f:	0f 84 52 ff ff ff    	je     2155e7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x377>
  215695:	eb 00                	jmp    215697 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x427>
  215697:	eb 02                	jmp    21569b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x42b>
  215699:	0f 0b                	ud2    
  21569b:	e8 30 56 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2156a0:	24 01                	and    $0x1,%al
  2156a2:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2156a6:	e9 82 fc ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2156ab:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  2156af:	a8 01                	test   $0x1,%al
  2156b1:	75 15                	jne    2156c8 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x458>
  2156b3:	eb 00                	jmp    2156b5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x445>
  2156b5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2156ba:	e8 61 06 00 00       	callq  215d20 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E>
  2156bf:	88 44 24 28          	mov    %al,0x28(%rsp)
  2156c3:	e9 b1 00 00 00       	jmpq   215779 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x509>
                        if !first {
  2156c8:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2156cc:	34 ff                	xor    $0xff,%al
  2156ce:	a8 01                	test   $0x1,%al
  2156d0:	75 21                	jne    2156f3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x483>
  2156d2:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  2156d7:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2156dc:	48 8d 35 86 b6 fe ff 	lea    -0x1497a(%rip),%rsi        # 200d69 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x4f>
  2156e3:	ba 0e 00 00 00       	mov    $0xe,%edx
  2156e8:	e8 c3 27 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2156ed:	88 44 24 27          	mov    %al,0x27(%rsp)
  2156f1:	eb 4e                	jmp    215741 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4d1>
  2156f3:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2156f8:	48 8d 35 1b b6 fe ff 	lea    -0x149e5(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2156ff:	ba 03 00 00 00       	mov    $0x3,%edx
  215704:	e8 a7 27 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215709:	88 44 24 26          	mov    %al,0x26(%rsp)
  21570d:	8a 44 24 26          	mov    0x26(%rsp),%al
  215711:	0f b6 f8             	movzbl %al,%edi
  215714:	83 e7 01             	and    $0x1,%edi
  215717:	e8 74 64 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21571c:	24 01                	and    $0x1,%al
  21571e:	88 44 24 58          	mov    %al,0x58(%rsp)
  215722:	0f b6 44 24 58       	movzbl 0x58(%rsp),%eax
  215727:	a8 01                	test   $0x1,%al
  215729:	74 a7                	je     2156d2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x462>
  21572b:	eb 00                	jmp    21572d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4bd>
  21572d:	eb 02                	jmp    215731 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4c1>
  21572f:	0f 0b                	ud2    
  215731:	e8 9a 55 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215736:	24 01                	and    $0x1,%al
  215738:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21573c:	e9 ec fb ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215741:	8a 44 24 27          	mov    0x27(%rsp),%al
  215745:	0f b6 f8             	movzbl %al,%edi
  215748:	83 e7 01             	and    $0x1,%edi
  21574b:	e8 40 64 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215750:	24 01                	and    $0x1,%al
  215752:	88 44 24 59          	mov    %al,0x59(%rsp)
  215756:	0f b6 44 24 59       	movzbl 0x59(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  21575b:	a8 01                	test   $0x1,%al
  21575d:	0f 84 52 ff ff ff    	je     2156b5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x445>
  215763:	eb 00                	jmp    215765 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4f5>
  215765:	eb 02                	jmp    215769 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4f9>
  215767:	0f 0b                	ud2    
  215769:	e8 62 55 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21576e:	24 01                	and    $0x1,%al
  215770:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215774:	e9 b4 fb ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215779:	8a 44 24 28          	mov    0x28(%rsp),%al
  21577d:	a8 01                	test   $0x1,%al
  21577f:	75 15                	jne    215796 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x526>
  215781:	eb 00                	jmp    215783 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x513>
  215783:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  215788:	e8 d3 05 00 00       	callq  215d60 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E>
  21578d:	88 44 24 25          	mov    %al,0x25(%rsp)
  215791:	e9 b1 00 00 00       	jmpq   215847 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5d7>
                        if !first {
  215796:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  21579a:	34 ff                	xor    $0xff,%al
  21579c:	a8 01                	test   $0x1,%al
  21579e:	75 21                	jne    2157c1 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x551>
  2157a0:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  2157a5:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2157aa:	48 8d 35 c6 b5 fe ff 	lea    -0x14a3a(%rip),%rsi        # 200d77 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x5d>
  2157b1:	ba 0c 00 00 00       	mov    $0xc,%edx
  2157b6:	e8 f5 26 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2157bb:	88 44 24 24          	mov    %al,0x24(%rsp)
  2157bf:	eb 4e                	jmp    21580f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x59f>
  2157c1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2157c6:	48 8d 35 4d b5 fe ff 	lea    -0x14ab3(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2157cd:	ba 03 00 00 00       	mov    $0x3,%edx
  2157d2:	e8 d9 26 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2157d7:	88 44 24 23          	mov    %al,0x23(%rsp)
  2157db:	8a 44 24 23          	mov    0x23(%rsp),%al
  2157df:	0f b6 f8             	movzbl %al,%edi
  2157e2:	83 e7 01             	and    $0x1,%edi
  2157e5:	e8 a6 63 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2157ea:	24 01                	and    $0x1,%al
  2157ec:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  2157f0:	0f b6 44 24 5a       	movzbl 0x5a(%rsp),%eax
  2157f5:	a8 01                	test   $0x1,%al
  2157f7:	74 a7                	je     2157a0 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x530>
  2157f9:	eb 00                	jmp    2157fb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x58b>
  2157fb:	eb 02                	jmp    2157ff <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x58f>
  2157fd:	0f 0b                	ud2    
  2157ff:	e8 cc 54 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215804:	24 01                	and    $0x1,%al
  215806:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21580a:	e9 1e fb ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21580f:	8a 44 24 24          	mov    0x24(%rsp),%al
  215813:	0f b6 f8             	movzbl %al,%edi
  215816:	83 e7 01             	and    $0x1,%edi
  215819:	e8 72 63 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21581e:	24 01                	and    $0x1,%al
  215820:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  215824:	0f b6 44 24 5b       	movzbl 0x5b(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  215829:	a8 01                	test   $0x1,%al
  21582b:	0f 84 52 ff ff ff    	je     215783 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x513>
  215831:	eb 00                	jmp    215833 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5c3>
  215833:	eb 02                	jmp    215837 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5c7>
  215835:	0f 0b                	ud2    
  215837:	e8 94 54 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21583c:	24 01                	and    $0x1,%al
  21583e:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215842:	e9 e6 fa ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215847:	8a 44 24 25          	mov    0x25(%rsp),%al
  21584b:	a8 01                	test   $0x1,%al
  21584d:	75 15                	jne    215864 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5f4>
  21584f:	eb 00                	jmp    215851 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5e1>
  215851:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  215856:	e8 55 05 00 00       	callq  215db0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E>
  21585b:	88 44 24 22          	mov    %al,0x22(%rsp)
  21585f:	e9 b1 00 00 00       	jmpq   215915 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6a5>
                        if !first {
  215864:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  215868:	34 ff                	xor    $0xff,%al
  21586a:	a8 01                	test   $0x1,%al
  21586c:	75 21                	jne    21588f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x61f>
  21586e:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  215873:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  215878:	48 8d 35 04 b5 fe ff 	lea    -0x14afc(%rip),%rsi        # 200d83 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x69>
  21587f:	ba 03 00 00 00       	mov    $0x3,%edx
  215884:	e8 27 26 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215889:	88 44 24 21          	mov    %al,0x21(%rsp)
  21588d:	eb 4e                	jmp    2158dd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x66d>
  21588f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  215894:	48 8d 35 7f b4 fe ff 	lea    -0x14b81(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  21589b:	ba 03 00 00 00       	mov    $0x3,%edx
  2158a0:	e8 0b 26 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2158a5:	88 44 24 20          	mov    %al,0x20(%rsp)
  2158a9:	8a 44 24 20          	mov    0x20(%rsp),%al
  2158ad:	0f b6 f8             	movzbl %al,%edi
  2158b0:	83 e7 01             	and    $0x1,%edi
  2158b3:	e8 d8 62 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2158b8:	24 01                	and    $0x1,%al
  2158ba:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  2158be:	0f b6 44 24 5c       	movzbl 0x5c(%rsp),%eax
  2158c3:	a8 01                	test   $0x1,%al
  2158c5:	74 a7                	je     21586e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5fe>
  2158c7:	eb 00                	jmp    2158c9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x659>
  2158c9:	eb 02                	jmp    2158cd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x65d>
  2158cb:	0f 0b                	ud2    
  2158cd:	e8 fe 53 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2158d2:	24 01                	and    $0x1,%al
  2158d4:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2158d8:	e9 50 fa ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2158dd:	8a 44 24 21          	mov    0x21(%rsp),%al
  2158e1:	0f b6 f8             	movzbl %al,%edi
  2158e4:	83 e7 01             	and    $0x1,%edi
  2158e7:	e8 a4 62 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2158ec:	24 01                	and    $0x1,%al
  2158ee:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  2158f2:	0f b6 44 24 5d       	movzbl 0x5d(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  2158f7:	a8 01                	test   $0x1,%al
  2158f9:	0f 84 52 ff ff ff    	je     215851 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5e1>
  2158ff:	eb 00                	jmp    215901 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x691>
  215901:	eb 02                	jmp    215905 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x695>
  215903:	0f 0b                	ud2    
  215905:	e8 c6 53 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21590a:	24 01                	and    $0x1,%al
  21590c:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215910:	e9 18 fa ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215915:	8a 44 24 22          	mov    0x22(%rsp),%al
  215919:	a8 01                	test   $0x1,%al
  21591b:	75 1e                	jne    21593b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6cb>
  21591d:	eb 00                	jmp    21591f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6af>
  21591f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  215924:	48 8b 00             	mov    (%rax),%rax
  215927:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21592c:	e8 4f 02 00 00       	callq  215b80 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes3all17h682a3871c1948bd0E>
  215931:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  215936:	e9 b1 00 00 00       	jmpq   2159ec <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x77c>
                        if !first {
  21593b:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  21593f:	34 ff                	xor    $0xff,%al
  215941:	a8 01                	test   $0x1,%al
  215943:	75 21                	jne    215966 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6f6>
  215945:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21594a:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  21594f:	48 8d 35 30 b4 fe ff 	lea    -0x14bd0(%rip),%rsi        # 200d86 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x6c>
  215956:	ba 03 00 00 00       	mov    $0x3,%edx
  21595b:	e8 50 25 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215960:	88 44 24 17          	mov    %al,0x17(%rsp)
  215964:	eb 4e                	jmp    2159b4 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x744>
  215966:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21596b:	48 8d 35 a8 b3 fe ff 	lea    -0x14c58(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  215972:	ba 03 00 00 00       	mov    $0x3,%edx
  215977:	e8 34 25 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21597c:	88 44 24 16          	mov    %al,0x16(%rsp)
  215980:	8a 44 24 16          	mov    0x16(%rsp),%al
  215984:	0f b6 f8             	movzbl %al,%edi
  215987:	83 e7 01             	and    $0x1,%edi
  21598a:	e8 01 62 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21598f:	24 01                	and    $0x1,%al
  215991:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  215995:	0f b6 44 24 5e       	movzbl 0x5e(%rsp),%eax
  21599a:	a8 01                	test   $0x1,%al
  21599c:	74 a7                	je     215945 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6d5>
  21599e:	eb 00                	jmp    2159a0 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x730>
  2159a0:	eb 02                	jmp    2159a4 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x734>
  2159a2:	0f 0b                	ud2    
  2159a4:	e8 27 53 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2159a9:	24 01                	and    $0x1,%al
  2159ab:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2159af:	e9 79 f9 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2159b4:	8a 44 24 17          	mov    0x17(%rsp),%al
  2159b8:	0f b6 f8             	movzbl %al,%edi
  2159bb:	83 e7 01             	and    $0x1,%edi
  2159be:	e8 cd 61 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2159c3:	24 01                	and    $0x1,%al
  2159c5:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  2159c9:	0f b6 44 24 5f       	movzbl 0x5f(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  2159ce:	a8 01                	test   $0x1,%al
  2159d0:	0f 84 49 ff ff ff    	je     21591f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6af>
  2159d6:	eb 00                	jmp    2159d8 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x768>
  2159d8:	eb 02                	jmp    2159dc <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x76c>
  2159da:	0f 0b                	ud2    
  2159dc:	e8 ef 52 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2159e1:	24 01                	and    $0x1,%al
  2159e3:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2159e7:	e9 41 f9 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
                let extra_bits = self.bits & !Self::all().bits();
  2159ec:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2159f1:	e8 9a 01 00 00       	callq  215b90 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes4bits17h07bfc0a325134ecdE>
  2159f6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2159fb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  215a00:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  215a05:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  215a09:	48 21 c8             	and    %rcx,%rax
  215a0c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  215a11:	48 83 7c 24 60 00    	cmpq   $0x0,0x60(%rsp)
  215a17:	75 10                	jne    215a29 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7b9>
  215a19:	f6 44 24 4d 01       	testb  $0x1,0x4d(%rsp)
  215a1e:	0f 85 09 01 00 00    	jne    215b2d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8bd>
  215a24:	e9 fa 00 00 00       	jmpq   215b23 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8b3>
                    if !first {
  215a29:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  215a2d:	34 ff                	xor    $0xff,%al
  215a2f:	a8 01                	test   $0x1,%al
  215a31:	75 21                	jne    215a54 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7e4>
  215a33:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    first = false;
  215a38:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                    f.write_str("0x")?;
  215a3d:	48 8d 35 45 b3 fe ff 	lea    -0x14cbb(%rip),%rsi        # 200d89 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x6f>
  215a44:	ba 02 00 00 00       	mov    $0x2,%edx
  215a49:	e8 62 24 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215a4e:	88 44 24 07          	mov    %al,0x7(%rsp)
  215a52:	eb 4e                	jmp    215aa2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x832>
  215a54:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        f.write_str(" | ")?;
  215a59:	48 8d 35 ba b2 fe ff 	lea    -0x14d46(%rip),%rsi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  215a60:	ba 03 00 00 00       	mov    $0x3,%edx
  215a65:	e8 46 24 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215a6a:	88 44 24 06          	mov    %al,0x6(%rsp)
  215a6e:	8a 44 24 06          	mov    0x6(%rsp),%al
  215a72:	0f b6 f8             	movzbl %al,%edi
  215a75:	83 e7 01             	and    $0x1,%edi
  215a78:	e8 13 61 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215a7d:	24 01                	and    $0x1,%al
  215a7f:	88 44 24 74          	mov    %al,0x74(%rsp)
  215a83:	0f b6 44 24 74       	movzbl 0x74(%rsp),%eax
  215a88:	a8 01                	test   $0x1,%al
  215a8a:	74 a7                	je     215a33 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7c3>
  215a8c:	eb 00                	jmp    215a8e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x81e>
  215a8e:	eb 02                	jmp    215a92 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x822>
  215a90:	0f 0b                	ud2    
  215a92:	e8 39 52 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215a97:	24 01                	and    $0x1,%al
  215a99:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215a9d:	e9 8b f8 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215aa2:	8a 44 24 07          	mov    0x7(%rsp),%al
  215aa6:	0f b6 f8             	movzbl %al,%edi
  215aa9:	83 e7 01             	and    $0x1,%edi
  215aac:	e8 df 60 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215ab1:	24 01                	and    $0x1,%al
  215ab3:	88 44 24 75          	mov    %al,0x75(%rsp)
  215ab7:	0f b6 44 24 75       	movzbl 0x75(%rsp),%eax
                    f.write_str("0x")?;
  215abc:	a8 01                	test   $0x1,%al
  215abe:	74 06                	je     215ac6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x856>
  215ac0:	eb 00                	jmp    215ac2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x852>
  215ac2:	eb 17                	jmp    215adb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x86b>
  215ac4:	0f 0b                	ud2    
  215ac6:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  215acb:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  215ad0:	e8 fb f3 01 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  215ad5:	88 44 24 05          	mov    %al,0x5(%rsp)
  215ad9:	eb 10                	jmp    215aeb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x87b>
  215adb:	e8 f0 51 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215ae0:	24 01                	and    $0x1,%al
  215ae2:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215ae6:	e9 42 f8 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215aeb:	8a 44 24 05          	mov    0x5(%rsp),%al
  215aef:	0f b6 f8             	movzbl %al,%edi
  215af2:	83 e7 01             	and    $0x1,%edi
  215af5:	e8 96 60 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215afa:	24 01                	and    $0x1,%al
  215afc:	88 44 24 76          	mov    %al,0x76(%rsp)
  215b00:	0f b6 44 24 76       	movzbl 0x76(%rsp),%eax
  215b05:	a8 01                	test   $0x1,%al
  215b07:	0f 84 0c ff ff ff    	je     215a19 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7a9>
  215b0d:	eb 00                	jmp    215b0f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x89f>
  215b0f:	eb 02                	jmp    215b13 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8a3>
  215b11:	0f 0b                	ud2    
  215b13:	e8 b8 51 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215b18:	24 01                	and    $0x1,%al
  215b1a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215b1e:	e9 0a f8 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
                Ok(())
  215b23:	c6 44 24 4c 00       	movb   $0x0,0x4c(%rsp)
            }
  215b28:	e9 00 f8 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215b2d:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    f.write_str("(empty)")?;
  215b32:	48 8d 35 52 b2 fe ff 	lea    -0x14dae(%rip),%rsi        # 200d8b <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x71>
  215b39:	ba 07 00 00 00       	mov    $0x7,%edx
  215b3e:	e8 6d 23 02 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  215b43:	88 44 24 04          	mov    %al,0x4(%rsp)
  215b47:	8a 44 24 04          	mov    0x4(%rsp),%al
  215b4b:	0f b6 f8             	movzbl %al,%edi
  215b4e:	83 e7 01             	and    $0x1,%edi
  215b51:	e8 3a 60 ff ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  215b56:	24 01                	and    $0x1,%al
  215b58:	88 44 24 77          	mov    %al,0x77(%rsp)
  215b5c:	0f b6 44 24 77       	movzbl 0x77(%rsp),%eax
  215b61:	a8 01                	test   $0x1,%al
  215b63:	74 be                	je     215b23 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8b3>
  215b65:	eb 00                	jmp    215b67 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8f7>
  215b67:	eb 02                	jmp    215b6b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8fb>
  215b69:	0f 0b                	ud2    
  215b6b:	e8 60 51 ff ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  215b70:	24 01                	and    $0x1,%al
  215b72:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  215b76:	e9 b2 f7 ff ff       	jmpq   21532d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  215b7b:	cc                   	int3   
  215b7c:	cc                   	int3   
  215b7d:	cc                   	int3   
  215b7e:	cc                   	int3   
  215b7f:	cc                   	int3   

0000000000215b80 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes3all17h682a3871c1948bd0E>:
            pub const fn all() -> Self {
  215b80:	50                   	push   %rax
                __impl_all_bitflags! {
  215b81:	b8 7f 80 00 80       	mov    $0x8000807f,%eax
  215b86:	48 89 04 24          	mov    %rax,(%rsp)
            }
  215b8a:	48 8b 04 24          	mov    (%rsp),%rax
  215b8e:	59                   	pop    %rcx
  215b8f:	c3                   	retq   

0000000000215b90 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes4bits17h07bfc0a325134ecdE>:
            pub const fn bits(&self) -> $T {
  215b90:	50                   	push   %rax
  215b91:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  215b95:	48 8b 07             	mov    (%rdi),%rax
            }
  215b98:	59                   	pop    %rcx
  215b99:	c3                   	retq   
  215b9a:	cc                   	int3   
  215b9b:	cc                   	int3   
  215b9c:	cc                   	int3   
  215b9d:	cc                   	int3   
  215b9e:	cc                   	int3   
  215b9f:	cc                   	int3   

0000000000215ba0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E>:
                            fn $Flag(&self) -> bool {
  215ba0:	48 83 ec 18          	sub    $0x18,%rsp
  215ba4:	48 89 3c 24          	mov    %rdi,(%rsp)
  215ba8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215bad:	31 c0                	xor    %eax,%eax
  215baf:	a8 01                	test   $0x1,%al
  215bb1:	75 1a                	jne    215bcd <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E+0x2d>
  215bb3:	48 8b 04 24          	mov    (%rsp),%rax
  215bb7:	48 8b 00             	mov    (%rax),%rax
  215bba:	48 83 e0 01          	and    $0x1,%rax
  215bbe:	48 83 f8 01          	cmp    $0x1,%rax
  215bc2:	0f 94 c0             	sete   %al
  215bc5:	24 01                	and    $0x1,%al
  215bc7:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215bcb:	eb 05                	jmp    215bd2 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E+0x32>
  215bcd:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    (
        $(#[$filtered:meta])*
        fn $($item:tt)*
    ) => {
        $(#[$filtered])*
        fn $($item)*
  215bd2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215bd6:	24 01                	and    $0x1,%al
  215bd8:	0f b6 c0             	movzbl %al,%eax
  215bdb:	48 83 c4 18          	add    $0x18,%rsp
  215bdf:	c3                   	retq   

0000000000215be0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE>:
                            fn $Flag(&self) -> bool {
  215be0:	48 83 ec 18          	sub    $0x18,%rsp
  215be4:	48 89 3c 24          	mov    %rdi,(%rsp)
  215be8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215bed:	31 c0                	xor    %eax,%eax
  215bef:	a8 01                	test   $0x1,%al
  215bf1:	75 1a                	jne    215c0d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE+0x2d>
  215bf3:	48 8b 04 24          	mov    (%rsp),%rax
  215bf7:	48 8b 00             	mov    (%rax),%rax
  215bfa:	48 83 e0 02          	and    $0x2,%rax
  215bfe:	48 83 f8 02          	cmp    $0x2,%rax
  215c02:	0f 94 c0             	sete   %al
  215c05:	24 01                	and    $0x1,%al
  215c07:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215c0b:	eb 05                	jmp    215c12 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE+0x32>
  215c0d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215c12:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215c16:	24 01                	and    $0x1,%al
  215c18:	0f b6 c0             	movzbl %al,%eax
  215c1b:	48 83 c4 18          	add    $0x18,%rsp
  215c1f:	c3                   	retq   

0000000000215c20 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E>:
                            fn $Flag(&self) -> bool {
  215c20:	48 83 ec 18          	sub    $0x18,%rsp
  215c24:	48 89 3c 24          	mov    %rdi,(%rsp)
  215c28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215c2d:	31 c0                	xor    %eax,%eax
  215c2f:	a8 01                	test   $0x1,%al
  215c31:	75 1a                	jne    215c4d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E+0x2d>
  215c33:	48 8b 04 24          	mov    (%rsp),%rax
  215c37:	48 8b 00             	mov    (%rax),%rax
  215c3a:	48 83 e0 04          	and    $0x4,%rax
  215c3e:	48 83 f8 04          	cmp    $0x4,%rax
  215c42:	0f 94 c0             	sete   %al
  215c45:	24 01                	and    $0x1,%al
  215c47:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215c4b:	eb 05                	jmp    215c52 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E+0x32>
  215c4d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215c52:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215c56:	24 01                	and    $0x1,%al
  215c58:	0f b6 c0             	movzbl %al,%eax
  215c5b:	48 83 c4 18          	add    $0x18,%rsp
  215c5f:	c3                   	retq   

0000000000215c60 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E>:
                            fn $Flag(&self) -> bool {
  215c60:	48 83 ec 18          	sub    $0x18,%rsp
  215c64:	48 89 3c 24          	mov    %rdi,(%rsp)
  215c68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215c6d:	31 c0                	xor    %eax,%eax
  215c6f:	a8 01                	test   $0x1,%al
  215c71:	75 1a                	jne    215c8d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E+0x2d>
  215c73:	48 8b 04 24          	mov    (%rsp),%rax
  215c77:	48 8b 00             	mov    (%rax),%rax
  215c7a:	48 83 e0 08          	and    $0x8,%rax
  215c7e:	48 83 f8 08          	cmp    $0x8,%rax
  215c82:	0f 94 c0             	sete   %al
  215c85:	24 01                	and    $0x1,%al
  215c87:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215c8b:	eb 05                	jmp    215c92 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E+0x32>
  215c8d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215c92:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215c96:	24 01                	and    $0x1,%al
  215c98:	0f b6 c0             	movzbl %al,%eax
  215c9b:	48 83 c4 18          	add    $0x18,%rsp
  215c9f:	c3                   	retq   

0000000000215ca0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E>:
                            fn $Flag(&self) -> bool {
  215ca0:	48 83 ec 18          	sub    $0x18,%rsp
  215ca4:	48 89 3c 24          	mov    %rdi,(%rsp)
  215ca8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215cad:	31 c0                	xor    %eax,%eax
  215caf:	a8 01                	test   $0x1,%al
  215cb1:	75 1a                	jne    215ccd <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E+0x2d>
  215cb3:	48 8b 04 24          	mov    (%rsp),%rax
  215cb7:	48 8b 00             	mov    (%rax),%rax
  215cba:	48 83 e0 10          	and    $0x10,%rax
  215cbe:	48 83 f8 10          	cmp    $0x10,%rax
  215cc2:	0f 94 c0             	sete   %al
  215cc5:	24 01                	and    $0x1,%al
  215cc7:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215ccb:	eb 05                	jmp    215cd2 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E+0x32>
  215ccd:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215cd2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215cd6:	24 01                	and    $0x1,%al
  215cd8:	0f b6 c0             	movzbl %al,%eax
  215cdb:	48 83 c4 18          	add    $0x18,%rsp
  215cdf:	c3                   	retq   

0000000000215ce0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E>:
                            fn $Flag(&self) -> bool {
  215ce0:	48 83 ec 18          	sub    $0x18,%rsp
  215ce4:	48 89 3c 24          	mov    %rdi,(%rsp)
  215ce8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215ced:	31 c0                	xor    %eax,%eax
  215cef:	a8 01                	test   $0x1,%al
  215cf1:	75 1a                	jne    215d0d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E+0x2d>
  215cf3:	48 8b 04 24          	mov    (%rsp),%rax
  215cf7:	48 8b 00             	mov    (%rax),%rax
  215cfa:	48 83 e0 20          	and    $0x20,%rax
  215cfe:	48 83 f8 20          	cmp    $0x20,%rax
  215d02:	0f 94 c0             	sete   %al
  215d05:	24 01                	and    $0x1,%al
  215d07:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215d0b:	eb 05                	jmp    215d12 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E+0x32>
  215d0d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215d12:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215d16:	24 01                	and    $0x1,%al
  215d18:	0f b6 c0             	movzbl %al,%eax
  215d1b:	48 83 c4 18          	add    $0x18,%rsp
  215d1f:	c3                   	retq   

0000000000215d20 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E>:
                            fn $Flag(&self) -> bool {
  215d20:	48 83 ec 18          	sub    $0x18,%rsp
  215d24:	48 89 3c 24          	mov    %rdi,(%rsp)
  215d28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215d2d:	31 c0                	xor    %eax,%eax
  215d2f:	a8 01                	test   $0x1,%al
  215d31:	75 1a                	jne    215d4d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E+0x2d>
  215d33:	48 8b 04 24          	mov    (%rsp),%rax
  215d37:	48 8b 00             	mov    (%rax),%rax
  215d3a:	48 83 e0 40          	and    $0x40,%rax
  215d3e:	48 83 f8 40          	cmp    $0x40,%rax
  215d42:	0f 94 c0             	sete   %al
  215d45:	24 01                	and    $0x1,%al
  215d47:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215d4b:	eb 05                	jmp    215d52 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E+0x32>
  215d4d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215d52:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215d56:	24 01                	and    $0x1,%al
  215d58:	0f b6 c0             	movzbl %al,%eax
  215d5b:	48 83 c4 18          	add    $0x18,%rsp
  215d5f:	c3                   	retq   

0000000000215d60 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E>:
                            fn $Flag(&self) -> bool {
  215d60:	48 83 ec 18          	sub    $0x18,%rsp
  215d64:	48 89 3c 24          	mov    %rdi,(%rsp)
  215d68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215d6d:	31 c0                	xor    %eax,%eax
  215d6f:	a8 01                	test   $0x1,%al
  215d71:	75 1e                	jne    215d91 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E+0x31>
  215d73:	48 8b 04 24          	mov    (%rsp),%rax
  215d77:	48 8b 00             	mov    (%rax),%rax
  215d7a:	48 25 00 80 00 00    	and    $0x8000,%rax
  215d80:	48 3d 00 80 00 00    	cmp    $0x8000,%rax
  215d86:	0f 94 c0             	sete   %al
  215d89:	24 01                	and    $0x1,%al
  215d8b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215d8f:	eb 05                	jmp    215d96 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E+0x36>
  215d91:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215d96:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215d9a:	24 01                	and    $0x1,%al
  215d9c:	0f b6 c0             	movzbl %al,%eax
  215d9f:	48 83 c4 18          	add    $0x18,%rsp
  215da3:	c3                   	retq   
  215da4:	cc                   	int3   
  215da5:	cc                   	int3   
  215da6:	cc                   	int3   
  215da7:	cc                   	int3   
  215da8:	cc                   	int3   
  215da9:	cc                   	int3   
  215daa:	cc                   	int3   
  215dab:	cc                   	int3   
  215dac:	cc                   	int3   
  215dad:	cc                   	int3   
  215dae:	cc                   	int3   
  215daf:	cc                   	int3   

0000000000215db0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E>:
                            fn $Flag(&self) -> bool {
  215db0:	48 83 ec 18          	sub    $0x18,%rsp
  215db4:	48 89 3c 24          	mov    %rdi,(%rsp)
  215db8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215dbd:	31 c0                	xor    %eax,%eax
  215dbf:	a8 01                	test   $0x1,%al
  215dc1:	75 24                	jne    215de7 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E+0x37>
  215dc3:	48 8b 0c 24          	mov    (%rsp),%rcx
  215dc7:	48 b8 00 00 00 80 00 	movabs $0x80000000,%rax
  215dce:	00 00 00 
  215dd1:	48 23 01             	and    (%rcx),%rax
  215dd4:	b9 00 00 00 80       	mov    $0x80000000,%ecx
  215dd9:	48 39 c8             	cmp    %rcx,%rax
  215ddc:	0f 94 c0             	sete   %al
  215ddf:	24 01                	and    $0x1,%al
  215de1:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215de5:	eb 05                	jmp    215dec <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E+0x3c>
  215de7:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  215dec:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215df0:	24 01                	and    $0x1,%al
  215df2:	0f b6 c0             	movzbl %al,%eax
  215df5:	48 83 c4 18          	add    $0x18,%rsp
  215df9:	c3                   	retq   
  215dfa:	cc                   	int3   
  215dfb:	cc                   	int3   
  215dfc:	cc                   	int3   
  215dfd:	cc                   	int3   
  215dfe:	cc                   	int3   
  215dff:	cc                   	int3   

0000000000215e00 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE>:
pub mod font;
pub mod framebuffer;

use framebuffer::{setup_framebuffer, Framebuffer, Pixel};

pub fn init() {
  215e00:	48 83 ec 48          	sub    $0x48,%rsp
    setup_framebuffer();
  215e04:	e8 f7 12 00 00       	callq  217100 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E>

    let fb_locked_opt = Framebuffer::get_buffer_lock();
  215e09:	e8 22 0c 00 00       	callq  216a30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>
  215e0e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215e13:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  215e18:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    if fb_locked_opt.is_some() {
  215e1d:	e8 ce bd ff ff       	callq  211bf0 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>
  215e22:	88 44 24 17          	mov    %al,0x17(%rsp)
  215e26:	8a 44 24 17          	mov    0x17(%rsp),%al
  215e2a:	a8 01                	test   $0x1,%al
  215e2c:	75 07                	jne    215e35 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x35>
  215e2e:	eb 00                	jmp    215e30 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x30>
        };

        let mut fb_lock = fb_locked_opt.as_ref().unwrap().lock();
        Framebuffer::fill(&mut fb_lock, black);
    }
}
  215e30:	48 83 c4 48          	add    $0x48,%rsp
  215e34:	c3                   	retq   
  215e35:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        let black = Pixel {
  215e3a:	c6 44 24 20 00       	movb   $0x0,0x20(%rsp)
  215e3f:	c6 44 24 21 00       	movb   $0x0,0x21(%rsp)
  215e44:	c6 44 24 22 00       	movb   $0x0,0x22(%rsp)
  215e49:	c6 44 24 23 00       	movb   $0x0,0x23(%rsp)
        let mut fb_lock = fb_locked_opt.as_ref().unwrap().lock();
  215e4e:	e8 2d b0 ff ff       	callq  210e80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  215e53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215e58:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  215e5d:	48 8d 35 84 4a 02 00 	lea    0x24a84(%rip),%rsi        # 23a8e8 <memcmp+0x1ba8>
  215e64:	e8 37 b9 ff ff       	callq  2117a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  215e69:	48 89 04 24          	mov    %rax,(%rsp)
  215e6d:	48 8b 3c 24          	mov    (%rsp),%rdi
  215e71:	e8 fa 8a 01 00       	callq  22e970 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  215e76:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  215e7b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        Framebuffer::fill(&mut fb_lock, black);
  215e80:	8b 44 24 20          	mov    0x20(%rsp),%eax
  215e84:	89 44 24 38          	mov    %eax,0x38(%rsp)
  215e88:	8b 74 24 38          	mov    0x38(%rsp),%esi
  215e8c:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  215e91:	e8 6a 0f 00 00       	callq  216e00 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer4fill17h1dc0516c32df6ad3E>
    }
  215e96:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  215e9b:	e8 30 61 ff ff       	callq  20bfd0 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  215ea0:	eb 8e                	jmp    215e30 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x30>
  215ea2:	cc                   	int3   
  215ea3:	cc                   	int3   
  215ea4:	cc                   	int3   
  215ea5:	cc                   	int3   
  215ea6:	cc                   	int3   
  215ea7:	cc                   	int3   
  215ea8:	cc                   	int3   
  215ea9:	cc                   	int3   
  215eaa:	cc                   	int3   
  215eab:	cc                   	int3   
  215eac:	cc                   	int3   
  215ead:	cc                   	int3   
  215eae:	cc                   	int3   
  215eaf:	cc                   	int3   

0000000000215eb0 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E>:
    pub fn total_ticks(&self) -> u128 {
        (self.epochs * u64::max_value() + self.ticks) as u128
    }

    #[inline]
    pub fn update_tick(&mut self) {
  215eb0:	48 83 ec 28          	sub    $0x28,%rsp
  215eb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215eb9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        if self.ticks >= u64::max_value() {
  215ebe:	48 8b 07             	mov    (%rdi),%rax
  215ec1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215ec6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  215ecb:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  215ecf:	73 1a                	jae    215eeb <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E+0x3b>
  215ed1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            self.epochs += 1;
            self.ticks = 0;
        }

        self.ticks += 1;
  215ed6:	48 8b 00             	mov    (%rax),%rax
  215ed9:	48 83 c0 01          	add    $0x1,%rax
  215edd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215ee2:	0f 92 c0             	setb   %al
  215ee5:	a8 01                	test   $0x1,%al
  215ee7:	75 5c                	jne    215f45 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E+0x95>
  215ee9:	eb 48                	jmp    215f33 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E+0x83>
  215eeb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            self.epochs += 1;
  215ef0:	48 8b 40 08          	mov    0x8(%rax),%rax
  215ef4:	48 83 c0 01          	add    $0x1,%rax
  215ef8:	48 89 04 24          	mov    %rax,(%rsp)
  215efc:	0f 92 c0             	setb   %al
  215eff:	a8 01                	test   $0x1,%al
  215f01:	75 16                	jne    215f19 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E+0x69>
  215f03:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215f08:	48 8b 0c 24          	mov    (%rsp),%rcx
  215f0c:	48 89 48 08          	mov    %rcx,0x8(%rax)
            self.ticks = 0;
  215f10:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        if self.ticks >= u64::max_value() {
  215f17:	eb b8                	jmp    215ed1 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E+0x21>
            self.epochs += 1;
  215f19:	48 8d 3d a0 ae fe ff 	lea    -0x15160(%rip),%rdi        # 200dc0 <str.0>
  215f20:	48 8d 15 d9 49 02 00 	lea    0x249d9(%rip),%rdx        # 23a900 <memcmp+0x1bc0>
  215f27:	be 1c 00 00 00       	mov    $0x1c,%esi
  215f2c:	e8 bf fc 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215f31:	0f 0b                	ud2    
  215f33:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215f38:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        self.ticks += 1;
  215f3d:	48 89 08             	mov    %rcx,(%rax)
    }
  215f40:	48 83 c4 28          	add    $0x28,%rsp
  215f44:	c3                   	retq   
        self.ticks += 1;
  215f45:	48 8d 3d 74 ae fe ff 	lea    -0x1518c(%rip),%rdi        # 200dc0 <str.0>
  215f4c:	48 8d 15 c5 49 02 00 	lea    0x249c5(%rip),%rdx        # 23a918 <memcmp+0x1bd8>
  215f53:	be 1c 00 00 00       	mov    $0x1c,%esi
  215f58:	e8 93 fc 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215f5d:	0f 0b                	ud2    
  215f5f:	cc                   	int3   

0000000000215f60 <_ZN9r3_kernel6system5timer11SystemTimer9next_shot17h5edc9d9811143a86E>:
/// Provides methods to control timer
pub struct SystemTimer;

impl SystemTimer {
    #[inline]
    pub fn next_shot() {
  215f60:	50                   	push   %rax
        TSCTimerShot::reset_current_shot();
  215f61:	e8 aa 59 00 00       	callq  21b910 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot18reset_current_shot17h823569756d8e1e88E>
        TSCTimerShot::create_shot_after_ns(SYSTEM_TICK_DURATION);
  215f66:	bf 00 94 35 77       	mov    $0x77359400,%edi
  215f6b:	e8 00 5a 00 00       	callq  21b970 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot20create_shot_after_ns17ha68330110c36efdfE>
    }
  215f70:	58                   	pop    %rax
  215f71:	c3                   	retq   
  215f72:	cc                   	int3   
  215f73:	cc                   	int3   
  215f74:	cc                   	int3   
  215f75:	cc                   	int3   
  215f76:	cc                   	int3   
  215f77:	cc                   	int3   
  215f78:	cc                   	int3   
  215f79:	cc                   	int3   
  215f7a:	cc                   	int3   
  215f7b:	cc                   	int3   
  215f7c:	cc                   	int3   
  215f7d:	cc                   	int3   
  215f7e:	cc                   	int3   
  215f7f:	cc                   	int3   

0000000000215f80 <_ZN9r3_kernel6system5timer11SystemTimer9post_shot17h42190481ab8f033aE>:

    /// This function will be called after every timer show
    #[inline]
    pub fn post_shot() {
  215f80:	48 83 ec 18          	sub    $0x18,%rsp
        let mut ticks_lock = SYSTEM_TICKS.lock();
  215f84:	48 8d 3d bd 8e 02 00 	lea    0x28ebd(%rip),%rdi        # 23ee48 <_ZN9r3_kernel6system5timer12SYSTEM_TICKS17h0b1f3fb7b20e8a5cE>
  215f8b:	e8 20 8b 01 00       	callq  22eab0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h78b13a586f7972b5E>
  215f90:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  215f95:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        ticks_lock.update_tick();
  215f9a:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  215f9f:	e8 3c 8d 01 00       	callq  22ece0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776c179591dfdcE>
  215fa4:	48 89 04 24          	mov    %rax,(%rsp)
  215fa8:	48 8b 3c 24          	mov    (%rsp),%rdi
  215fac:	e8 ff fe ff ff       	callq  215eb0 <_ZN9r3_kernel6system5timer12SystemTicker11update_tick17h3e8c2ba9520245b7E>
        Self::next_shot();
  215fb1:	e8 aa ff ff ff       	callq  215f60 <_ZN9r3_kernel6system5timer11SystemTimer9next_shot17h5edc9d9811143a86E>
    }
  215fb6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  215fbb:	e8 00 63 ff ff       	callq  20c2c0 <_ZN4core3ptr90drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..system..timer..SystemTicker$GT$$GT$17h976a9ee0ef554056E>
  215fc0:	48 83 c4 18          	add    $0x18,%rsp
  215fc4:	c3                   	retq   
  215fc5:	cc                   	int3   
  215fc6:	cc                   	int3   
  215fc7:	cc                   	int3   
  215fc8:	cc                   	int3   
  215fc9:	cc                   	int3   
  215fca:	cc                   	int3   
  215fcb:	cc                   	int3   
  215fcc:	cc                   	int3   
  215fcd:	cc                   	int3   
  215fce:	cc                   	int3   
  215fcf:	cc                   	int3   

0000000000215fd0 <_ZN9r3_kernel6system5timer11SystemTimer11start_ticks17h8830d3a377e279abE>:
            asm!("0x30");
        }
    }

    #[inline]
    pub fn start_ticks() {
  215fd0:	50                   	push   %rax
        Self::next_shot();
  215fd1:	e8 8a ff ff ff       	callq  215f60 <_ZN9r3_kernel6system5timer11SystemTimer9next_shot17h5edc9d9811143a86E>
    }
  215fd6:	58                   	pop    %rax
  215fd7:	c3                   	retq   
  215fd8:	cc                   	int3   
  215fd9:	cc                   	int3   
  215fda:	cc                   	int3   
  215fdb:	cc                   	int3   
  215fdc:	cc                   	int3   
  215fdd:	cc                   	int3   
  215fde:	cc                   	int3   
  215fdf:	cc                   	int3   

0000000000215fe0 <_ZN9r3_kernel4acpi5lapic11ProcessorID6is_bsp17h31a7bfd8216f94bcE>:

pub struct ProcessorID(u8);

impl ProcessorID {
    #[inline]
    pub fn is_bsp(&self) -> bool {
  215fe0:	50                   	push   %rax
  215fe1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 == 0
  215fe5:	80 3f 00             	cmpb   $0x0,(%rdi)
  215fe8:	0f 94 c0             	sete   %al
    }
  215feb:	24 01                	and    $0x1,%al
  215fed:	0f b6 c0             	movzbl %al,%eax
  215ff0:	59                   	pop    %rcx
  215ff1:	c3                   	retq   
  215ff2:	cc                   	int3   
  215ff3:	cc                   	int3   
  215ff4:	cc                   	int3   
  215ff5:	cc                   	int3   
  215ff6:	cc                   	int3   
  215ff7:	cc                   	int3   
  215ff8:	cc                   	int3   
  215ff9:	cc                   	int3   
  215ffa:	cc                   	int3   
  215ffb:	cc                   	int3   
  215ffc:	cc                   	int3   
  215ffd:	cc                   	int3   
  215ffe:	cc                   	int3   
  215fff:	cc                   	int3   

0000000000216000 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13get_base_addr17hbc354d52b4a875aeE>:
/// implements IO functions used by LAPIC
pub struct LAPICRegistersIO;

impl LAPICRegistersIO {
    #[inline]
    pub fn get_base_addr() -> VirtualAddress {
  216000:	48 83 ec 28          	sub    $0x28,%rsp
        PROCESSORS.lock().lapic_address
  216004:	48 8d 3d df ce fe ff 	lea    -0x13121(%rip),%rdi        # 202eea <_ZN9r3_kernel4acpi4madt10PROCESSORS17h735ab6db5847e5b6E>
  21600b:	e8 70 21 01 00       	callq  228180 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0dc1ee704a09c03E>
  216010:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216015:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21601a:	e8 61 88 01 00       	callq  22e880 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h31f10766e1811e6aE>
  21601f:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  216024:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216029:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21602e:	e8 0d 8c 01 00       	callq  22ec40 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  216033:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216038:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21603d:	48 8b 40 18          	mov    0x18(%rax),%rax
  216041:	48 89 04 24          	mov    %rax,(%rsp)
    }
  216045:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21604a:	e8 31 62 ff ff       	callq  20c280 <_ZN4core3ptr85drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17ha6c6c78d0d7b5940E>
  21604f:	48 8b 04 24          	mov    (%rsp),%rax
  216053:	48 83 c4 28          	add    $0x28,%rsp
  216057:	c3                   	retq   
  216058:	cc                   	int3   
  216059:	cc                   	int3   
  21605a:	cc                   	int3   
  21605b:	cc                   	int3   
  21605c:	cc                   	int3   
  21605d:	cc                   	int3   
  21605e:	cc                   	int3   
  21605f:	cc                   	int3   

0000000000216060 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13read_register17h5c111c048670675aE>:

    #[inline]
    pub fn read_register(register: u64) -> u32 {
  216060:	48 83 ec 48          	sub    $0x48,%rsp
  216064:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  216069:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        let addr = Self::get_base_addr();
  21606e:	e8 8d ff ff ff       	callq  216000 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13get_base_addr17hbc354d52b4a875aeE>
  216073:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        let reader = MemoryIO::new(VirtualAddress::from_u64(addr.as_u64() + register), false);
  216078:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21607d:	e8 3e 22 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  216082:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216087:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21608c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216091:	48 01 c8             	add    %rcx,%rax
  216094:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216099:	0f 92 c0             	setb   %al
  21609c:	a8 01                	test   $0x1,%al
  21609e:	75 11                	jne    2160b1 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13read_register17h5c111c048670675aE+0x51>
  2160a0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2160a5:	e8 26 22 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  2160aa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2160af:	eb 1a                	jmp    2160cb <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13read_register17h5c111c048670675aE+0x6b>
  2160b1:	48 8d 3d 38 ad fe ff 	lea    -0x152c8(%rip),%rdi        # 200df0 <str.0>
  2160b8:	48 8d 15 71 48 02 00 	lea    0x24871(%rip),%rdx        # 23a930 <memcmp+0x1bf0>
  2160bf:	be 1c 00 00 00       	mov    $0x1c,%esi
  2160c4:	e8 27 fb 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2160c9:	0f 0b                	ud2    
  2160cb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2160d0:	31 f6                	xor    %esi,%esi
  2160d2:	e8 79 0f 01 00       	callq  227050 <_ZN9r3_kernel2mm2io8MemoryIO3new17h5d7a21f81a45f499E>
  2160d7:	88 54 24 38          	mov    %dl,0x38(%rsp)
  2160db:	48 89 44 24 30       	mov    %rax,0x30(%rsp)

        reader.read_u32()
  2160e0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2160e5:	e8 96 0f 01 00       	callq  227080 <_ZN9r3_kernel2mm2io8MemoryIO8read_u3217hf47559e028b9b32cE>
  2160ea:	89 44 24 04          	mov    %eax,0x4(%rsp)
  2160ee:	8b 44 24 04          	mov    0x4(%rsp),%eax
    }
  2160f2:	48 83 c4 48          	add    $0x48,%rsp
  2160f6:	c3                   	retq   
  2160f7:	cc                   	int3   
  2160f8:	cc                   	int3   
  2160f9:	cc                   	int3   
  2160fa:	cc                   	int3   
  2160fb:	cc                   	int3   
  2160fc:	cc                   	int3   
  2160fd:	cc                   	int3   
  2160fe:	cc                   	int3   
  2160ff:	cc                   	int3   

0000000000216100 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO14write_register17h225287f2d604d6cbE>:

    #[inline]
    pub fn write_register(register: u64, value: u32) {
  216100:	48 83 ec 58          	sub    $0x58,%rsp
  216104:	89 74 24 24          	mov    %esi,0x24(%rsp)
  216108:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21610d:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  216112:	89 74 24 54          	mov    %esi,0x54(%rsp)
        let addr = Self::get_base_addr();
  216116:	e8 e5 fe ff ff       	callq  216000 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13get_base_addr17hbc354d52b4a875aeE>
  21611b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        let writer = MemoryIO::new(VirtualAddress::from_u64(addr.as_u64() + register), false);
  216120:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  216125:	e8 96 21 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  21612a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21612f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  216134:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216139:	48 01 c8             	add    %rcx,%rax
  21613c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216141:	0f 92 c0             	setb   %al
  216144:	a8 01                	test   $0x1,%al
  216146:	75 11                	jne    216159 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO14write_register17h225287f2d604d6cbE+0x59>
  216148:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21614d:	e8 7e 21 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  216152:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216157:	eb 1a                	jmp    216173 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO14write_register17h225287f2d604d6cbE+0x73>
  216159:	48 8d 3d 90 ac fe ff 	lea    -0x15370(%rip),%rdi        # 200df0 <str.0>
  216160:	48 8d 15 e1 47 02 00 	lea    0x247e1(%rip),%rdx        # 23a948 <memcmp+0x1c08>
  216167:	be 1c 00 00 00       	mov    $0x1c,%esi
  21616c:	e8 7f fa 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216171:	0f 0b                	ud2    
  216173:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  216178:	31 f6                	xor    %esi,%esi
  21617a:	e8 d1 0e 01 00       	callq  227050 <_ZN9r3_kernel2mm2io8MemoryIO3new17h5d7a21f81a45f499E>
  21617f:	88 54 24 40          	mov    %dl,0x40(%rsp)
  216183:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216188:	8b 74 24 24          	mov    0x24(%rsp),%esi

        writer.write_u32(value);
  21618c:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  216191:	e8 1a 0f 01 00       	callq  2270b0 <_ZN9r3_kernel2mm2io8MemoryIO9write_u3217hb6f2748048f55de2E>
    }
  216196:	48 83 c4 58          	add    $0x58,%rsp
  21619a:	c3                   	retq   
  21619b:	cc                   	int3   
  21619c:	cc                   	int3   
  21619d:	cc                   	int3   
  21619e:	cc                   	int3   
  21619f:	cc                   	int3   

00000000002161a0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils16get_processor_id17h620ca3c386b36f4aE>:
/// implements functions using which some basic LAPIC
/// operations can be carried out.
pub struct LAPICUtils;

impl LAPICUtils {
    pub fn get_processor_id() -> ProcessorID {
  2161a0:	48 83 ec 18          	sub    $0x18,%rsp
        let lapic_id = LAPICRegistersIO::read_register(LapicNumbers::LapicID as u64);
  2161a4:	bf 20 00 00 00       	mov    $0x20,%edi
  2161a9:	e8 b2 fe ff ff       	callq  216060 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13read_register17h5c111c048670675aE>
  2161ae:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  2161b2:	89 44 24 14          	mov    %eax,0x14(%rsp)
  2161b6:	8b 44 24 0c          	mov    0xc(%rsp),%eax
        ProcessorID((lapic_id >> 24) as u8)
  2161ba:	c1 e8 18             	shr    $0x18,%eax
  2161bd:	89 44 24 08          	mov    %eax,0x8(%rsp)
  2161c1:	8b 44 24 08          	mov    0x8(%rsp),%eax
  2161c5:	88 44 24 13          	mov    %al,0x13(%rsp)
    }
  2161c9:	8a 44 24 13          	mov    0x13(%rsp),%al
  2161cd:	48 83 c4 18          	add    $0x18,%rsp
  2161d1:	c3                   	retq   
  2161d2:	cc                   	int3   
  2161d3:	cc                   	int3   
  2161d4:	cc                   	int3   
  2161d5:	cc                   	int3   
  2161d6:	cc                   	int3   
  2161d7:	cc                   	int3   
  2161d8:	cc                   	int3   
  2161d9:	cc                   	int3   
  2161da:	cc                   	int3   
  2161db:	cc                   	int3   
  2161dc:	cc                   	int3   
  2161dd:	cc                   	int3   
  2161de:	cc                   	int3   
  2161df:	cc                   	int3   

00000000002161e0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils3eoi17hc1efca52a063c38bE>:

    pub fn eoi() {
  2161e0:	50                   	push   %rax
        LAPICRegistersIO::write_register(LapicNumbers::Eoi as u64, 0);
  2161e1:	bf b0 00 00 00       	mov    $0xb0,%edi
  2161e6:	31 f6                	xor    %esi,%esi
  2161e8:	e8 13 ff ff ff       	callq  216100 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO14write_register17h225287f2d604d6cbE>
    }
  2161ed:	58                   	pop    %rax
  2161ee:	c3                   	retq   
  2161ef:	cc                   	int3   

00000000002161f0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils11setup_timer17h2df1a19627faacaaE>:

    pub fn setup_timer(vector: u8) {
  2161f0:	50                   	push   %rax
  2161f1:	40 88 f8             	mov    %dil,%al
  2161f4:	88 44 24 03          	mov    %al,0x3(%rsp)
        // unmasks the timer + configures TSC deadline mode.
        let timer_flag = (vector as u32) | 0x40000;
  2161f8:	0f b6 f0             	movzbl %al,%esi
  2161fb:	81 ce 00 00 04 00    	or     $0x40000,%esi
  216201:	89 74 24 04          	mov    %esi,0x4(%rsp)
        LAPICRegistersIO::write_register(LapicNumbers::LvtTimer as u64, timer_flag);
  216205:	bf 20 03 00 00       	mov    $0x320,%edi
  21620a:	e8 f1 fe ff ff       	callq  216100 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO14write_register17h225287f2d604d6cbE>
    }
  21620f:	58                   	pop    %rax
  216210:	c3                   	retq   
  216211:	cc                   	int3   
  216212:	cc                   	int3   
  216213:	cc                   	int3   
  216214:	cc                   	int3   
  216215:	cc                   	int3   
  216216:	cc                   	int3   
  216217:	cc                   	int3   
  216218:	cc                   	int3   
  216219:	cc                   	int3   
  21621a:	cc                   	int3   
  21621b:	cc                   	int3   
  21621c:	cc                   	int3   
  21621d:	cc                   	int3   
  21621e:	cc                   	int3   
  21621f:	cc                   	int3   

0000000000216220 <_ZN9r3_kernel4acpi5lapic10LAPICUtils12enable_lapic17h5bb0931fc3eec944E>:

    pub fn enable_lapic() {
  216220:	48 83 ec 48          	sub    $0x48,%rsp
        // disable legacy interrupts
        disable_legacy_interrupts();
  216224:	e8 67 73 01 00       	callq  22d590 <_ZN9r3_kernel3cpu3pic25disable_legacy_interrupts17hef4281780617f245E>
        let lapic_addr = LAPICRegistersIO::get_base_addr();
  216229:	e8 d2 fd ff ff       	callq  216000 <_ZN9r3_kernel4acpi5lapic16LAPICRegistersIO13get_base_addr17hbc354d52b4a875aeE>
  21622e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)

        let suprious_vec_addr =
            VirtualAddress::from_u64(lapic_addr.as_u64() + SUPRIOUS_VECTOR_OFFSET as u64);
  216233:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  216238:	e8 83 20 01 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  21623d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216242:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216247:	48 05 f0 00 00 00    	add    $0xf0,%rax
  21624d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216252:	0f 92 c0             	setb   %al
  216255:	a8 01                	test   $0x1,%al
  216257:	75 16                	jne    21626f <_ZN9r3_kernel4acpi5lapic10LAPICUtils12enable_lapic17h5bb0931fc3eec944E+0x4f>
  216259:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21625e:	e8 6d 20 01 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  216263:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216268:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21626d:	eb 1a                	jmp    216289 <_ZN9r3_kernel4acpi5lapic10LAPICUtils12enable_lapic17h5bb0931fc3eec944E+0x69>
  21626f:	48 8d 3d 7a ab fe ff 	lea    -0x15486(%rip),%rdi        # 200df0 <str.0>
  216276:	48 8d 15 e3 46 02 00 	lea    0x246e3(%rip),%rdx        # 23a960 <memcmp+0x1c20>
  21627d:	be 1c 00 00 00       	mov    $0x1c,%esi
  216282:	e8 69 f9 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216287:	0f 0b                	ud2    
  216289:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21628e:	31 f6                	xor    %esi,%esi

        let mmio_port = MemoryIO::new(suprious_vec_addr, false);
  216290:	e8 bb 0d 01 00       	callq  227050 <_ZN9r3_kernel2mm2io8MemoryIO3new17h5d7a21f81a45f499E>
  216295:	88 54 24 30          	mov    %dl,0x30(%rsp)
  216299:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        let current_value = mmio_port.read_u32();
  21629e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2162a3:	e8 d8 0d 01 00       	callq  227080 <_ZN9r3_kernel2mm2io8MemoryIO8read_u3217hf47559e028b9b32cE>
  2162a8:	89 44 24 04          	mov    %eax,0x4(%rsp)
  2162ac:	89 44 24 44          	mov    %eax,0x44(%rsp)
  2162b0:	8b 74 24 04          	mov    0x4(%rsp),%esi

        // https://wiki.osdev.org/APIC#Spurious_Interrupt_Vector_Registers
        mmio_port.write_u32(current_value | 0xff | 0x100);
  2162b4:	81 ce ff 00 00 00    	or     $0xff,%esi
  2162ba:	81 ce 00 01 00 00    	or     $0x100,%esi
  2162c0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2162c5:	e8 e6 0d 01 00       	callq  2270b0 <_ZN9r3_kernel2mm2io8MemoryIO9write_u3217hb6f2748048f55de2E>
    }
  2162ca:	48 83 c4 48          	add    $0x48,%rsp
  2162ce:	c3                   	retq   
  2162cf:	cc                   	int3   

00000000002162d0 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE>:
}

static APIC_BSP_ENABLED: AtomicBool = AtomicBool::new(false);

/// init the LAPIC for base processor, i.e the processor with CPU ID 0
pub fn init_bsp_lapic() {
  2162d0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    if !LAPICUtils::get_processor_id().is_bsp() {
  2162d7:	e8 c4 fe ff ff       	callq  2161a0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils16get_processor_id17h620ca3c386b36f4aE>
  2162dc:	88 44 24 07          	mov    %al,0x7(%rsp)
  2162e0:	48 8d 7c 24 07       	lea    0x7(%rsp),%rdi
  2162e5:	e8 f6 fc ff ff       	callq  215fe0 <_ZN9r3_kernel4acpi5lapic11ProcessorID6is_bsp17h31a7bfd8216f94bcE>
  2162ea:	88 44 24 06          	mov    %al,0x6(%rsp)
  2162ee:	8a 44 24 06          	mov    0x6(%rsp),%al
  2162f2:	34 ff                	xor    $0xff,%al
  2162f4:	a8 01                	test   $0x1,%al
  2162f6:	75 0a                	jne    216302 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x32>
        log::warn!("BSP LAPIC init function called from a non BSP.");
        return;
    }

    // enable LAPIC
    LAPICUtils::enable_lapic();
  2162f8:	e8 23 ff ff ff       	callq  216220 <_ZN9r3_kernel4acpi5lapic10LAPICUtils12enable_lapic17h5bb0931fc3eec944E>
  2162fd:	e9 c6 00 00 00       	jmpq   2163c8 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0xf8>
        log::warn!("BSP LAPIC init function called from a non BSP.");
  216302:	48 c7 44 24 08 02 00 	movq   $0x2,0x8(%rsp)
  216309:	00 00 
  21630b:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  216310:	48 8d 35 e1 9f fe ff 	lea    -0x1601f(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  216317:	e8 b4 cc ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21631c:	88 44 24 05          	mov    %al,0x5(%rsp)
  216320:	8a 44 24 05          	mov    0x5(%rsp),%al
  216324:	a8 01                	test   $0x1,%al
  216326:	75 09                	jne    216331 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x61>
  216328:	eb 00                	jmp    21632a <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x5a>
  21632a:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  21632f:	eb 4e                	jmp    21637f <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0xaf>
  216331:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  216338:	00 
  216339:	48 8b 3d 08 78 02 00 	mov    0x27808(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216340:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  216347:	00 
  216348:	e8 a3 4e 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21634d:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  216354:	00 
  216355:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  21635c:	00 
  21635d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216362:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  216367:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  21636c:	e8 5f cc ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216371:	88 44 24 04          	mov    %al,0x4(%rsp)
  216375:	8a 44 24 04          	mov    0x4(%rsp),%al
  216379:	24 01                	and    $0x1,%al
  21637b:	88 44 24 17          	mov    %al,0x17(%rsp)
  21637f:	f6 44 24 17 01       	testb  $0x1,0x17(%rsp)
  216384:	75 08                	jne    21638e <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0xbe>
    // set up LAPIC timer:
    LAPICUtils::setup_timer(0x30);

    log::info!("Enabled LAPIC and APIC timer for base processor.");
    APIC_BSP_ENABLED.store(true, Ordering::SeqCst);
}
  216386:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  21638d:	c3                   	retq   
        log::warn!("BSP LAPIC init function called from a non BSP.");
  21638e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  216393:	48 8d 35 de 45 02 00 	lea    0x245de(%rip),%rsi        # 23a978 <memcmp+0x1c38>
  21639a:	ba 01 00 00 00       	mov    $0x1,%edx
  21639f:	48 8d 0d 9a aa fe ff 	lea    -0x15566(%rip),%rcx        # 200e40 <str.0+0x50>
  2163a6:	31 c0                	xor    %eax,%eax
  2163a8:	41 89 c0             	mov    %eax,%r8d
  2163ab:	e8 80 01 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2163b0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2163b5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2163ba:	48 8d 15 c7 45 02 00 	lea    0x245c7(%rip),%rdx        # 23a988 <memcmp+0x1c48>
  2163c1:	e8 ba c9 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2163c6:	eb be                	jmp    216386 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0xb6>
    LAPICUtils::setup_timer(0x30);
  2163c8:	bf 30 00 00 00       	mov    $0x30,%edi
  2163cd:	e8 1e fe ff ff       	callq  2161f0 <_ZN9r3_kernel4acpi5lapic10LAPICUtils11setup_timer17h2df1a19627faacaaE>
    log::info!("Enabled LAPIC and APIC timer for base processor.");
  2163d2:	48 c7 44 24 50 03 00 	movq   $0x3,0x50(%rsp)
  2163d9:	00 00 
  2163db:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2163e0:	48 8d 35 11 9f fe ff 	lea    -0x160ef(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2163e7:	e8 e4 cb ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2163ec:	88 44 24 03          	mov    %al,0x3(%rsp)
  2163f0:	8a 44 24 03          	mov    0x3(%rsp),%al
  2163f4:	a8 01                	test   $0x1,%al
  2163f6:	75 09                	jne    216401 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x131>
  2163f8:	eb 00                	jmp    2163fa <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x12a>
  2163fa:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  2163ff:	eb 4e                	jmp    21644f <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x17f>
  216401:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  216408:	00 
  216409:	48 8b 3d 38 77 02 00 	mov    0x27738(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216410:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  216417:	00 
  216418:	e8 d3 4d 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21641d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  216424:	00 
  216425:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21642c:	00 
  21642d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  216432:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  216437:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  21643c:	e8 8f cb ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216441:	88 44 24 02          	mov    %al,0x2(%rsp)
  216445:	8a 44 24 02          	mov    0x2(%rsp),%al
  216449:	24 01                	and    $0x1,%al
  21644b:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  21644f:	f6 44 24 5f 01       	testb  $0x1,0x5f(%rsp)
  216454:	75 26                	jne    21647c <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x1ac>
    APIC_BSP_ENABLED.store(true, Ordering::SeqCst);
  216456:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  21645d:	04 
  21645e:	48 8d 3d fb 89 02 00 	lea    0x289fb(%rip),%rdi        # 23ee60 <_ZN9r3_kernel4acpi5lapic16APIC_BSP_ENABLED17h273705f02d22bc4cE>
  216465:	be 01 00 00 00       	mov    $0x1,%esi
  21646a:	0f b6 94 24 9e 00 00 	movzbl 0x9e(%rsp),%edx
  216471:	00 
  216472:	e8 09 4c 01 00       	callq  22b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
  216477:	e9 0a ff ff ff       	jmpq   216386 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0xb6>
    log::info!("Enabled LAPIC and APIC timer for base processor.");
  21647c:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  216481:	48 8d 35 38 45 02 00 	lea    0x24538(%rip),%rsi        # 23a9c0 <memcmp+0x1c80>
  216488:	ba 01 00 00 00       	mov    $0x1,%edx
  21648d:	48 8d 0d ac a9 fe ff 	lea    -0x15654(%rip),%rcx        # 200e40 <str.0+0x50>
  216494:	31 c0                	xor    %eax,%eax
  216496:	41 89 c0             	mov    %eax,%r8d
  216499:	e8 92 00 ff ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21649e:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2164a3:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2164a8:	48 8d 15 21 45 02 00 	lea    0x24521(%rip),%rdx        # 23a9d0 <memcmp+0x1c90>
  2164af:	e8 cc c8 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2164b4:	eb a0                	jmp    216456 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE+0x186>
  2164b6:	cc                   	int3   
  2164b7:	cc                   	int3   
  2164b8:	cc                   	int3   
  2164b9:	cc                   	int3   
  2164ba:	cc                   	int3   
  2164bb:	cc                   	int3   
  2164bc:	cc                   	int3   
  2164bd:	cc                   	int3   
  2164be:	cc                   	int3   
  2164bf:	cc                   	int3   

00000000002164c0 <_ZN9r3_kernel4acpi5lapic16bsp_apic_enabled17h7f7b1cbc16b1938dE>:

pub fn bsp_apic_enabled() -> bool {
  2164c0:	50                   	push   %rax
    APIC_BSP_ENABLED.load(Ordering::SeqCst)
  2164c1:	c6 44 24 07 04       	movb   $0x4,0x7(%rsp)
  2164c6:	48 8d 3d 93 89 02 00 	lea    0x28993(%rip),%rdi        # 23ee60 <_ZN9r3_kernel4acpi5lapic16APIC_BSP_ENABLED17h273705f02d22bc4cE>
  2164cd:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
  2164d2:	e8 59 4b 01 00       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  2164d7:	88 44 24 06          	mov    %al,0x6(%rsp)
  2164db:	8a 44 24 06          	mov    0x6(%rsp),%al
}
  2164df:	24 01                	and    $0x1,%al
  2164e1:	0f b6 c0             	movzbl %al,%eax
  2164e4:	59                   	pop    %rcx
  2164e5:	c3                   	retq   
  2164e6:	cc                   	int3   
  2164e7:	cc                   	int3   
  2164e8:	cc                   	int3   
  2164e9:	cc                   	int3   
  2164ea:	cc                   	int3   
  2164eb:	cc                   	int3   
  2164ec:	cc                   	int3   
  2164ed:	cc                   	int3   
  2164ee:	cc                   	int3   
  2164ef:	cc                   	int3   

00000000002164f0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE>:
    pub fn new() -> Option<Self> {
  2164f0:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  2164f7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2164fc:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  216501:	e8 1a 36 00 00       	callq  219b20 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  216506:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21650b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if fb_slice_opt.is_none() {
  216510:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  216515:	e8 56 b4 ff ff       	callq  211970 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  21651a:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21651e:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  216522:	a8 01                	test   $0x1,%al
  216524:	75 14                	jne    21653a <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x4a>
  216526:	eb 00                	jmp    216528 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x38>
        let fb_info_opt = BootProtocol::get_framebuffer_info();
  216528:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21652f:	00 
  216530:	e8 3b 35 00 00       	callq  219a70 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>
  216535:	e9 d9 00 00 00       	jmpq   216613 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x123>
            log::error!(
  21653a:	48 c7 44 24 40 01 00 	movq   $0x1,0x40(%rsp)
  216541:	00 00 
  216543:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  216548:	48 8d 35 a9 9d fe ff 	lea    -0x16257(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21654f:	e8 7c ca ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216554:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  216558:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  21655c:	a8 01                	test   $0x1,%al
  21655e:	75 09                	jne    216569 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x79>
  216560:	eb 00                	jmp    216562 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x72>
  216562:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  216567:	eb 4e                	jmp    2165b7 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xc7>
  216569:	c6 84 24 9f 01 00 00 	movb   $0x0,0x19f(%rsp)
  216570:	00 
  216571:	48 8b 3d d0 75 02 00 	mov    0x275d0(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216578:	0f b6 b4 24 9f 01 00 	movzbl 0x19f(%rsp),%esi
  21657f:	00 
  216580:	e8 6b 4c 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  216585:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  21658c:	00 
  21658d:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  216594:	00 
  216595:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21659a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  21659f:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  2165a4:	e8 27 ca ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2165a9:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  2165ad:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  2165b1:	24 01                	and    $0x1,%al
  2165b3:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  2165b7:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  2165bc:	75 0e                	jne    2165cc <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xdc>
  2165be:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            return None;
  2165c3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2165ca:	eb 3a                	jmp    216606 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
            log::error!(
  2165cc:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2165d1:	48 8d 35 30 44 02 00 	lea    0x24430(%rip),%rsi        # 23aa08 <memcmp+0x1cc8>
  2165d8:	ba 01 00 00 00       	mov    $0x1,%edx
  2165dd:	48 8d 0d 0c a9 fe ff 	lea    -0x156f4(%rip),%rcx        # 200ef0 <str.0+0x100>
  2165e4:	31 c0                	xor    %eax,%eax
  2165e6:	41 89 c0             	mov    %eax,%r8d
  2165e9:	e8 42 ff fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2165ee:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2165f3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2165f8:	48 8d 15 19 44 02 00 	lea    0x24419(%rip),%rdx        # 23aa18 <memcmp+0x1cd8>
  2165ff:	e8 7c c7 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216604:	eb b8                	jmp    2165be <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xce>
  216606:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    }
  21660b:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  216612:	c3                   	retq   
        if fb_info_opt.is_none() {
  216613:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21661a:	00 
  21661b:	e8 e0 b3 ff ff       	callq  211a00 <_ZN4core6option15Option$LT$T$GT$7is_none17hb3d124720ea273cbE>
  216620:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  216624:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  216628:	a8 01                	test   $0x1,%al
  21662a:	75 3d                	jne    216669 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x179>
  21662c:	eb 00                	jmp    21662e <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x13e>
        let fb_info = fb_info_opt.unwrap();
  21662e:	48 8d bc 24 30 01 00 	lea    0x130(%rsp),%rdi
  216635:	00 
  216636:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  21663d:	00 
  21663e:	ba 30 00 00 00       	mov    $0x30,%edx
  216643:	e8 a8 26 02 00       	callq  238cf0 <memcpy>
  216648:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  21664f:	00 
  216650:	48 8d b4 24 30 01 00 	lea    0x130(%rsp),%rsi
  216657:	00 
  216658:	48 8d 15 39 44 02 00 	lea    0x24439(%rip),%rdx        # 23aa98 <memcmp+0x1d58>
  21665f:	e8 cc ae ff ff       	callq  211530 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E>
  216664:	e9 f0 00 00 00       	jmpq   216759 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x269>
            log::error!(
  216669:	48 c7 84 24 b8 00 00 	movq   $0x1,0xb8(%rsp)
  216670:	00 01 00 00 00 
  216675:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  21667c:	00 
  21667d:	48 8d 35 74 9c fe ff 	lea    -0x1638c(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  216684:	e8 47 c9 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216689:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  21668d:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  216691:	a8 01                	test   $0x1,%al
  216693:	75 0c                	jne    2166a1 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x1b1>
  216695:	eb 00                	jmp    216697 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x1a7>
  216697:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  21669e:	00 
  21669f:	eb 5a                	jmp    2166fb <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x20b>
  2166a1:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  2166a8:	00 
  2166a9:	48 8b 3d 98 74 02 00 	mov    0x27498(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2166b0:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  2166b7:	00 
  2166b8:	e8 33 4b 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2166bd:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  2166c4:	00 
  2166c5:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  2166cc:	00 
  2166cd:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2166d4:	00 
  2166d5:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2166dc:	00 
  2166dd:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  2166e4:	00 
  2166e5:	e8 e6 c8 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2166ea:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  2166ee:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  2166f2:	24 01                	and    $0x1,%al
  2166f4:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  2166fb:	f6 84 24 c7 00 00 00 	testb  $0x1,0xc7(%rsp)
  216702:	01 
  216703:	75 11                	jne    216716 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x226>
  216705:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            return None;
  21670a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  216711:	e9 f0 fe ff ff       	jmpq   216606 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
            log::error!(
  216716:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  21671d:	00 
  21671e:	48 8d 35 2b 43 02 00 	lea    0x2432b(%rip),%rsi        # 23aa50 <memcmp+0x1d10>
  216725:	ba 01 00 00 00       	mov    $0x1,%edx
  21672a:	48 8d 0d bf a7 fe ff 	lea    -0x15841(%rip),%rcx        # 200ef0 <str.0+0x100>
  216731:	31 c0                	xor    %eax,%eax
  216733:	41 89 c0             	mov    %eax,%r8d
  216736:	e8 f5 fd fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21673b:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  216742:	00 
  216743:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  21674a:	00 
  21674b:	48 8d 15 0e 43 02 00 	lea    0x2430e(%rip),%rdx        # 23aa60 <memcmp+0x1d20>
  216752:	e8 29 c6 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216757:	eb ac                	jmp    216705 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x215>
            buffer: fb_slice_opt.unwrap(),
  216759:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21675e:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  216763:	48 8d 15 46 43 02 00 	lea    0x24346(%rip),%rdx        # 23aab0 <memcmp+0x1d70>
  21676a:	e8 81 b0 ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21676f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216774:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  216779:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21677e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  216783:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            width: fb_info.horizontal_resolution,
  216788:	48 8b 94 24 08 01 00 	mov    0x108(%rsp),%rdx
  21678f:	00 
            height: fb_info.vertical_resolution,
  216790:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  216797:	00 
            bytes_per_pixel: fb_info.bytes_per_pixel,
  216798:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  21679f:	00 
        Some(FramebufferMemory {
  2167a0:	4c 89 84 24 60 01 00 	mov    %r8,0x160(%rsp)
  2167a7:	00 
  2167a8:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  2167af:	00 
  2167b0:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  2167b7:	00 
  2167b8:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  2167bf:	00 
  2167c0:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2167c7:	00 
  2167c8:	48 8d b4 24 60 01 00 	lea    0x160(%rsp),%rsi
  2167cf:	00 
  2167d0:	ba 28 00 00 00       	mov    $0x28,%edx
  2167d5:	e8 16 25 02 00       	callq  238cf0 <memcpy>
    }
  2167da:	e9 27 fe ff ff       	jmpq   216606 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
  2167df:	cc                   	int3   

00000000002167e0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE>:
    pub fn get_slice_bounded(start: usize, end: usize) -> Option<&'static mut [u8]> {
  2167e0:	48 83 ec 78          	sub    $0x78,%rsp
  2167e4:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2167e9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2167ee:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  2167f3:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  2167f8:	e8 23 33 00 00       	callq  219b20 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  2167fd:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  216802:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if fb_slice_opt.is_none() {
  216807:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21680c:	e8 5f b1 ff ff       	callq  211970 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  216811:	88 44 24 27          	mov    %al,0x27(%rsp)
  216815:	8a 44 24 27          	mov    0x27(%rsp),%al
  216819:	a8 01                	test   $0x1,%al
  21681b:	75 24                	jne    216841 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x61>
  21681d:	eb 00                	jmp    21681f <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x3f>
        Some(&mut fb_slice_opt.unwrap()[start..end])
  21681f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  216824:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  216829:	48 8d 15 98 42 02 00 	lea    0x24298(%rip),%rdx        # 23aac8 <memcmp+0x1d88>
  216830:	e8 bb af ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  216835:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21683a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21683f:	eb 18                	jmp    216859 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x79>
            return None;
  216841:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  216848:	00 00 
    }
  21684a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21684f:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  216854:	48 83 c4 78          	add    $0x78,%rsp
  216858:	c3                   	retq   
  216859:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21685e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  216863:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  216868:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
        Some(&mut fb_slice_opt.unwrap()[start..end])
  21686d:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  216872:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  216877:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21687c:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  216881:	4c 8d 05 58 42 02 00 	lea    0x24258(%rip),%r8        # 23aae0 <memcmp+0x1da0>
  216888:	e8 f3 3f 01 00       	callq  22a880 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h3575024572685ae9E>
  21688d:	48 89 04 24          	mov    %rax,(%rsp)
  216891:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  216896:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21689b:	48 8b 0c 24          	mov    (%rsp),%rcx
  21689f:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2168a4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  2168a9:	eb 9f                	jmp    21684a <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x6a>
  2168ab:	cc                   	int3   
  2168ac:	cc                   	int3   
  2168ad:	cc                   	int3   
  2168ae:	cc                   	int3   
  2168af:	cc                   	int3   

00000000002168b0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>:
    pub fn get_slice_from(start: usize) -> Option<&'static mut [u8]> {
  2168b0:	48 83 ec 68          	sub    $0x68,%rsp
  2168b4:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2168b9:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  2168be:	e8 5d 32 00 00       	callq  219b20 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  2168c3:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2168c8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if fb_slice_opt.is_none() {
  2168cd:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2168d2:	e8 99 b0 ff ff       	callq  211970 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  2168d7:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2168db:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  2168df:	a8 01                	test   $0x1,%al
  2168e1:	75 24                	jne    216907 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x57>
  2168e3:	eb 00                	jmp    2168e5 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x35>
        Some(&mut fb_slice_opt.unwrap()[start..])
  2168e5:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  2168ea:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2168ef:	48 8d 15 02 42 02 00 	lea    0x24202(%rip),%rdx        # 23aaf8 <memcmp+0x1db8>
  2168f6:	e8 f5 ae ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  2168fb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216900:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  216905:	eb 18                	jmp    21691f <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x6f>
            return None;
  216907:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21690e:	00 00 
    }
  216910:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  216915:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21691a:	48 83 c4 68          	add    $0x68,%rsp
  21691e:	c3                   	retq   
  21691f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  216924:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  216929:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        Some(&mut fb_slice_opt.unwrap()[start..])
  21692e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  216933:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  216938:	48 8d 0d d1 41 02 00 	lea    0x241d1(%rip),%rcx        # 23ab10 <memcmp+0x1dd0>
  21693f:	e8 dc 3f 01 00       	callq  22a920 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h9f6d6ff661f6775eE>
  216944:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216949:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21694e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216953:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  216958:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21695d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  216962:	eb ac                	jmp    216910 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x60>
  216964:	cc                   	int3   
  216965:	cc                   	int3   
  216966:	cc                   	int3   
  216967:	cc                   	int3   
  216968:	cc                   	int3   
  216969:	cc                   	int3   
  21696a:	cc                   	int3   
  21696b:	cc                   	int3   
  21696c:	cc                   	int3   
  21696d:	cc                   	int3   
  21696e:	cc                   	int3   
  21696f:	cc                   	int3   

0000000000216970 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE>:
fn init_framebuffer() -> Option<Mutex<FramebufferMemory>> {
  216970:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  216977:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21697c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    let fb_opt = FramebufferMemory::new();
  216981:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  216986:	e8 65 fb ff ff       	callq  2164f0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE>
    if fb_opt.is_none() {
  21698b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  216990:	e8 3b b0 ff ff       	callq  2119d0 <_ZN4core6option15Option$LT$T$GT$7is_none17ha4bca2175564180aE>
  216995:	88 44 24 0f          	mov    %al,0xf(%rsp)
  216999:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21699d:	a8 01                	test   $0x1,%al
  21699f:	75 34                	jne    2169d5 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x65>
  2169a1:	eb 00                	jmp    2169a3 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x33>
    Some(Mutex::new(fb_opt.unwrap()))
  2169a3:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2169aa:	00 
  2169ab:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  2169b0:	ba 28 00 00 00       	mov    $0x28,%edx
  2169b5:	e8 36 23 02 00       	callq  238cf0 <memcpy>
  2169ba:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2169bf:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  2169c6:	00 
  2169c7:	48 8d 15 5a 41 02 00 	lea    0x2415a(%rip),%rdx        # 23ab28 <memcmp+0x1de8>
  2169ce:	e8 0d ad ff ff       	callq  2116e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE>
  2169d3:	eb 19                	jmp    2169ee <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x7e>
  2169d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        return None;
  2169da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2169e1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  2169e6:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  2169ed:	c3                   	retq   
    Some(Mutex::new(fb_opt.unwrap()))
  2169ee:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2169f3:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  2169f8:	e8 c3 78 01 00       	callq  22e2c0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h65fa35b167151302E>
  2169fd:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  216a02:	48 83 c7 08          	add    $0x8,%rdi
  216a06:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  216a0b:	ba 30 00 00 00       	mov    $0x30,%edx
  216a10:	e8 db 22 02 00       	callq  238cf0 <memcpy>
  216a15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216a1a:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  216a21:	eb be                	jmp    2169e1 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x71>
  216a23:	cc                   	int3   
  216a24:	cc                   	int3   
  216a25:	cc                   	int3   
  216a26:	cc                   	int3   
  216a27:	cc                   	int3   
  216a28:	cc                   	int3   
  216a29:	cc                   	int3   
  216a2a:	cc                   	int3   
  216a2b:	cc                   	int3   
  216a2c:	cc                   	int3   
  216a2d:	cc                   	int3   
  216a2e:	cc                   	int3   
  216a2f:	cc                   	int3   

0000000000216a30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>:
/// Set of control functions used for writing pixels to frame buffer
pub struct Framebuffer;

impl Framebuffer {
    #[inline]
    pub fn get_buffer_lock() -> &'static Option<LockedFramebuffer> {
  216a30:	50                   	push   %rax
        &FRAMEBUFFER
  216a31:	48 8d 3d 63 a6 fe ff 	lea    -0x1599d(%rip),%rdi        # 20109b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  216a38:	e8 d3 0a 00 00       	callq  217510 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  216a3d:	48 89 04 24          	mov    %rax,(%rsp)
  216a41:	48 8b 04 24          	mov    (%rsp),%rax
    }
  216a45:	59                   	pop    %rcx
  216a46:	c3                   	retq   
  216a47:	cc                   	int3   
  216a48:	cc                   	int3   
  216a49:	cc                   	int3   
  216a4a:	cc                   	int3   
  216a4b:	cc                   	int3   
  216a4c:	cc                   	int3   
  216a4d:	cc                   	int3   
  216a4e:	cc                   	int3   
  216a4f:	cc                   	int3   

0000000000216a50 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>:

    #[inline]
    pub fn index_in_bounds(fb: &FramebufferMemory, index: &FramebufferIndex) -> bool {
  216a50:	48 83 ec 28          	sub    $0x28,%rsp
  216a54:	48 89 34 24          	mov    %rsi,(%rsp)
  216a58:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  216a5d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  216a62:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        index.x < fb.width && index.y < fb.height
  216a67:	48 8b 06             	mov    (%rsi),%rax
  216a6a:	48 3b 47 10          	cmp    0x10(%rdi),%rax
  216a6e:	72 07                	jb     216a77 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E+0x27>
  216a70:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  216a75:	eb 1a                	jmp    216a91 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E+0x41>
  216a77:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  216a7c:	48 8b 04 24          	mov    (%rsp),%rax
  216a80:	48 8b 40 08          	mov    0x8(%rax),%rax
  216a84:	48 3b 41 18          	cmp    0x18(%rcx),%rax
  216a88:	0f 92 c0             	setb   %al
  216a8b:	24 01                	and    $0x1,%al
  216a8d:	88 44 24 17          	mov    %al,0x17(%rsp)
    }
  216a91:	8a 44 24 17          	mov    0x17(%rsp),%al
  216a95:	24 01                	and    $0x1,%al
  216a97:	0f b6 c0             	movzbl %al,%eax
  216a9a:	48 83 c4 28          	add    $0x28,%rsp
  216a9e:	c3                   	retq   
  216a9f:	cc                   	int3   

0000000000216aa0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E>:

    #[inline]
    fn index_to_offset(fb: &FramebufferMemory, index: FramebufferIndex) -> Option<usize> {
  216aa0:	48 83 ec 48          	sub    $0x48,%rsp
  216aa4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  216aa9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  216aae:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if Framebuffer::index_in_bounds(&fb, &index) {
  216ab3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  216ab8:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  216abd:	e8 8e ff ff ff       	callq  216a50 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>
  216ac2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  216ac6:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  216aca:	a8 01                	test   $0x1,%al
  216acc:	75 10                	jne    216ade <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x3e>
  216ace:	eb 00                	jmp    216ad0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x30>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
        } else {
            None
  216ad0:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  216ad7:	00 00 
        if Framebuffer::index_in_bounds(&fb, &index) {
  216ad9:	e9 af 00 00 00       	jmpq   216b8d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xed>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
  216ade:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  216ae3:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  216ae8:	48 f7 61 10          	mulq   0x10(%rcx)
  216aec:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216af1:	0f 90 c0             	seto   %al
  216af4:	a8 01                	test   $0x1,%al
  216af6:	75 18                	jne    216b10 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x70>
  216af8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216afd:	48 03 44 24 28       	add    0x28(%rsp),%rax
  216b02:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216b07:	0f 92 c0             	setb   %al
  216b0a:	a8 01                	test   $0x1,%al
  216b0c:	75 37                	jne    216b45 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xa5>
  216b0e:	eb 1a                	jmp    216b2a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x8a>
  216b10:	48 8d 3d 99 a4 fe ff 	lea    -0x15b67(%rip),%rdi        # 200fb0 <str.0>
  216b17:	48 8d 15 22 40 02 00 	lea    0x24022(%rip),%rdx        # 23ab40 <memcmp+0x1e00>
  216b1e:	be 21 00 00 00       	mov    $0x21,%esi
  216b23:	e8 c8 f0 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216b28:	0f 0b                	ud2    
  216b2a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  216b2f:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  216b34:	48 f7 61 20          	mulq   0x20(%rcx)
  216b38:	48 89 04 24          	mov    %rax,(%rsp)
  216b3c:	0f 90 c0             	seto   %al
  216b3f:	a8 01                	test   $0x1,%al
  216b41:	75 30                	jne    216b73 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xd3>
  216b43:	eb 1a                	jmp    216b5f <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xbf>
  216b45:	48 8d 3d 94 a4 fe ff 	lea    -0x15b6c(%rip),%rdi        # 200fe0 <str.1>
  216b4c:	48 8d 15 05 40 02 00 	lea    0x24005(%rip),%rdx        # 23ab58 <memcmp+0x1e18>
  216b53:	be 1c 00 00 00       	mov    $0x1c,%esi
  216b58:	e8 93 f0 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216b5d:	0f 0b                	ud2    
  216b5f:	48 8b 04 24          	mov    (%rsp),%rax
  216b63:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216b68:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  216b6f:	00 00 
        if Framebuffer::index_in_bounds(&fb, &index) {
  216b71:	eb 1a                	jmp    216b8d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xed>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
  216b73:	48 8d 3d 36 a4 fe ff 	lea    -0x15bca(%rip),%rdi        # 200fb0 <str.0>
  216b7a:	48 8d 15 d7 3f 02 00 	lea    0x23fd7(%rip),%rdx        # 23ab58 <memcmp+0x1e18>
  216b81:	be 21 00 00 00       	mov    $0x21,%esi
  216b86:	e8 65 f0 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216b8b:	0f 0b                	ud2    
        }
    }
  216b8d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  216b92:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  216b97:	48 83 c4 48          	add    $0x48,%rsp
  216b9b:	c3                   	retq   
  216b9c:	cc                   	int3   
  216b9d:	cc                   	int3   
  216b9e:	cc                   	int3   
  216b9f:	cc                   	int3   

0000000000216ba0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE>:

    #[inline]
    pub fn set_pixel(fb: &mut FramebufferMemory, pixel: Pixel, index: FramebufferIndex) {
  216ba0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  216ba7:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  216bac:	48 89 d0             	mov    %rdx,%rax
  216baf:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  216bb4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  216bb9:	89 f0                	mov    %esi,%eax
  216bbb:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  216bc0:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  216bc5:	89 44 24 7c          	mov    %eax,0x7c(%rsp)
  216bc9:	8b 44 24 7c          	mov    0x7c(%rsp),%eax
  216bcd:	89 44 24 78          	mov    %eax,0x78(%rsp)
  216bd1:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  216bd8:	00 
  216bd9:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  216be0:	00 
        if let Some(offset) = Framebuffer::index_to_offset(&fb, index) {
  216be1:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  216be6:	e8 b5 fe ff ff       	callq  216aa0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E>
  216beb:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  216bf2:	00 
  216bf3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  216bfa:	00 
  216bfb:	48 83 bc 24 80 00 00 	cmpq   $0x1,0x80(%rsp)
  216c02:	00 01 
  216c04:	75 37                	jne    216c3d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x9d>
  216c06:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  216c0d:	00 
  216c0e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  216c13:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  216c1a:	00 
            fb.buffer[offset] = pixel.b;
  216c1b:	8a 4c 24 78          	mov    0x78(%rsp),%cl
  216c1f:	88 4c 24 57          	mov    %cl,0x57(%rsp)
  216c23:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216c28:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  216c2c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  216c31:	48 39 c8             	cmp    %rcx,%rax
  216c34:	0f 92 c0             	setb   %al
  216c37:	a8 01                	test   $0x1,%al
  216c39:	75 0a                	jne    216c45 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xa5>
  216c3b:	eb 36                	jmp    216c73 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xd3>
            fb.buffer[offset + 1] = pixel.g;
            fb.buffer[offset + 2] = pixel.r;
            fb.buffer[offset + 3] = pixel.channel;
        }
    }
  216c3d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  216c44:	c3                   	retq   
  216c45:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  216c4a:	8a 54 24 57          	mov    0x57(%rsp),%dl
            fb.buffer[offset] = pixel.b;
  216c4e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216c53:	48 8b 09             	mov    (%rcx),%rcx
  216c56:	88 14 01             	mov    %dl,(%rcx,%rax,1)
            fb.buffer[offset + 1] = pixel.g;
  216c59:	8a 4c 24 79          	mov    0x79(%rsp),%cl
  216c5d:	88 4c 24 3f          	mov    %cl,0x3f(%rsp)
  216c61:	48 83 c0 01          	add    $0x1,%rax
  216c65:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216c6a:	0f 92 c0             	setb   %al
  216c6d:	a8 01                	test   $0x1,%al
  216c6f:	75 39                	jne    216caa <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x10a>
  216c71:	eb 18                	jmp    216c8b <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xeb>
  216c73:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  216c78:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
            fb.buffer[offset] = pixel.b;
  216c7d:	48 8d 15 ec 3e 02 00 	lea    0x23eec(%rip),%rdx        # 23ab70 <memcmp+0x1e30>
  216c84:	e8 b7 ef 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216c89:	0f 0b                	ud2    
  216c8b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
            fb.buffer[offset + 1] = pixel.g;
  216c90:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216c95:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  216c99:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  216c9e:	48 39 c8             	cmp    %rcx,%rax
  216ca1:	0f 92 c0             	setb   %al
  216ca4:	a8 01                	test   $0x1,%al
  216ca6:	75 1c                	jne    216cc4 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x124>
  216ca8:	eb 4f                	jmp    216cf9 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x159>
  216caa:	48 8d 3d 2f a3 fe ff 	lea    -0x15cd1(%rip),%rdi        # 200fe0 <str.1>
  216cb1:	48 8d 15 d0 3e 02 00 	lea    0x23ed0(%rip),%rdx        # 23ab88 <memcmp+0x1e48>
  216cb8:	be 1c 00 00 00       	mov    $0x1c,%esi
  216cbd:	e8 2e ef 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216cc2:	0f 0b                	ud2    
  216cc4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  216cc9:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  216cce:	40 8a 74 24 3f       	mov    0x3f(%rsp),%sil
  216cd3:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216cd8:	48 8b 09             	mov    (%rcx),%rcx
  216cdb:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            fb.buffer[offset + 2] = pixel.r;
  216cdf:	8a 4c 24 7a          	mov    0x7a(%rsp),%cl
  216ce3:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  216ce7:	48 83 c0 02          	add    $0x2,%rax
  216ceb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  216cf0:	0f 92 c0             	setb   %al
  216cf3:	a8 01                	test   $0x1,%al
  216cf5:	75 39                	jne    216d30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x190>
  216cf7:	eb 18                	jmp    216d11 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x171>
  216cf9:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  216cfe:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            fb.buffer[offset + 1] = pixel.g;
  216d03:	48 8d 15 96 3e 02 00 	lea    0x23e96(%rip),%rdx        # 23aba0 <memcmp+0x1e60>
  216d0a:	e8 31 ef 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216d0f:	0f 0b                	ud2    
  216d11:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            fb.buffer[offset + 2] = pixel.r;
  216d16:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216d1b:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  216d1f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  216d24:	48 39 c8             	cmp    %rcx,%rax
  216d27:	0f 92 c0             	setb   %al
  216d2a:	a8 01                	test   $0x1,%al
  216d2c:	75 1c                	jne    216d4a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1aa>
  216d2e:	eb 4f                	jmp    216d7f <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1df>
  216d30:	48 8d 3d a9 a2 fe ff 	lea    -0x15d57(%rip),%rdi        # 200fe0 <str.1>
  216d37:	48 8d 15 7a 3e 02 00 	lea    0x23e7a(%rip),%rdx        # 23abb8 <memcmp+0x1e78>
  216d3e:	be 1c 00 00 00       	mov    $0x1c,%esi
  216d43:	e8 a8 ee 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216d48:	0f 0b                	ud2    
  216d4a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  216d4f:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  216d54:	40 8a 74 24 27       	mov    0x27(%rsp),%sil
  216d59:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216d5e:	48 8b 09             	mov    (%rcx),%rcx
  216d61:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            fb.buffer[offset + 3] = pixel.channel;
  216d65:	8a 4c 24 7b          	mov    0x7b(%rsp),%cl
  216d69:	88 4c 24 0f          	mov    %cl,0xf(%rsp)
  216d6d:	48 83 c0 03          	add    $0x3,%rax
  216d71:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216d76:	0f 92 c0             	setb   %al
  216d79:	a8 01                	test   $0x1,%al
  216d7b:	75 38                	jne    216db5 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x215>
  216d7d:	eb 18                	jmp    216d97 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1f7>
  216d7f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  216d84:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            fb.buffer[offset + 2] = pixel.r;
  216d89:	48 8d 15 40 3e 02 00 	lea    0x23e40(%rip),%rdx        # 23abd0 <memcmp+0x1e90>
  216d90:	e8 ab ee 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216d95:	0f 0b                	ud2    
  216d97:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            fb.buffer[offset + 3] = pixel.channel;
  216d9c:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  216da1:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  216da5:	48 89 0c 24          	mov    %rcx,(%rsp)
  216da9:	48 39 c8             	cmp    %rcx,%rax
  216dac:	0f 92 c0             	setb   %al
  216daf:	a8 01                	test   $0x1,%al
  216db1:	75 1c                	jne    216dcf <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x22f>
  216db3:	eb 33                	jmp    216de8 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x248>
  216db5:	48 8d 3d 24 a2 fe ff 	lea    -0x15ddc(%rip),%rdi        # 200fe0 <str.1>
  216dbc:	48 8d 15 25 3e 02 00 	lea    0x23e25(%rip),%rdx        # 23abe8 <memcmp+0x1ea8>
  216dc3:	be 1c 00 00 00       	mov    $0x1c,%esi
  216dc8:	e8 23 ee 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216dcd:	0f 0b                	ud2    
  216dcf:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  216dd4:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  216dd8:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  216ddd:	48 8b 00             	mov    (%rax),%rax
  216de0:	88 14 08             	mov    %dl,(%rax,%rcx,1)
        if let Some(offset) = Framebuffer::index_to_offset(&fb, index) {
  216de3:	e9 55 fe ff ff       	jmpq   216c3d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x9d>
  216de8:	48 8b 34 24          	mov    (%rsp),%rsi
  216dec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            fb.buffer[offset + 3] = pixel.channel;
  216df1:	48 8d 15 08 3e 02 00 	lea    0x23e08(%rip),%rdx        # 23ac00 <memcmp+0x1ec0>
  216df8:	e8 43 ee 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216dfd:	0f 0b                	ud2    
  216dff:	cc                   	int3   

0000000000216e00 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer4fill17h1dc0516c32df6ad3E>:
        }

        None
    }

    pub fn fill(fb: &mut MutexGuard<FramebufferMemory>, pixel: Pixel) {
  216e00:	48 83 ec 48          	sub    $0x48,%rsp
  216e04:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  216e09:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
  216e0d:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  216e11:	89 44 24 28          	mov    %eax,0x28(%rsp)
  216e15:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let bps = fb.bytes_per_pixel;
  216e1a:	e8 41 7e 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  216e1f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  216e24:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  216e29:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216e2e:	48 8b 40 20          	mov    0x20(%rax),%rax
  216e32:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216e37:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        Framebuffer::fill_region(fb.buffer, pixel, bps);
  216e3c:	e8 ef 7e 01 00       	callq  22ed30 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>
  216e41:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216e46:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  216e4b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216e50:	48 8b 38             	mov    (%rax),%rdi
  216e53:	48 8b 70 08          	mov    0x8(%rax),%rsi
  216e57:	8b 44 24 28          	mov    0x28(%rsp),%eax
  216e5b:	89 44 24 30          	mov    %eax,0x30(%rsp)
  216e5f:	8b 54 24 30          	mov    0x30(%rsp),%edx
  216e63:	e8 08 00 00 00       	callq  216e70 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>
    }
  216e68:	48 83 c4 48          	add    $0x48,%rsp
  216e6c:	c3                   	retq   
  216e6d:	cc                   	int3   
  216e6e:	cc                   	int3   
  216e6f:	cc                   	int3   

0000000000216e70 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>:

    pub fn fill_region(fb_region_slice: &mut [u8], pixel: Pixel, bps: usize) {
  216e70:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  216e77:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  216e7c:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  216e81:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  216e86:	89 54 24 64          	mov    %edx,0x64(%rsp)
  216e8a:	8b 44 24 64          	mov    0x64(%rsp),%eax
  216e8e:	89 44 24 60          	mov    %eax,0x60(%rsp)
  216e92:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  216e97:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  216e9c:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  216ea3:	00 
        if fb_region_slice.len() % bps != 0 {
  216ea4:	48 83 f9 00          	cmp    $0x0,%rcx
  216ea8:	0f 94 c0             	sete   %al
  216eab:	a8 01                	test   $0x1,%al
  216ead:	75 17                	jne    216ec6 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x56>
  216eaf:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  216eb4:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  216eb9:	31 d2                	xor    %edx,%edx
  216ebb:	48 f7 f1             	div    %rcx
  216ebe:	48 83 fa 00          	cmp    $0x0,%rdx
  216ec2:	74 1c                	je     216ee0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x70>
  216ec4:	eb 25                	jmp    216eeb <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x7b>
  216ec6:	48 8d 3d 33 a1 fe ff 	lea    -0x15ecd(%rip),%rdi        # 201000 <str.2>
  216ecd:	48 8d 15 44 3d 02 00 	lea    0x23d44(%rip),%rdx        # 23ac18 <memcmp+0x1ed8>
  216ed4:	be 39 00 00 00       	mov    $0x39,%esi
  216ed9:	e8 12 ed 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216ede:	0f 0b                	ud2    
            return;
        }

        let mut offset = 0;
  216ee0:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  216ee7:	00 00 
        while offset < fb_region_slice.len() {
  216ee9:	eb 08                	jmp    216ef3 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x83>
            fb_region_slice[offset + 1] = pixel.g;
            fb_region_slice[offset + 2] = pixel.r;
            fb_region_slice[offset + 3] = pixel.channel;
            offset += bps;
        }
    }
  216eeb:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  216ef2:	c3                   	retq   
  216ef3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        while offset < fb_region_slice.len() {
  216ef8:	48 39 44 24 68       	cmp    %rax,0x68(%rsp)
  216efd:	73 ec                	jae    216eeb <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x7b>
  216eff:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset] = pixel.b;
  216f04:	8a 44 24 60          	mov    0x60(%rsp),%al
  216f08:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  216f0c:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  216f11:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216f16:	48 39 c8             	cmp    %rcx,%rax
  216f19:	0f 92 c0             	setb   %al
  216f1c:	a8 01                	test   $0x1,%al
  216f1e:	75 02                	jne    216f22 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xb2>
  216f20:	eb 30                	jmp    216f52 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xe2>
  216f22:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  216f27:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  216f2c:	8a 54 24 3f          	mov    0x3f(%rsp),%dl
  216f30:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 1] = pixel.g;
  216f33:	8a 44 24 61          	mov    0x61(%rsp),%al
  216f37:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  216f3b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  216f40:	48 83 c0 01          	add    $0x1,%rax
  216f44:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216f49:	0f 92 c0             	setb   %al
  216f4c:	a8 01                	test   $0x1,%al
  216f4e:	75 30                	jne    216f80 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x110>
  216f50:	eb 18                	jmp    216f6a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xfa>
  216f52:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  216f57:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            fb_region_slice[offset] = pixel.b;
  216f5c:	48 8d 15 cd 3c 02 00 	lea    0x23ccd(%rip),%rdx        # 23ac30 <memcmp+0x1ef0>
  216f63:	e8 d8 ec 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216f68:	0f 0b                	ud2    
  216f6a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  216f6f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 1] = pixel.g;
  216f74:	48 39 c8             	cmp    %rcx,%rax
  216f77:	0f 92 c0             	setb   %al
  216f7a:	a8 01                	test   $0x1,%al
  216f7c:	75 1c                	jne    216f9a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x12a>
  216f7e:	eb 4a                	jmp    216fca <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x15a>
  216f80:	48 8d 3d 59 a0 fe ff 	lea    -0x15fa7(%rip),%rdi        # 200fe0 <str.1>
  216f87:	48 8d 15 ba 3c 02 00 	lea    0x23cba(%rip),%rdx        # 23ac48 <memcmp+0x1f08>
  216f8e:	be 1c 00 00 00       	mov    $0x1c,%esi
  216f93:	e8 58 ec 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216f98:	0f 0b                	ud2    
  216f9a:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  216f9f:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  216fa4:	8a 54 24 2f          	mov    0x2f(%rsp),%dl
  216fa8:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 2] = pixel.r;
  216fab:	8a 44 24 62          	mov    0x62(%rsp),%al
  216faf:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  216fb3:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  216fb8:	48 83 c0 02          	add    $0x2,%rax
  216fbc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  216fc1:	0f 92 c0             	setb   %al
  216fc4:	a8 01                	test   $0x1,%al
  216fc6:	75 30                	jne    216ff8 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x188>
  216fc8:	eb 18                	jmp    216fe2 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x172>
  216fca:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  216fcf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            fb_region_slice[offset + 1] = pixel.g;
  216fd4:	48 8d 15 85 3c 02 00 	lea    0x23c85(%rip),%rdx        # 23ac60 <memcmp+0x1f20>
  216fdb:	e8 60 ec 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216fe0:	0f 0b                	ud2    
  216fe2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216fe7:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 2] = pixel.r;
  216fec:	48 39 c8             	cmp    %rcx,%rax
  216fef:	0f 92 c0             	setb   %al
  216ff2:	a8 01                	test   $0x1,%al
  216ff4:	75 1c                	jne    217012 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1a2>
  216ff6:	eb 4a                	jmp    217042 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1d2>
  216ff8:	48 8d 3d e1 9f fe ff 	lea    -0x1601f(%rip),%rdi        # 200fe0 <str.1>
  216fff:	48 8d 15 72 3c 02 00 	lea    0x23c72(%rip),%rdx        # 23ac78 <memcmp+0x1f38>
  217006:	be 1c 00 00 00       	mov    $0x1c,%esi
  21700b:	e8 e0 eb 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217010:	0f 0b                	ud2    
  217012:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  217017:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21701c:	8a 54 24 1f          	mov    0x1f(%rsp),%dl
  217020:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 3] = pixel.channel;
  217023:	8a 44 24 63          	mov    0x63(%rsp),%al
  217027:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21702b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  217030:	48 83 c0 03          	add    $0x3,%rax
  217034:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217039:	0f 92 c0             	setb   %al
  21703c:	a8 01                	test   $0x1,%al
  21703e:	75 30                	jne    217070 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x200>
  217040:	eb 18                	jmp    21705a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1ea>
  217042:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  217047:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            fb_region_slice[offset + 2] = pixel.r;
  21704c:	48 8d 15 3d 3c 02 00 	lea    0x23c3d(%rip),%rdx        # 23ac90 <memcmp+0x1f50>
  217053:	e8 e8 eb 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  217058:	0f 0b                	ud2    
  21705a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21705f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 3] = pixel.channel;
  217064:	48 39 c8             	cmp    %rcx,%rax
  217067:	0f 92 c0             	setb   %al
  21706a:	a8 01                	test   $0x1,%al
  21706c:	75 1c                	jne    21708a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x21a>
  21706e:	eb 44                	jmp    2170b4 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x244>
  217070:	48 8d 3d 69 9f fe ff 	lea    -0x16097(%rip),%rdi        # 200fe0 <str.1>
  217077:	48 8d 15 2a 3c 02 00 	lea    0x23c2a(%rip),%rdx        # 23aca8 <memcmp+0x1f68>
  21707e:	be 1c 00 00 00       	mov    $0x1c,%esi
  217083:	e8 68 eb 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217088:	0f 0b                	ud2    
  21708a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21708f:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  217094:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  217099:	40 8a 74 24 0f       	mov    0xf(%rsp),%sil
  21709e:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            offset += bps;
  2170a2:	48 03 44 24 68       	add    0x68(%rsp),%rax
  2170a7:	48 89 04 24          	mov    %rax,(%rsp)
  2170ab:	0f 92 c0             	setb   %al
  2170ae:	a8 01                	test   $0x1,%al
  2170b0:	75 28                	jne    2170da <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x26a>
  2170b2:	eb 18                	jmp    2170cc <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x25c>
  2170b4:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2170b9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            fb_region_slice[offset + 3] = pixel.channel;
  2170be:	48 8d 15 fb 3b 02 00 	lea    0x23bfb(%rip),%rdx        # 23acc0 <memcmp+0x1f80>
  2170c5:	e8 76 eb 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2170ca:	0f 0b                	ud2    
  2170cc:	48 8b 04 24          	mov    (%rsp),%rax
            offset += bps;
  2170d0:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        while offset < fb_region_slice.len() {
  2170d5:	e9 19 fe ff ff       	jmpq   216ef3 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x83>
            offset += bps;
  2170da:	48 8d 3d ff 9e fe ff 	lea    -0x16101(%rip),%rdi        # 200fe0 <str.1>
  2170e1:	48 8d 15 f0 3b 02 00 	lea    0x23bf0(%rip),%rdx        # 23acd8 <memcmp+0x1f98>
  2170e8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2170ed:	e8 fe ea 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2170f2:	0f 0b                	ud2    
  2170f4:	cc                   	int3   
  2170f5:	cc                   	int3   
  2170f6:	cc                   	int3   
  2170f7:	cc                   	int3   
  2170f8:	cc                   	int3   
  2170f9:	cc                   	int3   
  2170fa:	cc                   	int3   
  2170fb:	cc                   	int3   
  2170fc:	cc                   	int3   
  2170fd:	cc                   	int3   
  2170fe:	cc                   	int3   
  2170ff:	cc                   	int3   

0000000000217100 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E>:
}

/// this method initializes the framebuffer, in other words
/// it dereferences the framebuffer memory region which cases
/// the lazy_static struct to initialize.
pub fn setup_framebuffer() {
  217100:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    if FRAMEBUFFER.is_none() {
  217107:	48 8d 3d 8d 9f fe ff 	lea    -0x16073(%rip),%rdi        # 20109b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  21710e:	e8 fd 03 00 00       	callq  217510 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  217113:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21711a:	00 
  21711b:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  217122:	00 
  217123:	e8 e8 a7 ff ff       	callq  211910 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>
  217128:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21712f:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  217136:	a8 01                	test   $0x1,%al
  217138:	75 1b                	jne    217155 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x55>
  21713a:	eb 00                	jmp    21713c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
        log::error!("Fraebuffer set-up failed, system display will not work.");
    }

    let fb_ref = FRAMEBUFFER.as_ref().unwrap().lock();
  21713c:	48 8d 3d 58 9f fe ff 	lea    -0x160a8(%rip),%rdi        # 20109b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  217143:	e8 c8 03 00 00       	callq  217510 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  217148:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21714f:	00 
  217150:	e9 f2 00 00 00       	jmpq   217247 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x147>
        log::error!("Fraebuffer set-up failed, system display will not work.");
  217155:	48 c7 84 24 a0 00 00 	movq   $0x1,0xa0(%rsp)
  21715c:	00 01 00 00 00 
  217161:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  217168:	00 
  217169:	48 8d 35 88 91 fe ff 	lea    -0x16e78(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  217170:	e8 5b be ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  217175:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  21717c:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  217183:	a8 01                	test   $0x1,%al
  217185:	75 0c                	jne    217193 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x93>
  217187:	eb 00                	jmp    217189 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x89>
  217189:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  217190:	00 
  217191:	eb 60                	jmp    2171f3 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0xf3>
  217193:	c6 84 24 bf 01 00 00 	movb   $0x0,0x1bf(%rsp)
  21719a:	00 
  21719b:	48 8b 3d a6 69 02 00 	mov    0x269a6(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2171a2:	0f b6 b4 24 bf 01 00 	movzbl 0x1bf(%rsp),%esi
  2171a9:	00 
  2171aa:	e8 41 40 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2171af:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  2171b6:	00 
  2171b7:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  2171be:	00 
  2171bf:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2171c6:	00 
  2171c7:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2171ce:	00 
  2171cf:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  2171d6:	00 
  2171d7:	e8 f4 bd ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2171dc:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  2171e3:	8a 84 24 86 00 00 00 	mov    0x86(%rsp),%al
  2171ea:	24 01                	and    $0x1,%al
  2171ec:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  2171f3:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  2171fa:	01 
  2171fb:	0f 84 3b ff ff ff    	je     21713c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
  217201:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  217208:	00 
  217209:	48 8d 35 e0 3a 02 00 	lea    0x23ae0(%rip),%rsi        # 23acf0 <memcmp+0x1fb0>
  217210:	ba 01 00 00 00       	mov    $0x1,%edx
  217215:	48 8d 0d d4 9c fe ff 	lea    -0x1632c(%rip),%rcx        # 200ef0 <str.0+0x100>
  21721c:	31 c0                	xor    %eax,%eax
  21721e:	41 89 c0             	mov    %eax,%r8d
  217221:	e8 0a f3 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  217226:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  21722d:	00 
  21722e:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  217235:	00 
  217236:	48 8d 15 c3 3a 02 00 	lea    0x23ac3(%rip),%rdx        # 23ad00 <memcmp+0x1fc0>
  21723d:	e8 3e bb 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  217242:	e9 f5 fe ff ff       	jmpq   21713c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
  217247:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21724e:	00 
    let fb_ref = FRAMEBUFFER.as_ref().unwrap().lock();
  21724f:	e8 2c 9c ff ff       	callq  210e80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  217254:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  217259:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  21725e:	48 8d 35 d3 3a 02 00 	lea    0x23ad3(%rip),%rsi        # 23ad38 <memcmp+0x1ff8>
  217265:	e8 36 a5 ff ff       	callq  2117a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  21726a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21726f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  217274:	e8 f7 76 01 00       	callq  22e970 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  217279:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  217280:	00 
  217281:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  217288:	00 

    log::info!(
  217289:	48 c7 84 24 f8 00 00 	movq   $0x3,0xf8(%rsp)
  217290:	00 03 00 00 00 
  217295:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21729c:	00 
  21729d:	48 8d 35 54 90 fe ff 	lea    -0x16fac(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2172a4:	e8 27 bd ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2172a9:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  2172ad:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  2172b1:	a8 01                	test   $0x1,%al
  2172b3:	75 0c                	jne    2172c1 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x1c1>
  2172b5:	eb 00                	jmp    2172b7 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x1b7>
  2172b7:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  2172be:	00 
  2172bf:	eb 5a                	jmp    21731b <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x21b>
  2172c1:	c6 84 24 af 01 00 00 	movb   $0x0,0x1af(%rsp)
  2172c8:	00 
  2172c9:	48 8b 3d 78 68 02 00 	mov    0x26878(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2172d0:	0f b6 b4 24 af 01 00 	movzbl 0x1af(%rsp),%esi
  2172d7:	00 
  2172d8:	e8 13 3f 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2172dd:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  2172e4:	00 
  2172e5:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  2172ec:	00 
  2172ed:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  2172f4:	00 
  2172f5:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2172fc:	00 
  2172fd:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  217304:	00 
  217305:	e8 c6 bc ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21730a:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  21730e:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  217312:	24 01                	and    $0x1,%al
  217314:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  21731b:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  217322:	01 
  217323:	75 12                	jne    217337 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x237>
        "Framebuffer initialized, address={:p}, width={}, height={}.",
        &fb_ref.buffer[0],
        fb_ref.width,
        fb_ref.height
    );
}
  217325:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21732c:	00 
  21732d:	e8 9e 4c ff ff       	callq  20bfd0 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  217332:	e9 d1 01 00 00       	jmpq   217508 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x408>
        &fb_ref.buffer[0],
  217337:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21733e:	00 
  21733f:	e8 1c 79 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  217344:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  217349:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21734e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  217352:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  217357:	31 c0                	xor    %eax,%eax
  217359:	48 39 c8             	cmp    %rcx,%rax
  21735c:	0f 92 c0             	setb   %al
  21735f:	a8 01                	test   $0x1,%al
  217361:	75 02                	jne    217365 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x265>
  217363:	eb 24                	jmp    217389 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x289>
  217365:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21736a:	48 8b 00             	mov    (%rax),%rax
  21736d:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  217374:	00 
        fb_ref.width,
  217375:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21737c:	00 
  21737d:	e8 de 78 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  217382:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  217387:	eb 17                	jmp    2173a0 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x2a0>
  217389:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
        &fb_ref.buffer[0],
  21738e:	48 8d 15 fb 39 02 00 	lea    0x239fb(%rip),%rdx        # 23ad90 <memcmp+0x2050>
  217395:	31 c0                	xor    %eax,%eax
  217397:	89 c7                	mov    %eax,%edi
  217399:	e8 a2 e8 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21739e:	0f 0b                	ud2    
  2173a0:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        fb_ref.width,
  2173a5:	48 83 c0 10          	add    $0x10,%rax
  2173a9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        fb_ref.height
  2173ae:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2173b5:	00 
  2173b6:	e8 a5 78 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  2173bb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2173c0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2173c5:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2173ca:	48 83 c0 18          	add    $0x18,%rax
    log::info!(
  2173ce:	48 8d 94 24 88 01 00 	lea    0x188(%rsp),%rdx
  2173d5:	00 
  2173d6:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  2173dd:	00 
  2173de:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  2173e5:	00 
  2173e6:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2173ed:	00 
  2173ee:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  2173f5:	00 
  2173f6:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  2173fd:	00 
  2173fe:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  217405:	00 
  217406:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21740b:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  217412:	00 
  217413:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  21741a:	00 
  21741b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217420:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  217427:	00 
  217428:	48 8d 35 41 7a ff ff 	lea    -0x85bf(%rip),%rsi        # 20ee70 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h3368779d22478805E>
  21742f:	e8 cc 7f ff ff       	callq  20f400 <_ZN4core3fmt10ArgumentV13new17h8dab2205c245e810E>
  217434:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217439:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21743e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  217443:	48 8b 35 16 67 02 00 	mov    0x26716(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21744a:	e8 31 81 ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21744f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217454:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  217459:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21745e:	48 8b 35 fb 66 02 00 	mov    0x266fb(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  217465:	e8 16 81 ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21746a:	48 89 04 24          	mov    %rax,(%rsp)
  21746e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  217473:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217478:	48 8b 0c 24          	mov    (%rsp),%rcx
  21747c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  217481:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  217486:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21748b:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
  217490:	4c 89 84 24 40 01 00 	mov    %r8,0x140(%rsp)
  217497:	00 
  217498:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21749f:	00 
  2174a0:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  2174a7:	00 
  2174a8:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  2174af:	00 
  2174b0:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  2174b7:	00 
  2174b8:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2174bf:	00 
  2174c0:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  2174c7:	00 
  2174c8:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  2174cf:	00 
  2174d0:	48 8d 35 79 38 02 00 	lea    0x23879(%rip),%rsi        # 23ad50 <memcmp+0x2010>
  2174d7:	ba 04 00 00 00       	mov    $0x4,%edx
  2174dc:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  2174e2:	e8 49 f0 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2174e7:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  2174ee:	00 
  2174ef:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  2174f6:	00 
  2174f7:	48 8d 15 aa 38 02 00 	lea    0x238aa(%rip),%rdx        # 23ada8 <memcmp+0x2068>
  2174fe:	e8 7d b8 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  217503:	e9 1d fe ff ff       	jmpq   217325 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x225>
}
  217508:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  21750f:	c3                   	retq   

0000000000217510 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>:
            fn deref(&self) -> &$T {
  217510:	48 83 ec 18          	sub    $0x18,%rsp
  217514:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217519:	48 8d 05 00 77 02 00 	lea    0x27700(%rip),%rax        # 23ec20 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2451f33113c0a27aE>
  217520:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217525:	48 8d 3d f4 76 02 00 	lea    0x276f4(%rip),%rdi        # 23ec20 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2451f33113c0a27aE>
  21752c:	e8 3f 26 ff ff       	callq  209b70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE>
  217531:	48 89 04 24          	mov    %rax,(%rsp)
  217535:	48 8b 04 24          	mov    (%rsp),%rax
            }
  217539:	48 83 c4 18          	add    $0x18,%rsp
  21753d:	c3                   	retq   
  21753e:	cc                   	int3   
  21753f:	cc                   	int3   

0000000000217540 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb90b90fa70029186E>:
    pub const fn cast<U>(self) -> *const U {
  217540:	50                   	push   %rax
  217541:	48 89 f8             	mov    %rdi,%rax
  217544:	48 89 04 24          	mov    %rax,(%rsp)
    }
  217548:	59                   	pop    %rcx
  217549:	c3                   	retq   
  21754a:	cc                   	int3   
  21754b:	cc                   	int3   
  21754c:	cc                   	int3   
  21754d:	cc                   	int3   
  21754e:	cc                   	int3   
  21754f:	cc                   	int3   

0000000000217550 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
  217550:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  217557:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21755c:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  217561:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
  217568:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  21756f:	00 
  217570:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  217577:	00 
    let len = len_utf8(code);
  217578:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  21757f:	e8 4c 04 00 00       	callq  2179d0 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE>
  217584:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21758b:	00 
  21758c:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  217591:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
    match (len, &mut dst[..]) {
  217596:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21759d:	00 
  21759e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2175a3:	48 8d 15 36 38 02 00 	lea    0x23836(%rip),%rdx        # 23ade0 <memcmp+0x20a0>
  2175aa:	e8 c1 33 01 00       	callq  22a970 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hf68e6a005a44d53cE>
  2175af:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2175b4:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2175b9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2175be:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2175c3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  2175c8:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2175cf:	00 
  2175d0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2175d7:	00 
  2175d8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2175df:	00 
  2175e0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2175e7:	00 
  2175e8:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  2175ec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2175f1:	48 83 e8 03          	sub    $0x3,%rax
  2175f5:	77 15                	ja     21760c <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
  2175f7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2175fc:	48 8d 0d 99 9a fe ff 	lea    -0x16567(%rip),%rcx        # 20109c <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0x1>
  217603:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  217607:	48 01 c8             	add    %rcx,%rax
  21760a:	ff e0                	jmpq   *%rax
  21760c:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
  217611:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  217618:	00 
        _ => panic!(
  217619:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  217620:	00 
  217621:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  217628:	00 
  217629:	48 8d 84 24 84 00 00 	lea    0x84(%rsp),%rax
  217630:	00 
  217631:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  217638:	00 
  217639:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  217640:	00 
  217641:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  217648:	00 
  217649:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  217650:	00 
  217651:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  217658:	00 
  217659:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  217660:	00 
  217661:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217666:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  21766d:	00 
  21766e:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  217675:	00 
  217676:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21767b:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  217682:	00 
  217683:	48 8b 35 d6 64 02 00 	mov    0x264d6(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21768a:	e8 f1 7e ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21768f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  217694:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  217699:	e9 21 02 00 00       	jmpq   2178bf <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x36f>
        (1, [a, ..]) => {
  21769e:	48 83 bc 24 a0 00 00 	cmpq   $0x1,0xa0(%rsp)
  2176a5:	00 01 
  2176a7:	0f 83 e2 01 00 00    	jae    21788f <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x33f>
  2176ad:	e9 5a ff ff ff       	jmpq   21760c <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (2, [a, b, ..]) => {
  2176b2:	48 83 bc 24 a0 00 00 	cmpq   $0x2,0xa0(%rsp)
  2176b9:	00 02 
  2176bb:	0f 83 80 01 00 00    	jae    217841 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x2f1>
  2176c1:	e9 46 ff ff ff       	jmpq   21760c <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (3, [a, b, c, ..]) => {
  2176c6:	48 83 bc 24 a0 00 00 	cmpq   $0x3,0xa0(%rsp)
  2176cd:	00 03 
  2176cf:	0f 83 f2 00 00 00    	jae    2177c7 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x277>
  2176d5:	e9 32 ff ff ff       	jmpq   21760c <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (4, [a, b, c, d, ..]) => {
  2176da:	48 83 bc 24 a0 00 00 	cmpq   $0x4,0xa0(%rsp)
  2176e1:	00 04 
  2176e3:	0f 82 23 ff ff ff    	jb     21760c <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
  2176e9:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  2176f0:	00 
  2176f1:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  2176f8:	00 
  2176f9:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  217700:	00 
  217701:	48 89 d0             	mov    %rdx,%rax
  217704:	48 83 c0 01          	add    $0x1,%rax
  217708:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21770f:	00 
  217710:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  217717:	00 
  217718:	48 89 c8             	mov    %rcx,%rax
  21771b:	48 83 c0 02          	add    $0x2,%rax
  21771f:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  217726:	00 
  217727:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21772e:	00 
  21772f:	48 89 c7             	mov    %rax,%rdi
  217732:	48 83 c7 03          	add    $0x3,%rdi
  217736:	48 89 bc 24 58 01 00 	mov    %rdi,0x158(%rsp)
  21773d:	00 
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
  21773e:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  217745:	c1 ef 12             	shr    $0x12,%edi
  217748:	83 e7 07             	and    $0x7,%edi
  21774b:	40 80 cf f0          	or     $0xf0,%dil
  21774f:	40 88 3e             	mov    %dil,(%rsi)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
  217752:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  217759:	c1 ee 0c             	shr    $0xc,%esi
  21775c:	83 e6 3f             	and    $0x3f,%esi
  21775f:	40 80 ce 80          	or     $0x80,%sil
  217763:	40 88 72 01          	mov    %sil,0x1(%rdx)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  217767:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  21776e:	c1 ea 06             	shr    $0x6,%edx
  217771:	83 e2 3f             	and    $0x3f,%edx
  217774:	80 ca 80             	or     $0x80,%dl
  217777:	88 51 02             	mov    %dl,0x2(%rcx)
            *d = (code & 0x3F) as u8 | TAG_CONT;
  21777a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  217781:	83 e1 3f             	and    $0x3f,%ecx
  217784:	80 c9 80             	or     $0x80,%cl
  217787:	88 48 03             	mov    %cl,0x3(%rax)
  21778a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21778f:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
        ),
    };
    &mut dst[..len]
  217794:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21779b:	00 
  21779c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2177a3:	00 
  2177a4:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  2177ab:	00 
  2177ac:	48 8d 0d 45 36 02 00 	lea    0x23645(%rip),%rcx        # 23adf8 <memcmp+0x20b8>
  2177b3:	e8 18 31 01 00       	callq  22a8d0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h5d3ec839ca9d3a69E>
  2177b8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2177bd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2177c2:	e9 e6 00 00 00       	jmpq   2178ad <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x35d>
        (3, [a, b, c, ..]) => {
  2177c7:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  2177ce:	00 
  2177cf:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  2177d6:	00 
  2177d7:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2177de:	00 
  2177df:	48 89 c8             	mov    %rcx,%rax
  2177e2:	48 83 c0 01          	add    $0x1,%rax
  2177e6:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2177ed:	00 
  2177ee:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2177f5:	00 
  2177f6:	48 89 c6             	mov    %rax,%rsi
  2177f9:	48 83 c6 02          	add    $0x2,%rsi
  2177fd:	48 89 b4 24 70 01 00 	mov    %rsi,0x170(%rsp)
  217804:	00 
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
  217805:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  21780c:	c1 ee 0c             	shr    $0xc,%esi
  21780f:	83 e6 0f             	and    $0xf,%esi
  217812:	40 80 ce e0          	or     $0xe0,%sil
  217816:	40 88 32             	mov    %sil,(%rdx)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  217819:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  217820:	c1 ea 06             	shr    $0x6,%edx
  217823:	83 e2 3f             	and    $0x3f,%edx
  217826:	80 ca 80             	or     $0x80,%dl
  217829:	88 51 01             	mov    %dl,0x1(%rcx)
            *c = (code & 0x3F) as u8 | TAG_CONT;
  21782c:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  217833:	83 e1 3f             	and    $0x3f,%ecx
  217836:	80 c9 80             	or     $0x80,%cl
  217839:	88 48 02             	mov    %cl,0x2(%rax)
        }
  21783c:	e9 49 ff ff ff       	jmpq   21778a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
        (2, [a, b, ..]) => {
  217841:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  217848:	00 
  217849:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  217850:	00 
  217851:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  217858:	00 
  217859:	48 89 c2             	mov    %rax,%rdx
  21785c:	48 83 c2 01          	add    $0x1,%rdx
  217860:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  217867:	00 
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
  217868:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  21786f:	c1 ea 06             	shr    $0x6,%edx
  217872:	83 e2 1f             	and    $0x1f,%edx
  217875:	80 ca c0             	or     $0xc0,%dl
  217878:	88 11                	mov    %dl,(%rcx)
            *b = (code & 0x3F) as u8 | TAG_CONT;
  21787a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  217881:	83 e1 3f             	and    $0x3f,%ecx
  217884:	80 c9 80             	or     $0x80,%cl
  217887:	88 48 01             	mov    %cl,0x1(%rax)
        }
  21788a:	e9 fb fe ff ff       	jmpq   21778a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
        (1, [a, ..]) => {
  21788f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  217896:	00 
  217897:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  21789e:	00 
            *a = code as u8;
  21789f:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  2178a6:	88 08                	mov    %cl,(%rax)
        }
  2178a8:	e9 dd fe ff ff       	jmpq   21778a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
  2178ad:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2178b2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  2178b7:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  2178be:	c3                   	retq   
  2178bf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        _ => panic!(
  2178c4:	48 8b 35 a5 62 02 00 	mov    0x262a5(%rip),%rsi        # 23db70 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x88>
  2178cb:	e8 d0 77 ff ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2178d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2178d5:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2178da:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2178df:	48 8b 35 7a 62 02 00 	mov    0x2627a(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2178e6:	e8 95 7c ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  2178eb:	48 89 04 24          	mov    %rax,(%rsp)
  2178ef:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2178f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2178f9:	48 8b 0c 24          	mov    (%rsp),%rcx
  2178fd:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  217902:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  217907:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21790c:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  217911:	4c 89 84 24 d8 00 00 	mov    %r8,0xd8(%rsp)
  217918:	00 
  217919:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  217920:	00 
  217921:	48 89 b4 24 e8 00 00 	mov    %rsi,0xe8(%rsp)
  217928:	00 
  217929:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  217930:	00 
  217931:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  217938:	00 
  217939:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  217940:	00 
  217941:	48 8d 8c 24 d8 00 00 	lea    0xd8(%rsp),%rcx
  217948:	00 
  217949:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  217950:	00 
  217951:	48 8d 35 b8 34 02 00 	lea    0x234b8(%rip),%rsi        # 23ae10 <memcmp+0x20d0>
  217958:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  21795e:	4c 89 c2             	mov    %r8,%rdx
  217961:	e8 ca eb fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  217966:	48 8d 35 d3 34 02 00 	lea    0x234d3(%rip),%rsi        # 23ae40 <memcmp+0x2100>
  21796d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  217974:	00 
  217975:	e8 46 e3 01 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21797a:	0f 0b                	ud2    
  21797c:	cc                   	int3   
  21797d:	cc                   	int3   
  21797e:	cc                   	int3   
  21797f:	cc                   	int3   

0000000000217980 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
  217980:	48 83 ec 38          	sub    $0x38,%rsp
  217984:	89 7c 24 24          	mov    %edi,0x24(%rsp)
  217988:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21798d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
  217992:	e8 b9 fb ff ff       	callq  217550 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE>
  217997:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21799c:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2179a1:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2179a6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2179ab:	e8 70 2e 01 00       	callq  22a820 <_ZN4core3str8converts23from_utf8_unchecked_mut17he64a89b0752a7eafE>
  2179b0:	48 89 04 24          	mov    %rax,(%rsp)
  2179b4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2179b9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2179be:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2179c2:	48 83 c4 38          	add    $0x38,%rsp
  2179c6:	c3                   	retq   
  2179c7:	cc                   	int3   
  2179c8:	cc                   	int3   
  2179c9:	cc                   	int3   
  2179ca:	cc                   	int3   
  2179cb:	cc                   	int3   
  2179cc:	cc                   	int3   
  2179cd:	cc                   	int3   
  2179ce:	cc                   	int3   
  2179cf:	cc                   	int3   

00000000002179d0 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE>:
const fn len_utf8(code: u32) -> usize {
  2179d0:	48 83 ec 18          	sub    $0x18,%rsp
  2179d4:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  2179d8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
    if code < MAX_ONE_B {
  2179dc:	81 ff 80 00 00 00    	cmp    $0x80,%edi
  2179e2:	72 0d                	jb     2179f1 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x21>
  2179e4:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_TWO_B {
  2179e8:	3d 00 08 00 00       	cmp    $0x800,%eax
  2179ed:	72 22                	jb     217a11 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x41>
  2179ef:	eb 13                	jmp    217a04 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x34>
        1
  2179f1:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  2179f8:	00 00 
}
  2179fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2179ff:	48 83 c4 18          	add    $0x18,%rsp
  217a03:	c3                   	retq   
  217a04:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_THREE_B {
  217a08:	3d 00 00 01 00       	cmp    $0x10000,%eax
  217a0d:	72 18                	jb     217a27 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x57>
  217a0f:	eb 0b                	jmp    217a1c <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x4c>
        2
  217a11:	48 c7 44 24 08 02 00 	movq   $0x2,0x8(%rsp)
  217a18:	00 00 
    if code < MAX_ONE_B {
  217a1a:	eb de                	jmp    2179fa <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x2a>
        4
  217a1c:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  217a23:	00 00 
    } else if code < MAX_THREE_B {
  217a25:	eb 09                	jmp    217a30 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x60>
        3
  217a27:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
  217a2e:	00 00 
    } else if code < MAX_TWO_B {
  217a30:	eb e8                	jmp    217a1a <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x4a>
  217a32:	cc                   	int3   
  217a33:	cc                   	int3   
  217a34:	cc                   	int3   
  217a35:	cc                   	int3   
  217a36:	cc                   	int3   
  217a37:	cc                   	int3   
  217a38:	cc                   	int3   
  217a39:	cc                   	int3   
  217a3a:	cc                   	int3   
  217a3b:	cc                   	int3   
  217a3c:	cc                   	int3   
  217a3d:	cc                   	int3   
  217a3e:	cc                   	int3   
  217a3f:	cc                   	int3   

0000000000217a40 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E>:
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.

#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
  217a40:	48 83 ec 38          	sub    $0x38,%rsp
  217a44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217a49:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217a4e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
  217a53:	31 c0                	xor    %eax,%eax
  217a55:	a8 01                	test   $0x1,%al
  217a57:	75 0e                	jne    217a67 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E+0x27>
  217a59:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        Err(CapacityOverflow.into())
    } else {
        Ok(())
  217a5e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
  217a65:	eb 3e                	jmp    217aa5 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E+0x65>
        Err(CapacityOverflow.into())
  217a67:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  217a6e:	00 00 
  217a70:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  217a75:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  217a7a:	e8 11 43 00 00       	callq  21bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  217a7f:	48 89 04 24          	mov    %rax,(%rsp)
  217a83:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  217a88:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217a8d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  217a92:	48 8b 14 24          	mov    (%rsp),%rdx
  217a96:	48 89 50 08          	mov    %rdx,0x8(%rax)
  217a9a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  217a9e:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  217aa5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
}
  217aaa:	48 83 c4 38          	add    $0x38,%rsp
  217aae:	c3                   	retq   
  217aaf:	cc                   	int3   

0000000000217ab0 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>:
fn handle_reserve(result: Result<(), TryReserveError>) {
  217ab0:	48 83 ec 48          	sub    $0x48,%rsp
    match result.map_err(|e| e.kind()) {
  217ab4:	48 8b 07             	mov    (%rdi),%rax
  217ab7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217abc:	48 8b 47 08          	mov    0x8(%rdi),%rax
  217ac0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217ac5:	48 8b 47 10          	mov    0x10(%rdi),%rax
  217ac9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217ace:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  217ad3:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  217ad8:	e8 b3 3a ff ff       	callq  20b590 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E>
  217add:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217ae2:	48 85 c0             	test   %rax,%rax
  217ae5:	74 06                	je     217aed <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x3d>
  217ae7:	eb 00                	jmp    217ae9 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x39>
  217ae9:	eb 07                	jmp    217af2 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x42>
  217aeb:	0f 0b                	ud2    
}
  217aed:	48 83 c4 48          	add    $0x48,%rsp
  217af1:	c3                   	retq   
    match result.map_err(|e| e.kind()) {
  217af2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  217af7:	48 85 c0             	test   %rax,%rax
  217afa:	0f 95 c0             	setne  %al
  217afd:	0f b6 c0             	movzbl %al,%eax
  217b00:	74 04                	je     217b06 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x56>
  217b02:	eb 00                	jmp    217b04 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x54>
  217b04:	eb 07                	jmp    217b0d <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x5d>
        Err(CapacityOverflow) => capacity_overflow(),
  217b06:	e8 b5 ab 01 00       	callq  2326c0 <_ZN5alloc7raw_vec17capacity_overflow17h99a87b7ff45619d7E>
  217b0b:	0f 0b                	ud2    
        Err(AllocError { layout, .. }) => handle_alloc_error(layout),
  217b0d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  217b12:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  217b17:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  217b1c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  217b21:	e8 ca ab 01 00       	callq  2326f0 <_ZN5alloc5alloc18handle_alloc_error17hd9bd3602b1600516E>
  217b26:	0f 0b                	ud2    
  217b28:	cc                   	int3   
  217b29:	cc                   	int3   
  217b2a:	cc                   	int3   
  217b2b:	cc                   	int3   
  217b2c:	cc                   	int3   
  217b2d:	cc                   	int3   
  217b2e:	cc                   	int3   
  217b2f:	cc                   	int3   

0000000000217b30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>:
    pub fn from_aligned_address(addr: mm::PhysicalAddress) -> Result<Self, PagingError> {
  217b30:	48 83 ec 48          	sub    $0x48,%rsp
  217b34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217b39:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217b3e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if !addr.is_aligned_at(PageSize::Page4KiB.size()) {
  217b43:	48 8d 3d 15 96 fe ff 	lea    -0x169eb(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217b4a:	e8 11 4c ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217b4f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217b54:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  217b59:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  217b5e:	e8 4d 09 01 00       	callq  2284b0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  217b63:	88 44 24 0f          	mov    %al,0xf(%rsp)
  217b67:	8a 44 24 0f          	mov    0xf(%rsp),%al
  217b6b:	34 ff                	xor    $0xff,%al
  217b6d:	a8 01                	test   $0x1,%al
  217b6f:	75 21                	jne    217b92 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E+0x62>
  217b71:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        Ok(Frame(addr))
  217b76:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  217b7b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  217b80:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  217b85:	48 89 48 08          	mov    %rcx,0x8(%rax)
  217b89:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  217b90:	eb 3c                	jmp    217bce <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E+0x9e>
            return Err(PagingError::UnalignedAddress(addr.as_u64()));
  217b92:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  217b97:	e8 e4 08 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  217b9c:	48 89 04 24          	mov    %rax,(%rsp)
  217ba0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217ba5:	48 8b 0c 24          	mov    (%rsp),%rcx
  217ba9:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  217bae:	66 c7 44 24 30 03 00 	movw   $0x3,0x30(%rsp)
  217bb5:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  217bba:	48 89 48 08          	mov    %rcx,0x8(%rax)
  217bbe:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  217bc3:	48 89 48 10          	mov    %rcx,0x10(%rax)
  217bc7:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  217bce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  217bd3:	48 83 c4 48          	add    $0x48,%rsp
  217bd7:	c3                   	retq   
  217bd8:	cc                   	int3   
  217bd9:	cc                   	int3   
  217bda:	cc                   	int3   
  217bdb:	cc                   	int3   
  217bdc:	cc                   	int3   
  217bdd:	cc                   	int3   
  217bde:	cc                   	int3   
  217bdf:	cc                   	int3   

0000000000217be0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>:
    pub fn from_address(addr: mm::PhysicalAddress) -> Self {
  217be0:	48 83 ec 28          	sub    $0x28,%rsp
  217be4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Frame(addr.new_align_down(PageSize::Page4KiB.size()))
  217be9:	48 8d 3d 6f 95 fe ff 	lea    -0x16a91(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217bf0:	e8 6b 4b ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217bf5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217bfa:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  217bff:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217c04:	e8 e7 08 01 00       	callq  2284f0 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h6792f5d42c0b6e10E>
  217c09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c0e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217c13:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  217c18:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217c1d:	48 83 c4 28          	add    $0x28,%rsp
  217c21:	c3                   	retq   
  217c22:	cc                   	int3   
  217c23:	cc                   	int3   
  217c24:	cc                   	int3   
  217c25:	cc                   	int3   
  217c26:	cc                   	int3   
  217c27:	cc                   	int3   
  217c28:	cc                   	int3   
  217c29:	cc                   	int3   
  217c2a:	cc                   	int3   
  217c2b:	cc                   	int3   
  217c2c:	cc                   	int3   
  217c2d:	cc                   	int3   
  217c2e:	cc                   	int3   
  217c2f:	cc                   	int3   

0000000000217c30 <_ZN9r3_kernel2mm3phy5Frame4addr17h1a4e3a91f04f8e02E>:
    pub fn addr(&self) -> mm::PhysicalAddress {
  217c30:	50                   	push   %rax
  217c31:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  217c35:	48 8b 07             	mov    (%rdi),%rax
    }
  217c38:	59                   	pop    %rcx
  217c39:	c3                   	retq   
  217c3a:	cc                   	int3   
  217c3b:	cc                   	int3   
  217c3c:	cc                   	int3   
  217c3d:	cc                   	int3   
  217c3e:	cc                   	int3   
  217c3f:	cc                   	int3   

0000000000217c40 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>:
    pub fn as_u64(&self) -> u64 {
  217c40:	48 83 ec 18          	sub    $0x18,%rsp
  217c44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  217c49:	e8 32 08 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  217c4e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c53:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217c58:	48 83 c4 18          	add    $0x18,%rsp
  217c5c:	c3                   	retq   
  217c5d:	cc                   	int3   
  217c5e:	cc                   	int3   
  217c5f:	cc                   	int3   

0000000000217c60 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E>:
    pub fn new(start: u64, end: u64) -> Self {
  217c60:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  217c67:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  217c6c:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  217c71:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  217c76:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  217c7b:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  217c80:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
        let aligned_start = mm::Alignment::align_up(start, PageSize::Page4KiB.size());
  217c85:	48 8d 3d d3 94 fe ff 	lea    -0x16b2d(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217c8c:	e8 cf 4a ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217c91:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  217c96:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  217c9b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  217ca0:	e8 6b 05 01 00       	callq  228210 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  217ca5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  217caa:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
        let aligned_end = mm::Alignment::align_down(end, PageSize::Page4KiB.size());
  217caf:	48 8d 3d a9 94 fe ff 	lea    -0x16b57(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217cb6:	e8 a5 4a ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217cbb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217cc0:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  217cc5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  217cca:	e8 e1 04 01 00       	callq  2281b0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  217ccf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217cd4:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  217cdb:	00 
  217cdc:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  217ce1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        let size = (aligned_end - aligned_start) as usize;
  217ce6:	48 29 c8             	sub    %rcx,%rax
  217ce9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217cee:	0f 92 c0             	setb   %al
  217cf1:	a8 01                	test   $0x1,%al
  217cf3:	75 20                	jne    217d15 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0xb5>
  217cf5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217cfa:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  217d01:	00 
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  217d02:	48 8d 3d 56 94 fe ff 	lea    -0x16baa(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217d09:	e8 52 4a ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217d0e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217d13:	eb 1a                	jmp    217d2f <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0xcf>
        let size = (aligned_end - aligned_start) as usize;
  217d15:	48 8d 3d 54 94 fe ff 	lea    -0x16bac(%rip),%rdi        # 201170 <str.0>
  217d1c:	48 8d 15 35 31 02 00 	lea    0x23135(%rip),%rdx        # 23ae58 <memcmp+0x2118>
  217d23:	be 21 00 00 00       	mov    $0x21,%esi
  217d28:	e8 c3 de 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217d2d:	0f 0b                	ud2    
  217d2f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  217d34:	48 83 f8 00          	cmp    $0x0,%rax
  217d38:	0f 94 c0             	sete   %al
  217d3b:	a8 01                	test   $0x1,%al
  217d3d:	75 2d                	jne    217d6c <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0x10c>
  217d3f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  217d44:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  217d49:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217d4e:	31 d2                	xor    %edx,%edx
  217d50:	48 f7 f1             	div    %rcx
  217d53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217d58:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  217d5f:	00 
            start: mm::PhysicalAddress::from_u64(aligned_start),
  217d60:	e8 2b 07 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  217d65:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217d6a:	eb 1a                	jmp    217d86 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0x126>
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  217d6c:	48 8d 3d 2d 94 fe ff 	lea    -0x16bd3(%rip),%rdi        # 2011a0 <str.1>
  217d73:	48 8d 15 f6 30 02 00 	lea    0x230f6(%rip),%rdx        # 23ae70 <memcmp+0x2130>
  217d7a:	be 19 00 00 00       	mov    $0x19,%esi
  217d7f:	e8 6c de 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217d84:	0f 0b                	ud2    
  217d86:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  217d8b:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  217d90:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  217d95:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  217d9a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        MemoryRegion {
  217d9f:	48 89 39             	mov    %rdi,(%rcx)
  217da2:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  217da6:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  217daa:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  217db1:	00 
    }
  217db2:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  217db9:	c3                   	retq   
  217dba:	cc                   	int3   
  217dbb:	cc                   	int3   
  217dbc:	cc                   	int3   
  217dbd:	cc                   	int3   
  217dbe:	cc                   	int3   
  217dbf:	cc                   	int3   

0000000000217dc0 <_ZN9r3_kernel2mm3phy12MemoryRegion5empty17hd30c8ed48360a7fcE>:
    pub fn empty() -> Self {
  217dc0:	48 83 ec 18          	sub    $0x18,%rsp
  217dc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  217dc8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
            start: mm::PhysicalAddress::from_u64(0),
  217dcd:	31 c0                	xor    %eax,%eax
  217dcf:	89 c7                	mov    %eax,%edi
  217dd1:	e8 ba 06 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  217dd6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217ddb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217de0:	48 8b 0c 24          	mov    (%rsp),%rcx
  217de4:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        MemoryRegion {
  217de9:	48 89 11             	mov    %rdx,(%rcx)
  217dec:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  217df3:	00 
  217df4:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  217dfb:	00 
  217dfc:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  217e03:	00 
    }
  217e04:	48 83 c4 18          	add    $0x18,%rsp
  217e08:	c3                   	retq   
  217e09:	cc                   	int3   
  217e0a:	cc                   	int3   
  217e0b:	cc                   	int3   
  217e0c:	cc                   	int3   
  217e0d:	cc                   	int3   
  217e0e:	cc                   	int3   
  217e0f:	cc                   	int3   

0000000000217e10 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>:
    pub fn can_allocate(&self, n: usize) -> bool {
  217e10:	48 83 ec 28          	sub    $0x28,%rsp
  217e14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217e19:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217e1e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.current + n < self.n_frames
  217e23:	48 03 77 18          	add    0x18(%rdi),%rsi
  217e27:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  217e2c:	0f 92 c0             	setb   %al
  217e2f:	a8 01                	test   $0x1,%al
  217e31:	75 1b                	jne    217e4e <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E+0x3e>
  217e33:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217e38:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  217e3d:	48 3b 41 10          	cmp    0x10(%rcx),%rax
  217e41:	0f 92 c0             	setb   %al
    }
  217e44:	24 01                	and    $0x1,%al
  217e46:	0f b6 c0             	movzbl %al,%eax
  217e49:	48 83 c4 28          	add    $0x28,%rsp
  217e4d:	c3                   	retq   
        self.current + n < self.n_frames
  217e4e:	48 8d 3d 6b 93 fe ff 	lea    -0x16c95(%rip),%rdi        # 2011c0 <str.2>
  217e55:	48 8d 15 2c 30 02 00 	lea    0x2302c(%rip),%rdx        # 23ae88 <memcmp+0x2148>
  217e5c:	be 1c 00 00 00       	mov    $0x1c,%esi
  217e61:	e8 8a dd 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217e66:	0f 0b                	ud2    
  217e68:	cc                   	int3   
  217e69:	cc                   	int3   
  217e6a:	cc                   	int3   
  217e6b:	cc                   	int3   
  217e6c:	cc                   	int3   
  217e6d:	cc                   	int3   
  217e6e:	cc                   	int3   
  217e6f:	cc                   	int3   

0000000000217e70 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>:
    pub fn can_allocate_aligned(&self, n: usize) -> bool {
  217e70:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  217e77:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  217e7c:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  217e81:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  217e86:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  217e8b:	e8 f0 05 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  217e90:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  217e95:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  217e9a:	48 8b 40 18          	mov    0x18(%rax),%rax
  217e9e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  217ea3:	48 8d 3d b5 92 fe ff 	lea    -0x16d4b(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217eaa:	e8 b1 48 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217eaf:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  217eb4:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  217eb9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  217ebe:	48 f7 e1             	mul    %rcx
  217ec1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  217ec6:	0f 90 c0             	seto   %al
  217ec9:	a8 01                	test   $0x1,%al
  217ecb:	75 1b                	jne    217ee8 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x78>
  217ecd:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  217ed2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  217ed7:	48 01 c8             	add    %rcx,%rax
  217eda:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  217edf:	0f 92 c0             	setb   %al
  217ee2:	a8 01                	test   $0x1,%al
  217ee4:	75 3c                	jne    217f22 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0xb2>
  217ee6:	eb 1a                	jmp    217f02 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x92>
  217ee8:	48 8d 3d f1 92 fe ff 	lea    -0x16d0f(%rip),%rdi        # 2011e0 <str.3>
  217eef:	48 8d 15 aa 2f 02 00 	lea    0x22faa(%rip),%rdx        # 23aea0 <memcmp+0x2160>
  217ef6:	be 21 00 00 00       	mov    $0x21,%esi
  217efb:	e8 f0 dc 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217f00:	0f 0b                	ud2    
  217f02:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  217f07:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  217f0e:	00 
            let alignd_addr = mm::Alignment::align_up(current_address, PageSize::Page2MiB.size());
  217f0f:	48 8d 3d eb 92 fe ff 	lea    -0x16d15(%rip),%rdi        # 201201 <str.3+0x21>
  217f16:	e8 45 48 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217f1b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217f20:	eb 1a                	jmp    217f3c <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0xcc>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  217f22:	48 8d 3d 97 92 fe ff 	lea    -0x16d69(%rip),%rdi        # 2011c0 <str.2>
  217f29:	48 8d 15 88 2f 02 00 	lea    0x22f88(%rip),%rdx        # 23aeb8 <memcmp+0x2178>
  217f30:	be 1c 00 00 00       	mov    $0x1c,%esi
  217f35:	e8 b6 dc 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217f3a:	0f 0b                	ud2    
  217f3c:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  217f41:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
            let alignd_addr = mm::Alignment::align_up(current_address, PageSize::Page2MiB.size());
  217f46:	e8 c5 02 01 00       	callq  228210 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  217f4b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217f50:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  217f57:	00 
  217f58:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  217f5d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            ((alignd_addr - current_address) / PageSize::Page4KiB.size()) as usize
  217f62:	48 29 c8             	sub    %rcx,%rax
  217f65:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217f6a:	0f 92 c0             	setb   %al
  217f6d:	a8 01                	test   $0x1,%al
  217f6f:	75 13                	jne    217f84 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x114>
  217f71:	48 8d 3d e7 91 fe ff 	lea    -0x16e19(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  217f78:	e8 e3 47 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217f7d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217f82:	eb 1a                	jmp    217f9e <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x12e>
  217f84:	48 8d 3d e5 91 fe ff 	lea    -0x16e1b(%rip),%rdi        # 201170 <str.0>
  217f8b:	48 8d 15 3e 2f 02 00 	lea    0x22f3e(%rip),%rdx        # 23aed0 <memcmp+0x2190>
  217f92:	be 21 00 00 00       	mov    $0x21,%esi
  217f97:	e8 54 dc 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217f9c:	0f 0b                	ud2    
  217f9e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  217fa3:	48 83 f8 00          	cmp    $0x0,%rax
  217fa7:	0f 94 c0             	sete   %al
  217faa:	a8 01                	test   $0x1,%al
  217fac:	75 2e                	jne    217fdc <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x16c>
  217fae:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  217fb3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  217fb8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217fbd:	31 d2                	xor    %edx,%edx
  217fbf:	48 f7 f6             	div    %rsi
  217fc2:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  217fc9:	00 
        self.current + offset + n < self.n_frames
  217fca:	48 03 41 18          	add    0x18(%rcx),%rax
  217fce:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217fd3:	0f 92 c0             	setb   %al
  217fd6:	a8 01                	test   $0x1,%al
  217fd8:	75 37                	jne    218011 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1a1>
  217fda:	eb 1a                	jmp    217ff6 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x186>
            ((alignd_addr - current_address) / PageSize::Page4KiB.size()) as usize
  217fdc:	48 8d 3d bd 91 fe ff 	lea    -0x16e43(%rip),%rdi        # 2011a0 <str.1>
  217fe3:	48 8d 15 fe 2e 02 00 	lea    0x22efe(%rip),%rdx        # 23aee8 <memcmp+0x21a8>
  217fea:	be 19 00 00 00       	mov    $0x19,%esi
  217fef:	e8 fc db 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217ff4:	0f 0b                	ud2    
  217ff6:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  217ffb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        self.current + offset + n < self.n_frames
  218000:	48 01 c8             	add    %rcx,%rax
  218003:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218008:	0f 92 c0             	setb   %al
  21800b:	a8 01                	test   $0x1,%al
  21800d:	75 3a                	jne    218049 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1d9>
  21800f:	eb 1a                	jmp    21802b <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1bb>
  218011:	48 8d 3d a8 91 fe ff 	lea    -0x16e58(%rip),%rdi        # 2011c0 <str.2>
  218018:	48 8d 15 e1 2e 02 00 	lea    0x22ee1(%rip),%rdx        # 23af00 <memcmp+0x21c0>
  21801f:	be 1c 00 00 00       	mov    $0x1c,%esi
  218024:	e8 c7 db 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218029:	0f 0b                	ud2    
  21802b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  218030:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  218035:	48 3b 41 10          	cmp    0x10(%rcx),%rax
  218039:	0f 92 c0             	setb   %al
    }
  21803c:	24 01                	and    $0x1,%al
  21803e:	0f b6 c0             	movzbl %al,%eax
  218041:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  218048:	c3                   	retq   
        self.current + offset + n < self.n_frames
  218049:	48 8d 3d 70 91 fe ff 	lea    -0x16e90(%rip),%rdi        # 2011c0 <str.2>
  218050:	48 8d 15 a9 2e 02 00 	lea    0x22ea9(%rip),%rdx        # 23af00 <memcmp+0x21c0>
  218057:	be 1c 00 00 00       	mov    $0x1c,%esi
  21805c:	e8 8f db 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218061:	0f 0b                	ud2    
  218063:	cc                   	int3   
  218064:	cc                   	int3   
  218065:	cc                   	int3   
  218066:	cc                   	int3   
  218067:	cc                   	int3   
  218068:	cc                   	int3   
  218069:	cc                   	int3   
  21806a:	cc                   	int3   
  21806b:	cc                   	int3   
  21806c:	cc                   	int3   
  21806d:	cc                   	int3   
  21806e:	cc                   	int3   
  21806f:	cc                   	int3   

0000000000218070 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>:
    pub fn allocate_n(&mut self, n: usize, align_huge_page: bool) -> Option<Frame> {
  218070:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  218077:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  21807e:	00 
  21807f:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  218086:	00 
  218087:	88 d0                	mov    %dl,%al
  218089:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  218090:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  218097:	00 
  218098:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  21809f:	00 
  2180a0:	88 c1                	mov    %al,%cl
  2180a2:	80 e1 01             	and    $0x1,%cl
  2180a5:	88 8c 24 ff 00 00 00 	mov    %cl,0xff(%rsp)
        if !align_huge_page && !self.can_allocate(n) {
  2180ac:	34 ff                	xor    $0xff,%al
  2180ae:	a8 01                	test   $0x1,%al
  2180b0:	75 0a                	jne    2180bc <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x4c>
  2180b2:	c6 84 24 d6 00 00 00 	movb   $0x0,0xd6(%rsp)
  2180b9:	00 
  2180ba:	eb 2e                	jmp    2180ea <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x7a>
  2180bc:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  2180c3:	00 
  2180c4:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  2180cb:	00 
  2180cc:	e8 3f fd ff ff       	callq  217e10 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  2180d1:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  2180d8:	8a 84 24 a7 00 00 00 	mov    0xa7(%rsp),%al
  2180df:	34 ff                	xor    $0xff,%al
  2180e1:	24 01                	and    $0x1,%al
  2180e3:	88 84 24 d6 00 00 00 	mov    %al,0xd6(%rsp)
  2180ea:	f6 84 24 d6 00 00 00 	testb  $0x1,0xd6(%rsp)
  2180f1:	01 
  2180f2:	75 0d                	jne    218101 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x91>
  2180f4:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
        if align_huge_page && !self.can_allocate_aligned(n) {
  2180fb:	a8 01                	test   $0x1,%al
  2180fd:	75 30                	jne    21812f <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xbf>
  2180ff:	eb 24                	jmp    218125 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xb5>
            return None;
  218101:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  218108:	00 00 00 00 00 
    }
  21810d:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  218114:	00 
  218115:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21811c:	00 
  21811d:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  218124:	c3                   	retq   
        if align_huge_page && !self.can_allocate_aligned(n) {
  218125:	c6 84 24 d7 00 00 00 	movb   $0x0,0xd7(%rsp)
  21812c:	00 
  21812d:	eb 2e                	jmp    21815d <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xed>
  21812f:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  218136:	00 
  218137:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  21813e:	00 
  21813f:	e8 2c fd ff ff       	callq  217e70 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>
  218144:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  21814b:	8a 84 24 a6 00 00 00 	mov    0xa6(%rsp),%al
  218152:	34 ff                	xor    $0xff,%al
  218154:	24 01                	and    $0x1,%al
  218156:	88 84 24 d7 00 00 00 	mov    %al,0xd7(%rsp)
  21815d:	f6 84 24 d7 00 00 00 	testb  $0x1,0xd7(%rsp)
  218164:	01 
  218165:	75 0d                	jne    218174 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x104>
  218167:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
        if align_huge_page {
  21816e:	a8 01                	test   $0x1,%al
  218170:	75 2a                	jne    21819c <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x12c>
  218172:	eb 0e                	jmp    218182 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x112>
            return None;
  218174:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21817b:	00 00 00 00 00 
  218180:	eb 8b                	jmp    21810d <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  218182:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  218189:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  21818a:	e8 f1 02 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  21818f:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  218196:	00 
  218197:	e9 5c 02 00 00       	jmpq   2183f8 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x388>
  21819c:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  2181a3:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  2181a4:	e8 d7 02 01 00       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  2181a9:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2181b0:	00 
  2181b1:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2181b8:	00 
  2181b9:	48 8b 40 18          	mov    0x18(%rax),%rax
  2181bd:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2181c4:	00 
  2181c5:	48 8d 3d 93 8f fe ff 	lea    -0x1706d(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2181cc:	e8 8f 45 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2181d1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2181d8:	00 
  2181d9:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2181e0:	00 
  2181e1:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2181e8:	00 
  2181e9:	48 f7 e1             	mul    %rcx
  2181ec:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2181f1:	0f 90 c0             	seto   %al
  2181f4:	a8 01                	test   $0x1,%al
  2181f6:	75 1e                	jne    218216 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1a6>
  2181f8:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2181fd:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  218204:	00 
  218205:	48 01 c8             	add    %rcx,%rax
  218208:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21820d:	0f 92 c0             	setb   %al
  218210:	a8 01                	test   $0x1,%al
  218212:	75 3c                	jne    218250 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1e0>
  218214:	eb 1a                	jmp    218230 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1c0>
  218216:	48 8d 3d c3 8f fe ff 	lea    -0x1703d(%rip),%rdi        # 2011e0 <str.3>
  21821d:	48 8d 15 f4 2c 02 00 	lea    0x22cf4(%rip),%rdx        # 23af18 <memcmp+0x21d8>
  218224:	be 21 00 00 00       	mov    $0x21,%esi
  218229:	e8 c2 d9 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21822e:	0f 0b                	ud2    
  218230:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  218235:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21823c:	00 
            let aligned_addr = mm::Alignment::align_up(current_addr, PageSize::Page2MiB.size());
  21823d:	48 8d 3d bd 8f fe ff 	lea    -0x17043(%rip),%rdi        # 201201 <str.3+0x21>
  218244:	e8 17 45 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  218249:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21824e:	eb 1a                	jmp    21826a <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1fa>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  218250:	48 8d 3d 69 8f fe ff 	lea    -0x17097(%rip),%rdi        # 2011c0 <str.2>
  218257:	48 8d 15 d2 2c 02 00 	lea    0x22cd2(%rip),%rdx        # 23af30 <memcmp+0x21f0>
  21825e:	be 1c 00 00 00       	mov    $0x1c,%esi
  218263:	e8 88 d9 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218268:	0f 0b                	ud2    
  21826a:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  21826f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
            let aligned_addr = mm::Alignment::align_up(current_addr, PageSize::Page2MiB.size());
  218274:	e8 97 ff 00 00       	callq  228210 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  218279:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21827e:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  218285:	00 
  218286:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21828b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            let diff_addr = aligned_addr - current_addr;
  218290:	48 29 c8             	sub    %rcx,%rax
  218293:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218298:	0f 92 c0             	setb   %al
  21829b:	a8 01                	test   $0x1,%al
  21829d:	75 20                	jne    2182bf <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x24f>
  21829f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2182a4:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  2182ab:	00 
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  2182ac:	48 8d 3d ac 8e fe ff 	lea    -0x17154(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2182b3:	e8 a8 44 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2182b8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2182bd:	eb 1a                	jmp    2182d9 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x269>
            let diff_addr = aligned_addr - current_addr;
  2182bf:	48 8d 3d aa 8e fe ff 	lea    -0x17156(%rip),%rdi        # 201170 <str.0>
  2182c6:	48 8d 15 7b 2c 02 00 	lea    0x22c7b(%rip),%rdx        # 23af48 <memcmp+0x2208>
  2182cd:	be 21 00 00 00       	mov    $0x21,%esi
  2182d2:	e8 19 d9 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2182d7:	0f 0b                	ud2    
  2182d9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  2182de:	48 83 f8 00          	cmp    $0x0,%rax
  2182e2:	0f 94 c0             	sete   %al
  2182e5:	a8 01                	test   $0x1,%al
  2182e7:	75 41                	jne    21832a <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2ba>
  2182e9:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  2182f0:	00 
  2182f1:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2182f6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2182fb:	31 d2                	xor    %edx,%edx
  2182fd:	48 f7 f6             	div    %rsi
  218300:	48 89 c2             	mov    %rax,%rdx
  218303:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21830a:	00 
  21830b:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  218310:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  218317:	00 
            self.current = self.current + n + offset_frames;
  218318:	48 03 41 18          	add    0x18(%rcx),%rax
  21831c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  218321:	0f 92 c0             	setb   %al
  218324:	a8 01                	test   $0x1,%al
  218326:	75 37                	jne    21835f <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2ef>
  218328:	eb 1a                	jmp    218344 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2d4>
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  21832a:	48 8d 3d 6f 8e fe ff 	lea    -0x17191(%rip),%rdi        # 2011a0 <str.1>
  218331:	48 8d 15 28 2c 02 00 	lea    0x22c28(%rip),%rdx        # 23af60 <memcmp+0x2220>
  218338:	be 19 00 00 00       	mov    $0x19,%esi
  21833d:	e8 ae d8 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218342:	0f 0b                	ud2    
  218344:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  218349:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
            self.current = self.current + n + offset_frames;
  21834e:	48 01 c8             	add    %rcx,%rax
  218351:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  218356:	0f 92 c0             	setb   %al
  218359:	a8 01                	test   $0x1,%al
  21835b:	75 3e                	jne    21839b <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x32b>
  21835d:	eb 1a                	jmp    218379 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x309>
  21835f:	48 8d 3d 5a 8e fe ff 	lea    -0x171a6(%rip),%rdi        # 2011c0 <str.2>
  218366:	48 8d 15 0b 2c 02 00 	lea    0x22c0b(%rip),%rdx        # 23af78 <memcmp+0x2238>
  21836d:	be 1c 00 00 00       	mov    $0x1c,%esi
  218372:	e8 79 d8 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218377:	0f 0b                	ud2    
  218379:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21837e:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  218385:	00 
  218386:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21838b:	48 89 48 18          	mov    %rcx,0x18(%rax)
            return Some(Frame::from_address(mm::PhysicalAddress::from_u64(
  21838f:	e8 fc 00 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  218394:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  218399:	eb 1a                	jmp    2183b5 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x345>
            self.current = self.current + n + offset_frames;
  21839b:	48 8d 3d 1e 8e fe ff 	lea    -0x171e2(%rip),%rdi        # 2011c0 <str.2>
  2183a2:	48 8d 15 cf 2b 02 00 	lea    0x22bcf(%rip),%rdx        # 23af78 <memcmp+0x2238>
  2183a9:	be 1c 00 00 00       	mov    $0x1c,%esi
  2183ae:	e8 3d d8 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2183b3:	0f 0b                	ud2    
  2183b5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            return Some(Frame::from_address(mm::PhysicalAddress::from_u64(
  2183ba:	e8 21 f8 ff ff       	callq  217be0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>
  2183bf:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  2183c6:	00 
  2183c7:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  2183ce:	00 
  2183cf:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2183d6:	00 
  2183d7:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  2183de:	00 
  2183df:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2183e6:	00 
  2183e7:	48 c7 84 24 c0 00 00 	movq   $0x1,0xc0(%rsp)
  2183ee:	00 01 00 00 00 
  2183f3:	e9 15 fd ff ff       	jmpq   21810d <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  2183f8:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2183ff:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  218400:	48 8b 40 18          	mov    0x18(%rax),%rax
  218404:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  218409:	48 8d 3d 4f 8d fe ff 	lea    -0x172b1(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  218410:	e8 4b 43 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  218415:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21841a:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21841f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  218424:	48 f7 e1             	mul    %rcx
  218427:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21842c:	0f 90 c0             	seto   %al
  21842f:	a8 01                	test   $0x1,%al
  218431:	75 1e                	jne    218451 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x3e1>
  218433:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  218438:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21843f:	00 
  218440:	48 01 c8             	add    %rcx,%rax
  218443:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  218448:	0f 92 c0             	setb   %al
  21844b:	a8 01                	test   $0x1,%al
  21844d:	75 35                	jne    218484 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x414>
  21844f:	eb 1a                	jmp    21846b <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x3fb>
  218451:	48 8d 3d 88 8d fe ff 	lea    -0x17278(%rip),%rdi        # 2011e0 <str.3>
  218458:	48 8d 15 31 2b 02 00 	lea    0x22b31(%rip),%rdx        # 23af90 <memcmp+0x2250>
  21845f:	be 21 00 00 00       	mov    $0x21,%esi
  218464:	e8 87 d7 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218469:	0f 0b                	ud2    
  21846b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            let current_address = mm::PhysicalAddress::from_u64(
  218470:	e8 1b 00 01 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  218475:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21847a:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  218481:	00 
  218482:	eb 1a                	jmp    21849e <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x42e>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  218484:	48 8d 3d 35 8d fe ff 	lea    -0x172cb(%rip),%rdi        # 2011c0 <str.2>
  21848b:	48 8d 15 16 2b 02 00 	lea    0x22b16(%rip),%rdx        # 23afa8 <memcmp+0x2268>
  218492:	be 1c 00 00 00       	mov    $0x1c,%esi
  218497:	e8 54 d7 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21849c:	0f 0b                	ud2    
  21849e:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  2184a5:	00 
  2184a6:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2184ad:	00 
            self.current = self.current + n;
  2184ae:	48 03 41 18          	add    0x18(%rcx),%rax
  2184b2:	48 89 04 24          	mov    %rax,(%rsp)
  2184b6:	0f 92 c0             	setb   %al
  2184b9:	a8 01                	test   $0x1,%al
  2184bb:	75 34                	jne    2184f1 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x481>
  2184bd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2184c2:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2184c9:	00 
  2184ca:	48 8b 0c 24          	mov    (%rsp),%rcx
  2184ce:	48 89 48 18          	mov    %rcx,0x18(%rax)
            return Some(Frame::from_address(current_address));
  2184d2:	e8 09 f7 ff ff       	callq  217be0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>
  2184d7:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2184de:	00 
  2184df:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  2184e6:	00 
  2184e7:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2184ee:	00 
  2184ef:	eb 1a                	jmp    21850b <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x49b>
            self.current = self.current + n;
  2184f1:	48 8d 3d c8 8c fe ff 	lea    -0x17338(%rip),%rdi        # 2011c0 <str.2>
  2184f8:	48 8d 15 c1 2a 02 00 	lea    0x22ac1(%rip),%rdx        # 23afc0 <memcmp+0x2280>
  2184ff:	be 1c 00 00 00       	mov    $0x1c,%esi
  218504:	e8 e7 d6 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218509:	0f 0b                	ud2    
            return Some(Frame::from_address(current_address));
  21850b:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  218512:	00 
  218513:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21851a:	00 
  21851b:	48 c7 84 24 c0 00 00 	movq   $0x1,0xc0(%rsp)
  218522:	00 01 00 00 00 
  218527:	e9 e1 fb ff ff       	jmpq   21810d <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  21852c:	cc                   	int3   
  21852d:	cc                   	int3   
  21852e:	cc                   	int3   
  21852f:	cc                   	int3   

0000000000218530 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E>:
    pub fn init() -> Self {
  218530:	48 81 ec 88 12 00 00 	sub    $0x1288,%rsp
  218537:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  21853e:	00 
  21853f:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  218546:	00 
        let memory_map_opt = BootProtocol::get_memory_regions();
  218547:	e8 d4 14 00 00       	callq  219a20 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>
  21854c:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  218553:	00 
        if memory_map_opt.is_none() {
  218554:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21855b:	00 
  21855c:	e8 cf 94 ff ff       	callq  211a30 <_ZN4core6option15Option$LT$T$GT$7is_none17hb5d79c86d77403d8E>
  218561:	88 84 24 d7 00 00 00 	mov    %al,0xd7(%rsp)
  218568:	8a 84 24 d7 00 00 00 	mov    0xd7(%rsp),%al
  21856f:	a8 01                	test   $0x1,%al
  218571:	75 28                	jne    21859b <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x6b>
  218573:	eb 00                	jmp    218575 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x45>
        let memory_map = memory_map_opt.unwrap();
  218575:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  21857c:	00 
  21857d:	48 8d 35 6c 2a 02 00 	lea    0x22a6c(%rip),%rsi        # 23aff0 <memcmp+0x22b0>
  218584:	e8 97 8e ff ff       	callq  211420 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E>
  218589:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  218590:	00 
  218591:	48 89 84 24 30 12 00 	mov    %rax,0x1230(%rsp)
  218598:	00 
  218599:	eb 1a                	jmp    2185b5 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x85>
            panic!("Bootloader did not provide memory map.");
  21859b:	48 8d 3d 60 8c fe ff 	lea    -0x173a0(%rip),%rdi        # 201202 <str.3+0x22>
  2185a2:	48 8d 15 2f 2a 02 00 	lea    0x22a2f(%rip),%rdx        # 23afd8 <memcmp+0x2298>
  2185a9:	be 26 00 00 00       	mov    $0x26,%esi
  2185ae:	e8 3d d6 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2185b3:	0f 0b                	ud2    
        let mut index = 0;
  2185b5:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  2185bc:	00 00 00 00 00 
        let mut memory_regions = [MemoryRegion::empty(); MAX_FREE_REGIONS];
  2185c1:	48 8d bc 24 f8 08 00 	lea    0x8f8(%rsp),%rdi
  2185c8:	00 
  2185c9:	e8 f2 f7 ff ff       	callq  217dc0 <_ZN9r3_kernel2mm3phy12MemoryRegion5empty17hd30c8ed48360a7fcE>
  2185ce:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  2185d5:	00 
  2185d6:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  2185dd:	00 
  2185de:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
  2185e5:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  2185ec:	00 
  2185ed:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2185f4:	00 
  2185f5:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  2185fc:	00 
  2185fd:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  218604:	00 
  218605:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21860c:	00 
  21860d:	48 39 c8             	cmp    %rcx,%rax
  218610:	74 45                	je     218657 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x127>
  218612:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  218619:	00 
  21861a:	48 8b 8c 24 f8 08 00 	mov    0x8f8(%rsp),%rcx
  218621:	00 
  218622:	48 89 08             	mov    %rcx,(%rax)
  218625:	48 8b 8c 24 00 09 00 	mov    0x900(%rsp),%rcx
  21862c:	00 
  21862d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  218631:	48 8b 8c 24 08 09 00 	mov    0x908(%rsp),%rcx
  218638:	00 
  218639:	48 89 48 10          	mov    %rcx,0x10(%rax)
  21863d:	48 8b 8c 24 10 09 00 	mov    0x910(%rsp),%rcx
  218644:	00 
  218645:	48 89 48 18          	mov    %rcx,0x18(%rax)
  218649:	48 83 c0 20          	add    $0x20,%rax
  21864d:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  218654:	00 
  218655:	eb 9e                	jmp    2185f5 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0xc5>
  218657:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  21865e:	00 
        for region in memory_map.iter() {
  21865f:	e8 5c c0 01 00       	callq  2346c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  218664:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21866b:	00 
  21866c:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  218673:	00 
  218674:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  21867b:	00 
  21867c:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  218683:	00 
  218684:	e8 67 2e 00 00       	callq  21b4f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0f913f2fa7a5903cE>
  218689:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  218690:	00 
  218691:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  218698:	00 
  218699:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  2186a0:	00 
  2186a1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  2186a8:	00 
  2186a9:	e8 f2 28 00 00       	callq  21afa0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h878ea9e8fd23aa8cE>
  2186ae:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2186b5:	00 
  2186b6:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2186bd:	00 
  2186be:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2186c5:	00 
  2186c6:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2186cd:	00 
  2186ce:	48 89 8c 24 18 09 00 	mov    %rcx,0x918(%rsp)
  2186d5:	00 
  2186d6:	48 89 84 24 20 09 00 	mov    %rax,0x920(%rsp)
  2186dd:	00 
  2186de:	48 8d bc 24 18 09 00 	lea    0x918(%rsp),%rdi
  2186e5:	00 
  2186e6:	e8 d5 2a 00 00       	callq  21b1c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E>
  2186eb:	48 89 84 24 28 09 00 	mov    %rax,0x928(%rsp)
  2186f2:	00 
  2186f3:	48 8b 84 24 28 09 00 	mov    0x928(%rsp),%rax
  2186fa:	00 
  2186fb:	48 85 c0             	test   %rax,%rax
  2186fe:	0f 95 c0             	setne  %al
  218701:	0f b6 c0             	movzbl %al,%eax
  218704:	74 06                	je     21870c <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1dc>
  218706:	eb 00                	jmp    218708 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1d8>
  218708:	eb 2b                	jmp    218735 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x205>
  21870a:	0f 0b                	ud2    
        log::info!("Found {} memory regions as usable.", index + 1);
  21870c:	48 c7 84 24 c8 09 00 	movq   $0x3,0x9c8(%rsp)
  218713:	00 03 00 00 00 
  218718:	48 8d bc 24 c8 09 00 	lea    0x9c8(%rsp),%rdi
  21871f:	00 
  218720:	48 8d 35 d1 7b fe ff 	lea    -0x1842f(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  218727:	e8 a4 a8 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21872c:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  218730:	e9 a9 02 00 00       	jmpq   2189de <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4ae>
        for region in memory_map.iter() {
  218735:	48 8b bc 24 28 09 00 	mov    0x928(%rsp),%rdi
  21873c:	00 
  21873d:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  218742:	48 89 bc 24 38 12 00 	mov    %rdi,0x1238(%rsp)
  218749:	00 
  21874a:	48 89 bc 24 40 12 00 	mov    %rdi,0x1240(%rsp)
  218751:	00 
  218752:	48 89 bc 24 48 12 00 	mov    %rdi,0x1248(%rsp)
  218759:	00 
            if region.kind == MemoryRegionKind::Usable {
  21875a:	48 83 c7 10          	add    $0x10,%rdi
  21875e:	48 8d 35 83 7b fe ff 	lea    -0x1847d(%rip),%rsi        # 2002e8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x8e>
  218765:	e8 56 10 00 00       	callq  2197c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E>
  21876a:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  21876e:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  218772:	a8 01                	test   $0x1,%al
  218774:	75 05                	jne    21877b <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x24b>
  218776:	e9 63 ff ff ff       	jmpq   2186de <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1ae>
                log::debug!(
  21877b:	48 c7 84 24 30 09 00 	movq   $0x4,0x930(%rsp)
  218782:	00 04 00 00 00 
  218787:	48 8d bc 24 30 09 00 	lea    0x930(%rsp),%rdi
  21878e:	00 
  21878f:	48 8d 35 62 7b fe ff 	lea    -0x1849e(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  218796:	e8 35 a8 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21879b:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  21879f:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  2187a3:	a8 01                	test   $0x1,%al
  2187a5:	75 0c                	jne    2187b3 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x283>
  2187a7:	eb 00                	jmp    2187a9 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x279>
  2187a9:	c6 84 24 3f 09 00 00 	movb   $0x0,0x93f(%rsp)
  2187b0:	00 
  2187b1:	eb 5a                	jmp    21880d <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x2dd>
  2187b3:	c6 84 24 7f 12 00 00 	movb   $0x0,0x127f(%rsp)
  2187ba:	00 
  2187bb:	48 8b 3d 86 53 02 00 	mov    0x25386(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2187c2:	0f b6 b4 24 7f 12 00 	movzbl 0x127f(%rsp),%esi
  2187c9:	00 
  2187ca:	e8 21 2a 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2187cf:	48 89 84 24 80 12 00 	mov    %rax,0x1280(%rsp)
  2187d6:	00 
  2187d7:	48 8b 84 24 80 12 00 	mov    0x1280(%rsp),%rax
  2187de:	00 
  2187df:	48 89 84 24 40 09 00 	mov    %rax,0x940(%rsp)
  2187e6:	00 
  2187e7:	48 8d bc 24 30 09 00 	lea    0x930(%rsp),%rdi
  2187ee:	00 
  2187ef:	48 8d b4 24 40 09 00 	lea    0x940(%rsp),%rsi
  2187f6:	00 
  2187f7:	e8 d4 a7 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2187fc:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  218800:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  218804:	24 01                	and    $0x1,%al
  218806:	88 84 24 3f 09 00 00 	mov    %al,0x93f(%rsp)
  21880d:	f6 84 24 3f 09 00 00 	testb  $0x1,0x93f(%rsp)
  218814:	01 
  218815:	75 1e                	jne    218835 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x305>
  218817:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  21881c:	48 8b 30             	mov    (%rax),%rsi
  21881f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  218823:	48 8d bc 24 a8 09 00 	lea    0x9a8(%rsp),%rdi
  21882a:	00 
  21882b:	e8 30 f4 ff ff       	callq  217c60 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E>
  218830:	e9 ee 00 00 00       	jmpq   218923 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x3f3>
  218835:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                    region.start,
  21883a:	48 89 c1             	mov    %rax,%rcx
                    region.end
  21883d:	48 83 c0 08          	add    $0x8,%rax
                log::debug!(
  218841:	48 89 8c 24 98 09 00 	mov    %rcx,0x998(%rsp)
  218848:	00 
  218849:	48 89 84 24 a0 09 00 	mov    %rax,0x9a0(%rsp)
  218850:	00 
  218851:	48 8b bc 24 98 09 00 	mov    0x998(%rsp),%rdi
  218858:	00 
  218859:	48 89 bc 24 50 12 00 	mov    %rdi,0x1250(%rsp)
  218860:	00 
  218861:	48 8b 84 24 a0 09 00 	mov    0x9a0(%rsp),%rax
  218868:	00 
  218869:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21886e:	48 89 84 24 58 12 00 	mov    %rax,0x1258(%rsp)
  218875:	00 
  218876:	48 8b 35 d3 52 02 00 	mov    0x252d3(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21887d:	e8 be 6d ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  218882:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218887:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21888c:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  218891:	48 8b 35 b8 52 02 00 	mov    0x252b8(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  218898:	e8 a3 6d ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21889d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2188a2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  2188a7:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2188ac:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2188b1:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  2188b6:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  2188bb:	48 89 b4 24 78 09 00 	mov    %rsi,0x978(%rsp)
  2188c2:	00 
  2188c3:	48 89 94 24 80 09 00 	mov    %rdx,0x980(%rsp)
  2188ca:	00 
  2188cb:	48 89 8c 24 88 09 00 	mov    %rcx,0x988(%rsp)
  2188d2:	00 
  2188d3:	48 89 84 24 90 09 00 	mov    %rax,0x990(%rsp)
  2188da:	00 
  2188db:	48 8d 8c 24 78 09 00 	lea    0x978(%rsp),%rcx
  2188e2:	00 
  2188e3:	48 8d bc 24 48 09 00 	lea    0x948(%rsp),%rdi
  2188ea:	00 
  2188eb:	48 8d 35 16 27 02 00 	lea    0x22716(%rip),%rsi        # 23b008 <memcmp+0x22c8>
  2188f2:	ba 03 00 00 00       	mov    $0x3,%edx
  2188f7:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2188fd:	e8 2e dc fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218902:	48 8b b4 24 30 09 00 	mov    0x930(%rsp),%rsi
  218909:	00 
  21890a:	48 8d bc 24 48 09 00 	lea    0x948(%rsp),%rdi
  218911:	00 
  218912:	48 8d 15 1f 27 02 00 	lea    0x2271f(%rip),%rdx        # 23b038 <memcmp+0x22f8>
  218919:	e8 62 a4 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21891e:	e9 f4 fe ff ff       	jmpq   218817 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x2e7>
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  218923:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  21892a:	00 
  21892b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  218930:	48 83 f8 40          	cmp    $0x40,%rax
  218934:	0f 92 c0             	setb   %al
  218937:	a8 01                	test   $0x1,%al
  218939:	75 02                	jne    21893d <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x40d>
  21893b:	eb 5d                	jmp    21899a <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x46a>
  21893d:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  218942:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  218949:	00 
  21894a:	48 c1 e1 05          	shl    $0x5,%rcx
  21894e:	48 01 c8             	add    %rcx,%rax
  218951:	48 8b 8c 24 a8 09 00 	mov    0x9a8(%rsp),%rcx
  218958:	00 
  218959:	48 89 08             	mov    %rcx,(%rax)
  21895c:	48 8b 8c 24 b0 09 00 	mov    0x9b0(%rsp),%rcx
  218963:	00 
  218964:	48 89 48 08          	mov    %rcx,0x8(%rax)
  218968:	48 8b 8c 24 b8 09 00 	mov    0x9b8(%rsp),%rcx
  21896f:	00 
  218970:	48 89 48 10          	mov    %rcx,0x10(%rax)
  218974:	48 8b 8c 24 c0 09 00 	mov    0x9c0(%rsp),%rcx
  21897b:	00 
  21897c:	48 89 48 18          	mov    %rcx,0x18(%rax)
                index = index + 1;
  218980:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  218987:	00 
  218988:	48 83 c0 01          	add    $0x1,%rax
  21898c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  218991:	0f 92 c0             	setb   %al
  218994:	a8 01                	test   $0x1,%al
  218996:	75 2c                	jne    2189c4 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x494>
  218998:	eb 18                	jmp    2189b2 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x482>
  21899a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  21899f:	48 8d 15 ca 26 02 00 	lea    0x226ca(%rip),%rdx        # 23b070 <memcmp+0x2330>
  2189a6:	be 40 00 00 00       	mov    $0x40,%esi
  2189ab:	e8 90 d2 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2189b0:	0f 0b                	ud2    
  2189b2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                index = index + 1;
  2189b7:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2189be:	00 
            if region.kind == MemoryRegionKind::Usable {
  2189bf:	e9 1a fd ff ff       	jmpq   2186de <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1ae>
                index = index + 1;
  2189c4:	48 8d 3d f5 87 fe ff 	lea    -0x1780b(%rip),%rdi        # 2011c0 <str.2>
  2189cb:	48 8d 15 b6 26 02 00 	lea    0x226b6(%rip),%rdx        # 23b088 <memcmp+0x2348>
  2189d2:	be 1c 00 00 00       	mov    $0x1c,%esi
  2189d7:	e8 14 d2 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2189dc:	0f 0b                	ud2    
  2189de:	8a 44 24 7f          	mov    0x7f(%rsp),%al
        log::info!("Found {} memory regions as usable.", index + 1);
  2189e2:	a8 01                	test   $0x1,%al
  2189e4:	75 0c                	jne    2189f2 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4c2>
  2189e6:	eb 00                	jmp    2189e8 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4b8>
  2189e8:	c6 84 24 d7 09 00 00 	movb   $0x0,0x9d7(%rsp)
  2189ef:	00 
  2189f0:	eb 5a                	jmp    218a4c <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x51c>
  2189f2:	c6 84 24 6f 12 00 00 	movb   $0x0,0x126f(%rsp)
  2189f9:	00 
  2189fa:	48 8b 3d 47 51 02 00 	mov    0x25147(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218a01:	0f b6 b4 24 6f 12 00 	movzbl 0x126f(%rsp),%esi
  218a08:	00 
  218a09:	e8 e2 27 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218a0e:	48 89 84 24 70 12 00 	mov    %rax,0x1270(%rsp)
  218a15:	00 
  218a16:	48 8b 84 24 70 12 00 	mov    0x1270(%rsp),%rax
  218a1d:	00 
  218a1e:	48 89 84 24 d8 09 00 	mov    %rax,0x9d8(%rsp)
  218a25:	00 
  218a26:	48 8d bc 24 c8 09 00 	lea    0x9c8(%rsp),%rdi
  218a2d:	00 
  218a2e:	48 8d b4 24 d8 09 00 	lea    0x9d8(%rsp),%rsi
  218a35:	00 
  218a36:	e8 95 a5 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218a3b:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  218a3f:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  218a43:	24 01                	and    $0x1,%al
  218a45:	88 84 24 d7 09 00 00 	mov    %al,0x9d7(%rsp)
  218a4c:	f6 84 24 d7 09 00 00 	testb  $0x1,0x9d7(%rsp)
  218a53:	01 
  218a54:	75 65                	jne    218abb <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x58b>
            memory_regions,
  218a56:	48 8d bc 24 30 0a 00 	lea    0xa30(%rsp),%rdi
  218a5d:	00 
  218a5e:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
  218a65:	00 
  218a66:	ba 00 08 00 00       	mov    $0x800,%edx
  218a6b:	e8 80 02 02 00       	callq  238cf0 <memcpy>
  218a70:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  218a77:	00 
            regions: index,
  218a78:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  218a7f:	00 
  218a80:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        LinearFrameAllocator {
  218a85:	48 8d b4 24 30 0a 00 	lea    0xa30(%rsp),%rsi
  218a8c:	00 
  218a8d:	ba 00 08 00 00       	mov    $0x800,%edx
  218a92:	e8 59 02 02 00       	callq  238cf0 <memcpy>
  218a97:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  218a9c:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  218aa3:	00 
  218aa4:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  218aab:	00 
  218aac:	48 89 91 00 08 00 00 	mov    %rdx,0x800(%rcx)
    }
  218ab3:	48 81 c4 88 12 00 00 	add    $0x1288,%rsp
  218aba:	c3                   	retq   
        log::info!("Found {} memory regions as usable.", index + 1);
  218abb:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  218ac2:	00 
  218ac3:	48 83 c0 01          	add    $0x1,%rax
  218ac7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  218acc:	0f 92 c0             	setb   %al
  218acf:	a8 01                	test   $0x1,%al
  218ad1:	75 45                	jne    218b18 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x5e8>
  218ad3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  218ad8:	48 89 84 24 28 0a 00 	mov    %rax,0xa28(%rsp)
  218adf:	00 
  218ae0:	48 8d 84 24 28 0a 00 	lea    0xa28(%rsp),%rax
  218ae7:	00 
  218ae8:	48 89 84 24 20 0a 00 	mov    %rax,0xa20(%rsp)
  218aef:	00 
  218af0:	48 8b bc 24 20 0a 00 	mov    0xa20(%rsp),%rdi
  218af7:	00 
  218af8:	48 89 bc 24 60 12 00 	mov    %rdi,0x1260(%rsp)
  218aff:	00 
  218b00:	48 8b 35 59 50 02 00 	mov    0x25059(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  218b07:	e8 74 6a ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  218b0c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218b11:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218b16:	eb 1a                	jmp    218b32 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x602>
  218b18:	48 8d 3d a1 86 fe ff 	lea    -0x1795f(%rip),%rdi        # 2011c0 <str.2>
  218b1f:	48 8d 15 9a 25 02 00 	lea    0x2259a(%rip),%rdx        # 23b0c0 <memcmp+0x2380>
  218b26:	be 1c 00 00 00       	mov    $0x1c,%esi
  218b2b:	e8 c0 d0 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218b30:	0f 0b                	ud2    
  218b32:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218b37:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  218b3c:	48 89 8c 24 10 0a 00 	mov    %rcx,0xa10(%rsp)
  218b43:	00 
  218b44:	48 89 84 24 18 0a 00 	mov    %rax,0xa18(%rsp)
  218b4b:	00 
  218b4c:	48 8d 8c 24 10 0a 00 	lea    0xa10(%rsp),%rcx
  218b53:	00 
  218b54:	48 8d bc 24 e0 09 00 	lea    0x9e0(%rsp),%rdi
  218b5b:	00 
  218b5c:	48 8d 35 3d 25 02 00 	lea    0x2253d(%rip),%rsi        # 23b0a0 <memcmp+0x2360>
  218b63:	ba 02 00 00 00       	mov    $0x2,%edx
  218b68:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  218b6e:	e8 bd d9 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218b73:	48 8b b4 24 c8 09 00 	mov    0x9c8(%rsp),%rsi
  218b7a:	00 
  218b7b:	48 8d bc 24 e0 09 00 	lea    0x9e0(%rsp),%rdi
  218b82:	00 
  218b83:	48 8d 15 4e 25 02 00 	lea    0x2254e(%rip),%rdx        # 23b0d8 <memcmp+0x2398>
  218b8a:	e8 f1 a1 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218b8f:	e9 c2 fe ff ff       	jmpq   218a56 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x526>
  218b94:	cc                   	int3   
  218b95:	cc                   	int3   
  218b96:	cc                   	int3   
  218b97:	cc                   	int3   
  218b98:	cc                   	int3   
  218b99:	cc                   	int3   
  218b9a:	cc                   	int3   
  218b9b:	cc                   	int3   
  218b9c:	cc                   	int3   
  218b9d:	cc                   	int3   
  218b9e:	cc                   	int3   
  218b9f:	cc                   	int3   

0000000000218ba0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE>:
    fn frame_alloc(&mut self) -> Option<Frame> {
  218ba0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  218ba7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218bac:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
        for region_idx in 0..self.regions {
  218bb1:	48 8b 87 00 08 00 00 	mov    0x800(%rdi),%rax
  218bb8:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  218bbf:	00 00 
  218bc1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  218bc6:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  218bcb:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  218bd0:	e8 db 5a 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  218bd5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  218bda:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  218bdf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  218be4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  218be9:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  218bee:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  218bf3:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  218bf8:	e8 83 5a 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  218bfd:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  218c02:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218c07:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  218c0c:	48 85 c0             	test   %rax,%rax
  218c0f:	74 06                	je     218c17 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x77>
  218c11:	eb 00                	jmp    218c13 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x73>
  218c13:	eb 10                	jmp    218c25 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x85>
  218c15:	0f 0b                	ud2    
        None
  218c17:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  218c1e:	00 00 
    }
  218c20:	e9 fc 00 00 00       	jmpq   218d21 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x181>
        for region_idx in 0..self.regions {
  218c25:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  218c2a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218c2f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  218c36:	00 
  218c37:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  218c3e:	00 
  218c3f:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  218c46:	00 
            if self.memory_regions[region_idx].can_allocate(1) {
  218c47:	48 83 f8 40          	cmp    $0x40,%rax
  218c4b:	0f 92 c0             	setb   %al
  218c4e:	a8 01                	test   $0x1,%al
  218c50:	75 02                	jne    218c54 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xb4>
  218c52:	eb 21                	jmp    218c75 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xd5>
  218c54:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  218c59:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  218c5e:	48 c1 e0 05          	shl    $0x5,%rax
  218c62:	48 01 c7             	add    %rax,%rdi
  218c65:	be 01 00 00 00       	mov    $0x1,%esi
  218c6a:	e8 a1 f1 ff ff       	callq  217e10 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  218c6f:	88 44 24 07          	mov    %al,0x7(%rsp)
  218c73:	eb 18                	jmp    218c8d <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xed>
  218c75:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  218c7a:	48 8d 15 8f 24 02 00 	lea    0x2248f(%rip),%rdx        # 23b110 <memcmp+0x23d0>
  218c81:	be 40 00 00 00       	mov    $0x40,%esi
  218c86:	e8 b5 cf 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218c8b:	0f 0b                	ud2    
  218c8d:	8a 44 24 07          	mov    0x7(%rsp),%al
  218c91:	a8 01                	test   $0x1,%al
  218c93:	75 05                	jne    218c9a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xfa>
  218c95:	e9 59 ff ff ff       	jmpq   218bf3 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x53>
  218c9a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                let frame_opt = self.memory_regions[region_idx].allocate_n(1, false);
  218c9f:	48 83 f8 40          	cmp    $0x40,%rax
  218ca3:	0f 92 c0             	setb   %al
  218ca6:	a8 01                	test   $0x1,%al
  218ca8:	75 02                	jne    218cac <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x10c>
  218caa:	eb 49                	jmp    218cf5 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x155>
  218cac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  218cb1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  218cb6:	48 c1 e0 05          	shl    $0x5,%rax
  218cba:	48 01 c7             	add    %rax,%rdi
  218cbd:	be 01 00 00 00       	mov    $0x1,%esi
  218cc2:	31 d2                	xor    %edx,%edx
  218cc4:	e8 a7 f3 ff ff       	callq  218070 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>
  218cc9:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  218cd0:	00 
  218cd1:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  218cd8:	00 
  218cd9:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  218ce0:	00 
  218ce1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  218ce6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  218ced:	00 
  218cee:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  218cf3:	eb 18                	jmp    218d0d <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x16d>
  218cf5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  218cfa:	48 8d 15 27 24 02 00 	lea    0x22427(%rip),%rdx        # 23b128 <memcmp+0x23e8>
  218d01:	be 40 00 00 00       	mov    $0x40,%esi
  218d06:	e8 35 cf 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218d0b:	0f 0b                	ud2    
                return frame_opt;
  218d0d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  218d12:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  218d17:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  218d1c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  218d21:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  218d26:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  218d2b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  218d32:	c3                   	retq   
  218d33:	cc                   	int3   
  218d34:	cc                   	int3   
  218d35:	cc                   	int3   
  218d36:	cc                   	int3   
  218d37:	cc                   	int3   
  218d38:	cc                   	int3   
  218d39:	cc                   	int3   
  218d3a:	cc                   	int3   
  218d3b:	cc                   	int3   
  218d3c:	cc                   	int3   
  218d3d:	cc                   	int3   
  218d3e:	cc                   	int3   
  218d3f:	cc                   	int3   

0000000000218d40 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE>:
    fn frame_alloc_n(&mut self, n: usize, align_huge_page: bool) -> Option<Frame> {
  218d40:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  218d47:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  218d4c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218d51:	88 d0                	mov    %dl,%al
  218d53:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  218d57:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  218d5e:	00 
  218d5f:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  218d66:	00 
  218d67:	24 01                	and    $0x1,%al
  218d69:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
        for region_idx in 0..self.regions {
  218d70:	48 8b 87 00 08 00 00 	mov    0x800(%rdi),%rax
  218d77:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  218d7e:	00 00 
  218d80:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  218d85:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  218d8a:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  218d8f:	e8 1c 59 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  218d94:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  218d99:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  218d9e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  218da3:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  218da8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  218dad:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218db2:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  218db7:	e8 c4 58 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  218dbc:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  218dc1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  218dc6:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  218dcb:	48 85 c0             	test   %rax,%rax
  218dce:	74 06                	je     218dd6 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x96>
  218dd0:	eb 00                	jmp    218dd2 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x92>
  218dd2:	eb 10                	jmp    218de4 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xa4>
  218dd4:	0f 0b                	ud2    
        None
  218dd6:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  218ddd:	00 00 
    }
  218ddf:	e9 5d 01 00 00       	jmpq   218f41 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x201>
  218de4:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        for region_idx in 0..self.regions {
  218de8:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  218ded:	48 89 0c 24          	mov    %rcx,(%rsp)
  218df1:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  218df8:	00 
  218df9:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  218e00:	00 
  218e01:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  218e08:	00 
            let can_allocate = if !align_huge_page {
  218e09:	34 ff                	xor    $0xff,%al
  218e0b:	a8 01                	test   $0x1,%al
  218e0d:	75 11                	jne    218e20 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xe0>
  218e0f:	48 8b 04 24          	mov    (%rsp),%rax
                self.memory_regions[region_idx].can_allocate_aligned(n)
  218e13:	48 83 f8 40          	cmp    $0x40,%rax
  218e17:	0f 92 c0             	setb   %al
  218e1a:	a8 01                	test   $0x1,%al
  218e1c:	75 58                	jne    218e76 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x136>
  218e1e:	eb 78                	jmp    218e98 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x158>
  218e20:	48 8b 04 24          	mov    (%rsp),%rax
                self.memory_regions[region_idx].can_allocate(n)
  218e24:	48 83 f8 40          	cmp    $0x40,%rax
  218e28:	0f 92 c0             	setb   %al
  218e2b:	a8 01                	test   $0x1,%al
  218e2d:	75 02                	jne    218e31 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xf1>
  218e2f:	eb 22                	jmp    218e53 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x113>
  218e31:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  218e36:	48 8b 04 24          	mov    (%rsp),%rax
  218e3a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  218e3f:	48 c1 e0 05          	shl    $0x5,%rax
  218e43:	48 01 c7             	add    %rax,%rdi
  218e46:	e8 c5 ef ff ff       	callq  217e10 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  218e4b:	24 01                	and    $0x1,%al
  218e4d:	88 44 24 77          	mov    %al,0x77(%rsp)
  218e51:	eb 17                	jmp    218e6a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x12a>
  218e53:	48 8b 3c 24          	mov    (%rsp),%rdi
  218e57:	48 8d 15 e2 22 02 00 	lea    0x222e2(%rip),%rdx        # 23b140 <memcmp+0x2400>
  218e5e:	be 40 00 00 00       	mov    $0x40,%esi
  218e63:	e8 d8 cd 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218e68:	0f 0b                	ud2    
            if can_allocate {
  218e6a:	f6 44 24 77 01       	testb  $0x1,0x77(%rsp)
  218e6f:	75 3e                	jne    218eaf <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x16f>
  218e71:	e9 3c ff ff ff       	jmpq   218db2 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x72>
  218e76:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  218e7b:	48 8b 04 24          	mov    (%rsp),%rax
  218e7f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                self.memory_regions[region_idx].can_allocate_aligned(n)
  218e84:	48 c1 e0 05          	shl    $0x5,%rax
  218e88:	48 01 c7             	add    %rax,%rdi
  218e8b:	e8 e0 ef ff ff       	callq  217e70 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>
  218e90:	24 01                	and    $0x1,%al
  218e92:	88 44 24 77          	mov    %al,0x77(%rsp)
  218e96:	eb d2                	jmp    218e6a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x12a>
  218e98:	48 8b 3c 24          	mov    (%rsp),%rdi
  218e9c:	48 8d 15 b5 22 02 00 	lea    0x222b5(%rip),%rdx        # 23b158 <memcmp+0x2418>
  218ea3:	be 40 00 00 00       	mov    $0x40,%esi
  218ea8:	e8 93 cd 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218ead:	0f 0b                	ud2    
  218eaf:	48 8b 04 24          	mov    (%rsp),%rax
                let frame_opt = self.memory_regions[region_idx].allocate_n(n, align_huge_page);
  218eb3:	48 83 f8 40          	cmp    $0x40,%rax
  218eb7:	0f 92 c0             	setb   %al
  218eba:	a8 01                	test   $0x1,%al
  218ebc:	75 02                	jne    218ec0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x180>
  218ebe:	eb 53                	jmp    218f13 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x1d3>
  218ec0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  218ec5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  218ec9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  218ece:	48 8b 0c 24          	mov    (%rsp),%rcx
  218ed2:	48 c1 e1 05          	shl    $0x5,%rcx
  218ed6:	48 01 cf             	add    %rcx,%rdi
  218ed9:	0f b6 d0             	movzbl %al,%edx
  218edc:	83 e2 01             	and    $0x1,%edx
  218edf:	e8 8c f1 ff ff       	callq  218070 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>
  218ee4:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  218eeb:	00 
  218eec:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  218ef3:	00 
  218ef4:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  218efb:	00 
  218efc:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  218f01:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  218f08:	00 
  218f09:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  218f10:	00 
  218f11:	eb 17                	jmp    218f2a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x1ea>
  218f13:	48 8b 3c 24          	mov    (%rsp),%rdi
  218f17:	48 8d 15 52 22 02 00 	lea    0x22252(%rip),%rdx        # 23b170 <memcmp+0x2430>
  218f1e:	be 40 00 00 00       	mov    $0x40,%esi
  218f23:	e8 18 cd 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218f28:	0f 0b                	ud2    
                return frame_opt;
  218f2a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  218f2f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  218f34:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  218f3b:	00 
  218f3c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  218f41:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  218f46:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  218f4b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  218f52:	c3                   	retq   
  218f53:	cc                   	int3   
  218f54:	cc                   	int3   
  218f55:	cc                   	int3   
  218f56:	cc                   	int3   
  218f57:	cc                   	int3   
  218f58:	cc                   	int3   
  218f59:	cc                   	int3   
  218f5a:	cc                   	int3   
  218f5b:	cc                   	int3   
  218f5c:	cc                   	int3   
  218f5d:	cc                   	int3   
  218f5e:	cc                   	int3   
  218f5f:	cc                   	int3   

0000000000218f60 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE>:
}

/// a function that lazy initializes LIEAR_ALLOCATOR
pub fn setup_physical_memory() {
  218f60:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  218f67:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  218f6e:	00 00 
  218f70:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  218f75:	48 8d 35 7c 73 fe ff 	lea    -0x18c84(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  218f7c:	e8 4f a0 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218f81:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  218f85:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  218f89:	a8 01                	test   $0x1,%al
  218f8b:	75 09                	jne    218f96 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x36>
  218f8d:	eb 00                	jmp    218f8f <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x2f>
  218f8f:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  218f94:	eb 4e                	jmp    218fe4 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x84>
  218f96:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  218f9d:	00 
  218f9e:	48 8b 3d a3 4b 02 00 	mov    0x24ba3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218fa5:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  218fac:	00 
  218fad:	e8 3e 22 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218fb2:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  218fb9:	00 
  218fba:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  218fc1:	00 
  218fc2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  218fc7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  218fcc:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  218fd1:	e8 fa 9f ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218fd6:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  218fda:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  218fde:	24 01                	and    $0x1,%al
  218fe0:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  218fe4:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  218fe9:	75 08                	jne    218ff3 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x93>
        "Set-up Linear memory allocator for Physical memory successfull, regions={}",
        LINEAR_ALLOCATOR.lock().regions
    );
}
  218feb:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  218ff2:	c3                   	retq   
        LINEAR_ALLOCATOR.lock().regions
  218ff3:	48 8d 3d cf 82 fe ff 	lea    -0x17d31(%rip),%rdi        # 2012c9 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  218ffa:	e8 31 02 00 00       	callq  219230 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  218fff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219004:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  219009:	e8 42 5b 01 00       	callq  22eb50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  21900e:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  219015:	00 
  219016:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21901d:	00 
  21901e:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  219025:	00 
  219026:	e8 25 5c 01 00       	callq  22ec50 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3348492b3ac9aa02E>
  21902b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219030:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219035:	48 05 00 08 00 00    	add    $0x800,%rax
    log::info!(
  21903b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  219042:	00 
  219043:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21904a:	00 
  21904b:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  219052:	00 
  219053:	48 8b 35 06 4b 02 00 	mov    0x24b06(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21905a:	e8 21 65 ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21905f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219064:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  219069:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21906e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  219073:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  219078:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21907f:	00 
  219080:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  219085:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21908a:	48 8d 35 f7 20 02 00 	lea    0x220f7(%rip),%rsi        # 23b188 <memcmp+0x2448>
  219091:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  219097:	4c 89 c2             	mov    %r8,%rdx
  21909a:	e8 91 d4 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21909f:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  2190a4:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2190a9:	48 8d 15 e8 20 02 00 	lea    0x220e8(%rip),%rdx        # 23b198 <memcmp+0x2458>
  2190b0:	e8 cb 9c 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2190b5:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2190bc:	00 
  2190bd:	e8 1e 32 ff ff       	callq  20c2e0 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  2190c2:	e9 24 ff ff ff       	jmpq   218feb <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x8b>
  2190c7:	cc                   	int3   
  2190c8:	cc                   	int3   
  2190c9:	cc                   	int3   
  2190ca:	cc                   	int3   
  2190cb:	cc                   	int3   
  2190cc:	cc                   	int3   
  2190cd:	cc                   	int3   
  2190ce:	cc                   	int3   
  2190cf:	cc                   	int3   

00000000002190d0 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17hc6e626f75c02576bE>:

pub struct PhysicalMemoryManager;

impl PhysicalMemoryManager {
    pub fn alloc() -> Option<Frame> {
  2190d0:	48 83 ec 48          	sub    $0x48,%rsp
        LINEAR_ALLOCATOR.lock().frame_alloc()
  2190d4:	48 8d 3d ee 81 fe ff 	lea    -0x17e12(%rip),%rdi        # 2012c9 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  2190db:	e8 50 01 00 00       	callq  219230 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  2190e0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2190e5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2190ea:	e8 61 5a 01 00       	callq  22eb50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  2190ef:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2190f4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2190f9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2190fe:	e8 fd 5b 01 00       	callq  22ed00 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>
  219103:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219108:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21910d:	e8 8e fa ff ff       	callq  218ba0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE>
  219112:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  219117:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21911c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  219121:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219126:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21912b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  219130:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  219135:	e8 a6 31 ff ff       	callq  20c2e0 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  21913a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21913f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  219144:	48 83 c4 48          	add    $0x48,%rsp
  219148:	c3                   	retq   
  219149:	cc                   	int3   
  21914a:	cc                   	int3   
  21914b:	cc                   	int3   
  21914c:	cc                   	int3   
  21914d:	cc                   	int3   
  21914e:	cc                   	int3   
  21914f:	cc                   	int3   

0000000000219150 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE>:

    pub fn alloc_huge_page() -> Option<Frame> {
  219150:	48 83 ec 58          	sub    $0x58,%rsp
        let n_frames = (2 * mm::MemorySizes::OneMib as usize) / PageSize::Page4KiB.size() as usize;
  219154:	48 8d 3d 04 80 fe ff 	lea    -0x17ffc(%rip),%rdi        # 20115f <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  21915b:	e8 00 36 ff ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  219160:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219165:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21916a:	48 83 f8 00          	cmp    $0x0,%rax
  21916e:	0f 94 c0             	sete   %al
  219171:	a8 01                	test   $0x1,%al
  219173:	75 2c                	jne    2191a1 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE+0x51>
  219175:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21917a:	b8 00 00 20 00       	mov    $0x200000,%eax
  21917f:	31 d2                	xor    %edx,%edx
  219181:	48 f7 f1             	div    %rcx
  219184:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219189:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        LINEAR_ALLOCATOR.lock().frame_alloc_n(n_frames, true)
  21918e:	48 8d 3d 34 81 fe ff 	lea    -0x17ecc(%rip),%rdi        # 2012c9 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  219195:	e8 96 00 00 00       	callq  219230 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  21919a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21919f:	eb 1a                	jmp    2191bb <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE+0x6b>
        let n_frames = (2 * mm::MemorySizes::OneMib as usize) / PageSize::Page4KiB.size() as usize;
  2191a1:	48 8d 3d f8 7f fe ff 	lea    -0x18008(%rip),%rdi        # 2011a0 <str.1>
  2191a8:	48 8d 15 21 20 02 00 	lea    0x22021(%rip),%rdx        # 23b1d0 <memcmp+0x2490>
  2191af:	be 19 00 00 00       	mov    $0x19,%esi
  2191b4:	e8 37 ca 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2191b9:	0f 0b                	ud2    
  2191bb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        LINEAR_ALLOCATOR.lock().frame_alloc_n(n_frames, true)
  2191c0:	e8 8b 59 01 00       	callq  22eb50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  2191c5:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2191ca:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2191cf:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2191d4:	e8 27 5b 01 00       	callq  22ed00 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>
  2191d9:	48 89 04 24          	mov    %rax,(%rsp)
  2191dd:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2191e2:	48 8b 3c 24          	mov    (%rsp),%rdi
  2191e6:	ba 01 00 00 00       	mov    $0x1,%edx
  2191eb:	e8 50 fb ff ff       	callq  218d40 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE>
  2191f0:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2191f5:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2191fa:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2191ff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219204:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  219209:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  21920e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  219213:	e8 c8 30 ff ff       	callq  20c2e0 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  219218:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21921d:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  219222:	48 83 c4 58          	add    $0x58,%rsp
  219226:	c3                   	retq   
  219227:	cc                   	int3   
  219228:	cc                   	int3   
  219229:	cc                   	int3   
  21922a:	cc                   	int3   
  21922b:	cc                   	int3   
  21922c:	cc                   	int3   
  21922d:	cc                   	int3   
  21922e:	cc                   	int3   
  21922f:	cc                   	int3   

0000000000219230 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>:
            fn deref(&self) -> &$T {
  219230:	48 83 ec 18          	sub    $0x18,%rsp
  219234:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219239:	48 8d 05 28 5c 02 00 	lea    0x25c28(%rip),%rax        # 23ee68 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h16851c2199cf9ce6E>
  219240:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219245:	48 8d 3d 1c 5c 02 00 	lea    0x25c1c(%rip),%rdi        # 23ee68 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h16851c2199cf9ce6E>
  21924c:	e8 ff 02 ff ff       	callq  209550 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE>
  219251:	48 89 04 24          	mov    %rax,(%rsp)
  219255:	48 8b 04 24          	mov    (%rsp),%rax
            }
  219259:	48 83 c4 18          	add    $0x18,%rsp
  21925d:	c3                   	retq   
  21925e:	cc                   	int3   
  21925f:	cc                   	int3   

0000000000219260 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>:
#[stable(feature = "unreachable", since = "1.27.0")]
#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
pub const unsafe fn unreachable_unchecked() -> ! {
    // SAFETY: the safety contract for `intrinsics::unreachable` must
    // be upheld by the caller.
    unsafe { intrinsics::unreachable() }
  219260:	0f 0b                	ud2    
  219262:	cc                   	int3   
  219263:	cc                   	int3   
  219264:	cc                   	int3   
  219265:	cc                   	int3   
  219266:	cc                   	int3   
  219267:	cc                   	int3   
  219268:	cc                   	int3   
  219269:	cc                   	int3   
  21926a:	cc                   	int3   
  21926b:	cc                   	int3   
  21926c:	cc                   	int3   
  21926d:	cc                   	int3   
  21926e:	cc                   	int3   
  21926f:	cc                   	int3   

0000000000219270 <_ZN4core4hint9spin_loop17h4ac7c45e53932ad1E>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
  219270:	c3                   	retq   
  219271:	cc                   	int3   
  219272:	cc                   	int3   
  219273:	cc                   	int3   
  219274:	cc                   	int3   
  219275:	cc                   	int3   
  219276:	cc                   	int3   
  219277:	cc                   	int3   
  219278:	cc                   	int3   
  219279:	cc                   	int3   
  21927a:	cc                   	int3   
  21927b:	cc                   	int3   
  21927c:	cc                   	int3   
  21927d:	cc                   	int3   
  21927e:	cc                   	int3   
  21927f:	cc                   	int3   

0000000000219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>:
    pub port_no: usize,
    pub read_only: bool,
}

impl Port {
    pub fn new(port_no: usize, read_only: bool) -> Self {
  219280:	48 83 ec 20          	sub    $0x20,%rsp
  219284:	40 88 f0             	mov    %sil,%al
  219287:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21928c:	24 01                	and    $0x1,%al
  21928e:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        Port { port_no, read_only }
  219292:	48 89 3c 24          	mov    %rdi,(%rsp)
  219296:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  21929a:	48 8b 04 24          	mov    (%rsp),%rax
  21929e:	8a 54 24 08          	mov    0x8(%rsp),%dl
  2192a2:	48 83 c4 20          	add    $0x20,%rsp
  2192a6:	c3                   	retq   
  2192a7:	cc                   	int3   
  2192a8:	cc                   	int3   
  2192a9:	cc                   	int3   
  2192aa:	cc                   	int3   
  2192ab:	cc                   	int3   
  2192ac:	cc                   	int3   
  2192ad:	cc                   	int3   
  2192ae:	cc                   	int3   
  2192af:	cc                   	int3   

00000000002192b0 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>:

    pub fn read_u8(&self) -> u8 {
  2192b0:	48 83 ec 10          	sub    $0x10,%rsp
  2192b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // assembly is unsafe
        let value: u8;
        unsafe {
            asm!(
                "in al, dx", out("al") value, in("dx") self.port_no,
  2192b9:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  2192bc:	ec                   	in     (%dx),%al
  2192bd:	88 44 24 07          	mov    %al,0x7(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  2192c1:	8a 44 24 07          	mov    0x7(%rsp),%al
  2192c5:	48 83 c4 10          	add    $0x10,%rsp
  2192c9:	c3                   	retq   
  2192ca:	cc                   	int3   
  2192cb:	cc                   	int3   
  2192cc:	cc                   	int3   
  2192cd:	cc                   	int3   
  2192ce:	cc                   	int3   
  2192cf:	cc                   	int3   

00000000002192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>:

    pub fn write_u8(&self, value: u8) {
  2192d0:	48 83 ec 20          	sub    $0x20,%rsp
  2192d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2192d8:	40 88 f0             	mov    %sil,%al
  2192db:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2192df:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2192e4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        if !self.read_only {
  2192e8:	8a 47 08             	mov    0x8(%rdi),%al
  2192eb:	34 ff                	xor    $0xff,%al
  2192ed:	a8 01                	test   $0x1,%al
  2192ef:	75 05                	jne    2192f6 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E+0x26>
                    "out dx, al", in("dx") self.port_no, in("al") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  2192f1:	48 83 c4 20          	add    $0x20,%rsp
  2192f5:	c3                   	retq   
  2192f6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2192fa:	48 8b 0c 24          	mov    (%rsp),%rcx
                    "out dx, al", in("dx") self.port_no, in("al") value,
  2192fe:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  219301:	ee                   	out    %al,(%dx)
  219302:	eb ed                	jmp    2192f1 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E+0x21>
  219304:	cc                   	int3   
  219305:	cc                   	int3   
  219306:	cc                   	int3   
  219307:	cc                   	int3   
  219308:	cc                   	int3   
  219309:	cc                   	int3   
  21930a:	cc                   	int3   
  21930b:	cc                   	int3   
  21930c:	cc                   	int3   
  21930d:	cc                   	int3   
  21930e:	cc                   	int3   
  21930f:	cc                   	int3   

0000000000219310 <_ZN9r3_kernel3cpu2io4Port8read_u3217h345e6a832a366919E>:
                );
            }
        }
    }

    pub fn read_u32(&self) -> u32 {
  219310:	48 83 ec 10          	sub    $0x10,%rsp
  219314:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let value: u32;
        unsafe {
            asm!(
                "in eax, dx", out("eax") value, in("dx") self.port_no,
  219319:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  21931c:	ed                   	in     (%dx),%eax
  21931d:	89 44 24 04          	mov    %eax,0x4(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  219321:	8b 44 24 04          	mov    0x4(%rsp),%eax
  219325:	48 83 c4 10          	add    $0x10,%rsp
  219329:	c3                   	retq   
  21932a:	cc                   	int3   
  21932b:	cc                   	int3   
  21932c:	cc                   	int3   
  21932d:	cc                   	int3   
  21932e:	cc                   	int3   
  21932f:	cc                   	int3   

0000000000219330 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E>:

    pub fn write_u32(&self, value: u32) {
  219330:	48 83 ec 20          	sub    $0x20,%rsp
  219334:	89 74 24 04          	mov    %esi,0x4(%rsp)
  219338:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21933d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  219342:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
        if !self.read_only {
  219346:	8a 47 08             	mov    0x8(%rdi),%al
  219349:	34 ff                	xor    $0xff,%al
  21934b:	a8 01                	test   $0x1,%al
  21934d:	75 05                	jne    219354 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E+0x24>
                    "out dx, eax", in("dx") self.port_no, in("eax") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  21934f:	48 83 c4 20          	add    $0x20,%rsp
  219353:	c3                   	retq   
  219354:	8b 44 24 04          	mov    0x4(%rsp),%eax
  219358:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    "out dx, eax", in("dx") self.port_no, in("eax") value,
  21935d:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  219360:	ef                   	out    %eax,(%dx)
  219361:	eb ec                	jmp    21934f <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E+0x1f>
  219363:	cc                   	int3   
  219364:	cc                   	int3   
  219365:	cc                   	int3   
  219366:	cc                   	int3   
  219367:	cc                   	int3   
  219368:	cc                   	int3   
  219369:	cc                   	int3   
  21936a:	cc                   	int3   
  21936b:	cc                   	int3   
  21936c:	cc                   	int3   
  21936d:	cc                   	int3   
  21936e:	cc                   	int3   
  21936f:	cc                   	int3   

0000000000219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>:
}

/// Wait until the time that is required to perform n port write cycles.
pub fn wait(cycles: usize) {
  219370:	48 83 ec 78          	sub    $0x78,%rsp
  219374:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  219379:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21937e:	bf 80 00 00 00       	mov    $0x80,%edi
  219383:	31 f6                	xor    %esi,%esi
    let port = Port::new(IO_WAIT_PORT, false);
  219385:	e8 f6 fe ff ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21938a:	88 54 24 28          	mov    %dl,0x28(%rsp)
  21938e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219393:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    for _ in 0..cycles {
  219398:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21939f:	00 00 
  2193a1:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2193a6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2193ab:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2193b0:	e8 fb 52 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  2193b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2193ba:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2193bf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2193c4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2193c9:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2193ce:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2193d3:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2193d8:	e8 a3 52 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  2193dd:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  2193e2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2193e7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2193ec:	48 85 c0             	test   %rax,%rax
  2193ef:	74 06                	je     2193f7 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x87>
  2193f1:	eb 00                	jmp    2193f3 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x83>
  2193f3:	eb 07                	jmp    2193fc <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x8c>
  2193f5:	0f 0b                	ud2    
        // write some garbage value.
        // this is a very rudimentary way of making CPU wait for some port I/O cycles.
        // this will be used prior to any timer initialization.
        port.write_u8(0xff);
    }
}
  2193f7:	48 83 c4 78          	add    $0x78,%rsp
  2193fb:	c3                   	retq   
    for _ in 0..cycles {
  2193fc:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  219401:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  219406:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        port.write_u8(0xff);
  21940b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  219410:	be ff 00 00 00       	mov    $0xff,%esi
  219415:	e8 b6 fe ff ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  21941a:	eb b7                	jmp    2193d3 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x63>
  21941c:	cc                   	int3   
  21941d:	cc                   	int3   
  21941e:	cc                   	int3   
  21941f:	cc                   	int3   

0000000000219420 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h26d845bbebccc84cE>:
    ///
    /// # Safety
    ///
    /// `ptr` must be non-null.
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  219420:	48 83 ec 10          	sub    $0x10,%rsp
  219424:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  219429:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21942d:	48 8b 04 24          	mov    (%rsp),%rax
  219431:	48 83 c4 10          	add    $0x10,%rsp
  219435:	c3                   	retq   
  219436:	cc                   	int3   
  219437:	cc                   	int3   
  219438:	cc                   	int3   
  219439:	cc                   	int3   
  21943a:	cc                   	int3   
  21943b:	cc                   	int3   
  21943c:	cc                   	int3   
  21943d:	cc                   	int3   
  21943e:	cc                   	int3   
  21943f:	cc                   	int3   

0000000000219440 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h490cf4a7df51fc38E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  219440:	48 83 ec 10          	sub    $0x10,%rsp
  219444:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  219449:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21944d:	48 8b 04 24          	mov    (%rsp),%rax
  219451:	48 83 c4 10          	add    $0x10,%rsp
  219455:	c3                   	retq   
  219456:	cc                   	int3   
  219457:	cc                   	int3   
  219458:	cc                   	int3   
  219459:	cc                   	int3   
  21945a:	cc                   	int3   
  21945b:	cc                   	int3   
  21945c:	cc                   	int3   
  21945d:	cc                   	int3   
  21945e:	cc                   	int3   
  21945f:	cc                   	int3   

0000000000219460 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h6c462c971cf16ae0E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  219460:	48 83 ec 10          	sub    $0x10,%rsp
  219464:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  219469:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21946d:	48 8b 04 24          	mov    (%rsp),%rax
  219471:	48 83 c4 10          	add    $0x10,%rsp
  219475:	c3                   	retq   
  219476:	cc                   	int3   
  219477:	cc                   	int3   
  219478:	cc                   	int3   
  219479:	cc                   	int3   
  21947a:	cc                   	int3   
  21947b:	cc                   	int3   
  21947c:	cc                   	int3   
  21947d:	cc                   	int3   
  21947e:	cc                   	int3   
  21947f:	cc                   	int3   

0000000000219480 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  219480:	48 83 ec 10          	sub    $0x10,%rsp
  219484:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  219489:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21948d:	48 8b 04 24          	mov    (%rsp),%rax
  219491:	48 83 c4 10          	add    $0x10,%rsp
  219495:	c3                   	retq   
  219496:	cc                   	int3   
  219497:	cc                   	int3   
  219498:	cc                   	int3   
  219499:	cc                   	int3   
  21949a:	cc                   	int3   
  21949b:	cc                   	int3   
  21949c:	cc                   	int3   
  21949d:	cc                   	int3   
  21949e:	cc                   	int3   
  21949f:	cc                   	int3   

00000000002194a0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h2891587fd6e47c2cE>:
    }

    /// Casts to a pointer of another type.
    #[must_use = "`self` will be dropped if the result is not used"]
    #[inline]
    pub const fn cast<U>(self) -> Unique<U> {
  2194a0:	48 83 ec 18          	sub    $0x18,%rsp
  2194a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // SAFETY: Unique::new_unchecked() creates a new unique and needs
        // the given pointer to not be null.
        // Since we are passing self as a pointer, it cannot be null.
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  2194a9:	e8 82 00 00 00       	callq  219530 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>
  2194ae:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2194b3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2194b8:	e8 c3 ff ff ff       	callq  219480 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  2194bd:	48 89 04 24          	mov    %rax,(%rsp)
  2194c1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2194c5:	48 83 c4 18          	add    $0x18,%rsp
  2194c9:	c3                   	retq   
  2194ca:	cc                   	int3   
  2194cb:	cc                   	int3   
  2194cc:	cc                   	int3   
  2194cd:	cc                   	int3   
  2194ce:	cc                   	int3   
  2194cf:	cc                   	int3   

00000000002194d0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h4b66210a99f50f58E>:
    pub const fn cast<U>(self) -> Unique<U> {
  2194d0:	48 83 ec 18          	sub    $0x18,%rsp
  2194d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  2194d9:	e8 82 00 00 00       	callq  219560 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>
  2194de:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2194e3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2194e8:	e8 93 ff ff ff       	callq  219480 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  2194ed:	48 89 04 24          	mov    %rax,(%rsp)
  2194f1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2194f5:	48 83 c4 18          	add    $0x18,%rsp
  2194f9:	c3                   	retq   
  2194fa:	cc                   	int3   
  2194fb:	cc                   	int3   
  2194fc:	cc                   	int3   
  2194fd:	cc                   	int3   
  2194fe:	cc                   	int3   
  2194ff:	cc                   	int3   

0000000000219500 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hf2b47319a3fe8fdcE>:
    pub const fn cast<U>(self) -> Unique<U> {
  219500:	48 83 ec 18          	sub    $0x18,%rsp
  219504:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  219509:	e8 42 00 00 00       	callq  219550 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>
  21950e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219513:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  219518:	e8 63 ff ff ff       	callq  219480 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  21951d:	48 89 04 24          	mov    %rax,(%rsp)
  219521:	48 8b 04 24          	mov    (%rsp),%rax
    }
  219525:	48 83 c4 18          	add    $0x18,%rsp
  219529:	c3                   	retq   
  21952a:	cc                   	int3   
  21952b:	cc                   	int3   
  21952c:	cc                   	int3   
  21952d:	cc                   	int3   
  21952e:	cc                   	int3   
  21952f:	cc                   	int3   

0000000000219530 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>:
    pub const fn as_ptr(self) -> *mut T {
  219530:	50                   	push   %rax
  219531:	48 89 f8             	mov    %rdi,%rax
  219534:	48 89 04 24          	mov    %rax,(%rsp)
    }
  219538:	59                   	pop    %rcx
  219539:	c3                   	retq   
  21953a:	cc                   	int3   
  21953b:	cc                   	int3   
  21953c:	cc                   	int3   
  21953d:	cc                   	int3   
  21953e:	cc                   	int3   
  21953f:	cc                   	int3   

0000000000219540 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h42bf14ac60cef2f4E>:
    pub const fn as_ptr(self) -> *mut T {
  219540:	50                   	push   %rax
  219541:	48 89 f8             	mov    %rdi,%rax
  219544:	48 89 04 24          	mov    %rax,(%rsp)
    }
  219548:	59                   	pop    %rcx
  219549:	c3                   	retq   
  21954a:	cc                   	int3   
  21954b:	cc                   	int3   
  21954c:	cc                   	int3   
  21954d:	cc                   	int3   
  21954e:	cc                   	int3   
  21954f:	cc                   	int3   

0000000000219550 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>:
    pub const fn as_ptr(self) -> *mut T {
  219550:	50                   	push   %rax
  219551:	48 89 f8             	mov    %rdi,%rax
  219554:	48 89 04 24          	mov    %rax,(%rsp)
    }
  219558:	59                   	pop    %rcx
  219559:	c3                   	retq   
  21955a:	cc                   	int3   
  21955b:	cc                   	int3   
  21955c:	cc                   	int3   
  21955d:	cc                   	int3   
  21955e:	cc                   	int3   
  21955f:	cc                   	int3   

0000000000219560 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>:
    pub const fn as_ptr(self) -> *mut T {
  219560:	50                   	push   %rax
  219561:	48 89 f8             	mov    %rdi,%rax
  219564:	48 89 04 24          	mov    %rax,(%rsp)
    }
  219568:	59                   	pop    %rcx
  219569:	c3                   	retq   
  21956a:	cc                   	int3   
  21956b:	cc                   	int3   
  21956c:	cc                   	int3   
  21956d:	cc                   	int3   
  21956e:	cc                   	int3   
  21956f:	cc                   	int3   

0000000000219570 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>:
    fn into(self) -> U {
  219570:	48 83 ec 18          	sub    $0x18,%rsp
  219574:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        U::from(self)
  219579:	e8 b2 0e 01 00       	callq  22a430 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hf65b60d894c651b0E>
  21957e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219583:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  219588:	48 83 c4 18          	add    $0x18,%rsp
  21958c:	c3                   	retq   
  21958d:	cc                   	int3   
  21958e:	cc                   	int3   
  21958f:	cc                   	int3   

0000000000219590 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9dbe3a34ba7485bE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  219590:	48 83 ec 18          	sub    $0x18,%rsp
  219594:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219599:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21959e:	48 8b 3f             	mov    (%rdi),%rdi
  2195a1:	e8 3a f9 00 00       	callq  228ee0 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17he76486db047b42f9E>
  2195a6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2195aa:	8a 44 24 07          	mov    0x7(%rsp),%al
  2195ae:	24 01                	and    $0x1,%al
  2195b0:	0f b6 c0             	movzbl %al,%eax
  2195b3:	48 83 c4 18          	add    $0x18,%rsp
  2195b7:	c3                   	retq   
  2195b8:	cc                   	int3   
  2195b9:	cc                   	int3   
  2195ba:	cc                   	int3   
  2195bb:	cc                   	int3   
  2195bc:	cc                   	int3   
  2195bd:	cc                   	int3   
  2195be:	cc                   	int3   
  2195bf:	cc                   	int3   

00000000002195c0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h02d01444721cb389E>:
    pub fn new_align_up(&self, size: u64) -> VirtualAddress {
        VirtualAddress::from_u64(Alignment::align_up(self.0, size))
    }

    #[inline]
    pub fn get_ptr<T>(self) -> *const T {
  2195c0:	48 83 ec 18          	sub    $0x18,%rsp
  2195c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  2195c9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2195ce:	e8 ed ec 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  2195d3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2195d8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2195dd:	48 83 c4 18          	add    $0x18,%rsp
  2195e1:	c3                   	retq   
  2195e2:	cc                   	int3   
  2195e3:	cc                   	int3   
  2195e4:	cc                   	int3   
  2195e5:	cc                   	int3   
  2195e6:	cc                   	int3   
  2195e7:	cc                   	int3   
  2195e8:	cc                   	int3   
  2195e9:	cc                   	int3   
  2195ea:	cc                   	int3   
  2195eb:	cc                   	int3   
  2195ec:	cc                   	int3   
  2195ed:	cc                   	int3   
  2195ee:	cc                   	int3   
  2195ef:	cc                   	int3   

00000000002195f0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h1701dfd31619c5daE>:
    pub fn get_ptr<T>(self) -> *const T {
  2195f0:	48 83 ec 18          	sub    $0x18,%rsp
  2195f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  2195f9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2195fe:	e8 bd ec 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219603:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219608:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21960d:	48 83 c4 18          	add    $0x18,%rsp
  219611:	c3                   	retq   
  219612:	cc                   	int3   
  219613:	cc                   	int3   
  219614:	cc                   	int3   
  219615:	cc                   	int3   
  219616:	cc                   	int3   
  219617:	cc                   	int3   
  219618:	cc                   	int3   
  219619:	cc                   	int3   
  21961a:	cc                   	int3   
  21961b:	cc                   	int3   
  21961c:	cc                   	int3   
  21961d:	cc                   	int3   
  21961e:	cc                   	int3   
  21961f:	cc                   	int3   

0000000000219620 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h495d47d78e1748e7E>:
    pub fn get_ptr<T>(self) -> *const T {
  219620:	48 83 ec 18          	sub    $0x18,%rsp
  219624:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  219629:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21962e:	e8 8d ec 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219633:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219638:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21963d:	48 83 c4 18          	add    $0x18,%rsp
  219641:	c3                   	retq   
  219642:	cc                   	int3   
  219643:	cc                   	int3   
  219644:	cc                   	int3   
  219645:	cc                   	int3   
  219646:	cc                   	int3   
  219647:	cc                   	int3   
  219648:	cc                   	int3   
  219649:	cc                   	int3   
  21964a:	cc                   	int3   
  21964b:	cc                   	int3   
  21964c:	cc                   	int3   
  21964d:	cc                   	int3   
  21964e:	cc                   	int3   
  21964f:	cc                   	int3   

0000000000219650 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8281fca1aa85ca7aE>:
    pub fn get_ptr<T>(self) -> *const T {
  219650:	48 83 ec 18          	sub    $0x18,%rsp
  219654:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  219659:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21965e:	e8 5d ec 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219663:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219668:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21966d:	48 83 c4 18          	add    $0x18,%rsp
  219671:	c3                   	retq   
  219672:	cc                   	int3   
  219673:	cc                   	int3   
  219674:	cc                   	int3   
  219675:	cc                   	int3   
  219676:	cc                   	int3   
  219677:	cc                   	int3   
  219678:	cc                   	int3   
  219679:	cc                   	int3   
  21967a:	cc                   	int3   
  21967b:	cc                   	int3   
  21967c:	cc                   	int3   
  21967d:	cc                   	int3   
  21967e:	cc                   	int3   
  21967f:	cc                   	int3   

0000000000219680 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8922eeaa7ea1b07fE>:
    pub fn get_ptr<T>(self) -> *const T {
  219680:	48 83 ec 18          	sub    $0x18,%rsp
  219684:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  219689:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21968e:	e8 2d ec 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219693:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219698:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21969d:	48 83 c4 18          	add    $0x18,%rsp
  2196a1:	c3                   	retq   
  2196a2:	cc                   	int3   
  2196a3:	cc                   	int3   
  2196a4:	cc                   	int3   
  2196a5:	cc                   	int3   
  2196a6:	cc                   	int3   
  2196a7:	cc                   	int3   
  2196a8:	cc                   	int3   
  2196a9:	cc                   	int3   
  2196aa:	cc                   	int3   
  2196ab:	cc                   	int3   
  2196ac:	cc                   	int3   
  2196ad:	cc                   	int3   
  2196ae:	cc                   	int3   
  2196af:	cc                   	int3   

00000000002196b0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8a329c0bfc3028c0E>:
    pub fn get_ptr<T>(self) -> *const T {
  2196b0:	48 83 ec 18          	sub    $0x18,%rsp
  2196b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  2196b9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2196be:	e8 fd eb 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  2196c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2196c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2196cd:	48 83 c4 18          	add    $0x18,%rsp
  2196d1:	c3                   	retq   
  2196d2:	cc                   	int3   
  2196d3:	cc                   	int3   
  2196d4:	cc                   	int3   
  2196d5:	cc                   	int3   
  2196d6:	cc                   	int3   
  2196d7:	cc                   	int3   
  2196d8:	cc                   	int3   
  2196d9:	cc                   	int3   
  2196da:	cc                   	int3   
  2196db:	cc                   	int3   
  2196dc:	cc                   	int3   
  2196dd:	cc                   	int3   
  2196de:	cc                   	int3   
  2196df:	cc                   	int3   

00000000002196e0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8cc50a1d58229d14E>:
    pub fn get_ptr<T>(self) -> *const T {
  2196e0:	48 83 ec 18          	sub    $0x18,%rsp
  2196e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  2196e9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2196ee:	e8 cd eb 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  2196f3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2196f8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2196fd:	48 83 c4 18          	add    $0x18,%rsp
  219701:	c3                   	retq   
  219702:	cc                   	int3   
  219703:	cc                   	int3   
  219704:	cc                   	int3   
  219705:	cc                   	int3   
  219706:	cc                   	int3   
  219707:	cc                   	int3   
  219708:	cc                   	int3   
  219709:	cc                   	int3   
  21970a:	cc                   	int3   
  21970b:	cc                   	int3   
  21970c:	cc                   	int3   
  21970d:	cc                   	int3   
  21970e:	cc                   	int3   
  21970f:	cc                   	int3   

0000000000219710 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>:
    pub fn get_ptr<T>(self) -> *const T {
  219710:	48 83 ec 18          	sub    $0x18,%rsp
  219714:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  219719:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21971e:	e8 9d eb 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219723:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219728:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21972d:	48 83 c4 18          	add    $0x18,%rsp
  219731:	c3                   	retq   
  219732:	cc                   	int3   
  219733:	cc                   	int3   
  219734:	cc                   	int3   
  219735:	cc                   	int3   
  219736:	cc                   	int3   
  219737:	cc                   	int3   
  219738:	cc                   	int3   
  219739:	cc                   	int3   
  21973a:	cc                   	int3   
  21973b:	cc                   	int3   
  21973c:	cc                   	int3   
  21973d:	cc                   	int3   
  21973e:	cc                   	int3   
  21973f:	cc                   	int3   

0000000000219740 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17he019b606acc39f32E>:
    pub fn get_ptr<T>(self) -> *const T {
  219740:	48 83 ec 18          	sub    $0x18,%rsp
  219744:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  219749:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21974e:	e8 6d eb 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219753:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219758:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21975d:	48 83 c4 18          	add    $0x18,%rsp
  219761:	c3                   	retq   
  219762:	cc                   	int3   
  219763:	cc                   	int3   
  219764:	cc                   	int3   
  219765:	cc                   	int3   
  219766:	cc                   	int3   
  219767:	cc                   	int3   
  219768:	cc                   	int3   
  219769:	cc                   	int3   
  21976a:	cc                   	int3   
  21976b:	cc                   	int3   
  21976c:	cc                   	int3   
  21976d:	cc                   	int3   
  21976e:	cc                   	int3   
  21976f:	cc                   	int3   

0000000000219770 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>:

    #[inline]
    pub fn get_mut_ptr<T>(self) -> *mut T {
  219770:	48 83 ec 18          	sub    $0x18,%rsp
  219774:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *mut T
  219779:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21977e:	e8 3d eb 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  219783:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219788:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21978d:	48 83 c4 18          	add    $0x18,%rsp
  219791:	c3                   	retq   
  219792:	cc                   	int3   
  219793:	cc                   	int3   
  219794:	cc                   	int3   
  219795:	cc                   	int3   
  219796:	cc                   	int3   
  219797:	cc                   	int3   
  219798:	cc                   	int3   
  219799:	cc                   	int3   
  21979a:	cc                   	int3   
  21979b:	cc                   	int3   
  21979c:	cc                   	int3   
  21979d:	cc                   	int3   
  21979e:	cc                   	int3   
  21979f:	cc                   	int3   

00000000002197a0 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17he3472abb9986f617E>:
    pub fn get_page_offset(&self) -> u16 {
        self.0 as u16 % (1 << 12)
    }

    #[inline]
    pub fn from_ptr<T>(ptr: *const T) -> Self {
  2197a0:	48 83 ec 18          	sub    $0x18,%rsp
  2197a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        VirtualAddress::from_u64(ptr as u64)
  2197a9:	e8 22 eb 00 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  2197ae:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2197b3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2197b8:	48 83 c4 18          	add    $0x18,%rsp
  2197bc:	c3                   	retq   
  2197bd:	cc                   	int3   
  2197be:	cc                   	int3   
  2197bf:	cc                   	int3   

00000000002197c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2197c0:	48 83 ec 70          	sub    $0x70,%rsp
  2197c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2197c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2197ce:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2197d3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2197d8:	8b 07                	mov    (%rdi),%eax
  2197da:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2197df:	8b 0e                	mov    (%rsi),%ecx
  2197e1:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2197e6:	48 39 c8             	cmp    %rcx,%rax
  2197e9:	74 0a                	je     2197f5 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x35>
  2197eb:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  2197f0:	e9 87 00 00 00       	jmpq   21987c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  2197f5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2197fa:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2197ff:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  219804:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219809:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21980e:	8b 00                	mov    (%rax),%eax
  219810:	48 89 04 24          	mov    %rax,(%rsp)
  219814:	48 83 e8 02          	sub    $0x2,%rax
  219818:	74 15                	je     21982f <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x6f>
  21981a:	eb 00                	jmp    21981c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x5c>
  21981c:	48 8b 04 24          	mov    (%rsp),%rax
  219820:	48 83 e8 03          	sub    $0x3,%rax
  219824:	74 18                	je     21983e <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x7e>
  219826:	eb 00                	jmp    219828 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
  219828:	c6 44 24 1f 01       	movb   $0x1,0x1f(%rsp)
  21982d:	eb 4d                	jmp    21987c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  21982f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  219834:	8b 00                	mov    (%rax),%eax
  219836:	48 83 f8 02          	cmp    $0x2,%rax
  21983a:	74 4e                	je     21988a <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xca>
  21983c:	eb ea                	jmp    219828 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
  21983e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  219843:	8b 00                	mov    (%rax),%eax
  219845:	48 83 f8 03          	cmp    $0x3,%rax
  219849:	75 dd                	jne    219828 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
    UnknownBios(u32),
  21984b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219850:	48 89 c1             	mov    %rax,%rcx
  219853:	48 83 c1 04          	add    $0x4,%rcx
  219857:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21985c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  219861:	48 89 ca             	mov    %rcx,%rdx
  219864:	48 83 c2 04          	add    $0x4,%rdx
  219868:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21986d:	8b 40 04             	mov    0x4(%rax),%eax
  219870:	3b 41 04             	cmp    0x4(%rcx),%eax
  219873:	0f 94 c0             	sete   %al
  219876:	24 01                	and    $0x1,%al
  219878:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  21987c:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  219880:	24 01                	and    $0x1,%al
  219882:	0f b6 c0             	movzbl %al,%eax
  219885:	48 83 c4 70          	add    $0x70,%rsp
  219889:	c3                   	retq   
    UnknownUefi(u32),
  21988a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21988f:	48 89 c1             	mov    %rax,%rcx
  219892:	48 83 c1 04          	add    $0x4,%rcx
  219896:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21989b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2198a0:	48 89 ca             	mov    %rcx,%rdx
  2198a3:	48 83 c2 04          	add    $0x4,%rdx
  2198a7:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2198ac:	8b 40 04             	mov    0x4(%rax),%eax
  2198af:	3b 41 04             	cmp    0x4(%rcx),%eax
  2198b2:	0f 94 c0             	sete   %al
  2198b5:	24 01                	and    $0x1,%al
  2198b7:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2198bb:	eb bf                	jmp    21987c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  2198bd:	cc                   	int3   
  2198be:	cc                   	int3   
  2198bf:	cc                   	int3   

00000000002198c0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h18c47f5fed896c76E>:
    pub fn empty() -> Self {
  2198c0:	48 83 ec 20          	sub    $0x20,%rsp
        BootProtoContainer { boot_info: None }
  2198c4:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  2198cb:	00 00 
  2198cd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2198d2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2198d7:	48 89 0c 24          	mov    %rcx,(%rsp)
  2198db:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2198e0:	48 8b 04 24          	mov    (%rsp),%rax
  2198e4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2198e9:	48 83 c4 20          	add    $0x20,%rsp
  2198ed:	c3                   	retq   
  2198ee:	cc                   	int3   
  2198ef:	cc                   	int3   

00000000002198f0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hb5e396e1e7814119E>:
    pub fn save(&mut self, b_proto: u64) {
  2198f0:	48 83 ec 20          	sub    $0x20,%rsp
  2198f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2198f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        self.boot_info = Some(b_proto);
  2198fe:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  219903:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  21990a:	00 
  21990b:	48 8b 0c 24          	mov    (%rsp),%rcx
  21990f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219914:	48 89 0f             	mov    %rcx,(%rdi)
  219917:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  21991b:	48 83 c4 20          	add    $0x20,%rsp
  21991f:	c3                   	retq   

0000000000219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>:
// this implementation than the whole codebase.
pub struct BootProtocol {}

impl BootProtocol {
    #[inline]
    pub fn get_boot_proto() -> Option<&'static mut BootInfo> {
  219920:	48 83 ec 38          	sub    $0x38,%rsp
        if let Some(boot_info_addr) = BOOT_INFO.lock().boot_info {
  219924:	48 8d 3d 9f 7a fe ff 	lea    -0x18561(%rip),%rdi        # 2013ca <_ZN9r3_kernel10boot_proto9BOOT_INFO17hbc1cd924f724c6f3E>
  21992b:	e8 50 11 00 00       	callq  21aa80 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>
  219930:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219935:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21993a:	e8 91 4f 01 00       	callq  22e8d0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>
  21993f:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  219944:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219949:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21994e:	e8 4d 53 01 00       	callq  22eca0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb39a6dc4401dd1b9E>
  219953:	48 89 04 24          	mov    %rax,(%rsp)
  219957:	48 8b 04 24          	mov    (%rsp),%rax
  21995b:	48 83 38 01          	cmpq   $0x1,(%rax)
  21995f:	75 23                	jne    219984 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E+0x64>
  219961:	48 8b 04 24          	mov    (%rsp),%rax
  219965:	48 8b 40 08          	mov    0x8(%rax),%rax
  219969:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            let boot_info: &mut BootInfo = unsafe { &mut *(boot_info_addr as *mut BootInfo) };
  21996e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)

            return Some(boot_info);
  219973:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        }
  219978:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21997d:	e8 6e 29 ff ff       	callq  20c2f0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>
  219982:	eb 13                	jmp    219997 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E+0x77>
  219984:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  219989:	e8 62 29 ff ff       	callq  20c2f0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>

        None
  21998e:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  219995:	00 00 
    }
  219997:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21999c:	48 83 c4 38          	add    $0x38,%rsp
  2199a0:	c3                   	retq   
  2199a1:	cc                   	int3   
  2199a2:	cc                   	int3   
  2199a3:	cc                   	int3   
  2199a4:	cc                   	int3   
  2199a5:	cc                   	int3   
  2199a6:	cc                   	int3   
  2199a7:	cc                   	int3   
  2199a8:	cc                   	int3   
  2199a9:	cc                   	int3   
  2199aa:	cc                   	int3   
  2199ab:	cc                   	int3   
  2199ac:	cc                   	int3   
  2199ad:	cc                   	int3   
  2199ae:	cc                   	int3   
  2199af:	cc                   	int3   

00000000002199b0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17h63a7ef6bf2bc3967E>:

    pub fn create(info: &'static BootInfo) {
  2199b0:	48 83 ec 38          	sub    $0x38,%rsp
  2199b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2199b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        // translate boot info to boot_proto:
        let boot_struct_addr = (info as *const BootInfo) as u64;
  2199be:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        BOOT_INFO.lock().save(boot_struct_addr);
  2199c3:	48 8d 3d 00 7a fe ff 	lea    -0x18600(%rip),%rdi        # 2013ca <_ZN9r3_kernel10boot_proto9BOOT_INFO17hbc1cd924f724c6f3E>
  2199ca:	e8 b1 10 00 00       	callq  21aa80 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>
  2199cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2199d4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2199d9:	e8 f2 4e 01 00       	callq  22e8d0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>
  2199de:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2199e3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2199e8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2199ed:	e8 de 52 01 00       	callq  22ecd0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h002f604e3334e323E>
  2199f2:	48 89 04 24          	mov    %rax,(%rsp)
  2199f6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2199fb:	48 8b 3c 24          	mov    (%rsp),%rdi
  2199ff:	e8 ec fe ff ff       	callq  2198f0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hb5e396e1e7814119E>
  219a04:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  219a09:	e8 e2 28 ff ff       	callq  20c2f0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>
    }
  219a0e:	48 83 c4 38          	add    $0x38,%rsp
  219a12:	c3                   	retq   
  219a13:	cc                   	int3   
  219a14:	cc                   	int3   
  219a15:	cc                   	int3   
  219a16:	cc                   	int3   
  219a17:	cc                   	int3   
  219a18:	cc                   	int3   
  219a19:	cc                   	int3   
  219a1a:	cc                   	int3   
  219a1b:	cc                   	int3   
  219a1c:	cc                   	int3   
  219a1d:	cc                   	int3   
  219a1e:	cc                   	int3   
  219a1f:	cc                   	int3   

0000000000219a20 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>:

    pub fn get_memory_regions() -> Option<&'static MemoryRegions> {
  219a20:	48 83 ec 18          	sub    $0x18,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  219a24:	e8 f7 fe ff ff       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  219a29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219a2e:	b8 01 00 00 00       	mov    $0x1,%eax
  219a33:	31 c9                	xor    %ecx,%ecx
  219a35:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  219a3b:	48 0f 44 c1          	cmove  %rcx,%rax
  219a3f:	48 83 f8 01          	cmp    $0x1,%rax
  219a43:	75 14                	jne    219a59 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E+0x39>
  219a45:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219a4a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            return Some(&bi.memory_regions);
  219a4f:	48 83 c0 08          	add    $0x8,%rax
  219a53:	48 89 04 24          	mov    %rax,(%rsp)
        }

        None
    }
  219a57:	eb 08                	jmp    219a61 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E+0x41>
        None
  219a59:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  219a60:	00 
    }
  219a61:	48 8b 04 24          	mov    (%rsp),%rax
  219a65:	48 83 c4 18          	add    $0x18,%rsp
  219a69:	c3                   	retq   
  219a6a:	cc                   	int3   
  219a6b:	cc                   	int3   
  219a6c:	cc                   	int3   
  219a6d:	cc                   	int3   
  219a6e:	cc                   	int3   
  219a6f:	cc                   	int3   

0000000000219a70 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>:

    pub fn get_framebuffer_info() -> Option<FrameBufferInfo> {
  219a70:	48 83 ec 68          	sub    $0x68,%rsp
  219a74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219a79:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if let Some(bi) = BootProtocol::get_boot_proto() {
  219a7e:	e8 9d fe ff ff       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  219a83:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219a88:	b8 01 00 00 00       	mov    $0x1,%eax
  219a8d:	31 c9                	xor    %ecx,%ecx
  219a8f:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  219a95:	48 0f 44 c1          	cmove  %rcx,%rax
  219a99:	48 83 f8 01          	cmp    $0x1,%rax
  219a9d:	75 1a                	jne    219ab9 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x49>
  219a9f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  219aa4:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  219aa9:	48 83 c7 18          	add    $0x18,%rdi
  219aad:	e8 8e 19 00 00       	callq  21b440 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E>
  219ab2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219ab7:	eb 16                	jmp    219acf <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x5f>
  219ab9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }

            return None;
        }

        None
  219abe:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  219ac5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  219aca:	48 83 c4 68          	add    $0x68,%rsp
  219ace:	c3                   	retq   
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  219acf:	b8 01 00 00 00       	mov    $0x1,%eax
  219ad4:	31 c9                	xor    %ecx,%ecx
  219ad6:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
  219adc:	48 0f 44 c1          	cmove  %rcx,%rax
  219ae0:	48 83 f8 01          	cmp    $0x1,%rax
  219ae4:	75 16                	jne    219afc <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x8c>
  219ae6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  219aeb:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
                return Some(fb_struct.info());
  219af0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  219af5:	e8 56 ac 01 00       	callq  234750 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>
  219afa:	eb 0e                	jmp    219b0a <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x9a>
  219afc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            return None;
  219b01:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  219b08:	eb bb                	jmp    219ac5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x55>
  219b0a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                return Some(fb_struct.info());
  219b0f:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  219b14:	ba 30 00 00 00       	mov    $0x30,%edx
  219b19:	e8 d2 f1 01 00       	callq  238cf0 <memcpy>
  219b1e:	eb a5                	jmp    219ac5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x55>

0000000000219b20 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>:

    pub fn get_framebuffer_slice() -> Option<&'static mut [u8]> {
  219b20:	48 83 ec 48          	sub    $0x48,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  219b24:	e8 f7 fd ff ff       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  219b29:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219b2e:	b8 01 00 00 00       	mov    $0x1,%eax
  219b33:	31 c9                	xor    %ecx,%ecx
  219b35:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  219b3b:	48 0f 44 c1          	cmove  %rcx,%rax
  219b3f:	48 83 f8 01          	cmp    $0x1,%rax
  219b43:	75 1a                	jne    219b5f <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x3f>
  219b45:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  219b4a:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
            if let Some(fb_info) = bi.framebuffer.as_mut() {
  219b4f:	48 83 c7 18          	add    $0x18,%rdi
  219b53:	e8 98 18 00 00       	callq  21b3f0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE>
  219b58:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219b5d:	eb 18                	jmp    219b77 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x57>
            }

            return None;
        }

        None
  219b5f:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  219b66:	00 00 
    }
  219b68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219b6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  219b72:	48 83 c4 48          	add    $0x48,%rsp
  219b76:	c3                   	retq   
            if let Some(fb_info) = bi.framebuffer.as_mut() {
  219b77:	b8 01 00 00 00       	mov    $0x1,%eax
  219b7c:	31 c9                	xor    %ecx,%ecx
  219b7e:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  219b84:	48 0f 44 c1          	cmove  %rcx,%rax
  219b88:	48 83 f8 01          	cmp    $0x1,%rax
  219b8c:	75 1b                	jne    219ba9 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x89>
  219b8e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  219b93:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
                return Some(fb_info.buffer_mut());
  219b98:	e8 53 ab 01 00       	callq  2346f0 <_ZN10bootloader9boot_info11FrameBuffer10buffer_mut17h3ebde5336f9f1ed1E>
  219b9d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219ba2:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  219ba7:	eb 0b                	jmp    219bb4 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x94>
            return None;
  219ba9:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  219bb0:	00 00 
  219bb2:	eb b4                	jmp    219b68 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x48>
  219bb4:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  219bb9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                return Some(fb_info.buffer_mut());
  219bbe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  219bc3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219bc8:	eb 9e                	jmp    219b68 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x48>
  219bca:	cc                   	int3   
  219bcb:	cc                   	int3   
  219bcc:	cc                   	int3   
  219bcd:	cc                   	int3   
  219bce:	cc                   	int3   
  219bcf:	cc                   	int3   

0000000000219bd0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>:

    pub fn get_phy_offset() -> Option<u64> {
  219bd0:	48 83 ec 28          	sub    $0x28,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  219bd4:	e8 47 fd ff ff       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  219bd9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219bde:	b8 01 00 00 00       	mov    $0x1,%eax
  219be3:	31 c9                	xor    %ecx,%ecx
  219be5:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  219beb:	48 0f 44 c1          	cmove  %rcx,%rax
  219bef:	48 83 f8 01          	cmp    $0x1,%rax
  219bf3:	75 22                	jne    219c17 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E+0x47>
  219bf5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219bfa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            return bi.physical_memory_offset.into_option();
  219bff:	8b 78 60             	mov    0x60(%rax),%edi
  219c02:	48 8b 70 68          	mov    0x68(%rax),%rsi
  219c06:	e8 b5 17 00 00       	callq  21b3c0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  219c0b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  219c10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219c15:	eb 09                	jmp    219c20 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E+0x50>
        }

        None
  219c17:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  219c1e:	00 00 
    }
  219c20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219c25:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  219c2a:	48 83 c4 28          	add    $0x28,%rsp
  219c2e:	c3                   	retq   
  219c2f:	cc                   	int3   

0000000000219c30 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E>:

    pub fn print_boot_info() {
  219c30:	48 81 ec 98 06 00 00 	sub    $0x698,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  219c37:	e8 e4 fc ff ff       	callq  219920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  219c3c:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  219c43:	00 
  219c44:	b8 01 00 00 00       	mov    $0x1,%eax
  219c49:	31 c9                	xor    %ecx,%ecx
  219c4b:	48 83 bc 24 70 01 00 	cmpq   $0x0,0x170(%rsp)
  219c52:	00 00 
  219c54:	48 0f 44 c1          	cmove  %rcx,%rax
  219c58:	48 83 f8 01          	cmp    $0x1,%rax
  219c5c:	75 41                	jne    219c9f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  219c5e:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  219c65:	00 
  219c66:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  219c6d:	00 
  219c6e:	48 89 84 24 98 05 00 	mov    %rax,0x598(%rsp)
  219c75:	00 
            // display version:
            log::info!(
  219c76:	48 c7 84 24 78 01 00 	movq   $0x3,0x178(%rsp)
  219c7d:	00 03 00 00 00 
  219c82:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  219c89:	00 
  219c8a:	48 8d 35 67 66 fe ff 	lea    -0x19999(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  219c91:	e8 3a 93 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219c96:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  219c9d:	eb 08                	jmp    219ca7 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x77>
                );
            } else {
                log::warn!("Boot info doesn't contain framebuffer information.");
            }
        }
    }
  219c9f:	48 81 c4 98 06 00 00 	add    $0x698,%rsp
  219ca6:	c3                   	retq   
  219ca7:	8a 84 24 6f 01 00 00 	mov    0x16f(%rsp),%al
            log::info!(
  219cae:	a8 01                	test   $0x1,%al
  219cb0:	75 0c                	jne    219cbe <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x8e>
  219cb2:	eb 00                	jmp    219cb4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x84>
  219cb4:	c6 84 24 87 01 00 00 	movb   $0x0,0x187(%rsp)
  219cbb:	00 
  219cbc:	eb 60                	jmp    219d1e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xee>
  219cbe:	c6 84 24 8f 06 00 00 	movb   $0x0,0x68f(%rsp)
  219cc5:	00 
  219cc6:	48 8b 3d 7b 3e 02 00 	mov    0x23e7b(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  219ccd:	0f b6 b4 24 8f 06 00 	movzbl 0x68f(%rsp),%esi
  219cd4:	00 
  219cd5:	e8 16 15 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  219cda:	48 89 84 24 90 06 00 	mov    %rax,0x690(%rsp)
  219ce1:	00 
  219ce2:	48 8b 84 24 90 06 00 	mov    0x690(%rsp),%rax
  219ce9:	00 
  219cea:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  219cf1:	00 
  219cf2:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  219cf9:	00 
  219cfa:	48 8d b4 24 88 01 00 	lea    0x188(%rsp),%rsi
  219d01:	00 
  219d02:	e8 c9 92 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219d07:	88 84 24 5f 01 00 00 	mov    %al,0x15f(%rsp)
  219d0e:	8a 84 24 5f 01 00 00 	mov    0x15f(%rsp),%al
  219d15:	24 01                	and    $0x1,%al
  219d17:	88 84 24 87 01 00 00 	mov    %al,0x187(%rsp)
  219d1e:	f6 84 24 87 01 00 00 	testb  $0x1,0x187(%rsp)
  219d25:	01 
  219d26:	75 2c                	jne    219d54 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x124>
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  219d28:	48 c7 84 24 08 02 00 	movq   $0x3,0x208(%rsp)
  219d2f:	00 03 00 00 00 
  219d34:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  219d3b:	00 
  219d3c:	48 8d 35 b5 65 fe ff 	lea    -0x19a4b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  219d43:	e8 88 92 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219d48:	88 84 24 5e 01 00 00 	mov    %al,0x15e(%rsp)
  219d4f:	e9 78 01 00 00       	jmpq   219ecc <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x29c>
  219d54:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  219d5b:	00 
                bi.version_major,
  219d5c:	48 89 c2             	mov    %rax,%rdx
                bi.version_minor,
  219d5f:	48 89 c1             	mov    %rax,%rcx
  219d62:	48 83 c1 02          	add    $0x2,%rcx
                bi.version_patch
  219d66:	48 83 c0 04          	add    $0x4,%rax
            log::info!(
  219d6a:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  219d71:	00 
  219d72:	48 89 8c 24 f8 01 00 	mov    %rcx,0x1f8(%rsp)
  219d79:	00 
  219d7a:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  219d81:	00 
  219d82:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  219d89:	00 
  219d8a:	48 89 bc 24 a0 05 00 	mov    %rdi,0x5a0(%rsp)
  219d91:	00 
  219d92:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  219d99:	00 
  219d9a:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  219da1:	00 
  219da2:	48 89 84 24 a8 05 00 	mov    %rax,0x5a8(%rsp)
  219da9:	00 
  219daa:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  219db1:	00 
  219db2:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  219db9:	00 
  219dba:	48 89 84 24 b0 05 00 	mov    %rax,0x5b0(%rsp)
  219dc1:	00 
  219dc2:	48 8b 35 af 3d 02 00 	mov    0x23daf(%rip),%rsi        # 23db78 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  219dc9:	e8 32 53 ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  219dce:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  219dd5:	00 
  219dd6:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  219ddd:	00 
  219dde:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  219de5:	00 
  219de6:	48 8b 35 8b 3d 02 00 	mov    0x23d8b(%rip),%rsi        # 23db78 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  219ded:	e8 0e 53 ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  219df2:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  219df9:	00 
  219dfa:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  219e01:	00 
  219e02:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  219e09:	00 
  219e0a:	48 8b 35 67 3d 02 00 	mov    0x23d67(%rip),%rsi        # 23db78 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  219e11:	e8 ea 52 ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  219e16:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  219e1d:	00 
  219e1e:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  219e25:	00 
  219e26:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  219e2d:	00 
  219e2e:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  219e35:	00 
  219e36:	48 8b 94 24 30 01 00 	mov    0x130(%rsp),%rdx
  219e3d:	00 
  219e3e:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  219e45:	00 
  219e46:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  219e4d:	00 
  219e4e:	4c 8b 84 24 48 01 00 	mov    0x148(%rsp),%r8
  219e55:	00 
  219e56:	4c 89 84 24 c0 01 00 	mov    %r8,0x1c0(%rsp)
  219e5d:	00 
  219e5e:	48 89 bc 24 c8 01 00 	mov    %rdi,0x1c8(%rsp)
  219e65:	00 
  219e66:	48 89 b4 24 d0 01 00 	mov    %rsi,0x1d0(%rsp)
  219e6d:	00 
  219e6e:	48 89 94 24 d8 01 00 	mov    %rdx,0x1d8(%rsp)
  219e75:	00 
  219e76:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  219e7d:	00 
  219e7e:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  219e85:	00 
  219e86:	48 8d 8c 24 c0 01 00 	lea    0x1c0(%rsp),%rcx
  219e8d:	00 
  219e8e:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  219e95:	00 
  219e96:	48 8d 35 4b 13 02 00 	lea    0x2134b(%rip),%rsi        # 23b1e8 <memcmp+0x24a8>
  219e9d:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  219ea3:	4c 89 c2             	mov    %r8,%rdx
  219ea6:	e8 85 c6 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  219eab:	48 8b b4 24 78 01 00 	mov    0x178(%rsp),%rsi
  219eb2:	00 
  219eb3:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  219eba:	00 
  219ebb:	48 8d 15 56 13 02 00 	lea    0x21356(%rip),%rdx        # 23b218 <memcmp+0x24d8>
  219ec2:	e8 b9 8e 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  219ec7:	e9 5c fe ff ff       	jmpq   219d28 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xf8>
  219ecc:	8a 84 24 5e 01 00 00 	mov    0x15e(%rsp),%al
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  219ed3:	a8 01                	test   $0x1,%al
  219ed5:	75 0c                	jne    219ee3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x2b3>
  219ed7:	eb 00                	jmp    219ed9 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x2a9>
  219ed9:	c6 84 24 17 02 00 00 	movb   $0x0,0x217(%rsp)
  219ee0:	00 
  219ee1:	eb 60                	jmp    219f43 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x313>
  219ee3:	c6 84 24 7f 06 00 00 	movb   $0x0,0x67f(%rsp)
  219eea:	00 
  219eeb:	48 8b 3d 56 3c 02 00 	mov    0x23c56(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  219ef2:	0f b6 b4 24 7f 06 00 	movzbl 0x67f(%rsp),%esi
  219ef9:	00 
  219efa:	e8 f1 12 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  219eff:	48 89 84 24 80 06 00 	mov    %rax,0x680(%rsp)
  219f06:	00 
  219f07:	48 8b 84 24 80 06 00 	mov    0x680(%rsp),%rax
  219f0e:	00 
  219f0f:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  219f16:	00 
  219f17:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  219f1e:	00 
  219f1f:	48 8d b4 24 18 02 00 	lea    0x218(%rsp),%rsi
  219f26:	00 
  219f27:	e8 a4 90 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219f2c:	88 84 24 17 01 00 00 	mov    %al,0x117(%rsp)
  219f33:	8a 84 24 17 01 00 00 	mov    0x117(%rsp),%al
  219f3a:	24 01                	and    $0x1,%al
  219f3c:	88 84 24 17 02 00 00 	mov    %al,0x217(%rsp)
  219f43:	f6 84 24 17 02 00 00 	testb  $0x1,0x217(%rsp)
  219f4a:	01 
  219f4b:	75 2c                	jne    219f79 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x349>
            log::info!(
  219f4d:	48 c7 84 24 68 02 00 	movq   $0x3,0x268(%rsp)
  219f54:	00 03 00 00 00 
  219f59:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  219f60:	00 
  219f61:	48 8d 35 90 63 fe ff 	lea    -0x19c70(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  219f68:	e8 63 90 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219f6d:	88 84 24 16 01 00 00 	mov    %al,0x116(%rsp)
  219f74:	e9 a6 00 00 00       	jmpq   21a01f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x3ef>
  219f79:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  219f80:	00 
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  219f81:	48 83 c0 78          	add    $0x78,%rax
  219f85:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  219f8c:	00 
  219f8d:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  219f94:	00 
  219f95:	48 89 bc 24 b8 05 00 	mov    %rdi,0x5b8(%rsp)
  219f9c:	00 
  219f9d:	48 8b 35 dc 3b 02 00 	mov    0x23bdc(%rip),%rsi        # 23db80 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x98>
  219fa4:	e8 b7 57 ff ff       	callq  20f760 <_ZN4core3fmt10ArgumentV13new17hedb1e574926a384eE>
  219fa9:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  219fb0:	00 
  219fb1:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  219fb8:	00 
  219fb9:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  219fc0:	00 
  219fc1:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  219fc8:	00 
  219fc9:	48 89 8c 24 50 02 00 	mov    %rcx,0x250(%rsp)
  219fd0:	00 
  219fd1:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  219fd8:	00 
  219fd9:	48 8d 8c 24 50 02 00 	lea    0x250(%rsp),%rcx
  219fe0:	00 
  219fe1:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  219fe8:	00 
  219fe9:	48 8d 35 60 12 02 00 	lea    0x21260(%rip),%rsi        # 23b250 <memcmp+0x2510>
  219ff0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  219ff6:	4c 89 c2             	mov    %r8,%rdx
  219ff9:	e8 32 c5 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  219ffe:	48 8b b4 24 08 02 00 	mov    0x208(%rsp),%rsi
  21a005:	00 
  21a006:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  21a00d:	00 
  21a00e:	48 8d 15 4b 12 02 00 	lea    0x2124b(%rip),%rdx        # 23b260 <memcmp+0x2520>
  21a015:	e8 66 8d 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a01a:	e9 2e ff ff ff       	jmpq   219f4d <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x31d>
  21a01f:	8a 84 24 16 01 00 00 	mov    0x116(%rsp),%al
            log::info!(
  21a026:	a8 01                	test   $0x1,%al
  21a028:	75 0c                	jne    21a036 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x406>
  21a02a:	eb 00                	jmp    21a02c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x3fc>
  21a02c:	c6 84 24 77 02 00 00 	movb   $0x0,0x277(%rsp)
  21a033:	00 
  21a034:	eb 60                	jmp    21a096 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x466>
  21a036:	c6 84 24 6f 06 00 00 	movb   $0x0,0x66f(%rsp)
  21a03d:	00 
  21a03e:	48 8b 3d 03 3b 02 00 	mov    0x23b03(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a045:	0f b6 b4 24 6f 06 00 	movzbl 0x66f(%rsp),%esi
  21a04c:	00 
  21a04d:	e8 9e 11 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a052:	48 89 84 24 70 06 00 	mov    %rax,0x670(%rsp)
  21a059:	00 
  21a05a:	48 8b 84 24 70 06 00 	mov    0x670(%rsp),%rax
  21a061:	00 
  21a062:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  21a069:	00 
  21a06a:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  21a071:	00 
  21a072:	48 8d b4 24 78 02 00 	lea    0x278(%rsp),%rsi
  21a079:	00 
  21a07a:	e8 51 8f ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a07f:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  21a086:	8a 84 24 ff 00 00 00 	mov    0xff(%rsp),%al
  21a08d:	24 01                	and    $0x1,%al
  21a08f:	88 84 24 77 02 00 00 	mov    %al,0x277(%rsp)
  21a096:	f6 84 24 77 02 00 00 	testb  $0x1,0x277(%rsp)
  21a09d:	01 
  21a09e:	75 12                	jne    21a0b2 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x482>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  21a0a0:	e8 7b f9 ff ff       	callq  219a20 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>
  21a0a5:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  21a0ac:	00 
  21a0ad:	e9 ea 00 00 00       	jmpq   21a19c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x56c>
  21a0b2:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21a0b9:	00 
                bi.physical_memory_offset.into_option().unwrap()
  21a0ba:	8b 78 60             	mov    0x60(%rax),%edi
  21a0bd:	48 8b 70 68          	mov    0x68(%rax),%rsi
  21a0c1:	e8 fa 12 00 00       	callq  21b3c0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  21a0c6:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21a0cd:	00 
  21a0ce:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  21a0d5:	00 
  21a0d6:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  21a0dd:	00 
  21a0de:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  21a0e5:	00 
  21a0e6:	48 8d 15 bb 11 02 00 	lea    0x211bb(%rip),%rdx        # 23b2a8 <memcmp+0x2568>
  21a0ed:	e8 de 72 ff ff       	callq  2113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  21a0f2:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  21a0f9:	00 
            log::info!(
  21a0fa:	48 8d 84 24 c8 02 00 	lea    0x2c8(%rsp),%rax
  21a101:	00 
  21a102:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
  21a109:	00 
  21a10a:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  21a111:	00 
  21a112:	48 89 bc 24 c0 05 00 	mov    %rdi,0x5c0(%rsp)
  21a119:	00 
  21a11a:	48 8b 35 2f 3a 02 00 	mov    0x23a2f(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21a121:	e8 1a 55 ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21a126:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21a12d:	00 
  21a12e:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21a135:	00 
  21a136:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  21a13d:	00 
  21a13e:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  21a145:	00 
  21a146:	48 89 8c 24 b0 02 00 	mov    %rcx,0x2b0(%rsp)
  21a14d:	00 
  21a14e:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  21a155:	00 
  21a156:	48 8d 8c 24 b0 02 00 	lea    0x2b0(%rsp),%rcx
  21a15d:	00 
  21a15e:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
  21a165:	00 
  21a166:	48 8d 35 2b 11 02 00 	lea    0x2112b(%rip),%rsi        # 23b298 <memcmp+0x2558>
  21a16d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21a173:	4c 89 c2             	mov    %r8,%rdx
  21a176:	e8 b5 c3 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a17b:	48 8b b4 24 68 02 00 	mov    0x268(%rsp),%rsi
  21a182:	00 
  21a183:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
  21a18a:	00 
  21a18b:	48 8d 15 2e 11 02 00 	lea    0x2112e(%rip),%rdx        # 23b2c0 <memcmp+0x2580>
  21a192:	e8 e9 8b 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a197:	e9 04 ff ff ff       	jmpq   21a0a0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x470>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  21a19c:	b8 01 00 00 00       	mov    $0x1,%eax
  21a1a1:	31 c9                	xor    %ecx,%ecx
  21a1a3:	48 83 bc 24 d0 02 00 	cmpq   $0x0,0x2d0(%rsp)
  21a1aa:	00 00 
  21a1ac:	48 0f 44 c1          	cmove  %rcx,%rax
  21a1b0:	48 83 f8 01          	cmp    $0x1,%rax
  21a1b4:	75 2a                	jne    21a1e0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5b0>
  21a1b6:	48 8b bc 24 d0 02 00 	mov    0x2d0(%rsp),%rdi
  21a1bd:	00 
  21a1be:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  21a1c5:	00 
  21a1c6:	48 89 bc 24 c8 05 00 	mov    %rdi,0x5c8(%rsp)
  21a1cd:	00 
                for region_idx in 0..memory_regions.len() {
  21a1ce:	e8 ed a4 01 00       	callq  2346c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  21a1d3:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  21a1da:	00 
  21a1db:	e9 05 01 00 00       	jmpq   21a2e5 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6b5>
                log::warn!("Boot info doesn't contain memory map information.");
  21a1e0:	48 c7 84 24 80 03 00 	movq   $0x2,0x380(%rsp)
  21a1e7:	00 02 00 00 00 
  21a1ec:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  21a1f3:	00 
  21a1f4:	48 8d 35 fd 60 fe ff 	lea    -0x19f03(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21a1fb:	e8 d0 8d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a200:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  21a207:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
  21a20e:	a8 01                	test   $0x1,%al
  21a210:	75 0c                	jne    21a21e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5ee>
  21a212:	eb 00                	jmp    21a214 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5e4>
  21a214:	c6 84 24 8f 03 00 00 	movb   $0x0,0x38f(%rsp)
  21a21b:	00 
  21a21c:	eb 60                	jmp    21a27e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x64e>
  21a21e:	c6 84 24 5f 06 00 00 	movb   $0x0,0x65f(%rsp)
  21a225:	00 
  21a226:	48 8b 3d 1b 39 02 00 	mov    0x2391b(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a22d:	0f b6 b4 24 5f 06 00 	movzbl 0x65f(%rsp),%esi
  21a234:	00 
  21a235:	e8 b6 0f 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a23a:	48 89 84 24 60 06 00 	mov    %rax,0x660(%rsp)
  21a241:	00 
  21a242:	48 8b 84 24 60 06 00 	mov    0x660(%rsp),%rax
  21a249:	00 
  21a24a:	48 89 84 24 90 03 00 	mov    %rax,0x390(%rsp)
  21a251:	00 
  21a252:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  21a259:	00 
  21a25a:	48 8d b4 24 90 03 00 	lea    0x390(%rsp),%rsi
  21a261:	00 
  21a262:	e8 69 8d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a267:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  21a26e:	8a 84 24 c6 00 00 00 	mov    0xc6(%rsp),%al
  21a275:	24 01                	and    $0x1,%al
  21a277:	88 84 24 8f 03 00 00 	mov    %al,0x38f(%rsp)
  21a27e:	f6 84 24 8f 03 00 00 	testb  $0x1,0x38f(%rsp)
  21a285:	01 
  21a286:	75 1a                	jne    21a2a2 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x672>
            if let Some(fb_slice) = BootProtocol::get_framebuffer_slice() {
  21a288:	e8 93 f8 ff ff       	callq  219b20 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  21a28d:	48 89 94 24 d0 03 00 	mov    %rdx,0x3d0(%rsp)
  21a294:	00 
  21a295:	48 89 84 24 c8 03 00 	mov    %rax,0x3c8(%rsp)
  21a29c:	00 
  21a29d:	e9 e1 02 00 00       	jmpq   21a583 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x953>
                log::warn!("Boot info doesn't contain memory map information.");
  21a2a2:	48 8d bc 24 98 03 00 	lea    0x398(%rsp),%rdi
  21a2a9:	00 
  21a2aa:	48 8d 35 47 10 02 00 	lea    0x21047(%rip),%rsi        # 23b2f8 <memcmp+0x25b8>
  21a2b1:	ba 01 00 00 00       	mov    $0x1,%edx
  21a2b6:	48 8d 0d 9b 70 fe ff 	lea    -0x18f65(%rip),%rcx        # 201358 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE+0x8f>
  21a2bd:	31 c0                	xor    %eax,%eax
  21a2bf:	41 89 c0             	mov    %eax,%r8d
  21a2c2:	e8 69 c2 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a2c7:	48 8b b4 24 80 03 00 	mov    0x380(%rsp),%rsi
  21a2ce:	00 
  21a2cf:	48 8d bc 24 98 03 00 	lea    0x398(%rsp),%rdi
  21a2d6:	00 
  21a2d7:	48 8d 15 2a 10 02 00 	lea    0x2102a(%rip),%rdx        # 23b308 <memcmp+0x25c8>
  21a2de:	e8 9d 8a 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a2e3:	eb a3                	jmp    21a288 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x658>
  21a2e5:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21a2ec:	00 
                for region_idx in 0..memory_regions.len() {
  21a2ed:	48 c7 84 24 d8 02 00 	movq   $0x0,0x2d8(%rsp)
  21a2f4:	00 00 00 00 00 
  21a2f9:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  21a300:	00 
  21a301:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  21a308:	00 
  21a309:	48 8b b4 24 e0 02 00 	mov    0x2e0(%rsp),%rsi
  21a310:	00 
  21a311:	e8 9a 43 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21a316:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21a31d:	00 
  21a31e:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  21a325:	00 
  21a326:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21a32d:	00 
  21a32e:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  21a335:	00 
  21a336:	48 89 8c 24 e8 02 00 	mov    %rcx,0x2e8(%rsp)
  21a33d:	00 
  21a33e:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  21a345:	00 
  21a346:	48 8d bc 24 e8 02 00 	lea    0x2e8(%rsp),%rdi
  21a34d:	00 
  21a34e:	e8 2d 43 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21a353:	48 89 94 24 00 03 00 	mov    %rdx,0x300(%rsp)
  21a35a:	00 
  21a35b:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
  21a362:	00 
  21a363:	48 8b 84 24 f8 02 00 	mov    0x2f8(%rsp),%rax
  21a36a:	00 
  21a36b:	48 85 c0             	test   %rax,%rax
  21a36e:	0f 84 14 ff ff ff    	je     21a288 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x658>
  21a374:	eb 00                	jmp    21a376 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x746>
  21a376:	eb 02                	jmp    21a37a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x74a>
  21a378:	0f 0b                	ud2    
  21a37a:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  21a381:	00 
  21a382:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  21a389:	00 
  21a38a:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21a391:	00 
  21a392:	48 89 84 24 d0 05 00 	mov    %rax,0x5d0(%rsp)
  21a399:	00 
  21a39a:	48 89 84 24 d8 05 00 	mov    %rax,0x5d8(%rsp)
  21a3a1:	00 
  21a3a2:	48 89 84 24 e0 05 00 	mov    %rax,0x5e0(%rsp)
  21a3a9:	00 
                    let region = memory_regions[region_idx];
  21a3aa:	e8 11 a3 01 00       	callq  2346c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  21a3af:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21a3b6:	00 
  21a3b7:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  21a3be:	00 
  21a3bf:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21a3c6:	00 
  21a3c7:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  21a3ce:	00 
  21a3cf:	48 39 c8             	cmp    %rcx,%rax
  21a3d2:	0f 92 c0             	setb   %al
  21a3d5:	a8 01                	test   $0x1,%al
  21a3d7:	75 02                	jne    21a3db <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x7ab>
  21a3d9:	eb 63                	jmp    21a43e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x80e>
  21a3db:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21a3e2:	00 
  21a3e3:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21a3ea:	00 
  21a3eb:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  21a3ef:	48 01 c8             	add    %rcx,%rax
  21a3f2:	48 8b 08             	mov    (%rax),%rcx
  21a3f5:	48 89 8c 24 08 03 00 	mov    %rcx,0x308(%rsp)
  21a3fc:	00 
  21a3fd:	48 8b 48 08          	mov    0x8(%rax),%rcx
  21a401:	48 89 8c 24 10 03 00 	mov    %rcx,0x310(%rsp)
  21a408:	00 
  21a409:	48 8b 40 10          	mov    0x10(%rax),%rax
  21a40d:	48 89 84 24 18 03 00 	mov    %rax,0x318(%rsp)
  21a414:	00 
                    log::info!("{:?}", region);
  21a415:	48 c7 84 24 20 03 00 	movq   $0x3,0x320(%rsp)
  21a41c:	00 03 00 00 00 
  21a421:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  21a428:	00 
  21a429:	48 8d 35 c8 5e fe ff 	lea    -0x1a138(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21a430:	e8 9b 8b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a435:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21a43c:	eb 1e                	jmp    21a45c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x82c>
  21a43e:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  21a445:	00 
  21a446:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  21a44d:	00 
                    let region = memory_regions[region_idx];
  21a44e:	48 8d 15 eb 0e 02 00 	lea    0x20eeb(%rip),%rdx        # 23b340 <memcmp+0x2600>
  21a455:	e8 e6 b7 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21a45a:	0f 0b                	ud2    
  21a45c:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
                    log::info!("{:?}", region);
  21a463:	a8 01                	test   $0x1,%al
  21a465:	75 0c                	jne    21a473 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x843>
  21a467:	eb 00                	jmp    21a469 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x839>
  21a469:	c6 84 24 2f 03 00 00 	movb   $0x0,0x32f(%rsp)
  21a470:	00 
  21a471:	eb 60                	jmp    21a4d3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x8a3>
  21a473:	c6 84 24 4f 06 00 00 	movb   $0x0,0x64f(%rsp)
  21a47a:	00 
  21a47b:	48 8b 3d c6 36 02 00 	mov    0x236c6(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a482:	0f b6 b4 24 4f 06 00 	movzbl 0x64f(%rsp),%esi
  21a489:	00 
  21a48a:	e8 61 0d 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a48f:	48 89 84 24 50 06 00 	mov    %rax,0x650(%rsp)
  21a496:	00 
  21a497:	48 8b 84 24 50 06 00 	mov    0x650(%rsp),%rax
  21a49e:	00 
  21a49f:	48 89 84 24 30 03 00 	mov    %rax,0x330(%rsp)
  21a4a6:	00 
  21a4a7:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  21a4ae:	00 
  21a4af:	48 8d b4 24 30 03 00 	lea    0x330(%rsp),%rsi
  21a4b6:	00 
  21a4b7:	e8 14 8b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a4bc:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  21a4c3:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  21a4ca:	24 01                	and    $0x1,%al
  21a4cc:	88 84 24 2f 03 00 00 	mov    %al,0x32f(%rsp)
  21a4d3:	f6 84 24 2f 03 00 00 	testb  $0x1,0x32f(%rsp)
  21a4da:	01 
  21a4db:	0f 84 65 fe ff ff    	je     21a346 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x716>
  21a4e1:	48 8d 84 24 08 03 00 	lea    0x308(%rsp),%rax
  21a4e8:	00 
  21a4e9:	48 89 84 24 78 03 00 	mov    %rax,0x378(%rsp)
  21a4f0:	00 
  21a4f1:	48 8b bc 24 78 03 00 	mov    0x378(%rsp),%rdi
  21a4f8:	00 
  21a4f9:	48 89 bc 24 e8 05 00 	mov    %rdi,0x5e8(%rsp)
  21a500:	00 
  21a501:	48 8b 35 80 36 02 00 	mov    0x23680(%rip),%rsi        # 23db88 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  21a508:	e8 13 4d ff ff       	callq  20f220 <_ZN4core3fmt10ArgumentV13new17h6761285cd85d6144E>
  21a50d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21a514:	00 
  21a515:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21a51c:	00 
  21a51d:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21a524:	00 
  21a525:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21a52c:	00 
  21a52d:	48 89 8c 24 68 03 00 	mov    %rcx,0x368(%rsp)
  21a534:	00 
  21a535:	48 89 84 24 70 03 00 	mov    %rax,0x370(%rsp)
  21a53c:	00 
  21a53d:	48 8d 8c 24 68 03 00 	lea    0x368(%rsp),%rcx
  21a544:	00 
  21a545:	48 8d bc 24 38 03 00 	lea    0x338(%rsp),%rdi
  21a54c:	00 
  21a54d:	48 8d 35 04 0e 02 00 	lea    0x20e04(%rip),%rsi        # 23b358 <memcmp+0x2618>
  21a554:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21a55a:	4c 89 c2             	mov    %r8,%rdx
  21a55d:	e8 ce bf fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a562:	48 8b b4 24 20 03 00 	mov    0x320(%rsp),%rsi
  21a569:	00 
  21a56a:	48 8d bc 24 38 03 00 	lea    0x338(%rsp),%rdi
  21a571:	00 
  21a572:	48 8d 15 ef 0d 02 00 	lea    0x20def(%rip),%rdx        # 23b368 <memcmp+0x2628>
  21a579:	e8 02 88 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a57e:	e9 c3 fd ff ff       	jmpq   21a346 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x716>
            if let Some(fb_slice) = BootProtocol::get_framebuffer_slice() {
  21a583:	b8 01 00 00 00       	mov    $0x1,%eax
  21a588:	31 c9                	xor    %ecx,%ecx
  21a58a:	48 83 bc 24 c8 03 00 	cmpq   $0x0,0x3c8(%rsp)
  21a591:	00 00 
  21a593:	48 0f 44 c1          	cmove  %rcx,%rax
  21a597:	48 83 f8 01          	cmp    $0x1,%rax
  21a59b:	75 46                	jne    21a5e3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
  21a59d:	48 8b 8c 24 c8 03 00 	mov    0x3c8(%rsp),%rcx
  21a5a4:	00 
  21a5a5:	48 8b 84 24 d0 03 00 	mov    0x3d0(%rsp),%rax
  21a5ac:	00 
  21a5ad:	48 89 8c 24 d8 03 00 	mov    %rcx,0x3d8(%rsp)
  21a5b4:	00 
  21a5b5:	48 89 84 24 e0 03 00 	mov    %rax,0x3e0(%rsp)
  21a5bc:	00 
                log::info!("Framebuffer address: {:p}", fb_slice);
  21a5bd:	48 c7 84 24 e8 03 00 	movq   $0x3,0x3e8(%rsp)
  21a5c4:	00 03 00 00 00 
  21a5c9:	48 8d bc 24 e8 03 00 	lea    0x3e8(%rsp),%rdi
  21a5d0:	00 
  21a5d1:	48 8d 35 20 5d fe ff 	lea    -0x1a2e0(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21a5d8:	e8 f3 89 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a5dd:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  21a5e1:	eb 12                	jmp    21a5f5 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9c5>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  21a5e3:	48 8d bc 24 48 04 00 	lea    0x448(%rsp),%rdi
  21a5ea:	00 
  21a5eb:	e8 80 f4 ff ff       	callq  219a70 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>
  21a5f0:	e9 12 01 00 00       	jmpq   21a707 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xad7>
  21a5f5:	8a 44 24 7f          	mov    0x7f(%rsp),%al
                log::info!("Framebuffer address: {:p}", fb_slice);
  21a5f9:	a8 01                	test   $0x1,%al
  21a5fb:	75 0c                	jne    21a609 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9d9>
  21a5fd:	eb 00                	jmp    21a5ff <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9cf>
  21a5ff:	c6 84 24 f7 03 00 00 	movb   $0x0,0x3f7(%rsp)
  21a606:	00 
  21a607:	eb 5a                	jmp    21a663 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xa33>
  21a609:	c6 84 24 3f 06 00 00 	movb   $0x0,0x63f(%rsp)
  21a610:	00 
  21a611:	48 8b 3d 30 35 02 00 	mov    0x23530(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a618:	0f b6 b4 24 3f 06 00 	movzbl 0x63f(%rsp),%esi
  21a61f:	00 
  21a620:	e8 cb 0b 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a625:	48 89 84 24 40 06 00 	mov    %rax,0x640(%rsp)
  21a62c:	00 
  21a62d:	48 8b 84 24 40 06 00 	mov    0x640(%rsp),%rax
  21a634:	00 
  21a635:	48 89 84 24 f8 03 00 	mov    %rax,0x3f8(%rsp)
  21a63c:	00 
  21a63d:	48 8d bc 24 e8 03 00 	lea    0x3e8(%rsp),%rdi
  21a644:	00 
  21a645:	48 8d b4 24 f8 03 00 	lea    0x3f8(%rsp),%rsi
  21a64c:	00 
  21a64d:	e8 7e 89 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a652:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  21a656:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  21a65a:	24 01                	and    $0x1,%al
  21a65c:	88 84 24 f7 03 00 00 	mov    %al,0x3f7(%rsp)
  21a663:	f6 84 24 f7 03 00 00 	testb  $0x1,0x3f7(%rsp)
  21a66a:	01 
  21a66b:	0f 84 72 ff ff ff    	je     21a5e3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
  21a671:	48 8d 84 24 d8 03 00 	lea    0x3d8(%rsp),%rax
  21a678:	00 
  21a679:	48 89 84 24 40 04 00 	mov    %rax,0x440(%rsp)
  21a680:	00 
  21a681:	48 8b bc 24 40 04 00 	mov    0x440(%rsp),%rdi
  21a688:	00 
  21a689:	48 89 bc 24 f0 05 00 	mov    %rdi,0x5f0(%rsp)
  21a690:	00 
  21a691:	48 8d 35 f8 51 ff ff 	lea    -0xae08(%rip),%rsi        # 20f890 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h358b726a10840d4fE>
  21a698:	e8 43 49 ff ff       	callq  20efe0 <_ZN4core3fmt10ArgumentV13new17h3b537045eb59a5d6E>
  21a69d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21a6a2:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21a6a7:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21a6ac:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  21a6b1:	48 89 8c 24 30 04 00 	mov    %rcx,0x430(%rsp)
  21a6b8:	00 
  21a6b9:	48 89 84 24 38 04 00 	mov    %rax,0x438(%rsp)
  21a6c0:	00 
  21a6c1:	48 8d 8c 24 30 04 00 	lea    0x430(%rsp),%rcx
  21a6c8:	00 
  21a6c9:	48 8d bc 24 00 04 00 	lea    0x400(%rsp),%rdi
  21a6d0:	00 
  21a6d1:	48 8d 35 c8 0c 02 00 	lea    0x20cc8(%rip),%rsi        # 23b3a0 <memcmp+0x2660>
  21a6d8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21a6de:	4c 89 c2             	mov    %r8,%rdx
  21a6e1:	e8 4a be fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a6e6:	48 8b b4 24 e8 03 00 	mov    0x3e8(%rsp),%rsi
  21a6ed:	00 
  21a6ee:	48 8d bc 24 00 04 00 	lea    0x400(%rsp),%rdi
  21a6f5:	00 
  21a6f6:	48 8d 15 b3 0c 02 00 	lea    0x20cb3(%rip),%rdx        # 23b3b0 <memcmp+0x2670>
  21a6fd:	e8 7e 86 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a702:	e9 dc fe ff ff       	jmpq   21a5e3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  21a707:	8b 94 24 60 04 00 00 	mov    0x460(%rsp),%edx
  21a70e:	83 ea 03             	sub    $0x3,%edx
  21a711:	b8 01 00 00 00       	mov    $0x1,%eax
  21a716:	31 c9                	xor    %ecx,%ecx
  21a718:	83 fa 00             	cmp    $0x0,%edx
  21a71b:	48 0f 44 c1          	cmove  %rcx,%rax
  21a71f:	48 83 f8 01          	cmp    $0x1,%rax
  21a723:	75 43                	jne    21a768 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb38>
  21a725:	48 8d b4 24 48 04 00 	lea    0x448(%rsp),%rsi
  21a72c:	00 
  21a72d:	48 8d bc 24 78 04 00 	lea    0x478(%rsp),%rdi
  21a734:	00 
  21a735:	ba 30 00 00 00       	mov    $0x30,%edx
  21a73a:	e8 b1 e5 01 00       	callq  238cf0 <memcpy>
                log::debug!(
  21a73f:	48 c7 84 24 a8 04 00 	movq   $0x4,0x4a8(%rsp)
  21a746:	00 04 00 00 00 
  21a74b:	48 8d bc 24 a8 04 00 	lea    0x4a8(%rsp),%rdi
  21a752:	00 
  21a753:	48 8d 35 9e 5b fe ff 	lea    -0x1a462(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21a75a:	e8 71 88 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a75f:	88 44 24 67          	mov    %al,0x67(%rsp)
  21a763:	e9 e6 00 00 00       	jmpq   21a84e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc1e>
                log::warn!("Boot info doesn't contain framebuffer information.");
  21a768:	48 c7 84 24 50 05 00 	movq   $0x2,0x550(%rsp)
  21a76f:	00 02 00 00 00 
  21a774:	48 8d bc 24 50 05 00 	lea    0x550(%rsp),%rdi
  21a77b:	00 
  21a77c:	48 8d 35 75 5b fe ff 	lea    -0x1a48b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21a783:	e8 48 88 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a788:	88 44 24 66          	mov    %al,0x66(%rsp)
  21a78c:	8a 44 24 66          	mov    0x66(%rsp),%al
  21a790:	a8 01                	test   $0x1,%al
  21a792:	75 0c                	jne    21a7a0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb70>
  21a794:	eb 00                	jmp    21a796 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb66>
  21a796:	c6 84 24 5f 05 00 00 	movb   $0x0,0x55f(%rsp)
  21a79d:	00 
  21a79e:	eb 5a                	jmp    21a7fa <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xbca>
  21a7a0:	c6 84 24 2f 06 00 00 	movb   $0x0,0x62f(%rsp)
  21a7a7:	00 
  21a7a8:	48 8b 3d 99 33 02 00 	mov    0x23399(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a7af:	0f b6 b4 24 2f 06 00 	movzbl 0x62f(%rsp),%esi
  21a7b6:	00 
  21a7b7:	e8 34 0a 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a7bc:	48 89 84 24 30 06 00 	mov    %rax,0x630(%rsp)
  21a7c3:	00 
  21a7c4:	48 8b 84 24 30 06 00 	mov    0x630(%rsp),%rax
  21a7cb:	00 
  21a7cc:	48 89 84 24 60 05 00 	mov    %rax,0x560(%rsp)
  21a7d3:	00 
  21a7d4:	48 8d bc 24 50 05 00 	lea    0x550(%rsp),%rdi
  21a7db:	00 
  21a7dc:	48 8d b4 24 60 05 00 	lea    0x560(%rsp),%rsi
  21a7e3:	00 
  21a7e4:	e8 e7 87 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a7e9:	88 44 24 65          	mov    %al,0x65(%rsp)
  21a7ed:	8a 44 24 65          	mov    0x65(%rsp),%al
  21a7f1:	24 01                	and    $0x1,%al
  21a7f3:	88 84 24 5f 05 00 00 	mov    %al,0x55f(%rsp)
  21a7fa:	f6 84 24 5f 05 00 00 	testb  $0x1,0x55f(%rsp)
  21a801:	01 
  21a802:	0f 84 97 f4 ff ff    	je     219c9f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  21a808:	48 8d bc 24 68 05 00 	lea    0x568(%rsp),%rdi
  21a80f:	00 
  21a810:	48 8d 35 d1 0b 02 00 	lea    0x20bd1(%rip),%rsi        # 23b3e8 <memcmp+0x26a8>
  21a817:	ba 01 00 00 00       	mov    $0x1,%edx
  21a81c:	48 8d 0d 35 6b fe ff 	lea    -0x194cb(%rip),%rcx        # 201358 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE+0x8f>
  21a823:	31 c0                	xor    %eax,%eax
  21a825:	41 89 c0             	mov    %eax,%r8d
  21a828:	e8 03 bd fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a82d:	48 8b b4 24 50 05 00 	mov    0x550(%rsp),%rsi
  21a834:	00 
  21a835:	48 8d bc 24 68 05 00 	lea    0x568(%rsp),%rdi
  21a83c:	00 
  21a83d:	48 8d 15 b4 0b 02 00 	lea    0x20bb4(%rip),%rdx        # 23b3f8 <memcmp+0x26b8>
  21a844:	e8 37 85 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a849:	e9 51 f4 ff ff       	jmpq   219c9f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  21a84e:	8a 44 24 67          	mov    0x67(%rsp),%al
                log::debug!(
  21a852:	a8 01                	test   $0x1,%al
  21a854:	75 0c                	jne    21a862 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc32>
  21a856:	eb 00                	jmp    21a858 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc28>
  21a858:	c6 84 24 b7 04 00 00 	movb   $0x0,0x4b7(%rsp)
  21a85f:	00 
  21a860:	eb 5a                	jmp    21a8bc <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc8c>
  21a862:	c6 84 24 1f 06 00 00 	movb   $0x0,0x61f(%rsp)
  21a869:	00 
  21a86a:	48 8b 3d d7 32 02 00 	mov    0x232d7(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a871:	0f b6 b4 24 1f 06 00 	movzbl 0x61f(%rsp),%esi
  21a878:	00 
  21a879:	e8 72 09 01 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a87e:	48 89 84 24 20 06 00 	mov    %rax,0x620(%rsp)
  21a885:	00 
  21a886:	48 8b 84 24 20 06 00 	mov    0x620(%rsp),%rax
  21a88d:	00 
  21a88e:	48 89 84 24 b8 04 00 	mov    %rax,0x4b8(%rsp)
  21a895:	00 
  21a896:	48 8d bc 24 a8 04 00 	lea    0x4a8(%rsp),%rdi
  21a89d:	00 
  21a89e:	48 8d b4 24 b8 04 00 	lea    0x4b8(%rsp),%rsi
  21a8a5:	00 
  21a8a6:	e8 25 87 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a8ab:	88 44 24 64          	mov    %al,0x64(%rsp)
  21a8af:	8a 44 24 64          	mov    0x64(%rsp),%al
  21a8b3:	24 01                	and    $0x1,%al
  21a8b5:	88 84 24 b7 04 00 00 	mov    %al,0x4b7(%rsp)
  21a8bc:	f6 84 24 b7 04 00 00 	testb  $0x1,0x4b7(%rsp)
  21a8c3:	01 
  21a8c4:	0f 84 d5 f3 ff ff    	je     219c9f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
                    fb_info.horizontal_resolution,
  21a8ca:	48 8d b4 24 78 04 00 	lea    0x478(%rsp),%rsi
  21a8d1:	00 
  21a8d2:	48 83 c6 08          	add    $0x8,%rsi
                    fb_info.vertical_resolution,
  21a8d6:	48 8d 94 24 78 04 00 	lea    0x478(%rsp),%rdx
  21a8dd:	00 
  21a8de:	48 83 c2 10          	add    $0x10,%rdx
                    fb_info.bytes_per_pixel,
  21a8e2:	48 8d 8c 24 78 04 00 	lea    0x478(%rsp),%rcx
  21a8e9:	00 
  21a8ea:	48 83 c1 20          	add    $0x20,%rcx
                    fb_info.pixel_format
  21a8ee:	48 8d 84 24 78 04 00 	lea    0x478(%rsp),%rax
  21a8f5:	00 
  21a8f6:	48 83 c0 18          	add    $0x18,%rax
                log::debug!(
  21a8fa:	48 89 b4 24 30 05 00 	mov    %rsi,0x530(%rsp)
  21a901:	00 
  21a902:	48 89 94 24 38 05 00 	mov    %rdx,0x538(%rsp)
  21a909:	00 
  21a90a:	48 89 8c 24 40 05 00 	mov    %rcx,0x540(%rsp)
  21a911:	00 
  21a912:	48 89 84 24 48 05 00 	mov    %rax,0x548(%rsp)
  21a919:	00 
  21a91a:	48 8b bc 24 30 05 00 	mov    0x530(%rsp),%rdi
  21a921:	00 
  21a922:	48 89 bc 24 f8 05 00 	mov    %rdi,0x5f8(%rsp)
  21a929:	00 
  21a92a:	48 8b 84 24 38 05 00 	mov    0x538(%rsp),%rax
  21a931:	00 
  21a932:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21a937:	48 89 84 24 00 06 00 	mov    %rax,0x600(%rsp)
  21a93e:	00 
  21a93f:	48 8b 84 24 40 05 00 	mov    0x540(%rsp),%rax
  21a946:	00 
  21a947:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21a94c:	48 89 84 24 08 06 00 	mov    %rax,0x608(%rsp)
  21a953:	00 
  21a954:	48 8b 84 24 48 05 00 	mov    0x548(%rsp),%rax
  21a95b:	00 
  21a95c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21a961:	48 89 84 24 10 06 00 	mov    %rax,0x610(%rsp)
  21a968:	00 
  21a969:	48 8b 35 f0 31 02 00 	mov    0x231f0(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21a970:	e8 0b 4c ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21a975:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21a97a:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21a97f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21a984:	48 8b 35 d5 31 02 00 	mov    0x231d5(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21a98b:	e8 f0 4b ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21a990:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21a995:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21a99a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21a99f:	48 8b 35 ba 31 02 00 	mov    0x231ba(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21a9a6:	e8 d5 4b ff ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21a9ab:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21a9b0:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21a9b5:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21a9ba:	48 8b 35 cf 31 02 00 	mov    0x231cf(%rip),%rsi        # 23db90 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  21a9c1:	e8 5a 4b ff ff       	callq  20f520 <_ZN4core3fmt10ArgumentV13new17haa5e6f547645fb6cE>
  21a9c6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a9cb:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21a9d0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a9d5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21a9da:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21a9df:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21a9e4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21a9e9:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  21a9ee:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
  21a9f3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
  21a9f8:	4c 89 94 24 f0 04 00 	mov    %r10,0x4f0(%rsp)
  21a9ff:	00 
  21aa00:	4c 89 8c 24 f8 04 00 	mov    %r9,0x4f8(%rsp)
  21aa07:	00 
  21aa08:	4c 89 84 24 00 05 00 	mov    %r8,0x500(%rsp)
  21aa0f:	00 
  21aa10:	48 89 bc 24 08 05 00 	mov    %rdi,0x508(%rsp)
  21aa17:	00 
  21aa18:	48 89 b4 24 10 05 00 	mov    %rsi,0x510(%rsp)
  21aa1f:	00 
  21aa20:	48 89 94 24 18 05 00 	mov    %rdx,0x518(%rsp)
  21aa27:	00 
  21aa28:	48 89 8c 24 20 05 00 	mov    %rcx,0x520(%rsp)
  21aa2f:	00 
  21aa30:	48 89 84 24 28 05 00 	mov    %rax,0x528(%rsp)
  21aa37:	00 
  21aa38:	48 8d 8c 24 f0 04 00 	lea    0x4f0(%rsp),%rcx
  21aa3f:	00 
  21aa40:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  21aa47:	00 
  21aa48:	48 8d 35 e1 09 02 00 	lea    0x209e1(%rip),%rsi        # 23b430 <memcmp+0x26f0>
  21aa4f:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  21aa55:	4c 89 c2             	mov    %r8,%rdx
  21aa58:	e8 d3 ba fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21aa5d:	48 8b b4 24 a8 04 00 	mov    0x4a8(%rsp),%rsi
  21aa64:	00 
  21aa65:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  21aa6c:	00 
  21aa6d:	48 8d 15 fc 09 02 00 	lea    0x209fc(%rip),%rdx        # 23b470 <memcmp+0x2730>
  21aa74:	e8 07 83 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21aa79:	e9 21 f2 ff ff       	jmpq   219c9f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  21aa7e:	cc                   	int3   
  21aa7f:	cc                   	int3   

000000000021aa80 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>:
            fn deref(&self) -> &$T {
  21aa80:	48 83 ec 18          	sub    $0x18,%rsp
  21aa84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21aa89:	48 8d 05 f8 4b 02 00 	lea    0x24bf8(%rip),%rax        # 23f688 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8b2ef1907b796913E>
  21aa90:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21aa95:	48 8d 3d ec 4b 02 00 	lea    0x24bec(%rip),%rdi        # 23f688 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8b2ef1907b796913E>
  21aa9c:	e8 1f e0 fe ff       	callq  208ac0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E>
  21aaa1:	48 89 04 24          	mov    %rax,(%rsp)
  21aaa5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21aaa9:	48 83 c4 18          	add    $0x18,%rsp
  21aaad:	c3                   	retq   
  21aaae:	cc                   	int3   
  21aaaf:	cc                   	int3   

000000000021aab0 <_ZN4core4iter6traits8iterator8Iterator3map17h249dee666523cc13E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  21aab0:	48 83 ec 28          	sub    $0x28,%rsp
  21aab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21aab9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map::new(self, f)
  21aabe:	e8 9d 75 ff ff       	callq  212060 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h6cb0038798678fbaE>
  21aac3:	48 89 04 24          	mov    %rax,(%rsp)
  21aac7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21aacc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21aad1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21aad5:	48 83 c4 28          	add    $0x28,%rsp
  21aad9:	c3                   	retq   
  21aada:	cc                   	int3   
  21aadb:	cc                   	int3   
  21aadc:	cc                   	int3   
  21aadd:	cc                   	int3   
  21aade:	cc                   	int3   
  21aadf:	cc                   	int3   

000000000021aae0 <_ZN4core4iter6traits8iterator8Iterator3map17hbd9539eb03a80085E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  21aae0:	48 83 ec 28          	sub    $0x28,%rsp
  21aae4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21aae9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map::new(self, f)
  21aaee:	e8 3d 75 ff ff       	callq  212030 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h12ca5be8f998c4eaE>
  21aaf3:	48 89 04 24          	mov    %rax,(%rsp)
  21aaf7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21aafc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21ab01:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21ab05:	48 83 c4 28          	add    $0x28,%rsp
  21ab09:	c3                   	retq   
  21ab0a:	cc                   	int3   
  21ab0b:	cc                   	int3   
  21ab0c:	cc                   	int3   
  21ab0d:	cc                   	int3   
  21ab0e:	cc                   	int3   
  21ab0f:	cc                   	int3   

000000000021ab10 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE>:
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
  21ab10:	48 83 ec 58          	sub    $0x58,%rsp
  21ab14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21ab19:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21ab1e:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
        let mut accum = init;
  21ab23:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        while let Some(x) = self.next() {
  21ab28:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21ab2d:	e8 8e 05 00 00       	callq  21b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  21ab32:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ab37:	b8 01 00 00 00       	mov    $0x1,%eax
  21ab3c:	31 c9                	xor    %ecx,%ecx
  21ab3e:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  21ab44:	48 0f 44 c1          	cmove  %rcx,%rax
  21ab48:	48 83 f8 01          	cmp    $0x1,%rax
  21ab4c:	75 34                	jne    21ab82 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x72>
  21ab4e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21ab53:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            accum = f(accum, x);
  21ab58:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21ab5d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21ab62:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21ab67:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21ab6c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21ab71:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21ab76:	e8 a5 75 ff ff       	callq  212120 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17hce0c6cf362607ce0E>
  21ab7b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ab80:	eb 10                	jmp    21ab92 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x82>
        while let Some(x) = self.next() {
  21ab82:	eb 00                	jmp    21ab84 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x74>
    }
  21ab84:	eb 00                	jmp    21ab86 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x76>
  21ab86:	eb 00                	jmp    21ab88 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x78>
  21ab88:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ab8d:	48 83 c4 58          	add    $0x58,%rsp
  21ab91:	c3                   	retq   
  21ab92:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            accum = f(accum, x);
  21ab97:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        while let Some(x) = self.next() {
  21ab9c:	eb 8a                	jmp    21ab28 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x18>
  21ab9e:	cc                   	int3   
  21ab9f:	cc                   	int3   

000000000021aba0 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE>:
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
  21aba0:	48 83 ec 58          	sub    $0x58,%rsp
  21aba4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21aba9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21abae:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
        let mut accum = init;
  21abb3:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        while let Some(x) = self.next() {
  21abb8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21abbd:	e8 fe 04 00 00       	callq  21b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  21abc2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21abc7:	b8 01 00 00 00       	mov    $0x1,%eax
  21abcc:	31 c9                	xor    %ecx,%ecx
  21abce:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  21abd4:	48 0f 44 c1          	cmove  %rcx,%rax
  21abd8:	48 83 f8 01          	cmp    $0x1,%rax
  21abdc:	75 34                	jne    21ac12 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x72>
  21abde:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21abe3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            accum = f(accum, x);
  21abe8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21abed:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21abf2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21abf7:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21abfc:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21ac01:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21ac06:	e8 a5 74 ff ff       	callq  2120b0 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h062e9aab7d422d50E>
  21ac0b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ac10:	eb 10                	jmp    21ac22 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x82>
        while let Some(x) = self.next() {
  21ac12:	eb 00                	jmp    21ac14 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x74>
    }
  21ac14:	eb 00                	jmp    21ac16 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x76>
  21ac16:	eb 00                	jmp    21ac18 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x78>
  21ac18:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ac1d:	48 83 c4 58          	add    $0x58,%rsp
  21ac21:	c3                   	retq   
  21ac22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            accum = f(accum, x);
  21ac27:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        while let Some(x) = self.next() {
  21ac2c:	eb 8a                	jmp    21abb8 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x18>
  21ac2e:	cc                   	int3   
  21ac2f:	cc                   	int3   

000000000021ac30 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
  21ac30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21ac37:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21ac3c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21ac41:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  21ac46:	e8 e5 72 ff ff       	callq  211f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h17e65275eff91432E>
  21ac4b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21ac50:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21ac55:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
  21ac5a:	e8 71 72 ff ff       	callq  211ed0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>

            let end = if mem::size_of::<T>() == 0 {
  21ac5f:	eb 00                	jmp    21ac61 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0x31>
  21ac61:	b8 06 00 00 00       	mov    $0x6,%eax
  21ac66:	48 83 f8 00          	cmp    $0x0,%rax
  21ac6a:	75 32                	jne    21ac9e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0x6e>
  21ac6c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21ac71:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21ac76:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21ac7b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21ac80:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21ac85:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) }
  21ac8a:	48 01 c8             	add    %rcx,%rax
  21ac8d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21ac92:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21ac97:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21ac9c:	eb 59                	jmp    21acf7 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xc7>
  21ac9e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21aca3:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21aca8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21acaf:	00 
  21acb0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21acb7:	00 
  21acb8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21acbf:	00 
  21acc0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  21acc7:	00 
        unsafe { intrinsics::offset(self, count) }
  21acc8:	48 6b c9 06          	imul   $0x6,%rcx,%rcx
  21accc:	48 01 c8             	add    %rcx,%rax
  21accf:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21acd6:	00 
  21acd7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21acde:	00 
            } else {
                ptr.add(slice.len())
  21acdf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21ace4:	eb 00                	jmp    21ace6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xb6>
  21ace6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  21aceb:	e8 e0 f7 00 00       	callq  22a4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  21acf0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21acf5:	eb 0c                	jmp    21ad03 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xd3>
  21acf7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21acfc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21ad01:	eb e3                	jmp    21ace6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xb6>
  21ad03:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  21ad08:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21ad0d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21ad12:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  21ad17:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ad1c:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21ad21:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21ad28:	c3                   	retq   
  21ad29:	cc                   	int3   
  21ad2a:	cc                   	int3   
  21ad2b:	cc                   	int3   
  21ad2c:	cc                   	int3   
  21ad2d:	cc                   	int3   
  21ad2e:	cc                   	int3   
  21ad2f:	cc                   	int3   

000000000021ad30 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
  21ad30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21ad37:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21ad3c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21ad41:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  21ad46:	e8 d5 07 00 00       	callq  21b520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he76bc40226449d5aE>
  21ad4b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21ad50:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21ad55:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            assume(!ptr.is_null());
  21ad5a:	e8 61 07 00 00       	callq  21b4c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>
            let end = if mem::size_of::<T>() == 0 {
  21ad5f:	eb 00                	jmp    21ad61 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0x31>
  21ad61:	b8 18 00 00 00       	mov    $0x18,%eax
  21ad66:	48 83 f8 00          	cmp    $0x0,%rax
  21ad6a:	75 32                	jne    21ad9e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0x6e>
  21ad6c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21ad71:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21ad76:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21ad7b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21ad80:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21ad85:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        unsafe { intrinsics::arith_offset(self, count) }
  21ad8a:	48 01 c8             	add    %rcx,%rax
  21ad8d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21ad92:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21ad97:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21ad9c:	eb 59                	jmp    21adf7 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xc7>
  21ad9e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21ada3:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21ada8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21adaf:	00 
  21adb0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21adb7:	00 
  21adb8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21adbf:	00 
  21adc0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  21adc7:	00 
        unsafe { intrinsics::offset(self, count) }
  21adc8:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  21adcc:	48 01 c8             	add    %rcx,%rax
  21adcf:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21add6:	00 
  21add7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21adde:	00 
                ptr.add(slice.len())
  21addf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21ade4:	eb 00                	jmp    21ade6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xb6>
  21ade6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  21adeb:	e8 90 f6 00 00       	callq  22a480 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>
  21adf0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21adf5:	eb 0c                	jmp    21ae03 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xd3>
  21adf7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21adfc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21ae01:	eb e3                	jmp    21ade6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xb6>
  21ae03:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  21ae08:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21ae0d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21ae12:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  21ae17:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ae1c:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21ae21:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21ae28:	c3                   	retq   
  21ae29:	cc                   	int3   
  21ae2a:	cc                   	int3   
  21ae2b:	cc                   	int3   
  21ae2c:	cc                   	int3   
  21ae2d:	cc                   	int3   
  21ae2e:	cc                   	int3   
  21ae2f:	cc                   	int3   

000000000021ae30 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
  21ae30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21ae37:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21ae3c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21ae41:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_mut_ptr();
  21ae46:	e8 35 9b ff ff       	callq  214980 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h77ff0a5df0613473E>
  21ae4b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21ae50:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21ae55:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // the length, to also allows for the fast `ptr == end` check.
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more informations.
        unsafe {
            assume(!ptr.is_null());
  21ae5a:	e8 f1 9a ff ff       	callq  214950 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>

            let end = if mem::size_of::<T>() == 0 {
  21ae5f:	eb 00                	jmp    21ae61 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0x31>
  21ae61:	b8 08 00 00 00       	mov    $0x8,%eax
  21ae66:	48 83 f8 00          	cmp    $0x0,%rax
  21ae6a:	75 32                	jne    21ae9e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0x6e>
  21ae6c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21ae71:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21ae76:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21ae7b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21ae80:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21ae85:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *mut T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
  21ae8a:	48 01 c8             	add    %rcx,%rax
  21ae8d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21ae92:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21ae97:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
  21ae9c:	eb 59                	jmp    21aef7 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xc7>
  21ae9e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21aea3:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21aea8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21aeaf:	00 
  21aeb0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21aeb7:	00 
  21aeb8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21aebf:	00 
  21aec0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  21aec7:	00 
        unsafe { intrinsics::offset(self, count) as *mut T }
  21aec8:	48 c1 e1 03          	shl    $0x3,%rcx
  21aecc:	48 01 c8             	add    %rcx,%rax
  21aecf:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21aed6:	00 
  21aed7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21aede:	00 
            } else {
                ptr.add(slice.len())
  21aedf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21aee4:	eb 00                	jmp    21aee6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xb6>
  21aee6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
  21aeeb:	e8 00 f6 00 00       	callq  22a4f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>
  21aef0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21aef5:	eb 0c                	jmp    21af03 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xd3>
  21aef7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
  21aefc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  21af01:	eb e3                	jmp    21aee6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xb6>
  21af03:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
  21af08:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21af0d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21af12:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  21af17:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21af1c:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21af21:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21af28:	c3                   	retq   
  21af29:	cc                   	int3   
  21af2a:	cc                   	int3   
  21af2b:	cc                   	int3   
  21af2c:	cc                   	int3   
  21af2d:	cc                   	int3   
  21af2e:	cc                   	int3   
  21af2f:	cc                   	int3   

000000000021af30 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h67d170e4f81cc63cE>:
    fn into_iter(self) -> Iter<'a, T> {
  21af30:	48 83 ec 28          	sub    $0x28,%rsp
  21af34:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21af39:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.iter()
  21af3e:	e8 9d 84 01 00       	callq  2333e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  21af43:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21af48:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21af4d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21af52:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21af57:	48 83 c4 28          	add    $0x28,%rsp
  21af5b:	c3                   	retq   
  21af5c:	cc                   	int3   
  21af5d:	cc                   	int3   
  21af5e:	cc                   	int3   
  21af5f:	cc                   	int3   

000000000021af60 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h39afff3affafd620E>:
    fn into_iter(self) -> I {
  21af60:	48 83 ec 10          	sub    $0x10,%rsp
  21af64:	48 89 f2             	mov    %rsi,%rdx
  21af67:	48 89 f8             	mov    %rdi,%rax
  21af6a:	48 89 04 24          	mov    %rax,(%rsp)
  21af6e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21af73:	48 83 c4 10          	add    $0x10,%rsp
  21af77:	c3                   	retq   
  21af78:	cc                   	int3   
  21af79:	cc                   	int3   
  21af7a:	cc                   	int3   
  21af7b:	cc                   	int3   
  21af7c:	cc                   	int3   
  21af7d:	cc                   	int3   
  21af7e:	cc                   	int3   
  21af7f:	cc                   	int3   

000000000021af80 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h47923d31c017090eE>:
    fn into_iter(self) -> I {
  21af80:	48 83 ec 10          	sub    $0x10,%rsp
  21af84:	48 89 f2             	mov    %rsi,%rdx
  21af87:	48 89 f8             	mov    %rdi,%rax
  21af8a:	48 89 04 24          	mov    %rax,(%rsp)
  21af8e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21af93:	48 83 c4 10          	add    $0x10,%rsp
  21af97:	c3                   	retq   
  21af98:	cc                   	int3   
  21af99:	cc                   	int3   
  21af9a:	cc                   	int3   
  21af9b:	cc                   	int3   
  21af9c:	cc                   	int3   
  21af9d:	cc                   	int3   
  21af9e:	cc                   	int3   
  21af9f:	cc                   	int3   

000000000021afa0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h878ea9e8fd23aa8cE>:
    fn into_iter(self) -> I {
  21afa0:	48 83 ec 10          	sub    $0x10,%rsp
  21afa4:	48 89 f2             	mov    %rsi,%rdx
  21afa7:	48 89 f8             	mov    %rdi,%rax
  21afaa:	48 89 04 24          	mov    %rax,(%rsp)
  21afae:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21afb3:	48 83 c4 10          	add    $0x10,%rsp
  21afb7:	c3                   	retq   
  21afb8:	cc                   	int3   
  21afb9:	cc                   	int3   
  21afba:	cc                   	int3   
  21afbb:	cc                   	int3   
  21afbc:	cc                   	int3   
  21afbd:	cc                   	int3   
  21afbe:	cc                   	int3   
  21afbf:	cc                   	int3   

000000000021afc0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
  21afc0:	48 83 ec 78          	sub    $0x78,%rsp
  21afc4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21afc9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                // SAFETY: `assume` calls are safe since a slice's start pointer
                // must be non-null, and slices over non-ZSTs must also have a
                // non-null end pointer. The call to `next_unchecked!` is safe
                // since we check if the iterator is empty first.
                unsafe {
                    assume(!self.ptr.as_ptr().is_null());
  21afce:	48 8b 3f             	mov    (%rdi),%rdi
  21afd1:	e8 7a f6 00 00       	callq  22a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  21afd6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21afdb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21afe0:	e8 ab 6e ff ff       	callq  211e90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
                    if mem::size_of::<T>() != 0 {
  21afe5:	eb 00                	jmp    21afe7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x27>
  21afe7:	b8 06 00 00 00       	mov    $0x6,%eax
  21afec:	48 83 f8 00          	cmp    $0x0,%rax
  21aff0:	75 02                	jne    21aff4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x34>
  21aff2:	eb 10                	jmp    21b004 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x44>
  21aff4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  21aff9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  21affd:	e8 ce 6e ff ff       	callq  211ed0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>
                    if mem::size_of::<T>() != 0 {
  21b002:	eb 00                	jmp    21b004 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x44>
  21b004:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    }
                    if is_empty!(self) {
  21b009:	48 8b 38             	mov    (%rax),%rdi
  21b00c:	e8 3f f6 00 00       	callq  22a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  21b011:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b016:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b01b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b020:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  21b024:	74 77                	je     21b09d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xdd>
  21b026:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b02b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b030:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  21b037:	00 00 
                    let old = self.ptr.as_ptr();
  21b039:	48 8b 38             	mov    (%rax),%rdi
  21b03c:	e8 0f f6 00 00       	callq  22a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  21b041:	48 89 c1             	mov    %rax,%rcx
  21b044:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b049:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21b04e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  21b053:	48 8b 38             	mov    (%rax),%rdi
  21b056:	e8 f5 f5 00 00       	callq  22a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  21b05b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b060:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  21b067:	00 00 
  21b069:	48 83 c0 06          	add    $0x6,%rax
  21b06d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b072:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21b077:	e8 54 f4 00 00       	callq  22a4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  21b07c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b081:	48 89 c2             	mov    %rax,%rdx
  21b084:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b089:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21b08c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  21b091:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21b096:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        None
                    } else {
                        Some(next_unchecked!(self))
  21b09b:	eb 13                	jmp    21b0b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xf0>
                        None
  21b09d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21b0a4:	00 00 
                    }
                }
            }
  21b0a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21b0ab:	48 83 c4 78          	add    $0x78,%rsp
  21b0af:	c3                   	retq   
  21b0b0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  21b0b5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21b0ba:	eb ea                	jmp    21b0a6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xe6>
  21b0bc:	cc                   	int3   
  21b0bd:	cc                   	int3   
  21b0be:	cc                   	int3   
  21b0bf:	cc                   	int3   

000000000021b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>:
            fn next(&mut self) -> Option<$elem> {
  21b0c0:	48 83 ec 78          	sub    $0x78,%rsp
  21b0c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21b0c9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  21b0ce:	48 8b 3f             	mov    (%rdi),%rdi
  21b0d1:	e8 7a 83 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21b0d6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21b0db:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21b0e0:	e8 6b 6a 01 00       	callq  231b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
                    if mem::size_of::<T>() != 0 {
  21b0e5:	eb 00                	jmp    21b0e7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x27>
  21b0e7:	b8 01 00 00 00       	mov    $0x1,%eax
  21b0ec:	48 83 f8 00          	cmp    $0x0,%rax
  21b0f0:	75 02                	jne    21b0f4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x34>
  21b0f2:	eb 10                	jmp    21b104 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x44>
  21b0f4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  21b0f9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  21b0fd:	e8 fe 8e 01 00       	callq  234000 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
                    if mem::size_of::<T>() != 0 {
  21b102:	eb 00                	jmp    21b104 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x44>
  21b104:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  21b109:	48 8b 38             	mov    (%rax),%rdi
  21b10c:	e8 3f 83 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21b111:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b116:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b11b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b120:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  21b124:	74 77                	je     21b19d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xdd>
  21b126:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b12b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b130:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  21b137:	00 00 
                    let old = self.ptr.as_ptr();
  21b139:	48 8b 38             	mov    (%rax),%rdi
  21b13c:	e8 0f 83 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21b141:	48 89 c1             	mov    %rax,%rcx
  21b144:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b149:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21b14e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  21b153:	48 8b 38             	mov    (%rax),%rdi
  21b156:	e8 f5 82 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21b15b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b160:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  21b167:	00 00 
  21b169:	48 83 c0 01          	add    $0x1,%rax
  21b16d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b172:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21b177:	e8 b4 82 01 00       	callq  233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  21b17c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b181:	48 89 c2             	mov    %rax,%rdx
  21b184:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b189:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21b18c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  21b191:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21b196:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21b19b:	eb 13                	jmp    21b1b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xf0>
                        None
  21b19d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21b1a4:	00 00 
            }
  21b1a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21b1ab:	48 83 c4 78          	add    $0x78,%rsp
  21b1af:	c3                   	retq   
  21b1b0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  21b1b5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21b1ba:	eb ea                	jmp    21b1a6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xe6>
  21b1bc:	cc                   	int3   
  21b1bd:	cc                   	int3   
  21b1be:	cc                   	int3   
  21b1bf:	cc                   	int3   

000000000021b1c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E>:
            fn next(&mut self) -> Option<$elem> {
  21b1c0:	48 83 ec 78          	sub    $0x78,%rsp
  21b1c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21b1c9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  21b1ce:	48 8b 3f             	mov    (%rdi),%rdi
  21b1d1:	e8 6a f4 00 00       	callq  22a640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  21b1d6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21b1db:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21b1e0:	e8 ab 02 00 00       	callq  21b490 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h60fea0f2c1683ef6E>
                    if mem::size_of::<T>() != 0 {
  21b1e5:	eb 00                	jmp    21b1e7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x27>
  21b1e7:	b8 18 00 00 00       	mov    $0x18,%eax
  21b1ec:	48 83 f8 00          	cmp    $0x0,%rax
  21b1f0:	75 02                	jne    21b1f4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x34>
  21b1f2:	eb 10                	jmp    21b204 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x44>
  21b1f4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  21b1f9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  21b1fd:	e8 be 02 00 00       	callq  21b4c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>
                    if mem::size_of::<T>() != 0 {
  21b202:	eb 00                	jmp    21b204 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x44>
  21b204:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  21b209:	48 8b 38             	mov    (%rax),%rdi
  21b20c:	e8 2f f4 00 00       	callq  22a640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  21b211:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b216:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b21b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b220:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  21b224:	74 77                	je     21b29d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xdd>
  21b226:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b22b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b230:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  21b237:	00 00 
                    let old = self.ptr.as_ptr();
  21b239:	48 8b 38             	mov    (%rax),%rdi
  21b23c:	e8 ff f3 00 00       	callq  22a640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  21b241:	48 89 c1             	mov    %rax,%rcx
  21b244:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b249:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21b24e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  21b253:	48 8b 38             	mov    (%rax),%rdi
  21b256:	e8 e5 f3 00 00       	callq  22a640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  21b25b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b260:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  21b267:	00 00 
  21b269:	48 83 c0 18          	add    $0x18,%rax
  21b26d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b272:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21b277:	e8 04 f2 00 00       	callq  22a480 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>
  21b27c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b281:	48 89 c2             	mov    %rax,%rdx
  21b284:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b289:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21b28c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  21b291:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21b296:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21b29b:	eb 13                	jmp    21b2b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xf0>
                        None
  21b29d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21b2a4:	00 00 
            }
  21b2a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21b2ab:	48 83 c4 78          	add    $0x78,%rsp
  21b2af:	c3                   	retq   
  21b2b0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  21b2b5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21b2ba:	eb ea                	jmp    21b2a6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xe6>
  21b2bc:	cc                   	int3   
  21b2bd:	cc                   	int3   
  21b2be:	cc                   	int3   
  21b2bf:	cc                   	int3   

000000000021b2c0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE>:
            fn next(&mut self) -> Option<$elem> {
  21b2c0:	48 83 ec 78          	sub    $0x78,%rsp
  21b2c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21b2c9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  21b2ce:	48 8b 3f             	mov    (%rdi),%rdi
  21b2d1:	e8 3a f3 00 00       	callq  22a610 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  21b2d6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21b2db:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21b2e0:	e8 6b 96 ff ff       	callq  214950 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>
                    if mem::size_of::<T>() != 0 {
  21b2e5:	eb 00                	jmp    21b2e7 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x27>
  21b2e7:	b8 08 00 00 00       	mov    $0x8,%eax
  21b2ec:	48 83 f8 00          	cmp    $0x0,%rax
  21b2f0:	75 02                	jne    21b2f4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x34>
  21b2f2:	eb 10                	jmp    21b304 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x44>
  21b2f4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  21b2f9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  21b2fd:	e8 4e 96 ff ff       	callq  214950 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>
                    if mem::size_of::<T>() != 0 {
  21b302:	eb 00                	jmp    21b304 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x44>
  21b304:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  21b309:	48 8b 38             	mov    (%rax),%rdi
  21b30c:	e8 ff f2 00 00       	callq  22a610 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  21b311:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b316:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b31b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b320:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  21b324:	74 77                	je     21b39d <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xdd>
  21b326:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b32b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b330:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  21b337:	00 00 
                    let old = self.ptr.as_ptr();
  21b339:	48 8b 38             	mov    (%rax),%rdi
  21b33c:	e8 cf f2 00 00       	callq  22a610 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  21b341:	48 89 c1             	mov    %rax,%rcx
  21b344:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b349:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21b34e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  21b353:	48 8b 38             	mov    (%rax),%rdi
  21b356:	e8 b5 f2 00 00       	callq  22a610 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  21b35b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b360:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  21b367:	00 00 
  21b369:	48 83 c0 08          	add    $0x8,%rax
  21b36d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b372:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21b377:	e8 74 f1 00 00       	callq  22a4f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>
  21b37c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b381:	48 89 c2             	mov    %rax,%rdx
  21b384:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b389:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21b38c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  21b391:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21b396:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21b39b:	eb 13                	jmp    21b3b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xf0>
                        None
  21b39d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21b3a4:	00 00 
            }
  21b3a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21b3ab:	48 83 c4 78          	add    $0x78,%rsp
  21b3af:	c3                   	retq   
  21b3b0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  21b3b5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21b3ba:	eb ea                	jmp    21b3a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xe6>
  21b3bc:	cc                   	int3   
  21b3bd:	cc                   	int3   
  21b3be:	cc                   	int3   
  21b3bf:	cc                   	int3   

000000000021b3c0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>:
    pub fn into_option(self) -> Option<T> {
  21b3c0:	48 83 ec 28          	sub    $0x28,%rsp
  21b3c4:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  21b3c8:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.into()
  21b3cd:	e8 6e 01 00 00       	callq  21b540 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h16ba7f27b05eae2aE>
  21b3d2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b3d7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21b3dc:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21b3e1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21b3e6:	48 83 c4 28          	add    $0x28,%rsp
  21b3ea:	c3                   	retq   
  21b3eb:	cc                   	int3   
  21b3ec:	cc                   	int3   
  21b3ed:	cc                   	int3   
  21b3ee:	cc                   	int3   
  21b3ef:	cc                   	int3   

000000000021b3f0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
  21b3f0:	48 83 ec 20          	sub    $0x20,%rsp
  21b3f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  21b3f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  21b3fd:	8b 07                	mov    (%rdi),%eax
  21b3ff:	48 85 c0             	test   %rax,%rax
  21b402:	74 06                	je     21b40a <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x1a>
  21b404:	eb 00                	jmp    21b406 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x16>
  21b406:	eb 16                	jmp    21b41e <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x2e>
  21b408:	0f 0b                	ud2    
  21b40a:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  21b40e:	48 83 c0 08          	add    $0x8,%rax
  21b412:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b417:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b41c:	eb 09                	jmp    21b427 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x37>
            Self::None => None,
  21b41e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  21b425:	00 00 
    }
  21b427:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b42c:	48 83 c4 20          	add    $0x20,%rsp
  21b430:	c3                   	retq   
  21b431:	cc                   	int3   
  21b432:	cc                   	int3   
  21b433:	cc                   	int3   
  21b434:	cc                   	int3   
  21b435:	cc                   	int3   
  21b436:	cc                   	int3   
  21b437:	cc                   	int3   
  21b438:	cc                   	int3   
  21b439:	cc                   	int3   
  21b43a:	cc                   	int3   
  21b43b:	cc                   	int3   
  21b43c:	cc                   	int3   
  21b43d:	cc                   	int3   
  21b43e:	cc                   	int3   
  21b43f:	cc                   	int3   

000000000021b440 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E>:
    pub const fn as_ref(&self) -> Option<&T> {
  21b440:	48 83 ec 20          	sub    $0x20,%rsp
  21b444:	48 89 3c 24          	mov    %rdi,(%rsp)
  21b448:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  21b44d:	8b 07                	mov    (%rdi),%eax
  21b44f:	48 85 c0             	test   %rax,%rax
  21b452:	74 06                	je     21b45a <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x1a>
  21b454:	eb 00                	jmp    21b456 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x16>
  21b456:	eb 16                	jmp    21b46e <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x2e>
  21b458:	0f 0b                	ud2    
  21b45a:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  21b45e:	48 83 c0 08          	add    $0x8,%rax
  21b462:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b467:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b46c:	eb 09                	jmp    21b477 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x37>
            Self::None => None,
  21b46e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  21b475:	00 00 
    }
  21b477:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b47c:	48 83 c4 20          	add    $0x20,%rsp
  21b480:	c3                   	retq   
  21b481:	cc                   	int3   
  21b482:	cc                   	int3   
  21b483:	cc                   	int3   
  21b484:	cc                   	int3   
  21b485:	cc                   	int3   
  21b486:	cc                   	int3   
  21b487:	cc                   	int3   
  21b488:	cc                   	int3   
  21b489:	cc                   	int3   
  21b48a:	cc                   	int3   
  21b48b:	cc                   	int3   
  21b48c:	cc                   	int3   
  21b48d:	cc                   	int3   
  21b48e:	cc                   	int3   
  21b48f:	cc                   	int3   

000000000021b490 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h60fea0f2c1683ef6E>:
    pub const fn is_null(self) -> bool {
  21b490:	48 83 ec 18          	sub    $0x18,%rsp
  21b494:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21b499:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b49e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  21b4a3:	31 c0                	xor    %eax,%eax
  21b4a5:	89 c6                	mov    %eax,%esi
  21b4a7:	e8 74 8a 01 00       	callq  233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21b4ac:	88 44 24 07          	mov    %al,0x7(%rsp)
  21b4b0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21b4b4:	24 01                	and    $0x1,%al
  21b4b6:	0f b6 c0             	movzbl %al,%eax
  21b4b9:	48 83 c4 18          	add    $0x18,%rsp
  21b4bd:	c3                   	retq   
  21b4be:	cc                   	int3   
  21b4bf:	cc                   	int3   

000000000021b4c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>:
    pub const fn is_null(self) -> bool {
  21b4c0:	48 83 ec 18          	sub    $0x18,%rsp
  21b4c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21b4c9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b4ce:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  21b4d3:	31 c0                	xor    %eax,%eax
  21b4d5:	89 c6                	mov    %eax,%esi
  21b4d7:	e8 f4 8a 01 00       	callq  233fd0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  21b4dc:	88 44 24 07          	mov    %al,0x7(%rsp)
  21b4e0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21b4e4:	24 01                	and    $0x1,%al
  21b4e6:	0f b6 c0             	movzbl %al,%eax
  21b4e9:	48 83 c4 18          	add    $0x18,%rsp
  21b4ed:	c3                   	retq   
  21b4ee:	cc                   	int3   
  21b4ef:	cc                   	int3   

000000000021b4f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0f913f2fa7a5903cE>:
    pub fn iter(&self) -> Iter<'_, T> {
  21b4f0:	48 83 ec 28          	sub    $0x28,%rsp
  21b4f4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21b4f9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  21b4fe:	e8 2d f8 ff ff       	callq  21ad30 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E>
  21b503:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b508:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21b50d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21b512:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21b517:	48 83 c4 28          	add    $0x28,%rsp
  21b51b:	c3                   	retq   
  21b51c:	cc                   	int3   
  21b51d:	cc                   	int3   
  21b51e:	cc                   	int3   
  21b51f:	cc                   	int3   

000000000021b520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he76bc40226449d5aE>:
    pub const fn as_ptr(&self) -> *const T {
  21b520:	48 83 ec 10          	sub    $0x10,%rsp
  21b524:	48 89 f8             	mov    %rdi,%rax
  21b527:	48 89 04 24          	mov    %rax,(%rsp)
  21b52b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21b530:	48 83 c4 10          	add    $0x10,%rsp
  21b534:	c3                   	retq   
  21b535:	cc                   	int3   
  21b536:	cc                   	int3   
  21b537:	cc                   	int3   
  21b538:	cc                   	int3   
  21b539:	cc                   	int3   
  21b53a:	cc                   	int3   
  21b53b:	cc                   	int3   
  21b53c:	cc                   	int3   
  21b53d:	cc                   	int3   
  21b53e:	cc                   	int3   
  21b53f:	cc                   	int3   

000000000021b540 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h16ba7f27b05eae2aE>:
    fn into(self) -> U {
  21b540:	48 83 ec 28          	sub    $0x28,%rsp
  21b544:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  21b548:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  21b54d:	e8 7e 56 ff ff       	callq  210bd0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E>
  21b552:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b557:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21b55c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21b561:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21b566:	48 83 c4 28          	add    $0x28,%rsp
  21b56a:	c3                   	retq   
  21b56b:	cc                   	int3   
  21b56c:	cc                   	int3   
  21b56d:	cc                   	int3   
  21b56e:	cc                   	int3   
  21b56f:	cc                   	int3   

000000000021b570 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE>:
    MicroSeconds = 1000,
}

impl SleepTimeRange {
    #[inline]
    pub fn get_range(ns: u64) -> Self {
  21b570:	48 83 ec 18          	sub    $0x18,%rsp
  21b574:	48 89 3c 24          	mov    %rdi,(%rsp)
  21b578:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if ns > (Self::Seconds as u64) {
  21b57d:	48 81 ff 00 ca 9a 3b 	cmp    $0x3b9aca00,%rdi
  21b584:	77 0e                	ja     21b594 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x24>
  21b586:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Seconds
        } else if ns > (Self::MilliSeconds as u64) {
  21b58a:	48 3d 40 42 0f 00    	cmp    $0xf4240,%rax
  21b590:	77 1d                	ja     21b5af <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x3f>
  21b592:	eb 11                	jmp    21b5a5 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x35>
            Self::Seconds
  21b594:	c7 44 24 0c 00 ca 9a 	movl   $0x3b9aca00,0xc(%rsp)
  21b59b:	3b 
            Self::MilliSeconds
        } else {
            Self::MicroSeconds
        }
    }
  21b59c:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  21b5a0:	48 83 c4 18          	add    $0x18,%rsp
  21b5a4:	c3                   	retq   
            Self::MicroSeconds
  21b5a5:	c7 44 24 0c e8 03 00 	movl   $0x3e8,0xc(%rsp)
  21b5ac:	00 
        } else if ns > (Self::MilliSeconds as u64) {
  21b5ad:	eb ed                	jmp    21b59c <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x2c>
            Self::MilliSeconds
  21b5af:	c7 44 24 0c 40 42 0f 	movl   $0xf4240,0xc(%rsp)
  21b5b6:	00 
        } else if ns > (Self::MilliSeconds as u64) {
  21b5b7:	eb e3                	jmp    21b59c <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x2c>
  21b5b9:	cc                   	int3   
  21b5ba:	cc                   	int3   
  21b5bb:	cc                   	int3   
  21b5bc:	cc                   	int3   
  21b5bd:	cc                   	int3   
  21b5be:	cc                   	int3   
  21b5bf:	cc                   	int3   

000000000021b5c0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E>:
}

// some helpers
pub fn safe_ticks_from_ns(ns: u64) -> TSCTicks {
  21b5c0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  21b5c7:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21b5cc:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    let range = SleepTimeRange::get_range(ns);
  21b5d1:	e8 9a ff ff ff       	callq  21b570 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE>
  21b5d6:	89 44 24 64          	mov    %eax,0x64(%rsp)
    match range {
  21b5da:	8b 44 24 64          	mov    0x64(%rsp),%eax
  21b5de:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b5e3:	48 2d e8 03 00 00    	sub    $0x3e8,%rax
  21b5e9:	74 78                	je     21b663 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0xa3>
  21b5eb:	eb 00                	jmp    21b5ed <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x2d>
  21b5ed:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21b5f2:	48 2d 40 42 0f 00    	sub    $0xf4240,%rax
  21b5f8:	74 39                	je     21b633 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x73>
  21b5fa:	eb 00                	jmp    21b5fc <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x3c>
  21b5fc:	eb 02                	jmp    21b600 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x40>
  21b5fe:	0f 0b                	ud2    
  21b600:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        SleepTimeRange::Seconds => {
            let ms = ns / 1000000;
  21b605:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
  21b60a:	31 d2                	xor    %edx,%edx
  21b60c:	48 f7 f1             	div    %rcx
  21b60f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b614:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21b61b:	00 
            let frequency = TSC::read_cpu_frequency();
  21b61c:	e8 6f 01 00 00       	callq  21b790 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  21b621:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b626:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21b62d:	00 
  21b62e:	e9 09 01 00 00       	jmpq   21b73c <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x17c>
  21b633:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            TSCTicks((ms * frequency) / 1000)
        }
        SleepTimeRange::MilliSeconds => {
            let us = ns / 1000;
  21b638:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  21b63d:	31 d2                	xor    %edx,%edx
  21b63f:	48 f7 f1             	div    %rcx
  21b642:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21b647:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
            let frequency = TSC::read_cpu_frequency();
  21b64c:	e8 3f 01 00 00       	callq  21b790 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  21b651:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b656:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21b65d:	00 
  21b65e:	e9 90 00 00 00       	jmpq   21b6f3 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x133>
            TSCTicks((us * frequency) / 1000000)
        }
        SleepTimeRange::MicroSeconds => {
            let frequency = TSC::read_cpu_frequency();
  21b663:	e8 28 01 00 00       	callq  21b790 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  21b668:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b66d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b672:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21b677:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            TSCTicks((ns * frequency) * 1000000000)
  21b67c:	48 f7 e1             	mul    %rcx
  21b67f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b684:	0f 90 c0             	seto   %al
  21b687:	a8 01                	test   $0x1,%al
  21b689:	75 1b                	jne    21b6a6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0xe6>
  21b68b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b690:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
  21b695:	48 f7 e1             	mul    %rcx
  21b698:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b69d:	0f 90 c0             	seto   %al
  21b6a0:	a8 01                	test   $0x1,%al
  21b6a2:	75 28                	jne    21b6cc <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x10c>
  21b6a4:	eb 1a                	jmp    21b6c0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x100>
  21b6a6:	48 8d 3d 33 5d fe ff 	lea    -0x1a2cd(%rip),%rdi        # 2013e0 <str.0>
  21b6ad:	48 8d 15 f4 fd 01 00 	lea    0x1fdf4(%rip),%rdx        # 23b4a8 <memcmp+0x2768>
  21b6b4:	be 21 00 00 00       	mov    $0x21,%esi
  21b6b9:	e8 32 a5 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b6be:	0f 0b                	ud2    
  21b6c0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21b6c5:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  21b6ca:	eb 1a                	jmp    21b6e6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((ns * frequency) * 1000000000)
  21b6cc:	48 8d 3d 0d 5d fe ff 	lea    -0x1a2f3(%rip),%rdi        # 2013e0 <str.0>
  21b6d3:	48 8d 15 ce fd 01 00 	lea    0x1fdce(%rip),%rdx        # 23b4a8 <memcmp+0x2768>
  21b6da:	be 21 00 00 00       	mov    $0x21,%esi
  21b6df:	e8 0c a5 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b6e4:	0f 0b                	ud2    
    }
}
  21b6e6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21b6eb:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  21b6f2:	c3                   	retq   
  21b6f3:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21b6f8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            TSCTicks((us * frequency) / 1000000)
  21b6fd:	48 f7 e1             	mul    %rcx
  21b700:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b705:	0f 90 c0             	seto   %al
  21b708:	a8 01                	test   $0x1,%al
  21b70a:	75 16                	jne    21b722 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x162>
  21b70c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b711:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
  21b716:	31 d2                	xor    %edx,%edx
  21b718:	48 f7 f1             	div    %rcx
  21b71b:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  21b720:	eb c4                	jmp    21b6e6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((us * frequency) / 1000000)
  21b722:	48 8d 3d b7 5c fe ff 	lea    -0x1a349(%rip),%rdi        # 2013e0 <str.0>
  21b729:	48 8d 15 90 fd 01 00 	lea    0x1fd90(%rip),%rdx        # 23b4c0 <memcmp+0x2780>
  21b730:	be 21 00 00 00       	mov    $0x21,%esi
  21b735:	e8 b6 a4 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b73a:	0f 0b                	ud2    
  21b73c:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21b741:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            TSCTicks((ms * frequency) / 1000)
  21b746:	48 f7 e1             	mul    %rcx
  21b749:	48 89 04 24          	mov    %rax,(%rsp)
  21b74d:	0f 90 c0             	seto   %al
  21b750:	a8 01                	test   $0x1,%al
  21b752:	75 18                	jne    21b76c <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x1ac>
  21b754:	48 8b 04 24          	mov    (%rsp),%rax
  21b758:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  21b75d:	31 d2                	xor    %edx,%edx
  21b75f:	48 f7 f1             	div    %rcx
  21b762:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  21b767:	e9 7a ff ff ff       	jmpq   21b6e6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((ms * frequency) / 1000)
  21b76c:	48 8d 3d 6d 5c fe ff 	lea    -0x1a393(%rip),%rdi        # 2013e0 <str.0>
  21b773:	48 8d 15 5e fd 01 00 	lea    0x1fd5e(%rip),%rdx        # 23b4d8 <memcmp+0x2798>
  21b77a:	be 21 00 00 00       	mov    $0x21,%esi
  21b77f:	e8 6c a4 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b784:	0f 0b                	ud2    
  21b786:	cc                   	int3   
  21b787:	cc                   	int3   
  21b788:	cc                   	int3   
  21b789:	cc                   	int3   
  21b78a:	cc                   	int3   
  21b78b:	cc                   	int3   
  21b78c:	cc                   	int3   
  21b78d:	cc                   	int3   
  21b78e:	cc                   	int3   
  21b78f:	cc                   	int3   

000000000021b790 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>:

pub struct TSC;

impl TSC {
    #[inline]
    pub fn read_cpu_frequency() -> u64 {
  21b790:	48 83 ec 18          	sub    $0x18,%rsp
        let value = CPU_FREQUENCY.load(Ordering::SeqCst);
  21b794:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  21b799:	48 8d 3d 10 3f 02 00 	lea    0x23f10(%rip),%rdi        # 23f6b0 <_ZN9r3_kernel3cpu3tsc13CPU_FREQUENCY17h82e4bd433f9ea1bfE>
  21b7a0:	0f b6 74 24 0f       	movzbl 0xf(%rsp),%esi
  21b7a5:	e8 86 fb 00 00       	callq  22b330 <_ZN4core4sync6atomic9AtomicU644load17h8406c945683f8232E>
  21b7aa:	48 89 04 24          	mov    %rax,(%rsp)
  21b7ae:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b7b3:	48 8b 04 24          	mov    (%rsp),%rax
        value
    }
  21b7b7:	48 83 c4 18          	add    $0x18,%rsp
  21b7bb:	c3                   	retq   
  21b7bc:	cc                   	int3   
  21b7bd:	cc                   	int3   
  21b7be:	cc                   	int3   
  21b7bf:	cc                   	int3   

000000000021b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>:

    #[inline]
    pub fn read_tsc() -> TSCTicks {
  21b7c0:	48 83 ec 20          	sub    $0x20,%rsp
        let rax: u64;
        let rdx: u64;

        unsafe {
            asm!(
  21b7c4:	0f 01 f9             	rdtscp 
  21b7c7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21b7cc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                out("rcx") _,
                options(nostack, nomem)
            )
        }

        TSCTicks(rdx << 32 | (rax & 0xffffffff))
  21b7d1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b7d6:	48 c1 e0 20          	shl    $0x20,%rax
  21b7da:	48 89 04 24          	mov    %rax,(%rsp)
  21b7de:	48 8b 04 24          	mov    (%rsp),%rax
  21b7e2:	48 b9 ff ff ff ff 00 	movabs $0xffffffff,%rcx
  21b7e9:	00 00 00 
  21b7ec:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
  21b7f1:	48 09 c8             	or     %rcx,%rax
  21b7f4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  21b7f9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b7fe:	48 83 c4 20          	add    $0x20,%rsp
  21b802:	c3                   	retq   
  21b803:	cc                   	int3   
  21b804:	cc                   	int3   
  21b805:	cc                   	int3   
  21b806:	cc                   	int3   
  21b807:	cc                   	int3   
  21b808:	cc                   	int3   
  21b809:	cc                   	int3   
  21b80a:	cc                   	int3   
  21b80b:	cc                   	int3   
  21b80c:	cc                   	int3   
  21b80d:	cc                   	int3   
  21b80e:	cc                   	int3   
  21b80f:	cc                   	int3   

000000000021b810 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE>:
                options(nomem, nostack)
            )
        }
    }

    pub fn detect_cpu_speed() {
  21b810:	48 83 ec 38          	sub    $0x38,%rsp
        let t1 = TSC::read_tsc();
  21b814:	e8 a7 ff ff ff       	callq  21b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  21b819:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b81e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        pit::sleep_ns(10000000);
  21b823:	bf 80 96 98 00       	mov    $0x989680,%edi
  21b828:	e8 e3 38 01 00       	callq  22f110 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E>
        let t2 = TSC::read_tsc();
  21b82d:	e8 8e ff ff ff       	callq  21b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  21b832:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b837:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b83c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21b841:	48 8b 44 24 10       	mov    0x10(%rsp),%rax

        CPU_FREQUENCY.store(100 * (t2.0 - t1.0), Ordering::SeqCst);
  21b846:	48 29 c8             	sub    %rcx,%rax
  21b849:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b84e:	0f 92 c0             	setb   %al
  21b851:	a8 01                	test   $0x1,%al
  21b853:	75 1a                	jne    21b86f <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x5f>
  21b855:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21b85a:	b9 64 00 00 00       	mov    $0x64,%ecx
  21b85f:	48 f7 e1             	mul    %rcx
  21b862:	48 89 04 24          	mov    %rax,(%rsp)
  21b866:	0f 90 c0             	seto   %al
  21b869:	a8 01                	test   $0x1,%al
  21b86b:	75 38                	jne    21b8a5 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x95>
  21b86d:	eb 1a                	jmp    21b889 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x79>
  21b86f:	48 8d 3d 9a 5b fe ff 	lea    -0x1a466(%rip),%rdi        # 201410 <str.1>
  21b876:	48 8d 15 73 fc 01 00 	lea    0x1fc73(%rip),%rdx        # 23b4f0 <memcmp+0x27b0>
  21b87d:	be 21 00 00 00       	mov    $0x21,%esi
  21b882:	e8 69 a3 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b887:	0f 0b                	ud2    
  21b889:	48 8b 34 24          	mov    (%rsp),%rsi
  21b88d:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  21b892:	48 8d 3d 17 3e 02 00 	lea    0x23e17(%rip),%rdi        # 23f6b0 <_ZN9r3_kernel3cpu3tsc13CPU_FREQUENCY17h82e4bd433f9ea1bfE>
  21b899:	0f b6 54 24 27       	movzbl 0x27(%rsp),%edx
  21b89e:	e8 cd fa 00 00       	callq  22b370 <_ZN4core4sync6atomic9AtomicU645store17h5dabdcca03d941feE>
  21b8a3:	eb 1a                	jmp    21b8bf <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0xaf>
  21b8a5:	48 8d 3d 34 5b fe ff 	lea    -0x1a4cc(%rip),%rdi        # 2013e0 <str.0>
  21b8ac:	48 8d 15 55 fc 01 00 	lea    0x1fc55(%rip),%rdx        # 23b508 <memcmp+0x27c8>
  21b8b3:	be 21 00 00 00       	mov    $0x21,%esi
  21b8b8:	e8 33 a3 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b8bd:	0f 0b                	ud2    
    }
  21b8bf:	48 83 c4 38          	add    $0x38,%rsp
  21b8c3:	c3                   	retq   
  21b8c4:	cc                   	int3   
  21b8c5:	cc                   	int3   
  21b8c6:	cc                   	int3   
  21b8c7:	cc                   	int3   
  21b8c8:	cc                   	int3   
  21b8c9:	cc                   	int3   
  21b8ca:	cc                   	int3   
  21b8cb:	cc                   	int3   
  21b8cc:	cc                   	int3   
  21b8cd:	cc                   	int3   
  21b8ce:	cc                   	int3   
  21b8cf:	cc                   	int3   

000000000021b8d0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot11set_shot_at17haa166075b04f2944E>:
}

pub struct TSCTimerShot;

impl TSCTimerShot {
    pub fn set_shot_at(tick: TSCTicks) {
  21b8d0:	48 83 ec 20          	sub    $0x20,%rsp
  21b8d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  21b8d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let tick_high = (tick.0 >> 32) as u32;
  21b8dd:	48 c1 ef 20          	shr    $0x20,%rdi
  21b8e1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b8e6:	48 8b 04 24          	mov    (%rsp),%rax
  21b8ea:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21b8ef:	89 ca                	mov    %ecx,%edx
  21b8f1:	89 54 24 18          	mov    %edx,0x18(%rsp)
        let tick_low = tick.0 as u32;
  21b8f5:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  21b8f9:	b9 e0 06 00 00       	mov    $0x6e0,%ecx
        unsafe {
            asm!(
  21b8fe:	0f 30                	wrmsr  
                in("edx") tick_high,
                in("eax") tick_low,
                options(nomem, nostack)
            )
        }
    }
  21b900:	48 83 c4 20          	add    $0x20,%rsp
  21b904:	c3                   	retq   
  21b905:	cc                   	int3   
  21b906:	cc                   	int3   
  21b907:	cc                   	int3   
  21b908:	cc                   	int3   
  21b909:	cc                   	int3   
  21b90a:	cc                   	int3   
  21b90b:	cc                   	int3   
  21b90c:	cc                   	int3   
  21b90d:	cc                   	int3   
  21b90e:	cc                   	int3   
  21b90f:	cc                   	int3   

000000000021b910 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot18reset_current_shot17h823569756d8e1e88E>:

    pub fn reset_current_shot() {
  21b910:	b9 e0 06 00 00       	mov    $0x6e0,%ecx
  21b915:	31 c0                	xor    %eax,%eax
        unsafe {
            asm!(
  21b917:	89 c2                	mov    %eax,%edx
  21b919:	0f 30                	wrmsr  
                in("edx") 0 as u32,
                in("eax") 0 as u32,
                options(nomem, nostack)
            )
        }
    }
  21b91b:	c3                   	retq   
  21b91c:	cc                   	int3   
  21b91d:	cc                   	int3   
  21b91e:	cc                   	int3   
  21b91f:	cc                   	int3   

000000000021b920 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE>:

    pub fn wait_for_shot_at(ticks: TSCTicks) {
  21b920:	48 83 ec 18          	sub    $0x18,%rsp
  21b924:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // reset any shot if pending
        Self::reset_current_shot();
  21b929:	e8 e2 ff ff ff       	callq  21b910 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot18reset_current_shot17h823569756d8e1e88E>
        Self::set_shot_at(ticks.clone());
  21b92e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21b933:	e8 98 03 00 00       	callq  21bcd0 <_ZN68_$LT$r3_kernel..cpu..tsc..TSCTicks$u20$as$u20$core..clone..Clone$GT$5clone17h8a1586d3bdd983c7E>
  21b938:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b93d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21b942:	e8 89 ff ff ff       	callq  21b8d0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot11set_shot_at17haa166075b04f2944E>

        unsafe {
            while TSC::read_tsc().0 < ticks.0 {
  21b947:	e8 74 fe ff ff       	callq  21b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  21b94c:	48 89 04 24          	mov    %rax,(%rsp)
  21b950:	48 8b 04 24          	mov    (%rsp),%rax
  21b954:	48 3b 44 24 10       	cmp    0x10(%rsp),%rax
  21b959:	72 03                	jb     21b95e <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x3e>
                asm!("sti; hlt;");
            }
            asm!("cli");
  21b95b:	fa                   	cli    
  21b95c:	eb 04                	jmp    21b962 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x42>
                asm!("sti; hlt;");
  21b95e:	fb                   	sti    
  21b95f:	f4                   	hlt    
  21b960:	eb e5                	jmp    21b947 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x27>
        }
    }
  21b962:	48 83 c4 18          	add    $0x18,%rsp
  21b966:	c3                   	retq   
  21b967:	cc                   	int3   
  21b968:	cc                   	int3   
  21b969:	cc                   	int3   
  21b96a:	cc                   	int3   
  21b96b:	cc                   	int3   
  21b96c:	cc                   	int3   
  21b96d:	cc                   	int3   
  21b96e:	cc                   	int3   
  21b96f:	cc                   	int3   

000000000021b970 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot20create_shot_after_ns17ha68330110c36efdfE>:

    pub fn create_shot_from_ns(ns: u64) {
        Self::set_shot_at(safe_ticks_from_ns(ns));
    }

    pub fn create_shot_after_ns(ns: u64) {
  21b970:	48 83 ec 18          	sub    $0x18,%rsp
  21b974:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ticks = safe_ticks_from_ns(ns);
  21b979:	e8 42 fc ff ff       	callq  21b5c0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E>
  21b97e:	48 89 04 24          	mov    %rax,(%rsp)
  21b982:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b987:	48 8b 3c 24          	mov    (%rsp),%rdi
        Self::create_shot_from_ticks(ticks);
  21b98b:	e8 10 00 00 00       	callq  21b9a0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot22create_shot_from_ticks17h90b113a8bf9ee8d0E>
    }
  21b990:	48 83 c4 18          	add    $0x18,%rsp
  21b994:	c3                   	retq   
  21b995:	cc                   	int3   
  21b996:	cc                   	int3   
  21b997:	cc                   	int3   
  21b998:	cc                   	int3   
  21b999:	cc                   	int3   
  21b99a:	cc                   	int3   
  21b99b:	cc                   	int3   
  21b99c:	cc                   	int3   
  21b99d:	cc                   	int3   
  21b99e:	cc                   	int3   
  21b99f:	cc                   	int3   

000000000021b9a0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot22create_shot_from_ticks17h90b113a8bf9ee8d0E>:

    pub fn create_shot_from_ticks(ticks: TSCTicks) {
  21b9a0:	48 83 ec 28          	sub    $0x28,%rsp
  21b9a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b9a9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        let n_ticks = TSCTicks(TSC::read_tsc().0 + ticks.0);
  21b9ae:	e8 0d fe ff ff       	callq  21b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  21b9b3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b9b8:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21b9bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21b9c2:	48 01 c8             	add    %rcx,%rax
  21b9c5:	48 89 04 24          	mov    %rax,(%rsp)
  21b9c9:	0f 92 c0             	setb   %al
  21b9cc:	a8 01                	test   $0x1,%al
  21b9ce:	75 15                	jne    21b9e5 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot22create_shot_from_ticks17h90b113a8bf9ee8d0E+0x45>
  21b9d0:	48 8b 04 24          	mov    (%rsp),%rax
  21b9d4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        Self::set_shot_at(n_ticks);
  21b9d9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21b9de:	e8 ed fe ff ff       	callq  21b8d0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot11set_shot_at17haa166075b04f2944E>
  21b9e3:	eb 1a                	jmp    21b9ff <_ZN9r3_kernel3cpu3tsc12TSCTimerShot22create_shot_from_ticks17h90b113a8bf9ee8d0E+0x5f>
        let n_ticks = TSCTicks(TSC::read_tsc().0 + ticks.0);
  21b9e5:	48 8d 3d 54 5a fe ff 	lea    -0x1a5ac(%rip),%rdi        # 201440 <str.2>
  21b9ec:	48 8d 15 2d fb 01 00 	lea    0x1fb2d(%rip),%rdx        # 23b520 <memcmp+0x27e0>
  21b9f3:	be 1c 00 00 00       	mov    $0x1c,%esi
  21b9f8:	e8 f3 a1 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b9fd:	0f 0b                	ud2    
    }
  21b9ff:	48 83 c4 28          	add    $0x28,%rsp
  21ba03:	c3                   	retq   
  21ba04:	cc                   	int3   
  21ba05:	cc                   	int3   
  21ba06:	cc                   	int3   
  21ba07:	cc                   	int3   
  21ba08:	cc                   	int3   
  21ba09:	cc                   	int3   
  21ba0a:	cc                   	int3   
  21ba0b:	cc                   	int3   
  21ba0c:	cc                   	int3   
  21ba0d:	cc                   	int3   
  21ba0e:	cc                   	int3   
  21ba0f:	cc                   	int3   

000000000021ba10 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE>:
    pub fn sleep_ticks(ticks: u64) {
        let total_ticks = TSCTicks(TSC::read_tsc().0 + ticks);
        TSCTimerShot::wait_for_shot_at(total_ticks);
    }

    pub fn sleep_ns(ns: u64) {
  21ba10:	48 83 ec 38          	sub    $0x38,%rsp
  21ba14:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let ticks = safe_ticks_from_ns(ns);
  21ba19:	e8 a2 fb ff ff       	callq  21b5c0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E>
  21ba1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21ba23:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        let total_ticks = TSCTicks(ticks.0 + TSC::read_tsc().0);
  21ba28:	e8 93 fd ff ff       	callq  21b7c0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  21ba2d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ba32:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21ba37:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21ba3c:	48 01 c8             	add    %rcx,%rax
  21ba3f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ba44:	0f 92 c0             	setb   %al
  21ba47:	a8 01                	test   $0x1,%al
  21ba49:	75 16                	jne    21ba61 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE+0x51>
  21ba4b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21ba50:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        TSCTimerShot::wait_for_shot_at(total_ticks);
  21ba55:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21ba5a:	e8 c1 fe ff ff       	callq  21b920 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE>
  21ba5f:	eb 1a                	jmp    21ba7b <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE+0x6b>
        let total_ticks = TSCTicks(ticks.0 + TSC::read_tsc().0);
  21ba61:	48 8d 3d d8 59 fe ff 	lea    -0x1a628(%rip),%rdi        # 201440 <str.2>
  21ba68:	48 8d 15 c9 fa 01 00 	lea    0x1fac9(%rip),%rdx        # 23b538 <memcmp+0x27f8>
  21ba6f:	be 1c 00 00 00       	mov    $0x1c,%esi
  21ba74:	e8 77 a1 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ba79:	0f 0b                	ud2    
    }
  21ba7b:	48 83 c4 38          	add    $0x38,%rsp
  21ba7f:	c3                   	retq   

000000000021ba80 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE>:
    pub fn sleep_ms(ms: u64) {
        let ns = ms * 1000000;
        Self::sleep_ns(ns);
    }

    pub fn sleep_sec(sec: u64) {
  21ba80:	48 83 ec 18          	sub    $0x18,%rsp
  21ba84:	48 89 f8             	mov    %rdi,%rax
  21ba87:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        let ns = sec * 1000000000;
  21ba8c:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
  21ba91:	48 f7 e1             	mul    %rcx
  21ba94:	48 89 04 24          	mov    %rax,(%rsp)
  21ba98:	0f 90 c0             	seto   %al
  21ba9b:	a8 01                	test   $0x1,%al
  21ba9d:	75 10                	jne    21baaf <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE+0x2f>
  21ba9f:	48 8b 3c 24          	mov    (%rsp),%rdi
  21baa3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Self::sleep_ns(ns);
  21baa8:	e8 63 ff ff ff       	callq  21ba10 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE>
  21baad:	eb 1a                	jmp    21bac9 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE+0x49>
        let ns = sec * 1000000000;
  21baaf:	48 8d 3d 2a 59 fe ff 	lea    -0x1a6d6(%rip),%rdi        # 2013e0 <str.0>
  21bab6:	48 8d 15 93 fa 01 00 	lea    0x1fa93(%rip),%rdx        # 23b550 <memcmp+0x2810>
  21babd:	be 21 00 00 00       	mov    $0x21,%esi
  21bac2:	e8 29 a1 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21bac7:	0f 0b                	ud2    
    }
  21bac9:	48 83 c4 18          	add    $0x18,%rsp
  21bacd:	c3                   	retq   
  21bace:	cc                   	int3   
  21bacf:	cc                   	int3   

000000000021bad0 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E>:
}

pub fn init_timer() {
  21bad0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    log::info!("Enabling CPU timestamp counter..");
  21bad7:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  21bade:	00 00 
  21bae0:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21bae5:	48 8d 35 0c 48 fe ff 	lea    -0x1b7f4(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21baec:	e8 df 74 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21baf1:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21baf5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21baf9:	a8 01                	test   $0x1,%al
  21bafb:	75 09                	jne    21bb06 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x36>
  21bafd:	eb 00                	jmp    21baff <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x2f>
  21baff:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  21bb04:	eb 4e                	jmp    21bb54 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x84>
  21bb06:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  21bb0d:	00 
  21bb0e:	48 8b 3d 33 20 02 00 	mov    0x22033(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21bb15:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  21bb1c:	00 
  21bb1d:	e8 ce f6 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21bb22:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21bb29:	00 
  21bb2a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  21bb31:	00 
  21bb32:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21bb37:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21bb3c:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  21bb41:	e8 8a 74 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21bb46:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  21bb4a:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  21bb4e:	24 01                	and    $0x1,%al
  21bb50:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21bb54:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  21bb59:	75 07                	jne    21bb62 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x92>
    TSC::detect_cpu_speed();
  21bb5b:	e8 b0 fc ff ff       	callq  21b810 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE>
  21bb60:	eb 3a                	jmp    21bb9c <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0xcc>
    log::info!("Enabling CPU timestamp counter..");
  21bb62:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21bb67:	48 8d 35 fa f9 01 00 	lea    0x1f9fa(%rip),%rsi        # 23b568 <memcmp+0x2828>
  21bb6e:	ba 01 00 00 00       	mov    $0x1,%edx
  21bb73:	48 8d 0d 26 59 fe ff 	lea    -0x1a6da(%rip),%rcx        # 2014a0 <str.2+0x60>
  21bb7a:	31 c0                	xor    %eax,%eax
  21bb7c:	41 89 c0             	mov    %eax,%r8d
  21bb7f:	e8 ac a9 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21bb84:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21bb89:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21bb8e:	48 8d 15 e3 f9 01 00 	lea    0x1f9e3(%rip),%rdx        # 23b578 <memcmp+0x2838>
  21bb95:	e8 e6 71 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21bb9a:	eb bf                	jmp    21bb5b <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x8b>
    let cpu_frequency = TSC::read_cpu_frequency();
  21bb9c:	e8 ef fb ff ff       	callq  21b790 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  21bba1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    log::info!("Enabled CPU TSC, cpu_frequency={}", cpu_frequency);
  21bba6:	48 c7 44 24 70 03 00 	movq   $0x3,0x70(%rsp)
  21bbad:	00 00 
  21bbaf:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  21bbb4:	48 8d 35 3d 47 fe ff 	lea    -0x1b8c3(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21bbbb:	e8 10 74 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21bbc0:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  21bbc4:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  21bbc8:	a8 01                	test   $0x1,%al
  21bbca:	75 09                	jne    21bbd5 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x105>
  21bbcc:	eb 00                	jmp    21bbce <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0xfe>
  21bbce:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  21bbd3:	eb 54                	jmp    21bc29 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x159>
  21bbd5:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  21bbdc:	00 
  21bbdd:	48 8b 3d 64 1f 02 00 	mov    0x21f64(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21bbe4:	0f b6 b4 24 df 00 00 	movzbl 0xdf(%rsp),%esi
  21bbeb:	00 
  21bbec:	e8 ff f5 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21bbf1:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  21bbf8:	00 
  21bbf9:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  21bc00:	00 
  21bc01:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21bc08:	00 
  21bc09:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  21bc0e:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  21bc15:	00 
  21bc16:	e8 b5 73 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21bc1b:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  21bc1f:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  21bc23:	24 01                	and    $0x1,%al
  21bc25:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  21bc29:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  21bc2e:	75 08                	jne    21bc38 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x168>
}
  21bc30:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  21bc37:	c3                   	retq   
    log::info!("Enabled CPU TSC, cpu_frequency={}", cpu_frequency);
  21bc38:	48 8d 44 24 68       	lea    0x68(%rsp),%rax
  21bc3d:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21bc44:	00 
  21bc45:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  21bc4c:	00 
  21bc4d:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  21bc54:	00 
  21bc55:	48 8b 35 3c 1f 02 00 	mov    0x21f3c(%rip),%rsi        # 23db98 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  21bc5c:	e8 df 39 ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21bc61:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21bc66:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21bc6b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21bc70:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21bc75:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  21bc7c:	00 
  21bc7d:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21bc84:	00 
  21bc85:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
  21bc8c:	00 
  21bc8d:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21bc94:	00 
  21bc95:	48 8d 35 14 f9 01 00 	lea    0x1f914(%rip),%rsi        # 23b5b0 <memcmp+0x2870>
  21bc9c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21bca2:	4c 89 c2             	mov    %r8,%rdx
  21bca5:	e8 86 a8 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21bcaa:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21bcaf:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21bcb6:	00 
  21bcb7:	48 8d 15 02 f9 01 00 	lea    0x1f902(%rip),%rdx        # 23b5c0 <memcmp+0x2880>
  21bcbe:	e8 bd 70 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21bcc3:	e9 68 ff ff ff       	jmpq   21bc30 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x160>
  21bcc8:	cc                   	int3   
  21bcc9:	cc                   	int3   
  21bcca:	cc                   	int3   
  21bccb:	cc                   	int3   
  21bccc:	cc                   	int3   
  21bccd:	cc                   	int3   
  21bcce:	cc                   	int3   
  21bccf:	cc                   	int3   

000000000021bcd0 <_ZN68_$LT$r3_kernel..cpu..tsc..TSCTicks$u20$as$u20$core..clone..Clone$GT$5clone17h8a1586d3bdd983c7E>:
#[derive(Clone, Copy)]
  21bcd0:	50                   	push   %rax
  21bcd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  21bcd5:	48 8b 07             	mov    (%rdi),%rax
  21bcd8:	59                   	pop    %rcx
  21bcd9:	c3                   	retq   
  21bcda:	cc                   	int3   
  21bcdb:	cc                   	int3   
  21bcdc:	cc                   	int3   
  21bcdd:	cc                   	int3   
  21bcde:	cc                   	int3   
  21bcdf:	cc                   	int3   

000000000021bce0 <_ZN9r3_kernel4acpi4init17haae37bb483bcdc2bE>:
pub mod lapic;
pub mod madt;
pub mod rsdt;

pub fn init() {
  21bce0:	50                   	push   %rax
    rsdt::setup_acpi();
  21bce1:	e8 ca 87 ff ff       	callq  2144b0 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E>
    madt::setup_madt();
  21bce6:	e8 b5 bd 00 00       	callq  227aa0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E>
}
  21bceb:	58                   	pop    %rax
  21bcec:	c3                   	retq   
  21bced:	cc                   	int3   
  21bcee:	cc                   	int3   
  21bcef:	cc                   	int3   

000000000021bcf0 <_ZN9r3_kernel4acpi23setup_smp_prerequisites17h1b6f5d6a5602a481E>:

pub fn setup_smp_prerequisites() {
  21bcf0:	48 83 ec 68          	sub    $0x68,%rsp
    // enable LAPIC for base processor.
    lapic::init_bsp_lapic();
  21bcf4:	e8 d7 a5 ff ff       	callq  2162d0 <_ZN9r3_kernel4acpi5lapic14init_bsp_lapic17had465614b1ec5fabE>

    assert_eq!(lapic::bsp_apic_enabled(), true);
  21bcf9:	e8 c2 a7 ff ff       	callq  2164c0 <_ZN9r3_kernel4acpi5lapic16bsp_apic_enabled17h7f7b1cbc16b1938dE>
  21bcfe:	24 01                	and    $0x1,%al
  21bd00:	88 44 24 26          	mov    %al,0x26(%rsp)
  21bd04:	48 8d 44 24 26       	lea    0x26(%rsp),%rax
  21bd09:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21bd0e:	48 8d 05 bd 57 fe ff 	lea    -0x1a843(%rip),%rax        # 2014d2 <str.2+0x92>
  21bd15:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21bd1a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21bd1f:	48 89 04 24          	mov    %rax,(%rsp)
  21bd23:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21bd28:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21bd2d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21bd32:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21bd37:	8a 00                	mov    (%rax),%al
  21bd39:	34 ff                	xor    $0xff,%al
  21bd3b:	a8 01                	test   $0x1,%al
  21bd3d:	75 05                	jne    21bd44 <_ZN9r3_kernel4acpi23setup_smp_prerequisites17h1b6f5d6a5602a481E+0x54>
}
  21bd3f:	48 83 c4 68          	add    $0x68,%rsp
  21bd43:	c3                   	retq   
  21bd44:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21bd49:	48 8b 34 24          	mov    (%rsp),%rsi
    assert_eq!(lapic::bsp_apic_enabled(), true);
  21bd4d:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  21bd52:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21bd59:	00 00 
  21bd5b:	4c 8d 05 96 f8 01 00 	lea    0x1f896(%rip),%r8        # 23b5f8 <memcmp+0x28b8>
  21bd62:	31 ff                	xor    %edi,%edi
  21bd64:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  21bd69:	e8 22 4a 00 00       	callq  220790 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  21bd6e:	0f 0b                	ud2    

000000000021bd70 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>:
    fn from(t: T) -> T {
  21bd70:	48 83 ec 10          	sub    $0x10,%rsp
  21bd74:	48 89 f2             	mov    %rsi,%rdx
  21bd77:	48 89 f8             	mov    %rdi,%rax
  21bd7a:	48 89 04 24          	mov    %rax,(%rsp)
  21bd7e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21bd83:	48 83 c4 10          	add    $0x10,%rsp
  21bd87:	c3                   	retq   
  21bd88:	cc                   	int3   
  21bd89:	cc                   	int3   
  21bd8a:	cc                   	int3   
  21bd8b:	cc                   	int3   
  21bd8c:	cc                   	int3   
  21bd8d:	cc                   	int3   
  21bd8e:	cc                   	int3   
  21bd8f:	cc                   	int3   

000000000021bd90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>:
    fn into(self) -> U {
  21bd90:	48 83 ec 28          	sub    $0x28,%rsp
  21bd94:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21bd99:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  21bd9e:	e8 4d 2a 00 00       	callq  21e7f0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  21bda3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21bda8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21bdad:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21bdb2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21bdb7:	48 83 c4 28          	add    $0x28,%rsp
  21bdbb:	c3                   	retq   
  21bdbc:	cc                   	int3   
  21bdbd:	cc                   	int3   
  21bdbe:	cc                   	int3   
  21bdbf:	cc                   	int3   

000000000021bdc0 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>:
    pub fn pad_to_align(&self) -> Layout {
  21bdc0:	48 83 ec 68          	sub    $0x68,%rsp
  21bdc4:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21bdc9:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        let pad = self.padding_needed_for(self.align());
  21bdce:	e8 cd 02 00 00       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21bdd3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21bdd8:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21bddd:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21bde2:	e8 99 01 00 00       	callq  21bf80 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>
  21bde7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21bdec:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21bdf1:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let new_size = self.size() + pad;
  21bdf6:	e8 95 02 00 00       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21bdfb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21be00:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21be05:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21be0a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21be0f:	48 01 c8             	add    %rcx,%rax
  21be12:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21be17:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        Layout::from_size_align(new_size, self.align()).unwrap()
  21be1c:	e8 7f 02 00 00       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21be21:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21be26:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21be2b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21be30:	e8 3b 00 00 00       	callq  21be70 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E>
  21be35:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21be3a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21be3f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21be44:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21be49:	48 8d 15 c0 f7 01 00 	lea    0x1f7c0(%rip),%rdx        # 23b610 <memcmp+0x28d0>
  21be50:	e8 3b 38 01 00       	callq  22f690 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>
  21be55:	48 89 04 24          	mov    %rax,(%rsp)
  21be59:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21be5e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21be63:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21be67:	48 83 c4 68          	add    $0x68,%rsp
  21be6b:	c3                   	retq   
  21be6c:	cc                   	int3   
  21be6d:	cc                   	int3   
  21be6e:	cc                   	int3   
  21be6f:	cc                   	int3   

000000000021be70 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
  21be70:	48 83 ec 68          	sub    $0x68,%rsp
  21be74:	48 89 f1             	mov    %rsi,%rcx
  21be77:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21be7c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21be81:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21be86:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21be8b:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21be90:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  21be95:	48 89 c8             	mov    %rcx,%rax
  21be98:	48 d1 e8             	shr    %rax
  21be9b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  21bea2:	55 55 55 
  21bea5:	48 21 d0             	and    %rdx,%rax
  21bea8:	48 29 c1             	sub    %rax,%rcx
  21beab:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  21beb2:	33 33 33 
  21beb5:	48 89 c8             	mov    %rcx,%rax
  21beb8:	48 21 d0             	and    %rdx,%rax
  21bebb:	48 c1 e9 02          	shr    $0x2,%rcx
  21bebf:	48 21 d1             	and    %rdx,%rcx
  21bec2:	48 01 c8             	add    %rcx,%rax
  21bec5:	48 89 c1             	mov    %rax,%rcx
  21bec8:	48 c1 e9 04          	shr    $0x4,%rcx
  21becc:	48 01 c8             	add    %rcx,%rax
  21becf:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  21bed6:	0f 0f 0f 
  21bed9:	48 21 c8             	and    %rcx,%rax
  21bedc:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  21bee3:	01 01 01 
  21bee6:	48 0f af c1          	imul   %rcx,%rax
  21beea:	48 c1 e8 38          	shr    $0x38,%rax
  21beee:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21bef3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
        #[must_use]
        #[stable(feature = "rust1", since = "1.0.0")]
        #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        #[inline(always)]
        pub const fn is_power_of_two(self) -> bool {
            self.count_ones() == 1
  21bef8:	83 f8 01             	cmp    $0x1,%eax
  21befb:	0f 94 c0             	sete   %al
  21befe:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21bf02:	8a 44 24 2f          	mov    0x2f(%rsp),%al
        if !align.is_power_of_two() {
  21bf06:	34 ff                	xor    $0xff,%al
  21bf08:	a8 01                	test   $0x1,%al
  21bf0a:	75 1f                	jne    21bf2b <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xbb>
  21bf0c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21bf11:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        if size > usize::MAX - (align - 1) {
  21bf16:	48 83 ea 01          	sub    $0x1,%rdx
  21bf1a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  21bf21:	48 29 d1             	sub    %rdx,%rcx
  21bf24:	48 39 c8             	cmp    %rcx,%rax
  21bf27:	77 35                	ja     21bf5e <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xee>
  21bf29:	eb 18                	jmp    21bf43 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xd3>
            return Err(LayoutError);
  21bf2b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21bf32:	00 00 
    }
  21bf34:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21bf39:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21bf3e:	48 83 c4 68          	add    $0x68,%rsp
  21bf42:	c3                   	retq   
  21bf43:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21bf48:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  21bf4d:	e8 ee 00 00 00       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21bf52:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21bf57:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21bf5c:	eb 0b                	jmp    21bf69 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xf9>
            return Err(LayoutError);
  21bf5e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21bf65:	00 00 
  21bf67:	eb cb                	jmp    21bf34 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xc4>
  21bf69:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21bf6e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  21bf73:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21bf78:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  21bf7d:	eb b5                	jmp    21bf34 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xc4>
  21bf7f:	cc                   	int3   

000000000021bf80 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>:
    pub const fn padding_needed_for(&self, align: usize) -> usize {
  21bf80:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  21bf87:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21bf8c:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21bf91:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        let len = self.size();
  21bf96:	e8 f5 00 00 00       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21bf9b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21bfa0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21bfa5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21bfaa:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21bfaf:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21bfb4:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
            intrinsics::wrapping_add(self, rhs)
  21bfb9:	48 01 c8             	add    %rcx,%rax
  21bfbc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21bfc1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21bfc6:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21bfcd:	00 
  21bfce:	48 c7 84 24 90 00 00 	movq   $0x1,0x90(%rsp)
  21bfd5:	00 01 00 00 00 
            intrinsics::wrapping_sub(self, rhs)
  21bfda:	48 83 e8 01          	sub    $0x1,%rax
  21bfde:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21bfe3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21bfe8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21bfed:	48 c7 84 24 80 00 00 	movq   $0x1,0x80(%rsp)
  21bff4:	00 01 00 00 00 
  21bff9:	48 83 e8 01          	sub    $0x1,%rax
  21bffd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c002:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21c007:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21c00c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
  21c011:	48 83 f2 ff          	xor    $0xffffffffffffffff,%rdx
  21c015:	48 21 d0             	and    %rdx,%rax
  21c018:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c01d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c022:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21c027:	48 29 c8             	sub    %rcx,%rax
  21c02a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c02f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21c034:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  21c03b:	c3                   	retq   
  21c03c:	cc                   	int3   
  21c03d:	cc                   	int3   
  21c03e:	cc                   	int3   
  21c03f:	cc                   	int3   

000000000021c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
  21c040:	48 83 ec 38          	sub    $0x38,%rsp
  21c044:	48 89 34 24          	mov    %rsi,(%rsp)
  21c048:	48 89 f8             	mov    %rdi,%rax
  21c04b:	48 8b 3c 24          	mov    (%rsp),%rdi
  21c04f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c054:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21c059:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
  21c05e:	e8 4d 29 00 00       	callq  21e9b0 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h5c6e94fe23e826b3E>
  21c063:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c068:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c06d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21c072:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21c077:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  21c07c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21c081:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21c086:	48 83 c4 38          	add    $0x38,%rsp
  21c08a:	c3                   	retq   
  21c08b:	cc                   	int3   
  21c08c:	cc                   	int3   
  21c08d:	cc                   	int3   
  21c08e:	cc                   	int3   
  21c08f:	cc                   	int3   

000000000021c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>:
    pub const fn size(&self) -> usize {
  21c090:	50                   	push   %rax
  21c091:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.size_
  21c095:	48 8b 07             	mov    (%rdi),%rax
    }
  21c098:	59                   	pop    %rcx
  21c099:	c3                   	retq   
  21c09a:	cc                   	int3   
  21c09b:	cc                   	int3   
  21c09c:	cc                   	int3   
  21c09d:	cc                   	int3   
  21c09e:	cc                   	int3   
  21c09f:	cc                   	int3   

000000000021c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>:
    pub const fn align(&self) -> usize {
  21c0a0:	48 83 ec 18          	sub    $0x18,%rsp
  21c0a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.align_.get()
  21c0a9:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  21c0ad:	e8 1e 29 00 00       	callq  21e9d0 <_ZN4core3num7nonzero12NonZeroUsize3get17h423dfcaad4de4b60E>
  21c0b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c0b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21c0bc:	48 83 c4 18          	add    $0x18,%rsp
  21c0c0:	c3                   	retq   
  21c0c1:	cc                   	int3   
  21c0c2:	cc                   	int3   
  21c0c3:	cc                   	int3   
  21c0c4:	cc                   	int3   
  21c0c5:	cc                   	int3   
  21c0c6:	cc                   	int3   
  21c0c7:	cc                   	int3   
  21c0c8:	cc                   	int3   
  21c0c9:	cc                   	int3   
  21c0ca:	cc                   	int3   
  21c0cb:	cc                   	int3   
  21c0cc:	cc                   	int3   
  21c0cd:	cc                   	int3   
  21c0ce:	cc                   	int3   
  21c0cf:	cc                   	int3   

000000000021c0d0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>:
    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {
  21c0d0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  21c0d7:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21c0dc:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  21c0e1:	48 89 f8             	mov    %rdi,%rax
  21c0e4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21c0e9:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c0ee:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c0f3:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  21c0fa:	00 
  21c0fb:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  21c102:	00 
        let padded_size = self.size() + self.padding_needed_for(self.align());
  21c103:	e8 88 ff ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21c108:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21c10d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21c112:	e8 89 ff ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21c117:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c11c:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21c121:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21c126:	e8 55 fe ff ff       	callq  21bf80 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>
  21c12b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21c130:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  21c135:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21c13a:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  21c13f:	48 01 c7             	add    %rax,%rdi
  21c142:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21c147:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  21c14e:	00 
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;
  21c14f:	e8 6c e9 00 00       	callq  22aac0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E>
  21c154:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c159:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21c15e:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  21c163:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21c168:	e8 b3 4b ff ff       	callq  210d20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE>
  21c16d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c172:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21c177:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21c17c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21c181:	e8 aa f7 fe ff       	callq  20b930 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE>
  21c186:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21c18d:	00 
  21c18e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21c195:	00 
  21c196:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21c19d:	00 
  21c19e:	48 85 c0             	test   %rax,%rax
  21c1a1:	74 06                	je     21c1a9 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0xd9>
  21c1a3:	eb 00                	jmp    21c1a5 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0xd5>
  21c1a5:	eb 30                	jmp    21c1d7 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x107>
  21c1a7:	0f 0b                	ud2    
  21c1a9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21c1ae:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21c1b5:	00 
  21c1b6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c1bb:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21c1c2:	00 
  21c1c3:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21c1ca:	00 
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
  21c1cb:	e8 d0 fe ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21c1d0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c1d5:	eb 19                	jmp    21c1f0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x120>
  21c1d7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;
  21c1dc:	e8 5f ec fe ff       	callq  20ae40 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h9b93c8b5a9bc9b46E>
    }
  21c1e1:	eb 00                	jmp    21c1e3 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x113>
  21c1e3:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21c1e8:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  21c1ef:	c3                   	retq   
  21c1f0:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21c1f5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
  21c1fa:	e8 41 fe ff ff       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21c1ff:	48 89 04 24          	mov    %rax,(%rsp)
  21c203:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c208:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21c20d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21c212:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c217:	48 8b 34 24          	mov    (%rsp),%rsi
  21c21b:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  21c222:	00 
  21c223:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  21c22a:	00 
  21c22b:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  21c232:	00 
  21c233:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  21c23a:	00 
  21c23b:	48 89 08             	mov    %rcx,(%rax)
  21c23e:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21c245:	00 
  21c246:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21c24a:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  21c251:	00 
  21c252:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  21c256:	eb 8b                	jmp    21c1e3 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x113>
  21c258:	cc                   	int3   
  21c259:	cc                   	int3   
  21c25a:	cc                   	int3   
  21c25b:	cc                   	int3   
  21c25c:	cc                   	int3   
  21c25d:	cc                   	int3   
  21c25e:	cc                   	int3   
  21c25f:	cc                   	int3   

000000000021c260 <_ZN4core5alloc6layout6Layout8dangling17he0ad074fb5415605E>:
    pub const fn dangling(&self) -> NonNull<u8> {
  21c260:	48 83 ec 18          	sub    $0x18,%rsp
  21c264:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
  21c269:	e8 32 fe ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21c26e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c273:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21c278:	e8 b3 71 01 00       	callq  233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  21c27d:	48 89 04 24          	mov    %rax,(%rsp)
  21c281:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21c285:	48 83 c4 18          	add    $0x18,%rsp
  21c289:	c3                   	retq   
  21c28a:	cc                   	int3   
  21c28b:	cc                   	int3   
  21c28c:	cc                   	int3   
  21c28d:	cc                   	int3   
  21c28e:	cc                   	int3   
  21c28f:	cc                   	int3   

000000000021c290 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17hcf873c6950f0943fE>:
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
  21c290:	50                   	push   %rax
  21c291:	48 89 3c 24          	mov    %rdi,(%rsp)
  21c295:	48 8b 07             	mov    (%rdi),%rax
  21c298:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  21c29c:	59                   	pop    %rcx
  21c29d:	c3                   	retq   
  21c29e:	cc                   	int3   
  21c29f:	cc                   	int3   

000000000021c2a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7fce53aeb6f9a2ccE>:
    pub const fn is_null(self) -> bool {
  21c2a0:	48 83 ec 18          	sub    $0x18,%rsp
  21c2a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21c2a9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c2ae:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  21c2b3:	31 c0                	xor    %eax,%eax
  21c2b5:	89 c6                	mov    %eax,%esi
  21c2b7:	e8 64 7c 01 00       	callq  233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21c2bc:	88 44 24 07          	mov    %al,0x7(%rsp)
  21c2c0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21c2c4:	24 01                	and    $0x1,%al
  21c2c6:	0f b6 c0             	movzbl %al,%eax
  21c2c9:	48 83 c4 18          	add    $0x18,%rsp
  21c2cd:	c3                   	retq   
  21c2ce:	cc                   	int3   
  21c2cf:	cc                   	int3   

000000000021c2d0 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E>:
        0x00,
    ],
];

#[inline]
pub fn get_bit_for_char(ch: u8, pos: usize) -> u8 {
  21c2d0:	48 83 ec 18          	sub    $0x18,%rsp
  21c2d4:	40 88 f8             	mov    %dil,%al
  21c2d7:	88 44 24 0d          	mov    %al,0xd(%rsp)
  21c2db:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21c2df:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    ch & (0x80 >> pos)
  21c2e4:	48 89 f0             	mov    %rsi,%rax
  21c2e7:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  21c2eb:	48 83 f8 00          	cmp    $0x0,%rax
  21c2ef:	0f 95 c0             	setne  %al
  21c2f2:	40 88 f1             	mov    %sil,%cl
  21c2f5:	80 e1 07             	and    $0x7,%cl
  21c2f8:	b2 80                	mov    $0x80,%dl
  21c2fa:	d2 ea                	shr    %cl,%dl
  21c2fc:	88 54 24 0e          	mov    %dl,0xe(%rsp)
  21c300:	a8 01                	test   $0x1,%al
  21c302:	75 0f                	jne    21c313 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E+0x43>
  21c304:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21c308:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21c30c:	20 c8                	and    %cl,%al
}
  21c30e:	48 83 c4 18          	add    $0x18,%rsp
  21c312:	c3                   	retq   
    ch & (0x80 >> pos)
  21c313:	48 8d 3d 66 62 fe ff 	lea    -0x19d9a(%rip),%rdi        # 202580 <str.0>
  21c31a:	48 8d 15 07 f3 01 00 	lea    0x1f307(%rip),%rdx        # 23b628 <memcmp+0x28e8>
  21c321:	be 24 00 00 00       	mov    $0x24,%esi
  21c326:	e8 c5 98 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21c32b:	0f 0b                	ud2    
  21c32d:	cc                   	int3   
  21c32e:	cc                   	int3   
  21c32f:	cc                   	int3   

000000000021c330 <_ZN9r3_kernel3cpu8segments4lgdt17h8d27df65dbd42b21E>:
fn lgdt(ptr: &GDTPointer) {
  21c330:	50                   	push   %rax
  21c331:	48 89 3c 24          	mov    %rdi,(%rsp)
        asm!(
  21c335:	0f 01 17             	lgdt   (%rdi)
}
  21c338:	58                   	pop    %rax
  21c339:	c3                   	retq   
  21c33a:	cc                   	int3   
  21c33b:	cc                   	int3   
  21c33c:	cc                   	int3   
  21c33d:	cc                   	int3   
  21c33e:	cc                   	int3   
  21c33f:	cc                   	int3   

000000000021c340 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE>:
fn special_set_cs(value: u16) {
  21c340:	48 83 ec 18          	sub    $0x18,%rsp
  21c344:	66 89 f8             	mov    %di,%ax
  21c347:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
            sel = in(reg) u64::from(value),
  21c34c:	0f b7 f8             	movzwl %ax,%edi
  21c34f:	e8 3c a6 fe ff       	callq  206990 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h6e8530f8c2c6f51bE>
  21c354:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c359:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        asm!(
  21c35e:	50                   	push   %rax
  21c35f:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # 21c369 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE+0x29>
  21c366:	50                   	push   %rax
  21c367:	48 cb                	lretq  
}
  21c369:	48 83 c4 18          	add    $0x18,%rsp
  21c36d:	c3                   	retq   
  21c36e:	cc                   	int3   
  21c36f:	cc                   	int3   

000000000021c370 <_ZN9r3_kernel3cpu8segments8load_tss17ha24a70cff6842c90E>:
fn load_tss(value: u16) {
  21c370:	48 83 ec 02          	sub    $0x2,%rsp
  21c374:	66 89 f8             	mov    %di,%ax
  21c377:	66 89 04 24          	mov    %ax,(%rsp)
        asm! (
  21c37b:	0f 00 d8             	ltr    %ax
}
  21c37e:	48 83 c4 02          	add    $0x2,%rsp
  21c382:	c3                   	retq   
  21c383:	cc                   	int3   
  21c384:	cc                   	int3   
  21c385:	cc                   	int3   
  21c386:	cc                   	int3   
  21c387:	cc                   	int3   
  21c388:	cc                   	int3   
  21c389:	cc                   	int3   
  21c38a:	cc                   	int3   
  21c38b:	cc                   	int3   
  21c38c:	cc                   	int3   
  21c38d:	cc                   	int3   
  21c38e:	cc                   	int3   
  21c38f:	cc                   	int3   

000000000021c390 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>:
    pub fn new(index: u16, ring: PrivilegeLevel) -> SegmentSelector {
  21c390:	48 83 ec 0a          	sub    $0xa,%rsp
  21c394:	40 88 f1             	mov    %sil,%cl
  21c397:	88 4c 24 01          	mov    %cl,0x1(%rsp)
  21c39b:	66 89 f8             	mov    %di,%ax
  21c39e:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
  21c3a3:	88 4c 24 09          	mov    %cl,0x9(%rsp)
        SegmentSelector(index << 3 | (ring as u16))
  21c3a7:	66 c1 e0 03          	shl    $0x3,%ax
  21c3ab:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  21c3b0:	66 8b 44 24 02       	mov    0x2(%rsp),%ax
  21c3b5:	8a 4c 24 01          	mov    0x1(%rsp),%cl
  21c3b9:	0f b6 c9             	movzbl %cl,%ecx
  21c3bc:	66 09 c8             	or     %cx,%ax
  21c3bf:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
    }
  21c3c4:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  21c3c9:	48 83 c4 0a          	add    $0xa,%rsp
  21c3cd:	c3                   	retq   
  21c3ce:	cc                   	int3   
  21c3cf:	cc                   	int3   

000000000021c3d0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>:
    pub fn set(&self, value: u16) {
  21c3d0:	48 83 ec 28          	sub    $0x28,%rsp
  21c3d4:	66 89 f0             	mov    %si,%ax
  21c3d7:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c3dc:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21c3e1:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
        match self {
  21c3e6:	0f b6 07             	movzbl (%rdi),%eax
  21c3e9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c3ee:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c3f3:	48 8d 0d aa 61 fe ff 	lea    -0x19e56(%rip),%rcx        # 2025a4 <str.0+0x24>
  21c3fa:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21c3fe:	48 01 c8             	add    %rcx,%rax
  21c401:	ff e0                	jmpq   *%rax
  21c403:	0f 0b                	ud2    
  21c405:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
            SegmentRegister::CS => special_set_cs(value),
  21c40a:	0f b7 f8             	movzwl %ax,%edi
  21c40d:	e8 2e ff ff ff       	callq  21c340 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE>
  21c412:	eb 30                	jmp    21c444 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21c414:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21c419:	66 8e d0             	mov    %ax,%ss
  21c41c:	eb 26                	jmp    21c444 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21c41e:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21c423:	66 8e d8             	mov    %ax,%ds
  21c426:	eb 1c                	jmp    21c444 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21c428:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21c42d:	66 8e c0             	mov    %ax,%es
  21c430:	eb 12                	jmp    21c444 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21c432:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21c437:	66 8e e0             	mov    %ax,%fs
  21c43a:	eb 08                	jmp    21c444 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21c43c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21c441:	66 8e e8             	mov    %ax,%gs
    }
  21c444:	48 83 c4 28          	add    $0x28,%rsp
  21c448:	c3                   	retq   
  21c449:	cc                   	int3   
  21c44a:	cc                   	int3   
  21c44b:	cc                   	int3   
  21c44c:	cc                   	int3   
  21c44d:	cc                   	int3   
  21c44e:	cc                   	int3   
  21c44f:	cc                   	int3   

000000000021c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>:
    pub fn get(&self) -> u16 {
  21c450:	48 83 ec 18          	sub    $0x18,%rsp
  21c454:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  21c459:	0f b6 07             	movzbl (%rdi),%eax
  21c45c:	48 89 04 24          	mov    %rax,(%rsp)
  21c460:	48 8b 04 24          	mov    (%rsp),%rax
  21c464:	48 8d 0d 51 61 fe ff 	lea    -0x19eaf(%rip),%rcx        # 2025bc <str.0+0x3c>
  21c46b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21c46f:	48 01 c8             	add    %rcx,%rax
  21c472:	ff e0                	jmpq   *%rax
  21c474:	0f 0b                	ud2    
                asm!(
  21c476:	8c c8                	mov    %cs,%eax
  21c478:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c47d:	eb 2b                	jmp    21c4aa <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21c47f:	8c d0                	mov    %ss,%eax
  21c481:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c486:	eb 22                	jmp    21c4aa <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21c488:	8c d8                	mov    %ds,%eax
  21c48a:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c48f:	eb 19                	jmp    21c4aa <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21c491:	8c c0                	mov    %es,%eax
  21c493:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c498:	eb 10                	jmp    21c4aa <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21c49a:	8c e0                	mov    %fs,%eax
  21c49c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21c4a1:	eb 07                	jmp    21c4aa <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21c4a3:	8c e8                	mov    %gs,%eax
  21c4a5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    }
  21c4aa:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  21c4af:	48 83 c4 18          	add    $0x18,%rsp
  21c4b3:	c3                   	retq   
  21c4b4:	cc                   	int3   
  21c4b5:	cc                   	int3   
  21c4b6:	cc                   	int3   
  21c4b7:	cc                   	int3   
  21c4b8:	cc                   	int3   
  21c4b9:	cc                   	int3   
  21c4ba:	cc                   	int3   
  21c4bb:	cc                   	int3   
  21c4bc:	cc                   	int3   
  21c4bd:	cc                   	int3   
  21c4be:	cc                   	int3   
  21c4bf:	cc                   	int3   

000000000021c4c0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E>:
    pub fn assert_reg(&self, value: u16) {
  21c4c0:	48 83 ec 78          	sub    $0x78,%rsp
  21c4c4:	66 89 f0             	mov    %si,%ax
  21c4c7:	66 89 44 24 14       	mov    %ax,0x14(%rsp)
  21c4cc:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let read_value = self.get();
  21c4d1:	e8 7a ff ff ff       	callq  21c450 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  21c4d6:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
        assert_eq!(read_value, value);
  21c4db:	48 8d 44 24 16       	lea    0x16(%rsp),%rax
  21c4e0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c4e5:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  21c4ea:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c4ef:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21c4f4:	48 89 04 24          	mov    %rax,(%rsp)
  21c4f8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c4fd:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c502:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21c507:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21c50c:	66 8b 00             	mov    (%rax),%ax
  21c50f:	66 3b 01             	cmp    (%rcx),%ax
  21c512:	0f 94 c0             	sete   %al
  21c515:	34 ff                	xor    $0xff,%al
  21c517:	a8 01                	test   $0x1,%al
  21c519:	75 05                	jne    21c520 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E+0x60>
    }
  21c51b:	48 83 c4 78          	add    $0x78,%rsp
  21c51f:	c3                   	retq   
  21c520:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c525:	48 8b 34 24          	mov    (%rsp),%rsi
        assert_eq!(read_value, value);
  21c529:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  21c52e:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21c535:	00 00 
  21c537:	4c 8d 05 02 f1 01 00 	lea    0x1f102(%rip),%r8        # 23b640 <memcmp+0x2900>
  21c53e:	31 ff                	xor    %edi,%edi
  21c540:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  21c545:	e8 46 41 00 00       	callq  220690 <_ZN4core9panicking13assert_failed17h3edc834fd7d50ce8E>
  21c54a:	0f 0b                	ud2    
  21c54c:	cc                   	int3   
  21c54d:	cc                   	int3   
  21c54e:	cc                   	int3   
  21c54f:	cc                   	int3   

000000000021c550 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17h9900b46609a50aa1E>:
    pub fn empty() -> Self {
  21c550:	48 83 ec 68          	sub    $0x68,%rsp
  21c554:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c559:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            privilege_stack_table: [0; 3],
  21c55e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21c563:	31 f6                	xor    %esi,%esi
  21c565:	ba 18 00 00 00       	mov    $0x18,%edx
  21c56a:	e8 a1 c7 01 00       	callq  238d10 <memset>
            interrupt_stack_table: [0; 7],
  21c56f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  21c574:	31 f6                	xor    %esi,%esi
  21c576:	ba 38 00 00 00       	mov    $0x38,%edx
  21c57b:	e8 90 c7 01 00       	callq  238d10 <memset>
  21c580:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        TaskStateSegment {
  21c585:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  21c58b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21c590:	48 89 47 04          	mov    %rax,0x4(%rdi)
  21c594:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21c599:	48 89 47 0c          	mov    %rax,0xc(%rdi)
  21c59d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c5a2:	48 89 47 14          	mov    %rax,0x14(%rdi)
  21c5a6:	48 c7 47 1c 00 00 00 	movq   $0x0,0x1c(%rdi)
  21c5ad:	00 
  21c5ae:	48 83 c7 24          	add    $0x24,%rdi
  21c5b2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  21c5b7:	ba 38 00 00 00       	mov    $0x38,%edx
  21c5bc:	e8 2f c7 01 00       	callq  238cf0 <memcpy>
  21c5c1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21c5c6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c5cb:	48 c7 47 5c 00 00 00 	movq   $0x0,0x5c(%rdi)
  21c5d2:	00 
  21c5d3:	66 c7 47 64 00 00    	movw   $0x0,0x64(%rdi)
  21c5d9:	66 c7 47 66 00 00    	movw   $0x0,0x66(%rdi)
    }
  21c5df:	48 83 c4 68          	add    $0x68,%rsp
  21c5e3:	c3                   	retq   
  21c5e4:	cc                   	int3   
  21c5e5:	cc                   	int3   
  21c5e6:	cc                   	int3   
  21c5e7:	cc                   	int3   
  21c5e8:	cc                   	int3   
  21c5e9:	cc                   	int3   
  21c5ea:	cc                   	int3   
  21c5eb:	cc                   	int3   
  21c5ec:	cc                   	int3   
  21c5ed:	cc                   	int3   
  21c5ee:	cc                   	int3   
  21c5ef:	cc                   	int3   

000000000021c5f0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE>:
    pub fn new(tss: &'static TaskStateSegment) -> Self {
  21c5f0:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  21c5f7:	48 89 bc 24 70 01 00 	mov    %rdi,0x170(%rsp)
  21c5fe:	00 
        let mut low: u64 = SEGMENT_PRESENT;
  21c5ff:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
  21c606:	80 00 00 
  21c609:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        let tss_addr = (tss as *const _) as u64;
  21c60e:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        low.set_bits(16..40, tss_addr.get_bits(0..24));
  21c613:	48 c7 44 24 70 10 00 	movq   $0x10,0x70(%rsp)
  21c61a:	00 00 
  21c61c:	48 c7 44 24 78 28 00 	movq   $0x28,0x78(%rsp)
  21c623:	00 00 
  21c625:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  21c62c:	00 00 00 00 00 
  21c631:	48 c7 84 24 88 00 00 	movq   $0x18,0x88(%rsp)
  21c638:	00 18 00 00 00 
  21c63d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  21c644:	00 
  21c645:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  21c64c:	00 
  21c64d:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21c652:	e8 d9 37 00 00       	callq  21fe30 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21c657:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21c65c:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  21c661:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21c666:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  21c66b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21c670:	e8 db 39 00 00       	callq  220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        low.set_bits(56..64, tss_addr.get_bits(24..32));
  21c675:	48 c7 84 24 90 00 00 	movq   $0x38,0x90(%rsp)
  21c67c:	00 38 00 00 00 
  21c681:	48 c7 84 24 98 00 00 	movq   $0x40,0x98(%rsp)
  21c688:	00 40 00 00 00 
  21c68d:	48 c7 84 24 a0 00 00 	movq   $0x18,0xa0(%rsp)
  21c694:	00 18 00 00 00 
  21c699:	48 c7 84 24 a8 00 00 	movq   $0x20,0xa8(%rsp)
  21c6a0:	00 20 00 00 00 
  21c6a5:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  21c6ac:	00 
  21c6ad:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  21c6b4:	00 
  21c6b5:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21c6ba:	e8 71 37 00 00       	callq  21fe30 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21c6bf:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21c6c4:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21c6c9:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  21c6d0:	00 
  21c6d1:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  21c6d8:	00 
  21c6d9:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21c6de:	e8 6d 39 00 00       	callq  220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        low.set_bits(0..16, (mem::size_of::<TaskStateSegment>() - 1) as u64);
  21c6e3:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  21c6ea:	00 00 00 00 00 
  21c6ef:	48 c7 84 24 b8 00 00 	movq   $0x10,0xb8(%rsp)
  21c6f6:	00 10 00 00 00 
  21c6fb:	b8 68 00 00 00       	mov    $0x68,%eax
  21c700:	48 83 e8 01          	sub    $0x1,%rax
  21c704:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c709:	0f 92 c0             	setb   %al
  21c70c:	a8 01                	test   $0x1,%al
  21c70e:	75 21                	jne    21c731 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x141>
  21c710:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21c715:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  21c71c:	00 
  21c71d:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  21c724:	00 
  21c725:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21c72a:	e8 21 39 00 00       	callq  220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
  21c72f:	eb 1a                	jmp    21c74b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x15b>
  21c731:	48 8d 3d b8 5e fe ff 	lea    -0x1a148(%rip),%rdi        # 2025f0 <str.0>
  21c738:	48 8d 15 19 ef 01 00 	lea    0x1ef19(%rip),%rdx        # 23b658 <memcmp+0x2918>
  21c73f:	be 21 00 00 00       	mov    $0x21,%esi
  21c744:	e8 a7 94 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21c749:	0f 0b                	ud2    
        low.set_bits(40..44, 0b1001);
  21c74b:	48 c7 84 24 c0 00 00 	movq   $0x28,0xc0(%rsp)
  21c752:	00 28 00 00 00 
  21c757:	48 c7 84 24 c8 00 00 	movq   $0x2c,0xc8(%rsp)
  21c75e:	00 2c 00 00 00 
  21c763:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  21c76a:	00 
  21c76b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21c772:	00 
  21c773:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21c778:	b9 09 00 00 00       	mov    $0x9,%ecx
  21c77d:	e8 ce 38 00 00       	callq  220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        let mut high = 0;
  21c782:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  21c789:	00 00 00 00 00 
        high.set_bits(0..32, tss_addr.get_bits(32..64));
  21c78e:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  21c795:	00 00 00 00 00 
  21c79a:	48 c7 84 24 e0 00 00 	movq   $0x20,0xe0(%rsp)
  21c7a1:	00 20 00 00 00 
  21c7a6:	48 c7 84 24 e8 00 00 	movq   $0x20,0xe8(%rsp)
  21c7ad:	00 20 00 00 00 
  21c7b2:	48 c7 84 24 f0 00 00 	movq   $0x40,0xf0(%rsp)
  21c7b9:	00 40 00 00 00 
  21c7be:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  21c7c5:	00 
  21c7c6:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  21c7cd:	00 
  21c7ce:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21c7d3:	e8 58 36 00 00       	callq  21fe30 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21c7d8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21c7dd:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21c7e2:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  21c7e9:	00 
  21c7ea:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  21c7f1:	00 
  21c7f2:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  21c7f9:	00 
  21c7fa:	e8 51 38 00 00       	callq  220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  21c7ff:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  21c806:	00 04 00 00 00 
  21c80b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21c812:	00 
  21c813:	48 8d 35 de 3a fe ff 	lea    -0x1c522(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21c81a:	e8 b1 67 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21c81f:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21c823:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21c827:	a8 01                	test   $0x1,%al
  21c829:	75 0c                	jne    21c837 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x247>
  21c82b:	eb 00                	jmp    21c82d <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x23d>
  21c82d:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  21c834:	00 
  21c835:	eb 5a                	jmp    21c891 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2a1>
  21c837:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  21c83e:	00 
  21c83f:	48 8b 3d 02 13 02 00 	mov    0x21302(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21c846:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  21c84d:	00 
  21c84e:	e8 9d e9 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21c853:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  21c85a:	00 
  21c85b:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  21c862:	00 
  21c863:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  21c86a:	00 
  21c86b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21c872:	00 
  21c873:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  21c87a:	00 
  21c87b:	e8 50 67 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21c880:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  21c884:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  21c888:	24 01                	and    $0x1,%al
  21c88a:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  21c891:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  21c898:	01 
  21c899:	75 29                	jne    21c8c4 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2d4>
        TaskStateDescriptor { high, low }
  21c89b:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  21c8a2:	00 
  21c8a3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21c8a8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21c8ad:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    }
  21c8b2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21c8b7:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21c8bc:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  21c8c3:	c3                   	retq   
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  21c8c4:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  21c8cb:	00 
  21c8cc:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21c8d3:	00 
  21c8d4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  21c8d9:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21c8e0:	00 
  21c8e1:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  21c8e8:	00 
  21c8e9:	48 89 bc 24 78 01 00 	mov    %rdi,0x178(%rsp)
  21c8f0:	00 
  21c8f1:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  21c8f8:	00 
  21c8f9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c8fe:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21c905:	00 
  21c906:	48 8b 35 43 12 02 00 	mov    0x21243(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21c90d:	e8 2e 2d ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21c912:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c917:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21c91c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21c921:	48 8b 35 28 12 02 00 	mov    0x21228(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21c928:	e8 13 2d ff ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21c92d:	48 89 04 24          	mov    %rax,(%rsp)
  21c931:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c936:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21c93b:	48 8b 0c 24          	mov    (%rsp),%rcx
  21c93f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21c944:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21c949:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  21c950:	00 
  21c951:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
  21c958:	00 
  21c959:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  21c960:	00 
  21c961:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21c968:	00 
  21c969:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  21c970:	00 
  21c971:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  21c978:	00 
  21c979:	48 8d 35 f0 ec 01 00 	lea    0x1ecf0(%rip),%rsi        # 23b670 <memcmp+0x2930>
  21c980:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  21c986:	4c 89 c2             	mov    %r8,%rdx
  21c989:	e8 a2 9b fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21c98e:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  21c995:	00 
  21c996:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  21c99d:	00 
  21c99e:	48 8d 15 eb ec 01 00 	lea    0x1eceb(%rip),%rdx        # 23b690 <memcmp+0x2950>
  21c9a5:	e8 d6 63 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21c9aa:	e9 ec fe ff ff       	jmpq   21c89b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2ab>
  21c9af:	cc                   	int3   

000000000021c9b0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17h3d3710681a360ac2E>:
    pub fn empty() -> GlobalDescritorTable {
  21c9b0:	48 83 ec 58          	sub    $0x58,%rsp
  21c9b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c9b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            entries: [0; 8],
  21c9be:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21c9c3:	31 f6                	xor    %esi,%esi
  21c9c5:	ba 40 00 00 00       	mov    $0x40,%edx
  21c9ca:	e8 41 c3 01 00       	callq  238d10 <memset>
  21c9cf:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        GlobalDescritorTable {
  21c9d4:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  21c9d9:	ba 40 00 00 00       	mov    $0x40,%edx
  21c9de:	e8 0d c3 01 00       	callq  238cf0 <memcpy>
  21c9e3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21c9e8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c9ed:	48 c7 47 40 01 00 00 	movq   $0x1,0x40(%rdi)
  21c9f4:	00 
    }
  21c9f5:	48 83 c4 58          	add    $0x58,%rsp
  21c9f9:	c3                   	retq   
  21c9fa:	cc                   	int3   
  21c9fb:	cc                   	int3   
  21c9fc:	cc                   	int3   
  21c9fd:	cc                   	int3   
  21c9fe:	cc                   	int3   
  21c9ff:	cc                   	int3   

000000000021ca00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE>:
    pub fn as_pointer(&self) -> GDTPointer {
  21ca00:	48 83 ec 48          	sub    $0x48,%rsp
  21ca04:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21ca09:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
            base_addr: self.entries.as_ptr() as u64,
  21ca0e:	be 08 00 00 00       	mov    $0x8,%esi
  21ca13:	e8 78 1f 00 00       	callq  21e990 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd1f0389311dd9dccE>
  21ca18:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ca1d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  21ca22:	48 8b 40 40          	mov    0x40(%rax),%rax
  21ca26:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21ca2b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21ca30:	b9 08 00 00 00       	mov    $0x8,%ecx
  21ca35:	48 f7 e1             	mul    %rcx
  21ca38:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ca3d:	0f 90 c0             	seto   %al
  21ca40:	a8 01                	test   $0x1,%al
  21ca42:	75 17                	jne    21ca5b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x5b>
  21ca44:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21ca49:	48 83 e8 01          	sub    $0x1,%rax
  21ca4d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ca52:	0f 92 c0             	setb   %al
  21ca55:	a8 01                	test   $0x1,%al
  21ca57:	75 41                	jne    21ca9a <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x9a>
  21ca59:	eb 1a                	jmp    21ca75 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x75>
  21ca5b:	48 8d 3d de 5b fe ff 	lea    -0x1a422(%rip),%rdi        # 202640 <str.1>
  21ca62:	48 8d 15 5f ec 01 00 	lea    0x1ec5f(%rip),%rdx        # 23b6c8 <memcmp+0x2988>
  21ca69:	be 21 00 00 00       	mov    $0x21,%esi
  21ca6e:	e8 7d 91 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ca73:	0f 0b                	ud2    
  21ca75:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ca7a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        GDTPointer {
  21ca7f:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
  21ca84:	48 89 44 24 32       	mov    %rax,0x32(%rsp)
    }
  21ca89:	0f b7 44 24 38       	movzwl 0x38(%rsp),%eax
  21ca8e:	89 c2                	mov    %eax,%edx
  21ca90:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21ca95:	48 83 c4 48          	add    $0x48,%rsp
  21ca99:	c3                   	retq   
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  21ca9a:	48 8d 3d 4f 5b fe ff 	lea    -0x1a4b1(%rip),%rdi        # 2025f0 <str.0>
  21caa1:	48 8d 15 38 ec 01 00 	lea    0x1ec38(%rip),%rdx        # 23b6e0 <memcmp+0x29a0>
  21caa8:	be 21 00 00 00       	mov    $0x21,%esi
  21caad:	e8 3e 91 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21cab2:	0f 0b                	ud2    
  21cab4:	cc                   	int3   
  21cab5:	cc                   	int3   
  21cab6:	cc                   	int3   
  21cab7:	cc                   	int3   
  21cab8:	cc                   	int3   
  21cab9:	cc                   	int3   
  21caba:	cc                   	int3   
  21cabb:	cc                   	int3   
  21cabc:	cc                   	int3   
  21cabd:	cc                   	int3   
  21cabe:	cc                   	int3   
  21cabf:	cc                   	int3   

000000000021cac0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h73dda5e8a94f4a43E>:
    pub fn load_into_cpu(&'static self) {
  21cac0:	48 83 ec 28          	sub    $0x28,%rsp
  21cac4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let gdt_pointer = self.as_pointer();
  21cac9:	e8 32 ff ff ff       	callq  21ca00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE>
  21cace:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21cad3:	66 89 d0             	mov    %dx,%ax
  21cad6:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  21cadb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21cae0:	48 89 04 24          	mov    %rax,(%rsp)
  21cae4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  21cae9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
        lgdt(&gdt_pointer);
  21caee:	48 89 e7             	mov    %rsp,%rdi
  21caf1:	e8 3a f8 ff ff       	callq  21c330 <_ZN9r3_kernel3cpu8segments4lgdt17h8d27df65dbd42b21E>
    }
  21caf6:	48 83 c4 28          	add    $0x28,%rsp
  21cafa:	c3                   	retq   
  21cafb:	cc                   	int3   
  21cafc:	cc                   	int3   
  21cafd:	cc                   	int3   
  21cafe:	cc                   	int3   
  21caff:	cc                   	int3   

000000000021cb00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE>:
    fn get_user_seg_ring(entry: u64) -> PrivilegeLevel {
  21cb00:	48 83 ec 10          	sub    $0x10,%rsp
  21cb04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        if entry & RING_3_DPL_FLAG == RING_3_DPL_FLAG {
  21cb09:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  21cb10:	60 00 00 
  21cb13:	48 21 c7             	and    %rax,%rdi
  21cb16:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  21cb1d:	60 00 00 
  21cb20:	48 39 c7             	cmp    %rax,%rdi
  21cb23:	74 07                	je     21cb2c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE+0x2c>
        PrivilegeLevel::Ring0
  21cb25:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21cb2a:	eb 05                	jmp    21cb31 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE+0x31>
            return PrivilegeLevel::Ring3;
  21cb2c:	c6 44 24 07 03       	movb   $0x3,0x7(%rsp)
    }
  21cb31:	8a 44 24 07          	mov    0x7(%rsp),%al
  21cb35:	48 83 c4 10          	add    $0x10,%rsp
  21cb39:	c3                   	retq   
  21cb3a:	cc                   	int3   
  21cb3b:	cc                   	int3   
  21cb3c:	cc                   	int3   
  21cb3d:	cc                   	int3   
  21cb3e:	cc                   	int3   
  21cb3f:	cc                   	int3   

000000000021cb40 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E>:
    pub fn set_user_segment(&mut self, entry: u64) -> Result<SegmentSelector, &'static str> {
  21cb40:	48 83 ec 68          	sub    $0x68,%rsp
  21cb44:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21cb49:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  21cb4e:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21cb53:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21cb58:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21cb5d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  21cb62:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  21cb67:	73 1b                	jae    21cb84 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x44>
  21cb69:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        self.entries[self.filled] = entry;
  21cb6e:	48 8b 40 40          	mov    0x40(%rax),%rax
  21cb72:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21cb77:	48 83 f8 08          	cmp    $0x8,%rax
  21cb7b:	0f 92 c0             	setb   %al
  21cb7e:	a8 01                	test   $0x1,%al
  21cb80:	75 29                	jne    21cbab <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x6b>
  21cb82:	eb 5e                	jmp    21cbe2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xa2>
  21cb84:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  21cb89:	48 8d 0d d1 5a fe ff 	lea    -0x1a52f(%rip),%rcx        # 202661 <str.1+0x21>
  21cb90:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21cb94:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  21cb9b:	00 
  21cb9c:	66 c7 00 01 00       	movw   $0x1,(%rax)
  21cba1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    }
  21cba6:	48 83 c4 68          	add    $0x68,%rsp
  21cbaa:	c3                   	retq   
  21cbab:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21cbb0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21cbb5:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
        self.entries[self.filled] = entry;
  21cbba:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        let current_index = self.filled;
  21cbbe:	48 8b 48 40          	mov    0x40(%rax),%rcx
  21cbc2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21cbc7:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
        self.filled += 1;
  21cbcc:	48 8b 40 40          	mov    0x40(%rax),%rax
  21cbd0:	48 83 c0 01          	add    $0x1,%rax
  21cbd4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21cbd9:	0f 92 c0             	setb   %al
  21cbdc:	a8 01                	test   $0x1,%al
  21cbde:	75 3c                	jne    21cc1c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xdc>
  21cbe0:	eb 18                	jmp    21cbfa <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xba>
  21cbe2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        self.entries[self.filled] = entry;
  21cbe7:	48 8d 15 0a eb 01 00 	lea    0x1eb0a(%rip),%rdx        # 23b6f8 <memcmp+0x29b8>
  21cbee:	be 08 00 00 00       	mov    $0x8,%esi
  21cbf3:	e8 48 90 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21cbf8:	0f 0b                	ud2    
  21cbfa:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21cbff:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21cc04:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        self.filled += 1;
  21cc09:	48 89 48 40          	mov    %rcx,0x40(%rax)
        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
  21cc0d:	e8 ee fe ff ff       	callq  21cb00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE>
  21cc12:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21cc16:	88 44 24 67          	mov    %al,0x67(%rsp)
  21cc1a:	eb 1a                	jmp    21cc36 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xf6>
        self.filled += 1;
  21cc1c:	48 8d 3d 6d 5a fe ff 	lea    -0x1a593(%rip),%rdi        # 202690 <str.2>
  21cc23:	48 8d 15 e6 ea 01 00 	lea    0x1eae6(%rip),%rdx        # 23b710 <memcmp+0x29d0>
  21cc2a:	be 1c 00 00 00       	mov    $0x1c,%esi
  21cc2f:	e8 bc 8f 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21cc34:	0f 0b                	ud2    
  21cc36:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21cc3a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Ok(SegmentSelector::new(current_index as u16, ring))
  21cc3f:	0f b7 f9             	movzwl %cx,%edi
  21cc42:	0f b6 f0             	movzbl %al,%esi
  21cc45:	e8 46 f7 ff ff       	callq  21c390 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>
  21cc4a:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  21cc4f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21cc54:	66 8b 4c 24 0c       	mov    0xc(%rsp),%cx
  21cc59:	66 89 48 02          	mov    %cx,0x2(%rax)
  21cc5d:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  21cc62:	e9 3a ff ff ff       	jmpq   21cba1 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x61>
  21cc67:	cc                   	int3   
  21cc68:	cc                   	int3   
  21cc69:	cc                   	int3   
  21cc6a:	cc                   	int3   
  21cc6b:	cc                   	int3   
  21cc6c:	cc                   	int3   
  21cc6d:	cc                   	int3   
  21cc6e:	cc                   	int3   
  21cc6f:	cc                   	int3   

000000000021cc70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E>:
    pub fn set_system_segment(
  21cc70:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21cc77:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21cc7c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21cc81:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21cc86:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21cc8b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  21cc90:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  21cc95:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21cc9a:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  21cc9f:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  21cca4:	73 2c                	jae    21ccd2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x62>
  21cca6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
        let current_index = self.filled;
  21ccab:	48 8b 48 40          	mov    0x40(%rax),%rcx
  21ccaf:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21ccb4:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21ccbb:	00 
        self.entries[self.filled] = low;
  21ccbc:	48 8b 40 40          	mov    0x40(%rax),%rax
  21ccc0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ccc5:	48 83 f8 08          	cmp    $0x8,%rax
  21ccc9:	0f 92 c0             	setb   %al
  21cccc:	a8 01                	test   $0x1,%al
  21ccce:	75 2c                	jne    21ccfc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x8c>
  21ccd0:	eb 53                	jmp    21cd25 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xb5>
  21ccd2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  21ccd7:	48 8d 0d 83 59 fe ff 	lea    -0x1a67d(%rip),%rcx        # 202661 <str.1+0x21>
  21ccde:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21cce2:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  21cce9:	00 
  21ccea:	66 c7 00 01 00       	movw   $0x1,(%rax)
  21ccef:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    }
  21ccf4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21ccfb:	c3                   	retq   
  21ccfc:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21cd01:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21cd06:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
        self.entries[self.filled] = low;
  21cd0b:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  21cd0f:	48 8b 40 40          	mov    0x40(%rax),%rax
  21cd13:	48 83 c0 01          	add    $0x1,%rax
  21cd17:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21cd1c:	0f 92 c0             	setb   %al
  21cd1f:	a8 01                	test   $0x1,%al
  21cd21:	75 3e                	jne    21cd61 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xf1>
  21cd23:	eb 18                	jmp    21cd3d <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xcd>
  21cd25:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        self.entries[self.filled] = low;
  21cd2a:	48 8d 15 f7 e9 01 00 	lea    0x1e9f7(%rip),%rdx        # 23b728 <memcmp+0x29e8>
  21cd31:	be 08 00 00 00       	mov    $0x8,%esi
  21cd36:	e8 05 8f 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21cd3b:	0f 0b                	ud2    
  21cd3d:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21cd42:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        self.filled += 1;
  21cd47:	48 89 48 40          	mov    %rcx,0x40(%rax)
        self.entries[self.filled] = high;
  21cd4b:	48 8b 40 40          	mov    0x40(%rax),%rax
  21cd4f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21cd54:	48 83 f8 08          	cmp    $0x8,%rax
  21cd58:	0f 92 c0             	setb   %al
  21cd5b:	a8 01                	test   $0x1,%al
  21cd5d:	75 1c                	jne    21cd7b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x10b>
  21cd5f:	eb 43                	jmp    21cda4 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x134>
        self.filled += 1;
  21cd61:	48 8d 3d 28 59 fe ff 	lea    -0x1a6d8(%rip),%rdi        # 202690 <str.2>
  21cd68:	48 8d 15 d1 e9 01 00 	lea    0x1e9d1(%rip),%rdx        # 23b740 <memcmp+0x2a00>
  21cd6f:	be 1c 00 00 00       	mov    $0x1c,%esi
  21cd74:	e8 77 8e 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21cd79:	0f 0b                	ud2    
  21cd7b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21cd80:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21cd85:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
        self.entries[self.filled] = high;
  21cd8a:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  21cd8e:	48 8b 40 40          	mov    0x40(%rax),%rax
  21cd92:	48 83 c0 01          	add    $0x1,%rax
  21cd96:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21cd9b:	0f 92 c0             	setb   %al
  21cd9e:	a8 01                	test   $0x1,%al
  21cda0:	75 46                	jne    21cde8 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x178>
  21cda2:	eb 18                	jmp    21cdbc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x14c>
  21cda4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        self.entries[self.filled] = high;
  21cda9:	48 8d 15 a8 e9 01 00 	lea    0x1e9a8(%rip),%rdx        # 23b758 <memcmp+0x2a18>
  21cdb0:	be 08 00 00 00       	mov    $0x8,%esi
  21cdb5:	e8 86 8e 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21cdba:	0f 0b                	ud2    
  21cdbc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21cdc1:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  21cdc6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        self.filled += 1;
  21cdcb:	48 89 51 40          	mov    %rdx,0x40(%rcx)
            PrivilegeLevel::Ring0,
  21cdcf:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
        Ok(SegmentSelector::new(
  21cdd4:	0f b7 f8             	movzwl %ax,%edi
  21cdd7:	0f b6 74 24 67       	movzbl 0x67(%rsp),%esi
  21cddc:	e8 af f5 ff ff       	callq  21c390 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>
  21cde1:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21cde6:	eb 1a                	jmp    21ce02 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x192>
        self.filled += 1;
  21cde8:	48 8d 3d a1 58 fe ff 	lea    -0x1a75f(%rip),%rdi        # 202690 <str.2>
  21cdef:	48 8d 15 7a e9 01 00 	lea    0x1e97a(%rip),%rdx        # 23b770 <memcmp+0x2a30>
  21cdf6:	be 1c 00 00 00       	mov    $0x1c,%esi
  21cdfb:	e8 f0 8d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ce00:	0f 0b                	ud2    
  21ce02:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21ce07:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
        Ok(SegmentSelector::new(
  21ce0c:	66 89 48 02          	mov    %cx,0x2(%rax)
  21ce10:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  21ce15:	e9 d5 fe ff ff       	jmpq   21ccef <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x7f>
  21ce1a:	cc                   	int3   
  21ce1b:	cc                   	int3   
  21ce1c:	cc                   	int3   
  21ce1d:	cc                   	int3   
  21ce1e:	cc                   	int3   
  21ce1f:	cc                   	int3   

000000000021ce20 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E>:
pub fn create_tss_for_bp() -> TaskStateSegment {
  21ce20:	48 83 ec 28          	sub    $0x28,%rsp
  21ce24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21ce29:	48 89 f8             	mov    %rdi,%rax
  21ce2c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut tss = TaskStateSegment::empty();
  21ce31:	e8 1a f7 ff ff       	callq  21c550 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17h9900b46609a50aa1E>
        let k_stack_start = (unsafe { &TSS_STACK } as *const _) as u64;
  21ce36:	48 8d 05 7b 28 02 00 	lea    0x2287b(%rip),%rax        # 23f6b8 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h2dba4d5abddfc02bE>
  21ce3d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        k_stack_start + STACK_SIZE as u64
  21ce42:	48 8d 05 6f 28 02 00 	lea    0x2286f(%rip),%rax        # 23f6b8 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h2dba4d5abddfc02bE>
  21ce49:	48 05 00 50 00 00    	add    $0x5000,%rax
  21ce4f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ce54:	0f 92 c0             	setb   %al
  21ce57:	a8 01                	test   $0x1,%al
  21ce59:	75 18                	jne    21ce73 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E+0x53>
  21ce5b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21ce60:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21ce65:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    tss.interrupt_stack_table[0] = {
  21ce6a:	48 89 51 24          	mov    %rdx,0x24(%rcx)
}
  21ce6e:	48 83 c4 28          	add    $0x28,%rsp
  21ce72:	c3                   	retq   
        k_stack_start + STACK_SIZE as u64
  21ce73:	48 8d 3d 16 58 fe ff 	lea    -0x1a7ea(%rip),%rdi        # 202690 <str.2>
  21ce7a:	48 8d 15 07 e9 01 00 	lea    0x1e907(%rip),%rdx        # 23b788 <memcmp+0x2a48>
  21ce81:	be 1c 00 00 00       	mov    $0x1c,%esi
  21ce86:	e8 65 8d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ce8b:	0f 0b                	ud2    
  21ce8d:	cc                   	int3   
  21ce8e:	cc                   	int3   
  21ce8f:	cc                   	int3   

000000000021ce90 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE>:
pub fn create_gdt_for_bp() -> GDTContainer {
  21ce90:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  21ce97:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21ce9c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    let mut gdt = GlobalDescritorTable::empty();
  21cea1:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21cea6:	e8 05 fb ff ff       	callq  21c9b0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17h3d3710681a360ac2E>
    let k_code_segment_res = gdt.set_user_segment(LinuxKernelSegments::KernelCode as u64);
  21ceab:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21ceb2:	00 
  21ceb3:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21ceb8:	48 ba ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rdx
  21cebf:	9b af 00 
  21cec2:	e8 79 fc ff ff       	callq  21cb40 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E>
    if k_code_segment_res.is_err() {
  21cec7:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21cece:	00 
  21cecf:	e8 0c e4 fe ff       	callq  20b2e0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>
  21ced4:	88 44 24 27          	mov    %al,0x27(%rsp)
  21ced8:	8a 44 24 27          	mov    0x27(%rsp),%al
  21cedc:	a8 01                	test   $0x1,%al
  21cede:	75 15                	jne    21cef5 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x65>
  21cee0:	eb 00                	jmp    21cee2 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x52>
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  21cee2:	48 8d 3d fe 57 fe ff 	lea    -0x1a802(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21cee9:	e8 32 06 00 00       	callq  21d520 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13b397ff8302ea1dE>
  21ceee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21cef3:	eb 6a                	jmp    21cf5f <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0xcf>
        panic!("{}", k_code_segment_res.unwrap_err());
  21cef5:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21cefc:	00 
  21cefd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21cf04:	00 
  21cf05:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21cf0c:	00 
  21cf0d:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21cf14:	00 
  21cf15:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  21cf1c:	00 
  21cf1d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21cf24:	00 
  21cf25:	48 8d 35 74 e8 01 00 	lea    0x1e874(%rip),%rsi        # 23b7a0 <memcmp+0x2a60>
  21cf2c:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21cf33:	00 
  21cf34:	e8 a7 df fe ff       	callq  20aee0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>
  21cf39:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  21cf40:	00 
  21cf41:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21cf48:	00 
  21cf49:	48 8d 35 68 e8 01 00 	lea    0x1e868(%rip),%rsi        # 23b7b8 <memcmp+0x2a78>
  21cf50:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  21cf57:	00 
  21cf58:	e8 b3 38 00 00       	callq  220810 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>
  21cf5d:	0f 0b                	ud2    
  21cf5f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  21cf64:	e8 87 f6 ff ff       	callq  21c5f0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE>
  21cf69:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21cf6e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21cf73:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  21cf7a:	00 
  21cf7b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  21cf82:	00 
  21cf83:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21cf88:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    let k_tss_segment_result = gdt.set_system_segment(tss_descriptor.high, tss_descriptor.low);
  21cf8d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21cf94:	00 
  21cf95:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21cf9a:	e8 d1 fc ff ff       	callq  21cc70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E>
    if k_tss_segment_result.is_err() {
  21cf9f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21cfa6:	00 
  21cfa7:	e8 34 e3 fe ff       	callq  20b2e0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>
  21cfac:	88 44 24 07          	mov    %al,0x7(%rsp)
  21cfb0:	8a 44 24 07          	mov    0x7(%rsp),%al
  21cfb4:	a8 01                	test   $0x1,%al
  21cfb6:	75 64                	jne    21d01c <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x18c>
  21cfb8:	eb 00                	jmp    21cfba <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x12a>
        gdt_table: gdt,
  21cfba:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  21cfc1:	00 
  21cfc2:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21cfc7:	ba 48 00 00 00       	mov    $0x48,%edx
  21cfcc:	e8 1f bd 01 00       	callq  238cf0 <memcpy>
        kernel_code_selector: k_code_segment_res.unwrap(),
  21cfd1:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21cfd8:	00 
  21cfd9:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21cfe0:	00 
  21cfe1:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21cfe8:	00 
  21cfe9:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  21cff0:	00 
  21cff1:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21cff8:	00 
  21cff9:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21d000:	00 
  21d001:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  21d008:	00 
  21d009:	48 8d 35 f0 e7 01 00 	lea    0x1e7f0(%rip),%rsi        # 23b800 <memcmp+0x2ac0>
  21d010:	e8 bb e3 fe ff       	callq  20b3d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>
  21d015:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  21d01a:	eb 6a                	jmp    21d086 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x1f6>
        panic!("{}", k_tss_segment_result.unwrap_err());
  21d01c:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21d023:	00 
  21d024:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21d02b:	00 
  21d02c:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d033:	00 
  21d034:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  21d03b:	00 
  21d03c:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  21d043:	00 
  21d044:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21d04b:	00 
  21d04c:	48 8d 35 7d e7 01 00 	lea    0x1e77d(%rip),%rsi        # 23b7d0 <memcmp+0x2a90>
  21d053:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21d05a:	00 
  21d05b:	e8 80 de fe ff       	callq  20aee0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>
  21d060:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21d067:	00 
  21d068:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21d06f:	00 
  21d070:	48 8d 35 71 e7 01 00 	lea    0x1e771(%rip),%rsi        # 23b7e8 <memcmp+0x2aa8>
  21d077:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  21d07e:	00 
  21d07f:	e8 8c 37 00 00       	callq  220810 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>
  21d084:	0f 0b                	ud2    
        kernel_tss_selector: k_tss_segment_result.unwrap(),
  21d086:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d08d:	00 
  21d08e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21d095:	00 
  21d096:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  21d09d:	00 
  21d09e:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21d0a5:	00 
  21d0a6:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21d0ad:	00 
  21d0ae:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21d0b5:	00 
  21d0b6:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  21d0bd:	00 
  21d0be:	48 8d 35 53 e7 01 00 	lea    0x1e753(%rip),%rsi        # 23b818 <memcmp+0x2ad8>
  21d0c5:	e8 06 e3 fe ff       	callq  20b3d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>
  21d0ca:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  21d0cf:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    GDTContainer {
  21d0d4:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  21d0db:	00 
  21d0dc:	ba 48 00 00 00       	mov    $0x48,%edx
  21d0e1:	e8 0a bc 01 00       	callq  238cf0 <memcpy>
  21d0e6:	66 8b 74 24 04       	mov    0x4(%rsp),%si
  21d0eb:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  21d0f0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21d0f5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21d0fa:	66 89 71 48          	mov    %si,0x48(%rcx)
  21d0fe:	66 89 51 4a          	mov    %dx,0x4a(%rcx)
}
  21d102:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  21d109:	c3                   	retq   
  21d10a:	cc                   	int3   
  21d10b:	cc                   	int3   
  21d10c:	cc                   	int3   
  21d10d:	cc                   	int3   
  21d10e:	cc                   	int3   
  21d10f:	cc                   	int3   

000000000021d110 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E>:
}

// create the GDT
pub fn init_gdt() {
  21d110:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
    // set ss to zero:

    // Not setting SS to 0 will make iretq throw double fault
    // because iretq expects SS to be 0 or needs a valid data-segment to be set-up.
    SegmentRegister::SS.set(0);
  21d117:	48 8d 3d 8e 55 fe ff 	lea    -0x1aa72(%rip),%rdi        # 2026ac <str.2+0x1c>
  21d11e:	31 f6                	xor    %esi,%esi
  21d120:	e8 ab f2 ff ff       	callq  21c3d0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>

    let gdt_table = &KERNEL_BASE_GDT.gdt_table;
  21d125:	48 8d 3d bb 55 fe ff 	lea    -0x1aa45(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21d12c:	e8 1f 04 00 00       	callq  21d550 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21d131:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21d136:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21d13b:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  21d142:	00 
    gdt_table.load_into_cpu();
  21d143:	e8 78 f9 ff ff       	callq  21cac0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h73dda5e8a94f4a43E>

    // set the code segment register
    let kernel_cs = &KERNEL_BASE_GDT.kernel_code_selector;
  21d148:	48 8d 3d 98 55 fe ff 	lea    -0x1aa68(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21d14f:	e8 fc 03 00 00       	callq  21d550 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21d154:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21d159:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21d15e:	48 89 c1             	mov    %rax,%rcx
  21d161:	48 83 c1 48          	add    $0x48,%rcx
  21d165:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21d16a:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  21d171:	00 
    SegmentRegister::CS.set(kernel_cs.0);
  21d172:	48 8d 3d 34 55 fe ff 	lea    -0x1aacc(%rip),%rdi        # 2026ad <str.2+0x1d>
  21d179:	0f b7 70 48          	movzwl 0x48(%rax),%esi
  21d17d:	e8 4e f2 ff ff       	callq  21c3d0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>
  21d182:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

    // assert the register value:
    SegmentRegister::CS.assert_reg(kernel_cs.0);
  21d187:	48 8d 3d 1f 55 fe ff 	lea    -0x1aae1(%rip),%rdi        # 2026ad <str.2+0x1d>
  21d18e:	0f b7 30             	movzwl (%rax),%esi
  21d191:	e8 2a f3 ff ff       	callq  21c4c0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E>
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  21d196:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  21d19d:	00 00 
  21d19f:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21d1a4:	48 8d 35 4d 31 fe ff 	lea    -0x1ceb3(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21d1ab:	e8 20 5e ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d1b0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21d1b4:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21d1b8:	a8 01                	test   $0x1,%al
  21d1ba:	75 09                	jne    21d1c5 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0xb5>
  21d1bc:	eb 00                	jmp    21d1be <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0xae>
  21d1be:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  21d1c3:	eb 4e                	jmp    21d213 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x103>
  21d1c5:	c6 84 24 7f 01 00 00 	movb   $0x0,0x17f(%rsp)
  21d1cc:	00 
  21d1cd:	48 8b 3d 74 09 02 00 	mov    0x20974(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21d1d4:	0f b6 b4 24 7f 01 00 	movzbl 0x17f(%rsp),%esi
  21d1db:	00 
  21d1dc:	e8 0f e0 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21d1e1:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21d1e8:	00 
  21d1e9:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  21d1f0:	00 
  21d1f1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21d1f6:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21d1fb:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  21d200:	e8 cb 5d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d205:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  21d209:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  21d20d:	24 01                	and    $0x1,%al
  21d20f:	88 44 24 57          	mov    %al,0x57(%rsp)
  21d213:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  21d218:	75 29                	jne    21d243 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x133>
    log::info!("Initialized GDT.");
  21d21a:	48 c7 84 24 a8 00 00 	movq   $0x3,0xa8(%rsp)
  21d221:	00 03 00 00 00 
  21d226:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21d22d:	00 
  21d22e:	48 8d 35 c3 30 fe ff 	lea    -0x1cf3d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21d235:	e8 96 5d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d23a:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  21d23e:	e9 8a 00 00 00       	jmpq   21d2cd <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1bd>
  21d243:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  21d248:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21d24f:	00 
  21d250:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  21d257:	00 
  21d258:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21d25f:	00 
  21d260:	48 8b 35 39 09 02 00 	mov    0x20939(%rip),%rsi        # 23dba0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21d267:	e8 94 1e ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21d26c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21d271:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21d276:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21d27b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21d280:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  21d287:	00 
  21d288:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21d28f:	00 
  21d290:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  21d297:	00 
  21d298:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21d29d:	48 8d 35 8c e5 01 00 	lea    0x1e58c(%rip),%rsi        # 23b830 <memcmp+0x2af0>
  21d2a4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21d2aa:	4c 89 c2             	mov    %r8,%rdx
  21d2ad:	e8 7e 92 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21d2b2:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21d2b7:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21d2bc:	48 8d 15 7d e5 01 00 	lea    0x1e57d(%rip),%rdx        # 23b840 <memcmp+0x2b00>
  21d2c3:	e8 b8 5a 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21d2c8:	e9 4d ff ff ff       	jmpq   21d21a <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x10a>
  21d2cd:	8a 44 24 2d          	mov    0x2d(%rsp),%al
    log::info!("Initialized GDT.");
  21d2d1:	a8 01                	test   $0x1,%al
  21d2d3:	75 0c                	jne    21d2e1 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1d1>
  21d2d5:	eb 00                	jmp    21d2d7 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1c7>
  21d2d7:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  21d2de:	00 
  21d2df:	eb 5a                	jmp    21d33b <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x22b>
  21d2e1:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  21d2e8:	00 
  21d2e9:	48 8b 3d 58 08 02 00 	mov    0x20858(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21d2f0:	0f b6 b4 24 6f 01 00 	movzbl 0x16f(%rsp),%esi
  21d2f7:	00 
  21d2f8:	e8 f3 de 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21d2fd:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21d304:	00 
  21d305:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  21d30c:	00 
  21d30d:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21d314:	00 
  21d315:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21d31c:	00 
  21d31d:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  21d324:	00 
  21d325:	e8 a6 5c ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d32a:	88 44 24 17          	mov    %al,0x17(%rsp)
  21d32e:	8a 44 24 17          	mov    0x17(%rsp),%al
  21d332:	24 01                	and    $0x1,%al
  21d334:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  21d33b:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  21d342:	01 
  21d343:	75 13                	jne    21d358 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x248>

    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  21d345:	48 8d 3d 9b 53 fe ff 	lea    -0x1ac65(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21d34c:	e8 ff 01 00 00       	callq  21d550 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21d351:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21d356:	eb 43                	jmp    21d39b <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x28b>
    log::info!("Initialized GDT.");
  21d358:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21d35f:	00 
  21d360:	48 8d 35 11 e5 01 00 	lea    0x1e511(%rip),%rsi        # 23b878 <memcmp+0x2b38>
  21d367:	ba 01 00 00 00       	mov    $0x1,%edx
  21d36c:	48 8d 0d 65 53 fe ff 	lea    -0x1ac9b(%rip),%rcx        # 2026d8 <str.2+0x48>
  21d373:	31 c0                	xor    %eax,%eax
  21d375:	41 89 c0             	mov    %eax,%r8d
  21d378:	e8 b3 91 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21d37d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  21d384:	00 
  21d385:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21d38c:	00 
  21d38d:	48 8d 15 f4 e4 01 00 	lea    0x1e4f4(%rip),%rdx        # 23b888 <memcmp+0x2b48>
  21d394:	e8 e7 59 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21d399:	eb aa                	jmp    21d345 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x235>
  21d39b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  21d3a0:	48 89 c1             	mov    %rax,%rcx
  21d3a3:	48 83 c1 4a          	add    $0x4a,%rcx
  21d3a7:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  21d3ae:	00 
    load_tss(tss_sel.0);
  21d3af:	0f b7 78 4a          	movzwl 0x4a(%rax),%edi
  21d3b3:	e8 b8 ef ff ff       	callq  21c370 <_ZN9r3_kernel3cpu8segments8load_tss17ha24a70cff6842c90E>
    log::info!("Initialized TSS.");
  21d3b8:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  21d3bf:	00 03 00 00 00 
  21d3c4:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21d3cb:	00 
  21d3cc:	48 8d 35 25 2f fe ff 	lea    -0x1d0db(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21d3d3:	e8 f8 5b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d3d8:	88 44 24 07          	mov    %al,0x7(%rsp)
  21d3dc:	8a 44 24 07          	mov    0x7(%rsp),%al
  21d3e0:	a8 01                	test   $0x1,%al
  21d3e2:	75 0c                	jne    21d3f0 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x2e0>
  21d3e4:	eb 00                	jmp    21d3e6 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x2d6>
  21d3e6:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  21d3ed:	00 
  21d3ee:	eb 5a                	jmp    21d44a <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x33a>
  21d3f0:	c6 84 24 5f 01 00 00 	movb   $0x0,0x15f(%rsp)
  21d3f7:	00 
  21d3f8:	48 8b 3d 49 07 02 00 	mov    0x20749(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21d3ff:	0f b6 b4 24 5f 01 00 	movzbl 0x15f(%rsp),%esi
  21d406:	00 
  21d407:	e8 e4 dd 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21d40c:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21d413:	00 
  21d414:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21d41b:	00 
  21d41c:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21d423:	00 
  21d424:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21d42b:	00 
  21d42c:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  21d433:	00 
  21d434:	e8 97 5b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21d439:	88 44 24 06          	mov    %al,0x6(%rsp)
  21d43d:	8a 44 24 06          	mov    0x6(%rsp),%al
  21d441:	24 01                	and    $0x1,%al
  21d443:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  21d44a:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  21d451:	01 
  21d452:	75 08                	jne    21d45c <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x34c>
}
  21d454:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  21d45b:	c3                   	retq   
    log::info!("Initialized TSS.");
  21d45c:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21d463:	00 
  21d464:	48 8d 35 55 e4 01 00 	lea    0x1e455(%rip),%rsi        # 23b8c0 <memcmp+0x2b80>
  21d46b:	ba 01 00 00 00       	mov    $0x1,%edx
  21d470:	48 8d 0d 61 52 fe ff 	lea    -0x1ad9f(%rip),%rcx        # 2026d8 <str.2+0x48>
  21d477:	31 c0                	xor    %eax,%eax
  21d479:	41 89 c0             	mov    %eax,%r8d
  21d47c:	e8 af 90 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21d481:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  21d488:	00 
  21d489:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21d490:	00 
  21d491:	48 8d 15 38 e4 01 00 	lea    0x1e438(%rip),%rdx        # 23b8d0 <memcmp+0x2b90>
  21d498:	e8 e3 58 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21d49d:	eb b5                	jmp    21d454 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x344>
  21d49f:	cc                   	int3   

000000000021d4a0 <_ZN78_$LT$r3_kernel..cpu..segments..SegmentSelector$u20$as$u20$core..fmt..Debug$GT$3fmt17hb564fdb2222ce426E>:
#[derive(Debug)]
  21d4a0:	48 83 ec 58          	sub    $0x58,%rsp
  21d4a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21d4a9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21d4ae:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct SegmentSelector(pub u16);
  21d4b3:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug)]
  21d4b8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21d4bd:	48 8d 15 14 52 fe ff 	lea    -0x1adec(%rip),%rdx        # 2026d8 <str.2+0x48>
  21d4c4:	b9 0f 00 00 00       	mov    $0xf,%ecx
  21d4c9:	e8 52 aa 01 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21d4ce:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d4d3:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  21d4d8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct SegmentSelector(pub u16);
  21d4dd:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21d4e2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug)]
  21d4e7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21d4ec:	48 8d 15 15 e4 01 00 	lea    0x1e415(%rip),%rdx        # 23b908 <memcmp+0x2bc8>
  21d4f3:	e8 a8 7f 01 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21d4f8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21d4fd:	e8 0e 81 01 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21d502:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21d506:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21d50a:	24 01                	and    $0x1,%al
  21d50c:	0f b6 c0             	movzbl %al,%eax
  21d50f:	48 83 c4 58          	add    $0x58,%rsp
  21d513:	c3                   	retq   
  21d514:	cc                   	int3   
  21d515:	cc                   	int3   
  21d516:	cc                   	int3   
  21d517:	cc                   	int3   
  21d518:	cc                   	int3   
  21d519:	cc                   	int3   
  21d51a:	cc                   	int3   
  21d51b:	cc                   	int3   
  21d51c:	cc                   	int3   
  21d51d:	cc                   	int3   
  21d51e:	cc                   	int3   
  21d51f:	cc                   	int3   

000000000021d520 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13b397ff8302ea1dE>:
            fn deref(&self) -> &$T {
  21d520:	48 83 ec 18          	sub    $0x18,%rsp
  21d524:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21d529:	48 8d 05 88 71 02 00 	lea    0x27188(%rip),%rax        # 2446b8 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h59165af470a5700dE>
  21d530:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d535:	48 8d 3d 7c 71 02 00 	lea    0x2717c(%rip),%rdi        # 2446b8 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h59165af470a5700dE>
  21d53c:	e8 ff bd fe ff       	callq  209340 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E>
  21d541:	48 89 04 24          	mov    %rax,(%rsp)
  21d545:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21d549:	48 83 c4 18          	add    $0x18,%rsp
  21d54d:	c3                   	retq   
  21d54e:	cc                   	int3   
  21d54f:	cc                   	int3   

000000000021d550 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>:
            fn deref(&self) -> &$T {
  21d550:	48 83 ec 18          	sub    $0x18,%rsp
  21d554:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21d559:	48 8d 05 d0 71 02 00 	lea    0x271d0(%rip),%rax        # 244730 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17he46a77ecbb384a84E>
  21d560:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d565:	48 8d 3d c4 71 02 00 	lea    0x271c4(%rip),%rdi        # 244730 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17he46a77ecbb384a84E>
  21d56c:	e8 0f ca fe ff       	callq  209f80 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E>
  21d571:	48 89 04 24          	mov    %rax,(%rsp)
  21d575:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21d579:	48 83 c4 18          	add    $0x18,%rsp
  21d57d:	c3                   	retq   
  21d57e:	cc                   	int3   
  21d57f:	cc                   	int3   

000000000021d580 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11get_address17hefce162a947024fdE>:
    fn get_address(bus: u8, dev: u8, func: u8, offset: u8) -> u32 {
  21d580:	48 83 ec 1c          	sub    $0x1c,%rsp
  21d584:	88 4c 24 11          	mov    %cl,0x11(%rsp)
  21d588:	88 54 24 12          	mov    %dl,0x12(%rsp)
  21d58c:	40 88 74 24 13       	mov    %sil,0x13(%rsp)
  21d591:	40 88 f8             	mov    %dil,%al
  21d594:	88 44 24 18          	mov    %al,0x18(%rsp)
  21d598:	40 88 74 24 19       	mov    %sil,0x19(%rsp)
  21d59d:	88 54 24 1a          	mov    %dl,0x1a(%rsp)
  21d5a1:	88 4c 24 1b          	mov    %cl,0x1b(%rsp)
            | ((bus as u32) << 16)
  21d5a5:	0f b6 c0             	movzbl %al,%eax
  21d5a8:	c1 e0 10             	shl    $0x10,%eax
  21d5ab:	89 44 24 14          	mov    %eax,0x14(%rsp)
  21d5af:	8a 44 24 13          	mov    0x13(%rsp),%al
  21d5b3:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
        PCI_BASE_ADDR as u32
  21d5b7:	81 c9 00 00 00 80    	or     $0x80000000,%ecx
  21d5bd:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
            | ((dev as u32) << 11 as u32)
  21d5c1:	0f b6 c0             	movzbl %al,%eax
  21d5c4:	c1 e0 0b             	shl    $0xb,%eax
  21d5c7:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21d5cb:	8a 44 24 12          	mov    0x12(%rsp),%al
  21d5cf:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  21d5d3:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
        PCI_BASE_ADDR as u32
  21d5d7:	09 d1                	or     %edx,%ecx
  21d5d9:	89 0c 24             	mov    %ecx,(%rsp)
            | ((func as u32) << 8 as u32)
  21d5dc:	0f b6 c0             	movzbl %al,%eax
  21d5df:	c1 e0 08             	shl    $0x8,%eax
  21d5e2:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21d5e6:	8a 4c 24 11          	mov    0x11(%rsp),%cl
  21d5ea:	8b 54 24 04          	mov    0x4(%rsp),%edx
  21d5ee:	8b 04 24             	mov    (%rsp),%eax
        PCI_BASE_ADDR as u32
  21d5f1:	09 d0                	or     %edx,%eax
            | ((offset as u32) & 0xFC)
  21d5f3:	0f b6 c9             	movzbl %cl,%ecx
  21d5f6:	81 e1 fc 00 00 00    	and    $0xfc,%ecx
        PCI_BASE_ADDR as u32
  21d5fc:	09 c8                	or     %ecx,%eax
    }
  21d5fe:	48 83 c4 1c          	add    $0x1c,%rsp
  21d602:	c3                   	retq   
  21d603:	cc                   	int3   
  21d604:	cc                   	int3   
  21d605:	cc                   	int3   
  21d606:	cc                   	int3   
  21d607:	cc                   	int3   
  21d608:	cc                   	int3   
  21d609:	cc                   	int3   
  21d60a:	cc                   	int3   
  21d60b:	cc                   	int3   
  21d60c:	cc                   	int3   
  21d60d:	cc                   	int3   
  21d60e:	cc                   	int3   
  21d60f:	cc                   	int3   

000000000021d610 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>:
    pub fn new(bus: u8, dev: u8, func: u8, offset: u8) -> Self {
  21d610:	48 83 ec 48          	sub    $0x48,%rsp
  21d614:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21d619:	44 88 c0             	mov    %r8b,%al
  21d61c:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  21d620:	88 4c 24 2d          	mov    %cl,0x2d(%rsp)
  21d624:	88 54 24 2e          	mov    %dl,0x2e(%rsp)
  21d628:	40 88 74 24 2f       	mov    %sil,0x2f(%rsp)
  21d62d:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21d632:	40 88 74 24 44       	mov    %sil,0x44(%rsp)
  21d637:	88 54 24 45          	mov    %dl,0x45(%rsp)
  21d63b:	88 4c 24 46          	mov    %cl,0x46(%rsp)
  21d63f:	88 44 24 47          	mov    %al,0x47(%rsp)
            address_line: Port::new(PCI_ADDRESS_PORT, false),
  21d643:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  21d648:	31 f6                	xor    %esi,%esi
  21d64a:	e8 31 bc ff ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21d64f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21d654:	88 54 24 43          	mov    %dl,0x43(%rsp)
            data_line: Port::new(PCI_DATA_PORT, false),
  21d658:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  21d65d:	31 f6                	xor    %esi,%esi
  21d65f:	e8 1c bc ff ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21d664:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d669:	88 54 24 1f          	mov    %dl,0x1f(%rsp)
  21d66d:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  21d671:	8a 4c 24 2d          	mov    0x2d(%rsp),%cl
  21d675:	8a 54 24 2e          	mov    0x2e(%rsp),%dl
  21d679:	40 8a 74 24 2f       	mov    0x2f(%rsp),%sil
            dev_addr: Self::get_address(bus, dev, func, offset),
  21d67e:	40 0f b6 fe          	movzbl %sil,%edi
  21d682:	0f b6 f2             	movzbl %dl,%esi
  21d685:	0f b6 d1             	movzbl %cl,%edx
  21d688:	0f b6 c8             	movzbl %al,%ecx
  21d68b:	e8 f0 fe ff ff       	callq  21d580 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11get_address17hefce162a947024fdE>
  21d690:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21d694:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21d699:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21d69e:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  21d6a2:	40 8a 74 24 1f       	mov    0x1f(%rsp),%sil
  21d6a7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21d6ac:	44 8a 44 24 43       	mov    0x43(%rsp),%r8b
  21d6b1:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
        PCIConfigRegister {
  21d6b6:	4c 89 09             	mov    %r9,(%rcx)
  21d6b9:	41 80 e0 01          	and    $0x1,%r8b
  21d6bd:	44 88 41 08          	mov    %r8b,0x8(%rcx)
  21d6c1:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  21d6c5:	40 80 e6 01          	and    $0x1,%sil
  21d6c9:	40 88 71 18          	mov    %sil,0x18(%rcx)
  21d6cd:	89 51 20             	mov    %edx,0x20(%rcx)
    }
  21d6d0:	48 83 c4 48          	add    $0x48,%rsp
  21d6d4:	c3                   	retq   
  21d6d5:	cc                   	int3   
  21d6d6:	cc                   	int3   
  21d6d7:	cc                   	int3   
  21d6d8:	cc                   	int3   
  21d6d9:	cc                   	int3   
  21d6da:	cc                   	int3   
  21d6db:	cc                   	int3   
  21d6dc:	cc                   	int3   
  21d6dd:	cc                   	int3   
  21d6de:	cc                   	int3   
  21d6df:	cc                   	int3   

000000000021d6e0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>:
    pub fn read_config(&self) -> u32 {
  21d6e0:	48 83 ec 18          	sub    $0x18,%rsp
  21d6e4:	48 89 f8             	mov    %rdi,%rax
  21d6e7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21d6ec:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        self.address_line.write_u32(self.dev_addr);
  21d6f1:	48 89 c7             	mov    %rax,%rdi
  21d6f4:	8b 70 20             	mov    0x20(%rax),%esi
  21d6f7:	e8 34 bc ff ff       	callq  219330 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E>
  21d6fc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.data_line.read_u32()
  21d701:	48 83 c7 10          	add    $0x10,%rdi
  21d705:	e8 06 bc ff ff       	callq  219310 <_ZN9r3_kernel3cpu2io4Port8read_u3217h345e6a832a366919E>
  21d70a:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21d70e:	8b 44 24 04          	mov    0x4(%rsp),%eax
    }
  21d712:	48 83 c4 18          	add    $0x18,%rsp
  21d716:	c3                   	retq   
  21d717:	cc                   	int3   
  21d718:	cc                   	int3   
  21d719:	cc                   	int3   
  21d71a:	cc                   	int3   
  21d71b:	cc                   	int3   
  21d71c:	cc                   	int3   
  21d71d:	cc                   	int3   
  21d71e:	cc                   	int3   
  21d71f:	cc                   	int3   

000000000021d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>:
    pub fn query(&self, bus: u8, dev: u8, func: u8) -> u16 {
  21d720:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  21d727:	88 c8                	mov    %cl,%al
  21d729:	88 44 24 0d          	mov    %al,0xd(%rsp)
  21d72d:	88 d1                	mov    %dl,%cl
  21d72f:	88 4c 24 0e          	mov    %cl,0xe(%rsp)
  21d733:	40 88 f2             	mov    %sil,%dl
  21d736:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  21d73a:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  21d741:	00 
  21d742:	88 94 24 e5 00 00 00 	mov    %dl,0xe5(%rsp)
  21d749:	88 8c 24 e6 00 00 00 	mov    %cl,0xe6(%rsp)
  21d750:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
        match self {
  21d757:	0f b6 07             	movzbl (%rdi),%eax
  21d75a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d75f:	48 85 c0             	test   %rax,%rax
  21d762:	74 13                	je     21d777 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x57>
  21d764:	eb 00                	jmp    21d766 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x46>
  21d766:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d76b:	48 83 e8 01          	sub    $0x1,%rax
  21d76f:	74 2d                	je     21d79e <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x7e>
  21d771:	eb 00                	jmp    21d773 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x53>
  21d773:	eb 50                	jmp    21d7c5 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0xa5>
  21d775:	0f 0b                	ud2    
  21d777:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21d77b:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21d77f:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d783:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21d788:	45 31 c0             	xor    %r8d,%r8d
  21d78b:	0f b6 f2             	movzbl %dl,%esi
  21d78e:	0f b6 d1             	movzbl %cl,%edx
  21d791:	0f b6 c8             	movzbl %al,%ecx
  21d794:	e8 77 fe ff ff       	callq  21d610 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21d799:	e9 01 01 00 00       	jmpq   21d89f <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x17f>
  21d79e:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21d7a2:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21d7a6:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d7aa:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21d7af:	45 31 c0             	xor    %r8d,%r8d
  21d7b2:	0f b6 f2             	movzbl %dl,%esi
  21d7b5:	0f b6 d1             	movzbl %cl,%edx
  21d7b8:	0f b6 c8             	movzbl %al,%ecx
  21d7bb:	e8 50 fe ff ff       	callq  21d610 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21d7c0:	e9 8b 00 00 00       	jmpq   21d850 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x130>
  21d7c5:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21d7c9:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21d7cd:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::HeaderType => PCIConfigRegister::new(bus, dev, func, 0x0C)
  21d7d1:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21d7d8:	00 
  21d7d9:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
  21d7df:	0f b6 f2             	movzbl %dl,%esi
  21d7e2:	0f b6 d1             	movzbl %cl,%edx
  21d7e5:	0f b6 c8             	movzbl %al,%ecx
  21d7e8:	e8 23 fe ff ff       	callq  21d610 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21d7ed:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21d7f4:	00 
  21d7f5:	e8 e6 fe ff ff       	callq  21d6e0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21d7fa:	89 84 24 9c 00 00 00 	mov    %eax,0x9c(%rsp)
                .get_bits(16..24) as u16,
  21d801:	48 c7 84 24 c8 00 00 	movq   $0x10,0xc8(%rsp)
  21d808:	00 10 00 00 00 
  21d80d:	48 c7 84 24 d0 00 00 	movq   $0x18,0xd0(%rsp)
  21d814:	00 18 00 00 00 
            Self::HeaderType => PCIConfigRegister::new(bus, dev, func, 0x0C)
  21d819:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  21d820:	00 
  21d821:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21d828:	00 
  21d829:	48 8d bc 24 9c 00 00 	lea    0x9c(%rsp),%rdi
  21d830:	00 
  21d831:	e8 ea 23 00 00       	callq  21fc20 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21d836:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21d83a:	8b 44 24 08          	mov    0x8(%rsp),%eax
  21d83e:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
    }
  21d843:	66 8b 44 24 1a       	mov    0x1a(%rsp),%ax
  21d848:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  21d84f:	c3                   	retq   
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d850:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21d855:	e8 86 fe ff ff       	callq  21d6e0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21d85a:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
                .get_bits(16..32) as u16,
  21d85e:	48 c7 84 24 88 00 00 	movq   $0x10,0x88(%rsp)
  21d865:	00 10 00 00 00 
  21d86a:	48 c7 84 24 90 00 00 	movq   $0x20,0x90(%rsp)
  21d871:	00 20 00 00 00 
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d876:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  21d87d:	00 
  21d87e:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  21d885:	00 
  21d886:	48 8d 7c 24 5c       	lea    0x5c(%rsp),%rdi
  21d88b:	e8 90 23 00 00       	callq  21fc20 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21d890:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21d894:	8b 44 24 04          	mov    0x4(%rsp),%eax
  21d898:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
                .get_bits(16..32) as u16,
  21d89d:	eb a4                	jmp    21d843 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x123>
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d89f:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21d8a4:	e8 37 fe ff ff       	callq  21d6e0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21d8a9:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
                .get_bits(0..16) as u16,
  21d8ad:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21d8b4:	00 00 
  21d8b6:	48 c7 44 24 50 10 00 	movq   $0x10,0x50(%rsp)
  21d8bd:	00 00 
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21d8bf:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21d8c4:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  21d8c9:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
  21d8ce:	e8 4d 23 00 00       	callq  21fc20 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21d8d3:	89 04 24             	mov    %eax,(%rsp)
  21d8d6:	8b 04 24             	mov    (%rsp),%eax
  21d8d9:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
                .get_bits(0..16) as u16,
  21d8de:	e9 60 ff ff ff       	jmpq   21d843 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x123>
  21d8e3:	cc                   	int3   
  21d8e4:	cc                   	int3   
  21d8e5:	cc                   	int3   
  21d8e6:	cc                   	int3   
  21d8e7:	cc                   	int3   
  21d8e8:	cc                   	int3   
  21d8e9:	cc                   	int3   
  21d8ea:	cc                   	int3   
  21d8eb:	cc                   	int3   
  21d8ec:	cc                   	int3   
  21d8ed:	cc                   	int3   
  21d8ee:	cc                   	int3   
  21d8ef:	cc                   	int3   

000000000021d8f0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>:
    fn is_empty(config_word: u16) -> bool {
  21d8f0:	48 83 ec 02          	sub    $0x2,%rsp
  21d8f4:	66 89 f8             	mov    %di,%ax
  21d8f7:	66 89 04 24          	mov    %ax,(%rsp)
        config_word == 0xFFFF
  21d8fb:	66 83 f8 ff          	cmp    $0xffff,%ax
  21d8ff:	0f 94 c0             	sete   %al
    }
  21d902:	24 01                	and    $0x1,%al
  21d904:	0f b6 c0             	movzbl %al,%eax
  21d907:	48 83 c4 02          	add    $0x2,%rsp
  21d90b:	c3                   	retq   
  21d90c:	cc                   	int3   
  21d90d:	cc                   	int3   
  21d90e:	cc                   	int3   
  21d90f:	cc                   	int3   

000000000021d910 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber17is_multi_function17h9d37fbf3c9e2f0aaE>:
    fn is_multi_function(config_word: u16) -> bool {
  21d910:	48 83 ec 02          	sub    $0x2,%rsp
  21d914:	66 89 f8             	mov    %di,%ax
  21d917:	66 89 04 24          	mov    %ax,(%rsp)
        config_word & FLAG_MULTIFUNCTION_DEVICE as u16 != 0
  21d91b:	66 83 e0 50          	and    $0x50,%ax
  21d91f:	66 83 f8 00          	cmp    $0x0,%ax
  21d923:	0f 95 c0             	setne  %al
    }
  21d926:	24 01                	and    $0x1,%al
  21d928:	0f b6 c0             	movzbl %al,%eax
  21d92b:	48 83 c4 02          	add    $0x2,%rsp
  21d92f:	c3                   	retq   

000000000021d930 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE>:
    pub fn probe_device(bus: u8, dev: u8, callback: OnEntryCallback) {
  21d930:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21d937:	48 89 d1             	mov    %rdx,%rcx
  21d93a:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21d93f:	40 88 f0             	mov    %sil,%al
  21d942:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  21d946:	40 88 fa             	mov    %dil,%dl
  21d949:	88 54 24 3d          	mov    %dl,0x3d(%rsp)
  21d94d:	88 54 24 76          	mov    %dl,0x76(%rsp)
  21d951:	88 44 24 77          	mov    %al,0x77(%rsp)
  21d955:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, 0);
  21d95a:	48 8d 3d 86 4d fe ff 	lea    -0x1b27a(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21d961:	31 c9                	xor    %ecx,%ecx
  21d963:	0f b6 f2             	movzbl %dl,%esi
  21d966:	0f b6 d0             	movzbl %al,%edx
  21d969:	e8 b2 fd ff ff       	callq  21d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21d96e:	66 89 44 24 3e       	mov    %ax,0x3e(%rsp)
  21d973:	66 89 84 24 84 00 00 	mov    %ax,0x84(%rsp)
  21d97a:	00 
  21d97b:	66 8b 44 24 3e       	mov    0x3e(%rsp),%ax
        if Self::is_empty(vendor_id) {
  21d980:	0f b7 f8             	movzwl %ax,%edi
  21d983:	e8 68 ff ff ff       	callq  21d8f0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>
  21d988:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21d98c:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21d990:	a8 01                	test   $0x1,%al
  21d992:	75 1d                	jne    21d9b1 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
  21d994:	eb 00                	jmp    21d996 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x66>
  21d996:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21d99b:	8a 4c 24 3c          	mov    0x3c(%rsp),%cl
  21d99f:	40 8a 74 24 3d       	mov    0x3d(%rsp),%sil
        callback(bus, dev, 0);
  21d9a4:	31 d2                	xor    %edx,%edx
  21d9a6:	40 0f b6 fe          	movzbl %sil,%edi
  21d9aa:	0f b6 f1             	movzbl %cl,%esi
  21d9ad:	ff d0                	callq  *%rax
  21d9af:	eb 08                	jmp    21d9b9 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x89>
    }
  21d9b1:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21d9b8:	c3                   	retq   
  21d9b9:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  21d9bd:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
        let header_type = PCIDeviceQuery::HeaderType.query(bus, dev, 0);
  21d9c1:	48 8d 3d 20 4d fe ff 	lea    -0x1b2e0(%rip),%rdi        # 2026e8 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E+0x1>
  21d9c8:	31 c9                	xor    %ecx,%ecx
  21d9ca:	0f b6 f2             	movzbl %dl,%esi
  21d9cd:	0f b6 d0             	movzbl %al,%edx
  21d9d0:	e8 4b fd ff ff       	callq  21d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21d9d5:	66 89 44 24 2c       	mov    %ax,0x2c(%rsp)
  21d9da:	66 89 84 24 86 00 00 	mov    %ax,0x86(%rsp)
  21d9e1:	00 
  21d9e2:	66 8b 44 24 2c       	mov    0x2c(%rsp),%ax
        if Self::is_multi_function(header_type) {
  21d9e7:	0f b7 f8             	movzwl %ax,%edi
  21d9ea:	e8 21 ff ff ff       	callq  21d910 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber17is_multi_function17h9d37fbf3c9e2f0aaE>
  21d9ef:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  21d9f3:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  21d9f7:	a8 01                	test   $0x1,%al
  21d9f9:	75 02                	jne    21d9fd <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0xcd>
  21d9fb:	eb b4                	jmp    21d9b1 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
            for func in 0..MAX_FUNCTIONS_PER_DEVICE {
  21d9fd:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  21da04:	00 00 
  21da06:	48 c7 44 24 48 08 00 	movq   $0x8,0x48(%rsp)
  21da0d:	00 00 
  21da0f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21da14:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21da19:	e8 92 0c 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21da1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21da23:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21da28:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21da2d:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21da32:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21da37:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21da3c:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21da41:	e8 3a 0c 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21da46:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  21da4b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21da50:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21da55:	48 85 c0             	test   %rax,%rax
  21da58:	0f 84 53 ff ff ff    	je     21d9b1 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
  21da5e:	eb 00                	jmp    21da60 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x130>
  21da60:	eb 02                	jmp    21da64 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x134>
  21da62:	0f 0b                	ud2    
  21da64:	8a 4c 24 3c          	mov    0x3c(%rsp),%cl
  21da68:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
  21da6c:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21da71:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21da76:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21da7d:	00 
  21da7e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21da85:	00 
  21da86:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21da8d:	00 
                let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, func as u8);
  21da8e:	48 8d 3d 52 4c fe ff 	lea    -0x1b3ae(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21da95:	0f b6 f2             	movzbl %dl,%esi
  21da98:	0f b6 d1             	movzbl %cl,%edx
  21da9b:	0f b6 c8             	movzbl %al,%ecx
  21da9e:	e8 7d fc ff ff       	callq  21d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21daa3:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  21daa8:	66 89 84 24 a6 00 00 	mov    %ax,0xa6(%rsp)
  21daaf:	00 
  21dab0:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
                if !Self::is_empty(vendor_id) {
  21dab5:	0f b7 f8             	movzwl %ax,%edi
  21dab8:	e8 33 fe ff ff       	callq  21d8f0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>
  21dabd:	88 44 24 07          	mov    %al,0x7(%rsp)
  21dac1:	8a 44 24 07          	mov    0x7(%rsp),%al
  21dac5:	34 ff                	xor    $0xff,%al
  21dac7:	a8 01                	test   $0x1,%al
  21dac9:	75 05                	jne    21dad0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x1a0>
  21dacb:	e9 6c ff ff ff       	jmpq   21da3c <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x10c>
  21dad0:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21dad5:	8a 54 24 3c          	mov    0x3c(%rsp),%dl
  21dad9:	40 8a 74 24 3d       	mov    0x3d(%rsp),%sil
  21dade:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    callback(bus, dev, func as u8);
  21dae3:	40 0f b6 fe          	movzbl %sil,%edi
  21dae7:	0f b6 f2             	movzbl %dl,%esi
  21daea:	0f b6 d1             	movzbl %cl,%edx
  21daed:	ff d0                	callq  *%rax
  21daef:	e9 48 ff ff ff       	jmpq   21da3c <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x10c>
  21daf4:	cc                   	int3   
  21daf5:	cc                   	int3   
  21daf6:	cc                   	int3   
  21daf7:	cc                   	int3   
  21daf8:	cc                   	int3   
  21daf9:	cc                   	int3   
  21dafa:	cc                   	int3   
  21dafb:	cc                   	int3   
  21dafc:	cc                   	int3   
  21dafd:	cc                   	int3   
  21dafe:	cc                   	int3   
  21daff:	cc                   	int3   

000000000021db00 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E>:
    pub fn probe_bus(bus: u8, callback: OnEntryCallback) {
  21db00:	48 83 ec 78          	sub    $0x78,%rsp
  21db04:	48 89 34 24          	mov    %rsi,(%rsp)
  21db08:	40 88 f8             	mov    %dil,%al
  21db0b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21db0f:	88 44 24 57          	mov    %al,0x57(%rsp)
  21db13:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
        for dev in 0..MAX_DEVICES_PER_BUS {
  21db18:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21db1f:	00 00 
  21db21:	48 c7 44 24 28 20 00 	movq   $0x20,0x28(%rsp)
  21db28:	00 00 
  21db2a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21db2f:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21db34:	e8 77 0b 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21db39:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21db3e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21db43:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21db48:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21db4d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21db52:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21db57:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  21db5c:	e8 1f 0b 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21db61:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21db66:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21db6b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21db70:	48 85 c0             	test   %rax,%rax
  21db73:	74 06                	je     21db7b <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x7b>
  21db75:	eb 00                	jmp    21db77 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x77>
  21db77:	eb 07                	jmp    21db80 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x80>
  21db79:	0f 0b                	ud2    
    }
  21db7b:	48 83 c4 78          	add    $0x78,%rsp
  21db7f:	c3                   	retq   
  21db80:	48 8b 14 24          	mov    (%rsp),%rdx
  21db84:	8a 4c 24 0f          	mov    0xf(%rsp),%cl
        for dev in 0..MAX_DEVICES_PER_BUS {
  21db88:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21db8d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21db92:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21db97:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            Self::probe_device(bus, dev as u8, callback);
  21db9c:	0f b6 f9             	movzbl %cl,%edi
  21db9f:	0f b6 f0             	movzbl %al,%esi
  21dba2:	e8 89 fd ff ff       	callq  21d930 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE>
  21dba7:	eb ae                	jmp    21db57 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x57>
  21dba9:	cc                   	int3   
  21dbaa:	cc                   	int3   
  21dbab:	cc                   	int3   
  21dbac:	cc                   	int3   
  21dbad:	cc                   	int3   
  21dbae:	cc                   	int3   
  21dbaf:	cc                   	int3   

000000000021dbb0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE>:
    pub fn probe(callback: OnEntryCallback) {
  21dbb0:	48 83 ec 68          	sub    $0x68,%rsp
  21dbb4:	48 89 3c 24          	mov    %rdi,(%rsp)
  21dbb8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
        for bus in 0..MAX_BUS {
  21dbbd:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  21dbc4:	00 00 
  21dbc6:	48 c7 44 24 20 00 01 	movq   $0x100,0x20(%rsp)
  21dbcd:	00 00 
  21dbcf:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21dbd4:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21dbd9:	e8 d2 0a 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21dbde:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21dbe3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21dbe8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21dbed:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21dbf2:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21dbf7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21dbfc:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21dc01:	e8 7a 0a 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21dc06:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21dc0b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21dc10:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21dc15:	48 85 c0             	test   %rax,%rax
  21dc18:	74 06                	je     21dc20 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x70>
  21dc1a:	eb 00                	jmp    21dc1c <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x6c>
  21dc1c:	eb 07                	jmp    21dc25 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x75>
  21dc1e:	0f 0b                	ud2    
    }
  21dc20:	48 83 c4 68          	add    $0x68,%rsp
  21dc24:	c3                   	retq   
  21dc25:	48 8b 34 24          	mov    (%rsp),%rsi
        for bus in 0..MAX_BUS {
  21dc29:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21dc2e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21dc33:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21dc38:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            Self::probe_bus(bus as u8, callback);
  21dc3d:	0f b6 f8             	movzbl %al,%edi
  21dc40:	e8 bb fe ff ff       	callq  21db00 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E>
  21dc45:	eb b5                	jmp    21dbfc <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x4c>
  21dc47:	cc                   	int3   
  21dc48:	cc                   	int3   
  21dc49:	cc                   	int3   
  21dc4a:	cc                   	int3   
  21dc4b:	cc                   	int3   
  21dc4c:	cc                   	int3   
  21dc4d:	cc                   	int3   
  21dc4e:	cc                   	int3   
  21dc4f:	cc                   	int3   

000000000021dc50 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E>:
    pub fn new(bus: u8, dev: u8, func: u8) -> PCIDevice {
  21dc50:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  21dc57:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21dc5c:	88 c8                	mov    %cl,%al
  21dc5e:	88 44 24 45          	mov    %al,0x45(%rsp)
  21dc62:	88 d1                	mov    %dl,%cl
  21dc64:	88 4c 24 46          	mov    %cl,0x46(%rsp)
  21dc68:	40 88 f2             	mov    %sil,%dl
  21dc6b:	88 54 24 47          	mov    %dl,0x47(%rsp)
  21dc6f:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  21dc74:	88 94 24 e1 00 00 00 	mov    %dl,0xe1(%rsp)
  21dc7b:	88 8c 24 e2 00 00 00 	mov    %cl,0xe2(%rsp)
  21dc82:	88 84 24 e3 00 00 00 	mov    %al,0xe3(%rsp)
        let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, func);
  21dc89:	48 8d 3d 57 4a fe ff 	lea    -0x1b5a9(%rip),%rdi        # 2026e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21dc90:	0f b6 f2             	movzbl %dl,%esi
  21dc93:	0f b6 d1             	movzbl %cl,%edx
  21dc96:	0f b6 c8             	movzbl %al,%ecx
  21dc99:	e8 82 fa ff ff       	callq  21d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21dc9e:	66 89 44 24 56       	mov    %ax,0x56(%rsp)
  21dca3:	66 89 84 24 e4 00 00 	mov    %ax,0xe4(%rsp)
  21dcaa:	00 
  21dcab:	8a 44 24 45          	mov    0x45(%rsp),%al
  21dcaf:	8a 4c 24 46          	mov    0x46(%rsp),%cl
  21dcb3:	8a 54 24 47          	mov    0x47(%rsp),%dl
        let device_id = PCIDeviceQuery::DeviceID.query(bus, dev, func);
  21dcb7:	48 8d 3d 2b 4a fe ff 	lea    -0x1b5d5(%rip),%rdi        # 2026e9 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E+0x2>
  21dcbe:	0f b6 f2             	movzbl %dl,%esi
  21dcc1:	0f b6 d1             	movzbl %cl,%edx
  21dcc4:	0f b6 c8             	movzbl %al,%ecx
  21dcc7:	e8 54 fa ff ff       	callq  21d720 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21dccc:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
  21dcd1:	66 89 84 24 e6 00 00 	mov    %ax,0xe6(%rsp)
  21dcd8:	00 
        let mut bars: [u32; 6] = [0; 6];
  21dcd9:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21dcde:	31 f6                	xor    %esi,%esi
  21dce0:	ba 18 00 00 00       	mov    $0x18,%edx
  21dce5:	e8 26 b0 01 00       	callq  238d10 <memset>
        for idx in 0..6 {
  21dcea:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  21dcf1:	00 00 
  21dcf3:	48 c7 44 24 78 06 00 	movq   $0x6,0x78(%rsp)
  21dcfa:	00 00 
  21dcfc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21dd01:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  21dd06:	e8 a5 09 00 00       	callq  21e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21dd0b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21dd10:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21dd15:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21dd1a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21dd1f:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21dd26:	00 
  21dd27:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21dd2e:	00 
  21dd2f:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21dd36:	00 
  21dd37:	e8 44 09 00 00       	callq  21e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21dd3c:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  21dd43:	00 
  21dd44:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21dd4b:	00 
  21dd4c:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21dd53:	00 
  21dd54:	48 85 c0             	test   %rax,%rax
  21dd57:	74 09                	je     21dd62 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x112>
  21dd59:	eb 00                	jmp    21dd5b <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x10b>
  21dd5b:	e9 8b 00 00 00       	jmpq   21ddeb <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x19b>
  21dd60:	0f 0b                	ud2    
  21dd62:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21dd67:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21dd6c:	66 8b 54 24 36       	mov    0x36(%rsp),%dx
  21dd71:	66 8b 74 24 56       	mov    0x56(%rsp),%si
  21dd76:	40 8a 7c 24 45       	mov    0x45(%rsp),%dil
  21dd7b:	44 8a 44 24 46       	mov    0x46(%rsp),%r8b
  21dd80:	44 8a 4c 24 47       	mov    0x47(%rsp),%r9b
            bars,
  21dd85:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  21dd8a:	4c 89 94 24 c8 00 00 	mov    %r10,0xc8(%rsp)
  21dd91:	00 
  21dd92:	4c 8b 54 24 60       	mov    0x60(%rsp),%r10
  21dd97:	4c 89 94 24 d0 00 00 	mov    %r10,0xd0(%rsp)
  21dd9e:	00 
  21dd9f:	4c 8b 54 24 68       	mov    0x68(%rsp),%r10
  21dda4:	4c 89 94 24 d8 00 00 	mov    %r10,0xd8(%rsp)
  21ddab:	00 
        PCIDevice {
  21ddac:	44 88 49 1c          	mov    %r9b,0x1c(%rcx)
  21ddb0:	44 88 41 1d          	mov    %r8b,0x1d(%rcx)
  21ddb4:	40 88 79 1e          	mov    %dil,0x1e(%rcx)
  21ddb8:	66 89 71 18          	mov    %si,0x18(%rcx)
  21ddbc:	66 89 51 1a          	mov    %dx,0x1a(%rcx)
  21ddc0:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21ddc7:	00 
  21ddc8:	48 89 11             	mov    %rdx,(%rcx)
  21ddcb:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21ddd2:	00 
  21ddd3:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  21ddd7:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  21ddde:	00 
  21dddf:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  21dde3:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  21ddea:	c3                   	retq   
        for idx in 0..6 {
  21ddeb:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21ddf2:	00 
  21ddf3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ddf8:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21ddff:	00 
  21de00:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21de07:	00 
  21de08:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21de0f:	00 
            let offset = 0x10 + ((idx as u8) << 2);
  21de10:	c0 e0 02             	shl    $0x2,%al
  21de13:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21de17:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21de1b:	04 10                	add    $0x10,%al
  21de1d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21de21:	0f 92 c0             	setb   %al
  21de24:	a8 01                	test   $0x1,%al
  21de26:	75 35                	jne    21de5d <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x20d>
  21de28:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21de2c:	8a 4c 24 45          	mov    0x45(%rsp),%cl
  21de30:	8a 54 24 46          	mov    0x46(%rsp),%dl
  21de34:	40 8a 74 24 47       	mov    0x47(%rsp),%sil
  21de39:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
            let config_reg = PCIConfigRegister::new(bus, dev, func, offset);
  21de40:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21de47:	00 
  21de48:	40 0f b6 f6          	movzbl %sil,%esi
  21de4c:	0f b6 d2             	movzbl %dl,%edx
  21de4f:	0f b6 c9             	movzbl %cl,%ecx
  21de52:	44 0f b6 c0          	movzbl %al,%r8d
  21de56:	e8 b5 f7 ff ff       	callq  21d610 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21de5b:	eb 1a                	jmp    21de77 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x227>
            let offset = 0x10 + ((idx as u8) << 2);
  21de5d:	48 8d 3d 9c 48 fe ff 	lea    -0x1b764(%rip),%rdi        # 202700 <str.0>
  21de64:	48 8d 15 bd da 01 00 	lea    0x1dabd(%rip),%rdx        # 23b928 <memcmp+0x2be8>
  21de6b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21de70:	e8 7b 7d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21de75:	0f 0b                	ud2    
            bars[idx] = config_reg.read_config();
  21de77:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21de7e:	00 
  21de7f:	e8 5c f8 ff ff       	callq  21d6e0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21de84:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21de88:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21de8d:	48 83 f8 06          	cmp    $0x6,%rax
  21de91:	0f 92 c0             	setb   %al
  21de94:	a8 01                	test   $0x1,%al
  21de96:	75 02                	jne    21de9a <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x24a>
  21de98:	eb 12                	jmp    21deac <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x25c>
  21de9a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21de9f:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
  21dea3:	89 4c 84 58          	mov    %ecx,0x58(%rsp,%rax,4)
        for idx in 0..6 {
  21dea7:	e9 83 fe ff ff       	jmpq   21dd2f <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0xdf>
  21deac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            bars[idx] = config_reg.read_config();
  21deb1:	48 8d 15 88 da 01 00 	lea    0x1da88(%rip),%rdx        # 23b940 <memcmp+0x2c00>
  21deb8:	be 06 00 00 00       	mov    $0x6,%esi
  21debd:	e8 7e 7d 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21dec2:	0f 0b                	ud2    
  21dec4:	cc                   	int3   
  21dec5:	cc                   	int3   
  21dec6:	cc                   	int3   
  21dec7:	cc                   	int3   
  21dec8:	cc                   	int3   
  21dec9:	cc                   	int3   
  21deca:	cc                   	int3   
  21decb:	cc                   	int3   
  21decc:	cc                   	int3   
  21decd:	cc                   	int3   
  21dece:	cc                   	int3   
  21decf:	cc                   	int3   

000000000021ded0 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE>:
}

fn on_device_callback(bus: u8, dev: u8, func: u8) {
  21ded0:	53                   	push   %rbx
  21ded1:	48 81 ec e0 01 00 00 	sub    $0x1e0,%rsp
  21ded8:	88 d0                	mov    %dl,%al
  21deda:	40 88 f1             	mov    %sil,%cl
  21dedd:	40 88 fa             	mov    %dil,%dl
  21dee0:	88 94 24 a5 01 00 00 	mov    %dl,0x1a5(%rsp)
  21dee7:	88 8c 24 a6 01 00 00 	mov    %cl,0x1a6(%rsp)
  21deee:	88 84 24 a7 01 00 00 	mov    %al,0x1a7(%rsp)
    let pci_device = PCIDevice::new(bus, dev, func);
  21def5:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21defc:	00 
  21defd:	0f b6 f2             	movzbl %dl,%esi
  21df00:	0f b6 d1             	movzbl %cl,%edx
  21df03:	0f b6 c8             	movzbl %al,%ecx
  21df06:	e8 45 fd ff ff       	callq  21dc50 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E>

    log::info!(
  21df0b:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  21df12:	00 03 00 00 00 
  21df17:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  21df1e:	00 
  21df1f:	48 8d 35 d2 23 fe ff 	lea    -0x1dc2e(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  21df26:	e8 a5 50 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21df2b:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  21df32:	8a 84 24 8f 00 00 00 	mov    0x8f(%rsp),%al
  21df39:	a8 01                	test   $0x1,%al
  21df3b:	75 0c                	jne    21df49 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x79>
  21df3d:	eb 00                	jmp    21df3f <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x6f>
  21df3f:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  21df46:	00 
  21df47:	eb 60                	jmp    21dfa9 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xd9>
  21df49:	c6 84 24 d7 01 00 00 	movb   $0x0,0x1d7(%rsp)
  21df50:	00 
  21df51:	48 8b 3d f0 fb 01 00 	mov    0x1fbf0(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21df58:	0f b6 b4 24 d7 01 00 	movzbl 0x1d7(%rsp),%esi
  21df5f:	00 
  21df60:	e8 8b d2 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21df65:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  21df6c:	00 
  21df6d:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  21df74:	00 
  21df75:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21df7c:	00 
  21df7d:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  21df84:	00 
  21df85:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  21df8c:	00 
  21df8d:	e8 3e 50 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21df92:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  21df99:	8a 84 24 8e 00 00 00 	mov    0x8e(%rsp),%al
  21dfa0:	24 01                	and    $0x1,%al
  21dfa2:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  21dfa9:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  21dfb0:	01 
  21dfb1:	75 19                	jne    21dfcc <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xfc>
        pci_device.func,
        pci_device.vendor_id,
        pci_device.device_id
    );

    PCI_DEVICES.lock().push(pci_device);
  21dfb3:	48 8d 3d c0 47 fe ff 	lea    -0x1b840(%rip),%rdi        # 20277a <_ZN9r3_kernel7drivers3pci11PCI_DEVICES17hedd14ab3ecdeee63E>
  21dfba:	e8 d1 02 00 00       	callq  21e290 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1680ab5b43fd2a39E>
  21dfbf:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21dfc6:	00 
  21dfc7:	e9 12 02 00 00       	jmpq   21e1de <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x30e>
        pci_device.bus,
  21dfcc:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21dfd3:	00 
  21dfd4:	48 83 c7 1c          	add    $0x1c,%rdi
        pci_device.dev,
  21dfd8:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  21dfdf:	00 
  21dfe0:	48 83 c6 1d          	add    $0x1d,%rsi
        pci_device.func,
  21dfe4:	48 8d 94 24 90 00 00 	lea    0x90(%rsp),%rdx
  21dfeb:	00 
  21dfec:	48 83 c2 1e          	add    $0x1e,%rdx
        pci_device.vendor_id,
  21dff0:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  21dff7:	00 
  21dff8:	48 83 c1 18          	add    $0x18,%rcx
        pci_device.device_id
  21dffc:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
  21e003:	00 
  21e004:	48 83 c0 1a          	add    $0x1a,%rax
    log::info!(
  21e008:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21e00f:	00 
  21e010:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  21e017:	00 
  21e018:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  21e01f:	00 
  21e020:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  21e027:	00 
  21e028:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21e02f:	00 
  21e030:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
  21e037:	00 
  21e038:	48 89 bc 24 a8 01 00 	mov    %rdi,0x1a8(%rsp)
  21e03f:	00 
  21e040:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  21e047:	00 
  21e048:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21e04d:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  21e054:	00 
  21e055:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  21e05c:	00 
  21e05d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21e062:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  21e069:	00 
  21e06a:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21e071:	00 
  21e072:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21e077:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  21e07e:	00 
  21e07f:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  21e086:	00 
  21e087:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21e08c:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  21e093:	00 
  21e094:	48 8b 35 0d fb 01 00 	mov    0x1fb0d(%rip),%rsi        # 23dba8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21e09b:	e8 60 16 ff ff       	callq  20f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21e0a0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21e0a5:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21e0aa:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  21e0af:	48 8b 35 f2 fa 01 00 	mov    0x1faf2(%rip),%rsi        # 23dba8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21e0b6:	e8 45 16 ff ff       	callq  20f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21e0bb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21e0c0:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21e0c5:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  21e0ca:	48 8b 35 d7 fa 01 00 	mov    0x1fad7(%rip),%rsi        # 23dba8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21e0d1:	e8 2a 16 ff ff       	callq  20f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21e0d6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21e0db:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21e0e0:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21e0e5:	48 8b 35 b4 fa 01 00 	mov    0x1fab4(%rip),%rsi        # 23dba0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21e0ec:	e8 0f 10 ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21e0f1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e0f6:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21e0fb:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  21e100:	48 8b 35 99 fa 01 00 	mov    0x1fa99(%rip),%rsi        # 23dba0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21e107:	e8 f4 0f ff ff       	callq  20f100 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21e10c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e111:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21e116:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21e11b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21e120:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21e125:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21e12a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21e12f:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
  21e134:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
  21e139:	4c 8b 54 24 40       	mov    0x40(%rsp),%r10
  21e13e:	4c 8b 5c 24 78       	mov    0x78(%rsp),%r11
  21e143:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
  21e148:	48 89 9c 24 f8 00 00 	mov    %rbx,0xf8(%rsp)
  21e14f:	00 
  21e150:	4c 89 9c 24 00 01 00 	mov    %r11,0x100(%rsp)
  21e157:	00 
  21e158:	4c 89 94 24 08 01 00 	mov    %r10,0x108(%rsp)
  21e15f:	00 
  21e160:	4c 89 8c 24 10 01 00 	mov    %r9,0x110(%rsp)
  21e167:	00 
  21e168:	4c 89 84 24 18 01 00 	mov    %r8,0x118(%rsp)
  21e16f:	00 
  21e170:	48 89 bc 24 20 01 00 	mov    %rdi,0x120(%rsp)
  21e177:	00 
  21e178:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  21e17f:	00 
  21e180:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  21e187:	00 
  21e188:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  21e18f:	00 
  21e190:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21e197:	00 
  21e198:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  21e19f:	00 
  21e1a0:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21e1a7:	00 
  21e1a8:	48 8d 35 a9 d7 01 00 	lea    0x1d7a9(%rip),%rsi        # 23b958 <memcmp+0x2c18>
  21e1af:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  21e1b5:	4c 89 c2             	mov    %r8,%rdx
  21e1b8:	e8 73 83 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21e1bd:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  21e1c4:	00 
  21e1c5:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21e1cc:	00 
  21e1cd:	48 8d 15 d4 d7 01 00 	lea    0x1d7d4(%rip),%rdx        # 23b9a8 <memcmp+0x2c68>
  21e1d4:	e8 a7 4b 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21e1d9:	e9 d5 fd ff ff       	jmpq   21dfb3 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xe3>
  21e1de:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21e1e5:	00 
    PCI_DEVICES.lock().push(pci_device);
  21e1e6:	e8 15 09 01 00       	callq  22eb00 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hb304b52f5116a261E>
  21e1eb:	48 89 94 24 78 01 00 	mov    %rdx,0x178(%rsp)
  21e1f2:	00 
  21e1f3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21e1fa:	00 
  21e1fb:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  21e202:	00 
  21e203:	e8 08 0b 01 00       	callq  22ed10 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3ae5ac151c21364eE>
  21e208:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e20d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21e212:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21e219:	00 
  21e21a:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21e221:	00 
  21e222:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21e229:	00 
  21e22a:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  21e231:	00 
  21e232:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21e239:	00 
  21e23a:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  21e241:	00 
  21e242:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21e249:	00 
  21e24a:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  21e251:	00 
  21e252:	48 8d b4 24 80 01 00 	lea    0x180(%rsp),%rsi
  21e259:	00 
  21e25a:	e8 41 42 ff ff       	callq  2124a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E>
  21e25f:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  21e266:	00 
  21e267:	e8 54 dd fe ff       	callq  20bfc0 <_ZN4core3ptr109drop_in_place$LT$spin..mutex..MutexGuard$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h8235977f861fb9cdE>
}
  21e26c:	48 81 c4 e0 01 00 00 	add    $0x1e0,%rsp
  21e273:	5b                   	pop    %rbx
  21e274:	c3                   	retq   
  21e275:	cc                   	int3   
  21e276:	cc                   	int3   
  21e277:	cc                   	int3   
  21e278:	cc                   	int3   
  21e279:	cc                   	int3   
  21e27a:	cc                   	int3   
  21e27b:	cc                   	int3   
  21e27c:	cc                   	int3   
  21e27d:	cc                   	int3   
  21e27e:	cc                   	int3   
  21e27f:	cc                   	int3   

000000000021e280 <_ZN9r3_kernel7drivers3pci14detect_devices17hf40cc5a295e67b37E>:

pub fn detect_devices() {
  21e280:	50                   	push   %rax
    PCIDeviceProber::probe(on_device_callback);
  21e281:	48 8d 3d 48 fc ff ff 	lea    -0x3b8(%rip),%rdi        # 21ded0 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE>
  21e288:	e8 23 f9 ff ff       	callq  21dbb0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE>
}
  21e28d:	58                   	pop    %rax
  21e28e:	c3                   	retq   
  21e28f:	cc                   	int3   

000000000021e290 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1680ab5b43fd2a39E>:
            fn deref(&self) -> &$T {
  21e290:	48 83 ec 18          	sub    $0x18,%rsp
  21e294:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21e299:	48 8d 05 f0 64 02 00 	lea    0x264f0(%rip),%rax        # 244790 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb4570fa13371976aE>
  21e2a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e2a5:	48 8d 3d e4 64 02 00 	lea    0x264e4(%rip),%rdi        # 244790 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb4570fa13371976aE>
  21e2ac:	e8 3f aa fe ff       	callq  208cf0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE>
  21e2b1:	48 89 04 24          	mov    %rax,(%rsp)
  21e2b5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21e2b9:	48 83 c4 18          	add    $0x18,%rsp
  21e2bd:	c3                   	retq   
  21e2be:	cc                   	int3   
  21e2bf:	cc                   	int3   

000000000021e2c0 <_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h16fc3b88bb1d607fE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A, B> PartialEq<[B]> for [A]
where
    A: PartialEq<B>,
{
    fn eq(&self, other: &[B]) -> bool {
  21e2c0:	48 83 ec 28          	sub    $0x28,%rsp
  21e2c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21e2c9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21e2ce:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21e2d3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
        SlicePartialEq::equal(self, other)
  21e2d8:	e8 13 00 00 00       	callq  21e2f0 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E>
  21e2dd:	88 44 24 07          	mov    %al,0x7(%rsp)
  21e2e1:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21e2e5:	24 01                	and    $0x1,%al
  21e2e7:	0f b6 c0             	movzbl %al,%eax
  21e2ea:	48 83 c4 28          	add    $0x28,%rsp
  21e2ee:	c3                   	retq   
  21e2ef:	cc                   	int3   

000000000021e2f0 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E>:
// Use memcmp for bytewise equality when the types allow
impl<A, B> SlicePartialEq<B> for [A]
where
    A: BytewiseEquality<B>,
{
    fn equal(&self, other: &[B]) -> bool {
  21e2f0:	48 83 ec 78          	sub    $0x78,%rsp
  21e2f4:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21e2f9:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21e2fe:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21e303:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21e308:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21e30d:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  21e312:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21e317:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        if self.len() != other.len() {
  21e31c:	48 39 ce             	cmp    %rcx,%rsi
  21e31f:	75 1b                	jne    21e33c <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x4c>
  21e321:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21e326:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        }

        // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
        // The two slices have been checked to have the same size above.
        unsafe {
            let size = mem::size_of_val(self);
  21e32b:	e8 b0 26 ff ff       	callq  2109e0 <_ZN4core3mem11size_of_val17h492ca49025244003E>
  21e330:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e335:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21e33a:	eb 13                	jmp    21e34f <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x5f>
            return false;
  21e33c:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
            memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
        }
    }
  21e341:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  21e345:	24 01                	and    $0x1,%al
  21e347:	0f b6 c0             	movzbl %al,%eax
  21e34a:	48 83 c4 78          	add    $0x78,%rsp
  21e34e:	c3                   	retq   
  21e34f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21e354:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
  21e359:	e8 b2 50 01 00       	callq  233410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21e35e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21e363:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21e368:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21e36d:	e8 9e 50 01 00       	callq  233410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21e372:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e377:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21e37c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21e381:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21e386:	e8 b5 a9 01 00       	callq  238d40 <memcmp>
  21e38b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21e38f:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  21e393:	83 f8 00             	cmp    $0x0,%eax
  21e396:	0f 94 c0             	sete   %al
  21e399:	24 01                	and    $0x1,%al
  21e39b:	88 44 24 4f          	mov    %al,0x4f(%rsp)
    }
  21e39f:	eb a0                	jmp    21e341 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x51>
  21e3a1:	cc                   	int3   
  21e3a2:	cc                   	int3   
  21e3a3:	cc                   	int3   
  21e3a4:	cc                   	int3   
  21e3a5:	cc                   	int3   
  21e3a6:	cc                   	int3   
  21e3a7:	cc                   	int3   
  21e3a8:	cc                   	int3   
  21e3a9:	cc                   	int3   
  21e3aa:	cc                   	int3   
  21e3ab:	cc                   	int3   
  21e3ac:	cc                   	int3   
  21e3ad:	cc                   	int3   
  21e3ae:	cc                   	int3   
  21e3af:	cc                   	int3   

000000000021e3b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb9bbc8b08964feefE>:
  21e3b0:	48 83 ec 18          	sub    $0x18,%rsp
  21e3b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21e3b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21e3be:	48 8b 3f             	mov    (%rdi),%rdi
  21e3c1:	e8 3a 7e 01 00       	callq  236200 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>
  21e3c6:	88 44 24 07          	mov    %al,0x7(%rsp)
  21e3ca:	8a 44 24 07          	mov    0x7(%rsp),%al
  21e3ce:	24 01                	and    $0x1,%al
  21e3d0:	0f b6 c0             	movzbl %al,%eax
  21e3d3:	48 83 c4 18          	add    $0x18,%rsp
  21e3d7:	c3                   	retq   
  21e3d8:	cc                   	int3   
  21e3d9:	cc                   	int3   
  21e3da:	cc                   	int3   
  21e3db:	cc                   	int3   
  21e3dc:	cc                   	int3   
  21e3dd:	cc                   	int3   
  21e3de:	cc                   	int3   
  21e3df:	cc                   	int3   

000000000021e3e0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  21e3e0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21e3e7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21e3ec:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21e3f1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e3f6:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21e3fb:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21e400:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21e405:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21e40a:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21e411:	00 
  21e412:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21e417:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21e41c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e421:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21e426:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21e42b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21e430:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        unsafe { intrinsics::offset(self, count) as *mut T }
  21e435:	48 01 c8             	add    %rcx,%rax
  21e438:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21e43d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21e442:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e447:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21e44c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21e451:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
  21e456:	48 29 c6             	sub    %rax,%rsi
  21e459:	e8 52 5d 01 00       	callq  2341b0 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  21e45e:	48 89 04 24          	mov    %rax,(%rsp)
  21e462:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e467:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e46c:	48 8b 04 24          	mov    (%rsp),%rax
        }
    }
  21e470:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21e477:	c3                   	retq   
  21e478:	cc                   	int3   
  21e479:	cc                   	int3   
  21e47a:	cc                   	int3   
  21e47b:	cc                   	int3   
  21e47c:	cc                   	int3   
  21e47d:	cc                   	int3   
  21e47e:	cc                   	int3   
  21e47f:	cc                   	int3   

000000000021e480 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21e480:	48 83 ec 58          	sub    $0x58,%rsp
  21e484:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  21e489:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21e48e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21e493:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21e498:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e49d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21e4a2:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  21e4a7:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21e4ac:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        if self.start > self.end {
  21e4b1:	48 39 f7             	cmp    %rsi,%rdi
  21e4b4:	77 11                	ja     21e4c7 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x47>
  21e4b6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e4bb:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
  21e4c0:	48 39 c8             	cmp    %rcx,%rax
  21e4c3:	77 3c                	ja     21e501 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x81>
  21e4c5:	eb 16                	jmp    21e4dd <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x5d>
  21e4c7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21e4cc:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21e4d1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_index_order_fail(self.start, self.end);
  21e4d6:	e8 15 7b 01 00       	callq  235ff0 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  21e4db:	0f 0b                	ud2    
  21e4dd:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21e4e2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21e4e7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21e4ec:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  21e4f1:	e8 ea fe ff ff       	callq  21e3e0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>
  21e4f6:	48 89 04 24          	mov    %rax,(%rsp)
  21e4fa:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e4ff:	eb 16                	jmp    21e517 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x97>
  21e501:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21e506:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21e50b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
  21e510:	e8 5b 7a 01 00       	callq  235f70 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  21e515:	0f 0b                	ud2    
  21e517:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e51c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e520:	48 83 c4 58          	add    $0x58,%rsp
  21e524:	c3                   	retq   
  21e525:	cc                   	int3   
  21e526:	cc                   	int3   
  21e527:	cc                   	int3   
  21e528:	cc                   	int3   
  21e529:	cc                   	int3   
  21e52a:	cc                   	int3   
  21e52b:	cc                   	int3   
  21e52c:	cc                   	int3   
  21e52d:	cc                   	int3   
  21e52e:	cc                   	int3   
  21e52f:	cc                   	int3   

000000000021e530 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc069e41a2953a9f8E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21e530:	48 83 ec 38          	sub    $0x38,%rsp
  21e534:	49 89 c8             	mov    %rcx,%r8
  21e537:	48 89 d1             	mov    %rdx,%rcx
  21e53a:	48 89 f2             	mov    %rsi,%rdx
  21e53d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21e542:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21e547:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        (0..self.end).index_mut(slice)
  21e54c:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21e553:	00 00 
  21e555:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21e55a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21e55f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21e564:	e8 17 ff ff ff       	callq  21e480 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>
  21e569:	48 89 04 24          	mov    %rax,(%rsp)
  21e56d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e572:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e577:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e57b:	48 83 c4 38          	add    $0x38,%rsp
  21e57f:	c3                   	retq   

000000000021e580 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h43e174c909a3be07E>:
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..slice.len()).get_unchecked(slice) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  21e580:	48 83 ec 68          	sub    $0x68,%rsp
  21e584:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21e589:	48 89 f0             	mov    %rsi,%rax
  21e58c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21e591:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21e596:	48 89 f8             	mov    %rdi,%rax
  21e599:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21e59e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e5a3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21e5a8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  21e5ad:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  21e5b2:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  21e5b7:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
    /// ```
    #[inline(always)]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
        metadata(self)
  21e5bc:	e8 df 25 ff ff       	callq  210ba0 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>
  21e5c1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21e5c6:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21e5cb:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21e5d0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e5d5:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
  21e5da:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  21e5df:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21e5e4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21e5e9:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21e5ee:	e8 ed fd ff ff       	callq  21e3e0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>
  21e5f3:	48 89 04 24          	mov    %rax,(%rsp)
  21e5f7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e5fc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e601:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e605:	48 83 c4 68          	add    $0x68,%rsp
  21e609:	c3                   	retq   
  21e60a:	cc                   	int3   
  21e60b:	cc                   	int3   
  21e60c:	cc                   	int3   
  21e60d:	cc                   	int3   
  21e60e:	cc                   	int3   
  21e60f:	cc                   	int3   

000000000021e610 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21e610:	48 83 ec 48          	sub    $0x48,%rsp
  21e614:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21e619:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21e61e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  21e623:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21e628:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e62d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21e632:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
        if self.start > slice.len() {
  21e637:	48 39 d7             	cmp    %rdx,%rdi
  21e63a:	77 1f                	ja     21e65b <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE+0x4b>
  21e63c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21e641:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21e646:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  21e64b:	e8 30 ff ff ff       	callq  21e580 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h43e174c909a3be07E>
  21e650:	48 89 04 24          	mov    %rax,(%rsp)
  21e654:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e659:	eb 16                	jmp    21e671 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE+0x61>
  21e65b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21e660:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21e665:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_start_index_len_fail(self.start, slice.len());
  21e66a:	e8 81 78 01 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21e66f:	0f 0b                	ud2    
  21e671:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e676:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e67a:	48 83 c4 48          	add    $0x48,%rsp
  21e67e:	c3                   	retq   
  21e67f:	cc                   	int3   

000000000021e680 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
  21e680:	48 83 ec 18          	sub    $0x18,%rsp
  21e684:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.spec_next()
  21e689:	e8 42 00 00 00       	callq  21e6d0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E>
  21e68e:	48 89 04 24          	mov    %rax,(%rsp)
  21e692:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e697:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e69c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e6a0:	48 83 c4 18          	add    $0x18,%rsp
  21e6a4:	c3                   	retq   
  21e6a5:	cc                   	int3   
  21e6a6:	cc                   	int3   
  21e6a7:	cc                   	int3   
  21e6a8:	cc                   	int3   
  21e6a9:	cc                   	int3   
  21e6aa:	cc                   	int3   
  21e6ab:	cc                   	int3   
  21e6ac:	cc                   	int3   
  21e6ad:	cc                   	int3   
  21e6ae:	cc                   	int3   
  21e6af:	cc                   	int3   

000000000021e6b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>:
    fn into_iter(self) -> I {
  21e6b0:	48 83 ec 10          	sub    $0x10,%rsp
  21e6b4:	48 89 f2             	mov    %rsi,%rdx
  21e6b7:	48 89 f8             	mov    %rdi,%rax
  21e6ba:	48 89 04 24          	mov    %rax,(%rsp)
  21e6be:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21e6c3:	48 83 c4 10          	add    $0x10,%rsp
  21e6c7:	c3                   	retq   
  21e6c8:	cc                   	int3   
  21e6c9:	cc                   	int3   
  21e6ca:	cc                   	int3   
  21e6cb:	cc                   	int3   
  21e6cc:	cc                   	int3   
  21e6cd:	cc                   	int3   
  21e6ce:	cc                   	int3   
  21e6cf:	cc                   	int3   

000000000021e6d0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E>:
    fn spec_next(&mut self) -> Option<T> {
  21e6d0:	48 83 ec 48          	sub    $0x48,%rsp
  21e6d4:	48 89 fe             	mov    %rdi,%rsi
  21e6d7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21e6dc:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        if self.start < self.end {
  21e6e1:	48 89 f7             	mov    %rsi,%rdi
  21e6e4:	48 83 c6 08          	add    $0x8,%rsi
  21e6e8:	e8 d3 a8 00 00       	callq  228fc0 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h88ff743f82721c38E>
  21e6ed:	88 44 24 27          	mov    %al,0x27(%rsp)
  21e6f1:	8a 44 24 27          	mov    0x27(%rsp),%al
  21e6f5:	a8 01                	test   $0x1,%al
  21e6f7:	75 0d                	jne    21e706 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x36>
  21e6f9:	eb 00                	jmp    21e6fb <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x2b>
            None
  21e6fb:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21e702:	00 00 
        if self.start < self.end {
  21e704:	eb 4d                	jmp    21e753 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x83>
  21e706:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
  21e70b:	e8 60 31 00 00       	callq  221870 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>
  21e710:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e715:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21e71a:	be 01 00 00 00       	mov    $0x1,%esi
  21e71f:	e8 fc c6 00 00       	callq  22ae20 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3f6f4c9db53fef0cE>
  21e724:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e729:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21e72e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21e733:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(mem::replace(&mut self.start, n))
  21e738:	e8 e3 22 ff ff       	callq  210a20 <_ZN4core3mem7replace17h71040b40dccb5c97E>
  21e73d:	48 89 04 24          	mov    %rax,(%rsp)
  21e741:	48 8b 04 24          	mov    (%rsp),%rax
  21e745:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21e74a:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  21e751:	00 00 
    }
  21e753:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e758:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21e75d:	48 83 c4 48          	add    $0x48,%rsp
  21e761:	c3                   	retq   
  21e762:	cc                   	int3   
  21e763:	cc                   	int3   
  21e764:	cc                   	int3   
  21e765:	cc                   	int3   
  21e766:	cc                   	int3   
  21e767:	cc                   	int3   
  21e768:	cc                   	int3   
  21e769:	cc                   	int3   
  21e76a:	cc                   	int3   
  21e76b:	cc                   	int3   
  21e76c:	cc                   	int3   
  21e76d:	cc                   	int3   
  21e76e:	cc                   	int3   
  21e76f:	cc                   	int3   

000000000021e770 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h54fdde9cf6df2759E>:
    }
}

#[stable(feature = "collections_range", since = "1.28.0")]
impl<T> RangeBounds<T> for Range<T> {
    fn start_bound(&self) -> Bound<&T> {
  21e770:	48 83 ec 18          	sub    $0x18,%rsp
  21e774:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Included(&self.start)
  21e779:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21e77e:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  21e785:	00 
    }
  21e786:	48 8b 04 24          	mov    (%rsp),%rax
  21e78a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e78f:	48 83 c4 18          	add    $0x18,%rsp
  21e793:	c3                   	retq   
  21e794:	cc                   	int3   
  21e795:	cc                   	int3   
  21e796:	cc                   	int3   
  21e797:	cc                   	int3   
  21e798:	cc                   	int3   
  21e799:	cc                   	int3   
  21e79a:	cc                   	int3   
  21e79b:	cc                   	int3   
  21e79c:	cc                   	int3   
  21e79d:	cc                   	int3   
  21e79e:	cc                   	int3   
  21e79f:	cc                   	int3   

000000000021e7a0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h0beee5ac9a35870cE>:
    fn end_bound(&self) -> Bound<&T> {
  21e7a0:	48 83 ec 18          	sub    $0x18,%rsp
  21e7a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Excluded(&self.end)
  21e7a9:	48 83 c7 08          	add    $0x8,%rdi
  21e7ad:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21e7b2:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  21e7b9:	00 
    }
  21e7ba:	48 8b 04 24          	mov    (%rsp),%rax
  21e7be:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e7c3:	48 83 c4 18          	add    $0x18,%rsp
  21e7c7:	c3                   	retq   
  21e7c8:	cc                   	int3   
  21e7c9:	cc                   	int3   
  21e7ca:	cc                   	int3   
  21e7cb:	cc                   	int3   
  21e7cc:	cc                   	int3   
  21e7cd:	cc                   	int3   
  21e7ce:	cc                   	int3   
  21e7cf:	cc                   	int3   

000000000021e7d0 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h52318d6ef1667890E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21e7d0:	48 83 ec 18          	sub    $0x18,%rsp
  21e7d4:	48 89 f2             	mov    %rsi,%rdx
  21e7d7:	48 89 f8             	mov    %rdi,%rax
  21e7da:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e7df:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        slice
    }
  21e7e4:	48 83 c4 18          	add    $0x18,%rsp
  21e7e8:	c3                   	retq   
  21e7e9:	cc                   	int3   
  21e7ea:	cc                   	int3   
  21e7eb:	cc                   	int3   
  21e7ec:	cc                   	int3   
  21e7ed:	cc                   	int3   
  21e7ee:	cc                   	int3   
  21e7ef:	cc                   	int3   

000000000021e7f0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>:
    reason = "Uncertain how much info should be exposed",
    issue = "48043"
)]
impl From<TryReserveErrorKind> for TryReserveError {
    #[inline]
    fn from(kind: TryReserveErrorKind) -> Self {
  21e7f0:	48 83 ec 20          	sub    $0x20,%rsp
  21e7f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21e7f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Self { kind }
  21e7fe:	48 89 3c 24          	mov    %rdi,(%rsp)
  21e802:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21e807:	48 8b 04 24          	mov    (%rsp),%rax
  21e80b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e810:	48 83 c4 20          	add    $0x20,%rsp
  21e814:	c3                   	retq   
  21e815:	cc                   	int3   
  21e816:	cc                   	int3   
  21e817:	cc                   	int3   
  21e818:	cc                   	int3   
  21e819:	cc                   	int3   
  21e81a:	cc                   	int3   
  21e81b:	cc                   	int3   
  21e81c:	cc                   	int3   
  21e81d:	cc                   	int3   
  21e81e:	cc                   	int3   
  21e81f:	cc                   	int3   

000000000021e820 <_ZN5alloc11collections15TryReserveError4kind17h258eb8c8c0660a86E>:
    pub fn kind(&self) -> TryReserveErrorKind {
  21e820:	48 83 ec 18          	sub    $0x18,%rsp
  21e824:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.kind.clone()
  21e829:	e8 22 00 00 00       	callq  21e850 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE>
  21e82e:	48 89 04 24          	mov    %rax,(%rsp)
  21e832:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e837:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e83c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21e840:	48 83 c4 18          	add    $0x18,%rsp
  21e844:	c3                   	retq   
  21e845:	cc                   	int3   
  21e846:	cc                   	int3   
  21e847:	cc                   	int3   
  21e848:	cc                   	int3   
  21e849:	cc                   	int3   
  21e84a:	cc                   	int3   
  21e84b:	cc                   	int3   
  21e84c:	cc                   	int3   
  21e84d:	cc                   	int3   
  21e84e:	cc                   	int3   
  21e84f:	cc                   	int3   

000000000021e850 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE>:
#[derive(Clone, PartialEq, Eq, Debug)]
  21e850:	48 83 ec 48          	sub    $0x48,%rsp
  21e854:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e859:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21e85e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e863:	48 8b 40 08          	mov    0x8(%rax),%rax
  21e867:	48 85 c0             	test   %rax,%rax
  21e86a:	0f 95 c0             	setne  %al
  21e86d:	0f b6 c0             	movzbl %al,%eax
  21e870:	74 06                	je     21e878 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x28>
  21e872:	eb 00                	jmp    21e874 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x24>
  21e874:	eb 0d                	jmp    21e883 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x33>
  21e876:	0f 0b                	ud2    
  21e878:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21e87f:	00 00 
  21e881:	eb 44                	jmp    21e8c7 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x77>
        layout: Layout,
  21e883:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21e888:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        non_exhaustive: (),
  21e88d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e892:	48 89 04 24          	mov    %rax,(%rsp)
  21e896:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        layout: Layout,
  21e89b:	e8 f0 d9 ff ff       	callq  21c290 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17hcf873c6950f0943fE>
  21e8a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e8a5:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21e8aa:	48 8b 3c 24          	mov    (%rsp),%rdi
        non_exhaustive: (),
  21e8ae:	e8 4d da fe ff       	callq  20c300 <_ZN4core5clone5Clone5clone17h3340d57e31d9f28aE>
  21e8b3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21e8b8:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
#[derive(Clone, PartialEq, Eq, Debug)]
  21e8bd:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21e8c2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e8c7:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21e8cc:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21e8d1:	48 83 c4 48          	add    $0x48,%rsp
  21e8d5:	c3                   	retq   
  21e8d6:	cc                   	int3   
  21e8d7:	cc                   	int3   
  21e8d8:	cc                   	int3   
  21e8d9:	cc                   	int3   
  21e8da:	cc                   	int3   
  21e8db:	cc                   	int3   
  21e8dc:	cc                   	int3   
  21e8dd:	cc                   	int3   
  21e8de:	cc                   	int3   
  21e8df:	cc                   	int3   

000000000021e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hd22a39966f984ff5E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
  21e8e0:	48 83 ec 10          	sub    $0x10,%rsp
  21e8e4:	48 89 f8             	mov    %rdi,%rax
  21e8e7:	48 89 04 24          	mov    %rax,(%rsp)
  21e8eb:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21e8f0:	48 83 c4 10          	add    $0x10,%rsp
  21e8f4:	c3                   	retq   
  21e8f5:	cc                   	int3   
  21e8f6:	cc                   	int3   
  21e8f7:	cc                   	int3   
  21e8f8:	cc                   	int3   
  21e8f9:	cc                   	int3   
  21e8fa:	cc                   	int3   
  21e8fb:	cc                   	int3   
  21e8fc:	cc                   	int3   
  21e8fd:	cc                   	int3   
  21e8fe:	cc                   	int3   
  21e8ff:	cc                   	int3   

000000000021e900 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E>:
    ///
    /// [`clone_from_slice`]: slice::clone_from_slice
    /// [`split_at_mut`]: slice::split_at_mut
    #[doc(alias = "memcpy")]
    #[stable(feature = "copy_from_slice", since = "1.9.0")]
    pub fn copy_from_slice(&mut self, src: &[T])
  21e900:	48 83 ec 58          	sub    $0x58,%rsp
  21e904:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21e909:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21e90e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21e913:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e918:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21e91d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  21e922:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21e927:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
                "source slice length ({}) does not match destination slice length ({})",
                src_len, dst_len,
            );
        }

        if self.len() != src.len() {
  21e92c:	48 39 ce             	cmp    %rcx,%rsi
  21e92f:	75 16                	jne    21e947 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E+0x47>
  21e931:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21e936:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi

        // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        // checked to have the same length. The slices cannot overlap because
        // mutable references are exclusive.
        unsafe {
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
  21e93b:	e8 d0 4a 01 00       	callq  233410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21e940:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e945:	eb 18                	jmp    21e95f <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E+0x5f>
  21e947:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21e94c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            len_mismatch_fail(self.len(), src.len());
  21e951:	48 8d 15 88 d0 01 00 	lea    0x1d088(%rip),%rdx        # 23b9e0 <memcmp+0x2ca0>
  21e958:	e8 13 78 01 00       	callq  236170 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h92a18e41e7a79e49E>
  21e95d:	0f 0b                	ud2    
  21e95f:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21e964:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
  21e969:	e8 72 ff ff ff       	callq  21e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hd22a39966f984ff5E>
  21e96e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e973:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21e978:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21e97d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21e982:	e8 89 c3 00 00       	callq  22ad10 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
        }
    }
  21e987:	48 83 c4 58          	add    $0x58,%rsp
  21e98b:	c3                   	retq   
  21e98c:	cc                   	int3   
  21e98d:	cc                   	int3   
  21e98e:	cc                   	int3   
  21e98f:	cc                   	int3   

000000000021e990 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd1f0389311dd9dccE>:
    pub const fn as_ptr(&self) -> *const T {
  21e990:	48 83 ec 10          	sub    $0x10,%rsp
  21e994:	48 89 f8             	mov    %rdi,%rax
  21e997:	48 89 04 24          	mov    %rax,(%rsp)
  21e99b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21e9a0:	48 83 c4 10          	add    $0x10,%rsp
  21e9a4:	c3                   	retq   
  21e9a5:	cc                   	int3   
  21e9a6:	cc                   	int3   
  21e9a7:	cc                   	int3   
  21e9a8:	cc                   	int3   
  21e9a9:	cc                   	int3   
  21e9aa:	cc                   	int3   
  21e9ab:	cc                   	int3   
  21e9ac:	cc                   	int3   
  21e9ad:	cc                   	int3   
  21e9ae:	cc                   	int3   
  21e9af:	cc                   	int3   

000000000021e9b0 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h5c6e94fe23e826b3E>:
                /// The value must not be zero.
                #[$stability]
                #[$const_new_unchecked_stability]
                #[must_use]
                #[inline]
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
  21e9b0:	48 83 ec 10          	sub    $0x10,%rsp
  21e9b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                    // SAFETY: this is guaranteed to be safe by the caller.
                    unsafe { Self(n) }
  21e9b9:	48 89 3c 24          	mov    %rdi,(%rsp)
                }
  21e9bd:	48 8b 04 24          	mov    (%rsp),%rax
  21e9c1:	48 83 c4 10          	add    $0x10,%rsp
  21e9c5:	c3                   	retq   
  21e9c6:	cc                   	int3   
  21e9c7:	cc                   	int3   
  21e9c8:	cc                   	int3   
  21e9c9:	cc                   	int3   
  21e9ca:	cc                   	int3   
  21e9cb:	cc                   	int3   
  21e9cc:	cc                   	int3   
  21e9cd:	cc                   	int3   
  21e9ce:	cc                   	int3   
  21e9cf:	cc                   	int3   

000000000021e9d0 <_ZN4core3num7nonzero12NonZeroUsize3get17h423dfcaad4de4b60E>:

                /// Returns the value as a primitive type.
                #[$stability]
                #[inline]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                pub const fn get(self) -> $Int {
  21e9d0:	50                   	push   %rax
  21e9d1:	48 89 f8             	mov    %rdi,%rax
  21e9d4:	48 89 04 24          	mov    %rax,(%rsp)
                    self.0
                }
  21e9d8:	59                   	pop    %rcx
  21e9d9:	c3                   	retq   
  21e9da:	cc                   	int3   
  21e9db:	cc                   	int3   
  21e9dc:	cc                   	int3   
  21e9dd:	cc                   	int3   
  21e9de:	cc                   	int3   
  21e9df:	cc                   	int3   

000000000021e9e0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E>:
    pub fn scroll(fb: &mut MutexGuard<framebuffer::FramebufferMemory>, n_lines: usize) {
  21e9e0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  21e9e7:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  21e9ee:	00 
  21e9ef:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  21e9f6:	00 
  21e9f7:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  21e9fe:	00 
  21e9ff:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  21ea06:	00 
        let total_bytes = fb.buffer.len();
  21ea07:	e8 54 02 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ea0c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21ea13:	00 
  21ea14:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  21ea1b:	00 
  21ea1c:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  21ea23:	00 
  21ea24:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  21ea28:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  21ea2f:	00 
  21ea30:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  21ea37:	00 
        let offset = n_lines * FONT_HEIGHT * fb.width * fb.bytes_per_pixel;
  21ea38:	b9 10 00 00 00       	mov    $0x10,%ecx
  21ea3d:	48 f7 e1             	mul    %rcx
  21ea40:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21ea47:	00 
  21ea48:	0f 90 c0             	seto   %al
  21ea4b:	a8 01                	test   $0x1,%al
  21ea4d:	75 17                	jne    21ea66 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x86>
  21ea4f:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21ea56:	00 
  21ea57:	e8 04 02 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ea5c:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21ea63:	00 
  21ea64:	eb 1a                	jmp    21ea80 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xa0>
  21ea66:	48 8d 3d a3 3d fe ff 	lea    -0x1c25d(%rip),%rdi        # 202810 <str.0>
  21ea6d:	48 8d 15 84 cf 01 00 	lea    0x1cf84(%rip),%rdx        # 23b9f8 <memcmp+0x2cb8>
  21ea74:	be 21 00 00 00       	mov    $0x21,%esi
  21ea79:	e8 72 71 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ea7e:	0f 0b                	ud2    
  21ea80:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21ea87:	00 
  21ea88:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21ea8f:	00 
  21ea90:	48 f7 61 10          	mulq   0x10(%rcx)
  21ea94:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21ea9b:	00 
  21ea9c:	0f 90 c0             	seto   %al
  21ea9f:	a8 01                	test   $0x1,%al
  21eaa1:	75 17                	jne    21eaba <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xda>
  21eaa3:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21eaaa:	00 
  21eaab:	e8 b0 01 01 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21eab0:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21eab7:	00 
  21eab8:	eb 1a                	jmp    21ead4 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xf4>
  21eaba:	48 8d 3d 4f 3d fe ff 	lea    -0x1c2b1(%rip),%rdi        # 202810 <str.0>
  21eac1:	48 8d 15 30 cf 01 00 	lea    0x1cf30(%rip),%rdx        # 23b9f8 <memcmp+0x2cb8>
  21eac8:	be 21 00 00 00       	mov    $0x21,%esi
  21eacd:	e8 1e 71 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ead2:	0f 0b                	ud2    
  21ead4:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21eadb:	00 
  21eadc:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21eae3:	00 
  21eae4:	48 f7 61 20          	mulq   0x20(%rcx)
  21eae8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21eaef:	00 
  21eaf0:	0f 90 c0             	seto   %al
  21eaf3:	a8 01                	test   $0x1,%al
  21eaf5:	75 31                	jne    21eb28 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x148>
  21eaf7:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21eafe:	00 
  21eaff:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  21eb06:	00 
        let offset_slice = framebuffer::FramebufferMemory::get_slice_from(offset);
  21eb07:	e8 a4 7d ff ff       	callq  2168b0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>
  21eb0c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21eb11:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21eb16:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21eb1d:	00 
  21eb1e:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  21eb25:	00 
  21eb26:	eb 1a                	jmp    21eb42 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x162>
        let offset = n_lines * FONT_HEIGHT * fb.width * fb.bytes_per_pixel;
  21eb28:	48 8d 3d e1 3c fe ff 	lea    -0x1c31f(%rip),%rdi        # 202810 <str.0>
  21eb2f:	48 8d 15 c2 ce 01 00 	lea    0x1cec2(%rip),%rdx        # 23b9f8 <memcmp+0x2cb8>
  21eb36:	be 21 00 00 00       	mov    $0x21,%esi
  21eb3b:	e8 b0 70 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21eb40:	0f 0b                	ud2    
  21eb42:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21eb49:	00 
  21eb4a:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21eb51:	00 
            framebuffer::FramebufferMemory::get_slice_bounded(0, total_bytes - offset);
  21eb52:	48 29 c8             	sub    %rcx,%rax
  21eb55:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21eb5a:	0f 92 c0             	setb   %al
  21eb5d:	a8 01                	test   $0x1,%al
  21eb5f:	75 2a                	jne    21eb8b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x1ab>
  21eb61:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  21eb66:	31 c0                	xor    %eax,%eax
  21eb68:	89 c7                	mov    %eax,%edi
  21eb6a:	e8 71 7c ff ff       	callq  2167e0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE>
  21eb6f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21eb74:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21eb79:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  21eb80:	00 
  21eb81:	48 89 94 24 10 01 00 	mov    %rdx,0x110(%rsp)
  21eb88:	00 
  21eb89:	eb 1a                	jmp    21eba5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x1c5>
  21eb8b:	48 8d 3d ae 3c fe ff 	lea    -0x1c352(%rip),%rdi        # 202840 <str.1>
  21eb92:	48 8d 15 77 ce 01 00 	lea    0x1ce77(%rip),%rdx        # 23ba10 <memcmp+0x2cd0>
  21eb99:	be 21 00 00 00       	mov    $0x21,%esi
  21eb9e:	e8 4d 70 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21eba3:	0f 0b                	ud2    
  21eba5:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21ebaa:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        target_slice.unwrap().copy_from_slice(offset_slice.unwrap());
  21ebaf:	48 8d 15 72 ce 01 00 	lea    0x1ce72(%rip),%rdx        # 23ba28 <memcmp+0x2ce8>
  21ebb6:	e8 35 2c ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21ebbb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21ebc0:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21ebc5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  21ebca:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21ebcf:	48 8d 15 6a ce 01 00 	lea    0x1ce6a(%rip),%rdx        # 23ba40 <memcmp+0x2d00>
  21ebd6:	e8 15 2c ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21ebdb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21ebe0:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21ebe5:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21ebea:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21ebef:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21ebf4:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21ebf9:	e8 02 fd ff ff       	callq  21e900 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E>
  21ebfe:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21ec05:	00 
  21ec06:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21ec0d:	00 
        let black = framebuffer::Pixel {
  21ec0e:	c6 84 24 c8 00 00 00 	movb   $0x0,0xc8(%rsp)
  21ec15:	00 
  21ec16:	c6 84 24 c9 00 00 00 	movb   $0x0,0xc9(%rsp)
  21ec1d:	00 
  21ec1e:	c6 84 24 ca 00 00 00 	movb   $0x0,0xca(%rsp)
  21ec25:	00 
  21ec26:	c6 84 24 cb 00 00 00 	movb   $0x0,0xcb(%rsp)
  21ec2d:	00 
        let to_clear_slice = framebuffer::FramebufferMemory::get_slice_from(total_bytes - offset);
  21ec2e:	48 29 c8             	sub    %rcx,%rax
  21ec31:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ec36:	0f 92 c0             	setb   %al
  21ec39:	a8 01                	test   $0x1,%al
  21ec3b:	75 26                	jne    21ec63 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x283>
  21ec3d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21ec42:	e8 69 7c ff ff       	callq  2168b0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>
  21ec47:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21ec4c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21ec51:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  21ec58:	00 
  21ec59:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  21ec60:	00 
  21ec61:	eb 1a                	jmp    21ec7d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x29d>
  21ec63:	48 8d 3d d6 3b fe ff 	lea    -0x1c42a(%rip),%rdi        # 202840 <str.1>
  21ec6a:	48 8d 15 e7 cd 01 00 	lea    0x1cde7(%rip),%rdx        # 23ba58 <memcmp+0x2d18>
  21ec71:	be 21 00 00 00       	mov    $0x21,%esi
  21ec76:	e8 75 6f 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ec7b:	0f 0b                	ud2    
  21ec7d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21ec82:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        framebuffer::Framebuffer::fill_region(to_clear_slice.unwrap(), black, fb.bytes_per_pixel);
  21ec87:	48 8d 15 e2 cd 01 00 	lea    0x1cde2(%rip),%rdx        # 23ba70 <memcmp+0x2d30>
  21ec8e:	e8 5d 2b ff ff       	callq  2117f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21ec93:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ec98:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21ec9d:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21eca4:	00 
  21eca5:	8b 84 24 c8 00 00 00 	mov    0xc8(%rsp),%eax
  21ecac:	89 84 24 d0 00 00 00 	mov    %eax,0xd0(%rsp)
  21ecb3:	e8 a8 ff 00 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ecb8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ecbd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21ecc2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21ecc7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21eccc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  21ecd0:	8b 94 24 d0 00 00 00 	mov    0xd0(%rsp),%edx
  21ecd7:	e8 94 81 ff ff       	callq  216e70 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>
    }
  21ecdc:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  21ece3:	c3                   	retq   
  21ece4:	cc                   	int3   
  21ece5:	cc                   	int3   
  21ece6:	cc                   	int3   
  21ece7:	cc                   	int3   
  21ece8:	cc                   	int3   
  21ece9:	cc                   	int3   
  21ecea:	cc                   	int3   
  21eceb:	cc                   	int3   
  21ecec:	cc                   	int3   
  21eced:	cc                   	int3   
  21ecee:	cc                   	int3   
  21ecef:	cc                   	int3   

000000000021ecf0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE>:
    pub fn print_ascii_char(
  21ecf0:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  21ecf7:	4c 89 4c 24 78       	mov    %r9,0x78(%rsp)
  21ecfc:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
  21ed03:	00 
  21ed04:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21ed0b:	00 
  21ed0c:	48 89 f9             	mov    %rdi,%rcx
  21ed0f:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21ed16:	00 
  21ed17:	40 88 f0             	mov    %sil,%al
  21ed1a:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21ed21:	48 8b b4 24 20 01 00 	mov    0x120(%rsp),%rsi
  21ed28:	00 
  21ed29:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  21ed30:	00 
  21ed31:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  21ed38:	00 
  21ed39:	89 94 24 b4 00 00 00 	mov    %edx,0xb4(%rsp)
  21ed40:	8b 8c 24 b4 00 00 00 	mov    0xb4(%rsp),%ecx
  21ed47:	89 8c 24 b0 00 00 00 	mov    %ecx,0xb0(%rsp)
  21ed4e:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  21ed55:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  21ed5c:	00 
  21ed5d:	4c 89 84 24 e8 00 00 	mov    %r8,0xe8(%rsp)
  21ed64:	00 
  21ed65:	4c 89 8c 24 f0 00 00 	mov    %r9,0xf0(%rsp)
  21ed6c:	00 
        let start_y = r_line * FONT_HEIGHT;
  21ed6d:	be 10 00 00 00       	mov    $0x10,%esi
  21ed72:	e8 99 be fe ff       	callq  20ac10 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>
  21ed77:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21ed7e:	00 
  21ed7f:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21ed86:	00 
  21ed87:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21ed8e:	00 
        let start_x = c_line * FONT_WIDTH;
  21ed8f:	be 09 00 00 00       	mov    $0x9,%esi
  21ed94:	e8 77 be fe ff       	callq  20ac10 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>
  21ed99:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21ed9e:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21eda5:	00 
        let mut j = 0;
  21eda6:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
  21edad:	00 00 00 00 00 
        let mut i = 0;
  21edb2:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21edb9:	00 00 00 00 00 
  21edbe:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21edc5:	00 
                y: start_y + i,
  21edc6:	48 03 84 24 c0 00 00 	add    0xc0(%rsp),%rax
  21edcd:	00 
  21edce:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21edd3:	0f 92 c0             	setb   %al
  21edd6:	a8 01                	test   $0x1,%al
  21edd8:	75 1b                	jne    21edf5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x105>
  21edda:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                x: start_x + j,
  21eddf:	48 03 84 24 b8 00 00 	add    0xb8(%rsp),%rax
  21ede6:	00 
  21ede7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21edec:	0f 92 c0             	setb   %al
  21edef:	a8 01                	test   $0x1,%al
  21edf1:	75 4a                	jne    21ee3d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x14d>
  21edf3:	eb 1a                	jmp    21ee0f <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x11f>
                y: start_y + i,
  21edf5:	48 8d 3d 74 3a fe ff 	lea    -0x1c58c(%rip),%rdi        # 202870 <str.2>
  21edfc:	48 8d 15 85 cc 01 00 	lea    0x1cc85(%rip),%rdx        # 23ba88 <memcmp+0x2d48>
  21ee03:	be 1c 00 00 00       	mov    $0x1c,%esi
  21ee08:	e8 e3 6d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ee0d:	0f 0b                	ud2    
  21ee0f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21ee14:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            let index = framebuffer::FramebufferIndex {
  21ee19:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  21ee20:	00 
  21ee21:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21ee28:	00 
            if framebuffer::Framebuffer::index_in_bounds(&fb, &index) {
  21ee29:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21ee30:	00 
  21ee31:	e8 2a fe 00 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ee36:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21ee3b:	eb 1a                	jmp    21ee57 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x167>
                x: start_x + j,
  21ee3d:	48 8d 3d 2c 3a fe ff 	lea    -0x1c5d4(%rip),%rdi        # 202870 <str.2>
  21ee44:	48 8d 15 55 cc 01 00 	lea    0x1cc55(%rip),%rdx        # 23baa0 <memcmp+0x2d60>
  21ee4b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21ee50:	e8 9b 6d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ee55:	0f 0b                	ud2    
  21ee57:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
            if framebuffer::Framebuffer::index_in_bounds(&fb, &index) {
  21ee5c:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  21ee63:	00 
  21ee64:	e8 e7 7b ff ff       	callq  216a50 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>
  21ee69:	88 44 24 57          	mov    %al,0x57(%rsp)
  21ee6d:	8a 44 24 57          	mov    0x57(%rsp),%al
  21ee71:	a8 01                	test   $0x1,%al
  21ee73:	75 05                	jne    21ee7a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x18a>
  21ee75:	e9 44 ff ff ff       	jmpq   21edbe <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
                if j >= 1 {
  21ee7a:	48 83 bc 24 b8 00 00 	cmpq   $0x1,0xb8(%rsp)
  21ee81:	00 01 
  21ee83:	73 21                	jae    21eea6 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x1b6>
                j = j + 1;
  21ee85:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21ee8c:	00 
  21ee8d:	48 83 c0 01          	add    $0x1,%rax
  21ee91:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21ee96:	0f 92 c0             	setb   %al
  21ee99:	a8 01                	test   $0x1,%al
  21ee9b:	0f 85 4d 01 00 00    	jne    21efee <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x2fe>
  21eea1:	e9 2e 01 00 00       	jmpq   21efd4 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x2e4>
                    let idx = j - 1;
  21eea6:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21eead:	00 
  21eeae:	48 83 e8 01          	sub    $0x1,%rax
  21eeb2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21eeb7:	0f 92 c0             	setb   %al
  21eeba:	a8 01                	test   $0x1,%al
  21eebc:	75 2b                	jne    21eee9 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x1f9>
  21eebe:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  21eec5:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21eeca:	48 89 8c 24 08 01 00 	mov    %rcx,0x108(%rsp)
  21eed1:	00 
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21eed2:	0f b6 c0             	movzbl %al,%eax
  21eed5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21eeda:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  21eee0:	0f 92 c0             	setb   %al
  21eee3:	a8 01                	test   $0x1,%al
  21eee5:	75 1c                	jne    21ef03 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x213>
  21eee7:	eb 34                	jmp    21ef1d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x22d>
                    let idx = j - 1;
  21eee9:	48 8d 3d 50 39 fe ff 	lea    -0x1c6b0(%rip),%rdi        # 202840 <str.1>
  21eef0:	48 8d 15 c1 cb 01 00 	lea    0x1cbc1(%rip),%rdx        # 23bab8 <memcmp+0x2d78>
  21eef7:	be 21 00 00 00       	mov    $0x21,%esi
  21eefc:	e8 ef 6c 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ef01:	0f 0b                	ud2    
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21ef03:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21ef0a:	00 
  21ef0b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ef10:	48 83 f8 10          	cmp    $0x10,%rax
  21ef14:	0f 92 c0             	setb   %al
  21ef17:	a8 01                	test   $0x1,%al
  21ef19:	75 1a                	jne    21ef35 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x245>
  21ef1b:	eb 4d                	jmp    21ef6a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x27a>
  21ef1d:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21ef22:	48 8d 15 a7 cb 01 00 	lea    0x1cba7(%rip),%rdx        # 23bad0 <memcmp+0x2d90>
  21ef29:	be 00 01 00 00       	mov    $0x100,%esi
  21ef2e:	e8 0d 6d 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21ef33:	0f 0b                	ud2    
  21ef35:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  21ef3a:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21ef3f:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21ef44:	48 8d 05 10 26 fe ff 	lea    -0x1d9f0(%rip),%rax        # 20155b <_ZN9r3_kernel7drivers7display4font15LINUX_BOOT_FONT17hb53ab4f3a14dab7bE>
  21ef4b:	48 c1 e2 04          	shl    $0x4,%rdx
  21ef4f:	48 01 d0             	add    %rdx,%rax
  21ef52:	8a 04 08             	mov    (%rax,%rcx,1),%al
  21ef55:	88 84 24 17 01 00 00 	mov    %al,0x117(%rsp)
                    if get_bit_for_char(char_font, idx) != 0 {
  21ef5c:	0f b6 f8             	movzbl %al,%edi
  21ef5f:	e8 6c d3 ff ff       	callq  21c2d0 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E>
  21ef64:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21ef68:	eb 18                	jmp    21ef82 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x292>
  21ef6a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21ef6f:	48 8d 15 5a cb 01 00 	lea    0x1cb5a(%rip),%rdx        # 23bad0 <memcmp+0x2d90>
  21ef76:	be 10 00 00 00       	mov    $0x10,%esi
  21ef7b:	e8 c0 6c 01 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21ef80:	0f 0b                	ud2    
  21ef82:	8a 44 24 2f          	mov    0x2f(%rsp),%al
                    if get_bit_for_char(char_font, idx) != 0 {
  21ef86:	3c 00                	cmp    $0x0,%al
  21ef88:	0f 84 f7 fe ff ff    	je     21ee85 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x195>
                        framebuffer::Framebuffer::set_pixel(fb, color, index);
  21ef8e:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21ef95:	00 
  21ef96:	e8 95 fd 00 00       	callq  22ed30 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>
  21ef9b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21efa0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21efa5:	8b 84 24 b0 00 00 00 	mov    0xb0(%rsp),%eax
  21efac:	89 84 24 d8 00 00 00 	mov    %eax,0xd8(%rsp)
  21efb3:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21efba:	00 
  21efbb:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  21efc2:	00 
  21efc3:	8b b4 24 d8 00 00 00 	mov    0xd8(%rsp),%esi
  21efca:	e8 d1 7b ff ff       	callq  216ba0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE>
  21efcf:	e9 b1 fe ff ff       	jmpq   21ee85 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x195>
  21efd4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                j = j + 1;
  21efd9:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21efe0:	00 
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21efe1:	48 83 bc 24 b8 00 00 	cmpq   $0x9,0xb8(%rsp)
  21efe8:	00 09 
  21efea:	74 37                	je     21f023 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x333>
  21efec:	eb 1a                	jmp    21f008 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x318>
                j = j + 1;
  21efee:	48 8d 3d 7b 38 fe ff 	lea    -0x1c785(%rip),%rdi        # 202870 <str.2>
  21eff5:	48 8d 15 ec ca 01 00 	lea    0x1caec(%rip),%rdx        # 23bae8 <memcmp+0x2da8>
  21effc:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f001:	e8 ea 6b 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f006:	0f 0b                	ud2    
  21f008:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21f00d:	48 03 84 24 b8 00 00 	add    0xb8(%rsp),%rax
  21f014:	00 
  21f015:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21f01a:	0f 92 c0             	setb   %al
  21f01d:	a8 01                	test   $0x1,%al
  21f01f:	75 34                	jne    21f055 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x365>
  21f021:	eb 17                	jmp    21f03a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x34a>
  21f023:	c6 84 24 dd 00 00 00 	movb   $0x1,0xdd(%rsp)
  21f02a:	01 
  21f02b:	f6 84 24 dd 00 00 00 	testb  $0x1,0xdd(%rsp)
  21f032:	01 
  21f033:	75 3a                	jne    21f06f <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x37f>
  21f035:	e9 84 fd ff ff       	jmpq   21edbe <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
  21f03a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21f03f:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  21f044:	48 39 c8             	cmp    %rcx,%rax
  21f047:	0f 94 c0             	sete   %al
  21f04a:	24 01                	and    $0x1,%al
  21f04c:	88 84 24 dd 00 00 00 	mov    %al,0xdd(%rsp)
  21f053:	eb d6                	jmp    21f02b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x33b>
  21f055:	48 8d 3d 14 38 fe ff 	lea    -0x1c7ec(%rip),%rdi        # 202870 <str.2>
  21f05c:	48 8d 15 9d ca 01 00 	lea    0x1ca9d(%rip),%rdx        # 23bb00 <memcmp+0x2dc0>
  21f063:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f068:	e8 83 6b 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f06d:	0f 0b                	ud2    
                    i = i + 1;
  21f06f:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21f076:	00 
  21f077:	48 83 c0 01          	add    $0x1,%rax
  21f07b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21f080:	0f 92 c0             	setb   %al
  21f083:	a8 01                	test   $0x1,%al
  21f085:	75 1a                	jne    21f0a1 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3b1>
  21f087:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f08c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21f093:	00 
                    if i == FONT_HEIGHT || start_y + i == buffer_height {
  21f094:	48 83 bc 24 c0 00 00 	cmpq   $0x10,0xc0(%rsp)
  21f09b:	00 10 
  21f09d:	74 3a                	je     21f0d9 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3e9>
  21f09f:	eb 1a                	jmp    21f0bb <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3cb>
                    i = i + 1;
  21f0a1:	48 8d 3d c8 37 fe ff 	lea    -0x1c838(%rip),%rdi        # 202870 <str.2>
  21f0a8:	48 8d 15 69 ca 01 00 	lea    0x1ca69(%rip),%rdx        # 23bb18 <memcmp+0x2dd8>
  21f0af:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f0b4:	e8 37 6b 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f0b9:	0f 0b                	ud2    
  21f0bb:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21f0c2:	00 
                    if i == FONT_HEIGHT || start_y + i == buffer_height {
  21f0c3:	48 03 84 24 c0 00 00 	add    0xc0(%rsp),%rax
  21f0ca:	00 
  21f0cb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f0d0:	0f 92 c0             	setb   %al
  21f0d3:	a8 01                	test   $0x1,%al
  21f0d5:	75 34                	jne    21f10b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x41b>
  21f0d7:	eb 14                	jmp    21f0ed <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3fd>
  21f0d9:	c6 84 24 de 00 00 00 	movb   $0x1,0xde(%rsp)
  21f0e0:	01 
  21f0e1:	f6 84 24 de 00 00 00 	testb  $0x1,0xde(%rsp)
  21f0e8:	01 
  21f0e9:	75 4b                	jne    21f136 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x446>
  21f0eb:	eb 38                	jmp    21f125 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x435>
  21f0ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21f0f2:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21f0f9:	00 
  21f0fa:	48 39 c8             	cmp    %rcx,%rax
  21f0fd:	0f 94 c0             	sete   %al
  21f100:	24 01                	and    $0x1,%al
  21f102:	88 84 24 de 00 00 00 	mov    %al,0xde(%rsp)
  21f109:	eb d6                	jmp    21f0e1 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3f1>
  21f10b:	48 8d 3d 5e 37 fe ff 	lea    -0x1c8a2(%rip),%rdi        # 202870 <str.2>
  21f112:	48 8d 15 17 ca 01 00 	lea    0x1ca17(%rip),%rdx        # 23bb30 <memcmp+0x2df0>
  21f119:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f11e:	e8 cd 6a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f123:	0f 0b                	ud2    
                    j = 0;
  21f125:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
  21f12c:	00 00 00 00 00 
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21f131:	e9 88 fc ff ff       	jmpq   21edbe <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
    }
  21f136:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  21f13d:	c3                   	retq   
  21f13e:	cc                   	int3   
  21f13f:	cc                   	int3   

000000000021f140 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E>:
    pub fn print_string(
  21f140:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  21f147:	4c 89 44 24 78       	mov    %r8,0x78(%rsp)
  21f14c:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  21f153:	00 
  21f154:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  21f15b:	00 
  21f15c:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  21f163:	00 
  21f164:	89 8c 24 a4 00 00 00 	mov    %ecx,0xa4(%rsp)
  21f16b:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
  21f172:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
  21f179:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  21f180:	00 
  21f181:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  21f188:	00 
  21f189:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  21f190:	00 
  21f191:	4c 89 84 24 08 01 00 	mov    %r8,0x108(%rsp)
  21f198:	00 
        let n_rows = fb.height / FONT_HEIGHT;
  21f199:	e8 c2 fa 00 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21f19e:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21f1a5:	00 
  21f1a6:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21f1ad:	00 
  21f1ae:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21f1b5:	00 
  21f1b6:	48 8b 40 18          	mov    0x18(%rax),%rax
  21f1ba:	48 c1 e8 04          	shr    $0x4,%rax
  21f1be:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21f1c3:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  21f1ca:	00 
        let n_cols = fb.width / FONT_WIDTH;
  21f1cb:	e8 90 fa 00 00       	callq  22ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21f1d0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21f1d5:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21f1dc:	00 
  21f1dd:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21f1e2:	48 8b 40 10          	mov    0x10(%rax),%rax
  21f1e6:	48 ba 8f e3 38 8e e3 	movabs $0xe38e38e38e38e38f,%rdx
  21f1ed:	38 8e e3 
  21f1f0:	48 f7 e2             	mul    %rdx
  21f1f3:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21f1fa:	00 
  21f1fb:	48 89 d6             	mov    %rdx,%rsi
  21f1fe:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  21f203:	48 c1 ee 03          	shr    $0x3,%rsi
  21f207:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  21f20c:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  21f213:	00 
        let mut c_row = pos.row_line;
  21f214:	48 8b 32             	mov    (%rdx),%rsi
  21f217:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
  21f21e:	00 
        let mut c_col = pos.col_line;
  21f21f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  21f223:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  21f22a:	00 
  21f22b:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  21f232:	00 
  21f233:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21f23a:	00 
        unsafe { mem::transmute(self) }
  21f23b:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  21f242:	00 
  21f243:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  21f24a:	00 
  21f24b:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  21f252:	00 
  21f253:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21f258:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  21f25f:	00 
  21f260:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21f265:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21f26a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        for ch in string.as_bytes() {
  21f26f:	e8 bc bc ff ff       	callq  21af30 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h67d170e4f81cc63cE>
  21f274:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21f279:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21f27e:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21f283:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21f288:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  21f28f:	00 
  21f290:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21f297:	00 
  21f298:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21f29f:	00 
  21f2a0:	e8 1b be ff ff       	callq  21b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  21f2a5:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21f2ac:	00 
  21f2ad:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  21f2b4:	00 
  21f2b5:	48 85 c0             	test   %rax,%rax
  21f2b8:	0f 95 c0             	setne  %al
  21f2bb:	0f b6 c0             	movzbl %al,%eax
  21f2be:	74 06                	je     21f2c6 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x186>
  21f2c0:	eb 00                	jmp    21f2c2 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x182>
  21f2c2:	eb 3a                	jmp    21f2fe <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x1be>
  21f2c4:	0f 0b                	ud2    
            row_line: c_row,
  21f2c6:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  21f2cd:	00 
            col_line: c_col,
  21f2ce:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21f2d5:	00 
        FramebufferLines {
  21f2d6:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  21f2dd:	00 
  21f2de:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21f2e5:	00 
    }
  21f2e6:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21f2ed:	00 
  21f2ee:	48 8b 94 24 b0 00 00 	mov    0xb0(%rsp),%rdx
  21f2f5:	00 
  21f2f6:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  21f2fd:	c3                   	retq   
        for ch in string.as_bytes() {
  21f2fe:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  21f305:	00 
  21f306:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21f30b:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  21f312:	00 
  21f313:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  21f31a:	00 
  21f31b:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  21f322:	00 
            if *ch <= 0x20 && *ch >= 0x7e {
  21f323:	80 38 20             	cmpb   $0x20,(%rax)
  21f326:	76 0a                	jbe    21f332 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x1f2>
  21f328:	c6 84 24 e7 00 00 00 	movb   $0x0,0xe7(%rsp)
  21f32f:	00 
  21f330:	eb 14                	jmp    21f346 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x206>
  21f332:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21f337:	80 38 7e             	cmpb   $0x7e,(%rax)
  21f33a:	0f 93 c0             	setae  %al
  21f33d:	24 01                	and    $0x1,%al
  21f33f:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
  21f346:	f6 84 24 e7 00 00 00 	testb  $0x1,0xe7(%rsp)
  21f34d:	01 
  21f34e:	0f 85 44 ff ff ff    	jne    21f298 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
  21f354:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            if *ch == b'\n' {
  21f359:	80 38 0a             	cmpb   $0xa,(%rax)
  21f35c:	75 2d                	jne    21f38b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x24b>
                c_col = 0;
  21f35e:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21f365:	00 00 00 00 00 
                c_row += 1;
  21f36a:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21f371:	00 
  21f372:	48 83 c0 01          	add    $0x1,%rax
  21f376:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21f37b:	0f 92 c0             	setb   %al
  21f37e:	a8 01                	test   $0x1,%al
  21f380:	0f 85 d3 01 00 00    	jne    21f559 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x419>
  21f386:	e9 bc 01 00 00       	jmpq   21f547 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x407>
  21f38b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            } else if *ch == b'\t' {
  21f390:	80 38 09             	cmpb   $0x9,(%rax)
  21f393:	75 21                	jne    21f3b6 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x276>
                c_col = c_col + 4;
  21f395:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21f39c:	00 
  21f39d:	48 83 c0 04          	add    $0x4,%rax
  21f3a1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21f3a6:	0f 92 c0             	setb   %al
  21f3a9:	a8 01                	test   $0x1,%al
  21f3ab:	0f 85 7c 01 00 00    	jne    21f52d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3ed>
  21f3b1:	e9 65 01 00 00       	jmpq   21f51b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3db>
  21f3b6:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
                if c_col >= n_cols {
  21f3bb:	48 39 84 24 c0 00 00 	cmp    %rax,0xc0(%rsp)
  21f3c2:	00 
  21f3c3:	73 15                	jae    21f3da <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x29a>
  21f3c5:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
                if c_row >= n_rows {
  21f3ca:	48 39 84 24 b8 00 00 	cmp    %rax,0xb8(%rsp)
  21f3d1:	00 
  21f3d2:	0f 83 9d 00 00 00    	jae    21f475 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x335>
  21f3d8:	eb 4d                	jmp    21f427 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2e7>
                    c_row = c_row + 1;
  21f3da:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21f3e1:	00 
  21f3e2:	48 83 c0 01          	add    $0x1,%rax
  21f3e6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f3eb:	0f 92 c0             	setb   %al
  21f3ee:	a8 01                	test   $0x1,%al
  21f3f0:	75 1b                	jne    21f40d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2cd>
  21f3f2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21f3f7:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21f3fe:	00 
                    c_col = 0;
  21f3ff:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21f406:	00 00 00 00 00 
                if c_col >= n_cols {
  21f40b:	eb b8                	jmp    21f3c5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x285>
                    c_row = c_row + 1;
  21f40d:	48 8d 3d 5c 34 fe ff 	lea    -0x1cba4(%rip),%rdi        # 202870 <str.2>
  21f414:	48 8d 15 2d c7 01 00 	lea    0x1c72d(%rip),%rdx        # 23bb48 <memcmp+0x2e08>
  21f41b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f420:	e8 cb 67 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f425:	0f 0b                	ud2    
  21f427:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21f42c:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  21f431:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21f438:	00 
  21f439:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                FramebufferText::print_ascii_char(fb, *ch, color, &c_row, &c_col, n_cols, n_rows);
  21f43e:	40 8a 31             	mov    (%rcx),%sil
  21f441:	8b 8c 24 a0 00 00 00 	mov    0xa0(%rsp),%ecx
  21f448:	89 8c 24 e8 00 00 00 	mov    %ecx,0xe8(%rsp)
  21f44f:	8b 94 24 e8 00 00 00 	mov    0xe8(%rsp),%edx
  21f456:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
  21f45d:	00 
  21f45e:	4c 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%r8
  21f465:	00 
  21f466:	40 0f b6 f6          	movzbl %sil,%esi
  21f46a:	48 89 04 24          	mov    %rax,(%rsp)
  21f46e:	e8 7d f8 ff ff       	callq  21ecf0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE>
  21f473:	eb 62                	jmp    21f4d7 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x397>
  21f475:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21f47c:	00 
                    FramebufferText::scroll(fb, SCROLL_LINES);
  21f47d:	be 0a 00 00 00       	mov    $0xa,%esi
  21f482:	e8 59 f5 ff ff       	callq  21e9e0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E>
                    c_row = c_row - SCROLL_LINES;
  21f487:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21f48e:	00 
  21f48f:	48 83 e8 0a          	sub    $0xa,%rax
  21f493:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21f498:	0f 92 c0             	setb   %al
  21f49b:	a8 01                	test   $0x1,%al
  21f49d:	75 1e                	jne    21f4bd <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x37d>
  21f49f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21f4a4:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21f4ab:	00 
                    c_col = 0;
  21f4ac:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21f4b3:	00 00 00 00 00 
                if c_row >= n_rows {
  21f4b8:	e9 6a ff ff ff       	jmpq   21f427 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2e7>
                    c_row = c_row - SCROLL_LINES;
  21f4bd:	48 8d 3d 7c 33 fe ff 	lea    -0x1cc84(%rip),%rdi        # 202840 <str.1>
  21f4c4:	48 8d 15 95 c6 01 00 	lea    0x1c695(%rip),%rdx        # 23bb60 <memcmp+0x2e20>
  21f4cb:	be 21 00 00 00       	mov    $0x21,%esi
  21f4d0:	e8 1b 67 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f4d5:	0f 0b                	ud2    
                c_col += 1;
  21f4d7:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21f4de:	00 
  21f4df:	48 83 c0 01          	add    $0x1,%rax
  21f4e3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21f4e8:	0f 92 c0             	setb   %al
  21f4eb:	a8 01                	test   $0x1,%al
  21f4ed:	75 12                	jne    21f501 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3c1>
  21f4ef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f4f4:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21f4fb:	00 
        for ch in string.as_bytes() {
  21f4fc:	e9 97 fd ff ff       	jmpq   21f298 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
                c_col += 1;
  21f501:	48 8d 3d 68 33 fe ff 	lea    -0x1cc98(%rip),%rdi        # 202870 <str.2>
  21f508:	48 8d 15 69 c6 01 00 	lea    0x1c669(%rip),%rdx        # 23bb78 <memcmp+0x2e38>
  21f50f:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f514:	e8 d7 66 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f519:	0f 0b                	ud2    
  21f51b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                c_col = c_col + 4;
  21f520:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21f527:	00 
  21f528:	e9 6b fd ff ff       	jmpq   21f298 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
  21f52d:	48 8d 3d 3c 33 fe ff 	lea    -0x1ccc4(%rip),%rdi        # 202870 <str.2>
  21f534:	48 8d 15 55 c6 01 00 	lea    0x1c655(%rip),%rdx        # 23bb90 <memcmp+0x2e50>
  21f53b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f540:	e8 ab 66 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f545:	0f 0b                	ud2    
  21f547:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                c_row += 1;
  21f54c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21f553:	00 
                continue;
  21f554:	e9 3f fd ff ff       	jmpq   21f298 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
                c_row += 1;
  21f559:	48 8d 3d 10 33 fe ff 	lea    -0x1ccf0(%rip),%rdi        # 202870 <str.2>
  21f560:	48 8d 15 41 c6 01 00 	lea    0x1c641(%rip),%rdx        # 23bba8 <memcmp+0x2e68>
  21f567:	be 1c 00 00 00       	mov    $0x1c,%esi
  21f56c:	e8 7f 66 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f571:	0f 0b                	ud2    
  21f573:	cc                   	int3   
  21f574:	cc                   	int3   
  21f575:	cc                   	int3   
  21f576:	cc                   	int3   
  21f577:	cc                   	int3   
  21f578:	cc                   	int3   
  21f579:	cc                   	int3   
  21f57a:	cc                   	int3   
  21f57b:	cc                   	int3   
  21f57c:	cc                   	int3   
  21f57d:	cc                   	int3   
  21f57e:	cc                   	int3   
  21f57f:	cc                   	int3   

000000000021f580 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger4init17h7fb94ee129555380E>:
    pub fn init(color: framebuffer::Pixel) -> Self {
  21f580:	48 83 ec 20          	sub    $0x20,%rsp
  21f584:	48 89 f8             	mov    %rdi,%rax
  21f587:	89 74 24 04          	mov    %esi,0x4(%rsp)
  21f58b:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  21f58f:	89 0c 24             	mov    %ecx,(%rsp)
            current_lines: FramebufferLines {
  21f592:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  21f599:	00 00 
  21f59b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21f5a2:	00 00 
            color,
  21f5a4:	8b 0c 24             	mov    (%rsp),%ecx
  21f5a7:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
        FramebufferLogger {
  21f5ab:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f5b0:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21f5b5:	48 89 17             	mov    %rdx,(%rdi)
  21f5b8:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  21f5bc:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
  21f5c0:	89 4f 10             	mov    %ecx,0x10(%rdi)
    }
  21f5c3:	48 83 c4 20          	add    $0x20,%rsp
  21f5c7:	c3                   	retq   
  21f5c8:	cc                   	int3   
  21f5c9:	cc                   	int3   
  21f5ca:	cc                   	int3   
  21f5cb:	cc                   	int3   
  21f5cc:	cc                   	int3   
  21f5cd:	cc                   	int3   
  21f5ce:	cc                   	int3   
  21f5cf:	cc                   	int3   

000000000021f5d0 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger9set_color17h728bcd9539458d15E>:
    pub fn set_color(&mut self, color: framebuffer::Pixel) {
  21f5d0:	48 83 ec 18          	sub    $0x18,%rsp
  21f5d4:	89 74 24 04          	mov    %esi,0x4(%rsp)
  21f5d8:	8b 44 24 04          	mov    0x4(%rsp),%eax
  21f5dc:	89 04 24             	mov    %eax,(%rsp)
  21f5df:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.color = color;
  21f5e4:	8b 04 24             	mov    (%rsp),%eax
  21f5e7:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21f5eb:	8b 44 24 08          	mov    0x8(%rsp),%eax
  21f5ef:	89 47 10             	mov    %eax,0x10(%rdi)
    }
  21f5f2:	48 83 c4 18          	add    $0x18,%rsp
  21f5f6:	c3                   	retq   
  21f5f7:	cc                   	int3   
  21f5f8:	cc                   	int3   
  21f5f9:	cc                   	int3   
  21f5fa:	cc                   	int3   
  21f5fb:	cc                   	int3   
  21f5fc:	cc                   	int3   
  21f5fd:	cc                   	int3   
  21f5fe:	cc                   	int3   
  21f5ff:	cc                   	int3   

000000000021f600 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE>:
    pub fn write(&mut self, string: &str) {
  21f600:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21f607:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21f60c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21f611:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21f616:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  21f61b:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  21f620:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
        let locked_buffer_opt = framebuffer::Framebuffer::get_buffer_lock();
  21f625:	e8 06 74 ff ff       	callq  216a30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>
  21f62a:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21f62f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21f636:	00 
  21f637:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        if locked_buffer_opt.is_none() {
  21f63c:	e8 cf 22 ff ff       	callq  211910 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>
  21f641:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21f645:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21f649:	a8 01                	test   $0x1,%al
  21f64b:	75 13                	jne    21f660 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x60>
  21f64d:	eb 00                	jmp    21f64f <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x4f>
  21f64f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let mut locked_buffer = locked_buffer_opt.as_ref().unwrap().lock();
  21f654:	e8 27 18 ff ff       	callq  210e80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  21f659:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f65e:	eb 08                	jmp    21f668 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x68>
    }
  21f660:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21f667:	c3                   	retq   
  21f668:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let mut locked_buffer = locked_buffer_opt.as_ref().unwrap().lock();
  21f66d:	48 8d 35 4c c5 01 00 	lea    0x1c54c(%rip),%rsi        # 23bbc0 <memcmp+0x2e80>
  21f674:	e8 27 21 ff ff       	callq  2117a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  21f679:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21f67e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21f683:	e8 e8 f2 00 00       	callq  22e970 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  21f688:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21f68d:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21f692:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21f697:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21f69c:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            self.color,
  21f6a1:	41 8b 40 10          	mov    0x10(%r8),%eax
  21f6a5:	89 44 24 60          	mov    %eax,0x60(%rsp)
        self.current_lines = FramebufferText::print_string(
  21f6a9:	8b 4c 24 60          	mov    0x60(%rsp),%ecx
  21f6ad:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21f6b2:	e8 89 fa ff ff       	callq  21f140 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E>
  21f6b7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f6bc:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21f6c1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21f6c6:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21f6cb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f6d0:	48 89 10             	mov    %rdx,(%rax)
  21f6d3:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  21f6d7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21f6dc:	e8 ef c8 fe ff       	callq  20bfd0 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  21f6e1:	e9 7a ff ff ff       	jmpq   21f660 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x60>
  21f6e6:	cc                   	int3   
  21f6e7:	cc                   	int3   
  21f6e8:	cc                   	int3   
  21f6e9:	cc                   	int3   
  21f6ea:	cc                   	int3   
  21f6eb:	cc                   	int3   
  21f6ec:	cc                   	int3   
  21f6ed:	cc                   	int3   
  21f6ee:	cc                   	int3   
  21f6ef:	cc                   	int3   

000000000021f6f0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>:
    fn write_str(&mut self, string: &str) -> fmt::Result {
  21f6f0:	48 83 ec 28          	sub    $0x28,%rsp
  21f6f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21f6f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21f6fe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write(string);
  21f703:	e8 f8 fe ff ff       	callq  21f600 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE>
        return Ok(());
  21f708:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  21f70d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21f711:	24 01                	and    $0x1,%al
  21f713:	0f b6 c0             	movzbl %al,%eax
  21f716:	48 83 c4 28          	add    $0x28,%rsp
  21f71a:	c3                   	retq   
  21f71b:	cc                   	int3   
  21f71c:	cc                   	int3   
  21f71d:	cc                   	int3   
  21f71e:	cc                   	int3   
  21f71f:	cc                   	int3   

000000000021f720 <_ZN9r3_kernel7drivers7display7fb_text17setup_framebuffer17hacd8dd41e1df2539E>:
pub fn setup_framebuffer(color: framebuffer::Pixel) -> Mutex<FramebufferLogger> {
  21f720:	48 83 ec 38          	sub    $0x38,%rsp
  21f724:	48 89 3c 24          	mov    %rdi,(%rsp)
  21f728:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21f72d:	89 74 24 14          	mov    %esi,0x14(%rsp)
  21f731:	8b 44 24 14          	mov    0x14(%rsp),%eax
  21f735:	89 44 24 10          	mov    %eax,0x10(%rsp)
    Mutex::new(FramebufferLogger::init(color))
  21f739:	8b 44 24 10          	mov    0x10(%rsp),%eax
  21f73d:	89 44 24 30          	mov    %eax,0x30(%rsp)
  21f741:	8b 74 24 30          	mov    0x30(%rsp),%esi
  21f745:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21f74a:	e8 31 fe ff ff       	callq  21f580 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger4init17h7fb94ee129555380E>
  21f74f:	48 8b 3c 24          	mov    (%rsp),%rdi
  21f753:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  21f758:	e8 83 ed 00 00       	callq  22e4e0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb57e111c8bcb0c86E>
  21f75d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  21f762:	48 83 c4 38          	add    $0x38,%rsp
  21f766:	c3                   	retq   
  21f767:	cc                   	int3   
  21f768:	cc                   	int3   
  21f769:	cc                   	int3   
  21f76a:	cc                   	int3   
  21f76b:	cc                   	int3   
  21f76c:	cc                   	int3   
  21f76d:	cc                   	int3   
  21f76e:	cc                   	int3   
  21f76f:	cc                   	int3   

000000000021f770 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7140a24394aa1ffE>:
            fn deref(&self) -> &$T {
  21f770:	48 83 ec 18          	sub    $0x18,%rsp
  21f774:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21f779:	48 8d 05 40 50 02 00 	lea    0x25040(%rip),%rax        # 2447c0 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hc9a1c376d2ac94f4E>
  21f780:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21f785:	48 8d 3d 34 50 02 00 	lea    0x25034(%rip),%rdi        # 2447c0 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hc9a1c376d2ac94f4E>
  21f78c:	e8 af 8c fe ff       	callq  208440 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE>
  21f791:	48 89 04 24          	mov    %rax,(%rsp)
  21f795:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21f799:	48 83 c4 18          	add    $0x18,%rsp
  21f79d:	c3                   	retq   
  21f79e:	cc                   	int3   
  21f79f:	cc                   	int3   

000000000021f7a0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E>:

                self
            }

            #[inline]
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  21f7a0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  21f7a7:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21f7ac:	66 89 c8             	mov    %cx,%ax
  21f7af:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  21f7b4:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  21f7bb:	00 
  21f7bc:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21f7c3:	00 
  21f7c4:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  21f7cb:	00 
  21f7cc:	66 89 84 24 9e 00 00 	mov    %ax,0x9e(%rsp)
  21f7d3:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21f7d4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21f7db:	00 
  21f7dc:	be 10 00 00 00       	mov    $0x10,%esi
  21f7e1:	e8 1a 0d 00 00       	callq  220500 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21f7e6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21f7eb:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21f7f0:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21f7f7:	00 
  21f7f8:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  21f7ff:	00 
  21f800:	48 8b 44 24 70       	mov    0x70(%rsp),%rax

                assert!(range.start < Self::BIT_LENGTH);
  21f805:	48 83 f8 10          	cmp    $0x10,%rax
  21f809:	0f 92 c0             	setb   %al
  21f80c:	34 ff                	xor    $0xff,%al
  21f80e:	a8 01                	test   $0x1,%al
  21f810:	75 14                	jne    21f826 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x86>
  21f812:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21f817:	48 83 f8 10          	cmp    $0x10,%rax
  21f81b:	0f 96 c0             	setbe  %al
  21f81e:	34 ff                	xor    $0xff,%al
  21f820:	a8 01                	test   $0x1,%al
  21f822:	75 34                	jne    21f858 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xb8>
  21f824:	eb 1a                	jmp    21f840 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xa0>
                assert!(range.start < Self::BIT_LENGTH);
  21f826:	48 8d 3d 5f 30 fe ff 	lea    -0x1cfa1(%rip),%rdi        # 20288c <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21f82d:	48 8d 15 a4 c3 01 00 	lea    0x1c3a4(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f834:	be 30 00 00 00       	mov    $0x30,%esi
  21f839:	e8 b2 63 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f83e:	0f 0b                	ud2    
  21f840:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21f845:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                assert!(range.start < range.end);
  21f84a:	48 39 c8             	cmp    %rcx,%rax
  21f84d:	0f 92 c0             	setb   %al
  21f850:	34 ff                	xor    $0xff,%al
  21f852:	a8 01                	test   $0x1,%al
  21f854:	75 37                	jne    21f88d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xed>
  21f856:	eb 1a                	jmp    21f872 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xd2>
                assert!(range.end <= Self::BIT_LENGTH);
  21f858:	48 8d 3d b8 30 fe ff 	lea    -0x1cf48(%rip),%rdi        # 202917 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21f85f:	48 8d 15 72 c3 01 00 	lea    0x1c372(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f866:	be 2f 00 00 00       	mov    $0x2f,%esi
  21f86b:	e8 80 63 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f870:	0f 0b                	ud2    
  21f872:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21f877:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21f87c:	48 29 c8             	sub    %rcx,%rax
  21f87f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21f884:	0f 92 c0             	setb   %al
  21f887:	a8 01                	test   $0x1,%al
  21f889:	75 37                	jne    21f8c2 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x122>
  21f88b:	eb 1a                	jmp    21f8a7 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x107>
                assert!(range.start < range.end);
  21f88d:	48 8d 3d b2 30 fe ff 	lea    -0x1cf4e(%rip),%rdi        # 202946 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21f894:	48 8d 15 3d c3 01 00 	lea    0x1c33d(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f89b:	be 29 00 00 00       	mov    $0x29,%esi
  21f8a0:	e8 4b 63 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f8a5:	0f 0b                	ud2    
  21f8a7:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21f8ac:	b8 10 00 00 00       	mov    $0x10,%eax
  21f8b1:	48 29 c8             	sub    %rcx,%rax
  21f8b4:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21f8b9:	0f 92 c0             	setb   %al
  21f8bc:	a8 01                	test   $0x1,%al
  21f8be:	75 46                	jne    21f906 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x166>
  21f8c0:	eb 1a                	jmp    21f8dc <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x13c>
  21f8c2:	48 8d 3d a7 30 fe ff 	lea    -0x1cf59(%rip),%rdi        # 202970 <str.0>
  21f8c9:	48 8d 15 08 c3 01 00 	lea    0x1c308(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f8d0:	be 21 00 00 00       	mov    $0x21,%esi
  21f8d5:	e8 16 63 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f8da:	0f 0b                	ud2    
  21f8dc:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  21f8e1:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  21f8e6:	48 89 c8             	mov    %rcx,%rax
  21f8e9:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21f8ed:	48 83 f8 00          	cmp    $0x0,%rax
  21f8f1:	0f 95 c0             	setne  %al
  21f8f4:	66 83 e1 0f          	and    $0xf,%cx
  21f8f8:	66 d3 e2             	shl    %cl,%dx
  21f8fb:	66 89 54 24 4e       	mov    %dx,0x4e(%rsp)
  21f900:	a8 01                	test   $0x1,%al
  21f902:	75 37                	jne    21f93b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x19b>
  21f904:	eb 1a                	jmp    21f920 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x180>
  21f906:	48 8d 3d 63 30 fe ff 	lea    -0x1cf9d(%rip),%rdi        # 202970 <str.0>
  21f90d:	48 8d 15 c4 c2 01 00 	lea    0x1c2c4(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f914:	be 21 00 00 00       	mov    $0x21,%esi
  21f919:	e8 d2 62 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f91e:	0f 0b                	ud2    
  21f920:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21f925:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21f92a:	48 29 c8             	sub    %rcx,%rax
  21f92d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21f932:	0f 92 c0             	setb   %al
  21f935:	a8 01                	test   $0x1,%al
  21f937:	75 37                	jne    21f970 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1d0>
  21f939:	eb 1a                	jmp    21f955 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1b5>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21f93b:	48 8d 3d 5e 30 fe ff 	lea    -0x1cfa2(%rip),%rdi        # 2029a0 <str.1>
  21f942:	48 8d 15 8f c2 01 00 	lea    0x1c28f(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f949:	be 23 00 00 00       	mov    $0x23,%esi
  21f94e:	e8 9d 62 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f953:	0f 0b                	ud2    
  21f955:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21f95a:	b8 10 00 00 00       	mov    $0x10,%eax
  21f95f:	48 29 c8             	sub    %rcx,%rax
  21f962:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21f967:	0f 92 c0             	setb   %al
  21f96a:	a8 01                	test   $0x1,%al
  21f96c:	75 46                	jne    21f9b4 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x214>
  21f96e:	eb 1a                	jmp    21f98a <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1ea>
  21f970:	48 8d 3d f9 2f fe ff 	lea    -0x1d007(%rip),%rdi        # 202970 <str.0>
  21f977:	48 8d 15 5a c2 01 00 	lea    0x1c25a(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f97e:	be 21 00 00 00       	mov    $0x21,%esi
  21f983:	e8 68 62 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f988:	0f 0b                	ud2    
  21f98a:	66 8b 54 24 4e       	mov    0x4e(%rsp),%dx
  21f98f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21f994:	48 89 c8             	mov    %rcx,%rax
  21f997:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21f99b:	48 83 f8 00          	cmp    $0x0,%rax
  21f99f:	0f 95 c0             	setne  %al
  21f9a2:	66 83 e1 0f          	and    $0xf,%cx
  21f9a6:	66 d3 ea             	shr    %cl,%dx
  21f9a9:	66 89 54 24 36       	mov    %dx,0x36(%rsp)
  21f9ae:	a8 01                	test   $0x1,%al
  21f9b0:	75 34                	jne    21f9e6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x246>
  21f9b2:	eb 1a                	jmp    21f9ce <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x22e>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21f9b4:	48 8d 3d b5 2f fe ff 	lea    -0x1d04b(%rip),%rdi        # 202970 <str.0>
  21f9bb:	48 8d 15 16 c2 01 00 	lea    0x1c216(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f9c2:	be 21 00 00 00       	mov    $0x21,%esi
  21f9c7:	e8 24 62 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f9cc:	0f 0b                	ud2    
  21f9ce:	66 8b 44 24 36       	mov    0x36(%rsp),%ax
  21f9d3:	66 8b 4c 24 6e       	mov    0x6e(%rsp),%cx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21f9d8:	66 39 c8             	cmp    %cx,%ax
  21f9db:	0f 94 c0             	sete   %al
  21f9de:	34 ff                	xor    $0xff,%al
  21f9e0:	a8 01                	test   $0x1,%al
  21f9e2:	75 37                	jne    21fa1b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x27b>
  21f9e4:	eb 1a                	jmp    21fa00 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x260>
  21f9e6:	48 8d 3d e3 2f fe ff 	lea    -0x1d01d(%rip),%rdi        # 2029d0 <str.2>
  21f9ed:	48 8d 15 e4 c1 01 00 	lea    0x1c1e4(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21f9f4:	be 24 00 00 00       	mov    $0x24,%esi
  21f9f9:	e8 f2 61 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f9fe:	0f 0b                	ud2    
  21fa00:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                        "value does not fit into bit range");

                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21fa05:	b8 10 00 00 00       	mov    $0x10,%eax
  21fa0a:	48 29 c8             	sub    %rcx,%rax
  21fa0d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21fa12:	0f 92 c0             	setb   %al
  21fa15:	a8 01                	test   $0x1,%al
  21fa17:	75 45                	jne    21fa5e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2be>
  21fa19:	eb 1a                	jmp    21fa35 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x295>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21fa1b:	48 8d 3d d2 2f fe ff 	lea    -0x1d02e(%rip),%rdi        # 2029f4 <str.2+0x24>
  21fa22:	48 8d 15 af c1 01 00 	lea    0x1c1af(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fa29:	be 21 00 00 00       	mov    $0x21,%esi
  21fa2e:	e8 bd 61 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fa33:	0f 0b                	ud2    
  21fa35:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21fa3a:	48 89 c8             	mov    %rcx,%rax
  21fa3d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21fa41:	48 83 f8 00          	cmp    $0x0,%rax
  21fa45:	0f 95 c0             	setne  %al
  21fa48:	66 83 e1 0f          	and    $0xf,%cx
  21fa4c:	66 ba ff ff          	mov    $0xffff,%dx
  21fa50:	66 d3 e2             	shl    %cl,%dx
  21fa53:	66 89 54 24 26       	mov    %dx,0x26(%rsp)
  21fa58:	a8 01                	test   $0x1,%al
  21fa5a:	75 37                	jne    21fa93 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2f3>
  21fa5c:	eb 1a                	jmp    21fa78 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2d8>
  21fa5e:	48 8d 3d 0b 2f fe ff 	lea    -0x1d0f5(%rip),%rdi        # 202970 <str.0>
  21fa65:	48 8d 15 6c c1 01 00 	lea    0x1c16c(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fa6c:	be 21 00 00 00       	mov    $0x21,%esi
  21fa71:	e8 7a 61 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fa76:	0f 0b                	ud2    
  21fa78:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                                    (Self::BIT_LENGTH - range.end) >>
  21fa7d:	b8 10 00 00 00       	mov    $0x10,%eax
  21fa82:	48 29 c8             	sub    %rcx,%rax
  21fa85:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21fa8a:	0f 92 c0             	setb   %al
  21fa8d:	a8 01                	test   $0x1,%al
  21fa8f:	75 46                	jne    21fad7 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x337>
  21fa91:	eb 1a                	jmp    21faad <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x30d>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21fa93:	48 8d 3d 06 2f fe ff 	lea    -0x1d0fa(%rip),%rdi        # 2029a0 <str.1>
  21fa9a:	48 8d 15 37 c1 01 00 	lea    0x1c137(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21faa1:	be 23 00 00 00       	mov    $0x23,%esi
  21faa6:	e8 45 61 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21faab:	0f 0b                	ud2    
  21faad:	66 8b 54 24 26       	mov    0x26(%rsp),%dx
  21fab2:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21fab7:	48 89 c8             	mov    %rcx,%rax
  21faba:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21fabe:	48 83 f8 00          	cmp    $0x0,%rax
  21fac2:	0f 95 c0             	setne  %al
  21fac5:	66 83 e1 0f          	and    $0xf,%cx
  21fac9:	66 d3 ea             	shr    %cl,%dx
  21facc:	66 89 54 24 16       	mov    %dx,0x16(%rsp)
  21fad1:	a8 01                	test   $0x1,%al
  21fad3:	75 46                	jne    21fb1b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x37b>
  21fad5:	eb 1a                	jmp    21faf1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x351>
                                    (Self::BIT_LENGTH - range.end) >>
  21fad7:	48 8d 3d 92 2e fe ff 	lea    -0x1d16e(%rip),%rdi        # 202970 <str.0>
  21fade:	48 8d 15 f3 c0 01 00 	lea    0x1c0f3(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fae5:	be 21 00 00 00       	mov    $0x21,%esi
  21faea:	e8 01 61 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21faef:	0f 0b                	ud2    
  21faf1:	66 8b 54 24 16       	mov    0x16(%rsp),%dx
  21faf6:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21fafb:	48 89 c8             	mov    %rcx,%rax
  21fafe:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21fb02:	48 83 f8 00          	cmp    $0x0,%rax
  21fb06:	0f 95 c0             	setne  %al
  21fb09:	66 83 e1 0f          	and    $0xf,%cx
  21fb0d:	66 d3 ea             	shr    %cl,%dx
  21fb10:	66 89 54 24 14       	mov    %dx,0x14(%rsp)
  21fb15:	a8 01                	test   $0x1,%al
  21fb17:	75 46                	jne    21fb5f <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x3bf>
  21fb19:	eb 1a                	jmp    21fb35 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x395>
  21fb1b:	48 8d 3d ae 2e fe ff 	lea    -0x1d152(%rip),%rdi        # 2029d0 <str.2>
  21fb22:	48 8d 15 af c0 01 00 	lea    0x1c0af(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fb29:	be 24 00 00 00       	mov    $0x24,%esi
  21fb2e:	e8 bd 60 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fb33:	0f 0b                	ud2    
  21fb35:	66 8b 54 24 14       	mov    0x14(%rsp),%dx
  21fb3a:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21fb3f:	48 89 c8             	mov    %rcx,%rax
  21fb42:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21fb46:	48 83 f8 00          	cmp    $0x0,%rax
  21fb4a:	0f 95 c0             	setne  %al
  21fb4d:	66 83 e1 0f          	and    $0xf,%cx
  21fb51:	66 d3 e2             	shl    %cl,%dx
  21fb54:	66 89 54 24 12       	mov    %dx,0x12(%rsp)
  21fb59:	a8 01                	test   $0x1,%al
  21fb5b:	75 64                	jne    21fbc1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x421>
  21fb5d:	eb 1a                	jmp    21fb79 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x3d9>
  21fb5f:	48 8d 3d 6a 2e fe ff 	lea    -0x1d196(%rip),%rdi        # 2029d0 <str.2>
  21fb66:	48 8d 15 6b c0 01 00 	lea    0x1c06b(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fb6d:	be 24 00 00 00       	mov    $0x24,%esi
  21fb72:	e8 79 60 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fb77:	0f 0b                	ud2    
  21fb79:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  21fb7e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21fb83:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21fb88:	66 8b 44 24 12       	mov    0x12(%rsp),%ax
  21fb8d:	66 83 f0 ff          	xor    $0xffff,%ax
  21fb91:	66 89 84 24 b6 00 00 	mov    %ax,0xb6(%rsp)
  21fb98:	00 
                                    range.start << range.start);

                // set bits
                *self = (*self & bitmask) | (value << range.start);
  21fb99:	66 23 06             	and    (%rsi),%ax
  21fb9c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21fba1:	48 89 c8             	mov    %rcx,%rax
  21fba4:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21fba8:	48 83 f8 00          	cmp    $0x0,%rax
  21fbac:	0f 95 c0             	setne  %al
  21fbaf:	66 83 e1 0f          	and    $0xf,%cx
  21fbb3:	66 d3 e2             	shl    %cl,%dx
  21fbb6:	66 89 54 24 10       	mov    %dx,0x10(%rsp)
  21fbbb:	a8 01                	test   $0x1,%al
  21fbbd:	75 33                	jne    21fbf2 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x452>
  21fbbf:	eb 1a                	jmp    21fbdb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x43b>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21fbc1:	48 8d 3d d8 2d fe ff 	lea    -0x1d228(%rip),%rdi        # 2029a0 <str.1>
  21fbc8:	48 8d 15 09 c0 01 00 	lea    0x1c009(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fbcf:	be 23 00 00 00       	mov    $0x23,%esi
  21fbd4:	e8 17 60 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fbd9:	0f 0b                	ud2    
  21fbdb:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21fbe0:	66 8b 54 24 10       	mov    0x10(%rsp),%dx
  21fbe5:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
                *self = (*self & bitmask) | (value << range.start);
  21fbea:	66 09 d1             	or     %dx,%cx
  21fbed:	66 89 08             	mov    %cx,(%rax)

                self
            }
  21fbf0:	eb 1a                	jmp    21fc0c <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x46c>
                *self = (*self & bitmask) | (value << range.start);
  21fbf2:	48 8d 3d a7 2d fe ff 	lea    -0x1d259(%rip),%rdi        # 2029a0 <str.1>
  21fbf9:	48 8d 15 d8 bf 01 00 	lea    0x1bfd8(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fc00:	be 23 00 00 00       	mov    $0x23,%esi
  21fc05:	e8 e6 5f 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fc0a:	0f 0b                	ud2    
  21fc0c:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            }
  21fc11:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  21fc18:	c3                   	retq   
  21fc19:	cc                   	int3   
  21fc1a:	cc                   	int3   
  21fc1b:	cc                   	int3   
  21fc1c:	cc                   	int3   
  21fc1d:	cc                   	int3   
  21fc1e:	cc                   	int3   
  21fc1f:	cc                   	int3   

000000000021fc20 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  21fc20:	48 83 ec 68          	sub    $0x68,%rsp
  21fc24:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21fc29:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21fc2e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21fc33:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21fc38:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21fc3d:	be 20 00 00 00       	mov    $0x20,%esi
  21fc42:	e8 b9 08 00 00       	callq  220500 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21fc47:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21fc4c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21fc51:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21fc56:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21fc5b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  21fc60:	48 83 f8 20          	cmp    $0x20,%rax
  21fc64:	0f 92 c0             	setb   %al
  21fc67:	34 ff                	xor    $0xff,%al
  21fc69:	a8 01                	test   $0x1,%al
  21fc6b:	75 14                	jne    21fc81 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x61>
  21fc6d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21fc72:	48 83 f8 20          	cmp    $0x20,%rax
  21fc76:	0f 96 c0             	setbe  %al
  21fc79:	34 ff                	xor    $0xff,%al
  21fc7b:	a8 01                	test   $0x1,%al
  21fc7d:	75 34                	jne    21fcb3 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x93>
  21fc7f:	eb 1a                	jmp    21fc9b <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  21fc81:	48 8d 3d 04 2c fe ff 	lea    -0x1d3fc(%rip),%rdi        # 20288c <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21fc88:	48 8d 15 49 bf 01 00 	lea    0x1bf49(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fc8f:	be 30 00 00 00       	mov    $0x30,%esi
  21fc94:	e8 57 5f 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fc99:	0f 0b                	ud2    
  21fc9b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21fca0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
                assert!(range.start < range.end);
  21fca5:	48 39 c8             	cmp    %rcx,%rax
  21fca8:	0f 92 c0             	setb   %al
  21fcab:	34 ff                	xor    $0xff,%al
  21fcad:	a8 01                	test   $0x1,%al
  21fcaf:	75 42                	jne    21fcf3 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xd3>
  21fcb1:	eb 1a                	jmp    21fccd <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  21fcb3:	48 8d 3d 5d 2c fe ff 	lea    -0x1d3a3(%rip),%rdi        # 202917 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21fcba:	48 8d 15 17 bf 01 00 	lea    0x1bf17(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fcc1:	be 2f 00 00 00       	mov    $0x2f,%esi
  21fcc6:	e8 25 5f 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fccb:	0f 0b                	ud2    
  21fccd:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21fcd2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21fcd7:	8b 00                	mov    (%rax),%eax
  21fcd9:	89 44 24 14          	mov    %eax,0x14(%rsp)
  21fcdd:	b8 20 00 00 00       	mov    $0x20,%eax
  21fce2:	48 29 c8             	sub    %rcx,%rax
  21fce5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21fcea:	0f 92 c0             	setb   %al
  21fced:	a8 01                	test   $0x1,%al
  21fcef:	75 42                	jne    21fd33 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x113>
  21fcf1:	eb 1a                	jmp    21fd0d <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xed>
                assert!(range.start < range.end);
  21fcf3:	48 8d 3d 4c 2c fe ff 	lea    -0x1d3b4(%rip),%rdi        # 202946 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21fcfa:	48 8d 15 d7 be 01 00 	lea    0x1bed7(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fd01:	be 29 00 00 00       	mov    $0x29,%esi
  21fd06:	e8 e5 5e 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fd0b:	0f 0b                	ud2    
  21fd0d:	8b 54 24 14          	mov    0x14(%rsp),%edx
  21fd11:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21fd16:	48 89 c8             	mov    %rcx,%rax
  21fd19:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21fd1d:	48 83 f8 00          	cmp    $0x0,%rax
  21fd21:	0f 95 c0             	setne  %al
  21fd24:	83 e1 1f             	and    $0x1f,%ecx
  21fd27:	d3 e2                	shl    %cl,%edx
  21fd29:	89 54 24 10          	mov    %edx,0x10(%rsp)
  21fd2d:	a8 01                	test   $0x1,%al
  21fd2f:	75 37                	jne    21fd68 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x148>
  21fd31:	eb 1a                	jmp    21fd4d <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x12d>
  21fd33:	48 8d 3d 36 2c fe ff 	lea    -0x1d3ca(%rip),%rdi        # 202970 <str.0>
  21fd3a:	48 8d 15 97 be 01 00 	lea    0x1be97(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fd41:	be 21 00 00 00       	mov    $0x21,%esi
  21fd46:	e8 a5 5e 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fd4b:	0f 0b                	ud2    
  21fd4d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21fd52:	b8 20 00 00 00       	mov    $0x20,%eax
  21fd57:	48 29 c8             	sub    %rcx,%rax
  21fd5a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21fd5f:	0f 92 c0             	setb   %al
  21fd62:	a8 01                	test   $0x1,%al
  21fd64:	75 42                	jne    21fda8 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x188>
  21fd66:	eb 1a                	jmp    21fd82 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x162>
  21fd68:	48 8d 3d 31 2c fe ff 	lea    -0x1d3cf(%rip),%rdi        # 2029a0 <str.1>
  21fd6f:	48 8d 15 62 be 01 00 	lea    0x1be62(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fd76:	be 23 00 00 00       	mov    $0x23,%esi
  21fd7b:	e8 70 5e 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fd80:	0f 0b                	ud2    
  21fd82:	8b 54 24 10          	mov    0x10(%rsp),%edx
  21fd86:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21fd8b:	48 89 c8             	mov    %rcx,%rax
  21fd8e:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21fd92:	48 83 f8 00          	cmp    $0x0,%rax
  21fd96:	0f 95 c0             	setne  %al
  21fd99:	83 e1 1f             	and    $0x1f,%ecx
  21fd9c:	d3 ea                	shr    %cl,%edx
  21fd9e:	89 54 24 04          	mov    %edx,0x4(%rsp)
  21fda2:	a8 01                	test   $0x1,%al
  21fda4:	75 45                	jne    21fdeb <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1cb>
  21fda6:	eb 1a                	jmp    21fdc2 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1a2>
  21fda8:	48 8d 3d c1 2b fe ff 	lea    -0x1d43f(%rip),%rdi        # 202970 <str.0>
  21fdaf:	48 8d 15 22 be 01 00 	lea    0x1be22(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fdb6:	be 21 00 00 00       	mov    $0x21,%esi
  21fdbb:	e8 30 5e 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fdc0:	0f 0b                	ud2    
  21fdc2:	8b 54 24 04          	mov    0x4(%rsp),%edx
  21fdc6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21fdcb:	89 54 24 64          	mov    %edx,0x64(%rsp)
                bits >> range.start
  21fdcf:	48 89 c8             	mov    %rcx,%rax
  21fdd2:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21fdd6:	48 83 f8 00          	cmp    $0x0,%rax
  21fdda:	0f 95 c0             	setne  %al
  21fddd:	83 e1 1f             	and    $0x1f,%ecx
  21fde0:	d3 ea                	shr    %cl,%edx
  21fde2:	89 14 24             	mov    %edx,(%rsp)
  21fde5:	a8 01                	test   $0x1,%al
  21fde7:	75 1e                	jne    21fe07 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1e7>
  21fde9:	eb 1a                	jmp    21fe05 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1e5>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21fdeb:	48 8d 3d de 2b fe ff 	lea    -0x1d422(%rip),%rdi        # 2029d0 <str.2>
  21fdf2:	48 8d 15 df bd 01 00 	lea    0x1bddf(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fdf9:	be 24 00 00 00       	mov    $0x24,%esi
  21fdfe:	e8 ed 5d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fe03:	0f 0b                	ud2    
            }
  21fe05:	eb 1a                	jmp    21fe21 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x201>
                bits >> range.start
  21fe07:	48 8d 3d c2 2b fe ff 	lea    -0x1d43e(%rip),%rdi        # 2029d0 <str.2>
  21fe0e:	48 8d 15 c3 bd 01 00 	lea    0x1bdc3(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fe15:	be 24 00 00 00       	mov    $0x24,%esi
  21fe1a:	e8 d1 5d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fe1f:	0f 0b                	ud2    
  21fe21:	8b 04 24             	mov    (%rsp),%eax
            }
  21fe24:	48 83 c4 68          	add    $0x68,%rsp
  21fe28:	c3                   	retq   
  21fe29:	cc                   	int3   
  21fe2a:	cc                   	int3   
  21fe2b:	cc                   	int3   
  21fe2c:	cc                   	int3   
  21fe2d:	cc                   	int3   
  21fe2e:	cc                   	int3   
  21fe2f:	cc                   	int3   

000000000021fe30 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  21fe30:	48 83 ec 78          	sub    $0x78,%rsp
  21fe34:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21fe39:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21fe3e:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21fe43:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21fe48:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21fe4d:	be 40 00 00 00       	mov    $0x40,%esi
  21fe52:	e8 a9 06 00 00       	callq  220500 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21fe57:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21fe5c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21fe61:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21fe66:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  21fe6b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  21fe70:	48 83 f8 40          	cmp    $0x40,%rax
  21fe74:	0f 92 c0             	setb   %al
  21fe77:	34 ff                	xor    $0xff,%al
  21fe79:	a8 01                	test   $0x1,%al
  21fe7b:	75 14                	jne    21fe91 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x61>
  21fe7d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21fe82:	48 83 f8 40          	cmp    $0x40,%rax
  21fe86:	0f 96 c0             	setbe  %al
  21fe89:	34 ff                	xor    $0xff,%al
  21fe8b:	a8 01                	test   $0x1,%al
  21fe8d:	75 34                	jne    21fec3 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x93>
  21fe8f:	eb 1a                	jmp    21feab <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  21fe91:	48 8d 3d f4 29 fe ff 	lea    -0x1d60c(%rip),%rdi        # 20288c <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21fe98:	48 8d 15 39 bd 01 00 	lea    0x1bd39(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fe9f:	be 30 00 00 00       	mov    $0x30,%esi
  21fea4:	e8 47 5d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fea9:	0f 0b                	ud2    
  21feab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21feb0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                assert!(range.start < range.end);
  21feb5:	48 39 c8             	cmp    %rcx,%rax
  21feb8:	0f 92 c0             	setb   %al
  21febb:	34 ff                	xor    $0xff,%al
  21febd:	a8 01                	test   $0x1,%al
  21febf:	75 44                	jne    21ff05 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xd5>
  21fec1:	eb 1a                	jmp    21fedd <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  21fec3:	48 8d 3d 4d 2a fe ff 	lea    -0x1d5b3(%rip),%rdi        # 202917 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21feca:	48 8d 15 07 bd 01 00 	lea    0x1bd07(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21fed1:	be 2f 00 00 00       	mov    $0x2f,%esi
  21fed6:	e8 15 5d 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21fedb:	0f 0b                	ud2    
  21fedd:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21fee2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21fee7:	48 8b 00             	mov    (%rax),%rax
  21feea:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21feef:	b8 40 00 00 00       	mov    $0x40,%eax
  21fef4:	48 29 c8             	sub    %rcx,%rax
  21fef7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21fefc:	0f 92 c0             	setb   %al
  21feff:	a8 01                	test   $0x1,%al
  21ff01:	75 46                	jne    21ff49 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x119>
  21ff03:	eb 1a                	jmp    21ff1f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xef>
                assert!(range.start < range.end);
  21ff05:	48 8d 3d 3a 2a fe ff 	lea    -0x1d5c6(%rip),%rdi        # 202946 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21ff0c:	48 8d 15 c5 bc 01 00 	lea    0x1bcc5(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21ff13:	be 29 00 00 00       	mov    $0x29,%esi
  21ff18:	e8 d3 5c 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ff1d:	0f 0b                	ud2    
  21ff1f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21ff24:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21ff29:	48 89 c8             	mov    %rcx,%rax
  21ff2c:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21ff30:	48 83 f8 00          	cmp    $0x0,%rax
  21ff34:	0f 95 c0             	setne  %al
  21ff37:	48 83 e1 3f          	and    $0x3f,%rcx
  21ff3b:	48 d3 e2             	shl    %cl,%rdx
  21ff3e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21ff43:	a8 01                	test   $0x1,%al
  21ff45:	75 37                	jne    21ff7e <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x14e>
  21ff47:	eb 1a                	jmp    21ff63 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x133>
  21ff49:	48 8d 3d 20 2a fe ff 	lea    -0x1d5e0(%rip),%rdi        # 202970 <str.0>
  21ff50:	48 8d 15 81 bc 01 00 	lea    0x1bc81(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21ff57:	be 21 00 00 00       	mov    $0x21,%esi
  21ff5c:	e8 8f 5c 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ff61:	0f 0b                	ud2    
  21ff63:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21ff68:	b8 40 00 00 00       	mov    $0x40,%eax
  21ff6d:	48 29 c8             	sub    %rcx,%rax
  21ff70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ff75:	0f 92 c0             	setb   %al
  21ff78:	a8 01                	test   $0x1,%al
  21ff7a:	75 46                	jne    21ffc2 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x192>
  21ff7c:	eb 1a                	jmp    21ff98 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x168>
  21ff7e:	48 8d 3d 1b 2a fe ff 	lea    -0x1d5e5(%rip),%rdi        # 2029a0 <str.1>
  21ff85:	48 8d 15 4c bc 01 00 	lea    0x1bc4c(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21ff8c:	be 23 00 00 00       	mov    $0x23,%esi
  21ff91:	e8 5a 5c 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ff96:	0f 0b                	ud2    
  21ff98:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21ff9d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21ffa2:	48 89 c8             	mov    %rcx,%rax
  21ffa5:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21ffa9:	48 83 f8 00          	cmp    $0x0,%rax
  21ffad:	0f 95 c0             	setne  %al
  21ffb0:	48 83 e1 3f          	and    $0x3f,%rcx
  21ffb4:	48 d3 ea             	shr    %cl,%rdx
  21ffb7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21ffbc:	a8 01                	test   $0x1,%al
  21ffbe:	75 4a                	jne    22000a <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1da>
  21ffc0:	eb 1a                	jmp    21ffdc <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1ac>
  21ffc2:	48 8d 3d a7 29 fe ff 	lea    -0x1d659(%rip),%rdi        # 202970 <str.0>
  21ffc9:	48 8d 15 08 bc 01 00 	lea    0x1bc08(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  21ffd0:	be 21 00 00 00       	mov    $0x21,%esi
  21ffd5:	e8 16 5c 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ffda:	0f 0b                	ud2    
  21ffdc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21ffe1:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21ffe6:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
                bits >> range.start
  21ffeb:	48 89 c8             	mov    %rcx,%rax
  21ffee:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21fff2:	48 83 f8 00          	cmp    $0x0,%rax
  21fff6:	0f 95 c0             	setne  %al
  21fff9:	48 83 e1 3f          	and    $0x3f,%rcx
  21fffd:	48 d3 ea             	shr    %cl,%rdx
  220000:	48 89 14 24          	mov    %rdx,(%rsp)
  220004:	a8 01                	test   $0x1,%al
  220006:	75 1e                	jne    220026 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1f6>
  220008:	eb 1a                	jmp    220024 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1f4>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  22000a:	48 8d 3d bf 29 fe ff 	lea    -0x1d641(%rip),%rdi        # 2029d0 <str.2>
  220011:	48 8d 15 c0 bb 01 00 	lea    0x1bbc0(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220018:	be 24 00 00 00       	mov    $0x24,%esi
  22001d:	e8 ce 5b 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220022:	0f 0b                	ud2    
            }
  220024:	eb 1a                	jmp    220040 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x210>
                bits >> range.start
  220026:	48 8d 3d a3 29 fe ff 	lea    -0x1d65d(%rip),%rdi        # 2029d0 <str.2>
  22002d:	48 8d 15 a4 bb 01 00 	lea    0x1bba4(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220034:	be 24 00 00 00       	mov    $0x24,%esi
  220039:	e8 b2 5b 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22003e:	0f 0b                	ud2    
  220040:	48 8b 04 24          	mov    (%rsp),%rax
            }
  220044:	48 83 c4 78          	add    $0x78,%rsp
  220048:	c3                   	retq   
  220049:	cc                   	int3   
  22004a:	cc                   	int3   
  22004b:	cc                   	int3   
  22004c:	cc                   	int3   
  22004d:	cc                   	int3   
  22004e:	cc                   	int3   
  22004f:	cc                   	int3   

0000000000220050 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>:
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  220050:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  220057:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  22005c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  220061:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  220068:	00 
  220069:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  220070:	00 
  220071:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  220078:	00 
  220079:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  220080:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  220081:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  220088:	00 
  220089:	be 40 00 00 00       	mov    $0x40,%esi
  22008e:	e8 6d 04 00 00       	callq  220500 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  220093:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22009a:	00 
  22009b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2200a2:	00 
  2200a3:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2200aa:	00 
  2200ab:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  2200b2:	00 
  2200b3:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2200ba:	00 
                assert!(range.start < Self::BIT_LENGTH);
  2200bb:	48 83 f8 40          	cmp    $0x40,%rax
  2200bf:	0f 92 c0             	setb   %al
  2200c2:	34 ff                	xor    $0xff,%al
  2200c4:	a8 01                	test   $0x1,%al
  2200c6:	75 17                	jne    2200df <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x8f>
  2200c8:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2200cf:	00 
                assert!(range.end <= Self::BIT_LENGTH);
  2200d0:	48 83 f8 40          	cmp    $0x40,%rax
  2200d4:	0f 96 c0             	setbe  %al
  2200d7:	34 ff                	xor    $0xff,%al
  2200d9:	a8 01                	test   $0x1,%al
  2200db:	75 3a                	jne    220117 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xc7>
  2200dd:	eb 1a                	jmp    2200f9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xa9>
                assert!(range.start < Self::BIT_LENGTH);
  2200df:	48 8d 3d a6 27 fe ff 	lea    -0x1d85a(%rip),%rdi        # 20288c <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  2200e6:	48 8d 15 eb ba 01 00 	lea    0x1baeb(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2200ed:	be 30 00 00 00       	mov    $0x30,%esi
  2200f2:	e8 f9 5a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2200f7:	0f 0b                	ud2    
  2200f9:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  220100:	00 
  220101:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  220108:	00 
                assert!(range.start < range.end);
  220109:	48 39 c8             	cmp    %rcx,%rax
  22010c:	0f 92 c0             	setb   %al
  22010f:	34 ff                	xor    $0xff,%al
  220111:	a8 01                	test   $0x1,%al
  220113:	75 3d                	jne    220152 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x102>
  220115:	eb 1a                	jmp    220131 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xe1>
                assert!(range.end <= Self::BIT_LENGTH);
  220117:	48 8d 3d f9 27 fe ff 	lea    -0x1d807(%rip),%rdi        # 202917 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  22011e:	48 8d 15 b3 ba 01 00 	lea    0x1bab3(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220125:	be 2f 00 00 00       	mov    $0x2f,%esi
  22012a:	e8 c1 5a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22012f:	0f 0b                	ud2    
  220131:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  220138:	00 
  220139:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  220140:	00 
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  220141:	48 29 c8             	sub    %rcx,%rax
  220144:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  220149:	0f 92 c0             	setb   %al
  22014c:	a8 01                	test   $0x1,%al
  22014e:	75 37                	jne    220187 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x137>
  220150:	eb 1a                	jmp    22016c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x11c>
                assert!(range.start < range.end);
  220152:	48 8d 3d ed 27 fe ff 	lea    -0x1d813(%rip),%rdi        # 202946 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  220159:	48 8d 15 78 ba 01 00 	lea    0x1ba78(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220160:	be 29 00 00 00       	mov    $0x29,%esi
  220165:	e8 86 5a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22016a:	0f 0b                	ud2    
  22016c:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  220171:	b8 40 00 00 00       	mov    $0x40,%eax
  220176:	48 29 c8             	sub    %rcx,%rax
  220179:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22017e:	0f 92 c0             	setb   %al
  220181:	a8 01                	test   $0x1,%al
  220183:	75 46                	jne    2201cb <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x17b>
  220185:	eb 1a                	jmp    2201a1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x151>
  220187:	48 8d 3d e2 27 fe ff 	lea    -0x1d81e(%rip),%rdi        # 202970 <str.0>
  22018e:	48 8d 15 43 ba 01 00 	lea    0x1ba43(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220195:	be 21 00 00 00       	mov    $0x21,%esi
  22019a:	e8 51 5a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22019f:	0f 0b                	ud2    
  2201a1:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  2201a6:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2201ab:	48 89 c8             	mov    %rcx,%rax
  2201ae:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  2201b2:	48 83 f8 00          	cmp    $0x0,%rax
  2201b6:	0f 95 c0             	setne  %al
  2201b9:	48 83 e1 3f          	and    $0x3f,%rcx
  2201bd:	48 d3 e2             	shl    %cl,%rdx
  2201c0:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  2201c5:	a8 01                	test   $0x1,%al
  2201c7:	75 3d                	jne    220206 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1b6>
  2201c9:	eb 1a                	jmp    2201e5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x195>
  2201cb:	48 8d 3d 9e 27 fe ff 	lea    -0x1d862(%rip),%rdi        # 202970 <str.0>
  2201d2:	48 8d 15 ff b9 01 00 	lea    0x1b9ff(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2201d9:	be 21 00 00 00       	mov    $0x21,%esi
  2201de:	e8 0d 5a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2201e3:	0f 0b                	ud2    
  2201e5:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2201ec:	00 
  2201ed:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2201f4:	00 
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  2201f5:	48 29 c8             	sub    %rcx,%rax
  2201f8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2201fd:	0f 92 c0             	setb   %al
  220200:	a8 01                	test   $0x1,%al
  220202:	75 37                	jne    22023b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1eb>
  220204:	eb 1a                	jmp    220220 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1d0>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  220206:	48 8d 3d 93 27 fe ff 	lea    -0x1d86d(%rip),%rdi        # 2029a0 <str.1>
  22020d:	48 8d 15 c4 b9 01 00 	lea    0x1b9c4(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220214:	be 23 00 00 00       	mov    $0x23,%esi
  220219:	e8 d2 59 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22021e:	0f 0b                	ud2    
  220220:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  220225:	b8 40 00 00 00       	mov    $0x40,%eax
  22022a:	48 29 c8             	sub    %rcx,%rax
  22022d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  220232:	0f 92 c0             	setb   %al
  220235:	a8 01                	test   $0x1,%al
  220237:	75 46                	jne    22027f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x22f>
  220239:	eb 1a                	jmp    220255 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x205>
  22023b:	48 8d 3d 2e 27 fe ff 	lea    -0x1d8d2(%rip),%rdi        # 202970 <str.0>
  220242:	48 8d 15 8f b9 01 00 	lea    0x1b98f(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220249:	be 21 00 00 00       	mov    $0x21,%esi
  22024e:	e8 9d 59 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220253:	0f 0b                	ud2    
  220255:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22025a:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  22025f:	48 89 c8             	mov    %rcx,%rax
  220262:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  220266:	48 83 f8 00          	cmp    $0x0,%rax
  22026a:	0f 95 c0             	setne  %al
  22026d:	48 83 e1 3f          	and    $0x3f,%rcx
  220271:	48 d3 ea             	shr    %cl,%rdx
  220274:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  220279:	a8 01                	test   $0x1,%al
  22027b:	75 34                	jne    2202b1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x261>
  22027d:	eb 1a                	jmp    220299 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x249>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  22027f:	48 8d 3d ea 26 fe ff 	lea    -0x1d916(%rip),%rdi        # 202970 <str.0>
  220286:	48 8d 15 4b b9 01 00 	lea    0x1b94b(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  22028d:	be 21 00 00 00       	mov    $0x21,%esi
  220292:	e8 59 59 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220297:	0f 0b                	ud2    
  220299:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22029e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2202a3:	48 39 c8             	cmp    %rcx,%rax
  2202a6:	0f 94 c0             	sete   %al
  2202a9:	34 ff                	xor    $0xff,%al
  2202ab:	a8 01                	test   $0x1,%al
  2202ad:	75 3a                	jne    2202e9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x299>
  2202af:	eb 1a                	jmp    2202cb <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x27b>
  2202b1:	48 8d 3d 18 27 fe ff 	lea    -0x1d8e8(%rip),%rdi        # 2029d0 <str.2>
  2202b8:	48 8d 15 19 b9 01 00 	lea    0x1b919(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2202bf:	be 24 00 00 00       	mov    $0x24,%esi
  2202c4:	e8 27 59 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2202c9:	0f 0b                	ud2    
  2202cb:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2202d2:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  2202d3:	b8 40 00 00 00       	mov    $0x40,%eax
  2202d8:	48 29 c8             	sub    %rcx,%rax
  2202db:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2202e0:	0f 92 c0             	setb   %al
  2202e3:	a8 01                	test   $0x1,%al
  2202e5:	75 48                	jne    22032f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2df>
  2202e7:	eb 1a                	jmp    220303 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2b3>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2202e9:	48 8d 3d 04 27 fe ff 	lea    -0x1d8fc(%rip),%rdi        # 2029f4 <str.2+0x24>
  2202f0:	48 8d 15 e1 b8 01 00 	lea    0x1b8e1(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2202f7:	be 21 00 00 00       	mov    $0x21,%esi
  2202fc:	e8 ef 58 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220301:	0f 0b                	ud2    
  220303:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  220308:	48 89 c8             	mov    %rcx,%rax
  22030b:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  22030f:	48 83 f8 00          	cmp    $0x0,%rax
  220313:	0f 95 c0             	setne  %al
  220316:	48 83 e1 3f          	and    $0x3f,%rcx
  22031a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  220321:	48 d3 e2             	shl    %cl,%rdx
  220324:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  220329:	a8 01                	test   $0x1,%al
  22032b:	75 3a                	jne    220367 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x317>
  22032d:	eb 1a                	jmp    220349 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2f9>
  22032f:	48 8d 3d 3a 26 fe ff 	lea    -0x1d9c6(%rip),%rdi        # 202970 <str.0>
  220336:	48 8d 15 9b b8 01 00 	lea    0x1b89b(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  22033d:	be 21 00 00 00       	mov    $0x21,%esi
  220342:	e8 a9 58 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220347:	0f 0b                	ud2    
  220349:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  220350:	00 
                                    (Self::BIT_LENGTH - range.end) >>
  220351:	b8 40 00 00 00       	mov    $0x40,%eax
  220356:	48 29 c8             	sub    %rcx,%rax
  220359:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22035e:	0f 92 c0             	setb   %al
  220361:	a8 01                	test   $0x1,%al
  220363:	75 46                	jne    2203ab <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x35b>
  220365:	eb 1a                	jmp    220381 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x331>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  220367:	48 8d 3d 32 26 fe ff 	lea    -0x1d9ce(%rip),%rdi        # 2029a0 <str.1>
  22036e:	48 8d 15 63 b8 01 00 	lea    0x1b863(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220375:	be 23 00 00 00       	mov    $0x23,%esi
  22037a:	e8 71 58 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22037f:	0f 0b                	ud2    
  220381:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  220386:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22038b:	48 89 c8             	mov    %rcx,%rax
  22038e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  220392:	48 83 f8 00          	cmp    $0x0,%rax
  220396:	0f 95 c0             	setne  %al
  220399:	48 83 e1 3f          	and    $0x3f,%rcx
  22039d:	48 d3 ea             	shr    %cl,%rdx
  2203a0:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2203a5:	a8 01                	test   $0x1,%al
  2203a7:	75 49                	jne    2203f2 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3a2>
  2203a9:	eb 1a                	jmp    2203c5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x375>
                                    (Self::BIT_LENGTH - range.end) >>
  2203ab:	48 8d 3d be 25 fe ff 	lea    -0x1da42(%rip),%rdi        # 202970 <str.0>
  2203b2:	48 8d 15 1f b8 01 00 	lea    0x1b81f(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2203b9:	be 21 00 00 00       	mov    $0x21,%esi
  2203be:	e8 2d 58 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2203c3:	0f 0b                	ud2    
  2203c5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2203ca:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2203d1:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  2203d2:	48 89 c8             	mov    %rcx,%rax
  2203d5:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  2203d9:	48 83 f8 00          	cmp    $0x0,%rax
  2203dd:	0f 95 c0             	setne  %al
  2203e0:	48 83 e1 3f          	and    $0x3f,%rcx
  2203e4:	48 d3 ea             	shr    %cl,%rdx
  2203e7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2203ec:	a8 01                	test   $0x1,%al
  2203ee:	75 49                	jne    220439 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3e9>
  2203f0:	eb 1a                	jmp    22040c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3bc>
  2203f2:	48 8d 3d d7 25 fe ff 	lea    -0x1da29(%rip),%rdi        # 2029d0 <str.2>
  2203f9:	48 8d 15 d8 b7 01 00 	lea    0x1b7d8(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220400:	be 24 00 00 00       	mov    $0x24,%esi
  220405:	e8 e6 57 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22040a:	0f 0b                	ud2    
  22040c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  220411:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  220418:	00 
  220419:	48 89 c8             	mov    %rcx,%rax
  22041c:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  220420:	48 83 f8 00          	cmp    $0x0,%rax
  220424:	0f 95 c0             	setne  %al
  220427:	48 83 e1 3f          	and    $0x3f,%rcx
  22042b:	48 d3 e2             	shl    %cl,%rdx
  22042e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  220433:	a8 01                	test   $0x1,%al
  220435:	75 66                	jne    22049d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x44d>
  220437:	eb 1a                	jmp    220453 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x403>
  220439:	48 8d 3d 90 25 fe ff 	lea    -0x1da70(%rip),%rdi        # 2029d0 <str.2>
  220440:	48 8d 15 91 b7 01 00 	lea    0x1b791(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  220447:	be 24 00 00 00       	mov    $0x24,%esi
  22044c:	e8 9f 57 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  220451:	0f 0b                	ud2    
  220453:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  220458:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  22045f:	00 
  220460:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  220465:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22046a:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
  22046e:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  220475:	00 
                *self = (*self & bitmask) | (value << range.start);
  220476:	48 23 06             	and    (%rsi),%rax
  220479:	48 89 04 24          	mov    %rax,(%rsp)
  22047d:	48 89 c8             	mov    %rcx,%rax
  220480:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  220484:	48 83 f8 00          	cmp    $0x0,%rax
  220488:	0f 95 c0             	setne  %al
  22048b:	48 83 e1 3f          	and    $0x3f,%rcx
  22048f:	48 d3 e2             	shl    %cl,%rdx
  220492:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  220497:	a8 01                	test   $0x1,%al
  220499:	75 32                	jne    2204cd <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x47d>
  22049b:	eb 1a                	jmp    2204b7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x467>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  22049d:	48 8d 3d fc 24 fe ff 	lea    -0x1db04(%rip),%rdi        # 2029a0 <str.1>
  2204a4:	48 8d 15 2d b7 01 00 	lea    0x1b72d(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2204ab:	be 23 00 00 00       	mov    $0x23,%esi
  2204b0:	e8 3b 57 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2204b5:	0f 0b                	ud2    
  2204b7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2204bc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2204c1:	48 8b 0c 24          	mov    (%rsp),%rcx
                *self = (*self & bitmask) | (value << range.start);
  2204c5:	48 09 d1             	or     %rdx,%rcx
  2204c8:	48 89 08             	mov    %rcx,(%rax)
            }
  2204cb:	eb 1a                	jmp    2204e7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x497>
                *self = (*self & bitmask) | (value << range.start);
  2204cd:	48 8d 3d cc 24 fe ff 	lea    -0x1db34(%rip),%rdi        # 2029a0 <str.1>
  2204d4:	48 8d 15 fd b6 01 00 	lea    0x1b6fd(%rip),%rdx        # 23bbd8 <memcmp+0x2e98>
  2204db:	be 23 00 00 00       	mov    $0x23,%esi
  2204e0:	e8 0b 57 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2204e5:	0f 0b                	ud2    
  2204e7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
            }
  2204ec:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  2204f3:	c3                   	retq   
  2204f4:	cc                   	int3   
  2204f5:	cc                   	int3   
  2204f6:	cc                   	int3   
  2204f7:	cc                   	int3   
  2204f8:	cc                   	int3   
  2204f9:	cc                   	int3   
  2204fa:	cc                   	int3   
  2204fb:	cc                   	int3   
  2204fc:	cc                   	int3   
  2204fd:	cc                   	int3   
  2204fe:	cc                   	int3   
  2204ff:	cc                   	int3   

0000000000220500 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>:
            );
        }
    }
}

fn to_regular_range<T: RangeBounds<usize>>(generic_rage: &T, bit_length: usize) -> Range<usize> {
  220500:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  220507:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22050c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  220511:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  220516:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  22051d:	00 
    let start = match generic_rage.start_bound() {
  22051e:	e8 4d e2 ff ff       	callq  21e770 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h54fdde9cf6df2759E>
  220523:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  220528:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22052d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  220532:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  220537:	48 85 c0             	test   %rax,%rax
  22053a:	74 13                	je     22054f <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x4f>
  22053c:	eb 00                	jmp    22053e <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x3e>
  22053e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  220543:	48 83 e8 01          	sub    $0x1,%rax
  220547:	74 1d                	je     220566 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x66>
  220549:	eb 00                	jmp    22054b <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x4b>
  22054b:	eb 3b                	jmp    220588 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x88>
  22054d:	0f 0b                	ud2    
        Bound::Excluded(&value) => value + 1,
        Bound::Included(&value) => value,
  22054f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  220554:	48 8b 00             	mov    (%rax),%rax
  220557:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22055e:	00 
  22055f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  220564:	eb 2b                	jmp    220591 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x91>
        Bound::Excluded(&value) => value + 1,
  220566:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22056b:	48 8b 00             	mov    (%rax),%rax
  22056e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  220575:	00 
  220576:	48 83 c0 01          	add    $0x1,%rax
  22057a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22057f:	0f 92 c0             	setb   %al
  220582:	a8 01                	test   $0x1,%al
  220584:	75 2d                	jne    2205b3 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xb3>
  220586:	eb 1f                	jmp    2205a7 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xa7>
        Bound::Unbounded => 0,
  220588:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  22058f:	00 00 
  220591:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    };
    let end = match generic_rage.end_bound() {
  220596:	e8 05 e2 ff ff       	callq  21e7a0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h0beee5ac9a35870cE>
  22059b:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  2205a0:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2205a5:	eb 26                	jmp    2205cd <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xcd>
  2205a7:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Bound::Excluded(&value) => value + 1,
  2205ac:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2205b1:	eb de                	jmp    220591 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x91>
  2205b3:	48 8d 3d 66 24 fe ff 	lea    -0x1db9a(%rip),%rdi        # 202a20 <str.3>
  2205ba:	48 8d 15 2f b6 01 00 	lea    0x1b62f(%rip),%rdx        # 23bbf0 <memcmp+0x2eb0>
  2205c1:	be 1c 00 00 00       	mov    $0x1c,%esi
  2205c6:	e8 25 56 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2205cb:	0f 0b                	ud2    
    let end = match generic_rage.end_bound() {
  2205cd:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2205d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2205d7:	48 85 c0             	test   %rax,%rax
  2205da:	74 13                	je     2205ef <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xef>
  2205dc:	eb 00                	jmp    2205de <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xde>
  2205de:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2205e3:	48 83 e8 01          	sub    $0x1,%rax
  2205e7:	74 28                	je     220611 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x111>
  2205e9:	eb 00                	jmp    2205eb <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xeb>
  2205eb:	eb 3b                	jmp    220628 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x128>
  2205ed:	0f 0b                	ud2    
        Bound::Excluded(&value) => value,
        Bound::Included(&value) => value + 1,
  2205ef:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2205f4:	48 8b 00             	mov    (%rax),%rax
  2205f7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2205fe:	00 
  2205ff:	48 83 c0 01          	add    $0x1,%rax
  220603:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  220608:	0f 92 c0             	setb   %al
  22060b:	a8 01                	test   $0x1,%al
  22060d:	75 55                	jne    220664 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x164>
  22060f:	eb 47                	jmp    220658 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x158>
        Bound::Excluded(&value) => value,
  220611:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  220616:	48 8b 00             	mov    (%rax),%rax
  220619:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  220620:	00 
  220621:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  220626:	eb 0a                	jmp    220632 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x132>
  220628:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Bound::Unbounded => bit_length,
  22062d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };

    start..end
  220632:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  220637:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22063c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  220641:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
}
  220646:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22064b:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  220650:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  220657:	c3                   	retq   
  220658:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        Bound::Included(&value) => value + 1,
  22065d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  220662:	eb ce                	jmp    220632 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x132>
  220664:	48 8d 3d b5 23 fe ff 	lea    -0x1dc4b(%rip),%rdi        # 202a20 <str.3>
  22066b:	48 8d 15 96 b5 01 00 	lea    0x1b596(%rip),%rdx        # 23bc08 <memcmp+0x2ec8>
  220672:	be 1c 00 00 00       	mov    $0x1c,%esi
  220677:	e8 74 55 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22067c:	0f 0b                	ud2    
  22067e:	cc                   	int3   
  22067f:	cc                   	int3   

0000000000220680 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17habc6910e9567a3dbE>:
    fn from(t: T) -> T {
  220680:	50                   	push   %rax
    }
  220681:	58                   	pop    %rax
  220682:	c3                   	retq   
  220683:	cc                   	int3   
  220684:	cc                   	int3   
  220685:	cc                   	int3   
  220686:	cc                   	int3   
  220687:	cc                   	int3   
  220688:	cc                   	int3   
  220689:	cc                   	int3   
  22068a:	cc                   	int3   
  22068b:	cc                   	int3   
  22068c:	cc                   	int3   
  22068d:	cc                   	int3   
  22068e:	cc                   	int3   
  22068f:	cc                   	int3   

0000000000220690 <_ZN4core9panicking13assert_failed17h3edc834fd7d50ce8E>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
  220690:	48 83 ec 58          	sub    $0x58,%rsp
  220694:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  220699:	48 89 d1             	mov    %rdx,%rcx
  22069c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2206a1:	40 88 f8             	mov    %dil,%al
  2206a4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2206a9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2206ae:	88 44 24 57          	mov    %al,0x57(%rsp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
  2206b2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  2206b6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2206bb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  2206bf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2206c4:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  2206c8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2206cd:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  2206d1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2206d6:	48 8b 0a             	mov    (%rdx),%rcx
  2206d9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  2206dd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2206e2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2206e7:	48 89 e1             	mov    %rsp,%rcx
  2206ea:	4c 89 01             	mov    %r8,(%rcx)
  2206ed:	0f b6 f8             	movzbl %al,%edi
  2206f0:	4c 8d 05 29 b5 01 00 	lea    0x1b529(%rip),%r8        # 23bc20 <memcmp+0x2ee0>
  2206f7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  2206fc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  220701:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  220706:	4c 89 c2             	mov    %r8,%rdx
  220709:	e8 f2 55 01 00       	callq  235d00 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  22070e:	0f 0b                	ud2    

0000000000220710 <_ZN4core9panicking13assert_failed17hf21d4688260afdf9E>:
pub fn assert_failed<T, U>(
  220710:	48 83 ec 58          	sub    $0x58,%rsp
  220714:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  220719:	48 89 d1             	mov    %rdx,%rcx
  22071c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  220721:	40 88 f8             	mov    %dil,%al
  220724:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  220729:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22072e:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  220732:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  220736:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22073b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  22073f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  220744:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  220748:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22074d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  220751:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  220756:	48 8b 0a             	mov    (%rdx),%rcx
  220759:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  22075d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  220762:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  220767:	48 89 e1             	mov    %rsp,%rcx
  22076a:	4c 89 01             	mov    %r8,(%rcx)
  22076d:	0f b6 f8             	movzbl %al,%edi
  220770:	4c 8d 05 c9 b4 01 00 	lea    0x1b4c9(%rip),%r8        # 23bc40 <memcmp+0x2f00>
  220777:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  22077c:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  220781:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  220786:	4c 89 c2             	mov    %r8,%rdx
  220789:	e8 72 55 01 00       	callq  235d00 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  22078e:	0f 0b                	ud2    

0000000000220790 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>:
pub fn assert_failed<T, U>(
  220790:	48 83 ec 58          	sub    $0x58,%rsp
  220794:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  220799:	48 89 d1             	mov    %rdx,%rcx
  22079c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2207a1:	40 88 f8             	mov    %dil,%al
  2207a4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2207a9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2207ae:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  2207b2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  2207b6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2207bb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  2207bf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2207c4:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  2207c8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2207cd:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  2207d1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2207d6:	48 8b 0a             	mov    (%rdx),%rcx
  2207d9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  2207dd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2207e2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2207e7:	48 89 e1             	mov    %rsp,%rcx
  2207ea:	4c 89 01             	mov    %r8,(%rcx)
  2207ed:	0f b6 f8             	movzbl %al,%edi
  2207f0:	4c 8d 05 69 b4 01 00 	lea    0x1b469(%rip),%r8        # 23bc60 <memcmp+0x2f20>
  2207f7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  2207fc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  220801:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  220806:	4c 89 c2             	mov    %r8,%rdx
  220809:	e8 f2 54 01 00       	callq  235d00 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  22080e:	0f 0b                	ud2    

0000000000220810 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>:
pub fn panic_display<T: fmt::Display>(x: &T) -> ! {
  220810:	48 83 ec 78          	sub    $0x78,%rsp
  220814:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  220819:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    panic_fmt(format_args!("{}", *x));
  22081e:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  220823:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  220828:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  22082d:	48 8b 35 24 d3 01 00 	mov    0x1d324(%rip),%rsi        # 23db58 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  220834:	e8 67 34 01 00       	callq  233ca0 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  220839:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22083e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  220843:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  220848:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22084d:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  220852:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  220857:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
  22085c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  220861:	48 8d 35 18 b4 01 00 	lea    0x1b418(%rip),%rsi        # 23bc80 <memcmp+0x2f40>
  220868:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22086e:	4c 89 c2             	mov    %r8,%rdx
  220871:	e8 ba 5c fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  220876:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22087b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  220880:	e8 3b 54 01 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  220885:	0f 0b                	ud2    
  220887:	cc                   	int3   
  220888:	cc                   	int3   
  220889:	cc                   	int3   
  22088a:	cc                   	int3   
  22088b:	cc                   	int3   
  22088c:	cc                   	int3   
  22088d:	cc                   	int3   
  22088e:	cc                   	int3   
  22088f:	cc                   	int3   

0000000000220890 <_ZN5alloc5alloc12alloc_zeroed17h36791df9e7ead9a4E>:
///     dealloc(ptr, layout);
/// }
/// ```
#[stable(feature = "global_alloc", since = "1.28.0")]
#[inline]
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
  220890:	48 83 ec 28          	sub    $0x28,%rsp
  220894:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  220899:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
  22089e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2208a3:	e8 e8 b7 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  2208a8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2208ad:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2208b2:	e8 e9 b7 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  2208b7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2208bc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2208c1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2208c6:	e8 85 ec 00 00       	callq  22f550 <__rust_alloc_zeroed>
  2208cb:	48 89 04 24          	mov    %rax,(%rsp)
  2208cf:	48 8b 04 24          	mov    (%rsp),%rax
}
  2208d3:	48 83 c4 28          	add    $0x28,%rsp
  2208d7:	c3                   	retq   
  2208d8:	cc                   	int3   
  2208d9:	cc                   	int3   
  2208da:	cc                   	int3   
  2208db:	cc                   	int3   
  2208dc:	cc                   	int3   
  2208dd:	cc                   	int3   
  2208de:	cc                   	int3   
  2208df:	cc                   	int3   

00000000002208e0 <_ZN5alloc5alloc5alloc17h7eb3f054a1687752E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
  2208e0:	48 83 ec 28          	sub    $0x28,%rsp
  2208e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2208e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { __rust_alloc(layout.size(), layout.align()) }
  2208ee:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2208f3:	e8 98 b7 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  2208f8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2208fd:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  220902:	e8 99 b7 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  220907:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22090c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  220911:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  220916:	e8 05 ec 00 00       	callq  22f520 <__rust_alloc>
  22091b:	48 89 04 24          	mov    %rax,(%rsp)
  22091f:	48 8b 04 24          	mov    (%rsp),%rax
}
  220923:	48 83 c4 28          	add    $0x28,%rsp
  220927:	c3                   	retq   
  220928:	cc                   	int3   
  220929:	cc                   	int3   
  22092a:	cc                   	int3   
  22092b:	cc                   	int3   
  22092c:	cc                   	int3   
  22092d:	cc                   	int3   
  22092e:	cc                   	int3   
  22092f:	cc                   	int3   

0000000000220930 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>:

#[cfg(not(test))]
impl Global {
    #[inline]
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
  220930:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  220937:	88 c8                	mov    %cl,%al
  220939:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  22093d:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  220942:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  220947:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  22094c:	24 01                	and    $0x1,%al
  22094e:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
        match layout.size() {
  220955:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22095a:	e8 31 b7 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  22095f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  220964:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  220969:	48 83 f8 00          	cmp    $0x0,%rax
  22096d:	75 14                	jne    220983 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x53>
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
  22096f:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  220974:	e8 e7 b8 ff ff       	callq  21c260 <_ZN4core5alloc6layout6Layout8dangling17he0ad074fb5415605E>
  220979:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22097e:	e9 ec 00 00 00       	jmpq   220a6f <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x13f>
  220983:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  220987:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
            // SAFETY: `layout` is non-zero in size,
            size => unsafe {
  22098c:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  220993:	00 
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
  220994:	a8 01                	test   $0x1,%al
  220996:	75 16                	jne    2209ae <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x7e>
  220998:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  22099d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2209a2:	e8 39 ff ff ff       	callq  2208e0 <_ZN5alloc5alloc5alloc17h7eb3f054a1687752E>
  2209a7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2209ac:	eb 27                	jmp    2209d5 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xa5>
  2209ae:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  2209b3:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2209b8:	e8 d3 fe ff ff       	callq  220890 <_ZN5alloc5alloc12alloc_zeroed17h36791df9e7ead9a4E>
  2209bd:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2209c2:	eb 00                	jmp    2209c4 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x94>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  2209c4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2209c9:	e8 42 0d 01 00       	callq  231710 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  2209ce:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2209d3:	eb 02                	jmp    2209d7 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xa7>
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
  2209d5:	eb ed                	jmp    2209c4 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x94>
  2209d7:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  2209dc:	e8 3f 02 ff ff       	callq  210c20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>
  2209e1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2209e6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2209eb:	e8 30 b0 fe ff       	callq  20ba20 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>
  2209f0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2209f5:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2209fa:	48 85 c0             	test   %rax,%rax
  2209fd:	0f 94 c0             	sete   %al
  220a00:	0f b6 c0             	movzbl %al,%eax
  220a03:	75 06                	jne    220a0b <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xdb>
  220a05:	eb 00                	jmp    220a07 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xd7>
  220a07:	eb 2d                	jmp    220a36 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x106>
  220a09:	0f 0b                	ud2    
  220a0b:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  220a10:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  220a15:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  220a1c:	00 
  220a1d:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  220a24:	00 
                Ok(NonNull::slice_from_raw_parts(ptr, size))
  220a25:	e8 c6 9c 00 00       	callq  22a6f0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  220a2a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  220a2f:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  220a34:	eb 23                	jmp    220a59 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x129>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  220a36:	e8 35 a2 fe ff       	callq  20ac70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  220a3b:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  220a40:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
            },
        }
    }
  220a45:	eb 00                	jmp    220a47 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x117>
  220a47:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  220a4c:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  220a51:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  220a58:	c3                   	retq   
  220a59:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  220a5e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
                Ok(NonNull::slice_from_raw_parts(ptr, size))
  220a63:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  220a68:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  220a6d:	eb d8                	jmp    220a47 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x117>
  220a6f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
  220a74:	31 c0                	xor    %eax,%eax
  220a76:	89 c6                	mov    %eax,%esi
  220a78:	e8 73 9c 00 00       	callq  22a6f0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  220a7d:	48 89 04 24          	mov    %rax,(%rsp)
  220a81:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  220a86:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  220a8b:	48 8b 0c 24          	mov    (%rsp),%rcx
  220a8f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  220a94:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  220a99:	eb d2                	jmp    220a6d <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x13d>
  220a9b:	cc                   	int3   
  220a9c:	cc                   	int3   
  220a9d:	cc                   	int3   
  220a9e:	cc                   	int3   
  220a9f:	cc                   	int3   

0000000000220aa0 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E>:

    // SAFETY: Same as `Allocator::grow`
    #[inline]
    unsafe fn grow_impl(
  220aa0:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  220aa7:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  220aae:	00 
  220aaf:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  220ab6:	00 
  220ab7:	8a 84 24 d0 01 00 00 	mov    0x1d0(%rsp),%al
  220abe:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  220ac5:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  220acc:	00 
  220acd:	48 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%rsp)
  220ad4:	00 
  220ad5:	4c 89 84 24 c8 00 00 	mov    %r8,0xc8(%rsp)
  220adc:	00 
  220add:	4c 89 8c 24 d0 00 00 	mov    %r9,0xd0(%rsp)
  220ae4:	00 
  220ae5:	48 89 bc 24 08 01 00 	mov    %rdi,0x108(%rsp)
  220aec:	00 
  220aed:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  220af4:	00 
  220af5:	24 01                	and    $0x1,%al
  220af7:	88 84 24 1f 01 00 00 	mov    %al,0x11f(%rsp)
        debug_assert!(
            new_layout.size() >= old_layout.size(),
            "`new_layout.size()` must be greater than or equal to `old_layout.size()`"
        );

        match old_layout.size() {
  220afe:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  220b05:	00 
  220b06:	e8 85 b5 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220b0b:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  220b12:	00 
  220b13:	48 83 bc 24 e8 00 00 	cmpq   $0x0,0xe8(%rsp)
  220b1a:	00 00 
  220b1c:	75 3f                	jne    220b5d <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0xbd>
  220b1e:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  220b25:	00 
  220b26:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
            0 => self.alloc_impl(new_layout, zeroed),
  220b2d:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  220b34:	00 
  220b35:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  220b3c:	00 
  220b3d:	0f b6 c8             	movzbl %al,%ecx
  220b40:	83 e1 01             	and    $0x1,%ecx
  220b43:	e8 e8 fd ff ff       	callq  220930 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  220b48:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  220b4f:	00 
  220b50:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  220b57:	00 
  220b58:	e9 88 03 00 00       	jmpq   220ee5 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x445>

            // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`
            // as required by safety conditions. Other conditions must be upheld by the caller
            old_size if old_layout.align() == new_layout.align() => unsafe {
  220b5d:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  220b64:	00 
  220b65:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  220b6c:	00 
  220b6d:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  220b74:	00 
  220b75:	e8 26 b5 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  220b7a:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  220b81:	00 
  220b82:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  220b89:	00 
  220b8a:	e8 11 b5 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  220b8f:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  220b96:	00 
  220b97:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  220b9e:	00 
  220b9f:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  220ba6:	00 
  220ba7:	48 39 c8             	cmp    %rcx,%rax
  220baa:	74 54                	je     220c00 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x160>
  220bac:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  220bb3:	00 
  220bb4:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
            // SAFETY: because `new_layout.size()` must be greater than or equal to `old_size`,
            // both the old and new memory allocation are valid for reads and writes for `old_size`
            // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap
            // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract
            // for `dealloc` must be upheld by the caller.
            old_size => unsafe {
  220bbb:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  220bc2:	00 
  220bc3:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  220bc8:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  220bcf:	00 
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  220bd0:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  220bd7:	00 
  220bd8:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  220bdf:	00 
  220be0:	0f b6 c8             	movzbl %al,%ecx
  220be3:	83 e1 01             	and    $0x1,%ecx
  220be6:	e8 45 fd ff ff       	callq  220930 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  220beb:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  220bf2:	00 
  220bf3:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  220bfa:	00 
  220bfb:	e9 bb 01 00 00       	jmpq   220dbb <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x31b>
            old_size if old_layout.align() == new_layout.align() => unsafe {
  220c00:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  220c07:	00 
  220c08:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  220c0d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  220c14:	00 
                let new_size = new_layout.size();
  220c15:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  220c1c:	00 
  220c1d:	e8 6e b4 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220c22:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  220c27:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  220c2e:	00 
                intrinsics::assume(new_size >= old_layout.size());
  220c2f:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  220c36:	00 
  220c37:	e8 54 b4 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220c3c:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  220c43:	00 
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
  220c44:	e8 07 28 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  220c49:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  220c4e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  220c53:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  220c58:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  220c5f:	00 
  220c60:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
  220c67:	00 
  220c68:	e8 d3 02 00 00       	callq  220f40 <_ZN5alloc5alloc7realloc17hc1e628514810d65aE>
  220c6d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  220c72:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  220c79:	00 
  220c7a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  220c7f:	e8 8c 0a 01 00       	callq  231710 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  220c84:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  220c89:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  220c8e:	e8 8d ff fe ff       	callq  210c20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>
  220c93:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  220c98:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  220c9d:	e8 7e ad fe ff       	callq  20ba20 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>
  220ca2:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  220ca9:	00 
  220caa:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  220cb1:	00 
  220cb2:	48 85 c0             	test   %rax,%rax
  220cb5:	0f 94 c0             	sete   %al
  220cb8:	0f b6 c0             	movzbl %al,%eax
  220cbb:	75 06                	jne    220cc3 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x223>
  220cbd:	eb 00                	jmp    220cbf <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x21f>
  220cbf:	eb 2c                	jmp    220ced <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x24d>
  220cc1:	0f 0b                	ud2    
  220cc3:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
  220cca:	48 8b 8c 24 f0 00 00 	mov    0xf0(%rsp),%rcx
  220cd1:	00 
  220cd2:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  220cd7:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  220cde:	00 
  220cdf:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
  220ce6:	00 
                if zeroed {
  220ce7:	a8 01                	test   $0x1,%al
  220ce9:	75 39                	jne    220d24 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x284>
  220ceb:	eb 1c                	jmp    220d09 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x269>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  220ced:	e8 7e 9f fe ff       	callq  20ac70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  220cf2:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  220cf9:	00 
  220cfa:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  220d01:	00 
  220d02:	eb 00                	jmp    220d04 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x264>
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
                self.deallocate(ptr, old_layout);
                Ok(new_ptr)
            },
        }
    }
  220d04:	e9 58 01 00 00       	jmpq   220e61 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3c1>
  220d09:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  220d0e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
  220d13:	e8 d8 99 00 00       	callq  22a6f0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  220d18:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  220d1d:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  220d22:	eb 78                	jmp    220d9c <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x2fc>
  220d24:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  220d29:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  220d2e:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  220d35:	00 
  220d36:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  220d3d:	00 
  220d3e:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  220d45:	00 
  220d46:	48 89 8c 24 b8 01 00 	mov    %rcx,0x1b8(%rsp)
  220d4d:	00 
        unsafe { intrinsics::offset(self, count) as *mut T }
  220d4e:	48 01 c8             	add    %rcx,%rax
  220d51:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  220d58:	00 
  220d59:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  220d60:	00 
  220d61:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  220d66:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  220d6b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  220d70:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
  220d75:	48 29 c2             	sub    %rax,%rdx
  220d78:	48 89 bc 24 88 01 00 	mov    %rdi,0x188(%rsp)
  220d7f:	00 
  220d80:	c6 84 24 97 01 00 00 	movb   $0x0,0x197(%rsp)
  220d87:	00 
  220d88:	48 89 94 24 98 01 00 	mov    %rdx,0x198(%rsp)
  220d8f:	00 
        unsafe { write_bytes(self, val, count) }
  220d90:	31 f6                	xor    %esi,%esi
  220d92:	e8 49 9f 00 00       	callq  22ace0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>
                if zeroed {
  220d97:	e9 6d ff ff ff       	jmpq   220d09 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x269>
  220d9c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  220da1:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
  220da6:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  220dad:	00 
  220dae:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  220db5:	00 
    }
  220db6:	e9 a6 00 00 00       	jmpq   220e61 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3c1>
  220dbb:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  220dc2:	00 
  220dc3:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  220dca:	00 
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  220dcb:	e8 e0 a9 fe ff       	callq  20b7b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E>
  220dd0:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  220dd7:	00 
  220dd8:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  220ddf:	00 
  220de0:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  220de7:	00 
  220de8:	48 85 c0             	test   %rax,%rax
  220deb:	0f 94 c0             	sete   %al
  220dee:	0f b6 c0             	movzbl %al,%eax
  220df1:	75 06                	jne    220df9 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x359>
  220df3:	eb 00                	jmp    220df5 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x355>
  220df5:	eb 50                	jmp    220e47 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3a7>
  220df7:	0f 0b                	ud2    
  220df9:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  220e00:	00 
  220e01:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  220e08:	00 
  220e09:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  220e0e:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  220e15:	00 
  220e16:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  220e1b:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  220e22:	00 
  220e23:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  220e2a:	00 
  220e2b:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  220e32:	00 
  220e33:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  220e3a:	00 
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
  220e3b:	e8 10 26 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  220e40:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  220e45:	eb 32                	jmp    220e79 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3d9>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  220e47:	e8 24 9e fe ff       	callq  20ac70 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  220e4c:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  220e53:	00 
  220e54:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  220e5b:	00 
  220e5c:	e9 a3 fe ff ff       	jmpq   220d04 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x264>
    }
  220e61:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  220e68:	00 
  220e69:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  220e70:	00 
  220e71:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  220e78:	c3                   	retq   
  220e79:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  220e7e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
  220e83:	e8 d8 97 00 00       	callq  22a660 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h23db806e8169f4dcE>
  220e88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  220e8d:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  220e92:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  220e97:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  220e9c:	e8 6f 9e 00 00       	callq  22ad10 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
  220ea1:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  220ea8:	00 
  220ea9:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  220eb0:	00 
                self.deallocate(ptr, old_layout);
  220eb1:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  220eb8:	00 
  220eb9:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  220ec0:	00 
  220ec1:	e8 ea 00 00 00       	callq  220fb0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  220ec6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  220ecb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
                Ok(new_ptr)
  220ed0:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  220ed7:	00 
  220ed8:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  220edf:	00 
            },
  220ee0:	e9 d1 fe ff ff       	jmpq   220db6 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x316>
            0 => self.alloc_impl(new_layout, zeroed),
  220ee5:	e9 cc fe ff ff       	jmpq   220db6 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x316>
  220eea:	cc                   	int3   
  220eeb:	cc                   	int3   
  220eec:	cc                   	int3   
  220eed:	cc                   	int3   
  220eee:	cc                   	int3   
  220eef:	cc                   	int3   

0000000000220ef0 <_ZN5alloc5alloc7dealloc17hb22ba6544648527fE>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
  220ef0:	48 83 ec 38          	sub    $0x38,%rsp
  220ef4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  220ef9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  220efe:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  220f03:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
  220f08:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  220f0d:	e8 7e b1 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220f12:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  220f17:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  220f1c:	e8 7f b1 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  220f21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  220f26:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  220f2b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  220f30:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  220f35:	e8 f6 e5 00 00       	callq  22f530 <__rust_dealloc>
}
  220f3a:	48 83 c4 38          	add    $0x38,%rsp
  220f3e:	c3                   	retq   
  220f3f:	cc                   	int3   

0000000000220f40 <_ZN5alloc5alloc7realloc17hc1e628514810d65aE>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  220f40:	48 83 ec 48          	sub    $0x48,%rsp
  220f44:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  220f49:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  220f4e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  220f53:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  220f58:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  220f5d:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
  220f62:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  220f67:	e8 24 b1 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220f6c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  220f71:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  220f76:	e8 25 b1 ff ff       	callq  21c0a0 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  220f7b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  220f80:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  220f85:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  220f8a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  220f8f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  220f94:	e8 a7 e5 00 00       	callq  22f540 <__rust_realloc>
  220f99:	48 89 04 24          	mov    %rax,(%rsp)
  220f9d:	48 8b 04 24          	mov    (%rsp),%rax
}
  220fa1:	48 83 c4 48          	add    $0x48,%rsp
  220fa5:	c3                   	retq   
  220fa6:	cc                   	int3   
  220fa7:	cc                   	int3   
  220fa8:	cc                   	int3   
  220fa9:	cc                   	int3   
  220faa:	cc                   	int3   
  220fab:	cc                   	int3   
  220fac:	cc                   	int3   
  220fad:	cc                   	int3   
  220fae:	cc                   	int3   
  220faf:	cc                   	int3   

0000000000220fb0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
        self.alloc_impl(layout, true)
    }

    #[inline]
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
  220fb0:	48 83 ec 38          	sub    $0x38,%rsp
  220fb4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  220fb9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  220fbe:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  220fc3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  220fc8:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        if layout.size() != 0 {
  220fcd:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  220fd2:	e8 b9 b0 ff ff       	callq  21c090 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  220fd7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  220fdc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  220fe1:	48 83 f8 00          	cmp    $0x0,%rax
  220fe5:	75 02                	jne    220fe9 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x39>
  220fe7:	eb 23                	jmp    22100c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x5c>
  220fe9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            // SAFETY: `layout` is non-zero in size,
            // other conditions must be upheld by the caller
            unsafe { dealloc(ptr.as_ptr(), layout) }
  220fee:	e8 5d 24 01 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  220ff3:	48 89 04 24          	mov    %rax,(%rsp)
  220ff7:	48 8b 3c 24          	mov    (%rsp),%rdi
  220ffb:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  221000:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  221005:	e8 e6 fe ff ff       	callq  220ef0 <_ZN5alloc5alloc7dealloc17hb22ba6544648527fE>
        if layout.size() != 0 {
  22100a:	eb 00                	jmp    22100c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x5c>
        }
    }
  22100c:	48 83 c4 38          	add    $0x38,%rsp
  221010:	c3                   	retq   
  221011:	cc                   	int3   
  221012:	cc                   	int3   
  221013:	cc                   	int3   
  221014:	cc                   	int3   
  221015:	cc                   	int3   
  221016:	cc                   	int3   
  221017:	cc                   	int3   
  221018:	cc                   	int3   
  221019:	cc                   	int3   
  22101a:	cc                   	int3   
  22101b:	cc                   	int3   
  22101c:	cc                   	int3   
  22101d:	cc                   	int3   
  22101e:	cc                   	int3   
  22101f:	cc                   	int3   

0000000000221020 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf6a7d38fd3e79973E>:

    #[inline]
    unsafe fn grow(
  221020:	48 83 ec 48          	sub    $0x48,%rsp
  221024:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  221029:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22102e:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  221033:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  221038:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  22103d:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
        ptr: NonNull<u8>,
        old_layout: Layout,
        new_layout: Layout,
    ) -> Result<NonNull<[u8]>, AllocError> {
        // SAFETY: all conditions must be upheld by the caller
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
  221042:	31 c0                	xor    %eax,%eax
  221044:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  22104b:	e8 50 fa ff ff       	callq  220aa0 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E>
  221050:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  221055:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22105a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22105f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  221064:	48 83 c4 48          	add    $0x48,%rsp
  221068:	c3                   	retq   
  221069:	cc                   	int3   
  22106a:	cc                   	int3   
  22106b:	cc                   	int3   
  22106c:	cc                   	int3   
  22106d:	cc                   	int3   
  22106e:	cc                   	int3   
  22106f:	cc                   	int3   

0000000000221070 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h02f8801b0183b761E>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
  221070:	48 83 ec 28          	sub    $0x28,%rsp
  221074:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  221079:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22107e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.alloc_impl(layout, false)
  221083:	31 c9                	xor    %ecx,%ecx
  221085:	e8 a6 f8 ff ff       	callq  220930 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  22108a:	48 89 04 24          	mov    %rax,(%rsp)
  22108e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  221093:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  221098:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22109c:	48 83 c4 28          	add    $0x28,%rsp
  2210a0:	c3                   	retq   
  2210a1:	cc                   	int3   
  2210a2:	cc                   	int3   
  2210a3:	cc                   	int3   
  2210a4:	cc                   	int3   
  2210a5:	cc                   	int3   
  2210a6:	cc                   	int3   
  2210a7:	cc                   	int3   
  2210a8:	cc                   	int3   
  2210a9:	cc                   	int3   
  2210aa:	cc                   	int3   
  2210ab:	cc                   	int3   
  2210ac:	cc                   	int3   
  2210ad:	cc                   	int3   
  2210ae:	cc                   	int3   
  2210af:	cc                   	int3   

00000000002210b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
  2210b0:	48 83 ec 38          	sub    $0x38,%rsp
  2210b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2210b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2210be:	88 d0                	mov    %dl,%al
  2210c0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2210c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2210c9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2210ce:	24 01                	and    $0x1,%al
  2210d0:	88 44 24 37          	mov    %al,0x37(%rsp)
                assert!(bit < Self::BIT_LENGTH);
  2210d4:	48 83 fe 10          	cmp    $0x10,%rsi
  2210d8:	0f 92 c0             	setb   %al
  2210db:	34 ff                	xor    $0xff,%al
  2210dd:	a8 01                	test   $0x1,%al
  2210df:	75 0a                	jne    2210eb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x3b>
  2210e1:	8a 44 24 1f          	mov    0x1f(%rsp),%al
                if value {
  2210e5:	a8 01                	test   $0x1,%al
  2210e7:	75 45                	jne    22112e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x7e>
  2210e9:	eb 1a                	jmp    221105 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x55>
                assert!(bit < Self::BIT_LENGTH);
  2210eb:	48 8d 3d 4a 19 fe ff 	lea    -0x1e6b6(%rip),%rdi        # 202a3c <str.3+0x1c>
  2210f2:	48 8d 15 97 ab 01 00 	lea    0x1ab97(%rip),%rdx        # 23bc90 <memcmp+0x2f50>
  2210f9:	be 28 00 00 00       	mov    $0x28,%esi
  2210fe:	e8 ed 4a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  221103:	0f 0b                	ud2    
  221105:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self &= !(1 << bit);
  22110a:	48 89 c8             	mov    %rcx,%rax
  22110d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  221111:	48 83 f8 00          	cmp    $0x0,%rax
  221115:	0f 95 c0             	setne  %al
  221118:	66 83 e1 0f          	and    $0xf,%cx
  22111c:	66 ba 01 00          	mov    $0x1,%dx
  221120:	66 d3 e2             	shl    %cl,%dx
  221123:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
  221128:	a8 01                	test   $0x1,%al
  22112a:	75 75                	jne    2211a1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xf1>
  22112c:	eb 5d                	jmp    22118b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xdb>
  22112e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
  221133:	48 89 c8             	mov    %rcx,%rax
  221136:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  22113a:	48 83 f8 00          	cmp    $0x0,%rax
  22113e:	0f 95 c0             	setne  %al
  221141:	66 83 e1 0f          	and    $0xf,%cx
  221145:	66 ba 01 00          	mov    $0x1,%dx
  221149:	66 d3 e2             	shl    %cl,%dx
  22114c:	66 89 54 24 04       	mov    %dx,0x4(%rsp)
  221151:	a8 01                	test   $0x1,%al
  221153:	75 12                	jne    221167 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xb7>
  221155:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22115a:	66 8b 4c 24 04       	mov    0x4(%rsp),%cx
  22115f:	66 0b 08             	or     (%rax),%cx
  221162:	66 89 08             	mov    %cx,(%rax)
                if value {
  221165:	eb 1a                	jmp    221181 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xd1>
                    *self |= 1 << bit;
  221167:	48 8d 3d 52 19 fe ff 	lea    -0x1e6ae(%rip),%rdi        # 202ac0 <str.0>
  22116e:	48 8d 15 1b ab 01 00 	lea    0x1ab1b(%rip),%rdx        # 23bc90 <memcmp+0x2f50>
  221175:	be 23 00 00 00       	mov    $0x23,%esi
  22117a:	e8 71 4a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22117f:	0f 0b                	ud2    
  221181:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            }
  221186:	48 83 c4 38          	add    $0x38,%rsp
  22118a:	c3                   	retq   
  22118b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  221190:	66 8b 4c 24 06       	mov    0x6(%rsp),%cx
                    *self &= !(1 << bit);
  221195:	66 83 f1 ff          	xor    $0xffff,%cx
  221199:	66 23 08             	and    (%rax),%cx
  22119c:	66 89 08             	mov    %cx,(%rax)
                if value {
  22119f:	eb e0                	jmp    221181 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xd1>
                    *self &= !(1 << bit);
  2211a1:	48 8d 3d 18 19 fe ff 	lea    -0x1e6e8(%rip),%rdi        # 202ac0 <str.0>
  2211a8:	48 8d 15 e1 aa 01 00 	lea    0x1aae1(%rip),%rdx        # 23bc90 <memcmp+0x2f50>
  2211af:	be 23 00 00 00       	mov    $0x23,%esi
  2211b4:	e8 37 4a 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2211b9:	0f 0b                	ud2    
  2211bb:	cc                   	int3   
  2211bc:	cc                   	int3   
  2211bd:	cc                   	int3   
  2211be:	cc                   	int3   
  2211bf:	cc                   	int3   

00000000002211c0 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E>:
    pub fn new() -> StackAllocator {
  2211c0:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  2211c7:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  2211cc:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
        let stack_size_bytes = MAX_STACKS * STACK_SIZE;
  2211d1:	48 8b 05 b8 f5 fd ff 	mov    -0x20a48(%rip),%rax        # 200790 <str.0+0x170>
  2211d8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2211df:	00 
        log::info!("Allocating {}bytes for stack.", stack_size_bytes);
  2211e0:	48 c7 84 24 88 00 00 	movq   $0x3,0x88(%rsp)
  2211e7:	00 03 00 00 00 
  2211ec:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2211f3:	00 
  2211f4:	48 8d 35 fd f0 fd ff 	lea    -0x20f03(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2211fb:	e8 d0 1d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221200:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  221204:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  221208:	a8 01                	test   $0x1,%al
  22120a:	75 0c                	jne    221218 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x58>
  22120c:	eb 00                	jmp    22120e <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x4e>
  22120e:	c6 84 24 97 00 00 00 	movb   $0x0,0x97(%rsp)
  221215:	00 
  221216:	eb 5a                	jmp    221272 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0xb2>
  221218:	c6 84 24 6f 02 00 00 	movb   $0x0,0x26f(%rsp)
  22121f:	00 
  221220:	48 8b 3d 21 c9 01 00 	mov    0x1c921(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  221227:	0f b6 b4 24 6f 02 00 	movzbl 0x26f(%rsp),%esi
  22122e:	00 
  22122f:	e8 bc 9f 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  221234:	48 89 84 24 70 02 00 	mov    %rax,0x270(%rsp)
  22123b:	00 
  22123c:	48 8b 84 24 70 02 00 	mov    0x270(%rsp),%rax
  221243:	00 
  221244:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22124b:	00 
  22124c:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  221253:	00 
  221254:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  22125b:	00 
  22125c:	e8 6f 1d ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221261:	88 44 24 67          	mov    %al,0x67(%rsp)
  221265:	8a 44 24 67          	mov    0x67(%rsp),%al
  221269:	24 01                	and    $0x1,%al
  22126b:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  221272:	f6 84 24 97 00 00 00 	testb  $0x1,0x97(%rsp)
  221279:	01 
  22127a:	75 21                	jne    22129d <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0xdd>
        let start_addr = VirtualAddress::from_u64(STACK_ALLOCATOR_START_ADDR);
  22127c:	48 bf 00 00 00 00 ff 	movabs $0x5fff00000000,%rdi
  221283:	5f 00 00 
  221286:	e8 45 70 00 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  22128b:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  221290:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  221297:	00 
  221298:	e9 98 00 00 00       	jmpq   221335 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x175>
        log::info!("Allocating {}bytes for stack.", stack_size_bytes);
  22129d:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  2212a4:	00 
  2212a5:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2212ac:	00 
  2212ad:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  2212b4:	00 
  2212b5:	48 89 bc 24 28 02 00 	mov    %rdi,0x228(%rsp)
  2212bc:	00 
  2212bd:	48 8b 35 9c c8 01 00 	mov    0x1c89c(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2212c4:	e8 b7 e2 fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  2212c9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2212ce:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2212d3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2212d8:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  2212dd:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  2212e4:	00 
  2212e5:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2212ec:	00 
  2212ed:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  2212f4:	00 
  2212f5:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2212fc:	00 
  2212fd:	48 8d 35 a4 a9 01 00 	lea    0x1a9a4(%rip),%rsi        # 23bca8 <memcmp+0x2f68>
  221304:	ba 02 00 00 00       	mov    $0x2,%edx
  221309:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22130f:	e8 1c 52 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  221314:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  22131b:	00 
  22131c:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  221323:	00 
  221324:	48 8d 15 9d a9 01 00 	lea    0x1a99d(%rip),%rdx        # 23bcc8 <memcmp+0x2f88>
  22132b:	e8 50 1a 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  221330:	e9 47 ff ff ff       	jmpq   22127c <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0xbc>
            stack_size_bytes / PageSize::Page2MiB.size() as usize,
  221335:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22133c:	00 
  22133d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  221342:	48 8d 3d c8 17 fe ff 	lea    -0x1e838(%rip),%rdi        # 202b11 <str.0+0x51>
  221349:	e8 12 b4 fe ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  22134e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  221353:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  221358:	48 83 f8 00          	cmp    $0x0,%rax
  22135c:	0f 94 c0             	sete   %al
  22135f:	a8 01                	test   $0x1,%al
  221361:	75 36                	jne    221399 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x1d9>
  221363:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  221368:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  22136d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  221372:	31 d2                	xor    %edx,%edx
  221374:	48 f7 f1             	div    %rcx
  221377:	48 89 c2             	mov    %rax,%rdx
            PageSize::Page2MiB,
  22137a:	c6 84 24 07 01 00 00 	movb   $0x1,0x107(%rsp)
  221381:	01 
        let page_range = PageRange::new(
  221382:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  221389:	00 
  22138a:	0f b6 8c 24 07 01 00 	movzbl 0x107(%rsp),%ecx
  221391:	00 
  221392:	e8 19 cb fe ff       	callq  20deb0 <_ZN9r3_kernel2mm6paging9PageRange3new17h47b633cb9e347323E>
  221397:	eb 1a                	jmp    2213b3 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x1f3>
            stack_size_bytes / PageSize::Page2MiB.size() as usize,
  221399:	48 8d 3d 80 17 fe ff 	lea    -0x1e880(%rip),%rdi        # 202b20 <str.0>
  2213a0:	48 8d 15 59 a9 01 00 	lea    0x1a959(%rip),%rdx        # 23bd00 <memcmp+0x2fc0>
  2213a7:	be 19 00 00 00       	mov    $0x19,%esi
  2213ac:	e8 3f 48 01 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2213b1:	0f 0b                	ud2    
            page_range,
  2213b3:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  2213ba:	00 
  2213bb:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2213c2:	00 
  2213c3:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  2213ca:	00 
  2213cb:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2213d2:	00 
  2213d3:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  2213da:	00 
  2213db:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2213e2:	00 
            PageEntryFlags::kernel_hugepage_flags(),
  2213e3:	e8 c8 b4 fe ff       	callq  20c8b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags21kernel_hugepage_flags17he0b9fa3eb36123b3E>
  2213e8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2213ed:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
        let result = KernelVirtualMemoryManager::alloc_huge_page_region(
  2213f2:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  2213f9:	00 
  2213fa:	48 8d b4 24 30 01 00 	lea    0x130(%rsp),%rsi
  221401:	00 
  221402:	e8 79 ce fe ff       	callq  20e280 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E>
        if result.is_err() {
  221407:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  22140e:	00 
  22140f:	e8 8c 9f fe ff       	callq  20b3a0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf7814dd879df2886E>
  221414:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  221418:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  22141c:	a8 01                	test   $0x1,%al
  22141e:	75 2b                	jne    22144b <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x28b>
  221420:	eb 00                	jmp    221422 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x262>
        log::info!(
  221422:	48 c7 84 24 c8 01 00 	movq   $0x3,0x1c8(%rsp)
  221429:	00 03 00 00 00 
  22142e:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  221435:	00 
  221436:	48 8d 35 bb ee fd ff 	lea    -0x21145(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22143d:	e8 8e 1b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221442:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  221446:	e9 1f 01 00 00       	jmpq   22156a <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x3aa>
            panic!("Failed to allocate stack memory, {:?}", result.unwrap_err());
  22144b:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  221452:	00 
  221453:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22145a:	00 
  22145b:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  221462:	00 
  221463:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22146a:	00 
  22146b:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  221472:	00 
  221473:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  22147a:	00 
  22147b:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  221482:	00 
  221483:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  22148a:	00 
  22148b:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  221492:	00 
  221493:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22149a:	00 
  22149b:	48 8d 35 86 a8 01 00 	lea    0x1a886(%rip),%rsi        # 23bd28 <memcmp+0x2fe8>
  2214a2:	48 8d bc 24 a0 01 00 	lea    0x1a0(%rsp),%rdi
  2214a9:	00 
  2214aa:	e8 a1 9a fe ff       	callq  20af50 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E>
  2214af:	48 89 94 24 40 02 00 	mov    %rdx,0x240(%rsp)
  2214b6:	00 
  2214b7:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  2214be:	00 
  2214bf:	48 8b 84 24 38 02 00 	mov    0x238(%rsp),%rax
  2214c6:	00 
  2214c7:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  2214ce:	00 
  2214cf:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  2214d6:	00 
  2214d7:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  2214de:	00 
  2214df:	48 8d 84 24 90 01 00 	lea    0x190(%rsp),%rax
  2214e6:	00 
  2214e7:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  2214ee:	00 
  2214ef:	48 8b bc 24 88 01 00 	mov    0x188(%rsp),%rdi
  2214f6:	00 
  2214f7:	48 89 bc 24 48 02 00 	mov    %rdi,0x248(%rsp)
  2214fe:	00 
  2214ff:	48 8d 35 5a d1 fe ff 	lea    -0x12ea6(%rip),%rsi        # 20e660 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>
  221506:	e8 75 dd fe ff       	callq  20f280 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>
  22150b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  221510:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  221515:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22151a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22151f:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  221526:	00 
  221527:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22152e:	00 
  22152f:	48 8d 8c 24 78 01 00 	lea    0x178(%rsp),%rcx
  221536:	00 
  221537:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  22153e:	00 
  22153f:	48 8d 35 d2 a7 01 00 	lea    0x1a7d2(%rip),%rsi        # 23bd18 <memcmp+0x2fd8>
  221546:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22154c:	4c 89 c2             	mov    %r8,%rdx
  22154f:	e8 dc 4f fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  221554:	48 8d 35 e5 a7 01 00 	lea    0x1a7e5(%rip),%rsi        # 23bd40 <memcmp+0x3000>
  22155b:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  221562:	00 
  221563:	e8 58 47 01 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  221568:	0f 0b                	ud2    
  22156a:	8a 44 24 2e          	mov    0x2e(%rsp),%al
        log::info!(
  22156e:	a8 01                	test   $0x1,%al
  221570:	75 0c                	jne    22157e <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x3be>
  221572:	eb 00                	jmp    221574 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x3b4>
  221574:	c6 84 24 d7 01 00 00 	movb   $0x0,0x1d7(%rsp)
  22157b:	00 
  22157c:	eb 5a                	jmp    2215d8 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x418>
  22157e:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  221585:	00 
  221586:	48 8b 3d bb c5 01 00 	mov    0x1c5bb(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22158d:	0f b6 b4 24 5f 02 00 	movzbl 0x25f(%rsp),%esi
  221594:	00 
  221595:	e8 56 9c 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22159a:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  2215a1:	00 
  2215a2:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  2215a9:	00 
  2215aa:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  2215b1:	00 
  2215b2:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  2215b9:	00 
  2215ba:	48 8d b4 24 d8 01 00 	lea    0x1d8(%rsp),%rsi
  2215c1:	00 
  2215c2:	e8 09 1a ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2215c7:	88 44 24 17          	mov    %al,0x17(%rsp)
  2215cb:	8a 44 24 17          	mov    0x17(%rsp),%al
  2215cf:	24 01                	and    $0x1,%al
  2215d1:	88 84 24 d7 01 00 00 	mov    %al,0x1d7(%rsp)
  2215d8:	f6 84 24 d7 01 00 00 	testb  $0x1,0x1d7(%rsp)
  2215df:	01 
  2215e0:	75 32                	jne    221614 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x454>
  2215e2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2215e7:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2215ec:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
        StackAllocator {
  2215f1:	48 89 11             	mov    %rdx,(%rcx)
  2215f4:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  2215fb:	00 
  2215fc:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  221603:	00 
  221604:	48 c7 41 18 00 04 00 	movq   $0x400,0x18(%rcx)
  22160b:	00 
    }
  22160c:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
  221613:	c3                   	retq   
        log::info!(
  221614:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  22161b:	00 
  22161c:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  221623:	00 
  221624:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  22162b:	00 
  22162c:	48 89 bc 24 50 02 00 	mov    %rdi,0x250(%rsp)
  221633:	00 
  221634:	48 8b 35 25 c5 01 00 	mov    0x1c525(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22163b:	e8 40 df fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  221640:	48 89 04 24          	mov    %rax,(%rsp)
  221644:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  221649:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22164e:	48 8b 0c 24          	mov    (%rsp),%rcx
  221652:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  221659:	00 
  22165a:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  221661:	00 
  221662:	48 8d 8c 24 10 02 00 	lea    0x210(%rsp),%rcx
  221669:	00 
  22166a:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  221671:	00 
  221672:	48 8d 35 df a6 01 00 	lea    0x1a6df(%rip),%rsi        # 23bd58 <memcmp+0x3018>
  221679:	ba 02 00 00 00       	mov    $0x2,%edx
  22167e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  221684:	e8 a7 4e fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  221689:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
  221690:	00 
  221691:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  221698:	00 
  221699:	48 8d 15 d8 a6 01 00 	lea    0x1a6d8(%rip),%rdx        # 23bd78 <memcmp+0x3038>
  2216a0:	e8 db 16 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2216a5:	e9 38 ff ff ff       	jmpq   2215e2 <_ZN9r3_kernel2mm5stack14StackAllocator3new17h18acc96c65547b88E+0x422>
  2216aa:	cc                   	int3   
  2216ab:	cc                   	int3   
  2216ac:	cc                   	int3   
  2216ad:	cc                   	int3   
  2216ae:	cc                   	int3   
  2216af:	cc                   	int3   

00000000002216b0 <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E>:
}

/// init stack allocator
pub fn setup_stack_allocator() {
  2216b0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  2216b7:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  2216be:	00 00 
  2216c0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2216c5:	48 8d 35 2c ec fd ff 	lea    -0x213d4(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2216cc:	e8 ff 18 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2216d1:	88 44 24 27          	mov    %al,0x27(%rsp)
  2216d5:	8a 44 24 27          	mov    0x27(%rsp),%al
  2216d9:	a8 01                	test   $0x1,%al
  2216db:	75 09                	jne    2216e6 <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E+0x36>
  2216dd:	eb 00                	jmp    2216df <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E+0x2f>
  2216df:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  2216e4:	eb 4e                	jmp    221734 <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E+0x84>
  2216e6:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2216ed:	00 
  2216ee:	48 8b 3d 53 c4 01 00 	mov    0x1c453(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2216f5:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  2216fc:	00 
  2216fd:	e8 ee 9a 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  221702:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  221709:	00 
  22170a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  221711:	00 
  221712:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  221717:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22171c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  221721:	e8 aa 18 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221726:	88 44 24 26          	mov    %al,0x26(%rsp)
  22172a:	8a 44 24 26          	mov    0x26(%rsp),%al
  22172e:	24 01                	and    $0x1,%al
  221730:	88 44 24 37          	mov    %al,0x37(%rsp)
  221734:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  221739:	75 08                	jne    221743 <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E+0x93>
        "StackAllocator successfully set-up, address=0x{:x}",
        STACK_ALLOCATOR.lock().start_address.as_u64()
    );
}
  22173b:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  221742:	c3                   	retq   
        STACK_ALLOCATOR.lock().start_address.as_u64()
  221743:	48 8d 3d 6e 14 fe ff 	lea    -0x1eb92(%rip),%rdi        # 202bb8 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E>
  22174a:	e8 e1 00 00 00       	callq  221830 <_ZN81_$LT$r3_kernel..mm..stack..STACK_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0c5807d474dffaa2E>
  22174f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  221754:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  221759:	e8 b2 d2 00 00       	callq  22ea10 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h71ea9f300274983eE>
  22175e:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  221765:	00 
  221766:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22176d:	00 
  22176e:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  221775:	00 
  221776:	e8 35 d5 00 00       	callq  22ecb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd329ea8dd96b1bf9E>
  22177b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  221780:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  221785:	e8 36 6b 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  22178a:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  221791:	00 
    log::info!(
  221792:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  221799:	00 
  22179a:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2217a1:	00 
  2217a2:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2217a9:	00 
  2217aa:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  2217b1:	00 
  2217b2:	48 8b 35 97 c3 01 00 	mov    0x1c397(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  2217b9:	e8 82 de fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  2217be:	48 89 04 24          	mov    %rax,(%rsp)
  2217c2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2217c7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2217cc:	48 8b 0c 24          	mov    (%rsp),%rcx
  2217d0:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  2217d5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2217da:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  2217df:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2217e4:	48 8d 35 c5 a5 01 00 	lea    0x1a5c5(%rip),%rsi        # 23bdb0 <memcmp+0x3070>
  2217eb:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2217f1:	4c 89 c2             	mov    %r8,%rdx
  2217f4:	e8 37 4d fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2217f9:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  2217fe:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  221803:	48 8d 15 b6 a5 01 00 	lea    0x1a5b6(%rip),%rdx        # 23bdc0 <memcmp+0x3080>
  22180a:	e8 71 15 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22180f:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  221816:	00 
  221817:	e8 94 aa fe ff       	callq  20c2b0 <_ZN4core3ptr88drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..stack..StackAllocator$GT$$GT$17hdacda5b08df944d6E>
  22181c:	e9 1a ff ff ff       	jmpq   22173b <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E+0x8b>
  221821:	cc                   	int3   
  221822:	cc                   	int3   
  221823:	cc                   	int3   
  221824:	cc                   	int3   
  221825:	cc                   	int3   
  221826:	cc                   	int3   
  221827:	cc                   	int3   
  221828:	cc                   	int3   
  221829:	cc                   	int3   
  22182a:	cc                   	int3   
  22182b:	cc                   	int3   
  22182c:	cc                   	int3   
  22182d:	cc                   	int3   
  22182e:	cc                   	int3   
  22182f:	cc                   	int3   

0000000000221830 <_ZN81_$LT$r3_kernel..mm..stack..STACK_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0c5807d474dffaa2E>:
            fn deref(&self) -> &$T {
  221830:	48 83 ec 18          	sub    $0x18,%rsp
  221834:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  221839:	48 8d 05 b0 2f 02 00 	lea    0x22fb0(%rip),%rax        # 2447f0 <_ZN81_$LT$r3_kernel..mm..stack..STACK_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6bf31ac795d97802E>
  221840:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  221845:	48 8d 3d a4 2f 02 00 	lea    0x22fa4(%rip),%rdi        # 2447f0 <_ZN81_$LT$r3_kernel..mm..stack..STACK_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6bf31ac795d97802E>
  22184c:	e8 cf 76 fe ff       	callq  208f20 <_ZN4spin4once13Once$LT$T$GT$9call_once17h306e790e504a0afeE>
  221851:	48 89 04 24          	mov    %rax,(%rsp)
  221855:	48 8b 04 24          	mov    (%rsp),%rax
            }
  221859:	48 83 c4 18          	add    $0x18,%rsp
  22185d:	c3                   	retq   
  22185e:	cc                   	int3   
  22185f:	cc                   	int3   

0000000000221860 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h24154b0dd62c8090E>:
        ($($t:ty)*) => {
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline]
                    fn clone(&self) -> Self {
  221860:	50                   	push   %rax
  221861:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  221865:	48 8b 07             	mov    (%rdi),%rax
                    }
  221868:	59                   	pop    %rcx
  221869:	c3                   	retq   
  22186a:	cc                   	int3   
  22186b:	cc                   	int3   
  22186c:	cc                   	int3   
  22186d:	cc                   	int3   
  22186e:	cc                   	int3   
  22186f:	cc                   	int3   

0000000000221870 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>:
                    fn clone(&self) -> Self {
  221870:	50                   	push   %rax
  221871:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  221875:	48 8b 07             	mov    (%rdi),%rax
                    }
  221878:	59                   	pop    %rcx
  221879:	c3                   	retq   
  22187a:	cc                   	int3   
  22187b:	cc                   	int3   
  22187c:	cc                   	int3   
  22187d:	cc                   	int3   
  22187e:	cc                   	int3   
  22187f:	cc                   	int3   

0000000000221880 <_ZN4core3ptr13read_volatile17h2d3388a904c9c0c0E>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
  221880:	48 83 ec 18          	sub    $0x18,%rsp
  221884:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if cfg!(debug_assertions) && !is_aligned_and_not_null(src) {
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_load`.
    unsafe { intrinsics::volatile_load(src) }
  221889:	8b 07                	mov    (%rdi),%eax
  22188b:	89 44 24 14          	mov    %eax,0x14(%rsp)
  22188f:	8b 44 24 14          	mov    0x14(%rsp),%eax
  221893:	89 44 24 04          	mov    %eax,0x4(%rsp)
  221897:	8b 44 24 04          	mov    0x4(%rsp),%eax
}
  22189b:	48 83 c4 18          	add    $0x18,%rsp
  22189f:	c3                   	retq   

00000000002218a0 <_ZN4core3ptr14write_volatile17h978400e3cf6286c4E>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
  2218a0:	48 83 ec 10          	sub    $0x10,%rsp
  2218a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2218a8:	89 74 24 0c          	mov    %esi,0xc(%rsp)
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_store`.
    unsafe {
        intrinsics::volatile_store(dst, src);
  2218ac:	89 37                	mov    %esi,(%rdi)
    }
}
  2218ae:	48 83 c4 10          	add    $0x10,%rsp
  2218b2:	c3                   	retq   
  2218b3:	cc                   	int3   
  2218b4:	cc                   	int3   
  2218b5:	cc                   	int3   
  2218b6:	cc                   	int3   
  2218b7:	cc                   	int3   
  2218b8:	cc                   	int3   
  2218b9:	cc                   	int3   
  2218ba:	cc                   	int3   
  2218bb:	cc                   	int3   
  2218bc:	cc                   	int3   
  2218bd:	cc                   	int3   
  2218be:	cc                   	int3   
  2218bf:	cc                   	int3   

00000000002218c0 <_ZN4core3ptr20slice_from_raw_parts17h006612fc5f972f0cE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  2218c0:	48 83 ec 38          	sub    $0x38,%rsp
  2218c4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2218c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2218ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  2218d3:	e8 e8 05 ff ff       	callq  211ec0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb9afce9db5d0b565E>
  2218d8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2218dd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2218e2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2218e7:	e8 74 f1 fe ff       	callq  210a60 <_ZN4core3ptr8metadata14from_raw_parts17h4b6be9df4538dfecE>
  2218ec:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2218f1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2218f6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2218fb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  221900:	48 83 c4 38          	add    $0x38,%rsp
  221904:	c3                   	retq   
  221905:	cc                   	int3   
  221906:	cc                   	int3   
  221907:	cc                   	int3   
  221908:	cc                   	int3   
  221909:	cc                   	int3   
  22190a:	cc                   	int3   
  22190b:	cc                   	int3   
  22190c:	cc                   	int3   
  22190d:	cc                   	int3   
  22190e:	cc                   	int3   
  22190f:	cc                   	int3   

0000000000221910 <_ZN4core3ptr20slice_from_raw_parts17h7a7af0f1530c382dE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  221910:	48 83 ec 38          	sub    $0x38,%rsp
  221914:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  221919:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22191e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  221923:	e8 18 5c ff ff       	callq  217540 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb90b90fa70029186E>
  221928:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22192d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  221932:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  221937:	e8 64 f1 fe ff       	callq  210aa0 <_ZN4core3ptr8metadata14from_raw_parts17h9179a140a682e91aE>
  22193c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  221941:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  221946:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22194b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  221950:	48 83 c4 38          	add    $0x38,%rsp
  221954:	c3                   	retq   
  221955:	cc                   	int3   
  221956:	cc                   	int3   
  221957:	cc                   	int3   
  221958:	cc                   	int3   
  221959:	cc                   	int3   
  22195a:	cc                   	int3   
  22195b:	cc                   	int3   
  22195c:	cc                   	int3   
  22195d:	cc                   	int3   
  22195e:	cc                   	int3   
  22195f:	cc                   	int3   

0000000000221960 <_ZN4core3ptr24slice_from_raw_parts_mut17h4baadfda013033adE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  221960:	48 83 ec 38          	sub    $0x38,%rsp
  221964:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  221969:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22196e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  221973:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  221978:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22197d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  221982:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  221987:	e8 d4 f1 fe ff       	callq  210b60 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd84bf2ccf7ccd3a2E>
  22198c:	48 89 04 24          	mov    %rax,(%rsp)
  221990:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  221995:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22199a:	48 8b 04 24          	mov    (%rsp),%rax
}
  22199e:	48 83 c4 38          	add    $0x38,%rsp
  2219a2:	c3                   	retq   
  2219a3:	cc                   	int3   
  2219a4:	cc                   	int3   
  2219a5:	cc                   	int3   
  2219a6:	cc                   	int3   
  2219a7:	cc                   	int3   
  2219a8:	cc                   	int3   
  2219a9:	cc                   	int3   
  2219aa:	cc                   	int3   
  2219ab:	cc                   	int3   
  2219ac:	cc                   	int3   
  2219ad:	cc                   	int3   
  2219ae:	cc                   	int3   
  2219af:	cc                   	int3   

00000000002219b0 <_ZN4core3ptr24slice_from_raw_parts_mut17hc788c569ab4f87efE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  2219b0:	48 83 ec 38          	sub    $0x38,%rsp
  2219b4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2219b9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2219be:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2219c3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2219c8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2219cd:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2219d2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  2219d7:	e8 04 f1 fe ff       	callq  210ae0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2c270490821ca612E>
  2219dc:	48 89 04 24          	mov    %rax,(%rsp)
  2219e0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2219e5:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2219ea:	48 8b 04 24          	mov    (%rsp),%rax
}
  2219ee:	48 83 c4 38          	add    $0x38,%rsp
  2219f2:	c3                   	retq   
  2219f3:	cc                   	int3   
  2219f4:	cc                   	int3   
  2219f5:	cc                   	int3   
  2219f6:	cc                   	int3   
  2219f7:	cc                   	int3   
  2219f8:	cc                   	int3   
  2219f9:	cc                   	int3   
  2219fa:	cc                   	int3   
  2219fb:	cc                   	int3   
  2219fc:	cc                   	int3   
  2219fd:	cc                   	int3   
  2219fe:	cc                   	int3   
  2219ff:	cc                   	int3   

0000000000221a00 <_ZN4core3ptr24slice_from_raw_parts_mut17hccce3149d2f44078E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  221a00:	48 83 ec 38          	sub    $0x38,%rsp
  221a04:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  221a09:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  221a0e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  221a13:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  221a18:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  221a1d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  221a22:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  221a27:	e8 f4 f0 fe ff       	callq  210b20 <_ZN4core3ptr8metadata18from_raw_parts_mut17hb0ed2208ea82b504E>
  221a2c:	48 89 04 24          	mov    %rax,(%rsp)
  221a30:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  221a35:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  221a3a:	48 8b 04 24          	mov    (%rsp),%rax
}
  221a3e:	48 83 c4 38          	add    $0x38,%rsp
  221a42:	c3                   	retq   
  221a43:	cc                   	int3   
  221a44:	cc                   	int3   
  221a45:	cc                   	int3   
  221a46:	cc                   	int3   
  221a47:	cc                   	int3   
  221a48:	cc                   	int3   
  221a49:	cc                   	int3   
  221a4a:	cc                   	int3   
  221a4b:	cc                   	int3   
  221a4c:	cc                   	int3   
  221a4d:	cc                   	int3   
  221a4e:	cc                   	int3   
  221a4f:	cc                   	int3   

0000000000221a50 <_ZN4core3ptr4read17ha982fcfdc18f6787E>:
pub const unsafe fn read<T>(src: *const T) -> T {
  221a50:	48 83 ec 40          	sub    $0x40,%rsp
  221a54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  221a59:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    #[must_use]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
  221a5e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    let mut tmp = MaybeUninit::<T>::uninit();
  221a63:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  221a68:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  221a6d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  221a72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  221a77:	48 8b 00             	mov    (%rax),%rax
  221a7a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        tmp.assume_init()
  221a7f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  221a84:	48 89 04 24          	mov    %rax,(%rsp)
  221a88:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  221a8d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  221a92:	48 8b 04 24          	mov    (%rsp),%rax
}
  221a96:	48 83 c4 40          	add    $0x40,%rsp
  221a9a:	c3                   	retq   
  221a9b:	cc                   	int3   
  221a9c:	cc                   	int3   
  221a9d:	cc                   	int3   
  221a9e:	cc                   	int3   
  221a9f:	cc                   	int3   

0000000000221aa0 <_ZN4core3ptr5write17h04e3884830525521E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  221aa0:	50                   	push   %rax
  221aa1:	48 89 3c 24          	mov    %rdi,(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  221aa5:	48 8b 06             	mov    (%rsi),%rax
  221aa8:	48 89 07             	mov    %rax,(%rdi)
  221aab:	48 8b 46 08          	mov    0x8(%rsi),%rax
  221aaf:	48 89 47 08          	mov    %rax,0x8(%rdi)
  221ab3:	48 8b 46 10          	mov    0x10(%rsi),%rax
  221ab7:	48 89 47 10          	mov    %rax,0x10(%rdi)
  221abb:	48 8b 46 18          	mov    0x18(%rsi),%rax
  221abf:	48 89 47 18          	mov    %rax,0x18(%rdi)
}
  221ac3:	58                   	pop    %rax
  221ac4:	c3                   	retq   
  221ac5:	cc                   	int3   
  221ac6:	cc                   	int3   
  221ac7:	cc                   	int3   
  221ac8:	cc                   	int3   
  221ac9:	cc                   	int3   
  221aca:	cc                   	int3   
  221acb:	cc                   	int3   
  221acc:	cc                   	int3   
  221acd:	cc                   	int3   
  221ace:	cc                   	int3   
  221acf:	cc                   	int3   

0000000000221ad0 <_ZN4core3ptr5write17h869cc00e30cd30f8E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  221ad0:	48 83 ec 10          	sub    $0x10,%rsp
  221ad4:	48 89 34 24          	mov    %rsi,(%rsp)
  221ad8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  221add:	48 8b 04 24          	mov    (%rsp),%rax
  221ae1:	48 89 07             	mov    %rax,(%rdi)
}
  221ae4:	48 83 c4 10          	add    $0x10,%rsp
  221ae8:	c3                   	retq   
  221ae9:	cc                   	int3   
  221aea:	cc                   	int3   
  221aeb:	cc                   	int3   
  221aec:	cc                   	int3   
  221aed:	cc                   	int3   
  221aee:	cc                   	int3   
  221aef:	cc                   	int3   

0000000000221af0 <_ZN4core3ptr5write17ha68771186095c4e2E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  221af0:	48 83 ec 10          	sub    $0x10,%rsp
  221af4:	48 89 34 24          	mov    %rsi,(%rsp)
  221af8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  221afd:	48 8b 04 24          	mov    (%rsp),%rax
  221b01:	48 89 07             	mov    %rax,(%rdi)
}
  221b04:	48 83 c4 10          	add    $0x10,%rsp
  221b08:	c3                   	retq   
  221b09:	cc                   	int3   
  221b0a:	cc                   	int3   
  221b0b:	cc                   	int3   
  221b0c:	cc                   	int3   
  221b0d:	cc                   	int3   
  221b0e:	cc                   	int3   
  221b0f:	cc                   	int3   

0000000000221b10 <_ZN4core3ptr5write17hc73781c1f294320dE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  221b10:	48 83 ec 18          	sub    $0x18,%rsp
  221b14:	89 f0                	mov    %esi,%eax
  221b16:	89 44 24 08          	mov    %eax,0x8(%rsp)
  221b1a:	48 c1 ee 20          	shr    $0x20,%rsi
  221b1e:	66 89 f0             	mov    %si,%ax
  221b21:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  221b26:	8b 44 24 08          	mov    0x8(%rsp),%eax
  221b2a:	89 04 24             	mov    %eax,(%rsp)
  221b2d:	66 8b 44 24 0c       	mov    0xc(%rsp),%ax
  221b32:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  221b37:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  221b3c:	8b 04 24             	mov    (%rsp),%eax
  221b3f:	89 07                	mov    %eax,(%rdi)
  221b41:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  221b46:	66 89 47 04          	mov    %ax,0x4(%rdi)
}
  221b4a:	48 83 c4 18          	add    $0x18,%rsp
  221b4e:	c3                   	retq   
  221b4f:	cc                   	int3   

0000000000221b50 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE>:
fn probe_cpu_features() -> CPUFeatures {
  221b50:	48 81 ec 38 03 00 00 	sub    $0x338,%rsp
    log::info!("Probing CPU Features with cpuid instruction.");
  221b57:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  221b5e:	00 03 00 00 00 
  221b63:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  221b6a:	00 
  221b6b:	48 8d 35 86 e7 fd ff 	lea    -0x2187a(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  221b72:	e8 59 14 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221b77:	88 84 24 cf 00 00 00 	mov    %al,0xcf(%rsp)
  221b7e:	8a 84 24 cf 00 00 00 	mov    0xcf(%rsp),%al
  221b85:	a8 01                	test   $0x1,%al
  221b87:	75 0c                	jne    221b95 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x45>
  221b89:	eb 00                	jmp    221b8b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x3b>
  221b8b:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  221b92:	00 
  221b93:	eb 60                	jmp    221bf5 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xa5>
  221b95:	c6 84 24 2f 03 00 00 	movb   $0x0,0x32f(%rsp)
  221b9c:	00 
  221b9d:	48 8b 3d a4 bf 01 00 	mov    0x1bfa4(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  221ba4:	0f b6 b4 24 2f 03 00 	movzbl 0x32f(%rsp),%esi
  221bab:	00 
  221bac:	e8 3f 96 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  221bb1:	48 89 84 24 30 03 00 	mov    %rax,0x330(%rsp)
  221bb8:	00 
  221bb9:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  221bc0:	00 
  221bc1:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  221bc8:	00 
  221bc9:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  221bd0:	00 
  221bd1:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  221bd8:	00 
  221bd9:	e8 f2 13 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221bde:	88 84 24 ce 00 00 00 	mov    %al,0xce(%rsp)
  221be5:	8a 84 24 ce 00 00 00 	mov    0xce(%rsp),%al
  221bec:	24 01                	and    $0x1,%al
  221bee:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  221bf5:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  221bfc:	01 
  221bfd:	75 37                	jne    221c36 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xe6>
  221bff:	b8 01 00 00 00       	mov    $0x1,%eax
        asm!(
  221c04:	48 87 f3             	xchg   %rsi,%rbx
  221c07:	0f a2                	cpuid  
  221c09:	48 87 f3             	xchg   %rsi,%rbx
  221c0c:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  221c13:	00 
  221c14:	89 c6                	mov    %eax,%esi
  221c16:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  221c1d:	00 
  221c1e:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  221c25:	00 
  221c26:	89 8c 24 e0 00 00 00 	mov    %ecx,0xe0(%rsp)
  221c2d:	89 94 24 e4 00 00 00 	mov    %edx,0xe4(%rsp)
  221c34:	eb 43                	jmp    221c79 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x129>
    log::info!("Probing CPU Features with cpuid instruction.");
  221c36:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  221c3d:	00 
  221c3e:	48 8d 35 b3 a1 01 00 	lea    0x1a1b3(%rip),%rsi        # 23bdf8 <memcmp+0x30b8>
  221c45:	ba 01 00 00 00       	mov    $0x1,%edx
  221c4a:	48 8d 0d 97 0f fe ff 	lea    -0x1f069(%rip),%rcx        # 202be8 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x30>
  221c51:	31 c0                	xor    %eax,%eax
  221c53:	41 89 c0             	mov    %eax,%r8d
  221c56:	e8 d5 48 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  221c5b:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  221c62:	00 
  221c63:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  221c6a:	00 
  221c6b:	48 8d 15 96 a1 01 00 	lea    0x1a196(%rip),%rdx        # 23be08 <memcmp+0x30c8>
  221c72:	e8 09 11 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  221c77:	eb 86                	jmp    221bff <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xaf>
    log::debug!(
  221c79:	48 c7 84 24 38 01 00 	movq   $0x4,0x138(%rsp)
  221c80:	00 04 00 00 00 
  221c85:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  221c8c:	00 
  221c8d:	48 8d 35 64 e6 fd ff 	lea    -0x2199c(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  221c94:	e8 37 13 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221c99:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  221ca0:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
  221ca7:	a8 01                	test   $0x1,%al
  221ca9:	75 0c                	jne    221cb7 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x167>
  221cab:	eb 00                	jmp    221cad <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x15d>
  221cad:	c6 84 24 47 01 00 00 	movb   $0x0,0x147(%rsp)
  221cb4:	00 
  221cb5:	eb 60                	jmp    221d17 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x1c7>
  221cb7:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  221cbe:	00 
  221cbf:	48 8b 3d 82 be 01 00 	mov    0x1be82(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  221cc6:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  221ccd:	00 
  221cce:	e8 1d 95 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  221cd3:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  221cda:	00 
  221cdb:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  221ce2:	00 
  221ce3:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  221cea:	00 
  221ceb:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  221cf2:	00 
  221cf3:	48 8d b4 24 48 01 00 	lea    0x148(%rsp),%rsi
  221cfa:	00 
  221cfb:	e8 d0 12 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221d00:	88 84 24 be 00 00 00 	mov    %al,0xbe(%rsp)
  221d07:	8a 84 24 be 00 00 00 	mov    0xbe(%rsp),%al
  221d0e:	24 01                	and    $0x1,%al
  221d10:	88 84 24 47 01 00 00 	mov    %al,0x147(%rsp)
  221d17:	f6 84 24 47 01 00 00 	testb  $0x1,0x147(%rsp)
  221d1e:	01 
  221d1f:	75 30                	jne    221d51 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x201>
  221d21:	31 c0                	xor    %eax,%eax
        asm!(
  221d23:	48 87 f3             	xchg   %rsi,%rbx
  221d26:	0f a2                	cpuid  
  221d28:	48 87 f3             	xchg   %rsi,%rbx
  221d2b:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  221d32:	00 
  221d33:	89 ce                	mov    %ecx,%esi
  221d35:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  221d3c:	00 
  221d3d:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  221d44:	00 
  221d45:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%rsp)
  221d4c:	e9 6e 01 00 00       	jmpq   221ebf <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x36f>
    log::debug!(
  221d51:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  221d58:	00 
  221d59:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  221d60:	00 
  221d61:	48 8d 84 24 e4 00 00 	lea    0xe4(%rsp),%rax
  221d68:	00 
  221d69:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  221d70:	00 
  221d71:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  221d78:	00 
  221d79:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  221d80:	00 
  221d81:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  221d88:	00 
  221d89:	48 89 bc 24 c0 02 00 	mov    %rdi,0x2c0(%rsp)
  221d90:	00 
  221d91:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  221d98:	00 
  221d99:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  221da0:	00 
  221da1:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  221da8:	00 
  221da9:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  221db0:	00 
  221db1:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  221db8:	00 
  221db9:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  221dc0:	00 
  221dc1:	48 8b 35 e8 bd 01 00 	mov    0x1bde8(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  221dc8:	e8 d3 d2 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  221dcd:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  221dd4:	00 
  221dd5:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  221ddc:	00 
  221ddd:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  221de4:	00 
  221de5:	48 8b 35 c4 bd 01 00 	mov    0x1bdc4(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  221dec:	e8 af d2 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  221df1:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  221df8:	00 
  221df9:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  221e00:	00 
  221e01:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  221e08:	00 
  221e09:	48 8b 35 40 bd 01 00 	mov    0x1bd40(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  221e10:	e8 2b d8 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  221e15:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  221e1a:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  221e1f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  221e24:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  221e29:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  221e30:	00 
  221e31:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  221e38:	00 
  221e39:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  221e40:	00 
  221e41:	4c 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%r8
  221e48:	00 
  221e49:	4c 89 84 24 80 01 00 	mov    %r8,0x180(%rsp)
  221e50:	00 
  221e51:	48 89 bc 24 88 01 00 	mov    %rdi,0x188(%rsp)
  221e58:	00 
  221e59:	48 89 b4 24 90 01 00 	mov    %rsi,0x190(%rsp)
  221e60:	00 
  221e61:	48 89 94 24 98 01 00 	mov    %rdx,0x198(%rsp)
  221e68:	00 
  221e69:	48 89 8c 24 a0 01 00 	mov    %rcx,0x1a0(%rsp)
  221e70:	00 
  221e71:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  221e78:	00 
  221e79:	48 8d 8c 24 80 01 00 	lea    0x180(%rsp),%rcx
  221e80:	00 
  221e81:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  221e88:	00 
  221e89:	48 8d 35 b0 9f 01 00 	lea    0x19fb0(%rip),%rsi        # 23be40 <memcmp+0x3100>
  221e90:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  221e96:	4c 89 c2             	mov    %r8,%rdx
  221e99:	e8 92 46 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  221e9e:	48 8b b4 24 38 01 00 	mov    0x138(%rsp),%rsi
  221ea5:	00 
  221ea6:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  221ead:	00 
  221eae:	48 8d 15 bb 9f 01 00 	lea    0x19fbb(%rip),%rdx        # 23be70 <memcmp+0x3130>
  221eb5:	e8 c6 0e 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  221eba:	e9 62 fe ff ff       	jmpq   221d21 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x1d1>
        log::debug!(
  221ebf:	48 c7 84 24 d0 01 00 	movq   $0x4,0x1d0(%rsp)
  221ec6:	00 04 00 00 00 
  221ecb:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  221ed2:	00 
  221ed3:	48 8d 35 1e e4 fd ff 	lea    -0x21be2(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  221eda:	e8 f1 10 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221edf:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  221ee3:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  221ee7:	a8 01                	test   $0x1,%al
  221ee9:	75 0c                	jne    221ef7 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x3a7>
  221eeb:	eb 00                	jmp    221eed <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x39d>
  221eed:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  221ef4:	00 
  221ef5:	eb 5a                	jmp    221f51 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x401>
  221ef7:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  221efe:	00 
  221eff:	48 8b 3d 42 bc 01 00 	mov    0x1bc42(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  221f06:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  221f0d:	00 
  221f0e:	e8 dd 92 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  221f13:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  221f1a:	00 
  221f1b:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  221f22:	00 
  221f23:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  221f2a:	00 
  221f2b:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  221f32:	00 
  221f33:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
  221f3a:	00 
  221f3b:	e8 90 10 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  221f40:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  221f44:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  221f48:	24 01                	and    $0x1,%al
  221f4a:	88 84 24 df 01 00 00 	mov    %al,0x1df(%rsp)
  221f51:	f6 84 24 df 01 00 00 	testb  $0x1,0x1df(%rsp)
  221f58:	01 
  221f59:	75 2d                	jne    221f88 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x438>
  221f5b:	b8 00 00 00 80       	mov    $0x80000000,%eax
        asm!(
  221f60:	48 87 f3             	xchg   %rsi,%rbx
  221f63:	0f a2                	cpuid  
  221f65:	48 87 f3             	xchg   %rsi,%rbx
  221f68:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  221f6d:	89 ce                	mov    %ecx,%esi
  221f6f:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  221f74:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  221f7b:	00 
  221f7c:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%rsp)
  221f83:	e9 f2 00 00 00       	jmpq   22207a <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x52a>
        log::debug!(
  221f88:	48 8d 84 24 c8 01 00 	lea    0x1c8(%rsp),%rax
  221f8f:	00 
  221f90:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  221f97:	00 
  221f98:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  221f9f:	00 
  221fa0:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  221fa7:	00 
  221fa8:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
  221faf:	00 
  221fb0:	48 89 bc 24 d8 02 00 	mov    %rdi,0x2d8(%rsp)
  221fb7:	00 
  221fb8:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  221fbf:	00 
  221fc0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  221fc5:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  221fcc:	00 
  221fcd:	48 8b 35 dc bb 01 00 	mov    0x1bbdc(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  221fd4:	e8 c7 d0 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  221fd9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  221fde:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  221fe3:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  221fe8:	48 8b 35 61 bb 01 00 	mov    0x1bb61(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  221fef:	e8 4c d6 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  221ff4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  221ff9:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  221ffe:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  222003:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  222008:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22200d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  222012:	48 89 b4 24 18 02 00 	mov    %rsi,0x218(%rsp)
  222019:	00 
  22201a:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  222021:	00 
  222022:	48 89 8c 24 28 02 00 	mov    %rcx,0x228(%rsp)
  222029:	00 
  22202a:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  222031:	00 
  222032:	48 8d 8c 24 18 02 00 	lea    0x218(%rsp),%rcx
  222039:	00 
  22203a:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  222041:	00 
  222042:	48 8d 35 5f 9e 01 00 	lea    0x19e5f(%rip),%rsi        # 23bea8 <memcmp+0x3168>
  222049:	ba 03 00 00 00       	mov    $0x3,%edx
  22204e:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  222054:	e8 d7 44 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  222059:	48 8b b4 24 d0 01 00 	mov    0x1d0(%rsp),%rsi
  222060:	00 
  222061:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  222068:	00 
  222069:	48 8d 15 68 9e 01 00 	lea    0x19e68(%rip),%rdx        # 23bed8 <memcmp+0x3198>
  222070:	e8 0b 0d 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  222075:	e9 e1 fe ff ff       	jmpq   221f5b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x40b>
        log::debug!(
  22207a:	48 c7 84 24 48 02 00 	movq   $0x4,0x248(%rsp)
  222081:	00 04 00 00 00 
  222086:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  22208d:	00 
  22208e:	48 8d 35 63 e2 fd ff 	lea    -0x21d9d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  222095:	e8 36 0f ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22209a:	88 44 24 37          	mov    %al,0x37(%rsp)
  22209e:	8a 44 24 37          	mov    0x37(%rsp),%al
  2220a2:	a8 01                	test   $0x1,%al
  2220a4:	75 0c                	jne    2220b2 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x562>
  2220a6:	eb 00                	jmp    2220a8 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x558>
  2220a8:	c6 84 24 57 02 00 00 	movb   $0x0,0x257(%rsp)
  2220af:	00 
  2220b0:	eb 5a                	jmp    22210c <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5bc>
  2220b2:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  2220b9:	00 
  2220ba:	48 8b 3d 87 ba 01 00 	mov    0x1ba87(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2220c1:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  2220c8:	00 
  2220c9:	e8 22 91 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2220ce:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  2220d5:	00 
  2220d6:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  2220dd:	00 
  2220de:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  2220e5:	00 
  2220e6:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  2220ed:	00 
  2220ee:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  2220f5:	00 
  2220f6:	e8 d5 0e ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2220fb:	88 44 24 36          	mov    %al,0x36(%rsp)
  2220ff:	8a 44 24 36          	mov    0x36(%rsp),%al
  222103:	24 01                	and    $0x1,%al
  222105:	88 84 24 57 02 00 00 	mov    %al,0x257(%rsp)
  22210c:	f6 84 24 57 02 00 00 	testb  $0x1,0x257(%rsp)
  222113:	01 
  222114:	75 15                	jne    22212b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5db>
        ecx: FlagsECX::from_bits_truncate(ecx),
  222116:	8b bc 24 e0 00 00 00 	mov    0xe0(%rsp),%edi
  22211d:	e8 fe 21 00 00       	callq  224320 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17ha9ae7013cc2ab286E>
  222122:	89 44 24 30          	mov    %eax,0x30(%rsp)
  222126:	e9 f2 00 00 00       	jmpq   22221d <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x6cd>
        log::debug!(
  22212b:	48 8d 84 24 cc 01 00 	lea    0x1cc(%rsp),%rax
  222132:	00 
  222133:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  22213a:	00 
  22213b:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  222142:	00 
  222143:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  22214a:	00 
  22214b:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  222152:	00 
  222153:	48 89 bc 24 e8 02 00 	mov    %rdi,0x2e8(%rsp)
  22215a:	00 
  22215b:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  222162:	00 
  222163:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  222168:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  22216f:	00 
  222170:	48 8b 35 39 ba 01 00 	mov    0x1ba39(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  222177:	e8 24 cf fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  22217c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  222181:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  222186:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22218b:	48 8b 35 be b9 01 00 	mov    0x1b9be(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  222192:	e8 a9 d4 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  222197:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22219c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2221a1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2221a6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2221ab:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2221b0:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2221b5:	48 89 b4 24 90 02 00 	mov    %rsi,0x290(%rsp)
  2221bc:	00 
  2221bd:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  2221c4:	00 
  2221c5:	48 89 8c 24 a0 02 00 	mov    %rcx,0x2a0(%rsp)
  2221cc:	00 
  2221cd:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  2221d4:	00 
  2221d5:	48 8d 8c 24 90 02 00 	lea    0x290(%rsp),%rcx
  2221dc:	00 
  2221dd:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  2221e4:	00 
  2221e5:	48 8d 35 24 9d 01 00 	lea    0x19d24(%rip),%rsi        # 23bf10 <memcmp+0x31d0>
  2221ec:	ba 03 00 00 00       	mov    $0x3,%edx
  2221f1:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2221f7:	e8 34 43 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2221fc:	48 8b b4 24 48 02 00 	mov    0x248(%rsp),%rsi
  222203:	00 
  222204:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  22220b:	00 
  22220c:	48 8d 15 2d 9d 01 00 	lea    0x19d2d(%rip),%rdx        # 23bf40 <memcmp+0x3200>
  222213:	e8 68 0b 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  222218:	e9 f9 fe ff ff       	jmpq   222116 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5c6>
        edx: FlagsEDX::from_bits_truncate(edx),
  22221d:	8b bc 24 e4 00 00 00 	mov    0xe4(%rsp),%edi
  222224:	e8 d7 44 00 00       	callq  226700 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h215956a5355ec929E>
  222229:	89 44 24 04          	mov    %eax,0x4(%rsp)
  22222d:	8b 54 24 04          	mov    0x4(%rsp),%edx
  222231:	8b 74 24 30          	mov    0x30(%rsp),%esi
        max_extended_level,
  222235:	8b 84 24 cc 01 00 00 	mov    0x1cc(%rsp),%eax
        max_standard_level,
  22223c:	8b 8c 24 c8 01 00 00 	mov    0x1c8(%rsp),%ecx
    CPUFeatures {
  222243:	89 b4 24 d0 00 00 00 	mov    %esi,0xd0(%rsp)
  22224a:	89 94 24 d4 00 00 00 	mov    %edx,0xd4(%rsp)
  222251:	89 8c 24 d8 00 00 00 	mov    %ecx,0xd8(%rsp)
  222258:	89 84 24 dc 00 00 00 	mov    %eax,0xdc(%rsp)
}
  22225f:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  222266:	00 
  222267:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  22226e:	00 
  22226f:	48 81 c4 38 03 00 00 	add    $0x338,%rsp
  222276:	c3                   	retq   
  222277:	cc                   	int3   
  222278:	cc                   	int3   
  222279:	cc                   	int3   
  22227a:	cc                   	int3   
  22227b:	cc                   	int3   
  22227c:	cc                   	int3   
  22227d:	cc                   	int3   
  22227e:	cc                   	int3   
  22227f:	cc                   	int3   

0000000000222280 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E>:

pub fn has_extended_feature(flag: FlagsEDX) -> bool {
    CPU_FEATURES.edx.contains(flag)
}

pub fn assert_min_levels() {
  222280:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
    assert!(
        CPU_FEATURES.max_standard_level >= 3,
  222287:	48 8d 3d 3a 0b fe ff 	lea    -0x1f4c6(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22228e:	e8 8d 4d 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  222293:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  222298:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22229d:	83 78 08 03          	cmpl   $0x3,0x8(%rax)
  2222a1:	0f 93 c0             	setae  %al
    assert!(
  2222a4:	34 ff                	xor    $0xff,%al
  2222a6:	a8 01                	test   $0x1,%al
  2222a8:	75 16                	jne    2222c0 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x40>
        "Expected CPU standard level >= 3, got {}.",
        CPU_FEATURES.max_standard_level
    );

    assert!(
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  2222aa:	48 8d 3d 17 0b fe ff 	lea    -0x1f4e9(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  2222b1:	e8 6a 4d 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2222b6:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2222bb:	e9 99 00 00 00       	jmpq   222359 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0xd9>
        CPU_FEATURES.max_standard_level
  2222c0:	48 8d 3d 01 0b fe ff 	lea    -0x1f4ff(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  2222c7:	e8 54 4d 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2222cc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2222d1:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2222d6:	48 83 c0 08          	add    $0x8,%rax
    assert!(
  2222da:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2222e1:	00 
  2222e2:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  2222e9:	00 
  2222ea:	48 89 bc 24 28 01 00 	mov    %rdi,0x128(%rsp)
  2222f1:	00 
  2222f2:	48 8b 35 bf b8 01 00 	mov    0x1b8bf(%rip),%rsi        # 23dbb8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  2222f9:	e8 a2 cd fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2222fe:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  222303:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  222308:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22230d:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  222312:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  222319:	00 
  22231a:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  222321:	00 
  222322:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
  222329:	00 
  22232a:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22232f:	48 8d 35 42 9c 01 00 	lea    0x19c42(%rip),%rsi        # 23bf78 <memcmp+0x3238>
  222336:	ba 02 00 00 00       	mov    $0x2,%edx
  22233b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  222341:	e8 ea 41 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  222346:	48 8d 35 4b 9c 01 00 	lea    0x19c4b(%rip),%rsi        # 23bf98 <memcmp+0x3258>
  22234d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  222352:	e8 69 39 01 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  222357:	0f 0b                	ud2    
  222359:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  22235e:	81 78 0c 07 00 00 80 	cmpl   $0x80000007,0xc(%rax)
  222365:	0f 93 c0             	setae  %al
    assert!(
  222368:	34 ff                	xor    $0xff,%al
  22236a:	a8 01                	test   $0x1,%al
  22236c:	75 29                	jne    222397 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x117>
        "Expected CPU extended level >= 0x80000007, got 0x{:x}.",
        CPU_FEATURES.max_extended_level
    );

    log::info!("CPU level checks passed.");
  22236e:	48 c7 84 24 e0 00 00 	movq   $0x3,0xe0(%rsp)
  222375:	00 03 00 00 00 
  22237a:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  222381:	00 
  222382:	48 8d 35 6f df fd ff 	lea    -0x22091(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  222389:	e8 42 0c ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22238e:	88 44 24 27          	mov    %al,0x27(%rsp)
  222392:	e9 9f 00 00 00       	jmpq   222436 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1b6>
        CPU_FEATURES.max_extended_level
  222397:	48 8d 3d 2a 0a fe ff 	lea    -0x1f5d6(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22239e:	e8 7d 4c 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2223a3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2223a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2223ad:	48 83 c0 0c          	add    $0xc,%rax
    assert!(
  2223b1:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2223b8:	00 
  2223b9:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  2223c0:	00 
  2223c1:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  2223c8:	00 
  2223c9:	48 8b 35 e0 b7 01 00 	mov    0x1b7e0(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  2223d0:	e8 cb cc fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2223d5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2223da:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2223df:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2223e4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2223e9:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  2223f0:	00 
  2223f1:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  2223f8:	00 
  2223f9:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  222400:	00 
  222401:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  222408:	00 
  222409:	48 8d 35 a0 9b 01 00 	lea    0x19ba0(%rip),%rsi        # 23bfb0 <memcmp+0x3270>
  222410:	ba 02 00 00 00       	mov    $0x2,%edx
  222415:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22241b:	e8 10 41 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  222420:	48 8d 35 a9 9b 01 00 	lea    0x19ba9(%rip),%rsi        # 23bfd0 <memcmp+0x3290>
  222427:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  22242e:	00 
  22242f:	e8 8c 38 01 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  222434:	0f 0b                	ud2    
  222436:	8a 44 24 27          	mov    0x27(%rsp),%al
    log::info!("CPU level checks passed.");
  22243a:	a8 01                	test   $0x1,%al
  22243c:	75 0c                	jne    22244a <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1ca>
  22243e:	eb 00                	jmp    222440 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1c0>
  222440:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  222447:	00 
  222448:	eb 5a                	jmp    2224a4 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x224>
  22244a:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  222451:	00 
  222452:	48 8b 3d ef b6 01 00 	mov    0x1b6ef(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  222459:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  222460:	00 
  222461:	e8 8a 8d 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  222466:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  22246d:	00 
  22246e:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  222475:	00 
  222476:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22247d:	00 
  22247e:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  222485:	00 
  222486:	48 8d b4 24 f0 00 00 	lea    0xf0(%rsp),%rsi
  22248d:	00 
  22248e:	e8 3d 0b ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  222493:	88 44 24 07          	mov    %al,0x7(%rsp)
  222497:	8a 44 24 07          	mov    0x7(%rsp),%al
  22249b:	24 01                	and    $0x1,%al
  22249d:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  2224a4:	f6 84 24 ef 00 00 00 	testb  $0x1,0xef(%rsp)
  2224ab:	01 
  2224ac:	75 08                	jne    2224b6 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x236>
}
  2224ae:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  2224b5:	c3                   	retq   
    log::info!("CPU level checks passed.");
  2224b6:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2224bd:	00 
  2224be:	48 8d 35 23 9b 01 00 	lea    0x19b23(%rip),%rsi        # 23bfe8 <memcmp+0x32a8>
  2224c5:	ba 01 00 00 00       	mov    $0x1,%edx
  2224ca:	48 8d 0d 17 07 fe ff 	lea    -0x1f8e9(%rip),%rcx        # 202be8 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x30>
  2224d1:	31 c0                	xor    %eax,%eax
  2224d3:	41 89 c0             	mov    %eax,%r8d
  2224d6:	e8 55 40 fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2224db:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  2224e2:	00 
  2224e3:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2224ea:	00 
  2224eb:	48 8d 15 06 9b 01 00 	lea    0x19b06(%rip),%rdx        # 23bff8 <memcmp+0x32b8>
  2224f2:	e8 89 08 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2224f7:	eb b5                	jmp    2224ae <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x22e>
  2224f9:	cc                   	int3   
  2224fa:	cc                   	int3   
  2224fb:	cc                   	int3   
  2224fc:	cc                   	int3   
  2224fd:	cc                   	int3   
  2224fe:	cc                   	int3   
  2224ff:	cc                   	int3   

0000000000222500 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E>:
        "CPU does not support critical extended feature {:?}",
        flag
    );
}

pub fn display_features() {
  222500:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  222507:	48 c7 84 24 88 00 00 	movq   $0x3,0x88(%rsp)
  22250e:	00 03 00 00 00 
  222513:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  22251a:	00 
  22251b:	48 8d 35 d6 dd fd ff 	lea    -0x2222a(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  222522:	e8 a9 0a ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  222527:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  22252e:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  222535:	a8 01                	test   $0x1,%al
  222537:	75 0c                	jne    222545 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x45>
  222539:	eb 00                	jmp    22253b <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x3b>
  22253b:	c6 84 24 97 00 00 00 	movb   $0x0,0x97(%rsp)
  222542:	00 
  222543:	eb 60                	jmp    2225a5 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xa5>
  222545:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  22254c:	00 
  22254d:	48 8b 3d f4 b5 01 00 	mov    0x1b5f4(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  222554:	0f b6 b4 24 5f 02 00 	movzbl 0x25f(%rsp),%esi
  22255b:	00 
  22255c:	e8 8f 8c 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  222561:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  222568:	00 
  222569:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  222570:	00 
  222571:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  222578:	00 
  222579:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  222580:	00 
  222581:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  222588:	00 
  222589:	e8 42 0a ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22258e:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  222595:	8a 84 24 86 00 00 00 	mov    0x86(%rsp),%al
  22259c:	24 01                	and    $0x1,%al
  22259e:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  2225a5:	f6 84 24 97 00 00 00 	testb  $0x1,0x97(%rsp)
  2225ac:	01 
  2225ad:	75 2c                	jne    2225db <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xdb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  2225af:	48 c7 84 24 e8 00 00 	movq   $0x3,0xe8(%rsp)
  2225b6:	00 03 00 00 00 
  2225bb:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2225c2:	00 
  2225c3:	48 8d 35 2e dd fd ff 	lea    -0x222d2(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2225ca:	e8 01 0a ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2225cf:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  2225d6:	e9 a4 00 00 00       	jmpq   22267f <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x17f>
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  2225db:	48 8d 3d e6 07 fe ff 	lea    -0x1f81a(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  2225e2:	e8 39 4a 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2225e7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2225ec:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2225f1:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2225f8:	00 
  2225f9:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  222600:	00 
  222601:	48 89 bc 24 08 02 00 	mov    %rdi,0x208(%rsp)
  222608:	00 
  222609:	48 8d 35 30 04 00 00 	lea    0x430(%rip),%rsi        # 222a40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E>
  222610:	e8 ab cb fe ff       	callq  20f1c0 <_ZN4core3fmt10ArgumentV13new17h645304c68732e54fE>
  222615:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22261a:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  22261f:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  222624:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  222629:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  222630:	00 
  222631:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  222638:	00 
  222639:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  222640:	00 
  222641:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  222648:	00 
  222649:	48 8d 35 e0 99 01 00 	lea    0x199e0(%rip),%rsi        # 23c030 <memcmp+0x32f0>
  222650:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  222656:	4c 89 c2             	mov    %r8,%rdx
  222659:	e8 d2 3e fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22265e:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  222665:	00 
  222666:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  22266d:	00 
  22266e:	48 8d 15 cb 99 01 00 	lea    0x199cb(%rip),%rdx        # 23c040 <memcmp+0x3300>
  222675:	e8 06 07 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22267a:	e9 30 ff ff ff       	jmpq   2225af <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xaf>
  22267f:	8a 84 24 85 00 00 00 	mov    0x85(%rsp),%al
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  222686:	a8 01                	test   $0x1,%al
  222688:	75 0c                	jne    222696 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x196>
  22268a:	eb 00                	jmp    22268c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x18c>
  22268c:	c6 84 24 f7 00 00 00 	movb   $0x0,0xf7(%rsp)
  222693:	00 
  222694:	eb 5a                	jmp    2226f0 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x1f0>
  222696:	c6 84 24 4f 02 00 00 	movb   $0x0,0x24f(%rsp)
  22269d:	00 
  22269e:	48 8b 3d a3 b4 01 00 	mov    0x1b4a3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2226a5:	0f b6 b4 24 4f 02 00 	movzbl 0x24f(%rsp),%esi
  2226ac:	00 
  2226ad:	e8 3e 8b 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2226b2:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2226b9:	00 
  2226ba:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  2226c1:	00 
  2226c2:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  2226c9:	00 
  2226ca:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2226d1:	00 
  2226d2:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
  2226d9:	00 
  2226da:	e8 f1 08 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2226df:	88 44 24 67          	mov    %al,0x67(%rsp)
  2226e3:	8a 44 24 67          	mov    0x67(%rsp),%al
  2226e7:	24 01                	and    $0x1,%al
  2226e9:	88 84 24 f7 00 00 00 	mov    %al,0xf7(%rsp)
  2226f0:	f6 84 24 f7 00 00 00 	testb  $0x1,0xf7(%rsp)
  2226f7:	01 
  2226f8:	75 29                	jne    222723 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x223>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  2226fa:	48 c7 84 24 48 01 00 	movq   $0x3,0x148(%rsp)
  222701:	00 03 00 00 00 
  222706:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  22270d:	00 
  22270e:	48 8d 35 e3 db fd ff 	lea    -0x2241d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  222715:	e8 b6 08 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22271a:	88 44 24 66          	mov    %al,0x66(%rsp)
  22271e:	e9 a8 00 00 00       	jmpq   2227cb <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2cb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  222723:	48 8d 3d 9e 06 fe ff 	lea    -0x1f962(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22272a:	e8 f1 48 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  22272f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  222734:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  222739:	48 83 c0 04          	add    $0x4,%rax
  22273d:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  222744:	00 
  222745:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  22274c:	00 
  22274d:	48 89 bc 24 10 02 00 	mov    %rdi,0x210(%rsp)
  222754:	00 
  222755:	48 8d 35 f4 23 00 00 	lea    0x23f4(%rip),%rsi        # 224b50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E>
  22275c:	e8 5f d0 fe ff       	callq  20f7c0 <_ZN4core3fmt10ArgumentV13new17hf1f1870160aa1ab8E>
  222761:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  222766:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  22276b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  222770:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  222775:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  22277c:	00 
  22277d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  222784:	00 
  222785:	48 8d 8c 24 30 01 00 	lea    0x130(%rsp),%rcx
  22278c:	00 
  22278d:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  222794:	00 
  222795:	48 8d 35 dc 98 01 00 	lea    0x198dc(%rip),%rsi        # 23c078 <memcmp+0x3338>
  22279c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2227a2:	4c 89 c2             	mov    %r8,%rdx
  2227a5:	e8 86 3d fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2227aa:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  2227b1:	00 
  2227b2:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2227b9:	00 
  2227ba:	48 8d 15 c7 98 01 00 	lea    0x198c7(%rip),%rdx        # 23c088 <memcmp+0x3348>
  2227c1:	e8 ba 05 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2227c6:	e9 2f ff ff ff       	jmpq   2226fa <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x1fa>
  2227cb:	8a 44 24 66          	mov    0x66(%rsp),%al
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  2227cf:	a8 01                	test   $0x1,%al
  2227d1:	75 0c                	jne    2227df <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2df>
  2227d3:	eb 00                	jmp    2227d5 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2d5>
  2227d5:	c6 84 24 57 01 00 00 	movb   $0x0,0x157(%rsp)
  2227dc:	00 
  2227dd:	eb 5a                	jmp    222839 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x339>
  2227df:	c6 84 24 3f 02 00 00 	movb   $0x0,0x23f(%rsp)
  2227e6:	00 
  2227e7:	48 8b 3d 5a b3 01 00 	mov    0x1b35a(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2227ee:	0f b6 b4 24 3f 02 00 	movzbl 0x23f(%rsp),%esi
  2227f5:	00 
  2227f6:	e8 f5 89 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2227fb:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  222802:	00 
  222803:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  22280a:	00 
  22280b:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  222812:	00 
  222813:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  22281a:	00 
  22281b:	48 8d b4 24 58 01 00 	lea    0x158(%rsp),%rsi
  222822:	00 
  222823:	e8 a8 07 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  222828:	88 44 24 47          	mov    %al,0x47(%rsp)
  22282c:	8a 44 24 47          	mov    0x47(%rsp),%al
  222830:	24 01                	and    $0x1,%al
  222832:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  222839:	f6 84 24 57 01 00 00 	testb  $0x1,0x157(%rsp)
  222840:	01 
  222841:	75 29                	jne    22286c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x36c>
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  222843:	48 c7 84 24 a8 01 00 	movq   $0x3,0x1a8(%rsp)
  22284a:	00 03 00 00 00 
  22284f:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  222856:	00 
  222857:	48 8d 35 9a da fd ff 	lea    -0x22566(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22285e:	e8 6d 07 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  222863:	88 44 24 46          	mov    %al,0x46(%rsp)
  222867:	e9 a8 00 00 00       	jmpq   222914 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x414>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  22286c:	48 8d 3d 55 05 fe ff 	lea    -0x1faab(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  222873:	e8 a8 47 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  222878:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22287d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  222882:	48 83 c0 08          	add    $0x8,%rax
  222886:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22288d:	00 
  22288e:	48 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%rdi
  222895:	00 
  222896:	48 89 bc 24 18 02 00 	mov    %rdi,0x218(%rsp)
  22289d:	00 
  22289e:	48 8b 35 0b b3 01 00 	mov    0x1b30b(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  2228a5:	e8 f6 c7 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2228aa:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2228af:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2228b4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2228b9:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2228be:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  2228c5:	00 
  2228c6:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  2228cd:	00 
  2228ce:	48 8d 8c 24 90 01 00 	lea    0x190(%rsp),%rcx
  2228d5:	00 
  2228d6:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  2228dd:	00 
  2228de:	48 8d 35 db 97 01 00 	lea    0x197db(%rip),%rsi        # 23c0c0 <memcmp+0x3380>
  2228e5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2228eb:	4c 89 c2             	mov    %r8,%rdx
  2228ee:	e8 3d 3c fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2228f3:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  2228fa:	00 
  2228fb:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  222902:	00 
  222903:	48 8d 15 c6 97 01 00 	lea    0x197c6(%rip),%rdx        # 23c0d0 <memcmp+0x3390>
  22290a:	e8 71 04 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22290f:	e9 2f ff ff ff       	jmpq   222843 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x343>
  222914:	8a 44 24 46          	mov    0x46(%rsp),%al
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  222918:	a8 01                	test   $0x1,%al
  22291a:	75 0c                	jne    222928 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x428>
  22291c:	eb 00                	jmp    22291e <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x41e>
  22291e:	c6 84 24 b7 01 00 00 	movb   $0x0,0x1b7(%rsp)
  222925:	00 
  222926:	eb 5a                	jmp    222982 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x482>
  222928:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  22292f:	00 
  222930:	48 8b 3d 11 b2 01 00 	mov    0x1b211(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  222937:	0f b6 b4 24 2f 02 00 	movzbl 0x22f(%rsp),%esi
  22293e:	00 
  22293f:	e8 ac 88 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  222944:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  22294b:	00 
  22294c:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  222953:	00 
  222954:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22295b:	00 
  22295c:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  222963:	00 
  222964:	48 8d b4 24 b8 01 00 	lea    0x1b8(%rsp),%rsi
  22296b:	00 
  22296c:	e8 5f 06 ff ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  222971:	88 44 24 27          	mov    %al,0x27(%rsp)
  222975:	8a 44 24 27          	mov    0x27(%rsp),%al
  222979:	24 01                	and    $0x1,%al
  22297b:	88 84 24 b7 01 00 00 	mov    %al,0x1b7(%rsp)
  222982:	f6 84 24 b7 01 00 00 	testb  $0x1,0x1b7(%rsp)
  222989:	01 
  22298a:	75 08                	jne    222994 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x494>
}
  22298c:	48 81 c4 68 02 00 00 	add    $0x268,%rsp
  222993:	c3                   	retq   
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  222994:	48 8d 3d 2d 04 fe ff 	lea    -0x1fbd3(%rip),%rdi        # 202dc8 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22299b:	e8 80 46 00 00       	callq  227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2229a0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2229a5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2229aa:	48 83 c0 0c          	add    $0xc,%rax
  2229ae:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  2229b5:	00 
  2229b6:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  2229bd:	00 
  2229be:	48 89 bc 24 20 02 00 	mov    %rdi,0x220(%rsp)
  2229c5:	00 
  2229c6:	48 8b 35 e3 b1 01 00 	mov    0x1b1e3(%rip),%rsi        # 23dbb0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  2229cd:	e8 ce c6 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2229d2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2229d7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2229dc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2229e1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2229e6:	48 89 8c 24 f0 01 00 	mov    %rcx,0x1f0(%rsp)
  2229ed:	00 
  2229ee:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2229f5:	00 
  2229f6:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  2229fd:	00 
  2229fe:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  222a05:	00 
  222a06:	48 8d 35 fb 96 01 00 	lea    0x196fb(%rip),%rsi        # 23c108 <memcmp+0x33c8>
  222a0d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  222a13:	4c 89 c2             	mov    %r8,%rdx
  222a16:	e8 15 3b fe ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  222a1b:	48 8b b4 24 a8 01 00 	mov    0x1a8(%rsp),%rsi
  222a22:	00 
  222a23:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  222a2a:	00 
  222a2b:	48 8d 15 e6 96 01 00 	lea    0x196e6(%rip),%rdx        # 23c118 <memcmp+0x33d8>
  222a32:	e8 49 03 01 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  222a37:	e9 50 ff ff ff       	jmpq   22298c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x48c>
  222a3c:	cc                   	int3   
  222a3d:	cc                   	int3   
  222a3e:	cc                   	int3   
  222a3f:	cc                   	int3   

0000000000222a40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  222a40:	48 81 ec 68 04 00 00 	sub    $0x468,%rsp
  222a47:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  222a4c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  222a51:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  222a58:	00 
  222a59:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  222a60:	00 
                let mut first = true;
  222a61:	c6 44 24 75 01       	movb   $0x1,0x75(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  222a66:	e8 e5 18 00 00       	callq  224350 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E>
  222a6b:	88 44 24 73          	mov    %al,0x73(%rsp)
  222a6f:	8a 44 24 73          	mov    0x73(%rsp),%al
bitflags! {
  222a73:	a8 01                	test   $0x1,%al
  222a75:	75 15                	jne    222a8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4c>
  222a77:	eb 00                	jmp    222a79 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x39>
  222a79:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  222a7e:	e8 0d 19 00 00       	callq  224390 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE>
  222a83:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  222a87:	e9 ba 00 00 00       	jmpq   222b46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x106>
                        if !first {
  222a8c:	8a 44 24 75          	mov    0x75(%rsp),%al
  222a90:	34 ff                	xor    $0xff,%al
  222a92:	a8 01                	test   $0x1,%al
  222a94:	75 21                	jne    222ab7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x77>
  222a96:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222a9b:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222aa0:	48 8d 35 21 df fd ff 	lea    -0x220df(%rip),%rsi        # 2009c8 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x30>
  222aa7:	ba 04 00 00 00       	mov    $0x4,%edx
  222aac:	e8 ff 53 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222ab1:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  222ab5:	eb 5a                	jmp    222b11 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd1>
  222ab7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222abc:	48 8d 35 4b 02 fe ff 	lea    -0x1fdb5(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222ac3:	ba 03 00 00 00       	mov    $0x3,%edx
  222ac8:	e8 e3 53 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222acd:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  222ad1:	8a 44 24 5d          	mov    0x5d(%rsp),%al
  222ad5:	0f b6 f8             	movzbl %al,%edi
  222ad8:	83 e7 01             	and    $0x1,%edi
  222adb:	e8 b0 90 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222ae0:	24 01                	and    $0x1,%al
  222ae2:	88 44 24 76          	mov    %al,0x76(%rsp)
  222ae6:	0f b6 44 24 76       	movzbl 0x76(%rsp),%eax
  222aeb:	a8 01                	test   $0x1,%al
  222aed:	74 a7                	je     222a96 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x56>
  222aef:	eb 00                	jmp    222af1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb1>
  222af1:	eb 02                	jmp    222af5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb5>
  222af3:	0f 0b                	ud2    
  222af5:	e8 d6 81 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222afa:	24 01                	and    $0x1,%al
  222afc:	88 44 24 74          	mov    %al,0x74(%rsp)
            }
  222b00:	8a 44 24 74          	mov    0x74(%rsp),%al
  222b04:	24 01                	and    $0x1,%al
  222b06:	0f b6 c0             	movzbl %al,%eax
  222b09:	48 81 c4 68 04 00 00 	add    $0x468,%rsp
  222b10:	c3                   	retq   
  222b11:	8a 44 24 5e          	mov    0x5e(%rsp),%al
  222b15:	0f b6 f8             	movzbl %al,%edi
  222b18:	83 e7 01             	and    $0x1,%edi
  222b1b:	e8 70 90 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222b20:	24 01                	and    $0x1,%al
  222b22:	88 44 24 77          	mov    %al,0x77(%rsp)
  222b26:	0f b6 44 24 77       	movzbl 0x77(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  222b2b:	a8 01                	test   $0x1,%al
  222b2d:	0f 84 46 ff ff ff    	je     222a79 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x39>
  222b33:	eb 00                	jmp    222b35 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5>
  222b35:	eb 02                	jmp    222b39 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf9>
  222b37:	0f 0b                	ud2    
  222b39:	e8 92 81 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222b3e:	24 01                	and    $0x1,%al
  222b40:	88 44 24 74          	mov    %al,0x74(%rsp)
  222b44:	eb ba                	jmp    222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222b46:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  222b4a:	a8 01                	test   $0x1,%al
  222b4c:	75 15                	jne    222b63 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x123>
  222b4e:	eb 00                	jmp    222b50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110>
  222b50:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222b55:	e8 76 18 00 00       	callq  2243d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E>
  222b5a:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  222b5e:	e9 b1 00 00 00       	jmpq   222c14 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1d4>
                        if !first {
  222b63:	8a 44 24 75          	mov    0x75(%rsp),%al
  222b67:	34 ff                	xor    $0xff,%al
  222b69:	a8 01                	test   $0x1,%al
  222b6b:	75 21                	jne    222b8e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14e>
  222b6d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222b72:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222b77:	48 8d 35 93 01 fe ff 	lea    -0x1fe6d(%rip),%rsi        # 202d11 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x159>
  222b7e:	ba 06 00 00 00       	mov    $0x6,%edx
  222b83:	e8 28 53 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222b88:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  222b8c:	eb 4e                	jmp    222bdc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x19c>
  222b8e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222b93:	48 8d 35 74 01 fe ff 	lea    -0x1fe8c(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222b9a:	ba 03 00 00 00       	mov    $0x3,%edx
  222b9f:	e8 0c 53 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222ba4:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  222ba8:	8a 44 24 5a          	mov    0x5a(%rsp),%al
  222bac:	0f b6 f8             	movzbl %al,%edi
  222baf:	83 e7 01             	and    $0x1,%edi
  222bb2:	e8 d9 8f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222bb7:	24 01                	and    $0x1,%al
  222bb9:	88 44 24 78          	mov    %al,0x78(%rsp)
  222bbd:	0f b6 44 24 78       	movzbl 0x78(%rsp),%eax
  222bc2:	a8 01                	test   $0x1,%al
  222bc4:	74 a7                	je     222b6d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12d>
  222bc6:	eb 00                	jmp    222bc8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x188>
  222bc8:	eb 02                	jmp    222bcc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x18c>
  222bca:	0f 0b                	ud2    
  222bcc:	e8 ff 80 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222bd1:	24 01                	and    $0x1,%al
  222bd3:	88 44 24 74          	mov    %al,0x74(%rsp)
  222bd7:	e9 24 ff ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222bdc:	8a 44 24 5b          	mov    0x5b(%rsp),%al
  222be0:	0f b6 f8             	movzbl %al,%edi
  222be3:	83 e7 01             	and    $0x1,%edi
  222be6:	e8 a5 8f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222beb:	24 01                	and    $0x1,%al
  222bed:	88 44 24 79          	mov    %al,0x79(%rsp)
  222bf1:	0f b6 44 24 79       	movzbl 0x79(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  222bf6:	a8 01                	test   $0x1,%al
  222bf8:	0f 84 52 ff ff ff    	je     222b50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110>
  222bfe:	eb 00                	jmp    222c00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1c0>
  222c00:	eb 02                	jmp    222c04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1c4>
  222c02:	0f 0b                	ud2    
  222c04:	e8 c7 80 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222c09:	24 01                	and    $0x1,%al
  222c0b:	88 44 24 74          	mov    %al,0x74(%rsp)
  222c0f:	e9 ec fe ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222c14:	8a 44 24 5c          	mov    0x5c(%rsp),%al
  222c18:	a8 01                	test   $0x1,%al
  222c1a:	75 15                	jne    222c31 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1f1>
  222c1c:	eb 00                	jmp    222c1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1de>
  222c1e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222c23:	e8 e8 17 00 00       	callq  224410 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE>
  222c28:	88 44 24 59          	mov    %al,0x59(%rsp)
  222c2c:	e9 b1 00 00 00       	jmpq   222ce2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2a2>
                        if !first {
  222c31:	8a 44 24 75          	mov    0x75(%rsp),%al
  222c35:	34 ff                	xor    $0xff,%al
  222c37:	a8 01                	test   $0x1,%al
  222c39:	75 21                	jne    222c5c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x21c>
  222c3b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222c40:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222c45:	48 8d 35 cb 00 fe ff 	lea    -0x1ff35(%rip),%rsi        # 202d17 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x15f>
  222c4c:	ba 06 00 00 00       	mov    $0x6,%edx
  222c51:	e8 5a 52 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222c56:	88 44 24 58          	mov    %al,0x58(%rsp)
  222c5a:	eb 4e                	jmp    222caa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x26a>
  222c5c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222c61:	48 8d 35 a6 00 fe ff 	lea    -0x1ff5a(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222c68:	ba 03 00 00 00       	mov    $0x3,%edx
  222c6d:	e8 3e 52 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222c72:	88 44 24 57          	mov    %al,0x57(%rsp)
  222c76:	8a 44 24 57          	mov    0x57(%rsp),%al
  222c7a:	0f b6 f8             	movzbl %al,%edi
  222c7d:	83 e7 01             	and    $0x1,%edi
  222c80:	e8 0b 8f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222c85:	24 01                	and    $0x1,%al
  222c87:	88 44 24 7a          	mov    %al,0x7a(%rsp)
  222c8b:	0f b6 44 24 7a       	movzbl 0x7a(%rsp),%eax
  222c90:	a8 01                	test   $0x1,%al
  222c92:	74 a7                	je     222c3b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1fb>
  222c94:	eb 00                	jmp    222c96 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x256>
  222c96:	eb 02                	jmp    222c9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x25a>
  222c98:	0f 0b                	ud2    
  222c9a:	e8 31 80 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222c9f:	24 01                	and    $0x1,%al
  222ca1:	88 44 24 74          	mov    %al,0x74(%rsp)
  222ca5:	e9 56 fe ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222caa:	8a 44 24 58          	mov    0x58(%rsp),%al
  222cae:	0f b6 f8             	movzbl %al,%edi
  222cb1:	83 e7 01             	and    $0x1,%edi
  222cb4:	e8 d7 8e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222cb9:	24 01                	and    $0x1,%al
  222cbb:	88 44 24 7b          	mov    %al,0x7b(%rsp)
  222cbf:	0f b6 44 24 7b       	movzbl 0x7b(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  222cc4:	a8 01                	test   $0x1,%al
  222cc6:	0f 84 52 ff ff ff    	je     222c1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1de>
  222ccc:	eb 00                	jmp    222cce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x28e>
  222cce:	eb 02                	jmp    222cd2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x292>
  222cd0:	0f 0b                	ud2    
  222cd2:	e8 f9 7f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222cd7:	24 01                	and    $0x1,%al
  222cd9:	88 44 24 74          	mov    %al,0x74(%rsp)
  222cdd:	e9 1e fe ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222ce2:	8a 44 24 59          	mov    0x59(%rsp),%al
  222ce6:	a8 01                	test   $0x1,%al
  222ce8:	75 15                	jne    222cff <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2bf>
  222cea:	eb 00                	jmp    222cec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ac>
  222cec:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222cf1:	e8 5a 17 00 00       	callq  224450 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E>
  222cf6:	88 44 24 56          	mov    %al,0x56(%rsp)
  222cfa:	e9 b1 00 00 00       	jmpq   222db0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x370>
                        if !first {
  222cff:	8a 44 24 75          	mov    0x75(%rsp),%al
  222d03:	34 ff                	xor    $0xff,%al
  222d05:	a8 01                	test   $0x1,%al
  222d07:	75 21                	jne    222d2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ea>
  222d09:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222d0e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222d13:	48 8d 35 03 00 fe ff 	lea    -0x1fffd(%rip),%rsi        # 202d1d <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x165>
  222d1a:	ba 07 00 00 00       	mov    $0x7,%edx
  222d1f:	e8 8c 51 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222d24:	88 44 24 55          	mov    %al,0x55(%rsp)
  222d28:	eb 4e                	jmp    222d78 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x338>
  222d2a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222d2f:	48 8d 35 d8 ff fd ff 	lea    -0x20028(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222d36:	ba 03 00 00 00       	mov    $0x3,%edx
  222d3b:	e8 70 51 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222d40:	88 44 24 54          	mov    %al,0x54(%rsp)
  222d44:	8a 44 24 54          	mov    0x54(%rsp),%al
  222d48:	0f b6 f8             	movzbl %al,%edi
  222d4b:	83 e7 01             	and    $0x1,%edi
  222d4e:	e8 3d 8e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222d53:	24 01                	and    $0x1,%al
  222d55:	88 44 24 7c          	mov    %al,0x7c(%rsp)
  222d59:	0f b6 44 24 7c       	movzbl 0x7c(%rsp),%eax
  222d5e:	a8 01                	test   $0x1,%al
  222d60:	74 a7                	je     222d09 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2c9>
  222d62:	eb 00                	jmp    222d64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x324>
  222d64:	eb 02                	jmp    222d68 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x328>
  222d66:	0f 0b                	ud2    
  222d68:	e8 63 7f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222d6d:	24 01                	and    $0x1,%al
  222d6f:	88 44 24 74          	mov    %al,0x74(%rsp)
  222d73:	e9 88 fd ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222d78:	8a 44 24 55          	mov    0x55(%rsp),%al
  222d7c:	0f b6 f8             	movzbl %al,%edi
  222d7f:	83 e7 01             	and    $0x1,%edi
  222d82:	e8 09 8e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222d87:	24 01                	and    $0x1,%al
  222d89:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  222d8d:	0f b6 44 24 7d       	movzbl 0x7d(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  222d92:	a8 01                	test   $0x1,%al
  222d94:	0f 84 52 ff ff ff    	je     222cec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ac>
  222d9a:	eb 00                	jmp    222d9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x35c>
  222d9c:	eb 02                	jmp    222da0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x360>
  222d9e:	0f 0b                	ud2    
  222da0:	e8 2b 7f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222da5:	24 01                	and    $0x1,%al
  222da7:	88 44 24 74          	mov    %al,0x74(%rsp)
  222dab:	e9 50 fd ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222db0:	8a 44 24 56          	mov    0x56(%rsp),%al
  222db4:	a8 01                	test   $0x1,%al
  222db6:	75 15                	jne    222dcd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x38d>
  222db8:	eb 00                	jmp    222dba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x37a>
  222dba:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222dbf:	e8 cc 16 00 00       	callq  224490 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E>
  222dc4:	88 44 24 53          	mov    %al,0x53(%rsp)
  222dc8:	e9 b1 00 00 00       	jmpq   222e7e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x43e>
                        if !first {
  222dcd:	8a 44 24 75          	mov    0x75(%rsp),%al
  222dd1:	34 ff                	xor    $0xff,%al
  222dd3:	a8 01                	test   $0x1,%al
  222dd5:	75 21                	jne    222df8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3b8>
  222dd7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222ddc:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222de1:	48 8d 35 3c ff fd ff 	lea    -0x200c4(%rip),%rsi        # 202d24 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x16c>
  222de8:	ba 06 00 00 00       	mov    $0x6,%edx
  222ded:	e8 be 50 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222df2:	88 44 24 52          	mov    %al,0x52(%rsp)
  222df6:	eb 4e                	jmp    222e46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x406>
  222df8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222dfd:	48 8d 35 0a ff fd ff 	lea    -0x200f6(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222e04:	ba 03 00 00 00       	mov    $0x3,%edx
  222e09:	e8 a2 50 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222e0e:	88 44 24 51          	mov    %al,0x51(%rsp)
  222e12:	8a 44 24 51          	mov    0x51(%rsp),%al
  222e16:	0f b6 f8             	movzbl %al,%edi
  222e19:	83 e7 01             	and    $0x1,%edi
  222e1c:	e8 6f 8d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222e21:	24 01                	and    $0x1,%al
  222e23:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222e27:	0f b6 44 24 7e       	movzbl 0x7e(%rsp),%eax
  222e2c:	a8 01                	test   $0x1,%al
  222e2e:	74 a7                	je     222dd7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x397>
  222e30:	eb 00                	jmp    222e32 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3f2>
  222e32:	eb 02                	jmp    222e36 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3f6>
  222e34:	0f 0b                	ud2    
  222e36:	e8 95 7e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222e3b:	24 01                	and    $0x1,%al
  222e3d:	88 44 24 74          	mov    %al,0x74(%rsp)
  222e41:	e9 ba fc ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222e46:	8a 44 24 52          	mov    0x52(%rsp),%al
  222e4a:	0f b6 f8             	movzbl %al,%edi
  222e4d:	83 e7 01             	and    $0x1,%edi
  222e50:	e8 3b 8d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222e55:	24 01                	and    $0x1,%al
  222e57:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  222e5b:	0f b6 44 24 7f       	movzbl 0x7f(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  222e60:	a8 01                	test   $0x1,%al
  222e62:	0f 84 52 ff ff ff    	je     222dba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x37a>
  222e68:	eb 00                	jmp    222e6a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x42a>
  222e6a:	eb 02                	jmp    222e6e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x42e>
  222e6c:	0f 0b                	ud2    
  222e6e:	e8 5d 7e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222e73:	24 01                	and    $0x1,%al
  222e75:	88 44 24 74          	mov    %al,0x74(%rsp)
  222e79:	e9 82 fc ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222e7e:	8a 44 24 53          	mov    0x53(%rsp),%al
  222e82:	a8 01                	test   $0x1,%al
  222e84:	75 15                	jne    222e9b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x45b>
  222e86:	eb 00                	jmp    222e88 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x448>
  222e88:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222e8d:	e8 3e 16 00 00       	callq  2244d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE>
  222e92:	88 44 24 50          	mov    %al,0x50(%rsp)
  222e96:	e9 bd 00 00 00       	jmpq   222f58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x518>
                        if !first {
  222e9b:	8a 44 24 75          	mov    0x75(%rsp),%al
  222e9f:	34 ff                	xor    $0xff,%al
  222ea1:	a8 01                	test   $0x1,%al
  222ea3:	75 21                	jne    222ec6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x486>
  222ea5:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222eaa:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222eaf:	48 8d 35 74 fe fd ff 	lea    -0x2018c(%rip),%rsi        # 202d2a <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x172>
  222eb6:	ba 03 00 00 00       	mov    $0x3,%edx
  222ebb:	e8 f0 4f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222ec0:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  222ec4:	eb 54                	jmp    222f1a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4da>
  222ec6:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222ecb:	48 8d 35 3c fe fd ff 	lea    -0x201c4(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222ed2:	ba 03 00 00 00       	mov    $0x3,%edx
  222ed7:	e8 d4 4f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222edc:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  222ee0:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  222ee4:	0f b6 f8             	movzbl %al,%edi
  222ee7:	83 e7 01             	and    $0x1,%edi
  222eea:	e8 a1 8c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222eef:	24 01                	and    $0x1,%al
  222ef1:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  222ef8:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  222eff:	00 
  222f00:	a8 01                	test   $0x1,%al
  222f02:	74 a1                	je     222ea5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x465>
  222f04:	eb 00                	jmp    222f06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4c6>
  222f06:	eb 02                	jmp    222f0a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4ca>
  222f08:	0f 0b                	ud2    
  222f0a:	e8 c1 7d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222f0f:	24 01                	and    $0x1,%al
  222f11:	88 44 24 74          	mov    %al,0x74(%rsp)
  222f15:	e9 e6 fb ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222f1a:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  222f1e:	0f b6 f8             	movzbl %al,%edi
  222f21:	83 e7 01             	and    $0x1,%edi
  222f24:	e8 67 8c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222f29:	24 01                	and    $0x1,%al
  222f2b:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  222f32:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  222f39:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  222f3a:	a8 01                	test   $0x1,%al
  222f3c:	0f 84 46 ff ff ff    	je     222e88 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x448>
  222f42:	eb 00                	jmp    222f44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x504>
  222f44:	eb 02                	jmp    222f48 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x508>
  222f46:	0f 0b                	ud2    
  222f48:	e8 83 7d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222f4d:	24 01                	and    $0x1,%al
  222f4f:	88 44 24 74          	mov    %al,0x74(%rsp)
  222f53:	e9 a8 fb ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222f58:	8a 44 24 50          	mov    0x50(%rsp),%al
  222f5c:	a8 01                	test   $0x1,%al
  222f5e:	75 15                	jne    222f75 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x535>
  222f60:	eb 00                	jmp    222f62 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x522>
  222f62:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  222f67:	e8 a4 15 00 00       	callq  224510 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E>
  222f6c:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  222f70:	e9 bd 00 00 00       	jmpq   223032 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5f2>
                        if !first {
  222f75:	8a 44 24 75          	mov    0x75(%rsp),%al
  222f79:	34 ff                	xor    $0xff,%al
  222f7b:	a8 01                	test   $0x1,%al
  222f7d:	75 21                	jne    222fa0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x560>
  222f7f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  222f84:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222f89:	48 8d 35 9d fd fd ff 	lea    -0x20263(%rip),%rsi        # 202d2d <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x175>
  222f90:	ba 03 00 00 00       	mov    $0x3,%edx
  222f95:	e8 16 4f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222f9a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  222f9e:	eb 54                	jmp    222ff4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5b4>
  222fa0:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  222fa5:	48 8d 35 62 fd fd ff 	lea    -0x2029e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  222fac:	ba 03 00 00 00       	mov    $0x3,%edx
  222fb1:	e8 fa 4e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222fb6:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  222fba:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  222fbe:	0f b6 f8             	movzbl %al,%edi
  222fc1:	83 e7 01             	and    $0x1,%edi
  222fc4:	e8 c7 8b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222fc9:	24 01                	and    $0x1,%al
  222fcb:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  222fd2:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  222fd9:	00 
  222fda:	a8 01                	test   $0x1,%al
  222fdc:	74 a1                	je     222f7f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x53f>
  222fde:	eb 00                	jmp    222fe0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5a0>
  222fe0:	eb 02                	jmp    222fe4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5a4>
  222fe2:	0f 0b                	ud2    
  222fe4:	e8 e7 7c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222fe9:	24 01                	and    $0x1,%al
  222feb:	88 44 24 74          	mov    %al,0x74(%rsp)
  222fef:	e9 0c fb ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  222ff4:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  222ff8:	0f b6 f8             	movzbl %al,%edi
  222ffb:	83 e7 01             	and    $0x1,%edi
  222ffe:	e8 8d 8b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223003:	24 01                	and    $0x1,%al
  223005:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  22300c:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  223013:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223014:	a8 01                	test   $0x1,%al
  223016:	0f 84 46 ff ff ff    	je     222f62 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x522>
  22301c:	eb 00                	jmp    22301e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5de>
  22301e:	eb 02                	jmp    223022 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5e2>
  223020:	0f 0b                	ud2    
  223022:	e8 a9 7c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223027:	24 01                	and    $0x1,%al
  223029:	88 44 24 74          	mov    %al,0x74(%rsp)
  22302d:	e9 ce fa ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223032:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  223036:	a8 01                	test   $0x1,%al
  223038:	75 15                	jne    22304f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x60f>
  22303a:	eb 00                	jmp    22303c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5fc>
  22303c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223041:	e8 1a 15 00 00       	callq  224560 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E>
  223046:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  22304a:	e9 bd 00 00 00       	jmpq   22310c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6cc>
                        if !first {
  22304f:	8a 44 24 75          	mov    0x75(%rsp),%al
  223053:	34 ff                	xor    $0xff,%al
  223055:	a8 01                	test   $0x1,%al
  223057:	75 21                	jne    22307a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x63a>
  223059:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22305e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223063:	48 8d 35 c6 fc fd ff 	lea    -0x2033a(%rip),%rsi        # 202d30 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x178>
  22306a:	ba 03 00 00 00       	mov    $0x3,%edx
  22306f:	e8 3c 4e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223074:	88 44 24 49          	mov    %al,0x49(%rsp)
  223078:	eb 54                	jmp    2230ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x68e>
  22307a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22307f:	48 8d 35 88 fc fd ff 	lea    -0x20378(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223086:	ba 03 00 00 00       	mov    $0x3,%edx
  22308b:	e8 20 4e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223090:	88 44 24 48          	mov    %al,0x48(%rsp)
  223094:	8a 44 24 48          	mov    0x48(%rsp),%al
  223098:	0f b6 f8             	movzbl %al,%edi
  22309b:	83 e7 01             	and    $0x1,%edi
  22309e:	e8 ed 8a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2230a3:	24 01                	and    $0x1,%al
  2230a5:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  2230ac:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  2230b3:	00 
  2230b4:	a8 01                	test   $0x1,%al
  2230b6:	74 a1                	je     223059 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x619>
  2230b8:	eb 00                	jmp    2230ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x67a>
  2230ba:	eb 02                	jmp    2230be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x67e>
  2230bc:	0f 0b                	ud2    
  2230be:	e8 0d 7c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2230c3:	24 01                	and    $0x1,%al
  2230c5:	88 44 24 74          	mov    %al,0x74(%rsp)
  2230c9:	e9 32 fa ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2230ce:	8a 44 24 49          	mov    0x49(%rsp),%al
  2230d2:	0f b6 f8             	movzbl %al,%edi
  2230d5:	83 e7 01             	and    $0x1,%edi
  2230d8:	e8 b3 8a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2230dd:	24 01                	and    $0x1,%al
  2230df:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  2230e6:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  2230ed:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2230ee:	a8 01                	test   $0x1,%al
  2230f0:	0f 84 46 ff ff ff    	je     22303c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5fc>
  2230f6:	eb 00                	jmp    2230f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6b8>
  2230f8:	eb 02                	jmp    2230fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6bc>
  2230fa:	0f 0b                	ud2    
  2230fc:	e8 cf 7b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223101:	24 01                	and    $0x1,%al
  223103:	88 44 24 74          	mov    %al,0x74(%rsp)
  223107:	e9 f4 f9 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22310c:	8a 44 24 4a          	mov    0x4a(%rsp),%al
  223110:	a8 01                	test   $0x1,%al
  223112:	75 15                	jne    223129 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6e9>
  223114:	eb 00                	jmp    223116 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6d6>
  223116:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22311b:	e8 90 14 00 00       	callq  2245b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE>
  223120:	88 44 24 47          	mov    %al,0x47(%rsp)
  223124:	e9 bd 00 00 00       	jmpq   2231e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7a6>
                        if !first {
  223129:	8a 44 24 75          	mov    0x75(%rsp),%al
  22312d:	34 ff                	xor    $0xff,%al
  22312f:	a8 01                	test   $0x1,%al
  223131:	75 21                	jne    223154 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x714>
  223133:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223138:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22313d:	48 8d 35 ef fb fd ff 	lea    -0x20411(%rip),%rsi        # 202d33 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x17b>
  223144:	ba 03 00 00 00       	mov    $0x3,%edx
  223149:	e8 62 4d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22314e:	88 44 24 46          	mov    %al,0x46(%rsp)
  223152:	eb 54                	jmp    2231a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x768>
  223154:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223159:	48 8d 35 ae fb fd ff 	lea    -0x20452(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223160:	ba 03 00 00 00       	mov    $0x3,%edx
  223165:	e8 46 4d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22316a:	88 44 24 45          	mov    %al,0x45(%rsp)
  22316e:	8a 44 24 45          	mov    0x45(%rsp),%al
  223172:	0f b6 f8             	movzbl %al,%edi
  223175:	83 e7 01             	and    $0x1,%edi
  223178:	e8 13 8a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22317d:	24 01                	and    $0x1,%al
  22317f:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  223186:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  22318d:	00 
  22318e:	a8 01                	test   $0x1,%al
  223190:	74 a1                	je     223133 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6f3>
  223192:	eb 00                	jmp    223194 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x754>
  223194:	eb 02                	jmp    223198 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x758>
  223196:	0f 0b                	ud2    
  223198:	e8 33 7b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22319d:	24 01                	and    $0x1,%al
  22319f:	88 44 24 74          	mov    %al,0x74(%rsp)
  2231a3:	e9 58 f9 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2231a8:	8a 44 24 46          	mov    0x46(%rsp),%al
  2231ac:	0f b6 f8             	movzbl %al,%edi
  2231af:	83 e7 01             	and    $0x1,%edi
  2231b2:	e8 d9 89 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2231b7:	24 01                	and    $0x1,%al
  2231b9:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  2231c0:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  2231c7:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2231c8:	a8 01                	test   $0x1,%al
  2231ca:	0f 84 46 ff ff ff    	je     223116 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6d6>
  2231d0:	eb 00                	jmp    2231d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x792>
  2231d2:	eb 02                	jmp    2231d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x796>
  2231d4:	0f 0b                	ud2    
  2231d6:	e8 f5 7a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2231db:	24 01                	and    $0x1,%al
  2231dd:	88 44 24 74          	mov    %al,0x74(%rsp)
  2231e1:	e9 1a f9 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2231e6:	8a 44 24 47          	mov    0x47(%rsp),%al
  2231ea:	a8 01                	test   $0x1,%al
  2231ec:	75 15                	jne    223203 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7c3>
  2231ee:	eb 00                	jmp    2231f0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7b0>
  2231f0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2231f5:	e8 06 14 00 00       	callq  224600 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE>
  2231fa:	88 44 24 44          	mov    %al,0x44(%rsp)
  2231fe:	e9 bd 00 00 00       	jmpq   2232c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x880>
                        if !first {
  223203:	8a 44 24 75          	mov    0x75(%rsp),%al
  223207:	34 ff                	xor    $0xff,%al
  223209:	a8 01                	test   $0x1,%al
  22320b:	75 21                	jne    22322e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7ee>
  22320d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223212:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223217:	48 8d 35 18 fb fd ff 	lea    -0x204e8(%rip),%rsi        # 202d36 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x17e>
  22321e:	ba 05 00 00 00       	mov    $0x5,%edx
  223223:	e8 88 4c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223228:	88 44 24 43          	mov    %al,0x43(%rsp)
  22322c:	eb 54                	jmp    223282 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x842>
  22322e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223233:	48 8d 35 d4 fa fd ff 	lea    -0x2052c(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22323a:	ba 03 00 00 00       	mov    $0x3,%edx
  22323f:	e8 6c 4c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223244:	88 44 24 42          	mov    %al,0x42(%rsp)
  223248:	8a 44 24 42          	mov    0x42(%rsp),%al
  22324c:	0f b6 f8             	movzbl %al,%edi
  22324f:	83 e7 01             	and    $0x1,%edi
  223252:	e8 39 89 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223257:	24 01                	and    $0x1,%al
  223259:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  223260:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  223267:	00 
  223268:	a8 01                	test   $0x1,%al
  22326a:	74 a1                	je     22320d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7cd>
  22326c:	eb 00                	jmp    22326e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x82e>
  22326e:	eb 02                	jmp    223272 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x832>
  223270:	0f 0b                	ud2    
  223272:	e8 59 7a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223277:	24 01                	and    $0x1,%al
  223279:	88 44 24 74          	mov    %al,0x74(%rsp)
  22327d:	e9 7e f8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223282:	8a 44 24 43          	mov    0x43(%rsp),%al
  223286:	0f b6 f8             	movzbl %al,%edi
  223289:	83 e7 01             	and    $0x1,%edi
  22328c:	e8 ff 88 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223291:	24 01                	and    $0x1,%al
  223293:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  22329a:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  2232a1:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2232a2:	a8 01                	test   $0x1,%al
  2232a4:	0f 84 46 ff ff ff    	je     2231f0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7b0>
  2232aa:	eb 00                	jmp    2232ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x86c>
  2232ac:	eb 02                	jmp    2232b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x870>
  2232ae:	0f 0b                	ud2    
  2232b0:	e8 1b 7a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2232b5:	24 01                	and    $0x1,%al
  2232b7:	88 44 24 74          	mov    %al,0x74(%rsp)
  2232bb:	e9 40 f8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2232c0:	8a 44 24 44          	mov    0x44(%rsp),%al
  2232c4:	a8 01                	test   $0x1,%al
  2232c6:	75 15                	jne    2232dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x89d>
  2232c8:	eb 00                	jmp    2232ca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x88a>
  2232ca:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2232cf:	e8 7c 13 00 00       	callq  224650 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE>
  2232d4:	88 44 24 41          	mov    %al,0x41(%rsp)
  2232d8:	e9 bd 00 00 00       	jmpq   22339a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x95a>
                        if !first {
  2232dd:	8a 44 24 75          	mov    0x75(%rsp),%al
  2232e1:	34 ff                	xor    $0xff,%al
  2232e3:	a8 01                	test   $0x1,%al
  2232e5:	75 21                	jne    223308 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x8c8>
  2232e7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2232ec:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2232f1:	48 8d 35 43 fa fd ff 	lea    -0x205bd(%rip),%rsi        # 202d3b <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x183>
  2232f8:	ba 03 00 00 00       	mov    $0x3,%edx
  2232fd:	e8 ae 4b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223302:	88 44 24 40          	mov    %al,0x40(%rsp)
  223306:	eb 54                	jmp    22335c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x91c>
  223308:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22330d:	48 8d 35 fa f9 fd ff 	lea    -0x20606(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223314:	ba 03 00 00 00       	mov    $0x3,%edx
  223319:	e8 92 4b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22331e:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  223322:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  223326:	0f b6 f8             	movzbl %al,%edi
  223329:	83 e7 01             	and    $0x1,%edi
  22332c:	e8 5f 88 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223331:	24 01                	and    $0x1,%al
  223333:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  22333a:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  223341:	00 
  223342:	a8 01                	test   $0x1,%al
  223344:	74 a1                	je     2232e7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x8a7>
  223346:	eb 00                	jmp    223348 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x908>
  223348:	eb 02                	jmp    22334c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x90c>
  22334a:	0f 0b                	ud2    
  22334c:	e8 7f 79 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223351:	24 01                	and    $0x1,%al
  223353:	88 44 24 74          	mov    %al,0x74(%rsp)
  223357:	e9 a4 f7 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22335c:	8a 44 24 40          	mov    0x40(%rsp),%al
  223360:	0f b6 f8             	movzbl %al,%edi
  223363:	83 e7 01             	and    $0x1,%edi
  223366:	e8 25 88 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22336b:	24 01                	and    $0x1,%al
  22336d:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  223374:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  22337b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22337c:	a8 01                	test   $0x1,%al
  22337e:	0f 84 46 ff ff ff    	je     2232ca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x88a>
  223384:	eb 00                	jmp    223386 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x946>
  223386:	eb 02                	jmp    22338a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x94a>
  223388:	0f 0b                	ud2    
  22338a:	e8 41 79 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22338f:	24 01                	and    $0x1,%al
  223391:	88 44 24 74          	mov    %al,0x74(%rsp)
  223395:	e9 66 f7 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22339a:	8a 44 24 41          	mov    0x41(%rsp),%al
  22339e:	a8 01                	test   $0x1,%al
  2233a0:	75 15                	jne    2233b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x977>
  2233a2:	eb 00                	jmp    2233a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x964>
  2233a4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2233a9:	e8 f2 12 00 00       	callq  2246a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE>
  2233ae:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  2233b2:	e9 bd 00 00 00       	jmpq   223474 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa34>
                        if !first {
  2233b7:	8a 44 24 75          	mov    0x75(%rsp),%al
  2233bb:	34 ff                	xor    $0xff,%al
  2233bd:	a8 01                	test   $0x1,%al
  2233bf:	75 21                	jne    2233e2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9a2>
  2233c1:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2233c6:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2233cb:	48 8d 35 6c f9 fd ff 	lea    -0x20694(%rip),%rsi        # 202d3e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x186>
  2233d2:	ba 03 00 00 00       	mov    $0x3,%edx
  2233d7:	e8 d4 4a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2233dc:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  2233e0:	eb 54                	jmp    223436 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9f6>
  2233e2:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2233e7:	48 8d 35 20 f9 fd ff 	lea    -0x206e0(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2233ee:	ba 03 00 00 00       	mov    $0x3,%edx
  2233f3:	e8 b8 4a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2233f8:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  2233fc:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  223400:	0f b6 f8             	movzbl %al,%edi
  223403:	83 e7 01             	and    $0x1,%edi
  223406:	e8 85 87 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22340b:	24 01                	and    $0x1,%al
  22340d:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  223414:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  22341b:	00 
  22341c:	a8 01                	test   $0x1,%al
  22341e:	74 a1                	je     2233c1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x981>
  223420:	eb 00                	jmp    223422 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9e2>
  223422:	eb 02                	jmp    223426 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9e6>
  223424:	0f 0b                	ud2    
  223426:	e8 a5 78 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22342b:	24 01                	and    $0x1,%al
  22342d:	88 44 24 74          	mov    %al,0x74(%rsp)
  223431:	e9 ca f6 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223436:	8a 44 24 3d          	mov    0x3d(%rsp),%al
  22343a:	0f b6 f8             	movzbl %al,%edi
  22343d:	83 e7 01             	and    $0x1,%edi
  223440:	e8 4b 87 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223445:	24 01                	and    $0x1,%al
  223447:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  22344e:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  223455:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223456:	a8 01                	test   $0x1,%al
  223458:	0f 84 46 ff ff ff    	je     2233a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x964>
  22345e:	eb 00                	jmp    223460 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa20>
  223460:	eb 02                	jmp    223464 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa24>
  223462:	0f 0b                	ud2    
  223464:	e8 67 78 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223469:	24 01                	and    $0x1,%al
  22346b:	88 44 24 74          	mov    %al,0x74(%rsp)
  22346f:	e9 8c f6 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223474:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  223478:	a8 01                	test   $0x1,%al
  22347a:	75 15                	jne    223491 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa51>
  22347c:	eb 00                	jmp    22347e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa3e>
  22347e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223483:	e8 68 12 00 00       	callq  2246f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E>
  223488:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  22348c:	e9 bd 00 00 00       	jmpq   22354e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb0e>
                        if !first {
  223491:	8a 44 24 75          	mov    0x75(%rsp),%al
  223495:	34 ff                	xor    $0xff,%al
  223497:	a8 01                	test   $0x1,%al
  223499:	75 21                	jne    2234bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa7c>
  22349b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2234a0:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2234a5:	48 8d 35 18 d5 fd ff 	lea    -0x22ae8(%rip),%rsi        # 2009c4 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x2c>
  2234ac:	ba 04 00 00 00       	mov    $0x4,%edx
  2234b1:	e8 fa 49 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2234b6:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  2234ba:	eb 54                	jmp    223510 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xad0>
  2234bc:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2234c1:	48 8d 35 46 f8 fd ff 	lea    -0x207ba(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2234c8:	ba 03 00 00 00       	mov    $0x3,%edx
  2234cd:	e8 de 49 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2234d2:	88 44 24 39          	mov    %al,0x39(%rsp)
  2234d6:	8a 44 24 39          	mov    0x39(%rsp),%al
  2234da:	0f b6 f8             	movzbl %al,%edi
  2234dd:	83 e7 01             	and    $0x1,%edi
  2234e0:	e8 ab 86 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2234e5:	24 01                	and    $0x1,%al
  2234e7:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  2234ee:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  2234f5:	00 
  2234f6:	a8 01                	test   $0x1,%al
  2234f8:	74 a1                	je     22349b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa5b>
  2234fa:	eb 00                	jmp    2234fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xabc>
  2234fc:	eb 02                	jmp    223500 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xac0>
  2234fe:	0f 0b                	ud2    
  223500:	e8 cb 77 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223505:	24 01                	and    $0x1,%al
  223507:	88 44 24 74          	mov    %al,0x74(%rsp)
  22350b:	e9 f0 f5 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223510:	8a 44 24 3a          	mov    0x3a(%rsp),%al
  223514:	0f b6 f8             	movzbl %al,%edi
  223517:	83 e7 01             	and    $0x1,%edi
  22351a:	e8 71 86 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22351f:	24 01                	and    $0x1,%al
  223521:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  223528:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  22352f:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223530:	a8 01                	test   $0x1,%al
  223532:	0f 84 46 ff ff ff    	je     22347e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa3e>
  223538:	eb 00                	jmp    22353a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xafa>
  22353a:	eb 02                	jmp    22353e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xafe>
  22353c:	0f 0b                	ud2    
  22353e:	e8 8d 77 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223543:	24 01                	and    $0x1,%al
  223545:	88 44 24 74          	mov    %al,0x74(%rsp)
  223549:	e9 b2 f5 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22354e:	8a 44 24 3b          	mov    0x3b(%rsp),%al
  223552:	a8 01                	test   $0x1,%al
  223554:	75 15                	jne    22356b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb2b>
  223556:	eb 00                	jmp    223558 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb18>
  223558:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22355d:	e8 de 11 00 00       	callq  224740 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE>
  223562:	88 44 24 38          	mov    %al,0x38(%rsp)
  223566:	e9 bd 00 00 00       	jmpq   223628 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbe8>
                        if !first {
  22356b:	8a 44 24 75          	mov    0x75(%rsp),%al
  22356f:	34 ff                	xor    $0xff,%al
  223571:	a8 01                	test   $0x1,%al
  223573:	75 21                	jne    223596 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb56>
  223575:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22357a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22357f:	48 8d 35 bb f7 fd ff 	lea    -0x20845(%rip),%rsi        # 202d41 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x189>
  223586:	ba 05 00 00 00       	mov    $0x5,%edx
  22358b:	e8 20 49 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223590:	88 44 24 37          	mov    %al,0x37(%rsp)
  223594:	eb 54                	jmp    2235ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbaa>
  223596:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22359b:	48 8d 35 6c f7 fd ff 	lea    -0x20894(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2235a2:	ba 03 00 00 00       	mov    $0x3,%edx
  2235a7:	e8 04 49 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2235ac:	88 44 24 36          	mov    %al,0x36(%rsp)
  2235b0:	8a 44 24 36          	mov    0x36(%rsp),%al
  2235b4:	0f b6 f8             	movzbl %al,%edi
  2235b7:	83 e7 01             	and    $0x1,%edi
  2235ba:	e8 d1 85 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2235bf:	24 01                	and    $0x1,%al
  2235c1:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  2235c8:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  2235cf:	00 
  2235d0:	a8 01                	test   $0x1,%al
  2235d2:	74 a1                	je     223575 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb35>
  2235d4:	eb 00                	jmp    2235d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb96>
  2235d6:	eb 02                	jmp    2235da <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb9a>
  2235d8:	0f 0b                	ud2    
  2235da:	e8 f1 76 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2235df:	24 01                	and    $0x1,%al
  2235e1:	88 44 24 74          	mov    %al,0x74(%rsp)
  2235e5:	e9 16 f5 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2235ea:	8a 44 24 37          	mov    0x37(%rsp),%al
  2235ee:	0f b6 f8             	movzbl %al,%edi
  2235f1:	83 e7 01             	and    $0x1,%edi
  2235f4:	e8 97 85 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2235f9:	24 01                	and    $0x1,%al
  2235fb:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  223602:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  223609:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22360a:	a8 01                	test   $0x1,%al
  22360c:	0f 84 46 ff ff ff    	je     223558 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb18>
  223612:	eb 00                	jmp    223614 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbd4>
  223614:	eb 02                	jmp    223618 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbd8>
  223616:	0f 0b                	ud2    
  223618:	e8 b3 76 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22361d:	24 01                	and    $0x1,%al
  22361f:	88 44 24 74          	mov    %al,0x74(%rsp)
  223623:	e9 d8 f4 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223628:	8a 44 24 38          	mov    0x38(%rsp),%al
  22362c:	a8 01                	test   $0x1,%al
  22362e:	75 15                	jne    223645 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc05>
  223630:	eb 00                	jmp    223632 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbf2>
  223632:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223637:	e8 54 11 00 00       	callq  224790 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E>
  22363c:	88 44 24 35          	mov    %al,0x35(%rsp)
  223640:	e9 bd 00 00 00       	jmpq   223702 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcc2>
                        if !first {
  223645:	8a 44 24 75          	mov    0x75(%rsp),%al
  223649:	34 ff                	xor    $0xff,%al
  22364b:	a8 01                	test   $0x1,%al
  22364d:	75 21                	jne    223670 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc30>
  22364f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223654:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223659:	48 8d 35 10 d3 fd ff 	lea    -0x22cf0(%rip),%rsi        # 200970 <str.2+0xd0>
  223660:	ba 04 00 00 00       	mov    $0x4,%edx
  223665:	e8 46 48 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22366a:	88 44 24 34          	mov    %al,0x34(%rsp)
  22366e:	eb 54                	jmp    2236c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc84>
  223670:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223675:	48 8d 35 92 f6 fd ff 	lea    -0x2096e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22367c:	ba 03 00 00 00       	mov    $0x3,%edx
  223681:	e8 2a 48 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223686:	88 44 24 33          	mov    %al,0x33(%rsp)
  22368a:	8a 44 24 33          	mov    0x33(%rsp),%al
  22368e:	0f b6 f8             	movzbl %al,%edi
  223691:	83 e7 01             	and    $0x1,%edi
  223694:	e8 f7 84 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223699:	24 01                	and    $0x1,%al
  22369b:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  2236a2:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  2236a9:	00 
  2236aa:	a8 01                	test   $0x1,%al
  2236ac:	74 a1                	je     22364f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0f>
  2236ae:	eb 00                	jmp    2236b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc70>
  2236b0:	eb 02                	jmp    2236b4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc74>
  2236b2:	0f 0b                	ud2    
  2236b4:	e8 17 76 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2236b9:	24 01                	and    $0x1,%al
  2236bb:	88 44 24 74          	mov    %al,0x74(%rsp)
  2236bf:	e9 3c f4 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2236c4:	8a 44 24 34          	mov    0x34(%rsp),%al
  2236c8:	0f b6 f8             	movzbl %al,%edi
  2236cb:	83 e7 01             	and    $0x1,%edi
  2236ce:	e8 bd 84 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2236d3:	24 01                	and    $0x1,%al
  2236d5:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  2236dc:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  2236e3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2236e4:	a8 01                	test   $0x1,%al
  2236e6:	0f 84 46 ff ff ff    	je     223632 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbf2>
  2236ec:	eb 00                	jmp    2236ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcae>
  2236ee:	eb 02                	jmp    2236f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcb2>
  2236f0:	0f 0b                	ud2    
  2236f2:	e8 d9 75 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2236f7:	24 01                	and    $0x1,%al
  2236f9:	88 44 24 74          	mov    %al,0x74(%rsp)
  2236fd:	e9 fe f3 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223702:	8a 44 24 35          	mov    0x35(%rsp),%al
  223706:	a8 01                	test   $0x1,%al
  223708:	75 15                	jne    22371f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcdf>
  22370a:	eb 00                	jmp    22370c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xccc>
  22370c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223711:	e8 ca 10 00 00       	callq  2247e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE>
  223716:	88 44 24 32          	mov    %al,0x32(%rsp)
  22371a:	e9 bd 00 00 00       	jmpq   2237dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd9c>
                        if !first {
  22371f:	8a 44 24 75          	mov    0x75(%rsp),%al
  223723:	34 ff                	xor    $0xff,%al
  223725:	a8 01                	test   $0x1,%al
  223727:	75 21                	jne    22374a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd0a>
  223729:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22372e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223733:	48 8d 35 0c f6 fd ff 	lea    -0x209f4(%rip),%rsi        # 202d46 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x18e>
  22373a:	ba 05 00 00 00       	mov    $0x5,%edx
  22373f:	e8 6c 47 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223744:	88 44 24 31          	mov    %al,0x31(%rsp)
  223748:	eb 54                	jmp    22379e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd5e>
  22374a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22374f:	48 8d 35 b8 f5 fd ff 	lea    -0x20a48(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223756:	ba 03 00 00 00       	mov    $0x3,%edx
  22375b:	e8 50 47 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223760:	88 44 24 30          	mov    %al,0x30(%rsp)
  223764:	8a 44 24 30          	mov    0x30(%rsp),%al
  223768:	0f b6 f8             	movzbl %al,%edi
  22376b:	83 e7 01             	and    $0x1,%edi
  22376e:	e8 1d 84 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223773:	24 01                	and    $0x1,%al
  223775:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  22377c:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  223783:	00 
  223784:	a8 01                	test   $0x1,%al
  223786:	74 a1                	je     223729 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xce9>
  223788:	eb 00                	jmp    22378a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd4a>
  22378a:	eb 02                	jmp    22378e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd4e>
  22378c:	0f 0b                	ud2    
  22378e:	e8 3d 75 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223793:	24 01                	and    $0x1,%al
  223795:	88 44 24 74          	mov    %al,0x74(%rsp)
  223799:	e9 62 f3 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22379e:	8a 44 24 31          	mov    0x31(%rsp),%al
  2237a2:	0f b6 f8             	movzbl %al,%edi
  2237a5:	83 e7 01             	and    $0x1,%edi
  2237a8:	e8 e3 83 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2237ad:	24 01                	and    $0x1,%al
  2237af:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  2237b6:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  2237bd:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2237be:	a8 01                	test   $0x1,%al
  2237c0:	0f 84 46 ff ff ff    	je     22370c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xccc>
  2237c6:	eb 00                	jmp    2237c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd88>
  2237c8:	eb 02                	jmp    2237cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd8c>
  2237ca:	0f 0b                	ud2    
  2237cc:	e8 ff 74 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2237d1:	24 01                	and    $0x1,%al
  2237d3:	88 44 24 74          	mov    %al,0x74(%rsp)
  2237d7:	e9 24 f3 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2237dc:	8a 44 24 32          	mov    0x32(%rsp),%al
  2237e0:	a8 01                	test   $0x1,%al
  2237e2:	75 15                	jne    2237f9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xdb9>
  2237e4:	eb 00                	jmp    2237e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xda6>
  2237e6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2237eb:	e8 40 10 00 00       	callq  224830 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE>
  2237f0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2237f4:	e9 bd 00 00 00       	jmpq   2238b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe76>
                        if !first {
  2237f9:	8a 44 24 75          	mov    0x75(%rsp),%al
  2237fd:	34 ff                	xor    $0xff,%al
  2237ff:	a8 01                	test   $0x1,%al
  223801:	75 21                	jne    223824 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xde4>
  223803:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223808:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22380d:	48 8d 35 37 f5 fd ff 	lea    -0x20ac9(%rip),%rsi        # 202d4b <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x193>
  223814:	ba 03 00 00 00       	mov    $0x3,%edx
  223819:	e8 92 46 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22381e:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  223822:	eb 54                	jmp    223878 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe38>
  223824:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223829:	48 8d 35 de f4 fd ff 	lea    -0x20b22(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223830:	ba 03 00 00 00       	mov    $0x3,%edx
  223835:	e8 76 46 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22383a:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  22383e:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  223842:	0f b6 f8             	movzbl %al,%edi
  223845:	83 e7 01             	and    $0x1,%edi
  223848:	e8 43 83 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22384d:	24 01                	and    $0x1,%al
  22384f:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  223856:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  22385d:	00 
  22385e:	a8 01                	test   $0x1,%al
  223860:	74 a1                	je     223803 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xdc3>
  223862:	eb 00                	jmp    223864 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe24>
  223864:	eb 02                	jmp    223868 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe28>
  223866:	0f 0b                	ud2    
  223868:	e8 63 74 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22386d:	24 01                	and    $0x1,%al
  22386f:	88 44 24 74          	mov    %al,0x74(%rsp)
  223873:	e9 88 f2 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223878:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  22387c:	0f b6 f8             	movzbl %al,%edi
  22387f:	83 e7 01             	and    $0x1,%edi
  223882:	e8 09 83 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223887:	24 01                	and    $0x1,%al
  223889:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  223890:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  223897:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223898:	a8 01                	test   $0x1,%al
  22389a:	0f 84 46 ff ff ff    	je     2237e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xda6>
  2238a0:	eb 00                	jmp    2238a2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe62>
  2238a2:	eb 02                	jmp    2238a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe66>
  2238a4:	0f 0b                	ud2    
  2238a6:	e8 25 74 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2238ab:	24 01                	and    $0x1,%al
  2238ad:	88 44 24 74          	mov    %al,0x74(%rsp)
  2238b1:	e9 4a f2 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2238b6:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  2238ba:	a8 01                	test   $0x1,%al
  2238bc:	75 15                	jne    2238d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe93>
  2238be:	eb 00                	jmp    2238c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe80>
  2238c0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2238c5:	e8 b6 0f 00 00       	callq  224880 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE>
  2238ca:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  2238ce:	e9 bd 00 00 00       	jmpq   223990 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf50>
                        if !first {
  2238d3:	8a 44 24 75          	mov    0x75(%rsp),%al
  2238d7:	34 ff                	xor    $0xff,%al
  2238d9:	a8 01                	test   $0x1,%al
  2238db:	75 21                	jne    2238fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xebe>
  2238dd:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2238e2:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2238e7:	48 8d 35 60 f4 fd ff 	lea    -0x20ba0(%rip),%rsi        # 202d4e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x196>
  2238ee:	ba 06 00 00 00       	mov    $0x6,%edx
  2238f3:	e8 b8 45 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2238f8:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  2238fc:	eb 54                	jmp    223952 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf12>
  2238fe:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223903:	48 8d 35 04 f4 fd ff 	lea    -0x20bfc(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22390a:	ba 03 00 00 00       	mov    $0x3,%edx
  22390f:	e8 9c 45 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223914:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  223918:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  22391c:	0f b6 f8             	movzbl %al,%edi
  22391f:	83 e7 01             	and    $0x1,%edi
  223922:	e8 69 82 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223927:	24 01                	and    $0x1,%al
  223929:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  223930:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  223937:	00 
  223938:	a8 01                	test   $0x1,%al
  22393a:	74 a1                	je     2238dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe9d>
  22393c:	eb 00                	jmp    22393e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xefe>
  22393e:	eb 02                	jmp    223942 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf02>
  223940:	0f 0b                	ud2    
  223942:	e8 89 73 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223947:	24 01                	and    $0x1,%al
  223949:	88 44 24 74          	mov    %al,0x74(%rsp)
  22394d:	e9 ae f1 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223952:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  223956:	0f b6 f8             	movzbl %al,%edi
  223959:	83 e7 01             	and    $0x1,%edi
  22395c:	e8 2f 82 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223961:	24 01                	and    $0x1,%al
  223963:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  22396a:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  223971:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223972:	a8 01                	test   $0x1,%al
  223974:	0f 84 46 ff ff ff    	je     2238c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe80>
  22397a:	eb 00                	jmp    22397c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf3c>
  22397c:	eb 02                	jmp    223980 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf40>
  22397e:	0f 0b                	ud2    
  223980:	e8 4b 73 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223985:	24 01                	and    $0x1,%al
  223987:	88 44 24 74          	mov    %al,0x74(%rsp)
  22398b:	e9 70 f1 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223990:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  223994:	a8 01                	test   $0x1,%al
  223996:	75 15                	jne    2239ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf6d>
  223998:	eb 00                	jmp    22399a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5a>
  22399a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22399f:	e8 2c 0f 00 00       	callq  2248d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E>
  2239a4:	88 44 24 29          	mov    %al,0x29(%rsp)
  2239a8:	e9 bd 00 00 00       	jmpq   223a6a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x102a>
                        if !first {
  2239ad:	8a 44 24 75          	mov    0x75(%rsp),%al
  2239b1:	34 ff                	xor    $0xff,%al
  2239b3:	a8 01                	test   $0x1,%al
  2239b5:	75 21                	jne    2239d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf98>
  2239b7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2239bc:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2239c1:	48 8d 35 8c f3 fd ff 	lea    -0x20c74(%rip),%rsi        # 202d54 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x19c>
  2239c8:	ba 06 00 00 00       	mov    $0x6,%edx
  2239cd:	e8 de 44 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2239d2:	88 44 24 28          	mov    %al,0x28(%rsp)
  2239d6:	eb 54                	jmp    223a2c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfec>
  2239d8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2239dd:	48 8d 35 2a f3 fd ff 	lea    -0x20cd6(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2239e4:	ba 03 00 00 00       	mov    $0x3,%edx
  2239e9:	e8 c2 44 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2239ee:	88 44 24 27          	mov    %al,0x27(%rsp)
  2239f2:	8a 44 24 27          	mov    0x27(%rsp),%al
  2239f6:	0f b6 f8             	movzbl %al,%edi
  2239f9:	83 e7 01             	and    $0x1,%edi
  2239fc:	e8 8f 81 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223a01:	24 01                	and    $0x1,%al
  223a03:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  223a0a:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  223a11:	00 
  223a12:	a8 01                	test   $0x1,%al
  223a14:	74 a1                	je     2239b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf77>
  223a16:	eb 00                	jmp    223a18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfd8>
  223a18:	eb 02                	jmp    223a1c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfdc>
  223a1a:	0f 0b                	ud2    
  223a1c:	e8 af 72 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223a21:	24 01                	and    $0x1,%al
  223a23:	88 44 24 74          	mov    %al,0x74(%rsp)
  223a27:	e9 d4 f0 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223a2c:	8a 44 24 28          	mov    0x28(%rsp),%al
  223a30:	0f b6 f8             	movzbl %al,%edi
  223a33:	83 e7 01             	and    $0x1,%edi
  223a36:	e8 55 81 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223a3b:	24 01                	and    $0x1,%al
  223a3d:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  223a44:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  223a4b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223a4c:	a8 01                	test   $0x1,%al
  223a4e:	0f 84 46 ff ff ff    	je     22399a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5a>
  223a54:	eb 00                	jmp    223a56 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1016>
  223a56:	eb 02                	jmp    223a5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x101a>
  223a58:	0f 0b                	ud2    
  223a5a:	e8 71 72 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223a5f:	24 01                	and    $0x1,%al
  223a61:	88 44 24 74          	mov    %al,0x74(%rsp)
  223a65:	e9 96 f0 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223a6a:	8a 44 24 29          	mov    0x29(%rsp),%al
  223a6e:	a8 01                	test   $0x1,%al
  223a70:	75 15                	jne    223a87 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1047>
  223a72:	eb 00                	jmp    223a74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1034>
  223a74:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223a79:	e8 a2 0e 00 00       	callq  224920 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E>
  223a7e:	88 44 24 26          	mov    %al,0x26(%rsp)
  223a82:	e9 bd 00 00 00       	jmpq   223b44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1104>
                        if !first {
  223a87:	8a 44 24 75          	mov    0x75(%rsp),%al
  223a8b:	34 ff                	xor    $0xff,%al
  223a8d:	a8 01                	test   $0x1,%al
  223a8f:	75 21                	jne    223ab2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1072>
  223a91:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223a96:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223a9b:	48 8d 35 b8 f2 fd ff 	lea    -0x20d48(%rip),%rsi        # 202d5a <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1a2>
  223aa2:	ba 06 00 00 00       	mov    $0x6,%edx
  223aa7:	e8 04 44 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223aac:	88 44 24 25          	mov    %al,0x25(%rsp)
  223ab0:	eb 54                	jmp    223b06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10c6>
  223ab2:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223ab7:	48 8d 35 50 f2 fd ff 	lea    -0x20db0(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223abe:	ba 03 00 00 00       	mov    $0x3,%edx
  223ac3:	e8 e8 43 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223ac8:	88 44 24 24          	mov    %al,0x24(%rsp)
  223acc:	8a 44 24 24          	mov    0x24(%rsp),%al
  223ad0:	0f b6 f8             	movzbl %al,%edi
  223ad3:	83 e7 01             	and    $0x1,%edi
  223ad6:	e8 b5 80 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223adb:	24 01                	and    $0x1,%al
  223add:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  223ae4:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  223aeb:	00 
  223aec:	a8 01                	test   $0x1,%al
  223aee:	74 a1                	je     223a91 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1051>
  223af0:	eb 00                	jmp    223af2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10b2>
  223af2:	eb 02                	jmp    223af6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10b6>
  223af4:	0f 0b                	ud2    
  223af6:	e8 d5 71 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223afb:	24 01                	and    $0x1,%al
  223afd:	88 44 24 74          	mov    %al,0x74(%rsp)
  223b01:	e9 fa ef ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223b06:	8a 44 24 25          	mov    0x25(%rsp),%al
  223b0a:	0f b6 f8             	movzbl %al,%edi
  223b0d:	83 e7 01             	and    $0x1,%edi
  223b10:	e8 7b 80 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223b15:	24 01                	and    $0x1,%al
  223b17:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  223b1e:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  223b25:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223b26:	a8 01                	test   $0x1,%al
  223b28:	0f 84 46 ff ff ff    	je     223a74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1034>
  223b2e:	eb 00                	jmp    223b30 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10f0>
  223b30:	eb 02                	jmp    223b34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10f4>
  223b32:	0f 0b                	ud2    
  223b34:	e8 97 71 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223b39:	24 01                	and    $0x1,%al
  223b3b:	88 44 24 74          	mov    %al,0x74(%rsp)
  223b3f:	e9 bc ef ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223b44:	8a 44 24 26          	mov    0x26(%rsp),%al
  223b48:	a8 01                	test   $0x1,%al
  223b4a:	75 15                	jne    223b61 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1121>
  223b4c:	eb 00                	jmp    223b4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110e>
  223b4e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223b53:	e8 18 0e 00 00       	callq  224970 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E>
  223b58:	88 44 24 23          	mov    %al,0x23(%rsp)
  223b5c:	e9 bd 00 00 00       	jmpq   223c1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11de>
                        if !first {
  223b61:	8a 44 24 75          	mov    0x75(%rsp),%al
  223b65:	34 ff                	xor    $0xff,%al
  223b67:	a8 01                	test   $0x1,%al
  223b69:	75 21                	jne    223b8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x114c>
  223b6b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223b70:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223b75:	48 8d 35 e4 f1 fd ff 	lea    -0x20e1c(%rip),%rsi        # 202d60 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1a8>
  223b7c:	ba 05 00 00 00       	mov    $0x5,%edx
  223b81:	e8 2a 43 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223b86:	88 44 24 22          	mov    %al,0x22(%rsp)
  223b8a:	eb 54                	jmp    223be0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11a0>
  223b8c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223b91:	48 8d 35 76 f1 fd ff 	lea    -0x20e8a(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223b98:	ba 03 00 00 00       	mov    $0x3,%edx
  223b9d:	e8 0e 43 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223ba2:	88 44 24 21          	mov    %al,0x21(%rsp)
  223ba6:	8a 44 24 21          	mov    0x21(%rsp),%al
  223baa:	0f b6 f8             	movzbl %al,%edi
  223bad:	83 e7 01             	and    $0x1,%edi
  223bb0:	e8 db 7f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223bb5:	24 01                	and    $0x1,%al
  223bb7:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  223bbe:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  223bc5:	00 
  223bc6:	a8 01                	test   $0x1,%al
  223bc8:	74 a1                	je     223b6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x112b>
  223bca:	eb 00                	jmp    223bcc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x118c>
  223bcc:	eb 02                	jmp    223bd0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1190>
  223bce:	0f 0b                	ud2    
  223bd0:	e8 fb 70 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223bd5:	24 01                	and    $0x1,%al
  223bd7:	88 44 24 74          	mov    %al,0x74(%rsp)
  223bdb:	e9 20 ef ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223be0:	8a 44 24 22          	mov    0x22(%rsp),%al
  223be4:	0f b6 f8             	movzbl %al,%edi
  223be7:	83 e7 01             	and    $0x1,%edi
  223bea:	e8 a1 7f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223bef:	24 01                	and    $0x1,%al
  223bf1:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  223bf8:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  223bff:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223c00:	a8 01                	test   $0x1,%al
  223c02:	0f 84 46 ff ff ff    	je     223b4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110e>
  223c08:	eb 00                	jmp    223c0a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11ca>
  223c0a:	eb 02                	jmp    223c0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11ce>
  223c0c:	0f 0b                	ud2    
  223c0e:	e8 bd 70 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223c13:	24 01                	and    $0x1,%al
  223c15:	88 44 24 74          	mov    %al,0x74(%rsp)
  223c19:	e9 e2 ee ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223c1e:	8a 44 24 23          	mov    0x23(%rsp),%al
  223c22:	a8 01                	test   $0x1,%al
  223c24:	75 15                	jne    223c3b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11fb>
  223c26:	eb 00                	jmp    223c28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11e8>
  223c28:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223c2d:	e8 8e 0d 00 00       	callq  2249c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E>
  223c32:	88 44 24 20          	mov    %al,0x20(%rsp)
  223c36:	e9 bd 00 00 00       	jmpq   223cf8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12b8>
                        if !first {
  223c3b:	8a 44 24 75          	mov    0x75(%rsp),%al
  223c3f:	34 ff                	xor    $0xff,%al
  223c41:	a8 01                	test   $0x1,%al
  223c43:	75 21                	jne    223c66 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1226>
  223c45:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223c4a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223c4f:	48 8d 35 0f f1 fd ff 	lea    -0x20ef1(%rip),%rsi        # 202d65 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1ad>
  223c56:	ba 06 00 00 00       	mov    $0x6,%edx
  223c5b:	e8 50 42 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223c60:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  223c64:	eb 54                	jmp    223cba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x127a>
  223c66:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223c6b:	48 8d 35 9c f0 fd ff 	lea    -0x20f64(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223c72:	ba 03 00 00 00       	mov    $0x3,%edx
  223c77:	e8 34 42 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223c7c:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  223c80:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  223c84:	0f b6 f8             	movzbl %al,%edi
  223c87:	83 e7 01             	and    $0x1,%edi
  223c8a:	e8 01 7f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223c8f:	24 01                	and    $0x1,%al
  223c91:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  223c98:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  223c9f:	00 
  223ca0:	a8 01                	test   $0x1,%al
  223ca2:	74 a1                	je     223c45 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1205>
  223ca4:	eb 00                	jmp    223ca6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1266>
  223ca6:	eb 02                	jmp    223caa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x126a>
  223ca8:	0f 0b                	ud2    
  223caa:	e8 21 70 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223caf:	24 01                	and    $0x1,%al
  223cb1:	88 44 24 74          	mov    %al,0x74(%rsp)
  223cb5:	e9 46 ee ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223cba:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  223cbe:	0f b6 f8             	movzbl %al,%edi
  223cc1:	83 e7 01             	and    $0x1,%edi
  223cc4:	e8 c7 7e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223cc9:	24 01                	and    $0x1,%al
  223ccb:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  223cd2:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  223cd9:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223cda:	a8 01                	test   $0x1,%al
  223cdc:	0f 84 46 ff ff ff    	je     223c28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11e8>
  223ce2:	eb 00                	jmp    223ce4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12a4>
  223ce4:	eb 02                	jmp    223ce8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12a8>
  223ce6:	0f 0b                	ud2    
  223ce8:	e8 e3 6f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223ced:	24 01                	and    $0x1,%al
  223cef:	88 44 24 74          	mov    %al,0x74(%rsp)
  223cf3:	e9 08 ee ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223cf8:	8a 44 24 20          	mov    0x20(%rsp),%al
  223cfc:	a8 01                	test   $0x1,%al
  223cfe:	75 15                	jne    223d15 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12d5>
  223d00:	eb 00                	jmp    223d02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12c2>
  223d02:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223d07:	e8 04 0d 00 00       	callq  224a10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE>
  223d0c:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  223d10:	e9 bd 00 00 00       	jmpq   223dd2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1392>
                        if !first {
  223d15:	8a 44 24 75          	mov    0x75(%rsp),%al
  223d19:	34 ff                	xor    $0xff,%al
  223d1b:	a8 01                	test   $0x1,%al
  223d1d:	75 21                	jne    223d40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1300>
  223d1f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223d24:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223d29:	48 8d 35 7c cc fd ff 	lea    -0x23384(%rip),%rsi        # 2009ac <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x14>
  223d30:	ba 04 00 00 00       	mov    $0x4,%edx
  223d35:	e8 76 41 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223d3a:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  223d3e:	eb 54                	jmp    223d94 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1354>
  223d40:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223d45:	48 8d 35 c2 ef fd ff 	lea    -0x2103e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223d4c:	ba 03 00 00 00       	mov    $0x3,%edx
  223d51:	e8 5a 41 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223d56:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  223d5a:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  223d5e:	0f b6 f8             	movzbl %al,%edi
  223d61:	83 e7 01             	and    $0x1,%edi
  223d64:	e8 27 7e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223d69:	24 01                	and    $0x1,%al
  223d6b:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  223d72:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  223d79:	00 
  223d7a:	a8 01                	test   $0x1,%al
  223d7c:	74 a1                	je     223d1f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12df>
  223d7e:	eb 00                	jmp    223d80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1340>
  223d80:	eb 02                	jmp    223d84 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1344>
  223d82:	0f 0b                	ud2    
  223d84:	e8 47 6f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223d89:	24 01                	and    $0x1,%al
  223d8b:	88 44 24 74          	mov    %al,0x74(%rsp)
  223d8f:	e9 6c ed ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223d94:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  223d98:	0f b6 f8             	movzbl %al,%edi
  223d9b:	83 e7 01             	and    $0x1,%edi
  223d9e:	e8 ed 7d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223da3:	24 01                	and    $0x1,%al
  223da5:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  223dac:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  223db3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223db4:	a8 01                	test   $0x1,%al
  223db6:	0f 84 46 ff ff ff    	je     223d02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12c2>
  223dbc:	eb 00                	jmp    223dbe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x137e>
  223dbe:	eb 02                	jmp    223dc2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1382>
  223dc0:	0f 0b                	ud2    
  223dc2:	e8 09 6f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223dc7:	24 01                	and    $0x1,%al
  223dc9:	88 44 24 74          	mov    %al,0x74(%rsp)
  223dcd:	e9 2e ed ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223dd2:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  223dd6:	a8 01                	test   $0x1,%al
  223dd8:	75 15                	jne    223def <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13af>
  223dda:	eb 00                	jmp    223ddc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x139c>
  223ddc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223de1:	e8 7a 0c 00 00       	callq  224a60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE>
  223de6:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  223dea:	e9 bd 00 00 00       	jmpq   223eac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x146c>
                        if !first {
  223def:	8a 44 24 75          	mov    0x75(%rsp),%al
  223df3:	34 ff                	xor    $0xff,%al
  223df5:	a8 01                	test   $0x1,%al
  223df7:	75 21                	jne    223e1a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13da>
  223df9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223dfe:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223e03:	48 8d 35 61 ef fd ff 	lea    -0x2109f(%rip),%rsi        # 202d6b <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1b3>
  223e0a:	ba 03 00 00 00       	mov    $0x3,%edx
  223e0f:	e8 9c 40 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223e14:	88 44 24 19          	mov    %al,0x19(%rsp)
  223e18:	eb 54                	jmp    223e6e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x142e>
  223e1a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223e1f:	48 8d 35 e8 ee fd ff 	lea    -0x21118(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223e26:	ba 03 00 00 00       	mov    $0x3,%edx
  223e2b:	e8 80 40 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223e30:	88 44 24 18          	mov    %al,0x18(%rsp)
  223e34:	8a 44 24 18          	mov    0x18(%rsp),%al
  223e38:	0f b6 f8             	movzbl %al,%edi
  223e3b:	83 e7 01             	and    $0x1,%edi
  223e3e:	e8 4d 7d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223e43:	24 01                	and    $0x1,%al
  223e45:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  223e4c:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  223e53:	00 
  223e54:	a8 01                	test   $0x1,%al
  223e56:	74 a1                	je     223df9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13b9>
  223e58:	eb 00                	jmp    223e5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x141a>
  223e5a:	eb 02                	jmp    223e5e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x141e>
  223e5c:	0f 0b                	ud2    
  223e5e:	e8 6d 6e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223e63:	24 01                	and    $0x1,%al
  223e65:	88 44 24 74          	mov    %al,0x74(%rsp)
  223e69:	e9 92 ec ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223e6e:	8a 44 24 19          	mov    0x19(%rsp),%al
  223e72:	0f b6 f8             	movzbl %al,%edi
  223e75:	83 e7 01             	and    $0x1,%edi
  223e78:	e8 13 7d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223e7d:	24 01                	and    $0x1,%al
  223e7f:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  223e86:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  223e8d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223e8e:	a8 01                	test   $0x1,%al
  223e90:	0f 84 46 ff ff ff    	je     223ddc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x139c>
  223e96:	eb 00                	jmp    223e98 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1458>
  223e98:	eb 02                	jmp    223e9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x145c>
  223e9a:	0f 0b                	ud2    
  223e9c:	e8 2f 6e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223ea1:	24 01                	and    $0x1,%al
  223ea3:	88 44 24 74          	mov    %al,0x74(%rsp)
  223ea7:	e9 54 ec ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223eac:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  223eb0:	a8 01                	test   $0x1,%al
  223eb2:	75 15                	jne    223ec9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1489>
  223eb4:	eb 00                	jmp    223eb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1476>
  223eb6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223ebb:	e8 f0 0b 00 00       	callq  224ab0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE>
  223ec0:	88 44 24 17          	mov    %al,0x17(%rsp)
  223ec4:	e9 bd 00 00 00       	jmpq   223f86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1546>
                        if !first {
  223ec9:	8a 44 24 75          	mov    0x75(%rsp),%al
  223ecd:	34 ff                	xor    $0xff,%al
  223ecf:	a8 01                	test   $0x1,%al
  223ed1:	75 21                	jne    223ef4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14b4>
  223ed3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223ed8:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223edd:	48 8d 35 8a ee fd ff 	lea    -0x21176(%rip),%rsi        # 202d6e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1b6>
  223ee4:	ba 05 00 00 00       	mov    $0x5,%edx
  223ee9:	e8 c2 3f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223eee:	88 44 24 16          	mov    %al,0x16(%rsp)
  223ef2:	eb 54                	jmp    223f48 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1508>
  223ef4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223ef9:	48 8d 35 0e ee fd ff 	lea    -0x211f2(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223f00:	ba 03 00 00 00       	mov    $0x3,%edx
  223f05:	e8 a6 3f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223f0a:	88 44 24 15          	mov    %al,0x15(%rsp)
  223f0e:	8a 44 24 15          	mov    0x15(%rsp),%al
  223f12:	0f b6 f8             	movzbl %al,%edi
  223f15:	83 e7 01             	and    $0x1,%edi
  223f18:	e8 73 7c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223f1d:	24 01                	and    $0x1,%al
  223f1f:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  223f26:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  223f2d:	00 
  223f2e:	a8 01                	test   $0x1,%al
  223f30:	74 a1                	je     223ed3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1493>
  223f32:	eb 00                	jmp    223f34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14f4>
  223f34:	eb 02                	jmp    223f38 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14f8>
  223f36:	0f 0b                	ud2    
  223f38:	e8 93 6d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223f3d:	24 01                	and    $0x1,%al
  223f3f:	88 44 24 74          	mov    %al,0x74(%rsp)
  223f43:	e9 b8 eb ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223f48:	8a 44 24 16          	mov    0x16(%rsp),%al
  223f4c:	0f b6 f8             	movzbl %al,%edi
  223f4f:	83 e7 01             	and    $0x1,%edi
  223f52:	e8 39 7c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223f57:	24 01                	and    $0x1,%al
  223f59:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  223f60:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  223f67:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  223f68:	a8 01                	test   $0x1,%al
  223f6a:	0f 84 46 ff ff ff    	je     223eb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1476>
  223f70:	eb 00                	jmp    223f72 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1532>
  223f72:	eb 02                	jmp    223f76 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1536>
  223f74:	0f 0b                	ud2    
  223f76:	e8 55 6d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223f7b:	24 01                	and    $0x1,%al
  223f7d:	88 44 24 74          	mov    %al,0x74(%rsp)
  223f81:	e9 7a eb ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  223f86:	8a 44 24 17          	mov    0x17(%rsp),%al
  223f8a:	a8 01                	test   $0x1,%al
  223f8c:	75 15                	jne    223fa3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1563>
  223f8e:	eb 00                	jmp    223f90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1550>
  223f90:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  223f95:	e8 66 0b 00 00       	callq  224b00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E>
  223f9a:	88 44 24 14          	mov    %al,0x14(%rsp)
  223f9e:	e9 bd 00 00 00       	jmpq   224060 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1620>
                        if !first {
  223fa3:	8a 44 24 75          	mov    0x75(%rsp),%al
  223fa7:	34 ff                	xor    $0xff,%al
  223fa9:	a8 01                	test   $0x1,%al
  223fab:	75 21                	jne    223fce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x158e>
  223fad:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  223fb2:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223fb7:	48 8d 35 b5 ed fd ff 	lea    -0x2124b(%rip),%rsi        # 202d73 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1bb>
  223fbe:	ba 07 00 00 00       	mov    $0x7,%edx
  223fc3:	e8 e8 3e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223fc8:	88 44 24 13          	mov    %al,0x13(%rsp)
  223fcc:	eb 54                	jmp    224022 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15e2>
  223fce:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  223fd3:	48 8d 35 34 ed fd ff 	lea    -0x212cc(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  223fda:	ba 03 00 00 00       	mov    $0x3,%edx
  223fdf:	e8 cc 3e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223fe4:	88 44 24 12          	mov    %al,0x12(%rsp)
  223fe8:	8a 44 24 12          	mov    0x12(%rsp),%al
  223fec:	0f b6 f8             	movzbl %al,%edi
  223fef:	83 e7 01             	and    $0x1,%edi
  223ff2:	e8 99 7b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223ff7:	24 01                	and    $0x1,%al
  223ff9:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  224000:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  224007:	00 
  224008:	a8 01                	test   $0x1,%al
  22400a:	74 a1                	je     223fad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x156d>
  22400c:	eb 00                	jmp    22400e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15ce>
  22400e:	eb 02                	jmp    224012 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15d2>
  224010:	0f 0b                	ud2    
  224012:	e8 b9 6c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224017:	24 01                	and    $0x1,%al
  224019:	88 44 24 74          	mov    %al,0x74(%rsp)
  22401d:	e9 de ea ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  224022:	8a 44 24 13          	mov    0x13(%rsp),%al
  224026:	0f b6 f8             	movzbl %al,%edi
  224029:	83 e7 01             	and    $0x1,%edi
  22402c:	e8 5f 7b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224031:	24 01                	and    $0x1,%al
  224033:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  22403a:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  224041:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224042:	a8 01                	test   $0x1,%al
  224044:	0f 84 46 ff ff ff    	je     223f90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1550>
  22404a:	eb 00                	jmp    22404c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x160c>
  22404c:	eb 02                	jmp    224050 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1610>
  22404e:	0f 0b                	ud2    
  224050:	e8 7b 6c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224055:	24 01                	and    $0x1,%al
  224057:	88 44 24 74          	mov    %al,0x74(%rsp)
  22405b:	e9 a0 ea ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  224060:	8a 44 24 14          	mov    0x14(%rsp),%al
  224064:	a8 01                	test   $0x1,%al
  224066:	75 1e                	jne    224086 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1646>
  224068:	eb 00                	jmp    22406a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x162a>
  22406a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  22406f:	8b 00                	mov    (%rax),%eax
  224071:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  224075:	e8 76 02 00 00       	callq  2242f0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>
  22407a:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
  224081:	e9 bd 00 00 00       	jmpq   224143 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1703>
                        if !first {
  224086:	8a 44 24 75          	mov    0x75(%rsp),%al
  22408a:	34 ff                	xor    $0xff,%al
  22408c:	a8 01                	test   $0x1,%al
  22408e:	75 21                	jne    2240b1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1671>
  224090:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  224095:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22409a:	48 8d 35 d9 ec fd ff 	lea    -0x21327(%rip),%rsi        # 202d7a <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1c2>
  2240a1:	ba 03 00 00 00       	mov    $0x3,%edx
  2240a6:	e8 05 3e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2240ab:	88 44 24 0b          	mov    %al,0xb(%rsp)
  2240af:	eb 54                	jmp    224105 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16c5>
  2240b1:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2240b6:	48 8d 35 51 ec fd ff 	lea    -0x213af(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2240bd:	ba 03 00 00 00       	mov    $0x3,%edx
  2240c2:	e8 e9 3d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2240c7:	88 44 24 0a          	mov    %al,0xa(%rsp)
  2240cb:	8a 44 24 0a          	mov    0xa(%rsp),%al
  2240cf:	0f b6 f8             	movzbl %al,%edi
  2240d2:	83 e7 01             	and    $0x1,%edi
  2240d5:	e8 b6 7a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2240da:	24 01                	and    $0x1,%al
  2240dc:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  2240e3:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  2240ea:	00 
  2240eb:	a8 01                	test   $0x1,%al
  2240ed:	74 a1                	je     224090 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1650>
  2240ef:	eb 00                	jmp    2240f1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16b1>
  2240f1:	eb 02                	jmp    2240f5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16b5>
  2240f3:	0f 0b                	ud2    
  2240f5:	e8 d6 6b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2240fa:	24 01                	and    $0x1,%al
  2240fc:	88 44 24 74          	mov    %al,0x74(%rsp)
  224100:	e9 fb e9 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  224105:	8a 44 24 0b          	mov    0xb(%rsp),%al
  224109:	0f b6 f8             	movzbl %al,%edi
  22410c:	83 e7 01             	and    $0x1,%edi
  22410f:	e8 7c 7a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224114:	24 01                	and    $0x1,%al
  224116:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  22411d:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  224124:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224125:	a8 01                	test   $0x1,%al
  224127:	0f 84 3d ff ff ff    	je     22406a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x162a>
  22412d:	eb 00                	jmp    22412f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16ef>
  22412f:	eb 02                	jmp    224133 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16f3>
  224131:	0f 0b                	ud2    
  224133:	e8 98 6b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224138:	24 01                	and    $0x1,%al
  22413a:	88 44 24 74          	mov    %al,0x74(%rsp)
  22413e:	e9 bd e9 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
                let extra_bits = self.bits & !Self::all().bits();
  224143:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  22414a:	00 
  22414b:	e8 c0 01 00 00       	callq  224310 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17hf63ca3493b8e64b1E>
  224150:	89 44 24 04          	mov    %eax,0x4(%rsp)
  224154:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  224158:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  22415c:	83 f1 ff             	xor    $0xffffffff,%ecx
  22415f:	21 c8                	and    %ecx,%eax
  224161:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
  224168:	83 bc 24 ac 00 00 00 	cmpl   $0x0,0xac(%rsp)
  22416f:	00 
  224170:	75 10                	jne    224182 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1742>
  224172:	f6 44 24 75 01       	testb  $0x1,0x75(%rsp)
  224177:	0f 85 1e 01 00 00    	jne    22429b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x185b>
  22417d:	e9 0f 01 00 00       	jmpq   224291 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1851>
                    if !first {
  224182:	8a 44 24 75          	mov    0x75(%rsp),%al
  224186:	34 ff                	xor    $0xff,%al
  224188:	a8 01                	test   $0x1,%al
  22418a:	75 21                	jne    2241ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x176d>
  22418c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    first = false;
  224191:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                    f.write_str("0x")?;
  224196:	48 8d 35 e0 eb fd ff 	lea    -0x21420(%rip),%rsi        # 202d7d <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1c5>
  22419d:	ba 02 00 00 00       	mov    $0x2,%edx
  2241a2:	e8 09 3d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2241a7:	88 44 24 03          	mov    %al,0x3(%rsp)
  2241ab:	eb 54                	jmp    224201 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17c1>
  2241ad:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        f.write_str(" | ")?;
  2241b2:	48 8d 35 55 eb fd ff 	lea    -0x214ab(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2241b9:	ba 03 00 00 00       	mov    $0x3,%edx
  2241be:	e8 ed 3c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2241c3:	88 44 24 02          	mov    %al,0x2(%rsp)
  2241c7:	8a 44 24 02          	mov    0x2(%rsp),%al
  2241cb:	0f b6 f8             	movzbl %al,%edi
  2241ce:	83 e7 01             	and    $0x1,%edi
  2241d1:	e8 ba 79 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2241d6:	24 01                	and    $0x1,%al
  2241d8:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  2241df:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  2241e6:	00 
  2241e7:	a8 01                	test   $0x1,%al
  2241e9:	74 a1                	je     22418c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x174c>
  2241eb:	eb 00                	jmp    2241ed <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17ad>
  2241ed:	eb 02                	jmp    2241f1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17b1>
  2241ef:	0f 0b                	ud2    
  2241f1:	e8 da 6a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2241f6:	24 01                	and    $0x1,%al
  2241f8:	88 44 24 74          	mov    %al,0x74(%rsp)
  2241fc:	e9 ff e8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  224201:	8a 44 24 03          	mov    0x3(%rsp),%al
  224205:	0f b6 f8             	movzbl %al,%edi
  224208:	83 e7 01             	and    $0x1,%edi
  22420b:	e8 80 79 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224210:	24 01                	and    $0x1,%al
  224212:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  224219:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  224220:	00 
                    f.write_str("0x")?;
  224221:	a8 01                	test   $0x1,%al
  224223:	74 06                	je     22422b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17eb>
  224225:	eb 00                	jmp    224227 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17e7>
  224227:	eb 1a                	jmp    224243 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1803>
  224229:	0f 0b                	ud2    
  22422b:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  224230:	48 8d bc 24 ac 00 00 	lea    0xac(%rsp),%rdi
  224237:	00 
  224238:	e8 73 0b 01 00       	callq  234db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  22423d:	88 44 24 01          	mov    %al,0x1(%rsp)
  224241:	eb 10                	jmp    224253 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1813>
  224243:	e8 88 6a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224248:	24 01                	and    $0x1,%al
  22424a:	88 44 24 74          	mov    %al,0x74(%rsp)
  22424e:	e9 ad e8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  224253:	8a 44 24 01          	mov    0x1(%rsp),%al
  224257:	0f b6 f8             	movzbl %al,%edi
  22425a:	83 e7 01             	and    $0x1,%edi
  22425d:	e8 2e 79 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224262:	24 01                	and    $0x1,%al
  224264:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  22426b:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  224272:	00 
  224273:	a8 01                	test   $0x1,%al
  224275:	0f 84 f7 fe ff ff    	je     224172 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1732>
  22427b:	eb 00                	jmp    22427d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x183d>
  22427d:	eb 02                	jmp    224281 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1841>
  22427f:	0f 0b                	ud2    
  224281:	e8 4a 6a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224286:	24 01                	and    $0x1,%al
  224288:	88 44 24 74          	mov    %al,0x74(%rsp)
  22428c:	e9 6f e8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
                Ok(())
  224291:	c6 44 24 74 00       	movb   $0x0,0x74(%rsp)
            }
  224296:	e9 65 e8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22429b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    f.write_str("(empty)")?;
  2242a0:	48 8d 35 d8 ea fd ff 	lea    -0x21528(%rip),%rsi        # 202d7f <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1c7>
  2242a7:	ba 07 00 00 00       	mov    $0x7,%edx
  2242ac:	e8 ff 3b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2242b1:	88 04 24             	mov    %al,(%rsp)
  2242b4:	8a 04 24             	mov    (%rsp),%al
  2242b7:	0f b6 f8             	movzbl %al,%edi
  2242ba:	83 e7 01             	and    $0x1,%edi
  2242bd:	e8 ce 78 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2242c2:	24 01                	and    $0x1,%al
  2242c4:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  2242cb:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  2242d2:	00 
  2242d3:	a8 01                	test   $0x1,%al
  2242d5:	74 ba                	je     224291 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1851>
  2242d7:	eb 00                	jmp    2242d9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1899>
  2242d9:	eb 02                	jmp    2242dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x189d>
  2242db:	0f 0b                	ud2    
  2242dd:	e8 ee 69 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2242e2:	24 01                	and    $0x1,%al
  2242e4:	88 44 24 74          	mov    %al,0x74(%rsp)
  2242e8:	e9 13 e8 ff ff       	jmpq   222b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2242ed:	cc                   	int3   
  2242ee:	cc                   	int3   
  2242ef:	cc                   	int3   

00000000002242f0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>:
            pub const fn all() -> Self {
  2242f0:	48 83 ec 04          	sub    $0x4,%rsp
                __impl_all_bitflags! {
  2242f4:	c7 04 24 ff f7 fe 1f 	movl   $0x1ffef7ff,(%rsp)
            }
  2242fb:	8b 04 24             	mov    (%rsp),%eax
  2242fe:	48 83 c4 04          	add    $0x4,%rsp
  224302:	c3                   	retq   
  224303:	cc                   	int3   
  224304:	cc                   	int3   
  224305:	cc                   	int3   
  224306:	cc                   	int3   
  224307:	cc                   	int3   
  224308:	cc                   	int3   
  224309:	cc                   	int3   
  22430a:	cc                   	int3   
  22430b:	cc                   	int3   
  22430c:	cc                   	int3   
  22430d:	cc                   	int3   
  22430e:	cc                   	int3   
  22430f:	cc                   	int3   

0000000000224310 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17hf63ca3493b8e64b1E>:
            pub const fn bits(&self) -> $T {
  224310:	50                   	push   %rax
  224311:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  224315:	8b 07                	mov    (%rdi),%eax
            }
  224317:	59                   	pop    %rcx
  224318:	c3                   	retq   
  224319:	cc                   	int3   
  22431a:	cc                   	int3   
  22431b:	cc                   	int3   
  22431c:	cc                   	int3   
  22431d:	cc                   	int3   
  22431e:	cc                   	int3   
  22431f:	cc                   	int3   

0000000000224320 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17ha9ae7013cc2ab286E>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  224320:	48 83 ec 18          	sub    $0x18,%rsp
  224324:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  224328:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  22432c:	e8 bf ff ff ff       	callq  2242f0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>
  224331:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  224335:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  224339:	8b 44 24 08          	mov    0x8(%rsp),%eax
  22433d:	21 c8                	and    %ecx,%eax
  22433f:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  224343:	8b 44 24 10          	mov    0x10(%rsp),%eax
  224347:	48 83 c4 18          	add    $0x18,%rsp
  22434b:	c3                   	retq   
  22434c:	cc                   	int3   
  22434d:	cc                   	int3   
  22434e:	cc                   	int3   
  22434f:	cc                   	int3   

0000000000224350 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E>:
                            fn $Flag(&self) -> bool {
  224350:	48 83 ec 18          	sub    $0x18,%rsp
  224354:	48 89 3c 24          	mov    %rdi,(%rsp)
  224358:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22435d:	31 c0                	xor    %eax,%eax
  22435f:	a8 01                	test   $0x1,%al
  224361:	75 17                	jne    22437a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E+0x2a>
  224363:	48 8b 04 24          	mov    (%rsp),%rax
  224367:	8b 00                	mov    (%rax),%eax
  224369:	83 e0 01             	and    $0x1,%eax
  22436c:	83 f8 01             	cmp    $0x1,%eax
  22436f:	0f 94 c0             	sete   %al
  224372:	24 01                	and    $0x1,%al
  224374:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224378:	eb 05                	jmp    22437f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E+0x2f>
  22437a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22437f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224383:	24 01                	and    $0x1,%al
  224385:	0f b6 c0             	movzbl %al,%eax
  224388:	48 83 c4 18          	add    $0x18,%rsp
  22438c:	c3                   	retq   
  22438d:	cc                   	int3   
  22438e:	cc                   	int3   
  22438f:	cc                   	int3   

0000000000224390 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE>:
                            fn $Flag(&self) -> bool {
  224390:	48 83 ec 18          	sub    $0x18,%rsp
  224394:	48 89 3c 24          	mov    %rdi,(%rsp)
  224398:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22439d:	31 c0                	xor    %eax,%eax
  22439f:	a8 01                	test   $0x1,%al
  2243a1:	75 17                	jne    2243ba <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE+0x2a>
  2243a3:	48 8b 04 24          	mov    (%rsp),%rax
  2243a7:	8b 00                	mov    (%rax),%eax
  2243a9:	83 e0 02             	and    $0x2,%eax
  2243ac:	83 f8 02             	cmp    $0x2,%eax
  2243af:	0f 94 c0             	sete   %al
  2243b2:	24 01                	and    $0x1,%al
  2243b4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2243b8:	eb 05                	jmp    2243bf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE+0x2f>
  2243ba:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2243bf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2243c3:	24 01                	and    $0x1,%al
  2243c5:	0f b6 c0             	movzbl %al,%eax
  2243c8:	48 83 c4 18          	add    $0x18,%rsp
  2243cc:	c3                   	retq   
  2243cd:	cc                   	int3   
  2243ce:	cc                   	int3   
  2243cf:	cc                   	int3   

00000000002243d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E>:
                            fn $Flag(&self) -> bool {
  2243d0:	48 83 ec 18          	sub    $0x18,%rsp
  2243d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2243d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2243dd:	31 c0                	xor    %eax,%eax
  2243df:	a8 01                	test   $0x1,%al
  2243e1:	75 17                	jne    2243fa <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E+0x2a>
  2243e3:	48 8b 04 24          	mov    (%rsp),%rax
  2243e7:	8b 00                	mov    (%rax),%eax
  2243e9:	83 e0 04             	and    $0x4,%eax
  2243ec:	83 f8 04             	cmp    $0x4,%eax
  2243ef:	0f 94 c0             	sete   %al
  2243f2:	24 01                	and    $0x1,%al
  2243f4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2243f8:	eb 05                	jmp    2243ff <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E+0x2f>
  2243fa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2243ff:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224403:	24 01                	and    $0x1,%al
  224405:	0f b6 c0             	movzbl %al,%eax
  224408:	48 83 c4 18          	add    $0x18,%rsp
  22440c:	c3                   	retq   
  22440d:	cc                   	int3   
  22440e:	cc                   	int3   
  22440f:	cc                   	int3   

0000000000224410 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE>:
                            fn $Flag(&self) -> bool {
  224410:	48 83 ec 18          	sub    $0x18,%rsp
  224414:	48 89 3c 24          	mov    %rdi,(%rsp)
  224418:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22441d:	31 c0                	xor    %eax,%eax
  22441f:	a8 01                	test   $0x1,%al
  224421:	75 17                	jne    22443a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE+0x2a>
  224423:	48 8b 04 24          	mov    (%rsp),%rax
  224427:	8b 00                	mov    (%rax),%eax
  224429:	83 e0 08             	and    $0x8,%eax
  22442c:	83 f8 08             	cmp    $0x8,%eax
  22442f:	0f 94 c0             	sete   %al
  224432:	24 01                	and    $0x1,%al
  224434:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224438:	eb 05                	jmp    22443f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE+0x2f>
  22443a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22443f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224443:	24 01                	and    $0x1,%al
  224445:	0f b6 c0             	movzbl %al,%eax
  224448:	48 83 c4 18          	add    $0x18,%rsp
  22444c:	c3                   	retq   
  22444d:	cc                   	int3   
  22444e:	cc                   	int3   
  22444f:	cc                   	int3   

0000000000224450 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E>:
                            fn $Flag(&self) -> bool {
  224450:	48 83 ec 18          	sub    $0x18,%rsp
  224454:	48 89 3c 24          	mov    %rdi,(%rsp)
  224458:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22445d:	31 c0                	xor    %eax,%eax
  22445f:	a8 01                	test   $0x1,%al
  224461:	75 17                	jne    22447a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E+0x2a>
  224463:	48 8b 04 24          	mov    (%rsp),%rax
  224467:	8b 00                	mov    (%rax),%eax
  224469:	83 e0 10             	and    $0x10,%eax
  22446c:	83 f8 10             	cmp    $0x10,%eax
  22446f:	0f 94 c0             	sete   %al
  224472:	24 01                	and    $0x1,%al
  224474:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224478:	eb 05                	jmp    22447f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E+0x2f>
  22447a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22447f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224483:	24 01                	and    $0x1,%al
  224485:	0f b6 c0             	movzbl %al,%eax
  224488:	48 83 c4 18          	add    $0x18,%rsp
  22448c:	c3                   	retq   
  22448d:	cc                   	int3   
  22448e:	cc                   	int3   
  22448f:	cc                   	int3   

0000000000224490 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E>:
                            fn $Flag(&self) -> bool {
  224490:	48 83 ec 18          	sub    $0x18,%rsp
  224494:	48 89 3c 24          	mov    %rdi,(%rsp)
  224498:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22449d:	31 c0                	xor    %eax,%eax
  22449f:	a8 01                	test   $0x1,%al
  2244a1:	75 17                	jne    2244ba <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E+0x2a>
  2244a3:	48 8b 04 24          	mov    (%rsp),%rax
  2244a7:	8b 00                	mov    (%rax),%eax
  2244a9:	83 e0 20             	and    $0x20,%eax
  2244ac:	83 f8 20             	cmp    $0x20,%eax
  2244af:	0f 94 c0             	sete   %al
  2244b2:	24 01                	and    $0x1,%al
  2244b4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2244b8:	eb 05                	jmp    2244bf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E+0x2f>
  2244ba:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2244bf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2244c3:	24 01                	and    $0x1,%al
  2244c5:	0f b6 c0             	movzbl %al,%eax
  2244c8:	48 83 c4 18          	add    $0x18,%rsp
  2244cc:	c3                   	retq   
  2244cd:	cc                   	int3   
  2244ce:	cc                   	int3   
  2244cf:	cc                   	int3   

00000000002244d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE>:
                            fn $Flag(&self) -> bool {
  2244d0:	48 83 ec 18          	sub    $0x18,%rsp
  2244d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2244d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2244dd:	31 c0                	xor    %eax,%eax
  2244df:	a8 01                	test   $0x1,%al
  2244e1:	75 17                	jne    2244fa <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE+0x2a>
  2244e3:	48 8b 04 24          	mov    (%rsp),%rax
  2244e7:	8b 00                	mov    (%rax),%eax
  2244e9:	83 e0 40             	and    $0x40,%eax
  2244ec:	83 f8 40             	cmp    $0x40,%eax
  2244ef:	0f 94 c0             	sete   %al
  2244f2:	24 01                	and    $0x1,%al
  2244f4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2244f8:	eb 05                	jmp    2244ff <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE+0x2f>
  2244fa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2244ff:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224503:	24 01                	and    $0x1,%al
  224505:	0f b6 c0             	movzbl %al,%eax
  224508:	48 83 c4 18          	add    $0x18,%rsp
  22450c:	c3                   	retq   
  22450d:	cc                   	int3   
  22450e:	cc                   	int3   
  22450f:	cc                   	int3   

0000000000224510 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E>:
                            fn $Flag(&self) -> bool {
  224510:	48 83 ec 18          	sub    $0x18,%rsp
  224514:	48 89 3c 24          	mov    %rdi,(%rsp)
  224518:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22451d:	31 c0                	xor    %eax,%eax
  22451f:	a8 01                	test   $0x1,%al
  224521:	75 1b                	jne    22453e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E+0x2e>
  224523:	48 8b 04 24          	mov    (%rsp),%rax
  224527:	8b 00                	mov    (%rax),%eax
  224529:	25 80 00 00 00       	and    $0x80,%eax
  22452e:	3d 80 00 00 00       	cmp    $0x80,%eax
  224533:	0f 94 c0             	sete   %al
  224536:	24 01                	and    $0x1,%al
  224538:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22453c:	eb 05                	jmp    224543 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E+0x33>
  22453e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224543:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224547:	24 01                	and    $0x1,%al
  224549:	0f b6 c0             	movzbl %al,%eax
  22454c:	48 83 c4 18          	add    $0x18,%rsp
  224550:	c3                   	retq   
  224551:	cc                   	int3   
  224552:	cc                   	int3   
  224553:	cc                   	int3   
  224554:	cc                   	int3   
  224555:	cc                   	int3   
  224556:	cc                   	int3   
  224557:	cc                   	int3   
  224558:	cc                   	int3   
  224559:	cc                   	int3   
  22455a:	cc                   	int3   
  22455b:	cc                   	int3   
  22455c:	cc                   	int3   
  22455d:	cc                   	int3   
  22455e:	cc                   	int3   
  22455f:	cc                   	int3   

0000000000224560 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E>:
                            fn $Flag(&self) -> bool {
  224560:	48 83 ec 18          	sub    $0x18,%rsp
  224564:	48 89 3c 24          	mov    %rdi,(%rsp)
  224568:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22456d:	31 c0                	xor    %eax,%eax
  22456f:	a8 01                	test   $0x1,%al
  224571:	75 1b                	jne    22458e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E+0x2e>
  224573:	48 8b 04 24          	mov    (%rsp),%rax
  224577:	8b 00                	mov    (%rax),%eax
  224579:	25 00 01 00 00       	and    $0x100,%eax
  22457e:	3d 00 01 00 00       	cmp    $0x100,%eax
  224583:	0f 94 c0             	sete   %al
  224586:	24 01                	and    $0x1,%al
  224588:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22458c:	eb 05                	jmp    224593 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E+0x33>
  22458e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224593:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224597:	24 01                	and    $0x1,%al
  224599:	0f b6 c0             	movzbl %al,%eax
  22459c:	48 83 c4 18          	add    $0x18,%rsp
  2245a0:	c3                   	retq   
  2245a1:	cc                   	int3   
  2245a2:	cc                   	int3   
  2245a3:	cc                   	int3   
  2245a4:	cc                   	int3   
  2245a5:	cc                   	int3   
  2245a6:	cc                   	int3   
  2245a7:	cc                   	int3   
  2245a8:	cc                   	int3   
  2245a9:	cc                   	int3   
  2245aa:	cc                   	int3   
  2245ab:	cc                   	int3   
  2245ac:	cc                   	int3   
  2245ad:	cc                   	int3   
  2245ae:	cc                   	int3   
  2245af:	cc                   	int3   

00000000002245b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE>:
                            fn $Flag(&self) -> bool {
  2245b0:	48 83 ec 18          	sub    $0x18,%rsp
  2245b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2245b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2245bd:	31 c0                	xor    %eax,%eax
  2245bf:	a8 01                	test   $0x1,%al
  2245c1:	75 1b                	jne    2245de <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE+0x2e>
  2245c3:	48 8b 04 24          	mov    (%rsp),%rax
  2245c7:	8b 00                	mov    (%rax),%eax
  2245c9:	25 00 02 00 00       	and    $0x200,%eax
  2245ce:	3d 00 02 00 00       	cmp    $0x200,%eax
  2245d3:	0f 94 c0             	sete   %al
  2245d6:	24 01                	and    $0x1,%al
  2245d8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2245dc:	eb 05                	jmp    2245e3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE+0x33>
  2245de:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2245e3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2245e7:	24 01                	and    $0x1,%al
  2245e9:	0f b6 c0             	movzbl %al,%eax
  2245ec:	48 83 c4 18          	add    $0x18,%rsp
  2245f0:	c3                   	retq   
  2245f1:	cc                   	int3   
  2245f2:	cc                   	int3   
  2245f3:	cc                   	int3   
  2245f4:	cc                   	int3   
  2245f5:	cc                   	int3   
  2245f6:	cc                   	int3   
  2245f7:	cc                   	int3   
  2245f8:	cc                   	int3   
  2245f9:	cc                   	int3   
  2245fa:	cc                   	int3   
  2245fb:	cc                   	int3   
  2245fc:	cc                   	int3   
  2245fd:	cc                   	int3   
  2245fe:	cc                   	int3   
  2245ff:	cc                   	int3   

0000000000224600 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE>:
                            fn $Flag(&self) -> bool {
  224600:	48 83 ec 18          	sub    $0x18,%rsp
  224604:	48 89 3c 24          	mov    %rdi,(%rsp)
  224608:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22460d:	31 c0                	xor    %eax,%eax
  22460f:	a8 01                	test   $0x1,%al
  224611:	75 1b                	jne    22462e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE+0x2e>
  224613:	48 8b 04 24          	mov    (%rsp),%rax
  224617:	8b 00                	mov    (%rax),%eax
  224619:	25 00 04 00 00       	and    $0x400,%eax
  22461e:	3d 00 04 00 00       	cmp    $0x400,%eax
  224623:	0f 94 c0             	sete   %al
  224626:	24 01                	and    $0x1,%al
  224628:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22462c:	eb 05                	jmp    224633 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE+0x33>
  22462e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224633:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224637:	24 01                	and    $0x1,%al
  224639:	0f b6 c0             	movzbl %al,%eax
  22463c:	48 83 c4 18          	add    $0x18,%rsp
  224640:	c3                   	retq   
  224641:	cc                   	int3   
  224642:	cc                   	int3   
  224643:	cc                   	int3   
  224644:	cc                   	int3   
  224645:	cc                   	int3   
  224646:	cc                   	int3   
  224647:	cc                   	int3   
  224648:	cc                   	int3   
  224649:	cc                   	int3   
  22464a:	cc                   	int3   
  22464b:	cc                   	int3   
  22464c:	cc                   	int3   
  22464d:	cc                   	int3   
  22464e:	cc                   	int3   
  22464f:	cc                   	int3   

0000000000224650 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE>:
                            fn $Flag(&self) -> bool {
  224650:	48 83 ec 18          	sub    $0x18,%rsp
  224654:	48 89 3c 24          	mov    %rdi,(%rsp)
  224658:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22465d:	31 c0                	xor    %eax,%eax
  22465f:	a8 01                	test   $0x1,%al
  224661:	75 1b                	jne    22467e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE+0x2e>
  224663:	48 8b 04 24          	mov    (%rsp),%rax
  224667:	8b 00                	mov    (%rax),%eax
  224669:	25 00 10 00 00       	and    $0x1000,%eax
  22466e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  224673:	0f 94 c0             	sete   %al
  224676:	24 01                	and    $0x1,%al
  224678:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22467c:	eb 05                	jmp    224683 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE+0x33>
  22467e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224683:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224687:	24 01                	and    $0x1,%al
  224689:	0f b6 c0             	movzbl %al,%eax
  22468c:	48 83 c4 18          	add    $0x18,%rsp
  224690:	c3                   	retq   
  224691:	cc                   	int3   
  224692:	cc                   	int3   
  224693:	cc                   	int3   
  224694:	cc                   	int3   
  224695:	cc                   	int3   
  224696:	cc                   	int3   
  224697:	cc                   	int3   
  224698:	cc                   	int3   
  224699:	cc                   	int3   
  22469a:	cc                   	int3   
  22469b:	cc                   	int3   
  22469c:	cc                   	int3   
  22469d:	cc                   	int3   
  22469e:	cc                   	int3   
  22469f:	cc                   	int3   

00000000002246a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE>:
                            fn $Flag(&self) -> bool {
  2246a0:	48 83 ec 18          	sub    $0x18,%rsp
  2246a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2246a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2246ad:	31 c0                	xor    %eax,%eax
  2246af:	a8 01                	test   $0x1,%al
  2246b1:	75 1b                	jne    2246ce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE+0x2e>
  2246b3:	48 8b 04 24          	mov    (%rsp),%rax
  2246b7:	8b 00                	mov    (%rax),%eax
  2246b9:	25 00 20 00 00       	and    $0x2000,%eax
  2246be:	3d 00 20 00 00       	cmp    $0x2000,%eax
  2246c3:	0f 94 c0             	sete   %al
  2246c6:	24 01                	and    $0x1,%al
  2246c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2246cc:	eb 05                	jmp    2246d3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE+0x33>
  2246ce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2246d3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2246d7:	24 01                	and    $0x1,%al
  2246d9:	0f b6 c0             	movzbl %al,%eax
  2246dc:	48 83 c4 18          	add    $0x18,%rsp
  2246e0:	c3                   	retq   
  2246e1:	cc                   	int3   
  2246e2:	cc                   	int3   
  2246e3:	cc                   	int3   
  2246e4:	cc                   	int3   
  2246e5:	cc                   	int3   
  2246e6:	cc                   	int3   
  2246e7:	cc                   	int3   
  2246e8:	cc                   	int3   
  2246e9:	cc                   	int3   
  2246ea:	cc                   	int3   
  2246eb:	cc                   	int3   
  2246ec:	cc                   	int3   
  2246ed:	cc                   	int3   
  2246ee:	cc                   	int3   
  2246ef:	cc                   	int3   

00000000002246f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E>:
                            fn $Flag(&self) -> bool {
  2246f0:	48 83 ec 18          	sub    $0x18,%rsp
  2246f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2246f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2246fd:	31 c0                	xor    %eax,%eax
  2246ff:	a8 01                	test   $0x1,%al
  224701:	75 1b                	jne    22471e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E+0x2e>
  224703:	48 8b 04 24          	mov    (%rsp),%rax
  224707:	8b 00                	mov    (%rax),%eax
  224709:	25 00 40 00 00       	and    $0x4000,%eax
  22470e:	3d 00 40 00 00       	cmp    $0x4000,%eax
  224713:	0f 94 c0             	sete   %al
  224716:	24 01                	and    $0x1,%al
  224718:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22471c:	eb 05                	jmp    224723 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E+0x33>
  22471e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224723:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224727:	24 01                	and    $0x1,%al
  224729:	0f b6 c0             	movzbl %al,%eax
  22472c:	48 83 c4 18          	add    $0x18,%rsp
  224730:	c3                   	retq   
  224731:	cc                   	int3   
  224732:	cc                   	int3   
  224733:	cc                   	int3   
  224734:	cc                   	int3   
  224735:	cc                   	int3   
  224736:	cc                   	int3   
  224737:	cc                   	int3   
  224738:	cc                   	int3   
  224739:	cc                   	int3   
  22473a:	cc                   	int3   
  22473b:	cc                   	int3   
  22473c:	cc                   	int3   
  22473d:	cc                   	int3   
  22473e:	cc                   	int3   
  22473f:	cc                   	int3   

0000000000224740 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE>:
                            fn $Flag(&self) -> bool {
  224740:	48 83 ec 18          	sub    $0x18,%rsp
  224744:	48 89 3c 24          	mov    %rdi,(%rsp)
  224748:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22474d:	31 c0                	xor    %eax,%eax
  22474f:	a8 01                	test   $0x1,%al
  224751:	75 1b                	jne    22476e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE+0x2e>
  224753:	48 8b 04 24          	mov    (%rsp),%rax
  224757:	8b 00                	mov    (%rax),%eax
  224759:	25 00 80 00 00       	and    $0x8000,%eax
  22475e:	3d 00 80 00 00       	cmp    $0x8000,%eax
  224763:	0f 94 c0             	sete   %al
  224766:	24 01                	and    $0x1,%al
  224768:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22476c:	eb 05                	jmp    224773 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE+0x33>
  22476e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224773:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224777:	24 01                	and    $0x1,%al
  224779:	0f b6 c0             	movzbl %al,%eax
  22477c:	48 83 c4 18          	add    $0x18,%rsp
  224780:	c3                   	retq   
  224781:	cc                   	int3   
  224782:	cc                   	int3   
  224783:	cc                   	int3   
  224784:	cc                   	int3   
  224785:	cc                   	int3   
  224786:	cc                   	int3   
  224787:	cc                   	int3   
  224788:	cc                   	int3   
  224789:	cc                   	int3   
  22478a:	cc                   	int3   
  22478b:	cc                   	int3   
  22478c:	cc                   	int3   
  22478d:	cc                   	int3   
  22478e:	cc                   	int3   
  22478f:	cc                   	int3   

0000000000224790 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E>:
                            fn $Flag(&self) -> bool {
  224790:	48 83 ec 18          	sub    $0x18,%rsp
  224794:	48 89 3c 24          	mov    %rdi,(%rsp)
  224798:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22479d:	31 c0                	xor    %eax,%eax
  22479f:	a8 01                	test   $0x1,%al
  2247a1:	75 1b                	jne    2247be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E+0x2e>
  2247a3:	48 8b 04 24          	mov    (%rsp),%rax
  2247a7:	8b 00                	mov    (%rax),%eax
  2247a9:	25 00 00 02 00       	and    $0x20000,%eax
  2247ae:	3d 00 00 02 00       	cmp    $0x20000,%eax
  2247b3:	0f 94 c0             	sete   %al
  2247b6:	24 01                	and    $0x1,%al
  2247b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2247bc:	eb 05                	jmp    2247c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E+0x33>
  2247be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2247c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2247c7:	24 01                	and    $0x1,%al
  2247c9:	0f b6 c0             	movzbl %al,%eax
  2247cc:	48 83 c4 18          	add    $0x18,%rsp
  2247d0:	c3                   	retq   
  2247d1:	cc                   	int3   
  2247d2:	cc                   	int3   
  2247d3:	cc                   	int3   
  2247d4:	cc                   	int3   
  2247d5:	cc                   	int3   
  2247d6:	cc                   	int3   
  2247d7:	cc                   	int3   
  2247d8:	cc                   	int3   
  2247d9:	cc                   	int3   
  2247da:	cc                   	int3   
  2247db:	cc                   	int3   
  2247dc:	cc                   	int3   
  2247dd:	cc                   	int3   
  2247de:	cc                   	int3   
  2247df:	cc                   	int3   

00000000002247e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE>:
                            fn $Flag(&self) -> bool {
  2247e0:	48 83 ec 18          	sub    $0x18,%rsp
  2247e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2247e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2247ed:	31 c0                	xor    %eax,%eax
  2247ef:	a8 01                	test   $0x1,%al
  2247f1:	75 1b                	jne    22480e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE+0x2e>
  2247f3:	48 8b 04 24          	mov    (%rsp),%rax
  2247f7:	8b 00                	mov    (%rax),%eax
  2247f9:	25 00 00 04 00       	and    $0x40000,%eax
  2247fe:	3d 00 00 04 00       	cmp    $0x40000,%eax
  224803:	0f 94 c0             	sete   %al
  224806:	24 01                	and    $0x1,%al
  224808:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22480c:	eb 05                	jmp    224813 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE+0x33>
  22480e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224813:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224817:	24 01                	and    $0x1,%al
  224819:	0f b6 c0             	movzbl %al,%eax
  22481c:	48 83 c4 18          	add    $0x18,%rsp
  224820:	c3                   	retq   
  224821:	cc                   	int3   
  224822:	cc                   	int3   
  224823:	cc                   	int3   
  224824:	cc                   	int3   
  224825:	cc                   	int3   
  224826:	cc                   	int3   
  224827:	cc                   	int3   
  224828:	cc                   	int3   
  224829:	cc                   	int3   
  22482a:	cc                   	int3   
  22482b:	cc                   	int3   
  22482c:	cc                   	int3   
  22482d:	cc                   	int3   
  22482e:	cc                   	int3   
  22482f:	cc                   	int3   

0000000000224830 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE>:
                            fn $Flag(&self) -> bool {
  224830:	48 83 ec 18          	sub    $0x18,%rsp
  224834:	48 89 3c 24          	mov    %rdi,(%rsp)
  224838:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22483d:	31 c0                	xor    %eax,%eax
  22483f:	a8 01                	test   $0x1,%al
  224841:	75 1b                	jne    22485e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE+0x2e>
  224843:	48 8b 04 24          	mov    (%rsp),%rax
  224847:	8b 00                	mov    (%rax),%eax
  224849:	25 00 00 08 00       	and    $0x80000,%eax
  22484e:	3d 00 00 08 00       	cmp    $0x80000,%eax
  224853:	0f 94 c0             	sete   %al
  224856:	24 01                	and    $0x1,%al
  224858:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22485c:	eb 05                	jmp    224863 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE+0x33>
  22485e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224863:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224867:	24 01                	and    $0x1,%al
  224869:	0f b6 c0             	movzbl %al,%eax
  22486c:	48 83 c4 18          	add    $0x18,%rsp
  224870:	c3                   	retq   
  224871:	cc                   	int3   
  224872:	cc                   	int3   
  224873:	cc                   	int3   
  224874:	cc                   	int3   
  224875:	cc                   	int3   
  224876:	cc                   	int3   
  224877:	cc                   	int3   
  224878:	cc                   	int3   
  224879:	cc                   	int3   
  22487a:	cc                   	int3   
  22487b:	cc                   	int3   
  22487c:	cc                   	int3   
  22487d:	cc                   	int3   
  22487e:	cc                   	int3   
  22487f:	cc                   	int3   

0000000000224880 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE>:
                            fn $Flag(&self) -> bool {
  224880:	48 83 ec 18          	sub    $0x18,%rsp
  224884:	48 89 3c 24          	mov    %rdi,(%rsp)
  224888:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22488d:	31 c0                	xor    %eax,%eax
  22488f:	a8 01                	test   $0x1,%al
  224891:	75 1b                	jne    2248ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE+0x2e>
  224893:	48 8b 04 24          	mov    (%rsp),%rax
  224897:	8b 00                	mov    (%rax),%eax
  224899:	25 00 00 10 00       	and    $0x100000,%eax
  22489e:	3d 00 00 10 00       	cmp    $0x100000,%eax
  2248a3:	0f 94 c0             	sete   %al
  2248a6:	24 01                	and    $0x1,%al
  2248a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2248ac:	eb 05                	jmp    2248b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE+0x33>
  2248ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2248b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2248b7:	24 01                	and    $0x1,%al
  2248b9:	0f b6 c0             	movzbl %al,%eax
  2248bc:	48 83 c4 18          	add    $0x18,%rsp
  2248c0:	c3                   	retq   
  2248c1:	cc                   	int3   
  2248c2:	cc                   	int3   
  2248c3:	cc                   	int3   
  2248c4:	cc                   	int3   
  2248c5:	cc                   	int3   
  2248c6:	cc                   	int3   
  2248c7:	cc                   	int3   
  2248c8:	cc                   	int3   
  2248c9:	cc                   	int3   
  2248ca:	cc                   	int3   
  2248cb:	cc                   	int3   
  2248cc:	cc                   	int3   
  2248cd:	cc                   	int3   
  2248ce:	cc                   	int3   
  2248cf:	cc                   	int3   

00000000002248d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E>:
                            fn $Flag(&self) -> bool {
  2248d0:	48 83 ec 18          	sub    $0x18,%rsp
  2248d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2248d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2248dd:	31 c0                	xor    %eax,%eax
  2248df:	a8 01                	test   $0x1,%al
  2248e1:	75 1b                	jne    2248fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E+0x2e>
  2248e3:	48 8b 04 24          	mov    (%rsp),%rax
  2248e7:	8b 00                	mov    (%rax),%eax
  2248e9:	25 00 00 20 00       	and    $0x200000,%eax
  2248ee:	3d 00 00 20 00       	cmp    $0x200000,%eax
  2248f3:	0f 94 c0             	sete   %al
  2248f6:	24 01                	and    $0x1,%al
  2248f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2248fc:	eb 05                	jmp    224903 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E+0x33>
  2248fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224903:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224907:	24 01                	and    $0x1,%al
  224909:	0f b6 c0             	movzbl %al,%eax
  22490c:	48 83 c4 18          	add    $0x18,%rsp
  224910:	c3                   	retq   
  224911:	cc                   	int3   
  224912:	cc                   	int3   
  224913:	cc                   	int3   
  224914:	cc                   	int3   
  224915:	cc                   	int3   
  224916:	cc                   	int3   
  224917:	cc                   	int3   
  224918:	cc                   	int3   
  224919:	cc                   	int3   
  22491a:	cc                   	int3   
  22491b:	cc                   	int3   
  22491c:	cc                   	int3   
  22491d:	cc                   	int3   
  22491e:	cc                   	int3   
  22491f:	cc                   	int3   

0000000000224920 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E>:
                            fn $Flag(&self) -> bool {
  224920:	48 83 ec 18          	sub    $0x18,%rsp
  224924:	48 89 3c 24          	mov    %rdi,(%rsp)
  224928:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22492d:	31 c0                	xor    %eax,%eax
  22492f:	a8 01                	test   $0x1,%al
  224931:	75 1b                	jne    22494e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E+0x2e>
  224933:	48 8b 04 24          	mov    (%rsp),%rax
  224937:	8b 00                	mov    (%rax),%eax
  224939:	25 00 00 40 00       	and    $0x400000,%eax
  22493e:	3d 00 00 40 00       	cmp    $0x400000,%eax
  224943:	0f 94 c0             	sete   %al
  224946:	24 01                	and    $0x1,%al
  224948:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22494c:	eb 05                	jmp    224953 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E+0x33>
  22494e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224953:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224957:	24 01                	and    $0x1,%al
  224959:	0f b6 c0             	movzbl %al,%eax
  22495c:	48 83 c4 18          	add    $0x18,%rsp
  224960:	c3                   	retq   
  224961:	cc                   	int3   
  224962:	cc                   	int3   
  224963:	cc                   	int3   
  224964:	cc                   	int3   
  224965:	cc                   	int3   
  224966:	cc                   	int3   
  224967:	cc                   	int3   
  224968:	cc                   	int3   
  224969:	cc                   	int3   
  22496a:	cc                   	int3   
  22496b:	cc                   	int3   
  22496c:	cc                   	int3   
  22496d:	cc                   	int3   
  22496e:	cc                   	int3   
  22496f:	cc                   	int3   

0000000000224970 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E>:
                            fn $Flag(&self) -> bool {
  224970:	48 83 ec 18          	sub    $0x18,%rsp
  224974:	48 89 3c 24          	mov    %rdi,(%rsp)
  224978:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22497d:	31 c0                	xor    %eax,%eax
  22497f:	a8 01                	test   $0x1,%al
  224981:	75 1b                	jne    22499e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E+0x2e>
  224983:	48 8b 04 24          	mov    (%rsp),%rax
  224987:	8b 00                	mov    (%rax),%eax
  224989:	25 00 00 80 00       	and    $0x800000,%eax
  22498e:	3d 00 00 80 00       	cmp    $0x800000,%eax
  224993:	0f 94 c0             	sete   %al
  224996:	24 01                	and    $0x1,%al
  224998:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22499c:	eb 05                	jmp    2249a3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E+0x33>
  22499e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2249a3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2249a7:	24 01                	and    $0x1,%al
  2249a9:	0f b6 c0             	movzbl %al,%eax
  2249ac:	48 83 c4 18          	add    $0x18,%rsp
  2249b0:	c3                   	retq   
  2249b1:	cc                   	int3   
  2249b2:	cc                   	int3   
  2249b3:	cc                   	int3   
  2249b4:	cc                   	int3   
  2249b5:	cc                   	int3   
  2249b6:	cc                   	int3   
  2249b7:	cc                   	int3   
  2249b8:	cc                   	int3   
  2249b9:	cc                   	int3   
  2249ba:	cc                   	int3   
  2249bb:	cc                   	int3   
  2249bc:	cc                   	int3   
  2249bd:	cc                   	int3   
  2249be:	cc                   	int3   
  2249bf:	cc                   	int3   

00000000002249c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E>:
                            fn $Flag(&self) -> bool {
  2249c0:	48 83 ec 18          	sub    $0x18,%rsp
  2249c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2249c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2249cd:	31 c0                	xor    %eax,%eax
  2249cf:	a8 01                	test   $0x1,%al
  2249d1:	75 1b                	jne    2249ee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E+0x2e>
  2249d3:	48 8b 04 24          	mov    (%rsp),%rax
  2249d7:	8b 00                	mov    (%rax),%eax
  2249d9:	25 00 00 00 01       	and    $0x1000000,%eax
  2249de:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  2249e3:	0f 94 c0             	sete   %al
  2249e6:	24 01                	and    $0x1,%al
  2249e8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2249ec:	eb 05                	jmp    2249f3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E+0x33>
  2249ee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2249f3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2249f7:	24 01                	and    $0x1,%al
  2249f9:	0f b6 c0             	movzbl %al,%eax
  2249fc:	48 83 c4 18          	add    $0x18,%rsp
  224a00:	c3                   	retq   
  224a01:	cc                   	int3   
  224a02:	cc                   	int3   
  224a03:	cc                   	int3   
  224a04:	cc                   	int3   
  224a05:	cc                   	int3   
  224a06:	cc                   	int3   
  224a07:	cc                   	int3   
  224a08:	cc                   	int3   
  224a09:	cc                   	int3   
  224a0a:	cc                   	int3   
  224a0b:	cc                   	int3   
  224a0c:	cc                   	int3   
  224a0d:	cc                   	int3   
  224a0e:	cc                   	int3   
  224a0f:	cc                   	int3   

0000000000224a10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE>:
                            fn $Flag(&self) -> bool {
  224a10:	48 83 ec 18          	sub    $0x18,%rsp
  224a14:	48 89 3c 24          	mov    %rdi,(%rsp)
  224a18:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224a1d:	31 c0                	xor    %eax,%eax
  224a1f:	a8 01                	test   $0x1,%al
  224a21:	75 1b                	jne    224a3e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE+0x2e>
  224a23:	48 8b 04 24          	mov    (%rsp),%rax
  224a27:	8b 00                	mov    (%rax),%eax
  224a29:	25 00 00 00 02       	and    $0x2000000,%eax
  224a2e:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  224a33:	0f 94 c0             	sete   %al
  224a36:	24 01                	and    $0x1,%al
  224a38:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224a3c:	eb 05                	jmp    224a43 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE+0x33>
  224a3e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224a43:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224a47:	24 01                	and    $0x1,%al
  224a49:	0f b6 c0             	movzbl %al,%eax
  224a4c:	48 83 c4 18          	add    $0x18,%rsp
  224a50:	c3                   	retq   
  224a51:	cc                   	int3   
  224a52:	cc                   	int3   
  224a53:	cc                   	int3   
  224a54:	cc                   	int3   
  224a55:	cc                   	int3   
  224a56:	cc                   	int3   
  224a57:	cc                   	int3   
  224a58:	cc                   	int3   
  224a59:	cc                   	int3   
  224a5a:	cc                   	int3   
  224a5b:	cc                   	int3   
  224a5c:	cc                   	int3   
  224a5d:	cc                   	int3   
  224a5e:	cc                   	int3   
  224a5f:	cc                   	int3   

0000000000224a60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE>:
                            fn $Flag(&self) -> bool {
  224a60:	48 83 ec 18          	sub    $0x18,%rsp
  224a64:	48 89 3c 24          	mov    %rdi,(%rsp)
  224a68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224a6d:	31 c0                	xor    %eax,%eax
  224a6f:	a8 01                	test   $0x1,%al
  224a71:	75 1b                	jne    224a8e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE+0x2e>
  224a73:	48 8b 04 24          	mov    (%rsp),%rax
  224a77:	8b 00                	mov    (%rax),%eax
  224a79:	25 00 00 00 04       	and    $0x4000000,%eax
  224a7e:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  224a83:	0f 94 c0             	sete   %al
  224a86:	24 01                	and    $0x1,%al
  224a88:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224a8c:	eb 05                	jmp    224a93 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE+0x33>
  224a8e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224a93:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224a97:	24 01                	and    $0x1,%al
  224a99:	0f b6 c0             	movzbl %al,%eax
  224a9c:	48 83 c4 18          	add    $0x18,%rsp
  224aa0:	c3                   	retq   
  224aa1:	cc                   	int3   
  224aa2:	cc                   	int3   
  224aa3:	cc                   	int3   
  224aa4:	cc                   	int3   
  224aa5:	cc                   	int3   
  224aa6:	cc                   	int3   
  224aa7:	cc                   	int3   
  224aa8:	cc                   	int3   
  224aa9:	cc                   	int3   
  224aaa:	cc                   	int3   
  224aab:	cc                   	int3   
  224aac:	cc                   	int3   
  224aad:	cc                   	int3   
  224aae:	cc                   	int3   
  224aaf:	cc                   	int3   

0000000000224ab0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE>:
                            fn $Flag(&self) -> bool {
  224ab0:	48 83 ec 18          	sub    $0x18,%rsp
  224ab4:	48 89 3c 24          	mov    %rdi,(%rsp)
  224ab8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224abd:	31 c0                	xor    %eax,%eax
  224abf:	a8 01                	test   $0x1,%al
  224ac1:	75 1b                	jne    224ade <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE+0x2e>
  224ac3:	48 8b 04 24          	mov    (%rsp),%rax
  224ac7:	8b 00                	mov    (%rax),%eax
  224ac9:	25 00 00 00 08       	and    $0x8000000,%eax
  224ace:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  224ad3:	0f 94 c0             	sete   %al
  224ad6:	24 01                	and    $0x1,%al
  224ad8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224adc:	eb 05                	jmp    224ae3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE+0x33>
  224ade:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224ae3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224ae7:	24 01                	and    $0x1,%al
  224ae9:	0f b6 c0             	movzbl %al,%eax
  224aec:	48 83 c4 18          	add    $0x18,%rsp
  224af0:	c3                   	retq   
  224af1:	cc                   	int3   
  224af2:	cc                   	int3   
  224af3:	cc                   	int3   
  224af4:	cc                   	int3   
  224af5:	cc                   	int3   
  224af6:	cc                   	int3   
  224af7:	cc                   	int3   
  224af8:	cc                   	int3   
  224af9:	cc                   	int3   
  224afa:	cc                   	int3   
  224afb:	cc                   	int3   
  224afc:	cc                   	int3   
  224afd:	cc                   	int3   
  224afe:	cc                   	int3   
  224aff:	cc                   	int3   

0000000000224b00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E>:
                            fn $Flag(&self) -> bool {
  224b00:	48 83 ec 18          	sub    $0x18,%rsp
  224b04:	48 89 3c 24          	mov    %rdi,(%rsp)
  224b08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224b0d:	31 c0                	xor    %eax,%eax
  224b0f:	a8 01                	test   $0x1,%al
  224b11:	75 1b                	jne    224b2e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E+0x2e>
  224b13:	48 8b 04 24          	mov    (%rsp),%rax
  224b17:	8b 00                	mov    (%rax),%eax
  224b19:	25 00 00 00 10       	and    $0x10000000,%eax
  224b1e:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  224b23:	0f 94 c0             	sete   %al
  224b26:	24 01                	and    $0x1,%al
  224b28:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224b2c:	eb 05                	jmp    224b33 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E+0x33>
  224b2e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224b33:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224b37:	24 01                	and    $0x1,%al
  224b39:	0f b6 c0             	movzbl %al,%eax
  224b3c:	48 83 c4 18          	add    $0x18,%rsp
  224b40:	c3                   	retq   
  224b41:	cc                   	int3   
  224b42:	cc                   	int3   
  224b43:	cc                   	int3   
  224b44:	cc                   	int3   
  224b45:	cc                   	int3   
  224b46:	cc                   	int3   
  224b47:	cc                   	int3   
  224b48:	cc                   	int3   
  224b49:	cc                   	int3   
  224b4a:	cc                   	int3   
  224b4b:	cc                   	int3   
  224b4c:	cc                   	int3   
  224b4d:	cc                   	int3   
  224b4e:	cc                   	int3   
  224b4f:	cc                   	int3   

0000000000224b50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  224b50:	48 81 ec d8 04 00 00 	sub    $0x4d8,%rsp
  224b57:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  224b5c:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  224b61:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  224b68:	00 
  224b69:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  224b70:	00 
                let mut first = true;
  224b71:	c6 44 24 7f 01       	movb   $0x1,0x7f(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  224b76:	e8 b5 1b 00 00       	callq  226730 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E>
  224b7b:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  224b7f:	8a 44 24 7d          	mov    0x7d(%rsp),%al
bitflags! {
  224b83:	a8 01                	test   $0x1,%al
  224b85:	75 15                	jne    224b9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4c>
  224b87:	eb 00                	jmp    224b89 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x39>
  224b89:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  224b8e:	e8 dd 1b 00 00       	callq  226770 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E>
  224b93:	88 44 24 67          	mov    %al,0x67(%rsp)
  224b97:	e9 c6 00 00 00       	jmpq   224c62 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x112>
                        if !first {
  224b9c:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224ba0:	34 ff                	xor    $0xff,%al
  224ba2:	a8 01                	test   $0x1,%al
  224ba4:	75 21                	jne    224bc7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x77>
  224ba6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224bab:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224bb0:	48 8d 35 cf e1 fd ff 	lea    -0x21e31(%rip),%rsi        # 202d86 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1ce>
  224bb7:	ba 03 00 00 00       	mov    $0x3,%edx
  224bbc:	e8 ef 32 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224bc1:	88 44 24 66          	mov    %al,0x66(%rsp)
  224bc5:	eb 60                	jmp    224c27 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd7>
  224bc7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224bcc:	48 8d 35 3b e1 fd ff 	lea    -0x21ec5(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  224bd3:	ba 03 00 00 00       	mov    $0x3,%edx
  224bd8:	e8 d3 32 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224bdd:	88 44 24 65          	mov    %al,0x65(%rsp)
  224be1:	8a 44 24 65          	mov    0x65(%rsp),%al
  224be5:	0f b6 f8             	movzbl %al,%edi
  224be8:	83 e7 01             	and    $0x1,%edi
  224beb:	e8 a0 6f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224bf0:	24 01                	and    $0x1,%al
  224bf2:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  224bf9:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  224c00:	00 
  224c01:	a8 01                	test   $0x1,%al
  224c03:	74 a1                	je     224ba6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x56>
  224c05:	eb 00                	jmp    224c07 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb7>
  224c07:	eb 02                	jmp    224c0b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbb>
  224c09:	0f 0b                	ud2    
  224c0b:	e8 c0 60 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224c10:	24 01                	and    $0x1,%al
  224c12:	88 44 24 7e          	mov    %al,0x7e(%rsp)
            }
  224c16:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  224c1a:	24 01                	and    $0x1,%al
  224c1c:	0f b6 c0             	movzbl %al,%eax
  224c1f:	48 81 c4 d8 04 00 00 	add    $0x4d8,%rsp
  224c26:	c3                   	retq   
  224c27:	8a 44 24 66          	mov    0x66(%rsp),%al
  224c2b:	0f b6 f8             	movzbl %al,%edi
  224c2e:	83 e7 01             	and    $0x1,%edi
  224c31:	e8 5a 6f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224c36:	24 01                	and    $0x1,%al
  224c38:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  224c3f:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  224c46:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224c47:	a8 01                	test   $0x1,%al
  224c49:	0f 84 3a ff ff ff    	je     224b89 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x39>
  224c4f:	eb 00                	jmp    224c51 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x101>
  224c51:	eb 02                	jmp    224c55 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x105>
  224c53:	0f 0b                	ud2    
  224c55:	e8 76 60 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224c5a:	24 01                	and    $0x1,%al
  224c5c:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224c60:	eb b4                	jmp    224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224c62:	8a 44 24 67          	mov    0x67(%rsp),%al
  224c66:	a8 01                	test   $0x1,%al
  224c68:	75 15                	jne    224c7f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12f>
  224c6a:	eb 00                	jmp    224c6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c>
  224c6c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  224c71:	e8 3a 1b 00 00       	callq  2267b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE>
  224c76:	88 44 24 64          	mov    %al,0x64(%rsp)
  224c7a:	e9 bd 00 00 00       	jmpq   224d3c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ec>
                        if !first {
  224c7f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224c83:	34 ff                	xor    $0xff,%al
  224c85:	a8 01                	test   $0x1,%al
  224c87:	75 21                	jne    224caa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15a>
  224c89:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224c8e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224c93:	48 8d 35 ef e0 fd ff 	lea    -0x21f11(%rip),%rsi        # 202d89 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1d1>
  224c9a:	ba 03 00 00 00       	mov    $0x3,%edx
  224c9f:	e8 0c 32 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224ca4:	88 44 24 63          	mov    %al,0x63(%rsp)
  224ca8:	eb 54                	jmp    224cfe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ae>
  224caa:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224caf:	48 8d 35 58 e0 fd ff 	lea    -0x21fa8(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  224cb6:	ba 03 00 00 00       	mov    $0x3,%edx
  224cbb:	e8 f0 31 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224cc0:	88 44 24 62          	mov    %al,0x62(%rsp)
  224cc4:	8a 44 24 62          	mov    0x62(%rsp),%al
  224cc8:	0f b6 f8             	movzbl %al,%edi
  224ccb:	83 e7 01             	and    $0x1,%edi
  224cce:	e8 bd 6e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224cd3:	24 01                	and    $0x1,%al
  224cd5:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  224cdc:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  224ce3:	00 
  224ce4:	a8 01                	test   $0x1,%al
  224ce6:	74 a1                	je     224c89 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x139>
  224ce8:	eb 00                	jmp    224cea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19a>
  224cea:	eb 02                	jmp    224cee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19e>
  224cec:	0f 0b                	ud2    
  224cee:	e8 dd 5f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224cf3:	24 01                	and    $0x1,%al
  224cf5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224cf9:	e9 18 ff ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224cfe:	8a 44 24 63          	mov    0x63(%rsp),%al
  224d02:	0f b6 f8             	movzbl %al,%edi
  224d05:	83 e7 01             	and    $0x1,%edi
  224d08:	e8 83 6e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224d0d:	24 01                	and    $0x1,%al
  224d0f:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  224d16:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  224d1d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224d1e:	a8 01                	test   $0x1,%al
  224d20:	0f 84 46 ff ff ff    	je     224c6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c>
  224d26:	eb 00                	jmp    224d28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1d8>
  224d28:	eb 02                	jmp    224d2c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1dc>
  224d2a:	0f 0b                	ud2    
  224d2c:	e8 9f 5f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224d31:	24 01                	and    $0x1,%al
  224d33:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224d37:	e9 da fe ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224d3c:	8a 44 24 64          	mov    0x64(%rsp),%al
  224d40:	a8 01                	test   $0x1,%al
  224d42:	75 15                	jne    224d59 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x209>
  224d44:	eb 00                	jmp    224d46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1f6>
  224d46:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  224d4b:	e8 a0 1a 00 00       	callq  2267f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E>
  224d50:	88 44 24 61          	mov    %al,0x61(%rsp)
  224d54:	e9 bd 00 00 00       	jmpq   224e16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2c6>
                        if !first {
  224d59:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224d5d:	34 ff                	xor    $0xff,%al
  224d5f:	a8 01                	test   $0x1,%al
  224d61:	75 21                	jne    224d84 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x234>
  224d63:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224d68:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224d6d:	48 8d 35 18 e0 fd ff 	lea    -0x21fe8(%rip),%rsi        # 202d8c <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1d4>
  224d74:	ba 02 00 00 00       	mov    $0x2,%edx
  224d79:	e8 32 31 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224d7e:	88 44 24 60          	mov    %al,0x60(%rsp)
  224d82:	eb 54                	jmp    224dd8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x288>
  224d84:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224d89:	48 8d 35 7e df fd ff 	lea    -0x22082(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  224d90:	ba 03 00 00 00       	mov    $0x3,%edx
  224d95:	e8 16 31 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224d9a:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  224d9e:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  224da2:	0f b6 f8             	movzbl %al,%edi
  224da5:	83 e7 01             	and    $0x1,%edi
  224da8:	e8 e3 6d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224dad:	24 01                	and    $0x1,%al
  224daf:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  224db6:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  224dbd:	00 
  224dbe:	a8 01                	test   $0x1,%al
  224dc0:	74 a1                	je     224d63 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x213>
  224dc2:	eb 00                	jmp    224dc4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x274>
  224dc4:	eb 02                	jmp    224dc8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x278>
  224dc6:	0f 0b                	ud2    
  224dc8:	e8 03 5f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224dcd:	24 01                	and    $0x1,%al
  224dcf:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224dd3:	e9 3e fe ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224dd8:	8a 44 24 60          	mov    0x60(%rsp),%al
  224ddc:	0f b6 f8             	movzbl %al,%edi
  224ddf:	83 e7 01             	and    $0x1,%edi
  224de2:	e8 a9 6d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224de7:	24 01                	and    $0x1,%al
  224de9:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  224df0:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  224df7:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224df8:	a8 01                	test   $0x1,%al
  224dfa:	0f 84 46 ff ff ff    	je     224d46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1f6>
  224e00:	eb 00                	jmp    224e02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2b2>
  224e02:	eb 02                	jmp    224e06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2b6>
  224e04:	0f 0b                	ud2    
  224e06:	e8 c5 5e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224e0b:	24 01                	and    $0x1,%al
  224e0d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224e11:	e9 00 fe ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224e16:	8a 44 24 61          	mov    0x61(%rsp),%al
  224e1a:	a8 01                	test   $0x1,%al
  224e1c:	75 15                	jne    224e33 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2e3>
  224e1e:	eb 00                	jmp    224e20 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2d0>
  224e20:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  224e25:	e8 06 1a 00 00       	callq  226830 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E>
  224e2a:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  224e2e:	e9 bd 00 00 00       	jmpq   224ef0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3a0>
                        if !first {
  224e33:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224e37:	34 ff                	xor    $0xff,%al
  224e39:	a8 01                	test   $0x1,%al
  224e3b:	75 21                	jne    224e5e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x30e>
  224e3d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224e42:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224e47:	48 8d 35 40 df fd ff 	lea    -0x220c0(%rip),%rsi        # 202d8e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1d6>
  224e4e:	ba 03 00 00 00       	mov    $0x3,%edx
  224e53:	e8 58 30 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224e58:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  224e5c:	eb 54                	jmp    224eb2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x362>
  224e5e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224e63:	48 8d 35 a4 de fd ff 	lea    -0x2215c(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  224e6a:	ba 03 00 00 00       	mov    $0x3,%edx
  224e6f:	e8 3c 30 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224e74:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  224e78:	8a 44 24 5c          	mov    0x5c(%rsp),%al
  224e7c:	0f b6 f8             	movzbl %al,%edi
  224e7f:	83 e7 01             	and    $0x1,%edi
  224e82:	e8 09 6d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224e87:	24 01                	and    $0x1,%al
  224e89:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  224e90:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  224e97:	00 
  224e98:	a8 01                	test   $0x1,%al
  224e9a:	74 a1                	je     224e3d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2ed>
  224e9c:	eb 00                	jmp    224e9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x34e>
  224e9e:	eb 02                	jmp    224ea2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x352>
  224ea0:	0f 0b                	ud2    
  224ea2:	e8 29 5e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224ea7:	24 01                	and    $0x1,%al
  224ea9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224ead:	e9 64 fd ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224eb2:	8a 44 24 5d          	mov    0x5d(%rsp),%al
  224eb6:	0f b6 f8             	movzbl %al,%edi
  224eb9:	83 e7 01             	and    $0x1,%edi
  224ebc:	e8 cf 6c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224ec1:	24 01                	and    $0x1,%al
  224ec3:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  224eca:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  224ed1:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224ed2:	a8 01                	test   $0x1,%al
  224ed4:	0f 84 46 ff ff ff    	je     224e20 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2d0>
  224eda:	eb 00                	jmp    224edc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x38c>
  224edc:	eb 02                	jmp    224ee0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x390>
  224ede:	0f 0b                	ud2    
  224ee0:	e8 eb 5d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224ee5:	24 01                	and    $0x1,%al
  224ee7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224eeb:	e9 26 fd ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224ef0:	8a 44 24 5e          	mov    0x5e(%rsp),%al
  224ef4:	a8 01                	test   $0x1,%al
  224ef6:	75 15                	jne    224f0d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3bd>
  224ef8:	eb 00                	jmp    224efa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3aa>
  224efa:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  224eff:	e8 6c 19 00 00       	callq  226870 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE>
  224f04:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  224f08:	e9 bd 00 00 00       	jmpq   224fca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x47a>
                        if !first {
  224f0d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224f11:	34 ff                	xor    $0xff,%al
  224f13:	a8 01                	test   $0x1,%al
  224f15:	75 21                	jne    224f38 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3e8>
  224f17:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224f1c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224f21:	48 8d 35 69 de fd ff 	lea    -0x22197(%rip),%rsi        # 202d91 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1d9>
  224f28:	ba 03 00 00 00       	mov    $0x3,%edx
  224f2d:	e8 7e 2f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224f32:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  224f36:	eb 54                	jmp    224f8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x43c>
  224f38:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224f3d:	48 8d 35 ca dd fd ff 	lea    -0x22236(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  224f44:	ba 03 00 00 00       	mov    $0x3,%edx
  224f49:	e8 62 2f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224f4e:	88 44 24 59          	mov    %al,0x59(%rsp)
  224f52:	8a 44 24 59          	mov    0x59(%rsp),%al
  224f56:	0f b6 f8             	movzbl %al,%edi
  224f59:	83 e7 01             	and    $0x1,%edi
  224f5c:	e8 2f 6c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224f61:	24 01                	and    $0x1,%al
  224f63:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  224f6a:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  224f71:	00 
  224f72:	a8 01                	test   $0x1,%al
  224f74:	74 a1                	je     224f17 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3c7>
  224f76:	eb 00                	jmp    224f78 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x428>
  224f78:	eb 02                	jmp    224f7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x42c>
  224f7a:	0f 0b                	ud2    
  224f7c:	e8 4f 5d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224f81:	24 01                	and    $0x1,%al
  224f83:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224f87:	e9 8a fc ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224f8c:	8a 44 24 5a          	mov    0x5a(%rsp),%al
  224f90:	0f b6 f8             	movzbl %al,%edi
  224f93:	83 e7 01             	and    $0x1,%edi
  224f96:	e8 f5 6b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224f9b:	24 01                	and    $0x1,%al
  224f9d:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  224fa4:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  224fab:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  224fac:	a8 01                	test   $0x1,%al
  224fae:	0f 84 46 ff ff ff    	je     224efa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3aa>
  224fb4:	eb 00                	jmp    224fb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x466>
  224fb6:	eb 02                	jmp    224fba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x46a>
  224fb8:	0f 0b                	ud2    
  224fba:	e8 11 5d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224fbf:	24 01                	and    $0x1,%al
  224fc1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224fc5:	e9 4c fc ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224fca:	8a 44 24 5b          	mov    0x5b(%rsp),%al
  224fce:	a8 01                	test   $0x1,%al
  224fd0:	75 15                	jne    224fe7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x497>
  224fd2:	eb 00                	jmp    224fd4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x484>
  224fd4:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  224fd9:	e8 d2 18 00 00       	callq  2268b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E>
  224fde:	88 44 24 58          	mov    %al,0x58(%rsp)
  224fe2:	e9 bd 00 00 00       	jmpq   2250a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x554>
                        if !first {
  224fe7:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224feb:	34 ff                	xor    $0xff,%al
  224fed:	a8 01                	test   $0x1,%al
  224fef:	75 21                	jne    225012 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4c2>
  224ff1:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  224ff6:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224ffb:	48 8d 35 92 dd fd ff 	lea    -0x2226e(%rip),%rsi        # 202d94 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1dc>
  225002:	ba 03 00 00 00       	mov    $0x3,%edx
  225007:	e8 a4 2e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22500c:	88 44 24 57          	mov    %al,0x57(%rsp)
  225010:	eb 54                	jmp    225066 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x516>
  225012:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225017:	48 8d 35 f0 dc fd ff 	lea    -0x22310(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22501e:	ba 03 00 00 00       	mov    $0x3,%edx
  225023:	e8 88 2e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225028:	88 44 24 56          	mov    %al,0x56(%rsp)
  22502c:	8a 44 24 56          	mov    0x56(%rsp),%al
  225030:	0f b6 f8             	movzbl %al,%edi
  225033:	83 e7 01             	and    $0x1,%edi
  225036:	e8 55 6b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22503b:	24 01                	and    $0x1,%al
  22503d:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  225044:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  22504b:	00 
  22504c:	a8 01                	test   $0x1,%al
  22504e:	74 a1                	je     224ff1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4a1>
  225050:	eb 00                	jmp    225052 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x502>
  225052:	eb 02                	jmp    225056 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x506>
  225054:	0f 0b                	ud2    
  225056:	e8 75 5c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22505b:	24 01                	and    $0x1,%al
  22505d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225061:	e9 b0 fb ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225066:	8a 44 24 57          	mov    0x57(%rsp),%al
  22506a:	0f b6 f8             	movzbl %al,%edi
  22506d:	83 e7 01             	and    $0x1,%edi
  225070:	e8 1b 6b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225075:	24 01                	and    $0x1,%al
  225077:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  22507e:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  225085:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225086:	a8 01                	test   $0x1,%al
  225088:	0f 84 46 ff ff ff    	je     224fd4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x484>
  22508e:	eb 00                	jmp    225090 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x540>
  225090:	eb 02                	jmp    225094 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x544>
  225092:	0f 0b                	ud2    
  225094:	e8 37 5c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225099:	24 01                	and    $0x1,%al
  22509b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22509f:	e9 72 fb ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2250a4:	8a 44 24 58          	mov    0x58(%rsp),%al
  2250a8:	a8 01                	test   $0x1,%al
  2250aa:	75 15                	jne    2250c1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x571>
  2250ac:	eb 00                	jmp    2250ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x55e>
  2250ae:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2250b3:	e8 38 18 00 00       	callq  2268f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E>
  2250b8:	88 44 24 55          	mov    %al,0x55(%rsp)
  2250bc:	e9 bd 00 00 00       	jmpq   22517e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x62e>
                        if !first {
  2250c1:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2250c5:	34 ff                	xor    $0xff,%al
  2250c7:	a8 01                	test   $0x1,%al
  2250c9:	75 21                	jne    2250ec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x59c>
  2250cb:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2250d0:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2250d5:	48 8d 35 bb dc fd ff 	lea    -0x22345(%rip),%rsi        # 202d97 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1df>
  2250dc:	ba 03 00 00 00       	mov    $0x3,%edx
  2250e1:	e8 ca 2d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2250e6:	88 44 24 54          	mov    %al,0x54(%rsp)
  2250ea:	eb 54                	jmp    225140 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5f0>
  2250ec:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2250f1:	48 8d 35 16 dc fd ff 	lea    -0x223ea(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2250f8:	ba 03 00 00 00       	mov    $0x3,%edx
  2250fd:	e8 ae 2d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225102:	88 44 24 53          	mov    %al,0x53(%rsp)
  225106:	8a 44 24 53          	mov    0x53(%rsp),%al
  22510a:	0f b6 f8             	movzbl %al,%edi
  22510d:	83 e7 01             	and    $0x1,%edi
  225110:	e8 7b 6a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225115:	24 01                	and    $0x1,%al
  225117:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  22511e:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  225125:	00 
  225126:	a8 01                	test   $0x1,%al
  225128:	74 a1                	je     2250cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x57b>
  22512a:	eb 00                	jmp    22512c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5dc>
  22512c:	eb 02                	jmp    225130 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5e0>
  22512e:	0f 0b                	ud2    
  225130:	e8 9b 5b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225135:	24 01                	and    $0x1,%al
  225137:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22513b:	e9 d6 fa ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225140:	8a 44 24 54          	mov    0x54(%rsp),%al
  225144:	0f b6 f8             	movzbl %al,%edi
  225147:	83 e7 01             	and    $0x1,%edi
  22514a:	e8 41 6a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22514f:	24 01                	and    $0x1,%al
  225151:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  225158:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  22515f:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225160:	a8 01                	test   $0x1,%al
  225162:	0f 84 46 ff ff ff    	je     2250ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x55e>
  225168:	eb 00                	jmp    22516a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x61a>
  22516a:	eb 02                	jmp    22516e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x61e>
  22516c:	0f 0b                	ud2    
  22516e:	e8 5d 5b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225173:	24 01                	and    $0x1,%al
  225175:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225179:	e9 98 fa ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22517e:	8a 44 24 55          	mov    0x55(%rsp),%al
  225182:	a8 01                	test   $0x1,%al
  225184:	75 15                	jne    22519b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x64b>
  225186:	eb 00                	jmp    225188 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x638>
  225188:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22518d:	e8 ae 17 00 00       	callq  226940 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E>
  225192:	88 44 24 52          	mov    %al,0x52(%rsp)
  225196:	e9 bd 00 00 00       	jmpq   225258 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x708>
                        if !first {
  22519b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22519f:	34 ff                	xor    $0xff,%al
  2251a1:	a8 01                	test   $0x1,%al
  2251a3:	75 21                	jne    2251c6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x676>
  2251a5:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2251aa:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2251af:	48 8d 35 e4 db fd ff 	lea    -0x2241c(%rip),%rsi        # 202d9a <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1e2>
  2251b6:	ba 03 00 00 00       	mov    $0x3,%edx
  2251bb:	e8 f0 2c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2251c0:	88 44 24 51          	mov    %al,0x51(%rsp)
  2251c4:	eb 54                	jmp    22521a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6ca>
  2251c6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2251cb:	48 8d 35 3c db fd ff 	lea    -0x224c4(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2251d2:	ba 03 00 00 00       	mov    $0x3,%edx
  2251d7:	e8 d4 2c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2251dc:	88 44 24 50          	mov    %al,0x50(%rsp)
  2251e0:	8a 44 24 50          	mov    0x50(%rsp),%al
  2251e4:	0f b6 f8             	movzbl %al,%edi
  2251e7:	83 e7 01             	and    $0x1,%edi
  2251ea:	e8 a1 69 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2251ef:	24 01                	and    $0x1,%al
  2251f1:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  2251f8:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  2251ff:	00 
  225200:	a8 01                	test   $0x1,%al
  225202:	74 a1                	je     2251a5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x655>
  225204:	eb 00                	jmp    225206 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6b6>
  225206:	eb 02                	jmp    22520a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6ba>
  225208:	0f 0b                	ud2    
  22520a:	e8 c1 5a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22520f:	24 01                	and    $0x1,%al
  225211:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225215:	e9 fc f9 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22521a:	8a 44 24 51          	mov    0x51(%rsp),%al
  22521e:	0f b6 f8             	movzbl %al,%edi
  225221:	83 e7 01             	and    $0x1,%edi
  225224:	e8 67 69 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225229:	24 01                	and    $0x1,%al
  22522b:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  225232:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  225239:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22523a:	a8 01                	test   $0x1,%al
  22523c:	0f 84 46 ff ff ff    	je     225188 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x638>
  225242:	eb 00                	jmp    225244 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6f4>
  225244:	eb 02                	jmp    225248 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6f8>
  225246:	0f 0b                	ud2    
  225248:	e8 83 5a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22524d:	24 01                	and    $0x1,%al
  22524f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225253:	e9 be f9 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225258:	8a 44 24 52          	mov    0x52(%rsp),%al
  22525c:	a8 01                	test   $0x1,%al
  22525e:	75 15                	jne    225275 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x725>
  225260:	eb 00                	jmp    225262 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x712>
  225262:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225267:	e8 24 17 00 00       	callq  226990 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E>
  22526c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  225270:	e9 bd 00 00 00       	jmpq   225332 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7e2>
                        if !first {
  225275:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225279:	34 ff                	xor    $0xff,%al
  22527b:	a8 01                	test   $0x1,%al
  22527d:	75 21                	jne    2252a0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x750>
  22527f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225284:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225289:	48 8d 35 0d db fd ff 	lea    -0x224f3(%rip),%rsi        # 202d9d <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1e5>
  225290:	ba 03 00 00 00       	mov    $0x3,%edx
  225295:	e8 16 2c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22529a:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  22529e:	eb 54                	jmp    2252f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7a4>
  2252a0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2252a5:	48 8d 35 62 da fd ff 	lea    -0x2259e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2252ac:	ba 03 00 00 00       	mov    $0x3,%edx
  2252b1:	e8 fa 2b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2252b6:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  2252ba:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2252be:	0f b6 f8             	movzbl %al,%edi
  2252c1:	83 e7 01             	and    $0x1,%edi
  2252c4:	e8 c7 68 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2252c9:	24 01                	and    $0x1,%al
  2252cb:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  2252d2:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  2252d9:	00 
  2252da:	a8 01                	test   $0x1,%al
  2252dc:	74 a1                	je     22527f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x72f>
  2252de:	eb 00                	jmp    2252e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x790>
  2252e0:	eb 02                	jmp    2252e4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x794>
  2252e2:	0f 0b                	ud2    
  2252e4:	e8 e7 59 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2252e9:	24 01                	and    $0x1,%al
  2252eb:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2252ef:	e9 22 f9 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2252f4:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  2252f8:	0f b6 f8             	movzbl %al,%edi
  2252fb:	83 e7 01             	and    $0x1,%edi
  2252fe:	e8 8d 68 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225303:	24 01                	and    $0x1,%al
  225305:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  22530c:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  225313:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225314:	a8 01                	test   $0x1,%al
  225316:	0f 84 46 ff ff ff    	je     225262 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x712>
  22531c:	eb 00                	jmp    22531e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ce>
  22531e:	eb 02                	jmp    225322 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7d2>
  225320:	0f 0b                	ud2    
  225322:	e8 a9 59 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225327:	24 01                	and    $0x1,%al
  225329:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22532d:	e9 e4 f8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225332:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  225336:	a8 01                	test   $0x1,%al
  225338:	75 15                	jne    22534f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ff>
  22533a:	eb 00                	jmp    22533c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ec>
  22533c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225341:	e8 9a 16 00 00       	callq  2269e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE>
  225346:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  22534a:	e9 bd 00 00 00       	jmpq   22540c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8bc>
                        if !first {
  22534f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225353:	34 ff                	xor    $0xff,%al
  225355:	a8 01                	test   $0x1,%al
  225357:	75 21                	jne    22537a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x82a>
  225359:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22535e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225363:	48 8d 35 26 b6 fd ff 	lea    -0x249da(%rip),%rsi        # 200990 <str.2+0xf0>
  22536a:	ba 04 00 00 00       	mov    $0x4,%edx
  22536f:	e8 3c 2b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225374:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  225378:	eb 54                	jmp    2253ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x87e>
  22537a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22537f:	48 8d 35 88 d9 fd ff 	lea    -0x22678(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225386:	ba 03 00 00 00       	mov    $0x3,%edx
  22538b:	e8 20 2b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225390:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  225394:	8a 44 24 4a          	mov    0x4a(%rsp),%al
  225398:	0f b6 f8             	movzbl %al,%edi
  22539b:	83 e7 01             	and    $0x1,%edi
  22539e:	e8 ed 67 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2253a3:	24 01                	and    $0x1,%al
  2253a5:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  2253ac:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  2253b3:	00 
  2253b4:	a8 01                	test   $0x1,%al
  2253b6:	74 a1                	je     225359 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x809>
  2253b8:	eb 00                	jmp    2253ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x86a>
  2253ba:	eb 02                	jmp    2253be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x86e>
  2253bc:	0f 0b                	ud2    
  2253be:	e8 0d 59 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2253c3:	24 01                	and    $0x1,%al
  2253c5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2253c9:	e9 48 f8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2253ce:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  2253d2:	0f b6 f8             	movzbl %al,%edi
  2253d5:	83 e7 01             	and    $0x1,%edi
  2253d8:	e8 b3 67 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2253dd:	24 01                	and    $0x1,%al
  2253df:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  2253e6:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  2253ed:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2253ee:	a8 01                	test   $0x1,%al
  2253f0:	0f 84 46 ff ff ff    	je     22533c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ec>
  2253f6:	eb 00                	jmp    2253f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8a8>
  2253f8:	eb 02                	jmp    2253fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8ac>
  2253fa:	0f 0b                	ud2    
  2253fc:	e8 cf 58 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225401:	24 01                	and    $0x1,%al
  225403:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225407:	e9 0a f8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22540c:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  225410:	a8 01                	test   $0x1,%al
  225412:	75 15                	jne    225429 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8d9>
  225414:	eb 00                	jmp    225416 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8c6>
  225416:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22541b:	e8 10 16 00 00       	callq  226a30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E>
  225420:	88 44 24 49          	mov    %al,0x49(%rsp)
  225424:	e9 bd 00 00 00       	jmpq   2254e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x996>
                        if !first {
  225429:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22542d:	34 ff                	xor    $0xff,%al
  22542f:	a8 01                	test   $0x1,%al
  225431:	75 21                	jne    225454 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x904>
  225433:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225438:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22543d:	48 8d 35 5c d9 fd ff 	lea    -0x226a4(%rip),%rsi        # 202da0 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1e8>
  225444:	ba 03 00 00 00       	mov    $0x3,%edx
  225449:	e8 62 2a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22544e:	88 44 24 48          	mov    %al,0x48(%rsp)
  225452:	eb 54                	jmp    2254a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x958>
  225454:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225459:	48 8d 35 ae d8 fd ff 	lea    -0x22752(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225460:	ba 03 00 00 00       	mov    $0x3,%edx
  225465:	e8 46 2a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22546a:	88 44 24 47          	mov    %al,0x47(%rsp)
  22546e:	8a 44 24 47          	mov    0x47(%rsp),%al
  225472:	0f b6 f8             	movzbl %al,%edi
  225475:	83 e7 01             	and    $0x1,%edi
  225478:	e8 13 67 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22547d:	24 01                	and    $0x1,%al
  22547f:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  225486:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  22548d:	00 
  22548e:	a8 01                	test   $0x1,%al
  225490:	74 a1                	je     225433 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8e3>
  225492:	eb 00                	jmp    225494 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x944>
  225494:	eb 02                	jmp    225498 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x948>
  225496:	0f 0b                	ud2    
  225498:	e8 33 58 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22549d:	24 01                	and    $0x1,%al
  22549f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2254a3:	e9 6e f7 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2254a8:	8a 44 24 48          	mov    0x48(%rsp),%al
  2254ac:	0f b6 f8             	movzbl %al,%edi
  2254af:	83 e7 01             	and    $0x1,%edi
  2254b2:	e8 d9 66 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2254b7:	24 01                	and    $0x1,%al
  2254b9:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  2254c0:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  2254c7:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2254c8:	a8 01                	test   $0x1,%al
  2254ca:	0f 84 46 ff ff ff    	je     225416 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8c6>
  2254d0:	eb 00                	jmp    2254d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x982>
  2254d2:	eb 02                	jmp    2254d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x986>
  2254d4:	0f 0b                	ud2    
  2254d6:	e8 f5 57 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2254db:	24 01                	and    $0x1,%al
  2254dd:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2254e1:	e9 30 f7 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2254e6:	8a 44 24 49          	mov    0x49(%rsp),%al
  2254ea:	a8 01                	test   $0x1,%al
  2254ec:	75 15                	jne    225503 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9b3>
  2254ee:	eb 00                	jmp    2254f0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9a0>
  2254f0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2254f5:	e8 86 15 00 00       	callq  226a80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E>
  2254fa:	88 44 24 46          	mov    %al,0x46(%rsp)
  2254fe:	e9 bd 00 00 00       	jmpq   2255c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa70>
                        if !first {
  225503:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225507:	34 ff                	xor    $0xff,%al
  225509:	a8 01                	test   $0x1,%al
  22550b:	75 21                	jne    22552e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9de>
  22550d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225512:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225517:	48 8d 35 b2 b4 fd ff 	lea    -0x24b4e(%rip),%rsi        # 2009d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x38>
  22551e:	ba 04 00 00 00       	mov    $0x4,%edx
  225523:	e8 88 29 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225528:	88 44 24 45          	mov    %al,0x45(%rsp)
  22552c:	eb 54                	jmp    225582 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa32>
  22552e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225533:	48 8d 35 d4 d7 fd ff 	lea    -0x2282c(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22553a:	ba 03 00 00 00       	mov    $0x3,%edx
  22553f:	e8 6c 29 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225544:	88 44 24 44          	mov    %al,0x44(%rsp)
  225548:	8a 44 24 44          	mov    0x44(%rsp),%al
  22554c:	0f b6 f8             	movzbl %al,%edi
  22554f:	83 e7 01             	and    $0x1,%edi
  225552:	e8 39 66 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225557:	24 01                	and    $0x1,%al
  225559:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  225560:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  225567:	00 
  225568:	a8 01                	test   $0x1,%al
  22556a:	74 a1                	je     22550d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9bd>
  22556c:	eb 00                	jmp    22556e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa1e>
  22556e:	eb 02                	jmp    225572 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa22>
  225570:	0f 0b                	ud2    
  225572:	e8 59 57 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225577:	24 01                	and    $0x1,%al
  225579:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22557d:	e9 94 f6 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225582:	8a 44 24 45          	mov    0x45(%rsp),%al
  225586:	0f b6 f8             	movzbl %al,%edi
  225589:	83 e7 01             	and    $0x1,%edi
  22558c:	e8 ff 65 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225591:	24 01                	and    $0x1,%al
  225593:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  22559a:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  2255a1:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2255a2:	a8 01                	test   $0x1,%al
  2255a4:	0f 84 46 ff ff ff    	je     2254f0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9a0>
  2255aa:	eb 00                	jmp    2255ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa5c>
  2255ac:	eb 02                	jmp    2255b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa60>
  2255ae:	0f 0b                	ud2    
  2255b0:	e8 1b 57 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2255b5:	24 01                	and    $0x1,%al
  2255b7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2255bb:	e9 56 f6 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2255c0:	8a 44 24 46          	mov    0x46(%rsp),%al
  2255c4:	a8 01                	test   $0x1,%al
  2255c6:	75 15                	jne    2255dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa8d>
  2255c8:	eb 00                	jmp    2255ca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa7a>
  2255ca:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2255cf:	e8 fc 14 00 00       	callq  226ad0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E>
  2255d4:	88 44 24 43          	mov    %al,0x43(%rsp)
  2255d8:	e9 bd 00 00 00       	jmpq   22569a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb4a>
                        if !first {
  2255dd:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2255e1:	34 ff                	xor    $0xff,%al
  2255e3:	a8 01                	test   $0x1,%al
  2255e5:	75 21                	jne    225608 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xab8>
  2255e7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2255ec:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2255f1:	48 8d 35 ab d7 fd ff 	lea    -0x22855(%rip),%rsi        # 202da3 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1eb>
  2255f8:	ba 03 00 00 00       	mov    $0x3,%edx
  2255fd:	e8 ae 28 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225602:	88 44 24 42          	mov    %al,0x42(%rsp)
  225606:	eb 54                	jmp    22565c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb0c>
  225608:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22560d:	48 8d 35 fa d6 fd ff 	lea    -0x22906(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225614:	ba 03 00 00 00       	mov    $0x3,%edx
  225619:	e8 92 28 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22561e:	88 44 24 41          	mov    %al,0x41(%rsp)
  225622:	8a 44 24 41          	mov    0x41(%rsp),%al
  225626:	0f b6 f8             	movzbl %al,%edi
  225629:	83 e7 01             	and    $0x1,%edi
  22562c:	e8 5f 65 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225631:	24 01                	and    $0x1,%al
  225633:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  22563a:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  225641:	00 
  225642:	a8 01                	test   $0x1,%al
  225644:	74 a1                	je     2255e7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa97>
  225646:	eb 00                	jmp    225648 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xaf8>
  225648:	eb 02                	jmp    22564c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xafc>
  22564a:	0f 0b                	ud2    
  22564c:	e8 7f 56 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225651:	24 01                	and    $0x1,%al
  225653:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225657:	e9 ba f5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22565c:	8a 44 24 42          	mov    0x42(%rsp),%al
  225660:	0f b6 f8             	movzbl %al,%edi
  225663:	83 e7 01             	and    $0x1,%edi
  225666:	e8 25 65 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22566b:	24 01                	and    $0x1,%al
  22566d:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  225674:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  22567b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22567c:	a8 01                	test   $0x1,%al
  22567e:	0f 84 46 ff ff ff    	je     2255ca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa7a>
  225684:	eb 00                	jmp    225686 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb36>
  225686:	eb 02                	jmp    22568a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb3a>
  225688:	0f 0b                	ud2    
  22568a:	e8 41 56 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22568f:	24 01                	and    $0x1,%al
  225691:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225695:	e9 7c f5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22569a:	8a 44 24 43          	mov    0x43(%rsp),%al
  22569e:	a8 01                	test   $0x1,%al
  2256a0:	75 15                	jne    2256b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb67>
  2256a2:	eb 00                	jmp    2256a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb54>
  2256a4:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2256a9:	e8 72 14 00 00       	callq  226b20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE>
  2256ae:	88 44 24 40          	mov    %al,0x40(%rsp)
  2256b2:	e9 bd 00 00 00       	jmpq   225774 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc24>
                        if !first {
  2256b7:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2256bb:	34 ff                	xor    $0xff,%al
  2256bd:	a8 01                	test   $0x1,%al
  2256bf:	75 21                	jne    2256e2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb92>
  2256c1:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2256c6:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2256cb:	48 8d 35 d4 d6 fd ff 	lea    -0x2292c(%rip),%rsi        # 202da6 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1ee>
  2256d2:	ba 03 00 00 00       	mov    $0x3,%edx
  2256d7:	e8 d4 27 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2256dc:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2256e0:	eb 54                	jmp    225736 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbe6>
  2256e2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2256e7:	48 8d 35 20 d6 fd ff 	lea    -0x229e0(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2256ee:	ba 03 00 00 00       	mov    $0x3,%edx
  2256f3:	e8 b8 27 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2256f8:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  2256fc:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  225700:	0f b6 f8             	movzbl %al,%edi
  225703:	83 e7 01             	and    $0x1,%edi
  225706:	e8 85 64 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22570b:	24 01                	and    $0x1,%al
  22570d:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  225714:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  22571b:	00 
  22571c:	a8 01                	test   $0x1,%al
  22571e:	74 a1                	je     2256c1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb71>
  225720:	eb 00                	jmp    225722 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbd2>
  225722:	eb 02                	jmp    225726 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbd6>
  225724:	0f 0b                	ud2    
  225726:	e8 a5 55 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22572b:	24 01                	and    $0x1,%al
  22572d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225731:	e9 e0 f4 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225736:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  22573a:	0f b6 f8             	movzbl %al,%edi
  22573d:	83 e7 01             	and    $0x1,%edi
  225740:	e8 4b 64 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225745:	24 01                	and    $0x1,%al
  225747:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  22574e:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  225755:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225756:	a8 01                	test   $0x1,%al
  225758:	0f 84 46 ff ff ff    	je     2256a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb54>
  22575e:	eb 00                	jmp    225760 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc10>
  225760:	eb 02                	jmp    225764 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc14>
  225762:	0f 0b                	ud2    
  225764:	e8 67 55 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225769:	24 01                	and    $0x1,%al
  22576b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22576f:	e9 a2 f4 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225774:	8a 44 24 40          	mov    0x40(%rsp),%al
  225778:	a8 01                	test   $0x1,%al
  22577a:	75 15                	jne    225791 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc41>
  22577c:	eb 00                	jmp    22577e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc2e>
  22577e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225783:	e8 e8 13 00 00       	callq  226b70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E>
  225788:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  22578c:	e9 bd 00 00 00       	jmpq   22584e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcfe>
                        if !first {
  225791:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225795:	34 ff                	xor    $0xff,%al
  225797:	a8 01                	test   $0x1,%al
  225799:	75 21                	jne    2257bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6c>
  22579b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2257a0:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2257a5:	48 8d 35 c8 b1 fd ff 	lea    -0x24e38(%rip),%rsi        # 200974 <str.2+0xd4>
  2257ac:	ba 04 00 00 00       	mov    $0x4,%edx
  2257b1:	e8 fa 26 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2257b6:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  2257ba:	eb 54                	jmp    225810 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcc0>
  2257bc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2257c1:	48 8d 35 46 d5 fd ff 	lea    -0x22aba(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2257c8:	ba 03 00 00 00       	mov    $0x3,%edx
  2257cd:	e8 de 26 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2257d2:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  2257d6:	8a 44 24 3b          	mov    0x3b(%rsp),%al
  2257da:	0f b6 f8             	movzbl %al,%edi
  2257dd:	83 e7 01             	and    $0x1,%edi
  2257e0:	e8 ab 63 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2257e5:	24 01                	and    $0x1,%al
  2257e7:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  2257ee:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  2257f5:	00 
  2257f6:	a8 01                	test   $0x1,%al
  2257f8:	74 a1                	je     22579b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc4b>
  2257fa:	eb 00                	jmp    2257fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcac>
  2257fc:	eb 02                	jmp    225800 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcb0>
  2257fe:	0f 0b                	ud2    
  225800:	e8 cb 54 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225805:	24 01                	and    $0x1,%al
  225807:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22580b:	e9 06 f4 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225810:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  225814:	0f b6 f8             	movzbl %al,%edi
  225817:	83 e7 01             	and    $0x1,%edi
  22581a:	e8 71 63 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22581f:	24 01                	and    $0x1,%al
  225821:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  225828:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  22582f:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225830:	a8 01                	test   $0x1,%al
  225832:	0f 84 46 ff ff ff    	je     22577e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc2e>
  225838:	eb 00                	jmp    22583a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcea>
  22583a:	eb 02                	jmp    22583e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcee>
  22583c:	0f 0b                	ud2    
  22583e:	e8 8d 54 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225843:	24 01                	and    $0x1,%al
  225845:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225849:	e9 c8 f3 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22584e:	8a 44 24 3d          	mov    0x3d(%rsp),%al
  225852:	a8 01                	test   $0x1,%al
  225854:	75 15                	jne    22586b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd1b>
  225856:	eb 00                	jmp    225858 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd08>
  225858:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22585d:	e8 5e 13 00 00       	callq  226bc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E>
  225862:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  225866:	e9 bd 00 00 00       	jmpq   225928 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdd8>
                        if !first {
  22586b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22586f:	34 ff                	xor    $0xff,%al
  225871:	a8 01                	test   $0x1,%al
  225873:	75 21                	jne    225896 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd46>
  225875:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22587a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22587f:	48 8d 35 23 d5 fd ff 	lea    -0x22add(%rip),%rsi        # 202da9 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1f1>
  225886:	ba 03 00 00 00       	mov    $0x3,%edx
  22588b:	e8 20 26 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225890:	88 44 24 39          	mov    %al,0x39(%rsp)
  225894:	eb 54                	jmp    2258ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd9a>
  225896:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22589b:	48 8d 35 6c d4 fd ff 	lea    -0x22b94(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2258a2:	ba 03 00 00 00       	mov    $0x3,%edx
  2258a7:	e8 04 26 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2258ac:	88 44 24 38          	mov    %al,0x38(%rsp)
  2258b0:	8a 44 24 38          	mov    0x38(%rsp),%al
  2258b4:	0f b6 f8             	movzbl %al,%edi
  2258b7:	83 e7 01             	and    $0x1,%edi
  2258ba:	e8 d1 62 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2258bf:	24 01                	and    $0x1,%al
  2258c1:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  2258c8:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  2258cf:	00 
  2258d0:	a8 01                	test   $0x1,%al
  2258d2:	74 a1                	je     225875 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd25>
  2258d4:	eb 00                	jmp    2258d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd86>
  2258d6:	eb 02                	jmp    2258da <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd8a>
  2258d8:	0f 0b                	ud2    
  2258da:	e8 f1 53 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2258df:	24 01                	and    $0x1,%al
  2258e1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2258e5:	e9 2c f3 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2258ea:	8a 44 24 39          	mov    0x39(%rsp),%al
  2258ee:	0f b6 f8             	movzbl %al,%edi
  2258f1:	83 e7 01             	and    $0x1,%edi
  2258f4:	e8 97 62 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2258f9:	24 01                	and    $0x1,%al
  2258fb:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  225902:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  225909:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22590a:	a8 01                	test   $0x1,%al
  22590c:	0f 84 46 ff ff ff    	je     225858 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd08>
  225912:	eb 00                	jmp    225914 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdc4>
  225914:	eb 02                	jmp    225918 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdc8>
  225916:	0f 0b                	ud2    
  225918:	e8 b3 53 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22591d:	24 01                	and    $0x1,%al
  22591f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225923:	e9 ee f2 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225928:	8a 44 24 3a          	mov    0x3a(%rsp),%al
  22592c:	a8 01                	test   $0x1,%al
  22592e:	75 15                	jne    225945 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdf5>
  225930:	eb 00                	jmp    225932 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xde2>
  225932:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225937:	e8 d4 12 00 00       	callq  226c10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E>
  22593c:	88 44 24 37          	mov    %al,0x37(%rsp)
  225940:	e9 bd 00 00 00       	jmpq   225a02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xeb2>
                        if !first {
  225945:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225949:	34 ff                	xor    $0xff,%al
  22594b:	a8 01                	test   $0x1,%al
  22594d:	75 21                	jne    225970 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe20>
  22594f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225954:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225959:	48 8d 35 4c d4 fd ff 	lea    -0x22bb4(%rip),%rsi        # 202dac <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1f4>
  225960:	ba 05 00 00 00       	mov    $0x5,%edx
  225965:	e8 46 25 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22596a:	88 44 24 36          	mov    %al,0x36(%rsp)
  22596e:	eb 54                	jmp    2259c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe74>
  225970:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225975:	48 8d 35 92 d3 fd ff 	lea    -0x22c6e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22597c:	ba 03 00 00 00       	mov    $0x3,%edx
  225981:	e8 2a 25 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225986:	88 44 24 35          	mov    %al,0x35(%rsp)
  22598a:	8a 44 24 35          	mov    0x35(%rsp),%al
  22598e:	0f b6 f8             	movzbl %al,%edi
  225991:	83 e7 01             	and    $0x1,%edi
  225994:	e8 f7 61 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225999:	24 01                	and    $0x1,%al
  22599b:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  2259a2:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  2259a9:	00 
  2259aa:	a8 01                	test   $0x1,%al
  2259ac:	74 a1                	je     22594f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdff>
  2259ae:	eb 00                	jmp    2259b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe60>
  2259b0:	eb 02                	jmp    2259b4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe64>
  2259b2:	0f 0b                	ud2    
  2259b4:	e8 17 53 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2259b9:	24 01                	and    $0x1,%al
  2259bb:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2259bf:	e9 52 f2 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2259c4:	8a 44 24 36          	mov    0x36(%rsp),%al
  2259c8:	0f b6 f8             	movzbl %al,%edi
  2259cb:	83 e7 01             	and    $0x1,%edi
  2259ce:	e8 bd 61 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2259d3:	24 01                	and    $0x1,%al
  2259d5:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  2259dc:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  2259e3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2259e4:	a8 01                	test   $0x1,%al
  2259e6:	0f 84 46 ff ff ff    	je     225932 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xde2>
  2259ec:	eb 00                	jmp    2259ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe9e>
  2259ee:	eb 02                	jmp    2259f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xea2>
  2259f0:	0f 0b                	ud2    
  2259f2:	e8 d9 52 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2259f7:	24 01                	and    $0x1,%al
  2259f9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2259fd:	e9 14 f2 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225a02:	8a 44 24 37          	mov    0x37(%rsp),%al
  225a06:	a8 01                	test   $0x1,%al
  225a08:	75 15                	jne    225a1f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xecf>
  225a0a:	eb 00                	jmp    225a0c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xebc>
  225a0c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225a11:	e8 4a 12 00 00       	callq  226c60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE>
  225a16:	88 44 24 34          	mov    %al,0x34(%rsp)
  225a1a:	e9 bd 00 00 00       	jmpq   225adc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf8c>
                        if !first {
  225a1f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225a23:	34 ff                	xor    $0xff,%al
  225a25:	a8 01                	test   $0x1,%al
  225a27:	75 21                	jne    225a4a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xefa>
  225a29:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225a2e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225a33:	48 8d 35 77 d3 fd ff 	lea    -0x22c89(%rip),%rsi        # 202db1 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1f9>
  225a3a:	ba 03 00 00 00       	mov    $0x3,%edx
  225a3f:	e8 6c 24 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225a44:	88 44 24 33          	mov    %al,0x33(%rsp)
  225a48:	eb 54                	jmp    225a9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf4e>
  225a4a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225a4f:	48 8d 35 b8 d2 fd ff 	lea    -0x22d48(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225a56:	ba 03 00 00 00       	mov    $0x3,%edx
  225a5b:	e8 50 24 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225a60:	88 44 24 32          	mov    %al,0x32(%rsp)
  225a64:	8a 44 24 32          	mov    0x32(%rsp),%al
  225a68:	0f b6 f8             	movzbl %al,%edi
  225a6b:	83 e7 01             	and    $0x1,%edi
  225a6e:	e8 1d 61 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225a73:	24 01                	and    $0x1,%al
  225a75:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  225a7c:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  225a83:	00 
  225a84:	a8 01                	test   $0x1,%al
  225a86:	74 a1                	je     225a29 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xed9>
  225a88:	eb 00                	jmp    225a8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf3a>
  225a8a:	eb 02                	jmp    225a8e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf3e>
  225a8c:	0f 0b                	ud2    
  225a8e:	e8 3d 52 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225a93:	24 01                	and    $0x1,%al
  225a95:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225a99:	e9 78 f1 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225a9e:	8a 44 24 33          	mov    0x33(%rsp),%al
  225aa2:	0f b6 f8             	movzbl %al,%edi
  225aa5:	83 e7 01             	and    $0x1,%edi
  225aa8:	e8 e3 60 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225aad:	24 01                	and    $0x1,%al
  225aaf:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  225ab6:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  225abd:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225abe:	a8 01                	test   $0x1,%al
  225ac0:	0f 84 46 ff ff ff    	je     225a0c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xebc>
  225ac6:	eb 00                	jmp    225ac8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf78>
  225ac8:	eb 02                	jmp    225acc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf7c>
  225aca:	0f 0b                	ud2    
  225acc:	e8 ff 51 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225ad1:	24 01                	and    $0x1,%al
  225ad3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225ad7:	e9 3a f1 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225adc:	8a 44 24 34          	mov    0x34(%rsp),%al
  225ae0:	a8 01                	test   $0x1,%al
  225ae2:	75 15                	jne    225af9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfa9>
  225ae4:	eb 00                	jmp    225ae6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf96>
  225ae6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225aeb:	e8 c0 11 00 00       	callq  226cb0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E>
  225af0:	88 44 24 31          	mov    %al,0x31(%rsp)
  225af4:	e9 bd 00 00 00       	jmpq   225bb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1066>
                        if !first {
  225af9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225afd:	34 ff                	xor    $0xff,%al
  225aff:	a8 01                	test   $0x1,%al
  225b01:	75 21                	jne    225b24 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfd4>
  225b03:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225b08:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225b0d:	48 8d 35 a0 d2 fd ff 	lea    -0x22d60(%rip),%rsi        # 202db4 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1fc>
  225b14:	ba 03 00 00 00       	mov    $0x3,%edx
  225b19:	e8 92 23 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225b1e:	88 44 24 30          	mov    %al,0x30(%rsp)
  225b22:	eb 54                	jmp    225b78 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1028>
  225b24:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225b29:	48 8d 35 de d1 fd ff 	lea    -0x22e22(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225b30:	ba 03 00 00 00       	mov    $0x3,%edx
  225b35:	e8 76 23 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225b3a:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  225b3e:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  225b42:	0f b6 f8             	movzbl %al,%edi
  225b45:	83 e7 01             	and    $0x1,%edi
  225b48:	e8 43 60 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225b4d:	24 01                	and    $0x1,%al
  225b4f:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  225b56:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  225b5d:	00 
  225b5e:	a8 01                	test   $0x1,%al
  225b60:	74 a1                	je     225b03 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfb3>
  225b62:	eb 00                	jmp    225b64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1014>
  225b64:	eb 02                	jmp    225b68 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1018>
  225b66:	0f 0b                	ud2    
  225b68:	e8 63 51 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225b6d:	24 01                	and    $0x1,%al
  225b6f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225b73:	e9 9e f0 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225b78:	8a 44 24 30          	mov    0x30(%rsp),%al
  225b7c:	0f b6 f8             	movzbl %al,%edi
  225b7f:	83 e7 01             	and    $0x1,%edi
  225b82:	e8 09 60 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225b87:	24 01                	and    $0x1,%al
  225b89:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  225b90:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  225b97:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225b98:	a8 01                	test   $0x1,%al
  225b9a:	0f 84 46 ff ff ff    	je     225ae6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf96>
  225ba0:	eb 00                	jmp    225ba2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1052>
  225ba2:	eb 02                	jmp    225ba6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1056>
  225ba4:	0f 0b                	ud2    
  225ba6:	e8 25 51 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225bab:	24 01                	and    $0x1,%al
  225bad:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225bb1:	e9 60 f0 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225bb6:	8a 44 24 31          	mov    0x31(%rsp),%al
  225bba:	a8 01                	test   $0x1,%al
  225bbc:	75 15                	jne    225bd3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1083>
  225bbe:	eb 00                	jmp    225bc0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1070>
  225bc0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225bc5:	e8 36 11 00 00       	callq  226d00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE>
  225bca:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  225bce:	e9 bd 00 00 00       	jmpq   225c90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1140>
                        if !first {
  225bd3:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225bd7:	34 ff                	xor    $0xff,%al
  225bd9:	a8 01                	test   $0x1,%al
  225bdb:	75 21                	jne    225bfe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10ae>
  225bdd:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225be2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225be7:	48 8d 35 ae ad fd ff 	lea    -0x25252(%rip),%rsi        # 20099c <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4>
  225bee:	ba 04 00 00 00       	mov    $0x4,%edx
  225bf3:	e8 b8 22 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225bf8:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  225bfc:	eb 54                	jmp    225c52 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1102>
  225bfe:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225c03:	48 8d 35 04 d1 fd ff 	lea    -0x22efc(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225c0a:	ba 03 00 00 00       	mov    $0x3,%edx
  225c0f:	e8 9c 22 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225c14:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  225c18:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  225c1c:	0f b6 f8             	movzbl %al,%edi
  225c1f:	83 e7 01             	and    $0x1,%edi
  225c22:	e8 69 5f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225c27:	24 01                	and    $0x1,%al
  225c29:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  225c30:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  225c37:	00 
  225c38:	a8 01                	test   $0x1,%al
  225c3a:	74 a1                	je     225bdd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x108d>
  225c3c:	eb 00                	jmp    225c3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10ee>
  225c3e:	eb 02                	jmp    225c42 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10f2>
  225c40:	0f 0b                	ud2    
  225c42:	e8 89 50 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225c47:	24 01                	and    $0x1,%al
  225c49:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225c4d:	e9 c4 ef ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225c52:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  225c56:	0f b6 f8             	movzbl %al,%edi
  225c59:	83 e7 01             	and    $0x1,%edi
  225c5c:	e8 2f 5f fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225c61:	24 01                	and    $0x1,%al
  225c63:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  225c6a:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  225c71:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225c72:	a8 01                	test   $0x1,%al
  225c74:	0f 84 46 ff ff ff    	je     225bc0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1070>
  225c7a:	eb 00                	jmp    225c7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x112c>
  225c7c:	eb 02                	jmp    225c80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1130>
  225c7e:	0f 0b                	ud2    
  225c80:	e8 4b 50 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225c85:	24 01                	and    $0x1,%al
  225c87:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225c8b:	e9 86 ef ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225c90:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  225c94:	a8 01                	test   $0x1,%al
  225c96:	75 15                	jne    225cad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x115d>
  225c98:	eb 00                	jmp    225c9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x114a>
  225c9a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225c9f:	e8 ac 10 00 00       	callq  226d50 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E>
  225ca4:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  225ca8:	e9 bd 00 00 00       	jmpq   225d6a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x121a>
                        if !first {
  225cad:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225cb1:	34 ff                	xor    $0xff,%al
  225cb3:	a8 01                	test   $0x1,%al
  225cb5:	75 21                	jne    225cd8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1188>
  225cb7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225cbc:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225cc1:	48 8d 35 b8 ac fd ff 	lea    -0x25348(%rip),%rsi        # 200980 <str.2+0xe0>
  225cc8:	ba 04 00 00 00       	mov    $0x4,%edx
  225ccd:	e8 de 21 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225cd2:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  225cd6:	eb 54                	jmp    225d2c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11dc>
  225cd8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225cdd:	48 8d 35 2a d0 fd ff 	lea    -0x22fd6(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225ce4:	ba 03 00 00 00       	mov    $0x3,%edx
  225ce9:	e8 c2 21 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225cee:	88 44 24 29          	mov    %al,0x29(%rsp)
  225cf2:	8a 44 24 29          	mov    0x29(%rsp),%al
  225cf6:	0f b6 f8             	movzbl %al,%edi
  225cf9:	83 e7 01             	and    $0x1,%edi
  225cfc:	e8 8f 5e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225d01:	24 01                	and    $0x1,%al
  225d03:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  225d0a:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  225d11:	00 
  225d12:	a8 01                	test   $0x1,%al
  225d14:	74 a1                	je     225cb7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1167>
  225d16:	eb 00                	jmp    225d18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c8>
  225d18:	eb 02                	jmp    225d1c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11cc>
  225d1a:	0f 0b                	ud2    
  225d1c:	e8 af 4f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225d21:	24 01                	and    $0x1,%al
  225d23:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225d27:	e9 ea ee ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225d2c:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  225d30:	0f b6 f8             	movzbl %al,%edi
  225d33:	83 e7 01             	and    $0x1,%edi
  225d36:	e8 55 5e fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225d3b:	24 01                	and    $0x1,%al
  225d3d:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  225d44:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  225d4b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225d4c:	a8 01                	test   $0x1,%al
  225d4e:	0f 84 46 ff ff ff    	je     225c9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x114a>
  225d54:	eb 00                	jmp    225d56 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1206>
  225d56:	eb 02                	jmp    225d5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x120a>
  225d58:	0f 0b                	ud2    
  225d5a:	e8 71 4f fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225d5f:	24 01                	and    $0x1,%al
  225d61:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225d65:	e9 ac ee ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225d6a:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  225d6e:	a8 01                	test   $0x1,%al
  225d70:	75 15                	jne    225d87 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1237>
  225d72:	eb 00                	jmp    225d74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1224>
  225d74:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225d79:	e8 22 10 00 00       	callq  226da0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E>
  225d7e:	88 44 24 28          	mov    %al,0x28(%rsp)
  225d82:	e9 bd 00 00 00       	jmpq   225e44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12f4>
                        if !first {
  225d87:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225d8b:	34 ff                	xor    $0xff,%al
  225d8d:	a8 01                	test   $0x1,%al
  225d8f:	75 21                	jne    225db2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1262>
  225d91:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225d96:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225d9b:	48 8d 35 15 d0 fd ff 	lea    -0x22feb(%rip),%rsi        # 202db7 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1ff>
  225da2:	ba 03 00 00 00       	mov    $0x3,%edx
  225da7:	e8 04 21 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225dac:	88 44 24 27          	mov    %al,0x27(%rsp)
  225db0:	eb 54                	jmp    225e06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12b6>
  225db2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225db7:	48 8d 35 50 cf fd ff 	lea    -0x230b0(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225dbe:	ba 03 00 00 00       	mov    $0x3,%edx
  225dc3:	e8 e8 20 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225dc8:	88 44 24 26          	mov    %al,0x26(%rsp)
  225dcc:	8a 44 24 26          	mov    0x26(%rsp),%al
  225dd0:	0f b6 f8             	movzbl %al,%edi
  225dd3:	83 e7 01             	and    $0x1,%edi
  225dd6:	e8 b5 5d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225ddb:	24 01                	and    $0x1,%al
  225ddd:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  225de4:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  225deb:	00 
  225dec:	a8 01                	test   $0x1,%al
  225dee:	74 a1                	je     225d91 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1241>
  225df0:	eb 00                	jmp    225df2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12a2>
  225df2:	eb 02                	jmp    225df6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12a6>
  225df4:	0f 0b                	ud2    
  225df6:	e8 d5 4e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225dfb:	24 01                	and    $0x1,%al
  225dfd:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225e01:	e9 10 ee ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225e06:	8a 44 24 27          	mov    0x27(%rsp),%al
  225e0a:	0f b6 f8             	movzbl %al,%edi
  225e0d:	83 e7 01             	and    $0x1,%edi
  225e10:	e8 7b 5d fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225e15:	24 01                	and    $0x1,%al
  225e17:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  225e1e:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  225e25:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225e26:	a8 01                	test   $0x1,%al
  225e28:	0f 84 46 ff ff ff    	je     225d74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1224>
  225e2e:	eb 00                	jmp    225e30 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12e0>
  225e30:	eb 02                	jmp    225e34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12e4>
  225e32:	0f 0b                	ud2    
  225e34:	e8 97 4e fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225e39:	24 01                	and    $0x1,%al
  225e3b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225e3f:	e9 d2 ed ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225e44:	8a 44 24 28          	mov    0x28(%rsp),%al
  225e48:	a8 01                	test   $0x1,%al
  225e4a:	75 15                	jne    225e61 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1311>
  225e4c:	eb 00                	jmp    225e4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12fe>
  225e4e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225e53:	e8 98 0f 00 00       	callq  226df0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE>
  225e58:	88 44 24 25          	mov    %al,0x25(%rsp)
  225e5c:	e9 bd 00 00 00       	jmpq   225f1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13ce>
                        if !first {
  225e61:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225e65:	34 ff                	xor    $0xff,%al
  225e67:	a8 01                	test   $0x1,%al
  225e69:	75 21                	jne    225e8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x133c>
  225e6b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225e70:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225e75:	48 8d 35 38 ab fd ff 	lea    -0x254c8(%rip),%rsi        # 2009b4 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x1c>
  225e7c:	ba 04 00 00 00       	mov    $0x4,%edx
  225e81:	e8 2a 20 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225e86:	88 44 24 24          	mov    %al,0x24(%rsp)
  225e8a:	eb 54                	jmp    225ee0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1390>
  225e8c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225e91:	48 8d 35 76 ce fd ff 	lea    -0x2318a(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225e98:	ba 03 00 00 00       	mov    $0x3,%edx
  225e9d:	e8 0e 20 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225ea2:	88 44 24 23          	mov    %al,0x23(%rsp)
  225ea6:	8a 44 24 23          	mov    0x23(%rsp),%al
  225eaa:	0f b6 f8             	movzbl %al,%edi
  225ead:	83 e7 01             	and    $0x1,%edi
  225eb0:	e8 db 5c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225eb5:	24 01                	and    $0x1,%al
  225eb7:	88 84 24 ac 00 00 00 	mov    %al,0xac(%rsp)
  225ebe:	0f b6 84 24 ac 00 00 	movzbl 0xac(%rsp),%eax
  225ec5:	00 
  225ec6:	a8 01                	test   $0x1,%al
  225ec8:	74 a1                	je     225e6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x131b>
  225eca:	eb 00                	jmp    225ecc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x137c>
  225ecc:	eb 02                	jmp    225ed0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1380>
  225ece:	0f 0b                	ud2    
  225ed0:	e8 fb 4d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225ed5:	24 01                	and    $0x1,%al
  225ed7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225edb:	e9 36 ed ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225ee0:	8a 44 24 24          	mov    0x24(%rsp),%al
  225ee4:	0f b6 f8             	movzbl %al,%edi
  225ee7:	83 e7 01             	and    $0x1,%edi
  225eea:	e8 a1 5c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225eef:	24 01                	and    $0x1,%al
  225ef1:	88 84 24 ad 00 00 00 	mov    %al,0xad(%rsp)
  225ef8:	0f b6 84 24 ad 00 00 	movzbl 0xad(%rsp),%eax
  225eff:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225f00:	a8 01                	test   $0x1,%al
  225f02:	0f 84 46 ff ff ff    	je     225e4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12fe>
  225f08:	eb 00                	jmp    225f0a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13ba>
  225f0a:	eb 02                	jmp    225f0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13be>
  225f0c:	0f 0b                	ud2    
  225f0e:	e8 bd 4d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225f13:	24 01                	and    $0x1,%al
  225f15:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225f19:	e9 f8 ec ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225f1e:	8a 44 24 25          	mov    0x25(%rsp),%al
  225f22:	a8 01                	test   $0x1,%al
  225f24:	75 15                	jne    225f3b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13eb>
  225f26:	eb 00                	jmp    225f28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13d8>
  225f28:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  225f2d:	e8 0e 0f 00 00       	callq  226e40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE>
  225f32:	88 44 24 22          	mov    %al,0x22(%rsp)
  225f36:	e9 bd 00 00 00       	jmpq   225ff8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14a8>
                        if !first {
  225f3b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  225f3f:	34 ff                	xor    $0xff,%al
  225f41:	a8 01                	test   $0x1,%al
  225f43:	75 21                	jne    225f66 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1416>
  225f45:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  225f4a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  225f4f:	48 8d 35 64 ce fd ff 	lea    -0x2319c(%rip),%rsi        # 202dba <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x202>
  225f56:	ba 03 00 00 00       	mov    $0x3,%edx
  225f5b:	e8 50 1f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225f60:	88 44 24 21          	mov    %al,0x21(%rsp)
  225f64:	eb 54                	jmp    225fba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x146a>
  225f66:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  225f6b:	48 8d 35 9c cd fd ff 	lea    -0x23264(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  225f72:	ba 03 00 00 00       	mov    $0x3,%edx
  225f77:	e8 34 1f 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225f7c:	88 44 24 20          	mov    %al,0x20(%rsp)
  225f80:	8a 44 24 20          	mov    0x20(%rsp),%al
  225f84:	0f b6 f8             	movzbl %al,%edi
  225f87:	83 e7 01             	and    $0x1,%edi
  225f8a:	e8 01 5c fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225f8f:	24 01                	and    $0x1,%al
  225f91:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  225f98:	0f b6 84 24 ae 00 00 	movzbl 0xae(%rsp),%eax
  225f9f:	00 
  225fa0:	a8 01                	test   $0x1,%al
  225fa2:	74 a1                	je     225f45 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13f5>
  225fa4:	eb 00                	jmp    225fa6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1456>
  225fa6:	eb 02                	jmp    225faa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x145a>
  225fa8:	0f 0b                	ud2    
  225faa:	e8 21 4d fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225faf:	24 01                	and    $0x1,%al
  225fb1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225fb5:	e9 5c ec ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225fba:	8a 44 24 21          	mov    0x21(%rsp),%al
  225fbe:	0f b6 f8             	movzbl %al,%edi
  225fc1:	83 e7 01             	and    $0x1,%edi
  225fc4:	e8 c7 5b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  225fc9:	24 01                	and    $0x1,%al
  225fcb:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  225fd2:	0f b6 84 24 af 00 00 	movzbl 0xaf(%rsp),%eax
  225fd9:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  225fda:	a8 01                	test   $0x1,%al
  225fdc:	0f 84 46 ff ff ff    	je     225f28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13d8>
  225fe2:	eb 00                	jmp    225fe4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1494>
  225fe4:	eb 02                	jmp    225fe8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1498>
  225fe6:	0f 0b                	ud2    
  225fe8:	e8 e3 4c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  225fed:	24 01                	and    $0x1,%al
  225fef:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  225ff3:	e9 1e ec ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  225ff8:	8a 44 24 22          	mov    0x22(%rsp),%al
  225ffc:	a8 01                	test   $0x1,%al
  225ffe:	75 15                	jne    226015 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14c5>
  226000:	eb 00                	jmp    226002 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14b2>
  226002:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  226007:	e8 84 0e 00 00       	callq  226e90 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE>
  22600c:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  226010:	e9 bd 00 00 00       	jmpq   2260d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1582>
                        if !first {
  226015:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  226019:	34 ff                	xor    $0xff,%al
  22601b:	a8 01                	test   $0x1,%al
  22601d:	75 21                	jne    226040 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14f0>
  22601f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  226024:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  226029:	48 8d 35 54 a9 fd ff 	lea    -0x256ac(%rip),%rsi        # 200984 <str.2+0xe4>
  226030:	ba 04 00 00 00       	mov    $0x4,%edx
  226035:	e8 76 1e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22603a:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  22603e:	eb 54                	jmp    226094 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1544>
  226040:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  226045:	48 8d 35 c2 cc fd ff 	lea    -0x2333e(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  22604c:	ba 03 00 00 00       	mov    $0x3,%edx
  226051:	e8 5a 1e 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  226056:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  22605a:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  22605e:	0f b6 f8             	movzbl %al,%edi
  226061:	83 e7 01             	and    $0x1,%edi
  226064:	e8 27 5b fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  226069:	24 01                	and    $0x1,%al
  22606b:	88 84 24 b0 00 00 00 	mov    %al,0xb0(%rsp)
  226072:	0f b6 84 24 b0 00 00 	movzbl 0xb0(%rsp),%eax
  226079:	00 
  22607a:	a8 01                	test   $0x1,%al
  22607c:	74 a1                	je     22601f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14cf>
  22607e:	eb 00                	jmp    226080 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1530>
  226080:	eb 02                	jmp    226084 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1534>
  226082:	0f 0b                	ud2    
  226084:	e8 47 4c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226089:	24 01                	and    $0x1,%al
  22608b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22608f:	e9 82 eb ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226094:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  226098:	0f b6 f8             	movzbl %al,%edi
  22609b:	83 e7 01             	and    $0x1,%edi
  22609e:	e8 ed 5a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2260a3:	24 01                	and    $0x1,%al
  2260a5:	88 84 24 b1 00 00 00 	mov    %al,0xb1(%rsp)
  2260ac:	0f b6 84 24 b1 00 00 	movzbl 0xb1(%rsp),%eax
  2260b3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2260b4:	a8 01                	test   $0x1,%al
  2260b6:	0f 84 46 ff ff ff    	je     226002 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14b2>
  2260bc:	eb 00                	jmp    2260be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x156e>
  2260be:	eb 02                	jmp    2260c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1572>
  2260c0:	0f 0b                	ud2    
  2260c2:	e8 09 4c fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2260c7:	24 01                	and    $0x1,%al
  2260c9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2260cd:	e9 44 eb ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2260d2:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2260d6:	a8 01                	test   $0x1,%al
  2260d8:	75 15                	jne    2260ef <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x159f>
  2260da:	eb 00                	jmp    2260dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x158c>
  2260dc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2260e1:	e8 fa 0d 00 00       	callq  226ee0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE>
  2260e6:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  2260ea:	e9 bd 00 00 00       	jmpq   2261ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x165c>
                        if !first {
  2260ef:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2260f3:	34 ff                	xor    $0xff,%al
  2260f5:	a8 01                	test   $0x1,%al
  2260f7:	75 21                	jne    22611a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15ca>
  2260f9:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2260fe:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  226103:	48 8d 35 b3 cc fd ff 	lea    -0x2334d(%rip),%rsi        # 202dbd <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x205>
  22610a:	ba 02 00 00 00       	mov    $0x2,%edx
  22610f:	e8 9c 1d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  226114:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  226118:	eb 54                	jmp    22616e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x161e>
  22611a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22611f:	48 8d 35 e8 cb fd ff 	lea    -0x23418(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  226126:	ba 03 00 00 00       	mov    $0x3,%edx
  22612b:	e8 80 1d 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  226130:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  226134:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  226138:	0f b6 f8             	movzbl %al,%edi
  22613b:	83 e7 01             	and    $0x1,%edi
  22613e:	e8 4d 5a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  226143:	24 01                	and    $0x1,%al
  226145:	88 84 24 b2 00 00 00 	mov    %al,0xb2(%rsp)
  22614c:	0f b6 84 24 b2 00 00 	movzbl 0xb2(%rsp),%eax
  226153:	00 
  226154:	a8 01                	test   $0x1,%al
  226156:	74 a1                	je     2260f9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15a9>
  226158:	eb 00                	jmp    22615a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x160a>
  22615a:	eb 02                	jmp    22615e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x160e>
  22615c:	0f 0b                	ud2    
  22615e:	e8 6d 4b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226163:	24 01                	and    $0x1,%al
  226165:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226169:	e9 a8 ea ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22616e:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  226172:	0f b6 f8             	movzbl %al,%edi
  226175:	83 e7 01             	and    $0x1,%edi
  226178:	e8 13 5a fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22617d:	24 01                	and    $0x1,%al
  22617f:	88 84 24 b3 00 00 00 	mov    %al,0xb3(%rsp)
  226186:	0f b6 84 24 b3 00 00 	movzbl 0xb3(%rsp),%eax
  22618d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22618e:	a8 01                	test   $0x1,%al
  226190:	0f 84 46 ff ff ff    	je     2260dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x158c>
  226196:	eb 00                	jmp    226198 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1648>
  226198:	eb 02                	jmp    22619c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x164c>
  22619a:	0f 0b                	ud2    
  22619c:	e8 2f 4b fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2261a1:	24 01                	and    $0x1,%al
  2261a3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2261a7:	e9 6a ea ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2261ac:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  2261b0:	a8 01                	test   $0x1,%al
  2261b2:	75 15                	jne    2261c9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1679>
  2261b4:	eb 00                	jmp    2261b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1666>
  2261b6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  2261bb:	e8 70 0d 00 00       	callq  226f30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E>
  2261c0:	88 44 24 19          	mov    %al,0x19(%rsp)
  2261c4:	e9 bd 00 00 00       	jmpq   226286 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1736>
                        if !first {
  2261c9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2261cd:	34 ff                	xor    $0xff,%al
  2261cf:	a8 01                	test   $0x1,%al
  2261d1:	75 21                	jne    2261f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16a4>
  2261d3:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2261d8:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2261dd:	48 8d 35 db cb fd ff 	lea    -0x23425(%rip),%rsi        # 202dbf <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x207>
  2261e4:	ba 03 00 00 00       	mov    $0x3,%edx
  2261e9:	e8 c2 1c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2261ee:	88 44 24 18          	mov    %al,0x18(%rsp)
  2261f2:	eb 54                	jmp    226248 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16f8>
  2261f4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2261f9:	48 8d 35 0e cb fd ff 	lea    -0x234f2(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  226200:	ba 03 00 00 00       	mov    $0x3,%edx
  226205:	e8 a6 1c 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22620a:	88 44 24 17          	mov    %al,0x17(%rsp)
  22620e:	8a 44 24 17          	mov    0x17(%rsp),%al
  226212:	0f b6 f8             	movzbl %al,%edi
  226215:	83 e7 01             	and    $0x1,%edi
  226218:	e8 73 59 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22621d:	24 01                	and    $0x1,%al
  22621f:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  226226:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  22622d:	00 
  22622e:	a8 01                	test   $0x1,%al
  226230:	74 a1                	je     2261d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1683>
  226232:	eb 00                	jmp    226234 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16e4>
  226234:	eb 02                	jmp    226238 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16e8>
  226236:	0f 0b                	ud2    
  226238:	e8 93 4a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22623d:	24 01                	and    $0x1,%al
  22623f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226243:	e9 ce e9 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226248:	8a 44 24 18          	mov    0x18(%rsp),%al
  22624c:	0f b6 f8             	movzbl %al,%edi
  22624f:	83 e7 01             	and    $0x1,%edi
  226252:	e8 39 59 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  226257:	24 01                	and    $0x1,%al
  226259:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  226260:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  226267:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  226268:	a8 01                	test   $0x1,%al
  22626a:	0f 84 46 ff ff ff    	je     2261b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1666>
  226270:	eb 00                	jmp    226272 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1722>
  226272:	eb 02                	jmp    226276 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1726>
  226274:	0f 0b                	ud2    
  226276:	e8 55 4a fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22627b:	24 01                	and    $0x1,%al
  22627d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226281:	e9 90 e9 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226286:	8a 44 24 19          	mov    0x19(%rsp),%al
  22628a:	a8 01                	test   $0x1,%al
  22628c:	75 15                	jne    2262a3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1753>
  22628e:	eb 00                	jmp    226290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1740>
  226290:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  226295:	e8 e6 0c 00 00       	callq  226f80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E>
  22629a:	88 44 24 16          	mov    %al,0x16(%rsp)
  22629e:	e9 bd 00 00 00       	jmpq   226360 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1810>
                        if !first {
  2262a3:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2262a7:	34 ff                	xor    $0xff,%al
  2262a9:	a8 01                	test   $0x1,%al
  2262ab:	75 21                	jne    2262ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x177e>
  2262ad:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2262b2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2262b7:	48 8d 35 04 cb fd ff 	lea    -0x234fc(%rip),%rsi        # 202dc2 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x20a>
  2262be:	ba 03 00 00 00       	mov    $0x3,%edx
  2262c3:	e8 e8 1b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2262c8:	88 44 24 15          	mov    %al,0x15(%rsp)
  2262cc:	eb 54                	jmp    226322 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17d2>
  2262ce:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2262d3:	48 8d 35 34 ca fd ff 	lea    -0x235cc(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2262da:	ba 03 00 00 00       	mov    $0x3,%edx
  2262df:	e8 cc 1b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2262e4:	88 44 24 14          	mov    %al,0x14(%rsp)
  2262e8:	8a 44 24 14          	mov    0x14(%rsp),%al
  2262ec:	0f b6 f8             	movzbl %al,%edi
  2262ef:	83 e7 01             	and    $0x1,%edi
  2262f2:	e8 99 58 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2262f7:	24 01                	and    $0x1,%al
  2262f9:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  226300:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  226307:	00 
  226308:	a8 01                	test   $0x1,%al
  22630a:	74 a1                	je     2262ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x175d>
  22630c:	eb 00                	jmp    22630e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17be>
  22630e:	eb 02                	jmp    226312 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17c2>
  226310:	0f 0b                	ud2    
  226312:	e8 b9 49 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226317:	24 01                	and    $0x1,%al
  226319:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22631d:	e9 f4 e8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226322:	8a 44 24 15          	mov    0x15(%rsp),%al
  226326:	0f b6 f8             	movzbl %al,%edi
  226329:	83 e7 01             	and    $0x1,%edi
  22632c:	e8 5f 58 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  226331:	24 01                	and    $0x1,%al
  226333:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  22633a:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  226341:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  226342:	a8 01                	test   $0x1,%al
  226344:	0f 84 46 ff ff ff    	je     226290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1740>
  22634a:	eb 00                	jmp    22634c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17fc>
  22634c:	eb 02                	jmp    226350 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1800>
  22634e:	0f 0b                	ud2    
  226350:	e8 7b 49 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226355:	24 01                	and    $0x1,%al
  226357:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22635b:	e9 b6 e8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226360:	8a 44 24 16          	mov    0x16(%rsp),%al
  226364:	a8 01                	test   $0x1,%al
  226366:	75 15                	jne    22637d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x182d>
  226368:	eb 00                	jmp    22636a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x181a>
  22636a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  22636f:	e8 5c 0c 00 00       	callq  226fd0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE>
  226374:	88 44 24 13          	mov    %al,0x13(%rsp)
  226378:	e9 bd 00 00 00       	jmpq   22643a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18ea>
                        if !first {
  22637d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  226381:	34 ff                	xor    $0xff,%al
  226383:	a8 01                	test   $0x1,%al
  226385:	75 21                	jne    2263a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1858>
  226387:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22638c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  226391:	48 8d 35 18 a6 fd ff 	lea    -0x259e8(%rip),%rsi        # 2009b0 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x18>
  226398:	ba 04 00 00 00       	mov    $0x4,%edx
  22639d:	e8 0e 1b 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2263a2:	88 44 24 12          	mov    %al,0x12(%rsp)
  2263a6:	eb 54                	jmp    2263fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18ac>
  2263a8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2263ad:	48 8d 35 5a c9 fd ff 	lea    -0x236a6(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  2263b4:	ba 03 00 00 00       	mov    $0x3,%edx
  2263b9:	e8 f2 1a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2263be:	88 44 24 11          	mov    %al,0x11(%rsp)
  2263c2:	8a 44 24 11          	mov    0x11(%rsp),%al
  2263c6:	0f b6 f8             	movzbl %al,%edi
  2263c9:	83 e7 01             	and    $0x1,%edi
  2263cc:	e8 bf 57 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2263d1:	24 01                	and    $0x1,%al
  2263d3:	88 84 24 b8 00 00 00 	mov    %al,0xb8(%rsp)
  2263da:	0f b6 84 24 b8 00 00 	movzbl 0xb8(%rsp),%eax
  2263e1:	00 
  2263e2:	a8 01                	test   $0x1,%al
  2263e4:	74 a1                	je     226387 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1837>
  2263e6:	eb 00                	jmp    2263e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1898>
  2263e8:	eb 02                	jmp    2263ec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x189c>
  2263ea:	0f 0b                	ud2    
  2263ec:	e8 df 48 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2263f1:	24 01                	and    $0x1,%al
  2263f3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2263f7:	e9 1a e8 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2263fc:	8a 44 24 12          	mov    0x12(%rsp),%al
  226400:	0f b6 f8             	movzbl %al,%edi
  226403:	83 e7 01             	and    $0x1,%edi
  226406:	e8 85 57 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22640b:	24 01                	and    $0x1,%al
  22640d:	88 84 24 b9 00 00 00 	mov    %al,0xb9(%rsp)
  226414:	0f b6 84 24 b9 00 00 	movzbl 0xb9(%rsp),%eax
  22641b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  22641c:	a8 01                	test   $0x1,%al
  22641e:	0f 84 46 ff ff ff    	je     22636a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x181a>
  226424:	eb 00                	jmp    226426 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18d6>
  226426:	eb 02                	jmp    22642a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18da>
  226428:	0f 0b                	ud2    
  22642a:	e8 a1 48 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22642f:	24 01                	and    $0x1,%al
  226431:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226435:	e9 dc e7 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22643a:	8a 44 24 13          	mov    0x13(%rsp),%al
  22643e:	a8 01                	test   $0x1,%al
  226440:	75 1e                	jne    226460 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1910>
  226442:	eb 00                	jmp    226444 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18f4>
  226444:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  226449:	8b 00                	mov    (%rax),%eax
  22644b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  22644f:	e8 7c 02 00 00       	callq  2266d0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>
  226454:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
  22645b:	e9 bd 00 00 00       	jmpq   22651d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19cd>
                        if !first {
  226460:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  226464:	34 ff                	xor    $0xff,%al
  226466:	a8 01                	test   $0x1,%al
  226468:	75 21                	jne    22648b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x193b>
  22646a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22646f:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  226474:	48 8d 35 4a c9 fd ff 	lea    -0x236b6(%rip),%rsi        # 202dc5 <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x20d>
  22647b:	ba 03 00 00 00       	mov    $0x3,%edx
  226480:	e8 2b 1a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  226485:	88 44 24 0b          	mov    %al,0xb(%rsp)
  226489:	eb 54                	jmp    2264df <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x198f>
  22648b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  226490:	48 8d 35 77 c8 fd ff 	lea    -0x23789(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  226497:	ba 03 00 00 00       	mov    $0x3,%edx
  22649c:	e8 0f 1a 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2264a1:	88 44 24 0a          	mov    %al,0xa(%rsp)
  2264a5:	8a 44 24 0a          	mov    0xa(%rsp),%al
  2264a9:	0f b6 f8             	movzbl %al,%edi
  2264ac:	83 e7 01             	and    $0x1,%edi
  2264af:	e8 dc 56 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2264b4:	24 01                	and    $0x1,%al
  2264b6:	88 84 24 ba 00 00 00 	mov    %al,0xba(%rsp)
  2264bd:	0f b6 84 24 ba 00 00 	movzbl 0xba(%rsp),%eax
  2264c4:	00 
  2264c5:	a8 01                	test   $0x1,%al
  2264c7:	74 a1                	je     22646a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x191a>
  2264c9:	eb 00                	jmp    2264cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x197b>
  2264cb:	eb 02                	jmp    2264cf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x197f>
  2264cd:	0f 0b                	ud2    
  2264cf:	e8 fc 47 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2264d4:	24 01                	and    $0x1,%al
  2264d6:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2264da:	e9 37 e7 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2264df:	8a 44 24 0b          	mov    0xb(%rsp),%al
  2264e3:	0f b6 f8             	movzbl %al,%edi
  2264e6:	83 e7 01             	and    $0x1,%edi
  2264e9:	e8 a2 56 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2264ee:	24 01                	and    $0x1,%al
  2264f0:	88 84 24 bb 00 00 00 	mov    %al,0xbb(%rsp)
  2264f7:	0f b6 84 24 bb 00 00 	movzbl 0xbb(%rsp),%eax
  2264fe:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  2264ff:	a8 01                	test   $0x1,%al
  226501:	0f 84 3d ff ff ff    	je     226444 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18f4>
  226507:	eb 00                	jmp    226509 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19b9>
  226509:	eb 02                	jmp    22650d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19bd>
  22650b:	0f 0b                	ud2    
  22650d:	e8 be 47 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226512:	24 01                	and    $0x1,%al
  226514:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226518:	e9 f9 e6 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
                let extra_bits = self.bits & !Self::all().bits();
  22651d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  226524:	00 
  226525:	e8 c6 01 00 00       	callq  2266f0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h52ed3e22441bd153E>
  22652a:	89 44 24 04          	mov    %eax,0x4(%rsp)
  22652e:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  226532:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  226536:	83 f1 ff             	xor    $0xffffffff,%ecx
  226539:	21 c8                	and    %ecx,%eax
  22653b:	89 84 24 bc 00 00 00 	mov    %eax,0xbc(%rsp)
  226542:	83 bc 24 bc 00 00 00 	cmpl   $0x0,0xbc(%rsp)
  226549:	00 
  22654a:	75 10                	jne    22655c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a0c>
  22654c:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  226551:	0f 85 1e 01 00 00    	jne    226675 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b25>
  226557:	e9 0f 01 00 00       	jmpq   22666b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b1b>
                    if !first {
  22655c:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  226560:	34 ff                	xor    $0xff,%al
  226562:	a8 01                	test   $0x1,%al
  226564:	75 21                	jne    226587 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a37>
  226566:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    first = false;
  22656b:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                    f.write_str("0x")?;
  226570:	48 8d 35 06 c8 fd ff 	lea    -0x237fa(%rip),%rsi        # 202d7d <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1c5>
  226577:	ba 02 00 00 00       	mov    $0x2,%edx
  22657c:	e8 2f 19 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  226581:	88 44 24 03          	mov    %al,0x3(%rsp)
  226585:	eb 54                	jmp    2265db <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a8b>
  226587:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        f.write_str(" | ")?;
  22658c:	48 8d 35 7b c7 fd ff 	lea    -0x23885(%rip),%rsi        # 202d0e <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x156>
  226593:	ba 03 00 00 00       	mov    $0x3,%edx
  226598:	e8 13 19 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22659d:	88 44 24 02          	mov    %al,0x2(%rsp)
  2265a1:	8a 44 24 02          	mov    0x2(%rsp),%al
  2265a5:	0f b6 f8             	movzbl %al,%edi
  2265a8:	83 e7 01             	and    $0x1,%edi
  2265ab:	e8 e0 55 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2265b0:	24 01                	and    $0x1,%al
  2265b2:	88 84 24 c4 00 00 00 	mov    %al,0xc4(%rsp)
  2265b9:	0f b6 84 24 c4 00 00 	movzbl 0xc4(%rsp),%eax
  2265c0:	00 
  2265c1:	a8 01                	test   $0x1,%al
  2265c3:	74 a1                	je     226566 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a16>
  2265c5:	eb 00                	jmp    2265c7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a77>
  2265c7:	eb 02                	jmp    2265cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a7b>
  2265c9:	0f 0b                	ud2    
  2265cb:	e8 00 47 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2265d0:	24 01                	and    $0x1,%al
  2265d2:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2265d6:	e9 3b e6 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2265db:	8a 44 24 03          	mov    0x3(%rsp),%al
  2265df:	0f b6 f8             	movzbl %al,%edi
  2265e2:	83 e7 01             	and    $0x1,%edi
  2265e5:	e8 a6 55 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2265ea:	24 01                	and    $0x1,%al
  2265ec:	88 84 24 c5 00 00 00 	mov    %al,0xc5(%rsp)
  2265f3:	0f b6 84 24 c5 00 00 	movzbl 0xc5(%rsp),%eax
  2265fa:	00 
                    f.write_str("0x")?;
  2265fb:	a8 01                	test   $0x1,%al
  2265fd:	74 06                	je     226605 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ab5>
  2265ff:	eb 00                	jmp    226601 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ab1>
  226601:	eb 1a                	jmp    22661d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1acd>
  226603:	0f 0b                	ud2    
  226605:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  22660a:	48 8d bc 24 bc 00 00 	lea    0xbc(%rsp),%rdi
  226611:	00 
  226612:	e8 99 e7 00 00       	callq  234db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  226617:	88 44 24 01          	mov    %al,0x1(%rsp)
  22661b:	eb 10                	jmp    22662d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1add>
  22661d:	e8 ae 46 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226622:	24 01                	and    $0x1,%al
  226624:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226628:	e9 e9 e5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22662d:	8a 44 24 01          	mov    0x1(%rsp),%al
  226631:	0f b6 f8             	movzbl %al,%edi
  226634:	83 e7 01             	and    $0x1,%edi
  226637:	e8 54 55 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22663c:	24 01                	and    $0x1,%al
  22663e:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  226645:	0f b6 84 24 c6 00 00 	movzbl 0xc6(%rsp),%eax
  22664c:	00 
  22664d:	a8 01                	test   $0x1,%al
  22664f:	0f 84 f7 fe ff ff    	je     22654c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19fc>
  226655:	eb 00                	jmp    226657 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b07>
  226657:	eb 02                	jmp    22665b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b0b>
  226659:	0f 0b                	ud2    
  22665b:	e8 70 46 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  226660:	24 01                	and    $0x1,%al
  226662:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  226666:	e9 ab e5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
                Ok(())
  22666b:	c6 44 24 7e 00       	movb   $0x0,0x7e(%rsp)
            }
  226670:	e9 a1 e5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  226675:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    f.write_str("(empty)")?;
  22667a:	48 8d 35 fe c6 fd ff 	lea    -0x23902(%rip),%rsi        # 202d7f <_ZN9r3_kernel2mm5stack15STACK_ALLOCATOR17h3ce4cca5b0a97f71E+0x1c7>
  226681:	ba 07 00 00 00       	mov    $0x7,%edx
  226686:	e8 25 18 01 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22668b:	88 04 24             	mov    %al,(%rsp)
  22668e:	8a 04 24             	mov    (%rsp),%al
  226691:	0f b6 f8             	movzbl %al,%edi
  226694:	83 e7 01             	and    $0x1,%edi
  226697:	e8 f4 54 fe ff       	callq  20bb90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22669c:	24 01                	and    $0x1,%al
  22669e:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  2266a5:	0f b6 84 24 c7 00 00 	movzbl 0xc7(%rsp),%eax
  2266ac:	00 
  2266ad:	a8 01                	test   $0x1,%al
  2266af:	74 ba                	je     22666b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b1b>
  2266b1:	eb 00                	jmp    2266b3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b63>
  2266b3:	eb 02                	jmp    2266b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b67>
  2266b5:	0f 0b                	ud2    
  2266b7:	e8 14 46 fe ff       	callq  20acd0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2266bc:	24 01                	and    $0x1,%al
  2266be:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2266c2:	e9 4f e5 ff ff       	jmpq   224c16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2266c7:	cc                   	int3   
  2266c8:	cc                   	int3   
  2266c9:	cc                   	int3   
  2266ca:	cc                   	int3   
  2266cb:	cc                   	int3   
  2266cc:	cc                   	int3   
  2266cd:	cc                   	int3   
  2266ce:	cc                   	int3   
  2266cf:	cc                   	int3   

00000000002266d0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>:
            pub const fn all() -> Self {
  2266d0:	48 83 ec 04          	sub    $0x4,%rsp
                __impl_all_bitflags! {
  2266d4:	c7 04 24 ff fb ef ff 	movl   $0xffeffbff,(%rsp)
            }
  2266db:	8b 04 24             	mov    (%rsp),%eax
  2266de:	48 83 c4 04          	add    $0x4,%rsp
  2266e2:	c3                   	retq   
  2266e3:	cc                   	int3   
  2266e4:	cc                   	int3   
  2266e5:	cc                   	int3   
  2266e6:	cc                   	int3   
  2266e7:	cc                   	int3   
  2266e8:	cc                   	int3   
  2266e9:	cc                   	int3   
  2266ea:	cc                   	int3   
  2266eb:	cc                   	int3   
  2266ec:	cc                   	int3   
  2266ed:	cc                   	int3   
  2266ee:	cc                   	int3   
  2266ef:	cc                   	int3   

00000000002266f0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h52ed3e22441bd153E>:
            pub const fn bits(&self) -> $T {
  2266f0:	50                   	push   %rax
  2266f1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  2266f5:	8b 07                	mov    (%rdi),%eax
            }
  2266f7:	59                   	pop    %rcx
  2266f8:	c3                   	retq   
  2266f9:	cc                   	int3   
  2266fa:	cc                   	int3   
  2266fb:	cc                   	int3   
  2266fc:	cc                   	int3   
  2266fd:	cc                   	int3   
  2266fe:	cc                   	int3   
  2266ff:	cc                   	int3   

0000000000226700 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h215956a5355ec929E>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  226700:	48 83 ec 18          	sub    $0x18,%rsp
  226704:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  226708:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  22670c:	e8 bf ff ff ff       	callq  2266d0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>
  226711:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  226715:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  226719:	8b 44 24 08          	mov    0x8(%rsp),%eax
  22671d:	21 c8                	and    %ecx,%eax
  22671f:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  226723:	8b 44 24 10          	mov    0x10(%rsp),%eax
  226727:	48 83 c4 18          	add    $0x18,%rsp
  22672b:	c3                   	retq   
  22672c:	cc                   	int3   
  22672d:	cc                   	int3   
  22672e:	cc                   	int3   
  22672f:	cc                   	int3   

0000000000226730 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E>:
                            fn $Flag(&self) -> bool {
  226730:	48 83 ec 18          	sub    $0x18,%rsp
  226734:	48 89 3c 24          	mov    %rdi,(%rsp)
  226738:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22673d:	31 c0                	xor    %eax,%eax
  22673f:	a8 01                	test   $0x1,%al
  226741:	75 17                	jne    22675a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E+0x2a>
  226743:	48 8b 04 24          	mov    (%rsp),%rax
  226747:	8b 00                	mov    (%rax),%eax
  226749:	83 e0 01             	and    $0x1,%eax
  22674c:	83 f8 01             	cmp    $0x1,%eax
  22674f:	0f 94 c0             	sete   %al
  226752:	24 01                	and    $0x1,%al
  226754:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226758:	eb 05                	jmp    22675f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E+0x2f>
  22675a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22675f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226763:	24 01                	and    $0x1,%al
  226765:	0f b6 c0             	movzbl %al,%eax
  226768:	48 83 c4 18          	add    $0x18,%rsp
  22676c:	c3                   	retq   
  22676d:	cc                   	int3   
  22676e:	cc                   	int3   
  22676f:	cc                   	int3   

0000000000226770 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E>:
                            fn $Flag(&self) -> bool {
  226770:	48 83 ec 18          	sub    $0x18,%rsp
  226774:	48 89 3c 24          	mov    %rdi,(%rsp)
  226778:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22677d:	31 c0                	xor    %eax,%eax
  22677f:	a8 01                	test   $0x1,%al
  226781:	75 17                	jne    22679a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E+0x2a>
  226783:	48 8b 04 24          	mov    (%rsp),%rax
  226787:	8b 00                	mov    (%rax),%eax
  226789:	83 e0 02             	and    $0x2,%eax
  22678c:	83 f8 02             	cmp    $0x2,%eax
  22678f:	0f 94 c0             	sete   %al
  226792:	24 01                	and    $0x1,%al
  226794:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226798:	eb 05                	jmp    22679f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E+0x2f>
  22679a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22679f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2267a3:	24 01                	and    $0x1,%al
  2267a5:	0f b6 c0             	movzbl %al,%eax
  2267a8:	48 83 c4 18          	add    $0x18,%rsp
  2267ac:	c3                   	retq   
  2267ad:	cc                   	int3   
  2267ae:	cc                   	int3   
  2267af:	cc                   	int3   

00000000002267b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE>:
                            fn $Flag(&self) -> bool {
  2267b0:	48 83 ec 18          	sub    $0x18,%rsp
  2267b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2267b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2267bd:	31 c0                	xor    %eax,%eax
  2267bf:	a8 01                	test   $0x1,%al
  2267c1:	75 17                	jne    2267da <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE+0x2a>
  2267c3:	48 8b 04 24          	mov    (%rsp),%rax
  2267c7:	8b 00                	mov    (%rax),%eax
  2267c9:	83 e0 04             	and    $0x4,%eax
  2267cc:	83 f8 04             	cmp    $0x4,%eax
  2267cf:	0f 94 c0             	sete   %al
  2267d2:	24 01                	and    $0x1,%al
  2267d4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2267d8:	eb 05                	jmp    2267df <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE+0x2f>
  2267da:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2267df:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2267e3:	24 01                	and    $0x1,%al
  2267e5:	0f b6 c0             	movzbl %al,%eax
  2267e8:	48 83 c4 18          	add    $0x18,%rsp
  2267ec:	c3                   	retq   
  2267ed:	cc                   	int3   
  2267ee:	cc                   	int3   
  2267ef:	cc                   	int3   

00000000002267f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E>:
                            fn $Flag(&self) -> bool {
  2267f0:	48 83 ec 18          	sub    $0x18,%rsp
  2267f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2267f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2267fd:	31 c0                	xor    %eax,%eax
  2267ff:	a8 01                	test   $0x1,%al
  226801:	75 17                	jne    22681a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E+0x2a>
  226803:	48 8b 04 24          	mov    (%rsp),%rax
  226807:	8b 00                	mov    (%rax),%eax
  226809:	83 e0 08             	and    $0x8,%eax
  22680c:	83 f8 08             	cmp    $0x8,%eax
  22680f:	0f 94 c0             	sete   %al
  226812:	24 01                	and    $0x1,%al
  226814:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226818:	eb 05                	jmp    22681f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E+0x2f>
  22681a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22681f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226823:	24 01                	and    $0x1,%al
  226825:	0f b6 c0             	movzbl %al,%eax
  226828:	48 83 c4 18          	add    $0x18,%rsp
  22682c:	c3                   	retq   
  22682d:	cc                   	int3   
  22682e:	cc                   	int3   
  22682f:	cc                   	int3   

0000000000226830 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E>:
                            fn $Flag(&self) -> bool {
  226830:	48 83 ec 18          	sub    $0x18,%rsp
  226834:	48 89 3c 24          	mov    %rdi,(%rsp)
  226838:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22683d:	31 c0                	xor    %eax,%eax
  22683f:	a8 01                	test   $0x1,%al
  226841:	75 17                	jne    22685a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E+0x2a>
  226843:	48 8b 04 24          	mov    (%rsp),%rax
  226847:	8b 00                	mov    (%rax),%eax
  226849:	83 e0 10             	and    $0x10,%eax
  22684c:	83 f8 10             	cmp    $0x10,%eax
  22684f:	0f 94 c0             	sete   %al
  226852:	24 01                	and    $0x1,%al
  226854:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226858:	eb 05                	jmp    22685f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E+0x2f>
  22685a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22685f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226863:	24 01                	and    $0x1,%al
  226865:	0f b6 c0             	movzbl %al,%eax
  226868:	48 83 c4 18          	add    $0x18,%rsp
  22686c:	c3                   	retq   
  22686d:	cc                   	int3   
  22686e:	cc                   	int3   
  22686f:	cc                   	int3   

0000000000226870 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE>:
                            fn $Flag(&self) -> bool {
  226870:	48 83 ec 18          	sub    $0x18,%rsp
  226874:	48 89 3c 24          	mov    %rdi,(%rsp)
  226878:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22687d:	31 c0                	xor    %eax,%eax
  22687f:	a8 01                	test   $0x1,%al
  226881:	75 17                	jne    22689a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE+0x2a>
  226883:	48 8b 04 24          	mov    (%rsp),%rax
  226887:	8b 00                	mov    (%rax),%eax
  226889:	83 e0 20             	and    $0x20,%eax
  22688c:	83 f8 20             	cmp    $0x20,%eax
  22688f:	0f 94 c0             	sete   %al
  226892:	24 01                	and    $0x1,%al
  226894:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226898:	eb 05                	jmp    22689f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE+0x2f>
  22689a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22689f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2268a3:	24 01                	and    $0x1,%al
  2268a5:	0f b6 c0             	movzbl %al,%eax
  2268a8:	48 83 c4 18          	add    $0x18,%rsp
  2268ac:	c3                   	retq   
  2268ad:	cc                   	int3   
  2268ae:	cc                   	int3   
  2268af:	cc                   	int3   

00000000002268b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E>:
                            fn $Flag(&self) -> bool {
  2268b0:	48 83 ec 18          	sub    $0x18,%rsp
  2268b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2268b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2268bd:	31 c0                	xor    %eax,%eax
  2268bf:	a8 01                	test   $0x1,%al
  2268c1:	75 17                	jne    2268da <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E+0x2a>
  2268c3:	48 8b 04 24          	mov    (%rsp),%rax
  2268c7:	8b 00                	mov    (%rax),%eax
  2268c9:	83 e0 40             	and    $0x40,%eax
  2268cc:	83 f8 40             	cmp    $0x40,%eax
  2268cf:	0f 94 c0             	sete   %al
  2268d2:	24 01                	and    $0x1,%al
  2268d4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2268d8:	eb 05                	jmp    2268df <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E+0x2f>
  2268da:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2268df:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2268e3:	24 01                	and    $0x1,%al
  2268e5:	0f b6 c0             	movzbl %al,%eax
  2268e8:	48 83 c4 18          	add    $0x18,%rsp
  2268ec:	c3                   	retq   
  2268ed:	cc                   	int3   
  2268ee:	cc                   	int3   
  2268ef:	cc                   	int3   

00000000002268f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E>:
                            fn $Flag(&self) -> bool {
  2268f0:	48 83 ec 18          	sub    $0x18,%rsp
  2268f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2268f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2268fd:	31 c0                	xor    %eax,%eax
  2268ff:	a8 01                	test   $0x1,%al
  226901:	75 1b                	jne    22691e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E+0x2e>
  226903:	48 8b 04 24          	mov    (%rsp),%rax
  226907:	8b 00                	mov    (%rax),%eax
  226909:	25 80 00 00 00       	and    $0x80,%eax
  22690e:	3d 80 00 00 00       	cmp    $0x80,%eax
  226913:	0f 94 c0             	sete   %al
  226916:	24 01                	and    $0x1,%al
  226918:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22691c:	eb 05                	jmp    226923 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E+0x33>
  22691e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226923:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226927:	24 01                	and    $0x1,%al
  226929:	0f b6 c0             	movzbl %al,%eax
  22692c:	48 83 c4 18          	add    $0x18,%rsp
  226930:	c3                   	retq   
  226931:	cc                   	int3   
  226932:	cc                   	int3   
  226933:	cc                   	int3   
  226934:	cc                   	int3   
  226935:	cc                   	int3   
  226936:	cc                   	int3   
  226937:	cc                   	int3   
  226938:	cc                   	int3   
  226939:	cc                   	int3   
  22693a:	cc                   	int3   
  22693b:	cc                   	int3   
  22693c:	cc                   	int3   
  22693d:	cc                   	int3   
  22693e:	cc                   	int3   
  22693f:	cc                   	int3   

0000000000226940 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E>:
                            fn $Flag(&self) -> bool {
  226940:	48 83 ec 18          	sub    $0x18,%rsp
  226944:	48 89 3c 24          	mov    %rdi,(%rsp)
  226948:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22694d:	31 c0                	xor    %eax,%eax
  22694f:	a8 01                	test   $0x1,%al
  226951:	75 1b                	jne    22696e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E+0x2e>
  226953:	48 8b 04 24          	mov    (%rsp),%rax
  226957:	8b 00                	mov    (%rax),%eax
  226959:	25 00 01 00 00       	and    $0x100,%eax
  22695e:	3d 00 01 00 00       	cmp    $0x100,%eax
  226963:	0f 94 c0             	sete   %al
  226966:	24 01                	and    $0x1,%al
  226968:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22696c:	eb 05                	jmp    226973 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E+0x33>
  22696e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226973:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226977:	24 01                	and    $0x1,%al
  226979:	0f b6 c0             	movzbl %al,%eax
  22697c:	48 83 c4 18          	add    $0x18,%rsp
  226980:	c3                   	retq   
  226981:	cc                   	int3   
  226982:	cc                   	int3   
  226983:	cc                   	int3   
  226984:	cc                   	int3   
  226985:	cc                   	int3   
  226986:	cc                   	int3   
  226987:	cc                   	int3   
  226988:	cc                   	int3   
  226989:	cc                   	int3   
  22698a:	cc                   	int3   
  22698b:	cc                   	int3   
  22698c:	cc                   	int3   
  22698d:	cc                   	int3   
  22698e:	cc                   	int3   
  22698f:	cc                   	int3   

0000000000226990 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E>:
                            fn $Flag(&self) -> bool {
  226990:	48 83 ec 18          	sub    $0x18,%rsp
  226994:	48 89 3c 24          	mov    %rdi,(%rsp)
  226998:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22699d:	31 c0                	xor    %eax,%eax
  22699f:	a8 01                	test   $0x1,%al
  2269a1:	75 1b                	jne    2269be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E+0x2e>
  2269a3:	48 8b 04 24          	mov    (%rsp),%rax
  2269a7:	8b 00                	mov    (%rax),%eax
  2269a9:	25 00 02 00 00       	and    $0x200,%eax
  2269ae:	3d 00 02 00 00       	cmp    $0x200,%eax
  2269b3:	0f 94 c0             	sete   %al
  2269b6:	24 01                	and    $0x1,%al
  2269b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2269bc:	eb 05                	jmp    2269c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E+0x33>
  2269be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2269c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2269c7:	24 01                	and    $0x1,%al
  2269c9:	0f b6 c0             	movzbl %al,%eax
  2269cc:	48 83 c4 18          	add    $0x18,%rsp
  2269d0:	c3                   	retq   
  2269d1:	cc                   	int3   
  2269d2:	cc                   	int3   
  2269d3:	cc                   	int3   
  2269d4:	cc                   	int3   
  2269d5:	cc                   	int3   
  2269d6:	cc                   	int3   
  2269d7:	cc                   	int3   
  2269d8:	cc                   	int3   
  2269d9:	cc                   	int3   
  2269da:	cc                   	int3   
  2269db:	cc                   	int3   
  2269dc:	cc                   	int3   
  2269dd:	cc                   	int3   
  2269de:	cc                   	int3   
  2269df:	cc                   	int3   

00000000002269e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE>:
                            fn $Flag(&self) -> bool {
  2269e0:	48 83 ec 18          	sub    $0x18,%rsp
  2269e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2269e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2269ed:	31 c0                	xor    %eax,%eax
  2269ef:	a8 01                	test   $0x1,%al
  2269f1:	75 1b                	jne    226a0e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE+0x2e>
  2269f3:	48 8b 04 24          	mov    (%rsp),%rax
  2269f7:	8b 00                	mov    (%rax),%eax
  2269f9:	25 00 08 00 00       	and    $0x800,%eax
  2269fe:	3d 00 08 00 00       	cmp    $0x800,%eax
  226a03:	0f 94 c0             	sete   %al
  226a06:	24 01                	and    $0x1,%al
  226a08:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226a0c:	eb 05                	jmp    226a13 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE+0x33>
  226a0e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226a13:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226a17:	24 01                	and    $0x1,%al
  226a19:	0f b6 c0             	movzbl %al,%eax
  226a1c:	48 83 c4 18          	add    $0x18,%rsp
  226a20:	c3                   	retq   
  226a21:	cc                   	int3   
  226a22:	cc                   	int3   
  226a23:	cc                   	int3   
  226a24:	cc                   	int3   
  226a25:	cc                   	int3   
  226a26:	cc                   	int3   
  226a27:	cc                   	int3   
  226a28:	cc                   	int3   
  226a29:	cc                   	int3   
  226a2a:	cc                   	int3   
  226a2b:	cc                   	int3   
  226a2c:	cc                   	int3   
  226a2d:	cc                   	int3   
  226a2e:	cc                   	int3   
  226a2f:	cc                   	int3   

0000000000226a30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E>:
                            fn $Flag(&self) -> bool {
  226a30:	48 83 ec 18          	sub    $0x18,%rsp
  226a34:	48 89 3c 24          	mov    %rdi,(%rsp)
  226a38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226a3d:	31 c0                	xor    %eax,%eax
  226a3f:	a8 01                	test   $0x1,%al
  226a41:	75 1b                	jne    226a5e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E+0x2e>
  226a43:	48 8b 04 24          	mov    (%rsp),%rax
  226a47:	8b 00                	mov    (%rax),%eax
  226a49:	25 00 10 00 00       	and    $0x1000,%eax
  226a4e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  226a53:	0f 94 c0             	sete   %al
  226a56:	24 01                	and    $0x1,%al
  226a58:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226a5c:	eb 05                	jmp    226a63 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E+0x33>
  226a5e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226a63:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226a67:	24 01                	and    $0x1,%al
  226a69:	0f b6 c0             	movzbl %al,%eax
  226a6c:	48 83 c4 18          	add    $0x18,%rsp
  226a70:	c3                   	retq   
  226a71:	cc                   	int3   
  226a72:	cc                   	int3   
  226a73:	cc                   	int3   
  226a74:	cc                   	int3   
  226a75:	cc                   	int3   
  226a76:	cc                   	int3   
  226a77:	cc                   	int3   
  226a78:	cc                   	int3   
  226a79:	cc                   	int3   
  226a7a:	cc                   	int3   
  226a7b:	cc                   	int3   
  226a7c:	cc                   	int3   
  226a7d:	cc                   	int3   
  226a7e:	cc                   	int3   
  226a7f:	cc                   	int3   

0000000000226a80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E>:
                            fn $Flag(&self) -> bool {
  226a80:	48 83 ec 18          	sub    $0x18,%rsp
  226a84:	48 89 3c 24          	mov    %rdi,(%rsp)
  226a88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226a8d:	31 c0                	xor    %eax,%eax
  226a8f:	a8 01                	test   $0x1,%al
  226a91:	75 1b                	jne    226aae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E+0x2e>
  226a93:	48 8b 04 24          	mov    (%rsp),%rax
  226a97:	8b 00                	mov    (%rax),%eax
  226a99:	25 00 20 00 00       	and    $0x2000,%eax
  226a9e:	3d 00 20 00 00       	cmp    $0x2000,%eax
  226aa3:	0f 94 c0             	sete   %al
  226aa6:	24 01                	and    $0x1,%al
  226aa8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226aac:	eb 05                	jmp    226ab3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E+0x33>
  226aae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226ab3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226ab7:	24 01                	and    $0x1,%al
  226ab9:	0f b6 c0             	movzbl %al,%eax
  226abc:	48 83 c4 18          	add    $0x18,%rsp
  226ac0:	c3                   	retq   
  226ac1:	cc                   	int3   
  226ac2:	cc                   	int3   
  226ac3:	cc                   	int3   
  226ac4:	cc                   	int3   
  226ac5:	cc                   	int3   
  226ac6:	cc                   	int3   
  226ac7:	cc                   	int3   
  226ac8:	cc                   	int3   
  226ac9:	cc                   	int3   
  226aca:	cc                   	int3   
  226acb:	cc                   	int3   
  226acc:	cc                   	int3   
  226acd:	cc                   	int3   
  226ace:	cc                   	int3   
  226acf:	cc                   	int3   

0000000000226ad0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E>:
                            fn $Flag(&self) -> bool {
  226ad0:	48 83 ec 18          	sub    $0x18,%rsp
  226ad4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226ad8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226add:	31 c0                	xor    %eax,%eax
  226adf:	a8 01                	test   $0x1,%al
  226ae1:	75 1b                	jne    226afe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E+0x2e>
  226ae3:	48 8b 04 24          	mov    (%rsp),%rax
  226ae7:	8b 00                	mov    (%rax),%eax
  226ae9:	25 00 40 00 00       	and    $0x4000,%eax
  226aee:	3d 00 40 00 00       	cmp    $0x4000,%eax
  226af3:	0f 94 c0             	sete   %al
  226af6:	24 01                	and    $0x1,%al
  226af8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226afc:	eb 05                	jmp    226b03 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E+0x33>
  226afe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226b03:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226b07:	24 01                	and    $0x1,%al
  226b09:	0f b6 c0             	movzbl %al,%eax
  226b0c:	48 83 c4 18          	add    $0x18,%rsp
  226b10:	c3                   	retq   
  226b11:	cc                   	int3   
  226b12:	cc                   	int3   
  226b13:	cc                   	int3   
  226b14:	cc                   	int3   
  226b15:	cc                   	int3   
  226b16:	cc                   	int3   
  226b17:	cc                   	int3   
  226b18:	cc                   	int3   
  226b19:	cc                   	int3   
  226b1a:	cc                   	int3   
  226b1b:	cc                   	int3   
  226b1c:	cc                   	int3   
  226b1d:	cc                   	int3   
  226b1e:	cc                   	int3   
  226b1f:	cc                   	int3   

0000000000226b20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE>:
                            fn $Flag(&self) -> bool {
  226b20:	48 83 ec 18          	sub    $0x18,%rsp
  226b24:	48 89 3c 24          	mov    %rdi,(%rsp)
  226b28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226b2d:	31 c0                	xor    %eax,%eax
  226b2f:	a8 01                	test   $0x1,%al
  226b31:	75 1b                	jne    226b4e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE+0x2e>
  226b33:	48 8b 04 24          	mov    (%rsp),%rax
  226b37:	8b 00                	mov    (%rax),%eax
  226b39:	25 00 80 00 00       	and    $0x8000,%eax
  226b3e:	3d 00 80 00 00       	cmp    $0x8000,%eax
  226b43:	0f 94 c0             	sete   %al
  226b46:	24 01                	and    $0x1,%al
  226b48:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226b4c:	eb 05                	jmp    226b53 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE+0x33>
  226b4e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226b53:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226b57:	24 01                	and    $0x1,%al
  226b59:	0f b6 c0             	movzbl %al,%eax
  226b5c:	48 83 c4 18          	add    $0x18,%rsp
  226b60:	c3                   	retq   
  226b61:	cc                   	int3   
  226b62:	cc                   	int3   
  226b63:	cc                   	int3   
  226b64:	cc                   	int3   
  226b65:	cc                   	int3   
  226b66:	cc                   	int3   
  226b67:	cc                   	int3   
  226b68:	cc                   	int3   
  226b69:	cc                   	int3   
  226b6a:	cc                   	int3   
  226b6b:	cc                   	int3   
  226b6c:	cc                   	int3   
  226b6d:	cc                   	int3   
  226b6e:	cc                   	int3   
  226b6f:	cc                   	int3   

0000000000226b70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E>:
                            fn $Flag(&self) -> bool {
  226b70:	48 83 ec 18          	sub    $0x18,%rsp
  226b74:	48 89 3c 24          	mov    %rdi,(%rsp)
  226b78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226b7d:	31 c0                	xor    %eax,%eax
  226b7f:	a8 01                	test   $0x1,%al
  226b81:	75 1b                	jne    226b9e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E+0x2e>
  226b83:	48 8b 04 24          	mov    (%rsp),%rax
  226b87:	8b 00                	mov    (%rax),%eax
  226b89:	25 00 00 01 00       	and    $0x10000,%eax
  226b8e:	3d 00 00 01 00       	cmp    $0x10000,%eax
  226b93:	0f 94 c0             	sete   %al
  226b96:	24 01                	and    $0x1,%al
  226b98:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226b9c:	eb 05                	jmp    226ba3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E+0x33>
  226b9e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226ba3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226ba7:	24 01                	and    $0x1,%al
  226ba9:	0f b6 c0             	movzbl %al,%eax
  226bac:	48 83 c4 18          	add    $0x18,%rsp
  226bb0:	c3                   	retq   
  226bb1:	cc                   	int3   
  226bb2:	cc                   	int3   
  226bb3:	cc                   	int3   
  226bb4:	cc                   	int3   
  226bb5:	cc                   	int3   
  226bb6:	cc                   	int3   
  226bb7:	cc                   	int3   
  226bb8:	cc                   	int3   
  226bb9:	cc                   	int3   
  226bba:	cc                   	int3   
  226bbb:	cc                   	int3   
  226bbc:	cc                   	int3   
  226bbd:	cc                   	int3   
  226bbe:	cc                   	int3   
  226bbf:	cc                   	int3   

0000000000226bc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E>:
                            fn $Flag(&self) -> bool {
  226bc0:	48 83 ec 18          	sub    $0x18,%rsp
  226bc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226bc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226bcd:	31 c0                	xor    %eax,%eax
  226bcf:	a8 01                	test   $0x1,%al
  226bd1:	75 1b                	jne    226bee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E+0x2e>
  226bd3:	48 8b 04 24          	mov    (%rsp),%rax
  226bd7:	8b 00                	mov    (%rax),%eax
  226bd9:	25 00 00 02 00       	and    $0x20000,%eax
  226bde:	3d 00 00 02 00       	cmp    $0x20000,%eax
  226be3:	0f 94 c0             	sete   %al
  226be6:	24 01                	and    $0x1,%al
  226be8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226bec:	eb 05                	jmp    226bf3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E+0x33>
  226bee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226bf3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226bf7:	24 01                	and    $0x1,%al
  226bf9:	0f b6 c0             	movzbl %al,%eax
  226bfc:	48 83 c4 18          	add    $0x18,%rsp
  226c00:	c3                   	retq   
  226c01:	cc                   	int3   
  226c02:	cc                   	int3   
  226c03:	cc                   	int3   
  226c04:	cc                   	int3   
  226c05:	cc                   	int3   
  226c06:	cc                   	int3   
  226c07:	cc                   	int3   
  226c08:	cc                   	int3   
  226c09:	cc                   	int3   
  226c0a:	cc                   	int3   
  226c0b:	cc                   	int3   
  226c0c:	cc                   	int3   
  226c0d:	cc                   	int3   
  226c0e:	cc                   	int3   
  226c0f:	cc                   	int3   

0000000000226c10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E>:
                            fn $Flag(&self) -> bool {
  226c10:	48 83 ec 18          	sub    $0x18,%rsp
  226c14:	48 89 3c 24          	mov    %rdi,(%rsp)
  226c18:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226c1d:	31 c0                	xor    %eax,%eax
  226c1f:	a8 01                	test   $0x1,%al
  226c21:	75 1b                	jne    226c3e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E+0x2e>
  226c23:	48 8b 04 24          	mov    (%rsp),%rax
  226c27:	8b 00                	mov    (%rax),%eax
  226c29:	25 00 00 04 00       	and    $0x40000,%eax
  226c2e:	3d 00 00 04 00       	cmp    $0x40000,%eax
  226c33:	0f 94 c0             	sete   %al
  226c36:	24 01                	and    $0x1,%al
  226c38:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226c3c:	eb 05                	jmp    226c43 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E+0x33>
  226c3e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226c43:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226c47:	24 01                	and    $0x1,%al
  226c49:	0f b6 c0             	movzbl %al,%eax
  226c4c:	48 83 c4 18          	add    $0x18,%rsp
  226c50:	c3                   	retq   
  226c51:	cc                   	int3   
  226c52:	cc                   	int3   
  226c53:	cc                   	int3   
  226c54:	cc                   	int3   
  226c55:	cc                   	int3   
  226c56:	cc                   	int3   
  226c57:	cc                   	int3   
  226c58:	cc                   	int3   
  226c59:	cc                   	int3   
  226c5a:	cc                   	int3   
  226c5b:	cc                   	int3   
  226c5c:	cc                   	int3   
  226c5d:	cc                   	int3   
  226c5e:	cc                   	int3   
  226c5f:	cc                   	int3   

0000000000226c60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE>:
                            fn $Flag(&self) -> bool {
  226c60:	48 83 ec 18          	sub    $0x18,%rsp
  226c64:	48 89 3c 24          	mov    %rdi,(%rsp)
  226c68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226c6d:	31 c0                	xor    %eax,%eax
  226c6f:	a8 01                	test   $0x1,%al
  226c71:	75 1b                	jne    226c8e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE+0x2e>
  226c73:	48 8b 04 24          	mov    (%rsp),%rax
  226c77:	8b 00                	mov    (%rax),%eax
  226c79:	25 00 00 08 00       	and    $0x80000,%eax
  226c7e:	3d 00 00 08 00       	cmp    $0x80000,%eax
  226c83:	0f 94 c0             	sete   %al
  226c86:	24 01                	and    $0x1,%al
  226c88:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226c8c:	eb 05                	jmp    226c93 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE+0x33>
  226c8e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226c93:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226c97:	24 01                	and    $0x1,%al
  226c99:	0f b6 c0             	movzbl %al,%eax
  226c9c:	48 83 c4 18          	add    $0x18,%rsp
  226ca0:	c3                   	retq   
  226ca1:	cc                   	int3   
  226ca2:	cc                   	int3   
  226ca3:	cc                   	int3   
  226ca4:	cc                   	int3   
  226ca5:	cc                   	int3   
  226ca6:	cc                   	int3   
  226ca7:	cc                   	int3   
  226ca8:	cc                   	int3   
  226ca9:	cc                   	int3   
  226caa:	cc                   	int3   
  226cab:	cc                   	int3   
  226cac:	cc                   	int3   
  226cad:	cc                   	int3   
  226cae:	cc                   	int3   
  226caf:	cc                   	int3   

0000000000226cb0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E>:
                            fn $Flag(&self) -> bool {
  226cb0:	48 83 ec 18          	sub    $0x18,%rsp
  226cb4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226cb8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226cbd:	31 c0                	xor    %eax,%eax
  226cbf:	a8 01                	test   $0x1,%al
  226cc1:	75 1b                	jne    226cde <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E+0x2e>
  226cc3:	48 8b 04 24          	mov    (%rsp),%rax
  226cc7:	8b 00                	mov    (%rax),%eax
  226cc9:	25 00 00 20 00       	and    $0x200000,%eax
  226cce:	3d 00 00 20 00       	cmp    $0x200000,%eax
  226cd3:	0f 94 c0             	sete   %al
  226cd6:	24 01                	and    $0x1,%al
  226cd8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226cdc:	eb 05                	jmp    226ce3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E+0x33>
  226cde:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226ce3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226ce7:	24 01                	and    $0x1,%al
  226ce9:	0f b6 c0             	movzbl %al,%eax
  226cec:	48 83 c4 18          	add    $0x18,%rsp
  226cf0:	c3                   	retq   
  226cf1:	cc                   	int3   
  226cf2:	cc                   	int3   
  226cf3:	cc                   	int3   
  226cf4:	cc                   	int3   
  226cf5:	cc                   	int3   
  226cf6:	cc                   	int3   
  226cf7:	cc                   	int3   
  226cf8:	cc                   	int3   
  226cf9:	cc                   	int3   
  226cfa:	cc                   	int3   
  226cfb:	cc                   	int3   
  226cfc:	cc                   	int3   
  226cfd:	cc                   	int3   
  226cfe:	cc                   	int3   
  226cff:	cc                   	int3   

0000000000226d00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE>:
                            fn $Flag(&self) -> bool {
  226d00:	48 83 ec 18          	sub    $0x18,%rsp
  226d04:	48 89 3c 24          	mov    %rdi,(%rsp)
  226d08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226d0d:	31 c0                	xor    %eax,%eax
  226d0f:	a8 01                	test   $0x1,%al
  226d11:	75 1b                	jne    226d2e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE+0x2e>
  226d13:	48 8b 04 24          	mov    (%rsp),%rax
  226d17:	8b 00                	mov    (%rax),%eax
  226d19:	25 00 00 40 00       	and    $0x400000,%eax
  226d1e:	3d 00 00 40 00       	cmp    $0x400000,%eax
  226d23:	0f 94 c0             	sete   %al
  226d26:	24 01                	and    $0x1,%al
  226d28:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226d2c:	eb 05                	jmp    226d33 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE+0x33>
  226d2e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226d33:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226d37:	24 01                	and    $0x1,%al
  226d39:	0f b6 c0             	movzbl %al,%eax
  226d3c:	48 83 c4 18          	add    $0x18,%rsp
  226d40:	c3                   	retq   
  226d41:	cc                   	int3   
  226d42:	cc                   	int3   
  226d43:	cc                   	int3   
  226d44:	cc                   	int3   
  226d45:	cc                   	int3   
  226d46:	cc                   	int3   
  226d47:	cc                   	int3   
  226d48:	cc                   	int3   
  226d49:	cc                   	int3   
  226d4a:	cc                   	int3   
  226d4b:	cc                   	int3   
  226d4c:	cc                   	int3   
  226d4d:	cc                   	int3   
  226d4e:	cc                   	int3   
  226d4f:	cc                   	int3   

0000000000226d50 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E>:
                            fn $Flag(&self) -> bool {
  226d50:	48 83 ec 18          	sub    $0x18,%rsp
  226d54:	48 89 3c 24          	mov    %rdi,(%rsp)
  226d58:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226d5d:	31 c0                	xor    %eax,%eax
  226d5f:	a8 01                	test   $0x1,%al
  226d61:	75 1b                	jne    226d7e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E+0x2e>
  226d63:	48 8b 04 24          	mov    (%rsp),%rax
  226d67:	8b 00                	mov    (%rax),%eax
  226d69:	25 00 00 80 00       	and    $0x800000,%eax
  226d6e:	3d 00 00 80 00       	cmp    $0x800000,%eax
  226d73:	0f 94 c0             	sete   %al
  226d76:	24 01                	and    $0x1,%al
  226d78:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226d7c:	eb 05                	jmp    226d83 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E+0x33>
  226d7e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226d83:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226d87:	24 01                	and    $0x1,%al
  226d89:	0f b6 c0             	movzbl %al,%eax
  226d8c:	48 83 c4 18          	add    $0x18,%rsp
  226d90:	c3                   	retq   
  226d91:	cc                   	int3   
  226d92:	cc                   	int3   
  226d93:	cc                   	int3   
  226d94:	cc                   	int3   
  226d95:	cc                   	int3   
  226d96:	cc                   	int3   
  226d97:	cc                   	int3   
  226d98:	cc                   	int3   
  226d99:	cc                   	int3   
  226d9a:	cc                   	int3   
  226d9b:	cc                   	int3   
  226d9c:	cc                   	int3   
  226d9d:	cc                   	int3   
  226d9e:	cc                   	int3   
  226d9f:	cc                   	int3   

0000000000226da0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E>:
                            fn $Flag(&self) -> bool {
  226da0:	48 83 ec 18          	sub    $0x18,%rsp
  226da4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226da8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226dad:	31 c0                	xor    %eax,%eax
  226daf:	a8 01                	test   $0x1,%al
  226db1:	75 1b                	jne    226dce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E+0x2e>
  226db3:	48 8b 04 24          	mov    (%rsp),%rax
  226db7:	8b 00                	mov    (%rax),%eax
  226db9:	25 00 00 00 01       	and    $0x1000000,%eax
  226dbe:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  226dc3:	0f 94 c0             	sete   %al
  226dc6:	24 01                	and    $0x1,%al
  226dc8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226dcc:	eb 05                	jmp    226dd3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E+0x33>
  226dce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226dd3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226dd7:	24 01                	and    $0x1,%al
  226dd9:	0f b6 c0             	movzbl %al,%eax
  226ddc:	48 83 c4 18          	add    $0x18,%rsp
  226de0:	c3                   	retq   
  226de1:	cc                   	int3   
  226de2:	cc                   	int3   
  226de3:	cc                   	int3   
  226de4:	cc                   	int3   
  226de5:	cc                   	int3   
  226de6:	cc                   	int3   
  226de7:	cc                   	int3   
  226de8:	cc                   	int3   
  226de9:	cc                   	int3   
  226dea:	cc                   	int3   
  226deb:	cc                   	int3   
  226dec:	cc                   	int3   
  226ded:	cc                   	int3   
  226dee:	cc                   	int3   
  226def:	cc                   	int3   

0000000000226df0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE>:
                            fn $Flag(&self) -> bool {
  226df0:	48 83 ec 18          	sub    $0x18,%rsp
  226df4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226df8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226dfd:	31 c0                	xor    %eax,%eax
  226dff:	a8 01                	test   $0x1,%al
  226e01:	75 1b                	jne    226e1e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE+0x2e>
  226e03:	48 8b 04 24          	mov    (%rsp),%rax
  226e07:	8b 00                	mov    (%rax),%eax
  226e09:	25 00 00 00 02       	and    $0x2000000,%eax
  226e0e:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  226e13:	0f 94 c0             	sete   %al
  226e16:	24 01                	and    $0x1,%al
  226e18:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226e1c:	eb 05                	jmp    226e23 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE+0x33>
  226e1e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226e23:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226e27:	24 01                	and    $0x1,%al
  226e29:	0f b6 c0             	movzbl %al,%eax
  226e2c:	48 83 c4 18          	add    $0x18,%rsp
  226e30:	c3                   	retq   
  226e31:	cc                   	int3   
  226e32:	cc                   	int3   
  226e33:	cc                   	int3   
  226e34:	cc                   	int3   
  226e35:	cc                   	int3   
  226e36:	cc                   	int3   
  226e37:	cc                   	int3   
  226e38:	cc                   	int3   
  226e39:	cc                   	int3   
  226e3a:	cc                   	int3   
  226e3b:	cc                   	int3   
  226e3c:	cc                   	int3   
  226e3d:	cc                   	int3   
  226e3e:	cc                   	int3   
  226e3f:	cc                   	int3   

0000000000226e40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE>:
                            fn $Flag(&self) -> bool {
  226e40:	48 83 ec 18          	sub    $0x18,%rsp
  226e44:	48 89 3c 24          	mov    %rdi,(%rsp)
  226e48:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226e4d:	31 c0                	xor    %eax,%eax
  226e4f:	a8 01                	test   $0x1,%al
  226e51:	75 1b                	jne    226e6e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE+0x2e>
  226e53:	48 8b 04 24          	mov    (%rsp),%rax
  226e57:	8b 00                	mov    (%rax),%eax
  226e59:	25 00 00 00 04       	and    $0x4000000,%eax
  226e5e:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  226e63:	0f 94 c0             	sete   %al
  226e66:	24 01                	and    $0x1,%al
  226e68:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226e6c:	eb 05                	jmp    226e73 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE+0x33>
  226e6e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226e73:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226e77:	24 01                	and    $0x1,%al
  226e79:	0f b6 c0             	movzbl %al,%eax
  226e7c:	48 83 c4 18          	add    $0x18,%rsp
  226e80:	c3                   	retq   
  226e81:	cc                   	int3   
  226e82:	cc                   	int3   
  226e83:	cc                   	int3   
  226e84:	cc                   	int3   
  226e85:	cc                   	int3   
  226e86:	cc                   	int3   
  226e87:	cc                   	int3   
  226e88:	cc                   	int3   
  226e89:	cc                   	int3   
  226e8a:	cc                   	int3   
  226e8b:	cc                   	int3   
  226e8c:	cc                   	int3   
  226e8d:	cc                   	int3   
  226e8e:	cc                   	int3   
  226e8f:	cc                   	int3   

0000000000226e90 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE>:
                            fn $Flag(&self) -> bool {
  226e90:	48 83 ec 18          	sub    $0x18,%rsp
  226e94:	48 89 3c 24          	mov    %rdi,(%rsp)
  226e98:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226e9d:	31 c0                	xor    %eax,%eax
  226e9f:	a8 01                	test   $0x1,%al
  226ea1:	75 1b                	jne    226ebe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE+0x2e>
  226ea3:	48 8b 04 24          	mov    (%rsp),%rax
  226ea7:	8b 00                	mov    (%rax),%eax
  226ea9:	25 00 00 00 08       	and    $0x8000000,%eax
  226eae:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  226eb3:	0f 94 c0             	sete   %al
  226eb6:	24 01                	and    $0x1,%al
  226eb8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226ebc:	eb 05                	jmp    226ec3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE+0x33>
  226ebe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226ec3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226ec7:	24 01                	and    $0x1,%al
  226ec9:	0f b6 c0             	movzbl %al,%eax
  226ecc:	48 83 c4 18          	add    $0x18,%rsp
  226ed0:	c3                   	retq   
  226ed1:	cc                   	int3   
  226ed2:	cc                   	int3   
  226ed3:	cc                   	int3   
  226ed4:	cc                   	int3   
  226ed5:	cc                   	int3   
  226ed6:	cc                   	int3   
  226ed7:	cc                   	int3   
  226ed8:	cc                   	int3   
  226ed9:	cc                   	int3   
  226eda:	cc                   	int3   
  226edb:	cc                   	int3   
  226edc:	cc                   	int3   
  226edd:	cc                   	int3   
  226ede:	cc                   	int3   
  226edf:	cc                   	int3   

0000000000226ee0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE>:
                            fn $Flag(&self) -> bool {
  226ee0:	48 83 ec 18          	sub    $0x18,%rsp
  226ee4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226ee8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226eed:	31 c0                	xor    %eax,%eax
  226eef:	a8 01                	test   $0x1,%al
  226ef1:	75 1b                	jne    226f0e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE+0x2e>
  226ef3:	48 8b 04 24          	mov    (%rsp),%rax
  226ef7:	8b 00                	mov    (%rax),%eax
  226ef9:	25 00 00 00 10       	and    $0x10000000,%eax
  226efe:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  226f03:	0f 94 c0             	sete   %al
  226f06:	24 01                	and    $0x1,%al
  226f08:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226f0c:	eb 05                	jmp    226f13 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE+0x33>
  226f0e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226f13:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226f17:	24 01                	and    $0x1,%al
  226f19:	0f b6 c0             	movzbl %al,%eax
  226f1c:	48 83 c4 18          	add    $0x18,%rsp
  226f20:	c3                   	retq   
  226f21:	cc                   	int3   
  226f22:	cc                   	int3   
  226f23:	cc                   	int3   
  226f24:	cc                   	int3   
  226f25:	cc                   	int3   
  226f26:	cc                   	int3   
  226f27:	cc                   	int3   
  226f28:	cc                   	int3   
  226f29:	cc                   	int3   
  226f2a:	cc                   	int3   
  226f2b:	cc                   	int3   
  226f2c:	cc                   	int3   
  226f2d:	cc                   	int3   
  226f2e:	cc                   	int3   
  226f2f:	cc                   	int3   

0000000000226f30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E>:
                            fn $Flag(&self) -> bool {
  226f30:	48 83 ec 18          	sub    $0x18,%rsp
  226f34:	48 89 3c 24          	mov    %rdi,(%rsp)
  226f38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226f3d:	31 c0                	xor    %eax,%eax
  226f3f:	a8 01                	test   $0x1,%al
  226f41:	75 1b                	jne    226f5e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E+0x2e>
  226f43:	48 8b 04 24          	mov    (%rsp),%rax
  226f47:	8b 00                	mov    (%rax),%eax
  226f49:	25 00 00 00 20       	and    $0x20000000,%eax
  226f4e:	3d 00 00 00 20       	cmp    $0x20000000,%eax
  226f53:	0f 94 c0             	sete   %al
  226f56:	24 01                	and    $0x1,%al
  226f58:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226f5c:	eb 05                	jmp    226f63 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E+0x33>
  226f5e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226f63:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226f67:	24 01                	and    $0x1,%al
  226f69:	0f b6 c0             	movzbl %al,%eax
  226f6c:	48 83 c4 18          	add    $0x18,%rsp
  226f70:	c3                   	retq   
  226f71:	cc                   	int3   
  226f72:	cc                   	int3   
  226f73:	cc                   	int3   
  226f74:	cc                   	int3   
  226f75:	cc                   	int3   
  226f76:	cc                   	int3   
  226f77:	cc                   	int3   
  226f78:	cc                   	int3   
  226f79:	cc                   	int3   
  226f7a:	cc                   	int3   
  226f7b:	cc                   	int3   
  226f7c:	cc                   	int3   
  226f7d:	cc                   	int3   
  226f7e:	cc                   	int3   
  226f7f:	cc                   	int3   

0000000000226f80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E>:
                            fn $Flag(&self) -> bool {
  226f80:	48 83 ec 18          	sub    $0x18,%rsp
  226f84:	48 89 3c 24          	mov    %rdi,(%rsp)
  226f88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226f8d:	31 c0                	xor    %eax,%eax
  226f8f:	a8 01                	test   $0x1,%al
  226f91:	75 1b                	jne    226fae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E+0x2e>
  226f93:	48 8b 04 24          	mov    (%rsp),%rax
  226f97:	8b 00                	mov    (%rax),%eax
  226f99:	25 00 00 00 40       	and    $0x40000000,%eax
  226f9e:	3d 00 00 00 40       	cmp    $0x40000000,%eax
  226fa3:	0f 94 c0             	sete   %al
  226fa6:	24 01                	and    $0x1,%al
  226fa8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226fac:	eb 05                	jmp    226fb3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E+0x33>
  226fae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  226fb3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226fb7:	24 01                	and    $0x1,%al
  226fb9:	0f b6 c0             	movzbl %al,%eax
  226fbc:	48 83 c4 18          	add    $0x18,%rsp
  226fc0:	c3                   	retq   
  226fc1:	cc                   	int3   
  226fc2:	cc                   	int3   
  226fc3:	cc                   	int3   
  226fc4:	cc                   	int3   
  226fc5:	cc                   	int3   
  226fc6:	cc                   	int3   
  226fc7:	cc                   	int3   
  226fc8:	cc                   	int3   
  226fc9:	cc                   	int3   
  226fca:	cc                   	int3   
  226fcb:	cc                   	int3   
  226fcc:	cc                   	int3   
  226fcd:	cc                   	int3   
  226fce:	cc                   	int3   
  226fcf:	cc                   	int3   

0000000000226fd0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE>:
                            fn $Flag(&self) -> bool {
  226fd0:	48 83 ec 18          	sub    $0x18,%rsp
  226fd4:	48 89 3c 24          	mov    %rdi,(%rsp)
  226fd8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226fdd:	31 c0                	xor    %eax,%eax
  226fdf:	a8 01                	test   $0x1,%al
  226fe1:	75 1b                	jne    226ffe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE+0x2e>
  226fe3:	48 8b 04 24          	mov    (%rsp),%rax
  226fe7:	8b 00                	mov    (%rax),%eax
  226fe9:	25 00 00 00 80       	and    $0x80000000,%eax
  226fee:	3d 00 00 00 80       	cmp    $0x80000000,%eax
  226ff3:	0f 94 c0             	sete   %al
  226ff6:	24 01                	and    $0x1,%al
  226ff8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226ffc:	eb 05                	jmp    227003 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE+0x33>
  226ffe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  227003:	8a 44 24 0f          	mov    0xf(%rsp),%al
  227007:	24 01                	and    $0x1,%al
  227009:	0f b6 c0             	movzbl %al,%eax
  22700c:	48 83 c4 18          	add    $0x18,%rsp
  227010:	c3                   	retq   
  227011:	cc                   	int3   
  227012:	cc                   	int3   
  227013:	cc                   	int3   
  227014:	cc                   	int3   
  227015:	cc                   	int3   
  227016:	cc                   	int3   
  227017:	cc                   	int3   
  227018:	cc                   	int3   
  227019:	cc                   	int3   
  22701a:	cc                   	int3   
  22701b:	cc                   	int3   
  22701c:	cc                   	int3   
  22701d:	cc                   	int3   
  22701e:	cc                   	int3   
  22701f:	cc                   	int3   

0000000000227020 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>:
            fn deref(&self) -> &$T {
  227020:	48 83 ec 18          	sub    $0x18,%rsp
  227024:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  227029:	48 8d 05 f8 d7 01 00 	lea    0x1d7f8(%rip),%rax        # 244828 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6d02b75ade5afdfcE>
  227030:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227035:	48 8d 3d ec d7 01 00 	lea    0x1d7ec(%rip),%rdi        # 244828 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6d02b75ade5afdfcE>
  22703c:	e8 4f 31 fe ff       	callq  20a190 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E>
  227041:	48 89 04 24          	mov    %rax,(%rsp)
  227045:	48 8b 04 24          	mov    (%rsp),%rax
            }
  227049:	48 83 c4 18          	add    $0x18,%rsp
  22704d:	c3                   	retq   
  22704e:	cc                   	int3   
  22704f:	cc                   	int3   

0000000000227050 <_ZN9r3_kernel2mm2io8MemoryIO3new17h5d7a21f81a45f499E>:
    pub address: VirtualAddress,
    pub read_only: bool,
}

impl MemoryIO {
    pub fn new(address: VirtualAddress, read_only: bool) -> Self {
  227050:	48 83 ec 20          	sub    $0x20,%rsp
  227054:	40 88 f0             	mov    %sil,%al
  227057:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22705c:	24 01                	and    $0x1,%al
  22705e:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        MemoryIO { address, read_only }
  227062:	48 89 3c 24          	mov    %rdi,(%rsp)
  227066:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  22706a:	48 8b 04 24          	mov    (%rsp),%rax
  22706e:	8a 54 24 08          	mov    0x8(%rsp),%dl
  227072:	48 83 c4 20          	add    $0x20,%rsp
  227076:	c3                   	retq   
  227077:	cc                   	int3   
  227078:	cc                   	int3   
  227079:	cc                   	int3   
  22707a:	cc                   	int3   
  22707b:	cc                   	int3   
  22707c:	cc                   	int3   
  22707d:	cc                   	int3   
  22707e:	cc                   	int3   
  22707f:	cc                   	int3   

0000000000227080 <_ZN9r3_kernel2mm2io8MemoryIO8read_u3217hf47559e028b9b32cE>:

    pub fn write_u16(&self, value: u16) {
        unsafe { ptr::write_volatile(self.address.as_u64() as *mut u16, value) }
    }

    pub fn read_u32(&self) -> u32 {
  227080:	48 83 ec 18          	sub    $0x18,%rsp
  227084:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { ptr::read_volatile(self.address.as_u64() as *const u32) }
  227089:	e8 32 12 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  22708e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227093:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  227098:	e8 e3 a7 ff ff       	callq  221880 <_ZN4core3ptr13read_volatile17h2d3388a904c9c0c0E>
  22709d:	89 44 24 04          	mov    %eax,0x4(%rsp)
  2270a1:	8b 44 24 04          	mov    0x4(%rsp),%eax
    }
  2270a5:	48 83 c4 18          	add    $0x18,%rsp
  2270a9:	c3                   	retq   
  2270aa:	cc                   	int3   
  2270ab:	cc                   	int3   
  2270ac:	cc                   	int3   
  2270ad:	cc                   	int3   
  2270ae:	cc                   	int3   
  2270af:	cc                   	int3   

00000000002270b0 <_ZN9r3_kernel2mm2io8MemoryIO9write_u3217hb6f2748048f55de2E>:

    pub fn write_u32(&self, value: u32) {
  2270b0:	48 83 ec 28          	sub    $0x28,%rsp
  2270b4:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  2270b8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2270bd:	89 74 24 24          	mov    %esi,0x24(%rsp)
        unsafe { ptr::write_volatile(self.address.as_u64() as *mut u32, value) }
  2270c1:	e8 fa 11 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  2270c6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2270cb:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  2270cf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2270d4:	e8 c7 a7 ff ff       	callq  2218a0 <_ZN4core3ptr14write_volatile17h978400e3cf6286c4E>
    }
  2270d9:	48 83 c4 28          	add    $0x28,%rsp
  2270dd:	c3                   	retq   
  2270de:	cc                   	int3   
  2270df:	cc                   	int3   

00000000002270e0 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E>:
    pub fn probe_cpu_cores() -> Result<Processors, MADTError> {
  2270e0:	48 81 ec 28 03 00 00 	sub    $0x328,%rsp
  2270e7:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  2270ee:	00 
  2270ef:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  2270f6:	00 
        let acpi_lock = ACPI.lock();
  2270f7:	48 8d 3d 1c 9c fd ff 	lea    -0x263e4(%rip),%rdi        # 200d1a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2270fe:	e8 bd d7 fe ff       	callq  2148c0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>
  227103:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22710a:	00 
  22710b:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  227112:	00 
  227113:	e8 18 77 00 00       	callq  22e830 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>
  227118:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  22711f:	00 
  227120:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  227127:	00 
        if acpi_lock.is_none() {
  227128:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  22712f:	00 
  227130:	e8 8b 7b 00 00       	callq  22ecc0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  227135:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22713c:	00 
  22713d:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  227144:	00 
  227145:	e8 f6 a7 fe ff       	callq  211940 <_ZN4core6option15Option$LT$T$GT$7is_none17h6d69479f60fd2274E>
  22714a:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  227151:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
  227158:	a8 01                	test   $0x1,%al
  22715a:	75 1c                	jne    227178 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x98>
  22715c:	eb 00                	jmp    22715e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x7e>
        let madt_entry_opt = acpi_lock.as_ref().unwrap().get_table("APIC");
  22715e:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  227165:	00 
  227166:	e8 55 7b 00 00       	callq  22ecc0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  22716b:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  227172:	00 
  227173:	e9 0e 01 00 00       	jmpq   227286 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x1a6>
            log::error!("ACPI not initialized");
  227178:	48 c7 84 24 f0 00 00 	movq   $0x1,0xf0(%rsp)
  22717f:	00 01 00 00 00 
  227184:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  22718b:	00 
  22718c:	48 8d 35 65 91 fd ff 	lea    -0x26e9b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  227193:	e8 38 be fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227198:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  22719f:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  2271a6:	a8 01                	test   $0x1,%al
  2271a8:	75 0c                	jne    2271b6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0xd6>
  2271aa:	eb 00                	jmp    2271ac <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0xcc>
  2271ac:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  2271b3:	00 
  2271b4:	eb 60                	jmp    227216 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x136>
  2271b6:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  2271bd:	00 
  2271be:	48 8b 3d 83 69 01 00 	mov    0x16983(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2271c5:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  2271cc:	00 
  2271cd:	e8 1e 40 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2271d2:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  2271d9:	00 
  2271da:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  2271e1:	00 
  2271e2:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  2271e9:	00 
  2271ea:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  2271f1:	00 
  2271f2:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  2271f9:	00 
  2271fa:	e8 d1 bd fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2271ff:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  227206:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  22720d:	24 01                	and    $0x1,%al
  22720f:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  227216:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  22721d:	01 
  22721e:	75 11                	jne    227231 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x151>
  227220:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  227227:	00 
            return Err(MADTError::NoTable);
  227228:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  22722c:	c6 00 01             	movb   $0x1,(%rax)
  22722f:	eb 43                	jmp    227274 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x194>
            log::error!("ACPI not initialized");
  227231:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  227238:	00 
  227239:	48 8d 35 10 4f 01 00 	lea    0x14f10(%rip),%rsi        # 23c150 <memcmp+0x3410>
  227240:	ba 01 00 00 00       	mov    $0x1,%edx
  227245:	48 8d 0d 94 bb fd ff 	lea    -0x2446c(%rip),%rcx        # 202de0 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x18>
  22724c:	31 c0                	xor    %eax,%eax
  22724e:	41 89 c0             	mov    %eax,%r8d
  227251:	e8 da f2 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  227256:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  22725d:	00 
  22725e:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  227265:	00 
  227266:	48 8d 15 f3 4e 01 00 	lea    0x14ef3(%rip),%rdx        # 23c160 <memcmp+0x3420>
  22726d:	e8 0e bb 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  227272:	eb ac                	jmp    227220 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x140>
    }
  227274:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  22727b:	00 
  22727c:	e8 df 4c fe ff       	callq  20bf60 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  227281:	e9 a3 01 00 00       	jmpq   227429 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x349>
  227286:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  22728d:	00 
        let madt_entry_opt = acpi_lock.as_ref().unwrap().get_table("APIC");
  22728e:	e8 cd 9d fe ff       	callq  211060 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>
  227293:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22729a:	00 
  22729b:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  2272a2:	00 
  2272a3:	48 8d 35 ee 4e 01 00 	lea    0x14eee(%rip),%rsi        # 23c198 <memcmp+0x3458>
  2272aa:	e8 d1 a0 fe ff       	callq  211380 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>
  2272af:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2272b6:	00 
  2272b7:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  2272be:	00 
  2272bf:	48 8d 35 ca 96 fd ff 	lea    -0x26936(%rip),%rsi        # 200990 <str.2+0xf0>
  2272c6:	ba 04 00 00 00       	mov    $0x4,%edx
  2272cb:	e8 a0 d0 fe ff       	callq  214370 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E>
  2272d0:	48 89 94 24 40 01 00 	mov    %rdx,0x140(%rsp)
  2272d7:	00 
  2272d8:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2272df:	00 
        if madt_entry_opt.is_none() {
  2272e0:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  2272e7:	00 
  2272e8:	e8 c3 a5 fe ff       	callq  2118b0 <_ZN4core6option15Option$LT$T$GT$7is_none17h2db87b08cdf3ef67E>
  2272ed:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  2272f4:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  2272fb:	a8 01                	test   $0x1,%al
  2272fd:	75 2b                	jne    22732a <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x24a>
  2272ff:	eb 00                	jmp    227301 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x221>
        let madt_address = madt_entry_opt.unwrap();
  227301:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  227308:	00 
  227309:	48 8b b4 24 40 01 00 	mov    0x140(%rsp),%rsi
  227310:	00 
  227311:	48 8d 15 e0 4e 01 00 	lea    0x14ee0(%rip),%rdx        # 23c1f8 <memcmp+0x34b8>
  227318:	e8 23 a3 fe ff       	callq  211640 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E>
  22731d:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  227324:	00 
  227325:	e9 0f 01 00 00       	jmpq   227439 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x359>
            log::error!("APIC MADT not found");
  22732a:	48 c7 84 24 48 01 00 	movq   $0x1,0x148(%rsp)
  227331:	00 01 00 00 00 
  227336:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  22733d:	00 
  22733e:	48 8d 35 b3 8f fd ff 	lea    -0x2704d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  227345:	e8 86 bc fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22734a:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  227351:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  227358:	a8 01                	test   $0x1,%al
  22735a:	75 0c                	jne    227368 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x288>
  22735c:	eb 00                	jmp    22735e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x27e>
  22735e:	c6 84 24 57 01 00 00 	movb   $0x0,0x157(%rsp)
  227365:	00 
  227366:	eb 60                	jmp    2273c8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x2e8>
  227368:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  22736f:	00 
  227370:	48 8b 3d d1 67 01 00 	mov    0x167d1(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  227377:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  22737e:	00 
  22737f:	e8 6c 3e 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  227384:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  22738b:	00 
  22738c:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  227393:	00 
  227394:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  22739b:	00 
  22739c:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  2273a3:	00 
  2273a4:	48 8d b4 24 58 01 00 	lea    0x158(%rsp),%rsi
  2273ab:	00 
  2273ac:	e8 1f bc fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2273b1:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  2273b8:	8a 84 24 95 00 00 00 	mov    0x95(%rsp),%al
  2273bf:	24 01                	and    $0x1,%al
  2273c1:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  2273c8:	f6 84 24 57 01 00 00 	testb  $0x1,0x157(%rsp)
  2273cf:	01 
  2273d0:	75 14                	jne    2273e6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x306>
  2273d2:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2273d9:	00 
            return Err(MADTError::NoTable);
  2273da:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  2273de:	c6 00 01             	movb   $0x1,(%rax)
  2273e1:	e9 8e fe ff ff       	jmpq   227274 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x194>
            log::error!("APIC MADT not found");
  2273e6:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  2273ed:	00 
  2273ee:	48 8d 35 bb 4d 01 00 	lea    0x14dbb(%rip),%rsi        # 23c1b0 <memcmp+0x3470>
  2273f5:	ba 01 00 00 00       	mov    $0x1,%edx
  2273fa:	48 8d 0d df b9 fd ff 	lea    -0x24621(%rip),%rcx        # 202de0 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x18>
  227401:	31 c0                	xor    %eax,%eax
  227403:	41 89 c0             	mov    %eax,%r8d
  227406:	e8 25 f1 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22740b:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  227412:	00 
  227413:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  22741a:	00 
  22741b:	48 8d 15 9e 4d 01 00 	lea    0x14d9e(%rip),%rdx        # 23c1c0 <memcmp+0x3480>
  227422:	e8 59 b9 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  227427:	eb a9                	jmp    2273d2 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x2f2>
  227429:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  227430:	00 
    }
  227431:	48 81 c4 28 03 00 00 	add    $0x328,%rsp
  227438:	c3                   	retq   
        let lapic_root: &LAPICRootHeader = unsafe { &*madt_address.get_ptr() };
  227439:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  227440:	00 
  227441:	e8 0a 22 ff ff       	callq  219650 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8281fca1aa85ca7aE>
  227446:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22744d:	00 
  22744e:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  227455:	00 
  227456:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  22745d:	00 
        assert_eq!(lapic_root.header.length > 8, true);
  22745e:	8b 40 04             	mov    0x4(%rax),%eax
  227461:	83 e8 09             	sub    $0x9,%eax
  227464:	0f 93 84 24 ae 01 00 	setae  0x1ae(%rsp)
  22746b:	00 
  22746c:	48 8d 84 24 ae 01 00 	lea    0x1ae(%rsp),%rax
  227473:	00 
  227474:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  22747b:	00 
  22747c:	48 8d 05 85 b9 fd ff 	lea    -0x2467b(%rip),%rax        # 202e08 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x40>
  227483:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22748a:	00 
  22748b:	48 8b 84 24 98 01 00 	mov    0x198(%rsp),%rax
  227492:	00 
  227493:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  227498:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  22749f:	00 
  2274a0:	48 8b 8c 24 a0 01 00 	mov    0x1a0(%rsp),%rcx
  2274a7:	00 
  2274a8:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  2274af:	00 
  2274b0:	48 89 8c 24 c0 02 00 	mov    %rcx,0x2c0(%rsp)
  2274b7:	00 
  2274b8:	8a 00                	mov    (%rax),%al
  2274ba:	34 ff                	xor    $0xff,%al
  2274bc:	a8 01                	test   $0x1,%al
  2274be:	75 0f                	jne    2274cf <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x3ef>
        let mut cpu_cores: Vec<PerProcessorLAPIC> = Vec::new();
  2274c0:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  2274c7:	00 
  2274c8:	e8 13 ae fe ff       	callq  2122e0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdf791d5e5fd80031E>
  2274cd:	eb 39                	jmp    227508 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x428>
  2274cf:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  2274d6:	00 
  2274d7:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
        assert_eq!(lapic_root.header.length > 8, true);
  2274dc:	c6 84 24 af 01 00 00 	movb   $0x0,0x1af(%rsp)
  2274e3:	00 
  2274e4:	48 c7 84 24 b0 01 00 	movq   $0x0,0x1b0(%rsp)
  2274eb:	00 00 00 00 00 
  2274f0:	4c 8d 05 19 4d 01 00 	lea    0x14d19(%rip),%r8        # 23c210 <memcmp+0x34d0>
  2274f7:	31 ff                	xor    %edi,%edi
  2274f9:	48 8d 8c 24 b0 01 00 	lea    0x1b0(%rsp),%rcx
  227500:	00 
  227501:	e8 8a 92 ff ff       	callq  220790 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  227506:	0f 0b                	ud2    
        let table_end = madt_address.as_u64() + lapic_root.header.length as u64;
  227508:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22750f:	00 
  227510:	e8 ab 0d 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  227515:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22751a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22751f:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  227526:	00 
  227527:	8b 49 04             	mov    0x4(%rcx),%ecx
  22752a:	48 01 c8             	add    %rcx,%rax
  22752d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  227532:	0f 92 c0             	setb   %al
  227535:	a8 01                	test   $0x1,%al
  227537:	75 21                	jne    22755a <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x47a>
  227539:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22753e:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  227545:	00 
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  227546:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22754d:	00 
  22754e:	e8 6d 0d 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  227553:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  227558:	eb 1a                	jmp    227574 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x494>
        let table_end = madt_address.as_u64() + lapic_root.header.length as u64;
  22755a:	48 8d 3d af b8 fd ff 	lea    -0x24751(%rip),%rdi        # 202e10 <str.0>
  227561:	48 8d 15 c0 4c 01 00 	lea    0x14cc0(%rip),%rdx        # 23c228 <memcmp+0x34e8>
  227568:	be 1c 00 00 00       	mov    $0x1c,%esi
  22756d:	e8 7e e6 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  227572:	0f 0b                	ud2    
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  227574:	eb 00                	jmp    227576 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x496>
  227576:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22757b:	48 83 c0 2c          	add    $0x2c,%rax
  22757f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  227584:	0f 92 c0             	setb   %al
  227587:	a8 01                	test   $0x1,%al
  227589:	75 33                	jne    2275be <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x4de>
  22758b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  227590:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  227597:	00 
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  227598:	48 c7 84 24 00 02 00 	movq   $0x4,0x200(%rsp)
  22759f:	00 04 00 00 00 
  2275a4:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  2275ab:	00 
  2275ac:	48 8d 35 45 8d fd ff 	lea    -0x272bb(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2275b3:	e8 18 ba fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2275b8:	88 44 24 57          	mov    %al,0x57(%rsp)
  2275bc:	eb 1a                	jmp    2275d8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x4f8>
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  2275be:	48 8d 3d 4b b8 fd ff 	lea    -0x247b5(%rip),%rdi        # 202e10 <str.0>
  2275c5:	48 8d 15 74 4c 01 00 	lea    0x14c74(%rip),%rdx        # 23c240 <memcmp+0x3500>
  2275cc:	be 1c 00 00 00       	mov    $0x1c,%esi
  2275d1:	e8 1a e6 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2275d6:	0f 0b                	ud2    
  2275d8:	8a 44 24 57          	mov    0x57(%rsp),%al
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  2275dc:	a8 01                	test   $0x1,%al
  2275de:	75 0c                	jne    2275ec <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x50c>
  2275e0:	eb 00                	jmp    2275e2 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x502>
  2275e2:	c6 84 24 0f 02 00 00 	movb   $0x0,0x20f(%rsp)
  2275e9:	00 
  2275ea:	eb 5a                	jmp    227646 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x566>
  2275ec:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  2275f3:	00 
  2275f4:	48 8b 3d 4d 65 01 00 	mov    0x1654d(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2275fb:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  227602:	00 
  227603:	e8 e8 3b 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  227608:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  22760f:	00 
  227610:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  227617:	00 
  227618:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  22761f:	00 
  227620:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  227627:	00 
  227628:	48 8d b4 24 10 02 00 	lea    0x210(%rsp),%rsi
  22762f:	00 
  227630:	e8 9b b9 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227635:	88 44 24 56          	mov    %al,0x56(%rsp)
  227639:	8a 44 24 56          	mov    0x56(%rsp),%al
  22763d:	24 01                	and    $0x1,%al
  22763f:	88 84 24 0f 02 00 00 	mov    %al,0x20f(%rsp)
  227646:	f6 84 24 0f 02 00 00 	testb  $0x1,0x20f(%rsp)
  22764d:	01 
  22764e:	75 18                	jne    227668 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x588>
  227650:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
        while entries_start < table_end {
  227655:	48 39 84 24 f8 01 00 	cmp    %rax,0x1f8(%rsp)
  22765c:	00 
  22765d:	0f 82 f9 00 00 00    	jb     22775c <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x67c>
  227663:	e9 d8 00 00 00       	jmpq   227740 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x660>
  227668:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  22766d:	48 2b 84 24 f8 01 00 	sub    0x1f8(%rsp),%rax
  227674:	00 
  227675:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22767a:	0f 92 c0             	setb   %al
  22767d:	a8 01                	test   $0x1,%al
  22767f:	75 45                	jne    2276c6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x5e6>
  227681:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  227686:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  22768d:	00 
  22768e:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  227695:	00 
  227696:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  22769d:	00 
  22769e:	48 8b bc 24 58 02 00 	mov    0x258(%rsp),%rdi
  2276a5:	00 
  2276a6:	48 89 bc 24 d0 02 00 	mov    %rdi,0x2d0(%rsp)
  2276ad:	00 
  2276ae:	48 8b 35 e3 64 01 00 	mov    0x164e3(%rip),%rsi        # 23db98 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  2276b5:	e8 86 7f fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  2276ba:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2276bf:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2276c4:	eb 1a                	jmp    2276e0 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x600>
  2276c6:	48 8d 3d 73 b7 fd ff 	lea    -0x2488d(%rip),%rdi        # 202e40 <str.1>
  2276cd:	48 8d 15 94 4b 01 00 	lea    0x14b94(%rip),%rdx        # 23c268 <memcmp+0x3528>
  2276d4:	be 21 00 00 00       	mov    $0x21,%esi
  2276d9:	e8 12 e5 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2276de:	0f 0b                	ud2    
  2276e0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2276e5:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2276ea:	48 89 8c 24 48 02 00 	mov    %rcx,0x248(%rsp)
  2276f1:	00 
  2276f2:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2276f9:	00 
  2276fa:	48 8d 8c 24 48 02 00 	lea    0x248(%rsp),%rcx
  227701:	00 
  227702:	48 8d bc 24 18 02 00 	lea    0x218(%rsp),%rdi
  227709:	00 
  22770a:	48 8d 35 47 4b 01 00 	lea    0x14b47(%rip),%rsi        # 23c258 <memcmp+0x3518>
  227711:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  227717:	4c 89 c2             	mov    %r8,%rdx
  22771a:	e8 11 ee fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22771f:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
  227726:	00 
  227727:	48 8d bc 24 18 02 00 	lea    0x218(%rsp),%rdi
  22772e:	00 
  22772f:	48 8d 15 4a 4b 01 00 	lea    0x14b4a(%rip),%rdx        # 23c280 <memcmp+0x3540>
  227736:	e8 45 b6 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22773b:	e9 10 ff ff ff       	jmpq   227650 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x570>
  227740:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  227747:	00 
        let lapic_address = p_to_v(PhysicalAddress::from_u64(lapic_root.lapic_phy_addr as u64));
  227748:	8b 40 24             	mov    0x24(%rax),%eax
  22774b:	89 c7                	mov    %eax,%edi
  22774d:	e8 3e 0d 00 00       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  227752:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  227757:	e9 38 01 00 00       	jmpq   227894 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x7b4>
            let lapic_entry_addr = VirtualAddress::from_u64(entries_start);
  22775c:	48 8b bc 24 f8 01 00 	mov    0x1f8(%rsp),%rdi
  227763:	00 
  227764:	e8 67 0b 00 00       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  227769:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22776e:	48 89 84 24 d8 02 00 	mov    %rax,0x2d8(%rsp)
  227775:	00 
  227776:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            let lapic_entry: &LAPICEntry = unsafe { &*lapic_entry_addr.get_ptr() };
  22777b:	e8 60 1f ff ff       	callq  2196e0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8cc50a1d58229d14E>
  227780:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  227785:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22778a:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  227791:	00 
            if lapic_entry.entry_type == 0 {
  227792:	80 38 00             	cmpb   $0x0,(%rax)
  227795:	75 0f                	jne    2277a6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6c6>
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  227797:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  22779e:	00 
  22779f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2277a4:	eb 29                	jmp    2277cf <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6ef>
  2277a6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
            entries_start = entries_start + lapic_entry.entry_size as u64;
  2277ab:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  2277b2:	00 
  2277b3:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
  2277b7:	48 01 c8             	add    %rcx,%rax
  2277ba:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2277bf:	0f 92 c0             	setb   %al
  2277c2:	a8 01                	test   $0x1,%al
  2277c4:	0f 85 b0 00 00 00    	jne    22787a <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x79a>
  2277ca:	e9 99 00 00 00       	jmpq   227868 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x788>
  2277cf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  2277d4:	48 83 c0 02          	add    $0x2,%rax
  2277d8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2277dd:	0f 92 c0             	setb   %al
  2277e0:	a8 01                	test   $0x1,%al
  2277e2:	75 6a                	jne    22784e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x76e>
  2277e4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2277e9:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  2277f0:	00 
                let proc_entry: PerProcessorLAPIC = unsafe { *(body_addr as *const _) };
  2277f1:	66 8b 48 04          	mov    0x4(%rax),%cx
  2277f5:	66 89 8c 24 6c 02 00 	mov    %cx,0x26c(%rsp)
  2277fc:	00 
  2277fd:	8b 00                	mov    (%rax),%eax
  2277ff:	89 84 24 68 02 00 00 	mov    %eax,0x268(%rsp)
                cpu_cores.push(proc_entry);
  227806:	66 8b 84 24 6c 02 00 	mov    0x26c(%rsp),%ax
  22780d:	00 
  22780e:	66 89 84 24 74 02 00 	mov    %ax,0x274(%rsp)
  227815:	00 
  227816:	8b 84 24 68 02 00 00 	mov    0x268(%rsp),%eax
  22781d:	89 84 24 70 02 00 00 	mov    %eax,0x270(%rsp)
  227824:	8b 84 24 70 02 00 00 	mov    0x270(%rsp),%eax
  22782b:	89 c6                	mov    %eax,%esi
  22782d:	0f b7 84 24 74 02 00 	movzwl 0x274(%rsp),%eax
  227834:	00 
  227835:	48 c1 e0 20          	shl    $0x20,%rax
  227839:	48 09 c6             	or     %rax,%rsi
  22783c:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  227843:	00 
  227844:	e8 67 ad fe ff       	callq  2125b0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E>
  227849:	e9 58 ff ff ff       	jmpq   2277a6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6c6>
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  22784e:	48 8d 3d bb b5 fd ff 	lea    -0x24a45(%rip),%rdi        # 202e10 <str.0>
  227855:	48 8d 15 5c 4a 01 00 	lea    0x14a5c(%rip),%rdx        # 23c2b8 <memcmp+0x3578>
  22785c:	be 1c 00 00 00       	mov    $0x1c,%esi
  227861:	e8 8a e3 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  227866:	0f 0b                	ud2    
  227868:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            entries_start = entries_start + lapic_entry.entry_size as u64;
  22786d:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  227874:	00 
        while entries_start < table_end {
  227875:	e9 d6 fd ff ff       	jmpq   227650 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x570>
            entries_start = entries_start + lapic_entry.entry_size as u64;
  22787a:	48 8d 3d 8f b5 fd ff 	lea    -0x24a71(%rip),%rdi        # 202e10 <str.0>
  227881:	48 8d 15 48 4a 01 00 	lea    0x14a48(%rip),%rdx        # 23c2d0 <memcmp+0x3590>
  227888:	be 1c 00 00 00       	mov    $0x1c,%esi
  22788d:	e8 5e e3 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  227892:	0f 0b                	ud2    
  227894:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        let lapic_address = p_to_v(PhysicalAddress::from_u64(lapic_root.lapic_phy_addr as u64));
  227899:	e8 92 0c 00 00       	callq  228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  22789e:	48 89 04 24          	mov    %rax,(%rsp)
  2278a2:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  2278a9:	00 
  2278aa:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2278b1:	00 
  2278b2:	48 8b 0c 24          	mov    (%rsp),%rcx
            cores: cpu_cores,
  2278b6:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  2278bd:	00 
  2278be:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  2278c5:	00 
  2278c6:	48 8b 94 24 e8 01 00 	mov    0x1e8(%rsp),%rdx
  2278cd:	00 
  2278ce:	48 89 94 24 a0 02 00 	mov    %rdx,0x2a0(%rsp)
  2278d5:	00 
  2278d6:	48 8b 94 24 f0 01 00 	mov    0x1f0(%rsp),%rdx
  2278dd:	00 
  2278de:	48 89 94 24 a8 02 00 	mov    %rdx,0x2a8(%rsp)
  2278e5:	00 
        Ok(Processors {
  2278e6:	48 8b 94 24 98 02 00 	mov    0x298(%rsp),%rdx
  2278ed:	00 
  2278ee:	48 89 94 24 78 02 00 	mov    %rdx,0x278(%rsp)
  2278f5:	00 
  2278f6:	48 8b 94 24 a0 02 00 	mov    0x2a0(%rsp),%rdx
  2278fd:	00 
  2278fe:	48 89 94 24 80 02 00 	mov    %rdx,0x280(%rsp)
  227905:	00 
  227906:	48 8b 94 24 a8 02 00 	mov    0x2a8(%rsp),%rdx
  22790d:	00 
  22790e:	48 89 94 24 88 02 00 	mov    %rdx,0x288(%rsp)
  227915:	00 
  227916:	48 89 8c 24 90 02 00 	mov    %rcx,0x290(%rsp)
  22791d:	00 
  22791e:	48 8b 8c 24 78 02 00 	mov    0x278(%rsp),%rcx
  227925:	00 
  227926:	48 89 48 08          	mov    %rcx,0x8(%rax)
  22792a:	48 8b 8c 24 80 02 00 	mov    0x280(%rsp),%rcx
  227931:	00 
  227932:	48 89 48 10          	mov    %rcx,0x10(%rax)
  227936:	48 8b 8c 24 88 02 00 	mov    0x288(%rsp),%rcx
  22793d:	00 
  22793e:	48 89 48 18          	mov    %rcx,0x18(%rax)
  227942:	48 8b 8c 24 90 02 00 	mov    0x290(%rsp),%rcx
  227949:	00 
  22794a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  22794e:	c6 00 00             	movb   $0x0,(%rax)
    }
  227951:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  227958:	00 
  227959:	e8 02 46 fe ff       	callq  20bf60 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  22795e:	e9 c6 fa ff ff       	jmpq   227429 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x349>
  227963:	cc                   	int3   
  227964:	cc                   	int3   
  227965:	cc                   	int3   
  227966:	cc                   	int3   
  227967:	cc                   	int3   
  227968:	cc                   	int3   
  227969:	cc                   	int3   
  22796a:	cc                   	int3   
  22796b:	cc                   	int3   
  22796c:	cc                   	int3   
  22796d:	cc                   	int3   
  22796e:	cc                   	int3   
  22796f:	cc                   	int3   

0000000000227970 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E>:
pub fn probe_cpus() -> Processors {
  227970:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  227977:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22797c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let probe_res = MADT::probe_cpu_cores();
  227981:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  227986:	e8 55 f7 ff ff       	callq  2270e0 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E>
    if probe_res.is_err() {
  22798b:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  227990:	e8 ab 39 fe ff       	callq  20b340 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h82bd04722172da00E>
  227995:	88 44 24 17          	mov    %al,0x17(%rsp)
  227999:	8a 44 24 17          	mov    0x17(%rsp),%al
  22799d:	a8 01                	test   $0x1,%al
  22799f:	75 37                	jne    2279d8 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x68>
  2279a1:	eb 00                	jmp    2279a3 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x33>
    probe_res.unwrap()
  2279a3:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2279aa:	00 
  2279ab:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  2279b0:	ba 28 00 00 00       	mov    $0x28,%edx
  2279b5:	e8 36 13 01 00       	callq  238cf0 <memcpy>
  2279ba:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2279bf:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  2279c6:	00 
  2279c7:	48 8d 15 5a 49 01 00 	lea    0x1495a(%rip),%rdx        # 23c328 <memcmp+0x35e8>
  2279ce:	e8 6d 3a fe ff       	callq  20b440 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E>
  2279d3:	e9 b7 00 00 00       	jmpq   227a8f <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x11f>
        panic!("Failed to detect CPUs. {:?}", probe_res.unwrap_err());
  2279d8:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2279df:	00 
  2279e0:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  2279e5:	ba 28 00 00 00       	mov    $0x28,%edx
  2279ea:	e8 01 13 01 00       	callq  238cf0 <memcpy>
  2279ef:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2279f6:	00 
  2279f7:	48 8d 35 fa 48 01 00 	lea    0x148fa(%rip),%rsi        # 23c2f8 <memcmp+0x35b8>
  2279fe:	e8 4d 36 fe ff       	callq  20b050 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE>
  227a03:	24 01                	and    $0x1,%al
  227a05:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  227a0c:	48 8d 84 24 9f 00 00 	lea    0x9f(%rsp),%rax
  227a13:	00 
  227a14:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  227a1b:	00 
  227a1c:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  227a23:	00 
  227a24:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  227a2b:	00 
  227a2c:	48 8d 35 dd 06 00 00 	lea    0x6dd(%rip),%rsi        # 228110 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE>
  227a33:	e8 e8 74 fe ff       	callq  20ef20 <_ZN4core3fmt10ArgumentV13new17h2217d787161c4c39E>
  227a38:	48 89 04 24          	mov    %rax,(%rsp)
  227a3c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  227a41:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227a46:	48 8b 0c 24          	mov    (%rsp),%rcx
  227a4a:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  227a51:	00 
  227a52:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  227a59:	00 
  227a5a:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
  227a61:	00 
  227a62:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  227a67:	48 8d 35 7a 48 01 00 	lea    0x1487a(%rip),%rsi        # 23c2e8 <memcmp+0x35a8>
  227a6e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  227a74:	4c 89 c2             	mov    %r8,%rdx
  227a77:	e8 b4 ea fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  227a7c:	48 8d 35 8d 48 01 00 	lea    0x1488d(%rip),%rsi        # 23c310 <memcmp+0x35d0>
  227a83:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  227a88:	e8 33 e2 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  227a8d:	0f 0b                	ud2    
  227a8f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  227a94:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  227a9b:	c3                   	retq   
  227a9c:	cc                   	int3   
  227a9d:	cc                   	int3   
  227a9e:	cc                   	int3   
  227a9f:	cc                   	int3   

0000000000227aa0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E>:
}

pub fn setup_madt() {
  227aa0:	48 81 ec 28 02 00 00 	sub    $0x228,%rsp
    let proc_lock = PROCESSORS.lock();
  227aa7:	48 8d 3d 3c b4 fd ff 	lea    -0x24bc4(%rip),%rdi        # 202eea <_ZN9r3_kernel4acpi4madt10PROCESSORS17h735ab6db5847e5b6E>
  227aae:	e8 cd 06 00 00       	callq  228180 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0dc1ee704a09c03E>
  227ab3:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  227aba:	00 
  227abb:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  227ac2:	00 
  227ac3:	e8 b8 6d 00 00       	callq  22e880 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h31f10766e1811e6aE>
  227ac8:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  227acf:	00 
  227ad0:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  227ad7:	00 
    log::info!(
  227ad8:	48 c7 84 24 b8 00 00 	movq   $0x3,0xb8(%rsp)
  227adf:	00 03 00 00 00 
  227ae4:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  227aeb:	00 
  227aec:	48 8d 35 05 88 fd ff 	lea    -0x277fb(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  227af3:	e8 d8 b4 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227af8:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  227aff:	8a 84 24 9f 00 00 00 	mov    0x9f(%rsp),%al
  227b06:	a8 01                	test   $0x1,%al
  227b08:	75 0c                	jne    227b16 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x76>
  227b0a:	eb 00                	jmp    227b0c <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x6c>
  227b0c:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  227b13:	00 
  227b14:	eb 60                	jmp    227b76 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xd6>
  227b16:	c6 84 24 1f 02 00 00 	movb   $0x0,0x21f(%rsp)
  227b1d:	00 
  227b1e:	48 8b 3d 23 60 01 00 	mov    0x16023(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  227b25:	0f b6 b4 24 1f 02 00 	movzbl 0x21f(%rsp),%esi
  227b2c:	00 
  227b2d:	e8 be 36 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  227b32:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  227b39:	00 
  227b3a:	48 8b 84 24 20 02 00 	mov    0x220(%rsp),%rax
  227b41:	00 
  227b42:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  227b49:	00 
  227b4a:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  227b51:	00 
  227b52:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  227b59:	00 
  227b5a:	e8 71 b4 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227b5f:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  227b66:	8a 84 24 9e 00 00 00 	mov    0x9e(%rsp),%al
  227b6d:	24 01                	and    $0x1,%al
  227b6f:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  227b76:	f6 84 24 c7 00 00 00 	testb  $0x1,0xc7(%rsp)
  227b7d:	01 
  227b7e:	75 1a                	jne    227b9a <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xfa>
        "Number of CPU cores: {}, Local APIC Address: 0x{:x}",
        proc_lock.cores.len(),
        proc_lock.lapic_address.as_u64()
    );

    for proc in &proc_lock.cores {
  227b80:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  227b87:	00 
  227b88:	e8 b3 70 00 00       	callq  22ec40 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  227b8d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  227b94:	00 
  227b95:	e9 48 01 00 00       	jmpq   227ce2 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x242>
        proc_lock.cores.len(),
  227b9a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  227ba1:	00 
  227ba2:	e8 99 70 00 00       	callq  22ec40 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  227ba7:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  227bae:	00 
  227baf:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  227bb6:	00 
  227bb7:	e8 e4 a7 fe ff       	callq  2123a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h5323d9ea74175e6cE>
  227bbc:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  227bc3:	00 
        proc_lock.lapic_address.as_u64()
  227bc4:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  227bcb:	00 
  227bcc:	e8 6f 70 00 00       	callq  22ec40 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  227bd1:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  227bd8:	00 
  227bd9:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  227be0:	00 
  227be1:	48 83 c7 18          	add    $0x18,%rdi
  227be5:	e8 d6 06 00 00       	callq  2282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  227bea:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  227bf1:	00 
    log::info!(
  227bf2:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  227bf9:	00 
  227bfa:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  227c01:	00 
  227c02:	48 8d 84 24 38 01 00 	lea    0x138(%rsp),%rax
  227c09:	00 
  227c0a:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  227c11:	00 
  227c12:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  227c19:	00 
  227c1a:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  227c21:	00 
  227c22:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  227c29:	00 
  227c2a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  227c2f:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  227c36:	00 
  227c37:	48 8b 35 22 5f 01 00 	mov    0x15f22(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  227c3e:	e8 3d 79 fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  227c43:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  227c48:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  227c4d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  227c52:	48 8b 35 f7 5e 01 00 	mov    0x15ef7(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  227c59:	e8 e2 79 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  227c5e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  227c63:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  227c68:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  227c6d:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  227c72:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  227c77:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  227c7c:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  227c83:	00 
  227c84:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  227c8b:	00 
  227c8c:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  227c93:	00 
  227c94:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  227c9b:	00 
  227c9c:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  227ca3:	00 
  227ca4:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  227cab:	00 
  227cac:	48 8d 35 8d 46 01 00 	lea    0x1468d(%rip),%rsi        # 23c340 <memcmp+0x3600>
  227cb3:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  227cb9:	4c 89 c2             	mov    %r8,%rdx
  227cbc:	e8 6f e8 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  227cc1:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  227cc8:	00 
  227cc9:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  227cd0:	00 
  227cd1:	48 8d 15 88 46 01 00 	lea    0x14688(%rip),%rdx        # 23c360 <memcmp+0x3620>
  227cd8:	e8 a3 b0 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  227cdd:	e9 9e fe ff ff       	jmpq   227b80 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xe0>
  227ce2:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  227ce9:	00 
    for proc in &proc_lock.cores {
  227cea:	e8 01 ac fe ff       	callq  2128f0 <_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9f38b1c324b07e96E>
  227cef:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  227cf4:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  227cf9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  227cfe:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  227d03:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  227d0a:	00 
  227d0b:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  227d12:	00 
  227d13:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  227d1a:	00 
  227d1b:	e8 a0 32 ff ff       	callq  21afc0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>
  227d20:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  227d27:	00 
  227d28:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  227d2f:	00 
  227d30:	48 85 c0             	test   %rax,%rax
  227d33:	0f 95 c0             	setne  %al
  227d36:	0f b6 c0             	movzbl %al,%eax
  227d39:	74 06                	je     227d41 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x2a1>
  227d3b:	eb 00                	jmp    227d3d <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x29d>
  227d3d:	eb 14                	jmp    227d53 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x2b3>
  227d3f:	0f 0b                	ud2    
        log::info!("CPU-{} - {}", proc.id, proc.apic_id);
    }
}
  227d41:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  227d48:	00 
  227d49:	e8 32 45 fe ff       	callq  20c280 <_ZN4core3ptr85drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17ha6c6c78d0d7b5940E>
  227d4e:	e9 b1 01 00 00       	jmpq   227f04 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x464>
    for proc in &proc_lock.cores {
  227d53:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  227d5a:	00 
  227d5b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  227d60:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  227d67:	00 
  227d68:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  227d6f:	00 
  227d70:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  227d77:	00 
        log::info!("CPU-{} - {}", proc.id, proc.apic_id);
  227d78:	48 c7 84 24 58 01 00 	movq   $0x3,0x158(%rsp)
  227d7f:	00 03 00 00 00 
  227d84:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  227d8b:	00 
  227d8c:	48 8d 35 65 85 fd ff 	lea    -0x27a9b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  227d93:	e8 38 b2 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227d98:	88 44 24 47          	mov    %al,0x47(%rsp)
  227d9c:	8a 44 24 47          	mov    0x47(%rsp),%al
  227da0:	a8 01                	test   $0x1,%al
  227da2:	75 0c                	jne    227db0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x310>
  227da4:	eb 00                	jmp    227da6 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x306>
  227da6:	c6 84 24 67 01 00 00 	movb   $0x0,0x167(%rsp)
  227dad:	00 
  227dae:	eb 5a                	jmp    227e0a <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x36a>
  227db0:	c6 84 24 0f 02 00 00 	movb   $0x0,0x20f(%rsp)
  227db7:	00 
  227db8:	48 8b 3d 89 5d 01 00 	mov    0x15d89(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  227dbf:	0f b6 b4 24 0f 02 00 	movzbl 0x20f(%rsp),%esi
  227dc6:	00 
  227dc7:	e8 24 34 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  227dcc:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  227dd3:	00 
  227dd4:	48 8b 84 24 10 02 00 	mov    0x210(%rsp),%rax
  227ddb:	00 
  227ddc:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  227de3:	00 
  227de4:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  227deb:	00 
  227dec:	48 8d b4 24 68 01 00 	lea    0x168(%rsp),%rsi
  227df3:	00 
  227df4:	e8 d7 b1 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227df9:	88 44 24 37          	mov    %al,0x37(%rsp)
  227dfd:	8a 44 24 37          	mov    0x37(%rsp),%al
  227e01:	24 01                	and    $0x1,%al
  227e03:	88 84 24 67 01 00 00 	mov    %al,0x167(%rsp)
  227e0a:	f6 84 24 67 01 00 00 	testb  $0x1,0x167(%rsp)
  227e11:	01 
  227e12:	0f 84 fb fe ff ff    	je     227d13 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x273>
  227e18:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  227e1d:	48 89 c1             	mov    %rax,%rcx
  227e20:	48 83 c0 01          	add    $0x1,%rax
  227e24:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  227e2b:	00 
  227e2c:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  227e33:	00 
  227e34:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
  227e3b:	00 
  227e3c:	48 89 bc 24 f8 01 00 	mov    %rdi,0x1f8(%rsp)
  227e43:	00 
  227e44:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  227e4b:	00 
  227e4c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  227e51:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  227e58:	00 
  227e59:	48 8b 35 60 5d 01 00 	mov    0x15d60(%rip),%rsi        # 23dbc0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd8>
  227e60:	e8 9b 78 fe ff       	callq  20f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  227e65:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  227e6a:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  227e6f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  227e74:	48 8b 35 45 5d 01 00 	mov    0x15d45(%rip),%rsi        # 23dbc0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd8>
  227e7b:	e8 80 78 fe ff       	callq  20f700 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  227e80:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227e85:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  227e8a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  227e8f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  227e94:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  227e99:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  227e9e:	48 89 b4 24 a0 01 00 	mov    %rsi,0x1a0(%rsp)
  227ea5:	00 
  227ea6:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  227ead:	00 
  227eae:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  227eb5:	00 
  227eb6:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  227ebd:	00 
  227ebe:	48 8d 8c 24 a0 01 00 	lea    0x1a0(%rsp),%rcx
  227ec5:	00 
  227ec6:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  227ecd:	00 
  227ece:	48 8d 35 c3 44 01 00 	lea    0x144c3(%rip),%rsi        # 23c398 <memcmp+0x3658>
  227ed5:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  227edb:	4c 89 c2             	mov    %r8,%rdx
  227ede:	e8 4d e6 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  227ee3:	48 8b b4 24 58 01 00 	mov    0x158(%rsp),%rsi
  227eea:	00 
  227eeb:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  227ef2:	00 
  227ef3:	48 8d 15 be 44 01 00 	lea    0x144be(%rip),%rdx        # 23c3b8 <memcmp+0x3678>
  227efa:	e8 81 ae 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  227eff:	e9 0f fe ff ff       	jmpq   227d13 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x273>
}
  227f04:	48 81 c4 28 02 00 00 	add    $0x228,%rsp
  227f0b:	c3                   	retq   
  227f0c:	cc                   	int3   
  227f0d:	cc                   	int3   
  227f0e:	cc                   	int3   
  227f0f:	cc                   	int3   

0000000000227f10 <_ZN77_$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$u20$as$u20$core..fmt..Debug$GT$3fmt17hd4b2e02536c1f22aE>:
#[derive(Debug, Copy, Clone)]
  227f10:	48 83 ec 68          	sub    $0x68,%rsp
  227f14:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  227f19:	48 89 f8             	mov    %rdi,%rax
  227f1c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  227f21:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  227f26:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub id: u8,
  227f2b:	8a 08                	mov    (%rax),%cl
  227f2d:	88 4c 24 12          	mov    %cl,0x12(%rsp)
    pub apic_id: u8,
  227f31:	8a 48 01             	mov    0x1(%rax),%cl
  227f34:	88 4c 24 13          	mov    %cl,0x13(%rsp)
    flags: u32,
  227f38:	8b 40 02             	mov    0x2(%rax),%eax
  227f3b:	89 44 24 14          	mov    %eax,0x14(%rsp)
#[derive(Debug, Copy, Clone)]
  227f3f:	48 8d 35 62 af fd ff 	lea    -0x2509e(%rip),%rsi        # 202ea8 <str.1+0x68>
  227f46:	ba 11 00 00 00       	mov    $0x11,%edx
  227f4b:	e8 b0 ff 00 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  227f50:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  227f55:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  227f5a:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  227f5f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  227f64:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  227f69:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  227f6e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  227f73:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    pub id: u8,
  227f78:	48 8d 44 24 12       	lea    0x12(%rsp),%rax
  227f7d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  227f82:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  227f87:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  227f8c:	48 8d 35 26 af fd ff 	lea    -0x250da(%rip),%rsi        # 202eb9 <str.1+0x79>
  227f93:	ba 02 00 00 00       	mov    $0x2,%edx
  227f98:	4c 8d 05 51 44 01 00 	lea    0x14451(%rip),%r8        # 23c3f0 <memcmp+0x36b0>
  227f9f:	e8 ec d2 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
    pub apic_id: u8,
  227fa4:	48 8d 44 24 13       	lea    0x13(%rsp),%rax
  227fa9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  227fae:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  227fb3:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  227fb8:	48 8d 35 fc ae fd ff 	lea    -0x25104(%rip),%rsi        # 202ebb <str.1+0x7b>
  227fbf:	ba 07 00 00 00       	mov    $0x7,%edx
  227fc4:	4c 8d 05 25 44 01 00 	lea    0x14425(%rip),%r8        # 23c3f0 <memcmp+0x36b0>
  227fcb:	e8 c0 d2 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
    flags: u32,
  227fd0:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  227fd5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  227fda:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  227fdf:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  227fe4:	48 8d 35 d7 ae fd ff 	lea    -0x25129(%rip),%rsi        # 202ec2 <str.1+0x82>
  227feb:	ba 05 00 00 00       	mov    $0x5,%edx
  227ff0:	4c 8d 05 19 44 01 00 	lea    0x14419(%rip),%r8        # 23c410 <memcmp+0x36d0>
  227ff7:	e8 94 d2 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  227ffc:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  228001:	e8 4a d4 00 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  228006:	88 44 24 07          	mov    %al,0x7(%rsp)
  22800a:	8a 44 24 07          	mov    0x7(%rsp),%al
  22800e:	24 01                	and    $0x1,%al
  228010:	0f b6 c0             	movzbl %al,%eax
  228013:	48 83 c4 68          	add    $0x68,%rsp
  228017:	c3                   	retq   
  228018:	cc                   	int3   
  228019:	cc                   	int3   
  22801a:	cc                   	int3   
  22801b:	cc                   	int3   
  22801c:	cc                   	int3   
  22801d:	cc                   	int3   
  22801e:	cc                   	int3   
  22801f:	cc                   	int3   

0000000000228020 <_ZN70_$LT$r3_kernel..acpi..madt..Processors$u20$as$u20$core..fmt..Debug$GT$3fmt17h6e288c8cb15b570aE>:
#[derive(Debug)]
  228020:	48 83 ec 78          	sub    $0x78,%rsp
  228024:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  228029:	48 89 f8             	mov    %rdi,%rax
  22802c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  228031:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  228036:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub cores: Vec<PerProcessorLAPIC>,
  22803b:	48 89 c1             	mov    %rax,%rcx
  22803e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  228043:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    pub lapic_address: VirtualAddress,
  228048:	48 83 c0 18          	add    $0x18,%rax
  22804c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  228051:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug)]
  228056:	48 8d 35 6a ae fd ff 	lea    -0x25196(%rip),%rsi        # 202ec7 <str.1+0x87>
  22805d:	ba 0a 00 00 00       	mov    $0xa,%edx
  228062:	e8 99 fe 00 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  228067:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  22806c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  228071:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  228076:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22807b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  228080:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  228085:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22808a:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
  22808f:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub cores: Vec<PerProcessorLAPIC>,
  228094:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  228099:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug)]
  22809e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2280a3:	48 8d 35 27 ae fd ff 	lea    -0x251d9(%rip),%rsi        # 202ed1 <str.1+0x91>
  2280aa:	ba 05 00 00 00       	mov    $0x5,%edx
  2280af:	4c 8d 05 7a 43 01 00 	lea    0x1437a(%rip),%r8        # 23c430 <memcmp+0x36f0>
  2280b6:	e8 d5 d1 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2280bb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    pub lapic_address: VirtualAddress,
  2280c0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2280c5:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug)]
  2280ca:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2280cf:	48 8d 35 00 ae fd ff 	lea    -0x25200(%rip),%rsi        # 202ed6 <str.1+0x96>
  2280d6:	ba 0d 00 00 00       	mov    $0xd,%edx
  2280db:	4c 8d 05 6e 43 01 00 	lea    0x1436e(%rip),%r8        # 23c450 <memcmp+0x3710>
  2280e2:	e8 a9 d1 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2280e7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2280ec:	e8 5f d3 00 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  2280f1:	88 44 24 07          	mov    %al,0x7(%rsp)
  2280f5:	8a 44 24 07          	mov    0x7(%rsp),%al
  2280f9:	24 01                	and    $0x1,%al
  2280fb:	0f b6 c0             	movzbl %al,%eax
  2280fe:	48 83 c4 78          	add    $0x78,%rsp
  228102:	c3                   	retq   
  228103:	cc                   	int3   
  228104:	cc                   	int3   
  228105:	cc                   	int3   
  228106:	cc                   	int3   
  228107:	cc                   	int3   
  228108:	cc                   	int3   
  228109:	cc                   	int3   
  22810a:	cc                   	int3   
  22810b:	cc                   	int3   
  22810c:	cc                   	int3   
  22810d:	cc                   	int3   
  22810e:	cc                   	int3   
  22810f:	cc                   	int3   

0000000000228110 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE>:
#[derive(Debug)]
  228110:	48 83 ec 28          	sub    $0x28,%rsp
  228114:	48 89 34 24          	mov    %rsi,(%rsp)
  228118:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22811d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  228122:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228127:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22812c:	0f b6 00             	movzbl (%rax),%eax
  22812f:	a8 01                	test   $0x1,%al
  228131:	74 06                	je     228139 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x29>
  228133:	eb 00                	jmp    228135 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x25>
  228135:	eb 1f                	jmp    228156 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x46>
  228137:	0f 0b                	ud2    
  228139:	48 8b 3c 24          	mov    (%rsp),%rdi
  22813d:	48 8d 35 9f ad fd ff 	lea    -0x25261(%rip),%rsi        # 202ee3 <str.1+0xa3>
  228144:	ba 07 00 00 00       	mov    $0x7,%edx
  228149:	e8 62 fd 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22814e:	24 01                	and    $0x1,%al
  228150:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228154:	eb 1b                	jmp    228171 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x61>
  228156:	48 8b 3c 24          	mov    (%rsp),%rdi
  22815a:	48 8d 35 cf 85 fd ff 	lea    -0x27a31(%rip),%rsi        # 200730 <str.0+0x110>
  228161:	ba 10 00 00 00       	mov    $0x10,%edx
  228166:	e8 45 fd 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22816b:	24 01                	and    $0x1,%al
  22816d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228171:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228175:	24 01                	and    $0x1,%al
  228177:	0f b6 c0             	movzbl %al,%eax
  22817a:	48 83 c4 28          	add    $0x28,%rsp
  22817e:	c3                   	retq   
  22817f:	cc                   	int3   

0000000000228180 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0dc1ee704a09c03E>:
            fn deref(&self) -> &$T {
  228180:	48 83 ec 18          	sub    $0x18,%rsp
  228184:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228189:	48 8d 05 b8 c6 01 00 	lea    0x1c6b8(%rip),%rax        # 244848 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8f6f3d0950d740c4E>
  228190:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  228195:	48 8d 3d ac c6 01 00 	lea    0x1c6ac(%rip),%rdi        # 244848 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8f6f3d0950d740c4E>
  22819c:	e8 8f 0f fe ff       	callq  209130 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E>
  2281a1:	48 89 04 24          	mov    %rax,(%rsp)
  2281a5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  2281a9:	48 83 c4 18          	add    $0x18,%rsp
  2281ad:	c3                   	retq   
  2281ae:	cc                   	int3   
  2281af:	cc                   	int3   

00000000002281b0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>:
    pub fn align_down(addr: u64, size: u64) -> u64 {
  2281b0:	48 83 ec 28          	sub    $0x28,%rsp
  2281b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2281b9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2281be:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        addr & !(size - 1)
  2281c3:	48 83 ee 01          	sub    $0x1,%rsi
  2281c7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2281cc:	0f 92 c0             	setb   %al
  2281cf:	a8 01                	test   $0x1,%al
  2281d1:	75 16                	jne    2281e9 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E+0x39>
  2281d3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2281d8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2281dd:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  2281e1:	48 21 c8             	and    %rcx,%rax
    }
  2281e4:	48 83 c4 28          	add    $0x28,%rsp
  2281e8:	c3                   	retq   
        addr & !(size - 1)
  2281e9:	48 8d 3d 20 ad fd ff 	lea    -0x252e0(%rip),%rdi        # 202f10 <str.0>
  2281f0:	48 8d 15 79 42 01 00 	lea    0x14279(%rip),%rdx        # 23c470 <memcmp+0x3730>
  2281f7:	be 21 00 00 00       	mov    $0x21,%esi
  2281fc:	e8 ef d9 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  228201:	0f 0b                	ud2    
  228203:	cc                   	int3   
  228204:	cc                   	int3   
  228205:	cc                   	int3   
  228206:	cc                   	int3   
  228207:	cc                   	int3   
  228208:	cc                   	int3   
  228209:	cc                   	int3   
  22820a:	cc                   	int3   
  22820b:	cc                   	int3   
  22820c:	cc                   	int3   
  22820d:	cc                   	int3   
  22820e:	cc                   	int3   
  22820f:	cc                   	int3   

0000000000228210 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>:
    pub fn align_up(addr: u64, size: u64) -> u64 {
  228210:	48 83 ec 38          	sub    $0x38,%rsp
  228214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228219:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22821e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let mask = size - 1;
  228223:	48 83 ee 01          	sub    $0x1,%rsi
  228227:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22822c:	0f 92 c0             	setb   %al
  22822f:	a8 01                	test   $0x1,%al
  228231:	75 1a                	jne    22824d <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x3d>
  228233:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  228238:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22823d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        if addr & mask == 0 {
  228242:	48 21 c8             	and    %rcx,%rax
  228245:	48 83 f8 00          	cmp    $0x0,%rax
  228249:	74 1c                	je     228267 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x57>
  22824b:	eb 26                	jmp    228273 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x63>
        let mask = size - 1;
  22824d:	48 8d 3d bc ac fd ff 	lea    -0x25344(%rip),%rdi        # 202f10 <str.0>
  228254:	48 8d 15 2d 42 01 00 	lea    0x1422d(%rip),%rdx        # 23c488 <memcmp+0x3748>
  22825b:	be 21 00 00 00       	mov    $0x21,%esi
  228260:	e8 8b d9 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  228265:	0f 0b                	ud2    
  228267:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            addr
  22826c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        if addr & mask == 0 {
  228271:	eb 41                	jmp    2282b4 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0xa4>
  228273:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  228278:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            (addr | mask) + 1
  22827d:	48 09 c8             	or     %rcx,%rax
  228280:	48 83 c0 01          	add    $0x1,%rax
  228284:	48 89 04 24          	mov    %rax,(%rsp)
  228288:	0f 92 c0             	setb   %al
  22828b:	a8 01                	test   $0x1,%al
  22828d:	75 0b                	jne    22829a <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x8a>
  22828f:	48 8b 04 24          	mov    (%rsp),%rax
  228293:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        if addr & mask == 0 {
  228298:	eb 1a                	jmp    2282b4 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0xa4>
            (addr | mask) + 1
  22829a:	48 8d 3d 9f ac fd ff 	lea    -0x25361(%rip),%rdi        # 202f40 <str.1>
  2282a1:	48 8d 15 f8 41 01 00 	lea    0x141f8(%rip),%rdx        # 23c4a0 <memcmp+0x3760>
  2282a8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2282ad:	e8 3e d9 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2282b2:	0f 0b                	ud2    
    }
  2282b4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2282b9:	48 83 c4 38          	add    $0x38,%rsp
  2282bd:	c3                   	retq   
  2282be:	cc                   	int3   
  2282bf:	cc                   	int3   

00000000002282c0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>:
    pub fn as_u64(&self) -> u64 {
  2282c0:	50                   	push   %rax
  2282c1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  2282c5:	48 8b 07             	mov    (%rdi),%rax
    }
  2282c8:	59                   	pop    %rcx
  2282c9:	c3                   	retq   
  2282ca:	cc                   	int3   
  2282cb:	cc                   	int3   
  2282cc:	cc                   	int3   
  2282cd:	cc                   	int3   
  2282ce:	cc                   	int3   
  2282cf:	cc                   	int3   

00000000002282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>:
    pub fn from_u64(addr: u64) -> Self {
  2282d0:	48 83 ec 10          	sub    $0x10,%rsp
  2282d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        VirtualAddress(addr)
  2282d9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  2282dd:	48 8b 04 24          	mov    (%rsp),%rax
  2282e1:	48 83 c4 10          	add    $0x10,%rsp
  2282e5:	c3                   	retq   
  2282e6:	cc                   	int3   
  2282e7:	cc                   	int3   
  2282e8:	cc                   	int3   
  2282e9:	cc                   	int3   
  2282ea:	cc                   	int3   
  2282eb:	cc                   	int3   
  2282ec:	cc                   	int3   
  2282ed:	cc                   	int3   
  2282ee:	cc                   	int3   
  2282ef:	cc                   	int3   

00000000002282f0 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17hf7ff72a768299b95E>:
    pub fn new_align_down(&self, size: u64) -> VirtualAddress {
  2282f0:	48 83 ec 28          	sub    $0x28,%rsp
  2282f4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2282f9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        VirtualAddress::from_u64(Alignment::align_down(self.0, size))
  2282fe:	48 8b 3f             	mov    (%rdi),%rdi
  228301:	e8 aa fe ff ff       	callq  2281b0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  228306:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22830b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  228310:	e8 bb ff ff ff       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  228315:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22831a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22831f:	48 83 c4 28          	add    $0x28,%rsp
  228323:	c3                   	retq   
  228324:	cc                   	int3   
  228325:	cc                   	int3   
  228326:	cc                   	int3   
  228327:	cc                   	int3   
  228328:	cc                   	int3   
  228329:	cc                   	int3   
  22832a:	cc                   	int3   
  22832b:	cc                   	int3   
  22832c:	cc                   	int3   
  22832d:	cc                   	int3   
  22832e:	cc                   	int3   
  22832f:	cc                   	int3   

0000000000228330 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>:
    pub fn get_level_index(&self, level: PageTableLevel) -> paging::PageTableIndex {
  228330:	48 83 ec 78          	sub    $0x78,%rsp
  228334:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  228339:	40 88 f0             	mov    %sil,%al
  22833c:	88 44 24 6d          	mov    %al,0x6d(%rsp)
  228340:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
        match level {
  228345:	0f b6 44 24 6d       	movzbl 0x6d(%rsp),%eax
  22834a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22834f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  228354:	48 8d 0d 91 ab fd ff 	lea    -0x2546f(%rip),%rcx        # 202eec <_ZN9r3_kernel4acpi4madt10PROCESSORS17h735ab6db5847e5b6E+0x2>
  22835b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22835f:	48 01 c8             	add    %rcx,%rax
  228362:	ff e0                	jmpq   *%rax
  228364:	0f 0b                	ud2    
  228366:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  22836b:	48 8b 00             	mov    (%rax),%rax
  22836e:	48 c1 e8 0c          	shr    $0xc,%rax
  228372:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  228377:	e9 a5 00 00 00       	jmpq   228421 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0xf1>
  22837c:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  228381:	48 8b 00             	mov    (%rax),%rax
  228384:	48 c1 e8 0c          	shr    $0xc,%rax
  228388:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22838d:	eb 62                	jmp    2283f1 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0xc1>
  22838f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  228394:	48 8b 00             	mov    (%rax),%rax
  228397:	48 c1 e8 0c          	shr    $0xc,%rax
  22839b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2283a0:	eb 2d                	jmp    2283cf <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x9f>
  2283a2:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12) as u16);
  2283a7:	48 8b 00             	mov    (%rax),%rax
  2283aa:	48 c1 e8 0c          	shr    $0xc,%rax
  2283ae:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2283b3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2283b8:	0f b7 f8             	movzwl %ax,%edi
  2283bb:	e8 f0 43 fe ff       	callq  20c7b0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  2283c0:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
    }
  2283c5:	66 8b 44 24 6e       	mov    0x6e(%rsp),%ax
  2283ca:	48 83 c4 78          	add    $0x78,%rsp
  2283ce:	c3                   	retq   
  2283cf:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  2283d4:	48 c1 e8 09          	shr    $0x9,%rax
  2283d8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2283dd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2283e2:	0f b7 f8             	movzwl %ax,%edi
  2283e5:	e8 c6 43 fe ff       	callq  20c7b0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  2283ea:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  2283ef:	eb d4                	jmp    2283c5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  2283f1:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  2283f6:	48 c1 e8 09          	shr    $0x9,%rax
  2283fa:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2283ff:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  228404:	48 c1 e8 09          	shr    $0x9,%rax
  228408:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22840d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  228412:	0f b7 f8             	movzwl %ax,%edi
  228415:	e8 96 43 fe ff       	callq  20c7b0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  22841a:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  22841f:	eb a4                	jmp    2283c5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  228421:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  228426:	48 c1 e8 09          	shr    $0x9,%rax
  22842a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22842f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  228434:	48 c1 e8 09          	shr    $0x9,%rax
  228438:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22843d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  228442:	48 c1 e8 09          	shr    $0x9,%rax
  228446:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22844b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  228450:	0f b7 f8             	movzwl %ax,%edi
  228453:	e8 58 43 fe ff       	callq  20c7b0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  228458:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  22845d:	e9 63 ff ff ff       	jmpq   2283c5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  228462:	cc                   	int3   
  228463:	cc                   	int3   
  228464:	cc                   	int3   
  228465:	cc                   	int3   
  228466:	cc                   	int3   
  228467:	cc                   	int3   
  228468:	cc                   	int3   
  228469:	cc                   	int3   
  22846a:	cc                   	int3   
  22846b:	cc                   	int3   
  22846c:	cc                   	int3   
  22846d:	cc                   	int3   
  22846e:	cc                   	int3   
  22846f:	cc                   	int3   

0000000000228470 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17ha2e641ae4c72d812E>:
    pub fn get_page_offset(&self) -> u16 {
  228470:	50                   	push   %rax
  228471:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as u16 % (1 << 12)
  228475:	48 8b 07             	mov    (%rdi),%rax
  228478:	66 25 ff 0f          	and    $0xfff,%ax
    }
  22847c:	59                   	pop    %rcx
  22847d:	c3                   	retq   
  22847e:	cc                   	int3   
  22847f:	cc                   	int3   

0000000000228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>:
}

impl PhysicalAddress {
    #[inline]
    pub fn as_u64(&self) -> u64 {
  228480:	50                   	push   %rax
  228481:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  228485:	48 8b 07             	mov    (%rdi),%rax
    }
  228488:	59                   	pop    %rcx
  228489:	c3                   	retq   
  22848a:	cc                   	int3   
  22848b:	cc                   	int3   
  22848c:	cc                   	int3   
  22848d:	cc                   	int3   
  22848e:	cc                   	int3   
  22848f:	cc                   	int3   

0000000000228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>:

    #[inline]
    pub fn from_u64(addr: u64) -> Self {
  228490:	48 83 ec 10          	sub    $0x10,%rsp
  228494:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        PhysicalAddress(addr)
  228499:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22849d:	48 8b 04 24          	mov    (%rsp),%rax
  2284a1:	48 83 c4 10          	add    $0x10,%rsp
  2284a5:	c3                   	retq   
  2284a6:	cc                   	int3   
  2284a7:	cc                   	int3   
  2284a8:	cc                   	int3   
  2284a9:	cc                   	int3   
  2284aa:	cc                   	int3   
  2284ab:	cc                   	int3   
  2284ac:	cc                   	int3   
  2284ad:	cc                   	int3   
  2284ae:	cc                   	int3   
  2284af:	cc                   	int3   

00000000002284b0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>:

    #[inline]
    pub fn is_aligned_at(&self, size: u64) -> bool {
  2284b0:	48 83 ec 28          	sub    $0x28,%rsp
  2284b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2284b9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.0 == Alignment::align_down(self.0, size)
  2284be:	48 8b 07             	mov    (%rdi),%rax
  2284c1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2284c6:	48 8b 3f             	mov    (%rdi),%rdi
  2284c9:	e8 e2 fc ff ff       	callq  2281b0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  2284ce:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2284d3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2284d8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2284dd:	48 39 c8             	cmp    %rcx,%rax
  2284e0:	0f 94 c0             	sete   %al
    }
  2284e3:	24 01                	and    $0x1,%al
  2284e5:	0f b6 c0             	movzbl %al,%eax
  2284e8:	48 83 c4 28          	add    $0x28,%rsp
  2284ec:	c3                   	retq   
  2284ed:	cc                   	int3   
  2284ee:	cc                   	int3   
  2284ef:	cc                   	int3   

00000000002284f0 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h6792f5d42c0b6e10E>:
    pub fn align_up(&mut self, size: u64) {
        self.0 = Alignment::align_up(self.0, size);
    }

    #[inline]
    pub fn new_align_down(&self, size: u64) -> Self {
  2284f0:	48 83 ec 28          	sub    $0x28,%rsp
  2284f4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2284f9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PhysicalAddress::from_u64(Alignment::align_down(self.0, size))
  2284fe:	48 8b 3f             	mov    (%rdi),%rdi
  228501:	e8 aa fc ff ff       	callq  2281b0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  228506:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22850b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  228510:	e8 7b ff ff ff       	callq  228490 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  228515:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22851a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22851f:	48 83 c4 28          	add    $0x28,%rsp
  228523:	c3                   	retq   
  228524:	cc                   	int3   
  228525:	cc                   	int3   
  228526:	cc                   	int3   
  228527:	cc                   	int3   
  228528:	cc                   	int3   
  228529:	cc                   	int3   
  22852a:	cc                   	int3   
  22852b:	cc                   	int3   
  22852c:	cc                   	int3   
  22852d:	cc                   	int3   
  22852e:	cc                   	int3   
  22852f:	cc                   	int3   

0000000000228530 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>:
    pub fn new_align_up(&self, size: u64) -> Self {
        PhysicalAddress::from_u64(Alignment::align_up(self.0, size))
    }
}

pub fn p_to_v(addr: PhysicalAddress) -> VirtualAddress {
  228530:	48 83 ec 48          	sub    $0x48,%rsp
  228534:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    let phy_offset = BootProtocol::get_phy_offset();
  228539:	e8 92 16 ff ff       	callq  219bd0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  22853e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  228543:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    if phy_offset.is_none() {
  228548:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22854d:	e8 8e 93 fe ff       	callq  2118e0 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  228552:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228556:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  22855a:	a8 01                	test   $0x1,%al
  22855c:	75 13                	jne    228571 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x41>
  22855e:	eb 00                	jmp    228560 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x30>
        panic!("Unable to convert physical address to virtual address.");
    }

    return VirtualAddress::from_u64(addr.as_u64() + phy_offset.unwrap());
  228560:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  228565:	e8 16 ff ff ff       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  22856a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22856f:	eb 1a                	jmp    22858b <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x5b>
        panic!("Unable to convert physical address to virtual address.");
  228571:	48 8d 3d e4 a9 fd ff 	lea    -0x2561c(%rip),%rdi        # 202f5c <str.1+0x1c>
  228578:	48 8d 15 39 3f 01 00 	lea    0x13f39(%rip),%rdx        # 23c4b8 <memcmp+0x3778>
  22857f:	be 36 00 00 00       	mov    $0x36,%esi
  228584:	e8 67 d6 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  228589:	0f 0b                	ud2    
    return VirtualAddress::from_u64(addr.as_u64() + phy_offset.unwrap());
  22858b:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  228590:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  228595:	48 8d 15 34 3f 01 00 	lea    0x13f34(%rip),%rdx        # 23c4d0 <memcmp+0x3790>
  22859c:	e8 2f 8e fe ff       	callq  2113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  2285a1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2285a6:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2285ab:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2285b0:	48 01 c8             	add    %rcx,%rax
  2285b3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2285b8:	0f 92 c0             	setb   %al
  2285bb:	a8 01                	test   $0x1,%al
  2285bd:	75 11                	jne    2285d0 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0xa0>
  2285bf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2285c4:	e8 07 fd ff ff       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  2285c9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2285ce:	eb 1a                	jmp    2285ea <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0xba>
  2285d0:	48 8d 3d 69 a9 fd ff 	lea    -0x25697(%rip),%rdi        # 202f40 <str.1>
  2285d7:	48 8d 15 0a 3f 01 00 	lea    0x13f0a(%rip),%rdx        # 23c4e8 <memcmp+0x37a8>
  2285de:	be 1c 00 00 00       	mov    $0x1c,%esi
  2285e3:	e8 08 d6 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2285e8:	0f 0b                	ud2    
  2285ea:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2285ef:	48 83 c4 48          	add    $0x48,%rsp
  2285f3:	c3                   	retq   
  2285f4:	cc                   	int3   
  2285f5:	cc                   	int3   
  2285f6:	cc                   	int3   
  2285f7:	cc                   	int3   
  2285f8:	cc                   	int3   
  2285f9:	cc                   	int3   
  2285fa:	cc                   	int3   
  2285fb:	cc                   	int3   
  2285fc:	cc                   	int3   
  2285fd:	cc                   	int3   
  2285fe:	cc                   	int3   
  2285ff:	cc                   	int3   

0000000000228600 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE>:

pub fn init() {
  228600:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    log::info!("Enabling frame allocator...");
  228607:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  22860e:	00 00 
  228610:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  228615:	48 8d 35 dc 7c fd ff 	lea    -0x28324(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22861c:	e8 af a9 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228621:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228625:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228629:	a8 01                	test   $0x1,%al
  22862b:	75 09                	jne    228636 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x36>
  22862d:	eb 00                	jmp    22862f <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x2f>
  22862f:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  228634:	eb 4e                	jmp    228684 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x84>
  228636:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22863d:	00 
  22863e:	48 8b 3d 03 55 01 00 	mov    0x15503(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  228645:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  22864c:	00 
  22864d:	e8 9e 2b 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  228652:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  228659:	00 
  22865a:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  228661:	00 
  228662:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  228667:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  22866c:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  228671:	e8 5a a9 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228676:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22867a:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22867e:	24 01                	and    $0x1,%al
  228680:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  228684:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  228689:	75 07                	jne    228692 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x92>
    phy::setup_physical_memory();
  22868b:	e8 d0 08 ff ff       	callq  218f60 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE>
  228690:	eb 3a                	jmp    2286cc <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xcc>
    log::info!("Enabling frame allocator...");
  228692:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  228697:	48 8d 35 62 3e 01 00 	lea    0x13e62(%rip),%rsi        # 23c500 <memcmp+0x37c0>
  22869e:	ba 01 00 00 00       	mov    $0x1,%edx
  2286a3:	48 8d 0d 06 a9 fd ff 	lea    -0x256fa(%rip),%rcx        # 202fb0 <str.1+0x70>
  2286aa:	31 c0                	xor    %eax,%eax
  2286ac:	41 89 c0             	mov    %eax,%r8d
  2286af:	e8 7c de fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2286b4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2286b9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2286be:	48 8d 15 4b 3e 01 00 	lea    0x13e4b(%rip),%rdx        # 23c510 <memcmp+0x37d0>
  2286c5:	e8 b6 a6 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2286ca:	eb bf                	jmp    22868b <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x8b>
    log::info!("Enabling kernel paging...");
  2286cc:	48 c7 44 24 58 03 00 	movq   $0x3,0x58(%rsp)
  2286d3:	00 00 
  2286d5:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2286da:	48 8d 35 17 7c fd ff 	lea    -0x283e9(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2286e1:	e8 ea a8 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2286e6:	88 44 24 0d          	mov    %al,0xd(%rsp)
  2286ea:	8a 44 24 0d          	mov    0xd(%rsp),%al
  2286ee:	a8 01                	test   $0x1,%al
  2286f0:	75 09                	jne    2286fb <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xfb>
  2286f2:	eb 00                	jmp    2286f4 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xf4>
  2286f4:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  2286f9:	eb 4e                	jmp    228749 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x149>
  2286fb:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  228702:	00 
  228703:	48 8b 3d 3e 54 01 00 	mov    0x1543e(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22870a:	0f b6 b4 24 ff 00 00 	movzbl 0xff(%rsp),%esi
  228711:	00 
  228712:	e8 d9 2a 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  228717:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  22871e:	00 
  22871f:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  228726:	00 
  228727:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22872c:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  228731:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  228736:	e8 95 a8 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22873b:	88 44 24 0c          	mov    %al,0xc(%rsp)
  22873f:	8a 44 24 0c          	mov    0xc(%rsp),%al
  228743:	24 01                	and    $0x1,%al
  228745:	88 44 24 67          	mov    %al,0x67(%rsp)
  228749:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  22874e:	75 07                	jne    228757 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x157>
    paging::setup_paging();
  228750:	e8 cb 59 fe ff       	callq  20e120 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE>
  228755:	eb 3a                	jmp    228791 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x191>
    log::info!("Enabling kernel paging...");
  228757:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22875c:	48 8d 35 e5 3d 01 00 	lea    0x13de5(%rip),%rsi        # 23c548 <memcmp+0x3808>
  228763:	ba 01 00 00 00       	mov    $0x1,%edx
  228768:	48 8d 0d 41 a8 fd ff 	lea    -0x257bf(%rip),%rcx        # 202fb0 <str.1+0x70>
  22876f:	31 c0                	xor    %eax,%eax
  228771:	41 89 c0             	mov    %eax,%r8d
  228774:	e8 b7 dd fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  228779:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  22877e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  228783:	48 8d 15 ce 3d 01 00 	lea    0x13dce(%rip),%rdx        # 23c558 <memcmp+0x3818>
  22878a:	e8 f1 a5 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22878f:	eb bf                	jmp    228750 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x150>

    run_initial_paging_test();
  228791:	e8 fa 00 00 00       	callq  228890 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E>
    // init kenel heap
    log::info!("Enabling kernel heap...");
  228796:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  22879d:	00 03 00 00 00 
  2287a2:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2287a9:	00 
  2287aa:	48 8d 35 47 7b fd ff 	lea    -0x284b9(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2287b1:	e8 1a a8 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2287b6:	88 44 24 0b          	mov    %al,0xb(%rsp)
  2287ba:	8a 44 24 0b          	mov    0xb(%rsp),%al
  2287be:	a8 01                	test   $0x1,%al
  2287c0:	75 0c                	jne    2287ce <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x1ce>
  2287c2:	eb 00                	jmp    2287c4 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x1c4>
  2287c4:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2287cb:	00 
  2287cc:	eb 5a                	jmp    228828 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x228>
  2287ce:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  2287d5:	00 
  2287d6:	48 8b 3d 6b 53 01 00 	mov    0x1536b(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2287dd:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  2287e4:	00 
  2287e5:	e8 06 2a 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2287ea:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2287f1:	00 
  2287f2:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  2287f9:	00 
  2287fa:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  228801:	00 
  228802:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  228809:	00 
  22880a:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  228811:	00 
  228812:	e8 b9 a7 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228817:	88 44 24 0a          	mov    %al,0xa(%rsp)
  22881b:	8a 44 24 0a          	mov    0xa(%rsp),%al
  22881f:	24 01                	and    $0x1,%al
  228821:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  228828:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  22882f:	01 
  228830:	75 07                	jne    228839 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x239>
    heap::init_heap();
  228832:	e8 29 41 00 00       	callq  22c960 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE>
  228837:	eb 43                	jmp    22887c <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x27c>
    log::info!("Enabling kernel heap...");
  228839:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  228840:	00 
  228841:	48 8d 35 48 3d 01 00 	lea    0x13d48(%rip),%rsi        # 23c590 <memcmp+0x3850>
  228848:	ba 01 00 00 00       	mov    $0x1,%edx
  22884d:	48 8d 0d 5c a7 fd ff 	lea    -0x258a4(%rip),%rcx        # 202fb0 <str.1+0x70>
  228854:	31 c0                	xor    %eax,%eax
  228856:	41 89 c0             	mov    %eax,%r8d
  228859:	e8 d2 dc fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22885e:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  228865:	00 
  228866:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  22886d:	00 
  22886e:	48 8d 15 2b 3d 01 00 	lea    0x13d2b(%rip),%rdx        # 23c5a0 <memcmp+0x3860>
  228875:	e8 06 a5 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22887a:	eb b6                	jmp    228832 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x232>

    stack::setup_stack_allocator();
  22887c:	e8 2f 8e ff ff       	callq  2216b0 <_ZN9r3_kernel2mm5stack21setup_stack_allocator17h80492fb935add6f6E>
}
  228881:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  228888:	c3                   	retq   
  228889:	cc                   	int3   
  22888a:	cc                   	int3   
  22888b:	cc                   	int3   
  22888c:	cc                   	int3   
  22888d:	cc                   	int3   
  22888e:	cc                   	int3   
  22888f:	cc                   	int3   

0000000000228890 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E>:

#[inline]
pub fn run_initial_paging_test() {
  228890:	48 81 ec 18 03 00 00 	sub    $0x318,%rsp
    log::info!("Running simple paging test....");
  228897:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  22889e:	00 03 00 00 00 
  2288a3:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  2288aa:	00 
  2288ab:	48 8d 35 46 7a fd ff 	lea    -0x285ba(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2288b2:	e8 19 a7 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2288b7:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  2288be:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  2288c5:	a8 01                	test   $0x1,%al
  2288c7:	75 0c                	jne    2288d5 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x45>
  2288c9:	eb 00                	jmp    2288cb <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x3b>
  2288cb:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  2288d2:	00 
  2288d3:	eb 60                	jmp    228935 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xa5>
  2288d5:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  2288dc:	00 
  2288dd:	48 8b 3d 64 52 01 00 	mov    0x15264(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2288e4:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  2288eb:	00 
  2288ec:	e8 ff 28 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2288f1:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  2288f8:	00 
  2288f9:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  228900:	00 
  228901:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  228908:	00 
  228909:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  228910:	00 
  228911:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  228918:	00 
  228919:	e8 b2 a6 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22891e:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  228925:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  22892c:	24 01                	and    $0x1,%al
  22892e:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  228935:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  22893c:	01 
  22893d:	75 35                	jne    228974 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xe4>

    // some dummy value:
    let expected_value: u64 = 0x34445544;
  22893f:	48 c7 84 24 f8 00 00 	movq   $0x34445544,0xf8(%rsp)
  228946:	00 44 55 44 34 

    log::debug!(
  22894b:	48 c7 84 24 00 01 00 	movq   $0x4,0x100(%rsp)
  228952:	00 04 00 00 00 
  228957:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  22895e:	00 
  22895f:	48 8d 35 92 79 fd ff 	lea    -0x2866e(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  228966:	e8 65 a6 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22896b:	88 84 24 ad 00 00 00 	mov    %al,0xad(%rsp)
  228972:	eb 43                	jmp    2289b7 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x127>
    log::info!("Running simple paging test....");
  228974:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  22897b:	00 
  22897c:	48 8d 35 55 3c 01 00 	lea    0x13c55(%rip),%rsi        # 23c5d8 <memcmp+0x3898>
  228983:	ba 01 00 00 00       	mov    $0x1,%edx
  228988:	48 8d 0d 21 a6 fd ff 	lea    -0x259df(%rip),%rcx        # 202fb0 <str.1+0x70>
  22898f:	31 c0                	xor    %eax,%eax
  228991:	41 89 c0             	mov    %eax,%r8d
  228994:	e8 97 db fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  228999:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  2289a0:	00 
  2289a1:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2289a8:	00 
  2289a9:	48 8d 15 38 3c 01 00 	lea    0x13c38(%rip),%rdx        # 23c5e8 <memcmp+0x38a8>
  2289b0:	e8 cb a3 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2289b5:	eb 88                	jmp    22893f <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xaf>
  2289b7:	8a 84 24 ad 00 00 00 	mov    0xad(%rsp),%al
    log::debug!(
  2289be:	a8 01                	test   $0x1,%al
  2289c0:	75 0c                	jne    2289ce <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x13e>
  2289c2:	eb 00                	jmp    2289c4 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x134>
  2289c4:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  2289cb:	00 
  2289cc:	eb 60                	jmp    228a2e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x19e>
  2289ce:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  2289d5:	00 
  2289d6:	48 8b 3d 6b 51 01 00 	mov    0x1516b(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2289dd:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  2289e4:	00 
  2289e5:	e8 06 28 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2289ea:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  2289f1:	00 
  2289f2:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  2289f9:	00 
  2289fa:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  228a01:	00 
  228a02:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  228a09:	00 
  228a0a:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
  228a11:	00 
  228a12:	e8 b9 a5 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228a17:	88 84 24 ac 00 00 00 	mov    %al,0xac(%rsp)
  228a1e:	8a 84 24 ac 00 00 00 	mov    0xac(%rsp),%al
  228a25:	24 01                	and    $0x1,%al
  228a27:	88 84 24 0f 01 00 00 	mov    %al,0x10f(%rsp)
  228a2e:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  228a35:	01 
  228a36:	75 1a                	jne    228a52 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x1c2>
        "The expected value is at virtual address={:p}",
        &expected_value
    );

    let k_table = paging::get_kernel_table();
  228a38:	e8 23 58 fe ff       	callq  20e260 <_ZN9r3_kernel2mm6paging16get_kernel_table17h7f76f9d3055d33d3E>
  228a3d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  228a44:	00 
  228a45:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  228a4c:	00 
  228a4d:	e9 b2 00 00 00       	jmpq   228b04 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x274>
        &expected_value
  228a52:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  228a59:	00 
  228a5a:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  228a61:	00 
    log::debug!(
  228a62:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  228a69:	00 
  228a6a:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  228a71:	00 
  228a72:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
  228a79:	00 
  228a7a:	48 89 bc 24 98 02 00 	mov    %rdi,0x298(%rsp)
  228a81:	00 
  228a82:	48 8d 35 27 64 fe ff 	lea    -0x19bd9(%rip),%rsi        # 20eeb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  228a89:	e8 52 6b fe ff       	callq  20f5e0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  228a8e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  228a95:	00 
  228a96:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  228a9d:	00 
  228a9e:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  228aa5:	00 
  228aa6:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  228aad:	00 
  228aae:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  228ab5:	00 
  228ab6:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  228abd:	00 
  228abe:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  228ac5:	00 
  228ac6:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  228acd:	00 
  228ace:	48 8d 35 4b 3b 01 00 	lea    0x13b4b(%rip),%rsi        # 23c620 <memcmp+0x38e0>
  228ad5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  228adb:	4c 89 c2             	mov    %r8,%rdx
  228ade:	e8 4d da fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  228ae3:	48 8b b4 24 00 01 00 	mov    0x100(%rsp),%rsi
  228aea:	00 
  228aeb:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  228af2:	00 
  228af3:	48 8d 15 36 3b 01 00 	lea    0x13b36(%rip),%rdx        # 23c630 <memcmp+0x38f0>
  228afa:	e8 81 a2 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  228aff:	e9 34 ff ff ff       	jmpq   228a38 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x1a8>
    let phy_addr = k_table.translate(VirtualAddress::from_ptr(&expected_value));
  228b04:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  228b0b:	00 
  228b0c:	e8 8f 0c ff ff       	callq  2197a0 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17he3472abb9986f617E>
  228b11:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  228b18:	00 
  228b19:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  228b20:	00 
  228b21:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  228b28:	00 
  228b29:	e8 e2 4e fe ff       	callq  20da10 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E>
  228b2e:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  228b35:	00 
  228b36:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  228b3d:	00 

    if phy_addr.is_none() {
  228b3e:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  228b45:	00 
  228b46:	e8 15 8f fe ff       	callq  211a60 <_ZN4core6option15Option$LT$T$GT$7is_none17hbe8b97c331f96930E>
  228b4b:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  228b52:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  228b59:	a8 01                	test   $0x1,%al
  228b5b:	75 26                	jne    228b83 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x2f3>
  228b5d:	eb 00                	jmp    228b5f <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x2cf>
            &expected_value
        );
    }

    // check if the difference between physical address and virtual address == phy_offset
    let phy_offset = BootProtocol::get_phy_offset();
  228b5f:	e8 6c 10 ff ff       	callq  219bd0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  228b64:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  228b69:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  228b6e:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  228b75:	00 
  228b76:	48 89 94 24 b8 02 00 	mov    %rdx,0x2b8(%rsp)
  228b7d:	00 
  228b7e:	e9 9b 00 00 00       	jmpq   228c1e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x38e>
            &expected_value
  228b83:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  228b8a:	00 
  228b8b:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  228b92:	00 
        panic!(
  228b93:	48 8d 84 24 c0 01 00 	lea    0x1c0(%rsp),%rax
  228b9a:	00 
  228b9b:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  228ba2:	00 
  228ba3:	48 8b bc 24 b8 01 00 	mov    0x1b8(%rsp),%rdi
  228baa:	00 
  228bab:	48 89 bc 24 a8 02 00 	mov    %rdi,0x2a8(%rsp)
  228bb2:	00 
  228bb3:	48 8d 35 f6 62 fe ff 	lea    -0x19d0a(%rip),%rsi        # 20eeb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  228bba:	e8 21 6a fe ff       	callq  20f5e0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  228bbf:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  228bc4:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  228bc9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  228bce:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  228bd3:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  228bda:	00 
  228bdb:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  228be2:	00 
  228be3:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  228bea:	00 
  228beb:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  228bf2:	00 
  228bf3:	48 8d 35 6e 3a 01 00 	lea    0x13a6e(%rip),%rsi        # 23c668 <memcmp+0x3928>
  228bfa:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  228c00:	4c 89 c2             	mov    %r8,%rdx
  228c03:	e8 28 d9 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  228c08:	48 8d 35 69 3a 01 00 	lea    0x13a69(%rip),%rsi        # 23c678 <memcmp+0x3938>
  228c0f:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  228c16:	00 
  228c17:	e8 a4 d0 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  228c1c:	0f 0b                	ud2    
  228c1e:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  228c23:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  228c28:	48 8d 15 61 3a 01 00 	lea    0x13a61(%rip),%rdx        # 23c690 <memcmp+0x3950>
  228c2f:	e8 9c 87 fe ff       	callq  2113d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  228c34:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  228c39:	48 8b bc 24 68 01 00 	mov    0x168(%rsp),%rdi
  228c40:	00 
  228c41:	48 8b b4 24 70 01 00 	mov    0x170(%rsp),%rsi
  228c48:	00 
  228c49:	48 8d 15 58 3a 01 00 	lea    0x13a58(%rip),%rdx        # 23c6a8 <memcmp+0x3968>
  228c50:	e8 9b 89 fe ff       	callq  2115f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E>
  228c55:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  228c5c:	00 
  228c5d:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  228c64:	00 
  228c65:	e8 16 f8 ff ff       	callq  228480 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  228c6a:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  228c6f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  228c74:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  228c79:	48 01 c8             	add    %rcx,%rax
  228c7c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  228c81:	0f 92 c0             	setb   %al
  228c84:	a8 01                	test   $0x1,%al
  228c86:	75 70                	jne    228cf8 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x468>
  228c88:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  228c8d:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
  228c94:	00 
    let value: &u64 = unsafe { &*(v_result_addr as *const u64) };
  228c95:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  228c9c:	00 

    assert_eq!(expected_value, *value);
  228c9d:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  228ca4:	00 
  228ca5:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  228cac:	00 
  228cad:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  228cb4:	00 
  228cb5:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  228cbc:	00 
  228cbd:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  228cc4:	00 
  228cc5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  228cca:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  228cd1:	00 
  228cd2:	48 8b 8c 24 e0 01 00 	mov    0x1e0(%rsp),%rcx
  228cd9:	00 
  228cda:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  228cdf:	48 89 8c 24 d0 02 00 	mov    %rcx,0x2d0(%rsp)
  228ce6:	00 
  228ce7:	48 8b 00             	mov    (%rax),%rax
  228cea:	48 3b 01             	cmp    (%rcx),%rax
  228ced:	0f 94 c0             	sete   %al
  228cf0:	34 ff                	xor    $0xff,%al
  228cf2:	a8 01                	test   $0x1,%al
  228cf4:	75 42                	jne    228d38 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4a8>
  228cf6:	eb 1a                	jmp    228d12 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x482>
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  228cf8:	48 8d 3d 41 a2 fd ff 	lea    -0x25dbf(%rip),%rdi        # 202f40 <str.1>
  228cff:	48 8d 15 ba 39 01 00 	lea    0x139ba(%rip),%rdx        # 23c6c0 <memcmp+0x3980>
  228d06:	be 1c 00 00 00       	mov    $0x1c,%esi
  228d0b:	e8 e0 ce 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  228d10:	0f 0b                	ud2    

    log::info!(
  228d12:	48 c7 84 24 20 02 00 	movq   $0x3,0x220(%rsp)
  228d19:	00 03 00 00 00 
  228d1e:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  228d25:	00 
  228d26:	48 8d 35 cb 75 fd ff 	lea    -0x28a35(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  228d2d:	e8 9e a2 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228d32:	88 44 24 37          	mov    %al,0x37(%rsp)
  228d36:	eb 36                	jmp    228d6e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4de>
  228d38:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  228d3d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    assert_eq!(expected_value, *value);
  228d42:	c6 84 24 ef 01 00 00 	movb   $0x0,0x1ef(%rsp)
  228d49:	00 
  228d4a:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  228d51:	00 00 00 00 00 
  228d56:	4c 8d 05 7b 39 01 00 	lea    0x1397b(%rip),%r8        # 23c6d8 <memcmp+0x3998>
  228d5d:	31 ff                	xor    %edi,%edi
  228d5f:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  228d66:	00 
  228d67:	e8 a4 79 ff ff       	callq  220710 <_ZN4core9panicking13assert_failed17hf21d4688260afdf9E>
  228d6c:	0f 0b                	ud2    
  228d6e:	8a 44 24 37          	mov    0x37(%rsp),%al
    log::info!(
  228d72:	a8 01                	test   $0x1,%al
  228d74:	75 0c                	jne    228d82 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4f2>
  228d76:	eb 00                	jmp    228d78 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4e8>
  228d78:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  228d7f:	00 
  228d80:	eb 5a                	jmp    228ddc <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x54c>
  228d82:	c6 84 24 ef 02 00 00 	movb   $0x0,0x2ef(%rsp)
  228d89:	00 
  228d8a:	48 8b 3d b7 4d 01 00 	mov    0x14db7(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  228d91:	0f b6 b4 24 ef 02 00 	movzbl 0x2ef(%rsp),%esi
  228d98:	00 
  228d99:	e8 52 24 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  228d9e:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  228da5:	00 
  228da6:	48 8b 84 24 f0 02 00 	mov    0x2f0(%rsp),%rax
  228dad:	00 
  228dae:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  228db5:	00 
  228db6:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  228dbd:	00 
  228dbe:	48 8d b4 24 30 02 00 	lea    0x230(%rsp),%rsi
  228dc5:	00 
  228dc6:	e8 05 a2 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228dcb:	88 44 24 36          	mov    %al,0x36(%rsp)
  228dcf:	8a 44 24 36          	mov    0x36(%rsp),%al
  228dd3:	24 01                	and    $0x1,%al
  228dd5:	88 84 24 2f 02 00 00 	mov    %al,0x22f(%rsp)
  228ddc:	f6 84 24 2f 02 00 00 	testb  $0x1,0x22f(%rsp)
  228de3:	01 
  228de4:	75 08                	jne    228dee <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x55e>
        "Virtual Memory test passed, expected=0x{:x}, got=0x{:x}",
        expected_value,
        value
    );
}
  228de6:	48 81 c4 18 03 00 00 	add    $0x318,%rsp
  228ded:	c3                   	retq   
    log::info!(
  228dee:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  228df5:	00 
  228df6:	48 89 84 24 88 02 00 	mov    %rax,0x288(%rsp)
  228dfd:	00 
  228dfe:	48 8d 84 24 d0 01 00 	lea    0x1d0(%rsp),%rax
  228e05:	00 
  228e06:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
  228e0d:	00 
  228e0e:	48 8b bc 24 88 02 00 	mov    0x288(%rsp),%rdi
  228e15:	00 
  228e16:	48 89 bc 24 d8 02 00 	mov    %rdi,0x2d8(%rsp)
  228e1d:	00 
  228e1e:	48 8b 84 24 90 02 00 	mov    0x290(%rsp),%rax
  228e25:	00 
  228e26:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  228e2b:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  228e32:	00 
  228e33:	48 8b 35 16 4d 01 00 	mov    0x14d16(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  228e3a:	e8 01 68 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  228e3f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  228e44:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  228e49:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  228e4e:	48 8d 35 9b 60 fe ff 	lea    -0x19f65(%rip),%rsi        # 20eef0 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17h48c3c6680a24267dE>
  228e55:	e8 86 67 fe ff       	callq  20f5e0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  228e5a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228e5f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  228e64:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  228e69:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  228e6e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  228e73:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  228e78:	48 89 b4 24 68 02 00 	mov    %rsi,0x268(%rsp)
  228e7f:	00 
  228e80:	48 89 94 24 70 02 00 	mov    %rdx,0x270(%rsp)
  228e87:	00 
  228e88:	48 89 8c 24 78 02 00 	mov    %rcx,0x278(%rsp)
  228e8f:	00 
  228e90:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  228e97:	00 
  228e98:	48 8d 8c 24 68 02 00 	lea    0x268(%rsp),%rcx
  228e9f:	00 
  228ea0:	48 8d bc 24 38 02 00 	lea    0x238(%rsp),%rdi
  228ea7:	00 
  228ea8:	48 8d 35 41 38 01 00 	lea    0x13841(%rip),%rsi        # 23c6f0 <memcmp+0x39b0>
  228eaf:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  228eb5:	4c 89 c2             	mov    %r8,%rdx
  228eb8:	e8 73 d6 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  228ebd:	48 8b b4 24 20 02 00 	mov    0x220(%rsp),%rsi
  228ec4:	00 
  228ec5:	48 8d bc 24 38 02 00 	lea    0x238(%rsp),%rdi
  228ecc:	00 
  228ecd:	48 8d 15 3c 38 01 00 	lea    0x1383c(%rip),%rdx        # 23c710 <memcmp+0x39d0>
  228ed4:	e8 a7 9e 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  228ed9:	e9 08 ff ff ff       	jmpq   228de6 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x556>
  228ede:	cc                   	int3   
  228edf:	cc                   	int3   

0000000000228ee0 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17he76486db047b42f9E>:
#[derive(Debug, Clone, Copy)]
  228ee0:	48 83 ec 58          	sub    $0x58,%rsp
  228ee4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228ee9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  228eee:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct VirtualAddress(u64);
  228ef3:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug, Clone, Copy)]
  228ef8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  228efd:	48 8d 15 a0 a1 fd ff 	lea    -0x25e60(%rip),%rdx        # 2030a4 <str.1+0x164>
  228f04:	b9 0e 00 00 00       	mov    $0xe,%ecx
  228f09:	e8 12 f0 00 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  228f0e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  228f13:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  228f18:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct VirtualAddress(u64);
  228f1d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  228f22:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug, Clone, Copy)]
  228f27:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  228f2c:	48 8d 15 15 38 01 00 	lea    0x13815(%rip),%rdx        # 23c748 <memcmp+0x3a08>
  228f33:	e8 68 c5 00 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  228f38:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  228f3d:	e8 ce c6 00 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  228f42:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228f46:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228f4a:	24 01                	and    $0x1,%al
  228f4c:	0f b6 c0             	movzbl %al,%eax
  228f4f:	48 83 c4 58          	add    $0x58,%rsp
  228f53:	c3                   	retq   
  228f54:	cc                   	int3   
  228f55:	cc                   	int3   
  228f56:	cc                   	int3   
  228f57:	cc                   	int3   
  228f58:	cc                   	int3   
  228f59:	cc                   	int3   
  228f5a:	cc                   	int3   
  228f5b:	cc                   	int3   
  228f5c:	cc                   	int3   
  228f5d:	cc                   	int3   
  228f5e:	cc                   	int3   
  228f5f:	cc                   	int3   

0000000000228f60 <_ZN68_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..clone..Clone$GT$5clone17h4032ae80f4183b4aE>:
  228f60:	50                   	push   %rax
  228f61:	48 89 3c 24          	mov    %rdi,(%rsp)
  228f65:	48 8b 07             	mov    (%rdi),%rax
  228f68:	59                   	pop    %rcx
  228f69:	c3                   	retq   
  228f6a:	cc                   	int3   
  228f6b:	cc                   	int3   
  228f6c:	cc                   	int3   
  228f6d:	cc                   	int3   
  228f6e:	cc                   	int3   
  228f6f:	cc                   	int3   

0000000000228f70 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
  228f70:	48 83 ec 28          	sub    $0x28,%rsp
  228f74:	48 89 34 24          	mov    %rsi,(%rsp)
  228f78:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228f7d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228f82:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
                    // The order here is important to generate more optimal assembly.
                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.
                    if *self < *other { Less }
  228f87:	48 8b 07             	mov    (%rdi),%rax
  228f8a:	48 3b 06             	cmp    (%rsi),%rax
  228f8d:	72 13                	jb     228fa2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x32>
  228f8f:	48 8b 0c 24          	mov    (%rsp),%rcx
  228f93:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                    else if *self == *other { Equal }
  228f98:	48 8b 00             	mov    (%rax),%rax
  228f9b:	48 3b 01             	cmp    (%rcx),%rax
  228f9e:	74 17                	je     228fb7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x47>
  228fa0:	eb 0e                	jmp    228fb0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x40>
                    if *self < *other { Less }
  228fa2:	c6 44 24 17 ff       	movb   $0xff,0x17(%rsp)
                    else { Greater }
                }
  228fa7:	8a 44 24 17          	mov    0x17(%rsp),%al
  228fab:	48 83 c4 28          	add    $0x28,%rsp
  228faf:	c3                   	retq   
                    else { Greater }
  228fb0:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
                    else if *self == *other { Equal }
  228fb5:	eb 05                	jmp    228fbc <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x4c>
  228fb7:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
                    if *self < *other { Less }
  228fbc:	eb e9                	jmp    228fa7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x37>
  228fbe:	cc                   	int3   
  228fbf:	cc                   	int3   

0000000000228fc0 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h88ff743f82721c38E>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
  228fc0:	48 83 ec 10          	sub    $0x10,%rsp
  228fc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  228fc8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  228fcd:	48 8b 07             	mov    (%rdi),%rax
  228fd0:	48 3b 06             	cmp    (%rsi),%rax
  228fd3:	0f 92 c0             	setb   %al
  228fd6:	24 01                	and    $0x1,%al
  228fd8:	0f b6 c0             	movzbl %al,%eax
  228fdb:	48 83 c4 10          	add    $0x10,%rsp
  228fdf:	c3                   	retq   

0000000000228fe0 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE>:
use uart::UART_DRIVER;

// a logger that implements kernel logging functionalities
pub struct KernelLogger;

fn get_color(level: Level) -> Pixel {
  228fe0:	48 83 ec 18          	sub    $0x18,%rsp
  228fe4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    match level {
  228fe9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  228fee:	48 89 04 24          	mov    %rax,(%rsp)
  228ff2:	48 83 e8 01          	sub    $0x1,%rax
  228ff6:	74 24                	je     22901c <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x3c>
  228ff8:	eb 00                	jmp    228ffa <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x1a>
  228ffa:	48 8b 04 24          	mov    (%rsp),%rax
  228ffe:	48 83 e8 02          	sub    $0x2,%rax
  229002:	74 2e                	je     229032 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x52>
  229004:	eb 00                	jmp    229006 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x26>
            b: 0,
            g: 255,
            r: 255,
            channel: 0,
        },
        _ => Pixel {
  229006:	c6 44 24 10 ff       	movb   $0xff,0x10(%rsp)
  22900b:	c6 44 24 11 ff       	movb   $0xff,0x11(%rsp)
  229010:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  229015:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
  22901a:	eb 2a                	jmp    229046 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x66>
        Level::Error => Pixel {
  22901c:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  229021:	c6 44 24 11 00       	movb   $0x0,0x11(%rsp)
  229026:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  22902b:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
  229030:	eb 14                	jmp    229046 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x66>
        Level::Warn => Pixel {
  229032:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  229037:	c6 44 24 11 ff       	movb   $0xff,0x11(%rsp)
  22903c:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  229041:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
            g: 255,
            r: 255,
            channel: 0,
        },
    }
}
  229046:	8b 44 24 10          	mov    0x10(%rsp),%eax
  22904a:	48 83 c4 18          	add    $0x18,%rsp
  22904e:	c3                   	retq   
  22904f:	cc                   	int3   

0000000000229050 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$7enabled17hb850b3dff7dd95eaE>:
        );
    };
}

impl log::Log for KernelLogger {
    fn enabled(&self, _meta: &Metadata) -> bool {
  229050:	48 83 ec 10          	sub    $0x10,%rsp
  229054:	48 89 3c 24          	mov    %rdi,(%rsp)
  229058:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        // TOOD: Add level based filtering
        true
    }
  22905d:	b0 01                	mov    $0x1,%al
  22905f:	24 01                	and    $0x1,%al
  229061:	0f b6 c0             	movzbl %al,%eax
  229064:	48 83 c4 10          	add    $0x10,%rsp
  229068:	c3                   	retq   
  229069:	cc                   	int3   
  22906a:	cc                   	int3   
  22906b:	cc                   	int3   
  22906c:	cc                   	int3   
  22906d:	cc                   	int3   
  22906e:	cc                   	int3   
  22906f:	cc                   	int3   

0000000000229070 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E>:

    fn log(&self, record: &Record) {
  229070:	48 81 ec a8 02 00 00 	sub    $0x2a8,%rsp
  229077:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  22907e:	00 
  22907f:	48 89 f8             	mov    %rdi,%rax
  229082:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  229089:	00 
  22908a:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  229091:	00 
  229092:	48 89 bc 24 60 02 00 	mov    %rdi,0x260(%rsp)
  229099:	00 
        let level = record.level();
  22909a:	e8 c1 9e fe ff       	callq  212f60 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  22909f:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  2290a6:	00 

        if level <= LevelFilter::Trace {
  2290a7:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2290ae:	00 
  2290af:	48 8d 35 42 72 fd ff 	lea    -0x28dbe(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  2290b6:	e8 15 9f fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2290bb:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  2290c2:	8a 84 24 ef 00 00 00 	mov    0xef(%rsp),%al
  2290c9:	a8 01                	test   $0x1,%al
  2290cb:	75 22                	jne    2290ef <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x7f>
  2290cd:	eb 00                	jmp    2290cf <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
                record.level(),
                record.args()
            );
        }

        if level <= LevelFilter::Info {
  2290cf:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2290d6:	00 
  2290d7:	48 8d 35 fa 71 fd ff 	lea    -0x28e06(%rip),%rsi        # 2002d8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x9e>
  2290de:	e8 ed 9e fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2290e3:	88 84 24 ee 00 00 00 	mov    %al,0xee(%rsp)
  2290ea:	e9 aa 02 00 00       	jmpq   229399 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x329>
            print_uart!(
  2290ef:	48 8d 3d 80 72 fd ff 	lea    -0x28d80(%rip),%rdi        # 200376 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE>
  2290f6:	e8 d5 dd fd ff       	callq  206ed0 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>
  2290fb:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  229102:	00 
  229103:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  22910a:	00 
  22910b:	e8 40 8b fe ff       	callq  211c50 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E>
  229110:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  229117:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  22911e:	a8 01                	test   $0x1,%al
  229120:	75 02                	jne    229124 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0xb4>
  229122:	eb ab                	jmp    2290cf <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
  229124:	48 8d 3d 4b 72 fd ff 	lea    -0x28db5(%rip),%rdi        # 200376 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE>
  22912b:	e8 a0 dd fd ff       	callq  206ed0 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>
  229130:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  229137:	00 
  229138:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  22913f:	00 
  229140:	e8 bb 7f fe ff       	callq  211100 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E>
  229145:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  22914c:	00 
  22914d:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  229154:	00 
  229155:	48 8d 35 0c 36 01 00 	lea    0x1360c(%rip),%rsi        # 23c768 <memcmp+0x3a28>
  22915c:	e8 ef 85 fe ff       	callq  211750 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE>
  229161:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  229168:	00 
  229169:	48 89 84 24 68 02 00 	mov    %rax,0x268(%rsp)
  229170:	00 
  229171:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  229178:	00 
  229179:	e8 72 5a 00 00       	callq  22ebf0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec73a184c5b52be1E>
  22917e:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  229185:	00 
  229186:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  22918d:	00 
  22918e:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  229195:	00 
  229196:	e8 a5 5b 00 00       	callq  22ed40 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf4deabd02622e74dE>
  22919b:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  2291a2:	00 
  2291a3:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  2291aa:	00 
                record.target(),
  2291ab:	e8 d0 9d fe ff       	callq  212f80 <_ZN3log6Record6target17h757367dd169b837eE>
  2291b0:	48 89 94 24 90 01 00 	mov    %rdx,0x190(%rsp)
  2291b7:	00 
  2291b8:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  2291bf:	00 
  2291c0:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  2291c7:	00 
                record.level(),
  2291c8:	e8 93 9d fe ff       	callq  212f60 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  2291cd:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  2291d4:	00 
  2291d5:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  2291dc:	00 
                record.args()
  2291dd:	e8 6e 9d fe ff       	callq  212f50 <_ZN3log6Record4args17h9dae30359519c3ecE>
  2291e2:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  2291e9:	00 
            print_uart!(
  2291ea:	48 8d 84 24 88 01 00 	lea    0x188(%rsp),%rax
  2291f1:	00 
  2291f2:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  2291f9:	00 
  2291fa:	48 8d 84 24 98 01 00 	lea    0x198(%rsp),%rax
  229201:	00 
  229202:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  229209:	00 
  22920a:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  229211:	00 
  229212:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  229219:	00 
  22921a:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  229221:	00 
  229222:	48 89 bc 24 70 02 00 	mov    %rdi,0x270(%rsp)
  229229:	00 
  22922a:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  229231:	00 
  229232:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  229239:	00 
  22923a:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  229241:	00 
  229242:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  229249:	00 
  22924a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  229251:	00 
  229252:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  229259:	00 
  22925a:	48 8b 35 f7 48 01 00 	mov    0x148f7(%rip),%rsi        # 23db58 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  229261:	e8 3a aa 00 00       	callq  233ca0 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  229266:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22926d:	00 
  22926e:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  229275:	00 
  229276:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22927d:	00 
  22927e:	48 8b 35 43 49 01 00 	mov    0x14943(%rip),%rsi        # 23dbc8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe0>
  229285:	e8 f6 5c fe ff       	callq  20ef80 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>
  22928a:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  229291:	00 
  229292:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  229299:	00 
  22929a:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  2292a1:	00 
  2292a2:	48 8d 35 97 5b fe ff 	lea    -0x1a469(%rip),%rsi        # 20ee40 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>
  2292a9:	e8 f2 60 fe ff       	callq  20f3a0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>
  2292ae:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2292b3:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  2292ba:	00 
  2292bb:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2292c2:	00 
  2292c3:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2292c8:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  2292cf:	00 
  2292d0:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  2292d7:	00 
  2292d8:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  2292df:	00 
  2292e0:	4c 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%r8
  2292e7:	00 
  2292e8:	4c 89 84 24 40 01 00 	mov    %r8,0x140(%rsp)
  2292ef:	00 
  2292f0:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  2292f7:	00 
  2292f8:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  2292ff:	00 
  229300:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  229307:	00 
  229308:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  22930f:	00 
  229310:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  229317:	00 
  229318:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  22931f:	00 
  229320:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  229325:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22932a:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  229331:	00 
  229332:	48 8d 35 47 34 01 00 	lea    0x13447(%rip),%rsi        # 23c780 <memcmp+0x3a40>
  229339:	ba 04 00 00 00       	mov    $0x4,%edx
  22933e:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  229344:	4c 8d 0d 7d 9d fd ff 	lea    -0x26283(%rip),%r9        # 2030c8 <str.1+0x188>
  22934b:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  229352:	00 
  229353:	e8 78 d1 fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  229358:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  22935f:	00 
  229360:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
  229367:	00 
  229368:	e8 73 bd fe ff       	callq  2150e0 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>
  22936d:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  229371:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  229375:	0f b6 f8             	movzbl %al,%edi
  229378:	83 e7 01             	and    $0x1,%edi
  22937b:	48 8d 35 e6 33 01 00 	lea    0x133e6(%rip),%rsi        # 23c768 <memcmp+0x3a28>
  229382:	e8 b9 21 fe ff       	callq  20b540 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE>
  229387:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  22938e:	00 
  22938f:	e8 7c 2e fe ff       	callq  20c210 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17ha1bb7375bd21c262E>
  229394:	e9 36 fd ff ff       	jmpq   2290cf <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
  229399:	8a 84 24 ee 00 00 00 	mov    0xee(%rsp),%al
        if level <= LevelFilter::Info {
  2293a0:	a8 01                	test   $0x1,%al
  2293a2:	75 0a                	jne    2293ae <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x33e>
  2293a4:	eb 00                	jmp    2293a6 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x336>
                record.target(),
                record.level(),
                record.args()
            );
        }
    }
  2293a6:	48 81 c4 a8 02 00 00 	add    $0x2a8,%rsp
  2293ad:	c3                   	retq   
            print_framebuffer!(
  2293ae:	48 8d 3d d7 94 fd ff 	lea    -0x26b29(%rip),%rdi        # 20288c <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  2293b5:	e8 b6 63 ff ff       	callq  21f770 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7140a24394aa1ffE>
  2293ba:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2293bf:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  2293c4:	e8 97 56 00 00       	callq  22ea60 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h728df519dd9bcd16E>
  2293c9:	48 89 94 24 b0 01 00 	mov    %rdx,0x1b0(%rsp)
  2293d0:	00 
  2293d1:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  2293d8:	00 
  2293d9:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  2293e0:	00 
  2293e1:	e8 3a 59 00 00       	callq  22ed20 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>
  2293e6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
                level,
  2293eb:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  2293f2:	00 
            print_framebuffer!(
  2293f3:	e8 e8 fb ff ff       	callq  228fe0 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE>
  2293f8:	89 84 24 8c 02 00 00 	mov    %eax,0x28c(%rsp)
  2293ff:	8b 84 24 8c 02 00 00 	mov    0x28c(%rsp),%eax
  229406:	89 84 24 b8 01 00 00 	mov    %eax,0x1b8(%rsp)
  22940d:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  229412:	8b b4 24 b8 01 00 00 	mov    0x1b8(%rsp),%esi
  229419:	e8 b2 61 ff ff       	callq  21f5d0 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger9set_color17h728bcd9539458d15E>
  22941e:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  229425:	00 
  229426:	e8 f5 58 00 00       	callq  22ed20 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>
  22942b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  229430:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  229437:	00 
                record.target(),
  229438:	e8 43 9b fe ff       	callq  212f80 <_ZN3log6Record6target17h757367dd169b837eE>
  22943d:	48 89 94 24 40 02 00 	mov    %rdx,0x240(%rsp)
  229444:	00 
  229445:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  22944c:	00 
  22944d:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  229454:	00 
                record.level(),
  229455:	e8 06 9b fe ff       	callq  212f60 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  22945a:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  229461:	00 
  229462:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  229469:	00 
                record.args()
  22946a:	e8 e1 9a fe ff       	callq  212f50 <_ZN3log6Record4args17h9dae30359519c3ecE>
  22946f:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  229476:	00 
            print_framebuffer!(
  229477:	48 8d 84 24 38 02 00 	lea    0x238(%rsp),%rax
  22947e:	00 
  22947f:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  229486:	00 
  229487:	48 8d 84 24 48 02 00 	lea    0x248(%rsp),%rax
  22948e:	00 
  22948f:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  229496:	00 
  229497:	48 8d 84 24 50 02 00 	lea    0x250(%rsp),%rax
  22949e:	00 
  22949f:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  2294a6:	00 
  2294a7:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  2294ae:	00 
  2294af:	48 89 bc 24 90 02 00 	mov    %rdi,0x290(%rsp)
  2294b6:	00 
  2294b7:	48 8b 84 24 28 02 00 	mov    0x228(%rsp),%rax
  2294be:	00 
  2294bf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2294c4:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
  2294cb:	00 
  2294cc:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  2294d3:	00 
  2294d4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2294d9:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  2294e0:	00 
  2294e1:	48 8b 35 70 46 01 00 	mov    0x14670(%rip),%rsi        # 23db58 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  2294e8:	e8 b3 a7 00 00       	callq  233ca0 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  2294ed:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2294f2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  2294f7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2294fc:	48 8b 35 c5 46 01 00 	mov    0x146c5(%rip),%rsi        # 23dbc8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe0>
  229503:	e8 78 5a fe ff       	callq  20ef80 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>
  229508:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22950d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  229512:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  229517:	48 8d 35 22 59 fe ff 	lea    -0x1a6de(%rip),%rsi        # 20ee40 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>
  22951e:	e8 7d 5e fe ff       	callq  20f3a0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>
  229523:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  229528:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22952d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  229532:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  229537:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22953c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  229541:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  229546:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  22954b:	4c 89 84 24 f0 01 00 	mov    %r8,0x1f0(%rsp)
  229552:	00 
  229553:	48 89 bc 24 f8 01 00 	mov    %rdi,0x1f8(%rsp)
  22955a:	00 
  22955b:	48 89 b4 24 00 02 00 	mov    %rsi,0x200(%rsp)
  229562:	00 
  229563:	48 89 94 24 08 02 00 	mov    %rdx,0x208(%rsp)
  22956a:	00 
  22956b:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  229572:	00 
  229573:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  22957a:	00 
  22957b:	48 8d 84 24 f0 01 00 	lea    0x1f0(%rsp),%rax
  229582:	00 
  229583:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  229588:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22958d:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  229594:	00 
  229595:	48 8d 35 e4 31 01 00 	lea    0x131e4(%rip),%rsi        # 23c780 <memcmp+0x3a40>
  22959c:	ba 04 00 00 00       	mov    $0x4,%edx
  2295a1:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  2295a7:	4c 8d 0d 1a 9b fd ff 	lea    -0x264e6(%rip),%r9        # 2030c8 <str.1+0x188>
  2295ae:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  2295b5:	00 
  2295b6:	e8 15 cf fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  2295bb:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  2295c0:	48 8d b4 24 c0 01 00 	lea    0x1c0(%rsp),%rsi
  2295c7:	00 
  2295c8:	e8 23 16 00 00       	callq  22abf0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>
        }
  2295cd:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  2295d4:	00 
  2295d5:	e8 96 29 fe ff       	callq  20bf70 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$$GT$17h46c9f61d2c18a255E>
  2295da:	e9 c7 fd ff ff       	jmpq   2293a6 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x336>
  2295df:	cc                   	int3   

00000000002295e0 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$5flush17ha1030dc08c20e4c8E>:

    fn flush(&self) {
  2295e0:	50                   	push   %rax
  2295e1:	48 89 3c 24          	mov    %rdi,(%rsp)
        // TODO: Will be used in future for dmesg
    }
  2295e5:	58                   	pop    %rax
  2295e6:	c3                   	retq   
  2295e7:	cc                   	int3   
  2295e8:	cc                   	int3   
  2295e9:	cc                   	int3   
  2295ea:	cc                   	int3   
  2295eb:	cc                   	int3   
  2295ec:	cc                   	int3   
  2295ed:	cc                   	int3   
  2295ee:	cc                   	int3   
  2295ef:	cc                   	int3   

00000000002295f0 <_ZN9r3_kernel7logging4init17h648c946b5865c67bE>:
}

static KERNEL_LOGGER: KernelLogger = KernelLogger;

pub fn init() {
  2295f0:	50                   	push   %rax
    // unuse the result
    let _ = log::set_logger(&KERNEL_LOGGER);
  2295f1:	48 8d 3d 78 9b fd ff 	lea    -0x26488(%rip),%rdi        # 203170 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE>
  2295f8:	48 8d 35 d9 31 01 00 	lea    0x131d9(%rip),%rsi        # 23c7d8 <memcmp+0x3a98>
  2295ff:	e8 7c 95 00 00       	callq  232b80 <_ZN3log10set_logger17ha1c2327ac82037ebE>
    log::set_max_level(LevelFilter::Debug);
  229604:	48 c7 04 24 04 00 00 	movq   $0x4,(%rsp)
  22960b:	00 
  22960c:	48 8b 3c 24          	mov    (%rsp),%rdi
  229610:	e8 0b 99 fe ff       	callq  212f20 <_ZN3log13set_max_level17ha683ad6dd9a2a3f2E>
}
  229615:	58                   	pop    %rax
  229616:	c3                   	retq   
  229617:	cc                   	int3   
  229618:	cc                   	int3   
  229619:	cc                   	int3   
  22961a:	cc                   	int3   
  22961b:	cc                   	int3   
  22961c:	cc                   	int3   
  22961d:	cc                   	int3   
  22961e:	cc                   	int3   
  22961f:	cc                   	int3   

0000000000229620 <rust_begin_unwind>:

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
  229620:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  229627:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    // write the panic info and loop infinitely:
    log::error!("{}", info);
  22962c:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  229633:	00 00 
  229635:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22963a:	48 8d 35 b7 6c fd ff 	lea    -0x29349(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  229641:	e8 8a 99 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229646:	88 44 24 17          	mov    %al,0x17(%rsp)
  22964a:	8a 44 24 17          	mov    0x17(%rsp),%al
  22964e:	a8 01                	test   $0x1,%al
  229650:	75 09                	jne    22965b <rust_begin_unwind+0x3b>
  229652:	eb 00                	jmp    229654 <rust_begin_unwind+0x34>
  229654:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  229659:	eb 4e                	jmp    2296a9 <rust_begin_unwind+0x89>
  22965b:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  229662:	00 
  229663:	48 8b 3d de 44 01 00 	mov    0x144de(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22966a:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  229671:	00 
  229672:	e8 79 1b 00 00       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229677:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22967e:	00 
  22967f:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  229686:	00 
  229687:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22968c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  229691:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  229696:	e8 35 99 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22969b:	88 44 24 16          	mov    %al,0x16(%rsp)
  22969f:	8a 44 24 16          	mov    0x16(%rsp),%al
  2296a3:	24 01                	and    $0x1,%al
  2296a5:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2296a9:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  2296ae:	75 02                	jne    2296b2 <rust_begin_unwind+0x92>
    loop {}
  2296b0:	eb fe                	jmp    2296b0 <rust_begin_unwind+0x90>
    log::error!("{}", info);
  2296b2:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2296b7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2296bc:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  2296c1:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
  2296c8:	00 
  2296c9:	48 8d 35 e0 4c ff ff 	lea    -0xb320(%rip),%rsi        # 21e3b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb9bbc8b08964feefE>
  2296d0:	e8 4b 61 fe ff       	callq  20f820 <_ZN4core3fmt10ArgumentV13new17hf674b26383cf8570E>
  2296d5:	48 89 04 24          	mov    %rax,(%rsp)
  2296d9:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2296de:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2296e3:	48 8b 0c 24          	mov    (%rsp),%rcx
  2296e7:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2296ec:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2296f1:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  2296f6:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2296fb:	48 8d 35 0e 31 01 00 	lea    0x1310e(%rip),%rsi        # 23c810 <memcmp+0x3ad0>
  229702:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  229708:	4c 89 c2             	mov    %r8,%rdx
  22970b:	e8 20 ce fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229710:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  229715:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22971a:	48 8d 15 ff 30 01 00 	lea    0x130ff(%rip),%rdx        # 23c820 <memcmp+0x3ae0>
  229721:	e8 5a 96 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229726:	eb 88                	jmp    2296b0 <rust_begin_unwind+0x90>
  229728:	cc                   	int3   
  229729:	cc                   	int3   
  22972a:	cc                   	int3   
  22972b:	cc                   	int3   
  22972c:	cc                   	int3   
  22972d:	cc                   	int3   
  22972e:	cc                   	int3   
  22972f:	cc                   	int3   

0000000000229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>:
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  229730:	48 83 ec 48          	sub    $0x48,%rsp
  229734:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  229739:	48 89 f8             	mov    %rdi,%rax
  22973c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  229741:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  229746:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22974b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let mut format_string = f.debug_struct("Exception Info");
  229750:	48 8d 35 2b 9a fd ff 	lea    -0x265d5(%rip),%rsi        # 203182 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x12>
  229757:	ba 0e 00 00 00       	mov    $0xe,%edx
  22975c:	e8 9f e7 00 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  229761:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  229766:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22976b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  229770:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  229775:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22977a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22977f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("instruction_pointer", &self.instruction_pointer);
  229784:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  229789:	48 8d 35 00 9a fd ff 	lea    -0x26600(%rip),%rsi        # 203190 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x20>
  229790:	ba 13 00 00 00       	mov    $0x13,%edx
  229795:	4c 8d 05 bc 30 01 00 	lea    0x130bc(%rip),%r8        # 23c858 <memcmp+0x3b18>
  22979c:	e8 ef ba 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2297a1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("code_segment", &self.code_segment);
  2297a6:	48 83 c1 08          	add    $0x8,%rcx
  2297aa:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2297af:	48 8d 35 ed 99 fd ff 	lea    -0x26613(%rip),%rsi        # 2031a3 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x33>
  2297b6:	ba 0c 00 00 00       	mov    $0xc,%edx
  2297bb:	4c 8d 05 96 30 01 00 	lea    0x13096(%rip),%r8        # 23c858 <memcmp+0x3b18>
  2297c2:	e8 c9 ba 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2297c7:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("cpu_flags", &self.cpu_flags);
  2297cc:	48 83 c1 10          	add    $0x10,%rcx
  2297d0:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2297d5:	48 8d 35 d3 99 fd ff 	lea    -0x2662d(%rip),%rsi        # 2031af <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x3f>
  2297dc:	ba 09 00 00 00       	mov    $0x9,%edx
  2297e1:	4c 8d 05 70 30 01 00 	lea    0x13070(%rip),%r8        # 23c858 <memcmp+0x3b18>
  2297e8:	e8 a3 ba 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2297ed:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_pointer", &self.stack_pointer);
  2297f2:	48 83 c1 18          	add    $0x18,%rcx
  2297f6:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2297fb:	48 8d 35 b6 99 fd ff 	lea    -0x2664a(%rip),%rsi        # 2031b8 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x48>
  229802:	ba 0d 00 00 00       	mov    $0xd,%edx
  229807:	4c 8d 05 4a 30 01 00 	lea    0x1304a(%rip),%r8        # 23c858 <memcmp+0x3b18>
  22980e:	e8 7d ba 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  229813:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_segment", &self.stack_segment);
  229818:	48 83 c1 20          	add    $0x20,%rcx
  22981c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  229821:	48 8d 35 9d 99 fd ff 	lea    -0x26663(%rip),%rsi        # 2031c5 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x55>
  229828:	ba 0d 00 00 00       	mov    $0xd,%edx
  22982d:	4c 8d 05 24 30 01 00 	lea    0x13024(%rip),%r8        # 23c858 <memcmp+0x3b18>
  229834:	e8 57 ba 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
        format_string.finish()
  229839:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22983e:	e8 0d bc 00 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  229843:	88 44 24 07          	mov    %al,0x7(%rsp)
  229847:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22984b:	24 01                	and    $0x1,%al
  22984d:	0f b6 c0             	movzbl %al,%eax
  229850:	48 83 c4 48          	add    $0x48,%rsp
  229854:	c3                   	retq   
  229855:	cc                   	int3   
  229856:	cc                   	int3   
  229857:	cc                   	int3   
  229858:	cc                   	int3   
  229859:	cc                   	int3   
  22985a:	cc                   	int3   
  22985b:	cc                   	int3   
  22985c:	cc                   	int3   
  22985d:	cc                   	int3   
  22985e:	cc                   	int3   
  22985f:	cc                   	int3   

0000000000229860 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE>:
    pub naked_0: InterruptDescriptorEntry<NakedHandlerType>,
    pub interrupts_1: [InterruptDescriptorEntry<DefaultHandlerFunction>; 239 - 32],
}

impl InterruptDescriptorTable {
    pub fn empty() -> Self {
  229860:	48 81 ec 38 12 00 00 	sub    $0x1238,%rsp
  229867:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  22986c:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        InterruptDescriptorTable {
            divide_error: InterruptDescriptorEntry::empty(),
  229871:	e8 7a 91 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229876:	48 89 94 24 90 10 00 	mov    %rdx,0x1090(%rsp)
  22987d:	00 
  22987e:	48 89 84 24 88 10 00 	mov    %rax,0x1088(%rsp)
  229885:	00 
  229886:	48 8b 84 24 88 10 00 	mov    0x1088(%rsp),%rax
  22988d:	00 
  22988e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  229893:	48 8b 84 24 90 10 00 	mov    0x1090(%rsp),%rax
  22989a:	00 
  22989b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            debug: InterruptDescriptorEntry::empty(),
  2298a0:	e8 4b 91 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2298a5:	48 89 94 24 a0 10 00 	mov    %rdx,0x10a0(%rsp)
  2298ac:	00 
  2298ad:	48 89 84 24 98 10 00 	mov    %rax,0x1098(%rsp)
  2298b4:	00 
  2298b5:	48 8b 84 24 98 10 00 	mov    0x1098(%rsp),%rax
  2298bc:	00 
  2298bd:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2298c2:	48 8b 84 24 a0 10 00 	mov    0x10a0(%rsp),%rax
  2298c9:	00 
  2298ca:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            non_maskable_interrupt: InterruptDescriptorEntry::empty(),
  2298cf:	e8 1c 91 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2298d4:	48 89 94 24 b0 10 00 	mov    %rdx,0x10b0(%rsp)
  2298db:	00 
  2298dc:	48 89 84 24 a8 10 00 	mov    %rax,0x10a8(%rsp)
  2298e3:	00 
  2298e4:	48 8b 84 24 a8 10 00 	mov    0x10a8(%rsp),%rax
  2298eb:	00 
  2298ec:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2298f1:	48 8b 84 24 b0 10 00 	mov    0x10b0(%rsp),%rax
  2298f8:	00 
  2298f9:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  229900:	00 
            breakpoint: InterruptDescriptorEntry::empty(),
  229901:	e8 ea 90 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229906:	48 89 94 24 c0 10 00 	mov    %rdx,0x10c0(%rsp)
  22990d:	00 
  22990e:	48 89 84 24 b8 10 00 	mov    %rax,0x10b8(%rsp)
  229915:	00 
  229916:	48 8b 84 24 b8 10 00 	mov    0x10b8(%rsp),%rax
  22991d:	00 
  22991e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  229925:	00 
  229926:	48 8b 84 24 c0 10 00 	mov    0x10c0(%rsp),%rax
  22992d:	00 
  22992e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  229935:	00 
            overflow: InterruptDescriptorEntry::empty(),
  229936:	e8 b5 90 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  22993b:	48 89 94 24 d0 10 00 	mov    %rdx,0x10d0(%rsp)
  229942:	00 
  229943:	48 89 84 24 c8 10 00 	mov    %rax,0x10c8(%rsp)
  22994a:	00 
  22994b:	48 8b 84 24 c8 10 00 	mov    0x10c8(%rsp),%rax
  229952:	00 
  229953:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22995a:	00 
  22995b:	48 8b 84 24 d0 10 00 	mov    0x10d0(%rsp),%rax
  229962:	00 
  229963:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22996a:	00 
            bound_range_exceeded: InterruptDescriptorEntry::empty(),
  22996b:	e8 80 90 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229970:	48 89 94 24 e0 10 00 	mov    %rdx,0x10e0(%rsp)
  229977:	00 
  229978:	48 89 84 24 d8 10 00 	mov    %rax,0x10d8(%rsp)
  22997f:	00 
  229980:	48 8b 84 24 d8 10 00 	mov    0x10d8(%rsp),%rax
  229987:	00 
  229988:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22998f:	00 
  229990:	48 8b 84 24 e0 10 00 	mov    0x10e0(%rsp),%rax
  229997:	00 
  229998:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22999f:	00 
            invalid_opcode: InterruptDescriptorEntry::empty(),
  2299a0:	e8 4b 90 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2299a5:	48 89 94 24 f0 10 00 	mov    %rdx,0x10f0(%rsp)
  2299ac:	00 
  2299ad:	48 89 84 24 e8 10 00 	mov    %rax,0x10e8(%rsp)
  2299b4:	00 
  2299b5:	48 8b 84 24 e8 10 00 	mov    0x10e8(%rsp),%rax
  2299bc:	00 
  2299bd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  2299c4:	00 
  2299c5:	48 8b 84 24 f0 10 00 	mov    0x10f0(%rsp),%rax
  2299cc:	00 
  2299cd:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2299d4:	00 
            device_not_available: InterruptDescriptorEntry::empty(),
  2299d5:	e8 16 90 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2299da:	48 89 94 24 00 11 00 	mov    %rdx,0x1100(%rsp)
  2299e1:	00 
  2299e2:	48 89 84 24 f8 10 00 	mov    %rax,0x10f8(%rsp)
  2299e9:	00 
  2299ea:	48 8b 84 24 f8 10 00 	mov    0x10f8(%rsp),%rax
  2299f1:	00 
  2299f2:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2299f9:	00 
  2299fa:	48 8b 84 24 00 11 00 	mov    0x1100(%rsp),%rax
  229a01:	00 
  229a02:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  229a09:	00 
            double_fault: InterruptDescriptorEntry::empty(),
  229a0a:	e8 61 8f fe ff       	callq  212970 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>
  229a0f:	48 89 94 24 10 11 00 	mov    %rdx,0x1110(%rsp)
  229a16:	00 
  229a17:	48 89 84 24 08 11 00 	mov    %rax,0x1108(%rsp)
  229a1e:	00 
  229a1f:	48 8b 84 24 08 11 00 	mov    0x1108(%rsp),%rax
  229a26:	00 
  229a27:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  229a2e:	00 
  229a2f:	48 8b 84 24 10 11 00 	mov    0x1110(%rsp),%rax
  229a36:	00 
  229a37:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  229a3e:	00 
            coprocessor_segment_overrun: InterruptDescriptorEntry::empty(),
  229a3f:	e8 ac 8f fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229a44:	48 89 94 24 20 11 00 	mov    %rdx,0x1120(%rsp)
  229a4b:	00 
  229a4c:	48 89 84 24 18 11 00 	mov    %rax,0x1118(%rsp)
  229a53:	00 
  229a54:	48 8b 84 24 18 11 00 	mov    0x1118(%rsp),%rax
  229a5b:	00 
  229a5c:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  229a63:	00 
  229a64:	48 8b 84 24 20 11 00 	mov    0x1120(%rsp),%rax
  229a6b:	00 
  229a6c:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  229a73:	00 
            invalid_tss: InterruptDescriptorEntry::empty(),
  229a74:	e8 b7 8e fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229a79:	48 89 94 24 30 11 00 	mov    %rdx,0x1130(%rsp)
  229a80:	00 
  229a81:	48 89 84 24 28 11 00 	mov    %rax,0x1128(%rsp)
  229a88:	00 
  229a89:	48 8b 84 24 28 11 00 	mov    0x1128(%rsp),%rax
  229a90:	00 
  229a91:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  229a98:	00 
  229a99:	48 8b 84 24 30 11 00 	mov    0x1130(%rsp),%rax
  229aa0:	00 
  229aa1:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  229aa8:	00 
            segment_not_present: InterruptDescriptorEntry::empty(),
  229aa9:	e8 82 8e fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229aae:	48 89 94 24 40 11 00 	mov    %rdx,0x1140(%rsp)
  229ab5:	00 
  229ab6:	48 89 84 24 38 11 00 	mov    %rax,0x1138(%rsp)
  229abd:	00 
  229abe:	48 8b 84 24 38 11 00 	mov    0x1138(%rsp),%rax
  229ac5:	00 
  229ac6:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  229acd:	00 
  229ace:	48 8b 84 24 40 11 00 	mov    0x1140(%rsp),%rax
  229ad5:	00 
  229ad6:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  229add:	00 
            stack_segment_fault: InterruptDescriptorEntry::empty(),
  229ade:	e8 4d 8e fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229ae3:	48 89 94 24 50 11 00 	mov    %rdx,0x1150(%rsp)
  229aea:	00 
  229aeb:	48 89 84 24 48 11 00 	mov    %rax,0x1148(%rsp)
  229af2:	00 
  229af3:	48 8b 84 24 48 11 00 	mov    0x1148(%rsp),%rax
  229afa:	00 
  229afb:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  229b02:	00 
  229b03:	48 8b 84 24 50 11 00 	mov    0x1150(%rsp),%rax
  229b0a:	00 
  229b0b:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  229b12:	00 
            general_protection_fault: InterruptDescriptorEntry::empty(),
  229b13:	e8 18 8e fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229b18:	48 89 94 24 60 11 00 	mov    %rdx,0x1160(%rsp)
  229b1f:	00 
  229b20:	48 89 84 24 58 11 00 	mov    %rax,0x1158(%rsp)
  229b27:	00 
  229b28:	48 8b 84 24 58 11 00 	mov    0x1158(%rsp),%rax
  229b2f:	00 
  229b30:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  229b37:	00 
  229b38:	48 8b 84 24 60 11 00 	mov    0x1160(%rsp),%rax
  229b3f:	00 
  229b40:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  229b47:	00 
            page_fault: InterruptDescriptorEntry::empty(),
  229b48:	e8 e3 8e fe ff       	callq  212a30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>
  229b4d:	48 89 94 24 70 11 00 	mov    %rdx,0x1170(%rsp)
  229b54:	00 
  229b55:	48 89 84 24 68 11 00 	mov    %rax,0x1168(%rsp)
  229b5c:	00 
  229b5d:	48 8b 84 24 68 11 00 	mov    0x1168(%rsp),%rax
  229b64:	00 
  229b65:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  229b6c:	00 
  229b6d:	48 8b 84 24 70 11 00 	mov    0x1170(%rsp),%rax
  229b74:	00 
  229b75:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  229b7c:	00 
            reserved_1: InterruptDescriptorEntry::empty(),
  229b7d:	e8 6e 8e fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229b82:	48 89 94 24 80 11 00 	mov    %rdx,0x1180(%rsp)
  229b89:	00 
  229b8a:	48 89 84 24 78 11 00 	mov    %rax,0x1178(%rsp)
  229b91:	00 
  229b92:	48 8b 84 24 78 11 00 	mov    0x1178(%rsp),%rax
  229b99:	00 
  229b9a:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  229ba1:	00 
  229ba2:	48 8b 84 24 80 11 00 	mov    0x1180(%rsp),%rax
  229ba9:	00 
  229baa:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  229bb1:	00 
            x87_floating_point: InterruptDescriptorEntry::empty(),
  229bb2:	e8 39 8e fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229bb7:	48 89 94 24 90 11 00 	mov    %rdx,0x1190(%rsp)
  229bbe:	00 
  229bbf:	48 89 84 24 88 11 00 	mov    %rax,0x1188(%rsp)
  229bc6:	00 
  229bc7:	48 8b 84 24 88 11 00 	mov    0x1188(%rsp),%rax
  229bce:	00 
  229bcf:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  229bd6:	00 
  229bd7:	48 8b 84 24 90 11 00 	mov    0x1190(%rsp),%rax
  229bde:	00 
  229bdf:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  229be6:	00 
            alignment_check: InterruptDescriptorEntry::empty(),
  229be7:	e8 44 8d fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229bec:	48 89 94 24 a0 11 00 	mov    %rdx,0x11a0(%rsp)
  229bf3:	00 
  229bf4:	48 89 84 24 98 11 00 	mov    %rax,0x1198(%rsp)
  229bfb:	00 
  229bfc:	48 8b 84 24 98 11 00 	mov    0x1198(%rsp),%rax
  229c03:	00 
  229c04:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  229c0b:	00 
  229c0c:	48 8b 84 24 a0 11 00 	mov    0x11a0(%rsp),%rax
  229c13:	00 
  229c14:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  229c1b:	00 
            machine_check: InterruptDescriptorEntry::empty(),
  229c1c:	e8 8f 8d fe ff       	callq  2129b0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hac5a2b431e8a6007E>
  229c21:	48 89 94 24 b0 11 00 	mov    %rdx,0x11b0(%rsp)
  229c28:	00 
  229c29:	48 89 84 24 a8 11 00 	mov    %rax,0x11a8(%rsp)
  229c30:	00 
  229c31:	48 8b 84 24 a8 11 00 	mov    0x11a8(%rsp),%rax
  229c38:	00 
  229c39:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  229c40:	00 
  229c41:	48 8b 84 24 b0 11 00 	mov    0x11b0(%rsp),%rax
  229c48:	00 
  229c49:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  229c50:	00 
            simd_floating_point: InterruptDescriptorEntry::empty(),
  229c51:	e8 9a 8d fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229c56:	48 89 94 24 c0 11 00 	mov    %rdx,0x11c0(%rsp)
  229c5d:	00 
  229c5e:	48 89 84 24 b8 11 00 	mov    %rax,0x11b8(%rsp)
  229c65:	00 
  229c66:	48 8b 84 24 b8 11 00 	mov    0x11b8(%rsp),%rax
  229c6d:	00 
  229c6e:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  229c75:	00 
  229c76:	48 8b 84 24 c0 11 00 	mov    0x11c0(%rsp),%rax
  229c7d:	00 
  229c7e:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  229c85:	00 
            virtualization: InterruptDescriptorEntry::empty(),
  229c86:	e8 65 8d fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229c8b:	48 89 94 24 d0 11 00 	mov    %rdx,0x11d0(%rsp)
  229c92:	00 
  229c93:	48 89 84 24 c8 11 00 	mov    %rax,0x11c8(%rsp)
  229c9a:	00 
  229c9b:	48 8b 84 24 c8 11 00 	mov    0x11c8(%rsp),%rax
  229ca2:	00 
  229ca3:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  229caa:	00 
  229cab:	48 8b 84 24 d0 11 00 	mov    0x11d0(%rsp),%rax
  229cb2:	00 
  229cb3:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  229cba:	00 
            reserved_2: [InterruptDescriptorEntry::empty(); 9],
  229cbb:	e8 30 8d fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229cc0:	48 89 94 24 e0 11 00 	mov    %rdx,0x11e0(%rsp)
  229cc7:	00 
  229cc8:	48 89 84 24 d8 11 00 	mov    %rax,0x11d8(%rsp)
  229ccf:	00 
  229cd0:	48 8b 84 24 d8 11 00 	mov    0x11d8(%rsp),%rax
  229cd7:	00 
  229cd8:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  229cdf:	00 
  229ce0:	48 8b 84 24 e0 11 00 	mov    0x11e0(%rsp),%rax
  229ce7:	00 
  229ce8:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  229cef:	00 
  229cf0:	48 8d 84 24 a8 01 00 	lea    0x1a8(%rsp),%rax
  229cf7:	00 
  229cf8:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  229cff:	00 
  229d00:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
  229d07:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  229d0c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  229d11:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  229d16:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  229d1b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  229d20:	48 39 c8             	cmp    %rcx,%rax
  229d23:	74 27                	je     229d4c <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x4ec>
  229d25:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  229d2a:	48 8b 8c 24 38 02 00 	mov    0x238(%rsp),%rcx
  229d31:	00 
  229d32:	48 89 08             	mov    %rcx,(%rax)
  229d35:	48 8b 8c 24 40 02 00 	mov    0x240(%rsp),%rcx
  229d3c:	00 
  229d3d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  229d41:	48 83 c0 10          	add    $0x10,%rax
  229d45:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  229d4a:	eb c5                	jmp    229d11 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x4b1>
            security_exception: InterruptDescriptorEntry::empty(),
  229d4c:	e8 df 8b fe ff       	callq  212930 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  229d51:	48 89 94 24 f0 11 00 	mov    %rdx,0x11f0(%rsp)
  229d58:	00 
  229d59:	48 89 84 24 e8 11 00 	mov    %rax,0x11e8(%rsp)
  229d60:	00 
  229d61:	48 8b 84 24 e8 11 00 	mov    0x11e8(%rsp),%rax
  229d68:	00 
  229d69:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  229d70:	00 
  229d71:	48 8b 84 24 f0 11 00 	mov    0x11f0(%rsp),%rax
  229d78:	00 
  229d79:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  229d80:	00 
            reserved_3: InterruptDescriptorEntry::empty(),
  229d81:	e8 6a 8c fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229d86:	48 89 94 24 00 12 00 	mov    %rdx,0x1200(%rsp)
  229d8d:	00 
  229d8e:	48 89 84 24 f8 11 00 	mov    %rax,0x11f8(%rsp)
  229d95:	00 
  229d96:	48 8b 84 24 f8 11 00 	mov    0x11f8(%rsp),%rax
  229d9d:	00 
  229d9e:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  229da5:	00 
  229da6:	48 8b 84 24 00 12 00 	mov    0x1200(%rsp),%rax
  229dad:	00 
  229dae:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  229db5:	00 
            interrupts: [InterruptDescriptorEntry::empty(); 16],
  229db6:	e8 35 8c fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229dbb:	48 89 94 24 10 12 00 	mov    %rdx,0x1210(%rsp)
  229dc2:	00 
  229dc3:	48 89 84 24 08 12 00 	mov    %rax,0x1208(%rsp)
  229dca:	00 
  229dcb:	48 8b 84 24 08 12 00 	mov    0x1208(%rsp),%rax
  229dd2:	00 
  229dd3:	48 89 84 24 68 03 00 	mov    %rax,0x368(%rsp)
  229dda:	00 
  229ddb:	48 8b 84 24 10 12 00 	mov    0x1210(%rsp),%rax
  229de2:	00 
  229de3:	48 89 84 24 70 03 00 	mov    %rax,0x370(%rsp)
  229dea:	00 
  229deb:	48 8d 84 24 68 02 00 	lea    0x268(%rsp),%rax
  229df2:	00 
  229df3:	48 8d 8c 24 68 02 00 	lea    0x268(%rsp),%rcx
  229dfa:	00 
  229dfb:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
  229e02:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  229e07:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  229e0c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  229e11:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  229e16:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  229e1b:	48 39 c8             	cmp    %rcx,%rax
  229e1e:	74 27                	je     229e47 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x5e7>
  229e20:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  229e25:	48 8b 8c 24 68 03 00 	mov    0x368(%rsp),%rcx
  229e2c:	00 
  229e2d:	48 89 08             	mov    %rcx,(%rax)
  229e30:	48 8b 8c 24 70 03 00 	mov    0x370(%rsp),%rcx
  229e37:	00 
  229e38:	48 89 48 08          	mov    %rcx,0x8(%rax)
  229e3c:	48 83 c0 10          	add    $0x10,%rax
  229e40:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  229e45:	eb c5                	jmp    229e0c <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x5ac>
            naked_0: InterruptDescriptorEntry::empty(),
  229e47:	e8 24 8c fe ff       	callq  212a70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf4ab43b81317ed53E>
  229e4c:	48 89 94 24 20 12 00 	mov    %rdx,0x1220(%rsp)
  229e53:	00 
  229e54:	48 89 84 24 18 12 00 	mov    %rax,0x1218(%rsp)
  229e5b:	00 
  229e5c:	48 8b 84 24 18 12 00 	mov    0x1218(%rsp),%rax
  229e63:	00 
  229e64:	48 89 84 24 78 03 00 	mov    %rax,0x378(%rsp)
  229e6b:	00 
  229e6c:	48 8b 84 24 20 12 00 	mov    0x1220(%rsp),%rax
  229e73:	00 
  229e74:	48 89 84 24 80 03 00 	mov    %rax,0x380(%rsp)
  229e7b:	00 
            interrupts_1: [InterruptDescriptorEntry::empty(); 239 - 32],
  229e7c:	e8 6f 8b fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  229e81:	48 89 94 24 30 12 00 	mov    %rdx,0x1230(%rsp)
  229e88:	00 
  229e89:	48 89 84 24 28 12 00 	mov    %rax,0x1228(%rsp)
  229e90:	00 
  229e91:	48 8b 84 24 28 12 00 	mov    0x1228(%rsp),%rax
  229e98:	00 
  229e99:	48 89 84 24 78 10 00 	mov    %rax,0x1078(%rsp)
  229ea0:	00 
  229ea1:	48 8b 84 24 30 12 00 	mov    0x1230(%rsp),%rax
  229ea8:	00 
  229ea9:	48 89 84 24 80 10 00 	mov    %rax,0x1080(%rsp)
  229eb0:	00 
  229eb1:	48 8d 84 24 88 03 00 	lea    0x388(%rsp),%rax
  229eb8:	00 
  229eb9:	48 8d 8c 24 88 03 00 	lea    0x388(%rsp),%rcx
  229ec0:	00 
  229ec1:	48 81 c1 f0 0c 00 00 	add    $0xcf0,%rcx
  229ec8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  229ecd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  229ed2:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  229ed7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  229edc:	48 89 04 24          	mov    %rax,(%rsp)
  229ee0:	48 39 c8             	cmp    %rcx,%rax
  229ee3:	74 26                	je     229f0b <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x6ab>
  229ee5:	48 8b 04 24          	mov    (%rsp),%rax
  229ee9:	48 8b 8c 24 78 10 00 	mov    0x1078(%rsp),%rcx
  229ef0:	00 
  229ef1:	48 89 08             	mov    %rcx,(%rax)
  229ef4:	48 8b 8c 24 80 10 00 	mov    0x1080(%rsp),%rcx
  229efb:	00 
  229efc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  229f00:	48 83 c0 10          	add    $0x10,%rax
  229f04:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  229f09:	eb c7                	jmp    229ed2 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE+0x672>
  229f0b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        InterruptDescriptorTable {
  229f10:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  229f15:	48 89 07             	mov    %rax,(%rdi)
  229f18:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  229f1d:	48 89 47 08          	mov    %rax,0x8(%rdi)
  229f21:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  229f26:	48 89 47 10          	mov    %rax,0x10(%rdi)
  229f2a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  229f2f:	48 89 47 18          	mov    %rax,0x18(%rdi)
  229f33:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  229f38:	48 89 47 20          	mov    %rax,0x20(%rdi)
  229f3c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  229f43:	00 
  229f44:	48 89 47 28          	mov    %rax,0x28(%rdi)
  229f48:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  229f4f:	00 
  229f50:	48 89 47 30          	mov    %rax,0x30(%rdi)
  229f54:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  229f5b:	00 
  229f5c:	48 89 47 38          	mov    %rax,0x38(%rdi)
  229f60:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  229f67:	00 
  229f68:	48 89 47 40          	mov    %rax,0x40(%rdi)
  229f6c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  229f73:	00 
  229f74:	48 89 47 48          	mov    %rax,0x48(%rdi)
  229f78:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  229f7f:	00 
  229f80:	48 89 47 50          	mov    %rax,0x50(%rdi)
  229f84:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  229f8b:	00 
  229f8c:	48 89 47 58          	mov    %rax,0x58(%rdi)
  229f90:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  229f97:	00 
  229f98:	48 89 47 60          	mov    %rax,0x60(%rdi)
  229f9c:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  229fa3:	00 
  229fa4:	48 89 47 68          	mov    %rax,0x68(%rdi)
  229fa8:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  229faf:	00 
  229fb0:	48 89 47 70          	mov    %rax,0x70(%rdi)
  229fb4:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  229fbb:	00 
  229fbc:	48 89 47 78          	mov    %rax,0x78(%rdi)
  229fc0:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  229fc7:	00 
  229fc8:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  229fcf:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  229fd6:	00 
  229fd7:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
  229fde:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  229fe5:	00 
  229fe6:	48 89 87 90 00 00 00 	mov    %rax,0x90(%rdi)
  229fed:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  229ff4:	00 
  229ff5:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
  229ffc:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22a003:	00 
  22a004:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
  22a00b:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  22a012:	00 
  22a013:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)
  22a01a:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22a021:	00 
  22a022:	48 89 87 b0 00 00 00 	mov    %rax,0xb0(%rdi)
  22a029:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22a030:	00 
  22a031:	48 89 87 b8 00 00 00 	mov    %rax,0xb8(%rdi)
  22a038:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  22a03f:	00 
  22a040:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
  22a047:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  22a04e:	00 
  22a04f:	48 89 87 c8 00 00 00 	mov    %rax,0xc8(%rdi)
  22a056:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  22a05d:	00 
  22a05e:	48 89 87 d0 00 00 00 	mov    %rax,0xd0(%rdi)
  22a065:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  22a06c:	00 
  22a06d:	48 89 87 d8 00 00 00 	mov    %rax,0xd8(%rdi)
  22a074:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  22a07b:	00 
  22a07c:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  22a083:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  22a08a:	00 
  22a08b:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
  22a092:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  22a099:	00 
  22a09a:	48 89 87 f0 00 00 00 	mov    %rax,0xf0(%rdi)
  22a0a1:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  22a0a8:	00 
  22a0a9:	48 89 87 f8 00 00 00 	mov    %rax,0xf8(%rdi)
  22a0b0:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  22a0b7:	00 
  22a0b8:	48 89 87 00 01 00 00 	mov    %rax,0x100(%rdi)
  22a0bf:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  22a0c6:	00 
  22a0c7:	48 89 87 08 01 00 00 	mov    %rax,0x108(%rdi)
  22a0ce:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  22a0d5:	00 
  22a0d6:	48 89 87 10 01 00 00 	mov    %rax,0x110(%rdi)
  22a0dd:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  22a0e4:	00 
  22a0e5:	48 89 87 18 01 00 00 	mov    %rax,0x118(%rdi)
  22a0ec:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  22a0f3:	00 
  22a0f4:	48 89 87 20 01 00 00 	mov    %rax,0x120(%rdi)
  22a0fb:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  22a102:	00 
  22a103:	48 89 87 28 01 00 00 	mov    %rax,0x128(%rdi)
  22a10a:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  22a111:	00 
  22a112:	48 89 87 30 01 00 00 	mov    %rax,0x130(%rdi)
  22a119:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  22a120:	00 
  22a121:	48 89 87 38 01 00 00 	mov    %rax,0x138(%rdi)
  22a128:	48 8b 84 24 98 01 00 	mov    0x198(%rsp),%rax
  22a12f:	00 
  22a130:	48 89 87 40 01 00 00 	mov    %rax,0x140(%rdi)
  22a137:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  22a13e:	00 
  22a13f:	48 89 87 48 01 00 00 	mov    %rax,0x148(%rdi)
  22a146:	48 81 c7 50 01 00 00 	add    $0x150,%rdi
  22a14d:	48 8d b4 24 a8 01 00 	lea    0x1a8(%rsp),%rsi
  22a154:	00 
  22a155:	ba 90 00 00 00       	mov    $0x90,%edx
  22a15a:	e8 91 eb 00 00       	callq  238cf0 <memcpy>
  22a15f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  22a164:	48 8b 84 24 48 02 00 	mov    0x248(%rsp),%rax
  22a16b:	00 
  22a16c:	48 89 87 e0 01 00 00 	mov    %rax,0x1e0(%rdi)
  22a173:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  22a17a:	00 
  22a17b:	48 89 87 e8 01 00 00 	mov    %rax,0x1e8(%rdi)
  22a182:	48 8b 84 24 58 02 00 	mov    0x258(%rsp),%rax
  22a189:	00 
  22a18a:	48 89 87 f0 01 00 00 	mov    %rax,0x1f0(%rdi)
  22a191:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  22a198:	00 
  22a199:	48 89 87 f8 01 00 00 	mov    %rax,0x1f8(%rdi)
  22a1a0:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
  22a1a7:	48 8d b4 24 68 02 00 	lea    0x268(%rsp),%rsi
  22a1ae:	00 
  22a1af:	ba 00 01 00 00       	mov    $0x100,%edx
  22a1b4:	e8 37 eb 00 00       	callq  238cf0 <memcpy>
  22a1b9:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  22a1be:	48 8b 84 24 78 03 00 	mov    0x378(%rsp),%rax
  22a1c5:	00 
  22a1c6:	48 89 87 00 03 00 00 	mov    %rax,0x300(%rdi)
  22a1cd:	48 8b 84 24 80 03 00 	mov    0x380(%rsp),%rax
  22a1d4:	00 
  22a1d5:	48 89 87 08 03 00 00 	mov    %rax,0x308(%rdi)
  22a1dc:	48 81 c7 10 03 00 00 	add    $0x310,%rdi
  22a1e3:	48 8d b4 24 88 03 00 	lea    0x388(%rsp),%rsi
  22a1ea:	00 
  22a1eb:	ba f0 0c 00 00       	mov    $0xcf0,%edx
  22a1f0:	e8 fb ea 00 00       	callq  238cf0 <memcpy>
  22a1f5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        }
    }
  22a1fa:	48 81 c4 38 12 00 00 	add    $0x1238,%rsp
  22a201:	c3                   	retq   
  22a202:	cc                   	int3   
  22a203:	cc                   	int3   
  22a204:	cc                   	int3   
  22a205:	cc                   	int3   
  22a206:	cc                   	int3   
  22a207:	cc                   	int3   
  22a208:	cc                   	int3   
  22a209:	cc                   	int3   
  22a20a:	cc                   	int3   
  22a20b:	cc                   	int3   
  22a20c:	cc                   	int3   
  22a20d:	cc                   	int3   
  22a20e:	cc                   	int3   
  22a20f:	cc                   	int3   

000000000022a210 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h918048775fc15ab9E>:

    pub fn as_pointer(&self) -> IDTPointer {
  22a210:	48 83 ec 28          	sub    $0x28,%rsp
  22a214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22a219:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        IDTPointer {
            base_addr: (self as *const _) as u64,
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  22a21e:	b8 00 10 00 00       	mov    $0x1000,%eax
  22a223:	48 83 e8 01          	sub    $0x1,%rax
  22a227:	48 89 04 24          	mov    %rax,(%rsp)
  22a22b:	0f 92 c0             	setb   %al
  22a22e:	a8 01                	test   $0x1,%al
  22a230:	75 24                	jne    22a256 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h918048775fc15ab9E+0x46>
  22a232:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22a237:	48 8b 0c 24          	mov    (%rsp),%rcx
        IDTPointer {
  22a23b:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
  22a240:	48 89 44 24 12       	mov    %rax,0x12(%rsp)
        }
    }
  22a245:	0f b7 44 24 18       	movzwl 0x18(%rsp),%eax
  22a24a:	89 c2                	mov    %eax,%edx
  22a24c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22a251:	48 83 c4 28          	add    $0x28,%rsp
  22a255:	c3                   	retq   
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  22a256:	48 8d 3d 93 8f fd ff 	lea    -0x2706d(%rip),%rdi        # 2031f0 <str.0>
  22a25d:	48 8d 15 14 26 01 00 	lea    0x12614(%rip),%rdx        # 23c878 <memcmp+0x3b38>
  22a264:	be 21 00 00 00       	mov    $0x21,%esi
  22a269:	e8 82 b9 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22a26e:	0f 0b                	ud2    

000000000022a270 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17ha4a76b20fb1429c4E>:

    pub fn load_into_cpu(&self) {
  22a270:	48 83 ec 28          	sub    $0x28,%rsp
  22a274:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let pointer = self.as_pointer();
  22a279:	e8 92 ff ff ff       	callq  22a210 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h918048775fc15ab9E>
  22a27e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a283:	66 89 d0             	mov    %dx,%ax
  22a286:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  22a28b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22a290:	48 89 04 24          	mov    %rax,(%rsp)
  22a294:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  22a299:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
  22a29e:	48 89 e0             	mov    %rsp,%rax
        unsafe {
            asm!(
  22a2a1:	0f 01 18             	lidt   (%rax)
                "lidt [{}]", in(reg) &pointer,
                options(nomem, nostack, preserves_flags)
            );
        }
    }
  22a2a4:	48 83 c4 28          	add    $0x28,%rsp
  22a2a8:	c3                   	retq   
  22a2a9:	cc                   	int3   
  22a2aa:	cc                   	int3   
  22a2ab:	cc                   	int3   
  22a2ac:	cc                   	int3   
  22a2ad:	cc                   	int3   
  22a2ae:	cc                   	int3   
  22a2af:	cc                   	int3   

000000000022a2b0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>:
}

pub fn prepare_default_handle(
  22a2b0:	48 83 ec 38          	sub    $0x38,%rsp
  22a2b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: DefaultHandlerFunction,
) -> InterruptDescriptorEntry<DefaultHandlerFunction> {
    let handle_addr = func as u64;
  22a2b9:	48 89 f8             	mov    %rdi,%rax
  22a2bc:	48 89 04 24          	mov    %rax,(%rsp)
  22a2c0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  22a2c5:	e8 26 87 fe ff       	callq  2129f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  22a2ca:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22a2cf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22a2d4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22a2d9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a2de:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22a2e3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a2e8:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  22a2ec:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  22a2f1:	e8 da 8a fe ff       	callq  212dd0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hc36dc393644916b4E>
    return idt_entry;
}
  22a2f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22a2fb:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a300:	48 83 c4 38          	add    $0x38,%rsp
  22a304:	c3                   	retq   
  22a305:	cc                   	int3   
  22a306:	cc                   	int3   
  22a307:	cc                   	int3   
  22a308:	cc                   	int3   
  22a309:	cc                   	int3   
  22a30a:	cc                   	int3   
  22a30b:	cc                   	int3   
  22a30c:	cc                   	int3   
  22a30d:	cc                   	int3   
  22a30e:	cc                   	int3   
  22a30f:	cc                   	int3   

000000000022a310 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3413212289963e19E>:

pub fn prepare_no_ret_error_code_handle(
  22a310:	48 83 ec 38          	sub    $0x38,%rsp
  22a314:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: HandlerFuncNoReturnWithErr,
) -> InterruptDescriptorEntry<HandlerFuncNoReturnWithErr> {
    let handle_addr = func as u64;
  22a319:	48 89 f8             	mov    %rdi,%rax
  22a31c:	48 89 04 24          	mov    %rax,(%rsp)
  22a320:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  22a325:	e8 46 86 fe ff       	callq  212970 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>
  22a32a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22a32f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22a334:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22a339:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a33e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22a343:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a348:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  22a34c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  22a351:	e8 ca 8a fe ff       	callq  212e20 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf6fc0362a19ebe78E>
    return idt_entry;
}
  22a356:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22a35b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a360:	48 83 c4 38          	add    $0x38,%rsp
  22a364:	c3                   	retq   
  22a365:	cc                   	int3   
  22a366:	cc                   	int3   
  22a367:	cc                   	int3   
  22a368:	cc                   	int3   
  22a369:	cc                   	int3   
  22a36a:	cc                   	int3   
  22a36b:	cc                   	int3   
  22a36c:	cc                   	int3   
  22a36d:	cc                   	int3   
  22a36e:	cc                   	int3   
  22a36f:	cc                   	int3   

000000000022a370 <_ZN9r3_kernel3cpu10interrupts26prepare_page_fault_handler17h49693b7356911dbaE>:

pub fn prepare_page_fault_handler(
  22a370:	48 83 ec 38          	sub    $0x38,%rsp
  22a374:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: PageFaultHandlerType,
) -> InterruptDescriptorEntry<PageFaultHandlerType> {
    let handle_addr = func as u64;
  22a379:	48 89 f8             	mov    %rdi,%rax
  22a37c:	48 89 04 24          	mov    %rax,(%rsp)
  22a380:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  22a385:	e8 a6 86 fe ff       	callq  212a30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>
  22a38a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22a38f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22a394:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22a399:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a39e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22a3a3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a3a8:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  22a3ac:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  22a3b1:	e8 7a 89 fe ff       	callq  212d30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h45b4c043149096bbE>
    return idt_entry;
}
  22a3b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22a3bb:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a3c0:	48 83 c4 38          	add    $0x38,%rsp
  22a3c4:	c3                   	retq   
  22a3c5:	cc                   	int3   
  22a3c6:	cc                   	int3   
  22a3c7:	cc                   	int3   
  22a3c8:	cc                   	int3   
  22a3c9:	cc                   	int3   
  22a3ca:	cc                   	int3   
  22a3cb:	cc                   	int3   
  22a3cc:	cc                   	int3   
  22a3cd:	cc                   	int3   
  22a3ce:	cc                   	int3   
  22a3cf:	cc                   	int3   

000000000022a3d0 <_ZN9r3_kernel3cpu10interrupts21prepare_naked_handler17h2659abea1fa354fbE>:

pub fn prepare_naked_handler(func: NakedHandlerType) -> InterruptDescriptorEntry<NakedHandlerType> {
  22a3d0:	48 83 ec 38          	sub    $0x38,%rsp
  22a3d4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    let handle_addr = func as u64;
  22a3d9:	48 89 f8             	mov    %rdi,%rax
  22a3dc:	48 89 04 24          	mov    %rax,(%rsp)
  22a3e0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  22a3e5:	e8 86 86 fe ff       	callq  212a70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf4ab43b81317ed53E>
  22a3ea:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22a3ef:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22a3f4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22a3f9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a3fe:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22a403:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a408:	48 8b 34 24          	mov    (%rsp),%rsi

    idt_entry.set_handler(handle_addr);
  22a40c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  22a411:	e8 6a 89 fe ff       	callq  212d80 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h7367ced91298c5daE>
    return idt_entry;
}
  22a416:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22a41b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a420:	48 83 c4 38          	add    $0x38,%rsp
  22a424:	c3                   	retq   
  22a425:	cc                   	int3   
  22a426:	cc                   	int3   
  22a427:	cc                   	int3   
  22a428:	cc                   	int3   
  22a429:	cc                   	int3   
  22a42a:	cc                   	int3   
  22a42b:	cc                   	int3   
  22a42c:	cc                   	int3   
  22a42d:	cc                   	int3   
  22a42e:	cc                   	int3   
  22a42f:	cc                   	int3   

000000000022a430 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hf65b60d894c651b0E>:

#[unstable(feature = "ptr_internals", issue = "none")]
#[rustc_const_unstable(feature = "const_convert", issue = "88674")]
impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
    #[inline]
    fn from(unique: Unique<T>) -> Self {
  22a430:	48 83 ec 18          	sub    $0x18,%rsp
  22a434:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // SAFETY: A Unique pointer cannot be null, so the conditions for
        // new_unchecked() are respected.
        unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  22a439:	e8 02 f1 fe ff       	callq  219540 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h42bf14ac60cef2f4E>
  22a43e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a443:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22a448:	e8 e3 8f 00 00       	callq  233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  22a44d:	48 89 04 24          	mov    %rax,(%rsp)
  22a451:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22a455:	48 83 c4 18          	add    $0x18,%rsp
  22a459:	c3                   	retq   
  22a45a:	cc                   	int3   
  22a45b:	cc                   	int3   
  22a45c:	cc                   	int3   
  22a45d:	cc                   	int3   
  22a45e:	cc                   	int3   
  22a45f:	cc                   	int3   

000000000022a460 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h00b7b9850ee15efeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a460:	48 83 ec 10          	sub    $0x10,%rsp
  22a464:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a469:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22a46d:	48 8b 04 24          	mov    (%rsp),%rax
  22a471:	48 83 c4 10          	add    $0x10,%rsp
  22a475:	c3                   	retq   
  22a476:	cc                   	int3   
  22a477:	cc                   	int3   
  22a478:	cc                   	int3   
  22a479:	cc                   	int3   
  22a47a:	cc                   	int3   
  22a47b:	cc                   	int3   
  22a47c:	cc                   	int3   
  22a47d:	cc                   	int3   
  22a47e:	cc                   	int3   
  22a47f:	cc                   	int3   

000000000022a480 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a480:	48 83 ec 10          	sub    $0x10,%rsp
  22a484:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a489:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22a48d:	48 8b 04 24          	mov    (%rsp),%rax
  22a491:	48 83 c4 10          	add    $0x10,%rsp
  22a495:	c3                   	retq   
  22a496:	cc                   	int3   
  22a497:	cc                   	int3   
  22a498:	cc                   	int3   
  22a499:	cc                   	int3   
  22a49a:	cc                   	int3   
  22a49b:	cc                   	int3   
  22a49c:	cc                   	int3   
  22a49d:	cc                   	int3   
  22a49e:	cc                   	int3   
  22a49f:	cc                   	int3   

000000000022a4a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hbec36078dad2cf32E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a4a0:	48 83 ec 20          	sub    $0x20,%rsp
  22a4a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22a4a9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a4ae:	48 89 3c 24          	mov    %rdi,(%rsp)
  22a4b2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  22a4b7:	48 8b 04 24          	mov    (%rsp),%rax
  22a4bb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22a4c0:	48 83 c4 20          	add    $0x20,%rsp
  22a4c4:	c3                   	retq   
  22a4c5:	cc                   	int3   
  22a4c6:	cc                   	int3   
  22a4c7:	cc                   	int3   
  22a4c8:	cc                   	int3   
  22a4c9:	cc                   	int3   
  22a4ca:	cc                   	int3   
  22a4cb:	cc                   	int3   
  22a4cc:	cc                   	int3   
  22a4cd:	cc                   	int3   
  22a4ce:	cc                   	int3   
  22a4cf:	cc                   	int3   

000000000022a4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a4d0:	48 83 ec 10          	sub    $0x10,%rsp
  22a4d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a4d9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22a4dd:	48 8b 04 24          	mov    (%rsp),%rax
  22a4e1:	48 83 c4 10          	add    $0x10,%rsp
  22a4e5:	c3                   	retq   
  22a4e6:	cc                   	int3   
  22a4e7:	cc                   	int3   
  22a4e8:	cc                   	int3   
  22a4e9:	cc                   	int3   
  22a4ea:	cc                   	int3   
  22a4eb:	cc                   	int3   
  22a4ec:	cc                   	int3   
  22a4ed:	cc                   	int3   
  22a4ee:	cc                   	int3   
  22a4ef:	cc                   	int3   

000000000022a4f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a4f0:	48 83 ec 10          	sub    $0x10,%rsp
  22a4f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a4f9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22a4fd:	48 8b 04 24          	mov    (%rsp),%rax
  22a501:	48 83 c4 10          	add    $0x10,%rsp
  22a505:	c3                   	retq   
  22a506:	cc                   	int3   
  22a507:	cc                   	int3   
  22a508:	cc                   	int3   
  22a509:	cc                   	int3   
  22a50a:	cc                   	int3   
  22a50b:	cc                   	int3   
  22a50c:	cc                   	int3   
  22a50d:	cc                   	int3   
  22a50e:	cc                   	int3   
  22a50f:	cc                   	int3   

000000000022a510 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfb95411dabe00a01E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22a510:	48 83 ec 10          	sub    $0x10,%rsp
  22a514:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22a519:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22a51d:	48 8b 04 24          	mov    (%rsp),%rax
  22a521:	48 83 c4 10          	add    $0x10,%rsp
  22a525:	c3                   	retq   
  22a526:	cc                   	int3   
  22a527:	cc                   	int3   
  22a528:	cc                   	int3   
  22a529:	cc                   	int3   
  22a52a:	cc                   	int3   
  22a52b:	cc                   	int3   
  22a52c:	cc                   	int3   
  22a52d:	cc                   	int3   
  22a52e:	cc                   	int3   
  22a52f:	cc                   	int3   

000000000022a530 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85f07a89a7a7a8a1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  22a530:	48 83 ec 28          	sub    $0x28,%rsp
  22a534:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a539:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22a53e:	e8 dd 00 00 00       	callq  22a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  22a543:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a548:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a54d:	e8 be ff ff ff       	callq  22a510 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfb95411dabe00a01E>
  22a552:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a557:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a55c:	48 83 c4 28          	add    $0x28,%rsp
  22a560:	c3                   	retq   
  22a561:	cc                   	int3   
  22a562:	cc                   	int3   
  22a563:	cc                   	int3   
  22a564:	cc                   	int3   
  22a565:	cc                   	int3   
  22a566:	cc                   	int3   
  22a567:	cc                   	int3   
  22a568:	cc                   	int3   
  22a569:	cc                   	int3   
  22a56a:	cc                   	int3   
  22a56b:	cc                   	int3   
  22a56c:	cc                   	int3   
  22a56d:	cc                   	int3   
  22a56e:	cc                   	int3   
  22a56f:	cc                   	int3   

000000000022a570 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he83c423481392309E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  22a570:	48 83 ec 28          	sub    $0x28,%rsp
  22a574:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a579:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22a57e:	e8 9d 00 00 00       	callq  22a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  22a583:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a588:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a58d:	e8 3e ff ff ff       	callq  22a4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  22a592:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a597:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a59c:	48 83 c4 28          	add    $0x28,%rsp
  22a5a0:	c3                   	retq   
  22a5a1:	cc                   	int3   
  22a5a2:	cc                   	int3   
  22a5a3:	cc                   	int3   
  22a5a4:	cc                   	int3   
  22a5a5:	cc                   	int3   
  22a5a6:	cc                   	int3   
  22a5a7:	cc                   	int3   
  22a5a8:	cc                   	int3   
  22a5a9:	cc                   	int3   
  22a5aa:	cc                   	int3   
  22a5ab:	cc                   	int3   
  22a5ac:	cc                   	int3   
  22a5ad:	cc                   	int3   
  22a5ae:	cc                   	int3   
  22a5af:	cc                   	int3   

000000000022a5b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17heceef75a4b1639c3E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  22a5b0:	48 83 ec 28          	sub    $0x28,%rsp
  22a5b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a5b9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22a5be:	e8 5d 00 00 00       	callq  22a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  22a5c3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a5c8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a5cd:	e8 8e fe ff ff       	callq  22a460 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h00b7b9850ee15efeE>
  22a5d2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a5d7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a5dc:	48 83 c4 28          	add    $0x28,%rsp
  22a5e0:	c3                   	retq   
  22a5e1:	cc                   	int3   
  22a5e2:	cc                   	int3   
  22a5e3:	cc                   	int3   
  22a5e4:	cc                   	int3   
  22a5e5:	cc                   	int3   
  22a5e6:	cc                   	int3   
  22a5e7:	cc                   	int3   
  22a5e8:	cc                   	int3   
  22a5e9:	cc                   	int3   
  22a5ea:	cc                   	int3   
  22a5eb:	cc                   	int3   
  22a5ec:	cc                   	int3   
  22a5ed:	cc                   	int3   
  22a5ee:	cc                   	int3   
  22a5ef:	cc                   	int3   

000000000022a5f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4044b6540ffdc00bE>:
    pub const fn as_ptr(self) -> *mut T {
  22a5f0:	50                   	push   %rax
  22a5f1:	48 89 f8             	mov    %rdi,%rax
  22a5f4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22a5f8:	59                   	pop    %rcx
  22a5f9:	c3                   	retq   
  22a5fa:	cc                   	int3   
  22a5fb:	cc                   	int3   
  22a5fc:	cc                   	int3   
  22a5fd:	cc                   	int3   
  22a5fe:	cc                   	int3   
  22a5ff:	cc                   	int3   

000000000022a600 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h552a258b54bc04b4E>:
    pub const fn as_ptr(self) -> *mut T {
  22a600:	50                   	push   %rax
  22a601:	48 89 f8             	mov    %rdi,%rax
  22a604:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22a608:	59                   	pop    %rcx
  22a609:	c3                   	retq   
  22a60a:	cc                   	int3   
  22a60b:	cc                   	int3   
  22a60c:	cc                   	int3   
  22a60d:	cc                   	int3   
  22a60e:	cc                   	int3   
  22a60f:	cc                   	int3   

000000000022a610 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>:
    pub const fn as_ptr(self) -> *mut T {
  22a610:	50                   	push   %rax
  22a611:	48 89 f8             	mov    %rdi,%rax
  22a614:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22a618:	59                   	pop    %rcx
  22a619:	c3                   	retq   
  22a61a:	cc                   	int3   
  22a61b:	cc                   	int3   
  22a61c:	cc                   	int3   
  22a61d:	cc                   	int3   
  22a61e:	cc                   	int3   
  22a61f:	cc                   	int3   

000000000022a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>:
    pub const fn as_ptr(self) -> *mut T {
  22a620:	48 83 ec 10          	sub    $0x10,%rsp
  22a624:	48 89 f2             	mov    %rsi,%rdx
  22a627:	48 89 f8             	mov    %rdi,%rax
  22a62a:	48 89 04 24          	mov    %rax,(%rsp)
  22a62e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  22a633:	48 83 c4 10          	add    $0x10,%rsp
  22a637:	c3                   	retq   
  22a638:	cc                   	int3   
  22a639:	cc                   	int3   
  22a63a:	cc                   	int3   
  22a63b:	cc                   	int3   
  22a63c:	cc                   	int3   
  22a63d:	cc                   	int3   
  22a63e:	cc                   	int3   
  22a63f:	cc                   	int3   

000000000022a640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>:
    pub const fn as_ptr(self) -> *mut T {
  22a640:	50                   	push   %rax
  22a641:	48 89 f8             	mov    %rdi,%rax
  22a644:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22a648:	59                   	pop    %rcx
  22a649:	c3                   	retq   
  22a64a:	cc                   	int3   
  22a64b:	cc                   	int3   
  22a64c:	cc                   	int3   
  22a64d:	cc                   	int3   
  22a64e:	cc                   	int3   
  22a64f:	cc                   	int3   

000000000022a650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>:
    pub const fn as_ptr(self) -> *mut T {
  22a650:	50                   	push   %rax
  22a651:	48 89 f8             	mov    %rdi,%rax
  22a654:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22a658:	59                   	pop    %rcx
  22a659:	c3                   	retq   
  22a65a:	cc                   	int3   
  22a65b:	cc                   	int3   
  22a65c:	cc                   	int3   
  22a65d:	cc                   	int3   
  22a65e:	cc                   	int3   
  22a65f:	cc                   	int3   

000000000022a660 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h23db806e8169f4dcE>:
    pub const fn as_mut_ptr(self) -> *mut T {
  22a660:	48 83 ec 28          	sub    $0x28,%rsp
  22a664:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a669:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.as_non_null_ptr().as_ptr()
  22a66e:	e8 2d 00 00 00       	callq  22a6a0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h6b8bf6a4c591cb57E>
  22a673:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a678:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a67d:	e8 ce 8d 00 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  22a682:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a687:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a68c:	48 83 c4 28          	add    $0x28,%rsp
  22a690:	c3                   	retq   
  22a691:	cc                   	int3   
  22a692:	cc                   	int3   
  22a693:	cc                   	int3   
  22a694:	cc                   	int3   
  22a695:	cc                   	int3   
  22a696:	cc                   	int3   
  22a697:	cc                   	int3   
  22a698:	cc                   	int3   
  22a699:	cc                   	int3   
  22a69a:	cc                   	int3   
  22a69b:	cc                   	int3   
  22a69c:	cc                   	int3   
  22a69d:	cc                   	int3   
  22a69e:	cc                   	int3   
  22a69f:	cc                   	int3   

000000000022a6a0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h6b8bf6a4c591cb57E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
  22a6a0:	48 83 ec 48          	sub    $0x48,%rsp
  22a6a4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22a6a9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
  22a6ae:	e8 6d ff ff ff       	callq  22a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  22a6b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a6b8:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22a6bd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22a6c2:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22a6c7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22a6cc:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22a6d1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a6d6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a6db:	e8 50 8d 00 00       	callq  233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  22a6e0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a6e5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a6ea:	48 83 c4 48          	add    $0x48,%rsp
  22a6ee:	c3                   	retq   
  22a6ef:	cc                   	int3   

000000000022a6f0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
  22a6f0:	48 83 ec 48          	sub    $0x48,%rsp
  22a6f4:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22a6f9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22a6fe:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
  22a703:	e8 48 8d 00 00       	callq  233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  22a708:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22a70d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22a712:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22a717:	e8 94 9a 00 00       	callq  2341b0 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  22a71c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a721:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22a726:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22a72b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22a730:	e8 6b fd ff ff       	callq  22a4a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hbec36078dad2cf32E>
  22a735:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a73a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22a73f:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a744:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a749:	48 83 c4 48          	add    $0x48,%rsp
  22a74d:	c3                   	retq   
  22a74e:	cc                   	int3   
  22a74f:	cc                   	int3   

000000000022a750 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>:
    pub const fn len(self) -> usize {
  22a750:	48 83 ec 38          	sub    $0x38,%rsp
  22a754:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a759:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.as_ptr().len()
  22a75e:	e8 bd fe ff ff       	callq  22a620 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  22a763:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a768:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22a76d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22a772:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22a777:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22a77c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        metadata(self)
  22a781:	e8 1a 64 fe ff       	callq  210ba0 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>
  22a786:	48 89 04 24          	mov    %rax,(%rsp)
  22a78a:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22a78e:	48 83 c4 38          	add    $0x38,%rsp
  22a792:	c3                   	retq   
  22a793:	cc                   	int3   
  22a794:	cc                   	int3   
  22a795:	cc                   	int3   
  22a796:	cc                   	int3   
  22a797:	cc                   	int3   
  22a798:	cc                   	int3   
  22a799:	cc                   	int3   
  22a79a:	cc                   	int3   
  22a79b:	cc                   	int3   
  22a79c:	cc                   	int3   
  22a79d:	cc                   	int3   
  22a79e:	cc                   	int3   
  22a79f:	cc                   	int3   

000000000022a7a0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17hced56ca8bff65c61E>:
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  22a7a0:	48 83 ec 10          	sub    $0x10,%rsp
  22a7a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  22a7a8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22a7ad:	0f b6 06             	movzbl (%rsi),%eax
  22a7b0:	48 83 c4 10          	add    $0x10,%rsp
  22a7b4:	c3                   	retq   
  22a7b5:	cc                   	int3   
  22a7b6:	cc                   	int3   
  22a7b7:	cc                   	int3   
  22a7b8:	cc                   	int3   
  22a7b9:	cc                   	int3   
  22a7ba:	cc                   	int3   
  22a7bb:	cc                   	int3   
  22a7bc:	cc                   	int3   
  22a7bd:	cc                   	int3   
  22a7be:	cc                   	int3   
  22a7bf:	cc                   	int3   

000000000022a7c0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17ha90416735f970b6fE>:
            let ext_checksum: usize = ext_bytes_slice.iter().map(|val| *val as usize).sum();
  22a7c0:	48 83 ec 10          	sub    $0x10,%rsp
  22a7c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  22a7c8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22a7cd:	0f b6 06             	movzbl (%rsi),%eax
  22a7d0:	48 83 c4 10          	add    $0x10,%rsp
  22a7d4:	c3                   	retq   
  22a7d5:	cc                   	int3   
  22a7d6:	cc                   	int3   
  22a7d7:	cc                   	int3   
  22a7d8:	cc                   	int3   
  22a7d9:	cc                   	int3   
  22a7da:	cc                   	int3   
  22a7db:	cc                   	int3   
  22a7dc:	cc                   	int3   
  22a7dd:	cc                   	int3   
  22a7de:	cc                   	int3   
  22a7df:	cc                   	int3   

000000000022a7e0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>:
/// ```
#[inline]
#[must_use]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_stable(feature = "const_str_from_utf8_unchecked", since = "1.55.0")]
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
  22a7e0:	48 83 ec 30          	sub    $0x30,%rsp
  22a7e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22a7e9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.
    // Also relies on `&str` and `&[u8]` having the same layout.
    unsafe { mem::transmute(v) }
  22a7ee:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22a7f3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22a7f8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22a7fd:	48 89 04 24          	mov    %rax,(%rsp)
  22a801:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22a806:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a80b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22a810:	48 8b 04 24          	mov    (%rsp),%rax
}
  22a814:	48 83 c4 30          	add    $0x30,%rsp
  22a818:	c3                   	retq   
  22a819:	cc                   	int3   
  22a81a:	cc                   	int3   
  22a81b:	cc                   	int3   
  22a81c:	cc                   	int3   
  22a81d:	cc                   	int3   
  22a81e:	cc                   	int3   
  22a81f:	cc                   	int3   

000000000022a820 <_ZN4core3str8converts23from_utf8_unchecked_mut17he64a89b0752a7eafE>:
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
  22a820:	48 83 ec 10          	sub    $0x10,%rsp
  22a824:	48 89 f2             	mov    %rsi,%rdx
  22a827:	48 89 f8             	mov    %rdi,%rax
  22a82a:	48 89 04 24          	mov    %rax,(%rsp)
  22a82e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
  22a833:	48 83 c4 10          	add    $0x10,%rsp
  22a837:	c3                   	retq   
  22a838:	cc                   	int3   
  22a839:	cc                   	int3   
  22a83a:	cc                   	int3   
  22a83b:	cc                   	int3   
  22a83c:	cc                   	int3   
  22a83d:	cc                   	int3   
  22a83e:	cc                   	int3   
  22a83f:	cc                   	int3   

000000000022a840 <_ZN4core5slice5index74_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$5index17h0b3526a5757c1304E>:
    fn index(&self, index: I) -> &I::Output {
  22a840:	48 83 ec 28          	sub    $0x28,%rsp
  22a844:	48 89 14 24          	mov    %rdx,(%rsp)
  22a848:	48 89 f2             	mov    %rsi,%rdx
  22a84b:	48 89 fe             	mov    %rdi,%rsi
  22a84e:	48 8b 3c 24          	mov    (%rsp),%rdi
  22a852:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22a857:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22a85c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        index.index(self)
  22a861:	e8 3a 01 00 00       	callq  22a9a0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E>
  22a866:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a86b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22a870:	48 83 c4 28          	add    $0x28,%rsp
  22a874:	c3                   	retq   
  22a875:	cc                   	int3   
  22a876:	cc                   	int3   
  22a877:	cc                   	int3   
  22a878:	cc                   	int3   
  22a879:	cc                   	int3   
  22a87a:	cc                   	int3   
  22a87b:	cc                   	int3   
  22a87c:	cc                   	int3   
  22a87d:	cc                   	int3   
  22a87e:	cc                   	int3   
  22a87f:	cc                   	int3   

000000000022a880 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h3575024572685ae9E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  22a880:	48 83 ec 48          	sub    $0x48,%rsp
  22a884:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22a889:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22a88e:	48 89 f1             	mov    %rsi,%rcx
  22a891:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22a896:	48 89 fa             	mov    %rdi,%rdx
  22a899:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a89e:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22a8a3:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22a8a8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22a8ad:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        index.index_mut(self)
  22a8b2:	e8 c9 3b ff ff       	callq  21e480 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>
  22a8b7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a8bc:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22a8c1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22a8c6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22a8cb:	48 83 c4 48          	add    $0x48,%rsp
  22a8cf:	c3                   	retq   

000000000022a8d0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h5d3ec839ca9d3a69E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  22a8d0:	48 83 ec 38          	sub    $0x38,%rsp
  22a8d4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22a8d9:	48 89 f2             	mov    %rsi,%rdx
  22a8dc:	48 89 fe             	mov    %rdi,%rsi
  22a8df:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22a8e4:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22a8e9:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22a8ee:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  22a8f3:	e8 38 3c ff ff       	callq  21e530 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc069e41a2953a9f8E>
  22a8f8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a8fd:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22a902:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  22a907:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22a90c:	48 83 c4 38          	add    $0x38,%rsp
  22a910:	c3                   	retq   
  22a911:	cc                   	int3   
  22a912:	cc                   	int3   
  22a913:	cc                   	int3   
  22a914:	cc                   	int3   
  22a915:	cc                   	int3   
  22a916:	cc                   	int3   
  22a917:	cc                   	int3   
  22a918:	cc                   	int3   
  22a919:	cc                   	int3   
  22a91a:	cc                   	int3   
  22a91b:	cc                   	int3   
  22a91c:	cc                   	int3   
  22a91d:	cc                   	int3   
  22a91e:	cc                   	int3   
  22a91f:	cc                   	int3   

000000000022a920 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h9f6d6ff661f6775eE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  22a920:	48 83 ec 38          	sub    $0x38,%rsp
  22a924:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22a929:	48 89 f2             	mov    %rsi,%rdx
  22a92c:	48 89 fe             	mov    %rdi,%rsi
  22a92f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22a934:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22a939:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22a93e:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  22a943:	e8 c8 3c ff ff       	callq  21e610 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE>
  22a948:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a94d:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22a952:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  22a957:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22a95c:	48 83 c4 38          	add    $0x38,%rsp
  22a960:	c3                   	retq   
  22a961:	cc                   	int3   
  22a962:	cc                   	int3   
  22a963:	cc                   	int3   
  22a964:	cc                   	int3   
  22a965:	cc                   	int3   
  22a966:	cc                   	int3   
  22a967:	cc                   	int3   
  22a968:	cc                   	int3   
  22a969:	cc                   	int3   
  22a96a:	cc                   	int3   
  22a96b:	cc                   	int3   
  22a96c:	cc                   	int3   
  22a96d:	cc                   	int3   
  22a96e:	cc                   	int3   
  22a96f:	cc                   	int3   

000000000022a970 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hf68e6a005a44d53cE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  22a970:	48 83 ec 28          	sub    $0x28,%rsp
  22a974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22a979:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        index.index_mut(self)
  22a97e:	e8 4d 3e ff ff       	callq  21e7d0 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h52318d6ef1667890E>
  22a983:	48 89 04 24          	mov    %rax,(%rsp)
  22a987:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22a98c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22a991:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22a995:	48 83 c4 28          	add    $0x28,%rsp
  22a999:	c3                   	retq   
  22a99a:	cc                   	int3   
  22a99b:	cc                   	int3   
  22a99c:	cc                   	int3   
  22a99d:	cc                   	int3   
  22a99e:	cc                   	int3   
  22a99f:	cc                   	int3   

000000000022a9a0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E>:
    fn index(self, slice: &[T]) -> &T {
  22a9a0:	48 83 ec 38          	sub    $0x38,%rsp
  22a9a4:	48 89 0c 24          	mov    %rcx,(%rsp)
  22a9a8:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22a9ad:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22a9b2:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a9b7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22a9bc:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22a9c1:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        &(*slice)[self]
  22a9c6:	48 39 d7             	cmp    %rdx,%rdi
  22a9c9:	0f 92 c0             	setb   %al
  22a9cc:	a8 01                	test   $0x1,%al
  22a9ce:	75 02                	jne    22a9d2 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E+0x32>
  22a9d0:	eb 16                	jmp    22a9e8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E+0x48>
  22a9d2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22a9d7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22a9dc:	48 c1 e1 03          	shl    $0x3,%rcx
  22a9e0:	48 01 c8             	add    %rcx,%rax
    }
  22a9e3:	48 83 c4 38          	add    $0x38,%rsp
  22a9e7:	c3                   	retq   
  22a9e8:	48 8b 14 24          	mov    (%rsp),%rdx
  22a9ec:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22a9f1:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        &(*slice)[self]
  22a9f6:	e8 45 b2 00 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  22a9fb:	0f 0b                	ud2    
  22a9fd:	cc                   	int3   
  22a9fe:	cc                   	int3   
  22a9ff:	cc                   	int3   

000000000022aa00 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
  22aa00:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22aa07:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22aa0c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22aa11:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22aa16:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
  22aa1b:	48 01 f7             	add    %rsi,%rdi
  22aa1e:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  22aa23:	0f 92 44 24 70       	setb   0x70(%rsp)
  22aa28:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  22aa2d:	8a 44 24 70          	mov    0x70(%rsp),%al
  22aa31:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  22aa36:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
            (a as Self, b)
  22aa3d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22aa42:	88 44 24 50          	mov    %al,0x50(%rsp)
        }
  22aa46:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22aa4b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22aa50:	8a 44 24 50          	mov    0x50(%rsp),%al
  22aa54:	88 44 24 17          	mov    %al,0x17(%rsp)
  22aa58:	8a 44 24 17          	mov    0x17(%rsp),%al
  22aa5c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            let (a, b) = self.overflowing_add(rhs);
  22aa61:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22aa66:	88 c1                	mov    %al,%cl
  22aa68:	80 e1 01             	and    $0x1,%cl
  22aa6b:	88 4c 24 46          	mov    %cl,0x46(%rsp)
            if unlikely!(b) {None} else {Some(a)}
  22aa6f:	24 01                	and    $0x1,%al
  22aa71:	88 44 24 47          	mov    %al,0x47(%rsp)
  22aa75:	8a 44 24 47          	mov    0x47(%rsp),%al
  22aa79:	88 44 24 07          	mov    %al,0x7(%rsp)
  22aa7d:	8a 44 24 07          	mov    0x7(%rsp),%al
  22aa81:	a8 01                	test   $0x1,%al
  22aa83:	75 17                	jne    22aa9c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0x9c>
  22aa85:	eb 00                	jmp    22aa87 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0x87>
  22aa87:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22aa8c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22aa91:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  22aa98:	00 00 
  22aa9a:	eb 09                	jmp    22aaa5 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0xa5>
  22aa9c:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  22aaa3:	00 00 
        }
  22aaa5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22aaaa:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22aaaf:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22aab6:	c3                   	retq   
  22aab7:	cc                   	int3   
  22aab8:	cc                   	int3   
  22aab9:	cc                   	int3   
  22aaba:	cc                   	int3   
  22aabb:	cc                   	int3   
  22aabc:	cc                   	int3   
  22aabd:	cc                   	int3   
  22aabe:	cc                   	int3   
  22aabf:	cc                   	int3   

000000000022aac0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
  22aac0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22aac7:	48 89 f8             	mov    %rdi,%rax
  22aaca:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22aacf:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22aad4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22aad9:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
  22aade:	48 f7 e6             	mul    %rsi
  22aae1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22aae6:	0f 90 44 24 70       	seto   0x70(%rsp)
  22aaeb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  22aaf0:	8a 44 24 70          	mov    0x70(%rsp),%al
  22aaf4:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  22aaf9:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
            (a as Self, b)
  22ab00:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22ab05:	88 44 24 50          	mov    %al,0x50(%rsp)
        }
  22ab09:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22ab0e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ab13:	8a 44 24 50          	mov    0x50(%rsp),%al
  22ab17:	88 44 24 17          	mov    %al,0x17(%rsp)
  22ab1b:	8a 44 24 17          	mov    0x17(%rsp),%al
  22ab1f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            let (a, b) = self.overflowing_mul(rhs);
  22ab24:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22ab29:	88 c1                	mov    %al,%cl
  22ab2b:	80 e1 01             	and    $0x1,%cl
  22ab2e:	88 4c 24 46          	mov    %cl,0x46(%rsp)
            if unlikely!(b) {None} else {Some(a)}
  22ab32:	24 01                	and    $0x1,%al
  22ab34:	88 44 24 47          	mov    %al,0x47(%rsp)
  22ab38:	8a 44 24 47          	mov    0x47(%rsp),%al
  22ab3c:	88 44 24 07          	mov    %al,0x7(%rsp)
  22ab40:	8a 44 24 07          	mov    0x7(%rsp),%al
  22ab44:	a8 01                	test   $0x1,%al
  22ab46:	75 17                	jne    22ab5f <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0x9f>
  22ab48:	eb 00                	jmp    22ab4a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0x8a>
  22ab4a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ab4f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22ab54:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  22ab5b:	00 00 
  22ab5d:	eb 09                	jmp    22ab68 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0xa8>
  22ab5f:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  22ab66:	00 00 
        }
  22ab68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ab6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ab72:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22ab79:	c3                   	retq   
  22ab7a:	cc                   	int3   
  22ab7b:	cc                   	int3   
  22ab7c:	cc                   	int3   
  22ab7d:	cc                   	int3   
  22ab7e:	cc                   	int3   
  22ab7f:	cc                   	int3   

000000000022ab80 <_ZN4core3fmt5Write10write_char17h0016a4ffe4551957E>:
    fn write_char(&mut self, c: char) -> Result {
  22ab80:	48 83 ec 48          	sub    $0x48,%rsp
  22ab84:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  22ab88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ab8d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22ab92:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  22ab96:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  22ab9b:	31 f6                	xor    %esi,%esi
  22ab9d:	ba 04 00 00 00       	mov    $0x4,%edx
  22aba2:	e8 69 e1 00 00       	callq  238d10 <memset>
  22aba7:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  22abab:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  22abb0:	ba 04 00 00 00       	mov    $0x4,%edx
  22abb5:	e8 c6 cd fe ff       	callq  217980 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>
  22abba:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22abbf:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22abc4:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22abc9:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22abce:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22abd3:	e8 18 4b ff ff       	callq  21f6f0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>
  22abd8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22abdc:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  22abe0:	24 01                	and    $0x1,%al
  22abe2:	0f b6 c0             	movzbl %al,%eax
  22abe5:	48 83 c4 48          	add    $0x48,%rsp
  22abe9:	c3                   	retq   
  22abea:	cc                   	int3   
  22abeb:	cc                   	int3   
  22abec:	cc                   	int3   
  22abed:	cc                   	int3   
  22abee:	cc                   	int3   
  22abef:	cc                   	int3   

000000000022abf0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  22abf0:	48 83 ec 48          	sub    $0x48,%rsp
  22abf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  22abf9:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  22abfe:	48 89 04 24          	mov    %rax,(%rsp)
  22ac02:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22ac07:	ba 30 00 00 00       	mov    $0x30,%edx
  22ac0c:	e8 df e0 00 00       	callq  238cf0 <memcpy>
  22ac11:	48 8b 3c 24          	mov    (%rsp),%rdi
  22ac15:	48 8d 35 74 1c 01 00 	lea    0x11c74(%rip),%rsi        # 23c890 <memcmp+0x3b50>
  22ac1c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  22ac21:	e8 aa c8 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  22ac26:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22ac2a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  22ac2e:	24 01                	and    $0x1,%al
  22ac30:	0f b6 c0             	movzbl %al,%eax
  22ac33:	48 83 c4 48          	add    $0x48,%rsp
  22ac37:	c3                   	retq   
  22ac38:	cc                   	int3   
  22ac39:	cc                   	int3   
  22ac3a:	cc                   	int3   
  22ac3b:	cc                   	int3   
  22ac3c:	cc                   	int3   
  22ac3d:	cc                   	int3   
  22ac3e:	cc                   	int3   
  22ac3f:	cc                   	int3   

000000000022ac40 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h86175dd8abf9ad05E>:
    fn write_char(&mut self, c: char) -> Result {
  22ac40:	48 83 ec 18          	sub    $0x18,%rsp
  22ac44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ac49:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  22ac4d:	48 8b 3f             	mov    (%rdi),%rdi
  22ac50:	e8 2b ff ff ff       	callq  22ab80 <_ZN4core3fmt5Write10write_char17h0016a4ffe4551957E>
  22ac55:	88 44 24 07          	mov    %al,0x7(%rsp)
  22ac59:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22ac5d:	24 01                	and    $0x1,%al
  22ac5f:	0f b6 c0             	movzbl %al,%eax
  22ac62:	48 83 c4 18          	add    $0x18,%rsp
  22ac66:	c3                   	retq   
  22ac67:	cc                   	int3   
  22ac68:	cc                   	int3   
  22ac69:	cc                   	int3   
  22ac6a:	cc                   	int3   
  22ac6b:	cc                   	int3   
  22ac6c:	cc                   	int3   
  22ac6d:	cc                   	int3   
  22ac6e:	cc                   	int3   
  22ac6f:	cc                   	int3   

000000000022ac70 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h018d733d208049b9E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  22ac70:	48 83 ec 48          	sub    $0x48,%rsp
  22ac74:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  22ac79:	48 8b 07             	mov    (%rdi),%rax
  22ac7c:	48 89 04 24          	mov    %rax,(%rsp)
  22ac80:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  22ac85:	ba 30 00 00 00       	mov    $0x30,%edx
  22ac8a:	e8 61 e0 00 00       	callq  238cf0 <memcpy>
  22ac8f:	48 8b 3c 24          	mov    (%rsp),%rdi
  22ac93:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  22ac98:	e8 53 ff ff ff       	callq  22abf0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>
  22ac9d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22aca1:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  22aca5:	24 01                	and    $0x1,%al
  22aca7:	0f b6 c0             	movzbl %al,%eax
  22acaa:	48 83 c4 48          	add    $0x48,%rsp
  22acae:	c3                   	retq   
  22acaf:	cc                   	int3   

000000000022acb0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h9d849143723bade6E>:
    fn write_str(&mut self, s: &str) -> Result {
  22acb0:	48 83 ec 28          	sub    $0x28,%rsp
  22acb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22acb9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22acbe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  22acc3:	48 8b 3f             	mov    (%rdi),%rdi
  22acc6:	e8 25 4a ff ff       	callq  21f6f0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>
  22accb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22accf:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  22acd3:	24 01                	and    $0x1,%al
  22acd5:	0f b6 c0             	movzbl %al,%eax
  22acd8:	48 83 c4 28          	add    $0x28,%rsp
  22acdc:	c3                   	retq   
  22acdd:	cc                   	int3   
  22acde:	cc                   	int3   
  22acdf:	cc                   	int3   

000000000022ace0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>:
/// // Now the box is fine
/// assert_eq!(*v, 42);
/// ```
#[stable(feature = "rust1", since = "1.0.0")]
#[inline]
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
  22ace0:	48 83 ec 18          	sub    $0x18,%rsp
  22ace4:	40 88 f0             	mov    %sil,%al
  22ace7:	48 89 3c 24          	mov    %rdi,(%rsp)
  22aceb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22acef:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    }

    debug_assert!(is_aligned_and_not_null(dst), "attempt to write to unaligned or null pointer");

    // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
    unsafe { write_bytes(dst, val, count) }
  22acf4:	48 c1 e2 00          	shl    $0x0,%rdx
  22acf8:	0f b6 f0             	movzbl %al,%esi
  22acfb:	e8 10 e0 00 00       	callq  238d10 <memset>
}
  22ad00:	48 83 c4 18          	add    $0x18,%rsp
  22ad04:	c3                   	retq   
  22ad05:	cc                   	int3   
  22ad06:	cc                   	int3   
  22ad07:	cc                   	int3   
  22ad08:	cc                   	int3   
  22ad09:	cc                   	int3   
  22ad0a:	cc                   	int3   
  22ad0b:	cc                   	int3   
  22ad0c:	cc                   	int3   
  22ad0d:	cc                   	int3   
  22ad0e:	cc                   	int3   
  22ad0f:	cc                   	int3   

000000000022ad10 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>:
pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
  22ad10:	48 83 ec 28          	sub    $0x28,%rsp
  22ad14:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22ad19:	48 89 fe             	mov    %rdi,%rsi
  22ad1c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22ad21:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22ad26:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ad2b:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    unsafe { copy_nonoverlapping(src, dst, count) }
  22ad30:	48 c1 e2 00          	shl    $0x0,%rdx
  22ad34:	e8 b7 df 00 00       	callq  238cf0 <memcpy>
}
  22ad39:	48 83 c4 28          	add    $0x28,%rsp
  22ad3d:	c3                   	retq   
  22ad3e:	cc                   	int3   
  22ad3f:	cc                   	int3   

000000000022ad40 <_ZN4core3cmp3Ord3max17hf84761fc38d83fe8E>:
    fn max(self, other: Self) -> Self
  22ad40:	48 83 ec 18          	sub    $0x18,%rsp
  22ad44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ad49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        max_by(self, other, Ord::cmp)
  22ad4e:	e8 2d 00 00 00       	callq  22ad80 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE>
  22ad53:	48 89 04 24          	mov    %rax,(%rsp)
  22ad57:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22ad5b:	48 83 c4 18          	add    $0x18,%rsp
  22ad5f:	c3                   	retq   

000000000022ad60 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
  22ad60:	48 83 ec 18          	sub    $0x18,%rsp
  22ad64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ad69:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    v1.max(v2)
  22ad6e:	e8 cd ff ff ff       	callq  22ad40 <_ZN4core3cmp3Ord3max17hf84761fc38d83fe8E>
  22ad73:	48 89 04 24          	mov    %rax,(%rsp)
  22ad77:	48 8b 04 24          	mov    (%rsp),%rax
}
  22ad7b:	48 83 c4 18          	add    $0x18,%rsp
  22ad7f:	c3                   	retq   

000000000022ad80 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  22ad80:	48 83 ec 48          	sub    $0x48,%rsp
  22ad84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ad89:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    match compare(&v1, &v2) {
  22ad8e:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  22ad93:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  22ad98:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
  22ad9d:	c6 44 24 3e 01       	movb   $0x1,0x3e(%rsp)
  22ada2:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  22ada7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22adac:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  22adb1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22adb6:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22adbb:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22adc0:	e8 db 0f fe ff       	callq  20bda0 <_ZN4core3ops8function6FnOnce9call_once17h764d520568e619d0E>
  22adc5:	88 44 24 27          	mov    %al,0x27(%rsp)
  22adc9:	8a 44 24 27          	mov    0x27(%rsp),%al
  22adcd:	04 01                	add    $0x1,%al
  22adcf:	2c 02                	sub    $0x2,%al
  22add1:	72 06                	jb     22add9 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x59>
  22add3:	eb 00                	jmp    22add5 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x55>
  22add5:	eb 13                	jmp    22adea <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x6a>
  22add7:	0f 0b                	ud2    
        Ordering::Less | Ordering::Equal => v2,
  22add9:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  22adde:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ade3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ade8:	eb 0f                	jmp    22adf9 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x79>
        Ordering::Greater => v1,
  22adea:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  22adef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22adf4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
}
  22adf9:	f6 44 24 3e 01       	testb  $0x1,0x3e(%rsp)
  22adfe:	75 09                	jne    22ae09 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x89>
  22ae00:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  22ae05:	75 0e                	jne    22ae15 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x95>
  22ae07:	eb 02                	jmp    22ae0b <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x8b>
  22ae09:	eb f5                	jmp    22ae00 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x80>
  22ae0b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ae10:	48 83 c4 48          	add    $0x48,%rsp
  22ae14:	c3                   	retq   
  22ae15:	eb f4                	jmp    22ae0b <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x8b>
  22ae17:	cc                   	int3   
  22ae18:	cc                   	int3   
  22ae19:	cc                   	int3   
  22ae1a:	cc                   	int3   
  22ae1b:	cc                   	int3   
  22ae1c:	cc                   	int3   
  22ae1d:	cc                   	int3   
  22ae1e:	cc                   	int3   
  22ae1f:	cc                   	int3   

000000000022ae20 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3f6f4c9db53fef0cE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
  22ae20:	48 83 ec 30          	sub    $0x30,%rsp
  22ae24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ae29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22ae2e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ae33:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
  22ae38:	48 01 f7             	add    %rsi,%rdi
  22ae3b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22ae40:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22ae45:	48 89 04 24          	mov    %rax,(%rsp)
  22ae49:	48 8b 04 24          	mov    (%rsp),%rax
        }
  22ae4d:	48 83 c4 30          	add    $0x30,%rsp
  22ae51:	c3                   	retq   
  22ae52:	cc                   	int3   
  22ae53:	cc                   	int3   
  22ae54:	cc                   	int3   
  22ae55:	cc                   	int3   
  22ae56:	cc                   	int3   
  22ae57:	cc                   	int3   
  22ae58:	cc                   	int3   
  22ae59:	cc                   	int3   
  22ae5a:	cc                   	int3   
  22ae5b:	cc                   	int3   
  22ae5c:	cc                   	int3   
  22ae5d:	cc                   	int3   
  22ae5e:	cc                   	int3   
  22ae5f:	cc                   	int3   

000000000022ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>:
    #[rustc_deprecated(
        since = "1.50.0",
        reason = "Use `compare_exchange` or `compare_exchange_weak` instead"
    )]
    #[cfg(target_has_atomic = "8")]
    pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
  22ae60:	48 83 ec 28          	sub    $0x28,%rsp
  22ae64:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ae68:	88 c8                	mov    %cl,%al
  22ae6a:	88 44 24 0b          	mov    %al,0xb(%rsp)
  22ae6e:	88 d1                	mov    %dl,%cl
  22ae70:	88 4c 24 0c          	mov    %cl,0xc(%rsp)
  22ae74:	40 88 f2             	mov    %sil,%dl
  22ae77:	88 54 24 0d          	mov    %dl,0xd(%rsp)
  22ae7b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ae80:	80 e2 01             	and    $0x1,%dl
  22ae83:	88 54 24 23          	mov    %dl,0x23(%rsp)
  22ae87:	80 e1 01             	and    $0x1,%cl
  22ae8a:	88 4c 24 24          	mov    %cl,0x24(%rsp)
  22ae8e:	88 44 24 25          	mov    %al,0x25(%rsp)
        match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
  22ae92:	0f b6 f8             	movzbl %al,%edi
  22ae95:	e8 36 04 00 00       	callq  22b2d0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>
  22ae9a:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22ae9e:	48 8b 3c 24          	mov    (%rsp),%rdi
  22aea2:	8a 44 24 0c          	mov    0xc(%rsp),%al
  22aea6:	8a 54 24 0d          	mov    0xd(%rsp),%dl
  22aeaa:	40 8a 74 24 0e       	mov    0xe(%rsp),%sil
  22aeaf:	8a 4c 24 0b          	mov    0xb(%rsp),%cl
  22aeb3:	0f b6 c9             	movzbl %cl,%ecx
  22aeb6:	44 0f b6 c6          	movzbl %sil,%r8d
  22aeba:	0f b6 f2             	movzbl %dl,%esi
  22aebd:	83 e6 01             	and    $0x1,%esi
  22aec0:	0f b6 d0             	movzbl %al,%edx
  22aec3:	83 e2 01             	and    $0x1,%edx
  22aec6:	e8 55 00 00 00       	callq  22af20 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE>
  22aecb:	88 54 24 11          	mov    %dl,0x11(%rsp)
  22aecf:	88 44 24 10          	mov    %al,0x10(%rsp)
  22aed3:	0f b6 44 24 10       	movzbl 0x10(%rsp),%eax
  22aed8:	a8 01                	test   $0x1,%al
  22aeda:	74 06                	je     22aee2 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x82>
  22aedc:	eb 00                	jmp    22aede <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x7e>
  22aede:	eb 17                	jmp    22aef7 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x97>
  22aee0:	0f 0b                	ud2    
            Ok(x) => x,
  22aee2:	8a 44 24 11          	mov    0x11(%rsp),%al
  22aee6:	88 c1                	mov    %al,%cl
  22aee8:	80 e1 01             	and    $0x1,%cl
  22aeeb:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  22aeef:	24 01                	and    $0x1,%al
  22aef1:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22aef5:	eb 13                	jmp    22af0a <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0xaa>
            Err(x) => x,
  22aef7:	8a 44 24 11          	mov    0x11(%rsp),%al
  22aefb:	88 c1                	mov    %al,%cl
  22aefd:	80 e1 01             	and    $0x1,%cl
  22af00:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  22af04:	24 01                	and    $0x1,%al
  22af06:	88 44 24 0f          	mov    %al,0xf(%rsp)
        }
    }
  22af0a:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22af0e:	24 01                	and    $0x1,%al
  22af10:	0f b6 c0             	movzbl %al,%eax
  22af13:	48 83 c4 28          	add    $0x28,%rsp
  22af17:	c3                   	retq   
  22af18:	cc                   	int3   
  22af19:	cc                   	int3   
  22af1a:	cc                   	int3   
  22af1b:	cc                   	int3   
  22af1c:	cc                   	int3   
  22af1d:	cc                   	int3   
  22af1e:	cc                   	int3   
  22af1f:	cc                   	int3   

000000000022af20 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE>:
    /// ```
    #[inline]
    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
    #[doc(alias = "compare_and_swap")]
    #[cfg(target_has_atomic = "8")]
    pub fn compare_exchange(
  22af20:	48 83 ec 38          	sub    $0x38,%rsp
  22af24:	44 88 c0             	mov    %r8b,%al
  22af27:	88 44 24 04          	mov    %al,0x4(%rsp)
  22af2b:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  22af2f:	88 54 24 06          	mov    %dl,0x6(%rsp)
  22af33:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  22af38:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22af3d:	40 80 e6 01          	and    $0x1,%sil
  22af41:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  22af46:	80 e2 01             	and    $0x1,%dl
  22af49:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  22af4d:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  22af51:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  22af55:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22af5a:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22af5f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22af64:	8a 44 24 06          	mov    0x6(%rsp),%al
  22af68:	8a 54 24 07          	mov    0x7(%rsp),%dl
  22af6c:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  22af71:	8a 4c 24 05          	mov    0x5(%rsp),%cl
        success: Ordering,
        failure: Ordering,
    ) -> Result<bool, bool> {
        // SAFETY: data races are prevented by atomic intrinsics.
        match unsafe {
            atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
  22af75:	0f b6 c9             	movzbl %cl,%ecx
  22af78:	44 0f b6 c6          	movzbl %sil,%r8d
  22af7c:	0f b6 f2             	movzbl %dl,%esi
  22af7f:	83 e6 01             	and    $0x1,%esi
  22af82:	0f b6 d0             	movzbl %al,%edx
  22af85:	83 e2 01             	and    $0x1,%edx
  22af88:	e8 e3 6f 00 00       	callq  231f70 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE>
  22af8d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  22af91:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  22af95:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  22af9a:	a8 01                	test   $0x1,%al
  22af9c:	74 06                	je     22afa4 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x84>
  22af9e:	eb 00                	jmp    22afa0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x80>
  22afa0:	eb 1c                	jmp    22afbe <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x9e>
  22afa2:	0f 0b                	ud2    
        } {
            Ok(x) => Ok(x != 0),
  22afa4:	8a 44 24 19          	mov    0x19(%rsp),%al
  22afa8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22afac:	3c 00                	cmp    $0x0,%al
  22afae:	0f 95 c0             	setne  %al
  22afb1:	24 01                	and    $0x1,%al
  22afb3:	88 44 24 11          	mov    %al,0x11(%rsp)
  22afb7:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  22afbc:	eb 18                	jmp    22afd6 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0xb6>
            Err(x) => Err(x != 0),
  22afbe:	8a 44 24 19          	mov    0x19(%rsp),%al
  22afc2:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22afc6:	3c 00                	cmp    $0x0,%al
  22afc8:	0f 95 c0             	setne  %al
  22afcb:	24 01                	and    $0x1,%al
  22afcd:	88 44 24 11          	mov    %al,0x11(%rsp)
  22afd1:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
        }
    }
  22afd6:	8a 44 24 10          	mov    0x10(%rsp),%al
  22afda:	8a 54 24 11          	mov    0x11(%rsp),%dl
  22afde:	48 83 c4 38          	add    $0x38,%rsp
  22afe2:	c3                   	retq   
  22afe3:	cc                   	int3   
  22afe4:	cc                   	int3   
  22afe5:	cc                   	int3   
  22afe6:	cc                   	int3   
  22afe7:	cc                   	int3   
  22afe8:	cc                   	int3   
  22afe9:	cc                   	int3   
  22afea:	cc                   	int3   
  22afeb:	cc                   	int3   
  22afec:	cc                   	int3   
  22afed:	cc                   	int3   
  22afee:	cc                   	int3   
  22afef:	cc                   	int3   

000000000022aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>:
    pub const fn new(v: bool) -> AtomicBool {
  22aff0:	48 83 ec 10          	sub    $0x10,%rsp
  22aff4:	40 88 f8             	mov    %dil,%al
  22aff7:	88 c1                	mov    %al,%cl
  22aff9:	80 e1 01             	and    $0x1,%cl
  22affc:	88 4c 24 0d          	mov    %cl,0xd(%rsp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
  22b000:	24 01                	and    $0x1,%al
  22b002:	88 44 24 0f          	mov    %al,0xf(%rsp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
  22b006:	88 44 24 0e          	mov    %al,0xe(%rsp)
    }
  22b00a:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b00e:	88 44 24 07          	mov    %al,0x7(%rsp)
  22b012:	8a 44 24 07          	mov    0x7(%rsp),%al
  22b016:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  22b01a:	8a 44 24 08          	mov    0x8(%rsp),%al
  22b01e:	48 83 c4 10          	add    $0x10,%rsp
  22b022:	c3                   	retq   
  22b023:	cc                   	int3   
  22b024:	cc                   	int3   
  22b025:	cc                   	int3   
  22b026:	cc                   	int3   
  22b027:	cc                   	int3   
  22b028:	cc                   	int3   
  22b029:	cc                   	int3   
  22b02a:	cc                   	int3   
  22b02b:	cc                   	int3   
  22b02c:	cc                   	int3   
  22b02d:	cc                   	int3   
  22b02e:	cc                   	int3   
  22b02f:	cc                   	int3   

000000000022b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>:
    pub fn load(&self, order: Ordering) -> bool {
  22b030:	48 83 ec 28          	sub    $0x28,%rsp
  22b034:	40 88 f0             	mov    %sil,%al
  22b037:	88 44 24 07          	mov    %al,0x7(%rsp)
  22b03b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b040:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22b044:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22b049:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b04e:	8a 44 24 07          	mov    0x7(%rsp),%al
  22b052:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  22b057:	0f b6 f0             	movzbl %al,%esi
  22b05a:	e8 c1 6d 00 00       	callq  231e20 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>
  22b05f:	88 44 24 06          	mov    %al,0x6(%rsp)
  22b063:	8a 44 24 06          	mov    0x6(%rsp),%al
  22b067:	3c 00                	cmp    $0x0,%al
  22b069:	0f 95 c0             	setne  %al
    }
  22b06c:	24 01                	and    $0x1,%al
  22b06e:	0f b6 c0             	movzbl %al,%eax
  22b071:	48 83 c4 28          	add    $0x28,%rsp
  22b075:	c3                   	retq   
  22b076:	cc                   	int3   
  22b077:	cc                   	int3   
  22b078:	cc                   	int3   
  22b079:	cc                   	int3   
  22b07a:	cc                   	int3   
  22b07b:	cc                   	int3   
  22b07c:	cc                   	int3   
  22b07d:	cc                   	int3   
  22b07e:	cc                   	int3   
  22b07f:	cc                   	int3   

000000000022b080 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>:
    pub fn store(&self, val: bool, order: Ordering) {
  22b080:	48 83 ec 28          	sub    $0x28,%rsp
  22b084:	88 d0                	mov    %dl,%al
  22b086:	88 44 24 06          	mov    %al,0x6(%rsp)
  22b08a:	40 88 f1             	mov    %sil,%cl
  22b08d:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  22b091:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b096:	80 e1 01             	and    $0x1,%cl
  22b099:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  22b09d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22b0a1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22b0a6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b0ab:	8a 44 24 06          	mov    0x6(%rsp),%al
  22b0af:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22b0b4:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  22b0b8:	80 e1 01             	and    $0x1,%cl
  22b0bb:	0f b6 f1             	movzbl %cl,%esi
  22b0be:	0f b6 d0             	movzbl %al,%edx
  22b0c1:	e8 fa 6d 00 00       	callq  231ec0 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>
    }
  22b0c6:	48 83 c4 28          	add    $0x28,%rsp
  22b0ca:	c3                   	retq   
  22b0cb:	cc                   	int3   
  22b0cc:	cc                   	int3   
  22b0cd:	cc                   	int3   
  22b0ce:	cc                   	int3   
  22b0cf:	cc                   	int3   

000000000022b0d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>:
            #[rustc_deprecated(
                since = "1.50.0",
                reason = "Use `compare_exchange` or `compare_exchange_weak` instead")
            ]
            #[$cfg_cas]
            pub fn compare_and_swap(&self,
  22b0d0:	48 83 ec 68          	sub    $0x68,%rsp
  22b0d4:	48 89 14 24          	mov    %rdx,(%rsp)
  22b0d8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22b0dd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b0e2:	88 c8                	mov    %cl,%al
  22b0e4:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  22b0e8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22b0ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22b0f2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  22b0f7:	88 44 24 57          	mov    %al,0x57(%rsp)
                                    new: $int_type,
                                    order: Ordering) -> $int_type {
                match self.compare_exchange(current,
                                            new,
                                            order,
                                            strongest_failure_ordering(order)) {
  22b0fb:	0f b6 f8             	movzbl %al,%edi
  22b0fe:	e8 cd 01 00 00       	callq  22b2d0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>
  22b103:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22b107:	48 8b 14 24          	mov    (%rsp),%rdx
  22b10b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22b110:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22b115:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22b119:	8a 4c 24 1e          	mov    0x1e(%rsp),%cl
                match self.compare_exchange(current,
  22b11d:	0f b6 c9             	movzbl %cl,%ecx
  22b120:	44 0f b6 c0          	movzbl %al,%r8d
  22b124:	e8 47 00 00 00       	callq  22b170 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h002ae8ead2402ac8E>
  22b129:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22b12e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22b133:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22b138:	48 85 c0             	test   %rax,%rax
  22b13b:	74 06                	je     22b143 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x73>
  22b13d:	eb 00                	jmp    22b13f <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x6f>
  22b13f:	eb 13                	jmp    22b154 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x84>
  22b141:	0f 0b                	ud2    
                    Ok(x) => x,
  22b143:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22b148:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22b14d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b152:	eb 0f                	jmp    22b163 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x93>
                    Err(x) => x,
  22b154:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22b159:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22b15e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                }
            }
  22b163:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22b168:	48 83 c4 68          	add    $0x68,%rsp
  22b16c:	c3                   	retq   
  22b16d:	cc                   	int3   
  22b16e:	cc                   	int3   
  22b16f:	cc                   	int3   

000000000022b170 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h002ae8ead2402ac8E>:
            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);
            /// ```
            #[inline]
            #[$stable_cxchg]
            #[$cfg_cas]
            pub fn compare_exchange(&self,
  22b170:	48 83 ec 58          	sub    $0x58,%rsp
  22b174:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22b179:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22b17e:	44 88 c0             	mov    %r8b,%al
  22b181:	88 44 24 26          	mov    %al,0x26(%rsp)
  22b185:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  22b189:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22b18e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  22b193:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22b198:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  22b19c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  22b1a0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22b1a5:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  22b1aa:	8a 44 24 26          	mov    0x26(%rsp),%al
  22b1ae:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  22b1b2:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22b1b7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22b1bc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                                    current: $int_type,
                                    new: $int_type,
                                    success: Ordering,
                                    failure: Ordering) -> Result<$int_type, $int_type> {
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  22b1c1:	0f b6 c9             	movzbl %cl,%ecx
  22b1c4:	44 0f b6 c0          	movzbl %al,%r8d
  22b1c8:	e8 b3 86 00 00       	callq  233880 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  22b1cd:	48 89 04 24          	mov    %rax,(%rsp)
  22b1d1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22b1d6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22b1db:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22b1df:	48 83 c4 58          	add    $0x58,%rsp
  22b1e3:	c3                   	retq   
  22b1e4:	cc                   	int3   
  22b1e5:	cc                   	int3   
  22b1e6:	cc                   	int3   
  22b1e7:	cc                   	int3   
  22b1e8:	cc                   	int3   
  22b1e9:	cc                   	int3   
  22b1ea:	cc                   	int3   
  22b1eb:	cc                   	int3   
  22b1ec:	cc                   	int3   
  22b1ed:	cc                   	int3   
  22b1ee:	cc                   	int3   
  22b1ef:	cc                   	int3   

000000000022b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  22b1f0:	48 83 ec 38          	sub    $0x38,%rsp
  22b1f4:	40 88 f0             	mov    %sil,%al
  22b1f7:	88 44 24 17          	mov    %al,0x17(%rsp)
  22b1fb:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b200:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22b204:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22b209:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22b20e:	8a 44 24 17          	mov    0x17(%rsp),%al
  22b212:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  22b217:	0f b6 f0             	movzbl %al,%esi
  22b21a:	e8 f1 84 00 00       	callq  233710 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  22b21f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b224:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  22b229:	48 83 c4 38          	add    $0x38,%rsp
  22b22d:	c3                   	retq   
  22b22e:	cc                   	int3   
  22b22f:	cc                   	int3   

000000000022b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  22b230:	48 83 ec 38          	sub    $0x38,%rsp
  22b234:	48 89 34 24          	mov    %rsi,(%rsp)
  22b238:	88 d0                	mov    %dl,%al
  22b23a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b23e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22b243:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22b248:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22b24c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b251:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22b256:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b25a:	48 8b 34 24          	mov    (%rsp),%rsi
  22b25e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  22b263:	0f b6 d0             	movzbl %al,%edx
  22b266:	e8 55 85 00 00       	callq  2337c0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  22b26b:	48 83 c4 38          	add    $0x38,%rsp
  22b26f:	c3                   	retq   

000000000022b270 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6ef004abf18267a1E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
  22b270:	48 83 ec 48          	sub    $0x48,%rsp
  22b274:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22b279:	88 d0                	mov    %dl,%al
  22b27b:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22b27f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22b284:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22b289:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  22b28d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b292:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22b297:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22b29b:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22b2a0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_add(self.v.get(), val, order) }
  22b2a5:	0f b6 d0             	movzbl %al,%edx
  22b2a8:	e8 03 25 00 00       	callq  22d7b0 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE>
  22b2ad:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b2b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  22b2b7:	48 83 c4 48          	add    $0x48,%rsp
  22b2bb:	c3                   	retq   
  22b2bc:	cc                   	int3   
  22b2bd:	cc                   	int3   
  22b2be:	cc                   	int3   
  22b2bf:	cc                   	int3   

000000000022b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>:
///
/// [`hint::spin_loop`]: crate::hint::spin_loop
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[rustc_deprecated(since = "1.51.0", reason = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
  22b2c0:	50                   	push   %rax
    spin_loop()
  22b2c1:	e8 aa df fe ff       	callq  219270 <_ZN4core4hint9spin_loop17h4ac7c45e53932ad1E>
}
  22b2c6:	58                   	pop    %rax
  22b2c7:	c3                   	retq   
  22b2c8:	cc                   	int3   
  22b2c9:	cc                   	int3   
  22b2ca:	cc                   	int3   
  22b2cb:	cc                   	int3   
  22b2cc:	cc                   	int3   
  22b2cd:	cc                   	int3   
  22b2ce:	cc                   	int3   
  22b2cf:	cc                   	int3   

000000000022b2d0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
  22b2d0:	48 83 ec 10          	sub    $0x10,%rsp
  22b2d4:	40 88 f8             	mov    %dil,%al
  22b2d7:	88 44 24 0e          	mov    %al,0xe(%rsp)
    match order {
  22b2db:	0f b6 44 24 0e       	movzbl 0xe(%rsp),%eax
  22b2e0:	48 89 04 24          	mov    %rax,(%rsp)
  22b2e4:	48 8b 04 24          	mov    (%rsp),%rax
  22b2e8:	48 8d 0d 25 7f fd ff 	lea    -0x280db(%rip),%rcx        # 203214 <str.0+0x24>
  22b2ef:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22b2f3:	48 01 c8             	add    %rcx,%rax
  22b2f6:	ff e0                	jmpq   *%rax
  22b2f8:	0f 0b                	ud2    
        Relaxed => Relaxed,
  22b2fa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  22b2ff:	eb 1a                	jmp    22b31b <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        Release => Relaxed,
  22b301:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  22b306:	eb 13                	jmp    22b31b <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        Acquire => Acquire,
  22b308:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  22b30d:	eb 0c                	jmp    22b31b <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        AcqRel => Acquire,
  22b30f:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  22b314:	eb 05                	jmp    22b31b <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        SeqCst => SeqCst,
  22b316:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
}
  22b31b:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b31f:	48 83 c4 10          	add    $0x10,%rsp
  22b323:	c3                   	retq   
  22b324:	cc                   	int3   
  22b325:	cc                   	int3   
  22b326:	cc                   	int3   
  22b327:	cc                   	int3   
  22b328:	cc                   	int3   
  22b329:	cc                   	int3   
  22b32a:	cc                   	int3   
  22b32b:	cc                   	int3   
  22b32c:	cc                   	int3   
  22b32d:	cc                   	int3   
  22b32e:	cc                   	int3   
  22b32f:	cc                   	int3   

000000000022b330 <_ZN4core4sync6atomic9AtomicU644load17h8406c945683f8232E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  22b330:	48 83 ec 38          	sub    $0x38,%rsp
  22b334:	40 88 f0             	mov    %sil,%al
  22b337:	88 44 24 17          	mov    %al,0x17(%rsp)
  22b33b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b340:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22b344:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22b349:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22b34e:	8a 44 24 17          	mov    0x17(%rsp),%al
  22b352:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  22b357:	0f b6 f0             	movzbl %al,%esi
  22b35a:	e8 11 25 00 00       	callq  22d870 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E>
  22b35f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b364:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  22b369:	48 83 c4 38          	add    $0x38,%rsp
  22b36d:	c3                   	retq   
  22b36e:	cc                   	int3   
  22b36f:	cc                   	int3   

000000000022b370 <_ZN4core4sync6atomic9AtomicU645store17h5dabdcca03d941feE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  22b370:	48 83 ec 38          	sub    $0x38,%rsp
  22b374:	48 89 34 24          	mov    %rsi,(%rsp)
  22b378:	88 d0                	mov    %dl,%al
  22b37a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b37e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22b383:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22b388:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22b38c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b391:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22b396:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b39a:	48 8b 34 24          	mov    (%rsp),%rsi
  22b39e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  22b3a3:	0f b6 d0             	movzbl %al,%edx
  22b3a6:	e8 75 25 00 00       	callq  22d920 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E>
            }
  22b3ab:	48 83 c4 38          	add    $0x38,%rsp
  22b3af:	c3                   	retq   

000000000022b3b0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h4059f29c83e0e679E>:
    impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
    where
        A: PartialEq<B>,
    {
        #[inline]
        fn eq(&self, other: &&B) -> bool {
  22b3b0:	48 83 ec 18          	sub    $0x18,%rsp
  22b3b4:	48 89 f0             	mov    %rsi,%rax
  22b3b7:	48 89 f9             	mov    %rdi,%rcx
  22b3ba:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22b3bf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::eq(*self, *other)
  22b3c4:	48 8b 39             	mov    (%rcx),%rdi
  22b3c7:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  22b3cb:	48 8b 10             	mov    (%rax),%rdx
  22b3ce:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22b3d2:	e8 e9 2e ff ff       	callq  21e2c0 <_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h16fc3b88bb1d607fE>
  22b3d7:	88 44 24 07          	mov    %al,0x7(%rsp)
  22b3db:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  22b3df:	24 01                	and    $0x1,%al
  22b3e1:	0f b6 c0             	movzbl %al,%eax
  22b3e4:	48 83 c4 18          	add    $0x18,%rsp
  22b3e8:	c3                   	retq   
  22b3e9:	cc                   	int3   
  22b3ea:	cc                   	int3   
  22b3eb:	cc                   	int3   
  22b3ec:	cc                   	int3   
  22b3ed:	cc                   	int3   
  22b3ee:	cc                   	int3   
  22b3ef:	cc                   	int3   

000000000022b3f0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17hc4e39ee727fe4555E>:
        fn eq(&self, other: &&B) -> bool {
  22b3f0:	48 83 ec 18          	sub    $0x18,%rsp
  22b3f4:	48 89 f0             	mov    %rsi,%rax
  22b3f7:	48 89 f9             	mov    %rdi,%rcx
  22b3fa:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22b3ff:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::eq(*self, *other)
  22b404:	48 8b 39             	mov    (%rcx),%rdi
  22b407:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  22b40b:	48 8b 10             	mov    (%rax),%rdx
  22b40e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22b412:	e8 09 3f 00 00       	callq  22f320 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>
  22b417:	88 44 24 07          	mov    %al,0x7(%rsp)
  22b41b:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  22b41f:	24 01                	and    $0x1,%al
  22b421:	0f b6 c0             	movzbl %al,%eax
  22b424:	48 83 c4 18          	add    $0x18,%rsp
  22b428:	c3                   	retq   
  22b429:	cc                   	int3   
  22b42a:	cc                   	int3   
  22b42b:	cc                   	int3   
  22b42c:	cc                   	int3   
  22b42d:	cc                   	int3   
  22b42e:	cc                   	int3   
  22b42f:	cc                   	int3   

000000000022b430 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>:
        #[inline]
        fn ne(&self, other: &&B) -> bool {
  22b430:	48 83 ec 18          	sub    $0x18,%rsp
  22b434:	48 89 f0             	mov    %rsi,%rax
  22b437:	48 89 f9             	mov    %rdi,%rcx
  22b43a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22b43f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::ne(*self, *other)
  22b444:	48 8b 39             	mov    (%rcx),%rdi
  22b447:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  22b44b:	48 8b 10             	mov    (%rax),%rdx
  22b44e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22b452:	e8 89 3f 00 00       	callq  22f3e0 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2ne17he788fbf8f176b944E>
  22b457:	88 44 24 07          	mov    %al,0x7(%rsp)
  22b45b:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  22b45f:	24 01                	and    $0x1,%al
  22b461:	0f b6 c0             	movzbl %al,%eax
  22b464:	48 83 c4 18          	add    $0x18,%rsp
  22b468:	c3                   	retq   
  22b469:	cc                   	int3   
  22b46a:	cc                   	int3   
  22b46b:	cc                   	int3   
  22b46c:	cc                   	int3   
  22b46d:	cc                   	int3   
  22b46e:	cc                   	int3   
  22b46f:	cc                   	int3   

000000000022b470 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E>:
pub extern "x86-interrupt" fn divide_by_zero(stk: InterruptStackFrame) {
  22b470:	41 53                	push   %r11
  22b472:	41 52                	push   %r10
  22b474:	41 51                	push   %r9
  22b476:	41 50                	push   %r8
  22b478:	57                   	push   %rdi
  22b479:	56                   	push   %rsi
  22b47a:	52                   	push   %rdx
  22b47b:	51                   	push   %rcx
  22b47c:	50                   	push   %rax
  22b47d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  22b484:	fc                   	cld    
  22b485:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  22b48c:	00 
  22b48d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  22b492:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  22b499:	00 00 
  22b49b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b4a0:	48 8d 35 51 4e fd ff 	lea    -0x2b1af(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22b4a7:	e8 24 7b fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b4ac:	88 44 24 37          	mov    %al,0x37(%rsp)
  22b4b0:	8a 44 24 37          	mov    0x37(%rsp),%al
  22b4b4:	a8 01                	test   $0x1,%al
  22b4b6:	75 09                	jne    22b4c1 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x51>
  22b4b8:	eb 00                	jmp    22b4ba <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x4a>
  22b4ba:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  22b4bf:	eb 4e                	jmp    22b50f <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x9f>
  22b4c1:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  22b4c8:	00 
  22b4c9:	48 8b 3d 78 26 01 00 	mov    0x12678(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22b4d0:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  22b4d7:	00 
  22b4d8:	e8 13 fd ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22b4dd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22b4e4:	00 
  22b4e5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22b4ec:	00 
  22b4ed:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22b4f2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b4f7:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  22b4fc:	e8 cf 7a fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b501:	88 44 24 27          	mov    %al,0x27(%rsp)
  22b505:	8a 44 24 27          	mov    0x27(%rsp),%al
  22b509:	24 01                	and    $0x1,%al
  22b50b:	88 44 24 47          	mov    %al,0x47(%rsp)
  22b50f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  22b514:	75 16                	jne    22b52c <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0xbc>
}
  22b516:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  22b51d:	58                   	pop    %rax
  22b51e:	59                   	pop    %rcx
  22b51f:	5a                   	pop    %rdx
  22b520:	5e                   	pop    %rsi
  22b521:	5f                   	pop    %rdi
  22b522:	41 58                	pop    %r8
  22b524:	41 59                	pop    %r9
  22b526:	41 5a                	pop    %r10
  22b528:	41 5b                	pop    %r11
  22b52a:	48 cf                	iretq  
  22b52c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  22b531:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22b538:	00 
  22b539:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  22b540:	00 
  22b541:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22b548:	00 
  22b549:	48 8d 35 e0 e1 ff ff 	lea    -0x1e20(%rip),%rsi        # 229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22b550:	e8 0b 3c fe ff       	callq  20f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22b555:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b55a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22b55f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22b564:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22b569:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  22b570:	00 
  22b571:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22b578:	00 
  22b579:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  22b580:	00 
  22b581:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b586:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b58b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b590:	48 8d 35 29 13 01 00 	lea    0x11329(%rip),%rsi        # 23c8c0 <memcmp+0x3b80>
  22b597:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22b59d:	4c 8d 0d b4 7c fd ff 	lea    -0x2834c(%rip),%r9        # 203258 <str.0+0x68>
  22b5a4:	4c 89 c2             	mov    %r8,%rdx
  22b5a7:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  22b5ae:	00 
  22b5af:	e8 1c af fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  22b5b4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  22b5b9:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b5be:	48 8d 15 0b 13 01 00 	lea    0x1130b(%rip),%rdx        # 23c8d0 <memcmp+0x3b90>
  22b5c5:	e8 b6 77 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22b5ca:	e9 47 ff ff ff       	jmpq   22b516 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0xa6>
  22b5cf:	cc                   	int3   

000000000022b5d0 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E>:
extern "x86-interrupt" fn breakpoint(stk: InterruptStackFrame) {
  22b5d0:	41 53                	push   %r11
  22b5d2:	41 52                	push   %r10
  22b5d4:	41 51                	push   %r9
  22b5d6:	41 50                	push   %r8
  22b5d8:	57                   	push   %rdi
  22b5d9:	56                   	push   %rsi
  22b5da:	52                   	push   %rdx
  22b5db:	51                   	push   %rcx
  22b5dc:	50                   	push   %rax
  22b5dd:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  22b5e4:	fc                   	cld    
  22b5e5:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  22b5ec:	00 
  22b5ed:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  22b5f2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  22b5f9:	00 00 
  22b5fb:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b600:	48 8d 35 f1 4c fd ff 	lea    -0x2b30f(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22b607:	e8 c4 79 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b60c:	88 44 24 37          	mov    %al,0x37(%rsp)
  22b610:	8a 44 24 37          	mov    0x37(%rsp),%al
  22b614:	a8 01                	test   $0x1,%al
  22b616:	75 09                	jne    22b621 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x51>
  22b618:	eb 00                	jmp    22b61a <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x4a>
  22b61a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  22b61f:	eb 4e                	jmp    22b66f <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x9f>
  22b621:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  22b628:	00 
  22b629:	48 8b 3d 18 25 01 00 	mov    0x12518(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22b630:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  22b637:	00 
  22b638:	e8 b3 fb ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22b63d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22b644:	00 
  22b645:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22b64c:	00 
  22b64d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22b652:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b657:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  22b65c:	e8 6f 79 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b661:	88 44 24 27          	mov    %al,0x27(%rsp)
  22b665:	8a 44 24 27          	mov    0x27(%rsp),%al
  22b669:	24 01                	and    $0x1,%al
  22b66b:	88 44 24 47          	mov    %al,0x47(%rsp)
  22b66f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  22b674:	75 16                	jne    22b68c <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0xbc>
}
  22b676:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  22b67d:	58                   	pop    %rax
  22b67e:	59                   	pop    %rcx
  22b67f:	5a                   	pop    %rdx
  22b680:	5e                   	pop    %rsi
  22b681:	5f                   	pop    %rdi
  22b682:	41 58                	pop    %r8
  22b684:	41 59                	pop    %r9
  22b686:	41 5a                	pop    %r10
  22b688:	41 5b                	pop    %r11
  22b68a:	48 cf                	iretq  
  22b68c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  22b691:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22b698:	00 
  22b699:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  22b6a0:	00 
  22b6a1:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22b6a8:	00 
  22b6a9:	48 8d 35 80 e0 ff ff 	lea    -0x1f80(%rip),%rsi        # 229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22b6b0:	e8 ab 3a fe ff       	callq  20f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22b6b5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b6ba:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22b6bf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22b6c4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22b6c9:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  22b6d0:	00 
  22b6d1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22b6d8:	00 
  22b6d9:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  22b6e0:	00 
  22b6e1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b6e6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b6eb:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b6f0:	48 8d 35 11 12 01 00 	lea    0x11211(%rip),%rsi        # 23c908 <memcmp+0x3bc8>
  22b6f7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22b6fd:	4c 8d 0d 54 7b fd ff 	lea    -0x284ac(%rip),%r9        # 203258 <str.0+0x68>
  22b704:	4c 89 c2             	mov    %r8,%rdx
  22b707:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  22b70e:	00 
  22b70f:	e8 bc ad fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  22b714:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  22b719:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b71e:	48 8d 15 f3 11 01 00 	lea    0x111f3(%rip),%rdx        # 23c918 <memcmp+0x3bd8>
  22b725:	e8 56 76 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22b72a:	e9 47 ff ff ff       	jmpq   22b676 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0xa6>
  22b72f:	cc                   	int3   

000000000022b730 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE>:
extern "x86-interrupt" fn invalid_opcode(stk: InterruptStackFrame) {
  22b730:	41 53                	push   %r11
  22b732:	41 52                	push   %r10
  22b734:	41 51                	push   %r9
  22b736:	41 50                	push   %r8
  22b738:	57                   	push   %rdi
  22b739:	56                   	push   %rsi
  22b73a:	52                   	push   %rdx
  22b73b:	51                   	push   %rcx
  22b73c:	50                   	push   %rax
  22b73d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  22b744:	fc                   	cld    
  22b745:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  22b74c:	00 
  22b74d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  22b752:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  22b759:	00 00 
  22b75b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b760:	48 8d 35 91 4b fd ff 	lea    -0x2b46f(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22b767:	e8 64 78 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b76c:	88 44 24 37          	mov    %al,0x37(%rsp)
  22b770:	8a 44 24 37          	mov    0x37(%rsp),%al
  22b774:	a8 01                	test   $0x1,%al
  22b776:	75 09                	jne    22b781 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x51>
  22b778:	eb 00                	jmp    22b77a <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x4a>
  22b77a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  22b77f:	eb 4e                	jmp    22b7cf <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x9f>
  22b781:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  22b788:	00 
  22b789:	48 8b 3d b8 23 01 00 	mov    0x123b8(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22b790:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  22b797:	00 
  22b798:	e8 53 fa ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22b79d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22b7a4:	00 
  22b7a5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22b7ac:	00 
  22b7ad:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22b7b2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22b7b7:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  22b7bc:	e8 0f 78 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b7c1:	88 44 24 27          	mov    %al,0x27(%rsp)
  22b7c5:	8a 44 24 27          	mov    0x27(%rsp),%al
  22b7c9:	24 01                	and    $0x1,%al
  22b7cb:	88 44 24 47          	mov    %al,0x47(%rsp)
  22b7cf:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  22b7d4:	75 16                	jne    22b7ec <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0xbc>
}
  22b7d6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  22b7dd:	58                   	pop    %rax
  22b7de:	59                   	pop    %rcx
  22b7df:	5a                   	pop    %rdx
  22b7e0:	5e                   	pop    %rsi
  22b7e1:	5f                   	pop    %rdi
  22b7e2:	41 58                	pop    %r8
  22b7e4:	41 59                	pop    %r9
  22b7e6:	41 5a                	pop    %r10
  22b7e8:	41 5b                	pop    %r11
  22b7ea:	48 cf                	iretq  
  22b7ec:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  22b7f1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22b7f8:	00 
  22b7f9:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  22b800:	00 
  22b801:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22b808:	00 
  22b809:	48 8d 35 20 df ff ff 	lea    -0x20e0(%rip),%rsi        # 229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22b810:	e8 4b 39 fe ff       	callq  20f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22b815:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b81a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22b81f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22b824:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22b829:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  22b830:	00 
  22b831:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22b838:	00 
  22b839:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  22b840:	00 
  22b841:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b846:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b84b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b850:	48 8d 35 f9 10 01 00 	lea    0x110f9(%rip),%rsi        # 23c950 <memcmp+0x3c10>
  22b857:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22b85d:	4c 8d 0d f4 79 fd ff 	lea    -0x2860c(%rip),%r9        # 203258 <str.0+0x68>
  22b864:	4c 89 c2             	mov    %r8,%rdx
  22b867:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  22b86e:	00 
  22b86f:	e8 5c ac fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  22b874:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  22b879:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22b87e:	48 8d 15 db 10 01 00 	lea    0x110db(%rip),%rdx        # 23c960 <memcmp+0x3c20>
  22b885:	e8 f6 74 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22b88a:	e9 47 ff ff ff       	jmpq   22b7d6 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0xa6>
  22b88f:	cc                   	int3   

000000000022b890 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E>:
extern "x86-interrupt" fn double_fault(stk: InterruptStackFrame, err: u64) -> ! {
  22b890:	50                   	push   %rax
  22b891:	41 53                	push   %r11
  22b893:	41 52                	push   %r10
  22b895:	41 51                	push   %r9
  22b897:	41 50                	push   %r8
  22b899:	57                   	push   %rdi
  22b89a:	56                   	push   %rsi
  22b89b:	52                   	push   %rdx
  22b89c:	51                   	push   %rcx
  22b89d:	50                   	push   %rax
  22b89e:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  22b8a5:	fc                   	cld    
  22b8a6:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  22b8ad:	00 
  22b8ae:	48 8d 84 24 50 01 00 	lea    0x150(%rsp),%rax
  22b8b5:	00 
  22b8b6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  22b8bb:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  22b8c2:	00 00 
  22b8c4:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22b8c9:	48 8d 35 28 4a fd ff 	lea    -0x2b5d8(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22b8d0:	e8 fb 76 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b8d5:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  22b8d9:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  22b8dd:	a8 01                	test   $0x1,%al
  22b8df:	75 09                	jne    22b8ea <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0x5a>
  22b8e1:	eb 00                	jmp    22b8e3 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0x53>
  22b8e3:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22b8e8:	eb 4e                	jmp    22b938 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xa8>
  22b8ea:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  22b8f1:	00 
  22b8f2:	48 8b 3d 4f 22 01 00 	mov    0x1224f(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22b8f9:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  22b900:	00 
  22b901:	e8 ea f8 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22b906:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22b90d:	00 
  22b90e:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22b915:	00 
  22b916:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22b91b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22b920:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  22b925:	e8 a6 76 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b92a:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  22b92e:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  22b932:	24 01                	and    $0x1,%al
  22b934:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  22b938:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  22b93d:	75 07                	jne    22b946 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xb6>
    cpu::halt_no_interrupts();
  22b93f:	e8 dc 4d fe ff       	callq  210720 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>
  22b944:	0f 0b                	ud2    
  22b946:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  22b94b:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  22b952:	00 
  22b953:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  22b95a:	00 
  22b95b:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22b962:	00 
  22b963:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  22b96a:	00 
  22b96b:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  22b972:	00 
  22b973:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22b97a:	00 
  22b97b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22b980:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  22b987:	00 
  22b988:	48 8b 35 09 22 01 00 	mov    0x12209(%rip),%rsi        # 23db98 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  22b98f:	e8 ac 3c fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22b994:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22b999:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22b99e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22b9a3:	48 8d 35 86 dd ff ff 	lea    -0x227a(%rip),%rsi        # 229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22b9aa:	e8 b1 37 fe ff       	callq  20f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22b9af:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b9b4:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22b9b9:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22b9be:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22b9c3:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22b9c8:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  22b9cd:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  22b9d4:	00 
  22b9d5:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  22b9dc:	00 
  22b9dd:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  22b9e4:	00 
  22b9e5:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22b9ec:	00 
  22b9ed:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  22b9f4:	00 
  22b9f5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b9fa:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22b9ff:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  22ba04:	48 8d 35 8d 0f 01 00 	lea    0x10f8d(%rip),%rsi        # 23c998 <memcmp+0x3c58>
  22ba0b:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  22ba11:	4c 8d 0d 20 79 fd ff 	lea    -0x286e0(%rip),%r9        # 203338 <str.0+0x148>
  22ba18:	4c 89 c2             	mov    %r8,%rdx
  22ba1b:	48 c7 04 24 02 00 00 	movq   $0x2,(%rsp)
  22ba22:	00 
  22ba23:	e8 a8 aa fd ff       	callq  2064d0 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  22ba28:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  22ba2d:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  22ba32:	48 8d 15 7f 0f 01 00 	lea    0x10f7f(%rip),%rdx        # 23c9b8 <memcmp+0x3c78>
  22ba39:	e8 42 73 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22ba3e:	e9 fc fe ff ff       	jmpq   22b93f <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xaf>
  22ba43:	cc                   	int3   
  22ba44:	cc                   	int3   
  22ba45:	cc                   	int3   
  22ba46:	cc                   	int3   
  22ba47:	cc                   	int3   
  22ba48:	cc                   	int3   
  22ba49:	cc                   	int3   
  22ba4a:	cc                   	int3   
  22ba4b:	cc                   	int3   
  22ba4c:	cc                   	int3   
  22ba4d:	cc                   	int3   
  22ba4e:	cc                   	int3   
  22ba4f:	cc                   	int3   

000000000022ba50 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E>:
extern "x86-interrupt" fn page_fault(stk: InterruptStackFrame, err: PageFaultExceptionTypes) -> ! {
  22ba50:	50                   	push   %rax
  22ba51:	41 53                	push   %r11
  22ba53:	41 52                	push   %r10
  22ba55:	41 51                	push   %r9
  22ba57:	41 50                	push   %r8
  22ba59:	57                   	push   %rdi
  22ba5a:	56                   	push   %rsi
  22ba5b:	52                   	push   %rdx
  22ba5c:	51                   	push   %rcx
  22ba5d:	50                   	push   %rax
  22ba5e:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  22ba65:	fc                   	cld    
  22ba66:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  22ba6d:	00 
  22ba6e:	48 8d 84 24 70 01 00 	lea    0x170(%rsp),%rax
  22ba75:	00 
  22ba76:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    let cr2_val = read_cr2();
  22ba7b:	e8 b0 97 fe ff       	callq  215230 <_ZN9r3_kernel3cpu3mmu8read_cr217hb14237c00b02fb42E>
  22ba80:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    log::error!(
  22ba85:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  22ba8c:	00 00 
  22ba8e:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22ba93:	48 8d 35 5e 48 fd ff 	lea    -0x2b7a2(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22ba9a:	e8 31 75 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ba9f:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  22baa3:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  22baa7:	a8 01                	test   $0x1,%al
  22baa9:	75 09                	jne    22bab4 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0x64>
  22baab:	eb 00                	jmp    22baad <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0x5d>
  22baad:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22bab2:	eb 4e                	jmp    22bb02 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xb2>
  22bab4:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22babb:	00 
  22babc:	48 8b 3d 85 20 01 00 	mov    0x12085(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22bac3:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  22baca:	00 
  22bacb:	e8 20 f7 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22bad0:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  22bad7:	00 
  22bad8:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22badf:	00 
  22bae0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22bae5:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22baea:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  22baef:	e8 dc 74 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22baf4:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  22baf8:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  22bafc:	24 01                	and    $0x1,%al
  22bafe:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  22bb02:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  22bb07:	75 07                	jne    22bb10 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xc0>
    cpu::halt_no_interrupts();
  22bb09:	e8 12 4c fe ff       	callq  210720 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>
  22bb0e:	0f 0b                	ud2    
  22bb10:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!(
  22bb15:	48 8d 8c 24 68 01 00 	lea    0x168(%rsp),%rcx
  22bb1c:	00 
  22bb1d:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  22bb24:	00 
  22bb25:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  22bb2a:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  22bb31:	00 
  22bb32:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22bb39:	00 
  22bb3a:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  22bb41:	00 
  22bb42:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  22bb49:	00 
  22bb4a:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22bb51:	00 
  22bb52:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22bb57:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22bb5e:	00 
  22bb5f:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22bb66:	00 
  22bb67:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22bb6c:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  22bb73:	00 
  22bb74:	48 8d 35 f5 96 fe ff 	lea    -0x1690b(%rip),%rsi        # 215270 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E>
  22bb7b:	e8 c0 37 fe ff       	callq  20f340 <_ZN4core3fmt10ArgumentV13new17h731e686b89db936cE>
  22bb80:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22bb85:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22bb8a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22bb8f:	48 8b 35 ba 1f 01 00 	mov    0x11fba(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  22bb96:	e8 a5 3a fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22bb9b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22bba0:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22bba5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22bbaa:	48 8d 35 7f db ff ff 	lea    -0x2481(%rip),%rsi        # 229730 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22bbb1:	e8 aa 35 fe ff       	callq  20f160 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22bbb6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22bbbb:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22bbc0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bbc5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22bbca:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22bbcf:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22bbd4:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  22bbd9:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  22bbde:	4c 89 84 24 a8 00 00 	mov    %r8,0xa8(%rsp)
  22bbe5:	00 
  22bbe6:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  22bbed:	00 
  22bbee:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
  22bbf5:	00 
  22bbf6:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  22bbfd:	00 
  22bbfe:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  22bc05:	00 
  22bc06:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22bc0d:	00 
  22bc0e:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  22bc15:	00 
  22bc16:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  22bc1b:	48 8d 35 ce 0d 01 00 	lea    0x10dce(%rip),%rsi        # 23c9f0 <memcmp+0x3cb0>
  22bc22:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  22bc28:	4c 89 c2             	mov    %r8,%rdx
  22bc2b:	e8 00 a9 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22bc30:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  22bc35:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  22bc3a:	48 8d 15 df 0d 01 00 	lea    0x10ddf(%rip),%rdx        # 23ca20 <memcmp+0x3ce0>
  22bc41:	e8 3a 71 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22bc46:	e9 be fe ff ff       	jmpq   22bb09 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xb9>
  22bc4b:	cc                   	int3   
  22bc4c:	cc                   	int3   
  22bc4d:	cc                   	int3   
  22bc4e:	cc                   	int3   
  22bc4f:	cc                   	int3   

000000000022bc50 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE>:
pub fn prepare_idt() -> InterruptDescriptorTable {
  22bc50:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  22bc57:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22bc5c:	48 89 f8             	mov    %rdi,%rax
  22bc5f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut idt = InterruptDescriptorTable::empty();
  22bc64:	e8 f7 db ff ff       	callq  229860 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17h3a6f80c6cbdbf80fE>
    idt.divide_error = prepare_default_handle(divide_by_zero);
  22bc69:	48 8d 3d 00 f8 ff ff 	lea    -0x800(%rip),%rdi        # 22b470 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E>
  22bc70:	e8 3b e6 ff ff       	callq  22a2b0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  22bc75:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  22bc7c:	00 
  22bc7d:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22bc84:	00 
  22bc85:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22bc8c:	00 
  22bc8d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22bc92:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22bc99:	00 
  22bc9a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22bc9f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bca4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22bca9:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22bcae:	48 89 50 08          	mov    %rdx,0x8(%rax)
  22bcb2:	48 89 08             	mov    %rcx,(%rax)
    idt.invalid_opcode = prepare_default_handle(invalid_opcode);
  22bcb5:	48 8d 3d 74 fa ff ff 	lea    -0x58c(%rip),%rdi        # 22b730 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE>
  22bcbc:	e8 ef e5 ff ff       	callq  22a2b0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  22bcc1:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  22bcc8:	00 
  22bcc9:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  22bcd0:	00 
  22bcd1:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  22bcd8:	00 
  22bcd9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22bcde:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22bce5:	00 
  22bce6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22bceb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bcf0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22bcf5:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22bcfa:	48 89 50 68          	mov    %rdx,0x68(%rax)
  22bcfe:	48 89 48 60          	mov    %rcx,0x60(%rax)
    idt.breakpoint = prepare_default_handle(breakpoint);
  22bd02:	48 8d 3d c7 f8 ff ff 	lea    -0x739(%rip),%rdi        # 22b5d0 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E>
  22bd09:	e8 a2 e5 ff ff       	callq  22a2b0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  22bd0e:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  22bd15:	00 
  22bd16:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22bd1d:	00 
  22bd1e:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  22bd25:	00 
  22bd26:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22bd2b:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22bd32:	00 
  22bd33:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22bd38:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bd3d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  22bd42:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  22bd47:	48 89 50 38          	mov    %rdx,0x38(%rax)
  22bd4b:	48 89 48 30          	mov    %rcx,0x30(%rax)
    idt.double_fault = prepare_no_ret_error_code_handle(double_fault);
  22bd4f:	48 8d 3d 3a fb ff ff 	lea    -0x4c6(%rip),%rdi        # 22b890 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E>
  22bd56:	e8 b5 e5 ff ff       	callq  22a310 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3413212289963e19E>
  22bd5b:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  22bd62:	00 
  22bd63:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22bd6a:	00 
  22bd6b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22bd72:	00 
  22bd73:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22bd78:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22bd7f:	00 
  22bd80:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22bd85:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bd8a:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22bd8f:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22bd94:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  22bd9b:	48 89 88 80 00 00 00 	mov    %rcx,0x80(%rax)
    idt.page_fault = prepare_page_fault_handler(page_fault);
  22bda2:	48 8d 3d a7 fc ff ff 	lea    -0x359(%rip),%rdi        # 22ba50 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E>
  22bda9:	e8 c2 e5 ff ff       	callq  22a370 <_ZN9r3_kernel3cpu10interrupts26prepare_page_fault_handler17h49693b7356911dbaE>
  22bdae:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  22bdb5:	00 
  22bdb6:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22bdbd:	00 
  22bdbe:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22bdc5:	00 
  22bdc6:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22bdcb:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  22bdd2:	00 
  22bdd3:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22bdd8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22bddd:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22bde2:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  22bde9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22bdee:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
    idt.double_fault.set_stack_index(0);
  22bdf5:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
  22bdfc:	31 f6                	xor    %esi,%esi
  22bdfe:	e8 6d 70 fe ff       	callq  212e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E>
    log::info!("Prepared basic exceptions.");
  22be03:	48 c7 44 24 70 03 00 	movq   $0x3,0x70(%rsp)
  22be0a:	00 00 
  22be0c:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22be11:	48 8d 35 e0 44 fd ff 	lea    -0x2bb20(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22be18:	e8 b3 71 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22be1d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22be21:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22be25:	a8 01                	test   $0x1,%al
  22be27:	75 09                	jne    22be32 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE+0x1e2>
  22be29:	eb 00                	jmp    22be2b <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE+0x1db>
  22be2b:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  22be30:	eb 54                	jmp    22be86 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE+0x236>
  22be32:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22be39:	00 
  22be3a:	48 8b 3d 07 1d 01 00 	mov    0x11d07(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22be41:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  22be48:	00 
  22be49:	e8 a2 f3 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22be4e:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  22be55:	00 
  22be56:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22be5d:	00 
  22be5e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22be65:	00 
  22be66:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22be6b:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  22be72:	00 
  22be73:	e8 58 71 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22be78:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22be7c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22be80:	24 01                	and    $0x1,%al
  22be82:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  22be86:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  22be8b:	75 0d                	jne    22be9a <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE+0x24a>
  22be8d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  22be92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  22be99:	c3                   	retq   
    log::info!("Prepared basic exceptions.");
  22be9a:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  22bea1:	00 
  22bea2:	48 8d 35 af 0b 01 00 	lea    0x10baf(%rip),%rsi        # 23ca58 <memcmp+0x3d18>
  22bea9:	ba 01 00 00 00       	mov    $0x1,%edx
  22beae:	48 8d 0d 63 75 fd ff 	lea    -0x28a9d(%rip),%rcx        # 203418 <str.0+0x228>
  22beb5:	31 c0                	xor    %eax,%eax
  22beb7:	41 89 c0             	mov    %eax,%r8d
  22beba:	e8 71 a6 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22bebf:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  22bec4:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  22becb:	00 
  22becc:	48 8d 15 95 0b 01 00 	lea    0x10b95(%rip),%rdx        # 23ca68 <memcmp+0x3d28>
  22bed3:	e8 a8 6e 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22bed8:	eb b3                	jmp    22be8d <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h2d38b6bbaf7a0a8fE+0x23d>
  22beda:	cc                   	int3   
  22bedb:	cc                   	int3   
  22bedc:	cc                   	int3   
  22bedd:	cc                   	int3   
  22bede:	cc                   	int3   
  22bedf:	cc                   	int3   

000000000022bee0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E>:
}

pub fn init_exceptions() {
  22bee0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    // load processor IDT
    IDT.lock().load_into_cpu();
  22bee7:	48 8d 3d 51 75 fd ff 	lea    -0x28aaf(%rip),%rdi        # 20343f <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E>
  22beee:	e8 fd 00 00 00       	callq  22bff0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17hde3a1d3397207210E>
  22bef3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22bef8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22befd:	e8 1e 2a 00 00       	callq  22e920 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h46cb2ac63999c8e5E>
  22bf02:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22bf07:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22bf0c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22bf11:	e8 7a 2d 00 00       	callq  22ec90 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha6ed20f075f12fd2E>
  22bf16:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22bf1b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22bf20:	e8 4b e3 ff ff       	callq  22a270 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17ha4a76b20fb1429c4E>
  22bf25:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22bf2a:	e8 21 00 fe ff       	callq  20bf50 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h2928cdecfeff22d4E>
    log::info!("Initialized Interrupt descriptor table.");
  22bf2f:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  22bf36:	00 00 
  22bf38:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22bf3d:	48 8d 35 b4 43 fd ff 	lea    -0x2bc4c(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22bf44:	e8 87 70 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22bf49:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22bf4d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22bf51:	a8 01                	test   $0x1,%al
  22bf53:	75 09                	jne    22bf5e <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0x7e>
  22bf55:	eb 00                	jmp    22bf57 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0x77>
  22bf57:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  22bf5c:	eb 48                	jmp    22bfa6 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xc6>
  22bf5e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  22bf63:	48 8b 3d de 1b 01 00 	mov    0x11bde(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22bf6a:	0f b6 74 24 7f       	movzbl 0x7f(%rsp),%esi
  22bf6f:	e8 7c f2 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22bf74:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22bf7b:	00 
  22bf7c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22bf83:	00 
  22bf84:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22bf89:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22bf8e:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  22bf93:	e8 38 70 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22bf98:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22bf9c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22bfa0:	24 01                	and    $0x1,%al
  22bfa2:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  22bfa6:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  22bfab:	75 08                	jne    22bfb5 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xd5>
}
  22bfad:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22bfb4:	c3                   	retq   
    log::info!("Initialized Interrupt descriptor table.");
  22bfb5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22bfba:	48 8d 35 df 0a 01 00 	lea    0x10adf(%rip),%rsi        # 23caa0 <memcmp+0x3d60>
  22bfc1:	ba 01 00 00 00       	mov    $0x1,%edx
  22bfc6:	48 8d 0d 4b 74 fd ff 	lea    -0x28bb5(%rip),%rcx        # 203418 <str.0+0x228>
  22bfcd:	31 c0                	xor    %eax,%eax
  22bfcf:	41 89 c0             	mov    %eax,%r8d
  22bfd2:	e8 59 a5 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22bfd7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22bfdc:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22bfe1:	48 8d 15 c8 0a 01 00 	lea    0x10ac8(%rip),%rdx        # 23cab0 <memcmp+0x3d70>
  22bfe8:	e8 93 6d 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22bfed:	eb be                	jmp    22bfad <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xcd>
  22bfef:	cc                   	int3   

000000000022bff0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17hde3a1d3397207210E>:
            fn deref(&self) -> &$T {
  22bff0:	48 83 ec 18          	sub    $0x18,%rsp
  22bff4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22bff9:	48 8d 05 80 88 01 00 	lea    0x18880(%rip),%rax        # 244880 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h66879a64a43cee66E>
  22c000:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22c005:	48 8d 3d 74 88 01 00 	lea    0x18874(%rip),%rdi        # 244880 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h66879a64a43cee66E>
  22c00c:	e8 5f c6 fd ff       	callq  208670 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02b245fa4f440cb7E>
  22c011:	48 89 04 24          	mov    %rax,(%rsp)
  22c015:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22c019:	48 83 c4 18          	add    $0x18,%rsp
  22c01d:	c3                   	retq   
  22c01e:	cc                   	int3   
  22c01f:	cc                   	int3   

000000000022c020 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE>:
use boot_proto::BootProtocol;
use bootloader::BootInfo;

/// This function is called on panic.

fn init_basic_setup(boot_info: &'static BootInfo) {
  22c020:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  22c027:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  22c02e:	00 
    BootProtocol::create(boot_info);
  22c02f:	e8 7c d9 fe ff       	callq  2199b0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17h63a7ef6bf2bc3967E>

    drivers::display::init();
  22c034:	e8 c7 9d fe ff       	callq  215e00 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE>
    logging::init();
  22c039:	e8 b2 d5 ff ff       	callq  2295f0 <_ZN9r3_kernel7logging4init17h648c946b5865c67bE>

    log::info!("Hello, kernel world!");
  22c03e:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  22c045:	00 00 
  22c047:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  22c04c:	48 8d 35 a5 42 fd ff 	lea    -0x2bd5b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c053:	e8 78 6f fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c058:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22c05c:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22c060:	a8 01                	test   $0x1,%al
  22c062:	75 09                	jne    22c06d <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x4d>
  22c064:	eb 00                	jmp    22c066 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x46>
  22c066:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22c06b:	eb 4e                	jmp    22c0bb <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x9b>
  22c06d:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  22c074:	00 
  22c075:	48 8b 3d cc 1a 01 00 	mov    0x11acc(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c07c:	0f b6 b4 24 bf 00 00 	movzbl 0xbf(%rsp),%esi
  22c083:	00 
  22c084:	e8 67 f1 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22c089:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22c090:	00 
  22c091:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22c098:	00 
  22c099:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22c09e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  22c0a3:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22c0a8:	e8 23 6f fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c0ad:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22c0b1:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22c0b5:	24 01                	and    $0x1,%al
  22c0b7:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22c0bb:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  22c0c0:	75 07                	jne    22c0c9 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xa9>
    BootProtocol::print_boot_info();
  22c0c2:	e8 69 db fe ff       	callq  219c30 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E>
  22c0c7:	eb 3a                	jmp    22c103 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xe3>
    log::info!("Hello, kernel world!");
  22c0c9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22c0ce:	48 8d 35 13 0a 01 00 	lea    0x10a13(%rip),%rsi        # 23cae8 <memcmp+0x3da8>
  22c0d5:	ba 01 00 00 00       	mov    $0x1,%edx
  22c0da:	48 8d 0d 77 73 fd ff 	lea    -0x28c89(%rip),%rcx        # 203458 <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x19>
  22c0e1:	31 c0                	xor    %eax,%eax
  22c0e3:	41 89 c0             	mov    %eax,%r8d
  22c0e6:	e8 45 a4 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c0eb:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22c0f0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22c0f5:	48 8d 15 fc 09 01 00 	lea    0x109fc(%rip),%rdx        # 23caf8 <memcmp+0x3db8>
  22c0fc:	e8 7f 6c 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22c101:	eb bf                	jmp    22c0c2 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xa2>

    cpu::init_base_processor_tables();
  22c103:	e8 28 46 fe ff       	callq  210730 <_ZN9r3_kernel3cpu26init_base_processor_tables17he70b2cdd0f8622b9E>

    cpu::init_core_legacy_hardware();
  22c108:	e8 03 47 fe ff       	callq  210810 <_ZN9r3_kernel3cpu25init_core_legacy_hardware17hcec1baff29e0317bE>
    cpu::init_features_detection();
  22c10d:	e8 2e 46 fe ff       	callq  210740 <_ZN9r3_kernel3cpu23init_features_detection17he58408ebd0f89f65E>
    cpu::run_test_breakpoint_recovery();
  22c112:	e8 39 46 fe ff       	callq  210750 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE>

    mm::init();
  22c117:	e8 e4 c4 ff ff       	callq  228600 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE>
    acpi::init();
  22c11c:	e8 bf fb fe ff       	callq  21bce0 <_ZN9r3_kernel4acpi4init17haae37bb483bcdc2bE>

    // init PCI device list.
    drivers::pci::detect_devices();
  22c121:	e8 5a 21 ff ff       	callq  21e280 <_ZN9r3_kernel7drivers3pci14detect_devices17hf40cc5a295e67b37E>

    // pit sleep for sometime:
    cpu::tsc::TSCSleeper::sleep_sec(1);
  22c126:	bf 01 00 00 00       	mov    $0x1,%edi
  22c12b:	e8 50 f9 fe ff       	callq  21ba80 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE>

    log::info!("Initial stage booted properly.");
  22c130:	48 c7 44 24 58 03 00 	movq   $0x3,0x58(%rsp)
  22c137:	00 00 
  22c139:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22c13e:	48 8d 35 b3 41 fd ff 	lea    -0x2be4d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c145:	e8 86 6e fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c14a:	88 44 24 0d          	mov    %al,0xd(%rsp)
  22c14e:	8a 44 24 0d          	mov    0xd(%rsp),%al
  22c152:	a8 01                	test   $0x1,%al
  22c154:	75 09                	jne    22c15f <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x13f>
  22c156:	eb 00                	jmp    22c158 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x138>
  22c158:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  22c15d:	eb 4e                	jmp    22c1ad <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x18d>
  22c15f:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  22c166:	00 
  22c167:	48 8b 3d da 19 01 00 	mov    0x119da(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c16e:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  22c175:	00 
  22c176:	e8 75 f0 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22c17b:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22c182:	00 
  22c183:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  22c18a:	00 
  22c18b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22c190:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22c195:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  22c19a:	e8 31 6e fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c19f:	88 44 24 0c          	mov    %al,0xc(%rsp)
  22c1a3:	8a 44 24 0c          	mov    0xc(%rsp),%al
  22c1a7:	24 01                	and    $0x1,%al
  22c1a9:	88 44 24 67          	mov    %al,0x67(%rsp)
  22c1ad:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  22c1b2:	75 08                	jne    22c1bc <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x19c>
}
  22c1b4:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  22c1bb:	c3                   	retq   
    log::info!("Initial stage booted properly.");
  22c1bc:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22c1c1:	48 8d 35 68 09 01 00 	lea    0x10968(%rip),%rsi        # 23cb30 <memcmp+0x3df0>
  22c1c8:	ba 01 00 00 00       	mov    $0x1,%edx
  22c1cd:	48 8d 0d 84 72 fd ff 	lea    -0x28d7c(%rip),%rcx        # 203458 <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x19>
  22c1d4:	31 c0                	xor    %eax,%eax
  22c1d6:	41 89 c0             	mov    %eax,%r8d
  22c1d9:	e8 52 a3 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c1de:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  22c1e3:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22c1e8:	48 8d 15 51 09 01 00 	lea    0x10951(%rip),%rdx        # 23cb40 <memcmp+0x3e00>
  22c1ef:	e8 8c 6b 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22c1f4:	eb be                	jmp    22c1b4 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x194>
  22c1f6:	cc                   	int3   
  22c1f7:	cc                   	int3   
  22c1f8:	cc                   	int3   
  22c1f9:	cc                   	int3   
  22c1fa:	cc                   	int3   
  22c1fb:	cc                   	int3   
  22c1fc:	cc                   	int3   
  22c1fd:	cc                   	int3   
  22c1fe:	cc                   	int3   
  22c1ff:	cc                   	int3   

000000000022c200 <_ZN9r3_kernel8init_smp17he0b12b71dd21e091E>:

fn init_smp() {
  22c200:	50                   	push   %rax
    acpi::setup_smp_prerequisites();
  22c201:	e8 ea fa fe ff       	callq  21bcf0 <_ZN9r3_kernel4acpi23setup_smp_prerequisites17h1b6f5d6a5602a481E>
    cpu::hw_interrupts::setup_post_apic_interrupts();
  22c206:	e8 d5 a6 fd ff       	callq  2068e0 <_ZN9r3_kernel3cpu13hw_interrupts26setup_post_apic_interrupts17h4c88a57af7e8306bE>

    system::timer::SystemTimer::start_ticks();
  22c20b:	e8 c0 9d fe ff       	callq  215fd0 <_ZN9r3_kernel6system5timer11SystemTimer11start_ticks17h8830d3a377e279abE>
}
  22c210:	58                   	pop    %rax
  22c211:	c3                   	retq   
  22c212:	cc                   	int3   
  22c213:	cc                   	int3   
  22c214:	cc                   	int3   
  22c215:	cc                   	int3   
  22c216:	cc                   	int3   
  22c217:	cc                   	int3   
  22c218:	cc                   	int3   
  22c219:	cc                   	int3   
  22c21a:	cc                   	int3   
  22c21b:	cc                   	int3   
  22c21c:	cc                   	int3   
  22c21d:	cc                   	int3   
  22c21e:	cc                   	int3   
  22c21f:	cc                   	int3   

000000000022c220 <_start>:

#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start(boot_info: &'static BootInfo) -> ! {
  22c220:	50                   	push   %rax
  22c221:	48 89 3c 24          	mov    %rdi,(%rsp)
    init_basic_setup(boot_info);
  22c225:	e8 f6 fd ff ff       	callq  22c020 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE>
    init_smp();
  22c22a:	e8 d1 ff ff ff       	callq  22c200 <_ZN9r3_kernel8init_smp17he0b12b71dd21e091E>

    cpu::halt_with_interrupts();
  22c22f:	e8 dc 44 fe ff       	callq  210710 <_ZN9r3_kernel3cpu20halt_with_interrupts17hfe1a7524354522bdE>
  22c234:	0f 0b                	ud2    
  22c236:	cc                   	int3   
  22c237:	cc                   	int3   
  22c238:	cc                   	int3   
  22c239:	cc                   	int3   
  22c23a:	cc                   	int3   
  22c23b:	cc                   	int3   
  22c23c:	cc                   	int3   
  22c23d:	cc                   	int3   
  22c23e:	cc                   	int3   
  22c23f:	cc                   	int3   

000000000022c240 <rust_oom>:

#[global_allocator]
static KERNEL_HEAP_ALLOCATOR: LockedHeap = LockedHeap::empty();

#[alloc_error_handler]
fn alloc_error_handler(layout: alloc::alloc::Layout) -> ! {
  22c240:	48 83 ec 78          	sub    $0x78,%rsp
  22c244:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22c249:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    panic!("allocation error: {:?}", layout)
  22c24e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  22c253:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22c258:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  22c25d:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  22c262:	48 8b 35 67 19 01 00 	mov    0x11967(%rip),%rsi        # 23dbd0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe8>
  22c269:	e8 f2 31 fe ff       	callq  20f460 <_ZN4core3fmt10ArgumentV13new17ha12a9edfec13e26aE>
  22c26e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c273:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22c278:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22c27d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22c282:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22c287:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22c28c:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  22c291:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22c296:	48 8d 35 db 08 01 00 	lea    0x108db(%rip),%rsi        # 23cb78 <memcmp+0x3e38>
  22c29d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22c2a3:	4c 89 c2             	mov    %r8,%rdx
  22c2a6:	e8 85 a2 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c2ab:	48 8d 35 d6 08 01 00 	lea    0x108d6(%rip),%rsi        # 23cb88 <memcmp+0x3e48>
  22c2b2:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22c2b7:	e8 04 9a 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22c2bc:	0f 0b                	ud2    
  22c2be:	cc                   	int3   
  22c2bf:	cc                   	int3   

000000000022c2c0 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E>:
}

fn map_virtual_memory() {
  22c2c0:	48 81 ec 28 03 00 00 	sub    $0x328,%rsp
    let n_4k_frames: usize = (HEAP_SIZE / paging::PageSize::Page4KiB.size()) as usize;
  22c2c7:	48 8d 3d dc 71 fd ff 	lea    -0x28e24(%rip),%rdi        # 2034aa <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x6b>
  22c2ce:	e8 8d 04 fe ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  22c2d3:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22c2da:	00 
  22c2db:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22c2e2:	00 
  22c2e3:	48 83 f8 00          	cmp    $0x0,%rax
  22c2e7:	0f 94 c0             	sete   %al
  22c2ea:	a8 01                	test   $0x1,%al
  22c2ec:	75 43                	jne    22c331 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x71>
  22c2ee:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  22c2f5:	00 
  22c2f6:	b8 00 00 a0 00       	mov    $0xa00000,%eax
  22c2fb:	31 d2                	xor    %edx,%edx
  22c2fd:	48 f7 f1             	div    %rcx
  22c300:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22c307:	00 
    log::debug!("n_heap_pages={}.", n_4k_frames);
  22c308:	48 c7 84 24 a8 00 00 	movq   $0x4,0xa8(%rsp)
  22c30f:	00 04 00 00 00 
  22c314:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  22c31b:	00 
  22c31c:	48 8d 35 d5 3f fd ff 	lea    -0x2c02b(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c323:	e8 a8 6c fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c328:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  22c32f:	eb 1a                	jmp    22c34b <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x8b>
    let n_4k_frames: usize = (HEAP_SIZE / paging::PageSize::Page4KiB.size()) as usize;
  22c331:	48 8d 3d 78 71 fd ff 	lea    -0x28e88(%rip),%rdi        # 2034b0 <str.0>
  22c338:	48 8d 15 61 08 01 00 	lea    0x10861(%rip),%rdx        # 23cba0 <memcmp+0x3e60>
  22c33f:	be 19 00 00 00       	mov    $0x19,%esi
  22c344:	e8 a7 98 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22c349:	0f 0b                	ud2    
  22c34b:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
    log::debug!("n_heap_pages={}.", n_4k_frames);
  22c352:	a8 01                	test   $0x1,%al
  22c354:	75 0c                	jne    22c362 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0xa2>
  22c356:	eb 00                	jmp    22c358 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x98>
  22c358:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  22c35f:	00 
  22c360:	eb 60                	jmp    22c3c2 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x102>
  22c362:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  22c369:	00 
  22c36a:	48 8b 3d d7 17 01 00 	mov    0x117d7(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c371:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  22c378:	00 
  22c379:	e8 72 ee ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22c37e:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  22c385:	00 
  22c386:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  22c38d:	00 
  22c38e:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22c395:	00 
  22c396:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  22c39d:	00 
  22c39e:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  22c3a5:	00 
  22c3a6:	e8 25 6c fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c3ab:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  22c3b2:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  22c3b9:	24 01                	and    $0x1,%al
  22c3bb:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  22c3c2:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  22c3c9:	01 
  22c3ca:	75 1c                	jne    22c3e8 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x128>

    let heap_pages = paging::PageRange::new(
        mm::VirtualAddress::from_u64(HEAP_START_ADDRESS),
  22c3cc:	48 bf 00 00 00 00 ff 	movabs $0x7fff00000000,%rdi
  22c3d3:	7f 00 00 
  22c3d6:	e8 f5 be ff ff       	callq  2282d0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  22c3db:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22c3e2:	00 
  22c3e3:	e9 9e 00 00 00       	jmpq   22c486 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x1c6>
    log::debug!("n_heap_pages={}.", n_4k_frames);
  22c3e8:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  22c3ef:	00 
  22c3f0:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  22c3f7:	00 
  22c3f8:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  22c3ff:	00 
  22c400:	48 89 bc 24 c0 02 00 	mov    %rdi,0x2c0(%rsp)
  22c407:	00 
  22c408:	48 8b 35 51 17 01 00 	mov    0x11751(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22c40f:	e8 6c 31 fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  22c414:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22c419:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  22c420:	00 
  22c421:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22c428:	00 
  22c429:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  22c42e:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  22c435:	00 
  22c436:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22c43d:	00 
  22c43e:	48 8d 8c 24 f0 00 00 	lea    0xf0(%rsp),%rcx
  22c445:	00 
  22c446:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  22c44d:	00 
  22c44e:	48 8d 35 63 07 01 00 	lea    0x10763(%rip),%rsi        # 23cbb8 <memcmp+0x3e78>
  22c455:	ba 02 00 00 00       	mov    $0x2,%edx
  22c45a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22c460:	e8 cb a0 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c465:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  22c46c:	00 
  22c46d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  22c474:	00 
  22c475:	48 8d 15 5c 07 01 00 	lea    0x1075c(%rip),%rdx        # 23cbd8 <memcmp+0x3e98>
  22c47c:	e8 ff 68 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22c481:	e9 46 ff ff ff       	jmpq   22c3cc <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x10c>
        (HEAP_SIZE / paging::PageSize::Page2MiB.size()) as usize,
  22c486:	48 8d 3d 5d 70 fd ff 	lea    -0x28fa3(%rip),%rdi        # 2034ea <str.0+0x3a>
  22c48d:	e8 ce 02 fe ff       	callq  20c760 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  22c492:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22c497:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22c49c:	48 83 f8 00          	cmp    $0x0,%rax
  22c4a0:	0f 94 c0             	sete   %al
  22c4a3:	a8 01                	test   $0x1,%al
  22c4a5:	75 39                	jne    22c4e0 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x220>
  22c4a7:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  22c4ae:	00 
  22c4af:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22c4b4:	b8 00 00 a0 00       	mov    $0xa00000,%eax
  22c4b9:	31 d2                	xor    %edx,%edx
  22c4bb:	48 f7 f1             	div    %rcx
  22c4be:	48 89 c2             	mov    %rax,%rdx
        paging::PageSize::Page2MiB,
  22c4c1:	c6 84 24 27 01 00 00 	movb   $0x1,0x127(%rsp)
  22c4c8:	01 
    let heap_pages = paging::PageRange::new(
  22c4c9:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  22c4d0:	00 
  22c4d1:	0f b6 8c 24 27 01 00 	movzbl 0x127(%rsp),%ecx
  22c4d8:	00 
  22c4d9:	e8 d2 19 fe ff       	callq  20deb0 <_ZN9r3_kernel2mm6paging9PageRange3new17h47b633cb9e347323E>
  22c4de:	eb 1a                	jmp    22c4fa <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x23a>
        (HEAP_SIZE / paging::PageSize::Page2MiB.size()) as usize,
  22c4e0:	48 8d 3d c9 6f fd ff 	lea    -0x29037(%rip),%rdi        # 2034b0 <str.0>
  22c4e7:	48 8d 15 22 07 01 00 	lea    0x10722(%rip),%rdx        # 23cc10 <memcmp+0x3ed0>
  22c4ee:	be 19 00 00 00       	mov    $0x19,%esi
  22c4f3:	e8 f8 96 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22c4f8:	0f 0b                	ud2    
    );

    // map the virtual memory for heap:
    log::debug!(
  22c4fa:	48 c7 84 24 28 01 00 	movq   $0x4,0x128(%rsp)
  22c501:	00 04 00 00 00 
  22c506:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  22c50d:	00 
  22c50e:	48 8d 35 e3 3d fd ff 	lea    -0x2c21d(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c515:	e8 b6 6a fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c51a:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  22c51e:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  22c522:	a8 01                	test   $0x1,%al
  22c524:	75 0c                	jne    22c532 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x272>
  22c526:	eb 00                	jmp    22c528 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x268>
  22c528:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  22c52f:	00 
  22c530:	eb 5a                	jmp    22c58c <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x2cc>
  22c532:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  22c539:	00 
  22c53a:	48 8b 3d 07 16 01 00 	mov    0x11607(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c541:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  22c548:	00 
  22c549:	e8 a2 ec ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22c54e:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  22c555:	00 
  22c556:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  22c55d:	00 
  22c55e:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  22c565:	00 
  22c566:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  22c56d:	00 
  22c56e:	48 8d b4 24 38 01 00 	lea    0x138(%rsp),%rsi
  22c575:	00 
  22c576:	e8 55 6a fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c57b:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  22c57f:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  22c583:	24 01                	and    $0x1,%al
  22c585:	88 84 24 37 01 00 00 	mov    %al,0x137(%rsp)
  22c58c:	f6 84 24 37 01 00 00 	testb  $0x1,0x137(%rsp)
  22c593:	01 
  22c594:	75 3f                	jne    22c5d5 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x315>
        "Mapping kernel virtual memory for heap at 0x{:x}",
        HEAP_START_ADDRESS
    );

    let alloc_result = paging::KernelVirtualMemoryManager::alloc_huge_page_region(
        heap_pages,
  22c596:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22c59d:	00 
  22c59e:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  22c5a5:	00 
  22c5a6:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22c5ad:	00 
  22c5ae:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22c5b5:	00 
  22c5b6:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  22c5bd:	00 
  22c5be:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22c5c5:	00 
        paging::PageEntryFlags::kernel_hugepage_flags(),
  22c5c6:	e8 e5 02 fe ff       	callq  20c8b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags21kernel_hugepage_flags17he0b9fa3eb36123b3E>
  22c5cb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22c5d0:	e9 95 00 00 00       	jmpq   22c66a <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x3aa>
    log::debug!(
  22c5d5:	48 8d 05 cc 3c fd ff 	lea    -0x2c334(%rip),%rax        # 2002a8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xce>
  22c5dc:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22c5e3:	00 
  22c5e4:	48 8b bc 24 80 01 00 	mov    0x180(%rsp),%rdi
  22c5eb:	00 
  22c5ec:	48 89 bc 24 c8 02 00 	mov    %rdi,0x2c8(%rsp)
  22c5f3:	00 
  22c5f4:	48 8b 35 55 15 01 00 	mov    0x11555(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  22c5fb:	e8 40 30 fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22c600:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22c605:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22c60a:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22c60f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22c614:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  22c61b:	00 
  22c61c:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  22c623:	00 
  22c624:	48 8d 8c 24 70 01 00 	lea    0x170(%rsp),%rcx
  22c62b:	00 
  22c62c:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  22c633:	00 
  22c634:	48 8d 35 ed 05 01 00 	lea    0x105ed(%rip),%rsi        # 23cc28 <memcmp+0x3ee8>
  22c63b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22c641:	4c 89 c2             	mov    %r8,%rdx
  22c644:	e8 e7 9e fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c649:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  22c650:	00 
  22c651:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  22c658:	00 
  22c659:	48 8d 15 d8 05 01 00 	lea    0x105d8(%rip),%rdx        # 23cc38 <memcmp+0x3ef8>
  22c660:	e8 1b 67 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22c665:	e9 2c ff ff ff       	jmpq   22c596 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x2d6>
  22c66a:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
    let alloc_result = paging::KernelVirtualMemoryManager::alloc_huge_page_region(
  22c66f:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  22c676:	00 
  22c677:	48 8d b4 24 b0 01 00 	lea    0x1b0(%rsp),%rsi
  22c67e:	00 
  22c67f:	e8 fc 1b fe ff       	callq  20e280 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E>
    );

    if alloc_result.is_err() {
  22c684:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  22c68b:	00 
  22c68c:	e8 0f ed fd ff       	callq  20b3a0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf7814dd879df2886E>
  22c691:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  22c695:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  22c699:	a8 01                	test   $0x1,%al
  22c69b:	75 2b                	jne    22c6c8 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x408>
  22c69d:	eb 00                	jmp    22c69f <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x3df>
            "Failed to allocate kernel heap, err={:?}",
            alloc_result.unwrap_err()
        );
    }

    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22c69f:	48 c7 84 24 48 02 00 	movq   $0x3,0x248(%rsp)
  22c6a6:	00 03 00 00 00 
  22c6ab:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  22c6b2:	00 
  22c6b3:	48 8d 35 3e 3c fd ff 	lea    -0x2c3c2(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c6ba:	e8 11 69 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c6bf:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  22c6c3:	e9 1f 01 00 00       	jmpq   22c7e7 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x527>
            alloc_result.unwrap_err()
  22c6c8:	48 8b 84 24 a8 01 00 	mov    0x1a8(%rsp),%rax
  22c6cf:	00 
  22c6d0:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  22c6d7:	00 
  22c6d8:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  22c6df:	00 
  22c6e0:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  22c6e7:	00 
  22c6e8:	48 8b 84 24 98 01 00 	mov    0x198(%rsp),%rax
  22c6ef:	00 
  22c6f0:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  22c6f7:	00 
  22c6f8:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  22c6ff:	00 
  22c700:	48 8b 8c 24 90 01 00 	mov    0x190(%rsp),%rcx
  22c707:	00 
  22c708:	48 89 8c 24 28 02 00 	mov    %rcx,0x228(%rsp)
  22c70f:	00 
  22c710:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  22c717:	00 
  22c718:	48 8d 35 61 05 01 00 	lea    0x10561(%rip),%rsi        # 23cc80 <memcmp+0x3f40>
  22c71f:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  22c726:	00 
  22c727:	e8 24 e8 fd ff       	callq  20af50 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E>
  22c72c:	48 89 94 24 d8 02 00 	mov    %rdx,0x2d8(%rsp)
  22c733:	00 
  22c734:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  22c73b:	00 
  22c73c:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  22c743:	00 
  22c744:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  22c74b:	00 
  22c74c:	48 8b 84 24 d8 02 00 	mov    0x2d8(%rsp),%rax
  22c753:	00 
  22c754:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  22c75b:	00 
        panic!(
  22c75c:	48 8d 84 24 10 02 00 	lea    0x210(%rsp),%rax
  22c763:	00 
  22c764:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  22c76b:	00 
  22c76c:	48 8b bc 24 08 02 00 	mov    0x208(%rsp),%rdi
  22c773:	00 
  22c774:	48 89 bc 24 e0 02 00 	mov    %rdi,0x2e0(%rsp)
  22c77b:	00 
  22c77c:	48 8d 35 dd 1e fe ff 	lea    -0x1e123(%rip),%rsi        # 20e660 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>
  22c783:	e8 f8 2a fe ff       	callq  20f280 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>
  22c788:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22c78d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22c792:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22c797:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22c79c:	48 89 8c 24 f8 01 00 	mov    %rcx,0x1f8(%rsp)
  22c7a3:	00 
  22c7a4:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  22c7ab:	00 
  22c7ac:	48 8d 8c 24 f8 01 00 	lea    0x1f8(%rsp),%rcx
  22c7b3:	00 
  22c7b4:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  22c7bb:	00 
  22c7bc:	48 8d 35 ad 04 01 00 	lea    0x104ad(%rip),%rsi        # 23cc70 <memcmp+0x3f30>
  22c7c3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22c7c9:	4c 89 c2             	mov    %r8,%rdx
  22c7cc:	e8 5f 9d fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c7d1:	48 8d 35 c0 04 01 00 	lea    0x104c0(%rip),%rsi        # 23cc98 <memcmp+0x3f58>
  22c7d8:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  22c7df:	00 
  22c7e0:	e8 db 94 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22c7e5:	0f 0b                	ud2    
  22c7e7:	8a 44 24 4e          	mov    0x4e(%rsp),%al
    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22c7eb:	a8 01                	test   $0x1,%al
  22c7ed:	75 0c                	jne    22c7fb <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x53b>
  22c7ef:	eb 00                	jmp    22c7f1 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x531>
  22c7f1:	c6 84 24 57 02 00 00 	movb   $0x0,0x257(%rsp)
  22c7f8:	00 
  22c7f9:	eb 5a                	jmp    22c855 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x595>
  22c7fb:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  22c802:	00 
  22c803:	48 8b 3d 3e 13 01 00 	mov    0x1133e(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c80a:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  22c811:	00 
  22c812:	e8 d9 e9 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22c817:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  22c81e:	00 
  22c81f:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  22c826:	00 
  22c827:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  22c82e:	00 
  22c82f:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  22c836:	00 
  22c837:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  22c83e:	00 
  22c83f:	e8 8c 67 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c844:	88 44 24 37          	mov    %al,0x37(%rsp)
  22c848:	8a 44 24 37          	mov    0x37(%rsp),%al
  22c84c:	24 01                	and    $0x1,%al
  22c84e:	88 84 24 57 02 00 00 	mov    %al,0x257(%rsp)
  22c855:	f6 84 24 57 02 00 00 	testb  $0x1,0x257(%rsp)
  22c85c:	01 
  22c85d:	75 08                	jne    22c867 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x5a7>
}
  22c85f:	48 81 c4 28 03 00 00 	add    $0x328,%rsp
  22c866:	c3                   	retq   
    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22c867:	48 8d 05 2a 3a fd ff 	lea    -0x2c5d6(%rip),%rax        # 200298 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xde>
  22c86e:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  22c875:	00 
  22c876:	48 8d 05 2b 3a fd ff 	lea    -0x2c5d5(%rip),%rax        # 2002a8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0xce>
  22c87d:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  22c884:	00 
  22c885:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  22c88c:	00 
  22c88d:	48 89 bc 24 e8 02 00 	mov    %rdi,0x2e8(%rsp)
  22c894:	00 
  22c895:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  22c89c:	00 
  22c89d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22c8a2:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  22c8a9:	00 
  22c8aa:	48 8b 35 e7 12 01 00 	mov    0x112e7(%rip),%rsi        # 23db98 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  22c8b1:	e8 8a 2d fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22c8b6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22c8bb:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22c8c0:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22c8c5:	48 8b 35 84 12 01 00 	mov    0x11284(%rip),%rsi        # 23db50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  22c8cc:	e8 6f 2d fe ff       	callq  20f640 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22c8d1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c8d6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22c8db:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22c8e0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22c8e5:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22c8ea:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22c8ef:	48 89 b4 24 90 02 00 	mov    %rsi,0x290(%rsp)
  22c8f6:	00 
  22c8f7:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  22c8fe:	00 
  22c8ff:	48 89 8c 24 a0 02 00 	mov    %rcx,0x2a0(%rsp)
  22c906:	00 
  22c907:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  22c90e:	00 
  22c90f:	48 8d 8c 24 90 02 00 	lea    0x290(%rsp),%rcx
  22c916:	00 
  22c917:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  22c91e:	00 
  22c91f:	48 8d 35 8a 03 01 00 	lea    0x1038a(%rip),%rsi        # 23ccb0 <memcmp+0x3f70>
  22c926:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  22c92c:	4c 89 c2             	mov    %r8,%rdx
  22c92f:	e8 fc 9b fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c934:	48 8b b4 24 48 02 00 	mov    0x248(%rsp),%rsi
  22c93b:	00 
  22c93c:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  22c943:	00 
  22c944:	48 8d 15 85 03 01 00 	lea    0x10385(%rip),%rdx        # 23ccd0 <memcmp+0x3f90>
  22c94b:	e8 30 64 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22c950:	e9 0a ff ff ff       	jmpq   22c85f <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x59f>
  22c955:	cc                   	int3   
  22c956:	cc                   	int3   
  22c957:	cc                   	int3   
  22c958:	cc                   	int3   
  22c959:	cc                   	int3   
  22c95a:	cc                   	int3   
  22c95b:	cc                   	int3   
  22c95c:	cc                   	int3   
  22c95d:	cc                   	int3   
  22c95e:	cc                   	int3   
  22c95f:	cc                   	int3   

000000000022c960 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE>:

pub fn init_heap() {
  22c960:	48 83 ec 78          	sub    $0x78,%rsp
    map_virtual_memory();
  22c964:	e8 57 f9 ff ff       	callq  22c2c0 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E>

    unsafe {
        KERNEL_HEAP_ALLOCATOR
  22c969:	48 8d 3d 40 8f 01 00 	lea    0x18f40(%rip),%rdi        # 2458b0 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22c970:	e8 6b 2f 00 00       	callq  22f8e0 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5b565ba2603a9672E>
  22c975:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22c97a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22c97f:	e8 cc 4f 00 00       	callq  231950 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22c984:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22c989:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c98e:	e8 8d 4f 00 00       	callq  231920 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22c993:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c998:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22c99d:	48 be 00 00 00 00 ff 	movabs $0x7fff00000000,%rsi
  22c9a4:	7f 00 00 
  22c9a7:	ba 00 00 a0 00       	mov    $0xa00000,%edx
  22c9ac:	e8 4f 2d 00 00       	callq  22f700 <_ZN21linked_list_allocator4Heap4init17h76f7245f25ee4edfE>
            .lock()
            .init(HEAP_START_ADDRESS as usize, HEAP_SIZE as usize);
  22c9b1:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c9b6:	e8 25 33 00 00       	callq  22fce0 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
    }

    test_heap_alloc();
  22c9bb:	e8 c0 00 00 00       	callq  22ca80 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE>
    log::info!("Setting up Kernel heap as Rust Global allocator is successful.");
  22c9c0:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  22c9c7:	00 00 
  22c9c9:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22c9ce:	48 8d 35 23 39 fd ff 	lea    -0x2c6dd(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22c9d5:	e8 f6 65 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22c9da:	88 44 24 07          	mov    %al,0x7(%rsp)
  22c9de:	8a 44 24 07          	mov    0x7(%rsp),%al
  22c9e2:	a8 01                	test   $0x1,%al
  22c9e4:	75 09                	jne    22c9ef <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0x8f>
  22c9e6:	eb 00                	jmp    22c9e8 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0x88>
  22c9e8:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  22c9ed:	eb 42                	jmp    22ca31 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xd1>
  22c9ef:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22c9f4:	48 8b 3d 4d 11 01 00 	mov    0x1114d(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22c9fb:	0f b6 74 24 6f       	movzbl 0x6f(%rsp),%esi
  22ca00:	e8 eb e7 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22ca05:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22ca0a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22ca0f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ca14:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22ca19:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  22ca1e:	e8 ad 65 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ca23:	88 44 24 06          	mov    %al,0x6(%rsp)
  22ca27:	8a 44 24 06          	mov    0x6(%rsp),%al
  22ca2b:	24 01                	and    $0x1,%al
  22ca2d:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22ca31:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  22ca36:	75 05                	jne    22ca3d <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xdd>
}
  22ca38:	48 83 c4 78          	add    $0x78,%rsp
  22ca3c:	c3                   	retq   
    log::info!("Setting up Kernel heap as Rust Global allocator is successful.");
  22ca3d:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22ca42:	48 8d 35 bf 02 01 00 	lea    0x102bf(%rip),%rsi        # 23cd08 <memcmp+0x3fc8>
  22ca49:	ba 01 00 00 00       	mov    $0x1,%edx
  22ca4e:	48 8d 0d 3b 6b fd ff 	lea    -0x294c5(%rip),%rcx        # 203590 <str.0+0xe0>
  22ca55:	31 c0                	xor    %eax,%eax
  22ca57:	41 89 c0             	mov    %eax,%r8d
  22ca5a:	e8 d1 9a fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22ca5f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22ca64:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22ca69:	48 8d 15 a8 02 01 00 	lea    0x102a8(%rip),%rdx        # 23cd18 <memcmp+0x3fd8>
  22ca70:	e8 0b 63 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22ca75:	eb c1                	jmp    22ca38 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xd8>
  22ca77:	cc                   	int3   
  22ca78:	cc                   	int3   
  22ca79:	cc                   	int3   
  22ca7a:	cc                   	int3   
  22ca7b:	cc                   	int3   
  22ca7c:	cc                   	int3   
  22ca7d:	cc                   	int3   
  22ca7e:	cc                   	int3   
  22ca7f:	cc                   	int3   

000000000022ca80 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE>:

fn test_heap_alloc() {
  22ca80:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
    log::debug!("Testing heap by allocating a vector: ");
  22ca87:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  22ca8e:	00 00 
  22ca90:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22ca95:	48 8d 35 5c 38 fd ff 	lea    -0x2c7a4(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22ca9c:	e8 2f 65 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22caa1:	88 44 24 47          	mov    %al,0x47(%rsp)
  22caa5:	8a 44 24 47          	mov    0x47(%rsp),%al
  22caa9:	a8 01                	test   $0x1,%al
  22caab:	75 09                	jne    22cab6 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x36>
  22caad:	eb 00                	jmp    22caaf <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x2f>
  22caaf:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22cab4:	eb 4e                	jmp    22cb04 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x84>
  22cab6:	c6 84 24 ff 01 00 00 	movb   $0x0,0x1ff(%rsp)
  22cabd:	00 
  22cabe:	48 8b 3d 83 10 01 00 	mov    0x11083(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22cac5:	0f b6 b4 24 ff 01 00 	movzbl 0x1ff(%rsp),%esi
  22cacc:	00 
  22cacd:	e8 1e e7 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22cad2:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  22cad9:	00 
  22cada:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  22cae1:	00 
  22cae2:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22cae7:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22caec:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  22caf1:	e8 da 64 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22caf6:	88 44 24 46          	mov    %al,0x46(%rsp)
  22cafa:	8a 44 24 46          	mov    0x46(%rsp),%al
  22cafe:	24 01                	and    $0x1,%al
  22cb00:	88 44 24 57          	mov    %al,0x57(%rsp)
  22cb04:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22cb09:	75 0f                	jne    22cb1a <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x9a>
    let mut test_vec: Vec<u64> = Vec::new();
  22cb0b:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cb12:	00 
  22cb13:	e8 68 57 fe ff       	callq  212280 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h683916163281641eE>
  22cb18:	eb 3a                	jmp    22cb54 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0xd4>
    log::debug!("Testing heap by allocating a vector: ");
  22cb1a:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22cb1f:	48 8d 35 2a 02 01 00 	lea    0x1022a(%rip),%rsi        # 23cd50 <memcmp+0x4010>
  22cb26:	ba 01 00 00 00       	mov    $0x1,%edx
  22cb2b:	48 8d 0d 5e 6a fd ff 	lea    -0x295a2(%rip),%rcx        # 203590 <str.0+0xe0>
  22cb32:	31 c0                	xor    %eax,%eax
  22cb34:	41 89 c0             	mov    %eax,%r8d
  22cb37:	e8 f4 99 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22cb3c:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  22cb41:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22cb46:	48 8d 15 13 02 01 00 	lea    0x10213(%rip),%rdx        # 23cd60 <memcmp+0x4020>
  22cb4d:	e8 2e 62 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22cb52:	eb b7                	jmp    22cb0b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x8b>

    // insert some elements:
    test_vec.push(10);
  22cb54:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cb5b:	00 
  22cb5c:	be 0a 00 00 00       	mov    $0xa,%esi
  22cb61:	e8 5a 58 fe ff       	callq  2123c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>
    test_vec.push(20);
  22cb66:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cb6d:	00 
  22cb6e:	be 14 00 00 00       	mov    $0x14,%esi
  22cb73:	e8 48 58 fe ff       	callq  2123c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>
    test_vec.push(30);
  22cb78:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cb7f:	00 
  22cb80:	be 1e 00 00 00       	mov    $0x1e,%esi
  22cb85:	e8 36 58 fe ff       	callq  2123c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>

    assert_eq!(test_vec.len(), 3);
  22cb8a:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cb91:	00 
  22cb92:	e8 19 58 fe ff       	callq  2123b0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h86fcf6085494c979E>
  22cb97:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22cb9e:	00 
  22cb9f:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  22cba6:	00 
  22cba7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22cbae:	00 
  22cbaf:	48 8d 05 22 37 fd ff 	lea    -0x2c8de(%rip),%rax        # 2002d8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x9e>
  22cbb6:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22cbbd:	00 
  22cbbe:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22cbc5:	00 
  22cbc6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22cbcb:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22cbd2:	00 
  22cbd3:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  22cbda:	00 
  22cbdb:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22cbe0:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  22cbe7:	00 
  22cbe8:	48 83 38 03          	cmpq   $0x3,(%rax)
  22cbec:	0f 94 c0             	sete   %al
  22cbef:	34 ff                	xor    $0xff,%al
  22cbf1:	a8 01                	test   $0x1,%al
  22cbf3:	75 26                	jne    22cc1b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x19b>

    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22cbf5:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  22cbfc:	00 04 00 00 00 
  22cc01:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22cc08:	00 
  22cc09:	48 8d 35 e8 36 fd ff 	lea    -0x2c918(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22cc10:	e8 bb 63 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22cc15:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22cc19:	eb 36                	jmp    22cc51 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1d1>
  22cc1b:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22cc20:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    assert_eq!(test_vec.len(), 3);
  22cc25:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  22cc2c:	00 
  22cc2d:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  22cc34:	00 00 00 00 00 
  22cc39:	4c 8d 05 58 01 01 00 	lea    0x10158(%rip),%r8        # 23cd98 <memcmp+0x4058>
  22cc40:	31 ff                	xor    %edi,%edi
  22cc42:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  22cc49:	00 
  22cc4a:	e8 81 4d 00 00       	callq  2319d0 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  22cc4f:	0f 0b                	ud2    
  22cc51:	8a 44 24 2f          	mov    0x2f(%rsp),%al
    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22cc55:	a8 01                	test   $0x1,%al
  22cc57:	75 0c                	jne    22cc65 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1e5>
  22cc59:	eb 00                	jmp    22cc5b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1db>
  22cc5b:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  22cc62:	00 
  22cc63:	eb 5a                	jmp    22ccbf <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x23f>
  22cc65:	c6 84 24 ef 01 00 00 	movb   $0x0,0x1ef(%rsp)
  22cc6c:	00 
  22cc6d:	48 8b 3d d4 0e 01 00 	mov    0x10ed4(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22cc74:	0f b6 b4 24 ef 01 00 	movzbl 0x1ef(%rsp),%esi
  22cc7b:	00 
  22cc7c:	e8 6f e5 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22cc81:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  22cc88:	00 
  22cc89:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  22cc90:	00 
  22cc91:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  22cc98:	00 
  22cc99:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22cca0:	00 
  22cca1:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  22cca8:	00 
  22cca9:	e8 22 63 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ccae:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22ccb2:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  22ccb6:	24 01                	and    $0x1,%al
  22ccb8:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  22ccbf:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  22ccc6:	01 
  22ccc7:	75 42                	jne    22cd0b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x28b>
    core::mem::drop(test_vec);
  22ccc9:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  22ccd0:	00 
  22ccd1:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  22ccd8:	00 
  22ccd9:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22cce0:	00 
  22cce1:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  22cce8:	00 
  22cce9:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22ccf0:	00 
  22ccf1:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  22ccf8:	00 
  22ccf9:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  22cd00:	00 
  22cd01:	e8 0a 3d fe ff       	callq  210a10 <_ZN4core3mem4drop17hf04176b36ca2e197E>
  22cd06:	e9 c0 00 00 00       	jmpq   22cdcb <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x34b>
    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22cd0b:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22cd12:	00 
  22cd13:	31 c0                	xor    %eax,%eax
  22cd15:	89 c6                	mov    %eax,%esi
  22cd17:	48 8d 15 a2 00 01 00 	lea    0x100a2(%rip),%rdx        # 23cdc0 <memcmp+0x4080>
  22cd1e:	e8 7d 5b fe ff       	callq  2128a0 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb9a8b3d4d7d4adebE>
  22cd23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22cd28:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22cd2d:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  22cd34:	00 
  22cd35:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
  22cd3c:	00 
  22cd3d:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  22cd44:	00 
  22cd45:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  22cd4c:	00 
  22cd4d:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  22cd54:	00 
  22cd55:	48 8d 35 54 21 fe ff 	lea    -0x1deac(%rip),%rsi        # 20eeb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  22cd5c:	e8 7f 28 fe ff       	callq  20f5e0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  22cd61:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22cd66:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22cd6b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22cd70:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22cd75:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  22cd7c:	00 
  22cd7d:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  22cd84:	00 
  22cd85:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  22cd8c:	00 
  22cd8d:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  22cd94:	00 
  22cd95:	48 8d 35 14 00 01 00 	lea    0x10014(%rip),%rsi        # 23cdb0 <memcmp+0x4070>
  22cd9c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22cda2:	4c 89 c2             	mov    %r8,%rdx
  22cda5:	e8 86 97 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22cdaa:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  22cdb1:	00 
  22cdb2:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  22cdb9:	00 
  22cdba:	48 8d 15 17 00 01 00 	lea    0x10017(%rip),%rdx        # 23cdd8 <memcmp+0x4098>
  22cdc1:	e8 ba 5f 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22cdc6:	e9 fe fe ff ff       	jmpq   22ccc9 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x249>

    log::info!("Passed heap allocator test, successfully allocated and freed heap memory.");
  22cdcb:	48 c7 84 24 78 01 00 	movq   $0x3,0x178(%rsp)
  22cdd2:	00 03 00 00 00 
  22cdd7:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  22cdde:	00 
  22cddf:	48 8d 35 12 35 fd ff 	lea    -0x2caee(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22cde6:	e8 e5 61 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22cdeb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22cdef:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22cdf3:	a8 01                	test   $0x1,%al
  22cdf5:	75 0c                	jne    22ce03 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x383>
  22cdf7:	eb 00                	jmp    22cdf9 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x379>
  22cdf9:	c6 84 24 87 01 00 00 	movb   $0x0,0x187(%rsp)
  22ce00:	00 
  22ce01:	eb 5a                	jmp    22ce5d <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3dd>
  22ce03:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  22ce0a:	00 
  22ce0b:	48 8b 3d 36 0d 01 00 	mov    0x10d36(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22ce12:	0f b6 b4 24 df 01 00 	movzbl 0x1df(%rsp),%esi
  22ce19:	00 
  22ce1a:	e8 d1 e3 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22ce1f:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  22ce26:	00 
  22ce27:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  22ce2e:	00 
  22ce2f:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  22ce36:	00 
  22ce37:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  22ce3e:	00 
  22ce3f:	48 8d b4 24 88 01 00 	lea    0x188(%rsp),%rsi
  22ce46:	00 
  22ce47:	e8 84 61 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ce4c:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22ce50:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22ce54:	24 01                	and    $0x1,%al
  22ce56:	88 84 24 87 01 00 00 	mov    %al,0x187(%rsp)
  22ce5d:	f6 84 24 87 01 00 00 	testb  $0x1,0x187(%rsp)
  22ce64:	01 
  22ce65:	75 08                	jne    22ce6f <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3ef>
}
  22ce67:	48 81 c4 08 02 00 00 	add    $0x208,%rsp
  22ce6e:	c3                   	retq   
    log::info!("Passed heap allocator test, successfully allocated and freed heap memory.");
  22ce6f:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22ce76:	00 
  22ce77:	48 8d 35 92 ff 00 00 	lea    0xff92(%rip),%rsi        # 23ce10 <memcmp+0x40d0>
  22ce7e:	ba 01 00 00 00       	mov    $0x1,%edx
  22ce83:	48 8d 0d 06 67 fd ff 	lea    -0x298fa(%rip),%rcx        # 203590 <str.0+0xe0>
  22ce8a:	31 c0                	xor    %eax,%eax
  22ce8c:	41 89 c0             	mov    %eax,%r8d
  22ce8f:	e8 9c 96 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22ce94:	48 8b b4 24 78 01 00 	mov    0x178(%rsp),%rsi
  22ce9b:	00 
  22ce9c:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22cea3:	00 
  22cea4:	48 8d 15 75 ff 00 00 	lea    0xff75(%rip),%rdx        # 23ce20 <memcmp+0x40e0>
  22ceab:	e8 d0 5e 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22ceb0:	eb b5                	jmp    22ce67 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3e7>
  22ceb2:	cc                   	int3   
  22ceb3:	cc                   	int3   
  22ceb4:	cc                   	int3   
  22ceb5:	cc                   	int3   
  22ceb6:	cc                   	int3   
  22ceb7:	cc                   	int3   
  22ceb8:	cc                   	int3   
  22ceb9:	cc                   	int3   
  22ceba:	cc                   	int3   
  22cebb:	cc                   	int3   
  22cebc:	cc                   	int3   
  22cebd:	cc                   	int3   
  22cebe:	cc                   	int3   
  22cebf:	cc                   	int3   

000000000022cec0 <__rg_alloc>:
static KERNEL_HEAP_ALLOCATOR: LockedHeap = LockedHeap::empty();
  22cec0:	48 83 ec 28          	sub    $0x28,%rsp
  22cec4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22cec9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22cece:	e8 6d f1 fe ff       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22ced3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ced8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22cedd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22cee2:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22cee7:	48 8d 3d c2 89 01 00 	lea    0x189c2(%rip),%rdi        # 2458b0 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22ceee:	e8 fd 29 00 00       	callq  22f8f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  22cef3:	48 89 04 24          	mov    %rax,(%rsp)
  22cef7:	48 8b 04 24          	mov    (%rsp),%rax
  22cefb:	48 83 c4 28          	add    $0x28,%rsp
  22ceff:	c3                   	retq   

000000000022cf00 <__rg_dealloc>:
  22cf00:	48 83 ec 48          	sub    $0x48,%rsp
  22cf04:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22cf09:	48 89 f0             	mov    %rsi,%rax
  22cf0c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22cf11:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22cf16:	48 89 f8             	mov    %rdi,%rax
  22cf19:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22cf1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22cf23:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22cf28:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22cf2d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22cf32:	e8 09 f1 fe ff       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22cf37:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22cf3c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22cf41:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22cf46:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22cf4b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22cf50:	48 8d 3d 59 89 01 00 	lea    0x18959(%rip),%rdi        # 2458b0 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22cf57:	e8 24 2a 00 00       	callq  22f980 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>
  22cf5c:	48 83 c4 48          	add    $0x48,%rsp
  22cf60:	c3                   	retq   
  22cf61:	cc                   	int3   
  22cf62:	cc                   	int3   
  22cf63:	cc                   	int3   
  22cf64:	cc                   	int3   
  22cf65:	cc                   	int3   
  22cf66:	cc                   	int3   
  22cf67:	cc                   	int3   
  22cf68:	cc                   	int3   
  22cf69:	cc                   	int3   
  22cf6a:	cc                   	int3   
  22cf6b:	cc                   	int3   
  22cf6c:	cc                   	int3   
  22cf6d:	cc                   	int3   
  22cf6e:	cc                   	int3   
  22cf6f:	cc                   	int3   

000000000022cf70 <__rg_realloc>:
  22cf70:	48 83 ec 58          	sub    $0x58,%rsp
  22cf74:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22cf79:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22cf7e:	48 89 f0             	mov    %rsi,%rax
  22cf81:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22cf86:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22cf8b:	48 89 f8             	mov    %rdi,%rax
  22cf8e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22cf93:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22cf98:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22cf9d:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22cfa2:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  22cfa7:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22cfac:	e8 8f f0 fe ff       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22cfb1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22cfb6:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22cfbb:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  22cfc0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22cfc5:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22cfca:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22cfcf:	48 8d 3d da 88 01 00 	lea    0x188da(%rip),%rdi        # 2458b0 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22cfd6:	e8 65 b3 fd ff       	callq  208340 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E>
  22cfdb:	48 89 04 24          	mov    %rax,(%rsp)
  22cfdf:	48 8b 04 24          	mov    (%rsp),%rax
  22cfe3:	48 83 c4 58          	add    $0x58,%rsp
  22cfe7:	c3                   	retq   
  22cfe8:	cc                   	int3   
  22cfe9:	cc                   	int3   
  22cfea:	cc                   	int3   
  22cfeb:	cc                   	int3   
  22cfec:	cc                   	int3   
  22cfed:	cc                   	int3   
  22cfee:	cc                   	int3   
  22cfef:	cc                   	int3   

000000000022cff0 <__rg_alloc_zeroed>:
  22cff0:	48 83 ec 28          	sub    $0x28,%rsp
  22cff4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22cff9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22cffe:	e8 3d f0 fe ff       	callq  21c040 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22d003:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d008:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22d00d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22d012:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22d017:	48 8d 3d 92 88 01 00 	lea    0x18892(%rip),%rdi        # 2458b0 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22d01e:	e8 9d b2 fd ff       	callq  2082c0 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E>
  22d023:	48 89 04 24          	mov    %rax,(%rsp)
  22d027:	48 8b 04 24          	mov    (%rsp),%rax
  22d02b:	48 83 c4 28          	add    $0x28,%rsp
  22d02f:	c3                   	retq   

000000000022d030 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>:
    pub fn can_handle(&self, interrupt_no: u8) -> bool {
  22d030:	48 83 ec 28          	sub    $0x28,%rsp
  22d034:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d039:	40 88 f0             	mov    %sil,%al
  22d03c:	88 44 24 16          	mov    %al,0x16(%rsp)
  22d040:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d045:	88 44 24 27          	mov    %al,0x27(%rsp)
        self.offset <= interrupt_no && interrupt_no <= self.offset + MAX_INTERRUPTS_PER_CHIP
  22d049:	38 47 20             	cmp    %al,0x20(%rdi)
  22d04c:	76 07                	jbe    22d055 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x25>
  22d04e:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  22d053:	eb 44                	jmp    22d099 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x69>
  22d055:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d05a:	8a 40 20             	mov    0x20(%rax),%al
  22d05d:	04 08                	add    $0x8,%al
  22d05f:	88 44 24 07          	mov    %al,0x7(%rsp)
  22d063:	0f 92 c0             	setb   %al
  22d066:	a8 01                	test   $0x1,%al
  22d068:	75 15                	jne    22d07f <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x4f>
  22d06a:	8a 44 24 16          	mov    0x16(%rsp),%al
  22d06e:	8a 4c 24 07          	mov    0x7(%rsp),%cl
  22d072:	38 c8                	cmp    %cl,%al
  22d074:	0f 96 c0             	setbe  %al
  22d077:	24 01                	and    $0x1,%al
  22d079:	88 44 24 17          	mov    %al,0x17(%rsp)
  22d07d:	eb 1a                	jmp    22d099 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x69>
  22d07f:	48 8d 3d aa 65 fd ff 	lea    -0x29a56(%rip),%rdi        # 203630 <str.0>
  22d086:	48 8d 15 cb fd 00 00 	lea    0xfdcb(%rip),%rdx        # 23ce58 <memcmp+0x4118>
  22d08d:	be 1c 00 00 00       	mov    $0x1c,%esi
  22d092:	e8 59 8b 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d097:	0f 0b                	ud2    
    }
  22d099:	8a 44 24 17          	mov    0x17(%rsp),%al
  22d09d:	24 01                	and    $0x1,%al
  22d09f:	0f b6 c0             	movzbl %al,%eax
  22d0a2:	48 83 c4 28          	add    $0x28,%rsp
  22d0a6:	c3                   	retq   
  22d0a7:	cc                   	int3   
  22d0a8:	cc                   	int3   
  22d0a9:	cc                   	int3   
  22d0aa:	cc                   	int3   
  22d0ab:	cc                   	int3   
  22d0ac:	cc                   	int3   
  22d0ad:	cc                   	int3   
  22d0ae:	cc                   	int3   
  22d0af:	cc                   	int3   

000000000022d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>:
    pub fn eoi(&self) {
  22d0b0:	50                   	push   %rax
  22d0b1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.cmd_port.write_u8(CMD_INTERRUPT_ACK);
  22d0b5:	be 20 00 00 00       	mov    $0x20,%esi
  22d0ba:	e8 11 c2 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22d0bf:	58                   	pop    %rax
  22d0c0:	c3                   	retq   
  22d0c1:	cc                   	int3   
  22d0c2:	cc                   	int3   
  22d0c3:	cc                   	int3   
  22d0c4:	cc                   	int3   
  22d0c5:	cc                   	int3   
  22d0c6:	cc                   	int3   
  22d0c7:	cc                   	int3   
  22d0c8:	cc                   	int3   
  22d0c9:	cc                   	int3   
  22d0ca:	cc                   	int3   
  22d0cb:	cc                   	int3   
  22d0cc:	cc                   	int3   
  22d0cd:	cc                   	int3   
  22d0ce:	cc                   	int3   
  22d0cf:	cc                   	int3   

000000000022d0d0 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>:
    pub fn init(&self) {
  22d0d0:	50                   	push   %rax
  22d0d1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.cmd_port.write_u8(CMD_PIC_INIT);
  22d0d5:	be 11 00 00 00       	mov    $0x11,%esi
  22d0da:	e8 f1 c1 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22d0df:	58                   	pop    %rax
  22d0e0:	c3                   	retq   
  22d0e1:	cc                   	int3   
  22d0e2:	cc                   	int3   
  22d0e3:	cc                   	int3   
  22d0e4:	cc                   	int3   
  22d0e5:	cc                   	int3   
  22d0e6:	cc                   	int3   
  22d0e7:	cc                   	int3   
  22d0e8:	cc                   	int3   
  22d0e9:	cc                   	int3   
  22d0ea:	cc                   	int3   
  22d0eb:	cc                   	int3   
  22d0ec:	cc                   	int3   
  22d0ed:	cc                   	int3   
  22d0ee:	cc                   	int3   
  22d0ef:	cc                   	int3   

000000000022d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>:
    pub fn write_data(&self, data: u8) {
  22d0f0:	48 83 ec 18          	sub    $0x18,%rsp
  22d0f4:	40 88 f0             	mov    %sil,%al
  22d0f7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d0fc:	88 44 24 17          	mov    %al,0x17(%rsp)
        self.data_port.write_u8(data);
  22d100:	48 83 c7 10          	add    $0x10,%rdi
  22d104:	0f b6 f0             	movzbl %al,%esi
  22d107:	e8 c4 c1 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22d10c:	48 83 c4 18          	add    $0x18,%rsp
  22d110:	c3                   	retq   
  22d111:	cc                   	int3   
  22d112:	cc                   	int3   
  22d113:	cc                   	int3   
  22d114:	cc                   	int3   
  22d115:	cc                   	int3   
  22d116:	cc                   	int3   
  22d117:	cc                   	int3   
  22d118:	cc                   	int3   
  22d119:	cc                   	int3   
  22d11a:	cc                   	int3   
  22d11b:	cc                   	int3   
  22d11c:	cc                   	int3   
  22d11d:	cc                   	int3   
  22d11e:	cc                   	int3   
  22d11f:	cc                   	int3   

000000000022d120 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>:
    pub fn new(cmd_port_no: usize, data_port_no: usize, offset: u8) -> Self {
  22d120:	48 83 ec 68          	sub    $0x68,%rsp
  22d124:	89 c8                	mov    %ecx,%eax
  22d126:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22d12b:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22d130:	48 89 f9             	mov    %rdi,%rcx
  22d133:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22d138:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  22d13d:	88 44 24 37          	mov    %al,0x37(%rsp)
  22d141:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22d146:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  22d14b:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22d150:	88 44 24 67          	mov    %al,0x67(%rsp)
            cmd_port: Port::new(cmd_port_no, false),
  22d154:	31 f6                	xor    %esi,%esi
  22d156:	e8 25 c1 fe ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22d15b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22d160:	88 54 24 4f          	mov    %dl,0x4f(%rsp)
  22d164:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            data_port: Port::new(data_port_no, false),
  22d169:	31 f6                	xor    %esi,%esi
  22d16b:	e8 10 c1 fe ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22d170:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d175:	88 54 24 17          	mov    %dl,0x17(%rsp)
  22d179:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22d17e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22d183:	8a 54 24 37          	mov    0x37(%rsp),%dl
  22d187:	40 8a 74 24 17       	mov    0x17(%rsp),%sil
  22d18c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22d191:	44 8a 44 24 4f       	mov    0x4f(%rsp),%r8b
  22d196:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
        PIC {
  22d19b:	4c 89 09             	mov    %r9,(%rcx)
  22d19e:	41 80 e0 01          	and    $0x1,%r8b
  22d1a2:	44 88 41 08          	mov    %r8b,0x8(%rcx)
  22d1a6:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  22d1aa:	40 80 e6 01          	and    $0x1,%sil
  22d1ae:	40 88 71 18          	mov    %sil,0x18(%rcx)
  22d1b2:	88 51 20             	mov    %dl,0x20(%rcx)
    }
  22d1b5:	48 83 c4 68          	add    $0x68,%rsp
  22d1b9:	c3                   	retq   
  22d1ba:	cc                   	int3   
  22d1bb:	cc                   	int3   
  22d1bc:	cc                   	int3   
  22d1bd:	cc                   	int3   
  22d1be:	cc                   	int3   
  22d1bf:	cc                   	int3   

000000000022d1c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>:
    pub fn mask_requests(&self, master_mask: u8, slave_mask: u8) {
  22d1c0:	48 83 ec 38          	sub    $0x38,%rsp
  22d1c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d1c9:	88 d0                	mov    %dl,%al
  22d1cb:	40 88 f1             	mov    %sil,%cl
  22d1ce:	88 4c 24 17          	mov    %cl,0x17(%rsp)
  22d1d2:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d1d7:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  22d1db:	88 44 24 27          	mov    %al,0x27(%rsp)
        let slave: &PIC = &self.pics[1];
  22d1df:	48 83 c7 28          	add    $0x28,%rdi
  22d1e3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        slave.data_port.write_u8(slave_mask);
  22d1e8:	48 83 c7 10          	add    $0x10,%rdi
  22d1ec:	0f b6 f0             	movzbl %al,%esi
  22d1ef:	e8 dc c0 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        wait(1);
  22d1f4:	bf 01 00 00 00       	mov    $0x1,%edi
  22d1f9:	e8 72 c1 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d1fe:	8a 44 24 17          	mov    0x17(%rsp),%al
  22d202:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let master: &PIC = &self.pics[0];
  22d207:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        master.data_port.write_u8(master_mask);
  22d20c:	48 83 c7 10          	add    $0x10,%rdi
  22d210:	0f b6 f0             	movzbl %al,%esi
  22d213:	e8 b8 c0 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        wait(1);
  22d218:	bf 01 00 00 00       	mov    $0x1,%edi
  22d21d:	e8 4e c1 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
    }
  22d222:	48 83 c4 38          	add    $0x38,%rsp
  22d226:	c3                   	retq   
  22d227:	cc                   	int3   
  22d228:	cc                   	int3   
  22d229:	cc                   	int3   
  22d22a:	cc                   	int3   
  22d22b:	cc                   	int3   
  22d22c:	cc                   	int3   
  22d22d:	cc                   	int3   
  22d22e:	cc                   	int3   
  22d22f:	cc                   	int3   

000000000022d230 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E>:
    pub fn send_eoi(&self, interrupt_no: u8) {
  22d230:	48 83 ec 58          	sub    $0x58,%rsp
  22d234:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d239:	40 88 f0             	mov    %sil,%al
  22d23c:	88 44 24 27          	mov    %al,0x27(%rsp)
  22d240:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22d245:	88 44 24 47          	mov    %al,0x47(%rsp)
        let slave: &PIC = &self.pics[1];
  22d249:	48 83 c7 28          	add    $0x28,%rdi
  22d24d:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d252:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
        if slave.can_handle(interrupt_no) {
  22d257:	0f b6 f0             	movzbl %al,%esi
  22d25a:	e8 d1 fd ff ff       	callq  22d030 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>
  22d25f:	88 44 24 37          	mov    %al,0x37(%rsp)
  22d263:	8a 44 24 37          	mov    0x37(%rsp),%al
  22d267:	a8 01                	test   $0x1,%al
  22d269:	75 23                	jne    22d28e <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x5e>
  22d26b:	eb 00                	jmp    22d26d <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x3d>
  22d26d:	8a 44 24 27          	mov    0x27(%rsp),%al
  22d271:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d276:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let master: &PIC = &self.pics[0];
  22d27b:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if master.can_handle(interrupt_no) {
  22d280:	0f b6 f0             	movzbl %al,%esi
  22d283:	e8 a8 fd ff ff       	callq  22d030 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>
  22d288:	88 44 24 17          	mov    %al,0x17(%rsp)
  22d28c:	eb 0c                	jmp    22d29a <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x6a>
  22d28e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slave.eoi();
  22d293:	e8 18 fe ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
  22d298:	eb d3                	jmp    22d26d <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x3d>
  22d29a:	8a 44 24 17          	mov    0x17(%rsp),%al
        if master.can_handle(interrupt_no) {
  22d29e:	a8 01                	test   $0x1,%al
  22d2a0:	75 07                	jne    22d2a9 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x79>
  22d2a2:	eb 00                	jmp    22d2a4 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x74>
    }
  22d2a4:	48 83 c4 58          	add    $0x58,%rsp
  22d2a8:	c3                   	retq   
  22d2a9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            master.eoi();
  22d2ae:	e8 fd fd ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
  22d2b3:	eb ef                	jmp    22d2a4 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x74>
  22d2b5:	cc                   	int3   
  22d2b6:	cc                   	int3   
  22d2b7:	cc                   	int3   
  22d2b8:	cc                   	int3   
  22d2b9:	cc                   	int3   
  22d2ba:	cc                   	int3   
  22d2bb:	cc                   	int3   
  22d2bc:	cc                   	int3   
  22d2bd:	cc                   	int3   
  22d2be:	cc                   	int3   
  22d2bf:	cc                   	int3   

000000000022d2c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E>:
    pub fn setup(&self, master_mask: u8, slave_mask: u8) {
  22d2c0:	48 83 ec 48          	sub    $0x48,%rsp
  22d2c4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d2c9:	88 d0                	mov    %dl,%al
  22d2cb:	88 44 24 26          	mov    %al,0x26(%rsp)
  22d2cf:	40 88 f1             	mov    %sil,%cl
  22d2d2:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  22d2d6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d2db:	88 4c 24 36          	mov    %cl,0x36(%rsp)
  22d2df:	88 44 24 37          	mov    %al,0x37(%rsp)
        self.mask_requests(0xff, 0xff);
  22d2e3:	ba ff 00 00 00       	mov    $0xff,%edx
  22d2e8:	89 d6                	mov    %edx,%esi
  22d2ea:	e8 d1 fe ff ff       	callq  22d1c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22d2ef:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        let master: &PIC = &self.pics[0];
  22d2f4:	48 89 c7             	mov    %rax,%rdi
  22d2f7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d2fc:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let slave: &PIC = &self.pics[1];
  22d301:	48 83 c0 28          	add    $0x28,%rax
  22d305:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d30a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        master.eoi();
  22d30f:	e8 9c fd ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22d314:	bf 01 00 00 00       	mov    $0x1,%edi
  22d319:	e8 52 c0 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d31e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.eoi();
  22d323:	e8 88 fd ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22d328:	bf 01 00 00 00       	mov    $0x1,%edi
  22d32d:	e8 3e c0 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d332:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.init();
  22d337:	e8 94 fd ff ff       	callq  22d0d0 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>
        wait(1);
  22d33c:	bf 01 00 00 00       	mov    $0x1,%edi
  22d341:	e8 2a c0 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d346:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.init();
  22d34b:	e8 80 fd ff ff       	callq  22d0d0 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>
        wait(1);
  22d350:	bf 01 00 00 00       	mov    $0x1,%edi
  22d355:	e8 16 c0 fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d35a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        master.write_data(master.offset);
  22d35f:	48 89 c7             	mov    %rax,%rdi
  22d362:	0f b6 70 20          	movzbl 0x20(%rax),%esi
  22d366:	e8 85 fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d36b:	bf 01 00 00 00       	mov    $0x1,%edi
  22d370:	e8 fb bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d375:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        slave.write_data(slave.offset);
  22d37a:	48 89 c7             	mov    %rax,%rdi
  22d37d:	0f b6 70 20          	movzbl 0x20(%rax),%esi
  22d381:	e8 6a fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d386:	bf 01 00 00 00       	mov    $0x1,%edi
  22d38b:	e8 e0 bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d390:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.write_data(4);
  22d395:	be 04 00 00 00       	mov    $0x4,%esi
  22d39a:	e8 51 fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d39f:	bf 01 00 00 00       	mov    $0x1,%edi
  22d3a4:	e8 c7 bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d3a9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.write_data(2);
  22d3ae:	be 02 00 00 00       	mov    $0x2,%esi
  22d3b3:	e8 38 fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d3b8:	bf 01 00 00 00       	mov    $0x1,%edi
  22d3bd:	e8 ae bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d3c2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.write_data(DATA_MODE_8086);
  22d3c7:	be 01 00 00 00       	mov    $0x1,%esi
  22d3cc:	e8 1f fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d3d1:	bf 01 00 00 00       	mov    $0x1,%edi
  22d3d6:	e8 95 bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d3db:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.write_data(DATA_MODE_8086);
  22d3e0:	be 01 00 00 00       	mov    $0x1,%esi
  22d3e5:	e8 06 fd ff ff       	callq  22d0f0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22d3ea:	bf 01 00 00 00       	mov    $0x1,%edi
  22d3ef:	e8 7c bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d3f4:	8a 44 24 26          	mov    0x26(%rsp),%al
  22d3f8:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  22d3fc:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        self.mask_requests(master_mask, slave_mask);
  22d401:	0f b6 f1             	movzbl %cl,%esi
  22d404:	0f b6 d0             	movzbl %al,%edx
  22d407:	e8 b4 fd ff ff       	callq  22d1c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22d40c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.eoi();
  22d411:	e8 9a fc ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22d416:	bf 01 00 00 00       	mov    $0x1,%edi
  22d41b:	e8 50 bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22d420:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.eoi();
  22d425:	e8 86 fc ff ff       	callq  22d0b0 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22d42a:	bf 01 00 00 00       	mov    $0x1,%edi
  22d42f:	e8 3c bf fe ff       	callq  219370 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
    }
  22d434:	48 83 c4 48          	add    $0x48,%rsp
  22d438:	c3                   	retq   
  22d439:	cc                   	int3   
  22d43a:	cc                   	int3   
  22d43b:	cc                   	int3   
  22d43c:	cc                   	int3   
  22d43d:	cc                   	int3   
  22d43e:	cc                   	int3   
  22d43f:	cc                   	int3   

000000000022d440 <_ZN9r3_kernel3cpu3pic10ChainedPIC4init17hfc2fdf5ad2bb63a7E>:
    pub fn init(master_mask: u8, slave_mask: u8) -> ChainedPIC {
  22d440:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  22d447:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d44c:	88 d0                	mov    %dl,%al
  22d44e:	88 44 24 16          	mov    %al,0x16(%rsp)
  22d452:	40 88 f1             	mov    %sil,%cl
  22d455:	88 4c 24 17          	mov    %cl,0x17(%rsp)
  22d459:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d45e:	88 8c 24 c6 00 00 00 	mov    %cl,0xc6(%rsp)
  22d465:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
                PIC::new(MASTER_CMD_PORT, MASTER_DATA_PORT, IRQ_OFFSET),
  22d46c:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22d471:	be 20 00 00 00       	mov    $0x20,%esi
  22d476:	ba 21 00 00 00       	mov    $0x21,%edx
  22d47b:	b9 20 00 00 00       	mov    $0x20,%ecx
  22d480:	e8 9b fc ff ff       	callq  22d120 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>
                PIC::new(
  22d485:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  22d48c:	00 
  22d48d:	be a0 00 00 00       	mov    $0xa0,%esi
  22d492:	ba a1 00 00 00       	mov    $0xa1,%edx
  22d497:	b9 28 00 00 00       	mov    $0x28,%ecx
  22d49c:	e8 7f fc ff ff       	callq  22d120 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>
            pics: [
  22d4a1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22d4a6:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  22d4ab:	ba 28 00 00 00       	mov    $0x28,%edx
  22d4b0:	e8 3b b8 00 00       	callq  238cf0 <memcpy>
  22d4b5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22d4ba:	48 83 c7 28          	add    $0x28,%rdi
  22d4be:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  22d4c5:	00 
  22d4c6:	ba 28 00 00 00       	mov    $0x28,%edx
  22d4cb:	e8 20 b8 00 00       	callq  238cf0 <memcpy>
  22d4d0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let cpcis = ChainedPIC {
  22d4d5:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22d4da:	ba 50 00 00 00       	mov    $0x50,%edx
  22d4df:	e8 0c b8 00 00       	callq  238cf0 <memcpy>
  22d4e4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22d4e9:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  22d4ed:	8a 44 24 16          	mov    0x16(%rsp),%al
  22d4f1:	c6 47 50 00          	movb   $0x0,0x50(%rdi)
        cpcis.setup(master_mask, slave_mask);
  22d4f5:	0f b6 f1             	movzbl %cl,%esi
  22d4f8:	0f b6 d0             	movzbl %al,%edx
  22d4fb:	e8 c0 fd ff ff       	callq  22d2c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E>
  22d500:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22d505:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  22d50c:	c3                   	retq   
  22d50d:	cc                   	int3   
  22d50e:	cc                   	int3   
  22d50f:	cc                   	int3   

000000000022d510 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE>:
}

/// Enables legacy interrupts by clearing the mask bits
/// when enabled, PIC will raise interrupts on behalf of hardware devices.
pub fn enable_legacy_interrupts() {
  22d510:	48 83 ec 28          	sub    $0x28,%rsp
    let chained_pic = CHAINED_PIC.lock();
  22d514:	48 8d 3d 6f 61 fd ff 	lea    -0x29e91(%rip),%rdi        # 20368a <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  22d51b:	e8 60 02 00 00       	callq  22d780 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  22d520:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d525:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d52a:	e8 71 16 00 00       	callq  22eba0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  22d52f:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22d534:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if !chained_pic.is_enabled {
  22d539:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d53e:	e8 3d 17 00 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22d543:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d548:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d54d:	8a 40 50             	mov    0x50(%rax),%al
  22d550:	34 ff                	xor    $0xff,%al
  22d552:	a8 01                	test   $0x1,%al
  22d554:	75 0c                	jne    22d562 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x52>
        chained_pic.mask_requests(0x00, 0x08);
    }
}
  22d556:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d55b:	e8 c0 ec fd ff       	callq  20c220 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
  22d560:	eb 20                	jmp    22d582 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x72>
        chained_pic.mask_requests(0x00, 0x08);
  22d562:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d567:	e8 14 17 00 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22d56c:	48 89 04 24          	mov    %rax,(%rsp)
  22d570:	48 8b 3c 24          	mov    (%rsp),%rdi
  22d574:	31 f6                	xor    %esi,%esi
  22d576:	ba 08 00 00 00       	mov    $0x8,%edx
  22d57b:	e8 40 fc ff ff       	callq  22d1c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22d580:	eb d4                	jmp    22d556 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x46>
}
  22d582:	48 83 c4 28          	add    $0x28,%rsp
  22d586:	c3                   	retq   
  22d587:	cc                   	int3   
  22d588:	cc                   	int3   
  22d589:	cc                   	int3   
  22d58a:	cc                   	int3   
  22d58b:	cc                   	int3   
  22d58c:	cc                   	int3   
  22d58d:	cc                   	int3   
  22d58e:	cc                   	int3   
  22d58f:	cc                   	int3   

000000000022d590 <_ZN9r3_kernel3cpu3pic25disable_legacy_interrupts17hef4281780617f245E>:

/// Disables legacy interrupts by setting the masks.
/// We can disabled PIC once we migrate to LAPIC during SMP boot.
pub fn disable_legacy_interrupts() {
  22d590:	48 83 ec 28          	sub    $0x28,%rsp
    let chained_pic = CHAINED_PIC.lock();
  22d594:	48 8d 3d ef 60 fd ff 	lea    -0x29f11(%rip),%rdi        # 20368a <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  22d59b:	e8 e0 01 00 00       	callq  22d780 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  22d5a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d5a5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d5aa:	e8 f1 15 00 00       	callq  22eba0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  22d5af:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22d5b4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if chained_pic.is_enabled {
  22d5b9:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d5be:	e8 bd 16 00 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22d5c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d5c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d5cd:	f6 40 50 01          	testb  $0x1,0x50(%rax)
  22d5d1:	75 0c                	jne    22d5df <_ZN9r3_kernel3cpu3pic25disable_legacy_interrupts17hef4281780617f245E+0x4f>
        chained_pic.mask_requests(0xff, 0xff);
    }
}
  22d5d3:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d5d8:	e8 43 ec fd ff       	callq  20c220 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
  22d5dd:	eb 20                	jmp    22d5ff <_ZN9r3_kernel3cpu3pic25disable_legacy_interrupts17hef4281780617f245E+0x6f>
        chained_pic.mask_requests(0xff, 0xff);
  22d5df:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d5e4:	e8 97 16 00 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22d5e9:	48 89 04 24          	mov    %rax,(%rsp)
  22d5ed:	48 8b 3c 24          	mov    (%rsp),%rdi
  22d5f1:	ba ff 00 00 00       	mov    $0xff,%edx
  22d5f6:	89 d6                	mov    %edx,%esi
  22d5f8:	e8 c3 fb ff ff       	callq  22d1c0 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22d5fd:	eb d4                	jmp    22d5d3 <_ZN9r3_kernel3cpu3pic25disable_legacy_interrupts17hef4281780617f245E+0x43>
}
  22d5ff:	48 83 c4 28          	add    $0x28,%rsp
  22d603:	c3                   	retq   
  22d604:	cc                   	int3   
  22d605:	cc                   	int3   
  22d606:	cc                   	int3   
  22d607:	cc                   	int3   
  22d608:	cc                   	int3   
  22d609:	cc                   	int3   
  22d60a:	cc                   	int3   
  22d60b:	cc                   	int3   
  22d60c:	cc                   	int3   
  22d60d:	cc                   	int3   
  22d60e:	cc                   	int3   
  22d60f:	cc                   	int3   

000000000022d610 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E>:

pub fn setup_pics() {
  22d610:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  22d617:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  22d61e:	00 00 
  22d620:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22d625:	48 8d 35 cc 2c fd ff 	lea    -0x2d334(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22d62c:	e8 9f 59 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22d631:	88 44 24 27          	mov    %al,0x27(%rsp)
  22d635:	8a 44 24 27          	mov    0x27(%rsp),%al
  22d639:	a8 01                	test   $0x1,%al
  22d63b:	75 09                	jne    22d646 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x36>
  22d63d:	eb 00                	jmp    22d63f <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x2f>
  22d63f:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22d644:	eb 4e                	jmp    22d694 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x84>
  22d646:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  22d64d:	00 
  22d64e:	48 8b 3d f3 04 01 00 	mov    0x104f3(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22d655:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  22d65c:	00 
  22d65d:	e8 8e db ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22d662:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22d669:	00 
  22d66a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  22d671:	00 
  22d672:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22d677:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22d67c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  22d681:	e8 4a 59 fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22d686:	88 44 24 26          	mov    %al,0x26(%rsp)
  22d68a:	8a 44 24 26          	mov    0x26(%rsp),%al
  22d68e:	24 01                	and    $0x1,%al
  22d690:	88 44 24 37          	mov    %al,0x37(%rsp)
  22d694:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  22d699:	75 08                	jne    22d6a3 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x93>
        "PICs initialized in chain PIC mode, n_pics={}",
        CHAINED_PIC.lock().pics.len()
    );
}
  22d69b:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  22d6a2:	c3                   	retq   
        CHAINED_PIC.lock().pics.len()
  22d6a3:	48 8d 3d e0 5f fd ff 	lea    -0x2a020(%rip),%rdi        # 20368a <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  22d6aa:	e8 d1 00 00 00       	callq  22d780 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  22d6af:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d6b4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d6b9:	e8 e2 14 00 00       	callq  22eba0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  22d6be:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  22d6c5:	00 
  22d6c6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22d6cd:	00 
  22d6ce:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22d6d5:	00 
  22d6d6:	e8 a5 15 00 00       	callq  22ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22d6db:	48 c7 84 24 88 00 00 	movq   $0x2,0x88(%rsp)
  22d6e2:	00 02 00 00 00 
    log::info!(
  22d6e7:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  22d6ee:	00 
  22d6ef:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22d6f6:	00 
  22d6f7:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  22d6fe:	00 
  22d6ff:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  22d706:	00 
  22d707:	48 8b 35 52 04 01 00 	mov    0x10452(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22d70e:	e8 6d 1e fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  22d713:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d718:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22d71d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d722:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d727:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  22d72c:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22d731:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  22d736:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22d73b:	48 8d 35 2e f7 00 00 	lea    0xf72e(%rip),%rsi        # 23ce70 <memcmp+0x4130>
  22d742:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22d748:	4c 89 c2             	mov    %r8,%rdx
  22d74b:	e8 e0 8d fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22d750:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22d755:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22d75a:	48 8d 15 1f f7 00 00 	lea    0xf71f(%rip),%rdx        # 23ce80 <memcmp+0x4140>
  22d761:	e8 1a 56 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22d766:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22d76d:	00 
  22d76e:	e8 ad ea fd ff       	callq  20c220 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
  22d773:	e9 23 ff ff ff       	jmpq   22d69b <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x8b>
  22d778:	cc                   	int3   
  22d779:	cc                   	int3   
  22d77a:	cc                   	int3   
  22d77b:	cc                   	int3   
  22d77c:	cc                   	int3   
  22d77d:	cc                   	int3   
  22d77e:	cc                   	int3   
  22d77f:	cc                   	int3   

000000000022d780 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>:
            fn deref(&self) -> &$T {
  22d780:	48 83 ec 18          	sub    $0x18,%rsp
  22d784:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d789:	48 8d 05 50 81 01 00 	lea    0x18150(%rip),%rax        # 2458e0 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hba2ed68b1e5de6ddE>
  22d790:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d795:	48 8d 3d 44 81 01 00 	lea    0x18144(%rip),%rdi        # 2458e0 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hba2ed68b1e5de6ddE>
  22d79c:	e8 bf c1 fd ff       	callq  209960 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E>
  22d7a1:	48 89 04 24          	mov    %rax,(%rsp)
  22d7a5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22d7a9:	48 83 c4 18          	add    $0x18,%rsp
  22d7ad:	c3                   	retq   
  22d7ae:	cc                   	int3   
  22d7af:	cc                   	int3   

000000000022d7b0 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE>:
unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
  22d7b0:	48 83 ec 38          	sub    $0x38,%rsp
  22d7b4:	48 89 34 24          	mov    %rsi,(%rsp)
  22d7b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22d7bd:	88 d0                	mov    %dl,%al
  22d7bf:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22d7c3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d7c8:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  22d7cd:	0f b6 44 24 1f       	movzbl 0x1f(%rsp),%eax
  22d7d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d7d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d7dc:	48 8d 0d a9 5e fd ff 	lea    -0x2a157(%rip),%rcx        # 20368c <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x2>
  22d7e3:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22d7e7:	48 01 c8             	add    %rcx,%rax
  22d7ea:	ff e0                	jmpq   *%rax
  22d7ec:	0f 0b                	ud2    
  22d7ee:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d7f3:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
  22d7f7:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22d7fc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d801:	eb 64                	jmp    22d867 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb7>
  22d803:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d808:	48 8b 04 24          	mov    (%rsp),%rax
            Release => intrinsics::atomic_xadd_rel(dst, val),
  22d80c:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22d811:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d816:	eb 4d                	jmp    22d865 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb5>
  22d818:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d81d:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
  22d821:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22d826:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d82b:	eb 36                	jmp    22d863 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb3>
  22d82d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d832:	48 8b 04 24          	mov    (%rsp),%rax
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
  22d836:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22d83b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d840:	eb 1f                	jmp    22d861 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb1>
  22d842:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d847:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_xadd(dst, val),
  22d84b:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22d850:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d855:	eb 00                	jmp    22d857 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
}
  22d857:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22d85c:	48 83 c4 38          	add    $0x38,%rsp
  22d860:	c3                   	retq   
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
  22d861:	eb f4                	jmp    22d857 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
  22d863:	eb f2                	jmp    22d857 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Release => intrinsics::atomic_xadd_rel(dst, val),
  22d865:	eb f0                	jmp    22d857 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
  22d867:	eb ee                	jmp    22d857 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
  22d869:	cc                   	int3   
  22d86a:	cc                   	int3   
  22d86b:	cc                   	int3   
  22d86c:	cc                   	int3   
  22d86d:	cc                   	int3   
  22d86e:	cc                   	int3   
  22d86f:	cc                   	int3   

000000000022d870 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  22d870:	48 83 ec 28          	sub    $0x28,%rsp
  22d874:	48 89 3c 24          	mov    %rdi,(%rsp)
  22d878:	40 88 f0             	mov    %sil,%al
  22d87b:	88 44 24 17          	mov    %al,0x17(%rsp)
  22d87f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  22d884:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  22d889:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d88e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d893:	48 8d 0d 06 5e fd ff 	lea    -0x2a1fa(%rip),%rcx        # 2036a0 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x16>
  22d89a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22d89e:	48 01 c8             	add    %rcx,%rax
  22d8a1:	ff e0                	jmpq   *%rax
  22d8a3:	0f 0b                	ud2    
  22d8a5:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22d8a9:	48 8b 00             	mov    (%rax),%rax
  22d8ac:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d8b1:	eb 5c                	jmp    22d90f <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  22d8b3:	48 8d 3d b7 5e fd ff 	lea    -0x2a149(%rip),%rdi        # 203771 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0xe7>
  22d8ba:	48 8d 15 0f f6 00 00 	lea    0xf60f(%rip),%rdx        # 23ced0 <memcmp+0x4190>
  22d8c1:	be 28 00 00 00       	mov    $0x28,%esi
  22d8c6:	e8 25 83 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d8cb:	0f 0b                	ud2    
  22d8cd:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  22d8d1:	48 8b 00             	mov    (%rax),%rax
  22d8d4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d8d9:	eb 32                	jmp    22d90d <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  22d8db:	48 8d 3d e6 5d fd ff 	lea    -0x2a21a(%rip),%rdi        # 2036c8 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x3e>
  22d8e2:	48 8d 15 cf f5 00 00 	lea    0xf5cf(%rip),%rdx        # 23ceb8 <memcmp+0x4178>
  22d8e9:	be 31 00 00 00       	mov    $0x31,%esi
  22d8ee:	e8 fd 82 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d8f3:	0f 0b                	ud2    
  22d8f5:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  22d8f9:	48 8b 00             	mov    (%rax),%rax
  22d8fc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d901:	eb 00                	jmp    22d903 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
}
  22d903:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22d908:	48 83 c4 28          	add    $0x28,%rsp
  22d90c:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  22d90d:	eb f4                	jmp    22d903 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22d90f:	eb f2                	jmp    22d903 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
  22d911:	cc                   	int3   
  22d912:	cc                   	int3   
  22d913:	cc                   	int3   
  22d914:	cc                   	int3   
  22d915:	cc                   	int3   
  22d916:	cc                   	int3   
  22d917:	cc                   	int3   
  22d918:	cc                   	int3   
  22d919:	cc                   	int3   
  22d91a:	cc                   	int3   
  22d91b:	cc                   	int3   
  22d91c:	cc                   	int3   
  22d91d:	cc                   	int3   
  22d91e:	cc                   	int3   
  22d91f:	cc                   	int3   

000000000022d920 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  22d920:	48 83 ec 38          	sub    $0x38,%rsp
  22d924:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22d929:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22d92e:	88 d0                	mov    %dl,%al
  22d930:	88 44 24 27          	mov    %al,0x27(%rsp)
  22d934:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d939:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  22d93e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  22d943:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d948:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22d94d:	48 8d 0d 60 5d fd ff 	lea    -0x2a2a0(%rip),%rcx        # 2036b4 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x2a>
  22d954:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22d958:	48 01 c8             	add    %rcx,%rax
  22d95b:	ff e0                	jmpq   *%rax
  22d95d:	0f 0b                	ud2    
  22d95f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d964:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22d969:	48 89 08             	mov    %rcx,(%rax)
  22d96c:	eb 59                	jmp    22d9c7 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa7>
  22d96e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d973:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  22d978:	48 89 08             	mov    %rcx,(%rax)
  22d97b:	eb 48                	jmp    22d9c5 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  22d97d:	48 8d 3d 47 5e fd ff 	lea    -0x2a1b9(%rip),%rdi        # 2037cb <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x141>
  22d984:	48 8d 15 75 f5 00 00 	lea    0xf575(%rip),%rdx        # 23cf00 <memcmp+0x41c0>
  22d98b:	be 2a 00 00 00       	mov    $0x2a,%esi
  22d990:	e8 5b 82 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d995:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  22d997:	48 8d 3d fb 5d fd ff 	lea    -0x2a205(%rip),%rdi        # 203799 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x10f>
  22d99e:	48 8d 15 43 f5 00 00 	lea    0xf543(%rip),%rdx        # 23cee8 <memcmp+0x41a8>
  22d9a5:	be 32 00 00 00       	mov    $0x32,%esi
  22d9aa:	e8 41 82 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d9af:	0f 0b                	ud2    
  22d9b1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22d9b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  22d9bb:	48 87 01             	xchg   %rax,(%rcx)
  22d9be:	eb 00                	jmp    22d9c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
}
  22d9c0:	48 83 c4 38          	add    $0x38,%rsp
  22d9c4:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  22d9c5:	eb f9                	jmp    22d9c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22d9c7:	eb f7                	jmp    22d9c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
  22d9c9:	cc                   	int3   
  22d9ca:	cc                   	int3   
  22d9cb:	cc                   	int3   
  22d9cc:	cc                   	int3   
  22d9cd:	cc                   	int3   
  22d9ce:	cc                   	int3   
  22d9cf:	cc                   	int3   

000000000022d9d0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E>:
    fn obtain_lock(&self)
  22d9d0:	48 83 ec 28          	sub    $0x28,%rsp
  22d9d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22d9d9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22d9de:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22d9e3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22d9e8:	31 f6                	xor    %esi,%esi
  22d9ea:	ba 01 00 00 00       	mov    $0x1,%edx
  22d9ef:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22d9f4:	e8 67 d4 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22d9f9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22d9fd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22da01:	a8 01                	test   $0x1,%al
  22da03:	75 07                	jne    22da0c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E+0x3c>
  22da05:	eb 00                	jmp    22da07 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E+0x37>
    }
  22da07:	48 83 c4 28          	add    $0x28,%rsp
  22da0b:	c3                   	retq   
  22da0c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22da11:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22da16:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22da1b:	e8 10 d6 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22da20:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22da24:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22da28:	a8 01                	test   $0x1,%al
  22da2a:	75 02                	jne    22da2e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E+0x5e>
  22da2c:	eb b0                	jmp    22d9de <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E+0xe>
                cpu_relax();
  22da2e:	e8 8d d8 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22da33:	eb d7                	jmp    22da0c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E+0x3c>
  22da35:	cc                   	int3   
  22da36:	cc                   	int3   
  22da37:	cc                   	int3   
  22da38:	cc                   	int3   
  22da39:	cc                   	int3   
  22da3a:	cc                   	int3   
  22da3b:	cc                   	int3   
  22da3c:	cc                   	int3   
  22da3d:	cc                   	int3   
  22da3e:	cc                   	int3   
  22da3f:	cc                   	int3   

000000000022da40 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E>:
    fn obtain_lock(&self)
  22da40:	48 83 ec 28          	sub    $0x28,%rsp
  22da44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22da49:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22da4e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22da53:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22da58:	31 f6                	xor    %esi,%esi
  22da5a:	ba 01 00 00 00       	mov    $0x1,%edx
  22da5f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22da64:	e8 f7 d3 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22da69:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22da6d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22da71:	a8 01                	test   $0x1,%al
  22da73:	75 07                	jne    22da7c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x3c>
  22da75:	eb 00                	jmp    22da77 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x37>
    }
  22da77:	48 83 c4 28          	add    $0x28,%rsp
  22da7b:	c3                   	retq   
  22da7c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22da81:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22da86:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22da8b:	e8 a0 d5 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22da90:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22da94:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22da98:	a8 01                	test   $0x1,%al
  22da9a:	75 02                	jne    22da9e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x5e>
  22da9c:	eb b0                	jmp    22da4e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0xe>
                cpu_relax();
  22da9e:	e8 1d d8 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22daa3:	eb d7                	jmp    22da7c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x3c>
  22daa5:	cc                   	int3   
  22daa6:	cc                   	int3   
  22daa7:	cc                   	int3   
  22daa8:	cc                   	int3   
  22daa9:	cc                   	int3   
  22daaa:	cc                   	int3   
  22daab:	cc                   	int3   
  22daac:	cc                   	int3   
  22daad:	cc                   	int3   
  22daae:	cc                   	int3   
  22daaf:	cc                   	int3   

000000000022dab0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E>:
    fn obtain_lock(&self)
  22dab0:	48 83 ec 28          	sub    $0x28,%rsp
  22dab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dab9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22dabe:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dac3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dac8:	31 f6                	xor    %esi,%esi
  22daca:	ba 01 00 00 00       	mov    $0x1,%edx
  22dacf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dad4:	e8 87 d3 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dad9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dadd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dae1:	a8 01                	test   $0x1,%al
  22dae3:	75 07                	jne    22daec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E+0x3c>
  22dae5:	eb 00                	jmp    22dae7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E+0x37>
    }
  22dae7:	48 83 c4 28          	add    $0x28,%rsp
  22daeb:	c3                   	retq   
  22daec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22daf1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22daf6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dafb:	e8 30 d5 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22db00:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22db04:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22db08:	a8 01                	test   $0x1,%al
  22db0a:	75 02                	jne    22db0e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E+0x5e>
  22db0c:	eb b0                	jmp    22dabe <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E+0xe>
                cpu_relax();
  22db0e:	e8 ad d7 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22db13:	eb d7                	jmp    22daec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E+0x3c>
  22db15:	cc                   	int3   
  22db16:	cc                   	int3   
  22db17:	cc                   	int3   
  22db18:	cc                   	int3   
  22db19:	cc                   	int3   
  22db1a:	cc                   	int3   
  22db1b:	cc                   	int3   
  22db1c:	cc                   	int3   
  22db1d:	cc                   	int3   
  22db1e:	cc                   	int3   
  22db1f:	cc                   	int3   

000000000022db20 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE>:
    fn obtain_lock(&self)
  22db20:	48 83 ec 28          	sub    $0x28,%rsp
  22db24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22db29:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22db2e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22db33:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22db38:	31 f6                	xor    %esi,%esi
  22db3a:	ba 01 00 00 00       	mov    $0x1,%edx
  22db3f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22db44:	e8 17 d3 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22db49:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22db4d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22db51:	a8 01                	test   $0x1,%al
  22db53:	75 07                	jne    22db5c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x3c>
  22db55:	eb 00                	jmp    22db57 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x37>
    }
  22db57:	48 83 c4 28          	add    $0x28,%rsp
  22db5b:	c3                   	retq   
  22db5c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22db61:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22db66:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22db6b:	e8 c0 d4 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22db70:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22db74:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22db78:	a8 01                	test   $0x1,%al
  22db7a:	75 02                	jne    22db7e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x5e>
  22db7c:	eb b0                	jmp    22db2e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0xe>
                cpu_relax();
  22db7e:	e8 3d d7 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22db83:	eb d7                	jmp    22db5c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x3c>
  22db85:	cc                   	int3   
  22db86:	cc                   	int3   
  22db87:	cc                   	int3   
  22db88:	cc                   	int3   
  22db89:	cc                   	int3   
  22db8a:	cc                   	int3   
  22db8b:	cc                   	int3   
  22db8c:	cc                   	int3   
  22db8d:	cc                   	int3   
  22db8e:	cc                   	int3   
  22db8f:	cc                   	int3   

000000000022db90 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E>:
    fn obtain_lock(&self)
  22db90:	48 83 ec 28          	sub    $0x28,%rsp
  22db94:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22db99:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22db9e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dba3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dba8:	31 f6                	xor    %esi,%esi
  22dbaa:	ba 01 00 00 00       	mov    $0x1,%edx
  22dbaf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dbb4:	e8 a7 d2 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dbb9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dbbd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dbc1:	a8 01                	test   $0x1,%al
  22dbc3:	75 07                	jne    22dbcc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x3c>
  22dbc5:	eb 00                	jmp    22dbc7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x37>
    }
  22dbc7:	48 83 c4 28          	add    $0x28,%rsp
  22dbcb:	c3                   	retq   
  22dbcc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dbd1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dbd6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dbdb:	e8 50 d4 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22dbe0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22dbe4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22dbe8:	a8 01                	test   $0x1,%al
  22dbea:	75 02                	jne    22dbee <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x5e>
  22dbec:	eb b0                	jmp    22db9e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0xe>
                cpu_relax();
  22dbee:	e8 cd d6 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22dbf3:	eb d7                	jmp    22dbcc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x3c>
  22dbf5:	cc                   	int3   
  22dbf6:	cc                   	int3   
  22dbf7:	cc                   	int3   
  22dbf8:	cc                   	int3   
  22dbf9:	cc                   	int3   
  22dbfa:	cc                   	int3   
  22dbfb:	cc                   	int3   
  22dbfc:	cc                   	int3   
  22dbfd:	cc                   	int3   
  22dbfe:	cc                   	int3   
  22dbff:	cc                   	int3   

000000000022dc00 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE>:
    fn obtain_lock(&self)
  22dc00:	48 83 ec 28          	sub    $0x28,%rsp
  22dc04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dc09:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22dc0e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dc13:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dc18:	31 f6                	xor    %esi,%esi
  22dc1a:	ba 01 00 00 00       	mov    $0x1,%edx
  22dc1f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dc24:	e8 37 d2 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dc29:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dc2d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dc31:	a8 01                	test   $0x1,%al
  22dc33:	75 07                	jne    22dc3c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x3c>
  22dc35:	eb 00                	jmp    22dc37 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x37>
    }
  22dc37:	48 83 c4 28          	add    $0x28,%rsp
  22dc3b:	c3                   	retq   
  22dc3c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dc41:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dc46:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dc4b:	e8 e0 d3 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22dc50:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22dc54:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22dc58:	a8 01                	test   $0x1,%al
  22dc5a:	75 02                	jne    22dc5e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x5e>
  22dc5c:	eb b0                	jmp    22dc0e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0xe>
                cpu_relax();
  22dc5e:	e8 5d d6 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22dc63:	eb d7                	jmp    22dc3c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x3c>
  22dc65:	cc                   	int3   
  22dc66:	cc                   	int3   
  22dc67:	cc                   	int3   
  22dc68:	cc                   	int3   
  22dc69:	cc                   	int3   
  22dc6a:	cc                   	int3   
  22dc6b:	cc                   	int3   
  22dc6c:	cc                   	int3   
  22dc6d:	cc                   	int3   
  22dc6e:	cc                   	int3   
  22dc6f:	cc                   	int3   

000000000022dc70 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E>:
    fn obtain_lock(&self)
  22dc70:	48 83 ec 28          	sub    $0x28,%rsp
  22dc74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dc79:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22dc7e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dc83:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dc88:	31 f6                	xor    %esi,%esi
  22dc8a:	ba 01 00 00 00       	mov    $0x1,%edx
  22dc8f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dc94:	e8 c7 d1 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dc99:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dc9d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dca1:	a8 01                	test   $0x1,%al
  22dca3:	75 07                	jne    22dcac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x3c>
  22dca5:	eb 00                	jmp    22dca7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x37>
    }
  22dca7:	48 83 c4 28          	add    $0x28,%rsp
  22dcab:	c3                   	retq   
  22dcac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dcb1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dcb6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dcbb:	e8 70 d3 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22dcc0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22dcc4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22dcc8:	a8 01                	test   $0x1,%al
  22dcca:	75 02                	jne    22dcce <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x5e>
  22dccc:	eb b0                	jmp    22dc7e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0xe>
                cpu_relax();
  22dcce:	e8 ed d5 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22dcd3:	eb d7                	jmp    22dcac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x3c>
  22dcd5:	cc                   	int3   
  22dcd6:	cc                   	int3   
  22dcd7:	cc                   	int3   
  22dcd8:	cc                   	int3   
  22dcd9:	cc                   	int3   
  22dcda:	cc                   	int3   
  22dcdb:	cc                   	int3   
  22dcdc:	cc                   	int3   
  22dcdd:	cc                   	int3   
  22dcde:	cc                   	int3   
  22dcdf:	cc                   	int3   

000000000022dce0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E>:
    fn obtain_lock(&self)
  22dce0:	48 83 ec 28          	sub    $0x28,%rsp
  22dce4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dce9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22dcee:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dcf3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dcf8:	31 f6                	xor    %esi,%esi
  22dcfa:	ba 01 00 00 00       	mov    $0x1,%edx
  22dcff:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dd04:	e8 57 d1 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dd09:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dd0d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dd11:	a8 01                	test   $0x1,%al
  22dd13:	75 07                	jne    22dd1c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x3c>
  22dd15:	eb 00                	jmp    22dd17 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x37>
    }
  22dd17:	48 83 c4 28          	add    $0x28,%rsp
  22dd1b:	c3                   	retq   
  22dd1c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dd21:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dd26:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dd2b:	e8 00 d3 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22dd30:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22dd34:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22dd38:	a8 01                	test   $0x1,%al
  22dd3a:	75 02                	jne    22dd3e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x5e>
  22dd3c:	eb b0                	jmp    22dcee <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0xe>
                cpu_relax();
  22dd3e:	e8 7d d5 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22dd43:	eb d7                	jmp    22dd1c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x3c>
  22dd45:	cc                   	int3   
  22dd46:	cc                   	int3   
  22dd47:	cc                   	int3   
  22dd48:	cc                   	int3   
  22dd49:	cc                   	int3   
  22dd4a:	cc                   	int3   
  22dd4b:	cc                   	int3   
  22dd4c:	cc                   	int3   
  22dd4d:	cc                   	int3   
  22dd4e:	cc                   	int3   
  22dd4f:	cc                   	int3   

000000000022dd50 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE>:
    fn obtain_lock(&self)
  22dd50:	48 83 ec 28          	sub    $0x28,%rsp
  22dd54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dd59:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22dd5e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22dd63:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22dd68:	31 f6                	xor    %esi,%esi
  22dd6a:	ba 01 00 00 00       	mov    $0x1,%edx
  22dd6f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dd74:	e8 e7 d0 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dd79:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dd7d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22dd81:	a8 01                	test   $0x1,%al
  22dd83:	75 07                	jne    22dd8c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x3c>
  22dd85:	eb 00                	jmp    22dd87 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x37>
    }
  22dd87:	48 83 c4 28          	add    $0x28,%rsp
  22dd8b:	c3                   	retq   
  22dd8c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dd91:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dd96:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22dd9b:	e8 90 d2 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22dda0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22dda4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22dda8:	a8 01                	test   $0x1,%al
  22ddaa:	75 02                	jne    22ddae <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x5e>
  22ddac:	eb b0                	jmp    22dd5e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0xe>
                cpu_relax();
  22ddae:	e8 0d d5 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22ddb3:	eb d7                	jmp    22dd8c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x3c>
  22ddb5:	cc                   	int3   
  22ddb6:	cc                   	int3   
  22ddb7:	cc                   	int3   
  22ddb8:	cc                   	int3   
  22ddb9:	cc                   	int3   
  22ddba:	cc                   	int3   
  22ddbb:	cc                   	int3   
  22ddbc:	cc                   	int3   
  22ddbd:	cc                   	int3   
  22ddbe:	cc                   	int3   
  22ddbf:	cc                   	int3   

000000000022ddc0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E>:
    fn obtain_lock(&self)
  22ddc0:	48 83 ec 28          	sub    $0x28,%rsp
  22ddc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ddc9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22ddce:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22ddd3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22ddd8:	31 f6                	xor    %esi,%esi
  22ddda:	ba 01 00 00 00       	mov    $0x1,%edx
  22dddf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dde4:	e8 77 d0 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dde9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22dded:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22ddf1:	a8 01                	test   $0x1,%al
  22ddf3:	75 07                	jne    22ddfc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x3c>
  22ddf5:	eb 00                	jmp    22ddf7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x37>
    }
  22ddf7:	48 83 c4 28          	add    $0x28,%rsp
  22ddfb:	c3                   	retq   
  22ddfc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22de01:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22de06:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22de0b:	e8 20 d2 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22de10:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22de14:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22de18:	a8 01                	test   $0x1,%al
  22de1a:	75 02                	jne    22de1e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x5e>
  22de1c:	eb b0                	jmp    22ddce <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0xe>
                cpu_relax();
  22de1e:	e8 9d d4 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22de23:	eb d7                	jmp    22ddfc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x3c>
  22de25:	cc                   	int3   
  22de26:	cc                   	int3   
  22de27:	cc                   	int3   
  22de28:	cc                   	int3   
  22de29:	cc                   	int3   
  22de2a:	cc                   	int3   
  22de2b:	cc                   	int3   
  22de2c:	cc                   	int3   
  22de2d:	cc                   	int3   
  22de2e:	cc                   	int3   
  22de2f:	cc                   	int3   

000000000022de30 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E>:
    fn obtain_lock(&self)
  22de30:	48 83 ec 28          	sub    $0x28,%rsp
  22de34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22de39:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22de3e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22de43:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22de48:	31 f6                	xor    %esi,%esi
  22de4a:	ba 01 00 00 00       	mov    $0x1,%edx
  22de4f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22de54:	e8 07 d0 ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22de59:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22de5d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22de61:	a8 01                	test   $0x1,%al
  22de63:	75 07                	jne    22de6c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x3c>
  22de65:	eb 00                	jmp    22de67 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x37>
    }
  22de67:	48 83 c4 28          	add    $0x28,%rsp
  22de6b:	c3                   	retq   
  22de6c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22de71:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22de76:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22de7b:	e8 b0 d1 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22de80:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22de84:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22de88:	a8 01                	test   $0x1,%al
  22de8a:	75 02                	jne    22de8e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x5e>
  22de8c:	eb b0                	jmp    22de3e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0xe>
                cpu_relax();
  22de8e:	e8 2d d4 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22de93:	eb d7                	jmp    22de6c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x3c>
  22de95:	cc                   	int3   
  22de96:	cc                   	int3   
  22de97:	cc                   	int3   
  22de98:	cc                   	int3   
  22de99:	cc                   	int3   
  22de9a:	cc                   	int3   
  22de9b:	cc                   	int3   
  22de9c:	cc                   	int3   
  22de9d:	cc                   	int3   
  22de9e:	cc                   	int3   
  22de9f:	cc                   	int3   

000000000022dea0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE>:
    fn obtain_lock(&self)
  22dea0:	48 83 ec 28          	sub    $0x28,%rsp
  22dea4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22dea9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22deae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22deb3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22deb8:	31 f6                	xor    %esi,%esi
  22deba:	ba 01 00 00 00       	mov    $0x1,%edx
  22debf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22dec4:	e8 97 cf ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22dec9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22decd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22ded1:	a8 01                	test   $0x1,%al
  22ded3:	75 07                	jne    22dedc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE+0x3c>
  22ded5:	eb 00                	jmp    22ded7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE+0x37>
    }
  22ded7:	48 83 c4 28          	add    $0x28,%rsp
  22dedb:	c3                   	retq   
  22dedc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22dee1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22dee6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22deeb:	e8 40 d1 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22def0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22def4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22def8:	a8 01                	test   $0x1,%al
  22defa:	75 02                	jne    22defe <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE+0x5e>
  22defc:	eb b0                	jmp    22deae <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE+0xe>
                cpu_relax();
  22defe:	e8 bd d3 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22df03:	eb d7                	jmp    22dedc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE+0x3c>
  22df05:	cc                   	int3   
  22df06:	cc                   	int3   
  22df07:	cc                   	int3   
  22df08:	cc                   	int3   
  22df09:	cc                   	int3   
  22df0a:	cc                   	int3   
  22df0b:	cc                   	int3   
  22df0c:	cc                   	int3   
  22df0d:	cc                   	int3   
  22df0e:	cc                   	int3   
  22df0f:	cc                   	int3   

000000000022df10 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E>:
    fn obtain_lock(&self)
  22df10:	48 83 ec 28          	sub    $0x28,%rsp
  22df14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22df19:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22df1e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22df23:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22df28:	31 f6                	xor    %esi,%esi
  22df2a:	ba 01 00 00 00       	mov    $0x1,%edx
  22df2f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22df34:	e8 27 cf ff ff       	callq  22ae60 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22df39:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22df3d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22df41:	a8 01                	test   $0x1,%al
  22df43:	75 07                	jne    22df4c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x3c>
  22df45:	eb 00                	jmp    22df47 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x37>
    }
  22df47:	48 83 c4 28          	add    $0x28,%rsp
  22df4b:	c3                   	retq   
  22df4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22df51:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22df56:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22df5b:	e8 d0 d0 ff ff       	callq  22b030 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22df60:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22df64:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22df68:	a8 01                	test   $0x1,%al
  22df6a:	75 02                	jne    22df6e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x5e>
  22df6c:	eb b0                	jmp    22df1e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0xe>
                cpu_relax();
  22df6e:	e8 4d d3 ff ff       	callq  22b2c0 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22df73:	eb d7                	jmp    22df4c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x3c>
  22df75:	cc                   	int3   
  22df76:	cc                   	int3   
  22df77:	cc                   	int3   
  22df78:	cc                   	int3   
  22df79:	cc                   	int3   
  22df7a:	cc                   	int3   
  22df7b:	cc                   	int3   
  22df7c:	cc                   	int3   
  22df7d:	cc                   	int3   
  22df7e:	cc                   	int3   
  22df7f:	cc                   	int3   

000000000022df80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h03eb79ebae1e7aadE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22df80:	48 81 ec 38 30 00 00 	sub    $0x3038,%rsp
  22df87:	48 89 34 24          	mov    %rsi,(%rsp)
  22df8b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22df90:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22df95:	31 ff                	xor    %edi,%edi
  22df97:	e8 54 d0 ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22df9c:	88 84 24 2f 20 00 00 	mov    %al,0x202f(%rsp)
  22dfa3:	8a 84 24 2f 20 00 00 	mov    0x202f(%rsp),%al
  22dfaa:	88 44 24 18          	mov    %al,0x18(%rsp)
  22dfae:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22dfb2:	48 8d bc 24 20 10 00 	lea    0x1020(%rsp),%rdi
  22dfb9:	00 
  22dfba:	ba 00 10 00 00       	mov    $0x1000,%edx
  22dfbf:	e8 2c ad 00 00       	callq  238cf0 <memcpy>
        UnsafeCell { value }
  22dfc4:	48 8d bc 24 30 20 00 	lea    0x2030(%rsp),%rdi
  22dfcb:	00 
  22dfcc:	48 8d b4 24 20 10 00 	lea    0x1020(%rsp),%rsi
  22dfd3:	00 
  22dfd4:	ba 00 10 00 00       	mov    $0x1000,%edx
  22dfd9:	e8 12 ad 00 00       	callq  238cf0 <memcpy>
  22dfde:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22dfe3:	48 8d b4 24 30 20 00 	lea    0x2030(%rsp),%rsi
  22dfea:	00 
  22dfeb:	ba 00 10 00 00       	mov    $0x1000,%edx
  22dff0:	e8 fb ac 00 00       	callq  238cf0 <memcpy>
  22dff5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  22dffa:	8a 44 24 18          	mov    0x18(%rsp),%al
  22dffe:	88 07                	mov    %al,(%rdi)
  22e000:	48 83 c7 10          	add    $0x10,%rdi
  22e004:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22e009:	ba 00 10 00 00       	mov    $0x1000,%edx
  22e00e:	e8 dd ac 00 00       	callq  238cf0 <memcpy>
  22e013:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22e018:	48 81 c4 38 30 00 00 	add    $0x3038,%rsp
  22e01f:	c3                   	retq   

000000000022e020 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1d35398e75f8f15cE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e020:	48 83 ec 78          	sub    $0x78,%rsp
  22e024:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22e029:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e02e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22e033:	31 ff                	xor    %edi,%edi
  22e035:	e8 b6 cf ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e03a:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  22e03e:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  22e042:	88 44 24 20          	mov    %al,0x20(%rsp)
  22e046:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            data: UnsafeCell::new(user_data),
  22e04b:	48 8b 08             	mov    (%rax),%rcx
  22e04e:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22e053:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22e057:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22e05c:	48 8b 40 10          	mov    0x10(%rax),%rax
  22e060:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22e065:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e06a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22e06f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22e074:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e079:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22e07e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e083:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22e088:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e08d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e092:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e097:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22e09c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e0a1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e0a6:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Mutex
  22e0ab:	8a 54 24 20          	mov    0x20(%rsp),%dl
  22e0af:	88 11                	mov    %dl,(%rcx)
  22e0b1:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22e0b6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22e0ba:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e0bf:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22e0c3:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22e0c8:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  22e0cc:	48 83 c4 78          	add    $0x78,%rsp
  22e0d0:	c3                   	retq   
  22e0d1:	cc                   	int3   
  22e0d2:	cc                   	int3   
  22e0d3:	cc                   	int3   
  22e0d4:	cc                   	int3   
  22e0d5:	cc                   	int3   
  22e0d6:	cc                   	int3   
  22e0d7:	cc                   	int3   
  22e0d8:	cc                   	int3   
  22e0d9:	cc                   	int3   
  22e0da:	cc                   	int3   
  22e0db:	cc                   	int3   
  22e0dc:	cc                   	int3   
  22e0dd:	cc                   	int3   
  22e0de:	cc                   	int3   
  22e0df:	cc                   	int3   

000000000022e0e0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3237b67d888c05a7E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e0e0:	48 81 ec d8 04 00 00 	sub    $0x4d8,%rsp
  22e0e7:	48 89 34 24          	mov    %rsi,(%rsp)
  22e0eb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22e0f0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22e0f5:	31 ff                	xor    %edi,%edi
  22e0f7:	e8 f4 ce ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e0fc:	88 84 24 47 03 00 00 	mov    %al,0x347(%rsp)
  22e103:	8a 84 24 47 03 00 00 	mov    0x347(%rsp),%al
  22e10a:	88 44 24 18          	mov    %al,0x18(%rsp)
  22e10e:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22e112:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  22e119:	00 
  22e11a:	ba 90 01 00 00       	mov    $0x190,%edx
  22e11f:	e8 cc ab 00 00       	callq  238cf0 <memcpy>
  22e124:	48 8d bc 24 48 03 00 	lea    0x348(%rsp),%rdi
  22e12b:	00 
  22e12c:	48 8d b4 24 b0 01 00 	lea    0x1b0(%rsp),%rsi
  22e133:	00 
  22e134:	ba 90 01 00 00       	mov    $0x190,%edx
  22e139:	e8 b2 ab 00 00       	callq  238cf0 <memcpy>
  22e13e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22e143:	48 8d b4 24 48 03 00 	lea    0x348(%rsp),%rsi
  22e14a:	00 
  22e14b:	ba 90 01 00 00       	mov    $0x190,%edx
  22e150:	e8 9b ab 00 00       	callq  238cf0 <memcpy>
  22e155:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  22e15a:	8a 44 24 18          	mov    0x18(%rsp),%al
  22e15e:	88 07                	mov    %al,(%rdi)
  22e160:	48 83 c7 08          	add    $0x8,%rdi
  22e164:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22e169:	ba 90 01 00 00       	mov    $0x190,%edx
  22e16e:	e8 7d ab 00 00       	callq  238cf0 <memcpy>
  22e173:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22e178:	48 81 c4 d8 04 00 00 	add    $0x4d8,%rsp
  22e17f:	c3                   	retq   

000000000022e180 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3fd6b3d9821e2ef0E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e180:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  22e187:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22e18c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e191:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22e196:	31 ff                	xor    %edi,%edi
  22e198:	e8 53 ce ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e19d:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  22e1a4:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  22e1ab:	88 44 24 20          	mov    %al,0x20(%rsp)
  22e1af:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22e1b4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  22e1bb:	00 
  22e1bc:	ba 58 00 00 00       	mov    $0x58,%edx
  22e1c1:	e8 2a ab 00 00       	callq  238cf0 <memcpy>
  22e1c6:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  22e1cd:	00 
  22e1ce:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  22e1d5:	00 
  22e1d6:	ba 58 00 00 00       	mov    $0x58,%edx
  22e1db:	e8 10 ab 00 00       	callq  238cf0 <memcpy>
  22e1e0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22e1e5:	48 8d b4 24 e0 00 00 	lea    0xe0(%rsp),%rsi
  22e1ec:	00 
  22e1ed:	ba 58 00 00 00       	mov    $0x58,%edx
  22e1f2:	e8 f9 aa 00 00       	callq  238cf0 <memcpy>
  22e1f7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22e1fc:	8a 44 24 20          	mov    0x20(%rsp),%al
  22e200:	88 07                	mov    %al,(%rdi)
  22e202:	48 83 c7 08          	add    $0x8,%rdi
  22e206:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22e20b:	ba 58 00 00 00       	mov    $0x58,%edx
  22e210:	e8 db aa 00 00       	callq  238cf0 <memcpy>
  22e215:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22e21a:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  22e221:	c3                   	retq   
  22e222:	cc                   	int3   
  22e223:	cc                   	int3   
  22e224:	cc                   	int3   
  22e225:	cc                   	int3   
  22e226:	cc                   	int3   
  22e227:	cc                   	int3   
  22e228:	cc                   	int3   
  22e229:	cc                   	int3   
  22e22a:	cc                   	int3   
  22e22b:	cc                   	int3   
  22e22c:	cc                   	int3   
  22e22d:	cc                   	int3   
  22e22e:	cc                   	int3   
  22e22f:	cc                   	int3   

000000000022e230 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e230:	48 83 ec 78          	sub    $0x78,%rsp
  22e234:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22e239:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22e23e:	88 d0                	mov    %dl,%al
  22e240:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22e244:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22e249:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22e24e:	24 01                	and    $0x1,%al
  22e250:	88 44 24 48          	mov    %al,0x48(%rsp)
            lock: AtomicBool::new(false),
  22e254:	31 ff                	xor    %edi,%edi
  22e256:	e8 95 cd ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e25b:	88 44 24 57          	mov    %al,0x57(%rsp)
  22e25f:	8a 44 24 57          	mov    0x57(%rsp),%al
  22e263:	88 44 24 38          	mov    %al,0x38(%rsp)
  22e267:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22e26c:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  22e270:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22e275:	24 01                	and    $0x1,%al
  22e277:	88 44 24 70          	mov    %al,0x70(%rsp)
  22e27b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22e280:	88 44 24 60          	mov    %al,0x60(%rsp)
    }
  22e284:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e289:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e28e:	8a 44 24 60          	mov    0x60(%rsp),%al
  22e292:	88 44 24 17          	mov    %al,0x17(%rsp)
  22e296:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22e29b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22e2a0:	8a 54 24 17          	mov    0x17(%rsp),%dl
  22e2a4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  22e2a9:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  22e2ae:	40 88 39             	mov    %dil,(%rcx)
  22e2b1:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22e2b5:	80 e2 01             	and    $0x1,%dl
  22e2b8:	88 51 10             	mov    %dl,0x10(%rcx)
    }
  22e2bb:	48 83 c4 78          	add    $0x78,%rsp
  22e2bf:	c3                   	retq   

000000000022e2c0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h65fa35b167151302E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e2c0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  22e2c7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22e2cc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e2d1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22e2d6:	31 ff                	xor    %edi,%edi
  22e2d8:	e8 13 cd ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e2dd:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  22e2e1:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22e2e5:	88 44 24 20          	mov    %al,0x20(%rsp)
  22e2e9:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22e2ee:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22e2f3:	ba 28 00 00 00       	mov    $0x28,%edx
  22e2f8:	e8 f3 a9 00 00       	callq  238cf0 <memcpy>
        UnsafeCell { value }
  22e2fd:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  22e304:	00 
  22e305:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  22e30a:	ba 28 00 00 00       	mov    $0x28,%edx
  22e30f:	e8 dc a9 00 00       	callq  238cf0 <memcpy>
  22e314:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22e319:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  22e320:	00 
  22e321:	ba 28 00 00 00       	mov    $0x28,%edx
  22e326:	e8 c5 a9 00 00       	callq  238cf0 <memcpy>
  22e32b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22e330:	8a 44 24 20          	mov    0x20(%rsp),%al
  22e334:	88 07                	mov    %al,(%rdi)
  22e336:	48 83 c7 08          	add    $0x8,%rdi
  22e33a:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22e33f:	ba 28 00 00 00       	mov    $0x28,%edx
  22e344:	e8 a7 a9 00 00       	callq  238cf0 <memcpy>
  22e349:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22e34e:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  22e355:	c3                   	retq   
  22e356:	cc                   	int3   
  22e357:	cc                   	int3   
  22e358:	cc                   	int3   
  22e359:	cc                   	int3   
  22e35a:	cc                   	int3   
  22e35b:	cc                   	int3   
  22e35c:	cc                   	int3   
  22e35d:	cc                   	int3   
  22e35e:	cc                   	int3   
  22e35f:	cc                   	int3   

000000000022e360 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h697fd96977702439E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e360:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22e367:	48 89 34 24          	mov    %rsi,(%rsp)
  22e36b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22e370:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22e375:	31 ff                	xor    %edi,%edi
  22e377:	e8 74 cc ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e37c:	88 44 24 67          	mov    %al,0x67(%rsp)
  22e380:	8a 44 24 67          	mov    0x67(%rsp),%al
  22e384:	88 44 24 18          	mov    %al,0x18(%rsp)
  22e388:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  22e38c:	48 8b 08             	mov    (%rax),%rcx
  22e38f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22e394:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22e398:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22e39d:	48 8b 48 10          	mov    0x10(%rax),%rcx
  22e3a1:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22e3a6:	48 8b 40 18          	mov    0x18(%rax),%rax
  22e3aa:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22e3af:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e3b4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e3b9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22e3be:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e3c3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22e3c8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22e3cd:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e3d2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22e3d9:	00 
  22e3da:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e3df:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22e3e4:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22e3e9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e3ee:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  22e3f3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e3f8:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22e3ff:	00 
  22e400:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e405:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22e40a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  22e40f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  22e413:	88 11                	mov    %dl,(%rcx)
  22e415:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e41a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22e41e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22e423:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22e427:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e42c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22e430:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22e435:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  22e439:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22e440:	c3                   	retq   
  22e441:	cc                   	int3   
  22e442:	cc                   	int3   
  22e443:	cc                   	int3   
  22e444:	cc                   	int3   
  22e445:	cc                   	int3   
  22e446:	cc                   	int3   
  22e447:	cc                   	int3   
  22e448:	cc                   	int3   
  22e449:	cc                   	int3   
  22e44a:	cc                   	int3   
  22e44b:	cc                   	int3   
  22e44c:	cc                   	int3   
  22e44d:	cc                   	int3   
  22e44e:	cc                   	int3   
  22e44f:	cc                   	int3   

000000000022e450 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h7b64888ecb399409E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e450:	48 83 ec 78          	sub    $0x78,%rsp
  22e454:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22e459:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22e45e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22e463:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22e468:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22e46d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
            lock: AtomicBool::new(false),
  22e472:	31 ff                	xor    %edi,%edi
  22e474:	e8 77 cb ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e479:	88 44 24 57          	mov    %al,0x57(%rsp)
  22e47d:	8a 44 24 57          	mov    0x57(%rsp),%al
  22e481:	88 44 24 38          	mov    %al,0x38(%rsp)
  22e485:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e48a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22e48f:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22e494:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e499:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22e49e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  22e4a3:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e4a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e4ad:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22e4b2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22e4b7:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22e4bc:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22e4c1:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22e4c6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  22e4cb:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  22e4d0:	40 88 39             	mov    %dil,(%rcx)
  22e4d3:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22e4d7:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  22e4db:	48 83 c4 78          	add    $0x78,%rsp
  22e4df:	c3                   	retq   

000000000022e4e0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb57e111c8bcb0c86E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e4e0:	48 83 ec 78          	sub    $0x78,%rsp
  22e4e4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22e4e9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e4ee:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22e4f3:	31 ff                	xor    %edi,%edi
  22e4f5:	e8 f6 ca ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e4fa:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  22e4fe:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  22e502:	88 44 24 20          	mov    %al,0x20(%rsp)
  22e506:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            data: UnsafeCell::new(user_data),
  22e50b:	48 8b 08             	mov    (%rax),%rcx
  22e50e:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22e513:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22e517:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22e51c:	48 8b 40 10          	mov    0x10(%rax),%rax
  22e520:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        UnsafeCell { value }
  22e525:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e52a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22e52f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22e534:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e539:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22e53e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e543:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22e548:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e54d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e552:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e557:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22e55c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e561:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e566:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Mutex
  22e56b:	8a 54 24 20          	mov    0x20(%rsp),%dl
  22e56f:	88 11                	mov    %dl,(%rcx)
  22e571:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22e576:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22e57a:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e57f:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22e583:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22e588:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  22e58c:	48 83 c4 78          	add    $0x78,%rsp
  22e590:	c3                   	retq   
  22e591:	cc                   	int3   
  22e592:	cc                   	int3   
  22e593:	cc                   	int3   
  22e594:	cc                   	int3   
  22e595:	cc                   	int3   
  22e596:	cc                   	int3   
  22e597:	cc                   	int3   
  22e598:	cc                   	int3   
  22e599:	cc                   	int3   
  22e59a:	cc                   	int3   
  22e59b:	cc                   	int3   
  22e59c:	cc                   	int3   
  22e59d:	cc                   	int3   
  22e59e:	cc                   	int3   
  22e59f:	cc                   	int3   

000000000022e5a0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb8a225ac51d82457E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e5a0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22e5a7:	48 89 34 24          	mov    %rsi,(%rsp)
  22e5ab:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22e5b0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22e5b5:	31 ff                	xor    %edi,%edi
  22e5b7:	e8 34 ca ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e5bc:	88 44 24 67          	mov    %al,0x67(%rsp)
  22e5c0:	8a 44 24 67          	mov    0x67(%rsp),%al
  22e5c4:	88 44 24 18          	mov    %al,0x18(%rsp)
  22e5c8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  22e5cc:	48 8b 08             	mov    (%rax),%rcx
  22e5cf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22e5d4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22e5d8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22e5dd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  22e5e1:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22e5e6:	48 8b 40 18          	mov    0x18(%rax),%rax
  22e5ea:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22e5ef:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e5f4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e5f9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22e5fe:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e603:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22e608:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22e60d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e612:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22e619:	00 
  22e61a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e61f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22e624:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22e629:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e62e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  22e633:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e638:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22e63f:	00 
  22e640:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e645:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22e64a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  22e64f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  22e653:	88 11                	mov    %dl,(%rcx)
  22e655:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e65a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22e65e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22e663:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22e667:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e66c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22e670:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22e675:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  22e679:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22e680:	c3                   	retq   
  22e681:	cc                   	int3   
  22e682:	cc                   	int3   
  22e683:	cc                   	int3   
  22e684:	cc                   	int3   
  22e685:	cc                   	int3   
  22e686:	cc                   	int3   
  22e687:	cc                   	int3   
  22e688:	cc                   	int3   
  22e689:	cc                   	int3   
  22e68a:	cc                   	int3   
  22e68b:	cc                   	int3   
  22e68c:	cc                   	int3   
  22e68d:	cc                   	int3   
  22e68e:	cc                   	int3   
  22e68f:	cc                   	int3   

000000000022e690 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hba9b1c03bd7af26fE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e690:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22e697:	48 89 34 24          	mov    %rsi,(%rsp)
  22e69b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22e6a0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22e6a5:	31 ff                	xor    %edi,%edi
  22e6a7:	e8 44 c9 ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e6ac:	88 44 24 67          	mov    %al,0x67(%rsp)
  22e6b0:	8a 44 24 67          	mov    0x67(%rsp),%al
  22e6b4:	88 44 24 18          	mov    %al,0x18(%rsp)
  22e6b8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  22e6bc:	48 8b 08             	mov    (%rax),%rcx
  22e6bf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22e6c4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22e6c8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22e6cd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  22e6d1:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22e6d6:	48 8b 40 18          	mov    0x18(%rax),%rax
  22e6da:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22e6df:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e6e4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e6e9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22e6ee:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e6f3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22e6f8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22e6fd:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e702:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22e709:	00 
  22e70a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e70f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22e714:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22e719:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e71e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  22e723:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e728:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22e72f:	00 
  22e730:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e735:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22e73a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  22e73f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  22e743:	88 11                	mov    %dl,(%rcx)
  22e745:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e74a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22e74e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22e753:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22e757:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e75c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22e760:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22e765:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  22e769:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22e770:	c3                   	retq   
  22e771:	cc                   	int3   
  22e772:	cc                   	int3   
  22e773:	cc                   	int3   
  22e774:	cc                   	int3   
  22e775:	cc                   	int3   
  22e776:	cc                   	int3   
  22e777:	cc                   	int3   
  22e778:	cc                   	int3   
  22e779:	cc                   	int3   
  22e77a:	cc                   	int3   
  22e77b:	cc                   	int3   
  22e77c:	cc                   	int3   
  22e77d:	cc                   	int3   
  22e77e:	cc                   	int3   
  22e77f:	cc                   	int3   

000000000022e780 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hd79f873b25981983E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22e780:	48 81 ec 48 18 00 00 	sub    $0x1848,%rsp
  22e787:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22e78c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e791:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22e796:	31 ff                	xor    %edi,%edi
  22e798:	e8 53 c8 ff ff       	callq  22aff0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22e79d:	88 84 24 3f 10 00 00 	mov    %al,0x103f(%rsp)
  22e7a4:	8a 84 24 3f 10 00 00 	mov    0x103f(%rsp),%al
  22e7ab:	88 44 24 20          	mov    %al,0x20(%rsp)
  22e7af:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22e7b4:	48 8d bc 24 30 08 00 	lea    0x830(%rsp),%rdi
  22e7bb:	00 
  22e7bc:	ba 08 08 00 00       	mov    $0x808,%edx
  22e7c1:	e8 2a a5 00 00       	callq  238cf0 <memcpy>
  22e7c6:	48 8d bc 24 40 10 00 	lea    0x1040(%rsp),%rdi
  22e7cd:	00 
  22e7ce:	48 8d b4 24 30 08 00 	lea    0x830(%rsp),%rsi
  22e7d5:	00 
  22e7d6:	ba 08 08 00 00       	mov    $0x808,%edx
  22e7db:	e8 10 a5 00 00       	callq  238cf0 <memcpy>
  22e7e0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22e7e5:	48 8d b4 24 40 10 00 	lea    0x1040(%rsp),%rsi
  22e7ec:	00 
  22e7ed:	ba 08 08 00 00       	mov    $0x808,%edx
  22e7f2:	e8 f9 a4 00 00       	callq  238cf0 <memcpy>
  22e7f7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22e7fc:	8a 44 24 20          	mov    0x20(%rsp),%al
  22e800:	88 07                	mov    %al,(%rdi)
  22e802:	48 83 c7 08          	add    $0x8,%rdi
  22e806:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22e80b:	ba 08 08 00 00       	mov    $0x808,%edx
  22e810:	e8 db a4 00 00       	callq  238cf0 <memcpy>
  22e815:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22e81a:	48 81 c4 48 18 00 00 	add    $0x1848,%rsp
  22e821:	c3                   	retq   
  22e822:	cc                   	int3   
  22e823:	cc                   	int3   
  22e824:	cc                   	int3   
  22e825:	cc                   	int3   
  22e826:	cc                   	int3   
  22e827:	cc                   	int3   
  22e828:	cc                   	int3   
  22e829:	cc                   	int3   
  22e82a:	cc                   	int3   
  22e82b:	cc                   	int3   
  22e82c:	cc                   	int3   
  22e82d:	cc                   	int3   
  22e82e:	cc                   	int3   
  22e82f:	cc                   	int3   

000000000022e830 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>:
    pub fn lock(&self) -> MutexGuard<T>
  22e830:	48 83 ec 38          	sub    $0x38,%rsp
  22e834:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e839:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e83e:	e8 dd f2 ff ff       	callq  22db20 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE>
  22e843:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e848:	48 89 c1             	mov    %rax,%rcx
  22e84b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e84f:	48 83 c0 08          	add    $0x8,%rax
  22e853:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e858:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e85d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e862:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e866:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e86b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22e870:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e875:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e87a:	48 83 c4 38          	add    $0x38,%rsp
  22e87e:	c3                   	retq   
  22e87f:	cc                   	int3   

000000000022e880 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h31f10766e1811e6aE>:
    pub fn lock(&self) -> MutexGuard<T>
  22e880:	48 83 ec 38          	sub    $0x38,%rsp
  22e884:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e889:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e88e:	e8 fd f2 ff ff       	callq  22db90 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E>
  22e893:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e898:	48 89 c1             	mov    %rax,%rcx
  22e89b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e89f:	48 83 c0 08          	add    $0x8,%rax
  22e8a3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e8a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e8ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e8b2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e8b6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e8bb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22e8c0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e8c5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e8ca:	48 83 c4 38          	add    $0x38,%rsp
  22e8ce:	c3                   	retq   
  22e8cf:	cc                   	int3   

000000000022e8d0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>:
    pub fn lock(&self) -> MutexGuard<T>
  22e8d0:	48 83 ec 38          	sub    $0x38,%rsp
  22e8d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e8d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e8de:	e8 5d f1 ff ff       	callq  22da40 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E>
  22e8e3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e8e8:	48 89 c1             	mov    %rax,%rcx
  22e8eb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e8ef:	48 83 c0 08          	add    $0x8,%rax
  22e8f3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e8f8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e8fd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e902:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e906:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e90b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22e910:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e915:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e91a:	48 83 c4 38          	add    $0x38,%rsp
  22e91e:	c3                   	retq   
  22e91f:	cc                   	int3   

000000000022e920 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h46cb2ac63999c8e5E>:
    pub fn lock(&self) -> MutexGuard<T>
  22e920:	48 83 ec 38          	sub    $0x38,%rsp
  22e924:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e929:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e92e:	e8 9d f0 ff ff       	callq  22d9d0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h0209cf43ba2402d2E>
  22e933:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e938:	48 89 c1             	mov    %rax,%rcx
  22e93b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e93f:	48 83 c0 10          	add    $0x10,%rax
  22e943:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e948:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e94d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e952:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e956:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e95b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22e960:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e965:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e96a:	48 83 c4 38          	add    $0x38,%rsp
  22e96e:	c3                   	retq   
  22e96f:	cc                   	int3   

000000000022e970 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>:
    pub fn lock(&self) -> MutexGuard<T>
  22e970:	48 83 ec 38          	sub    $0x38,%rsp
  22e974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e979:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e97e:	e8 7d f2 ff ff       	callq  22dc00 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE>
  22e983:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e988:	48 89 c1             	mov    %rax,%rcx
  22e98b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e98f:	48 83 c0 08          	add    $0x8,%rax
  22e993:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e998:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e99d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e9a2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e9a6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e9ab:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22e9b0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22e9b5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22e9ba:	48 83 c4 38          	add    $0x38,%rsp
  22e9be:	c3                   	retq   
  22e9bf:	cc                   	int3   

000000000022e9c0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>:
    pub fn lock(&self) -> MutexGuard<T>
  22e9c0:	48 83 ec 38          	sub    $0x38,%rsp
  22e9c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22e9c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22e9ce:	e8 5d f4 ff ff       	callq  22de30 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E>
  22e9d3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22e9d8:	48 89 c1             	mov    %rax,%rcx
  22e9db:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22e9df:	48 83 c0 08          	add    $0x8,%rax
  22e9e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e9e8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e9ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22e9f2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22e9f6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22e9fb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22ea00:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ea05:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ea0a:	48 83 c4 38          	add    $0x38,%rsp
  22ea0e:	c3                   	retq   
  22ea0f:	cc                   	int3   

000000000022ea10 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h71ea9f300274983eE>:
    pub fn lock(&self) -> MutexGuard<T>
  22ea10:	48 83 ec 38          	sub    $0x38,%rsp
  22ea14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ea19:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22ea1e:	e8 7d f4 ff ff       	callq  22dea0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hee16e9df4f0db3acE>
  22ea23:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22ea28:	48 89 c1             	mov    %rax,%rcx
  22ea2b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22ea2f:	48 83 c0 08          	add    $0x8,%rax
  22ea33:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ea38:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ea3d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ea42:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22ea46:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22ea4b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22ea50:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ea55:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ea5a:	48 83 c4 38          	add    $0x38,%rsp
  22ea5e:	c3                   	retq   
  22ea5f:	cc                   	int3   

000000000022ea60 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h728df519dd9bcd16E>:
    pub fn lock(&self) -> MutexGuard<T>
  22ea60:	48 83 ec 38          	sub    $0x38,%rsp
  22ea64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ea69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22ea6e:	e8 dd f2 ff ff       	callq  22dd50 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE>
  22ea73:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22ea78:	48 89 c1             	mov    %rax,%rcx
  22ea7b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22ea7f:	48 83 c0 08          	add    $0x8,%rax
  22ea83:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ea88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ea8d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ea92:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22ea96:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22ea9b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22eaa0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22eaa5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22eaaa:	48 83 c4 38          	add    $0x38,%rsp
  22eaae:	c3                   	retq   
  22eaaf:	cc                   	int3   

000000000022eab0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h78b13a586f7972b5E>:
    pub fn lock(&self) -> MutexGuard<T>
  22eab0:	48 83 ec 38          	sub    $0x38,%rsp
  22eab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22eab9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22eabe:	e8 ed ef ff ff       	callq  22dab0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h291d85325adb54e6E>
  22eac3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22eac8:	48 89 c1             	mov    %rax,%rcx
  22eacb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22eacf:	48 83 c0 08          	add    $0x8,%rax
  22ead3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ead8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22eadd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22eae2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22eae6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22eaeb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22eaf0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22eaf5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22eafa:	48 83 c4 38          	add    $0x38,%rsp
  22eafe:	c3                   	retq   
  22eaff:	cc                   	int3   

000000000022eb00 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hb304b52f5116a261E>:
    pub fn lock(&self) -> MutexGuard<T>
  22eb00:	48 83 ec 38          	sub    $0x38,%rsp
  22eb04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22eb09:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22eb0e:	e8 5d f1 ff ff       	callq  22dc70 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E>
  22eb13:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22eb18:	48 89 c1             	mov    %rax,%rcx
  22eb1b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22eb1f:	48 83 c0 08          	add    $0x8,%rax
  22eb23:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22eb28:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22eb2d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22eb32:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22eb36:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22eb3b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22eb40:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22eb45:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22eb4a:	48 83 c4 38          	add    $0x38,%rsp
  22eb4e:	c3                   	retq   
  22eb4f:	cc                   	int3   

000000000022eb50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>:
    pub fn lock(&self) -> MutexGuard<T>
  22eb50:	48 83 ec 38          	sub    $0x38,%rsp
  22eb54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22eb59:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22eb5e:	e8 5d f2 ff ff       	callq  22ddc0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E>
  22eb63:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22eb68:	48 89 c1             	mov    %rax,%rcx
  22eb6b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22eb6f:	48 83 c0 08          	add    $0x8,%rax
  22eb73:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22eb78:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22eb7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22eb82:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22eb86:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22eb8b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22eb90:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22eb95:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22eb9a:	48 83 c4 38          	add    $0x38,%rsp
  22eb9e:	c3                   	retq   
  22eb9f:	cc                   	int3   

000000000022eba0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>:
    pub fn lock(&self) -> MutexGuard<T>
  22eba0:	48 83 ec 38          	sub    $0x38,%rsp
  22eba4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22eba9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22ebae:	e8 2d f1 ff ff       	callq  22dce0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E>
  22ebb3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22ebb8:	48 89 c1             	mov    %rax,%rcx
  22ebbb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22ebbf:	48 83 c0 08          	add    $0x8,%rax
  22ebc3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ebc8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ebcd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ebd2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22ebd6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22ebdb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22ebe0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ebe5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ebea:	48 83 c4 38          	add    $0x38,%rsp
  22ebee:	c3                   	retq   
  22ebef:	cc                   	int3   

000000000022ebf0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec73a184c5b52be1E>:
    pub fn lock(&self) -> MutexGuard<T>
  22ebf0:	48 83 ec 38          	sub    $0x38,%rsp
  22ebf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ebf9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22ebfe:	e8 0d f3 ff ff       	callq  22df10 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E>
  22ec03:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22ec08:	48 89 c1             	mov    %rax,%rcx
  22ec0b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22ec0f:	48 83 c0 08          	add    $0x8,%rax
  22ec13:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ec18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ec1d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ec22:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22ec26:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22ec2b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22ec30:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ec35:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ec3a:	48 83 c4 38          	add    $0x38,%rsp
  22ec3e:	c3                   	retq   
  22ec3f:	cc                   	int3   

000000000022ec40 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>:
    fn deref<'b>(&'b self) -> &'b T { &*self.data }
  22ec40:	50                   	push   %rax
  22ec41:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec45:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec49:	59                   	pop    %rcx
  22ec4a:	c3                   	retq   
  22ec4b:	cc                   	int3   
  22ec4c:	cc                   	int3   
  22ec4d:	cc                   	int3   
  22ec4e:	cc                   	int3   
  22ec4f:	cc                   	int3   

000000000022ec50 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3348492b3ac9aa02E>:
  22ec50:	50                   	push   %rax
  22ec51:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec55:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec59:	59                   	pop    %rcx
  22ec5a:	c3                   	retq   
  22ec5b:	cc                   	int3   
  22ec5c:	cc                   	int3   
  22ec5d:	cc                   	int3   
  22ec5e:	cc                   	int3   
  22ec5f:	cc                   	int3   

000000000022ec60 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>:
  22ec60:	50                   	push   %rax
  22ec61:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec65:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec69:	59                   	pop    %rcx
  22ec6a:	c3                   	retq   
  22ec6b:	cc                   	int3   
  22ec6c:	cc                   	int3   
  22ec6d:	cc                   	int3   
  22ec6e:	cc                   	int3   
  22ec6f:	cc                   	int3   

000000000022ec70 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>:
  22ec70:	50                   	push   %rax
  22ec71:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec75:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec79:	59                   	pop    %rcx
  22ec7a:	c3                   	retq   
  22ec7b:	cc                   	int3   
  22ec7c:	cc                   	int3   
  22ec7d:	cc                   	int3   
  22ec7e:	cc                   	int3   
  22ec7f:	cc                   	int3   

000000000022ec80 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>:
  22ec80:	50                   	push   %rax
  22ec81:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec85:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec89:	59                   	pop    %rcx
  22ec8a:	c3                   	retq   
  22ec8b:	cc                   	int3   
  22ec8c:	cc                   	int3   
  22ec8d:	cc                   	int3   
  22ec8e:	cc                   	int3   
  22ec8f:	cc                   	int3   

000000000022ec90 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha6ed20f075f12fd2E>:
  22ec90:	50                   	push   %rax
  22ec91:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec95:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ec99:	59                   	pop    %rcx
  22ec9a:	c3                   	retq   
  22ec9b:	cc                   	int3   
  22ec9c:	cc                   	int3   
  22ec9d:	cc                   	int3   
  22ec9e:	cc                   	int3   
  22ec9f:	cc                   	int3   

000000000022eca0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb39a6dc4401dd1b9E>:
  22eca0:	50                   	push   %rax
  22eca1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22eca5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22eca9:	59                   	pop    %rcx
  22ecaa:	c3                   	retq   
  22ecab:	cc                   	int3   
  22ecac:	cc                   	int3   
  22ecad:	cc                   	int3   
  22ecae:	cc                   	int3   
  22ecaf:	cc                   	int3   

000000000022ecb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd329ea8dd96b1bf9E>:
  22ecb0:	50                   	push   %rax
  22ecb1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ecb5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ecb9:	59                   	pop    %rcx
  22ecba:	c3                   	retq   
  22ecbb:	cc                   	int3   
  22ecbc:	cc                   	int3   
  22ecbd:	cc                   	int3   
  22ecbe:	cc                   	int3   
  22ecbf:	cc                   	int3   

000000000022ecc0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>:
  22ecc0:	50                   	push   %rax
  22ecc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ecc5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ecc9:	59                   	pop    %rcx
  22ecca:	c3                   	retq   
  22eccb:	cc                   	int3   
  22eccc:	cc                   	int3   
  22eccd:	cc                   	int3   
  22ecce:	cc                   	int3   
  22eccf:	cc                   	int3   

000000000022ecd0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h002f604e3334e323E>:
    fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
  22ecd0:	50                   	push   %rax
  22ecd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ecd5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ecd9:	59                   	pop    %rcx
  22ecda:	c3                   	retq   
  22ecdb:	cc                   	int3   
  22ecdc:	cc                   	int3   
  22ecdd:	cc                   	int3   
  22ecde:	cc                   	int3   
  22ecdf:	cc                   	int3   

000000000022ece0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776c179591dfdcE>:
  22ece0:	50                   	push   %rax
  22ece1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ece5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ece9:	59                   	pop    %rcx
  22ecea:	c3                   	retq   
  22eceb:	cc                   	int3   
  22ecec:	cc                   	int3   
  22eced:	cc                   	int3   
  22ecee:	cc                   	int3   
  22ecef:	cc                   	int3   

000000000022ecf0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h244ec967040ad6ccE>:
  22ecf0:	50                   	push   %rax
  22ecf1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ecf5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ecf9:	59                   	pop    %rcx
  22ecfa:	c3                   	retq   
  22ecfb:	cc                   	int3   
  22ecfc:	cc                   	int3   
  22ecfd:	cc                   	int3   
  22ecfe:	cc                   	int3   
  22ecff:	cc                   	int3   

000000000022ed00 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>:
  22ed00:	50                   	push   %rax
  22ed01:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ed05:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ed09:	59                   	pop    %rcx
  22ed0a:	c3                   	retq   
  22ed0b:	cc                   	int3   
  22ed0c:	cc                   	int3   
  22ed0d:	cc                   	int3   
  22ed0e:	cc                   	int3   
  22ed0f:	cc                   	int3   

000000000022ed10 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3ae5ac151c21364eE>:
  22ed10:	50                   	push   %rax
  22ed11:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ed15:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ed19:	59                   	pop    %rcx
  22ed1a:	c3                   	retq   
  22ed1b:	cc                   	int3   
  22ed1c:	cc                   	int3   
  22ed1d:	cc                   	int3   
  22ed1e:	cc                   	int3   
  22ed1f:	cc                   	int3   

000000000022ed20 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>:
  22ed20:	50                   	push   %rax
  22ed21:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ed25:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ed29:	59                   	pop    %rcx
  22ed2a:	c3                   	retq   
  22ed2b:	cc                   	int3   
  22ed2c:	cc                   	int3   
  22ed2d:	cc                   	int3   
  22ed2e:	cc                   	int3   
  22ed2f:	cc                   	int3   

000000000022ed30 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>:
  22ed30:	50                   	push   %rax
  22ed31:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ed35:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ed39:	59                   	pop    %rcx
  22ed3a:	c3                   	retq   
  22ed3b:	cc                   	int3   
  22ed3c:	cc                   	int3   
  22ed3d:	cc                   	int3   
  22ed3e:	cc                   	int3   
  22ed3f:	cc                   	int3   

000000000022ed40 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf4deabd02622e74dE>:
  22ed40:	50                   	push   %rax
  22ed41:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ed45:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22ed49:	59                   	pop    %rcx
  22ed4a:	c3                   	retq   
  22ed4b:	cc                   	int3   
  22ed4c:	cc                   	int3   
  22ed4d:	cc                   	int3   
  22ed4e:	cc                   	int3   
  22ed4f:	cc                   	int3   

000000000022ed50 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>:
    pub fn write_channel_0(&self, value: u8) {
  22ed50:	48 83 ec 38          	sub    $0x38,%rsp
  22ed54:	40 88 f0             	mov    %sil,%al
  22ed57:	88 44 24 17          	mov    %al,0x17(%rsp)
  22ed5b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22ed60:	88 44 24 37          	mov    %al,0x37(%rsp)
        self.channel_0.lock().write_u8(value);
  22ed64:	e8 57 fc ff ff       	callq  22e9c0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>
  22ed69:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22ed6e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ed73:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22ed78:	e8 f3 fe ff ff       	callq  22ec70 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>
  22ed7d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ed82:	8a 44 24 17          	mov    0x17(%rsp),%al
  22ed86:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22ed8b:	0f b6 f0             	movzbl %al,%esi
  22ed8e:	e8 3d a5 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  22ed93:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22ed98:	e8 23 d4 fd ff       	callq  20c1c0 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>
    }
  22ed9d:	48 83 c4 38          	add    $0x38,%rsp
  22eda1:	c3                   	retq   
  22eda2:	cc                   	int3   
  22eda3:	cc                   	int3   
  22eda4:	cc                   	int3   
  22eda5:	cc                   	int3   
  22eda6:	cc                   	int3   
  22eda7:	cc                   	int3   
  22eda8:	cc                   	int3   
  22eda9:	cc                   	int3   
  22edaa:	cc                   	int3   
  22edab:	cc                   	int3   
  22edac:	cc                   	int3   
  22edad:	cc                   	int3   
  22edae:	cc                   	int3   
  22edaf:	cc                   	int3   

000000000022edb0 <_ZN9r3_kernel3cpu3pit17PITCommandControl13write_command17h0decc7c4e0ef2021E>:
    pub fn write_command(&self, value: u8) {
  22edb0:	48 83 ec 38          	sub    $0x38,%rsp
  22edb4:	40 88 f0             	mov    %sil,%al
  22edb7:	88 44 24 17          	mov    %al,0x17(%rsp)
  22edbb:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22edc0:	88 44 24 37          	mov    %al,0x37(%rsp)
        self.command.lock().write_u8(value);
  22edc4:	48 83 c7 30          	add    $0x30,%rdi
  22edc8:	e8 f3 fb ff ff       	callq  22e9c0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>
  22edcd:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22edd2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22edd7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22eddc:	e8 8f fe ff ff       	callq  22ec70 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>
  22ede1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ede6:	8a 44 24 17          	mov    0x17(%rsp),%al
  22edea:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22edef:	0f b6 f0             	movzbl %al,%esi
  22edf2:	e8 d9 a4 fe ff       	callq  2192d0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  22edf7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22edfc:	e8 bf d3 fd ff       	callq  20c1c0 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>
    }
  22ee01:	48 83 c4 38          	add    $0x38,%rsp
  22ee05:	c3                   	retq   
  22ee06:	cc                   	int3   
  22ee07:	cc                   	int3   
  22ee08:	cc                   	int3   
  22ee09:	cc                   	int3   
  22ee0a:	cc                   	int3   
  22ee0b:	cc                   	int3   
  22ee0c:	cc                   	int3   
  22ee0d:	cc                   	int3   
  22ee0e:	cc                   	int3   
  22ee0f:	cc                   	int3   

000000000022ee10 <_ZN9r3_kernel3cpu3pit17PITCommandControl3new17hb4c1e4530fd4909aE>:
    pub fn new() -> PITCommandControl {
  22ee10:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22ee17:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22ee1c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
            channel_0: Mutex::new(Port::new(PIT_CMD_CHANNEL_0, false)),
  22ee21:	bf 40 00 00 00       	mov    $0x40,%edi
  22ee26:	31 f6                	xor    %esi,%esi
  22ee28:	e8 53 a4 fe ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22ee2d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ee32:	88 54 24 3f          	mov    %dl,0x3f(%rsp)
  22ee36:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22ee3b:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  22ee3f:	0f b6 d0             	movzbl %al,%edx
  22ee42:	83 e2 01             	and    $0x1,%edx
  22ee45:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22ee4a:	e8 e1 f3 ff ff       	callq  22e230 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
            channel_1: Mutex::new(Port::new(PIT_CMD_CHANNEL_2, false)),
  22ee4f:	bf 42 00 00 00       	mov    $0x42,%edi
  22ee54:	31 f6                	xor    %esi,%esi
  22ee56:	e8 25 a4 fe ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22ee5b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22ee60:	88 54 24 1f          	mov    %dl,0x1f(%rsp)
  22ee64:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22ee69:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22ee6d:	0f b6 d0             	movzbl %al,%edx
  22ee70:	83 e2 01             	and    $0x1,%edx
  22ee73:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22ee78:	e8 b3 f3 ff ff       	callq  22e230 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
            command: Mutex::new(Port::new(PIT_COMMAND_REGISTER, false)),
  22ee7d:	bf 43 00 00 00       	mov    $0x43,%edi
  22ee82:	31 f6                	xor    %esi,%esi
  22ee84:	e8 f7 a3 fe ff       	callq  219280 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22ee89:	48 89 04 24          	mov    %rax,(%rsp)
  22ee8d:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  22ee91:	48 8b 34 24          	mov    (%rsp),%rsi
  22ee95:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22ee99:	0f b6 d0             	movzbl %al,%edx
  22ee9c:	83 e2 01             	and    $0x1,%edx
  22ee9f:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22eea4:	e8 87 f3 ff ff       	callq  22e230 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
  22eea9:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22eeae:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        PITCommandControl {
  22eeb3:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22eeb8:	48 89 11             	mov    %rdx,(%rcx)
  22eebb:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  22eec0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22eec4:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  22eec9:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22eecd:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22eed2:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22eed6:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  22eedb:	48 89 51 20          	mov    %rdx,0x20(%rcx)
  22eedf:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  22eee4:	48 89 51 28          	mov    %rdx,0x28(%rcx)
  22eee8:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  22eeed:	48 89 51 30          	mov    %rdx,0x30(%rcx)
  22eef1:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  22eef6:	48 89 51 38          	mov    %rdx,0x38(%rcx)
  22eefa:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  22ef01:	00 
  22ef02:	48 89 51 40          	mov    %rdx,0x40(%rcx)
    }
  22ef06:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22ef0d:	c3                   	retq   
  22ef0e:	cc                   	int3   
  22ef0f:	cc                   	int3   

000000000022ef10 <_ZN9r3_kernel3cpu3pit4init17hf03d8e373d7c27d5E>:
pub fn init() -> PITCommandControl {
  22ef10:	50                   	push   %rax
  22ef11:	48 89 f8             	mov    %rdi,%rax
  22ef14:	48 89 04 24          	mov    %rax,(%rsp)
    let pit = PITCommandControl::new();
  22ef18:	e8 f3 fe ff ff       	callq  22ee10 <_ZN9r3_kernel3cpu3pit17PITCommandControl3new17hb4c1e4530fd4909aE>
  22ef1d:	48 8b 04 24          	mov    (%rsp),%rax
}
  22ef21:	59                   	pop    %rcx
  22ef22:	c3                   	retq   
  22ef23:	cc                   	int3   
  22ef24:	cc                   	int3   
  22ef25:	cc                   	int3   
  22ef26:	cc                   	int3   
  22ef27:	cc                   	int3   
  22ef28:	cc                   	int3   
  22ef29:	cc                   	int3   
  22ef2a:	cc                   	int3   
  22ef2b:	cc                   	int3   
  22ef2c:	cc                   	int3   
  22ef2d:	cc                   	int3   
  22ef2e:	cc                   	int3   
  22ef2f:	cc                   	int3   

000000000022ef30 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E>:
}

static PIT_TICKS: AtomicUsize = AtomicUsize::new(0);

fn setup_timer(frequency: u32) -> u64 {
  22ef30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  22ef37:	89 7c 24 2c          	mov    %edi,0x2c(%rsp)
  22ef3b:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
    let pit: &PITCommandControl = &PIT;
  22ef42:	48 8d 3d 2a 49 fd ff 	lea    -0x2b6d6(%rip),%rdi        # 203873 <_ZN9r3_kernel3cpu3pit3PIT17h1f51a7dcf045f9f5E>
  22ef49:	e8 a2 03 00 00       	callq  22f2f0 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h727fb5f3479384ceE>
  22ef4e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ef53:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  22ef57:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22ef5c:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  22ef63:	00 
    let div = PIT_OSCILLATION_FREQUENCY / frequency;
  22ef64:	83 f8 00             	cmp    $0x0,%eax
  22ef67:	0f 94 c0             	sete   %al
  22ef6a:	a8 01                	test   $0x1,%al
  22ef6c:	75 1a                	jne    22ef88 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x58>
  22ef6e:	8b 4c 24 2c          	mov    0x2c(%rsp),%ecx
  22ef72:	b8 de 34 12 00       	mov    $0x1234de,%eax
  22ef77:	31 d2                	xor    %edx,%edx
  22ef79:	f7 f1                	div    %ecx
  22ef7b:	89 44 24 28          	mov    %eax,0x28(%rsp)
  22ef7f:	89 84 24 94 00 00 00 	mov    %eax,0x94(%rsp)

    if div > (u16::max_value() as u32) {
  22ef86:	eb 1a                	jmp    22efa2 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x72>
    let div = PIT_OSCILLATION_FREQUENCY / frequency;
  22ef88:	48 8d 3d 81 48 fd ff 	lea    -0x2b77f(%rip),%rdi        # 203810 <str.0>
  22ef8f:	48 8d 15 82 df 00 00 	lea    0xdf82(%rip),%rdx        # 23cf18 <memcmp+0x41d8>
  22ef96:	be 19 00 00 00       	mov    $0x19,%esi
  22ef9b:	e8 50 6c 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22efa0:	0f 0b                	ud2    
  22efa2:	8b 44 24 28          	mov    0x28(%rsp),%eax
    if div > (u16::max_value() as u32) {
  22efa6:	66 b9 ff ff          	mov    $0xffff,%cx
  22efaa:	0f b7 c9             	movzwl %cx,%ecx
  22efad:	39 c8                	cmp    %ecx,%eax
  22efaf:	77 11                	ja     22efc2 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x92>
  22efb1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            "The choosen PIT frequency should be atleast > {}",
            PIT_LEAST_FREQUENCY
        );
    }

    pit.write_command(0b00_11_010_0);
  22efb6:	be 34 00 00 00       	mov    $0x34,%esi
  22efbb:	e8 f0 fd ff ff       	callq  22edb0 <_ZN9r3_kernel3cpu3pit17PITCommandControl13write_command17h0decc7c4e0ef2021E>
  22efc0:	eb 75                	jmp    22f037 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x107>
        panic!(
  22efc2:	48 8d 05 f7 19 fd ff 	lea    -0x2e609(%rip),%rax        # 2009c0 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x28>
  22efc9:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22efce:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  22efd3:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22efda:	00 
  22efdb:	48 8b 35 d6 eb 00 00 	mov    0xebd6(%rip),%rsi        # 23dbb8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  22efe2:	e8 b9 00 fe ff       	callq  20f0a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  22efe7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22efec:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22eff1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22eff6:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22effb:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22f000:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22f005:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  22f00a:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22f00f:	48 8d 35 1a df 00 00 	lea    0xdf1a(%rip),%rsi        # 23cf30 <memcmp+0x41f0>
  22f016:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22f01c:	4c 89 c2             	mov    %r8,%rdx
  22f01f:	e8 0c 75 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22f024:	48 8d 35 15 df 00 00 	lea    0xdf15(%rip),%rsi        # 23cf40 <memcmp+0x4200>
  22f02b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22f030:	e8 8b 6c 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22f035:	0f 0b                	ud2    
  22f037:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22f03c:	8b 44 24 28          	mov    0x28(%rsp),%eax
    pit.write_channel_0(div as u8);
  22f040:	0f b6 f0             	movzbl %al,%esi
  22f043:	e8 08 fd ff ff       	callq  22ed50 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>
  22f048:	8b 44 24 28          	mov    0x28(%rsp),%eax
    pit.write_channel_0((div >> 8) as u8);
  22f04c:	c1 e8 08             	shr    $0x8,%eax
  22f04f:	89 44 24 14          	mov    %eax,0x14(%rsp)
  22f053:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22f058:	8b 44 24 14          	mov    0x14(%rsp),%eax
  22f05c:	0f b6 f0             	movzbl %al,%esi
  22f05f:	e8 ec fc ff ff       	callq  22ed50 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>
  22f064:	8b 44 24 28          	mov    0x28(%rsp),%eax

    let running_frequency = PIT_OSCILLATION_FREQUENCY / div;
  22f068:	83 f8 00             	cmp    $0x0,%eax
  22f06b:	0f 94 c0             	sete   %al
  22f06e:	a8 01                	test   $0x1,%al
  22f070:	75 28                	jne    22f09a <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x16a>
  22f072:	8b 4c 24 28          	mov    0x28(%rsp),%ecx
  22f076:	b8 de 34 12 00       	mov    $0x1234de,%eax
  22f07b:	31 d2                	xor    %edx,%edx
  22f07d:	f7 f1                	div    %ecx
  22f07f:	89 84 24 a4 00 00 00 	mov    %eax,0xa4(%rsp)

    // 1 ns
    return 1000000000 / (running_frequency as u64);
  22f086:	89 c0                	mov    %eax,%eax
  22f088:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f08d:	48 83 f8 00          	cmp    $0x0,%rax
  22f091:	0f 94 c0             	sete   %al
  22f094:	a8 01                	test   $0x1,%al
  22f096:	75 33                	jne    22f0cb <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x19b>
  22f098:	eb 1a                	jmp    22f0b4 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x184>
    let running_frequency = PIT_OSCILLATION_FREQUENCY / div;
  22f09a:	48 8d 3d 6f 47 fd ff 	lea    -0x2b891(%rip),%rdi        # 203810 <str.0>
  22f0a1:	48 8d 15 b0 de 00 00 	lea    0xdeb0(%rip),%rdx        # 23cf58 <memcmp+0x4218>
  22f0a8:	be 19 00 00 00       	mov    $0x19,%esi
  22f0ad:	e8 3e 6b 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f0b2:	0f 0b                	ud2    
  22f0b4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    return 1000000000 / (running_frequency as u64);
  22f0b9:	b8 00 ca 9a 3b       	mov    $0x3b9aca00,%eax
  22f0be:	31 d2                	xor    %edx,%edx
  22f0c0:	48 f7 f1             	div    %rcx
}
  22f0c3:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  22f0ca:	c3                   	retq   
    return 1000000000 / (running_frequency as u64);
  22f0cb:	48 8d 3d 3e 47 fd ff 	lea    -0x2b8c2(%rip),%rdi        # 203810 <str.0>
  22f0d2:	48 8d 15 97 de 00 00 	lea    0xde97(%rip),%rdx        # 23cf70 <memcmp+0x4230>
  22f0d9:	be 19 00 00 00       	mov    $0x19,%esi
  22f0de:	e8 0d 6b 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f0e3:	0f 0b                	ud2    
  22f0e5:	cc                   	int3   
  22f0e6:	cc                   	int3   
  22f0e7:	cc                   	int3   
  22f0e8:	cc                   	int3   
  22f0e9:	cc                   	int3   
  22f0ea:	cc                   	int3   
  22f0eb:	cc                   	int3   
  22f0ec:	cc                   	int3   
  22f0ed:	cc                   	int3   
  22f0ee:	cc                   	int3   
  22f0ef:	cc                   	int3   

000000000022f0f0 <_ZN9r3_kernel3cpu3pit12pit_callback17ha4008cf7d5ddd5c3E>:

#[inline]
pub fn pit_callback() {
  22f0f0:	50                   	push   %rax
    PIT_TICKS.fetch_add(1, Ordering::SeqCst);
  22f0f1:	c6 44 24 07 04       	movb   $0x4,0x7(%rsp)
  22f0f6:	48 8d 3d 53 68 01 00 	lea    0x16853(%rip),%rdi        # 245950 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22f0fd:	be 01 00 00 00       	mov    $0x1,%esi
  22f102:	0f b6 54 24 07       	movzbl 0x7(%rsp),%edx
  22f107:	e8 64 c1 ff ff       	callq  22b270 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6ef004abf18267a1E>
}
  22f10c:	58                   	pop    %rax
  22f10d:	c3                   	retq   
  22f10e:	cc                   	int3   
  22f10f:	cc                   	int3   

000000000022f110 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E>:

pub fn sleep_ns(ns: u64) {
  22f110:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  22f117:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22f11c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  22f123:	00 
    PIT_TICKS.store(0, Ordering::SeqCst);
  22f124:	c6 44 24 3f 04       	movb   $0x4,0x3f(%rsp)
  22f129:	48 8d 3d 20 68 01 00 	lea    0x16820(%rip),%rdi        # 245950 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22f130:	31 c0                	xor    %eax,%eax
  22f132:	89 c6                	mov    %eax,%esi
  22f134:	0f b6 54 24 3f       	movzbl 0x3f(%rsp),%edx
  22f139:	e8 f2 c0 ff ff       	callq  22b230 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>

    // set with 1000hz initially
    let ns_in_tick = setup_timer(1000);
  22f13e:	bf e8 03 00 00       	mov    $0x3e8,%edi
  22f143:	e8 e8 fd ff ff       	callq  22ef30 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E>
  22f148:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22f14d:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22f154:	00 
  22f155:	48 8b 44 24 28       	mov    0x28(%rsp),%rax

    let n_ticks = (ns / ns_in_tick) as usize;
  22f15a:	48 83 f8 00          	cmp    $0x0,%rax
  22f15e:	0f 94 c0             	sete   %al
  22f161:	a8 01                	test   $0x1,%al
  22f163:	75 34                	jne    22f199 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x89>
  22f165:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f16a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22f16f:	31 d2                	xor    %edx,%edx
  22f171:	48 f7 f1             	div    %rcx
  22f174:	48 89 44 24 40       	mov    %rax,0x40(%rsp)

    log::debug!("n_ticks: {}", n_ticks);
  22f179:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  22f180:	00 00 
  22f182:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22f187:	48 8d 35 6a 11 fd ff 	lea    -0x2ee96(%rip),%rsi        # 2002f8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x7e>
  22f18e:	e8 3d 3e fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22f193:	88 44 24 27          	mov    %al,0x27(%rsp)
  22f197:	eb 1a                	jmp    22f1b3 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xa3>
    let n_ticks = (ns / ns_in_tick) as usize;
  22f199:	48 8d 3d 70 46 fd ff 	lea    -0x2b990(%rip),%rdi        # 203810 <str.0>
  22f1a0:	48 8d 15 e1 dd 00 00 	lea    0xdde1(%rip),%rdx        # 23cf88 <memcmp+0x4248>
  22f1a7:	be 19 00 00 00       	mov    $0x19,%esi
  22f1ac:	e8 3f 6a 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f1b1:	0f 0b                	ud2    
  22f1b3:	8a 44 24 27          	mov    0x27(%rsp),%al
    log::debug!("n_ticks: {}", n_ticks);
  22f1b7:	a8 01                	test   $0x1,%al
  22f1b9:	75 09                	jne    22f1c4 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xb4>
  22f1bb:	eb 00                	jmp    22f1bd <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xad>
  22f1bd:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22f1c2:	eb 4e                	jmp    22f212 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x102>
  22f1c4:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  22f1cb:	00 
  22f1cc:	48 8b 3d 75 e9 00 00 	mov    0xe975(%rip),%rdi        # 23db48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22f1d3:	0f b6 b4 24 cf 00 00 	movzbl 0xcf(%rsp),%esi
  22f1da:	00 
  22f1db:	e8 10 c0 ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22f1e0:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22f1e7:	00 
  22f1e8:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22f1ef:	00 
  22f1f0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22f1f5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22f1fa:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  22f1ff:	e8 cc 3d fe ff       	callq  212fd0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22f204:	88 44 24 26          	mov    %al,0x26(%rsp)
  22f208:	8a 44 24 26          	mov    0x26(%rsp),%al
  22f20c:	24 01                	and    $0x1,%al
  22f20e:	88 44 24 57          	mov    %al,0x57(%rsp)
  22f212:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22f217:	75 06                	jne    22f21f <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x10f>

    unsafe {
        asm!("sti");
  22f219:	fb                   	sti    
  22f21a:	e9 8a 00 00 00       	jmpq   22f2a9 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x199>
    log::debug!("n_ticks: {}", n_ticks);
  22f21f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  22f224:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22f22b:	00 
  22f22c:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  22f233:	00 
  22f234:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  22f23b:	00 
  22f23c:	48 8b 35 1d e9 00 00 	mov    0xe91d(%rip),%rsi        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22f243:	e8 38 03 fe ff       	callq  20f580 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  22f248:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f24d:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22f252:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f257:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22f25c:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  22f263:	00 
  22f264:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22f26b:	00 
  22f26c:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  22f273:	00 
  22f274:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22f279:	48 8d 35 20 dd 00 00 	lea    0xdd20(%rip),%rsi        # 23cfa0 <memcmp+0x4260>
  22f280:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22f286:	4c 89 c2             	mov    %r8,%rdx
  22f289:	e8 a2 72 fd ff       	callq  206530 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22f28e:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  22f293:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22f298:	48 8d 15 11 dd 00 00 	lea    0xdd11(%rip),%rdx        # 23cfb0 <memcmp+0x4270>
  22f29f:	e8 dc 3a 00 00       	callq  232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22f2a4:	e9 70 ff ff ff       	jmpq   22f219 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x109>
        while PIT_TICKS.load(Ordering::SeqCst) < n_ticks {
  22f2a9:	c6 84 24 af 00 00 00 	movb   $0x4,0xaf(%rsp)
  22f2b0:	04 
  22f2b1:	48 8d 3d 98 66 01 00 	lea    0x16698(%rip),%rdi        # 245950 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22f2b8:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  22f2bf:	00 
  22f2c0:	e8 2b bf ff ff       	callq  22b1f0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22f2c5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f2ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f2cf:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  22f2d4:	72 03                	jb     22f2d9 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x1c9>
            asm!("hlt");
        }

        asm!("cli");
  22f2d6:	fa                   	cli    
  22f2d7:	eb 03                	jmp    22f2dc <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x1cc>
            asm!("hlt");
  22f2d9:	f4                   	hlt    
  22f2da:	eb cd                	jmp    22f2a9 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x199>
    }
}
  22f2dc:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  22f2e3:	c3                   	retq   
  22f2e4:	cc                   	int3   
  22f2e5:	cc                   	int3   
  22f2e6:	cc                   	int3   
  22f2e7:	cc                   	int3   
  22f2e8:	cc                   	int3   
  22f2e9:	cc                   	int3   
  22f2ea:	cc                   	int3   
  22f2eb:	cc                   	int3   
  22f2ec:	cc                   	int3   
  22f2ed:	cc                   	int3   
  22f2ee:	cc                   	int3   
  22f2ef:	cc                   	int3   

000000000022f2f0 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h727fb5f3479384ceE>:
            fn deref(&self) -> &$T {
  22f2f0:	48 83 ec 18          	sub    $0x18,%rsp
  22f2f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f2f9:	48 8d 05 58 66 01 00 	lea    0x16658(%rip),%rax        # 245958 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h653ac4e4ec9d5be3E>
  22f300:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f305:	48 8d 3d 4c 66 01 00 	lea    0x1664c(%rip),%rdi        # 245958 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h653ac4e4ec9d5be3E>
  22f30c:	e8 5f aa fd ff       	callq  209d70 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E>
  22f311:	48 89 04 24          	mov    %rax,(%rsp)
  22f315:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22f319:	48 83 c4 18          	add    $0x18,%rsp
  22f31d:	c3                   	retq   
  22f31e:	cc                   	int3   
  22f31f:	cc                   	int3   

000000000022f320 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl PartialEq for str {
    #[inline]
    fn eq(&self, other: &str) -> bool {
  22f320:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  22f327:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22f32c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22f331:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22f336:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22f33b:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  22f340:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22f345:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  22f34a:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  22f351:	00 
  22f352:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  22f359:	00 
  22f35a:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  22f361:	00 
  22f362:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22f369:	00 
  22f36a:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  22f371:	00 
        self.as_bytes() == other.as_bytes()
  22f372:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  22f377:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f37c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f381:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22f386:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22f38b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22f390:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22f395:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22f39a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22f39f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22f3a4:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22f3a9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22f3ae:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22f3b3:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22f3b8:	e8 f3 bf ff ff       	callq  22b3b0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h4059f29c83e0e679E>
  22f3bd:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f3c1:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22f3c5:	24 01                	and    $0x1,%al
  22f3c7:	0f b6 c0             	movzbl %al,%eax
  22f3ca:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  22f3d1:	c3                   	retq   
  22f3d2:	cc                   	int3   
  22f3d3:	cc                   	int3   
  22f3d4:	cc                   	int3   
  22f3d5:	cc                   	int3   
  22f3d6:	cc                   	int3   
  22f3d7:	cc                   	int3   
  22f3d8:	cc                   	int3   
  22f3d9:	cc                   	int3   
  22f3da:	cc                   	int3   
  22f3db:	cc                   	int3   
  22f3dc:	cc                   	int3   
  22f3dd:	cc                   	int3   
  22f3de:	cc                   	int3   
  22f3df:	cc                   	int3   

000000000022f3e0 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2ne17he788fbf8f176b944E>:
    #[inline]
    fn ne(&self, other: &str) -> bool {
  22f3e0:	48 83 ec 28          	sub    $0x28,%rsp
  22f3e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f3e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22f3ee:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22f3f3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
        !(*self).eq(other)
  22f3f8:	e8 23 ff ff ff       	callq  22f320 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>
  22f3fd:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f401:	8a 44 24 07          	mov    0x7(%rsp),%al
  22f405:	34 ff                	xor    $0xff,%al
    }
  22f407:	24 01                	and    $0x1,%al
  22f409:	0f b6 c0             	movzbl %al,%eax
  22f40c:	48 83 c4 28          	add    $0x28,%rsp
  22f410:	c3                   	retq   
  22f411:	cc                   	int3   
  22f412:	cc                   	int3   
  22f413:	cc                   	int3   
  22f414:	cc                   	int3   
  22f415:	cc                   	int3   
  22f416:	cc                   	int3   
  22f417:	cc                   	int3   
  22f418:	cc                   	int3   
  22f419:	cc                   	int3   
  22f41a:	cc                   	int3   
  22f41b:	cc                   	int3   
  22f41c:	cc                   	int3   
  22f41d:	cc                   	int3   
  22f41e:	cc                   	int3   
  22f41f:	cc                   	int3   

000000000022f420 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h8428de84206d5ca3E>:

macro_rules! integer_sum_product {
    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(
        #[$attr]
        impl Sum for $a {
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
  22f420:	48 83 ec 18          	sub    $0x18,%rsp
  22f424:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f429:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                iter.fold(
  22f42e:	31 c0                	xor    %eax,%eax
  22f430:	89 c2                	mov    %eax,%edx
  22f432:	e8 19 2b fe ff       	callq  211f50 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc18e36f70da5f5c7E>
  22f437:	48 89 04 24          	mov    %rax,(%rsp)
  22f43b:	48 8b 04 24          	mov    (%rsp),%rax
                    $zero,
                    #[rustc_inherit_overflow_checks]
                    |a, b| a + b,
                )
            }
  22f43f:	48 83 c4 18          	add    $0x18,%rsp
  22f443:	c3                   	retq   
  22f444:	cc                   	int3   
  22f445:	cc                   	int3   
  22f446:	cc                   	int3   
  22f447:	cc                   	int3   
  22f448:	cc                   	int3   
  22f449:	cc                   	int3   
  22f44a:	cc                   	int3   
  22f44b:	cc                   	int3   
  22f44c:	cc                   	int3   
  22f44d:	cc                   	int3   
  22f44e:	cc                   	int3   
  22f44f:	cc                   	int3   

000000000022f450 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h94087771308e1a59E>:
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
  22f450:	48 83 ec 18          	sub    $0x18,%rsp
  22f454:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f459:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                iter.fold(
  22f45e:	31 c0                	xor    %eax,%eax
  22f460:	89 c2                	mov    %eax,%edx
  22f462:	e8 39 2b fe ff       	callq  211fa0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hd5e1626c4c81dd16E>
  22f467:	48 89 04 24          	mov    %rax,(%rsp)
  22f46b:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22f46f:	48 83 c4 18          	add    $0x18,%rsp
  22f473:	c3                   	retq   
  22f474:	cc                   	int3   
  22f475:	cc                   	int3   
  22f476:	cc                   	int3   
  22f477:	cc                   	int3   
  22f478:	cc                   	int3   
  22f479:	cc                   	int3   
  22f47a:	cc                   	int3   
  22f47b:	cc                   	int3   
  22f47c:	cc                   	int3   
  22f47d:	cc                   	int3   
  22f47e:	cc                   	int3   
  22f47f:	cc                   	int3   

000000000022f480 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E>:
                    |a, b| a + b,
  22f480:	48 83 ec 28          	sub    $0x28,%rsp
  22f484:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f489:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22f48e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22f493:	48 01 d6             	add    %rdx,%rsi
  22f496:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22f49b:	0f 92 c0             	setb   %al
  22f49e:	a8 01                	test   $0x1,%al
  22f4a0:	75 0a                	jne    22f4ac <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E+0x2c>
  22f4a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f4a7:	48 83 c4 28          	add    $0x28,%rsp
  22f4ab:	c3                   	retq   
  22f4ac:	48 8d 3d 4d 44 fd ff 	lea    -0x2bbb3(%rip),%rdi        # 203900 <str.0>
  22f4b3:	48 8d 15 2e db 00 00 	lea    0xdb2e(%rip),%rdx        # 23cfe8 <memcmp+0x42a8>
  22f4ba:	be 1c 00 00 00       	mov    $0x1c,%esi
  22f4bf:	e8 2c 67 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f4c4:	0f 0b                	ud2    
  22f4c6:	cc                   	int3   
  22f4c7:	cc                   	int3   
  22f4c8:	cc                   	int3   
  22f4c9:	cc                   	int3   
  22f4ca:	cc                   	int3   
  22f4cb:	cc                   	int3   
  22f4cc:	cc                   	int3   
  22f4cd:	cc                   	int3   
  22f4ce:	cc                   	int3   
  22f4cf:	cc                   	int3   

000000000022f4d0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E>:
  22f4d0:	48 83 ec 28          	sub    $0x28,%rsp
  22f4d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f4d9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22f4de:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22f4e3:	48 01 d6             	add    %rdx,%rsi
  22f4e6:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22f4eb:	0f 92 c0             	setb   %al
  22f4ee:	a8 01                	test   $0x1,%al
  22f4f0:	75 0a                	jne    22f4fc <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E+0x2c>
  22f4f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f4f7:	48 83 c4 28          	add    $0x28,%rsp
  22f4fb:	c3                   	retq   
  22f4fc:	48 8d 3d fd 43 fd ff 	lea    -0x2bc03(%rip),%rdi        # 203900 <str.0>
  22f503:	48 8d 15 de da 00 00 	lea    0xdade(%rip),%rdx        # 23cfe8 <memcmp+0x42a8>
  22f50a:	be 1c 00 00 00       	mov    $0x1c,%esi
  22f50f:	e8 dc 66 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f514:	0f 0b                	ud2    
  22f516:	cc                   	int3   
  22f517:	cc                   	int3   
  22f518:	cc                   	int3   
  22f519:	cc                   	int3   
  22f51a:	cc                   	int3   
  22f51b:	cc                   	int3   
  22f51c:	cc                   	int3   
  22f51d:	cc                   	int3   
  22f51e:	cc                   	int3   
  22f51f:	cc                   	int3   

000000000022f520 <__rust_alloc>:
  22f520:	e9 9b d9 ff ff       	jmpq   22cec0 <__rg_alloc>
  22f525:	cc                   	int3   
  22f526:	cc                   	int3   
  22f527:	cc                   	int3   
  22f528:	cc                   	int3   
  22f529:	cc                   	int3   
  22f52a:	cc                   	int3   
  22f52b:	cc                   	int3   
  22f52c:	cc                   	int3   
  22f52d:	cc                   	int3   
  22f52e:	cc                   	int3   
  22f52f:	cc                   	int3   

000000000022f530 <__rust_dealloc>:
  22f530:	e9 cb d9 ff ff       	jmpq   22cf00 <__rg_dealloc>
  22f535:	cc                   	int3   
  22f536:	cc                   	int3   
  22f537:	cc                   	int3   
  22f538:	cc                   	int3   
  22f539:	cc                   	int3   
  22f53a:	cc                   	int3   
  22f53b:	cc                   	int3   
  22f53c:	cc                   	int3   
  22f53d:	cc                   	int3   
  22f53e:	cc                   	int3   
  22f53f:	cc                   	int3   

000000000022f540 <__rust_realloc>:
  22f540:	e9 2b da ff ff       	jmpq   22cf70 <__rg_realloc>
  22f545:	cc                   	int3   
  22f546:	cc                   	int3   
  22f547:	cc                   	int3   
  22f548:	cc                   	int3   
  22f549:	cc                   	int3   
  22f54a:	cc                   	int3   
  22f54b:	cc                   	int3   
  22f54c:	cc                   	int3   
  22f54d:	cc                   	int3   
  22f54e:	cc                   	int3   
  22f54f:	cc                   	int3   

000000000022f550 <__rust_alloc_zeroed>:
  22f550:	e9 9b da ff ff       	jmpq   22cff0 <__rg_alloc_zeroed>
  22f555:	cc                   	int3   
  22f556:	cc                   	int3   
  22f557:	cc                   	int3   
  22f558:	cc                   	int3   
  22f559:	cc                   	int3   
  22f55a:	cc                   	int3   
  22f55b:	cc                   	int3   
  22f55c:	cc                   	int3   
  22f55d:	cc                   	int3   
  22f55e:	cc                   	int3   
  22f55f:	cc                   	int3   

000000000022f560 <__rust_alloc_error_handler>:
  22f560:	e9 7b 31 00 00       	jmpq   2326e0 <__rg_oom>
  22f565:	cc                   	int3   
  22f566:	cc                   	int3   
  22f567:	cc                   	int3   
  22f568:	cc                   	int3   
  22f569:	cc                   	int3   
  22f56a:	cc                   	int3   
  22f56b:	cc                   	int3   
  22f56c:	cc                   	int3   
  22f56d:	cc                   	int3   
  22f56e:	cc                   	int3   
  22f56f:	cc                   	int3   

000000000022f570 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E>:
    pub fn ok(self) -> Option<T> {
  22f570:	48 83 ec 18          	sub    $0x18,%rsp
  22f574:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  22f578:	48 8b 04 24          	mov    (%rsp),%rax
  22f57c:	48 85 c0             	test   %rax,%rax
  22f57f:	0f 94 c0             	sete   %al
  22f582:	0f b6 c0             	movzbl %al,%eax
  22f585:	75 06                	jne    22f58d <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x1d>
  22f587:	eb 00                	jmp    22f589 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x19>
  22f589:	eb 12                	jmp    22f59d <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x2d>
  22f58b:	0f 0b                	ud2    
            Ok(x) => Some(x),
  22f58d:	48 8b 04 24          	mov    (%rsp),%rax
  22f591:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f596:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  22f59b:	eb 09                	jmp    22f5a6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x36>
            Err(_) => None,
  22f59d:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  22f5a4:	00 00 
    }
  22f5a6:	31 c0                	xor    %eax,%eax
  22f5a8:	b9 01 00 00 00       	mov    $0x1,%ecx
  22f5ad:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  22f5b2:	48 0f 44 c1          	cmove  %rcx,%rax
  22f5b6:	48 83 f8 00          	cmp    $0x0,%rax
  22f5ba:	75 0a                	jne    22f5c6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x56>
  22f5bc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f5c1:	48 83 c4 18          	add    $0x18,%rsp
  22f5c5:	c3                   	retq   
  22f5c6:	eb f4                	jmp    22f5bc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x4c>
  22f5c8:	cc                   	int3   
  22f5c9:	cc                   	int3   
  22f5ca:	cc                   	int3   
  22f5cb:	cc                   	int3   
  22f5cc:	cc                   	int3   
  22f5cd:	cc                   	int3   
  22f5ce:	cc                   	int3   
  22f5cf:	cc                   	int3   

000000000022f5d0 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
  22f5d0:	48 83 ec 78          	sub    $0x78,%rsp
  22f5d4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22f5d9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22f5de:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22f5e3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22f5e8:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
        match self {
  22f5ed:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22f5f2:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
  22f5f7:	48 8b 06             	mov    (%rsi),%rax
  22f5fa:	48 85 c0             	test   %rax,%rax
  22f5fd:	74 06                	je     22f605 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x35>
  22f5ff:	eb 00                	jmp    22f601 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x31>
  22f601:	eb 43                	jmp    22f646 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x76>
  22f603:	0f 0b                	ud2    
  22f605:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22f60a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Ok(t) => Ok(op(t)),
  22f60f:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22f613:	48 8b 40 10          	mov    0x10(%rax),%rax
  22f617:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22f61c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22f621:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22f626:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22f62b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22f630:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22f635:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  22f63a:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22f63f:	e8 6c 05 00 00       	callq  22fbb0 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h010dcb6ff1c3dcffE>
  22f644:	eb 15                	jmp    22f65b <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x8b>
  22f646:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Err(e) => Err(e),
  22f64b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  22f652:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22f657:	75 2d                	jne    22f686 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xb6>
  22f659:	eb 21                	jmp    22f67c <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xac>
  22f65b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Ok(t) => Ok(op(t)),
  22f660:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f665:	48 89 08             	mov    %rcx,(%rax)
  22f668:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22f66d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  22f671:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22f676:	48 89 48 10          	mov    %rcx,0x10(%rax)
  22f67a:	eb d6                	jmp    22f652 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x82>
  22f67c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  22f681:	48 83 c4 78          	add    $0x78,%rsp
  22f685:	c3                   	retq   
  22f686:	eb f4                	jmp    22f67c <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xac>
  22f688:	cc                   	int3   
  22f689:	cc                   	int3   
  22f68a:	cc                   	int3   
  22f68b:	cc                   	int3   
  22f68c:	cc                   	int3   
  22f68d:	cc                   	int3   
  22f68e:	cc                   	int3   
  22f68f:	cc                   	int3   

000000000022f690 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>:
    pub fn unwrap(self) -> T {
  22f690:	48 83 ec 38          	sub    $0x38,%rsp
  22f694:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22f699:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f69e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  22f6a3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f6a8:	48 85 c0             	test   %rax,%rax
  22f6ab:	0f 94 c0             	sete   %al
  22f6ae:	0f b6 c0             	movzbl %al,%eax
  22f6b1:	75 06                	jne    22f6b9 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x29>
  22f6b3:	eb 00                	jmp    22f6b5 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x25>
  22f6b5:	eb 1b                	jmp    22f6d2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x42>
  22f6b7:	0f 0b                	ud2    
            Ok(t) => t,
  22f6b9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f6be:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  22f6c3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22f6c8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    }
  22f6cd:	48 83 c4 38          	add    $0x38,%rsp
  22f6d1:	c3                   	retq   
  22f6d2:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  22f6d7:	48 8d 3d 3e 42 fd ff 	lea    -0x2bdc2(%rip),%rdi        # 20391c <str.0+0x1c>
  22f6de:	48 8d 0d 1b d9 00 00 	lea    0xd91b(%rip),%rcx        # 23d000 <memcmp+0x42c0>
  22f6e5:	be 2b 00 00 00       	mov    $0x2b,%esi
  22f6ea:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
  22f6ef:	e8 2c 59 00 00       	callq  235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  22f6f4:	0f 0b                	ud2    
  22f6f6:	cc                   	int3   
  22f6f7:	cc                   	int3   
  22f6f8:	cc                   	int3   
  22f6f9:	cc                   	int3   
  22f6fa:	cc                   	int3   
  22f6fb:	cc                   	int3   
  22f6fc:	cc                   	int3   
  22f6fd:	cc                   	int3   
  22f6fe:	cc                   	int3   
  22f6ff:	cc                   	int3   

000000000022f700 <_ZN21linked_list_allocator4Heap4init17h76f7245f25ee4edfE>:
    ///
    /// # Unsafety
    ///
    /// This function must be called at most once and must only be used on an
    /// empty heap.
    pub unsafe fn init(&mut self, heap_bottom: usize, heap_size: usize) {
  22f700:	48 83 ec 48          	sub    $0x48,%rsp
  22f704:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22f709:	48 89 f0             	mov    %rsi,%rax
  22f70c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22f711:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f716:	48 89 f8             	mov    %rdi,%rax
  22f719:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22f71e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f723:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22f728:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22f72d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        self.bottom = heap_bottom;
  22f732:	48 89 38             	mov    %rdi,(%rax)
        self.size = heap_size;
  22f735:	48 89 70 08          	mov    %rsi,0x8(%rax)
        self.used = 0;
  22f739:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  22f740:	00 
        self.holes = HoleList::new(heap_bottom, heap_size);
  22f741:	e8 da 05 00 00       	callq  22fd20 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE>
  22f746:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22f74b:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22f750:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f755:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f75a:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22f75f:	48 89 50 18          	mov    %rdx,0x18(%rax)
  22f763:	48 89 48 20          	mov    %rcx,0x20(%rax)
    }
  22f767:	48 83 c4 48          	add    $0x48,%rsp
  22f76b:	c3                   	retq   
  22f76c:	cc                   	int3   
  22f76d:	cc                   	int3   
  22f76e:	cc                   	int3   
  22f76f:	cc                   	int3   

000000000022f770 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E>:
    /// Allocates a chunk of the given size with the given alignment. Returns a pointer to the
    /// beginning of that chunk if it was successful. Else it returns `None`.
    /// This function scans the list of free memory blocks and uses the first block that is big
    /// enough. The runtime is in O(n) where n is the number of free blocks, but it should be
    /// reasonably fast for small allocations.
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<NonNull<u8>, ()> {
  22f770:	48 83 ec 78          	sub    $0x78,%rsp
  22f774:	48 89 d1             	mov    %rdx,%rcx
  22f777:	48 89 f2             	mov    %rsi,%rdx
  22f77a:	48 89 fe             	mov    %rdi,%rsi
  22f77d:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22f782:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  22f787:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22f78c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
        match self.holes.allocate_first_fit(layout) {
  22f791:	48 83 c6 18          	add    $0x18,%rsi
  22f795:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22f79a:	e8 51 08 00 00       	callq  22fff0 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17he523fc05be7cab08E>
  22f79f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22f7a4:	48 85 c0             	test   %rax,%rax
  22f7a7:	0f 94 c0             	sete   %al
  22f7aa:	0f b6 c0             	movzbl %al,%eax
  22f7ad:	75 06                	jne    22f7b5 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x45>
  22f7af:	eb 00                	jmp    22f7b1 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x41>
  22f7b1:	eb 36                	jmp    22f7e9 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x79>
  22f7b3:	0f 0b                	ud2    
            Ok((ptr, aligned_layout)) => {
  22f7b5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22f7ba:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f7bf:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22f7c4:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22f7c9:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22f7ce:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22f7d3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
                self.used += aligned_layout.size();
  22f7d8:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22f7dd:	e8 ee 20 00 00       	callq  2318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22f7e2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f7e7:	eb 13                	jmp    22f7fc <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x8c>
                Ok(ptr)
            }
            Err(err) => Err(err),
  22f7e9:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  22f7f0:	00 00 
        }
    }
  22f7f2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22f7f7:	48 83 c4 78          	add    $0x78,%rsp
  22f7fb:	c3                   	retq   
  22f7fc:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22f801:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                self.used += aligned_layout.size();
  22f806:	48 03 41 10          	add    0x10(%rcx),%rax
  22f80a:	48 89 04 24          	mov    %rax,(%rsp)
  22f80e:	0f 92 c0             	setb   %al
  22f811:	a8 01                	test   $0x1,%al
  22f813:	75 19                	jne    22f82e <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0xbe>
  22f815:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f81a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22f81f:	48 8b 14 24          	mov    (%rsp),%rdx
  22f823:	48 89 51 10          	mov    %rdx,0x10(%rcx)
                Ok(ptr)
  22f827:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            }
  22f82c:	eb c4                	jmp    22f7f2 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x82>
                self.used += aligned_layout.size();
  22f82e:	48 8d 3d 6b 41 fd ff 	lea    -0x2be95(%rip),%rdi        # 2039a0 <str.0>
  22f835:	48 8d 15 e4 d7 00 00 	lea    0xd7e4(%rip),%rdx        # 23d020 <memcmp+0x42e0>
  22f83c:	be 1c 00 00 00       	mov    $0x1c,%esi
  22f841:	e8 aa 63 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f846:	0f 0b                	ud2    
  22f848:	cc                   	int3   
  22f849:	cc                   	int3   
  22f84a:	cc                   	int3   
  22f84b:	cc                   	int3   
  22f84c:	cc                   	int3   
  22f84d:	cc                   	int3   
  22f84e:	cc                   	int3   
  22f84f:	cc                   	int3   

000000000022f850 <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE>:
    /// behavior may occur for invalid arguments, thus this function is unsafe.
    ///
    /// This function walks the list of free memory blocks and inserts the freed block at the
    /// correct place. If the freed block is adjacent to another free block, the blocks are merged
    /// again. This operation is in `O(n)` since the list needs to be sorted by address.
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) {
  22f850:	48 83 ec 48          	sub    $0x48,%rsp
  22f854:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f859:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22f85e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22f863:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  22f868:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
        self.used -= self.holes.deallocate(ptr, layout).size();
  22f86d:	48 83 c7 18          	add    $0x18,%rdi
  22f871:	e8 0a 08 00 00       	callq  230080 <_ZN21linked_list_allocator4hole8HoleList10deallocate17hf1075ec97cc2155bE>
  22f876:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22f87b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f880:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22f885:	e8 46 20 00 00       	callq  2318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22f88a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f88f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22f894:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f899:	48 8b 40 10          	mov    0x10(%rax),%rax
  22f89d:	48 29 c8             	sub    %rcx,%rax
  22f8a0:	48 89 04 24          	mov    %rax,(%rsp)
  22f8a4:	0f 92 c0             	setb   %al
  22f8a7:	a8 01                	test   $0x1,%al
  22f8a9:	75 12                	jne    22f8bd <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE+0x6d>
  22f8ab:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f8b0:	48 8b 0c 24          	mov    (%rsp),%rcx
  22f8b4:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  22f8b8:	48 83 c4 48          	add    $0x48,%rsp
  22f8bc:	c3                   	retq   
        self.used -= self.holes.deallocate(ptr, layout).size();
  22f8bd:	48 8d 3d fc 40 fd ff 	lea    -0x2bf04(%rip),%rdi        # 2039c0 <str.1>
  22f8c4:	48 8d 15 6d d7 00 00 	lea    0xd76d(%rip),%rdx        # 23d038 <memcmp+0x42f8>
  22f8cb:	be 21 00 00 00       	mov    $0x21,%esi
  22f8d0:	e8 1b 63 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f8d5:	0f 0b                	ud2    
  22f8d7:	cc                   	int3   
  22f8d8:	cc                   	int3   
  22f8d9:	cc                   	int3   
  22f8da:	cc                   	int3   
  22f8db:	cc                   	int3   
  22f8dc:	cc                   	int3   
  22f8dd:	cc                   	int3   
  22f8de:	cc                   	int3   
  22f8df:	cc                   	int3   

000000000022f8e0 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5b565ba2603a9672E>:

#[cfg(feature = "use_spin")]
impl Deref for LockedHeap {
    type Target = Spinlock<Heap>;

    fn deref(&self) -> &Spinlock<Heap> {
  22f8e0:	50                   	push   %rax
  22f8e1:	48 89 f8             	mov    %rdi,%rax
  22f8e4:	48 89 04 24          	mov    %rax,(%rsp)
        &self.0
    }
  22f8e8:	59                   	pop    %rcx
  22f8e9:	c3                   	retq   
  22f8ea:	cc                   	int3   
  22f8eb:	cc                   	int3   
  22f8ec:	cc                   	int3   
  22f8ed:	cc                   	int3   
  22f8ee:	cc                   	int3   
  22f8ef:	cc                   	int3   

000000000022f8f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>:
}

#[cfg(feature = "use_spin")]
unsafe impl GlobalAlloc for LockedHeap {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
  22f8f0:	48 83 ec 58          	sub    $0x58,%rsp
  22f8f4:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22f8f9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22f8fe:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22f903:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  22f908:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        self.0
  22f90d:	e8 3e 20 00 00       	callq  231950 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22f912:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22f917:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22f91c:	e8 ff 1f 00 00       	callq  231920 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22f921:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22f926:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22f92b:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22f930:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22f935:	e8 36 fe ff ff       	callq  22f770 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E>
  22f93a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f93f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22f944:	e8 27 fc ff ff       	callq  22f570 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E>
  22f949:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f94e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22f953:	31 c0                	xor    %eax,%eax
  22f955:	89 c6                	mov    %eax,%esi
  22f957:	e8 44 1b 00 00       	callq  2314a0 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE>
  22f95c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            .lock()
            .allocate_first_fit(layout)
            .ok()
            .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
    }
  22f961:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22f966:	e8 75 03 00 00       	callq  22fce0 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
  22f96b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f970:	48 83 c4 58          	add    $0x58,%rsp
  22f974:	c3                   	retq   
  22f975:	cc                   	int3   
  22f976:	cc                   	int3   
  22f977:	cc                   	int3   
  22f978:	cc                   	int3   
  22f979:	cc                   	int3   
  22f97a:	cc                   	int3   
  22f97b:	cc                   	int3   
  22f97c:	cc                   	int3   
  22f97d:	cc                   	int3   
  22f97e:	cc                   	int3   
  22f97f:	cc                   	int3   

000000000022f980 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>:

    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
  22f980:	48 83 ec 58          	sub    $0x58,%rsp
  22f984:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22f989:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22f98e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22f993:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22f998:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22f99d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  22f9a2:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        self.0
  22f9a7:	e8 a4 1f 00 00       	callq  231950 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22f9ac:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22f9b1:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22f9b6:	e8 65 1f 00 00       	callq  231920 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22f9bb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f9c0:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            .lock()
            .deallocate(NonNull::new_unchecked(ptr), layout)
  22f9c5:	e8 26 1d 00 00       	callq  2316f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>
  22f9ca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f9cf:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22f9d4:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22f9d9:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22f9de:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.0
  22f9e3:	e8 68 fe ff ff       	callq  22f850 <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE>
    }
  22f9e8:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22f9ed:	e8 ee 02 00 00       	callq  22fce0 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
  22f9f2:	48 83 c4 58          	add    $0x58,%rsp
  22f9f6:	c3                   	retq   
  22f9f7:	cc                   	int3   
  22f9f8:	cc                   	int3   
  22f9f9:	cc                   	int3   
  22f9fa:	cc                   	int3   
  22f9fb:	cc                   	int3   
  22f9fc:	cc                   	int3   
  22f9fd:	cc                   	int3   
  22f9fe:	cc                   	int3   
  22f9ff:	cc                   	int3   

000000000022fa00 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E>:
}

/// Align downwards. Returns the greatest x with alignment `align`
/// so that x <= addr. The alignment must be a power of 2.
pub fn align_down(addr: usize, align: usize) -> usize {
  22fa00:	48 83 ec 58          	sub    $0x58,%rsp
  22fa04:	48 89 f1             	mov    %rsi,%rcx
  22fa07:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  22fa0c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22fa11:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22fa16:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22fa1b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22fa20:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  22fa25:	48 89 c8             	mov    %rcx,%rax
  22fa28:	48 d1 e8             	shr    %rax
  22fa2b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  22fa32:	55 55 55 
  22fa35:	48 21 d0             	and    %rdx,%rax
  22fa38:	48 29 c1             	sub    %rax,%rcx
  22fa3b:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  22fa42:	33 33 33 
  22fa45:	48 89 c8             	mov    %rcx,%rax
  22fa48:	48 21 d0             	and    %rdx,%rax
  22fa4b:	48 c1 e9 02          	shr    $0x2,%rcx
  22fa4f:	48 21 d1             	and    %rdx,%rcx
  22fa52:	48 01 c8             	add    %rcx,%rax
  22fa55:	48 89 c1             	mov    %rax,%rcx
  22fa58:	48 c1 e9 04          	shr    $0x4,%rcx
  22fa5c:	48 01 c8             	add    %rcx,%rax
  22fa5f:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  22fa66:	0f 0f 0f 
  22fa69:	48 21 c8             	and    %rcx,%rax
  22fa6c:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  22fa73:	01 01 01 
  22fa76:	48 0f af c1          	imul   %rcx,%rax
  22fa7a:	48 c1 e8 38          	shr    $0x38,%rax
  22fa7e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22fa83:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            self.count_ones() == 1
  22fa88:	83 f8 01             	cmp    $0x1,%eax
  22fa8b:	0f 94 c0             	sete   %al
  22fa8e:	88 44 24 27          	mov    %al,0x27(%rsp)
  22fa92:	8a 44 24 27          	mov    0x27(%rsp),%al
    if align.is_power_of_two() {
  22fa96:	a8 01                	test   $0x1,%al
  22fa98:	75 0f                	jne    22faa9 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xa9>
  22fa9a:	eb 00                	jmp    22fa9c <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0x9c>
  22fa9c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        addr & !(align - 1)
    } else if align == 0 {
  22faa1:	48 83 f8 00          	cmp    $0x0,%rax
  22faa5:	74 53                	je     22fafa <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xfa>
  22faa7:	eb 5d                	jmp    22fb06 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0x106>
  22faa9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        addr & !(align - 1)
  22faae:	48 83 e8 01          	sub    $0x1,%rax
  22fab2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22fab7:	0f 92 c0             	setb   %al
  22faba:	a8 01                	test   $0x1,%al
  22fabc:	75 18                	jne    22fad6 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xd6>
  22fabe:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22fac3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22fac8:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  22facc:	48 21 c8             	and    %rcx,%rax
  22facf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if align.is_power_of_two() {
  22fad4:	eb 1a                	jmp    22faf0 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xf0>
        addr & !(align - 1)
  22fad6:	48 8d 3d e3 3e fd ff 	lea    -0x2c11d(%rip),%rdi        # 2039c0 <str.1>
  22fadd:	48 8d 15 6c d5 00 00 	lea    0xd56c(%rip),%rdx        # 23d050 <memcmp+0x4310>
  22fae4:	be 21 00 00 00       	mov    $0x21,%esi
  22fae9:	e8 02 61 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22faee:	0f 0b                	ud2    
        addr
    } else {
        panic!("`align` must be a power of 2");
    }
}
  22faf0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22faf5:	48 83 c4 58          	add    $0x58,%rsp
  22faf9:	c3                   	retq   
  22fafa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        addr
  22faff:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if align.is_power_of_two() {
  22fb04:	eb ea                	jmp    22faf0 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xf0>
        panic!("`align` must be a power of 2");
  22fb06:	48 8d 3d d4 3e fd ff 	lea    -0x2c12c(%rip),%rdi        # 2039e1 <str.1+0x21>
  22fb0d:	48 8d 15 54 d5 00 00 	lea    0xd554(%rip),%rdx        # 23d068 <memcmp+0x4328>
  22fb14:	be 1c 00 00 00       	mov    $0x1c,%esi
  22fb19:	e8 d2 60 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fb1e:	0f 0b                	ud2    

000000000022fb20 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>:

/// Align upwards. Returns the smallest x with alignment `align`
/// so that x >= addr. The alignment must be a power of 2.
pub fn align_up(addr: usize, align: usize) -> usize {
  22fb20:	48 83 ec 38          	sub    $0x38,%rsp
  22fb24:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22fb29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22fb2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    align_down(addr + align - 1, align)
  22fb33:	48 01 f7             	add    %rsi,%rdi
  22fb36:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22fb3b:	0f 92 c0             	setb   %al
  22fb3e:	a8 01                	test   $0x1,%al
  22fb40:	75 17                	jne    22fb59 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x39>
  22fb42:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22fb47:	48 83 e8 01          	sub    $0x1,%rax
  22fb4b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22fb50:	0f 92 c0             	setb   %al
  22fb53:	a8 01                	test   $0x1,%al
  22fb55:	75 32                	jne    22fb89 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x69>
  22fb57:	eb 1a                	jmp    22fb73 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x53>
  22fb59:	48 8d 3d 40 3e fd ff 	lea    -0x2c1c0(%rip),%rdi        # 2039a0 <str.0>
  22fb60:	48 8d 15 19 d5 00 00 	lea    0xd519(%rip),%rdx        # 23d080 <memcmp+0x4340>
  22fb67:	be 1c 00 00 00       	mov    $0x1c,%esi
  22fb6c:	e8 7f 60 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fb71:	0f 0b                	ud2    
  22fb73:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22fb78:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22fb7d:	e8 7e fe ff ff       	callq  22fa00 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E>
  22fb82:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22fb87:	eb 1a                	jmp    22fba3 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x83>
  22fb89:	48 8d 3d 30 3e fd ff 	lea    -0x2c1d0(%rip),%rdi        # 2039c0 <str.1>
  22fb90:	48 8d 15 e9 d4 00 00 	lea    0xd4e9(%rip),%rdx        # 23d080 <memcmp+0x4340>
  22fb97:	be 21 00 00 00       	mov    $0x21,%esi
  22fb9c:	e8 4f 60 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fba1:	0f 0b                	ud2    
  22fba3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  22fba8:	48 83 c4 38          	add    $0x38,%rsp
  22fbac:	c3                   	retq   
  22fbad:	cc                   	int3   
  22fbae:	cc                   	int3   
  22fbaf:	cc                   	int3   

000000000022fbb0 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h010dcb6ff1c3dcffE>:
    /// This function uses the “first fit” strategy, so it uses the first hole that is big
    /// enough. Thus the runtime is in O(n) but it should be reasonably fast for small allocations.
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<(NonNull<u8>, Layout), ()> {
        let aligned_layout = Self::align_layout(layout);

        allocate_first_fit(&mut self.first, aligned_layout).map(|holeinfo| {
  22fbb0:	48 83 ec 48          	sub    $0x48,%rsp
  22fbb4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22fbb9:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22fbbe:	48 89 f8             	mov    %rdi,%rax
  22fbc1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22fbc6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22fbcb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22fbd0:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22fbd5:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22fbda:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            (
                NonNull::new(holeinfo.addr as *mut u8).unwrap(),
  22fbdf:	e8 2c 1b 00 00       	callq  231710 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  22fbe4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22fbe9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22fbee:	48 8d 35 a3 d4 00 00 	lea    0xd4a3(%rip),%rsi        # 23d098 <memcmp+0x4358>
  22fbf5:	e8 46 19 00 00       	callq  231540 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E>
  22fbfa:	48 89 04 24          	mov    %rax,(%rsp)
  22fbfe:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22fc03:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22fc08:	48 8b 3c 24          	mov    (%rsp),%rdi
  22fc0c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
                aligned_layout,
  22fc11:	48 8b 32             	mov    (%rdx),%rsi
  22fc14:	48 8b 52 08          	mov    0x8(%rdx),%rdx
            (
  22fc18:	48 89 39             	mov    %rdi,(%rcx)
  22fc1b:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22fc1f:	48 89 51 10          	mov    %rdx,0x10(%rcx)
            )
        })
  22fc23:	48 83 c4 48          	add    $0x48,%rsp
  22fc27:	c3                   	retq   
  22fc28:	cc                   	int3   
  22fc29:	cc                   	int3   
  22fc2a:	cc                   	int3   
  22fc2b:	cc                   	int3   
  22fc2c:	cc                   	int3   
  22fc2d:	cc                   	int3   
  22fc2e:	cc                   	int3   
  22fc2f:	cc                   	int3   

000000000022fc30 <_ZN21linked_list_allocator4hole18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h722a943daf4b1ee7E>:
fn allocate_first_fit(mut previous: &mut Hole, layout: Layout) -> Result<HoleInfo, ()> {
    loop {
        let allocation: Option<Allocation> = previous
            .next
            .as_mut()
            .and_then(|current| split_hole(current.info(), layout.clone()));
  22fc30:	48 83 ec 48          	sub    $0x48,%rsp
  22fc34:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22fc39:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22fc3e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22fc43:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  22fc48:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22fc4d:	48 8b 3a             	mov    (%rdx),%rdi
  22fc50:	e8 fb 04 00 00       	callq  230150 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>
  22fc55:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22fc5a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22fc5f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22fc64:	e8 a7 1c 00 00       	callq  231910 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h05f73b6f8579d946E>
  22fc69:	48 89 04 24          	mov    %rax,(%rsp)
  22fc6d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22fc72:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  22fc77:	48 8b 0c 24          	mov    (%rsp),%rcx
  22fc7b:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22fc80:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22fc85:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22fc8a:	e8 f1 04 00 00       	callq  230180 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE>
  22fc8f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22fc94:	48 83 c4 48          	add    $0x48,%rsp
  22fc98:	c3                   	retq   
  22fc99:	cc                   	int3   
  22fc9a:	cc                   	int3   
  22fc9b:	cc                   	int3   
  22fc9c:	cc                   	int3   
  22fc9d:	cc                   	int3   
  22fc9e:	cc                   	int3   
  22fc9f:	cc                   	int3   

000000000022fca0 <_ZN21linked_list_allocator4hole10deallocate28_$u7b$$u7b$closure$u7d$$u7d$17hce09692d5969a953E>:
            hole_addr + hole.size <= addr,
            "invalid deallocation (probably a double free)"
        );

        // get information about the next block
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  22fca0:	48 83 ec 28          	sub    $0x28,%rsp
  22fca4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22fca9:	48 8b 3f             	mov    (%rdi),%rdi
  22fcac:	e8 9f 04 00 00       	callq  230150 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>
  22fcb1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22fcb6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22fcbb:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22fcc0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22fcc5:	48 83 c4 28          	add    $0x28,%rsp
  22fcc9:	c3                   	retq   
  22fcca:	cc                   	int3   
  22fccb:	cc                   	int3   
  22fccc:	cc                   	int3   
  22fccd:	cc                   	int3   
  22fcce:	cc                   	int3   
  22fccf:	cc                   	int3   

000000000022fcd0 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>:
/// By default, references are reborrowed instead of moved (equivalent to `&mut *reference`). This
/// function forces a move.
///
/// for more information, see section “id Forces References To Move” in:
/// https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/
fn move_helper<T>(x: T) -> T {
  22fcd0:	50                   	push   %rax
  22fcd1:	48 89 f8             	mov    %rdi,%rax
  22fcd4:	48 89 04 24          	mov    %rax,(%rsp)
    x
}
  22fcd8:	59                   	pop    %rcx
  22fcd9:	c3                   	retq   
  22fcda:	cc                   	int3   
  22fcdb:	cc                   	int3   
  22fcdc:	cc                   	int3   
  22fcdd:	cc                   	int3   
  22fcde:	cc                   	int3   
  22fcdf:	cc                   	int3   

000000000022fce0 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  22fce0:	50                   	push   %rax
  22fce1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22fce5:	e8 26 00 00 00       	callq  22fd10 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1be6e4616425855E>
  22fcea:	58                   	pop    %rax
  22fceb:	c3                   	retq   
  22fcec:	cc                   	int3   
  22fced:	cc                   	int3   
  22fcee:	cc                   	int3   
  22fcef:	cc                   	int3   

000000000022fcf0 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h18b8e4e6315d4dbfE>:
  22fcf0:	50                   	push   %rax
  22fcf1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22fcf5:	58                   	pop    %rax
  22fcf6:	c3                   	retq   
  22fcf7:	cc                   	int3   
  22fcf8:	cc                   	int3   
  22fcf9:	cc                   	int3   
  22fcfa:	cc                   	int3   
  22fcfb:	cc                   	int3   
  22fcfc:	cc                   	int3   
  22fcfd:	cc                   	int3   
  22fcfe:	cc                   	int3   
  22fcff:	cc                   	int3   

000000000022fd00 <_ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17hd0eec959715c1c93E>:
  22fd00:	50                   	push   %rax
  22fd01:	48 89 3c 24          	mov    %rdi,(%rsp)
  22fd05:	58                   	pop    %rax
  22fd06:	c3                   	retq   
  22fd07:	cc                   	int3   
  22fd08:	cc                   	int3   
  22fd09:	cc                   	int3   
  22fd0a:	cc                   	int3   
  22fd0b:	cc                   	int3   
  22fd0c:	cc                   	int3   
  22fd0d:	cc                   	int3   
  22fd0e:	cc                   	int3   
  22fd0f:	cc                   	int3   

000000000022fd10 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1be6e4616425855E>:
    }
}

impl<'a, R: RawMutex + 'a, T: ?Sized + 'a> Drop for MutexGuard<'a, R, T> {
    #[inline]
    fn drop(&mut self) {
  22fd10:	50                   	push   %rax
  22fd11:	48 89 3c 24          	mov    %rdi,(%rsp)
        // Safety: A MutexGuard always holds the lock.
        unsafe {
            self.mutex.raw.unlock();
  22fd15:	48 8b 3f             	mov    (%rdi),%rdi
  22fd18:	e8 03 1f 00 00       	callq  231c20 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h718bd9fc65a01bf2E>
        }
    }
  22fd1d:	58                   	pop    %rax
  22fd1e:	c3                   	retq   
  22fd1f:	cc                   	int3   

000000000022fd20 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE>:
    pub unsafe fn new(hole_addr: usize, hole_size: usize) -> HoleList {
  22fd20:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  22fd27:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22fd2c:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22fd31:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  22fd38:	00 
  22fd39:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  22fd40:	00 
        assert_eq!(size_of::<Hole>(), Self::min_size());
  22fd41:	e8 ca 03 00 00       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22fd46:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22fd4b:	48 8d 05 9e 05 fd ff 	lea    -0x2fa62(%rip),%rax        # 2002f0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x86>
  22fd52:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22fd57:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  22fd5c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22fd61:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22fd66:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22fd6b:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22fd72:	00 
  22fd73:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  22fd78:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  22fd7d:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  22fd84:	00 
  22fd85:	48 8b 00             	mov    (%rax),%rax
  22fd88:	48 3b 01             	cmp    (%rcx),%rax
  22fd8b:	0f 94 c0             	sete   %al
  22fd8e:	34 ff                	xor    $0xff,%al
  22fd90:	a8 01                	test   $0x1,%al
  22fd92:	75 02                	jne    22fd96 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x76>
        let aligned_hole_addr = align_up(hole_addr, align_of::<Hole>());
  22fd94:	eb 2d                	jmp    22fdc3 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0xa3>
  22fd96:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22fd9b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
        assert_eq!(size_of::<Hole>(), Self::min_size());
  22fda0:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22fda5:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  22fdac:	00 00 
  22fdae:	4c 8d 05 fb d2 00 00 	lea    0xd2fb(%rip),%r8        # 23d0b0 <memcmp+0x4370>
  22fdb5:	31 ff                	xor    %edi,%edi
  22fdb7:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  22fdbc:	e8 0f 1c 00 00       	callq  2319d0 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  22fdc1:	0f 0b                	ud2    
  22fdc3:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        let aligned_hole_addr = align_up(hole_addr, align_of::<Hole>());
  22fdc8:	be 08 00 00 00       	mov    $0x8,%esi
  22fdcd:	e8 4e fd ff ff       	callq  22fb20 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22fdd2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22fdd7:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22fdde:	00 
  22fddf:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22fde4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        let ptr = aligned_hole_addr as *mut Hole;
  22fde9:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22fdf0:	00 
            size: hole_size.saturating_sub(aligned_hole_addr - hole_addr),
  22fdf1:	48 29 c8             	sub    %rcx,%rax
  22fdf4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22fdf9:	0f 92 c0             	setb   %al
  22fdfc:	a8 01                	test   $0x1,%al
  22fdfe:	75 3a                	jne    22fe3a <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x11a>
  22fe00:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22fe05:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22fe0a:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22fe11:	00 
  22fe12:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  22fe19:	00 
  22fe1a:	31 c9                	xor    %ecx,%ecx
            intrinsics::saturating_sub(self, rhs)
  22fe1c:	48 29 d0             	sub    %rdx,%rax
  22fe1f:	48 0f 42 c1          	cmovb  %rcx,%rax
  22fe23:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  22fe2a:	00 
  22fe2b:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22fe32:	00 
  22fe33:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22fe38:	eb 1a                	jmp    22fe54 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x134>
  22fe3a:	48 8d 3d 5f 3c fd ff 	lea    -0x2c3a1(%rip),%rdi        # 203aa0 <str.0>
  22fe41:	48 8d 15 80 d2 00 00 	lea    0xd280(%rip),%rdx        # 23d0c8 <memcmp+0x4388>
  22fe48:	be 21 00 00 00       	mov    $0x21,%esi
  22fe4d:	e8 9e 5d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fe52:	0f 0b                	ud2    
  22fe54:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22fe59:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        ptr.write(Hole {
  22fe5e:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22fe65:	00 
  22fe66:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
  22fe6d:	00 00 00 00 00 
  22fe72:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  22fe79:	00 
  22fe7a:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  22fe81:	00 
  22fe82:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  22fe89:	00 
  22fe8a:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  22fe91:	00 
  22fe92:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  22fe99:	00 
        unsafe { write(self, val) }
  22fe9a:	e8 11 1c 00 00       	callq  231ab0 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  22fe9f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                next: Some(&mut *ptr),
  22fea4:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22feab:	00 
            first: Hole {
  22feac:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  22feb3:	00 00 00 00 00 
  22feb8:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22febf:	00 
  22fec0:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22fec7:	00 
        HoleList {
  22fec8:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  22fecf:	00 
  22fed0:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22fed7:	00 
  22fed8:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22fedd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  22fee2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22fee7:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  22feec:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  22fef3:	c3                   	retq   
  22fef4:	cc                   	int3   
  22fef5:	cc                   	int3   
  22fef6:	cc                   	int3   
  22fef7:	cc                   	int3   
  22fef8:	cc                   	int3   
  22fef9:	cc                   	int3   
  22fefa:	cc                   	int3   
  22fefb:	cc                   	int3   
  22fefc:	cc                   	int3   
  22fefd:	cc                   	int3   
  22fefe:	cc                   	int3   
  22feff:	cc                   	int3   

000000000022ff00 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>:
    pub fn align_layout(layout: Layout) -> Layout {
  22ff00:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22ff07:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22ff0c:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        let mut size = layout.size();
  22ff11:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22ff16:	e8 b5 19 00 00       	callq  2318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22ff1b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if size < Self::min_size() {
  22ff20:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22ff25:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22ff2a:	e8 e1 01 00 00       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22ff2f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22ff34:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22ff39:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22ff3e:	48 39 c8             	cmp    %rcx,%rax
  22ff41:	72 0c                	jb     22ff4f <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x4f>
        let size = align_up(size, mem::align_of::<Hole>());
  22ff43:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22ff48:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22ff4d:	eb 16                	jmp    22ff65 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x65>
            size = Self::min_size();
  22ff4f:	e8 bc 01 00 00       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22ff54:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22ff59:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22ff5e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if size < Self::min_size() {
  22ff63:	eb de                	jmp    22ff43 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x43>
  22ff65:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let size = align_up(size, mem::align_of::<Hole>());
  22ff6a:	be 08 00 00 00       	mov    $0x8,%esi
  22ff6f:	e8 ac fb ff ff       	callq  22fb20 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22ff74:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ff79:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        let layout = Layout::from_size_align(size, layout.align()).unwrap();
  22ff7e:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22ff83:	e8 58 19 00 00       	callq  2318e0 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>
  22ff88:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22ff8d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22ff92:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22ff97:	e8 d4 17 00 00       	callq  231770 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE>
  22ff9c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ffa1:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22ffa6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22ffab:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22ffb0:	48 8d 15 29 d1 00 00 	lea    0xd129(%rip),%rdx        # 23d0e0 <memcmp+0x43a0>
  22ffb7:	e8 d4 f6 ff ff       	callq  22f690 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>
  22ffbc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ffc1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22ffc6:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22ffcb:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  22ffd2:	00 
  22ffd3:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22ffd8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22ffdd:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22ffe4:	c3                   	retq   
  22ffe5:	cc                   	int3   
  22ffe6:	cc                   	int3   
  22ffe7:	cc                   	int3   
  22ffe8:	cc                   	int3   
  22ffe9:	cc                   	int3   
  22ffea:	cc                   	int3   
  22ffeb:	cc                   	int3   
  22ffec:	cc                   	int3   
  22ffed:	cc                   	int3   
  22ffee:	cc                   	int3   
  22ffef:	cc                   	int3   

000000000022fff0 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17he523fc05be7cab08E>:
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<(NonNull<u8>, Layout), ()> {
  22fff0:	48 83 ec 78          	sub    $0x78,%rsp
  22fff4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22fff9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22fffe:	48 89 f0             	mov    %rsi,%rax
  230001:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  230006:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  23000b:	48 89 f9             	mov    %rdi,%rcx
  23000e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  230013:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  230018:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23001d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  230022:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  230027:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        let aligned_layout = Self::align_layout(layout);
  23002c:	e8 cf fe ff ff       	callq  22ff00 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>
  230031:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  230036:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  23003b:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
        allocate_first_fit(&mut self.first, aligned_layout).map(|holeinfo| {
  230040:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  230045:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  23004a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  23004f:	e8 2c 07 00 00       	callq  230780 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E>
  230054:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  230059:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  23005e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230063:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  230068:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  23006d:	e8 5e f5 ff ff       	callq  22f5d0 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E>
  230072:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    }
  230077:	48 83 c4 78          	add    $0x78,%rsp
  23007b:	c3                   	retq   
  23007c:	cc                   	int3   
  23007d:	cc                   	int3   
  23007e:	cc                   	int3   
  23007f:	cc                   	int3   

0000000000230080 <_ZN21linked_list_allocator4hole8HoleList10deallocate17hf1075ec97cc2155bE>:
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) -> Layout {
  230080:	48 83 ec 68          	sub    $0x68,%rsp
  230084:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  230089:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  23008e:	48 89 f0             	mov    %rsi,%rax
  230091:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  230096:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23009b:	48 89 f9             	mov    %rdi,%rcx
  23009e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2300a3:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2300a8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2300ad:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2300b2:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  2300b7:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        let aligned_layout = Self::align_layout(layout);
  2300bc:	e8 3f fe ff ff       	callq  22ff00 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>
  2300c1:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2300c6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2300cb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            ptr.as_ptr() as usize,
  2300d0:	e8 8b 16 00 00       	callq  231760 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>
  2300d5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            aligned_layout.size(),
  2300da:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2300df:	e8 ec 17 00 00       	callq  2318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  2300e4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2300e9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2300ee:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2300f3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        deallocate(
  2300f8:	e8 23 0a 00 00       	callq  230b20 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E>
    }
  2300fd:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  230102:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  230107:	48 83 c4 68          	add    $0x68,%rsp
  23010b:	c3                   	retq   
  23010c:	cc                   	int3   
  23010d:	cc                   	int3   
  23010e:	cc                   	int3   
  23010f:	cc                   	int3   

0000000000230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>:
    pub fn min_size() -> usize {
  230110:	50                   	push   %rax
        size_of::<usize>() * 2
  230111:	eb 00                	jmp    230113 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE+0x3>
  230113:	b8 08 00 00 00       	mov    $0x8,%eax
  230118:	b9 02 00 00 00       	mov    $0x2,%ecx
  23011d:	48 f7 e1             	mul    %rcx
  230120:	48 89 04 24          	mov    %rax,(%rsp)
  230124:	0f 90 c0             	seto   %al
  230127:	a8 01                	test   $0x1,%al
  230129:	75 06                	jne    230131 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE+0x21>
  23012b:	48 8b 04 24          	mov    (%rsp),%rax
    }
  23012f:	59                   	pop    %rcx
  230130:	c3                   	retq   
        size_of::<usize>() * 2
  230131:	48 8d 3d 98 39 fd ff 	lea    -0x2c668(%rip),%rdi        # 203ad0 <str.1>
  230138:	48 8d 15 b9 cf 00 00 	lea    0xcfb9(%rip),%rdx        # 23d0f8 <memcmp+0x43b8>
  23013f:	be 21 00 00 00       	mov    $0x21,%esi
  230144:	e8 a7 5a 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230149:	0f 0b                	ud2    
  23014b:	cc                   	int3   
  23014c:	cc                   	int3   
  23014d:	cc                   	int3   
  23014e:	cc                   	int3   
  23014f:	cc                   	int3   

0000000000230150 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>:
    fn info(&self) -> HoleInfo {
  230150:	48 83 ec 18          	sub    $0x18,%rsp
  230154:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            size: self.size,
  230159:	48 8b 07             	mov    (%rdi),%rax
        HoleInfo {
  23015c:	48 89 3c 24          	mov    %rdi,(%rsp)
  230160:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  230165:	48 8b 04 24          	mov    (%rsp),%rax
  230169:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23016e:	48 83 c4 18          	add    $0x18,%rsp
  230172:	c3                   	retq   
  230173:	cc                   	int3   
  230174:	cc                   	int3   
  230175:	cc                   	int3   
  230176:	cc                   	int3   
  230177:	cc                   	int3   
  230178:	cc                   	int3   
  230179:	cc                   	int3   
  23017a:	cc                   	int3   
  23017b:	cc                   	int3   
  23017c:	cc                   	int3   
  23017d:	cc                   	int3   
  23017e:	cc                   	int3   
  23017f:	cc                   	int3   

0000000000230180 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE>:
fn split_hole(hole: HoleInfo, required_layout: Layout) -> Option<Allocation> {
  230180:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
  230187:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  23018e:	00 
  23018f:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  230196:	00 
  230197:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  23019e:	00 
  23019f:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  2301a6:	00 
  2301a7:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  2301ae:	00 
  2301af:	4c 89 84 24 b0 00 00 	mov    %r8,0xb0(%rsp)
  2301b6:	00 
  2301b7:	48 89 b4 24 e8 01 00 	mov    %rsi,0x1e8(%rsp)
  2301be:	00 
  2301bf:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  2301c6:	00 
    let required_size = required_layout.size();
  2301c7:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  2301ce:	00 
  2301cf:	e8 fc 16 00 00       	callq  2318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  2301d4:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2301db:	00 
  2301dc:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2301e3:	00 
    let required_align = required_layout.align();
  2301e4:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  2301eb:	00 
  2301ec:	e8 ef 16 00 00       	callq  2318e0 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>
  2301f1:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2301f6:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  2301fd:	00 
  2301fe:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  230203:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  23020a:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  23020b:	e8 10 f9 ff ff       	callq  22fb20 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  230210:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  230215:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  23021c:	00 
  23021d:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  230222:	48 39 c8             	cmp    %rcx,%rax
  230225:	74 0f                	je     230236 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0xb6>
        let aligned_addr = align_up(hole.addr + HoleList::min_size(), required_align);
  230227:	e8 e4 fe ff ff       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  23022c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  230231:	e9 b1 00 00 00       	jmpq   2302e7 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x167>
  230236:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  23023d:	00 
        (hole.addr, None)
  23023e:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  230245:	00 00 00 00 00 
  23024a:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  230251:	00 
  230252:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  230259:	00 
  23025a:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  230261:	00 
  230262:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  230269:	00 
  23026a:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  230271:	00 
  230272:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  230279:	00 
  23027a:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  230281:	00 
  230282:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  230289:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  23028a:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  230291:	00 
  230292:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230297:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  23029e:	00 
  23029f:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  2302a6:	00 
  2302a7:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  2302ae:	00 
  2302af:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  2302b6:	00 
  2302b7:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  2302be:	00 
  2302bf:	48 8b 94 24 e8 00 00 	mov    0xe8(%rsp),%rdx
  2302c6:	00 
  2302c7:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  2302ce:	00 
        if aligned_addr + required_size > hole.addr + hole.size {
  2302cf:	48 01 c8             	add    %rcx,%rax
  2302d2:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2302d7:	0f 92 c0             	setb   %al
  2302da:	a8 01                	test   $0x1,%al
  2302dc:	0f 85 3f 01 00 00    	jne    230421 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2a1>
  2302e2:	e9 19 01 00 00       	jmpq   230400 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x280>
  2302e7:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2302ec:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2302f3:	00 
        let aligned_addr = align_up(hole.addr + HoleList::min_size(), required_align);
  2302f4:	48 01 c8             	add    %rcx,%rax
  2302f7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2302fc:	0f 92 c0             	setb   %al
  2302ff:	a8 01                	test   $0x1,%al
  230301:	75 1e                	jne    230321 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x1a1>
  230303:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  230308:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  23030d:	e8 0e f8 ff ff       	callq  22fb20 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  230312:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  230317:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  23031e:	00 
  23031f:	eb 1a                	jmp    23033b <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x1bb>
  230321:	48 8d 3d d8 37 fd ff 	lea    -0x2c828(%rip),%rdi        # 203b00 <str.2>
  230328:	48 8d 15 e1 cd 00 00 	lea    0xcde1(%rip),%rdx        # 23d110 <memcmp+0x43d0>
  23032f:	be 1c 00 00 00       	mov    $0x1c,%esi
  230334:	e8 b7 58 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230339:	0f 0b                	ud2    
  23033b:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  230342:	00 
  230343:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                size: aligned_addr - hole.addr,
  230348:	48 29 c8             	sub    %rcx,%rax
  23034b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  230350:	0f 92 c0             	setb   %al
  230353:	a8 01                	test   $0x1,%al
  230355:	0f 85 8b 00 00 00    	jne    2303e6 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x266>
  23035b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  230360:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  230365:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  23036c:	00 
            Some(HoleInfo {
  23036d:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  230374:	00 
  230375:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  23037c:	00 
  23037d:	48 8b 94 24 20 01 00 	mov    0x120(%rsp),%rdx
  230384:	00 
  230385:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  23038c:	00 
  23038d:	48 89 94 24 10 01 00 	mov    %rdx,0x110(%rsp)
  230394:	00 
  230395:	48 89 8c 24 18 01 00 	mov    %rcx,0x118(%rsp)
  23039c:	00 
  23039d:	48 c7 84 24 08 01 00 	movq   $0x1,0x108(%rsp)
  2303a4:	00 01 00 00 00 
        (
  2303a9:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  2303b0:	00 
  2303b1:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2303b8:	00 
  2303b9:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2303c0:	00 
  2303c1:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2303c8:	00 
  2303c9:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2303d0:	00 
  2303d1:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  2303d8:	00 
  2303d9:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2303e0:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  2303e1:	e9 9c fe ff ff       	jmpq   230282 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x102>
                size: aligned_addr - hole.addr,
  2303e6:	48 8d 3d b3 36 fd ff 	lea    -0x2c94d(%rip),%rdi        # 203aa0 <str.0>
  2303ed:	48 8d 15 34 cd 00 00 	lea    0xcd34(%rip),%rdx        # 23d128 <memcmp+0x43e8>
  2303f4:	be 21 00 00 00       	mov    $0x21,%esi
  2303f9:	e8 f2 57 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2303fe:	0f 0b                	ud2    
  230400:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  230407:	00 
  230408:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  23040f:	00 
        if aligned_addr + required_size > hole.addr + hole.size {
  230410:	48 01 c8             	add    %rcx,%rax
  230413:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  230418:	0f 92 c0             	setb   %al
  23041b:	a8 01                	test   $0x1,%al
  23041d:	75 2d                	jne    23044c <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2cc>
  23041f:	eb 1a                	jmp    23043b <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2bb>
  230421:	48 8d 3d d8 36 fd ff 	lea    -0x2c928(%rip),%rdi        # 203b00 <str.2>
  230428:	48 8d 15 11 cd 00 00 	lea    0xcd11(%rip),%rdx        # 23d140 <memcmp+0x4400>
  23042f:	be 1c 00 00 00       	mov    $0x1c,%esi
  230434:	e8 b7 57 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230439:	0f 0b                	ud2    
  23043b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  230440:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  230445:	48 39 c8             	cmp    %rcx,%rax
  230448:	77 3a                	ja     230484 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x304>
  23044a:	eb 1a                	jmp    230466 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2e6>
  23044c:	48 8d 3d ad 36 fd ff 	lea    -0x2c953(%rip),%rdi        # 203b00 <str.2>
  230453:	48 8d 15 fe cc 00 00 	lea    0xccfe(%rip),%rdx        # 23d158 <memcmp+0x4418>
  23045a:	be 1c 00 00 00       	mov    $0x1c,%esi
  23045f:	e8 8c 57 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230464:	0f 0b                	ud2    
  230466:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  23046d:	00 
  23046e:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
            size: hole.size - (aligned_addr - hole.addr),
  230473:	48 29 c8             	sub    %rcx,%rax
  230476:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  23047b:	0f 92 c0             	setb   %al
  23047e:	a8 01                	test   $0x1,%al
  230480:	75 40                	jne    2304c2 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x342>
  230482:	eb 20                	jmp    2304a4 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x324>
  230484:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  23048b:	00 
            return None;
  23048c:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  230493:	00 
  230494:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  23049b:	00 
}
  23049c:	48 81 c4 18 02 00 00 	add    $0x218,%rsp
  2304a3:	c3                   	retq   
  2304a4:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2304a9:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2304b0:	00 
            size: hole.size - (aligned_addr - hole.addr),
  2304b1:	48 29 c8             	sub    %rcx,%rax
  2304b4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2304b9:	0f 92 c0             	setb   %al
  2304bc:	a8 01                	test   $0x1,%al
  2304be:	75 4a                	jne    23050a <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x38a>
  2304c0:	eb 1a                	jmp    2304dc <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x35c>
  2304c2:	48 8d 3d d7 35 fd ff 	lea    -0x2ca29(%rip),%rdi        # 203aa0 <str.0>
  2304c9:	48 8d 15 a0 cc 00 00 	lea    0xcca0(%rip),%rdx        # 23d170 <memcmp+0x4430>
  2304d0:	be 21 00 00 00       	mov    $0x21,%esi
  2304d5:	e8 16 57 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2304da:	0f 0b                	ud2    
  2304dc:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2304e3:	00 
  2304e4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2304e9:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
        HoleInfo {
  2304ee:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  2304f5:	00 
  2304f6:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  2304fd:	00 
    let back_padding = if aligned_hole.size == required_size {
  2304fe:	48 39 84 24 38 01 00 	cmp    %rax,0x138(%rsp)
  230505:	00 
  230506:	74 44                	je     23054c <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3cc>
  230508:	eb 1a                	jmp    230524 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3a4>
            size: hole.size - (aligned_addr - hole.addr),
  23050a:	48 8d 3d 8f 35 fd ff 	lea    -0x2ca71(%rip),%rdi        # 203aa0 <str.0>
  230511:	48 8d 15 70 cc 00 00 	lea    0xcc70(%rip),%rdx        # 23d188 <memcmp+0x4448>
  230518:	be 21 00 00 00       	mov    $0x21,%esi
  23051d:	e8 ce 56 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230522:	0f 0b                	ud2    
  230524:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  23052b:	00 
    } else if aligned_hole.size - required_size < HoleList::min_size() {
  23052c:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  230533:	00 
  230534:	48 29 c8             	sub    %rcx,%rax
  230537:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23053c:	0f 92 c0             	setb   %al
  23053f:	a8 01                	test   $0x1,%al
  230541:	0f 85 3c 01 00 00    	jne    230683 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x503>
  230547:	e9 2b 01 00 00       	jmpq   230677 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x4f7>
        None
  23054c:	48 c7 84 24 40 01 00 	movq   $0x0,0x140(%rsp)
  230553:	00 00 00 00 00 
  230558:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  23055f:	00 
  230560:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  230567:	00 
            addr: aligned_hole.addr,
  230568:	48 8b 8c 24 30 01 00 	mov    0x130(%rsp),%rcx
  23056f:	00 
        info: HoleInfo {
  230570:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  230577:	00 
  230578:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  23057f:	00 
        front_padding: front_padding,
  230580:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  230587:	00 
  230588:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  23058f:	00 
  230590:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  230597:	00 
  230598:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  23059f:	00 
  2305a0:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2305a7:	00 
  2305a8:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  2305af:	00 
        back_padding: back_padding,
  2305b0:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  2305b7:	00 
  2305b8:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  2305bf:	00 
  2305c0:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  2305c7:	00 
  2305c8:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  2305cf:	00 
  2305d0:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  2305d7:	00 
  2305d8:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  2305df:	00 
    Some(Allocation {
  2305e0:	48 8b 8c 24 a8 01 00 	mov    0x1a8(%rsp),%rcx
  2305e7:	00 
  2305e8:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  2305ef:	00 
  2305f0:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  2305f7:	00 
  2305f8:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  2305ff:	00 
  230600:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  230607:	00 
  230608:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  23060f:	00 
  230610:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  230617:	00 
  230618:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  23061f:	00 
  230620:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  230627:	00 
  230628:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  23062f:	00 
  230630:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  230637:	00 
  230638:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  23063f:	00 
  230640:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  230647:	00 
  230648:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  23064f:	00 
  230650:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  230657:	00 
  230658:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  23065f:	00 
  230660:	48 8d b4 24 68 01 00 	lea    0x168(%rsp),%rsi
  230667:	00 
  230668:	ba 40 00 00 00       	mov    $0x40,%edx
  23066d:	e8 7e 86 00 00       	callq  238cf0 <memcpy>
}
  230672:	e9 1d fe ff ff       	jmpq   230494 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x314>
    } else if aligned_hole.size - required_size < HoleList::min_size() {
  230677:	e8 94 fa ff ff       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  23067c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  230681:	eb 1a                	jmp    23069d <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x51d>
  230683:	48 8d 3d 16 34 fd ff 	lea    -0x2cbea(%rip),%rdi        # 203aa0 <str.0>
  23068a:	48 8d 15 0f cb 00 00 	lea    0xcb0f(%rip),%rdx        # 23d1a0 <memcmp+0x4460>
  230691:	be 21 00 00 00       	mov    $0x21,%esi
  230696:	e8 55 55 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23069b:	0f 0b                	ud2    
  23069d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2306a2:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2306a7:	48 39 c8             	cmp    %rcx,%rax
  2306aa:	72 1e                	jb     2306ca <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x54a>
  2306ac:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2306b3:	00 
            addr: aligned_hole.addr + required_size,
  2306b4:	48 03 84 24 30 01 00 	add    0x130(%rsp),%rax
  2306bb:	00 
  2306bc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2306c1:	0f 92 c0             	setb   %al
  2306c4:	a8 01                	test   $0x1,%al
  2306c6:	75 38                	jne    230700 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x580>
  2306c8:	eb 15                	jmp    2306df <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x55f>
  2306ca:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2306d1:	00 
        return None;
  2306d2:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  2306d9:	00 
#![cfg_attr(feature = "const_mut_refs", feature(const_mut_refs))]
  2306da:	e9 b5 fd ff ff       	jmpq   230494 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x314>
  2306df:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  2306e6:	00 
            size: aligned_hole.size - required_size,
  2306e7:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  2306ee:	00 
  2306ef:	48 29 c8             	sub    %rcx,%rax
  2306f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2306f7:	0f 92 c0             	setb   %al
  2306fa:	a8 01                	test   $0x1,%al
  2306fc:	75 67                	jne    230765 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x5e5>
  2306fe:	eb 1a                	jmp    23071a <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x59a>
            addr: aligned_hole.addr + required_size,
  230700:	48 8d 3d f9 33 fd ff 	lea    -0x2cc07(%rip),%rdi        # 203b00 <str.2>
  230707:	48 8d 15 aa ca 00 00 	lea    0xcaaa(%rip),%rdx        # 23d1b8 <memcmp+0x4478>
  23070e:	be 1c 00 00 00       	mov    $0x1c,%esi
  230713:	e8 d8 54 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230718:	0f 0b                	ud2    
  23071a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23071f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Some(HoleInfo {
  230724:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
  23072b:	00 
  23072c:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  230733:	00 
  230734:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  23073b:	00 
  23073c:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  230743:	00 
  230744:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  23074b:	00 
  23074c:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  230753:	00 
  230754:	48 c7 84 24 40 01 00 	movq   $0x1,0x140(%rsp)
  23075b:	00 01 00 00 00 
    let back_padding = if aligned_hole.size == required_size {
  230760:	e9 f3 fd ff ff       	jmpq   230558 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3d8>
            size: aligned_hole.size - required_size,
  230765:	48 8d 3d 34 33 fd ff 	lea    -0x2cccc(%rip),%rdi        # 203aa0 <str.0>
  23076c:	48 8d 15 5d ca 00 00 	lea    0xca5d(%rip),%rdx        # 23d1d0 <memcmp+0x4490>
  230773:	be 21 00 00 00       	mov    $0x21,%esi
  230778:	e8 73 54 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23077d:	0f 0b                	ud2    
  23077f:	cc                   	int3   

0000000000230780 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E>:
fn allocate_first_fit(mut previous: &mut Hole, layout: Layout) -> Result<HoleInfo, ()> {
  230780:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  230787:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  23078e:	00 
  23078f:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  230796:	00 
  230797:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  23079e:	00 
  23079f:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  2307a6:	00 
  2307a7:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  2307ae:	00 
        let allocation: Option<Allocation> = previous
  2307af:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  2307b6:	00 
  2307b7:	48 83 c7 08          	add    $0x8,%rdi
  2307bb:	e8 40 0c 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  2307c0:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2307c7:	00 
  2307c8:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  2307cf:	00 
            .and_then(|current| split_hole(current.info(), layout.clone()));
  2307d0:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  2307d7:	00 
  2307d8:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2307df:	00 
        let allocation: Option<Allocation> = previous
  2307e0:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  2307e7:	00 
  2307e8:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  2307ef:	00 
  2307f0:	e8 2b 0e 00 00       	callq  231620 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E>
        match allocation {
  2307f5:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2307fc:	00 
  2307fd:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  230801:	0f 95 c0             	setne  %al
  230804:	0f b6 c0             	movzbl %al,%eax
  230807:	74 06                	je     23080f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x8f>
  230809:	eb 00                	jmp    23080b <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x8b>
  23080b:	eb 1c                	jmp    230829 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0xa9>
  23080d:	0f 0b                	ud2    
            None if previous.next.is_some() => {
  23080f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  230816:	00 
  230817:	48 83 c7 08          	add    $0x8,%rdi
  23081b:	e8 c0 0d 00 00       	callq  2315e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE>
  230820:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  230824:	e9 88 02 00 00       	jmpq   230ab1 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x331>
            Some(allocation) => {
  230829:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  230830:	00 
  230831:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  230838:	00 
  230839:	ba 40 00 00 00       	mov    $0x40,%edx
  23083e:	e8 ad 84 00 00       	callq  238cf0 <memcpy>
                previous.next = previous.next.as_mut().unwrap().next.take();
  230843:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  23084a:	00 
  23084b:	48 83 c7 08          	add    $0x8,%rdi
  23084f:	e8 ac 0b 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  230854:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  230859:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  23085e:	48 8d 35 83 c9 00 00 	lea    0xc983(%rip),%rsi        # 23d1e8 <memcmp+0x44a8>
  230865:	e8 26 0d 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  23086a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  23086f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  230874:	48 8b 38             	mov    (%rax),%rdi
  230877:	48 83 c7 08          	add    $0x8,%rdi
  23087b:	e8 50 0b 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  230880:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  230885:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  23088a:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  230891:	00 
  230892:	48 89 48 08          	mov    %rcx,0x8(%rax)
                if let Some(padding) = allocation.front_padding {
  230896:	48 83 bc 24 08 01 00 	cmpq   $0x1,0x108(%rsp)
  23089d:	00 01 
  23089f:	75 4a                	jne    2308eb <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x16b>
  2308a1:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2308a8:	00 
  2308a9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2308ae:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  2308b5:	00 
  2308b6:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  2308bb:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2308c2:	00 
  2308c3:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  2308ca:	00 
                    let ptr = padding.addr as *mut Hole;
  2308cb:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  2308d2:	00 
                            next: previous.next.take(),
  2308d3:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  2308da:	00 
  2308db:	48 83 c7 08          	add    $0x8,%rdi
  2308df:	e8 ec 0a 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  2308e4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2308e9:	eb 14                	jmp    2308ff <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x17f>
                if let Some(padding) = allocation.back_padding {
  2308eb:	48 83 bc 24 20 01 00 	cmpq   $0x1,0x120(%rsp)
  2308f2:	00 01 
  2308f4:	0f 84 c2 00 00 00    	je     2309bc <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x23c>
  2308fa:	e9 07 01 00 00       	jmpq   230a06 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x286>
  2308ff:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  230904:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  230909:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        ptr.write(Hole {
  23090e:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  230915:	00 
  230916:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  23091d:	00 
  23091e:	48 8b b4 24 38 01 00 	mov    0x138(%rsp),%rsi
  230925:	00 
  230926:	48 8b 94 24 40 01 00 	mov    0x140(%rsp),%rdx
  23092d:	00 
  23092e:	48 89 bc 24 b0 01 00 	mov    %rdi,0x1b0(%rsp)
  230935:	00 
  230936:	48 89 b4 24 b8 01 00 	mov    %rsi,0x1b8(%rsp)
  23093d:	00 
  23093e:	48 89 94 24 c0 01 00 	mov    %rdx,0x1c0(%rsp)
  230945:	00 
  230946:	e8 65 11 00 00       	callq  231ab0 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  23094b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                    previous.next = Some(unsafe { &mut *ptr });
  230950:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  230957:	00 
  230958:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  23095f:	00 
  230960:	48 8b 8c 24 48 01 00 	mov    0x148(%rsp),%rcx
  230967:	00 
  230968:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    previous = move_helper(previous).next.as_mut().unwrap();
  23096c:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  230973:	00 
  230974:	e8 57 f3 ff ff       	callq  22fcd0 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  230979:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23097e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  230983:	48 83 c7 08          	add    $0x8,%rdi
  230987:	e8 74 0a 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  23098c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  230991:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  230996:	48 8d 35 63 c8 00 00 	lea    0xc863(%rip),%rsi        # 23d200 <memcmp+0x44c0>
  23099d:	e8 ee 0b 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  2309a2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2309a7:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2309ac:	48 8b 00             	mov    (%rax),%rax
  2309af:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2309b6:	00 
                if let Some(padding) = allocation.front_padding {
  2309b7:	e9 2f ff ff ff       	jmpq   2308eb <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x16b>
                if let Some(padding) = allocation.back_padding {
  2309bc:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  2309c3:	00 
  2309c4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2309c9:	48 8b 8c 24 30 01 00 	mov    0x130(%rsp),%rcx
  2309d0:	00 
  2309d1:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2309d6:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2309dd:	00 
  2309de:	48 89 8c 24 88 01 00 	mov    %rcx,0x188(%rsp)
  2309e5:	00 
                    let ptr = padding.addr as *mut Hole;
  2309e6:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  2309ed:	00 
                            next: previous.next.take(),
  2309ee:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  2309f5:	00 
  2309f6:	48 83 c7 08          	add    $0x8,%rdi
  2309fa:	e8 d1 09 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  2309ff:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  230a04:	eb 29                	jmp    230a2f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x2af>
  230a06:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  230a0d:	00 
                return Ok(allocation.info);
  230a0e:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
  230a15:	00 
  230a16:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  230a1d:	00 
  230a1e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  230a22:	48 89 48 10          	mov    %rcx,0x10(%rax)
  230a26:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  230a2d:	eb 72                	jmp    230aa1 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x321>
  230a2f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  230a34:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  230a39:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
                        ptr.write(Hole {
  230a3e:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  230a45:	00 
  230a46:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  230a4d:	00 
  230a4e:	48 8b b4 24 50 01 00 	mov    0x150(%rsp),%rsi
  230a55:	00 
  230a56:	48 8b 94 24 58 01 00 	mov    0x158(%rsp),%rdx
  230a5d:	00 
  230a5e:	48 89 bc 24 98 01 00 	mov    %rdi,0x198(%rsp)
  230a65:	00 
  230a66:	48 89 b4 24 a0 01 00 	mov    %rsi,0x1a0(%rsp)
  230a6d:	00 
  230a6e:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  230a75:	00 
  230a76:	e8 35 10 00 00       	callq  231ab0 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  230a7b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                    previous.next = Some(unsafe { &mut *ptr });
  230a80:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  230a87:	00 
  230a88:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  230a8f:	00 
  230a90:	48 8b 8c 24 60 01 00 	mov    0x160(%rsp),%rcx
  230a97:	00 
  230a98:	48 89 48 08          	mov    %rcx,0x8(%rax)
                if let Some(padding) = allocation.back_padding {
  230a9c:	e9 65 ff ff ff       	jmpq   230a06 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x286>
  230aa1:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  230aa8:	00 
}
  230aa9:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  230ab0:	c3                   	retq   
  230ab1:	8a 44 24 7f          	mov    0x7f(%rsp),%al
            None if previous.next.is_some() => {
  230ab5:	a8 01                	test   $0x1,%al
  230ab7:	75 13                	jne    230acc <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x34c>
  230ab9:	eb 00                	jmp    230abb <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x33b>
  230abb:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  230ac2:	00 
                return Err(());
  230ac3:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  230aca:	eb d5                	jmp    230aa1 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x321>
                previous = move_helper(previous).next.as_mut().unwrap();
  230acc:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  230ad3:	00 
  230ad4:	e8 f7 f1 ff ff       	callq  22fcd0 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  230ad9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  230ade:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  230ae3:	48 83 c7 08          	add    $0x8,%rdi
  230ae7:	e8 14 09 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  230aec:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230af1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  230af6:	48 8d 35 1b c7 00 00 	lea    0xc71b(%rip),%rsi        # 23d218 <memcmp+0x44d8>
  230afd:	e8 8e 0a 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  230b02:	48 89 04 24          	mov    %rax,(%rsp)
  230b06:	48 8b 04 24          	mov    (%rsp),%rax
  230b0a:	48 8b 00             	mov    (%rax),%rax
  230b0d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  230b14:	00 
    loop {
  230b15:	e9 95 fc ff ff       	jmpq   2307af <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x2f>
  230b1a:	cc                   	int3   
  230b1b:	cc                   	int3   
  230b1c:	cc                   	int3   
  230b1d:	cc                   	int3   
  230b1e:	cc                   	int3   
  230b1f:	cc                   	int3   

0000000000230b20 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E>:
fn deallocate(mut hole: &mut Hole, addr: usize, mut size: usize) {
  230b20:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
  230b27:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  230b2e:	00 
  230b2f:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  230b36:	00 
  230b37:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  230b3e:	00 
  230b3f:	48 89 b4 24 88 01 00 	mov    %rsi,0x188(%rsp)
  230b46:	00 
        assert!(size >= HoleList::min_size());
  230b47:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  230b4e:	00 
  230b4f:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  230b56:	00 
  230b57:	e8 b4 f5 ff ff       	callq  230110 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  230b5c:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  230b63:	00 
  230b64:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  230b6b:	00 
  230b6c:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  230b73:	00 
  230b74:	48 39 c8             	cmp    %rcx,%rax
  230b77:	0f 93 c0             	setae  %al
  230b7a:	34 ff                	xor    $0xff,%al
  230b7c:	a8 01                	test   $0x1,%al
  230b7e:	75 10                	jne    230b90 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x70>
        let hole_addr = if hole.size == 0 {
  230b80:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  230b87:	00 
  230b88:	48 83 38 00          	cmpq   $0x0,(%rax)
  230b8c:	74 1c                	je     230baa <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x8a>
  230b8e:	eb 28                	jmp    230bb8 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x98>
        assert!(size >= HoleList::min_size());
  230b90:	48 8d 3d 85 2f fd ff 	lea    -0x2d07b(%rip),%rdi        # 203b1c <str.2+0x1c>
  230b97:	48 8d 15 92 c6 00 00 	lea    0xc692(%rip),%rdx        # 23d230 <memcmp+0x44f0>
  230b9e:	be 2e 00 00 00       	mov    $0x2e,%esi
  230ba3:	e8 48 50 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230ba8:	0f 0b                	ud2    
            0
  230baa:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
  230bb1:	00 00 00 00 00 
        let hole_addr = if hole.size == 0 {
  230bb6:	eb 10                	jmp    230bc8 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0xa8>
            hole as *mut _ as usize
  230bb8:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  230bbf:	00 
  230bc0:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  230bc7:	00 
            hole_addr + hole.size <= addr,
  230bc8:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  230bcf:	00 
  230bd0:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  230bd7:	00 
  230bd8:	48 03 01             	add    (%rcx),%rax
  230bdb:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  230be2:	00 
  230be3:	0f 92 c0             	setb   %al
  230be6:	a8 01                	test   $0x1,%al
  230be8:	75 1e                	jne    230c08 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0xe8>
  230bea:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  230bf1:	00 
  230bf2:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  230bf9:	00 
  230bfa:	48 39 c8             	cmp    %rcx,%rax
  230bfd:	0f 96 c0             	setbe  %al
        assert!(
  230c00:	34 ff                	xor    $0xff,%al
  230c02:	a8 01                	test   $0x1,%al
  230c04:	75 37                	jne    230c3d <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x11d>
  230c06:	eb 1a                	jmp    230c22 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x102>
            hole_addr + hole.size <= addr,
  230c08:	48 8d 3d f1 2e fd ff 	lea    -0x2d10f(%rip),%rdi        # 203b00 <str.2>
  230c0f:	48 8d 15 32 c6 00 00 	lea    0xc632(%rip),%rdx        # 23d248 <memcmp+0x4508>
  230c16:	be 1c 00 00 00       	mov    $0x1c,%esi
  230c1b:	e8 d0 4f 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230c20:	0f 0b                	ud2    
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  230c22:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  230c29:	00 
  230c2a:	48 83 c7 08          	add    $0x8,%rdi
  230c2e:	e8 1d 08 00 00       	callq  231450 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E>
  230c33:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  230c3a:	00 
  230c3b:	eb 1a                	jmp    230c57 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x137>
        assert!(
  230c3d:	48 8d 3d 06 2f fd ff 	lea    -0x2d0fa(%rip),%rdi        # 203b4a <str.2+0x4a>
  230c44:	48 8d 15 15 c6 00 00 	lea    0xc615(%rip),%rdx        # 23d260 <memcmp+0x4520>
  230c4b:	be 2d 00 00 00       	mov    $0x2d,%esi
  230c50:	e8 9b 4f 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230c55:	0f 0b                	ud2    
  230c57:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  230c5e:	00 
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  230c5f:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  230c66:	00 
  230c67:	e8 c4 06 00 00       	callq  231330 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E>
        match next_hole_info {
  230c6c:	48 83 bc 24 00 01 00 	cmpq   $0x1,0x100(%rsp)
  230c73:	00 01 
  230c75:	75 40                	jne    230cb7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x197>
            Some(next) if hole_addr + hole.size == addr && addr + size == next.addr => {
  230c77:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  230c7e:	00 
  230c7f:	48 83 c0 08          	add    $0x8,%rax
  230c83:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  230c8a:	00 
  230c8b:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  230c92:	00 
  230c93:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  230c9a:	00 
  230c9b:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  230ca2:	00 
  230ca3:	48 03 01             	add    (%rcx),%rax
  230ca6:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  230cad:	00 
  230cae:	0f 92 c0             	setb   %al
  230cb1:	a8 01                	test   $0x1,%al
  230cb3:	75 44                	jne    230cf9 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1d9>
  230cb5:	eb 2b                	jmp    230ce2 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1c2>
            _ if hole_addr + hole.size == addr => {
  230cb7:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  230cbe:	00 
  230cbf:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  230cc6:	00 
  230cc7:	48 03 01             	add    (%rcx),%rax
  230cca:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  230cd1:	00 
  230cd2:	0f 92 c0             	setb   %al
  230cd5:	a8 01                	test   $0x1,%al
  230cd7:	0f 85 ca 01 00 00    	jne    230ea7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x387>
  230cdd:	e9 ae 01 00 00       	jmpq   230e90 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x370>
  230ce2:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  230ce9:	00 
  230cea:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  230cf1:	00 
            Some(next) if hole_addr + hole.size == addr && addr + size == next.addr => {
  230cf2:	48 39 c8             	cmp    %rcx,%rax
  230cf5:	74 26                	je     230d1d <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1fd>
  230cf7:	eb 1a                	jmp    230d13 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1f3>
  230cf9:	48 8d 3d 00 2e fd ff 	lea    -0x2d200(%rip),%rdi        # 203b00 <str.2>
  230d00:	48 8d 15 71 c5 00 00 	lea    0xc571(%rip),%rdx        # 23d278 <memcmp+0x4538>
  230d07:	be 1c 00 00 00       	mov    $0x1c,%esi
  230d0c:	e8 df 4e 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230d11:	0f 0b                	ud2    
  230d13:	c6 84 24 1f 01 00 00 	movb   $0x0,0x11f(%rsp)
  230d1a:	00 
  230d1b:	eb 5a                	jmp    230d77 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x257>
  230d1d:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  230d24:	00 
  230d25:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  230d2c:	00 
  230d2d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  230d34:	00 
  230d35:	0f 92 c0             	setb   %al
  230d38:	a8 01                	test   $0x1,%al
  230d3a:	75 21                	jne    230d5d <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x23d>
  230d3c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  230d43:	00 
  230d44:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  230d4b:	00 
  230d4c:	48 3b 01             	cmp    (%rcx),%rax
  230d4f:	0f 94 c0             	sete   %al
  230d52:	24 01                	and    $0x1,%al
  230d54:	88 84 24 1f 01 00 00 	mov    %al,0x11f(%rsp)
  230d5b:	eb 1a                	jmp    230d77 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x257>
  230d5d:	48 8d 3d 9c 2d fd ff 	lea    -0x2d264(%rip),%rdi        # 203b00 <str.2>
  230d64:	48 8d 15 25 c5 00 00 	lea    0xc525(%rip),%rdx        # 23d290 <memcmp+0x4550>
  230d6b:	be 1c 00 00 00       	mov    $0x1c,%esi
  230d70:	e8 7b 4e 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230d75:	0f 0b                	ud2    
  230d77:	f6 84 24 1f 01 00 00 	testb  $0x1,0x11f(%rsp)
  230d7e:	01 
  230d7f:	0f 84 32 ff ff ff    	je     230cb7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x197>
  230d85:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  230d8c:	00 
  230d8d:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  230d94:	00 
  230d95:	48 89 8c 24 98 01 00 	mov    %rcx,0x198(%rsp)
  230d9c:	00 
  230d9d:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  230da4:	00 
                hole.size += size + next.size; // merge the F and Y blocks to this X block
  230da5:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  230dac:	00 
  230dad:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  230db4:	00 
  230db5:	0f 92 c0             	setb   %al
  230db8:	a8 01                	test   $0x1,%al
  230dba:	75 24                	jne    230de0 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x2c0>
  230dbc:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  230dc3:	00 
  230dc4:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  230dcb:	00 
  230dcc:	48 03 01             	add    (%rcx),%rax
  230dcf:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  230dd6:	00 
  230dd7:	0f 92 c0             	setb   %al
  230dda:	a8 01                	test   $0x1,%al
  230ddc:	75 4a                	jne    230e28 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x308>
  230dde:	eb 1a                	jmp    230dfa <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x2da>
  230de0:	48 8d 3d 19 2d fd ff 	lea    -0x2d2e7(%rip),%rdi        # 203b00 <str.2>
  230de7:	48 8d 15 ba c4 00 00 	lea    0xc4ba(%rip),%rdx        # 23d2a8 <memcmp+0x4568>
  230dee:	be 1c 00 00 00       	mov    $0x1c,%esi
  230df3:	e8 f8 4d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230df8:	0f 0b                	ud2    
  230dfa:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  230e01:	00 
  230e02:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  230e09:	00 
  230e0a:	48 89 08             	mov    %rcx,(%rax)
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  230e0d:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  230e14:	00 
  230e15:	48 83 c7 08          	add    $0x8,%rdi
  230e19:	e8 e2 05 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  230e1e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  230e25:	00 
  230e26:	eb 1a                	jmp    230e42 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x322>
                hole.size += size + next.size; // merge the F and Y blocks to this X block
  230e28:	48 8d 3d d1 2c fd ff 	lea    -0x2d32f(%rip),%rdi        # 203b00 <str.2>
  230e2f:	48 8d 15 8a c4 00 00 	lea    0xc48a(%rip),%rdx        # 23d2c0 <memcmp+0x4580>
  230e36:	be 1c 00 00 00       	mov    $0x1c,%esi
  230e3b:	e8 b0 4d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230e40:	0f 0b                	ud2    
  230e42:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  230e49:	00 
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  230e4a:	48 8d 35 87 c4 00 00 	lea    0xc487(%rip),%rsi        # 23d2d8 <memcmp+0x4598>
  230e51:	e8 3a 07 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  230e56:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  230e5d:	00 
  230e5e:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  230e65:	00 
  230e66:	48 8b 38             	mov    (%rax),%rdi
  230e69:	48 83 c7 08          	add    $0x8,%rdi
  230e6d:	e8 5e 05 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  230e72:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  230e77:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  230e7c:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  230e83:	00 
  230e84:	48 89 48 08          	mov    %rcx,0x8(%rax)
}
  230e88:	48 81 c4 08 02 00 00 	add    $0x208,%rsp
  230e8f:	c3                   	retq   
  230e90:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  230e97:	00 
  230e98:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  230e9f:	00 
            _ if hole_addr + hole.size == addr => {
  230ea0:	48 39 c8             	cmp    %rcx,%rax
  230ea3:	74 2c                	je     230ed1 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3b1>
  230ea5:	eb 1a                	jmp    230ec1 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3a1>
  230ea7:	48 8d 3d 52 2c fd ff 	lea    -0x2d3ae(%rip),%rdi        # 203b00 <str.2>
  230eae:	48 8d 15 3b c4 00 00 	lea    0xc43b(%rip),%rdx        # 23d2f0 <memcmp+0x45b0>
  230eb5:	be 1c 00 00 00       	mov    $0x1c,%esi
  230eba:	e8 31 4d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230ebf:	0f 0b                	ud2    
        match next_hole_info {
  230ec1:	48 83 bc 24 00 01 00 	cmpq   $0x1,0x100(%rsp)
  230ec8:	00 01 
  230eca:	74 50                	je     230f1c <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3fc>
  230ecc:	e9 82 00 00 00       	jmpq   230f53 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x433>
                hole.size += size; // merge the F block to this X block
  230ed1:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  230ed8:	00 
  230ed9:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  230ee0:	00 
  230ee1:	48 03 01             	add    (%rcx),%rax
  230ee4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  230ee9:	0f 92 c0             	setb   %al
  230eec:	a8 01                	test   $0x1,%al
  230eee:	75 12                	jne    230f02 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3e2>
  230ef0:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  230ef5:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  230efc:	00 
  230efd:	48 89 08             	mov    %rcx,(%rax)
            _ if hole_addr + hole.size == addr => {
  230f00:	eb 86                	jmp    230e88 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x368>
                hole.size += size; // merge the F block to this X block
  230f02:	48 8d 3d f7 2b fd ff 	lea    -0x2d409(%rip),%rdi        # 203b00 <str.2>
  230f09:	48 8d 15 f8 c3 00 00 	lea    0xc3f8(%rip),%rdx        # 23d308 <memcmp+0x45c8>
  230f10:	be 1c 00 00 00       	mov    $0x1c,%esi
  230f15:	e8 d6 4c 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230f1a:	0f 0b                	ud2    
  230f1c:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  230f23:	00 
            Some(next) if addr + size == next.addr => {
  230f24:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  230f2b:	00 
  230f2c:	48 83 c1 08          	add    $0x8,%rcx
  230f30:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  230f35:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  230f3c:	00 
  230f3d:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  230f44:	00 
  230f45:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  230f4a:	0f 92 c0             	setb   %al
  230f4d:	a8 01                	test   $0x1,%al
  230f4f:	75 3b                	jne    230f8c <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x46c>
  230f51:	eb 28                	jmp    230f7b <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x45b>
                    size: size,
  230f53:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  230f5a:	00 
  230f5b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
                    next: hole.next.take(), // the reference to the Y block (if it exists)
  230f60:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  230f67:	00 
  230f68:	48 83 c7 08          	add    $0x8,%rdi
  230f6c:	e8 5f 04 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  230f71:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230f76:	e9 84 01 00 00       	jmpq   2310ff <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x5df>
  230f7b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  230f80:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            Some(next) if addr + size == next.addr => {
  230f85:	48 3b 01             	cmp    (%rcx),%rax
  230f88:	74 48                	je     230fd2 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x4b2>
  230f8a:	eb 1a                	jmp    230fa6 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x486>
  230f8c:	48 8d 3d 6d 2b fd ff 	lea    -0x2d493(%rip),%rdi        # 203b00 <str.2>
  230f93:	48 8d 15 86 c3 00 00 	lea    0xc386(%rip),%rdx        # 23d320 <memcmp+0x45e0>
  230f9a:	be 1c 00 00 00       	mov    $0x1c,%esi
  230f9f:	e8 4c 4c 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230fa4:	0f 0b                	ud2    
  230fa6:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  230fad:	00 
            Some(next) if next.addr <= addr => {
  230fae:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  230fb5:	00 
  230fb6:	48 83 c1 08          	add    $0x8,%rcx
  230fba:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  230fc1:	00 
  230fc2:	48 39 84 24 08 01 00 	cmp    %rax,0x108(%rsp)
  230fc9:	00 
  230fca:	0f 86 bf 00 00 00    	jbe    23108f <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x56f>
  230fd0:	eb 81                	jmp    230f53 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x433>
            Some(next) if addr + size == next.addr => {
  230fd2:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  230fd9:	00 
  230fda:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  230fe1:	00 
  230fe2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  230fe7:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  230fee:	00 
  230fef:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  230ff6:	00 
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  230ff7:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  230ffe:	00 
  230fff:	48 83 c7 08          	add    $0x8,%rdi
  231003:	e8 f8 03 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  231008:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  23100d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  231012:	48 8d 35 1f c3 00 00 	lea    0xc31f(%rip),%rsi        # 23d338 <memcmp+0x45f8>
  231019:	e8 72 05 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  23101e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  231023:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  231028:	48 8b 38             	mov    (%rax),%rdi
  23102b:	48 83 c7 08          	add    $0x8,%rdi
  23102f:	e8 9c 03 00 00       	callq  2313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  231034:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  231039:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  23103e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  231043:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  23104a:	00 
  23104b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
                size += next.size; // free the merged F/Y block in next iteration
  23104f:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  231056:	00 
  231057:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23105c:	0f 92 c0             	setb   %al
  23105f:	a8 01                	test   $0x1,%al
  231061:	75 12                	jne    231075 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x555>
  231063:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  231068:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  23106f:	00 
  231070:	e9 d2 fa ff ff       	jmpq   230b47 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x27>
  231075:	48 8d 3d 84 2a fd ff 	lea    -0x2d57c(%rip),%rdi        # 203b00 <str.2>
  23107c:	48 8d 15 cd c2 00 00 	lea    0xc2cd(%rip),%rdx        # 23d350 <memcmp+0x4610>
  231083:	be 1c 00 00 00       	mov    $0x1c,%esi
  231088:	e8 63 4b 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23108d:	0f 0b                	ud2    
            Some(next) if next.addr <= addr => {
  23108f:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  231096:	00 
  231097:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  23109e:	00 
  23109f:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  2310a6:	00 
  2310a7:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  2310ae:	00 
                hole = move_helper(hole).next.as_mut().unwrap(); // start next iteration at next hole
  2310af:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  2310b6:	00 
  2310b7:	e8 14 ec ff ff       	callq  22fcd0 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  2310bc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2310c1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2310c6:	48 83 c7 08          	add    $0x8,%rdi
  2310ca:	e8 31 03 00 00       	callq  231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  2310cf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2310d4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2310d9:	48 8d 35 88 c2 00 00 	lea    0xc288(%rip),%rsi        # 23d368 <memcmp+0x4628>
  2310e0:	e8 ab 04 00 00       	callq  231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  2310e5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2310ea:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2310ef:	48 8b 00             	mov    (%rax),%rax
  2310f2:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2310f9:	00 
  2310fa:	e9 48 fa ff ff       	jmpq   230b47 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x27>
  2310ff:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  231104:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                let new_hole = Hole {
  231109:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  231110:	00 
  231111:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  231118:	00 
                debug_assert_eq!(addr % align_of::<Hole>(), 0);
  231119:	b8 08 00 00 00       	mov    $0x8,%eax
  23111e:	48 83 f8 00          	cmp    $0x0,%rax
  231122:	0f 94 c0             	sete   %al
  231125:	a8 01                	test   $0x1,%al
  231127:	75 6b                	jne    231194 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x674>
  231129:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  231130:	00 
  231131:	48 83 e0 07          	and    $0x7,%rax
  231135:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  23113c:	00 
  23113d:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  231144:	00 
  231145:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  23114c:	00 
  23114d:	48 8d 05 94 f1 fc ff 	lea    -0x30e6c(%rip),%rax        # 2002e8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x8e>
  231154:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  23115b:	00 
  23115c:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  231163:	00 
  231164:	48 89 04 24          	mov    %rax,(%rsp)
  231168:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  23116f:	00 
  231170:	48 8b 8c 24 38 01 00 	mov    0x138(%rsp),%rcx
  231177:	00 
  231178:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  23117d:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  231184:	00 
  231185:	48 83 38 00          	cmpq   $0x0,(%rax)
  231189:	0f 94 c0             	sete   %al
  23118c:	34 ff                	xor    $0xff,%al
  23118e:	a8 01                	test   $0x1,%al
  231190:	75 5b                	jne    2311ed <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x6cd>
  231192:	eb 1a                	jmp    2311ae <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x68e>
  231194:	48 8d 3d e5 29 fd ff 	lea    -0x2d61b(%rip),%rdi        # 203b80 <str.3>
  23119b:	48 8d 15 de c1 00 00 	lea    0xc1de(%rip),%rdx        # 23d380 <memcmp+0x4640>
  2311a2:	be 39 00 00 00       	mov    $0x39,%esi
  2311a7:	e8 44 4a 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2311ac:	0f 0b                	ud2    
  2311ae:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  2311b5:	00 
                let ptr = addr as *mut Hole;
  2311b6:	48 89 bc 24 e8 01 00 	mov    %rdi,0x1e8(%rsp)
  2311bd:	00 
                unsafe { ptr.write(new_hole) };
  2311be:	48 8b b4 24 20 01 00 	mov    0x120(%rsp),%rsi
  2311c5:	00 
  2311c6:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  2311cd:	00 
  2311ce:	48 89 bc 24 f0 01 00 	mov    %rdi,0x1f0(%rsp)
  2311d5:	00 
  2311d6:	48 89 b4 24 f8 01 00 	mov    %rsi,0x1f8(%rsp)
  2311dd:	00 
  2311de:	48 89 94 24 00 02 00 	mov    %rdx,0x200(%rsp)
  2311e5:	00 
  2311e6:	e8 c5 08 00 00       	callq  231ab0 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  2311eb:	eb 35                	jmp    231222 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x702>
  2311ed:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2311f2:	48 8b 34 24          	mov    (%rsp),%rsi
                debug_assert_eq!(addr % align_of::<Hole>(), 0);
  2311f6:	c6 84 24 4f 01 00 00 	movb   $0x0,0x14f(%rsp)
  2311fd:	00 
  2311fe:	48 c7 84 24 50 01 00 	movq   $0x0,0x150(%rsp)
  231205:	00 00 00 00 00 
  23120a:	4c 8d 05 87 c1 00 00 	lea    0xc187(%rip),%r8        # 23d398 <memcmp+0x4658>
  231211:	31 ff                	xor    %edi,%edi
  231213:	48 8d 8c 24 50 01 00 	lea    0x150(%rsp),%rcx
  23121a:	00 
  23121b:	e8 b0 07 00 00       	callq  2319d0 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  231220:	0f 0b                	ud2    
  231222:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  231229:	00 
                hole.next = Some(unsafe { &mut *ptr });
  23122a:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  231231:	00 
  231232:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  231239:	00 
  23123a:	48 8b 8c 24 80 01 00 	mov    0x180(%rsp),%rcx
  231241:	00 
  231242:	48 89 48 08          	mov    %rcx,0x8(%rax)
            }
  231246:	e9 3d fc ff ff       	jmpq   230e88 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x368>
  23124b:	cc                   	int3   
  23124c:	cc                   	int3   
  23124d:	cc                   	int3   
  23124e:	cc                   	int3   
  23124f:	cc                   	int3   

0000000000231250 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbbaec3072ab18b17E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  231250:	48 83 ec 18          	sub    $0x18,%rsp
  231254:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231259:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23125e:	48 8b 3f             	mov    (%rdi),%rdi
  231261:	e8 1a 00 00 00       	callq  231280 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E>
  231266:	88 44 24 07          	mov    %al,0x7(%rsp)
  23126a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23126e:	24 01                	and    $0x1,%al
  231270:	0f b6 c0             	movzbl %al,%eax
  231273:	48 83 c4 18          	add    $0x18,%rsp
  231277:	c3                   	retq   
  231278:	cc                   	int3   
  231279:	cc                   	int3   
  23127a:	cc                   	int3   
  23127b:	cc                   	int3   
  23127c:	cc                   	int3   
  23127d:	cc                   	int3   
  23127e:	cc                   	int3   
  23127f:	cc                   	int3   

0000000000231280 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231280:	48 83 ec 38          	sub    $0x38,%rsp
  231284:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231289:	48 89 f8             	mov    %rdi,%rax
  23128c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231291:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231296:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23129b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  2312a0:	e8 3b 6c 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  2312a5:	88 44 24 26          	mov    %al,0x26(%rsp)
  2312a9:	8a 44 24 26          	mov    0x26(%rsp),%al
  2312ad:	a8 01                	test   $0x1,%al
  2312af:	75 12                	jne    2312c3 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x43>
  2312b1:	eb 00                	jmp    2312b3 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x33>
  2312b3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  2312b8:	e8 33 6c 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2312bd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2312c1:	eb 25                	jmp    2312e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x68>
  2312c3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2312c8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  2312cd:	e8 fe 3b 00 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  2312d2:	24 01                	and    $0x1,%al
  2312d4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  2312d8:	eb 00                	jmp    2312da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x5a>
            }
  2312da:	8a 44 24 27          	mov    0x27(%rsp),%al
  2312de:	24 01                	and    $0x1,%al
  2312e0:	0f b6 c0             	movzbl %al,%eax
  2312e3:	48 83 c4 38          	add    $0x38,%rsp
  2312e7:	c3                   	retq   
  2312e8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  2312ec:	a8 01                	test   $0x1,%al
  2312ee:	75 19                	jne    231309 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x89>
  2312f0:	eb 00                	jmp    2312f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x72>
  2312f2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2312f7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2312fc:	e8 ff 59 00 00       	callq  236d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  231301:	24 01                	and    $0x1,%al
  231303:	88 44 24 27          	mov    %al,0x27(%rsp)
  231307:	eb 19                	jmp    231322 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa2>
  231309:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  23130e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231313:	e8 58 3c 00 00       	callq  234f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  231318:	24 01                	and    $0x1,%al
  23131a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  23131e:	eb 00                	jmp    231320 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa0>
                if f.debug_lower_hex() {
  231320:	eb b8                	jmp    2312da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x5a>
                } else if f.debug_upper_hex() {
  231322:	eb fc                	jmp    231320 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa0>
  231324:	cc                   	int3   
  231325:	cc                   	int3   
  231326:	cc                   	int3   
  231327:	cc                   	int3   
  231328:	cc                   	int3   
  231329:	cc                   	int3   
  23132a:	cc                   	int3   
  23132b:	cc                   	int3   
  23132c:	cc                   	int3   
  23132d:	cc                   	int3   
  23132e:	cc                   	int3   
  23132f:	cc                   	int3   

0000000000231330 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  231330:	48 83 ec 48          	sub    $0x48,%rsp
  231334:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231339:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  23133e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        match self {
  231343:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  231348:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  23134d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  231352:	48 85 c0             	test   %rax,%rax
  231355:	0f 95 c0             	setne  %al
  231358:	0f b6 c0             	movzbl %al,%eax
  23135b:	74 06                	je     231363 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x33>
  23135d:	eb 00                	jmp    23135f <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x2f>
  23135f:	eb 10                	jmp    231371 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x41>
  231361:	0f 0b                	ud2    
  231363:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  231368:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  23136f:	eb 44                	jmp    2313b5 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x85>
            Some(x) => Some(f(x)),
  231371:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  231376:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23137b:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  231380:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231385:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  23138a:	e8 11 e9 ff ff       	callq  22fca0 <_ZN21linked_list_allocator4hole10deallocate28_$u7b$$u7b$closure$u7d$$u7d$17hce09692d5969a953E>
  23138f:	48 89 04 24          	mov    %rax,(%rsp)
  231393:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231398:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23139d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2313a2:	48 8b 14 24          	mov    (%rsp),%rdx
  2313a6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  2313aa:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2313ae:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  2313b5:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  2313ba:	75 0a                	jne    2313c6 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x96>
  2313bc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2313c1:	48 83 c4 48          	add    $0x48,%rsp
  2313c5:	c3                   	retq   
  2313c6:	eb f4                	jmp    2313bc <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x8c>
  2313c8:	cc                   	int3   
  2313c9:	cc                   	int3   
  2313ca:	cc                   	int3   
  2313cb:	cc                   	int3   
  2313cc:	cc                   	int3   
  2313cd:	cc                   	int3   
  2313ce:	cc                   	int3   
  2313cf:	cc                   	int3   

00000000002313d0 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>:
    pub const fn take(&mut self) -> Option<T> {
  2313d0:	48 83 ec 18          	sub    $0x18,%rsp
  2313d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        mem::replace(self, None)
  2313d9:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2313e0:	00 00 
  2313e2:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2313e7:	e8 c4 02 00 00       	callq  2316b0 <_ZN4core3mem7replace17h8cfda8e0b29e0426E>
  2313ec:	48 89 04 24          	mov    %rax,(%rsp)
  2313f0:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2313f4:	48 83 c4 18          	add    $0x18,%rsp
  2313f8:	c3                   	retq   
  2313f9:	cc                   	int3   
  2313fa:	cc                   	int3   
  2313fb:	cc                   	int3   
  2313fc:	cc                   	int3   
  2313fd:	cc                   	int3   
  2313fe:	cc                   	int3   
  2313ff:	cc                   	int3   

0000000000231400 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>:
    pub const fn as_mut(&mut self) -> Option<&mut T> {
  231400:	48 83 ec 20          	sub    $0x20,%rsp
  231404:	48 89 3c 24          	mov    %rdi,(%rsp)
  231408:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  23140d:	48 8b 07             	mov    (%rdi),%rax
  231410:	48 85 c0             	test   %rax,%rax
  231413:	0f 95 c0             	setne  %al
  231416:	0f b6 c0             	movzbl %al,%eax
  231419:	74 06                	je     231421 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x21>
  23141b:	eb 00                	jmp    23141d <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x1d>
  23141d:	eb 0d                	jmp    23142c <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x2c>
  23141f:	0f 0b                	ud2    
            None => None,
  231421:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  231428:	00 00 
  23142a:	eb 0e                	jmp    23143a <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x3a>
  23142c:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref mut x) => Some(x),
  231430:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231435:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  23143a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23143f:	48 83 c4 20          	add    $0x20,%rsp
  231443:	c3                   	retq   
  231444:	cc                   	int3   
  231445:	cc                   	int3   
  231446:	cc                   	int3   
  231447:	cc                   	int3   
  231448:	cc                   	int3   
  231449:	cc                   	int3   
  23144a:	cc                   	int3   
  23144b:	cc                   	int3   
  23144c:	cc                   	int3   
  23144d:	cc                   	int3   
  23144e:	cc                   	int3   
  23144f:	cc                   	int3   

0000000000231450 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E>:
    pub const fn as_ref(&self) -> Option<&T> {
  231450:	48 83 ec 20          	sub    $0x20,%rsp
  231454:	48 89 3c 24          	mov    %rdi,(%rsp)
  231458:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  23145d:	48 8b 07             	mov    (%rdi),%rax
  231460:	48 85 c0             	test   %rax,%rax
  231463:	0f 95 c0             	setne  %al
  231466:	0f b6 c0             	movzbl %al,%eax
  231469:	74 06                	je     231471 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x21>
  23146b:	eb 00                	jmp    23146d <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x1d>
  23146d:	eb 0d                	jmp    23147c <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x2c>
  23146f:	0f 0b                	ud2    
            None => None,
  231471:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  231478:	00 00 
  23147a:	eb 0e                	jmp    23148a <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x3a>
  23147c:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  231480:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231485:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  23148a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23148f:	48 83 c4 20          	add    $0x20,%rsp
  231493:	c3                   	retq   
  231494:	cc                   	int3   
  231495:	cc                   	int3   
  231496:	cc                   	int3   
  231497:	cc                   	int3   
  231498:	cc                   	int3   
  231499:	cc                   	int3   
  23149a:	cc                   	int3   
  23149b:	cc                   	int3   
  23149c:	cc                   	int3   
  23149d:	cc                   	int3   
  23149e:	cc                   	int3   
  23149f:	cc                   	int3   

00000000002314a0 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE>:
    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
  2314a0:	48 83 ec 48          	sub    $0x48,%rsp
  2314a4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2314a9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2314ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match self {
  2314b3:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  2314b8:	c6 44 24 2e 00       	movb   $0x0,0x2e(%rsp)
  2314bd:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  2314c2:	c6 44 24 2e 01       	movb   $0x1,0x2e(%rsp)
  2314c7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2314cc:	48 85 c0             	test   %rax,%rax
  2314cf:	0f 95 c0             	setne  %al
  2314d2:	0f b6 c0             	movzbl %al,%eax
  2314d5:	74 06                	je     2314dd <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x3d>
  2314d7:	eb 00                	jmp    2314d9 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x39>
  2314d9:	eb 13                	jmp    2314ee <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x4e>
  2314db:	0f 0b                	ud2    
  2314dd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            None => default,
  2314e2:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  2314e7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2314ec:	eb 25                	jmp    231513 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x73>
            Some(t) => f(t),
  2314ee:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2314f3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2314f8:	c6 44 24 2e 00       	movb   $0x0,0x2e(%rsp)
  2314fd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  231502:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  231507:	e8 f4 05 00 00       	callq  231b00 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h6c2ffa1bccbae6d3E>
  23150c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  231511:	eb 00                	jmp    231513 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x73>
  231513:	f6 44 24 2e 01       	testb  $0x1,0x2e(%rsp)
  231518:	75 09                	jne    231523 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x83>
  23151a:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  23151f:	75 0e                	jne    23152f <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x8f>
  231521:	eb 02                	jmp    231525 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x85>
  231523:	eb f5                	jmp    23151a <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x7a>
  231525:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23152a:	48 83 c4 48          	add    $0x48,%rsp
  23152e:	c3                   	retq   
  23152f:	eb f4                	jmp    231525 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x85>
  231531:	cc                   	int3   
  231532:	cc                   	int3   
  231533:	cc                   	int3   
  231534:	cc                   	int3   
  231535:	cc                   	int3   
  231536:	cc                   	int3   
  231537:	cc                   	int3   
  231538:	cc                   	int3   
  231539:	cc                   	int3   
  23153a:	cc                   	int3   
  23153b:	cc                   	int3   
  23153c:	cc                   	int3   
  23153d:	cc                   	int3   
  23153e:	cc                   	int3   
  23153f:	cc                   	int3   

0000000000231540 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E>:
    pub const fn unwrap(self) -> T {
  231540:	48 83 ec 18          	sub    $0x18,%rsp
  231544:	48 89 34 24          	mov    %rsi,(%rsp)
  231548:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  23154d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231552:	48 85 c0             	test   %rax,%rax
  231555:	0f 95 c0             	setne  %al
  231558:	0f b6 c0             	movzbl %al,%eax
  23155b:	74 06                	je     231563 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x23>
  23155d:	eb 00                	jmp    23155f <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x1f>
  23155f:	eb 19                	jmp    23157a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x3a>
  231561:	0f 0b                	ud2    
  231563:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  231567:	48 8d 3d 4b 26 fd ff 	lea    -0x2d9b5(%rip),%rdi        # 203bb9 <str.3+0x39>
  23156e:	be 2b 00 00 00       	mov    $0x2b,%esi
  231573:	e8 78 46 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231578:	0f 0b                	ud2    
            Some(val) => val,
  23157a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23157f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  231584:	48 83 c4 18          	add    $0x18,%rsp
  231588:	c3                   	retq   
  231589:	cc                   	int3   
  23158a:	cc                   	int3   
  23158b:	cc                   	int3   
  23158c:	cc                   	int3   
  23158d:	cc                   	int3   
  23158e:	cc                   	int3   
  23158f:	cc                   	int3   

0000000000231590 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>:
    pub const fn unwrap(self) -> T {
  231590:	48 83 ec 18          	sub    $0x18,%rsp
  231594:	48 89 34 24          	mov    %rsi,(%rsp)
  231598:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  23159d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2315a2:	48 85 c0             	test   %rax,%rax
  2315a5:	0f 95 c0             	setne  %al
  2315a8:	0f b6 c0             	movzbl %al,%eax
  2315ab:	74 06                	je     2315b3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x23>
  2315ad:	eb 00                	jmp    2315af <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x1f>
  2315af:	eb 19                	jmp    2315ca <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x3a>
  2315b1:	0f 0b                	ud2    
  2315b3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2315b7:	48 8d 3d fb 25 fd ff 	lea    -0x2da05(%rip),%rdi        # 203bb9 <str.3+0x39>
  2315be:	be 2b 00 00 00       	mov    $0x2b,%esi
  2315c3:	e8 28 46 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2315c8:	0f 0b                	ud2    
            Some(val) => val,
  2315ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2315cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2315d4:	48 83 c4 18          	add    $0x18,%rsp
  2315d8:	c3                   	retq   
  2315d9:	cc                   	int3   
  2315da:	cc                   	int3   
  2315db:	cc                   	int3   
  2315dc:	cc                   	int3   
  2315dd:	cc                   	int3   
  2315de:	cc                   	int3   
  2315df:	cc                   	int3   

00000000002315e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE>:
    pub const fn is_some(&self) -> bool {
  2315e0:	48 83 ec 10          	sub    $0x10,%rsp
  2315e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  2315e9:	b8 01 00 00 00       	mov    $0x1,%eax
  2315ee:	31 c9                	xor    %ecx,%ecx
  2315f0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  2315f4:	48 0f 44 c1          	cmove  %rcx,%rax
  2315f8:	48 83 f8 01          	cmp    $0x1,%rax
  2315fc:	75 07                	jne    231605 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE+0x25>
  2315fe:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  231603:	eb 05                	jmp    23160a <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE+0x2a>
  231605:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  23160a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23160e:	24 01                	and    $0x1,%al
  231610:	0f b6 c0             	movzbl %al,%eax
  231613:	48 83 c4 10          	add    $0x10,%rsp
  231617:	c3                   	retq   
  231618:	cc                   	int3   
  231619:	cc                   	int3   
  23161a:	cc                   	int3   
  23161b:	cc                   	int3   
  23161c:	cc                   	int3   
  23161d:	cc                   	int3   
  23161e:	cc                   	int3   
  23161f:	cc                   	int3   

0000000000231620 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E>:
    pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {
  231620:	48 83 ec 48          	sub    $0x48,%rsp
  231624:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231629:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23162e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  231633:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  231638:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
        match self {
  23163d:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  231642:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  231647:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  23164c:	48 85 c0             	test   %rax,%rax
  23164f:	0f 95 c0             	setne  %al
  231652:	0f b6 c0             	movzbl %al,%eax
  231655:	74 06                	je     23165d <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x3d>
  231657:	eb 00                	jmp    231659 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x39>
  231659:	eb 11                	jmp    23166c <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x4c>
  23165b:	0f 0b                	ud2    
  23165d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  231662:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  231669:	00 
  23166a:	eb 2a                	jmp    231696 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x76>
  23166c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  231671:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            Some(x) => f(x),
  231676:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  23167b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  231680:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  231685:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23168a:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  23168f:	e8 9c e5 ff ff       	callq  22fc30 <_ZN21linked_list_allocator4hole18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h722a943daf4b1ee7E>
    }
  231694:	eb 00                	jmp    231696 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x76>
  231696:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  23169b:	75 0a                	jne    2316a7 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x87>
  23169d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2316a2:	48 83 c4 48          	add    $0x48,%rsp
  2316a6:	c3                   	retq   
  2316a7:	eb f4                	jmp    23169d <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x7d>
  2316a9:	cc                   	int3   
  2316aa:	cc                   	int3   
  2316ab:	cc                   	int3   
  2316ac:	cc                   	int3   
  2316ad:	cc                   	int3   
  2316ae:	cc                   	int3   
  2316af:	cc                   	int3   

00000000002316b0 <_ZN4core3mem7replace17h8cfda8e0b29e0426E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  2316b0:	48 83 ec 38          	sub    $0x38,%rsp
  2316b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2316b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2316be:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2316c3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let result = ptr::read(dest);
  2316c8:	e8 83 03 00 00       	callq  231a50 <_ZN4core3ptr4read17hdd7dbfb036171af8E>
  2316cd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2316d2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2316d7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2316dc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  2316e1:	e8 fa 03 00 00       	callq  231ae0 <_ZN4core3ptr5write17hab16ce5a0dfde322E>
  2316e6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  2316eb:	48 83 c4 38          	add    $0x38,%rsp
  2316ef:	c3                   	retq   

00000000002316f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  2316f0:	48 83 ec 10          	sub    $0x10,%rsp
  2316f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  2316f9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  2316fd:	48 8b 04 24          	mov    (%rsp),%rax
  231701:	48 83 c4 10          	add    $0x10,%rsp
  231705:	c3                   	retq   
  231706:	cc                   	int3   
  231707:	cc                   	int3   
  231708:	cc                   	int3   
  231709:	cc                   	int3   
  23170a:	cc                   	int3   
  23170b:	cc                   	int3   
  23170c:	cc                   	int3   
  23170d:	cc                   	int3   
  23170e:	cc                   	int3   
  23170f:	cc                   	int3   

0000000000231710 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
  231710:	48 83 ec 28          	sub    $0x28,%rsp
  231714:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231719:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        if !ptr.is_null() {
  23171e:	e8 2d 04 00 00       	callq  231b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  231723:	88 44 24 17          	mov    %al,0x17(%rsp)
  231727:	8a 44 24 17          	mov    0x17(%rsp),%al
  23172b:	34 ff                	xor    $0xff,%al
  23172d:	a8 01                	test   $0x1,%al
  23172f:	75 0b                	jne    23173c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E+0x2c>
            None
  231731:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  231738:	00 00 
        if !ptr.is_null() {
  23173a:	eb 17                	jmp    231753 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E+0x43>
  23173c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(unsafe { Self::new_unchecked(ptr) })
  231741:	e8 aa ff ff ff       	callq  2316f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>
  231746:	48 89 04 24          	mov    %rax,(%rsp)
  23174a:	48 8b 04 24          	mov    (%rsp),%rax
  23174e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  231753:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231758:	48 83 c4 28          	add    $0x28,%rsp
  23175c:	c3                   	retq   
  23175d:	cc                   	int3   
  23175e:	cc                   	int3   
  23175f:	cc                   	int3   

0000000000231760 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>:
    pub const fn as_ptr(self) -> *mut T {
  231760:	50                   	push   %rax
  231761:	48 89 f8             	mov    %rdi,%rax
  231764:	48 89 04 24          	mov    %rax,(%rsp)
    }
  231768:	59                   	pop    %rcx
  231769:	c3                   	retq   
  23176a:	cc                   	int3   
  23176b:	cc                   	int3   
  23176c:	cc                   	int3   
  23176d:	cc                   	int3   
  23176e:	cc                   	int3   
  23176f:	cc                   	int3   

0000000000231770 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
  231770:	48 83 ec 68          	sub    $0x68,%rsp
  231774:	48 89 f1             	mov    %rsi,%rcx
  231777:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  23177c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231781:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  231786:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  23178b:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  231790:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  231795:	48 89 c8             	mov    %rcx,%rax
  231798:	48 d1 e8             	shr    %rax
  23179b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  2317a2:	55 55 55 
  2317a5:	48 21 d0             	and    %rdx,%rax
  2317a8:	48 29 c1             	sub    %rax,%rcx
  2317ab:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  2317b2:	33 33 33 
  2317b5:	48 89 c8             	mov    %rcx,%rax
  2317b8:	48 21 d0             	and    %rdx,%rax
  2317bb:	48 c1 e9 02          	shr    $0x2,%rcx
  2317bf:	48 21 d1             	and    %rdx,%rcx
  2317c2:	48 01 c8             	add    %rcx,%rax
  2317c5:	48 89 c1             	mov    %rax,%rcx
  2317c8:	48 c1 e9 04          	shr    $0x4,%rcx
  2317cc:	48 01 c8             	add    %rcx,%rax
  2317cf:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  2317d6:	0f 0f 0f 
  2317d9:	48 21 c8             	and    %rcx,%rax
  2317dc:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  2317e3:	01 01 01 
  2317e6:	48 0f af c1          	imul   %rcx,%rax
  2317ea:	48 c1 e8 38          	shr    $0x38,%rax
  2317ee:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2317f3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            self.count_ones() == 1
  2317f8:	83 f8 01             	cmp    $0x1,%eax
  2317fb:	0f 94 c0             	sete   %al
  2317fe:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  231802:	8a 44 24 2f          	mov    0x2f(%rsp),%al
        if !align.is_power_of_two() {
  231806:	34 ff                	xor    $0xff,%al
  231808:	a8 01                	test   $0x1,%al
  23180a:	75 1f                	jne    23182b <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xbb>
  23180c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  231811:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        if size > usize::MAX - (align - 1) {
  231816:	48 83 ea 01          	sub    $0x1,%rdx
  23181a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  231821:	48 29 d1             	sub    %rdx,%rcx
  231824:	48 39 c8             	cmp    %rcx,%rax
  231827:	77 35                	ja     23185e <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xee>
  231829:	eb 18                	jmp    231843 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xd3>
            return Err(LayoutError);
  23182b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  231832:	00 00 
    }
  231834:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  231839:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  23183e:	48 83 c4 68          	add    $0x68,%rsp
  231842:	c3                   	retq   
  231843:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  231848:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  23184d:	e8 2e 00 00 00       	callq  231880 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h4e6253542dc56179E>
  231852:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231857:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  23185c:	eb 0b                	jmp    231869 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xf9>
            return Err(LayoutError);
  23185e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  231865:	00 00 
  231867:	eb cb                	jmp    231834 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xc4>
  231869:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23186e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  231873:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  231878:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  23187d:	eb b5                	jmp    231834 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xc4>
  23187f:	cc                   	int3   

0000000000231880 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h4e6253542dc56179E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
  231880:	48 83 ec 38          	sub    $0x38,%rsp
  231884:	48 89 34 24          	mov    %rsi,(%rsp)
  231888:	48 89 f8             	mov    %rdi,%rax
  23188b:	48 8b 3c 24          	mov    (%rsp),%rdi
  23188f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231894:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231899:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
  23189e:	e8 fd 00 00 00       	callq  2319a0 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h03b3691e373d07dfE>
  2318a3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2318a8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2318ad:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2318b2:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2318b7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2318bc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2318c1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2318c6:	48 83 c4 38          	add    $0x38,%rsp
  2318ca:	c3                   	retq   
  2318cb:	cc                   	int3   
  2318cc:	cc                   	int3   
  2318cd:	cc                   	int3   
  2318ce:	cc                   	int3   
  2318cf:	cc                   	int3   

00000000002318d0 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>:
    pub const fn size(&self) -> usize {
  2318d0:	50                   	push   %rax
  2318d1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.size_
  2318d5:	48 8b 07             	mov    (%rdi),%rax
    }
  2318d8:	59                   	pop    %rcx
  2318d9:	c3                   	retq   
  2318da:	cc                   	int3   
  2318db:	cc                   	int3   
  2318dc:	cc                   	int3   
  2318dd:	cc                   	int3   
  2318de:	cc                   	int3   
  2318df:	cc                   	int3   

00000000002318e0 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>:
    pub const fn align(&self) -> usize {
  2318e0:	48 83 ec 18          	sub    $0x18,%rsp
  2318e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.align_.get()
  2318e9:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  2318ed:	e8 ce 00 00 00       	callq  2319c0 <_ZN4core3num7nonzero12NonZeroUsize3get17hcc61901f7ed5caa6E>
  2318f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2318f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2318fc:	48 83 c4 18          	add    $0x18,%rsp
  231900:	c3                   	retq   
  231901:	cc                   	int3   
  231902:	cc                   	int3   
  231903:	cc                   	int3   
  231904:	cc                   	int3   
  231905:	cc                   	int3   
  231906:	cc                   	int3   
  231907:	cc                   	int3   
  231908:	cc                   	int3   
  231909:	cc                   	int3   
  23190a:	cc                   	int3   
  23190b:	cc                   	int3   
  23190c:	cc                   	int3   
  23190d:	cc                   	int3   
  23190e:	cc                   	int3   
  23190f:	cc                   	int3   

0000000000231910 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h05f73b6f8579d946E>:
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
  231910:	50                   	push   %rax
  231911:	48 89 3c 24          	mov    %rdi,(%rsp)
  231915:	48 8b 07             	mov    (%rdi),%rax
  231918:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  23191c:	59                   	pop    %rcx
  23191d:	c3                   	retq   
  23191e:	cc                   	int3   
  23191f:	cc                   	int3   

0000000000231920 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>:
    fn deref_mut(&mut self) -> &mut T {
  231920:	48 83 ec 18          	sub    $0x18,%rsp
  231924:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { &mut *self.mutex.data.get() }
  231929:	48 8b 07             	mov    (%rdi),%rax
  23192c:	48 83 c0 08          	add    $0x8,%rax
  231930:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  231935:	48 89 04 24          	mov    %rax,(%rsp)
  231939:	48 8b 04 24          	mov    (%rsp),%rax
    }
  23193d:	48 83 c4 18          	add    $0x18,%rsp
  231941:	c3                   	retq   
  231942:	cc                   	int3   
  231943:	cc                   	int3   
  231944:	cc                   	int3   
  231945:	cc                   	int3   
  231946:	cc                   	int3   
  231947:	cc                   	int3   
  231948:	cc                   	int3   
  231949:	cc                   	int3   
  23194a:	cc                   	int3   
  23194b:	cc                   	int3   
  23194c:	cc                   	int3   
  23194d:	cc                   	int3   
  23194e:	cc                   	int3   
  23194f:	cc                   	int3   

0000000000231950 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>:
    pub fn lock(&self) -> MutexGuard<'_, R, T> {
  231950:	48 83 ec 18          	sub    $0x18,%rsp
  231954:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231959:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.raw.lock();
  23195e:	e8 6d 02 00 00       	callq  231bd0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE>
  231963:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { self.guard() }
  231968:	e8 13 00 00 00       	callq  231980 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$5guard17h9370ddc551871dc3E>
  23196d:	48 89 04 24          	mov    %rax,(%rsp)
  231971:	48 8b 04 24          	mov    (%rsp),%rax
    }
  231975:	48 83 c4 18          	add    $0x18,%rsp
  231979:	c3                   	retq   
  23197a:	cc                   	int3   
  23197b:	cc                   	int3   
  23197c:	cc                   	int3   
  23197d:	cc                   	int3   
  23197e:	cc                   	int3   
  23197f:	cc                   	int3   

0000000000231980 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$5guard17h9370ddc551871dc3E>:
    unsafe fn guard(&self) -> MutexGuard<'_, R, T> {
  231980:	48 83 ec 10          	sub    $0x10,%rsp
  231984:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        MutexGuard {
  231989:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  23198d:	48 8b 04 24          	mov    (%rsp),%rax
  231991:	48 83 c4 10          	add    $0x10,%rsp
  231995:	c3                   	retq   
  231996:	cc                   	int3   
  231997:	cc                   	int3   
  231998:	cc                   	int3   
  231999:	cc                   	int3   
  23199a:	cc                   	int3   
  23199b:	cc                   	int3   
  23199c:	cc                   	int3   
  23199d:	cc                   	int3   
  23199e:	cc                   	int3   
  23199f:	cc                   	int3   

00000000002319a0 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h03b3691e373d07dfE>:
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
  2319a0:	48 83 ec 10          	sub    $0x10,%rsp
  2319a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                    unsafe { Self(n) }
  2319a9:	48 89 3c 24          	mov    %rdi,(%rsp)
                }
  2319ad:	48 8b 04 24          	mov    (%rsp),%rax
  2319b1:	48 83 c4 10          	add    $0x10,%rsp
  2319b5:	c3                   	retq   
  2319b6:	cc                   	int3   
  2319b7:	cc                   	int3   
  2319b8:	cc                   	int3   
  2319b9:	cc                   	int3   
  2319ba:	cc                   	int3   
  2319bb:	cc                   	int3   
  2319bc:	cc                   	int3   
  2319bd:	cc                   	int3   
  2319be:	cc                   	int3   
  2319bf:	cc                   	int3   

00000000002319c0 <_ZN4core3num7nonzero12NonZeroUsize3get17hcc61901f7ed5caa6E>:
                pub const fn get(self) -> $Int {
  2319c0:	50                   	push   %rax
  2319c1:	48 89 f8             	mov    %rdi,%rax
  2319c4:	48 89 04 24          	mov    %rax,(%rsp)
                }
  2319c8:	59                   	pop    %rcx
  2319c9:	c3                   	retq   
  2319ca:	cc                   	int3   
  2319cb:	cc                   	int3   
  2319cc:	cc                   	int3   
  2319cd:	cc                   	int3   
  2319ce:	cc                   	int3   
  2319cf:	cc                   	int3   

00000000002319d0 <_ZN4core9panicking13assert_failed17h495489438e8657baE>:
pub fn assert_failed<T, U>(
  2319d0:	48 83 ec 58          	sub    $0x58,%rsp
  2319d4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  2319d9:	48 89 d1             	mov    %rdx,%rcx
  2319dc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2319e1:	40 88 f8             	mov    %dil,%al
  2319e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2319e9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2319ee:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  2319f2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  2319f6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2319fb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  2319ff:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  231a04:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  231a08:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  231a0d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  231a11:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  231a16:	48 8b 0a             	mov    (%rdx),%rcx
  231a19:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  231a1d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  231a22:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  231a27:	48 89 e1             	mov    %rsp,%rcx
  231a2a:	4c 89 01             	mov    %r8,(%rcx)
  231a2d:	0f b6 f8             	movzbl %al,%edi
  231a30:	4c 8d 05 79 b9 00 00 	lea    0xb979(%rip),%r8        # 23d3b0 <memcmp+0x4670>
  231a37:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  231a3c:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  231a41:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  231a46:	4c 89 c2             	mov    %r8,%rdx
  231a49:	e8 b2 42 00 00       	callq  235d00 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  231a4e:	0f 0b                	ud2    

0000000000231a50 <_ZN4core3ptr4read17hdd7dbfb036171af8E>:
pub const unsafe fn read<T>(src: *const T) -> T {
  231a50:	48 83 ec 48          	sub    $0x48,%rsp
  231a54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231a59:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231a5e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    let mut tmp = MaybeUninit::<T>::uninit();
  231a63:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231a68:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  231a6d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_unstable(feature = "const_maybe_uninit_as_ptr", issue = "75251")]
    #[inline(always)]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.
        self as *mut _ as *mut T
  231a72:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  231a77:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231a7c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231a81:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  231a86:	48 8b 09             	mov    (%rcx),%rcx
  231a89:	48 89 08             	mov    %rcx,(%rax)
        tmp.assume_init()
  231a8c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231a91:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  231a96:	48 89 04 24          	mov    %rax,(%rsp)
  231a9a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  231a9f:	48 8b 04 24          	mov    (%rsp),%rax
}
  231aa3:	48 83 c4 48          	add    $0x48,%rsp
  231aa7:	c3                   	retq   
  231aa8:	cc                   	int3   
  231aa9:	cc                   	int3   
  231aaa:	cc                   	int3   
  231aab:	cc                   	int3   
  231aac:	cc                   	int3   
  231aad:	cc                   	int3   
  231aae:	cc                   	int3   
  231aaf:	cc                   	int3   

0000000000231ab0 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  231ab0:	48 83 ec 18          	sub    $0x18,%rsp
  231ab4:	48 89 34 24          	mov    %rsi,(%rsp)
  231ab8:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231abd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  231ac2:	48 8b 04 24          	mov    (%rsp),%rax
  231ac6:	48 89 07             	mov    %rax,(%rdi)
  231ac9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231ace:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
  231ad2:	48 83 c4 18          	add    $0x18,%rsp
  231ad6:	c3                   	retq   
  231ad7:	cc                   	int3   
  231ad8:	cc                   	int3   
  231ad9:	cc                   	int3   
  231ada:	cc                   	int3   
  231adb:	cc                   	int3   
  231adc:	cc                   	int3   
  231add:	cc                   	int3   
  231ade:	cc                   	int3   
  231adf:	cc                   	int3   

0000000000231ae0 <_ZN4core3ptr5write17hab16ce5a0dfde322E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  231ae0:	48 83 ec 10          	sub    $0x10,%rsp
  231ae4:	48 89 34 24          	mov    %rsi,(%rsp)
  231ae8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  231aed:	48 8b 04 24          	mov    (%rsp),%rax
  231af1:	48 89 07             	mov    %rax,(%rdi)
}
  231af4:	48 83 c4 10          	add    $0x10,%rsp
  231af8:	c3                   	retq   
  231af9:	cc                   	int3   
  231afa:	cc                   	int3   
  231afb:	cc                   	int3   
  231afc:	cc                   	int3   
  231afd:	cc                   	int3   
  231afe:	cc                   	int3   
  231aff:	cc                   	int3   

0000000000231b00 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h6c2ffa1bccbae6d3E>:
            .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
  231b00:	48 83 ec 18          	sub    $0x18,%rsp
  231b04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231b09:	e8 52 fc ff ff       	callq  231760 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>
  231b0e:	48 89 04 24          	mov    %rax,(%rsp)
  231b12:	48 8b 04 24          	mov    (%rsp),%rax
  231b16:	48 83 c4 18          	add    $0x18,%rsp
  231b1a:	c3                   	retq   
  231b1b:	cc                   	int3   
  231b1c:	cc                   	int3   
  231b1d:	cc                   	int3   
  231b1e:	cc                   	int3   
  231b1f:	cc                   	int3   

0000000000231b20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h7684fdc8db94093aE>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  231b20:	48 83 ec 20          	sub    $0x20,%rsp
  231b24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231b29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  231b2e:	48 39 f7             	cmp    %rsi,%rdi
  231b31:	0f 94 c0             	sete   %al
  231b34:	24 01                	and    $0x1,%al
  231b36:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231b3a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  231b3e:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b42:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  231b46:	24 01                	and    $0x1,%al
  231b48:	0f b6 c0             	movzbl %al,%eax
  231b4b:	48 83 c4 20          	add    $0x20,%rsp
  231b4f:	c3                   	retq   

0000000000231b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>:
    pub const fn is_null(self) -> bool {
  231b50:	48 83 ec 18          	sub    $0x18,%rsp
  231b54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231b59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231b5e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  231b63:	31 c0                	xor    %eax,%eax
  231b65:	89 c6                	mov    %eax,%esi
  231b67:	e8 b4 ff ff ff       	callq  231b20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h7684fdc8db94093aE>
  231b6c:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b70:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  231b74:	24 01                	and    $0x1,%al
  231b76:	0f b6 c0             	movzbl %al,%eax
  231b79:	48 83 c4 18          	add    $0x18,%rsp
  231b7d:	c3                   	retq   
  231b7e:	cc                   	int3   
  231b7f:	cc                   	int3   

0000000000231b80 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h42b408fa10232bccE>:
}

impl RawSpinlock {
    // Can fail to lock even if the spinlock is not locked. May be more efficient than `try_lock`
    // when called in a loop.
    fn try_lock_weak(&self) -> bool {
  231b80:	48 83 ec 18          	sub    $0x18,%rsp
  231b84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // The Orderings are the same as try_lock, and are still correct here.
        self.locked
            .compare_exchange_weak(false, true, Ordering::Acquire, Ordering::Relaxed)
  231b89:	c6 44 24 0e 02       	movb   $0x2,0xe(%rsp)
  231b8e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        self.locked
  231b93:	44 0f b6 44 24 0f    	movzbl 0xf(%rsp),%r8d
  231b99:	0f b6 4c 24 0e       	movzbl 0xe(%rsp),%ecx
  231b9e:	31 f6                	xor    %esi,%esi
  231ba0:	ba 01 00 00 00       	mov    $0x1,%edx
  231ba5:	e8 06 01 00 00       	callq  231cb0 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E>
  231baa:	88 54 24 09          	mov    %dl,0x9(%rsp)
  231bae:	88 44 24 08          	mov    %al,0x8(%rsp)
  231bb2:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  231bb7:	e8 b4 00 00 00       	callq  231c70 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E>
  231bbc:	88 44 24 07          	mov    %al,0x7(%rsp)
  231bc0:	8a 44 24 07          	mov    0x7(%rsp),%al
            .is_ok()
    }
  231bc4:	24 01                	and    $0x1,%al
  231bc6:	0f b6 c0             	movzbl %al,%eax
  231bc9:	48 83 c4 18          	add    $0x18,%rsp
  231bcd:	c3                   	retq   
  231bce:	cc                   	int3   
  231bcf:	cc                   	int3   

0000000000231bd0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE>:
    };

    // A spinlock guard can be sent to another thread and unlocked there
    type GuardMarker = GuardSend;

    fn lock(&self) {
  231bd0:	48 83 ec 18          	sub    $0x18,%rsp
  231bd4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231bd9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231bde:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.try_lock_weak() {
  231be3:	e8 98 ff ff ff       	callq  231b80 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h42b408fa10232bccE>
  231be8:	88 44 24 07          	mov    %al,0x7(%rsp)
  231bec:	8a 44 24 07          	mov    0x7(%rsp),%al
  231bf0:	34 ff                	xor    $0xff,%al
  231bf2:	a8 01                	test   $0x1,%al
  231bf4:	75 05                	jne    231bfb <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x2b>
            while self.is_locked() {
                // Tell the CPU that we're inside a busy-wait loop
                hint::spin_loop();
            }
        }
    }
  231bf6:	48 83 c4 18          	add    $0x18,%rsp
  231bfa:	c3                   	retq   
  231bfb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            while self.is_locked() {
  231c00:	e8 3b 00 00 00       	callq  231c40 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17he45ba76a08c21356E>
  231c05:	88 44 24 06          	mov    %al,0x6(%rsp)
  231c09:	8a 44 24 06          	mov    0x6(%rsp),%al
  231c0d:	a8 01                	test   $0x1,%al
  231c0f:	75 02                	jne    231c13 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x43>
  231c11:	eb cb                	jmp    231bde <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0xe>
                hint::spin_loop();
  231c13:	e8 88 00 00 00       	callq  231ca0 <_ZN4core4hint9spin_loop17h83dea54b06ee1384E>
  231c18:	eb e1                	jmp    231bfb <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x2b>
  231c1a:	cc                   	int3   
  231c1b:	cc                   	int3   
  231c1c:	cc                   	int3   
  231c1d:	cc                   	int3   
  231c1e:	cc                   	int3   
  231c1f:	cc                   	int3   

0000000000231c20 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h718bd9fc65a01bf2E>:
        self.locked
            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)
            .is_ok()
    }

    unsafe fn unlock(&self) {
  231c20:	48 83 ec 18          	sub    $0x18,%rsp
  231c24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.locked.store(false, Ordering::Release);
  231c29:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  231c2e:	31 f6                	xor    %esi,%esi
  231c30:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  231c35:	e8 96 01 00 00       	callq  231dd0 <_ZN4core4sync6atomic10AtomicBool5store17h017267f79f2d7932E>
    }
  231c3a:	48 83 c4 18          	add    $0x18,%rsp
  231c3e:	c3                   	retq   
  231c3f:	cc                   	int3   

0000000000231c40 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17he45ba76a08c21356E>:

    fn is_locked(&self) -> bool {
  231c40:	48 83 ec 18          	sub    $0x18,%rsp
  231c44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // Relaxed is sufficient because this operation does not provide synchronization, only atomicity.
        self.locked.load(Ordering::Relaxed)
  231c49:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  231c4e:	0f b6 74 24 0f       	movzbl 0xf(%rsp),%esi
  231c53:	e8 28 01 00 00       	callq  231d80 <_ZN4core4sync6atomic10AtomicBool4load17hdbaf089ba471b8dfE>
  231c58:	88 44 24 0e          	mov    %al,0xe(%rsp)
  231c5c:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  231c60:	24 01                	and    $0x1,%al
  231c62:	0f b6 c0             	movzbl %al,%eax
  231c65:	48 83 c4 18          	add    $0x18,%rsp
  231c69:	c3                   	retq   
  231c6a:	cc                   	int3   
  231c6b:	cc                   	int3   
  231c6c:	cc                   	int3   
  231c6d:	cc                   	int3   
  231c6e:	cc                   	int3   
  231c6f:	cc                   	int3   

0000000000231c70 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E>:
    pub const fn is_ok(&self) -> bool {
  231c70:	48 83 ec 10          	sub    $0x10,%rsp
  231c74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  231c79:	8a 07                	mov    (%rdi),%al
  231c7b:	24 01                	and    $0x1,%al
  231c7d:	0f b6 c0             	movzbl %al,%eax
  231c80:	48 83 f8 00          	cmp    $0x0,%rax
  231c84:	75 07                	jne    231c8d <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E+0x1d>
  231c86:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  231c8b:	eb 05                	jmp    231c92 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E+0x22>
  231c8d:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  231c92:	8a 44 24 07          	mov    0x7(%rsp),%al
  231c96:	24 01                	and    $0x1,%al
  231c98:	0f b6 c0             	movzbl %al,%eax
  231c9b:	48 83 c4 10          	add    $0x10,%rsp
  231c9f:	c3                   	retq   

0000000000231ca0 <_ZN4core4hint9spin_loop17h83dea54b06ee1384E>:
  231ca0:	c3                   	retq   
  231ca1:	cc                   	int3   
  231ca2:	cc                   	int3   
  231ca3:	cc                   	int3   
  231ca4:	cc                   	int3   
  231ca5:	cc                   	int3   
  231ca6:	cc                   	int3   
  231ca7:	cc                   	int3   
  231ca8:	cc                   	int3   
  231ca9:	cc                   	int3   
  231caa:	cc                   	int3   
  231cab:	cc                   	int3   
  231cac:	cc                   	int3   
  231cad:	cc                   	int3   
  231cae:	cc                   	int3   
  231caf:	cc                   	int3   

0000000000231cb0 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E>:
    pub fn compare_exchange_weak(
  231cb0:	48 83 ec 38          	sub    $0x38,%rsp
  231cb4:	44 88 c0             	mov    %r8b,%al
  231cb7:	88 44 24 04          	mov    %al,0x4(%rsp)
  231cbb:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  231cbf:	88 54 24 06          	mov    %dl,0x6(%rsp)
  231cc3:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  231cc8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231ccd:	40 80 e6 01          	and    $0x1,%sil
  231cd1:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  231cd6:	80 e2 01             	and    $0x1,%dl
  231cd9:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  231cdd:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  231ce1:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  231ce5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231cea:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  231cef:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  231cf4:	8a 44 24 06          	mov    0x6(%rsp),%al
  231cf8:	8a 54 24 07          	mov    0x7(%rsp),%dl
  231cfc:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  231d01:	8a 4c 24 05          	mov    0x5(%rsp),%cl
            atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8, success, failure)
  231d05:	0f b6 c9             	movzbl %cl,%ecx
  231d08:	44 0f b6 c6          	movzbl %sil,%r8d
  231d0c:	0f b6 f2             	movzbl %dl,%esi
  231d0f:	83 e6 01             	and    $0x1,%esi
  231d12:	0f b6 d0             	movzbl %al,%edx
  231d15:	83 e2 01             	and    $0x1,%edx
  231d18:	e8 63 05 00 00       	callq  232280 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE>
  231d1d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  231d21:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  231d25:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  231d2a:	a8 01                	test   $0x1,%al
  231d2c:	74 06                	je     231d34 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x84>
  231d2e:	eb 00                	jmp    231d30 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x80>
  231d30:	eb 1c                	jmp    231d4e <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x9e>
  231d32:	0f 0b                	ud2    
            Ok(x) => Ok(x != 0),
  231d34:	8a 44 24 19          	mov    0x19(%rsp),%al
  231d38:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  231d3c:	3c 00                	cmp    $0x0,%al
  231d3e:	0f 95 c0             	setne  %al
  231d41:	24 01                	and    $0x1,%al
  231d43:	88 44 24 11          	mov    %al,0x11(%rsp)
  231d47:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  231d4c:	eb 18                	jmp    231d66 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0xb6>
            Err(x) => Err(x != 0),
  231d4e:	8a 44 24 19          	mov    0x19(%rsp),%al
  231d52:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  231d56:	3c 00                	cmp    $0x0,%al
  231d58:	0f 95 c0             	setne  %al
  231d5b:	24 01                	and    $0x1,%al
  231d5d:	88 44 24 11          	mov    %al,0x11(%rsp)
  231d61:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
    }
  231d66:	8a 44 24 10          	mov    0x10(%rsp),%al
  231d6a:	8a 54 24 11          	mov    0x11(%rsp),%dl
  231d6e:	48 83 c4 38          	add    $0x38,%rsp
  231d72:	c3                   	retq   
  231d73:	cc                   	int3   
  231d74:	cc                   	int3   
  231d75:	cc                   	int3   
  231d76:	cc                   	int3   
  231d77:	cc                   	int3   
  231d78:	cc                   	int3   
  231d79:	cc                   	int3   
  231d7a:	cc                   	int3   
  231d7b:	cc                   	int3   
  231d7c:	cc                   	int3   
  231d7d:	cc                   	int3   
  231d7e:	cc                   	int3   
  231d7f:	cc                   	int3   

0000000000231d80 <_ZN4core4sync6atomic10AtomicBool4load17hdbaf089ba471b8dfE>:
    pub fn load(&self, order: Ordering) -> bool {
  231d80:	48 83 ec 28          	sub    $0x28,%rsp
  231d84:	40 88 f0             	mov    %sil,%al
  231d87:	88 44 24 07          	mov    %al,0x7(%rsp)
  231d8b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231d90:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231d94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231d99:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231d9e:	8a 44 24 07          	mov    0x7(%rsp),%al
  231da2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  231da7:	0f b6 f0             	movzbl %al,%esi
  231daa:	e8 71 00 00 00       	callq  231e20 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>
  231daf:	88 44 24 06          	mov    %al,0x6(%rsp)
  231db3:	8a 44 24 06          	mov    0x6(%rsp),%al
  231db7:	3c 00                	cmp    $0x0,%al
  231db9:	0f 95 c0             	setne  %al
    }
  231dbc:	24 01                	and    $0x1,%al
  231dbe:	0f b6 c0             	movzbl %al,%eax
  231dc1:	48 83 c4 28          	add    $0x28,%rsp
  231dc5:	c3                   	retq   
  231dc6:	cc                   	int3   
  231dc7:	cc                   	int3   
  231dc8:	cc                   	int3   
  231dc9:	cc                   	int3   
  231dca:	cc                   	int3   
  231dcb:	cc                   	int3   
  231dcc:	cc                   	int3   
  231dcd:	cc                   	int3   
  231dce:	cc                   	int3   
  231dcf:	cc                   	int3   

0000000000231dd0 <_ZN4core4sync6atomic10AtomicBool5store17h017267f79f2d7932E>:
    pub fn store(&self, val: bool, order: Ordering) {
  231dd0:	48 83 ec 28          	sub    $0x28,%rsp
  231dd4:	88 d0                	mov    %dl,%al
  231dd6:	88 44 24 06          	mov    %al,0x6(%rsp)
  231dda:	40 88 f1             	mov    %sil,%cl
  231ddd:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  231de1:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231de6:	80 e1 01             	and    $0x1,%cl
  231de9:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  231ded:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231df1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231df6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231dfb:	8a 44 24 06          	mov    0x6(%rsp),%al
  231dff:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  231e04:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  231e08:	80 e1 01             	and    $0x1,%cl
  231e0b:	0f b6 f1             	movzbl %cl,%esi
  231e0e:	0f b6 d0             	movzbl %al,%edx
  231e11:	e8 aa 00 00 00       	callq  231ec0 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>
    }
  231e16:	48 83 c4 28          	add    $0x28,%rsp
  231e1a:	c3                   	retq   
  231e1b:	cc                   	int3   
  231e1c:	cc                   	int3   
  231e1d:	cc                   	int3   
  231e1e:	cc                   	int3   
  231e1f:	cc                   	int3   

0000000000231e20 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  231e20:	48 83 ec 28          	sub    $0x28,%rsp
  231e24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231e29:	40 88 f0             	mov    %sil,%al
  231e2c:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  231e30:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  231e35:	0f b6 44 24 1e       	movzbl 0x1e(%rsp),%eax
  231e3a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  231e3f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  231e44:	48 8d 0d 99 1d fd ff 	lea    -0x2e267(%rip),%rcx        # 203be4 <str.3+0x64>
  231e4b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  231e4f:	48 01 c8             	add    %rcx,%rax
  231e52:	ff e0                	jmpq   *%rax
  231e54:	0f 0b                	ud2    
  231e56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  231e5b:	8a 00                	mov    (%rax),%al
  231e5d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231e61:	eb 59                	jmp    231ebc <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x9c>
            Release => panic!("there is no such thing as a release load"),
  231e63:	48 8d 3d 73 1e fd ff 	lea    -0x2e18d(%rip),%rdi        # 203cdd <str.3+0x15d>
  231e6a:	48 8d 15 77 b5 00 00 	lea    0xb577(%rip),%rdx        # 23d3e8 <memcmp+0x46a8>
  231e71:	be 28 00 00 00       	mov    $0x28,%esi
  231e76:	e8 75 3d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231e7b:	0f 0b                	ud2    
  231e7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  231e82:	8a 00                	mov    (%rax),%al
  231e84:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231e88:	eb 30                	jmp    231eba <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x9a>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  231e8a:	48 8d 3d a3 1d fd ff 	lea    -0x2e25d(%rip),%rdi        # 203c34 <str.3+0xb4>
  231e91:	48 8d 15 38 b5 00 00 	lea    0xb538(%rip),%rdx        # 23d3d0 <memcmp+0x4690>
  231e98:	be 31 00 00 00       	mov    $0x31,%esi
  231e9d:	e8 4e 3d 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231ea2:	0f 0b                	ud2    
  231ea4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  231ea9:	8a 00                	mov    (%rax),%al
  231eab:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231eaf:	eb 00                	jmp    231eb1 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
}
  231eb1:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  231eb5:	48 83 c4 28          	add    $0x28,%rsp
  231eb9:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  231eba:	eb f5                	jmp    231eb1 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  231ebc:	eb f3                	jmp    231eb1 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
  231ebe:	cc                   	int3   
  231ebf:	cc                   	int3   

0000000000231ec0 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  231ec0:	48 83 ec 38          	sub    $0x38,%rsp
  231ec4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231ec9:	88 d1                	mov    %dl,%cl
  231ecb:	40 88 f0             	mov    %sil,%al
  231ece:	88 44 24 17          	mov    %al,0x17(%rsp)
  231ed2:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  231ed6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  231edb:	88 44 24 37          	mov    %al,0x37(%rsp)
        match order {
  231edf:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  231ee4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231ee9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231eee:	48 8d 0d 03 1d fd ff 	lea    -0x2e2fd(%rip),%rcx        # 203bf8 <str.3+0x78>
  231ef5:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  231ef9:	48 01 c8             	add    %rcx,%rax
  231efc:	ff e0                	jmpq   *%rax
  231efe:	0f 0b                	ud2    
  231f00:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231f05:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  231f09:	88 08                	mov    %cl,(%rax)
  231f0b:	eb 55                	jmp    231f62 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0xa2>
  231f0d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231f12:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Release => intrinsics::atomic_store_rel(dst, val),
  231f16:	88 08                	mov    %cl,(%rax)
  231f18:	eb 46                	jmp    231f60 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0xa0>
            Acquire => panic!("there is no such thing as an acquire store"),
  231f1a:	48 8d 3d 16 1e fd ff 	lea    -0x2e1ea(%rip),%rdi        # 203d37 <str.3+0x1b7>
  231f21:	48 8d 15 f0 b4 00 00 	lea    0xb4f0(%rip),%rdx        # 23d418 <memcmp+0x46d8>
  231f28:	be 2a 00 00 00       	mov    $0x2a,%esi
  231f2d:	e8 be 3c 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231f32:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  231f34:	48 8d 3d ca 1d fd ff 	lea    -0x2e236(%rip),%rdi        # 203d05 <str.3+0x185>
  231f3b:	48 8d 15 be b4 00 00 	lea    0xb4be(%rip),%rdx        # 23d400 <memcmp+0x46c0>
  231f42:	be 32 00 00 00       	mov    $0x32,%esi
  231f47:	e8 a4 3c 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231f4c:	0f 0b                	ud2    
  231f4e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  231f53:	8a 44 24 17          	mov    0x17(%rsp),%al
            SeqCst => intrinsics::atomic_store(dst, val),
  231f57:	86 01                	xchg   %al,(%rcx)
  231f59:	eb 00                	jmp    231f5b <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
}
  231f5b:	48 83 c4 38          	add    $0x38,%rsp
  231f5f:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  231f60:	eb f9                	jmp    231f5b <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  231f62:	eb f7                	jmp    231f5b <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
  231f64:	cc                   	int3   
  231f65:	cc                   	int3   
  231f66:	cc                   	int3   
  231f67:	cc                   	int3   
  231f68:	cc                   	int3   
  231f69:	cc                   	int3   
  231f6a:	cc                   	int3   
  231f6b:	cc                   	int3   
  231f6c:	cc                   	int3   
  231f6d:	cc                   	int3   
  231f6e:	cc                   	int3   
  231f6f:	cc                   	int3   

0000000000231f70 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  231f70:	48 83 ec 68          	sub    $0x68,%rsp
  231f74:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  231f79:	44 88 c0             	mov    %r8b,%al
  231f7c:	88 54 24 36          	mov    %dl,0x36(%rsp)
  231f80:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  231f85:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  231f8a:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  231f8f:	88 54 24 63          	mov    %dl,0x63(%rsp)
  231f93:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  231f97:	88 44 24 65          	mov    %al,0x65(%rsp)
        match (success, failure) {
  231f9b:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  231f9f:	88 44 24 51          	mov    %al,0x51(%rsp)
  231fa3:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  231fa8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  231fad:	48 83 e8 04          	sub    $0x4,%rax
  231fb1:	77 15                	ja     231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  231fb3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  231fb8:	48 8d 0d 4d 1c fd ff 	lea    -0x2e3b3(%rip),%rcx        # 203c0c <str.3+0x8c>
  231fbf:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  231fc3:	48 01 c8             	add    %rcx,%rax
  231fc6:	ff e0                	jmpq   *%rax
  231fc8:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  231fcd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  231fd2:	48 83 e8 01          	sub    $0x1,%rax
  231fd6:	0f 84 38 02 00 00    	je     232214 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2a4>
  231fdc:	eb 00                	jmp    231fde <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x6e>
  231fde:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  231fe3:	48 83 e8 03          	sub    $0x3,%rax
  231fe7:	0f 84 41 02 00 00    	je     23222e <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2be>
  231fed:	e9 08 02 00 00       	jmpq   2321fa <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x28a>
  231ff2:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  231ff7:	48 83 f8 00          	cmp    $0x0,%rax
  231ffb:	0f 84 d7 01 00 00    	je     2321d8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x268>
  232001:	eb c5                	jmp    231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  232003:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232008:	48 83 f8 00          	cmp    $0x0,%rax
  23200c:	0f 84 a1 01 00 00    	je     2321b3 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x243>
  232012:	eb b4                	jmp    231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  232014:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232019:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23201e:	48 85 c0             	test   %rax,%rax
  232021:	0f 84 40 01 00 00    	je     232167 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1f7>
  232027:	eb 00                	jmp    232029 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0xb9>
  232029:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23202e:	48 83 e8 02          	sub    $0x2,%rax
  232032:	0f 84 51 01 00 00    	je     232189 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x219>
  232038:	eb 8e                	jmp    231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  23203a:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  23203f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  232044:	48 85 c0             	test   %rax,%rax
  232047:	0f 84 d4 00 00 00    	je     232121 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1b1>
  23204d:	eb 00                	jmp    23204f <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0xdf>
  23204f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232054:	48 83 e8 02          	sub    $0x2,%rax
  232058:	0f 84 e5 00 00 00    	je     232143 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1d3>
  23205e:	e9 65 ff ff ff       	jmpq   231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  232063:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232068:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23206d:	48 85 c0             	test   %rax,%rax
  232070:	74 1f                	je     232091 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x121>
  232072:	eb 00                	jmp    232074 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x104>
  232074:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232079:	48 83 e8 02          	sub    $0x2,%rax
  23207d:	74 34                	je     2320b3 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x143>
  23207f:	eb 00                	jmp    232081 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x111>
  232081:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232086:	48 83 e8 04          	sub    $0x4,%rax
  23208a:	74 49                	je     2320d5 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x165>
  23208c:	e9 37 ff ff ff       	jmpq   231fc8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  232091:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  232096:	8a 54 24 36          	mov    0x36(%rsp),%dl
  23209a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  23209e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2320a2:	88 c1                	mov    %al,%cl
  2320a4:	0f 94 c0             	sete   %al
  2320a7:	24 01                	and    $0x1,%al
  2320a9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2320ad:	88 44 24 49          	mov    %al,0x49(%rsp)
  2320b1:	eb 6c                	jmp    23211f <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1af>
  2320b3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2320b8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2320bc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  2320c0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2320c4:	88 c1                	mov    %al,%cl
  2320c6:	0f 94 c0             	sete   %al
  2320c9:	24 01                	and    $0x1,%al
  2320cb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2320cf:	88 44 24 49          	mov    %al,0x49(%rsp)
  2320d3:	eb 48                	jmp    23211d <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1ad>
  2320d5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2320da:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2320de:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  2320e2:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2320e6:	88 c1                	mov    %al,%cl
  2320e8:	0f 94 c0             	sete   %al
  2320eb:	24 01                	and    $0x1,%al
  2320ed:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2320f1:	88 44 24 49          	mov    %al,0x49(%rsp)
  2320f5:	eb 00                	jmp    2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
    let (val, ok) = unsafe {
  2320f7:	8a 44 24 48          	mov    0x48(%rsp),%al
  2320fb:	88 44 24 07          	mov    %al,0x7(%rsp)
  2320ff:	88 44 24 66          	mov    %al,0x66(%rsp)
  232103:	8a 44 24 49          	mov    0x49(%rsp),%al
  232107:	88 c1                	mov    %al,%cl
  232109:	80 e1 01             	and    $0x1,%cl
  23210c:	88 4c 24 67          	mov    %cl,0x67(%rsp)
    if ok { Ok(val) } else { Err(val) }
  232110:	a8 01                	test   $0x1,%al
  232112:	0f 85 44 01 00 00    	jne    23225c <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2ec>
  232118:	e9 30 01 00 00       	jmpq   23224d <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  23211d:	eb d8                	jmp    2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  23211f:	eb d6                	jmp    2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  232121:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  232126:	8a 54 24 36          	mov    0x36(%rsp),%dl
  23212a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  23212e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232132:	88 c1                	mov    %al,%cl
  232134:	0f 94 c0             	sete   %al
  232137:	24 01                	and    $0x1,%al
  232139:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  23213d:	88 44 24 49          	mov    %al,0x49(%rsp)
  232141:	eb 22                	jmp    232165 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1f5>
  232143:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  232148:	8a 54 24 36          	mov    0x36(%rsp),%dl
  23214c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  232150:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232154:	88 c1                	mov    %al,%cl
  232156:	0f 94 c0             	sete   %al
  232159:	24 01                	and    $0x1,%al
  23215b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  23215f:	88 44 24 49          	mov    %al,0x49(%rsp)
  232163:	eb 92                	jmp    2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  232165:	eb 90                	jmp    2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  232167:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  23216c:	8a 54 24 36          	mov    0x36(%rsp),%dl
  232170:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  232174:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232178:	88 c1                	mov    %al,%cl
  23217a:	0f 94 c0             	sete   %al
  23217d:	24 01                	and    $0x1,%al
  23217f:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  232183:	88 44 24 49          	mov    %al,0x49(%rsp)
  232187:	eb 25                	jmp    2321ae <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x23e>
  232189:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  23218e:	8a 54 24 36          	mov    0x36(%rsp),%dl
  232192:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  232196:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  23219a:	88 c1                	mov    %al,%cl
  23219c:	0f 94 c0             	sete   %al
  23219f:	24 01                	and    $0x1,%al
  2321a1:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2321a5:	88 44 24 49          	mov    %al,0x49(%rsp)
  2321a9:	e9 49 ff ff ff       	jmpq   2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  2321ae:	e9 44 ff ff ff       	jmpq   2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  2321b3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2321b8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2321bc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  2321c0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2321c4:	88 c1                	mov    %al,%cl
  2321c6:	0f 94 c0             	sete   %al
  2321c9:	24 01                	and    $0x1,%al
  2321cb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2321cf:	88 44 24 49          	mov    %al,0x49(%rsp)
  2321d3:	e9 1f ff ff ff       	jmpq   2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  2321d8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2321dd:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2321e1:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  2321e5:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2321e9:	88 c1                	mov    %al,%cl
  2321eb:	0f 94 c0             	sete   %al
  2321ee:	24 01                	and    $0x1,%al
  2321f0:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2321f4:	88 44 24 49          	mov    %al,0x49(%rsp)
  2321f8:	eb 4e                	jmp    232248 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  2321fa:	48 8d 3d 60 1b fd ff 	lea    -0x2e4a0(%rip),%rdi        # 203d61 <str.3+0x1e1>
  232201:	48 8d 15 28 b2 00 00 	lea    0xb228(%rip),%rdx        # 23d430 <memcmp+0x46f0>
  232208:	be 3c 00 00 00       	mov    $0x3c,%esi
  23220d:	e8 de 39 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  232212:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  232214:	48 8d 3d bf 1b fd ff 	lea    -0x2e441(%rip),%rdi        # 203dda <str.3+0x25a>
  23221b:	48 8d 15 3e b2 00 00 	lea    0xb23e(%rip),%rdx        # 23d460 <memcmp+0x4720>
  232222:	be 34 00 00 00       	mov    $0x34,%esi
  232227:	e8 c4 39 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23222c:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  23222e:	48 8d 3d 68 1b fd ff 	lea    -0x2e498(%rip),%rdi        # 203d9d <str.3+0x21d>
  232235:	48 8d 15 0c b2 00 00 	lea    0xb20c(%rip),%rdx        # 23d448 <memcmp+0x4708>
  23223c:	be 3d 00 00 00       	mov    $0x3d,%esi
  232241:	e8 aa 39 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  232246:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  232248:	e9 aa fe ff ff       	jmpq   2320f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  23224d:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  232251:	88 44 24 41          	mov    %al,0x41(%rsp)
  232255:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  23225a:	eb 0d                	jmp    232269 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2f9>
  23225c:	8a 44 24 07          	mov    0x7(%rsp),%al
  232260:	88 44 24 41          	mov    %al,0x41(%rsp)
  232264:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  232269:	8a 44 24 40          	mov    0x40(%rsp),%al
  23226d:	8a 54 24 41          	mov    0x41(%rsp),%dl
  232271:	48 83 c4 68          	add    $0x68,%rsp
  232275:	c3                   	retq   
  232276:	cc                   	int3   
  232277:	cc                   	int3   
  232278:	cc                   	int3   
  232279:	cc                   	int3   
  23227a:	cc                   	int3   
  23227b:	cc                   	int3   
  23227c:	cc                   	int3   
  23227d:	cc                   	int3   
  23227e:	cc                   	int3   
  23227f:	cc                   	int3   

0000000000232280 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE>:
unsafe fn atomic_compare_exchange_weak<T: Copy>(
  232280:	48 83 ec 68          	sub    $0x68,%rsp
  232284:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  232289:	44 88 c0             	mov    %r8b,%al
  23228c:	88 54 24 36          	mov    %dl,0x36(%rsp)
  232290:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  232295:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  23229a:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  23229f:	88 54 24 63          	mov    %dl,0x63(%rsp)
  2322a3:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  2322a7:	88 44 24 65          	mov    %al,0x65(%rsp)
        match (success, failure) {
  2322ab:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  2322af:	88 44 24 51          	mov    %al,0x51(%rsp)
  2322b3:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  2322b8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2322bd:	48 83 e8 04          	sub    $0x4,%rax
  2322c1:	77 15                	ja     2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  2322c3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2322c8:	48 8d 0d 51 19 fd ff 	lea    -0x2e6af(%rip),%rcx        # 203c20 <str.3+0xa0>
  2322cf:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2322d3:	48 01 c8             	add    %rcx,%rax
  2322d6:	ff e0                	jmpq   *%rax
  2322d8:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  2322dd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2322e2:	48 83 e8 01          	sub    $0x1,%rax
  2322e6:	0f 84 38 02 00 00    	je     232524 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2a4>
  2322ec:	eb 00                	jmp    2322ee <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x6e>
  2322ee:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2322f3:	48 83 e8 03          	sub    $0x3,%rax
  2322f7:	0f 84 41 02 00 00    	je     23253e <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2be>
  2322fd:	e9 08 02 00 00       	jmpq   23250a <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x28a>
  232302:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232307:	48 83 f8 00          	cmp    $0x0,%rax
  23230b:	0f 84 d7 01 00 00    	je     2324e8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x268>
  232311:	eb c5                	jmp    2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  232313:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232318:	48 83 f8 00          	cmp    $0x0,%rax
  23231c:	0f 84 a1 01 00 00    	je     2324c3 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x243>
  232322:	eb b4                	jmp    2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  232324:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232329:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23232e:	48 85 c0             	test   %rax,%rax
  232331:	0f 84 40 01 00 00    	je     232477 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1f7>
  232337:	eb 00                	jmp    232339 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0xb9>
  232339:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23233e:	48 83 e8 02          	sub    $0x2,%rax
  232342:	0f 84 51 01 00 00    	je     232499 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x219>
  232348:	eb 8e                	jmp    2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  23234a:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  23234f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  232354:	48 85 c0             	test   %rax,%rax
  232357:	0f 84 d4 00 00 00    	je     232431 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1b1>
  23235d:	eb 00                	jmp    23235f <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0xdf>
  23235f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232364:	48 83 e8 02          	sub    $0x2,%rax
  232368:	0f 84 e5 00 00 00    	je     232453 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1d3>
  23236e:	e9 65 ff ff ff       	jmpq   2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  232373:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  232378:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23237d:	48 85 c0             	test   %rax,%rax
  232380:	74 1f                	je     2323a1 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x121>
  232382:	eb 00                	jmp    232384 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x104>
  232384:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232389:	48 83 e8 02          	sub    $0x2,%rax
  23238d:	74 34                	je     2323c3 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x143>
  23238f:	eb 00                	jmp    232391 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x111>
  232391:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232396:	48 83 e8 04          	sub    $0x4,%rax
  23239a:	74 49                	je     2323e5 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x165>
  23239c:	e9 37 ff ff ff       	jmpq   2322d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  2323a1:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2323a6:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2323aa:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),
  2323ae:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2323b2:	88 c1                	mov    %al,%cl
  2323b4:	0f 94 c0             	sete   %al
  2323b7:	24 01                	and    $0x1,%al
  2323b9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2323bd:	88 44 24 49          	mov    %al,0x49(%rsp)
  2323c1:	eb 6c                	jmp    23242f <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1af>
  2323c3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2323c8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2323cc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),
  2323d0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2323d4:	88 c1                	mov    %al,%cl
  2323d6:	0f 94 c0             	sete   %al
  2323d9:	24 01                	and    $0x1,%al
  2323db:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2323df:	88 44 24 49          	mov    %al,0x49(%rsp)
  2323e3:	eb 48                	jmp    23242d <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1ad>
  2323e5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2323ea:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2323ee:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak(dst, old, new),
  2323f2:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2323f6:	88 c1                	mov    %al,%cl
  2323f8:	0f 94 c0             	sete   %al
  2323fb:	24 01                	and    $0x1,%al
  2323fd:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  232401:	88 44 24 49          	mov    %al,0x49(%rsp)
  232405:	eb 00                	jmp    232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
    let (val, ok) = unsafe {
  232407:	8a 44 24 48          	mov    0x48(%rsp),%al
  23240b:	88 44 24 07          	mov    %al,0x7(%rsp)
  23240f:	88 44 24 66          	mov    %al,0x66(%rsp)
  232413:	8a 44 24 49          	mov    0x49(%rsp),%al
  232417:	88 c1                	mov    %al,%cl
  232419:	80 e1 01             	and    $0x1,%cl
  23241c:	88 4c 24 67          	mov    %cl,0x67(%rsp)
    if ok { Ok(val) } else { Err(val) }
  232420:	a8 01                	test   $0x1,%al
  232422:	0f 85 44 01 00 00    	jne    23256c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2ec>
  232428:	e9 30 01 00 00       	jmpq   23255d <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),
  23242d:	eb d8                	jmp    232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),
  23242f:	eb d6                	jmp    232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  232431:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  232436:	8a 54 24 36          	mov    0x36(%rsp),%dl
  23243a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),
  23243e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232442:	88 c1                	mov    %al,%cl
  232444:	0f 94 c0             	sete   %al
  232447:	24 01                	and    $0x1,%al
  232449:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  23244d:	88 44 24 49          	mov    %al,0x49(%rsp)
  232451:	eb 22                	jmp    232475 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1f5>
  232453:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  232458:	8a 54 24 36          	mov    0x36(%rsp),%dl
  23245c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),
  232460:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232464:	88 c1                	mov    %al,%cl
  232466:	0f 94 c0             	sete   %al
  232469:	24 01                	and    $0x1,%al
  23246b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  23246f:	88 44 24 49          	mov    %al,0x49(%rsp)
  232473:	eb 92                	jmp    232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),
  232475:	eb 90                	jmp    232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  232477:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  23247c:	8a 54 24 36          	mov    0x36(%rsp),%dl
  232480:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),
  232484:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  232488:	88 c1                	mov    %al,%cl
  23248a:	0f 94 c0             	sete   %al
  23248d:	24 01                	and    $0x1,%al
  23248f:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  232493:	88 44 24 49          	mov    %al,0x49(%rsp)
  232497:	eb 25                	jmp    2324be <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x23e>
  232499:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  23249e:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2324a2:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acq(dst, old, new),
  2324a6:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2324aa:	88 c1                	mov    %al,%cl
  2324ac:	0f 94 c0             	sete   %al
  2324af:	24 01                	and    $0x1,%al
  2324b1:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2324b5:	88 44 24 49          	mov    %al,0x49(%rsp)
  2324b9:	e9 49 ff ff ff       	jmpq   232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),
  2324be:	e9 44 ff ff ff       	jmpq   232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  2324c3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2324c8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2324cc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchgweak_rel(dst, old, new),
  2324d0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2324d4:	88 c1                	mov    %al,%cl
  2324d6:	0f 94 c0             	sete   %al
  2324d9:	24 01                	and    $0x1,%al
  2324db:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  2324df:	88 44 24 49          	mov    %al,0x49(%rsp)
  2324e3:	e9 1f ff ff ff       	jmpq   232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  2324e8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2324ed:	8a 54 24 36          	mov    0x36(%rsp),%dl
  2324f1:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),
  2324f5:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  2324f9:	88 c1                	mov    %al,%cl
  2324fb:	0f 94 c0             	sete   %al
  2324fe:	24 01                	and    $0x1,%al
  232500:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  232504:	88 44 24 49          	mov    %al,0x49(%rsp)
  232508:	eb 4e                	jmp    232558 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  23250a:	48 8d 3d 50 18 fd ff 	lea    -0x2e7b0(%rip),%rdi        # 203d61 <str.3+0x1e1>
  232511:	48 8d 15 60 af 00 00 	lea    0xaf60(%rip),%rdx        # 23d478 <memcmp+0x4738>
  232518:	be 3c 00 00 00       	mov    $0x3c,%esi
  23251d:	e8 ce 36 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  232522:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  232524:	48 8d 3d af 18 fd ff 	lea    -0x2e751(%rip),%rdi        # 203dda <str.3+0x25a>
  23252b:	48 8d 15 76 af 00 00 	lea    0xaf76(%rip),%rdx        # 23d4a8 <memcmp+0x4768>
  232532:	be 34 00 00 00       	mov    $0x34,%esi
  232537:	e8 b4 36 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23253c:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  23253e:	48 8d 3d 58 18 fd ff 	lea    -0x2e7a8(%rip),%rdi        # 203d9d <str.3+0x21d>
  232545:	48 8d 15 44 af 00 00 	lea    0xaf44(%rip),%rdx        # 23d490 <memcmp+0x4750>
  23254c:	be 3d 00 00 00       	mov    $0x3d,%esi
  232551:	e8 9a 36 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  232556:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),
  232558:	e9 aa fe ff ff       	jmpq   232407 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  23255d:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  232561:	88 44 24 41          	mov    %al,0x41(%rsp)
  232565:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  23256a:	eb 0d                	jmp    232579 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2f9>
  23256c:	8a 44 24 07          	mov    0x7(%rsp),%al
  232570:	88 44 24 41          	mov    %al,0x41(%rsp)
  232574:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  232579:	8a 44 24 40          	mov    0x40(%rsp),%al
  23257d:	8a 54 24 41          	mov    0x41(%rsp),%dl
  232581:	48 83 c4 68          	add    $0x68,%rsp
  232585:	c3                   	retq   
  232586:	cc                   	int3   
  232587:	cc                   	int3   
  232588:	cc                   	int3   
  232589:	cc                   	int3   
  23258a:	cc                   	int3   
  23258b:	cc                   	int3   
  23258c:	cc                   	int3   
  23258d:	cc                   	int3   
  23258e:	cc                   	int3   
  23258f:	cc                   	int3   

0000000000232590 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
  232590:	48 83 ec 18          	sub    $0x18,%rsp
  232594:	48 89 3c 24          	mov    %rdi,(%rsp)
  232598:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if self.panicked {
  23259d:	f6 47 08 01          	testb  $0x1,0x8(%rdi)
  2325a1:	75 05                	jne    2325a8 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x18>
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
  2325a3:	48 83 c4 18          	add    $0x18,%rsp
  2325a7:	c3                   	retq   
  2325a8:	48 8b 04 24          	mov    (%rsp),%rax
            self.state.store(PANICKED, Ordering::SeqCst);
  2325ac:	48 8b 38             	mov    (%rax),%rdi
  2325af:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  2325b4:	be 03 00 00 00       	mov    $0x3,%esi
  2325b9:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  2325be:	e8 0d 00 00 00       	callq  2325d0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>
  2325c3:	eb de                	jmp    2325a3 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x13>
  2325c5:	cc                   	int3   
  2325c6:	cc                   	int3   
  2325c7:	cc                   	int3   
  2325c8:	cc                   	int3   
  2325c9:	cc                   	int3   
  2325ca:	cc                   	int3   
  2325cb:	cc                   	int3   
  2325cc:	cc                   	int3   
  2325cd:	cc                   	int3   
  2325ce:	cc                   	int3   
  2325cf:	cc                   	int3   

00000000002325d0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  2325d0:	48 83 ec 38          	sub    $0x38,%rsp
  2325d4:	48 89 34 24          	mov    %rsi,(%rsp)
  2325d8:	88 d0                	mov    %dl,%al
  2325da:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2325de:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2325e3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2325e8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2325ec:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2325f1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2325f6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2325fa:	48 8b 34 24          	mov    (%rsp),%rsi
  2325fe:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  232603:	0f b6 d0             	movzbl %al,%edx
  232606:	e8 05 00 00 00       	callq  232610 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>
            }
  23260b:	48 83 c4 38          	add    $0x38,%rsp
  23260f:	c3                   	retq   

0000000000232610 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  232610:	48 83 ec 38          	sub    $0x38,%rsp
  232614:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  232619:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23261e:	88 d0                	mov    %dl,%al
  232620:	88 44 24 27          	mov    %al,0x27(%rsp)
  232624:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  232629:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  23262e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  232633:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  232638:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23263d:	48 8d 0d cc 17 fd ff 	lea    -0x2e834(%rip),%rcx        # 203e10 <str.3+0x290>
  232644:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  232648:	48 01 c8             	add    %rcx,%rax
  23264b:	ff e0                	jmpq   *%rax
  23264d:	0f 0b                	ud2    
  23264f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232654:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  232659:	48 89 08             	mov    %rcx,(%rax)
  23265c:	eb 59                	jmp    2326b7 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa7>
  23265e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232663:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  232668:	48 89 08             	mov    %rcx,(%rax)
  23266b:	eb 48                	jmp    2326b5 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  23266d:	48 8d 3d 5a 18 fd ff 	lea    -0x2e7a6(%rip),%rdi        # 203ece <str.3+0x34e>
  232674:	48 8d 15 5d ae 00 00 	lea    0xae5d(%rip),%rdx        # 23d4d8 <memcmp+0x4798>
  23267b:	be 2a 00 00 00       	mov    $0x2a,%esi
  232680:	e8 6b 35 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  232685:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  232687:	48 8d 3d 96 17 fd ff 	lea    -0x2e86a(%rip),%rdi        # 203e24 <str.3+0x2a4>
  23268e:	48 8d 15 2b ae 00 00 	lea    0xae2b(%rip),%rdx        # 23d4c0 <memcmp+0x4780>
  232695:	be 32 00 00 00       	mov    $0x32,%esi
  23269a:	e8 51 35 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23269f:	0f 0b                	ud2    
  2326a1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2326a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  2326ab:	48 87 01             	xchg   %rax,(%rcx)
  2326ae:	eb 00                	jmp    2326b0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
}
  2326b0:	48 83 c4 38          	add    $0x38,%rsp
  2326b4:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  2326b5:	eb f9                	jmp    2326b0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  2326b7:	eb f7                	jmp    2326b0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
  2326b9:	cc                   	int3   
  2326ba:	cc                   	int3   
  2326bb:	cc                   	int3   
  2326bc:	cc                   	int3   
  2326bd:	cc                   	int3   
  2326be:	cc                   	int3   
  2326bf:	cc                   	int3   

00000000002326c0 <_ZN5alloc7raw_vec17capacity_overflow17h99a87b7ff45619d7E>:
  2326c0:	50                   	push   %rax
  2326c1:	48 8d 3d a5 18 fd ff 	lea    -0x2e75b(%rip),%rdi        # 203f6d <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820>
  2326c8:	48 8d 15 21 ae 00 00 	lea    0xae21(%rip),%rdx        # 23d4f0 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820>
  2326cf:	be 11 00 00 00       	mov    $0x11,%esi
  2326d4:	e8 17 35 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2326d9:	0f 0b                	ud2    
  2326db:	cc                   	int3   
  2326dc:	cc                   	int3   
  2326dd:	cc                   	int3   
  2326de:	cc                   	int3   
  2326df:	cc                   	int3   

00000000002326e0 <__rg_oom>:
  2326e0:	50                   	push   %rax
  2326e1:	e8 5a 9b ff ff       	callq  22c240 <rust_oom>
  2326e6:	0f 0b                	ud2    
  2326e8:	cc                   	int3   
  2326e9:	cc                   	int3   
  2326ea:	cc                   	int3   
  2326eb:	cc                   	int3   
  2326ec:	cc                   	int3   
  2326ed:	cc                   	int3   
  2326ee:	cc                   	int3   
  2326ef:	cc                   	int3   

00000000002326f0 <_ZN5alloc5alloc18handle_alloc_error17hd9bd3602b1600516E>:
  2326f0:	50                   	push   %rax
  2326f1:	e8 6a ce ff ff       	callq  22f560 <__rust_alloc_error_handler>
  2326f6:	0f 0b                	ud2    
  2326f8:	cc                   	int3   
  2326f9:	cc                   	int3   
  2326fa:	cc                   	int3   
  2326fb:	cc                   	int3   
  2326fc:	cc                   	int3   
  2326fd:	cc                   	int3   
  2326fe:	cc                   	int3   
  2326ff:	cc                   	int3   

0000000000232700 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>:
    fn clone(&self) -> Level {
  232700:	50                   	push   %rax
  232701:	48 89 3c 24          	mov    %rdi,(%rsp)
        *self
  232705:	48 8b 07             	mov    (%rdi),%rax
    }
  232708:	59                   	pop    %rcx
  232709:	c3                   	retq   
  23270a:	cc                   	int3   
  23270b:	cc                   	int3   
  23270c:	cc                   	int3   
  23270d:	cc                   	int3   
  23270e:	cc                   	int3   
  23270f:	cc                   	int3   

0000000000232710 <_ZN49_$LT$log..Level$u20$as$u20$core..fmt..Display$GT$3fmt17h774fa8d468057f7dE>:
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
  232710:	48 83 ec 38          	sub    $0x38,%rsp
  232714:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  232719:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  23271e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt.pad(self.as_str())
  232723:	e8 38 00 00 00       	callq  232760 <_ZN3log5Level6as_str17h940f0b247dae748dE>
  232728:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23272d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  232732:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  232737:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  23273c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  232741:	e8 ea 53 00 00       	callq  237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  232746:	88 44 24 0f          	mov    %al,0xf(%rsp)
  23274a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  23274e:	24 01                	and    $0x1,%al
  232750:	0f b6 c0             	movzbl %al,%eax
  232753:	48 83 c4 38          	add    $0x38,%rsp
  232757:	c3                   	retq   
  232758:	cc                   	int3   
  232759:	cc                   	int3   
  23275a:	cc                   	int3   
  23275b:	cc                   	int3   
  23275c:	cc                   	int3   
  23275d:	cc                   	int3   
  23275e:	cc                   	int3   
  23275f:	cc                   	int3   

0000000000232760 <_ZN3log5Level6as_str17h940f0b247dae748dE>:
    pub fn as_str(&self) -> &'static str {
  232760:	48 83 ec 18          	sub    $0x18,%rsp
  232764:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        LOG_LEVEL_NAMES[*self as usize]
  232769:	48 8b 07             	mov    (%rdi),%rax
  23276c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232771:	48 83 f8 06          	cmp    $0x6,%rax
  232775:	0f 92 c0             	setb   %al
  232778:	a8 01                	test   $0x1,%al
  23277a:	75 02                	jne    23277e <_ZN3log5Level6as_str17h940f0b247dae748dE+0x1e>
  23277c:	eb 1e                	jmp    23279c <_ZN3log5Level6as_str17h940f0b247dae748dE+0x3c>
  23277e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  232783:	48 c1 e1 04          	shl    $0x4,%rcx
  232787:	48 8d 15 ca ad 00 00 	lea    0xadca(%rip),%rdx        # 23d558 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E>
  23278e:	48 8b 04 11          	mov    (%rcx,%rdx,1),%rax
  232792:	48 8b 54 11 08       	mov    0x8(%rcx,%rdx,1),%rdx
    }
  232797:	48 83 c4 18          	add    $0x18,%rsp
  23279b:	c3                   	retq   
  23279c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        LOG_LEVEL_NAMES[*self as usize]
  2327a1:	48 8d 15 10 ae 00 00 	lea    0xae10(%rip),%rdx        # 23d5b8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x60>
  2327a8:	be 06 00 00 00       	mov    $0x6,%esi
  2327ad:	e8 8e 34 00 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2327b2:	0f 0b                	ud2    
  2327b4:	cc                   	int3   
  2327b5:	cc                   	int3   
  2327b6:	cc                   	int3   
  2327b7:	cc                   	int3   
  2327b8:	cc                   	int3   
  2327b9:	cc                   	int3   
  2327ba:	cc                   	int3   
  2327bb:	cc                   	int3   
  2327bc:	cc                   	int3   
  2327bd:	cc                   	int3   
  2327be:	cc                   	int3   
  2327bf:	cc                   	int3   

00000000002327c0 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>:
    pub fn builder() -> RecordBuilder<'a> {
  2327c0:	50                   	push   %rax
  2327c1:	48 89 f8             	mov    %rdi,%rax
  2327c4:	48 89 04 24          	mov    %rax,(%rsp)
        RecordBuilder::new()
  2327c8:	e8 13 00 00 00       	callq  2327e0 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>
  2327cd:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2327d1:	59                   	pop    %rcx
  2327d2:	c3                   	retq   
  2327d3:	cc                   	int3   
  2327d4:	cc                   	int3   
  2327d5:	cc                   	int3   
  2327d6:	cc                   	int3   
  2327d7:	cc                   	int3   
  2327d8:	cc                   	int3   
  2327d9:	cc                   	int3   
  2327da:	cc                   	int3   
  2327db:	cc                   	int3   
  2327dc:	cc                   	int3   
  2327dd:	cc                   	int3   
  2327de:	cc                   	int3   
  2327df:	cc                   	int3   

00000000002327e0 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>:
    pub fn new() -> RecordBuilder<'a> {
  2327e0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  2327e7:	48 89 3c 24          	mov    %rdi,(%rsp)
  2327eb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                args: format_args!(""),
  2327f0:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2327f7:	00 
  2327f8:	48 8d 0d 81 17 fd ff 	lea    -0x2e87f(%rip),%rcx        # 203f80 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0x13>
  2327ff:	48 89 ce             	mov    %rcx,%rsi
  232802:	31 c0                	xor    %eax,%eax
  232804:	41 89 c0             	mov    %eax,%r8d
  232807:	4c 89 c2             	mov    %r8,%rdx
  23280a:	e8 f1 14 00 00       	callq  233d00 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>
                metadata: Metadata::builder().build(),
  23280f:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  232816:	00 
  232817:	e8 84 02 00 00       	callq  232aa0 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>
  23281c:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  232823:	00 
  232824:	48 8d b4 24 d8 00 00 	lea    0xd8(%rsp),%rsi
  23282b:	00 
  23282c:	e8 df 02 00 00       	callq  232b10 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>
                module_path: None,
  232831:	48 c7 84 24 f0 00 00 	movq   $0x2,0xf0(%rsp)
  232838:	00 02 00 00 00 
                file: None,
  23283d:	48 c7 84 24 08 01 00 	movq   $0x2,0x108(%rsp)
  232844:	00 02 00 00 00 
                line: None,
  232849:	c7 84 24 20 01 00 00 	movl   $0x0,0x120(%rsp)
  232850:	00 00 00 00 
            record: Record {
  232854:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  23285b:	00 
  23285c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  232861:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  232868:	00 
  232869:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23286e:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  232875:	00 
  232876:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23287b:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  232880:	48 83 c7 18          	add    $0x18,%rdi
  232884:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  23288b:	00 
  23288c:	ba 30 00 00 00       	mov    $0x30,%edx
  232891:	e8 5a 64 00 00       	callq  238cf0 <memcpy>
  232896:	48 8b 3c 24          	mov    (%rsp),%rdi
  23289a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  2328a1:	00 
  2328a2:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2328a7:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  2328ae:	00 
  2328af:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2328b4:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  2328bb:	00 
  2328bc:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2328c1:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2328c8:	00 
  2328c9:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2328ce:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2328d5:	00 
  2328d6:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2328db:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  2328e2:	00 
  2328e3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2328ea:	00 
  2328eb:	8b 8c 24 20 01 00 00 	mov    0x120(%rsp),%ecx
  2328f2:	8b 84 24 24 01 00 00 	mov    0x124(%rsp),%eax
  2328f9:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
  232900:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%rsp)
        RecordBuilder {
  232907:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  23290c:	ba 80 00 00 00       	mov    $0x80,%edx
  232911:	e8 da 63 00 00       	callq  238cf0 <memcpy>
  232916:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  23291b:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  232922:	c3                   	retq   
  232923:	cc                   	int3   
  232924:	cc                   	int3   
  232925:	cc                   	int3   
  232926:	cc                   	int3   
  232927:	cc                   	int3   
  232928:	cc                   	int3   
  232929:	cc                   	int3   
  23292a:	cc                   	int3   
  23292b:	cc                   	int3   
  23292c:	cc                   	int3   
  23292d:	cc                   	int3   
  23292e:	cc                   	int3   
  23292f:	cc                   	int3   

0000000000232930 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
  232930:	48 83 ec 48          	sub    $0x48,%rsp
  232934:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  232939:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        self.record.args = args;
  23293e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  232943:	ba 30 00 00 00       	mov    $0x30,%edx
  232948:	e8 a3 63 00 00       	callq  238cf0 <memcpy>
  23294d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  232952:	48 83 c7 18          	add    $0x18,%rdi
  232956:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  23295b:	ba 30 00 00 00       	mov    $0x30,%edx
  232960:	e8 8b 63 00 00       	callq  238cf0 <memcpy>
  232965:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  23296a:	48 83 c4 48          	add    $0x48,%rsp
  23296e:	c3                   	retq   
  23296f:	cc                   	int3   

0000000000232970 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
  232970:	48 83 ec 10          	sub    $0x10,%rsp
  232974:	48 89 f8             	mov    %rdi,%rax
  232977:	48 89 04 24          	mov    %rax,(%rsp)
  23297b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        self.record.metadata.level = level;
  232980:	48 89 30             	mov    %rsi,(%rax)
    }
  232983:	48 83 c4 10          	add    $0x10,%rsp
  232987:	c3                   	retq   
  232988:	cc                   	int3   
  232989:	cc                   	int3   
  23298a:	cc                   	int3   
  23298b:	cc                   	int3   
  23298c:	cc                   	int3   
  23298d:	cc                   	int3   
  23298e:	cc                   	int3   
  23298f:	cc                   	int3   

0000000000232990 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
  232990:	48 83 ec 18          	sub    $0x18,%rsp
  232994:	48 89 f8             	mov    %rdi,%rax
  232997:	48 89 04 24          	mov    %rax,(%rsp)
  23299b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2329a0:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.record.metadata.target = target;
  2329a5:	48 89 70 08          	mov    %rsi,0x8(%rax)
  2329a9:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  2329ad:	48 83 c4 18          	add    $0x18,%rsp
  2329b1:	c3                   	retq   
  2329b2:	cc                   	int3   
  2329b3:	cc                   	int3   
  2329b4:	cc                   	int3   
  2329b5:	cc                   	int3   
  2329b6:	cc                   	int3   
  2329b7:	cc                   	int3   
  2329b8:	cc                   	int3   
  2329b9:	cc                   	int3   
  2329ba:	cc                   	int3   
  2329bb:	cc                   	int3   
  2329bc:	cc                   	int3   
  2329bd:	cc                   	int3   
  2329be:	cc                   	int3   
  2329bf:	cc                   	int3   

00000000002329c0 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
  2329c0:	48 83 ec 38          	sub    $0x38,%rsp
  2329c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2329c8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2329cd:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2329d2:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.module_path = path.map(MaybeStaticStr::Static);
  2329d7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  2329dc:	e8 9f 0a 00 00       	callq  233480 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  2329e1:	48 8b 04 24          	mov    (%rsp),%rax
  2329e5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2329ea:	48 89 48 48          	mov    %rcx,0x48(%rax)
  2329ee:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2329f3:	48 89 48 50          	mov    %rcx,0x50(%rax)
  2329f7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2329fc:	48 89 48 58          	mov    %rcx,0x58(%rax)
    }
  232a00:	48 83 c4 38          	add    $0x38,%rsp
  232a04:	c3                   	retq   
  232a05:	cc                   	int3   
  232a06:	cc                   	int3   
  232a07:	cc                   	int3   
  232a08:	cc                   	int3   
  232a09:	cc                   	int3   
  232a0a:	cc                   	int3   
  232a0b:	cc                   	int3   
  232a0c:	cc                   	int3   
  232a0d:	cc                   	int3   
  232a0e:	cc                   	int3   
  232a0f:	cc                   	int3   

0000000000232a10 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
  232a10:	48 83 ec 38          	sub    $0x38,%rsp
  232a14:	48 89 3c 24          	mov    %rdi,(%rsp)
  232a18:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  232a1d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  232a22:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.file = file.map(MaybeStaticStr::Static);
  232a27:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  232a2c:	e8 4f 0a 00 00       	callq  233480 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  232a31:	48 8b 04 24          	mov    (%rsp),%rax
  232a35:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  232a3a:	48 89 48 60          	mov    %rcx,0x60(%rax)
  232a3e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  232a43:	48 89 48 68          	mov    %rcx,0x68(%rax)
  232a47:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  232a4c:	48 89 48 70          	mov    %rcx,0x70(%rax)
    }
  232a50:	48 83 c4 38          	add    $0x38,%rsp
  232a54:	c3                   	retq   
  232a55:	cc                   	int3   
  232a56:	cc                   	int3   
  232a57:	cc                   	int3   
  232a58:	cc                   	int3   
  232a59:	cc                   	int3   
  232a5a:	cc                   	int3   
  232a5b:	cc                   	int3   
  232a5c:	cc                   	int3   
  232a5d:	cc                   	int3   
  232a5e:	cc                   	int3   
  232a5f:	cc                   	int3   

0000000000232a60 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
  232a60:	48 83 ec 10          	sub    $0x10,%rsp
  232a64:	48 89 f8             	mov    %rdi,%rax
  232a67:	48 89 04 24          	mov    %rax,(%rsp)
  232a6b:	89 74 24 08          	mov    %esi,0x8(%rsp)
  232a6f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
        self.record.line = line;
  232a73:	89 70 78             	mov    %esi,0x78(%rax)
  232a76:	89 50 7c             	mov    %edx,0x7c(%rax)
    }
  232a79:	48 83 c4 10          	add    $0x10,%rsp
  232a7d:	c3                   	retq   
  232a7e:	cc                   	int3   
  232a7f:	cc                   	int3   

0000000000232a80 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>:
    pub fn build(&self) -> Record<'a> {
  232a80:	48 83 ec 18          	sub    $0x18,%rsp
  232a84:	48 89 f8             	mov    %rdi,%rax
  232a87:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232a8c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.record.clone()
  232a91:	e8 3a 05 00 00       	callq  232fd0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>
  232a96:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  232a9b:	48 83 c4 18          	add    $0x18,%rsp
  232a9f:	c3                   	retq   

0000000000232aa0 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>:
    pub fn builder() -> MetadataBuilder<'a> {
  232aa0:	50                   	push   %rax
  232aa1:	48 89 f8             	mov    %rdi,%rax
  232aa4:	48 89 04 24          	mov    %rax,(%rsp)
        MetadataBuilder::new()
  232aa8:	e8 13 00 00 00       	callq  232ac0 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>
  232aad:	48 8b 04 24          	mov    (%rsp),%rax
    }
  232ab1:	59                   	pop    %rcx
  232ab2:	c3                   	retq   
  232ab3:	cc                   	int3   
  232ab4:	cc                   	int3   
  232ab5:	cc                   	int3   
  232ab6:	cc                   	int3   
  232ab7:	cc                   	int3   
  232ab8:	cc                   	int3   
  232ab9:	cc                   	int3   
  232aba:	cc                   	int3   
  232abb:	cc                   	int3   
  232abc:	cc                   	int3   
  232abd:	cc                   	int3   
  232abe:	cc                   	int3   
  232abf:	cc                   	int3   

0000000000232ac0 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>:
    pub fn new() -> MetadataBuilder<'a> {
  232ac0:	48 83 ec 18          	sub    $0x18,%rsp
  232ac4:	48 89 f8             	mov    %rdi,%rax
            metadata: Metadata {
  232ac7:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  232ace:	00 
  232acf:	48 8d 0d aa 14 fd ff 	lea    -0x2eb56(%rip),%rcx        # 203f80 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0x13>
  232ad6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  232adb:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  232ae2:	00 00 
        MetadataBuilder {
  232ae4:	48 8b 0c 24          	mov    (%rsp),%rcx
  232ae8:	48 89 0f             	mov    %rcx,(%rdi)
  232aeb:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  232af0:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  232af4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  232af9:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    }
  232afd:	48 83 c4 18          	add    $0x18,%rsp
  232b01:	c3                   	retq   
  232b02:	cc                   	int3   
  232b03:	cc                   	int3   
  232b04:	cc                   	int3   
  232b05:	cc                   	int3   
  232b06:	cc                   	int3   
  232b07:	cc                   	int3   
  232b08:	cc                   	int3   
  232b09:	cc                   	int3   
  232b0a:	cc                   	int3   
  232b0b:	cc                   	int3   
  232b0c:	cc                   	int3   
  232b0d:	cc                   	int3   
  232b0e:	cc                   	int3   
  232b0f:	cc                   	int3   

0000000000232b10 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>:
    pub fn build(&self) -> Metadata<'a> {
  232b10:	48 83 ec 18          	sub    $0x18,%rsp
  232b14:	48 89 f8             	mov    %rdi,%rax
  232b17:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232b1c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.metadata.clone()
  232b21:	e8 0a 06 00 00       	callq  233130 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  232b26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  232b2b:	48 83 c4 18          	add    $0x18,%rsp
  232b2f:	c3                   	retq   

0000000000232b30 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h56ee4da12616bf71E>:
    fn enabled(&self, _: &Metadata) -> bool {
  232b30:	48 83 ec 10          	sub    $0x10,%rsp
  232b34:	48 89 3c 24          	mov    %rdi,(%rsp)
  232b38:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  232b3d:	31 c0                	xor    %eax,%eax
  232b3f:	24 01                	and    $0x1,%al
  232b41:	0f b6 c0             	movzbl %al,%eax
  232b44:	48 83 c4 10          	add    $0x10,%rsp
  232b48:	c3                   	retq   
  232b49:	cc                   	int3   
  232b4a:	cc                   	int3   
  232b4b:	cc                   	int3   
  232b4c:	cc                   	int3   
  232b4d:	cc                   	int3   
  232b4e:	cc                   	int3   
  232b4f:	cc                   	int3   

0000000000232b50 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17h2de79af78304e972E>:
    fn log(&self, _: &Record) {}
  232b50:	48 83 ec 10          	sub    $0x10,%rsp
  232b54:	48 89 3c 24          	mov    %rdi,(%rsp)
  232b58:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  232b5d:	48 83 c4 10          	add    $0x10,%rsp
  232b61:	c3                   	retq   
  232b62:	cc                   	int3   
  232b63:	cc                   	int3   
  232b64:	cc                   	int3   
  232b65:	cc                   	int3   
  232b66:	cc                   	int3   
  232b67:	cc                   	int3   
  232b68:	cc                   	int3   
  232b69:	cc                   	int3   
  232b6a:	cc                   	int3   
  232b6b:	cc                   	int3   
  232b6c:	cc                   	int3   
  232b6d:	cc                   	int3   
  232b6e:	cc                   	int3   
  232b6f:	cc                   	int3   

0000000000232b70 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h85912e3b490f95beE>:
    fn flush(&self) {}
  232b70:	50                   	push   %rax
  232b71:	48 89 3c 24          	mov    %rdi,(%rsp)
  232b75:	58                   	pop    %rax
  232b76:	c3                   	retq   
  232b77:	cc                   	int3   
  232b78:	cc                   	int3   
  232b79:	cc                   	int3   
  232b7a:	cc                   	int3   
  232b7b:	cc                   	int3   
  232b7c:	cc                   	int3   
  232b7d:	cc                   	int3   
  232b7e:	cc                   	int3   
  232b7f:	cc                   	int3   

0000000000232b80 <_ZN3log10set_logger17ha1c2327ac82037ebE>:
/// # }
/// ```
///
/// [`set_logger_racy`]: fn.set_logger_racy.html
#[cfg(atomic_cas)]
pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {
  232b80:	48 83 ec 28          	sub    $0x28,%rsp
  232b84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  232b89:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    set_logger_inner(|| logger)
  232b8e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  232b93:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  232b98:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  232b9d:	e8 2e 00 00 00       	callq  232bd0 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>
  232ba2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  232ba6:	8a 44 24 0f          	mov    0xf(%rsp),%al
}
  232baa:	24 01                	and    $0x1,%al
  232bac:	0f b6 c0             	movzbl %al,%eax
  232baf:	48 83 c4 28          	add    $0x28,%rsp
  232bb3:	c3                   	retq   
  232bb4:	cc                   	int3   
  232bb5:	cc                   	int3   
  232bb6:	cc                   	int3   
  232bb7:	cc                   	int3   
  232bb8:	cc                   	int3   
  232bb9:	cc                   	int3   
  232bba:	cc                   	int3   
  232bbb:	cc                   	int3   
  232bbc:	cc                   	int3   
  232bbd:	cc                   	int3   
  232bbe:	cc                   	int3   
  232bbf:	cc                   	int3   

0000000000232bc0 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>:
    set_logger_inner(|| logger)
  232bc0:	50                   	push   %rax
  232bc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  232bc5:	48 8b 07             	mov    (%rdi),%rax
  232bc8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  232bcc:	59                   	pop    %rcx
  232bcd:	c3                   	retq   
  232bce:	cc                   	int3   
  232bcf:	cc                   	int3   

0000000000232bd0 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>:

#[cfg(atomic_cas)]
fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
  232bd0:	48 83 ec 68          	sub    $0x68,%rsp
  232bd4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  232bd9:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
where
    F: FnOnce() -> &'static dyn Log,
{
    let old_state = match STATE.compare_exchange(
  232bde:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  232be3:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
        UNINITIALIZED,
        INITIALIZING,
        Ordering::SeqCst,
  232be8:	c6 44 24 46 04       	movb   $0x4,0x46(%rsp)
        Ordering::SeqCst,
  232bed:	c6 44 24 47 04       	movb   $0x4,0x47(%rsp)
    let old_state = match STATE.compare_exchange(
  232bf2:	44 0f b6 44 24 47    	movzbl 0x47(%rsp),%r8d
  232bf8:	0f b6 4c 24 46       	movzbl 0x46(%rsp),%ecx
  232bfd:	48 8d 3d ac 2d 01 00 	lea    0x12dac(%rip),%rdi        # 2459b0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  232c04:	31 c0                	xor    %eax,%eax
  232c06:	89 c6                	mov    %eax,%esi
  232c08:	ba 01 00 00 00       	mov    $0x1,%edx
  232c0d:	e8 fe 09 00 00       	callq  233610 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>
  232c12:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  232c17:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  232c1c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  232c21:	48 85 c0             	test   %rax,%rax
  232c24:	74 06                	je     232c2c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x5c>
  232c26:	eb 00                	jmp    232c28 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x58>
  232c28:	eb 0e                	jmp    232c38 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x68>
  232c2a:	0f 0b                	ud2    
    ) {
        Ok(s) | Err(s) => s,
  232c2c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  232c31:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    let old_state = match STATE.compare_exchange(
  232c36:	eb 0a                	jmp    232c42 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x72>
        Ok(s) | Err(s) => s,
  232c38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  232c3d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  232c42:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  232c47:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  232c4c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };
    match old_state {
  232c51:	48 85 c0             	test   %rax,%rax
  232c54:	74 16                	je     232c6c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x9c>
  232c56:	eb 00                	jmp    232c58 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x88>
  232c58:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  232c5d:	48 83 e8 01          	sub    $0x1,%rax
  232c61:	74 24                	je     232c87 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  232c63:	eb 00                	jmp    232c65 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x95>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
                std::sync::atomic::spin_loop_hint();
            }
            Err(SetLoggerError(()))
        }
        _ => Err(SetLoggerError(())),
  232c65:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  232c6a:	eb 37                	jmp    232ca3 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
  232c6c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                LOGGER = make_logger();
  232c71:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  232c76:	e8 45 ff ff ff       	callq  232bc0 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>
  232c7b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232c80:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  232c85:	eb 3d                	jmp    232cc4 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xf4>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  232c87:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  232c8c:	48 8d 3d 1d 2d 01 00 	lea    0x12d1d(%rip),%rdi        # 2459b0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  232c93:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  232c98:	e8 f3 09 00 00       	callq  233690 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  232c9d:	48 89 04 24          	mov    %rax,(%rsp)
  232ca1:	eb 09                	jmp    232cac <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xdc>
    }
}
  232ca3:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  232ca8:	75 62                	jne    232d0c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x13c>
  232caa:	eb 52                	jmp    232cfe <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  232cac:	48 8b 04 24          	mov    (%rsp),%rax
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  232cb0:	48 83 f8 01          	cmp    $0x1,%rax
  232cb4:	74 07                	je     232cbd <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xed>
            Err(SetLoggerError(()))
  232cb6:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  232cbb:	eb e6                	jmp    232ca3 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
                std::sync::atomic::spin_loop_hint();
  232cbd:	e8 ae 0b 00 00       	callq  233870 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>
  232cc2:	eb c3                	jmp    232c87 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  232cc4:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232cc9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                LOGGER = make_logger();
  232cce:	48 89 0d 8b bf 00 00 	mov    %rcx,0xbf8b(%rip)        # 23ec60 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  232cd5:	48 89 05 8c bf 00 00 	mov    %rax,0xbf8c(%rip)        # 23ec68 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
            STATE.store(INITIALIZED, Ordering::SeqCst);
  232cdc:	c6 44 24 55 04       	movb   $0x4,0x55(%rsp)
  232ce1:	48 8d 3d c8 2c 01 00 	lea    0x12cc8(%rip),%rdi        # 2459b0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  232ce8:	be 02 00 00 00       	mov    $0x2,%esi
  232ced:	0f b6 54 24 55       	movzbl 0x55(%rsp),%edx
  232cf2:	e8 d9 09 00 00       	callq  2336d0 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>
            Ok(())
  232cf7:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  232cfc:	eb a5                	jmp    232ca3 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
}
  232cfe:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  232d02:	24 01                	and    $0x1,%al
  232d04:	0f b6 c0             	movzbl %al,%eax
  232d07:	48 83 c4 68          	add    $0x68,%rsp
  232d0b:	c3                   	retq   
  232d0c:	eb f0                	jmp    232cfe <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  232d0e:	cc                   	int3   
  232d0f:	cc                   	int3   

0000000000232d10 <_ZN3log6logger17hb619d971bb0802d6E>:
impl error::Error for ParseLevelError {}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static dyn Log {
  232d10:	48 83 ec 28          	sub    $0x28,%rsp
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  232d14:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  232d19:	48 8d 3d 90 2c 01 00 	lea    0x12c90(%rip),%rdi        # 2459b0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  232d20:	0f b6 74 24 27       	movzbl 0x27(%rsp),%esi
  232d25:	e8 66 09 00 00       	callq  233690 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  232d2a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232d2f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232d34:	48 83 f8 02          	cmp    $0x2,%rax
  232d38:	75 1a                	jne    232d54 <_ZN3log6logger17hb619d971bb0802d6E+0x44>
        static NOP: NopLogger = NopLogger;
        &NOP
    } else {
        unsafe { LOGGER }
  232d3a:	48 8b 0d 1f bf 00 00 	mov    0xbf1f(%rip),%rcx        # 23ec60 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  232d41:	48 8b 05 20 bf 00 00 	mov    0xbf20(%rip),%rax        # 23ec68 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
  232d48:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  232d4d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  232d52:	eb 18                	jmp    232d6c <_ZN3log6logger17hb619d971bb0802d6E+0x5c>
        &NOP
  232d54:	48 8d 05 8c 12 fd ff 	lea    -0x2ed74(%rip),%rax        # 203fe7 <_ZN3log6logger3NOP17ha8b888e78aa907e8E>
  232d5b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  232d60:	48 8d 05 b9 a7 00 00 	lea    0xa7b9(%rip),%rax        # 23d520 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820+0x30>
  232d67:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  232d6c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  232d71:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    }
}
  232d76:	48 83 c4 28          	add    $0x28,%rsp
  232d7a:	c3                   	retq   
  232d7b:	cc                   	int3   
  232d7c:	cc                   	int3   
  232d7d:	cc                   	int3   
  232d7e:	cc                   	int3   
  232d7f:	cc                   	int3   

0000000000232d80 <_ZN3log17__private_api_log17ha4b636ffcba62793E>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
  232d80:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  232d87:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  232d8c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  232d91:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  232d96:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  232d9d:	00 
  232d9e:	48 89 94 24 f8 01 00 	mov    %rdx,0x1f8(%rsp)
  232da5:	00 
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
  232da6:	48 8b 0a             	mov    (%rdx),%rcx
  232da9:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  232dae:	48 8b 42 08          	mov    0x8(%rdx),%rax
  232db2:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  232db7:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  232dbe:	00 
  232dbf:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  232dc6:	00 
  232dc7:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  232dcb:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  232dd0:	48 8b 42 18          	mov    0x18(%rdx),%rax
  232dd4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  232dd9:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  232de0:	00 
  232de1:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  232de8:	00 
  232de9:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  232ded:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  232df2:	48 8b 42 28          	mov    0x28(%rdx),%rax
  232df6:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  232dfb:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  232e02:	00 
  232e03:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  232e0a:	00 
  232e0b:	8b 42 30             	mov    0x30(%rdx),%eax
  232e0e:	89 84 24 84 00 00 00 	mov    %eax,0x84(%rsp)
  232e15:	89 84 24 34 02 00 00 	mov    %eax,0x234(%rsp)
) {
    logger().log(
  232e1c:	e8 ef fe ff ff       	callq  232d10 <_ZN3log6logger17hb619d971bb0802d6E>
  232e21:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  232e28:	00 
  232e29:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  232e30:	00 
        &Record::builder()
  232e31:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  232e38:	00 
  232e39:	e8 82 f9 ff ff       	callq  2327c0 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>
  232e3e:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
            .args(args)
  232e43:	48 8d bc 24 98 01 00 	lea    0x198(%rsp),%rdi
  232e4a:	00 
  232e4b:	ba 30 00 00 00       	mov    $0x30,%edx
  232e50:	e8 9b 5e 00 00       	callq  238cf0 <memcpy>
        &Record::builder()
  232e55:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  232e5c:	00 
  232e5d:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  232e64:	00 
  232e65:	e8 c6 fa ff ff       	callq  232930 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>
  232e6a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  232e6f:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  232e74:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  232e79:	e8 f2 fa ff ff       	callq  232970 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>
  232e7e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  232e83:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  232e88:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  232e8d:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  232e92:	e8 f9 fa ff ff       	callq  232990 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>
  232e97:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  232e9c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  232ea1:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  232ea6:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
  232eab:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  232eb2:	00 
  232eb3:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  232eba:	00 
        &Record::builder()
  232ebb:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
  232ec2:	00 
  232ec3:	48 8b 94 24 d0 01 00 	mov    0x1d0(%rsp),%rdx
  232eca:	00 
  232ecb:	e8 f0 fa ff ff       	callq  2329c0 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>
  232ed0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  232ed5:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  232eda:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  232edf:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            .file_static(Some(file))
  232ee4:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  232eeb:	00 
  232eec:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  232ef3:	00 
        &Record::builder()
  232ef4:	48 8b b4 24 d8 01 00 	mov    0x1d8(%rsp),%rsi
  232efb:	00 
  232efc:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  232f03:	00 
  232f04:	e8 07 fb ff ff       	callq  232a10 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>
  232f09:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  232f0e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  232f13:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
            .line(Some(line))
  232f1a:	89 84 24 ec 01 00 00 	mov    %eax,0x1ec(%rsp)
  232f21:	c7 84 24 e8 01 00 00 	movl   $0x1,0x1e8(%rsp)
  232f28:	01 00 00 00 
        &Record::builder()
  232f2c:	8b b4 24 e8 01 00 00 	mov    0x1e8(%rsp),%esi
  232f33:	8b 94 24 ec 01 00 00 	mov    0x1ec(%rsp),%edx
  232f3a:	e8 21 fb ff ff       	callq  232a60 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>
  232f3f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232f44:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  232f49:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  232f50:	00 
  232f51:	e8 2a fb ff ff       	callq  232a80 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>
  232f56:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  232f5d:	00 
  232f5e:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  232f65:	00 
    logger().log(
  232f66:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  232f6d:	00 
  232f6e:	ff 50 28             	callq  *0x28(%rax)
            .build(),
    );
}
  232f71:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  232f78:	c3                   	retq   
  232f79:	cc                   	int3   
  232f7a:	cc                   	int3   
  232f7b:	cc                   	int3   
  232f7c:	cc                   	int3   
  232f7d:	cc                   	int3   
  232f7e:	cc                   	int3   
  232f7f:	cc                   	int3   

0000000000232f80 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>:
    Static(&'static str),
  232f80:	48 83 ec 10          	sub    $0x10,%rsp
  232f84:	48 89 f8             	mov    %rdi,%rax
  232f87:	48 89 34 24          	mov    %rsi,(%rsp)
  232f8b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  232f90:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  232f94:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  232f98:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  232f9f:	48 83 c4 10          	add    $0x10,%rsp
  232fa3:	c3                   	retq   
  232fa4:	cc                   	int3   
  232fa5:	cc                   	int3   
  232fa6:	cc                   	int3   
  232fa7:	cc                   	int3   
  232fa8:	cc                   	int3   
  232fa9:	cc                   	int3   
  232faa:	cc                   	int3   
  232fab:	cc                   	int3   
  232fac:	cc                   	int3   
  232fad:	cc                   	int3   
  232fae:	cc                   	int3   
  232faf:	cc                   	int3   

0000000000232fb0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  232fb0:	50                   	push   %rax
  232fb1:	48 89 f8             	mov    %rdi,%rax
  232fb4:	48 89 34 24          	mov    %rsi,(%rsp)
  232fb8:	48 8b 0e             	mov    (%rsi),%rcx
  232fbb:	48 89 0f             	mov    %rcx,(%rdi)
  232fbe:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  232fc2:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  232fc6:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  232fca:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  232fce:	59                   	pop    %rcx
  232fcf:	c3                   	retq   

0000000000232fd0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>:
#[derive(Clone, Debug)]
  232fd0:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  232fd7:	48 89 f0             	mov    %rsi,%rax
  232fda:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  232fdf:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  232fe4:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  232feb:	00 
    metadata: Metadata<'a>,
  232fec:	48 89 c6             	mov    %rax,%rsi
  232fef:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  232ff6:	00 
    args: fmt::Arguments<'a>,
  232ff7:	48 89 c1             	mov    %rax,%rcx
  232ffa:	48 83 c1 18          	add    $0x18,%rcx
  232ffe:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  233003:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  23300a:	00 
    module_path: Option<MaybeStaticStr<'a>>,
  23300b:	48 89 c1             	mov    %rax,%rcx
  23300e:	48 83 c1 48          	add    $0x48,%rcx
  233012:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  233017:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  23301e:	00 
    file: Option<MaybeStaticStr<'a>>,
  23301f:	48 89 c1             	mov    %rax,%rcx
  233022:	48 83 c1 60          	add    $0x60,%rcx
  233026:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  23302b:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  233032:	00 
    line: Option<u32>,
  233033:	48 83 c0 78          	add    $0x78,%rax
  233037:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  23303c:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  233043:	00 
    metadata: Metadata<'a>,
  233044:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  233049:	e8 e2 00 00 00       	callq  233130 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  23304e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    args: fmt::Arguments<'a>,
  233053:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  233058:	e8 73 0d 00 00       	callq  233dd0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>
  23305d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    module_path: Option<MaybeStaticStr<'a>>,
  233062:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  233069:	00 
  23306a:	e8 21 05 00 00       	callq  233590 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  23306f:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    file: Option<MaybeStaticStr<'a>>,
  233074:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  23307b:	00 
  23307c:	e8 0f 05 00 00       	callq  233590 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  233081:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    line: Option<u32>,
  233086:	e8 a5 04 00 00       	callq  233530 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>
  23308b:	89 44 24 08          	mov    %eax,0x8(%rsp)
  23308f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  233093:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
#[derive(Clone, Debug)]
  233098:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  23309d:	48 89 07             	mov    %rax,(%rdi)
  2330a0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2330a5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  2330a9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2330ae:	48 89 47 10          	mov    %rax,0x10(%rdi)
  2330b2:	48 83 c7 18          	add    $0x18,%rdi
  2330b6:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  2330bb:	ba 30 00 00 00       	mov    $0x30,%edx
  2330c0:	e8 2b 5c 00 00       	callq  238cf0 <memcpy>
  2330c5:	8b 74 24 08          	mov    0x8(%rsp),%esi
  2330c9:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  2330cd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2330d2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2330d7:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  2330de:	00 
  2330df:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  2330e3:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  2330ea:	00 
  2330eb:	48 89 79 50          	mov    %rdi,0x50(%rcx)
  2330ef:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  2330f6:	00 
  2330f7:	48 89 79 58          	mov    %rdi,0x58(%rcx)
  2330fb:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  233102:	00 
  233103:	48 89 79 60          	mov    %rdi,0x60(%rcx)
  233107:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  23310e:	00 
  23310f:	48 89 79 68          	mov    %rdi,0x68(%rcx)
  233113:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  23311a:	00 
  23311b:	48 89 79 70          	mov    %rdi,0x70(%rcx)
  23311f:	89 71 78             	mov    %esi,0x78(%rcx)
  233122:	89 51 7c             	mov    %edx,0x7c(%rcx)
  233125:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  23312c:	c3                   	retq   
  23312d:	cc                   	int3   
  23312e:	cc                   	int3   
  23312f:	cc                   	int3   

0000000000233130 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  233130:	48 83 ec 48          	sub    $0x48,%rsp
  233134:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  233139:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  23313e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    level: Level,
  233143:	48 89 f7             	mov    %rsi,%rdi
  233146:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
    target: &'a str,
  23314b:	48 83 c6 08          	add    $0x8,%rsi
  23314f:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  233154:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
    level: Level,
  233159:	e8 a2 f5 ff ff       	callq  232700 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>
  23315e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  233163:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    target: &'a str,
  233168:	e8 03 0e 00 00       	callq  233f70 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>
  23316d:	48 89 04 24          	mov    %rax,(%rsp)
  233171:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  233176:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23317b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  233180:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  233185:	48 8b 34 24          	mov    (%rsp),%rsi
  233189:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  23318e:	48 89 39             	mov    %rdi,(%rcx)
  233191:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  233195:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  233199:	48 83 c4 48          	add    $0x48,%rsp
  23319d:	c3                   	retq   
  23319e:	cc                   	int3   
  23319f:	cc                   	int3   

00000000002331a0 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>:
    fn copied<'a, T: 'a>(self) -> Copied<Self>
  2331a0:	48 83 ec 28          	sub    $0x28,%rsp
  2331a4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2331a9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Copied::new(self)
  2331ae:	e8 fd 01 00 00       	callq  2333b0 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>
  2331b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2331b8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2331bd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2331c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2331c7:	48 83 c4 28          	add    $0x28,%rsp
  2331cb:	c3                   	retq   
  2331cc:	cc                   	int3   
  2331cd:	cc                   	int3   
  2331ce:	cc                   	int3   
  2331cf:	cc                   	int3   

00000000002331d0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
  2331d0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  2331d7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2331dc:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  2331e1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  2331e6:	e8 25 02 00 00       	callq  233410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  2331eb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2331f0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2331f5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            assume(!ptr.is_null());
  2331fa:	e8 01 0e 00 00       	callq  234000 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
            let end = if mem::size_of::<T>() == 0 {
  2331ff:	eb 00                	jmp    233201 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x31>
  233201:	b8 01 00 00 00       	mov    $0x1,%eax
  233206:	48 83 f8 00          	cmp    $0x0,%rax
  23320a:	75 32                	jne    23323e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x6e>
  23320c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  233211:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  233216:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23321b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233220:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  233225:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        unsafe { intrinsics::arith_offset(self, count) }
  23322a:	48 01 c8             	add    %rcx,%rax
  23322d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  233232:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  233237:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  23323c:	eb 55                	jmp    233293 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xc3>
  23323e:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  233243:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  233248:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  23324f:	00 
  233250:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  233257:	00 
  233258:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  23325f:	00 
  233260:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  233267:	00 
        unsafe { intrinsics::offset(self, count) }
  233268:	48 01 c8             	add    %rcx,%rax
  23326b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  233272:	00 
  233273:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  23327a:	00 
                ptr.add(slice.len())
  23327b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  233280:	eb 00                	jmp    233282 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  233282:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  233287:	e8 a4 01 00 00       	callq  233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  23328c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233291:	eb 0c                	jmp    23329f <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xcf>
  233293:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  233298:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  23329d:	eb e3                	jmp    233282 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  23329f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  2332a4:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2332a9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2332ae:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  2332b3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2332b8:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2332bd:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  2332c4:	c3                   	retq   
  2332c5:	cc                   	int3   
  2332c6:	cc                   	int3   
  2332c7:	cc                   	int3   
  2332c8:	cc                   	int3   
  2332c9:	cc                   	int3   
  2332ca:	cc                   	int3   
  2332cb:	cc                   	int3   
  2332cc:	cc                   	int3   
  2332cd:	cc                   	int3   
  2332ce:	cc                   	int3   
  2332cf:	cc                   	int3   

00000000002332d0 <_ZN4core3cmp3Ord3min17hb6348d27f3eef709E>:
    fn min(self, other: Self) -> Self
  2332d0:	48 83 ec 18          	sub    $0x18,%rsp
  2332d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2332d9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        min_by(self, other, Ord::cmp)
  2332de:	e8 2d 00 00 00       	callq  233310 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE>
  2332e3:	48 89 04 24          	mov    %rax,(%rsp)
  2332e7:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2332eb:	48 83 c4 18          	add    $0x18,%rsp
  2332ef:	c3                   	retq   

00000000002332f0 <_ZN4core3cmp3min17he6f664f09d7a8d9bE>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
  2332f0:	48 83 ec 18          	sub    $0x18,%rsp
  2332f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2332f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    v1.min(v2)
  2332fe:	e8 cd ff ff ff       	callq  2332d0 <_ZN4core3cmp3Ord3min17hb6348d27f3eef709E>
  233303:	48 89 04 24          	mov    %rax,(%rsp)
  233307:	48 8b 04 24          	mov    (%rsp),%rax
}
  23330b:	48 83 c4 18          	add    $0x18,%rsp
  23330f:	c3                   	retq   

0000000000233310 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  233310:	48 83 ec 48          	sub    $0x48,%rsp
  233314:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233319:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    match compare(&v1, &v2) {
  23331e:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  233323:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  233328:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
  23332d:	c6 44 24 3e 01       	movb   $0x1,0x3e(%rsp)
  233332:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233337:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23333c:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  233341:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233346:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  23334b:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  233350:	e8 8b 0b 00 00       	callq  233ee0 <_ZN4core3ops8function6FnOnce9call_once17hc43e9fddc4999b9bE>
  233355:	88 44 24 27          	mov    %al,0x27(%rsp)
  233359:	8a 44 24 27          	mov    0x27(%rsp),%al
  23335d:	04 01                	add    $0x1,%al
  23335f:	2c 02                	sub    $0x2,%al
  233361:	72 06                	jb     233369 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x59>
  233363:	eb 00                	jmp    233365 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x55>
  233365:	eb 13                	jmp    23337a <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x6a>
  233367:	0f 0b                	ud2    
        Ordering::Less | Ordering::Equal => v1,
  233369:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  23336e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233373:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233378:	eb 0f                	jmp    233389 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x79>
        Ordering::Greater => v2,
  23337a:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  23337f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  233384:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
}
  233389:	f6 44 24 3e 01       	testb  $0x1,0x3e(%rsp)
  23338e:	75 09                	jne    233399 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x89>
  233390:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  233395:	75 0e                	jne    2333a5 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x95>
  233397:	eb 02                	jmp    23339b <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x8b>
  233399:	eb f5                	jmp    233390 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x80>
  23339b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2333a0:	48 83 c4 48          	add    $0x48,%rsp
  2333a4:	c3                   	retq   
  2333a5:	eb f4                	jmp    23339b <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x8b>
  2333a7:	cc                   	int3   
  2333a8:	cc                   	int3   
  2333a9:	cc                   	int3   
  2333aa:	cc                   	int3   
  2333ab:	cc                   	int3   
  2333ac:	cc                   	int3   
  2333ad:	cc                   	int3   
  2333ae:	cc                   	int3   
  2333af:	cc                   	int3   

00000000002333b0 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
  2333b0:	48 83 ec 20          	sub    $0x20,%rsp
  2333b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2333b9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Copied { it }
  2333be:	48 89 3c 24          	mov    %rdi,(%rsp)
  2333c2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  2333c7:	48 8b 04 24          	mov    (%rsp),%rax
  2333cb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2333d0:	48 83 c4 20          	add    $0x20,%rsp
  2333d4:	c3                   	retq   
  2333d5:	cc                   	int3   
  2333d6:	cc                   	int3   
  2333d7:	cc                   	int3   
  2333d8:	cc                   	int3   
  2333d9:	cc                   	int3   
  2333da:	cc                   	int3   
  2333db:	cc                   	int3   
  2333dc:	cc                   	int3   
  2333dd:	cc                   	int3   
  2333de:	cc                   	int3   
  2333df:	cc                   	int3   

00000000002333e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>:
    pub fn iter(&self) -> Iter<'_, T> {
  2333e0:	48 83 ec 28          	sub    $0x28,%rsp
  2333e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2333e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  2333ee:	e8 dd fd ff ff       	callq  2331d0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>
  2333f3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2333f8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2333fd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  233402:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  233407:	48 83 c4 28          	add    $0x28,%rsp
  23340b:	c3                   	retq   
  23340c:	cc                   	int3   
  23340d:	cc                   	int3   
  23340e:	cc                   	int3   
  23340f:	cc                   	int3   

0000000000233410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>:
    pub const fn as_ptr(&self) -> *const T {
  233410:	48 83 ec 10          	sub    $0x10,%rsp
  233414:	48 89 f8             	mov    %rdi,%rax
  233417:	48 89 04 24          	mov    %rax,(%rsp)
  23341b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  233420:	48 83 c4 10          	add    $0x10,%rsp
  233424:	c3                   	retq   
  233425:	cc                   	int3   
  233426:	cc                   	int3   
  233427:	cc                   	int3   
  233428:	cc                   	int3   
  233429:	cc                   	int3   
  23342a:	cc                   	int3   
  23342b:	cc                   	int3   
  23342c:	cc                   	int3   
  23342d:	cc                   	int3   
  23342e:	cc                   	int3   
  23342f:	cc                   	int3   

0000000000233430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  233430:	48 83 ec 10          	sub    $0x10,%rsp
  233434:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  233439:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  23343d:	48 8b 04 24          	mov    (%rsp),%rax
  233441:	48 83 c4 10          	add    $0x10,%rsp
  233445:	c3                   	retq   
  233446:	cc                   	int3   
  233447:	cc                   	int3   
  233448:	cc                   	int3   
  233449:	cc                   	int3   
  23344a:	cc                   	int3   
  23344b:	cc                   	int3   
  23344c:	cc                   	int3   
  23344d:	cc                   	int3   
  23344e:	cc                   	int3   
  23344f:	cc                   	int3   

0000000000233450 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>:
    pub const fn as_ptr(self) -> *mut T {
  233450:	50                   	push   %rax
  233451:	48 89 f8             	mov    %rdi,%rax
  233454:	48 89 04 24          	mov    %rax,(%rsp)
    }
  233458:	59                   	pop    %rcx
  233459:	c3                   	retq   
  23345a:	cc                   	int3   
  23345b:	cc                   	int3   
  23345c:	cc                   	int3   
  23345d:	cc                   	int3   
  23345e:	cc                   	int3   
  23345f:	cc                   	int3   

0000000000233460 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>:
    fn into_iter(self) -> I {
  233460:	48 83 ec 10          	sub    $0x10,%rsp
  233464:	48 89 f2             	mov    %rsi,%rdx
  233467:	48 89 f8             	mov    %rdi,%rax
  23346a:	48 89 04 24          	mov    %rax,(%rsp)
  23346e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  233473:	48 83 c4 10          	add    $0x10,%rsp
  233477:	c3                   	retq   
  233478:	cc                   	int3   
  233479:	cc                   	int3   
  23347a:	cc                   	int3   
  23347b:	cc                   	int3   
  23347c:	cc                   	int3   
  23347d:	cc                   	int3   
  23347e:	cc                   	int3   
  23347f:	cc                   	int3   

0000000000233480 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  233480:	48 83 ec 68          	sub    $0x68,%rsp
  233484:	48 89 3c 24          	mov    %rdi,(%rsp)
  233488:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  23348d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  233492:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
        match self {
  233497:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  23349c:	c6 44 24 4f 01       	movb   $0x1,0x4f(%rsp)
  2334a1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2334a6:	48 85 c0             	test   %rax,%rax
  2334a9:	0f 95 c0             	setne  %al
  2334ac:	0f b6 c0             	movzbl %al,%eax
  2334af:	74 06                	je     2334b7 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x37>
  2334b1:	eb 00                	jmp    2334b3 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x33>
  2334b3:	eb 0f                	jmp    2334c4 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x44>
  2334b5:	0f 0b                	ud2    
  2334b7:	48 8b 04 24          	mov    (%rsp),%rax
            None => None,
  2334bb:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  2334c2:	eb 55                	jmp    233519 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x99>
            Some(x) => Some(f(x)),
  2334c4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2334c9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2334ce:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2334d3:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2334d8:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  2334dd:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2334e2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2334e7:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2334ec:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  2334f1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2334f6:	e8 b5 09 00 00       	callq  233eb0 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>
  2334fb:	48 8b 04 24          	mov    (%rsp),%rax
  2334ff:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  233504:	48 89 08             	mov    %rcx,(%rax)
  233507:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  23350c:	48 89 48 08          	mov    %rcx,0x8(%rax)
  233510:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  233515:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  233519:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  23351e:	75 0a                	jne    23352a <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xaa>
  233520:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233525:	48 83 c4 68          	add    $0x68,%rsp
  233529:	c3                   	retq   
  23352a:	eb f4                	jmp    233520 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xa0>
  23352c:	cc                   	int3   
  23352d:	cc                   	int3   
  23352e:	cc                   	int3   
  23352f:	cc                   	int3   

0000000000233530 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>:
/////////////////////////////////////////////////////////////////////////////

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: Clone> Clone for Option<T> {
    #[inline]
    fn clone(&self) -> Self {
  233530:	48 83 ec 28          	sub    $0x28,%rsp
  233534:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233539:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  23353e:	8b 07                	mov    (%rdi),%eax
  233540:	48 85 c0             	test   %rax,%rax
  233543:	74 06                	je     23354b <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x1b>
  233545:	eb 00                	jmp    233547 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x17>
  233547:	eb 0c                	jmp    233555 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x25>
  233549:	0f 0b                	ud2    
            Some(x) => Some(x.clone()),
            None => None,
  23354b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  233552:	00 
  233553:	eb 27                	jmp    23357c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x4c>
  233555:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(x) => Some(x.clone()),
  23355a:	48 83 c7 04          	add    $0x4,%rdi
  23355e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  233563:	e8 f8 09 00 00       	callq  233f60 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>
  233568:	89 44 24 04          	mov    %eax,0x4(%rsp)
  23356c:	8b 44 24 04          	mov    0x4(%rsp),%eax
  233570:	89 44 24 14          	mov    %eax,0x14(%rsp)
  233574:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%rsp)
  23357b:	00 
        }
    }
  23357c:	8b 44 24 10          	mov    0x10(%rsp),%eax
  233580:	8b 54 24 14          	mov    0x14(%rsp),%edx
  233584:	48 83 c4 28          	add    $0x28,%rsp
  233588:	c3                   	retq   
  233589:	cc                   	int3   
  23358a:	cc                   	int3   
  23358b:	cc                   	int3   
  23358c:	cc                   	int3   
  23358d:	cc                   	int3   
  23358e:	cc                   	int3   
  23358f:	cc                   	int3   

0000000000233590 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>:
    fn clone(&self) -> Self {
  233590:	48 83 ec 48          	sub    $0x48,%rsp
  233594:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  233599:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23359e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2335a3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        match self {
  2335a8:	48 8b 06             	mov    (%rsi),%rax
  2335ab:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  2335af:	0f 95 c0             	setne  %al
  2335b2:	0f b6 c0             	movzbl %al,%eax
  2335b5:	74 06                	je     2335bd <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x2d>
  2335b7:	eb 00                	jmp    2335b9 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x29>
  2335b9:	eb 10                	jmp    2335cb <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x3b>
  2335bb:	0f 0b                	ud2    
  2335bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  2335c2:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  2335c9:	eb 33                	jmp    2335fe <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x6e>
  2335cb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            Some(x) => Some(x.clone()),
  2335d0:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  2335d5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2335da:	e8 d1 f9 ff ff       	callq  232fb0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>
  2335df:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2335e4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2335e9:	48 89 08             	mov    %rcx,(%rax)
  2335ec:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2335f1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2335f5:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2335fa:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2335fe:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  233603:	48 83 c4 48          	add    $0x48,%rsp
  233607:	c3                   	retq   
  233608:	cc                   	int3   
  233609:	cc                   	int3   
  23360a:	cc                   	int3   
  23360b:	cc                   	int3   
  23360c:	cc                   	int3   
  23360d:	cc                   	int3   
  23360e:	cc                   	int3   
  23360f:	cc                   	int3   

0000000000233610 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>:
            pub fn compare_exchange(&self,
  233610:	48 83 ec 58          	sub    $0x58,%rsp
  233614:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  233619:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  23361e:	44 88 c0             	mov    %r8b,%al
  233621:	88 44 24 26          	mov    %al,0x26(%rsp)
  233625:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  233629:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  23362e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  233633:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  233638:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  23363c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  233640:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  233645:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  23364a:	8a 44 24 26          	mov    0x26(%rsp),%al
  23364e:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  233652:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  233657:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  23365c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  233661:	0f b6 c9             	movzbl %cl,%ecx
  233664:	44 0f b6 c0          	movzbl %al,%r8d
  233668:	e8 13 02 00 00       	callq  233880 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  23366d:	48 89 04 24          	mov    %rax,(%rsp)
  233671:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  233676:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23367b:	48 8b 04 24          	mov    (%rsp),%rax
            }
  23367f:	48 83 c4 58          	add    $0x58,%rsp
  233683:	c3                   	retq   
  233684:	cc                   	int3   
  233685:	cc                   	int3   
  233686:	cc                   	int3   
  233687:	cc                   	int3   
  233688:	cc                   	int3   
  233689:	cc                   	int3   
  23368a:	cc                   	int3   
  23368b:	cc                   	int3   
  23368c:	cc                   	int3   
  23368d:	cc                   	int3   
  23368e:	cc                   	int3   
  23368f:	cc                   	int3   

0000000000233690 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  233690:	48 83 ec 38          	sub    $0x38,%rsp
  233694:	40 88 f0             	mov    %sil,%al
  233697:	88 44 24 17          	mov    %al,0x17(%rsp)
  23369b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2336a0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2336a4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2336a9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2336ae:	8a 44 24 17          	mov    0x17(%rsp),%al
  2336b2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  2336b7:	0f b6 f0             	movzbl %al,%esi
  2336ba:	e8 51 00 00 00       	callq  233710 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  2336bf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2336c4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  2336c9:	48 83 c4 38          	add    $0x38,%rsp
  2336cd:	c3                   	retq   
  2336ce:	cc                   	int3   
  2336cf:	cc                   	int3   

00000000002336d0 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  2336d0:	48 83 ec 38          	sub    $0x38,%rsp
  2336d4:	48 89 34 24          	mov    %rsi,(%rsp)
  2336d8:	88 d0                	mov    %dl,%al
  2336da:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2336de:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2336e3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2336e8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2336ec:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2336f1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2336f6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2336fa:	48 8b 34 24          	mov    (%rsp),%rsi
  2336fe:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  233703:	0f b6 d0             	movzbl %al,%edx
  233706:	e8 b5 00 00 00       	callq  2337c0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  23370b:	48 83 c4 38          	add    $0x38,%rsp
  23370f:	c3                   	retq   

0000000000233710 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  233710:	48 83 ec 28          	sub    $0x28,%rsp
  233714:	48 89 3c 24          	mov    %rdi,(%rsp)
  233718:	40 88 f0             	mov    %sil,%al
  23371b:	88 44 24 17          	mov    %al,0x17(%rsp)
  23371f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  233724:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  233729:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23372e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233733:	48 8d 0d ae 08 fd ff 	lea    -0x2f752(%rip),%rcx        # 203fe8 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1>
  23373a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23373e:	48 01 c8             	add    %rcx,%rax
  233741:	ff e0                	jmpq   *%rax
  233743:	0f 0b                	ud2    
  233745:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  233749:	48 8b 00             	mov    (%rax),%rax
  23374c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233751:	eb 5c                	jmp    2337af <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  233753:	48 8d 3d 73 09 fd ff 	lea    -0x2f68d(%rip),%rdi        # 2040cd <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0xe6>
  23375a:	48 8d 15 87 9e 00 00 	lea    0x9e87(%rip),%rdx        # 23d5e8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x90>
  233761:	be 28 00 00 00       	mov    $0x28,%esi
  233766:	e8 85 24 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23376b:	0f 0b                	ud2    
  23376d:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  233771:	48 8b 00             	mov    (%rax),%rax
  233774:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233779:	eb 32                	jmp    2337ad <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  23377b:	48 8d 3d a2 08 fd ff 	lea    -0x2f75e(%rip),%rdi        # 204024 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x3d>
  233782:	48 8d 15 47 9e 00 00 	lea    0x9e47(%rip),%rdx        # 23d5d0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x78>
  233789:	be 31 00 00 00       	mov    $0x31,%esi
  23378e:	e8 5d 24 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233793:	0f 0b                	ud2    
  233795:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  233799:	48 8b 00             	mov    (%rax),%rax
  23379c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2337a1:	eb 00                	jmp    2337a3 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
}
  2337a3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2337a8:	48 83 c4 28          	add    $0x28,%rsp
  2337ac:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  2337ad:	eb f4                	jmp    2337a3 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  2337af:	eb f2                	jmp    2337a3 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
  2337b1:	cc                   	int3   
  2337b2:	cc                   	int3   
  2337b3:	cc                   	int3   
  2337b4:	cc                   	int3   
  2337b5:	cc                   	int3   
  2337b6:	cc                   	int3   
  2337b7:	cc                   	int3   
  2337b8:	cc                   	int3   
  2337b9:	cc                   	int3   
  2337ba:	cc                   	int3   
  2337bb:	cc                   	int3   
  2337bc:	cc                   	int3   
  2337bd:	cc                   	int3   
  2337be:	cc                   	int3   
  2337bf:	cc                   	int3   

00000000002337c0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  2337c0:	48 83 ec 38          	sub    $0x38,%rsp
  2337c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2337c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2337ce:	88 d0                	mov    %dl,%al
  2337d0:	88 44 24 27          	mov    %al,0x27(%rsp)
  2337d4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2337d9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  2337de:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  2337e3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2337e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2337ed:	48 8d 0d 08 08 fd ff 	lea    -0x2f7f8(%rip),%rcx        # 203ffc <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x15>
  2337f4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2337f8:	48 01 c8             	add    %rcx,%rax
  2337fb:	ff e0                	jmpq   *%rax
  2337fd:	0f 0b                	ud2    
  2337ff:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  233804:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  233809:	48 89 08             	mov    %rcx,(%rax)
  23380c:	eb 59                	jmp    233867 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa7>
  23380e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  233813:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  233818:	48 89 08             	mov    %rcx,(%rax)
  23381b:	eb 48                	jmp    233865 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  23381d:	48 8d 3d 03 09 fd ff 	lea    -0x2f6fd(%rip),%rdi        # 204127 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x140>
  233824:	48 8d 15 ed 9d 00 00 	lea    0x9ded(%rip),%rdx        # 23d618 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xc0>
  23382b:	be 2a 00 00 00       	mov    $0x2a,%esi
  233830:	e8 bb 23 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233835:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  233837:	48 8d 3d b7 08 fd ff 	lea    -0x2f749(%rip),%rdi        # 2040f5 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x10e>
  23383e:	48 8d 15 bb 9d 00 00 	lea    0x9dbb(%rip),%rdx        # 23d600 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xa8>
  233845:	be 32 00 00 00       	mov    $0x32,%esi
  23384a:	e8 a1 23 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23384f:	0f 0b                	ud2    
  233851:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  233856:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  23385b:	48 87 01             	xchg   %rax,(%rcx)
  23385e:	eb 00                	jmp    233860 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
}
  233860:	48 83 c4 38          	add    $0x38,%rsp
  233864:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  233865:	eb f9                	jmp    233860 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  233867:	eb f7                	jmp    233860 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
  233869:	cc                   	int3   
  23386a:	cc                   	int3   
  23386b:	cc                   	int3   
  23386c:	cc                   	int3   
  23386d:	cc                   	int3   
  23386e:	cc                   	int3   
  23386f:	cc                   	int3   

0000000000233870 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>:
pub fn spin_loop_hint() {
  233870:	50                   	push   %rax
    spin_loop()
  233871:	e8 da 06 00 00       	callq  233f50 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>
}
  233876:	58                   	pop    %rax
  233877:	c3                   	retq   
  233878:	cc                   	int3   
  233879:	cc                   	int3   
  23387a:	cc                   	int3   
  23387b:	cc                   	int3   
  23387c:	cc                   	int3   
  23387d:	cc                   	int3   
  23387e:	cc                   	int3   
  23387f:	cc                   	int3   

0000000000233880 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  233880:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  233887:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  23388c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  233891:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  233896:	44 88 c0             	mov    %r8b,%al
  233899:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  23389e:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  2338a5:	00 
  2338a6:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2338ad:	00 
  2338ae:	88 8c 24 96 00 00 00 	mov    %cl,0x96(%rsp)
  2338b5:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
        match (success, failure) {
  2338bc:	88 4c 24 70          	mov    %cl,0x70(%rsp)
  2338c0:	88 44 24 71          	mov    %al,0x71(%rsp)
  2338c4:	0f b6 44 24 70       	movzbl 0x70(%rsp),%eax
  2338c9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2338ce:	48 83 e8 04          	sub    $0x4,%rax
  2338d2:	77 15                	ja     2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2338d4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2338d9:	48 8d 0d 30 07 fd ff 	lea    -0x2f8d0(%rip),%rcx        # 204010 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x29>
  2338e0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2338e4:	48 01 c8             	add    %rcx,%rax
  2338e7:	ff e0                	jmpq   *%rax
  2338e9:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2338ee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2338f3:	48 83 e8 01          	sub    $0x1,%rax
  2338f7:	0f 84 74 02 00 00    	je     233b71 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2f1>
  2338fd:	eb 00                	jmp    2338ff <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x7f>
  2338ff:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  233904:	48 83 e8 03          	sub    $0x3,%rax
  233908:	0f 84 7d 02 00 00    	je     233b8b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x30b>
  23390e:	e9 44 02 00 00       	jmpq   233b57 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2d7>
  233913:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  233918:	48 83 f8 00          	cmp    $0x0,%rax
  23391c:	0f 84 0e 02 00 00    	je     233b30 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2b0>
  233922:	eb c5                	jmp    2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  233924:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  233929:	48 83 f8 00          	cmp    $0x0,%rax
  23392d:	0f 84 d3 01 00 00    	je     233b06 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x286>
  233933:	eb b4                	jmp    2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  233935:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  23393a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23393f:	48 85 c0             	test   %rax,%rax
  233942:	0f 84 68 01 00 00    	je     233ab0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x230>
  233948:	eb 00                	jmp    23394a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xca>
  23394a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  23394f:	48 83 e8 02          	sub    $0x2,%rax
  233953:	0f 84 7e 01 00 00    	je     233ad7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x257>
  233959:	eb 8e                	jmp    2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  23395b:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  233960:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233965:	48 85 c0             	test   %rax,%rax
  233968:	0f 84 ec 00 00 00    	je     233a5a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1da>
  23396e:	eb 00                	jmp    233970 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xf0>
  233970:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  233975:	48 83 e8 02          	sub    $0x2,%rax
  233979:	0f 84 02 01 00 00    	je     233a81 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x201>
  23397f:	e9 65 ff ff ff       	jmpq   2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  233984:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  233989:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  23398e:	48 85 c0             	test   %rax,%rax
  233991:	74 1f                	je     2339b2 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x132>
  233993:	eb 00                	jmp    233995 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x115>
  233995:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23399a:	48 83 e8 02          	sub    $0x2,%rax
  23399e:	74 39                	je     2339d9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x159>
  2339a0:	eb 00                	jmp    2339a2 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x122>
  2339a2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2339a7:	48 83 e8 04          	sub    $0x4,%rax
  2339ab:	74 53                	je     233a00 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x180>
  2339ad:	e9 37 ff ff ff       	jmpq   2338e9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2339b2:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2339b7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2339bc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  2339c1:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2339c6:	48 89 c1             	mov    %rax,%rcx
  2339c9:	0f 94 c0             	sete   %al
  2339cc:	24 01                	and    $0x1,%al
  2339ce:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2339d3:	88 44 24 68          	mov    %al,0x68(%rsp)
  2339d7:	eb 7f                	jmp    233a58 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d8>
  2339d9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2339de:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2339e3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  2339e8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2339ed:	48 89 c1             	mov    %rax,%rcx
  2339f0:	0f 94 c0             	sete   %al
  2339f3:	24 01                	and    $0x1,%al
  2339f5:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2339fa:	88 44 24 68          	mov    %al,0x68(%rsp)
  2339fe:	eb 56                	jmp    233a56 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d6>
  233a00:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233a05:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233a0a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  233a0f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233a14:	48 89 c1             	mov    %rax,%rcx
  233a17:	0f 94 c0             	sete   %al
  233a1a:	24 01                	and    $0x1,%al
  233a1c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233a21:	88 44 24 68          	mov    %al,0x68(%rsp)
  233a25:	eb 00                	jmp    233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
    let (val, ok) = unsafe {
  233a27:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  233a2c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233a31:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  233a38:	00 
  233a39:	8a 44 24 68          	mov    0x68(%rsp),%al
  233a3d:	88 c1                	mov    %al,%cl
  233a3f:	80 e1 01             	and    $0x1,%cl
  233a42:	88 8c 24 a7 00 00 00 	mov    %cl,0xa7(%rsp)
    if ok { Ok(val) } else { Err(val) }
  233a49:	a8 01                	test   $0x1,%al
  233a4b:	0f 85 6e 01 00 00    	jne    233bbf <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x33f>
  233a51:	e9 54 01 00 00       	jmpq   233baa <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x32a>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  233a56:	eb cf                	jmp    233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  233a58:	eb cd                	jmp    233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  233a5a:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233a5f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233a64:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  233a69:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233a6e:	48 89 c1             	mov    %rax,%rcx
  233a71:	0f 94 c0             	sete   %al
  233a74:	24 01                	and    $0x1,%al
  233a76:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233a7b:	88 44 24 68          	mov    %al,0x68(%rsp)
  233a7f:	eb 2a                	jmp    233aab <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x22b>
  233a81:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233a86:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233a8b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  233a90:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233a95:	48 89 c1             	mov    %rax,%rcx
  233a98:	0f 94 c0             	sete   %al
  233a9b:	24 01                	and    $0x1,%al
  233a9d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233aa2:	88 44 24 68          	mov    %al,0x68(%rsp)
  233aa6:	e9 7c ff ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  233aab:	e9 77 ff ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  233ab0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233ab5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233aba:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  233abf:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233ac4:	48 89 c1             	mov    %rax,%rcx
  233ac7:	0f 94 c0             	sete   %al
  233aca:	24 01                	and    $0x1,%al
  233acc:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233ad1:	88 44 24 68          	mov    %al,0x68(%rsp)
  233ad5:	eb 2a                	jmp    233b01 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x281>
  233ad7:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233adc:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233ae1:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  233ae6:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233aeb:	48 89 c1             	mov    %rax,%rcx
  233aee:	0f 94 c0             	sete   %al
  233af1:	24 01                	and    $0x1,%al
  233af3:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233af8:	88 44 24 68          	mov    %al,0x68(%rsp)
  233afc:	e9 26 ff ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  233b01:	e9 21 ff ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  233b06:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233b0b:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233b10:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  233b15:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233b1a:	48 89 c1             	mov    %rax,%rcx
  233b1d:	0f 94 c0             	sete   %al
  233b20:	24 01                	and    $0x1,%al
  233b22:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233b27:	88 44 24 68          	mov    %al,0x68(%rsp)
  233b2b:	e9 f7 fe ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  233b30:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  233b35:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  233b3a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  233b3f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  233b44:	48 89 c1             	mov    %rax,%rcx
  233b47:	0f 94 c0             	sete   %al
  233b4a:	24 01                	and    $0x1,%al
  233b4c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  233b51:	88 44 24 68          	mov    %al,0x68(%rsp)
  233b55:	eb 4e                	jmp    233ba5 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x325>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  233b57:	48 8d 3d f3 05 fd ff 	lea    -0x2fa0d(%rip),%rdi        # 204151 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x16a>
  233b5e:	48 8d 15 cb 9a 00 00 	lea    0x9acb(%rip),%rdx        # 23d630 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xd8>
  233b65:	be 3c 00 00 00       	mov    $0x3c,%esi
  233b6a:	e8 81 20 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233b6f:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  233b71:	48 8d 3d 52 06 fd ff 	lea    -0x2f9ae(%rip),%rdi        # 2041ca <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1e3>
  233b78:	48 8d 15 e1 9a 00 00 	lea    0x9ae1(%rip),%rdx        # 23d660 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x108>
  233b7f:	be 34 00 00 00       	mov    $0x34,%esi
  233b84:	e8 67 20 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233b89:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  233b8b:	48 8d 3d fb 05 fd ff 	lea    -0x2fa05(%rip),%rdi        # 20418d <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1a6>
  233b92:	48 8d 15 af 9a 00 00 	lea    0x9aaf(%rip),%rdx        # 23d648 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xf0>
  233b99:	be 3d 00 00 00       	mov    $0x3d,%esi
  233b9e:	e8 4d 20 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233ba3:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  233ba5:	e9 7d fe ff ff       	jmpq   233a27 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  233baa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    if ok { Ok(val) } else { Err(val) }
  233baf:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  233bb4:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  233bbb:	00 00 
  233bbd:	eb 13                	jmp    233bd2 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x352>
  233bbf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233bc4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  233bc9:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  233bd0:	00 00 
}
  233bd2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  233bd7:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  233bdc:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  233be3:	c3                   	retq   
  233be4:	cc                   	int3   
  233be5:	cc                   	int3   
  233be6:	cc                   	int3   
  233be7:	cc                   	int3   
  233be8:	cc                   	int3   
  233be9:	cc                   	int3   
  233bea:	cc                   	int3   
  233beb:	cc                   	int3   
  233bec:	cc                   	int3   
  233bed:	cc                   	int3   
  233bee:	cc                   	int3   
  233bef:	cc                   	int3   

0000000000233bf0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3fa8054ddf20da4cE>:
  233bf0:	48 83 ec 18          	sub    $0x18,%rsp
  233bf4:	48 89 f2             	mov    %rsi,%rdx
  233bf7:	48 89 f8             	mov    %rdi,%rax
  233bfa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233bff:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  233c04:	48 8b 38             	mov    (%rax),%rdi
  233c07:	48 8b 70 08          	mov    0x8(%rax),%rsi
  233c0b:	e8 b0 43 00 00       	callq  237fc0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>
  233c10:	88 44 24 07          	mov    %al,0x7(%rsp)
  233c14:	8a 44 24 07          	mov    0x7(%rsp),%al
  233c18:	24 01                	and    $0x1,%al
  233c1a:	0f b6 c0             	movzbl %al,%eax
  233c1d:	48 83 c4 18          	add    $0x18,%rsp
  233c21:	c3                   	retq   
  233c22:	cc                   	int3   
  233c23:	cc                   	int3   
  233c24:	cc                   	int3   
  233c25:	cc                   	int3   
  233c26:	cc                   	int3   
  233c27:	cc                   	int3   
  233c28:	cc                   	int3   
  233c29:	cc                   	int3   
  233c2a:	cc                   	int3   
  233c2b:	cc                   	int3   
  233c2c:	cc                   	int3   
  233c2d:	cc                   	int3   
  233c2e:	cc                   	int3   
  233c2f:	cc                   	int3   

0000000000233c30 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa69829319a95313E>:
  233c30:	48 83 ec 18          	sub    $0x18,%rsp
  233c34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233c39:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  233c3e:	48 8b 3f             	mov    (%rdi),%rdi
  233c41:	e8 ba 01 00 00       	callq  233e00 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE>
  233c46:	88 44 24 07          	mov    %al,0x7(%rsp)
  233c4a:	8a 44 24 07          	mov    0x7(%rsp),%al
  233c4e:	24 01                	and    $0x1,%al
  233c50:	0f b6 c0             	movzbl %al,%eax
  233c53:	48 83 c4 18          	add    $0x18,%rsp
  233c57:	c3                   	retq   
  233c58:	cc                   	int3   
  233c59:	cc                   	int3   
  233c5a:	cc                   	int3   
  233c5b:	cc                   	int3   
  233c5c:	cc                   	int3   
  233c5d:	cc                   	int3   
  233c5e:	cc                   	int3   
  233c5f:	cc                   	int3   

0000000000233c60 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h72ffccc9870a62adE>:
  233c60:	48 83 ec 18          	sub    $0x18,%rsp
  233c64:	48 89 f2             	mov    %rsi,%rdx
  233c67:	48 89 f8             	mov    %rdi,%rax
  233c6a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233c6f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  233c74:	48 8b 38             	mov    (%rax),%rdi
  233c77:	48 8b 70 08          	mov    0x8(%rax),%rsi
  233c7b:	e8 00 49 00 00       	callq  238580 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>
  233c80:	88 44 24 07          	mov    %al,0x7(%rsp)
  233c84:	8a 44 24 07          	mov    0x7(%rsp),%al
  233c88:	24 01                	and    $0x1,%al
  233c8a:	0f b6 c0             	movzbl %al,%eax
  233c8d:	48 83 c4 18          	add    $0x18,%rsp
  233c91:	c3                   	retq   
  233c92:	cc                   	int3   
  233c93:	cc                   	int3   
  233c94:	cc                   	int3   
  233c95:	cc                   	int3   
  233c96:	cc                   	int3   
  233c97:	cc                   	int3   
  233c98:	cc                   	int3   
  233c99:	cc                   	int3   
  233c9a:	cc                   	int3   
  233c9b:	cc                   	int3   
  233c9c:	cc                   	int3   
  233c9d:	cc                   	int3   
  233c9e:	cc                   	int3   
  233c9f:	cc                   	int3   

0000000000233ca0 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  233ca0:	48 83 ec 48          	sub    $0x48,%rsp
  233ca4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233ca9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  233cae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  233cb3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  233cb8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  233cbd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  233cc2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233cc7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  233ccc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  233cd1:	48 89 04 24          	mov    %rax,(%rsp)
  233cd5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  233cda:	48 8b 0c 24          	mov    (%rsp),%rcx
  233cde:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  233ce3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  233ce8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  233ced:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  233cf2:	48 83 c4 48          	add    $0x48,%rsp
  233cf6:	c3                   	retq   
  233cf7:	cc                   	int3   
  233cf8:	cc                   	int3   
  233cf9:	cc                   	int3   
  233cfa:	cc                   	int3   
  233cfb:	cc                   	int3   
  233cfc:	cc                   	int3   
  233cfd:	cc                   	int3   
  233cfe:	cc                   	int3   
  233cff:	cc                   	int3   

0000000000233d00 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  233d00:	48 83 ec 68          	sub    $0x68,%rsp
  233d04:	4c 89 04 24          	mov    %r8,(%rsp)
  233d08:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  233d0d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  233d12:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  233d17:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  233d1c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  233d21:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  233d26:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  233d2b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  233d30:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  233d35:	4c 39 c2             	cmp    %r8,%rdx
  233d38:	72 1b                	jb     233d55 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x55>
  233d3a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  233d3f:	48 8b 0c 24          	mov    (%rsp),%rcx
  233d43:	48 83 c1 01          	add    $0x1,%rcx
  233d47:	48 39 c8             	cmp    %rcx,%rax
  233d4a:	0f 97 c0             	seta   %al
  233d4d:	24 01                	and    $0x1,%al
  233d4f:	88 44 24 37          	mov    %al,0x37(%rsp)
  233d53:	eb 05                	jmp    233d5a <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x5a>
  233d55:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  233d5a:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  233d5f:	75 4c                	jne    233dad <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0xad>
  233d61:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  233d66:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  233d6b:	48 8b 14 24          	mov    (%rsp),%rdx
  233d6f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  233d74:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  233d79:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  233d7e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  233d85:	00 00 
  233d87:	4c 89 01             	mov    %r8,(%rcx)
  233d8a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  233d8e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  233d93:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  233d98:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  233d9c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  233da0:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  233da4:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  233da8:	48 83 c4 68          	add    $0x68,%rsp
  233dac:	c3                   	retq   
            panic!("invalid args");
  233dad:	48 8d 3d 4a 04 fd ff 	lea    -0x2fbb6(%rip),%rdi        # 2041fe <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x217>
  233db4:	48 8d 15 bd 98 00 00 	lea    0x98bd(%rip),%rdx        # 23d678 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x120>
  233dbb:	be 0c 00 00 00       	mov    $0xc,%esi
  233dc0:	e8 2b 1e 00 00       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  233dc5:	0f 0b                	ud2    
  233dc7:	cc                   	int3   
  233dc8:	cc                   	int3   
  233dc9:	cc                   	int3   
  233dca:	cc                   	int3   
  233dcb:	cc                   	int3   
  233dcc:	cc                   	int3   
  233dcd:	cc                   	int3   
  233dce:	cc                   	int3   
  233dcf:	cc                   	int3   

0000000000233dd0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>:
#[derive(Copy, Clone)]
  233dd0:	48 83 ec 18          	sub    $0x18,%rsp
  233dd4:	48 89 f8             	mov    %rdi,%rax
  233dd7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233ddc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  233de1:	ba 30 00 00 00       	mov    $0x30,%edx
  233de6:	e8 05 4f 00 00       	callq  238cf0 <memcpy>
  233deb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233df0:	48 83 c4 18          	add    $0x18,%rsp
  233df4:	c3                   	retq   
  233df5:	cc                   	int3   
  233df6:	cc                   	int3   
  233df7:	cc                   	int3   
  233df8:	cc                   	int3   
  233df9:	cc                   	int3   
  233dfa:	cc                   	int3   
  233dfb:	cc                   	int3   
  233dfc:	cc                   	int3   
  233dfd:	cc                   	int3   
  233dfe:	cc                   	int3   
  233dff:	cc                   	int3   

0000000000233e00 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  233e00:	48 83 ec 38          	sub    $0x38,%rsp
  233e04:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  233e09:	48 89 f8             	mov    %rdi,%rax
  233e0c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  233e11:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233e16:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  233e1b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  233e20:	e8 bb 40 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  233e25:	88 44 24 26          	mov    %al,0x26(%rsp)
  233e29:	8a 44 24 26          	mov    0x26(%rsp),%al
  233e2d:	a8 01                	test   $0x1,%al
  233e2f:	75 12                	jne    233e43 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x43>
  233e31:	eb 00                	jmp    233e33 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x33>
  233e33:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  233e38:	e8 b3 40 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  233e3d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  233e41:	eb 25                	jmp    233e68 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x68>
  233e43:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  233e48:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  233e4d:	e8 5e 0f 00 00       	callq  234db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  233e52:	24 01                	and    $0x1,%al
  233e54:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  233e58:	eb 00                	jmp    233e5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x5a>
            }
  233e5a:	8a 44 24 27          	mov    0x27(%rsp),%al
  233e5e:	24 01                	and    $0x1,%al
  233e60:	0f b6 c0             	movzbl %al,%eax
  233e63:	48 83 c4 38          	add    $0x38,%rsp
  233e67:	c3                   	retq   
  233e68:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  233e6c:	a8 01                	test   $0x1,%al
  233e6e:	75 19                	jne    233e89 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x89>
  233e70:	eb 00                	jmp    233e72 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x72>
  233e72:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  233e77:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  233e7c:	e8 4f 2d 00 00       	callq  236bd0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  233e81:	24 01                	and    $0x1,%al
  233e83:	88 44 24 27          	mov    %al,0x27(%rsp)
  233e87:	eb 19                	jmp    233ea2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa2>
  233e89:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  233e8e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  233e93:	e8 a8 0f 00 00       	callq  234e40 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  233e98:	24 01                	and    $0x1,%al
  233e9a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  233e9e:	eb 00                	jmp    233ea0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa0>
                if f.debug_lower_hex() {
  233ea0:	eb b8                	jmp    233e5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x5a>
                } else if f.debug_upper_hex() {
  233ea2:	eb fc                	jmp    233ea0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa0>
  233ea4:	cc                   	int3   
  233ea5:	cc                   	int3   
  233ea6:	cc                   	int3   
  233ea7:	cc                   	int3   
  233ea8:	cc                   	int3   
  233ea9:	cc                   	int3   
  233eaa:	cc                   	int3   
  233eab:	cc                   	int3   
  233eac:	cc                   	int3   
  233ead:	cc                   	int3   
  233eae:	cc                   	int3   
  233eaf:	cc                   	int3   

0000000000233eb0 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>:
  233eb0:	48 83 ec 28          	sub    $0x28,%rsp
  233eb4:	48 89 f8             	mov    %rdi,%rax
  233eb7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233ebc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  233ec1:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  233ec6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  233ecb:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  233ed0:	e8 ab f0 ff ff       	callq  232f80 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>
  233ed5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  233eda:	48 83 c4 28          	add    $0x28,%rsp
  233ede:	c3                   	retq   
  233edf:	cc                   	int3   

0000000000233ee0 <_ZN4core3ops8function6FnOnce9call_once17hc43e9fddc4999b9bE>:
  233ee0:	48 83 ec 28          	sub    $0x28,%rsp
  233ee4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  233ee9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  233eee:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  233ef3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  233ef8:	e8 83 00 00 00       	callq  233f80 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE>
  233efd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  233f01:	8a 44 24 0f          	mov    0xf(%rsp),%al
  233f05:	48 83 c4 28          	add    $0x28,%rsp
  233f09:	c3                   	retq   
  233f0a:	cc                   	int3   
  233f0b:	cc                   	int3   
  233f0c:	cc                   	int3   
  233f0d:	cc                   	int3   
  233f0e:	cc                   	int3   
  233f0f:	cc                   	int3   

0000000000233f10 <_ZN4core3ptr35drop_in_place$LT$log..NopLogger$GT$17heb548e4daff7e4f7E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  233f10:	50                   	push   %rax
  233f11:	48 89 3c 24          	mov    %rdi,(%rsp)
  233f15:	58                   	pop    %rax
  233f16:	c3                   	retq   
  233f17:	cc                   	int3   
  233f18:	cc                   	int3   
  233f19:	cc                   	int3   
  233f1a:	cc                   	int3   
  233f1b:	cc                   	int3   
  233f1c:	cc                   	int3   
  233f1d:	cc                   	int3   
  233f1e:	cc                   	int3   
  233f1f:	cc                   	int3   

0000000000233f20 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  233f20:	48 83 ec 20          	sub    $0x20,%rsp
  233f24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233f29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  233f2e:	48 39 f7             	cmp    %rsi,%rdi
  233f31:	0f 94 c0             	sete   %al
  233f34:	24 01                	and    $0x1,%al
  233f36:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  233f3a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  233f3e:	88 44 24 07          	mov    %al,0x7(%rsp)
  233f42:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  233f46:	24 01                	and    $0x1,%al
  233f48:	0f b6 c0             	movzbl %al,%eax
  233f4b:	48 83 c4 20          	add    $0x20,%rsp
  233f4f:	c3                   	retq   

0000000000233f50 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>:
  233f50:	c3                   	retq   
  233f51:	cc                   	int3   
  233f52:	cc                   	int3   
  233f53:	cc                   	int3   
  233f54:	cc                   	int3   
  233f55:	cc                   	int3   
  233f56:	cc                   	int3   
  233f57:	cc                   	int3   
  233f58:	cc                   	int3   
  233f59:	cc                   	int3   
  233f5a:	cc                   	int3   
  233f5b:	cc                   	int3   
  233f5c:	cc                   	int3   
  233f5d:	cc                   	int3   
  233f5e:	cc                   	int3   
  233f5f:	cc                   	int3   

0000000000233f60 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>:
                    fn clone(&self) -> Self {
  233f60:	50                   	push   %rax
  233f61:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  233f65:	8b 07                	mov    (%rdi),%eax
                    }
  233f67:	59                   	pop    %rcx
  233f68:	c3                   	retq   
  233f69:	cc                   	int3   
  233f6a:	cc                   	int3   
  233f6b:	cc                   	int3   
  233f6c:	cc                   	int3   
  233f6d:	cc                   	int3   
  233f6e:	cc                   	int3   
  233f6f:	cc                   	int3   

0000000000233f70 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>:
    /// Shared references can be cloned, but mutable references *cannot*!
    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for &T {
        #[inline]
        #[rustc_diagnostic_item = "noop_method_clone"]
        fn clone(&self) -> Self {
  233f70:	50                   	push   %rax
  233f71:	48 89 3c 24          	mov    %rdi,(%rsp)
            *self
  233f75:	48 8b 07             	mov    (%rdi),%rax
  233f78:	48 8b 57 08          	mov    0x8(%rdi),%rdx
        }
  233f7c:	59                   	pop    %rcx
  233f7d:	c3                   	retq   
  233f7e:	cc                   	int3   
  233f7f:	cc                   	int3   

0000000000233f80 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE>:
                fn cmp(&self, other: &$t) -> Ordering {
  233f80:	48 83 ec 28          	sub    $0x28,%rsp
  233f84:	48 89 34 24          	mov    %rsi,(%rsp)
  233f88:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233f8d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  233f92:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
                    if *self < *other { Less }
  233f97:	48 8b 07             	mov    (%rdi),%rax
  233f9a:	48 3b 06             	cmp    (%rsi),%rax
  233f9d:	72 13                	jb     233fb2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x32>
  233f9f:	48 8b 0c 24          	mov    (%rsp),%rcx
  233fa3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                    else if *self == *other { Equal }
  233fa8:	48 8b 00             	mov    (%rax),%rax
  233fab:	48 3b 01             	cmp    (%rcx),%rax
  233fae:	74 17                	je     233fc7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x47>
  233fb0:	eb 0e                	jmp    233fc0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x40>
                    if *self < *other { Less }
  233fb2:	c6 44 24 17 ff       	movb   $0xff,0x17(%rsp)
                }
  233fb7:	8a 44 24 17          	mov    0x17(%rsp),%al
  233fbb:	48 83 c4 28          	add    $0x28,%rsp
  233fbf:	c3                   	retq   
                    else { Greater }
  233fc0:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
                    else if *self == *other { Equal }
  233fc5:	eb 05                	jmp    233fcc <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x4c>
  233fc7:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
                    if *self < *other { Less }
  233fcc:	eb e9                	jmp    233fb7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x37>
  233fce:	cc                   	int3   
  233fcf:	cc                   	int3   

0000000000233fd0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *const T) -> bool
  233fd0:	48 83 ec 20          	sub    $0x20,%rsp
  233fd4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233fd9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self, other)
  233fde:	48 39 f7             	cmp    %rsi,%rdi
  233fe1:	0f 94 c0             	sete   %al
  233fe4:	24 01                	and    $0x1,%al
  233fe6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  233fea:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  233fee:	88 44 24 07          	mov    %al,0x7(%rsp)
  233ff2:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  233ff6:	24 01                	and    $0x1,%al
  233ff8:	0f b6 c0             	movzbl %al,%eax
  233ffb:	48 83 c4 20          	add    $0x20,%rsp
  233fff:	c3                   	retq   

0000000000234000 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>:
    pub const fn is_null(self) -> bool {
  234000:	48 83 ec 18          	sub    $0x18,%rsp
  234004:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234009:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23400e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  234013:	31 c0                	xor    %eax,%eax
  234015:	89 c6                	mov    %eax,%esi
  234017:	e8 b4 ff ff ff       	callq  233fd0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  23401c:	88 44 24 07          	mov    %al,0x7(%rsp)
  234020:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  234024:	24 01                	and    $0x1,%al
  234026:	0f b6 c0             	movzbl %al,%eax
  234029:	48 83 c4 18          	add    $0x18,%rsp
  23402d:	c3                   	retq   
  23402e:	cc                   	int3   
  23402f:	cc                   	int3   

0000000000234030 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a0f9f2c6a34554E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  234030:	48 83 ec 18          	sub    $0x18,%rsp
  234034:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234039:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23403e:	48 8b 3f             	mov    (%rdi),%rdi
  234041:	e8 7a 08 00 00       	callq  2348c0 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>
  234046:	88 44 24 07          	mov    %al,0x7(%rsp)
  23404a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23404e:	24 01                	and    $0x1,%al
  234050:	0f b6 c0             	movzbl %al,%eax
  234053:	48 83 c4 18          	add    $0x18,%rsp
  234057:	c3                   	retq   
  234058:	cc                   	int3   
  234059:	cc                   	int3   
  23405a:	cc                   	int3   
  23405b:	cc                   	int3   
  23405c:	cc                   	int3   
  23405d:	cc                   	int3   
  23405e:	cc                   	int3   
  23405f:	cc                   	int3   

0000000000234060 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>:
    pub const fn cast<U>(self) -> *const U {
  234060:	50                   	push   %rax
  234061:	48 89 f8             	mov    %rdi,%rax
  234064:	48 89 04 24          	mov    %rax,(%rsp)
    }
  234068:	59                   	pop    %rcx
  234069:	c3                   	retq   
  23406a:	cc                   	int3   
  23406b:	cc                   	int3   
  23406c:	cc                   	int3   
  23406d:	cc                   	int3   
  23406e:	cc                   	int3   
  23406f:	cc                   	int3   

0000000000234070 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  234070:	48 83 ec 68          	sub    $0x68,%rsp
  234074:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  234079:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  23407e:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  234083:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  234088:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  23408d:	8b 00                	mov    (%rax),%eax
  23408f:	48 85 c0             	test   %rax,%rax
  234092:	74 06                	je     23409a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x2a>
  234094:	eb 00                	jmp    234096 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x26>
  234096:	eb 32                	jmp    2340ca <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x5a>
  234098:	0f 0b                	ud2    
  23409a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    Some(T),
  23409f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2340a4:	48 83 c0 08          	add    $0x8,%rax
  2340a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2340ad:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  2340b2:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2340b7:	48 8d 15 ce c8 fc ff 	lea    -0x33732(%rip),%rdx        # 20098c <str.2+0xec>
  2340be:	b9 04 00 00 00       	mov    $0x4,%ecx
  2340c3:	e8 58 3e 00 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2340c8:	eb 2a                	jmp    2340f4 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x84>
  2340ca:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2340cf:	48 8d 35 f6 c8 fc ff 	lea    -0x3370a(%rip),%rsi        # 2009cc <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x34>
  2340d6:	ba 04 00 00 00       	mov    $0x4,%edx
  2340db:	e8 d0 3d 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2340e0:	24 01                	and    $0x1,%al
  2340e2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2340e6:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2340ea:	24 01                	and    $0x1,%al
  2340ec:	0f b6 c0             	movzbl %al,%eax
  2340ef:	48 83 c4 68          	add    $0x68,%rsp
  2340f3:	c3                   	retq   
  2340f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2340f9:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  2340fe:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    Some(T),
  234103:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  234108:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  23410d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  234112:	48 8d 15 77 95 00 00 	lea    0x9577(%rip),%rdx        # 23d690 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x138>
  234119:	e8 82 13 00 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  23411e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  234123:	e8 e8 14 00 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  234128:	24 01                	and    $0x1,%al
  23412a:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  23412e:	eb b6                	jmp    2340e6 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x76>

0000000000234130 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17h7ca190daa7803da4E>:
  234130:	50                   	push   %rax
  234131:	48 89 3c 24          	mov    %rdi,(%rsp)
  234135:	58                   	pop    %rax
  234136:	c3                   	retq   
  234137:	cc                   	int3   
  234138:	cc                   	int3   
  234139:	cc                   	int3   
  23413a:	cc                   	int3   
  23413b:	cc                   	int3   
  23413c:	cc                   	int3   
  23413d:	cc                   	int3   
  23413e:	cc                   	int3   
  23413f:	cc                   	int3   

0000000000234140 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h6df45f2823794112E>:
  234140:	50                   	push   %rax
  234141:	48 89 3c 24          	mov    %rdi,(%rsp)
  234145:	58                   	pop    %rax
  234146:	c3                   	retq   
  234147:	cc                   	int3   
  234148:	cc                   	int3   
  234149:	cc                   	int3   
  23414a:	cc                   	int3   
  23414b:	cc                   	int3   
  23414c:	cc                   	int3   
  23414d:	cc                   	int3   
  23414e:	cc                   	int3   
  23414f:	cc                   	int3   

0000000000234150 <_ZN4core3ptr64drop_in_place$LT$$RF$bootloader..boot_info..MemoryRegionKind$GT$17h091086770a55a35bE>:
  234150:	50                   	push   %rax
  234151:	48 89 3c 24          	mov    %rdi,(%rsp)
  234155:	58                   	pop    %rax
  234156:	c3                   	retq   
  234157:	cc                   	int3   
  234158:	cc                   	int3   
  234159:	cc                   	int3   
  23415a:	cc                   	int3   
  23415b:	cc                   	int3   
  23415c:	cc                   	int3   
  23415d:	cc                   	int3   
  23415e:	cc                   	int3   
  23415f:	cc                   	int3   

0000000000234160 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  234160:	48 83 ec 38          	sub    $0x38,%rsp
  234164:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  234169:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  23416e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  234173:	e8 e8 fe ff ff       	callq  234060 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>
  234178:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23417d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  234182:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  234187:	e8 74 00 00 00       	callq  234200 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>
  23418c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  234191:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  234196:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  23419b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2341a0:	48 83 c4 38          	add    $0x38,%rsp
  2341a4:	c3                   	retq   
  2341a5:	cc                   	int3   
  2341a6:	cc                   	int3   
  2341a7:	cc                   	int3   
  2341a8:	cc                   	int3   
  2341a9:	cc                   	int3   
  2341aa:	cc                   	int3   
  2341ab:	cc                   	int3   
  2341ac:	cc                   	int3   
  2341ad:	cc                   	int3   
  2341ae:	cc                   	int3   
  2341af:	cc                   	int3   

00000000002341b0 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  2341b0:	48 83 ec 38          	sub    $0x38,%rsp
  2341b4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2341b9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2341be:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2341c3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2341c8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2341cd:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2341d2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  2341d7:	e8 64 00 00 00       	callq  234240 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>
  2341dc:	48 89 04 24          	mov    %rax,(%rsp)
  2341e0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2341e5:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2341ea:	48 8b 04 24          	mov    (%rsp),%rax
}
  2341ee:	48 83 c4 38          	add    $0x38,%rsp
  2341f2:	c3                   	retq   
  2341f3:	cc                   	int3   
  2341f4:	cc                   	int3   
  2341f5:	cc                   	int3   
  2341f6:	cc                   	int3   
  2341f7:	cc                   	int3   
  2341f8:	cc                   	int3   
  2341f9:	cc                   	int3   
  2341fa:	cc                   	int3   
  2341fb:	cc                   	int3   
  2341fc:	cc                   	int3   
  2341fd:	cc                   	int3   
  2341fe:	cc                   	int3   
  2341ff:	cc                   	int3   

0000000000234200 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>:
pub const fn from_raw_parts<T: ?Sized>(
  234200:	48 83 ec 30          	sub    $0x30,%rsp
  234204:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  234209:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  23420e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  234213:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  234218:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  23421d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  234222:	48 89 0c 24          	mov    %rcx,(%rsp)
  234226:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23422b:	48 8b 04 24          	mov    (%rsp),%rax
  23422f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  234234:	48 83 c4 30          	add    $0x30,%rsp
  234238:	c3                   	retq   
  234239:	cc                   	int3   
  23423a:	cc                   	int3   
  23423b:	cc                   	int3   
  23423c:	cc                   	int3   
  23423d:	cc                   	int3   
  23423e:	cc                   	int3   
  23423f:	cc                   	int3   

0000000000234240 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  234240:	48 83 ec 30          	sub    $0x30,%rsp
  234244:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  234249:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  23424e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  234253:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  234258:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  23425d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  234262:	48 89 0c 24          	mov    %rcx,(%rsp)
  234266:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23426b:	48 8b 04 24          	mov    (%rsp),%rax
  23426f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  234274:	48 83 c4 30          	add    $0x30,%rsp
  234278:	c3                   	retq   
  234279:	cc                   	int3   
  23427a:	cc                   	int3   
  23427b:	cc                   	int3   
  23427c:	cc                   	int3   
  23427d:	cc                   	int3   
  23427e:	cc                   	int3   
  23427f:	cc                   	int3   

0000000000234280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0c27f5ed08988334E>:
  234280:	48 83 ec 18          	sub    $0x18,%rsp
  234284:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234289:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23428e:	48 8b 3f             	mov    (%rdi),%rdi
  234291:	e8 ea 02 00 00       	callq  234580 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE>
  234296:	88 44 24 07          	mov    %al,0x7(%rsp)
  23429a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23429e:	24 01                	and    $0x1,%al
  2342a0:	0f b6 c0             	movzbl %al,%eax
  2342a3:	48 83 c4 18          	add    $0x18,%rsp
  2342a7:	c3                   	retq   
  2342a8:	cc                   	int3   
  2342a9:	cc                   	int3   
  2342aa:	cc                   	int3   
  2342ab:	cc                   	int3   
  2342ac:	cc                   	int3   
  2342ad:	cc                   	int3   
  2342ae:	cc                   	int3   
  2342af:	cc                   	int3   

00000000002342b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h110c2e9d0d22ff67E>:
  2342b0:	48 83 ec 18          	sub    $0x18,%rsp
  2342b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2342b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2342be:	48 8b 3f             	mov    (%rdi),%rdi
  2342c1:	e8 6a 03 00 00       	callq  234630 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>
  2342c6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2342ca:	8a 44 24 07          	mov    0x7(%rsp),%al
  2342ce:	24 01                	and    $0x1,%al
  2342d0:	0f b6 c0             	movzbl %al,%eax
  2342d3:	48 83 c4 18          	add    $0x18,%rsp
  2342d7:	c3                   	retq   
  2342d8:	cc                   	int3   
  2342d9:	cc                   	int3   
  2342da:	cc                   	int3   
  2342db:	cc                   	int3   
  2342dc:	cc                   	int3   
  2342dd:	cc                   	int3   
  2342de:	cc                   	int3   
  2342df:	cc                   	int3   

00000000002342e0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a95e3f68e858f27E>:
  2342e0:	48 83 ec 18          	sub    $0x18,%rsp
  2342e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2342e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2342ee:	48 8b 3f             	mov    (%rdi),%rdi
  2342f1:	e8 7a 00 00 00       	callq  234370 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>
  2342f6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2342fa:	8a 44 24 07          	mov    0x7(%rsp),%al
  2342fe:	24 01                	and    $0x1,%al
  234300:	0f b6 c0             	movzbl %al,%eax
  234303:	48 83 c4 18          	add    $0x18,%rsp
  234307:	c3                   	retq   
  234308:	cc                   	int3   
  234309:	cc                   	int3   
  23430a:	cc                   	int3   
  23430b:	cc                   	int3   
  23430c:	cc                   	int3   
  23430d:	cc                   	int3   
  23430e:	cc                   	int3   
  23430f:	cc                   	int3   

0000000000234310 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4835aefd08962e6eE>:
  234310:	48 83 ec 18          	sub    $0x18,%rsp
  234314:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234319:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23431e:	48 8b 3f             	mov    (%rdi),%rdi
  234321:	e8 aa 01 00 00       	callq  2344d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>
  234326:	88 44 24 07          	mov    %al,0x7(%rsp)
  23432a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23432e:	24 01                	and    $0x1,%al
  234330:	0f b6 c0             	movzbl %al,%eax
  234333:	48 83 c4 18          	add    $0x18,%rsp
  234337:	c3                   	retq   
  234338:	cc                   	int3   
  234339:	cc                   	int3   
  23433a:	cc                   	int3   
  23433b:	cc                   	int3   
  23433c:	cc                   	int3   
  23433d:	cc                   	int3   
  23433e:	cc                   	int3   
  23433f:	cc                   	int3   

0000000000234340 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c907112cc167dadE>:
  234340:	48 83 ec 18          	sub    $0x18,%rsp
  234344:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234349:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23434e:	48 8b 3f             	mov    (%rdi),%rdi
  234351:	e8 ca 00 00 00       	callq  234420 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>
  234356:	88 44 24 07          	mov    %al,0x7(%rsp)
  23435a:	8a 44 24 07          	mov    0x7(%rsp),%al
  23435e:	24 01                	and    $0x1,%al
  234360:	0f b6 c0             	movzbl %al,%eax
  234363:	48 83 c4 18          	add    $0x18,%rsp
  234367:	c3                   	retq   
  234368:	cc                   	int3   
  234369:	cc                   	int3   
  23436a:	cc                   	int3   
  23436b:	cc                   	int3   
  23436c:	cc                   	int3   
  23436d:	cc                   	int3   
  23436e:	cc                   	int3   
  23436f:	cc                   	int3   

0000000000234370 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  234370:	48 83 ec 38          	sub    $0x38,%rsp
  234374:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  234379:	48 89 f8             	mov    %rdi,%rax
  23437c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  234381:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  234386:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23438b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  234390:	e8 4b 3b 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  234395:	88 44 24 26          	mov    %al,0x26(%rsp)
  234399:	8a 44 24 26          	mov    0x26(%rsp),%al
  23439d:	a8 01                	test   $0x1,%al
  23439f:	75 12                	jne    2343b3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x43>
  2343a1:	eb 00                	jmp    2343a3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x33>
  2343a3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  2343a8:	e8 43 3b 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2343ad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2343b1:	eb 25                	jmp    2343d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x68>
  2343b3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2343b8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  2343bd:	e8 ae 08 00 00       	callq  234c70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>
  2343c2:	24 01                	and    $0x1,%al
  2343c4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  2343c8:	eb 00                	jmp    2343ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
            }
  2343ca:	8a 44 24 27          	mov    0x27(%rsp),%al
  2343ce:	24 01                	and    $0x1,%al
  2343d0:	0f b6 c0             	movzbl %al,%eax
  2343d3:	48 83 c4 38          	add    $0x38,%rsp
  2343d7:	c3                   	retq   
  2343d8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  2343dc:	a8 01                	test   $0x1,%al
  2343de:	75 19                	jne    2343f9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x89>
  2343e0:	eb 00                	jmp    2343e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x72>
  2343e2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2343e7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2343ec:	e8 cf 26 00 00       	callq  236ac0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>
  2343f1:	24 01                	and    $0x1,%al
  2343f3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2343f7:	eb 19                	jmp    234412 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa2>
  2343f9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2343fe:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  234403:	e8 08 09 00 00       	callq  234d10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>
  234408:	24 01                	and    $0x1,%al
  23440a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  23440e:	eb 00                	jmp    234410 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
                if f.debug_lower_hex() {
  234410:	eb b8                	jmp    2343ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
                } else if f.debug_upper_hex() {
  234412:	eb fc                	jmp    234410 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
  234414:	cc                   	int3   
  234415:	cc                   	int3   
  234416:	cc                   	int3   
  234417:	cc                   	int3   
  234418:	cc                   	int3   
  234419:	cc                   	int3   
  23441a:	cc                   	int3   
  23441b:	cc                   	int3   
  23441c:	cc                   	int3   
  23441d:	cc                   	int3   
  23441e:	cc                   	int3   
  23441f:	cc                   	int3   

0000000000234420 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  234420:	48 83 ec 38          	sub    $0x38,%rsp
  234424:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  234429:	48 89 f8             	mov    %rdi,%rax
  23442c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  234431:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  234436:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23443b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  234440:	e8 9b 3a 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  234445:	88 44 24 26          	mov    %al,0x26(%rsp)
  234449:	8a 44 24 26          	mov    0x26(%rsp),%al
  23444d:	a8 01                	test   $0x1,%al
  23444f:	75 12                	jne    234463 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x43>
  234451:	eb 00                	jmp    234453 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x33>
  234453:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  234458:	e8 93 3a 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  23445d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  234461:	eb 25                	jmp    234488 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x68>
  234463:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  234468:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  23446d:	e8 3e 09 00 00       	callq  234db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  234472:	24 01                	and    $0x1,%al
  234474:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  234478:	eb 00                	jmp    23447a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
            }
  23447a:	8a 44 24 27          	mov    0x27(%rsp),%al
  23447e:	24 01                	and    $0x1,%al
  234480:	0f b6 c0             	movzbl %al,%eax
  234483:	48 83 c4 38          	add    $0x38,%rsp
  234487:	c3                   	retq   
  234488:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  23448c:	a8 01                	test   $0x1,%al
  23448e:	75 19                	jne    2344a9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x89>
  234490:	eb 00                	jmp    234492 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x72>
  234492:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  234497:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  23449c:	e8 2f 27 00 00       	callq  236bd0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  2344a1:	24 01                	and    $0x1,%al
  2344a3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2344a7:	eb 19                	jmp    2344c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa2>
  2344a9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2344ae:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  2344b3:	e8 88 09 00 00       	callq  234e40 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  2344b8:	24 01                	and    $0x1,%al
  2344ba:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  2344be:	eb 00                	jmp    2344c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
                if f.debug_lower_hex() {
  2344c0:	eb b8                	jmp    23447a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
                } else if f.debug_upper_hex() {
  2344c2:	eb fc                	jmp    2344c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
  2344c4:	cc                   	int3   
  2344c5:	cc                   	int3   
  2344c6:	cc                   	int3   
  2344c7:	cc                   	int3   
  2344c8:	cc                   	int3   
  2344c9:	cc                   	int3   
  2344ca:	cc                   	int3   
  2344cb:	cc                   	int3   
  2344cc:	cc                   	int3   
  2344cd:	cc                   	int3   
  2344ce:	cc                   	int3   
  2344cf:	cc                   	int3   

00000000002344d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  2344d0:	48 83 ec 38          	sub    $0x38,%rsp
  2344d4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2344d9:	48 89 f8             	mov    %rdi,%rax
  2344dc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2344e1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2344e6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2344eb:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  2344f0:	e8 eb 39 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  2344f5:	88 44 24 26          	mov    %al,0x26(%rsp)
  2344f9:	8a 44 24 26          	mov    0x26(%rsp),%al
  2344fd:	a8 01                	test   $0x1,%al
  2344ff:	75 12                	jne    234513 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x43>
  234501:	eb 00                	jmp    234503 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x33>
  234503:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  234508:	e8 e3 39 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  23450d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  234511:	eb 25                	jmp    234538 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x68>
  234513:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  234518:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  23451d:	e8 ae 09 00 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  234522:	24 01                	and    $0x1,%al
  234524:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  234528:	eb 00                	jmp    23452a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
            }
  23452a:	8a 44 24 27          	mov    0x27(%rsp),%al
  23452e:	24 01                	and    $0x1,%al
  234530:	0f b6 c0             	movzbl %al,%eax
  234533:	48 83 c4 38          	add    $0x38,%rsp
  234537:	c3                   	retq   
  234538:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  23453c:	a8 01                	test   $0x1,%al
  23453e:	75 19                	jne    234559 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x89>
  234540:	eb 00                	jmp    234542 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x72>
  234542:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  234547:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  23454c:	e8 af 27 00 00       	callq  236d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  234551:	24 01                	and    $0x1,%al
  234553:	88 44 24 27          	mov    %al,0x27(%rsp)
  234557:	eb 19                	jmp    234572 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa2>
  234559:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  23455e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  234563:	e8 08 0a 00 00       	callq  234f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  234568:	24 01                	and    $0x1,%al
  23456a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  23456e:	eb 00                	jmp    234570 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
                if f.debug_lower_hex() {
  234570:	eb b8                	jmp    23452a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
                } else if f.debug_upper_hex() {
  234572:	eb fc                	jmp    234570 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
  234574:	cc                   	int3   
  234575:	cc                   	int3   
  234576:	cc                   	int3   
  234577:	cc                   	int3   
  234578:	cc                   	int3   
  234579:	cc                   	int3   
  23457a:	cc                   	int3   
  23457b:	cc                   	int3   
  23457c:	cc                   	int3   
  23457d:	cc                   	int3   
  23457e:	cc                   	int3   
  23457f:	cc                   	int3   

0000000000234580 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  234580:	48 83 ec 38          	sub    $0x38,%rsp
  234584:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  234589:	48 89 f8             	mov    %rdi,%rax
  23458c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  234591:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  234596:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23459b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  2345a0:	e8 3b 39 00 00       	callq  237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  2345a5:	88 44 24 26          	mov    %al,0x26(%rsp)
  2345a9:	8a 44 24 26          	mov    0x26(%rsp),%al
  2345ad:	a8 01                	test   $0x1,%al
  2345af:	75 12                	jne    2345c3 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x43>
  2345b1:	eb 00                	jmp    2345b3 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x33>
  2345b3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  2345b8:	e8 33 39 00 00       	callq  237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2345bd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2345c1:	eb 25                	jmp    2345e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x68>
  2345c3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2345c8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  2345cd:	e8 fe 08 00 00       	callq  234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  2345d2:	24 01                	and    $0x1,%al
  2345d4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  2345d8:	eb 00                	jmp    2345da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x5a>
            }
  2345da:	8a 44 24 27          	mov    0x27(%rsp),%al
  2345de:	24 01                	and    $0x1,%al
  2345e0:	0f b6 c0             	movzbl %al,%eax
  2345e3:	48 83 c4 38          	add    $0x38,%rsp
  2345e7:	c3                   	retq   
  2345e8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  2345ec:	a8 01                	test   $0x1,%al
  2345ee:	75 19                	jne    234609 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x89>
  2345f0:	eb 00                	jmp    2345f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x72>
  2345f2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2345f7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2345fc:	e8 ff 26 00 00       	callq  236d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  234601:	24 01                	and    $0x1,%al
  234603:	88 44 24 27          	mov    %al,0x27(%rsp)
  234607:	eb 19                	jmp    234622 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa2>
  234609:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  23460e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  234613:	e8 58 09 00 00       	callq  234f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  234618:	24 01                	and    $0x1,%al
  23461a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  23461e:	eb 00                	jmp    234620 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa0>
                if f.debug_lower_hex() {
  234620:	eb b8                	jmp    2345da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x5a>
                } else if f.debug_upper_hex() {
  234622:	eb fc                	jmp    234620 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa0>
  234624:	cc                   	int3   
  234625:	cc                   	int3   
  234626:	cc                   	int3   
  234627:	cc                   	int3   
  234628:	cc                   	int3   
  234629:	cc                   	int3   
  23462a:	cc                   	int3   
  23462b:	cc                   	int3   
  23462c:	cc                   	int3   
  23462d:	cc                   	int3   
  23462e:	cc                   	int3   
  23462f:	cc                   	int3   

0000000000234630 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  234630:	48 83 ec 18          	sub    $0x18,%rsp
  234634:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  234639:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        Display::fmt(self, f)
  23463e:	e8 4d 39 00 00       	callq  237f90 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>
  234643:	88 44 24 07          	mov    %al,0x7(%rsp)
  234647:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  23464b:	24 01                	and    $0x1,%al
  23464d:	0f b6 c0             	movzbl %al,%eax
  234650:	48 83 c4 18          	add    $0x18,%rsp
  234654:	c3                   	retq   
  234655:	cc                   	int3   
  234656:	cc                   	int3   
  234657:	cc                   	int3   
  234658:	cc                   	int3   
  234659:	cc                   	int3   
  23465a:	cc                   	int3   
  23465b:	cc                   	int3   
  23465c:	cc                   	int3   
  23465d:	cc                   	int3   
  23465e:	cc                   	int3   
  23465f:	cc                   	int3   

0000000000234660 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>:
    pub const fn is_none(&self) -> bool {
  234660:	48 83 ec 18          	sub    $0x18,%rsp
  234664:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  234669:	e8 22 00 00 00       	callq  234690 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>
  23466e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  234672:	8a 44 24 0f          	mov    0xf(%rsp),%al
  234676:	34 ff                	xor    $0xff,%al
    }
  234678:	24 01                	and    $0x1,%al
  23467a:	0f b6 c0             	movzbl %al,%eax
  23467d:	48 83 c4 18          	add    $0x18,%rsp
  234681:	c3                   	retq   
  234682:	cc                   	int3   
  234683:	cc                   	int3   
  234684:	cc                   	int3   
  234685:	cc                   	int3   
  234686:	cc                   	int3   
  234687:	cc                   	int3   
  234688:	cc                   	int3   
  234689:	cc                   	int3   
  23468a:	cc                   	int3   
  23468b:	cc                   	int3   
  23468c:	cc                   	int3   
  23468d:	cc                   	int3   
  23468e:	cc                   	int3   
  23468f:	cc                   	int3   

0000000000234690 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>:
    pub const fn is_some(&self) -> bool {
  234690:	48 83 ec 10          	sub    $0x10,%rsp
  234694:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  234699:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  23469d:	75 07                	jne    2346a6 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x16>
  23469f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2346a4:	eb 05                	jmp    2346ab <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x1b>
  2346a6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2346ab:	8a 44 24 07          	mov    0x7(%rsp),%al
  2346af:	24 01                	and    $0x1,%al
  2346b1:	0f b6 c0             	movzbl %al,%eax
  2346b4:	48 83 c4 10          	add    $0x10,%rsp
  2346b8:	c3                   	retq   
  2346b9:	cc                   	int3   
  2346ba:	cc                   	int3   
  2346bb:	cc                   	int3   
  2346bc:	cc                   	int3   
  2346bd:	cc                   	int3   
  2346be:	cc                   	int3   
  2346bf:	cc                   	int3   

00000000002346c0 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>:
    fn deref(&self) -> &Self::Target {
  2346c0:	48 83 ec 18          	sub    $0x18,%rsp
  2346c4:	48 89 f8             	mov    %rdi,%rax
  2346c7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts(self.ptr, self.len) }
  2346cc:	48 8b 38             	mov    (%rax),%rdi
  2346cf:	48 8b 70 08          	mov    0x8(%rax),%rsi
  2346d3:	e8 18 04 00 00       	callq  234af0 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>
  2346d8:	48 89 04 24          	mov    %rax,(%rsp)
  2346dc:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2346e1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2346e6:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2346ea:	48 83 c4 18          	add    $0x18,%rsp
  2346ee:	c3                   	retq   
  2346ef:	cc                   	int3   

00000000002346f0 <_ZN10bootloader9boot_info11FrameBuffer10buffer_mut17h3ebde5336f9f1ed1E>:
    pub fn buffer_mut(&mut self) -> &mut [u8] {
  2346f0:	48 83 ec 18          	sub    $0x18,%rsp
  2346f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { self.create_buffer() }
  2346f9:	e8 22 00 00 00       	callq  234720 <_ZN10bootloader9boot_info11FrameBuffer13create_buffer17h9d518b0da1fcd6d4E>
  2346fe:	48 89 04 24          	mov    %rax,(%rsp)
  234702:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  234707:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23470c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  234710:	48 83 c4 18          	add    $0x18,%rsp
  234714:	c3                   	retq   
  234715:	cc                   	int3   
  234716:	cc                   	int3   
  234717:	cc                   	int3   
  234718:	cc                   	int3   
  234719:	cc                   	int3   
  23471a:	cc                   	int3   
  23471b:	cc                   	int3   
  23471c:	cc                   	int3   
  23471d:	cc                   	int3   
  23471e:	cc                   	int3   
  23471f:	cc                   	int3   

0000000000234720 <_ZN10bootloader9boot_info11FrameBuffer13create_buffer17h9d518b0da1fcd6d4E>:
    unsafe fn create_buffer<'a>(&self) -> &'a mut [u8] {
  234720:	48 83 ec 18          	sub    $0x18,%rsp
  234724:	48 89 f8             	mov    %rdi,%rax
  234727:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts_mut(self.buffer_start as *mut u8, self.buffer_byte_len) }
  23472c:	48 8b 38             	mov    (%rax),%rdi
  23472f:	48 8b 70 08          	mov    0x8(%rax),%rsi
  234733:	e8 e8 03 00 00       	callq  234b20 <_ZN4core5slice3raw18from_raw_parts_mut17ha7cf18624446d048E>
  234738:	48 89 04 24          	mov    %rax,(%rsp)
  23473c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  234741:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  234746:	48 8b 04 24          	mov    (%rsp),%rax
    }
  23474a:	48 83 c4 18          	add    $0x18,%rsp
  23474e:	c3                   	retq   
  23474f:	cc                   	int3   

0000000000234750 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>:
    pub fn info(&self) -> FrameBufferInfo {
  234750:	48 83 ec 18          	sub    $0x18,%rsp
  234754:	48 89 f8             	mov    %rdi,%rax
  234757:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23475c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.info
  234761:	48 83 c6 10          	add    $0x10,%rsi
  234765:	ba 30 00 00 00       	mov    $0x30,%edx
  23476a:	e8 81 45 00 00       	callq  238cf0 <memcpy>
  23476f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  234774:	48 83 c4 18          	add    $0x18,%rsp
  234778:	c3                   	retq   
  234779:	cc                   	int3   
  23477a:	cc                   	int3   
  23477b:	cc                   	int3   
  23477c:	cc                   	int3   
  23477d:	cc                   	int3   
  23477e:	cc                   	int3   
  23477f:	cc                   	int3   

0000000000234780 <_ZN72_$LT$bootloader..boot_info..MemoryRegion$u20$as$u20$core..fmt..Debug$GT$3fmt17h7b7f29e9503f8715E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  234780:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  234787:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23478c:	48 89 f8             	mov    %rdi,%rax
  23478f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  234794:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  234799:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: u64,
  23479e:	48 89 c1             	mov    %rax,%rcx
  2347a1:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2347a6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub end: u64,
  2347ab:	48 89 c1             	mov    %rax,%rcx
  2347ae:	48 83 c1 08          	add    $0x8,%rcx
  2347b2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2347b7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub kind: MemoryRegionKind,
  2347bc:	48 83 c0 10          	add    $0x10,%rax
  2347c0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2347c5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2347ca:	48 8d 35 bf fa fc ff 	lea    -0x30541(%rip),%rsi        # 204290 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2a9>
  2347d1:	ba 0c 00 00 00       	mov    $0xc,%edx
  2347d6:	e8 25 37 00 00       	callq  237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  2347db:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2347e2:	00 
  2347e3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2347ea:	00 
  2347eb:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2347f2:	00 
  2347f3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2347f8:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2347ff:	00 
  234800:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  234805:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23480a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  23480f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  234816:	00 
    pub start: u64,
  234817:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23481c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  234821:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  234826:	48 8d 35 6f fa fc ff 	lea    -0x30591(%rip),%rsi        # 20429c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2b5>
  23482d:	ba 05 00 00 00       	mov    $0x5,%edx
  234832:	4c 8d 05 77 8e 00 00 	lea    0x8e77(%rip),%r8        # 23d6b0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  234839:	e8 52 0a 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  23483e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub end: u64,
  234843:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  234848:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  23484d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  234852:	48 8d 35 48 fa fc ff 	lea    -0x305b8(%rip),%rsi        # 2042a1 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2ba>
  234859:	ba 03 00 00 00       	mov    $0x3,%edx
  23485e:	4c 8d 05 4b 8e 00 00 	lea    0x8e4b(%rip),%r8        # 23d6b0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  234865:	e8 26 0a 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  23486a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub kind: MemoryRegionKind,
  23486f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  234874:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  234879:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  23487e:	48 8d 35 1f c1 fc ff 	lea    -0x33ee1(%rip),%rsi        # 2009a4 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc>
  234885:	ba 04 00 00 00       	mov    $0x4,%edx
  23488a:	4c 8d 05 3f 8e 00 00 	lea    0x8e3f(%rip),%r8        # 23d6d0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x178>
  234891:	e8 fa 09 00 00       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  234896:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  23489b:	e8 b0 0b 00 00       	callq  235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  2348a0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2348a4:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2348a8:	24 01                	and    $0x1,%al
  2348aa:	0f b6 c0             	movzbl %al,%eax
  2348ad:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2348b4:	c3                   	retq   
  2348b5:	cc                   	int3   
  2348b6:	cc                   	int3   
  2348b7:	cc                   	int3   
  2348b8:	cc                   	int3   
  2348b9:	cc                   	int3   
  2348ba:	cc                   	int3   
  2348bb:	cc                   	int3   
  2348bc:	cc                   	int3   
  2348bd:	cc                   	int3   
  2348be:	cc                   	int3   
  2348bf:	cc                   	int3   

00000000002348c0 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2348c0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  2348c7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2348cc:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  2348d1:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  2348d8:	00 
  2348d9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2348de:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2348e3:	8b 00                	mov    (%rax),%eax
  2348e5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2348ea:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2348ef:	48 8d 0d 8a f9 fc ff 	lea    -0x30676(%rip),%rcx        # 204280 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x299>
  2348f6:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2348fa:	48 01 c8             	add    %rcx,%rax
  2348fd:	ff e0                	jmpq   *%rax
  2348ff:	0f 0b                	ud2    
  234901:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  234906:	48 8d 35 b7 f9 fc ff 	lea    -0x30649(%rip),%rsi        # 2042c4 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2dd>
  23490d:	ba 06 00 00 00       	mov    $0x6,%edx
  234912:	e8 99 35 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  234917:	24 01                	and    $0x1,%al
  234919:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  23491d:	e9 c2 00 00 00       	jmpq   2349e4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  234922:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  234927:	48 8d 35 8c f9 fc ff 	lea    -0x30674(%rip),%rsi        # 2042ba <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2d3>
  23492e:	ba 0a 00 00 00       	mov    $0xa,%edx
  234933:	e8 78 35 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  234938:	24 01                	and    $0x1,%al
  23493a:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  23493e:	e9 a1 00 00 00       	jmpq   2349e4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  234943:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownUefi(u32),
  234948:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  23494d:	48 83 c0 04          	add    $0x4,%rax
  234951:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  234956:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  23495d:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  23495e:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  234963:	48 8d 15 45 f9 fc ff 	lea    -0x306bb(%rip),%rdx        # 2042af <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2c8>
  23496a:	b9 0b 00 00 00       	mov    $0xb,%ecx
  23496f:	e8 ac 35 00 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  234974:	eb 7f                	jmp    2349f5 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x135>
  234976:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownBios(u32),
  23497b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  234980:	48 83 c0 04          	add    $0x4,%rax
  234984:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  234989:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  234990:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  234991:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  234996:	48 8d 15 07 f9 fc ff 	lea    -0x306f9(%rip),%rdx        # 2042a4 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2bd>
  23499d:	b9 0b 00 00 00       	mov    $0xb,%ecx
  2349a2:	e8 79 35 00 00       	callq  237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2349a7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2349ac:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  2349b1:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  2349b8:	00 
    UnknownBios(u32),
  2349b9:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2349be:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2349c3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2349c8:	48 8d 15 21 8d 00 00 	lea    0x8d21(%rip),%rdx        # 23d6f0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  2349cf:	e8 cc 0a 00 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2349d4:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2349d9:	e8 32 0c 00 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2349de:	24 01                	and    $0x1,%al
  2349e0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2349e4:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  2349e8:	24 01                	and    $0x1,%al
  2349ea:	0f b6 c0             	movzbl %al,%eax
  2349ed:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  2349f4:	c3                   	retq   
  2349f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2349fa:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
  2349ff:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  234a06:	00 
    UnknownUefi(u32),
  234a07:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  234a0c:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  234a11:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  234a16:	48 8d 15 d3 8c 00 00 	lea    0x8cd3(%rip),%rdx        # 23d6f0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  234a1d:	e8 7e 0a 00 00       	callq  2354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  234a22:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  234a27:	e8 e4 0b 00 00       	callq  235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  234a2c:	24 01                	and    $0x1,%al
  234a2e:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  234a32:	eb b0                	jmp    2349e4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  234a34:	cc                   	int3   
  234a35:	cc                   	int3   
  234a36:	cc                   	int3   
  234a37:	cc                   	int3   
  234a38:	cc                   	int3   
  234a39:	cc                   	int3   
  234a3a:	cc                   	int3   
  234a3b:	cc                   	int3   
  234a3c:	cc                   	int3   
  234a3d:	cc                   	int3   
  234a3e:	cc                   	int3   
  234a3f:	cc                   	int3   

0000000000234a40 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
  234a40:	48 83 ec 38          	sub    $0x38,%rsp
  234a44:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  234a49:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  234a4e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  234a53:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  234a58:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  234a5d:	8b 00                	mov    (%rax),%eax
  234a5f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  234a64:	48 85 c0             	test   %rax,%rax
  234a67:	74 13                	je     234a7c <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x3c>
  234a69:	eb 00                	jmp    234a6b <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x2b>
  234a6b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  234a70:	48 83 e8 01          	sub    $0x1,%rax
  234a74:	74 24                	je     234a9a <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x5a>
  234a76:	eb 00                	jmp    234a78 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x38>
  234a78:	eb 3e                	jmp    234ab8 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x78>
  234a7a:	0f 0b                	ud2    
  234a7c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  234a81:	48 8d 35 47 f8 fc ff 	lea    -0x307b9(%rip),%rsi        # 2042cf <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e8>
  234a88:	ba 03 00 00 00       	mov    $0x3,%edx
  234a8d:	e8 1e 34 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  234a92:	24 01                	and    $0x1,%al
  234a94:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  234a98:	eb 3a                	jmp    234ad4 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  234a9a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  234a9f:	48 8d 35 26 f8 fc ff 	lea    -0x307da(%rip),%rsi        # 2042cc <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e5>
  234aa6:	ba 03 00 00 00       	mov    $0x3,%edx
  234aab:	e8 00 34 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  234ab0:	24 01                	and    $0x1,%al
  234ab2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  234ab6:	eb 1c                	jmp    234ad4 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  234ab8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  234abd:	48 8d 35 06 f8 fc ff 	lea    -0x307fa(%rip),%rsi        # 2042ca <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e3>
  234ac4:	ba 02 00 00 00       	mov    $0x2,%edx
  234ac9:	e8 e2 33 00 00       	callq  237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  234ace:	24 01                	and    $0x1,%al
  234ad0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  234ad4:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  234ad8:	24 01                	and    $0x1,%al
  234ada:	0f b6 c0             	movzbl %al,%eax
  234add:	48 83 c4 38          	add    $0x38,%rsp
  234ae1:	c3                   	retq   
  234ae2:	cc                   	int3   
  234ae3:	cc                   	int3   
  234ae4:	cc                   	int3   
  234ae5:	cc                   	int3   
  234ae6:	cc                   	int3   
  234ae7:	cc                   	int3   
  234ae8:	cc                   	int3   
  234ae9:	cc                   	int3   
  234aea:	cc                   	int3   
  234aeb:	cc                   	int3   
  234aec:	cc                   	int3   
  234aed:	cc                   	int3   
  234aee:	cc                   	int3   
  234aef:	cc                   	int3   

0000000000234af0 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  234af0:	48 83 ec 28          	sub    $0x28,%rsp
  234af4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  234af9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  234afe:	e8 5d f6 ff ff       	callq  234160 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>
  234b03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  234b08:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  234b0d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  234b12:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  234b17:	48 83 c4 28          	add    $0x28,%rsp
  234b1b:	c3                   	retq   
  234b1c:	cc                   	int3   
  234b1d:	cc                   	int3   
  234b1e:	cc                   	int3   
  234b1f:	cc                   	int3   

0000000000234b20 <_ZN4core5slice3raw18from_raw_parts_mut17ha7cf18624446d048E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
  234b20:	48 83 ec 28          	sub    $0x28,%rsp
  234b24:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  234b29:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }
  234b2e:	e8 7d f6 ff ff       	callq  2341b0 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  234b33:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  234b38:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  234b3d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  234b42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  234b47:	48 83 c4 28          	add    $0x28,%rsp
  234b4b:	c3                   	retq   
  234b4c:	cc                   	int3   
  234b4d:	cc                   	int3   
  234b4e:	cc                   	int3   
  234b4f:	cc                   	int3   

0000000000234b50 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE>:
  234b50:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234b57:	8a 0f                	mov    (%rdi),%cl
  234b59:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234b60:	00 
  234b61:	45 31 c9             	xor    %r9d,%r9d
  234b64:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234b6a:	89 ca                	mov    %ecx,%edx
  234b6c:	0f 1f 40 00          	nopl   0x0(%rax)
  234b70:	89 c8                	mov    %ecx,%eax
  234b72:	24 0f                	and    $0xf,%al
  234b74:	c0 ea 04             	shr    $0x4,%dl
  234b77:	3c 0a                	cmp    $0xa,%al
  234b79:	bf 57 00 00 00       	mov    $0x57,%edi
  234b7e:	41 0f 42 fa          	cmovb  %r10d,%edi
  234b82:	40 00 c7             	add    %al,%dil
  234b85:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234b89:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234b8d:	49 83 c1 01          	add    $0x1,%r9
  234b91:	80 f9 0f             	cmp    $0xf,%cl
  234b94:	89 d1                	mov    %edx,%ecx
  234b96:	77 d8                	ja     234b70 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE+0x20>
  234b98:	bf 80 00 00 00       	mov    $0x80,%edi
  234b9d:	4c 29 cf             	sub    %r9,%rdi
  234ba0:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234ba7:	73 21                	jae    234bca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE+0x7a>
  234ba9:	48 8d 15 96 f7 fc ff 	lea    -0x3086a(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234bb0:	b9 02 00 00 00       	mov    $0x2,%ecx
  234bb5:	48 89 f7             	mov    %rsi,%rdi
  234bb8:	be 01 00 00 00       	mov    $0x1,%esi
  234bbd:	e8 4e 2b 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234bc2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234bc9:	c3                   	retq   
  234bca:	48 8d 15 3f 8b 00 00 	lea    0x8b3f(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234bd1:	be 80 00 00 00       	mov    $0x80,%esi
  234bd6:	e8 15 13 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234bdb:	0f 0b                	ud2    
  234bdd:	cc                   	int3   
  234bde:	cc                   	int3   
  234bdf:	cc                   	int3   

0000000000234be0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E>:
  234be0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234be7:	8a 0f                	mov    (%rdi),%cl
  234be9:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234bf0:	00 
  234bf1:	45 31 c9             	xor    %r9d,%r9d
  234bf4:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234bfa:	89 ca                	mov    %ecx,%edx
  234bfc:	0f 1f 40 00          	nopl   0x0(%rax)
  234c00:	89 c8                	mov    %ecx,%eax
  234c02:	24 0f                	and    $0xf,%al
  234c04:	c0 ea 04             	shr    $0x4,%dl
  234c07:	3c 0a                	cmp    $0xa,%al
  234c09:	bf 37 00 00 00       	mov    $0x37,%edi
  234c0e:	41 0f 42 fa          	cmovb  %r10d,%edi
  234c12:	40 00 c7             	add    %al,%dil
  234c15:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234c19:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234c1d:	49 83 c1 01          	add    $0x1,%r9
  234c21:	80 f9 0f             	cmp    $0xf,%cl
  234c24:	89 d1                	mov    %edx,%ecx
  234c26:	77 d8                	ja     234c00 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E+0x20>
  234c28:	bf 80 00 00 00       	mov    $0x80,%edi
  234c2d:	4c 29 cf             	sub    %r9,%rdi
  234c30:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234c37:	73 21                	jae    234c5a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E+0x7a>
  234c39:	48 8d 15 06 f7 fc ff 	lea    -0x308fa(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234c40:	b9 02 00 00 00       	mov    $0x2,%ecx
  234c45:	48 89 f7             	mov    %rsi,%rdi
  234c48:	be 01 00 00 00       	mov    $0x1,%esi
  234c4d:	e8 be 2a 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234c52:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234c59:	c3                   	retq   
  234c5a:	48 8d 15 af 8a 00 00 	lea    0x8aaf(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234c61:	be 80 00 00 00       	mov    $0x80,%esi
  234c66:	e8 85 12 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234c6b:	0f 0b                	ud2    
  234c6d:	cc                   	int3   
  234c6e:	cc                   	int3   
  234c6f:	cc                   	int3   

0000000000234c70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>:
  234c70:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234c77:	0f b7 07             	movzwl (%rdi),%eax
  234c7a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234c81:	00 
  234c82:	45 31 c9             	xor    %r9d,%r9d
  234c85:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  234c90:	0f b7 d0             	movzwl %ax,%edx
  234c93:	89 d0                	mov    %edx,%eax
  234c95:	c1 e8 04             	shr    $0x4,%eax
  234c98:	89 d1                	mov    %edx,%ecx
  234c9a:	80 e1 0f             	and    $0xf,%cl
  234c9d:	80 f9 0a             	cmp    $0xa,%cl
  234ca0:	bf 57 00 00 00       	mov    $0x57,%edi
  234ca5:	41 0f 42 fa          	cmovb  %r10d,%edi
  234ca9:	40 00 cf             	add    %cl,%dil
  234cac:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234cb0:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234cb4:	49 83 c1 01          	add    $0x1,%r9
  234cb8:	66 83 fa 0f          	cmp    $0xf,%dx
  234cbc:	77 d2                	ja     234c90 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x20>
  234cbe:	bf 80 00 00 00       	mov    $0x80,%edi
  234cc3:	4c 29 cf             	sub    %r9,%rdi
  234cc6:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234ccd:	73 21                	jae    234cf0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x80>
  234ccf:	48 8d 15 70 f6 fc ff 	lea    -0x30990(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234cd6:	b9 02 00 00 00       	mov    $0x2,%ecx
  234cdb:	48 89 f7             	mov    %rsi,%rdi
  234cde:	be 01 00 00 00       	mov    $0x1,%esi
  234ce3:	e8 28 2a 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234ce8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234cef:	c3                   	retq   
  234cf0:	48 8d 15 19 8a 00 00 	lea    0x8a19(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234cf7:	be 80 00 00 00       	mov    $0x80,%esi
  234cfc:	e8 ef 11 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234d01:	0f 0b                	ud2    
  234d03:	cc                   	int3   
  234d04:	cc                   	int3   
  234d05:	cc                   	int3   
  234d06:	cc                   	int3   
  234d07:	cc                   	int3   
  234d08:	cc                   	int3   
  234d09:	cc                   	int3   
  234d0a:	cc                   	int3   
  234d0b:	cc                   	int3   
  234d0c:	cc                   	int3   
  234d0d:	cc                   	int3   
  234d0e:	cc                   	int3   
  234d0f:	cc                   	int3   

0000000000234d10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>:
  234d10:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234d17:	0f b7 07             	movzwl (%rdi),%eax
  234d1a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234d21:	00 
  234d22:	45 31 c9             	xor    %r9d,%r9d
  234d25:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234d2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  234d30:	0f b7 d0             	movzwl %ax,%edx
  234d33:	89 d0                	mov    %edx,%eax
  234d35:	c1 e8 04             	shr    $0x4,%eax
  234d38:	89 d1                	mov    %edx,%ecx
  234d3a:	80 e1 0f             	and    $0xf,%cl
  234d3d:	80 f9 0a             	cmp    $0xa,%cl
  234d40:	bf 37 00 00 00       	mov    $0x37,%edi
  234d45:	41 0f 42 fa          	cmovb  %r10d,%edi
  234d49:	40 00 cf             	add    %cl,%dil
  234d4c:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234d50:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234d54:	49 83 c1 01          	add    $0x1,%r9
  234d58:	66 83 fa 0f          	cmp    $0xf,%dx
  234d5c:	77 d2                	ja     234d30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x20>
  234d5e:	bf 80 00 00 00       	mov    $0x80,%edi
  234d63:	4c 29 cf             	sub    %r9,%rdi
  234d66:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234d6d:	73 21                	jae    234d90 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x80>
  234d6f:	48 8d 15 d0 f5 fc ff 	lea    -0x30a30(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234d76:	b9 02 00 00 00       	mov    $0x2,%ecx
  234d7b:	48 89 f7             	mov    %rsi,%rdi
  234d7e:	be 01 00 00 00       	mov    $0x1,%esi
  234d83:	e8 88 29 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234d88:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234d8f:	c3                   	retq   
  234d90:	48 8d 15 79 89 00 00 	lea    0x8979(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234d97:	be 80 00 00 00       	mov    $0x80,%esi
  234d9c:	e8 4f 11 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234da1:	0f 0b                	ud2    
  234da3:	cc                   	int3   
  234da4:	cc                   	int3   
  234da5:	cc                   	int3   
  234da6:	cc                   	int3   
  234da7:	cc                   	int3   
  234da8:	cc                   	int3   
  234da9:	cc                   	int3   
  234daa:	cc                   	int3   
  234dab:	cc                   	int3   
  234dac:	cc                   	int3   
  234dad:	cc                   	int3   
  234dae:	cc                   	int3   
  234daf:	cc                   	int3   

0000000000234db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>:
  234db0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234db7:	8b 07                	mov    (%rdi),%eax
  234db9:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234dc0:	00 
  234dc1:	45 31 c9             	xor    %r9d,%r9d
  234dc4:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234dca:	89 c2                	mov    %eax,%edx
  234dcc:	0f 1f 40 00          	nopl   0x0(%rax)
  234dd0:	c1 ea 04             	shr    $0x4,%edx
  234dd3:	89 c1                	mov    %eax,%ecx
  234dd5:	80 e1 0f             	and    $0xf,%cl
  234dd8:	80 f9 0a             	cmp    $0xa,%cl
  234ddb:	bf 57 00 00 00       	mov    $0x57,%edi
  234de0:	41 0f 42 fa          	cmovb  %r10d,%edi
  234de4:	40 00 cf             	add    %cl,%dil
  234de7:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234deb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234def:	49 83 c1 01          	add    $0x1,%r9
  234df3:	83 f8 0f             	cmp    $0xf,%eax
  234df6:	89 d0                	mov    %edx,%eax
  234df8:	77 d6                	ja     234dd0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x20>
  234dfa:	bf 80 00 00 00       	mov    $0x80,%edi
  234dff:	4c 29 cf             	sub    %r9,%rdi
  234e02:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234e09:	73 21                	jae    234e2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x7c>
  234e0b:	48 8d 15 34 f5 fc ff 	lea    -0x30acc(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234e12:	b9 02 00 00 00       	mov    $0x2,%ecx
  234e17:	48 89 f7             	mov    %rsi,%rdi
  234e1a:	be 01 00 00 00       	mov    $0x1,%esi
  234e1f:	e8 ec 28 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234e24:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234e2b:	c3                   	retq   
  234e2c:	48 8d 15 dd 88 00 00 	lea    0x88dd(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234e33:	be 80 00 00 00       	mov    $0x80,%esi
  234e38:	e8 b3 10 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234e3d:	0f 0b                	ud2    
  234e3f:	cc                   	int3   

0000000000234e40 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>:
  234e40:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234e47:	8b 07                	mov    (%rdi),%eax
  234e49:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234e50:	00 
  234e51:	45 31 c9             	xor    %r9d,%r9d
  234e54:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234e5a:	89 c2                	mov    %eax,%edx
  234e5c:	0f 1f 40 00          	nopl   0x0(%rax)
  234e60:	c1 ea 04             	shr    $0x4,%edx
  234e63:	89 c1                	mov    %eax,%ecx
  234e65:	80 e1 0f             	and    $0xf,%cl
  234e68:	80 f9 0a             	cmp    $0xa,%cl
  234e6b:	bf 37 00 00 00       	mov    $0x37,%edi
  234e70:	41 0f 42 fa          	cmovb  %r10d,%edi
  234e74:	40 00 cf             	add    %cl,%dil
  234e77:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234e7b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234e7f:	49 83 c1 01          	add    $0x1,%r9
  234e83:	83 f8 0f             	cmp    $0xf,%eax
  234e86:	89 d0                	mov    %edx,%eax
  234e88:	77 d6                	ja     234e60 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x20>
  234e8a:	bf 80 00 00 00       	mov    $0x80,%edi
  234e8f:	4c 29 cf             	sub    %r9,%rdi
  234e92:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234e99:	73 21                	jae    234ebc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x7c>
  234e9b:	48 8d 15 a4 f4 fc ff 	lea    -0x30b5c(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234ea2:	b9 02 00 00 00       	mov    $0x2,%ecx
  234ea7:	48 89 f7             	mov    %rsi,%rdi
  234eaa:	be 01 00 00 00       	mov    $0x1,%esi
  234eaf:	e8 5c 28 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234eb4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234ebb:	c3                   	retq   
  234ebc:	48 8d 15 4d 88 00 00 	lea    0x884d(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234ec3:	be 80 00 00 00       	mov    $0x80,%esi
  234ec8:	e8 23 10 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234ecd:	0f 0b                	ud2    
  234ecf:	cc                   	int3   

0000000000234ed0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>:
  234ed0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234ed7:	48 8b 07             	mov    (%rdi),%rax
  234eda:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234ee1:	00 
  234ee2:	45 31 c9             	xor    %r9d,%r9d
  234ee5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234eeb:	48 89 c2             	mov    %rax,%rdx
  234eee:	66 90                	xchg   %ax,%ax
  234ef0:	48 c1 ea 04          	shr    $0x4,%rdx
  234ef4:	89 c1                	mov    %eax,%ecx
  234ef6:	80 e1 0f             	and    $0xf,%cl
  234ef9:	80 f9 0a             	cmp    $0xa,%cl
  234efc:	bf 57 00 00 00       	mov    $0x57,%edi
  234f01:	41 0f 42 fa          	cmovb  %r10d,%edi
  234f05:	40 00 cf             	add    %cl,%dil
  234f08:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234f0c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234f10:	49 83 c1 01          	add    $0x1,%r9
  234f14:	48 83 f8 0f          	cmp    $0xf,%rax
  234f18:	48 89 d0             	mov    %rdx,%rax
  234f1b:	77 d3                	ja     234ef0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x20>
  234f1d:	bf 80 00 00 00       	mov    $0x80,%edi
  234f22:	4c 29 cf             	sub    %r9,%rdi
  234f25:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234f2c:	73 21                	jae    234f4f <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x7f>
  234f2e:	48 8d 15 11 f4 fc ff 	lea    -0x30bef(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234f35:	b9 02 00 00 00       	mov    $0x2,%ecx
  234f3a:	48 89 f7             	mov    %rsi,%rdi
  234f3d:	be 01 00 00 00       	mov    $0x1,%esi
  234f42:	e8 c9 27 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234f47:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234f4e:	c3                   	retq   
  234f4f:	48 8d 15 ba 87 00 00 	lea    0x87ba(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234f56:	be 80 00 00 00       	mov    $0x80,%esi
  234f5b:	e8 90 0f 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234f60:	0f 0b                	ud2    
  234f62:	cc                   	int3   
  234f63:	cc                   	int3   
  234f64:	cc                   	int3   
  234f65:	cc                   	int3   
  234f66:	cc                   	int3   
  234f67:	cc                   	int3   
  234f68:	cc                   	int3   
  234f69:	cc                   	int3   
  234f6a:	cc                   	int3   
  234f6b:	cc                   	int3   
  234f6c:	cc                   	int3   
  234f6d:	cc                   	int3   
  234f6e:	cc                   	int3   
  234f6f:	cc                   	int3   

0000000000234f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>:
  234f70:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  234f77:	48 8b 07             	mov    (%rdi),%rax
  234f7a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  234f81:	00 
  234f82:	45 31 c9             	xor    %r9d,%r9d
  234f85:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234f8b:	48 89 c2             	mov    %rax,%rdx
  234f8e:	66 90                	xchg   %ax,%ax
  234f90:	48 c1 ea 04          	shr    $0x4,%rdx
  234f94:	89 c1                	mov    %eax,%ecx
  234f96:	80 e1 0f             	and    $0xf,%cl
  234f99:	80 f9 0a             	cmp    $0xa,%cl
  234f9c:	bf 37 00 00 00       	mov    $0x37,%edi
  234fa1:	41 0f 42 fa          	cmovb  %r10d,%edi
  234fa5:	40 00 cf             	add    %cl,%dil
  234fa8:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234fac:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234fb0:	49 83 c1 01          	add    $0x1,%r9
  234fb4:	48 83 f8 0f          	cmp    $0xf,%rax
  234fb8:	48 89 d0             	mov    %rdx,%rax
  234fbb:	77 d3                	ja     234f90 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x20>
  234fbd:	bf 80 00 00 00       	mov    $0x80,%edi
  234fc2:	4c 29 cf             	sub    %r9,%rdi
  234fc5:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234fcc:	73 21                	jae    234fef <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x7f>
  234fce:	48 8d 15 71 f3 fc ff 	lea    -0x30c8f(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234fd5:	b9 02 00 00 00       	mov    $0x2,%ecx
  234fda:	48 89 f7             	mov    %rsi,%rdi
  234fdd:	be 01 00 00 00       	mov    $0x1,%esi
  234fe2:	e8 29 27 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234fe7:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  234fee:	c3                   	retq   
  234fef:	48 8d 15 1a 87 00 00 	lea    0x871a(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234ff6:	be 80 00 00 00       	mov    $0x80,%esi
  234ffb:	e8 f0 0e 00 00       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  235000:	0f 0b                	ud2    
  235002:	cc                   	int3   
  235003:	cc                   	int3   
  235004:	cc                   	int3   
  235005:	cc                   	int3   
  235006:	cc                   	int3   
  235007:	cc                   	int3   
  235008:	cc                   	int3   
  235009:	cc                   	int3   
  23500a:	cc                   	int3   
  23500b:	cc                   	int3   
  23500c:	cc                   	int3   
  23500d:	cc                   	int3   
  23500e:	cc                   	int3   
  23500f:	cc                   	int3   

0000000000235010 <_ZN4core3ptr25drop_in_place$LT$char$GT$17h7170306f6109ec38E.llvm.142292087146638061>:
  235010:	c3                   	retq   
  235011:	cc                   	int3   
  235012:	cc                   	int3   
  235013:	cc                   	int3   
  235014:	cc                   	int3   
  235015:	cc                   	int3   
  235016:	cc                   	int3   
  235017:	cc                   	int3   
  235018:	cc                   	int3   
  235019:	cc                   	int3   
  23501a:	cc                   	int3   
  23501b:	cc                   	int3   
  23501c:	cc                   	int3   
  23501d:	cc                   	int3   
  23501e:	cc                   	int3   
  23501f:	cc                   	int3   

0000000000235020 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>:
  235020:	48 83 ec 78          	sub    $0x78,%rsp
  235024:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235029:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23502e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  235033:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  235038:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  23503d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  235042:	48 8d 05 87 3c 00 00 	lea    0x3c87(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  235049:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  23504e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235053:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235058:	48 8d 05 b1 39 00 00 	lea    0x39b1(%rip),%rax        # 238a10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  23505f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  235064:	48 8d 05 bd 86 00 00 	lea    0x86bd(%rip),%rax        # 23d728 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x18>
  23506b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  235070:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
  235077:	00 00 
  235079:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  235080:	00 00 
  235082:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  235087:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  23508c:	48 c7 44 24 70 02 00 	movq   $0x2,0x70(%rsp)
  235093:	00 00 
  235095:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  23509a:	4c 89 c6             	mov    %r8,%rsi
  23509d:	e8 1e 0c 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2350a2:	0f 0b                	ud2    
  2350a4:	cc                   	int3   
  2350a5:	cc                   	int3   
  2350a6:	cc                   	int3   
  2350a7:	cc                   	int3   
  2350a8:	cc                   	int3   
  2350a9:	cc                   	int3   
  2350aa:	cc                   	int3   
  2350ab:	cc                   	int3   
  2350ac:	cc                   	int3   
  2350ad:	cc                   	int3   
  2350ae:	cc                   	int3   
  2350af:	cc                   	int3   

00000000002350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>:
  2350b0:	55                   	push   %rbp
  2350b1:	41 57                	push   %r15
  2350b3:	41 56                	push   %r14
  2350b5:	41 55                	push   %r13
  2350b7:	41 54                	push   %r12
  2350b9:	53                   	push   %rbx
  2350ba:	50                   	push   %rax
  2350bb:	48 85 d2             	test   %rdx,%rdx
  2350be:	0f 84 83 01 00 00    	je     235247 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  2350c4:	49 89 d5             	mov    %rdx,%r13
  2350c7:	49 89 f6             	mov    %rsi,%r14
  2350ca:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  2350ce:	4c 8b 3f             	mov    (%rdi),%r15
  2350d1:	48 8b 47 08          	mov    0x8(%rdi),%rax
  2350d5:	48 89 04 24          	mov    %rax,(%rsp)
  2350d9:	eb 2d                	jmp    235108 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x58>
  2350db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  2350e0:	4c 89 ff             	mov    %r15,%rdi
  2350e3:	4c 89 f6             	mov    %r14,%rsi
  2350e6:	31 d2                	xor    %edx,%edx
  2350e8:	48 8b 04 24          	mov    (%rsp),%rax
  2350ec:	ff 50 18             	callq  *0x18(%rax)
  2350ef:	bb 00 00 00 00       	mov    $0x0,%ebx
  2350f4:	84 c0                	test   %al,%al
  2350f6:	0f 85 47 01 00 00    	jne    235243 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  2350fc:	49 01 de             	add    %rbx,%r14
  2350ff:	49 29 dd             	sub    %rbx,%r13
  235102:	0f 84 3f 01 00 00    	je     235247 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  235108:	80 7d 00 00          	cmpb   $0x0,0x0(%rbp)
  23510c:	74 1e                	je     23512c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x7c>
  23510e:	ba 04 00 00 00       	mov    $0x4,%edx
  235113:	4c 89 ff             	mov    %r15,%rdi
  235116:	48 8d 35 5f b8 fc ff 	lea    -0x347a1(%rip),%rsi        # 20097c <str.2+0xdc>
  23511d:	48 8b 04 24          	mov    (%rsp),%rax
  235121:	ff 50 18             	callq  *0x18(%rax)
  235124:	84 c0                	test   %al,%al
  235126:	0f 85 17 01 00 00    	jne    235243 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  23512c:	45 31 e4             	xor    %r12d,%r12d
  23512f:	4c 89 e8             	mov    %r13,%rax
  235132:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  235136:	48 83 f8 10          	cmp    $0x10,%rax
  23513a:	72 24                	jb     235160 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  23513c:	0f 1f 40 00          	nopl   0x0(%rax)
  235140:	bf 0a 00 00 00       	mov    $0xa,%edi
  235145:	48 89 c2             	mov    %rax,%rdx
  235148:	e8 c3 17 00 00       	callq  236910 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>
  23514d:	48 83 f8 01          	cmp    $0x1,%rax
  235151:	74 4d                	je     2351a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  235153:	e9 88 00 00 00       	jmpq   2351e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  235158:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  23515f:	00 
  235160:	31 d2                	xor    %edx,%edx
  235162:	48 85 c0             	test   %rax,%rax
  235165:	74 1b                	je     235182 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xd2>
  235167:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  23516e:	00 00 
  235170:	80 3c 16 0a          	cmpb   $0xa,(%rsi,%rdx,1)
  235174:	74 1a                	je     235190 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xe0>
  235176:	48 83 c2 01          	add    $0x1,%rdx
  23517a:	48 39 d0             	cmp    %rdx,%rax
  23517d:	75 f1                	jne    235170 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xc0>
  23517f:	48 89 c2             	mov    %rax,%rdx
  235182:	31 c0                	xor    %eax,%eax
  235184:	48 83 f8 01          	cmp    $0x1,%rax
  235188:	74 16                	je     2351a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  23518a:	eb 54                	jmp    2351e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  23518c:	0f 1f 40 00          	nopl   0x0(%rax)
  235190:	b8 01 00 00 00       	mov    $0x1,%eax
  235195:	48 83 f8 01          	cmp    $0x1,%rax
  235199:	75 45                	jne    2351e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  23519b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  2351a0:	49 01 d4             	add    %rdx,%r12
  2351a3:	4c 89 e3             	mov    %r12,%rbx
  2351a6:	48 ff c3             	inc    %rbx
  2351a9:	74 0c                	je     2351b7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  2351ab:	49 39 dd             	cmp    %rbx,%r13
  2351ae:	72 07                	jb     2351b7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  2351b0:	43 80 3c 26 0a       	cmpb   $0xa,(%r14,%r12,1)
  2351b5:	74 66                	je     23521d <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x16d>
  2351b7:	4c 89 e8             	mov    %r13,%rax
  2351ba:	48 29 d8             	sub    %rbx,%rax
  2351bd:	72 21                	jb     2351e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  2351bf:	49 89 dc             	mov    %rbx,%r12
  2351c2:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  2351c6:	48 83 f8 10          	cmp    $0x10,%rax
  2351ca:	72 94                	jb     235160 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  2351cc:	e9 6f ff ff ff       	jmpq   235140 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x90>
  2351d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2351d8:	00 00 00 
  2351db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  2351e0:	c6 45 00 00          	movb   $0x0,0x0(%rbp)
  2351e4:	4c 89 eb             	mov    %r13,%rbx
  2351e7:	4d 85 ed             	test   %r13,%r13
  2351ea:	0f 84 f0 fe ff ff    	je     2350e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x30>
  2351f0:	49 39 dd             	cmp    %rbx,%r13
  2351f3:	76 31                	jbe    235226 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x176>
  2351f5:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  2351fa:	7e 5c                	jle    235258 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  2351fc:	4c 89 ff             	mov    %r15,%rdi
  2351ff:	4c 89 f6             	mov    %r14,%rsi
  235202:	48 89 da             	mov    %rbx,%rdx
  235205:	48 8b 04 24          	mov    (%rsp),%rax
  235209:	ff 50 18             	callq  *0x18(%rax)
  23520c:	84 c0                	test   %al,%al
  23520e:	75 33                	jne    235243 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  235210:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  235215:	0f 8f e1 fe ff ff    	jg     2350fc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  23521b:	eb 54                	jmp    235271 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1c1>
  23521d:	c6 45 00 01          	movb   $0x1,0x0(%rbp)
  235221:	49 39 dd             	cmp    %rbx,%r13
  235224:	77 cf                	ja     2351f5 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x145>
  235226:	75 30                	jne    235258 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  235228:	4c 89 ff             	mov    %r15,%rdi
  23522b:	4c 89 f6             	mov    %r14,%rsi
  23522e:	4c 89 ea             	mov    %r13,%rdx
  235231:	48 8b 04 24          	mov    (%rsp),%rax
  235235:	ff 50 18             	callq  *0x18(%rax)
  235238:	4c 89 eb             	mov    %r13,%rbx
  23523b:	84 c0                	test   %al,%al
  23523d:	0f 84 b9 fe ff ff    	je     2350fc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  235243:	b0 01                	mov    $0x1,%al
  235245:	eb 02                	jmp    235249 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x199>
  235247:	31 c0                	xor    %eax,%eax
  235249:	48 83 c4 08          	add    $0x8,%rsp
  23524d:	5b                   	pop    %rbx
  23524e:	41 5c                	pop    %r12
  235250:	41 5d                	pop    %r13
  235252:	41 5e                	pop    %r14
  235254:	41 5f                	pop    %r15
  235256:	5d                   	pop    %rbp
  235257:	c3                   	retq   
  235258:	4c 8d 05 e9 84 00 00 	lea    0x84e9(%rip),%r8        # 23d748 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x38>
  23525f:	4c 89 f7             	mov    %r14,%rdi
  235262:	4c 89 ee             	mov    %r13,%rsi
  235265:	31 d2                	xor    %edx,%edx
  235267:	48 89 d9             	mov    %rbx,%rcx
  23526a:	e8 c1 1b 00 00       	callq  236e30 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  23526f:	0f 0b                	ud2    
  235271:	4c 8d 05 e8 84 00 00 	lea    0x84e8(%rip),%r8        # 23d760 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x50>
  235278:	4c 89 f7             	mov    %r14,%rdi
  23527b:	4c 89 ee             	mov    %r13,%rsi
  23527e:	48 89 da             	mov    %rbx,%rdx
  235281:	4c 89 e9             	mov    %r13,%rcx
  235284:	e8 a7 1b 00 00       	callq  236e30 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  235289:	0f 0b                	ud2    
  23528b:	cc                   	int3   
  23528c:	cc                   	int3   
  23528d:	cc                   	int3   
  23528e:	cc                   	int3   
  23528f:	cc                   	int3   

0000000000235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>:
  235290:	55                   	push   %rbp
  235291:	41 57                	push   %r15
  235293:	41 56                	push   %r14
  235295:	41 55                	push   %r13
  235297:	41 54                	push   %r12
  235299:	53                   	push   %rbx
  23529a:	48 83 ec 68          	sub    $0x68,%rsp
  23529e:	48 89 fb             	mov    %rdi,%rbx
  2352a1:	41 b4 01             	mov    $0x1,%r12b
  2352a4:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  2352a8:	74 1a                	je     2352c4 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x34>
  2352aa:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  2352ae:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  2352b2:	48 89 d8             	mov    %rbx,%rax
  2352b5:	48 83 c4 68          	add    $0x68,%rsp
  2352b9:	5b                   	pop    %rbx
  2352ba:	41 5c                	pop    %r12
  2352bc:	41 5d                	pop    %r13
  2352be:	41 5e                	pop    %r14
  2352c0:	41 5f                	pop    %r15
  2352c2:	5d                   	pop    %rbp
  2352c3:	c3                   	retq   
  2352c4:	49 89 cf             	mov    %rcx,%r15
  2352c7:	49 89 d5             	mov    %rdx,%r13
  2352ca:	49 89 f6             	mov    %rsi,%r14
  2352cd:	48 8b 2b             	mov    (%rbx),%rbp
  2352d0:	8b 45 30             	mov    0x30(%rbp),%eax
  2352d3:	8a 4b 09             	mov    0x9(%rbx),%cl
  2352d6:	a8 04                	test   $0x4,%al
  2352d8:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  2352dd:	75 73                	jne    235352 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xc2>
  2352df:	31 d2                	xor    %edx,%edx
  2352e1:	84 c9                	test   %cl,%cl
  2352e3:	48 8d 05 a8 f1 fc ff 	lea    -0x30e58(%rip),%rax        # 204492 <anon.8c5785e28e68a0869ce162bce53fbf2c.27.llvm.142292087146638061>
  2352ea:	48 8d 35 9f f1 fc ff 	lea    -0x30e61(%rip),%rsi        # 204490 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  2352f1:	48 0f 44 f0          	cmove  %rax,%rsi
  2352f5:	0f 94 c2             	sete   %dl
  2352f8:	48 83 ca 02          	or     $0x2,%rdx
  2352fc:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  235300:	48 8b 45 28          	mov    0x28(%rbp),%rax
  235304:	ff 50 18             	callq  *0x18(%rax)
  235307:	84 c0                	test   %al,%al
  235309:	75 9f                	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  23530b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  23530f:	48 8b 45 28          	mov    0x28(%rbp),%rax
  235313:	4c 89 f6             	mov    %r14,%rsi
  235316:	4c 89 ea             	mov    %r13,%rdx
  235319:	ff 50 18             	callq  *0x18(%rax)
  23531c:	84 c0                	test   %al,%al
  23531e:	75 8a                	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  235320:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  235324:	48 8b 45 28          	mov    0x28(%rbp),%rax
  235328:	48 8d 35 e1 f0 fc ff 	lea    -0x30f1f(%rip),%rsi        # 204410 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  23532f:	ba 02 00 00 00       	mov    $0x2,%edx
  235334:	ff 50 18             	callq  *0x18(%rax)
  235337:	84 c0                	test   %al,%al
  235339:	0f 85 6b ff ff ff    	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  23533f:	4c 89 ff             	mov    %r15,%rdi
  235342:	48 89 ee             	mov    %rbp,%rsi
  235345:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23534a:	ff 50 18             	callq  *0x18(%rax)
  23534d:	e9 f5 00 00 00       	jmpq   235447 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1b7>
  235352:	84 c9                	test   %cl,%cl
  235354:	75 22                	jne    235378 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xe8>
  235356:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  23535a:	48 8b 45 28          	mov    0x28(%rbp),%rax
  23535e:	48 8d 35 26 f1 fc ff 	lea    -0x30eda(%rip),%rsi        # 20448b <anon.8c5785e28e68a0869ce162bce53fbf2c.24.llvm.142292087146638061>
  235365:	ba 03 00 00 00       	mov    $0x3,%edx
  23536a:	ff 50 18             	callq  *0x18(%rax)
  23536d:	84 c0                	test   %al,%al
  23536f:	0f 85 35 ff ff ff    	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  235375:	8b 45 30             	mov    0x30(%rbp),%eax
  235378:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  23537d:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  235381:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  235385:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  23538a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  23538f:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  235394:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  235399:	8b 4d 34             	mov    0x34(%rbp),%ecx
  23539c:	8a 55 38             	mov    0x38(%rbp),%dl
  23539f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  2353a3:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  2353a7:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  2353ab:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  2353af:	89 44 24 58          	mov    %eax,0x58(%rsp)
  2353b3:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
  2353b7:	88 54 24 60          	mov    %dl,0x60(%rsp)
  2353bb:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2353c0:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2353c5:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  2353ca:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  2353cf:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2353d4:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  2353d9:	48 8d 05 08 87 00 00 	lea    0x8708(%rip),%rax        # 23dae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  2353e0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2353e5:	4c 89 f6             	mov    %r14,%rsi
  2353e8:	4c 89 ea             	mov    %r13,%rdx
  2353eb:	e8 c0 fc ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2353f0:	84 c0                	test   %al,%al
  2353f2:	0f 85 b2 fe ff ff    	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  2353f8:	48 8d 35 11 f0 fc ff 	lea    -0x30fef(%rip),%rsi        # 204410 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  2353ff:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  235404:	ba 02 00 00 00       	mov    $0x2,%edx
  235409:	e8 a2 fc ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  23540e:	84 c0                	test   %al,%al
  235410:	0f 85 94 fe ff ff    	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  235416:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  23541b:	4c 89 ff             	mov    %r15,%rdi
  23541e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  235423:	ff 50 18             	callq  *0x18(%rax)
  235426:	84 c0                	test   %al,%al
  235428:	0f 85 7c fe ff ff    	jne    2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  23542e:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  235433:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  235438:	48 8d 35 4f f0 fc ff 	lea    -0x30fb1(%rip),%rsi        # 20448e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  23543f:	ba 02 00 00 00       	mov    $0x2,%edx
  235444:	ff 50 18             	callq  *0x18(%rax)
  235447:	41 89 c4             	mov    %eax,%r12d
  23544a:	e9 5b fe ff ff       	jmpq   2352aa <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  23544f:	cc                   	int3   

0000000000235450 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>:
  235450:	53                   	push   %rbx
  235451:	80 7f 09 00          	cmpb   $0x0,0x9(%rdi)
  235455:	8a 47 08             	mov    0x8(%rdi),%al
  235458:	74 42                	je     23549c <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x4c>
  23545a:	48 89 fb             	mov    %rdi,%rbx
  23545d:	84 c0                	test   %al,%al
  23545f:	b0 01                	mov    $0x1,%al
  235461:	75 36                	jne    235499 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x49>
  235463:	48 8b 03             	mov    (%rbx),%rax
  235466:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  23546a:	75 16                	jne    235482 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x32>
  23546c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  235470:	48 8b 40 28          	mov    0x28(%rax),%rax
  235474:	48 8d 35 1b f0 fc ff 	lea    -0x30fe5(%rip),%rsi        # 204496 <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  23547b:	ba 02 00 00 00       	mov    $0x2,%edx
  235480:	eb 14                	jmp    235496 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x46>
  235482:	48 8b 78 20          	mov    0x20(%rax),%rdi
  235486:	48 8b 40 28          	mov    0x28(%rax),%rax
  23548a:	48 8d 35 04 f0 fc ff 	lea    -0x30ffc(%rip),%rsi        # 204495 <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  235491:	ba 01 00 00 00       	mov    $0x1,%edx
  235496:	ff 50 18             	callq  *0x18(%rax)
  235499:	88 43 08             	mov    %al,0x8(%rbx)
  23549c:	5b                   	pop    %rbx
  23549d:	c3                   	retq   
  23549e:	cc                   	int3   
  23549f:	cc                   	int3   

00000000002354a0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>:
  2354a0:	41 57                	push   %r15
  2354a2:	41 56                	push   %r14
  2354a4:	41 55                	push   %r13
  2354a6:	41 54                	push   %r12
  2354a8:	53                   	push   %rbx
  2354a9:	48 83 ec 60          	sub    $0x60,%rsp
  2354ad:	48 89 fb             	mov    %rdi,%rbx
  2354b0:	80 7f 10 00          	cmpb   $0x0,0x10(%rdi)
  2354b4:	74 22                	je     2354d8 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x38>
  2354b6:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  2354ba:	b0 01                	mov    $0x1,%al
  2354bc:	88 43 10             	mov    %al,0x10(%rbx)
  2354bf:	49 83 c5 01          	add    $0x1,%r13
  2354c3:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
  2354c7:	48 89 d8             	mov    %rbx,%rax
  2354ca:	48 83 c4 60          	add    $0x60,%rsp
  2354ce:	5b                   	pop    %rbx
  2354cf:	41 5c                	pop    %r12
  2354d1:	41 5d                	pop    %r13
  2354d3:	41 5e                	pop    %r14
  2354d5:	41 5f                	pop    %r15
  2354d7:	c3                   	retq   
  2354d8:	49 89 d6             	mov    %rdx,%r14
  2354db:	49 89 f7             	mov    %rsi,%r15
  2354de:	4c 8b 23             	mov    (%rbx),%r12
  2354e1:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  2354e5:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  2354ea:	a8 04                	test   $0x4,%al
  2354ec:	75 43                	jne    235531 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x91>
  2354ee:	31 c0                	xor    %eax,%eax
  2354f0:	4d 85 ed             	test   %r13,%r13
  2354f3:	0f 94 c0             	sete   %al
  2354f6:	48 8d 0d 9d ef fc ff 	lea    -0x31063(%rip),%rcx        # 20449a <anon.8c5785e28e68a0869ce162bce53fbf2c.34.llvm.142292087146638061>
  2354fd:	48 8d 35 8c ef fc ff 	lea    -0x31074(%rip),%rsi        # 204490 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  235504:	48 0f 44 f1          	cmove  %rcx,%rsi
  235508:	ba 02 00 00 00       	mov    $0x2,%edx
  23550d:	48 29 c2             	sub    %rax,%rdx
  235510:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  235515:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  23551a:	ff 50 18             	callq  *0x18(%rax)
  23551d:	89 c1                	mov    %eax,%ecx
  23551f:	b0 01                	mov    $0x1,%al
  235521:	84 c9                	test   %cl,%cl
  235523:	75 97                	jne    2354bc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  235525:	4c 89 ff             	mov    %r15,%rdi
  235528:	4c 89 e6             	mov    %r12,%rsi
  23552b:	41 ff 56 18          	callq  *0x18(%r14)
  23552f:	eb 8b                	jmp    2354bc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  235531:	4d 85 ed             	test   %r13,%r13
  235534:	75 2c                	jne    235562 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xc2>
  235536:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  23553b:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  235540:	48 8d 35 51 ef fc ff 	lea    -0x310af(%rip),%rsi        # 204498 <anon.8c5785e28e68a0869ce162bce53fbf2c.33.llvm.142292087146638061>
  235547:	ba 02 00 00 00       	mov    $0x2,%edx
  23554c:	ff 50 18             	callq  *0x18(%rax)
  23554f:	84 c0                	test   %al,%al
  235551:	74 0a                	je     23555d <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xbd>
  235553:	b0 01                	mov    $0x1,%al
  235555:	45 31 ed             	xor    %r13d,%r13d
  235558:	e9 5f ff ff ff       	jmpq   2354bc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  23555d:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  235562:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  235567:	49 8b 4c 24 20       	mov    0x20(%r12),%rcx
  23556c:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
  235571:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  235576:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  23557b:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  235580:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  235585:	41 8b 4c 24 34       	mov    0x34(%r12),%ecx
  23558a:	41 8a 54 24 38       	mov    0x38(%r12),%dl
  23558f:	49 8b 34 24          	mov    (%r12),%rsi
  235593:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  235598:	4d 8b 44 24 10       	mov    0x10(%r12),%r8
  23559d:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
  2355a2:	89 44 24 38          	mov    %eax,0x38(%rsp)
  2355a6:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  2355aa:	88 54 24 40          	mov    %dl,0x40(%rsp)
  2355ae:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2355b3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2355b8:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  2355bd:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
  2355c2:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  2355c7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2355cc:	48 8d 05 15 85 00 00 	lea    0x8515(%rip),%rax        # 23dae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  2355d3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2355d8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  2355dd:	4c 89 ff             	mov    %r15,%rdi
  2355e0:	41 ff 56 18          	callq  *0x18(%r14)
  2355e4:	84 c0                	test   %al,%al
  2355e6:	0f 85 ce fe ff ff    	jne    2354ba <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1a>
  2355ec:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2355f1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2355f6:	48 8d 35 91 ee fc ff 	lea    -0x3116f(%rip),%rsi        # 20448e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  2355fd:	ba 02 00 00 00       	mov    $0x2,%edx
  235602:	ff 50 18             	callq  *0x18(%rax)
  235605:	e9 b2 fe ff ff       	jmpq   2354bc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  23560a:	cc                   	int3   
  23560b:	cc                   	int3   
  23560c:	cc                   	int3   
  23560d:	cc                   	int3   
  23560e:	cc                   	int3   
  23560f:	cc                   	int3   

0000000000235610 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>:
  235610:	55                   	push   %rbp
  235611:	53                   	push   %rbx
  235612:	50                   	push   %rax
  235613:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  235617:	8a 47 10             	mov    0x10(%rdi),%al
  23561a:	48 85 c9             	test   %rcx,%rcx
  23561d:	74 5c                	je     23567b <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x6b>
  23561f:	48 89 fb             	mov    %rdi,%rbx
  235622:	40 b5 01             	mov    $0x1,%bpl
  235625:	84 c0                	test   %al,%al
  235627:	75 4c                	jne    235675 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  235629:	48 83 f9 01          	cmp    $0x1,%rcx
  23562d:	75 2a                	jne    235659 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  23562f:	80 7b 11 00          	cmpb   $0x0,0x11(%rbx)
  235633:	74 24                	je     235659 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  235635:	48 8b 03             	mov    (%rbx),%rax
  235638:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  23563c:	75 1b                	jne    235659 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  23563e:	48 8b 78 20          	mov    0x20(%rax),%rdi
  235642:	48 8b 40 28          	mov    0x28(%rax),%rax
  235646:	48 8d 35 4e ee fc ff 	lea    -0x311b2(%rip),%rsi        # 20449b <anon.8c5785e28e68a0869ce162bce53fbf2c.35.llvm.142292087146638061>
  23564d:	ba 01 00 00 00       	mov    $0x1,%edx
  235652:	ff 50 18             	callq  *0x18(%rax)
  235655:	84 c0                	test   %al,%al
  235657:	75 1c                	jne    235675 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  235659:	48 8b 03             	mov    (%rbx),%rax
  23565c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  235660:	48 8b 40 28          	mov    0x28(%rax),%rax
  235664:	48 8d 35 31 ee fc ff 	lea    -0x311cf(%rip),%rsi        # 20449c <anon.8c5785e28e68a0869ce162bce53fbf2c.36.llvm.142292087146638061>
  23566b:	ba 01 00 00 00       	mov    $0x1,%edx
  235670:	ff 50 18             	callq  *0x18(%rax)
  235673:	89 c5                	mov    %eax,%ebp
  235675:	40 88 6b 10          	mov    %bpl,0x10(%rbx)
  235679:	89 e8                	mov    %ebp,%eax
  23567b:	48 83 c4 08          	add    $0x8,%rsp
  23567f:	5b                   	pop    %rbx
  235680:	5d                   	pop    %rbp
  235681:	c3                   	retq   
  235682:	cc                   	int3   
  235683:	cc                   	int3   
  235684:	cc                   	int3   
  235685:	cc                   	int3   
  235686:	cc                   	int3   
  235687:	cc                   	int3   
  235688:	cc                   	int3   
  235689:	cc                   	int3   
  23568a:	cc                   	int3   
  23568b:	cc                   	int3   
  23568c:	cc                   	int3   
  23568d:	cc                   	int3   
  23568e:	cc                   	int3   
  23568f:	cc                   	int3   

0000000000235690 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061>:
  235690:	55                   	push   %rbp
  235691:	41 57                	push   %r15
  235693:	41 56                	push   %r14
  235695:	41 54                	push   %r12
  235697:	53                   	push   %rbx
  235698:	48 83 ec 60          	sub    $0x60,%rsp
  23569c:	48 89 fb             	mov    %rdi,%rbx
  23569f:	41 b4 01             	mov    $0x1,%r12b
  2356a2:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  2356a6:	74 15                	je     2356bd <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x2d>
  2356a8:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  2356ac:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  2356b0:	48 83 c4 60          	add    $0x60,%rsp
  2356b4:	5b                   	pop    %rbx
  2356b5:	41 5c                	pop    %r12
  2356b7:	41 5e                	pop    %r14
  2356b9:	41 5f                	pop    %r15
  2356bb:	5d                   	pop    %rbp
  2356bc:	c3                   	retq   
  2356bd:	49 89 d6             	mov    %rdx,%r14
  2356c0:	49 89 f7             	mov    %rsi,%r15
  2356c3:	48 8b 2b             	mov    (%rbx),%rbp
  2356c6:	8b 45 30             	mov    0x30(%rbp),%eax
  2356c9:	8a 4b 09             	mov    0x9(%rbx),%cl
  2356cc:	a8 04                	test   $0x4,%al
  2356ce:	75 2e                	jne    2356fe <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x6e>
  2356d0:	84 c9                	test   %cl,%cl
  2356d2:	74 1b                	je     2356ef <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x5f>
  2356d4:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  2356d8:	48 8b 45 28          	mov    0x28(%rbp),%rax
  2356dc:	48 8d 35 ad ed fc ff 	lea    -0x31253(%rip),%rsi        # 204490 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  2356e3:	ba 02 00 00 00       	mov    $0x2,%edx
  2356e8:	ff 50 18             	callq  *0x18(%rax)
  2356eb:	84 c0                	test   %al,%al
  2356ed:	75 b9                	jne    2356a8 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  2356ef:	4c 89 ff             	mov    %r15,%rdi
  2356f2:	48 89 ee             	mov    %rbp,%rsi
  2356f5:	41 ff 56 18          	callq  *0x18(%r14)
  2356f9:	41 89 c4             	mov    %eax,%r12d
  2356fc:	eb aa                	jmp    2356a8 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  2356fe:	84 c9                	test   %cl,%cl
  235700:	75 1e                	jne    235720 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x90>
  235702:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  235706:	48 8b 45 28          	mov    0x28(%rbp),%rax
  23570a:	48 8d 35 8c ed fc ff 	lea    -0x31274(%rip),%rsi        # 20449d <anon.8c5785e28e68a0869ce162bce53fbf2c.37.llvm.142292087146638061>
  235711:	ba 01 00 00 00       	mov    $0x1,%edx
  235716:	ff 50 18             	callq  *0x18(%rax)
  235719:	84 c0                	test   %al,%al
  23571b:	75 8b                	jne    2356a8 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  23571d:	8b 45 30             	mov    0x30(%rbp),%eax
  235720:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  235725:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  235729:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  23572d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  235732:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  235737:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  23573c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  235741:	8b 4d 34             	mov    0x34(%rbp),%ecx
  235744:	8a 55 38             	mov    0x38(%rbp),%dl
  235747:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  23574b:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  23574f:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  235753:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  235757:	89 44 24 38          	mov    %eax,0x38(%rsp)
  23575b:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  23575f:	88 54 24 40          	mov    %dl,0x40(%rsp)
  235763:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  235768:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23576d:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  235772:	48 89 6c 24 20       	mov    %rbp,0x20(%rsp)
  235777:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  23577c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  235781:	48 8d 05 60 83 00 00 	lea    0x8360(%rip),%rax        # 23dae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  235788:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  23578d:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  235792:	4c 89 ff             	mov    %r15,%rdi
  235795:	41 ff 56 18          	callq  *0x18(%r14)
  235799:	84 c0                	test   %al,%al
  23579b:	0f 85 07 ff ff ff    	jne    2356a8 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  2357a1:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2357a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2357ab:	48 8d 35 dc ec fc ff 	lea    -0x31324(%rip),%rsi        # 20448e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  2357b2:	ba 02 00 00 00       	mov    $0x2,%edx
  2357b7:	ff 50 18             	callq  *0x18(%rax)
  2357ba:	41 89 c4             	mov    %eax,%r12d
  2357bd:	e9 e6 fe ff ff       	jmpq   2356a8 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  2357c2:	cc                   	int3   
  2357c3:	cc                   	int3   
  2357c4:	cc                   	int3   
  2357c5:	cc                   	int3   
  2357c6:	cc                   	int3   
  2357c7:	cc                   	int3   
  2357c8:	cc                   	int3   
  2357c9:	cc                   	int3   
  2357ca:	cc                   	int3   
  2357cb:	cc                   	int3   
  2357cc:	cc                   	int3   
  2357cd:	cc                   	int3   
  2357ce:	cc                   	int3   
  2357cf:	cc                   	int3   

00000000002357d0 <_ZN4core3fmt8builders8DebugSet5entry17ha462e373088cbeaaE>:
  2357d0:	53                   	push   %rbx
  2357d1:	48 89 fb             	mov    %rdi,%rbx
  2357d4:	e8 b7 fe ff ff       	callq  235690 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061>
  2357d9:	48 89 d8             	mov    %rbx,%rax
  2357dc:	5b                   	pop    %rbx
  2357dd:	c3                   	retq   
  2357de:	cc                   	int3   
  2357df:	cc                   	int3   

00000000002357e0 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E>:
  2357e0:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  2357e4:	74 03                	je     2357e9 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E+0x9>
  2357e6:	b0 01                	mov    $0x1,%al
  2357e8:	c3                   	retq   
  2357e9:	48 8b 07             	mov    (%rdi),%rax
  2357ec:	48 8b 78 20          	mov    0x20(%rax),%rdi
  2357f0:	48 8b 40 28          	mov    0x28(%rax),%rax
  2357f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  2357f8:	48 8d 35 a0 ec fc ff 	lea    -0x31360(%rip),%rsi        # 20449f <anon.8c5785e28e68a0869ce162bce53fbf2c.43.llvm.142292087146638061>
  2357ff:	ba 01 00 00 00       	mov    $0x1,%edx
  235804:	ff e0                	jmpq   *%rax
  235806:	cc                   	int3   
  235807:	cc                   	int3   
  235808:	cc                   	int3   
  235809:	cc                   	int3   
  23580a:	cc                   	int3   
  23580b:	cc                   	int3   
  23580c:	cc                   	int3   
  23580d:	cc                   	int3   
  23580e:	cc                   	int3   
  23580f:	cc                   	int3   

0000000000235810 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E>:
  235810:	50                   	push   %rax
  235811:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  235818:	00 
  235819:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  23581f:	73 16                	jae    235837 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x27>
  235821:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  235826:	ba 01 00 00 00       	mov    $0x1,%edx
  23582b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  235830:	e8 7b f8 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  235835:	59                   	pop    %rcx
  235836:	c3                   	retq   
  235837:	89 f0                	mov    %esi,%eax
  235839:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  23583f:	73 27                	jae    235868 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x58>
  235841:	c1 e8 06             	shr    $0x6,%eax
  235844:	0c c0                	or     $0xc0,%al
  235846:	88 44 24 04          	mov    %al,0x4(%rsp)
  23584a:	40 80 e6 3f          	and    $0x3f,%sil
  23584e:	40 80 ce 80          	or     $0x80,%sil
  235852:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  235857:	ba 02 00 00 00       	mov    $0x2,%edx
  23585c:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  235861:	e8 4a f8 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  235866:	59                   	pop    %rcx
  235867:	c3                   	retq   
  235868:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  23586e:	73 34                	jae    2358a4 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x94>
  235870:	c1 e8 0c             	shr    $0xc,%eax
  235873:	0c e0                	or     $0xe0,%al
  235875:	88 44 24 04          	mov    %al,0x4(%rsp)
  235879:	89 f0                	mov    %esi,%eax
  23587b:	c1 e8 06             	shr    $0x6,%eax
  23587e:	24 3f                	and    $0x3f,%al
  235880:	0c 80                	or     $0x80,%al
  235882:	88 44 24 05          	mov    %al,0x5(%rsp)
  235886:	40 80 e6 3f          	and    $0x3f,%sil
  23588a:	40 80 ce 80          	or     $0x80,%sil
  23588e:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  235893:	ba 03 00 00 00       	mov    $0x3,%edx
  235898:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  23589d:	e8 0e f8 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2358a2:	59                   	pop    %rcx
  2358a3:	c3                   	retq   
  2358a4:	c1 e8 12             	shr    $0x12,%eax
  2358a7:	0c f0                	or     $0xf0,%al
  2358a9:	88 44 24 04          	mov    %al,0x4(%rsp)
  2358ad:	89 f0                	mov    %esi,%eax
  2358af:	c1 e8 0c             	shr    $0xc,%eax
  2358b2:	24 3f                	and    $0x3f,%al
  2358b4:	0c 80                	or     $0x80,%al
  2358b6:	88 44 24 05          	mov    %al,0x5(%rsp)
  2358ba:	89 f0                	mov    %esi,%eax
  2358bc:	c1 e8 06             	shr    $0x6,%eax
  2358bf:	24 3f                	and    $0x3f,%al
  2358c1:	0c 80                	or     $0x80,%al
  2358c3:	88 44 24 06          	mov    %al,0x6(%rsp)
  2358c7:	40 80 e6 3f          	and    $0x3f,%sil
  2358cb:	40 80 ce 80          	or     $0x80,%sil
  2358cf:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  2358d4:	ba 04 00 00 00       	mov    $0x4,%edx
  2358d9:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2358de:	e8 cd f7 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2358e3:	59                   	pop    %rcx
  2358e4:	c3                   	retq   
  2358e5:	cc                   	int3   
  2358e6:	cc                   	int3   
  2358e7:	cc                   	int3   
  2358e8:	cc                   	int3   
  2358e9:	cc                   	int3   
  2358ea:	cc                   	int3   
  2358eb:	cc                   	int3   
  2358ec:	cc                   	int3   
  2358ed:	cc                   	int3   
  2358ee:	cc                   	int3   
  2358ef:	cc                   	int3   

00000000002358f0 <_ZN4core3fmt5Write9write_fmt17h3844688a471abbbcE>:
  2358f0:	48 83 ec 38          	sub    $0x38,%rsp
  2358f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2358f8:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2358fc:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  235901:	48 8b 46 20          	mov    0x20(%rsi),%rax
  235905:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23590a:	48 8b 46 18          	mov    0x18(%rsi),%rax
  23590e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  235913:	48 8b 46 10          	mov    0x10(%rsi),%rax
  235917:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23591c:	48 8b 06             	mov    (%rsi),%rax
  23591f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  235923:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235928:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23592d:	48 8d 35 44 7e 00 00 	lea    0x7e44(%rip),%rsi        # 23d778 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  235934:	48 89 e7             	mov    %rsp,%rdi
  235937:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  23593c:	e8 8f 1b 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  235941:	48 83 c4 38          	add    $0x38,%rsp
  235945:	c3                   	retq   
  235946:	cc                   	int3   
  235947:	cc                   	int3   
  235948:	cc                   	int3   
  235949:	cc                   	int3   
  23594a:	cc                   	int3   
  23594b:	cc                   	int3   
  23594c:	cc                   	int3   
  23594d:	cc                   	int3   
  23594e:	cc                   	int3   
  23594f:	cc                   	int3   

0000000000235950 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h8d11a5cbe002f1bcE>:
  235950:	48 8b 3f             	mov    (%rdi),%rdi
  235953:	e9 58 f7 ff ff       	jmpq   2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  235958:	cc                   	int3   
  235959:	cc                   	int3   
  23595a:	cc                   	int3   
  23595b:	cc                   	int3   
  23595c:	cc                   	int3   
  23595d:	cc                   	int3   
  23595e:	cc                   	int3   
  23595f:	cc                   	int3   

0000000000235960 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E>:
  235960:	50                   	push   %rax
  235961:	48 8b 3f             	mov    (%rdi),%rdi
  235964:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  23596b:	00 
  23596c:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  235972:	73 16                	jae    23598a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x2a>
  235974:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  235979:	ba 01 00 00 00       	mov    $0x1,%edx
  23597e:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  235983:	e8 28 f7 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  235988:	59                   	pop    %rcx
  235989:	c3                   	retq   
  23598a:	89 f0                	mov    %esi,%eax
  23598c:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  235992:	73 27                	jae    2359bb <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x5b>
  235994:	c1 e8 06             	shr    $0x6,%eax
  235997:	0c c0                	or     $0xc0,%al
  235999:	88 44 24 04          	mov    %al,0x4(%rsp)
  23599d:	40 80 e6 3f          	and    $0x3f,%sil
  2359a1:	40 80 ce 80          	or     $0x80,%sil
  2359a5:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  2359aa:	ba 02 00 00 00       	mov    $0x2,%edx
  2359af:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2359b4:	e8 f7 f6 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2359b9:	59                   	pop    %rcx
  2359ba:	c3                   	retq   
  2359bb:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  2359c1:	73 34                	jae    2359f7 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x97>
  2359c3:	c1 e8 0c             	shr    $0xc,%eax
  2359c6:	0c e0                	or     $0xe0,%al
  2359c8:	88 44 24 04          	mov    %al,0x4(%rsp)
  2359cc:	89 f0                	mov    %esi,%eax
  2359ce:	c1 e8 06             	shr    $0x6,%eax
  2359d1:	24 3f                	and    $0x3f,%al
  2359d3:	0c 80                	or     $0x80,%al
  2359d5:	88 44 24 05          	mov    %al,0x5(%rsp)
  2359d9:	40 80 e6 3f          	and    $0x3f,%sil
  2359dd:	40 80 ce 80          	or     $0x80,%sil
  2359e1:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  2359e6:	ba 03 00 00 00       	mov    $0x3,%edx
  2359eb:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2359f0:	e8 bb f6 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2359f5:	59                   	pop    %rcx
  2359f6:	c3                   	retq   
  2359f7:	c1 e8 12             	shr    $0x12,%eax
  2359fa:	0c f0                	or     $0xf0,%al
  2359fc:	88 44 24 04          	mov    %al,0x4(%rsp)
  235a00:	89 f0                	mov    %esi,%eax
  235a02:	c1 e8 0c             	shr    $0xc,%eax
  235a05:	24 3f                	and    $0x3f,%al
  235a07:	0c 80                	or     $0x80,%al
  235a09:	88 44 24 05          	mov    %al,0x5(%rsp)
  235a0d:	89 f0                	mov    %esi,%eax
  235a0f:	c1 e8 06             	shr    $0x6,%eax
  235a12:	24 3f                	and    $0x3f,%al
  235a14:	0c 80                	or     $0x80,%al
  235a16:	88 44 24 06          	mov    %al,0x6(%rsp)
  235a1a:	40 80 e6 3f          	and    $0x3f,%sil
  235a1e:	40 80 ce 80          	or     $0x80,%sil
  235a22:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  235a27:	ba 04 00 00 00       	mov    $0x4,%edx
  235a2c:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  235a31:	e8 7a f6 ff ff       	callq  2350b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  235a36:	59                   	pop    %rcx
  235a37:	c3                   	retq   
  235a38:	cc                   	int3   
  235a39:	cc                   	int3   
  235a3a:	cc                   	int3   
  235a3b:	cc                   	int3   
  235a3c:	cc                   	int3   
  235a3d:	cc                   	int3   
  235a3e:	cc                   	int3   
  235a3f:	cc                   	int3   

0000000000235a40 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h2f268ff30ef8847bE>:
  235a40:	48 83 ec 38          	sub    $0x38,%rsp
  235a44:	48 8b 07             	mov    (%rdi),%rax
  235a47:	48 89 04 24          	mov    %rax,(%rsp)
  235a4b:	48 8b 46 28          	mov    0x28(%rsi),%rax
  235a4f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  235a54:	48 8b 46 20          	mov    0x20(%rsi),%rax
  235a58:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  235a5d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  235a61:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  235a66:	48 8b 46 10          	mov    0x10(%rsi),%rax
  235a6a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  235a6f:	48 8b 06             	mov    (%rsi),%rax
  235a72:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  235a76:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235a7b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  235a80:	48 8d 35 f1 7c 00 00 	lea    0x7cf1(%rip),%rsi        # 23d778 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  235a87:	48 89 e7             	mov    %rsp,%rdi
  235a8a:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  235a8f:	e8 3c 1a 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  235a94:	48 83 c4 38          	add    $0x38,%rsp
  235a98:	c3                   	retq   
  235a99:	cc                   	int3   
  235a9a:	cc                   	int3   
  235a9b:	cc                   	int3   
  235a9c:	cc                   	int3   
  235a9d:	cc                   	int3   
  235a9e:	cc                   	int3   
  235a9f:	cc                   	int3   

0000000000235aa0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>:
  235aa0:	50                   	push   %rax
  235aa1:	41 89 f9             	mov    %edi,%r9d
  235aa4:	41 c1 e1 0b          	shl    $0xb,%r9d
  235aa8:	b9 20 00 00 00       	mov    $0x20,%ecx
  235aad:	31 c0                	xor    %eax,%eax
  235aaf:	4c 8d 05 6e ea fc ff 	lea    -0x31592(%rip),%r8        # 204524 <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h68677736f581025fE.llvm.142292087146638061>
  235ab6:	ba 20 00 00 00       	mov    $0x20,%edx
  235abb:	eb 12                	jmp    235acf <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  235abd:	0f 1f 00             	nopl   (%rax)
  235ac0:	48 83 c1 01          	add    $0x1,%rcx
  235ac4:	48 89 c8             	mov    %rcx,%rax
  235ac7:	48 89 d1             	mov    %rdx,%rcx
  235aca:	48 29 c1             	sub    %rax,%rcx
  235acd:	76 25                	jbe    235af4 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  235acf:	48 d1 e9             	shr    %rcx
  235ad2:	48 01 c1             	add    %rax,%rcx
  235ad5:	41 8b 34 88          	mov    (%r8,%rcx,4),%esi
  235ad9:	c1 e6 0b             	shl    $0xb,%esi
  235adc:	44 39 ce             	cmp    %r9d,%esi
  235adf:	72 df                	jb     235ac0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x20>
  235ae1:	74 0a                	je     235aed <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x4d>
  235ae3:	48 89 ca             	mov    %rcx,%rdx
  235ae6:	48 29 c1             	sub    %rax,%rcx
  235ae9:	77 e4                	ja     235acf <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  235aeb:	eb 07                	jmp    235af4 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  235aed:	48 83 c1 01          	add    $0x1,%rcx
  235af1:	48 89 c8             	mov    %rcx,%rax
  235af4:	48 83 f8 1f          	cmp    $0x1f,%rax
  235af8:	0f 87 a8 00 00 00    	ja     235ba6 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x106>
  235afe:	41 b9 c3 02 00 00    	mov    $0x2c3,%r9d
  235b04:	48 83 f8 1f          	cmp    $0x1f,%rax
  235b08:	74 09                	je     235b13 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x73>
  235b0a:	45 8b 4c 80 04       	mov    0x4(%r8,%rax,4),%r9d
  235b0f:	49 c1 e9 15          	shr    $0x15,%r9
  235b13:	31 d2                	xor    %edx,%edx
  235b15:	48 89 c1             	mov    %rax,%rcx
  235b18:	48 83 e9 01          	sub    $0x1,%rcx
  235b1c:	72 13                	jb     235b31 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x91>
  235b1e:	48 83 f9 20          	cmp    $0x20,%rcx
  235b22:	0f 83 94 00 00 00    	jae    235bbc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x11c>
  235b28:	ba ff ff 1f 00       	mov    $0x1fffff,%edx
  235b2d:	41 23 14 88          	and    (%r8,%rcx,4),%edx
  235b31:	41 8b 04 80          	mov    (%r8,%rax,4),%eax
  235b35:	48 c1 e8 15          	shr    $0x15,%rax
  235b39:	48 89 c1             	mov    %rax,%rcx
  235b3c:	48 f7 d1             	not    %rcx
  235b3f:	4c 01 c9             	add    %r9,%rcx
  235b42:	74 48                	je     235b8c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  235b44:	29 d7                	sub    %edx,%edi
  235b46:	48 3d c4 02 00 00    	cmp    $0x2c4,%rax
  235b4c:	b9 c3 02 00 00       	mov    $0x2c3,%ecx
  235b51:	48 0f 43 c8          	cmovae %rax,%rcx
  235b55:	49 83 c1 ff          	add    $0xffffffffffffffff,%r9
  235b59:	31 d2                	xor    %edx,%edx
  235b5b:	4c 8d 05 42 ea fc ff 	lea    -0x315be(%rip),%r8        # 2045a4 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061>
  235b62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  235b69:	00 00 00 
  235b6c:	0f 1f 40 00          	nopl   0x0(%rax)
  235b70:	48 39 c1             	cmp    %rax,%rcx
  235b73:	74 1b                	je     235b90 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xf0>
  235b75:	42 0f b6 34 00       	movzbl (%rax,%r8,1),%esi
  235b7a:	01 f2                	add    %esi,%edx
  235b7c:	39 fa                	cmp    %edi,%edx
  235b7e:	77 0c                	ja     235b8c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  235b80:	48 83 c0 01          	add    $0x1,%rax
  235b84:	49 39 c1             	cmp    %rax,%r9
  235b87:	75 e7                	jne    235b70 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xd0>
  235b89:	4c 89 c8             	mov    %r9,%rax
  235b8c:	24 01                	and    $0x1,%al
  235b8e:	59                   	pop    %rcx
  235b8f:	c3                   	retq   
  235b90:	48 8d 15 29 7c 00 00 	lea    0x7c29(%rip),%rdx        # 23d7c0 <anon.8c5785e28e68a0869ce162bce53fbf2c.56.llvm.142292087146638061>
  235b97:	be c3 02 00 00       	mov    $0x2c3,%esi
  235b9c:	48 89 cf             	mov    %rcx,%rdi
  235b9f:	e8 9c 00 00 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  235ba4:	0f 0b                	ud2    
  235ba6:	48 8d 15 fb 7b 00 00 	lea    0x7bfb(%rip),%rdx        # 23d7a8 <anon.8c5785e28e68a0869ce162bce53fbf2c.55.llvm.142292087146638061>
  235bad:	be 20 00 00 00       	mov    $0x20,%esi
  235bb2:	48 89 c7             	mov    %rax,%rdi
  235bb5:	e8 86 00 00 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  235bba:	0f 0b                	ud2    
  235bbc:	48 8d 15 15 7c 00 00 	lea    0x7c15(%rip),%rdx        # 23d7d8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061>
  235bc3:	be 20 00 00 00       	mov    $0x20,%esi
  235bc8:	48 89 cf             	mov    %rcx,%rdi
  235bcb:	e8 70 00 00 00       	callq  235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  235bd0:	0f 0b                	ud2    
  235bd2:	cc                   	int3   
  235bd3:	cc                   	int3   
  235bd4:	cc                   	int3   
  235bd5:	cc                   	int3   
  235bd6:	cc                   	int3   
  235bd7:	cc                   	int3   
  235bd8:	cc                   	int3   
  235bd9:	cc                   	int3   
  235bda:	cc                   	int3   
  235bdb:	cc                   	int3   
  235bdc:	cc                   	int3   
  235bdd:	cc                   	int3   
  235bde:	cc                   	int3   
  235bdf:	cc                   	int3   

0000000000235be0 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h1ecee3ae2cf00d6eE.llvm.5832540808935662489>:
  235be0:	c3                   	retq   
  235be1:	cc                   	int3   
  235be2:	cc                   	int3   
  235be3:	cc                   	int3   
  235be4:	cc                   	int3   
  235be5:	cc                   	int3   
  235be6:	cc                   	int3   
  235be7:	cc                   	int3   
  235be8:	cc                   	int3   
  235be9:	cc                   	int3   
  235bea:	cc                   	int3   
  235beb:	cc                   	int3   
  235bec:	cc                   	int3   
  235bed:	cc                   	int3   
  235bee:	cc                   	int3   
  235bef:	cc                   	int3   

0000000000235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>:
  235bf0:	48 83 ec 48          	sub    $0x48,%rsp
  235bf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235bf9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  235bfe:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  235c03:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  235c08:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  235c0f:	00 00 
  235c11:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  235c18:	00 00 
  235c1a:	48 8d 05 47 ec fc ff 	lea    -0x313b9(%rip),%rax        # 204868 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  235c21:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235c26:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  235c2d:	00 00 
  235c2f:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  235c34:	48 89 d6             	mov    %rdx,%rsi
  235c37:	e8 84 00 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235c3c:	0f 0b                	ud2    
  235c3e:	cc                   	int3   
  235c3f:	cc                   	int3   

0000000000235c40 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>:
  235c40:	48 83 ec 68          	sub    $0x68,%rsp
  235c44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235c49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  235c4e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  235c53:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  235c58:	48 8b 05 01 7f 00 00 	mov    0x7f01(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  235c5f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  235c64:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  235c69:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  235c6e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  235c73:	48 8d 05 96 7b 00 00 	lea    0x7b96(%rip),%rax        # 23d810 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x38>
  235c7a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235c7f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  235c86:	00 00 
  235c88:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  235c8f:	00 00 
  235c91:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235c96:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  235c9b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  235ca2:	00 00 
  235ca4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  235ca9:	48 89 d6             	mov    %rdx,%rsi
  235cac:	e8 0f 00 00 00       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235cb1:	0f 0b                	ud2    
  235cb3:	cc                   	int3   
  235cb4:	cc                   	int3   
  235cb5:	cc                   	int3   
  235cb6:	cc                   	int3   
  235cb7:	cc                   	int3   
  235cb8:	cc                   	int3   
  235cb9:	cc                   	int3   
  235cba:	cc                   	int3   
  235cbb:	cc                   	int3   
  235cbc:	cc                   	int3   
  235cbd:	cc                   	int3   
  235cbe:	cc                   	int3   
  235cbf:	cc                   	int3   

0000000000235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>:
  235cc0:	48 83 ec 28          	sub    $0x28,%rsp
  235cc4:	48 8d 05 9d eb fc ff 	lea    -0x31463(%rip),%rax        # 204868 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  235ccb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  235cd0:	48 8d 05 19 7b 00 00 	lea    0x7b19(%rip),%rax        # 23d7f0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x18>
  235cd7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  235cdc:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  235ce1:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  235ce6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  235ceb:	e8 30 39 ff ff       	callq  229620 <rust_begin_unwind>
  235cf0:	0f 0b                	ud2    
  235cf2:	cc                   	int3   
  235cf3:	cc                   	int3   
  235cf4:	cc                   	int3   
  235cf5:	cc                   	int3   
  235cf6:	cc                   	int3   
  235cf7:	cc                   	int3   
  235cf8:	cc                   	int3   
  235cf9:	cc                   	int3   
  235cfa:	cc                   	int3   
  235cfb:	cc                   	int3   
  235cfc:	cc                   	int3   
  235cfd:	cc                   	int3   
  235cfe:	cc                   	int3   
  235cff:	cc                   	int3   

0000000000235d00 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>:
  235d00:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  235d07:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  235d0c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  235d11:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  235d16:	4c 89 44 24 30       	mov    %r8,0x30(%rsp)
  235d1b:	40 84 ff             	test   %dil,%dil
  235d1e:	74 13                	je     235d33 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x33>
  235d20:	40 80 ff 01          	cmp    $0x1,%dil
  235d24:	0f 85 b5 00 00 00    	jne    235ddf <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0xdf>
  235d2a:	48 8d 05 50 eb fc ff 	lea    -0x314b0(%rip),%rax        # 204881 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2dd>
  235d31:	eb 07                	jmp    235d3a <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x3a>
  235d33:	48 8d 05 49 eb fc ff 	lea    -0x314b7(%rip),%rax        # 204883 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2df>
  235d3a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  235d3f:	b8 02 00 00 00       	mov    $0x2,%eax
  235d44:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  235d4b:	00 
  235d4c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  235d51:	49 83 39 00          	cmpq   $0x0,(%r9)
  235d55:	0f 85 ac 00 00 00    	jne    235e07 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x107>
  235d5b:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  235d60:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235d65:	48 8d 05 64 2f 00 00 	lea    0x2f64(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  235d6c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  235d71:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235d76:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  235d7b:	48 8d 05 8e 2c 00 00 	lea    0x2c8e(%rip),%rax        # 238a10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  235d82:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  235d87:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  235d8c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  235d91:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  235d96:	48 8d 05 d3 7a 00 00 	lea    0x7ad3(%rip),%rax        # 23d870 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x98>
  235d9d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  235da2:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  235da9:	00 04 00 00 00 
  235dae:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  235db5:	00 00 00 00 00 
  235dba:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  235dbf:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  235dc6:	00 
  235dc7:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  235dce:	00 03 00 00 00 
  235dd3:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  235dd8:	e8 e3 fe ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235ddd:	0f 0b                	ud2    
  235ddf:	48 8d 05 94 ea fc ff 	lea    -0x3156c(%rip),%rax        # 20487a <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2d6>
  235de6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  235deb:	b8 07 00 00 00       	mov    $0x7,%eax
  235df0:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  235df7:	00 
  235df8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  235dfd:	49 83 39 00          	cmpq   $0x0,(%r9)
  235e01:	0f 84 54 ff ff ff    	je     235d5b <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x5b>
  235e07:	49 8b 41 28          	mov    0x28(%r9),%rax
  235e0b:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  235e12:	00 
  235e13:	49 8b 41 20          	mov    0x20(%r9),%rax
  235e17:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  235e1e:	00 
  235e1f:	49 8b 41 18          	mov    0x18(%r9),%rax
  235e23:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  235e2a:	00 
  235e2b:	49 8b 41 10          	mov    0x10(%r9),%rax
  235e2f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  235e36:	00 
  235e37:	49 8b 01             	mov    (%r9),%rax
  235e3a:	49 8b 49 08          	mov    0x8(%r9),%rcx
  235e3e:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  235e45:	00 
  235e46:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  235e4d:	00 
  235e4e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  235e53:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235e58:	48 8d 05 71 2e 00 00 	lea    0x2e71(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  235e5f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  235e64:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235e69:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  235e6e:	48 8d 05 9b 2b 00 00 	lea    0x2b9b(%rip),%rax        # 238a10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  235e75:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  235e7a:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  235e7f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  235e84:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  235e89:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  235e90:	00 
  235e91:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  235e96:	48 8b 05 3b 7d 00 00 	mov    0x7d3b(%rip),%rax        # 23dbd8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xf0>
  235e9d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  235ea2:	48 8d 05 87 79 00 00 	lea    0x7987(%rip),%rax        # 23d830 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x58>
  235ea9:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  235eae:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  235eb5:	00 04 00 00 00 
  235eba:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  235ec1:	00 00 00 00 00 
  235ec6:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  235ecb:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  235ed2:	00 
  235ed3:	48 c7 84 24 a0 00 00 	movq   $0x4,0xa0(%rsp)
  235eda:	00 04 00 00 00 
  235edf:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  235ee4:	e8 d7 fd ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235ee9:	0f 0b                	ud2    
  235eeb:	cc                   	int3   
  235eec:	cc                   	int3   
  235eed:	cc                   	int3   
  235eee:	cc                   	int3   
  235eef:	cc                   	int3   

0000000000235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>:
  235ef0:	48 83 ec 68          	sub    $0x68,%rsp
  235ef4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235ef9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  235efe:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  235f03:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  235f08:	48 8b 05 51 7c 00 00 	mov    0x7c51(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  235f0f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  235f14:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  235f19:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  235f1e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  235f23:	48 8d 05 86 79 00 00 	lea    0x7986(%rip),%rax        # 23d8b0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xd8>
  235f2a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235f2f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  235f36:	00 00 
  235f38:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  235f3f:	00 00 
  235f41:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235f46:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  235f4b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  235f52:	00 00 
  235f54:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  235f59:	48 89 d6             	mov    %rdx,%rsi
  235f5c:	e8 5f fd ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235f61:	0f 0b                	ud2    
  235f63:	cc                   	int3   
  235f64:	cc                   	int3   
  235f65:	cc                   	int3   
  235f66:	cc                   	int3   
  235f67:	cc                   	int3   
  235f68:	cc                   	int3   
  235f69:	cc                   	int3   
  235f6a:	cc                   	int3   
  235f6b:	cc                   	int3   
  235f6c:	cc                   	int3   
  235f6d:	cc                   	int3   
  235f6e:	cc                   	int3   
  235f6f:	cc                   	int3   

0000000000235f70 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>:
  235f70:	48 83 ec 68          	sub    $0x68,%rsp
  235f74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235f79:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  235f7e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  235f83:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  235f88:	48 8b 05 d1 7b 00 00 	mov    0x7bd1(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  235f8f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  235f94:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  235f99:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  235f9e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  235fa3:	48 8d 05 26 79 00 00 	lea    0x7926(%rip),%rax        # 23d8d0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xf8>
  235faa:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  235faf:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  235fb6:	00 00 
  235fb8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  235fbf:	00 00 
  235fc1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  235fc6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  235fcb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  235fd2:	00 00 
  235fd4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  235fd9:	48 89 d6             	mov    %rdx,%rsi
  235fdc:	e8 df fc ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  235fe1:	0f 0b                	ud2    
  235fe3:	cc                   	int3   
  235fe4:	cc                   	int3   
  235fe5:	cc                   	int3   
  235fe6:	cc                   	int3   
  235fe7:	cc                   	int3   
  235fe8:	cc                   	int3   
  235fe9:	cc                   	int3   
  235fea:	cc                   	int3   
  235feb:	cc                   	int3   
  235fec:	cc                   	int3   
  235fed:	cc                   	int3   
  235fee:	cc                   	int3   
  235fef:	cc                   	int3   

0000000000235ff0 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>:
  235ff0:	48 83 ec 68          	sub    $0x68,%rsp
  235ff4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  235ff9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  235ffe:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  236003:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  236008:	48 8b 05 51 7b 00 00 	mov    0x7b51(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23600f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  236014:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  236019:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23601e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  236023:	48 8d 05 c6 78 00 00 	lea    0x78c6(%rip),%rax        # 23d8f0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x118>
  23602a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  23602f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  236036:	00 00 
  236038:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  23603f:	00 00 
  236041:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  236046:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23604b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  236052:	00 00 
  236054:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  236059:	48 89 d6             	mov    %rdx,%rsi
  23605c:	e8 5f fc ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  236061:	0f 0b                	ud2    
  236063:	cc                   	int3   
  236064:	cc                   	int3   
  236065:	cc                   	int3   
  236066:	cc                   	int3   
  236067:	cc                   	int3   
  236068:	cc                   	int3   
  236069:	cc                   	int3   
  23606a:	cc                   	int3   
  23606b:	cc                   	int3   
  23606c:	cc                   	int3   
  23606d:	cc                   	int3   
  23606e:	cc                   	int3   
  23606f:	cc                   	int3   

0000000000236070 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE>:
  236070:	41 57                	push   %r15
  236072:	41 56                	push   %r14
  236074:	53                   	push   %rbx
  236075:	48 83 ec 20          	sub    $0x20,%rsp
  236079:	48 89 f3             	mov    %rsi,%rbx
  23607c:	49 89 fe             	mov    %rdi,%r14
  23607f:	4c 8d 7f 08          	lea    0x8(%rdi),%r15
  236083:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  236087:	48 8b 46 28          	mov    0x28(%rsi),%rax
  23608b:	48 8d 35 85 e8 fc ff 	lea    -0x3177b(%rip),%rsi        # 204917 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x373>
  236092:	ba 06 00 00 00       	mov    $0x6,%edx
  236097:	ff 50 18             	callq  *0x18(%rax)
  23609a:	0f b6 c0             	movzbl %al,%eax
  23609d:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  2360a2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2360a7:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  2360ac:	48 8d 35 6a e8 fc ff 	lea    -0x31796(%rip),%rsi        # 20491d <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x379>
  2360b3:	4c 8d 05 56 78 00 00 	lea    0x7856(%rip),%r8        # 23d910 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x138>
  2360ba:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  2360bf:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  2360c4:	ba 05 00 00 00       	mov    $0x5,%edx
  2360c9:	48 89 df             	mov    %rbx,%rdi
  2360cc:	e8 bf f1 ff ff       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2360d1:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
  2360d6:	48 8d 35 45 e8 fc ff 	lea    -0x317bb(%rip),%rsi        # 204922 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x37e>
  2360dd:	4c 8d 05 4c 78 00 00 	lea    0x784c(%rip),%r8        # 23d930 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x158>
  2360e4:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  2360e9:	ba 06 00 00 00       	mov    $0x6,%edx
  2360ee:	48 89 df             	mov    %rbx,%rdi
  2360f1:	e8 9a f1 ff ff       	callq  235290 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2360f6:	80 7c 24 19 00       	cmpb   $0x0,0x19(%rsp)
  2360fb:	8a 44 24 18          	mov    0x18(%rsp),%al
  2360ff:	74 3e                	je     23613f <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcf>
  236101:	84 c0                	test   %al,%al
  236103:	b0 01                	mov    $0x1,%al
  236105:	75 38                	jne    23613f <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcf>
  236107:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23610c:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  236110:	75 16                	jne    236128 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xb8>
  236112:	48 8b 78 20          	mov    0x20(%rax),%rdi
  236116:	48 8b 40 28          	mov    0x28(%rax),%rax
  23611a:	48 8d 35 75 e3 fc ff 	lea    -0x31c8b(%rip),%rsi        # 204496 <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  236121:	ba 02 00 00 00       	mov    $0x2,%edx
  236126:	eb 14                	jmp    23613c <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcc>
  236128:	48 8b 78 20          	mov    0x20(%rax),%rdi
  23612c:	48 8b 40 28          	mov    0x28(%rax),%rax
  236130:	48 8d 35 5e e3 fc ff 	lea    -0x31ca2(%rip),%rsi        # 204495 <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  236137:	ba 01 00 00 00       	mov    $0x1,%edx
  23613c:	ff 50 18             	callq  *0x18(%rax)
  23613f:	48 83 c4 20          	add    $0x20,%rsp
  236143:	5b                   	pop    %rbx
  236144:	41 5e                	pop    %r14
  236146:	41 5f                	pop    %r15
  236148:	c3                   	retq   
  236149:	cc                   	int3   
  23614a:	cc                   	int3   
  23614b:	cc                   	int3   
  23614c:	cc                   	int3   
  23614d:	cc                   	int3   
  23614e:	cc                   	int3   
  23614f:	cc                   	int3   

0000000000236150 <_ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h194858f334be382dE>:
  236150:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  236154:	48 8b 46 28          	mov    0x28(%rsi),%rax
  236158:	48 8b 40 18          	mov    0x18(%rax),%rax
  23615c:	48 8d 35 c5 e7 fc ff 	lea    -0x3183b(%rip),%rsi        # 204928 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x384>
  236163:	ba 0b 00 00 00       	mov    $0xb,%edx
  236168:	ff e0                	jmpq   *%rax
  23616a:	cc                   	int3   
  23616b:	cc                   	int3   
  23616c:	cc                   	int3   
  23616d:	cc                   	int3   
  23616e:	cc                   	int3   
  23616f:	cc                   	int3   

0000000000236170 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h92a18e41e7a79e49E>:
  236170:	48 83 ec 68          	sub    $0x68,%rsp
  236174:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  236179:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23617e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  236183:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  236188:	48 8b 05 d1 79 00 00 	mov    0x79d1(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23618f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  236194:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  236199:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23619e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2361a3:	48 8d 05 a6 77 00 00 	lea    0x77a6(%rip),%rax        # 23d950 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x178>
  2361aa:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2361af:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  2361b6:	00 00 
  2361b8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  2361bf:	00 00 
  2361c1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2361c6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2361cb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  2361d2:	00 00 
  2361d4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2361d9:	48 89 d6             	mov    %rdx,%rsi
  2361dc:	e8 df fa ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2361e1:	0f 0b                	ud2    
  2361e3:	cc                   	int3   
  2361e4:	cc                   	int3   
  2361e5:	cc                   	int3   
  2361e6:	cc                   	int3   
  2361e7:	cc                   	int3   
  2361e8:	cc                   	int3   
  2361e9:	cc                   	int3   
  2361ea:	cc                   	int3   
  2361eb:	cc                   	int3   
  2361ec:	cc                   	int3   
  2361ed:	cc                   	int3   
  2361ee:	cc                   	int3   
  2361ef:	cc                   	int3   

00000000002361f0 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h12e93e433f98118dE>:
  2361f0:	48 b8 25 61 0f d8 19 	movabs $0x254ed619d80f6125,%rax
  2361f7:	d6 4e 25 
  2361fa:	c3                   	retq   
  2361fb:	cc                   	int3   
  2361fc:	cc                   	int3   
  2361fd:	cc                   	int3   
  2361fe:	cc                   	int3   
  2361ff:	cc                   	int3   

0000000000236200 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>:
  236200:	41 57                	push   %r15
  236202:	41 56                	push   %r14
  236204:	41 55                	push   %r13
  236206:	41 54                	push   %r12
  236208:	53                   	push   %rbx
  236209:	48 83 ec 70          	sub    $0x70,%rsp
  23620d:	49 89 ff             	mov    %rdi,%r15
  236210:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  236214:	4c 8b 76 28          	mov    0x28(%rsi),%r14
  236218:	48 8d 35 55 e7 fc ff 	lea    -0x318ab(%rip),%rsi        # 204974 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3d0>
  23621f:	ba 0c 00 00 00       	mov    $0xc,%edx
  236224:	4c 89 e7             	mov    %r12,%rdi
  236227:	41 ff 56 18          	callq  *0x18(%r14)
  23622b:	b3 01                	mov    $0x1,%bl
  23622d:	84 c0                	test   %al,%al
  23622f:	0f 85 18 01 00 00    	jne    23634d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  236235:	49 8b 47 10          	mov    0x10(%r15),%rax
  236239:	48 85 c0             	test   %rax,%rax
  23623c:	74 18                	je     236256 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x56>
  23623e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  236243:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  236248:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23624d:	48 8d 05 fc 29 00 00 	lea    0x29fc(%rip),%rax        # 238c50 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>
  236254:	eb 32                	jmp    236288 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x88>
  236256:	4d 8b 2f             	mov    (%r15),%r13
  236259:	49 8b 47 08          	mov    0x8(%r15),%rax
  23625d:	4c 89 ef             	mov    %r13,%rdi
  236260:	ff 50 18             	callq  *0x18(%rax)
  236263:	48 b9 f4 bc c7 ec 1e 	movabs $0x7ef2a91eecc7bcf4,%rcx
  23626a:	a9 f2 7e 
  23626d:	48 39 c8             	cmp    %rcx,%rax
  236270:	75 60                	jne    2362d2 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0xd2>
  236272:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  236277:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  23627c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  236281:	48 8d 05 28 2a 00 00 	lea    0x2a28(%rip),%rax        # 238cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>
  236288:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  23628d:	48 8d 05 ec 76 00 00 	lea    0x76ec(%rip),%rax        # 23d980 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1a8>
  236294:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  236299:	48 c7 44 24 18 02 00 	movq   $0x2,0x18(%rsp)
  2362a0:	00 00 
  2362a2:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  2362a9:	00 00 
  2362ab:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  2362b0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2362b5:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2362bc:	00 00 
  2362be:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  2362c3:	4c 89 e7             	mov    %r12,%rdi
  2362c6:	4c 89 f6             	mov    %r14,%rsi
  2362c9:	e8 02 12 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  2362ce:	84 c0                	test   %al,%al
  2362d0:	75 7b                	jne    23634d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  2362d2:	49 8b 47 18          	mov    0x18(%r15),%rax
  2362d6:	48 8d 48 10          	lea    0x10(%rax),%rcx
  2362da:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2362df:	48 83 c0 14          	add    $0x14,%rax
  2362e3:	48 8d 15 e6 29 00 00 	lea    0x29e6(%rip),%rdx        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  2362ea:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  2362ef:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  2362f4:	48 8b 0d bd 78 00 00 	mov    0x78bd(%rip),%rcx        # 23dbb8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  2362fb:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  236300:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  236305:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  23630a:	48 8d 05 a7 77 00 00 	lea    0x77a7(%rip),%rax        # 23dab8 <anon.675a8c007e0eb0dbd1338020c4dcf401.6.llvm.17324098355855342093>
  236311:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  236316:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
  23631d:	00 00 
  23631f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  236326:	00 00 
  236328:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  23632d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  236332:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
  236339:	00 00 
  23633b:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  236340:	4c 89 e7             	mov    %r12,%rdi
  236343:	4c 89 f6             	mov    %r14,%rsi
  236346:	e8 85 11 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  23634b:	89 c3                	mov    %eax,%ebx
  23634d:	89 d8                	mov    %ebx,%eax
  23634f:	48 83 c4 70          	add    $0x70,%rsp
  236353:	5b                   	pop    %rbx
  236354:	41 5c                	pop    %r12
  236356:	41 5d                	pop    %r13
  236358:	41 5e                	pop    %r14
  23635a:	41 5f                	pop    %r15
  23635c:	c3                   	retq   
  23635d:	cc                   	int3   
  23635e:	cc                   	int3   
  23635f:	cc                   	int3   

0000000000236360 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>:
  236360:	41 57                	push   %r15
  236362:	41 56                	push   %r14
  236364:	53                   	push   %rbx
  236365:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  23636c:	49 89 f7             	mov    %rsi,%r15
  23636f:	49 89 fe             	mov    %rdi,%r14
  236372:	8b 46 30             	mov    0x30(%rsi),%eax
  236375:	a8 10                	test   $0x10,%al
  236377:	0f 85 d3 00 00 00    	jne    236450 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xf0>
  23637d:	a8 20                	test   $0x20,%al
  23637f:	0f 85 19 01 00 00    	jne    23649e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x13e>
  236385:	49 8b 36             	mov    (%r14),%rsi
  236388:	b8 27 00 00 00       	mov    $0x27,%eax
  23638d:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  236394:	0f 82 89 01 00 00    	jb     236523 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1c3>
  23639a:	bb 27 00 00 00       	mov    $0x27,%ebx
  23639f:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  2363a6:	c5 6d 34 
  2363a9:	4c 8d 0d 98 df fc ff 	lea    -0x32068(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2363b0:	48 89 f0             	mov    %rsi,%rax
  2363b3:	49 f7 e0             	mul    %r8
  2363b6:	48 c1 ea 0b          	shr    $0xb,%rdx
  2363ba:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  2363c0:	89 f1                	mov    %esi,%ecx
  2363c2:	29 c1                	sub    %eax,%ecx
  2363c4:	0f b7 c1             	movzwl %cx,%eax
  2363c7:	c1 e8 02             	shr    $0x2,%eax
  2363ca:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  2363d0:	c1 ef 11             	shr    $0x11,%edi
  2363d3:	6b c7 64             	imul   $0x64,%edi,%eax
  2363d6:	29 c1                	sub    %eax,%ecx
  2363d8:	0f b7 c9             	movzwl %cx,%ecx
  2363db:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  2363df:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  2363e4:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  2363e9:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  2363ee:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  2363f3:	48 89 c3             	mov    %rax,%rbx
  2363f6:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  2363fd:	48 89 d6             	mov    %rdx,%rsi
  236400:	77 ae                	ja     2363b0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x50>
  236402:	48 83 fa 63          	cmp    $0x63,%rdx
  236406:	7e 2e                	jle    236436 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  236408:	0f b7 ca             	movzwl %dx,%ecx
  23640b:	c1 e9 02             	shr    $0x2,%ecx
  23640e:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  236414:	c1 e9 11             	shr    $0x11,%ecx
  236417:	6b f1 64             	imul   $0x64,%ecx,%esi
  23641a:	29 f2                	sub    %esi,%edx
  23641c:	0f b7 d2             	movzwl %dx,%edx
  23641f:	48 8d 35 22 df fc ff 	lea    -0x320de(%rip),%rsi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236426:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  23642a:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  23642f:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  236433:	48 89 ca             	mov    %rcx,%rdx
  236436:	48 83 fa 0a          	cmp    $0xa,%rdx
  23643a:	0f 8d f5 00 00 00    	jge    236535 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1d5>
  236440:	80 c2 30             	add    $0x30,%dl
  236443:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  236447:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  23644b:	e9 f9 00 00 00       	jmpq   236549 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1e9>
  236450:	49 8b 06             	mov    (%r14),%rax
  236453:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  23645a:	00 
  23645b:	45 31 c9             	xor    %r9d,%r9d
  23645e:	b9 30 00 00 00       	mov    $0x30,%ecx
  236463:	48 89 c2             	mov    %rax,%rdx
  236466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23646d:	00 00 00 
  236470:	48 c1 ea 04          	shr    $0x4,%rdx
  236474:	89 c3                	mov    %eax,%ebx
  236476:	80 e3 0f             	and    $0xf,%bl
  236479:	80 fb 0a             	cmp    $0xa,%bl
  23647c:	be 57 00 00 00       	mov    $0x57,%esi
  236481:	0f 42 f1             	cmovb  %ecx,%esi
  236484:	40 00 de             	add    %bl,%sil
  236487:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  23648b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23648f:	49 83 c1 01          	add    $0x1,%r9
  236493:	48 83 f8 0f          	cmp    $0xf,%rax
  236497:	48 89 d0             	mov    %rdx,%rax
  23649a:	77 d4                	ja     236470 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x110>
  23649c:	eb 4e                	jmp    2364ec <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x18c>
  23649e:	49 8b 06             	mov    (%r14),%rax
  2364a1:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  2364a8:	00 
  2364a9:	45 31 c9             	xor    %r9d,%r9d
  2364ac:	b9 30 00 00 00       	mov    $0x30,%ecx
  2364b1:	48 89 c2             	mov    %rax,%rdx
  2364b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2364bb:	00 00 00 
  2364be:	66 90                	xchg   %ax,%ax
  2364c0:	48 c1 ea 04          	shr    $0x4,%rdx
  2364c4:	89 c3                	mov    %eax,%ebx
  2364c6:	80 e3 0f             	and    $0xf,%bl
  2364c9:	80 fb 0a             	cmp    $0xa,%bl
  2364cc:	be 37 00 00 00       	mov    $0x37,%esi
  2364d1:	0f 42 f1             	cmovb  %ecx,%esi
  2364d4:	40 00 de             	add    %bl,%sil
  2364d7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  2364db:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  2364df:	49 83 c1 01          	add    $0x1,%r9
  2364e3:	48 83 f8 0f          	cmp    $0xf,%rax
  2364e7:	48 89 d0             	mov    %rdx,%rax
  2364ea:	77 d4                	ja     2364c0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x160>
  2364ec:	bf 80 00 00 00       	mov    $0x80,%edi
  2364f1:	4c 29 cf             	sub    %r9,%rdi
  2364f4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  2364fb:	0f 83 2c 02 00 00    	jae    23672d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  236501:	48 8d 15 3e de fc ff 	lea    -0x321c2(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  236508:	b9 02 00 00 00       	mov    $0x2,%ecx
  23650d:	4c 89 ff             	mov    %r15,%rdi
  236510:	be 01 00 00 00       	mov    $0x1,%esi
  236515:	e8 f6 11 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  23651a:	84 c0                	test   %al,%al
  23651c:	74 56                	je     236574 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x214>
  23651e:	e9 a4 02 00 00       	jmpq   2367c7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  236523:	48 89 f2             	mov    %rsi,%rdx
  236526:	48 83 fa 63          	cmp    $0x63,%rdx
  23652a:	0f 8f d8 fe ff ff    	jg     236408 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xa8>
  236530:	e9 01 ff ff ff       	jmpq   236436 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  236535:	48 8d 0d 0c de fc ff 	lea    -0x321f4(%rip),%rcx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  23653c:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  236540:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  236545:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  236549:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  23654d:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236553:	49 29 c1             	sub    %rax,%r9
  236556:	48 8d 15 3d ea fc ff 	lea    -0x315c3(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  23655d:	4c 89 ff             	mov    %r15,%rdi
  236560:	be 01 00 00 00       	mov    $0x1,%esi
  236565:	31 c9                	xor    %ecx,%ecx
  236567:	e8 a4 11 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  23656c:	84 c0                	test   %al,%al
  23656e:	0f 85 53 02 00 00    	jne    2367c7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  236574:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  236578:	49 8b 77 28          	mov    0x28(%r15),%rsi
  23657c:	48 8d 05 1d 74 00 00 	lea    0x741d(%rip),%rax        # 23d9a0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1c8>
  236583:	48 89 04 24          	mov    %rax,(%rsp)
  236587:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  23658e:	00 00 
  236590:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  236597:	00 00 
  236599:	48 8d 05 e8 e3 fc ff 	lea    -0x31c18(%rip),%rax        # 204988 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3e4>
  2365a0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2365a5:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  2365ac:	00 00 
  2365ae:	48 89 e2             	mov    %rsp,%rdx
  2365b1:	e8 1a 0f 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  2365b6:	84 c0                	test   %al,%al
  2365b8:	0f 85 09 02 00 00    	jne    2367c7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  2365be:	41 8b 47 30          	mov    0x30(%r15),%eax
  2365c2:	a8 10                	test   $0x10,%al
  2365c4:	0f 85 8d 00 00 00    	jne    236657 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2f7>
  2365ca:	a8 20                	test   $0x20,%al
  2365cc:	0f 85 07 01 00 00    	jne    2366d9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x379>
  2365d2:	49 8b 76 08          	mov    0x8(%r14),%rsi
  2365d6:	b8 27 00 00 00       	mov    $0x27,%eax
  2365db:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  2365e2:	0f 82 58 01 00 00    	jb     236740 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e0>
  2365e8:	bb 27 00 00 00       	mov    $0x27,%ebx
  2365ed:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  2365f4:	c5 6d 34 
  2365f7:	4c 8d 0d 4a dd fc ff 	lea    -0x322b6(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2365fe:	66 90                	xchg   %ax,%ax
  236600:	48 89 f0             	mov    %rsi,%rax
  236603:	49 f7 e0             	mul    %r8
  236606:	48 c1 ea 0b          	shr    $0xb,%rdx
  23660a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  236610:	89 f1                	mov    %esi,%ecx
  236612:	29 c1                	sub    %eax,%ecx
  236614:	0f b7 c1             	movzwl %cx,%eax
  236617:	c1 e8 02             	shr    $0x2,%eax
  23661a:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  236620:	c1 ef 11             	shr    $0x11,%edi
  236623:	6b c7 64             	imul   $0x64,%edi,%eax
  236626:	29 c1                	sub    %eax,%ecx
  236628:	0f b7 c9             	movzwl %cx,%ecx
  23662b:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  23662f:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  236634:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  236639:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  23663e:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  236643:	48 89 c3             	mov    %rax,%rbx
  236646:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  23664d:	48 89 d6             	mov    %rdx,%rsi
  236650:	77 ae                	ja     236600 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2a0>
  236652:	e9 ec 00 00 00       	jmpq   236743 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e3>
  236657:	49 8b 46 08          	mov    0x8(%r14),%rax
  23665b:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  236662:	00 
  236663:	45 31 c9             	xor    %r9d,%r9d
  236666:	b9 30 00 00 00       	mov    $0x30,%ecx
  23666b:	48 89 c2             	mov    %rax,%rdx
  23666e:	66 90                	xchg   %ax,%ax
  236670:	48 c1 ea 04          	shr    $0x4,%rdx
  236674:	89 c3                	mov    %eax,%ebx
  236676:	80 e3 0f             	and    $0xf,%bl
  236679:	80 fb 0a             	cmp    $0xa,%bl
  23667c:	be 57 00 00 00       	mov    $0x57,%esi
  236681:	0f 42 f1             	cmovb  %ecx,%esi
  236684:	40 00 de             	add    %bl,%sil
  236687:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  23668b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23668f:	49 83 c1 01          	add    $0x1,%r9
  236693:	48 83 f8 0f          	cmp    $0xf,%rax
  236697:	48 89 d0             	mov    %rdx,%rax
  23669a:	77 d4                	ja     236670 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x310>
  23669c:	bf 80 00 00 00       	mov    $0x80,%edi
  2366a1:	4c 29 cf             	sub    %r9,%rdi
  2366a4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  2366ab:	0f 83 7c 00 00 00    	jae    23672d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  2366b1:	48 8d 15 8e dc fc ff 	lea    -0x32372(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  2366b8:	b9 02 00 00 00       	mov    $0x2,%ecx
  2366bd:	4c 89 ff             	mov    %r15,%rdi
  2366c0:	be 01 00 00 00       	mov    $0x1,%esi
  2366c5:	e8 46 10 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2366ca:	84 c0                	test   %al,%al
  2366cc:	0f 85 f5 00 00 00    	jne    2367c7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  2366d2:	31 db                	xor    %ebx,%ebx
  2366d4:	e9 f0 00 00 00       	jmpq   2367c9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  2366d9:	49 8b 46 08          	mov    0x8(%r14),%rax
  2366dd:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  2366e4:	00 
  2366e5:	45 31 c9             	xor    %r9d,%r9d
  2366e8:	b9 30 00 00 00       	mov    $0x30,%ecx
  2366ed:	48 89 c2             	mov    %rax,%rdx
  2366f0:	48 c1 ea 04          	shr    $0x4,%rdx
  2366f4:	89 c3                	mov    %eax,%ebx
  2366f6:	80 e3 0f             	and    $0xf,%bl
  2366f9:	80 fb 0a             	cmp    $0xa,%bl
  2366fc:	be 37 00 00 00       	mov    $0x37,%esi
  236701:	0f 42 f1             	cmovb  %ecx,%esi
  236704:	40 00 de             	add    %bl,%sil
  236707:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  23670b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23670f:	49 83 c1 01          	add    $0x1,%r9
  236713:	48 83 f8 0f          	cmp    $0xf,%rax
  236717:	48 89 d0             	mov    %rdx,%rax
  23671a:	77 d4                	ja     2366f0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x390>
  23671c:	bf 80 00 00 00       	mov    $0x80,%edi
  236721:	4c 29 cf             	sub    %r9,%rdi
  236724:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  23672b:	72 84                	jb     2366b1 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x351>
  23672d:	48 8d 15 dc 6f 00 00 	lea    0x6fdc(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  236734:	be 80 00 00 00       	mov    $0x80,%esi
  236739:	e8 b2 f7 ff ff       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  23673e:	0f 0b                	ud2    
  236740:	48 89 f2             	mov    %rsi,%rdx
  236743:	48 83 fa 63          	cmp    $0x63,%rdx
  236747:	7e 2e                	jle    236777 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x417>
  236749:	0f b7 ca             	movzwl %dx,%ecx
  23674c:	c1 e9 02             	shr    $0x2,%ecx
  23674f:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  236755:	c1 e9 11             	shr    $0x11,%ecx
  236758:	6b f1 64             	imul   $0x64,%ecx,%esi
  23675b:	29 f2                	sub    %esi,%edx
  23675d:	0f b7 d2             	movzwl %dx,%edx
  236760:	48 8d 35 e1 db fc ff 	lea    -0x3241f(%rip),%rsi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236767:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  23676b:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  236770:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  236774:	48 89 ca             	mov    %rcx,%rdx
  236777:	48 83 fa 0a          	cmp    $0xa,%rdx
  23677b:	7d 0d                	jge    23678a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x42a>
  23677d:	80 c2 30             	add    $0x30,%dl
  236780:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  236784:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  236788:	eb 14                	jmp    23679e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x43e>
  23678a:	48 8d 0d b7 db fc ff 	lea    -0x32449(%rip),%rcx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236791:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  236795:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  23679a:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  23679e:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  2367a2:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  2367a8:	49 29 c1             	sub    %rax,%r9
  2367ab:	48 8d 15 e8 e7 fc ff 	lea    -0x31818(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  2367b2:	31 db                	xor    %ebx,%ebx
  2367b4:	4c 89 ff             	mov    %r15,%rdi
  2367b7:	be 01 00 00 00       	mov    $0x1,%esi
  2367bc:	31 c9                	xor    %ecx,%ecx
  2367be:	e8 4d 0f 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2367c3:	84 c0                	test   %al,%al
  2367c5:	74 02                	je     2367c9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  2367c7:	b3 01                	mov    $0x1,%bl
  2367c9:	89 d8                	mov    %ebx,%eax
  2367cb:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  2367d2:	5b                   	pop    %rbx
  2367d3:	41 5e                	pop    %r14
  2367d5:	41 5f                	pop    %r15
  2367d7:	c3                   	retq   
  2367d8:	cc                   	int3   
  2367d9:	cc                   	int3   
  2367da:	cc                   	int3   
  2367db:	cc                   	int3   
  2367dc:	cc                   	int3   
  2367dd:	cc                   	int3   
  2367de:	cc                   	int3   
  2367df:	cc                   	int3   

00000000002367e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>:
  2367e0:	41 57                	push   %r15
  2367e2:	41 56                	push   %r14
  2367e4:	53                   	push   %rbx
  2367e5:	48 85 d2             	test   %rdx,%rdx
  2367e8:	74 70                	je     23685a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  2367ea:	41 89 fb             	mov    %edi,%r11d
  2367ed:	41 c1 eb 08          	shr    $0x8,%r11d
  2367f1:	4c 8d 34 56          	lea    (%rsi,%rdx,2),%r14
  2367f5:	45 31 ff             	xor    %r15d,%r15d
  2367f8:	48 89 f2             	mov    %rsi,%rdx
  2367fb:	0f b6 5e 01          	movzbl 0x1(%rsi),%ebx
  2367ff:	48 83 c6 02          	add    $0x2,%rsi
  236803:	4d 8d 14 1f          	lea    (%r15,%rbx,1),%r10
  236807:	44 38 1a             	cmp    %r11b,(%rdx)
  23680a:	75 44                	jne    236850 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x70>
  23680c:	4d 39 fa             	cmp    %r15,%r10
  23680f:	0f 82 c6 00 00 00    	jb     2368db <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xfb>
  236815:	4d 39 c2             	cmp    %r8,%r10
  236818:	0f 87 d1 00 00 00    	ja     2368ef <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x10f>
  23681e:	49 01 cf             	add    %rcx,%r15
  236821:	31 d2                	xor    %edx,%edx
  236823:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23682a:	00 00 00 
  23682d:	0f 1f 00             	nopl   (%rax)
  236830:	48 39 d3             	cmp    %rdx,%rbx
  236833:	74 1d                	je     236852 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x72>
  236835:	48 8d 42 01          	lea    0x1(%rdx),%rax
  236839:	41 38 3c 17          	cmp    %dil,(%r15,%rdx,1)
  23683d:	48 89 c2             	mov    %rax,%rdx
  236840:	75 ee                	jne    236830 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x50>
  236842:	eb 6f                	jmp    2368b3 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd3>
  236844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23684b:	00 00 00 
  23684e:	66 90                	xchg   %ax,%ax
  236850:	77 08                	ja     23685a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  236852:	4d 89 d7             	mov    %r10,%r15
  236855:	4c 39 f6             	cmp    %r14,%rsi
  236858:	75 9e                	jne    2367f8 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x18>
  23685a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  23685f:	48 85 c9             	test   %rcx,%rcx
  236862:	74 53                	je     2368b7 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd7>
  236864:	4c 01 c9             	add    %r9,%rcx
  236867:	0f b7 d7             	movzwl %di,%edx
  23686a:	b0 01                	mov    $0x1,%al
  23686c:	0f 1f 40 00          	nopl   0x0(%rax)
  236870:	49 8d 79 01          	lea    0x1(%r9),%rdi
  236874:	41 0f b6 31          	movzbl (%r9),%esi
  236878:	40 84 f6             	test   %sil,%sil
  23687b:	78 13                	js     236890 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xb0>
  23687d:	49 89 f9             	mov    %rdi,%r9
  236880:	29 f2                	sub    %esi,%edx
  236882:	79 26                	jns    2368aa <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xca>
  236884:	eb 33                	jmp    2368b9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  236886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23688d:	00 00 00 
  236890:	48 39 cf             	cmp    %rcx,%rdi
  236893:	74 2c                	je     2368c1 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xe1>
  236895:	41 0f b6 79 01       	movzbl 0x1(%r9),%edi
  23689a:	49 83 c1 02          	add    $0x2,%r9
  23689e:	83 e6 7f             	and    $0x7f,%esi
  2368a1:	c1 e6 08             	shl    $0x8,%esi
  2368a4:	09 fe                	or     %edi,%esi
  2368a6:	29 f2                	sub    %esi,%edx
  2368a8:	78 0f                	js     2368b9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  2368aa:	34 01                	xor    $0x1,%al
  2368ac:	49 39 c9             	cmp    %rcx,%r9
  2368af:	75 bf                	jne    236870 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x90>
  2368b1:	eb 06                	jmp    2368b9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  2368b3:	31 c0                	xor    %eax,%eax
  2368b5:	eb 02                	jmp    2368b9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  2368b7:	b0 01                	mov    $0x1,%al
  2368b9:	24 01                	and    $0x1,%al
  2368bb:	5b                   	pop    %rbx
  2368bc:	41 5e                	pop    %r14
  2368be:	41 5f                	pop    %r15
  2368c0:	c3                   	retq   
  2368c1:	48 8d 3d c0 e0 fc ff 	lea    -0x31f40(%rip),%rdi        # 204988 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3e4>
  2368c8:	48 8d 15 f9 70 00 00 	lea    0x70f9(%rip),%rdx        # 23d9c8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1f0>
  2368cf:	be 2b 00 00 00       	mov    $0x2b,%esi
  2368d4:	e8 17 f3 ff ff       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2368d9:	0f 0b                	ud2    
  2368db:	48 8d 15 ce 70 00 00 	lea    0x70ce(%rip),%rdx        # 23d9b0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1d8>
  2368e2:	4c 89 ff             	mov    %r15,%rdi
  2368e5:	4c 89 d6             	mov    %r10,%rsi
  2368e8:	e8 03 f7 ff ff       	callq  235ff0 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  2368ed:	0f 0b                	ud2    
  2368ef:	48 8d 15 ba 70 00 00 	lea    0x70ba(%rip),%rdx        # 23d9b0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1d8>
  2368f6:	4c 89 d7             	mov    %r10,%rdi
  2368f9:	4c 89 c6             	mov    %r8,%rsi
  2368fc:	e8 6f f6 ff ff       	callq  235f70 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  236901:	0f 0b                	ud2    
  236903:	cc                   	int3   
  236904:	cc                   	int3   
  236905:	cc                   	int3   
  236906:	cc                   	int3   
  236907:	cc                   	int3   
  236908:	cc                   	int3   
  236909:	cc                   	int3   
  23690a:	cc                   	int3   
  23690b:	cc                   	int3   
  23690c:	cc                   	int3   
  23690d:	cc                   	int3   
  23690e:	cc                   	int3   
  23690f:	cc                   	int3   

0000000000236910 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>:
  236910:	41 57                	push   %r15
  236912:	41 56                	push   %r14
  236914:	53                   	push   %rbx
  236915:	41 89 f8             	mov    %edi,%r8d
  236918:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
  23691c:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  236920:	48 29 f7             	sub    %rsi,%rdi
  236923:	74 39                	je     23695e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  236925:	48 39 d7             	cmp    %rdx,%rdi
  236928:	48 0f 47 fa          	cmova  %rdx,%rdi
  23692c:	48 85 ff             	test   %rdi,%rdi
  23692f:	74 2d                	je     23695e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  236931:	31 c9                	xor    %ecx,%ecx
  236933:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23693a:	00 00 00 
  23693d:	0f 1f 00             	nopl   (%rax)
  236940:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  236944:	0f 84 c4 00 00 00    	je     236a0e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xfe>
  23694a:	48 83 c1 01          	add    $0x1,%rcx
  23694e:	48 39 cf             	cmp    %rcx,%rdi
  236951:	75 ed                	jne    236940 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x30>
  236953:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  236957:	4c 39 cf             	cmp    %r9,%rdi
  23695a:	76 08                	jbe    236964 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x54>
  23695c:	eb 72                	jmp    2369d0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc0>
  23695e:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  236962:	31 ff                	xor    %edi,%edi
  236964:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  23696b:	fe fe fe 
  23696e:	49 be 80 80 80 80 80 	movabs $0x8080808080808080,%r14
  236975:	80 80 80 
  236978:	45 0f b6 d8          	movzbl %r8b,%r11d
  23697c:	49 bf 01 01 01 01 01 	movabs $0x101010101010101,%r15
  236983:	01 01 01 
  236986:	4d 0f af fb          	imul   %r11,%r15
  23698a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  236990:	48 8b 04 3e          	mov    (%rsi,%rdi,1),%rax
  236994:	4c 31 f8             	xor    %r15,%rax
  236997:	48 89 c3             	mov    %rax,%rbx
  23699a:	48 f7 d3             	not    %rbx
  23699d:	4c 01 d0             	add    %r10,%rax
  2369a0:	4c 21 f3             	and    %r14,%rbx
  2369a3:	48 21 c3             	and    %rax,%rbx
  2369a6:	48 8b 4c 3e 08       	mov    0x8(%rsi,%rdi,1),%rcx
  2369ab:	4c 31 f9             	xor    %r15,%rcx
  2369ae:	48 89 c8             	mov    %rcx,%rax
  2369b1:	48 f7 d0             	not    %rax
  2369b4:	4c 01 d1             	add    %r10,%rcx
  2369b7:	4c 21 f0             	and    %r14,%rax
  2369ba:	48 21 c8             	and    %rcx,%rax
  2369bd:	48 09 d8             	or     %rbx,%rax
  2369c0:	75 09                	jne    2369cb <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xbb>
  2369c2:	48 83 c7 10          	add    $0x10,%rdi
  2369c6:	4c 39 cf             	cmp    %r9,%rdi
  2369c9:	76 c5                	jbe    236990 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x80>
  2369cb:	48 39 d7             	cmp    %rdx,%rdi
  2369ce:	77 4c                	ja     236a1c <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x10c>
  2369d0:	48 39 d7             	cmp    %rdx,%rdi
  2369d3:	75 04                	jne    2369d9 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc9>
  2369d5:	31 c0                	xor    %eax,%eax
  2369d7:	eb 3a                	jmp    236a13 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  2369d9:	48 01 fe             	add    %rdi,%rsi
  2369dc:	48 29 fa             	sub    %rdi,%rdx
  2369df:	31 c0                	xor    %eax,%eax
  2369e1:	31 c9                	xor    %ecx,%ecx
  2369e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2369ea:	00 00 00 
  2369ed:	0f 1f 00             	nopl   (%rax)
  2369f0:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  2369f4:	74 0b                	je     236a01 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xf1>
  2369f6:	48 83 c1 01          	add    $0x1,%rcx
  2369fa:	48 39 ca             	cmp    %rcx,%rdx
  2369fd:	75 f1                	jne    2369f0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xe0>
  2369ff:	eb 12                	jmp    236a13 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  236a01:	48 01 cf             	add    %rcx,%rdi
  236a04:	b8 01 00 00 00       	mov    $0x1,%eax
  236a09:	48 89 f9             	mov    %rdi,%rcx
  236a0c:	eb 05                	jmp    236a13 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  236a0e:	b8 01 00 00 00       	mov    $0x1,%eax
  236a13:	48 89 ca             	mov    %rcx,%rdx
  236a16:	5b                   	pop    %rbx
  236a17:	41 5e                	pop    %r14
  236a19:	41 5f                	pop    %r15
  236a1b:	c3                   	retq   
  236a1c:	48 8d 05 bd 6f 00 00 	lea    0x6fbd(%rip),%rax        # 23d9e0 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522>
  236a23:	48 89 d6             	mov    %rdx,%rsi
  236a26:	48 89 c2             	mov    %rax,%rdx
  236a29:	e8 c2 f4 ff ff       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  236a2e:	0f 0b                	ud2    

0000000000236a30 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E>:
  236a30:	48 83 ec 28          	sub    $0x28,%rsp
  236a34:	0f b6 07             	movzbl (%rdi),%eax
  236a37:	48 83 f8 63          	cmp    $0x63,%rax
  236a3b:	76 2d                	jbe    236a6a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x3a>
  236a3d:	0f b6 c8             	movzbl %al,%ecx
  236a40:	8d 14 89             	lea    (%rcx,%rcx,4),%edx
  236a43:	8d 14 d1             	lea    (%rcx,%rdx,8),%edx
  236a46:	c1 ea 0c             	shr    $0xc,%edx
  236a49:	6b ca 64             	imul   $0x64,%edx,%ecx
  236a4c:	28 c8                	sub    %cl,%al
  236a4e:	0f b6 c0             	movzbl %al,%eax
  236a51:	48 8d 0d f0 d8 fc ff 	lea    -0x32710(%rip),%rcx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236a58:	0f b7 04 41          	movzwl (%rcx,%rax,2),%eax
  236a5c:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  236a61:	b9 24 00 00 00       	mov    $0x24,%ecx
  236a66:	89 d0                	mov    %edx,%eax
  236a68:	eb 09                	jmp    236a73 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x43>
  236a6a:	b9 26 00 00 00       	mov    $0x26,%ecx
  236a6f:	3c 0a                	cmp    $0xa,%al
  236a71:	73 08                	jae    236a7b <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x4b>
  236a73:	04 30                	add    $0x30,%al
  236a75:	88 44 0c 01          	mov    %al,0x1(%rsp,%rcx,1)
  236a79:	eb 15                	jmp    236a90 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x60>
  236a7b:	48 8d 0d c6 d8 fc ff 	lea    -0x3273a(%rip),%rcx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236a82:	0f b7 04 41          	movzwl (%rcx,%rax,2),%eax
  236a86:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  236a8b:	b9 25 00 00 00       	mov    $0x25,%ecx
  236a90:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  236a94:	49 83 c0 01          	add    $0x1,%r8
  236a98:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236a9e:	49 29 c9             	sub    %rcx,%r9
  236aa1:	48 8d 15 f2 e4 fc ff 	lea    -0x31b0e(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  236aa8:	48 89 f7             	mov    %rsi,%rdi
  236aab:	be 01 00 00 00       	mov    $0x1,%esi
  236ab0:	31 c9                	xor    %ecx,%ecx
  236ab2:	e8 59 0c 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  236ab7:	48 83 c4 28          	add    $0x28,%rsp
  236abb:	c3                   	retq   
  236abc:	cc                   	int3   
  236abd:	cc                   	int3   
  236abe:	cc                   	int3   
  236abf:	cc                   	int3   

0000000000236ac0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>:
  236ac0:	48 83 ec 28          	sub    $0x28,%rsp
  236ac4:	0f b7 07             	movzwl (%rdi),%eax
  236ac7:	b9 27 00 00 00       	mov    $0x27,%ecx
  236acc:	48 3d 10 27 00 00    	cmp    $0x2710,%rax
  236ad2:	73 1d                	jae    236af1 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x31>
  236ad4:	83 f8 63             	cmp    $0x63,%eax
  236ad7:	77 7a                	ja     236b53 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x93>
  236ad9:	48 83 f8 0a          	cmp    $0xa,%rax
  236add:	0f 8d a7 00 00 00    	jge    236b8a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xca>
  236ae3:	04 30                	add    $0x30,%al
  236ae5:	88 04 0c             	mov    %al,(%rsp,%rcx,1)
  236ae8:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  236aec:	e9 ad 00 00 00       	jmpq   236b9e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xde>
  236af1:	89 c1                	mov    %eax,%ecx
  236af3:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
  236af8:	48 0f af d0          	imul   %rax,%rdx
  236afc:	c1 e8 04             	shr    $0x4,%eax
  236aff:	69 c0 47 03 00 00    	imul   $0x347,%eax,%eax
  236b05:	c1 e8 13             	shr    $0x13,%eax
  236b08:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  236b0e:	29 c1                	sub    %eax,%ecx
  236b10:	0f b7 c1             	movzwl %cx,%eax
  236b13:	89 c1                	mov    %eax,%ecx
  236b15:	c1 e9 02             	shr    $0x2,%ecx
  236b18:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  236b1e:	c1 e9 11             	shr    $0x11,%ecx
  236b21:	6b f9 64             	imul   $0x64,%ecx,%edi
  236b24:	29 f8                	sub    %edi,%eax
  236b26:	0f b7 c0             	movzwl %ax,%eax
  236b29:	48 8d 3d 18 d8 fc ff 	lea    -0x327e8(%rip),%rdi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236b30:	0f b7 0c 4f          	movzwl (%rdi,%rcx,2),%ecx
  236b34:	66 89 4c 24 24       	mov    %cx,0x24(%rsp)
  236b39:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  236b3d:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  236b42:	48 c1 ea 2d          	shr    $0x2d,%rdx
  236b46:	b9 23 00 00 00       	mov    $0x23,%ecx
  236b4b:	48 89 d0             	mov    %rdx,%rax
  236b4e:	83 f8 63             	cmp    $0x63,%eax
  236b51:	76 86                	jbe    236ad9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x19>
  236b53:	89 c2                	mov    %eax,%edx
  236b55:	c1 ea 02             	shr    $0x2,%edx
  236b58:	69 d2 7b 14 00 00    	imul   $0x147b,%edx,%edx
  236b5e:	c1 ea 11             	shr    $0x11,%edx
  236b61:	6b fa 64             	imul   $0x64,%edx,%edi
  236b64:	29 f8                	sub    %edi,%eax
  236b66:	0f b7 c0             	movzwl %ax,%eax
  236b69:	48 8d 3d d8 d7 fc ff 	lea    -0x32828(%rip),%rdi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236b70:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  236b74:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  236b79:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236b7d:	48 89 d0             	mov    %rdx,%rax
  236b80:	48 83 f8 0a          	cmp    $0xa,%rax
  236b84:	0f 8c 59 ff ff ff    	jl     236ae3 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x23>
  236b8a:	48 8d 15 b7 d7 fc ff 	lea    -0x32849(%rip),%rdx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236b91:	0f b7 04 42          	movzwl (%rdx,%rax,2),%eax
  236b95:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  236b9a:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236b9e:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  236ba2:	49 83 c0 01          	add    $0x1,%r8
  236ba6:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236bac:	49 29 c9             	sub    %rcx,%r9
  236baf:	48 8d 15 e4 e3 fc ff 	lea    -0x31c1c(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  236bb6:	48 89 f7             	mov    %rsi,%rdi
  236bb9:	be 01 00 00 00       	mov    $0x1,%esi
  236bbe:	31 c9                	xor    %ecx,%ecx
  236bc0:	e8 4b 0b 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  236bc5:	48 83 c4 28          	add    $0x28,%rsp
  236bc9:	c3                   	retq   
  236bca:	cc                   	int3   
  236bcb:	cc                   	int3   
  236bcc:	cc                   	int3   
  236bcd:	cc                   	int3   
  236bce:	cc                   	int3   
  236bcf:	cc                   	int3   

0000000000236bd0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>:
  236bd0:	48 83 ec 28          	sub    $0x28,%rsp
  236bd4:	49 89 f2             	mov    %rsi,%r10
  236bd7:	44 8b 1f             	mov    (%rdi),%r11d
  236bda:	b9 27 00 00 00       	mov    $0x27,%ecx
  236bdf:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  236be6:	0f 82 bd 00 00 00    	jb     236ca9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xd9>
  236bec:	bf 27 00 00 00       	mov    $0x27,%edi
  236bf1:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  236bf8:	c5 6d 34 
  236bfb:	4c 8d 0d 46 d7 fc ff 	lea    -0x328ba(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236c02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  236c09:	00 00 00 
  236c0c:	0f 1f 40 00          	nopl   0x0(%rax)
  236c10:	4c 89 d8             	mov    %r11,%rax
  236c13:	49 f7 e0             	mul    %r8
  236c16:	48 c1 ea 0b          	shr    $0xb,%rdx
  236c1a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  236c20:	44 89 d9             	mov    %r11d,%ecx
  236c23:	29 c1                	sub    %eax,%ecx
  236c25:	0f b7 c1             	movzwl %cx,%eax
  236c28:	c1 e8 02             	shr    $0x2,%eax
  236c2b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236c31:	c1 e8 11             	shr    $0x11,%eax
  236c34:	6b f0 64             	imul   $0x64,%eax,%esi
  236c37:	29 f1                	sub    %esi,%ecx
  236c39:	0f b7 f1             	movzwl %cx,%esi
  236c3c:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  236c40:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  236c45:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  236c4a:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  236c4f:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  236c54:	48 89 cf             	mov    %rcx,%rdi
  236c57:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  236c5e:	49 89 d3             	mov    %rdx,%r11
  236c61:	77 ad                	ja     236c10 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x40>
  236c63:	48 83 fa 63          	cmp    $0x63,%rdx
  236c67:	76 2e                	jbe    236c97 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  236c69:	0f b7 c2             	movzwl %dx,%eax
  236c6c:	c1 e8 02             	shr    $0x2,%eax
  236c6f:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236c75:	c1 e8 11             	shr    $0x11,%eax
  236c78:	6b f0 64             	imul   $0x64,%eax,%esi
  236c7b:	29 f2                	sub    %esi,%edx
  236c7d:	0f b7 d2             	movzwl %dx,%edx
  236c80:	48 8d 35 c1 d6 fc ff 	lea    -0x3293f(%rip),%rsi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236c87:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  236c8b:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  236c90:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236c94:	48 89 c2             	mov    %rax,%rdx
  236c97:	48 83 fa 0a          	cmp    $0xa,%rdx
  236c9b:	7d 17                	jge    236cb4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xe4>
  236c9d:	80 c2 30             	add    $0x30,%dl
  236ca0:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  236ca3:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  236ca7:	eb 1f                	jmp    236cc8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xf8>
  236ca9:	4c 89 da             	mov    %r11,%rdx
  236cac:	48 83 fa 63          	cmp    $0x63,%rdx
  236cb0:	77 b7                	ja     236c69 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x99>
  236cb2:	eb e3                	jmp    236c97 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  236cb4:	48 8d 05 8d d6 fc ff 	lea    -0x32973(%rip),%rax        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236cbb:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  236cbf:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  236cc4:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236cc8:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  236ccc:	49 83 c0 01          	add    $0x1,%r8
  236cd0:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236cd6:	49 29 c9             	sub    %rcx,%r9
  236cd9:	48 8d 15 ba e2 fc ff 	lea    -0x31d46(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  236ce0:	4c 89 d7             	mov    %r10,%rdi
  236ce3:	be 01 00 00 00       	mov    $0x1,%esi
  236ce8:	31 c9                	xor    %ecx,%ecx
  236cea:	e8 21 0a 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  236cef:	48 83 c4 28          	add    $0x28,%rsp
  236cf3:	c3                   	retq   
  236cf4:	cc                   	int3   
  236cf5:	cc                   	int3   
  236cf6:	cc                   	int3   
  236cf7:	cc                   	int3   
  236cf8:	cc                   	int3   
  236cf9:	cc                   	int3   
  236cfa:	cc                   	int3   
  236cfb:	cc                   	int3   
  236cfc:	cc                   	int3   
  236cfd:	cc                   	int3   
  236cfe:	cc                   	int3   
  236cff:	cc                   	int3   

0000000000236d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>:
  236d00:	48 83 ec 28          	sub    $0x28,%rsp
  236d04:	49 89 f2             	mov    %rsi,%r10
  236d07:	4c 8b 1f             	mov    (%rdi),%r11
  236d0a:	b9 27 00 00 00       	mov    $0x27,%ecx
  236d0f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  236d16:	0f 82 bd 00 00 00    	jb     236dd9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xd9>
  236d1c:	bf 27 00 00 00       	mov    $0x27,%edi
  236d21:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  236d28:	c5 6d 34 
  236d2b:	4c 8d 0d 16 d6 fc ff 	lea    -0x329ea(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236d32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  236d39:	00 00 00 
  236d3c:	0f 1f 40 00          	nopl   0x0(%rax)
  236d40:	4c 89 d8             	mov    %r11,%rax
  236d43:	49 f7 e0             	mul    %r8
  236d46:	48 c1 ea 0b          	shr    $0xb,%rdx
  236d4a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  236d50:	44 89 d9             	mov    %r11d,%ecx
  236d53:	29 c1                	sub    %eax,%ecx
  236d55:	0f b7 c1             	movzwl %cx,%eax
  236d58:	c1 e8 02             	shr    $0x2,%eax
  236d5b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236d61:	c1 e8 11             	shr    $0x11,%eax
  236d64:	6b f0 64             	imul   $0x64,%eax,%esi
  236d67:	29 f1                	sub    %esi,%ecx
  236d69:	0f b7 f1             	movzwl %cx,%esi
  236d6c:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  236d70:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  236d75:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  236d7a:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  236d7f:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  236d84:	48 89 cf             	mov    %rcx,%rdi
  236d87:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  236d8e:	49 89 d3             	mov    %rdx,%r11
  236d91:	77 ad                	ja     236d40 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x40>
  236d93:	48 83 fa 63          	cmp    $0x63,%rdx
  236d97:	7e 2e                	jle    236dc7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  236d99:	0f b7 c2             	movzwl %dx,%eax
  236d9c:	c1 e8 02             	shr    $0x2,%eax
  236d9f:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236da5:	c1 e8 11             	shr    $0x11,%eax
  236da8:	6b f0 64             	imul   $0x64,%eax,%esi
  236dab:	29 f2                	sub    %esi,%edx
  236dad:	0f b7 d2             	movzwl %dx,%edx
  236db0:	48 8d 35 91 d5 fc ff 	lea    -0x32a6f(%rip),%rsi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236db7:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  236dbb:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  236dc0:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236dc4:	48 89 c2             	mov    %rax,%rdx
  236dc7:	48 83 fa 0a          	cmp    $0xa,%rdx
  236dcb:	7d 17                	jge    236de4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xe4>
  236dcd:	80 c2 30             	add    $0x30,%dl
  236dd0:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  236dd3:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  236dd7:	eb 1f                	jmp    236df8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xf8>
  236dd9:	4c 89 da             	mov    %r11,%rdx
  236ddc:	48 83 fa 63          	cmp    $0x63,%rdx
  236de0:	7f b7                	jg     236d99 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x99>
  236de2:	eb e3                	jmp    236dc7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  236de4:	48 8d 05 5d d5 fc ff 	lea    -0x32aa3(%rip),%rax        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236deb:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  236def:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  236df4:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236df8:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  236dfc:	49 83 c0 01          	add    $0x1,%r8
  236e00:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236e06:	49 29 c9             	sub    %rcx,%r9
  236e09:	48 8d 15 8a e1 fc ff 	lea    -0x31e76(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  236e10:	4c 89 d7             	mov    %r10,%rdi
  236e13:	be 01 00 00 00       	mov    $0x1,%esi
  236e18:	31 c9                	xor    %ecx,%ecx
  236e1a:	e8 f1 08 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  236e1f:	48 83 c4 28          	add    $0x28,%rsp
  236e23:	c3                   	retq   
  236e24:	cc                   	int3   
  236e25:	cc                   	int3   
  236e26:	cc                   	int3   
  236e27:	cc                   	int3   
  236e28:	cc                   	int3   
  236e29:	cc                   	int3   
  236e2a:	cc                   	int3   
  236e2b:	cc                   	int3   
  236e2c:	cc                   	int3   
  236e2d:	cc                   	int3   
  236e2e:	cc                   	int3   
  236e2f:	cc                   	int3   

0000000000236e30 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>:
  236e30:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  236e37:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  236e3e:	00 
  236e3f:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  236e46:	00 
  236e47:	48 81 fe 01 01 00 00 	cmp    $0x101,%rsi
  236e4e:	72 51                	jb     236ea1 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x71>
  236e50:	b8 00 01 00 00       	mov    $0x100,%eax
  236e55:	4c 8d 0d e4 e1 fc ff 	lea    -0x31e1c(%rip),%r9        # 205040 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  236e5c:	41 ba 05 00 00 00    	mov    $0x5,%r10d
  236e62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  236e69:	00 00 00 
  236e6c:	0f 1f 40 00          	nopl   0x0(%rax)
  236e70:	80 3c 07 bf          	cmpb   $0xbf,(%rdi,%rax,1)
  236e74:	7f 38                	jg     236eae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  236e76:	80 7c 07 ff c0       	cmpb   $0xc0,-0x1(%rdi,%rax,1)
  236e7b:	0f 8d bb 01 00 00    	jge    23703c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x20c>
  236e81:	80 7c 07 fe bf       	cmpb   $0xbf,-0x2(%rdi,%rax,1)
  236e86:	0f 8f b9 01 00 00    	jg     237045 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x215>
  236e8c:	80 7c 07 fd bf       	cmpb   $0xbf,-0x3(%rdi,%rax,1)
  236e91:	0f 8f b7 01 00 00    	jg     23704e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x21e>
  236e97:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  236e9b:	75 d3                	jne    236e70 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x40>
  236e9d:	31 c0                	xor    %eax,%eax
  236e9f:	eb 0d                	jmp    236eae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  236ea1:	4c 8d 0d 98 e1 fc ff 	lea    -0x31e68(%rip),%r9        # 205040 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  236ea8:	45 31 d2             	xor    %r10d,%r10d
  236eab:	48 89 f0             	mov    %rsi,%rax
  236eae:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  236eb5:	00 
  236eb6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  236ebd:	00 
  236ebe:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
  236ec5:	00 
  236ec6:	4c 89 94 24 b0 00 00 	mov    %r10,0xb0(%rsp)
  236ecd:	00 
  236ece:	48 39 f2             	cmp    %rsi,%rdx
  236ed1:	77 0c                	ja     236edf <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0xaf>
  236ed3:	48 39 f1             	cmp    %rsi,%rcx
  236ed6:	0f 86 8f 00 00 00    	jbe    236f6b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x13b>
  236edc:	48 89 ca             	mov    %rcx,%rdx
  236edf:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  236ee6:	00 
  236ee7:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  236eee:	00 
  236eef:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  236ef4:	48 8b 05 65 6c 00 00 	mov    0x6c65(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  236efb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  236f00:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  236f07:	00 
  236f08:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  236f0d:	48 8d 05 bc 1d 00 00 	lea    0x1dbc(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  236f14:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  236f19:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  236f20:	00 
  236f21:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  236f26:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  236f2b:	48 8d 05 c6 6a 00 00 	lea    0x6ac6(%rip),%rax        # 23d9f8 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x18>
  236f32:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  236f37:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  236f3e:	00 00 
  236f40:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  236f47:	00 00 
  236f49:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  236f4e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  236f53:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  236f5a:	00 00 
  236f5c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  236f61:	4c 89 c6             	mov    %r8,%rsi
  236f64:	e8 57 ed ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  236f69:	0f 0b                	ud2    
  236f6b:	48 39 ca             	cmp    %rcx,%rdx
  236f6e:	0f 86 99 00 00 00    	jbe    23700d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1dd>
  236f74:	48 8d 84 24 c8 00 00 	lea    0xc8(%rsp),%rax
  236f7b:	00 
  236f7c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  236f81:	48 8b 05 d8 6b 00 00 	mov    0x6bd8(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  236f88:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  236f8d:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  236f94:	00 
  236f95:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  236f9a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  236f9f:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  236fa6:	00 
  236fa7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  236fac:	48 8d 05 1d 1d 00 00 	lea    0x1d1d(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  236fb3:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  236fb8:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  236fbf:	00 
  236fc0:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  236fc5:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  236fcc:	00 
  236fcd:	48 8d 05 54 6a 00 00 	lea    0x6a54(%rip),%rax        # 23da28 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x48>
  236fd4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  236fd9:	48 c7 44 24 20 04 00 	movq   $0x4,0x20(%rsp)
  236fe0:	00 00 
  236fe2:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  236fe9:	00 00 
  236feb:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  236ff0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  236ff5:	48 c7 44 24 40 04 00 	movq   $0x4,0x40(%rsp)
  236ffc:	00 00 
  236ffe:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  237003:	4c 89 c6             	mov    %r8,%rsi
  237006:	e8 b5 ec ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  23700b:	0f 0b                	ud2    
  23700d:	48 85 d2             	test   %rdx,%rdx
  237010:	75 45                	jne    237057 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x227>
  237012:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  237017:	48 85 c9             	test   %rcx,%rcx
  23701a:	75 60                	jne    23707c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  23701c:	31 c9                	xor    %ecx,%ecx
  23701e:	48 39 f1             	cmp    %rsi,%rcx
  237021:	74 63                	je     237086 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  237023:	48 8d 04 0f          	lea    (%rdi,%rcx,1),%rax
  237027:	0f b6 10             	movzbl (%rax),%edx
  23702a:	84 d2                	test   %dl,%dl
  23702c:	78 6e                	js     23709c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x26c>
  23702e:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  237032:	b8 01 00 00 00       	mov    $0x1,%eax
  237037:	e9 0e 01 00 00       	jmpq   23714a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  23703c:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  237040:	e9 69 fe ff ff       	jmpq   236eae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  237045:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  237049:	e9 60 fe ff ff       	jmpq   236eae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  23704e:	48 83 c0 fd          	add    $0xfffffffffffffffd,%rax
  237052:	e9 57 fe ff ff       	jmpq   236eae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  237057:	48 39 f2             	cmp    %rsi,%rdx
  23705a:	73 08                	jae    237064 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x234>
  23705c:	80 3c 17 bf          	cmpb   $0xbf,(%rdi,%rdx,1)
  237060:	7f b0                	jg     237012 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  237062:	eb 02                	jmp    237066 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x236>
  237064:	74 ac                	je     237012 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  237066:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  23706b:	48 89 d1             	mov    %rdx,%rcx
  23706e:	eb 0c                	jmp    23707c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  237070:	80 3c 0f bf          	cmpb   $0xbf,(%rdi,%rcx,1)
  237074:	7f a8                	jg     23701e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ee>
  237076:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  23707a:	74 a0                	je     23701c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ec>
  23707c:	48 39 f1             	cmp    %rsi,%rcx
  23707f:	72 ef                	jb     237070 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x240>
  237081:	48 39 ce             	cmp    %rcx,%rsi
  237084:	75 f0                	jne    237076 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x246>
  237086:	48 8d 3d 86 df fc ff 	lea    -0x3207a(%rip),%rdi        # 205013 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0x79>
  23708d:	be 2b 00 00 00       	mov    $0x2b,%esi
  237092:	4c 89 c2             	mov    %r8,%rdx
  237095:	e8 56 eb ff ff       	callq  235bf0 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23709a:	0f 0b                	ud2    
  23709c:	48 01 f7             	add    %rsi,%rdi
  23709f:	4c 8d 50 01          	lea    0x1(%rax),%r10
  2370a3:	31 f6                	xor    %esi,%esi
  2370a5:	49 89 f9             	mov    %rdi,%r9
  2370a8:	49 39 fa             	cmp    %rdi,%r10
  2370ab:	74 0e                	je     2370bb <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x28b>
  2370ad:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  2370b1:	48 83 c0 02          	add    $0x2,%rax
  2370b5:	83 e6 3f             	and    $0x3f,%esi
  2370b8:	49 89 c1             	mov    %rax,%r9
  2370bb:	89 d0                	mov    %edx,%eax
  2370bd:	83 e0 1f             	and    $0x1f,%eax
  2370c0:	80 fa df             	cmp    $0xdf,%dl
  2370c3:	76 4e                	jbe    237113 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e3>
  2370c5:	45 31 db             	xor    %r11d,%r11d
  2370c8:	49 89 fa             	mov    %rdi,%r10
  2370cb:	49 39 f9             	cmp    %rdi,%r9
  2370ce:	74 0f                	je     2370df <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2af>
  2370d0:	45 0f b6 19          	movzbl (%r9),%r11d
  2370d4:	49 83 c1 01          	add    $0x1,%r9
  2370d8:	41 83 e3 3f          	and    $0x3f,%r11d
  2370dc:	4d 89 ca             	mov    %r9,%r10
  2370df:	c1 e6 06             	shl    $0x6,%esi
  2370e2:	44 09 de             	or     %r11d,%esi
  2370e5:	80 fa f0             	cmp    $0xf0,%dl
  2370e8:	72 2e                	jb     237118 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e8>
  2370ea:	31 d2                	xor    %edx,%edx
  2370ec:	49 39 fa             	cmp    %rdi,%r10
  2370ef:	74 07                	je     2370f8 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2c8>
  2370f1:	41 0f b6 12          	movzbl (%r10),%edx
  2370f5:	83 e2 3f             	and    $0x3f,%edx
  2370f8:	83 e0 07             	and    $0x7,%eax
  2370fb:	c1 e0 12             	shl    $0x12,%eax
  2370fe:	c1 e6 06             	shl    $0x6,%esi
  237101:	09 c6                	or     %eax,%esi
  237103:	09 d6                	or     %edx,%esi
  237105:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  23710b:	0f 84 75 ff ff ff    	je     237086 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  237111:	eb 0a                	jmp    23711d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2ed>
  237113:	c1 e0 06             	shl    $0x6,%eax
  237116:	eb 03                	jmp    23711b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2eb>
  237118:	c1 e0 0c             	shl    $0xc,%eax
  23711b:	09 c6                	or     %eax,%esi
  23711d:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  237121:	b8 01 00 00 00       	mov    $0x1,%eax
  237126:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  23712c:	72 1c                	jb     23714a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  23712e:	b8 02 00 00 00       	mov    $0x2,%eax
  237133:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  237139:	72 0f                	jb     23714a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  23713b:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  237141:	b8 04 00 00 00       	mov    $0x4,%eax
  237146:	48 83 d8 00          	sbb    $0x0,%rax
  23714a:	48 01 c8             	add    %rcx,%rax
  23714d:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  237154:	00 
  237155:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  23715c:	00 
  23715d:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  237162:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  237167:	48 8b 05 f2 69 00 00 	mov    0x69f2(%rip),%rax        # 23db60 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23716e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  237173:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
  237178:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23717d:	48 8b 05 5c 6a 00 00 	mov    0x6a5c(%rip),%rax        # 23dbe0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xf8>
  237184:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  237189:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  237190:	00 
  237191:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  237196:	48 8d 05 c3 f1 ff ff 	lea    -0xe3d(%rip),%rax        # 236360 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>
  23719d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2371a2:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  2371a9:	00 
  2371aa:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2371af:	48 8d 05 1a 1b 00 00 	lea    0x1b1a(%rip),%rax        # 238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  2371b6:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2371bd:	00 
  2371be:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  2371c5:	00 
  2371c6:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  2371cd:	00 
  2371ce:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2371d5:	00 
  2371d6:	48 8d 05 8b 68 00 00 	lea    0x688b(%rip),%rax        # 23da68 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x88>
  2371dd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2371e2:	48 c7 44 24 20 05 00 	movq   $0x5,0x20(%rsp)
  2371e9:	00 00 
  2371eb:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  2371f2:	00 00 
  2371f4:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  2371f9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2371fe:	48 c7 44 24 40 05 00 	movq   $0x5,0x40(%rsp)
  237205:	00 00 
  237207:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  23720c:	4c 89 c6             	mov    %r8,%rsi
  23720f:	e8 ac ea ff ff       	callq  235cc0 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  237214:	0f 0b                	ud2    
  237216:	cc                   	int3   
  237217:	cc                   	int3   
  237218:	cc                   	int3   
  237219:	cc                   	int3   
  23721a:	cc                   	int3   
  23721b:	cc                   	int3   
  23721c:	cc                   	int3   
  23721d:	cc                   	int3   
  23721e:	cc                   	int3   
  23721f:	cc                   	int3   

0000000000237220 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E>:
  237220:	53                   	push   %rbx
  237221:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  237228:	48 8b 07             	mov    (%rdi),%rax
  23722b:	48 8b 08             	mov    (%rax),%rcx
  23722e:	8b 46 30             	mov    0x30(%rsi),%eax
  237231:	a8 10                	test   $0x10,%al
  237233:	0f 85 de 00 00 00    	jne    237317 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xf7>
  237239:	a8 20                	test   $0x20,%al
  23723b:	0f 85 1c 01 00 00    	jne    23735d <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x13d>
  237241:	bb 27 00 00 00       	mov    $0x27,%ebx
  237246:	48 81 f9 10 27 00 00 	cmp    $0x2710,%rcx
  23724d:	0f 82 7c 01 00 00    	jb     2373cf <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1af>
  237253:	41 bb 27 00 00 00    	mov    $0x27,%r11d
  237259:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  237260:	c5 6d 34 
  237263:	4c 8d 0d de d0 fc ff 	lea    -0x32f22(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  23726a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  237270:	48 89 c8             	mov    %rcx,%rax
  237273:	49 f7 e0             	mul    %r8
  237276:	48 c1 ea 0b          	shr    $0xb,%rdx
  23727a:	44 69 d2 10 27 00 00 	imul   $0x2710,%edx,%r10d
  237281:	89 c8                	mov    %ecx,%eax
  237283:	44 29 d0             	sub    %r10d,%eax
  237286:	0f b7 f8             	movzwl %ax,%edi
  237289:	c1 ef 02             	shr    $0x2,%edi
  23728c:	44 69 d7 7b 14 00 00 	imul   $0x147b,%edi,%r10d
  237293:	41 c1 ea 11          	shr    $0x11,%r10d
  237297:	41 6b fa 64          	imul   $0x64,%r10d,%edi
  23729b:	29 f8                	sub    %edi,%eax
  23729d:	0f b7 f8             	movzwl %ax,%edi
  2372a0:	49 8d 5b fc          	lea    -0x4(%r11),%rbx
  2372a4:	43 0f b7 04 51       	movzwl (%r9,%r10,2),%eax
  2372a9:	66 42 89 44 1c fc    	mov    %ax,-0x4(%rsp,%r11,1)
  2372af:	41 0f b7 04 79       	movzwl (%r9,%rdi,2),%eax
  2372b4:	66 42 89 44 1c fe    	mov    %ax,-0x2(%rsp,%r11,1)
  2372ba:	49 89 db             	mov    %rbx,%r11
  2372bd:	48 81 f9 ff e0 f5 05 	cmp    $0x5f5e0ff,%rcx
  2372c4:	48 89 d1             	mov    %rdx,%rcx
  2372c7:	77 a7                	ja     237270 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x50>
  2372c9:	48 83 fa 63          	cmp    $0x63,%rdx
  2372cd:	7e 2e                	jle    2372fd <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xdd>
  2372cf:	0f b7 c2             	movzwl %dx,%eax
  2372d2:	c1 e8 02             	shr    $0x2,%eax
  2372d5:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  2372db:	c1 e8 11             	shr    $0x11,%eax
  2372de:	6b c8 64             	imul   $0x64,%eax,%ecx
  2372e1:	29 ca                	sub    %ecx,%edx
  2372e3:	0f b7 ca             	movzwl %dx,%ecx
  2372e6:	48 8d 15 5b d0 fc ff 	lea    -0x32fa5(%rip),%rdx        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2372ed:	0f b7 0c 4a          	movzwl (%rdx,%rcx,2),%ecx
  2372f1:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  2372f6:	48 83 c3 fe          	add    $0xfffffffffffffffe,%rbx
  2372fa:	48 89 c2             	mov    %rax,%rdx
  2372fd:	48 83 fa 0a          	cmp    $0xa,%rdx
  237301:	0f 8d da 00 00 00    	jge    2373e1 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1c1>
  237307:	80 c2 30             	add    $0x30,%dl
  23730a:	88 54 1c ff          	mov    %dl,-0x1(%rsp,%rbx,1)
  23730e:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  237312:	e9 de 00 00 00       	jmpq   2373f5 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1d5>
  237317:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  23731e:	00 
  23731f:	45 31 c9             	xor    %r9d,%r9d
  237322:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  237328:	48 89 ca             	mov    %rcx,%rdx
  23732b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  237330:	48 c1 ea 04          	shr    $0x4,%rdx
  237334:	89 c8                	mov    %ecx,%eax
  237336:	24 0f                	and    $0xf,%al
  237338:	3c 0a                	cmp    $0xa,%al
  23733a:	bf 57 00 00 00       	mov    $0x57,%edi
  23733f:	41 0f 42 fa          	cmovb  %r10d,%edi
  237343:	40 00 c7             	add    %al,%dil
  237346:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23734a:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23734e:	49 83 c1 01          	add    $0x1,%r9
  237352:	48 83 f9 0f          	cmp    $0xf,%rcx
  237356:	48 89 d1             	mov    %rdx,%rcx
  237359:	77 d5                	ja     237330 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x110>
  23735b:	eb 3f                	jmp    23739c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x17c>
  23735d:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  237364:	00 
  237365:	45 31 c9             	xor    %r9d,%r9d
  237368:	b8 30 00 00 00       	mov    $0x30,%eax
  23736d:	48 89 ca             	mov    %rcx,%rdx
  237370:	48 c1 ea 04          	shr    $0x4,%rdx
  237374:	89 cb                	mov    %ecx,%ebx
  237376:	80 e3 0f             	and    $0xf,%bl
  237379:	80 fb 0a             	cmp    $0xa,%bl
  23737c:	bf 37 00 00 00       	mov    $0x37,%edi
  237381:	0f 42 f8             	cmovb  %eax,%edi
  237384:	40 00 df             	add    %bl,%dil
  237387:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23738b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23738f:	49 83 c1 01          	add    $0x1,%r9
  237393:	48 83 f9 0f          	cmp    $0xf,%rcx
  237397:	48 89 d1             	mov    %rdx,%rcx
  23739a:	77 d4                	ja     237370 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x150>
  23739c:	bf 80 00 00 00       	mov    $0x80,%edi
  2373a1:	4c 29 cf             	sub    %r9,%rdi
  2373a4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  2373ab:	73 74                	jae    237421 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x201>
  2373ad:	48 8d 15 92 cf fc ff 	lea    -0x3306e(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  2373b4:	b9 02 00 00 00       	mov    $0x2,%ecx
  2373b9:	48 89 f7             	mov    %rsi,%rdi
  2373bc:	be 01 00 00 00       	mov    $0x1,%esi
  2373c1:	e8 4a 03 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2373c6:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  2373cd:	5b                   	pop    %rbx
  2373ce:	c3                   	retq   
  2373cf:	48 89 ca             	mov    %rcx,%rdx
  2373d2:	48 83 fa 63          	cmp    $0x63,%rdx
  2373d6:	0f 8f f3 fe ff ff    	jg     2372cf <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xaf>
  2373dc:	e9 1c ff ff ff       	jmpq   2372fd <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xdd>
  2373e1:	48 8d 05 60 cf fc ff 	lea    -0x330a0(%rip),%rax        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2373e8:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  2373ec:	66 89 44 1c fe       	mov    %ax,-0x2(%rsp,%rbx,1)
  2373f1:	48 83 c3 fe          	add    $0xfffffffffffffffe,%rbx
  2373f5:	4c 8d 04 1c          	lea    (%rsp,%rbx,1),%r8
  2373f9:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  2373ff:	49 29 d9             	sub    %rbx,%r9
  237402:	48 8d 15 91 db fc ff 	lea    -0x3246f(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  237409:	48 89 f7             	mov    %rsi,%rdi
  23740c:	be 01 00 00 00       	mov    $0x1,%esi
  237411:	31 c9                	xor    %ecx,%ecx
  237413:	e8 f8 02 00 00       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  237418:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  23741f:	5b                   	pop    %rbx
  237420:	c3                   	retq   
  237421:	48 8d 15 e8 62 00 00 	lea    0x62e8(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  237428:	be 80 00 00 00       	mov    $0x80,%esi
  23742d:	e8 be ea ff ff       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  237432:	0f 0b                	ud2    
  237434:	cc                   	int3   
  237435:	cc                   	int3   
  237436:	cc                   	int3   
  237437:	cc                   	int3   
  237438:	cc                   	int3   
  237439:	cc                   	int3   
  23743a:	cc                   	int3   
  23743b:	cc                   	int3   
  23743c:	cc                   	int3   
  23743d:	cc                   	int3   
  23743e:	cc                   	int3   
  23743f:	cc                   	int3   

0000000000237440 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>:
  237440:	48 8b 07             	mov    (%rdi),%rax
  237443:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23744a:	00 00 00 
  23744d:	0f 1f 00             	nopl   (%rax)
  237450:	eb fe                	jmp    237450 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467+0x10>
  237452:	cc                   	int3   
  237453:	cc                   	int3   
  237454:	cc                   	int3   
  237455:	cc                   	int3   
  237456:	cc                   	int3   
  237457:	cc                   	int3   
  237458:	cc                   	int3   
  237459:	cc                   	int3   
  23745a:	cc                   	int3   
  23745b:	cc                   	int3   
  23745c:	cc                   	int3   
  23745d:	cc                   	int3   
  23745e:	cc                   	int3   
  23745f:	cc                   	int3   

0000000000237460 <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hbd463aa3be6e96dfE.llvm.2324975589069524467>:
  237460:	c3                   	retq   
  237461:	cc                   	int3   
  237462:	cc                   	int3   
  237463:	cc                   	int3   
  237464:	cc                   	int3   
  237465:	cc                   	int3   
  237466:	cc                   	int3   
  237467:	cc                   	int3   
  237468:	cc                   	int3   
  237469:	cc                   	int3   
  23746a:	cc                   	int3   
  23746b:	cc                   	int3   
  23746c:	cc                   	int3   
  23746d:	cc                   	int3   
  23746e:	cc                   	int3   
  23746f:	cc                   	int3   

0000000000237470 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>:
  237470:	48 83 ec 38          	sub    $0x38,%rsp
  237474:	48 8b 46 20          	mov    0x20(%rsi),%rax
  237478:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  23747c:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  237480:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  237485:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
  237489:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23748e:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  237492:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  237497:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  23749b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2374a0:	48 8b 0f             	mov    (%rdi),%rcx
  2374a3:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  2374a7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2374ac:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  2374b1:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  2374b6:	48 89 c7             	mov    %rax,%rdi
  2374b9:	e8 12 00 00 00       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  2374be:	48 83 c4 38          	add    $0x38,%rsp
  2374c2:	c3                   	retq   
  2374c3:	cc                   	int3   
  2374c4:	cc                   	int3   
  2374c5:	cc                   	int3   
  2374c6:	cc                   	int3   
  2374c7:	cc                   	int3   
  2374c8:	cc                   	int3   
  2374c9:	cc                   	int3   
  2374ca:	cc                   	int3   
  2374cb:	cc                   	int3   
  2374cc:	cc                   	int3   
  2374cd:	cc                   	int3   
  2374ce:	cc                   	int3   
  2374cf:	cc                   	int3   

00000000002374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>:
  2374d0:	55                   	push   %rbp
  2374d1:	41 57                	push   %r15
  2374d3:	41 56                	push   %r14
  2374d5:	41 55                	push   %r13
  2374d7:	41 54                	push   %r12
  2374d9:	53                   	push   %rbx
  2374da:	48 83 ec 48          	sub    $0x48,%rsp
  2374de:	49 89 d4             	mov    %rdx,%r12
  2374e1:	48 b8 00 00 00 00 20 	movabs $0x2000000000,%rax
  2374e8:	00 00 00 
  2374eb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2374f0:	c6 44 24 38 03       	movb   $0x3,0x38(%rsp)
  2374f5:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  2374fc:	00 
  2374fd:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  237504:	00 00 
  237506:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  23750b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  237510:	48 8b 5a 10          	mov    0x10(%rdx),%rbx
  237514:	48 85 db             	test   %rbx,%rbx
  237517:	0f 84 28 01 00 00    	je     237645 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x175>
  23751d:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  237522:	4c 6b e8 38          	imul   $0x38,%rax,%r13
  237526:	4d 85 ed             	test   %r13,%r13
  237529:	0f 84 91 01 00 00    	je     2376c0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  23752f:	49 8b 2c 24          	mov    (%r12),%rbp
  237533:	4c 8d 3c c5 f8 ff ff 	lea    -0x8(,%rax,8),%r15
  23753a:	ff 
  23753b:	49 c1 ef 03          	shr    $0x3,%r15
  23753f:	49 83 c7 01          	add    $0x1,%r15
  237543:	48 83 c5 08          	add    $0x8,%rbp
  237547:	45 31 f6             	xor    %r14d,%r14d
  23754a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  237550:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  237554:	48 85 d2             	test   %rdx,%rdx
  237557:	74 19                	je     237572 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xa2>
  237559:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  23755e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  237563:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  237567:	ff 50 18             	callq  *0x18(%rax)
  23756a:	84 c0                	test   %al,%al
  23756c:	0f 85 80 01 00 00    	jne    2376f2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  237572:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  237577:	42 8b 4c 33 28       	mov    0x28(%rbx,%r14,1),%ecx
  23757c:	89 4c 24 34          	mov    %ecx,0x34(%rsp)
  237580:	42 0f b6 4c 33 30    	movzbl 0x30(%rbx,%r14,1),%ecx
  237586:	88 4c 24 38          	mov    %cl,0x38(%rsp)
  23758a:	42 8b 4c 33 2c       	mov    0x2c(%rbx,%r14,1),%ecx
  23758f:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
  237593:	4a 8b 54 33 18       	mov    0x18(%rbx,%r14,1),%rdx
  237598:	4a 8b 4c 33 20       	mov    0x20(%rbx,%r14,1),%rcx
  23759d:	48 85 d2             	test   %rdx,%rdx
  2375a0:	74 23                	je     2375c5 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xf5>
  2375a2:	48 83 fa 01          	cmp    $0x1,%rdx
  2375a6:	75 12                	jne    2375ba <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xea>
  2375a8:	48 c1 e1 04          	shl    $0x4,%rcx
  2375ac:	48 8d 15 8d fe ff ff 	lea    -0x173(%rip),%rdx        # 237440 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  2375b3:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  2375b8:	74 04                	je     2375be <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xee>
  2375ba:	31 d2                	xor    %edx,%edx
  2375bc:	eb 0c                	jmp    2375ca <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xfa>
  2375be:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  2375c2:	48 8b 09             	mov    (%rcx),%rcx
  2375c5:	ba 01 00 00 00       	mov    $0x1,%edx
  2375ca:	48 89 14 24          	mov    %rdx,(%rsp)
  2375ce:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  2375d3:	4a 8b 54 33 08       	mov    0x8(%rbx,%r14,1),%rdx
  2375d8:	4a 8b 4c 33 10       	mov    0x10(%rbx,%r14,1),%rcx
  2375dd:	48 85 d2             	test   %rdx,%rdx
  2375e0:	74 23                	je     237605 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x135>
  2375e2:	48 83 fa 01          	cmp    $0x1,%rdx
  2375e6:	75 12                	jne    2375fa <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12a>
  2375e8:	48 c1 e1 04          	shl    $0x4,%rcx
  2375ec:	48 8d 15 4d fe ff ff 	lea    -0x1b3(%rip),%rdx        # 237440 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  2375f3:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  2375f8:	74 04                	je     2375fe <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12e>
  2375fa:	31 d2                	xor    %edx,%edx
  2375fc:	eb 0c                	jmp    23760a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x13a>
  2375fe:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  237602:	48 8b 09             	mov    (%rcx),%rcx
  237605:	ba 01 00 00 00       	mov    $0x1,%edx
  23760a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  23760f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  237614:	4a 8b 0c 33          	mov    (%rbx,%r14,1),%rcx
  237618:	48 c1 e1 04          	shl    $0x4,%rcx
  23761c:	48 8b 3c 08          	mov    (%rax,%rcx,1),%rdi
  237620:	48 89 e6             	mov    %rsp,%rsi
  237623:	ff 54 08 08          	callq  *0x8(%rax,%rcx,1)
  237627:	84 c0                	test   %al,%al
  237629:	0f 85 c3 00 00 00    	jne    2376f2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  23762f:	48 83 c5 10          	add    $0x10,%rbp
  237633:	49 83 c6 38          	add    $0x38,%r14
  237637:	4d 39 f5             	cmp    %r14,%r13
  23763a:	0f 85 10 ff ff ff    	jne    237550 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x80>
  237640:	4c 89 fa             	mov    %r15,%rdx
  237643:	eb 7d                	jmp    2376c2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  237645:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  23764a:	4d 85 ed             	test   %r13,%r13
  23764d:	74 71                	je     2376c0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  23764f:	49 8b 6c 24 20       	mov    0x20(%r12),%rbp
  237654:	49 8b 1c 24          	mov    (%r12),%rbx
  237658:	49 c1 e5 04          	shl    $0x4,%r13
  23765c:	49 8d 45 f0          	lea    -0x10(%r13),%rax
  237660:	48 c1 e8 04          	shr    $0x4,%rax
  237664:	48 83 c0 01          	add    $0x1,%rax
  237668:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23766d:	45 31 ff             	xor    %r15d,%r15d
  237670:	49 89 e6             	mov    %rsp,%r14
  237673:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23767a:	00 00 00 
  23767d:	0f 1f 00             	nopl   (%rax)
  237680:	4a 8b 54 3b 08       	mov    0x8(%rbx,%r15,1),%rdx
  237685:	48 85 d2             	test   %rdx,%rdx
  237688:	74 15                	je     23769f <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1cf>
  23768a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  23768f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  237694:	4a 8b 34 3b          	mov    (%rbx,%r15,1),%rsi
  237698:	ff 50 18             	callq  *0x18(%rax)
  23769b:	84 c0                	test   %al,%al
  23769d:	75 53                	jne    2376f2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  23769f:	4a 8b 7c 3d 00       	mov    0x0(%rbp,%r15,1),%rdi
  2376a4:	4c 89 f6             	mov    %r14,%rsi
  2376a7:	42 ff 54 3d 08       	callq  *0x8(%rbp,%r15,1)
  2376ac:	84 c0                	test   %al,%al
  2376ae:	75 42                	jne    2376f2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  2376b0:	49 83 c7 10          	add    $0x10,%r15
  2376b4:	4d 39 fd             	cmp    %r15,%r13
  2376b7:	75 c7                	jne    237680 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1b0>
  2376b9:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  2376be:	eb 02                	jmp    2376c2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  2376c0:	31 d2                	xor    %edx,%edx
  2376c2:	48 89 d1             	mov    %rdx,%rcx
  2376c5:	48 c1 e1 04          	shl    $0x4,%rcx
  2376c9:	49 03 0c 24          	add    (%r12),%rcx
  2376cd:	31 c0                	xor    %eax,%eax
  2376cf:	49 3b 54 24 08       	cmp    0x8(%r12),%rdx
  2376d4:	48 0f 42 c1          	cmovb  %rcx,%rax
  2376d8:	73 1c                	jae    2376f6 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  2376da:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2376df:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2376e4:	48 8b 30             	mov    (%rax),%rsi
  2376e7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  2376eb:	ff 51 18             	callq  *0x18(%rcx)
  2376ee:	84 c0                	test   %al,%al
  2376f0:	74 04                	je     2376f6 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  2376f2:	b0 01                	mov    $0x1,%al
  2376f4:	eb 02                	jmp    2376f8 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x228>
  2376f6:	31 c0                	xor    %eax,%eax
  2376f8:	48 83 c4 48          	add    $0x48,%rsp
  2376fc:	5b                   	pop    %rbx
  2376fd:	41 5c                	pop    %r12
  2376ff:	41 5d                	pop    %r13
  237701:	41 5e                	pop    %r14
  237703:	41 5f                	pop    %r15
  237705:	5d                   	pop    %rbp
  237706:	c3                   	retq   
  237707:	cc                   	int3   
  237708:	cc                   	int3   
  237709:	cc                   	int3   
  23770a:	cc                   	int3   
  23770b:	cc                   	int3   
  23770c:	cc                   	int3   
  23770d:	cc                   	int3   
  23770e:	cc                   	int3   
  23770f:	cc                   	int3   

0000000000237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>:
  237710:	55                   	push   %rbp
  237711:	41 57                	push   %r15
  237713:	41 56                	push   %r14
  237715:	41 55                	push   %r13
  237717:	41 54                	push   %r12
  237719:	53                   	push   %rbx
  23771a:	48 83 ec 38          	sub    $0x38,%rsp
  23771e:	4d 89 ce             	mov    %r9,%r14
  237721:	4d 89 c4             	mov    %r8,%r12
  237724:	49 89 fd             	mov    %rdi,%r13
  237727:	85 f6                	test   %esi,%esi
  237729:	74 47                	je     237772 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x62>
  23772b:	45 8b 45 30          	mov    0x30(%r13),%r8d
  23772f:	45 89 c2             	mov    %r8d,%r10d
  237732:	41 83 e2 01          	and    $0x1,%r10d
  237736:	4d 85 d2             	test   %r10,%r10
  237739:	b8 00 00 11 00       	mov    $0x110000,%eax
  23773e:	41 bf 2b 00 00 00    	mov    $0x2b,%r15d
  237744:	44 0f 44 f8          	cmove  %eax,%r15d
  237748:	4d 01 f2             	add    %r14,%r10
  23774b:	41 f6 c0 04          	test   $0x4,%r8b
  23774f:	74 35                	je     237786 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x76>
  237751:	48 85 c9             	test   %rcx,%rcx
  237754:	74 57                	je     2377ad <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x9d>
  237756:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
  23775a:	89 c8                	mov    %ecx,%eax
  23775c:	83 e0 03             	and    $0x3,%eax
  23775f:	48 83 fe 03          	cmp    $0x3,%rsi
  237763:	73 52                	jae    2377b7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xa7>
  237765:	49 89 c9             	mov    %rcx,%r9
  237768:	31 f6                	xor    %esi,%esi
  23776a:	48 89 d7             	mov    %rdx,%rdi
  23776d:	e9 99 00 00 00       	jmpq   23780b <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xfb>
  237772:	4d 8d 56 01          	lea    0x1(%r14),%r10
  237776:	45 8b 45 30          	mov    0x30(%r13),%r8d
  23777a:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  237780:	41 f6 c0 04          	test   $0x4,%r8b
  237784:	75 cb                	jne    237751 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x41>
  237786:	31 d2                	xor    %edx,%edx
  237788:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  23778d:	0f 84 b3 00 00 00    	je     237846 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x136>
  237793:	4c 89 ef             	mov    %r13,%rdi
  237796:	44 89 fe             	mov    %r15d,%esi
  237799:	e8 42 03 00 00       	callq  237ae0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  23779e:	b1 01                	mov    $0x1,%cl
  2377a0:	84 c0                	test   %al,%al
  2377a2:	0f 84 0c 01 00 00    	je     2378b4 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1a4>
  2377a8:	e9 cc 02 00 00       	jmpq   237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  2377ad:	49 89 c9             	mov    %rcx,%r9
  2377b0:	31 f6                	xor    %esi,%esi
  2377b2:	e9 7e 00 00 00       	jmpq   237835 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  2377b7:	49 89 c9             	mov    %rcx,%r9
  2377ba:	48 89 cd             	mov    %rcx,%rbp
  2377bd:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  2377c1:	48 f7 dd             	neg    %rbp
  2377c4:	31 f6                	xor    %esi,%esi
  2377c6:	48 89 d7             	mov    %rdx,%rdi
  2377c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  2377d0:	31 db                	xor    %ebx,%ebx
  2377d2:	80 3f c0             	cmpb   $0xc0,(%rdi)
  2377d5:	0f 9d c3             	setge  %bl
  2377d8:	48 01 f3             	add    %rsi,%rbx
  2377db:	31 f6                	xor    %esi,%esi
  2377dd:	80 7f 01 c0          	cmpb   $0xc0,0x1(%rdi)
  2377e1:	40 0f 9d c6          	setge  %sil
  2377e5:	48 01 de             	add    %rbx,%rsi
  2377e8:	31 db                	xor    %ebx,%ebx
  2377ea:	80 7f 02 c0          	cmpb   $0xc0,0x2(%rdi)
  2377ee:	0f 9d c3             	setge  %bl
  2377f1:	48 01 f3             	add    %rsi,%rbx
  2377f4:	31 f6                	xor    %esi,%esi
  2377f6:	80 7f 03 c0          	cmpb   $0xc0,0x3(%rdi)
  2377fa:	48 8d 7f 04          	lea    0x4(%rdi),%rdi
  2377fe:	40 0f 9d c6          	setge  %sil
  237802:	48 01 de             	add    %rbx,%rsi
  237805:	48 83 c5 04          	add    $0x4,%rbp
  237809:	75 c5                	jne    2377d0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xc0>
  23780b:	48 85 c0             	test   %rax,%rax
  23780e:	74 25                	je     237835 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  237810:	31 ed                	xor    %ebp,%ebp
  237812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  237819:	00 00 00 
  23781c:	0f 1f 40 00          	nopl   0x0(%rax)
  237820:	31 db                	xor    %ebx,%ebx
  237822:	80 3c 2f c0          	cmpb   $0xc0,(%rdi,%rbp,1)
  237826:	0f 9d c3             	setge  %bl
  237829:	48 01 de             	add    %rbx,%rsi
  23782c:	48 83 c5 01          	add    $0x1,%rbp
  237830:	48 39 e8             	cmp    %rbp,%rax
  237833:	75 eb                	jne    237820 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x110>
  237835:	49 01 f2             	add    %rsi,%r10
  237838:	4c 89 c9             	mov    %r9,%rcx
  23783b:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  237840:	0f 85 4d ff ff ff    	jne    237793 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x83>
  237846:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  23784b:	49 8b 6d 08          	mov    0x8(%r13),%rbp
  23784f:	48 89 eb             	mov    %rbp,%rbx
  237852:	4c 29 d3             	sub    %r10,%rbx
  237855:	76 43                	jbe    23789a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x18a>
  237857:	41 f6 c0 08          	test   $0x8,%r8b
  23785b:	75 79                	jne    2378d6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1c6>
  23785d:	4c 29 d5             	sub    %r10,%rbp
  237860:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  237864:	80 f9 03             	cmp    $0x3,%cl
  237867:	b8 01 00 00 00       	mov    $0x1,%eax
  23786c:	0f 45 c1             	cmovne %ecx,%eax
  23786f:	84 c0                	test   %al,%al
  237871:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  237876:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  23787b:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  237880:	0f 84 b8 00 00 00    	je     23793e <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x22e>
  237886:	3c 01                	cmp    $0x1,%al
  237888:	0f 85 b9 00 00 00    	jne    237947 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x237>
  23788e:	31 c0                	xor    %eax,%eax
  237890:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  237895:	e9 c2 00 00 00       	jmpq   23795c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  23789a:	4c 89 ef             	mov    %r13,%rdi
  23789d:	44 89 fe             	mov    %r15d,%esi
  2378a0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2378a5:	e8 36 02 00 00       	callq  237ae0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  2378aa:	b1 01                	mov    $0x1,%cl
  2378ac:	84 c0                	test   %al,%al
  2378ae:	0f 85 c5 01 00 00    	jne    237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  2378b4:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  2378b8:	49 8b 45 28          	mov    0x28(%r13),%rax
  2378bc:	48 8b 40 18          	mov    0x18(%rax),%rax
  2378c0:	4c 89 e6             	mov    %r12,%rsi
  2378c3:	4c 89 f2             	mov    %r14,%rdx
  2378c6:	48 83 c4 38          	add    $0x38,%rsp
  2378ca:	5b                   	pop    %rbx
  2378cb:	41 5c                	pop    %r12
  2378cd:	41 5d                	pop    %r13
  2378cf:	41 5e                	pop    %r14
  2378d1:	41 5f                	pop    %r15
  2378d3:	5d                   	pop    %rbp
  2378d4:	ff e0                	jmpq   *%rax
  2378d6:	41 8b 6d 34          	mov    0x34(%r13),%ebp
  2378da:	41 c7 45 34 30 00 00 	movl   $0x30,0x34(%r13)
  2378e1:	00 
  2378e2:	41 8a 45 38          	mov    0x38(%r13),%al
  2378e6:	88 44 24 08          	mov    %al,0x8(%rsp)
  2378ea:	41 c6 45 38 01       	movb   $0x1,0x38(%r13)
  2378ef:	4c 89 ef             	mov    %r13,%rdi
  2378f2:	44 89 fe             	mov    %r15d,%esi
  2378f5:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2378fa:	e8 e1 01 00 00       	callq  237ae0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  2378ff:	b1 01                	mov    $0x1,%cl
  237901:	84 c0                	test   %al,%al
  237903:	0f 85 70 01 00 00    	jne    237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  237909:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  23790d:	80 f9 03             	cmp    $0x3,%cl
  237910:	b8 01 00 00 00       	mov    $0x1,%eax
  237915:	0f 45 c1             	cmovne %ecx,%eax
  237918:	84 c0                	test   %al,%al
  23791a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  23791f:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  237924:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  237928:	0f 84 e7 00 00 00    	je     237a15 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x305>
  23792e:	3c 01                	cmp    $0x1,%al
  237930:	0f 85 e6 00 00 00    	jne    237a1c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x30c>
  237936:	45 31 e4             	xor    %r12d,%r12d
  237939:	e9 f1 00 00 00       	jmpq   237a2f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  23793e:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  237943:	31 ed                	xor    %ebp,%ebp
  237945:	eb 15                	jmp    23795c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  237947:	48 89 e8             	mov    %rbp,%rax
  23794a:	48 d1 e8             	shr    %rax
  23794d:	48 83 c5 01          	add    $0x1,%rbp
  237951:	48 d1 ed             	shr    %rbp
  237954:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  237959:	48 89 c5             	mov    %rax,%rbp
  23795c:	49 8b 5d 20          	mov    0x20(%r13),%rbx
  237960:	4d 8b 65 28          	mov    0x28(%r13),%r12
  237964:	45 8b 75 34          	mov    0x34(%r13),%r14d
  237968:	48 83 c5 01          	add    $0x1,%rbp
  23796c:	0f 1f 40 00          	nopl   0x0(%rax)
  237970:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  237974:	74 14                	je     23798a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x27a>
  237976:	48 89 df             	mov    %rbx,%rdi
  237979:	44 89 f6             	mov    %r14d,%esi
  23797c:	41 ff 54 24 20       	callq  *0x20(%r12)
  237981:	84 c0                	test   %al,%al
  237983:	74 eb                	je     237970 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x260>
  237985:	e9 ed 00 00 00       	jmpq   237a77 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  23798a:	b1 01                	mov    $0x1,%cl
  23798c:	41 81 fe 00 00 11 00 	cmp    $0x110000,%r14d
  237993:	0f 84 e0 00 00 00    	je     237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  237999:	4c 89 ef             	mov    %r13,%rdi
  23799c:	44 89 fe             	mov    %r15d,%esi
  23799f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2379a4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2379a9:	e8 32 01 00 00       	callq  237ae0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  2379ae:	84 c0                	test   %al,%al
  2379b0:	0f 85 c1 00 00 00    	jne    237a77 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2379b6:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  2379ba:	49 8b 45 28          	mov    0x28(%r13),%rax
  2379be:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2379c3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2379c8:	ff 50 18             	callq  *0x18(%rax)
  2379cb:	84 c0                	test   %al,%al
  2379cd:	b1 01                	mov    $0x1,%cl
  2379cf:	0f 85 a4 00 00 00    	jne    237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  2379d5:	4d 8b 7d 20          	mov    0x20(%r13),%r15
  2379d9:	4d 8b 65 28          	mov    0x28(%r13),%r12
  2379dd:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  2379e2:	4c 89 ed             	mov    %r13,%rbp
  2379e5:	48 f7 dd             	neg    %rbp
  2379e8:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  2379ef:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  2379f3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  2379f7:	0f 84 d3 00 00 00    	je     237ad0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c0>
  2379fd:	4c 89 ff             	mov    %r15,%rdi
  237a00:	44 89 f6             	mov    %r14d,%esi
  237a03:	41 ff 54 24 20       	callq  *0x20(%r12)
  237a08:	48 83 c3 01          	add    $0x1,%rbx
  237a0c:	84 c0                	test   %al,%al
  237a0e:	74 df                	je     2379ef <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x2df>
  237a10:	e9 be 00 00 00       	jmpq   237ad3 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c3>
  237a15:	49 89 dc             	mov    %rbx,%r12
  237a18:	31 db                	xor    %ebx,%ebx
  237a1a:	eb 13                	jmp    237a2f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  237a1c:	48 89 d8             	mov    %rbx,%rax
  237a1f:	48 d1 e8             	shr    %rax
  237a22:	48 83 c3 01          	add    $0x1,%rbx
  237a26:	48 d1 eb             	shr    %rbx
  237a29:	49 89 dc             	mov    %rbx,%r12
  237a2c:	48 89 c3             	mov    %rax,%rbx
  237a2f:	4d 8b 75 20          	mov    0x20(%r13),%r14
  237a33:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  237a37:	45 8b 7d 34          	mov    0x34(%r13),%r15d
  237a3b:	48 83 c3 01          	add    $0x1,%rbx
  237a3f:	90                   	nop
  237a40:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  237a44:	74 0f                	je     237a55 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x345>
  237a46:	4c 89 f7             	mov    %r14,%rdi
  237a49:	44 89 fe             	mov    %r15d,%esi
  237a4c:	ff 55 20             	callq  *0x20(%rbp)
  237a4f:	84 c0                	test   %al,%al
  237a51:	74 ed                	je     237a40 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x330>
  237a53:	eb 22                	jmp    237a77 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  237a55:	41 81 ff 00 00 11 00 	cmp    $0x110000,%r15d
  237a5c:	74 19                	je     237a77 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  237a5e:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  237a62:	49 8b 45 28          	mov    0x28(%r13),%rax
  237a66:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  237a6b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  237a70:	ff 50 18             	callq  *0x18(%rax)
  237a73:	84 c0                	test   %al,%al
  237a75:	74 13                	je     237a8a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x37a>
  237a77:	b1 01                	mov    $0x1,%cl
  237a79:	89 c8                	mov    %ecx,%eax
  237a7b:	48 83 c4 38          	add    $0x38,%rsp
  237a7f:	5b                   	pop    %rbx
  237a80:	41 5c                	pop    %r12
  237a82:	41 5d                	pop    %r13
  237a84:	41 5e                	pop    %r14
  237a86:	41 5f                	pop    %r15
  237a88:	5d                   	pop    %rbp
  237a89:	c3                   	retq   
  237a8a:	4d 8b 75 20          	mov    0x20(%r13),%r14
  237a8e:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  237a92:	bb 01 00 00 00       	mov    $0x1,%ebx
  237a97:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  237a9b:	48 83 f8 01          	cmp    $0x1,%rax
  237a9f:	74 1b                	je     237abc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3ac>
  237aa1:	4c 89 f7             	mov    %r14,%rdi
  237aa4:	44 89 fe             	mov    %r15d,%esi
  237aa7:	ff 55 20             	callq  *0x20(%rbp)
  237aaa:	b1 01                	mov    $0x1,%cl
  237aac:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  237ab0:	84 c0                	test   %al,%al
  237ab2:	74 e3                	je     237a97 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x387>
  237ab4:	48 f7 db             	neg    %rbx
  237ab7:	4c 39 e3             	cmp    %r12,%rbx
  237aba:	72 bd                	jb     237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  237abc:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  237ac0:	41 89 45 34          	mov    %eax,0x34(%r13)
  237ac4:	8a 44 24 08          	mov    0x8(%rsp),%al
  237ac8:	41 88 45 38          	mov    %al,0x38(%r13)
  237acc:	31 c9                	xor    %ecx,%ecx
  237ace:	eb a9                	jmp    237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  237ad0:	4c 89 eb             	mov    %r13,%rbx
  237ad3:	4c 39 eb             	cmp    %r13,%rbx
  237ad6:	0f 92 c1             	setb   %cl
  237ad9:	eb 9e                	jmp    237a79 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  237adb:	cc                   	int3   
  237adc:	cc                   	int3   
  237add:	cc                   	int3   
  237ade:	cc                   	int3   
  237adf:	cc                   	int3   

0000000000237ae0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>:
  237ae0:	41 57                	push   %r15
  237ae2:	41 56                	push   %r14
  237ae4:	53                   	push   %rbx
  237ae5:	49 89 ce             	mov    %rcx,%r14
  237ae8:	49 89 d7             	mov    %rdx,%r15
  237aeb:	48 89 fb             	mov    %rdi,%rbx
  237aee:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  237af4:	74 13                	je     237b09 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x29>
  237af6:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  237afa:	48 8b 43 28          	mov    0x28(%rbx),%rax
  237afe:	ff 50 20             	callq  *0x20(%rax)
  237b01:	89 c1                	mov    %eax,%ecx
  237b03:	b0 01                	mov    $0x1,%al
  237b05:	84 c9                	test   %cl,%cl
  237b07:	75 20                	jne    237b29 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x49>
  237b09:	4d 85 ff             	test   %r15,%r15
  237b0c:	74 19                	je     237b27 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x47>
  237b0e:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  237b12:	48 8b 43 28          	mov    0x28(%rbx),%rax
  237b16:	48 8b 40 18          	mov    0x18(%rax),%rax
  237b1a:	4c 89 fe             	mov    %r15,%rsi
  237b1d:	4c 89 f2             	mov    %r14,%rdx
  237b20:	5b                   	pop    %rbx
  237b21:	41 5e                	pop    %r14
  237b23:	41 5f                	pop    %r15
  237b25:	ff e0                	jmpq   *%rax
  237b27:	31 c0                	xor    %eax,%eax
  237b29:	5b                   	pop    %rbx
  237b2a:	41 5e                	pop    %r14
  237b2c:	41 5f                	pop    %r15
  237b2e:	c3                   	retq   
  237b2f:	cc                   	int3   

0000000000237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>:
  237b30:	55                   	push   %rbp
  237b31:	41 57                	push   %r15
  237b33:	41 56                	push   %r14
  237b35:	41 55                	push   %r13
  237b37:	41 54                	push   %r12
  237b39:	53                   	push   %rbx
  237b3a:	50                   	push   %rax
  237b3b:	49 89 d7             	mov    %rdx,%r15
  237b3e:	49 89 f4             	mov    %rsi,%r12
  237b41:	4c 8b 07             	mov    (%rdi),%r8
  237b44:	48 8b 47 10          	mov    0x10(%rdi),%rax
  237b48:	49 83 f8 01          	cmp    $0x1,%r8
  237b4c:	75 0b                	jne    237b59 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x29>
  237b4e:	48 83 f8 01          	cmp    $0x1,%rax
  237b52:	74 0f                	je     237b63 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x33>
  237b54:	e9 46 01 00 00       	jmpq   237c9f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x16f>
  237b59:	48 83 f8 01          	cmp    $0x1,%rax
  237b5d:	0f 85 02 02 00 00    	jne    237d65 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  237b63:	48 8b 6f 18          	mov    0x18(%rdi),%rbp
  237b67:	4f 8d 0c 3c          	lea    (%r12,%r15,1),%r9
  237b6b:	31 c9                	xor    %ecx,%ecx
  237b6d:	48 85 ed             	test   %rbp,%rbp
  237b70:	0f 84 b1 00 00 00    	je     237c27 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xf7>
  237b76:	4c 89 e6             	mov    %r12,%rsi
  237b79:	eb 44                	jmp    237bbf <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x8f>
  237b7b:	44 0f b6 1a          	movzbl (%rdx),%r11d
  237b7f:	48 83 c2 01          	add    $0x1,%rdx
  237b83:	41 83 e3 3f          	and    $0x3f,%r11d
  237b87:	83 e0 07             	and    $0x7,%eax
  237b8a:	c1 e0 12             	shl    $0x12,%eax
  237b8d:	41 c1 e2 0c          	shl    $0xc,%r10d
  237b91:	41 09 c2             	or     %eax,%r10d
  237b94:	c1 e3 06             	shl    $0x6,%ebx
  237b97:	44 09 d3             	or     %r10d,%ebx
  237b9a:	44 09 db             	or     %r11d,%ebx
  237b9d:	81 fb 00 00 11 00    	cmp    $0x110000,%ebx
  237ba3:	0f 84 ec 00 00 00    	je     237c95 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  237ba9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  237bb0:	48 29 f1             	sub    %rsi,%rcx
  237bb3:	48 01 d1             	add    %rdx,%rcx
  237bb6:	48 89 d6             	mov    %rdx,%rsi
  237bb9:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  237bbd:	74 6b                	je     237c2a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xfa>
  237bbf:	4c 39 ce             	cmp    %r9,%rsi
  237bc2:	0f 84 cd 00 00 00    	je     237c95 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  237bc8:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  237bcc:	0f b6 06             	movzbl (%rsi),%eax
  237bcf:	84 c0                	test   %al,%al
  237bd1:	79 dd                	jns    237bb0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  237bd3:	4c 39 ca             	cmp    %r9,%rdx
  237bd6:	74 13                	je     237beb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xbb>
  237bd8:	48 8d 56 02          	lea    0x2(%rsi),%rdx
  237bdc:	44 0f b6 56 01       	movzbl 0x1(%rsi),%r10d
  237be1:	41 83 e2 3f          	and    $0x3f,%r10d
  237be5:	3c e0                	cmp    $0xe0,%al
  237be7:	72 c7                	jb     237bb0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  237be9:	eb 0a                	jmp    237bf5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xc5>
  237beb:	45 31 d2             	xor    %r10d,%r10d
  237bee:	4c 89 ca             	mov    %r9,%rdx
  237bf1:	3c e0                	cmp    $0xe0,%al
  237bf3:	72 bb                	jb     237bb0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  237bf5:	4c 39 ca             	cmp    %r9,%rdx
  237bf8:	74 10                	je     237c0a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xda>
  237bfa:	0f b6 1a             	movzbl (%rdx),%ebx
  237bfd:	48 83 c2 01          	add    $0x1,%rdx
  237c01:	83 e3 3f             	and    $0x3f,%ebx
  237c04:	3c f0                	cmp    $0xf0,%al
  237c06:	72 a8                	jb     237bb0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  237c08:	eb 09                	jmp    237c13 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xe3>
  237c0a:	31 db                	xor    %ebx,%ebx
  237c0c:	4c 89 ca             	mov    %r9,%rdx
  237c0f:	3c f0                	cmp    $0xf0,%al
  237c11:	72 9d                	jb     237bb0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  237c13:	4c 39 ca             	cmp    %r9,%rdx
  237c16:	0f 85 5f ff ff ff    	jne    237b7b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x4b>
  237c1c:	45 31 db             	xor    %r11d,%r11d
  237c1f:	4c 89 ca             	mov    %r9,%rdx
  237c22:	e9 60 ff ff ff       	jmpq   237b87 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x57>
  237c27:	4c 89 e2             	mov    %r12,%rdx
  237c2a:	4c 39 ca             	cmp    %r9,%rdx
  237c2d:	74 66                	je     237c95 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  237c2f:	0f b6 32             	movzbl (%rdx),%esi
  237c32:	40 84 f6             	test   %sil,%sil
  237c35:	78 16                	js     237c4d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x11d>
  237c37:	48 85 c9             	test   %rcx,%rcx
  237c3a:	74 38                	je     237c74 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x144>
  237c3c:	4c 39 f9             	cmp    %r15,%rcx
  237c3f:	73 37                	jae    237c78 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x148>
  237c41:	41 80 3c 0c c0       	cmpb   $0xc0,(%r12,%rcx,1)
  237c46:	7c 40                	jl     237c88 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  237c48:	48 89 c8             	mov    %rcx,%rax
  237c4b:	eb 33                	jmp    237c80 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  237c4d:	48 8d 42 01          	lea    0x1(%rdx),%rax
  237c51:	4c 39 c8             	cmp    %r9,%rax
  237c54:	0f 84 d3 01 00 00    	je     237e2d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2fd>
  237c5a:	0f b6 42 01          	movzbl 0x1(%rdx),%eax
  237c5e:	48 83 c2 02          	add    $0x2,%rdx
  237c62:	83 e0 3f             	and    $0x3f,%eax
  237c65:	c1 e0 06             	shl    $0x6,%eax
  237c68:	40 80 fe e0          	cmp    $0xe0,%sil
  237c6c:	0f 83 ca 01 00 00    	jae    237e3c <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x30c>
  237c72:	eb c3                	jmp    237c37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  237c74:	31 c0                	xor    %eax,%eax
  237c76:	eb 08                	jmp    237c80 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  237c78:	4c 89 f8             	mov    %r15,%rax
  237c7b:	4c 39 f9             	cmp    %r15,%rcx
  237c7e:	75 08                	jne    237c88 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  237c80:	48 89 c1             	mov    %rax,%rcx
  237c83:	4c 89 e0             	mov    %r12,%rax
  237c86:	eb 02                	jmp    237c8a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x15a>
  237c88:	31 c0                	xor    %eax,%eax
  237c8a:	48 85 c0             	test   %rax,%rax
  237c8d:	4c 0f 45 e0          	cmovne %rax,%r12
  237c91:	4c 0f 45 f9          	cmovne %rcx,%r15
  237c95:	49 83 f8 01          	cmp    $0x1,%r8
  237c99:	0f 85 c6 00 00 00    	jne    237d65 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  237c9f:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
  237ca3:	4d 85 ff             	test   %r15,%r15
  237ca6:	74 17                	je     237cbf <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x18f>
  237ca8:	49 8d 4f ff          	lea    -0x1(%r15),%rcx
  237cac:	44 89 f8             	mov    %r15d,%eax
  237caf:	83 e0 03             	and    $0x3,%eax
  237cb2:	48 83 f9 03          	cmp    $0x3,%rcx
  237cb6:	73 0e                	jae    237cc6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x196>
  237cb8:	31 c9                	xor    %ecx,%ecx
  237cba:	4c 89 e2             	mov    %r12,%rdx
  237cbd:	eb 5c                	jmp    237d1b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1eb>
  237cbf:	31 c9                	xor    %ecx,%ecx
  237cc1:	e9 80 00 00 00       	jmpq   237d46 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  237cc6:	4c 89 fe             	mov    %r15,%rsi
  237cc9:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  237ccd:	48 f7 de             	neg    %rsi
  237cd0:	31 c9                	xor    %ecx,%ecx
  237cd2:	4c 89 e2             	mov    %r12,%rdx
  237cd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  237cdc:	00 00 00 
  237cdf:	90                   	nop
  237ce0:	31 ed                	xor    %ebp,%ebp
  237ce2:	80 3a c0             	cmpb   $0xc0,(%rdx)
  237ce5:	40 0f 9d c5          	setge  %bpl
  237ce9:	48 01 cd             	add    %rcx,%rbp
  237cec:	31 c9                	xor    %ecx,%ecx
  237cee:	80 7a 01 c0          	cmpb   $0xc0,0x1(%rdx)
  237cf2:	0f 9d c1             	setge  %cl
  237cf5:	48 01 e9             	add    %rbp,%rcx
  237cf8:	31 ed                	xor    %ebp,%ebp
  237cfa:	80 7a 02 c0          	cmpb   $0xc0,0x2(%rdx)
  237cfe:	40 0f 9d c5          	setge  %bpl
  237d02:	48 01 cd             	add    %rcx,%rbp
  237d05:	31 c9                	xor    %ecx,%ecx
  237d07:	80 7a 03 c0          	cmpb   $0xc0,0x3(%rdx)
  237d0b:	48 8d 52 04          	lea    0x4(%rdx),%rdx
  237d0f:	0f 9d c1             	setge  %cl
  237d12:	48 01 e9             	add    %rbp,%rcx
  237d15:	48 83 c6 04          	add    $0x4,%rsi
  237d19:	75 c5                	jne    237ce0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1b0>
  237d1b:	48 85 c0             	test   %rax,%rax
  237d1e:	74 26                	je     237d46 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  237d20:	31 f6                	xor    %esi,%esi
  237d22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  237d29:	00 00 00 
  237d2c:	0f 1f 40 00          	nopl   0x0(%rax)
  237d30:	31 ed                	xor    %ebp,%ebp
  237d32:	80 3c 32 c0          	cmpb   $0xc0,(%rdx,%rsi,1)
  237d36:	40 0f 9d c5          	setge  %bpl
  237d3a:	48 01 e9             	add    %rbp,%rcx
  237d3d:	48 83 c6 01          	add    $0x1,%rsi
  237d41:	48 39 f0             	cmp    %rsi,%rax
  237d44:	75 ea                	jne    237d30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x200>
  237d46:	48 29 cb             	sub    %rcx,%rbx
  237d49:	76 1a                	jbe    237d65 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  237d4b:	8b 47 38             	mov    0x38(%rdi),%eax
  237d4e:	31 c9                	xor    %ecx,%ecx
  237d50:	3c 03                	cmp    $0x3,%al
  237d52:	0f 44 c1             	cmove  %ecx,%eax
  237d55:	84 c0                	test   %al,%al
  237d57:	74 31                	je     237d8a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x25a>
  237d59:	3c 01                	cmp    $0x1,%al
  237d5b:	75 35                	jne    237d92 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x262>
  237d5d:	31 c0                	xor    %eax,%eax
  237d5f:	48 89 04 24          	mov    %rax,(%rsp)
  237d63:	eb 41                	jmp    237da6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  237d65:	48 8b 47 20          	mov    0x20(%rdi),%rax
  237d69:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  237d6d:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  237d71:	48 89 c7             	mov    %rax,%rdi
  237d74:	4c 89 e6             	mov    %r12,%rsi
  237d77:	4c 89 fa             	mov    %r15,%rdx
  237d7a:	48 83 c4 08          	add    $0x8,%rsp
  237d7e:	5b                   	pop    %rbx
  237d7f:	41 5c                	pop    %r12
  237d81:	41 5d                	pop    %r13
  237d83:	41 5e                	pop    %r14
  237d85:	41 5f                	pop    %r15
  237d87:	5d                   	pop    %rbp
  237d88:	ff e1                	jmpq   *%rcx
  237d8a:	48 89 1c 24          	mov    %rbx,(%rsp)
  237d8e:	31 db                	xor    %ebx,%ebx
  237d90:	eb 14                	jmp    237da6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  237d92:	48 89 d8             	mov    %rbx,%rax
  237d95:	48 d1 e8             	shr    %rax
  237d98:	48 83 c3 01          	add    $0x1,%rbx
  237d9c:	48 d1 eb             	shr    %rbx
  237d9f:	48 89 1c 24          	mov    %rbx,(%rsp)
  237da3:	48 89 c3             	mov    %rax,%rbx
  237da6:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
  237daa:	4c 8b 77 28          	mov    0x28(%rdi),%r14
  237dae:	8b 6f 34             	mov    0x34(%rdi),%ebp
  237db1:	48 83 c3 01          	add    $0x1,%rbx
  237db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  237dbc:	00 00 00 
  237dbf:	90                   	nop
  237dc0:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  237dc4:	74 15                	je     237ddb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2ab>
  237dc6:	4c 89 ef             	mov    %r13,%rdi
  237dc9:	89 ee                	mov    %ebp,%esi
  237dcb:	41 ff 56 20          	callq  *0x20(%r14)
  237dcf:	84 c0                	test   %al,%al
  237dd1:	74 ed                	je     237dc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x290>
  237dd3:	41 b4 01             	mov    $0x1,%r12b
  237dd6:	e9 85 00 00 00       	jmpq   237e60 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  237ddb:	4c 89 e6             	mov    %r12,%rsi
  237dde:	41 b4 01             	mov    $0x1,%r12b
  237de1:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  237de7:	74 77                	je     237e60 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  237de9:	4c 89 ef             	mov    %r13,%rdi
  237dec:	4c 89 fa             	mov    %r15,%rdx
  237def:	41 ff 56 18          	callq  *0x18(%r14)
  237df3:	84 c0                	test   %al,%al
  237df5:	75 69                	jne    237e60 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  237df7:	4c 8b 24 24          	mov    (%rsp),%r12
  237dfb:	4d 89 e7             	mov    %r12,%r15
  237dfe:	49 f7 df             	neg    %r15
  237e01:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  237e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  237e0f:	00 
  237e10:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  237e14:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  237e18:	74 3c                	je     237e56 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x326>
  237e1a:	4c 89 ef             	mov    %r13,%rdi
  237e1d:	89 ee                	mov    %ebp,%esi
  237e1f:	41 ff 56 20          	callq  *0x20(%r14)
  237e23:	48 83 c3 01          	add    $0x1,%rbx
  237e27:	84 c0                	test   %al,%al
  237e29:	74 e5                	je     237e10 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2e0>
  237e2b:	eb 2c                	jmp    237e59 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x329>
  237e2d:	31 c0                	xor    %eax,%eax
  237e2f:	4c 89 ca             	mov    %r9,%rdx
  237e32:	40 80 fe e0          	cmp    $0xe0,%sil
  237e36:	0f 82 fb fd ff ff    	jb     237c37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  237e3c:	4c 39 ca             	cmp    %r9,%rdx
  237e3f:	74 31                	je     237e72 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x342>
  237e41:	0f b6 2a             	movzbl (%rdx),%ebp
  237e44:	48 83 c2 01          	add    $0x1,%rdx
  237e48:	83 e5 3f             	and    $0x3f,%ebp
  237e4b:	40 80 fe f0          	cmp    $0xf0,%sil
  237e4f:	73 30                	jae    237e81 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x351>
  237e51:	e9 e1 fd ff ff       	jmpq   237c37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  237e56:	4c 89 e3             	mov    %r12,%rbx
  237e59:	4c 39 e3             	cmp    %r12,%rbx
  237e5c:	41 0f 92 c4          	setb   %r12b
  237e60:	44 89 e0             	mov    %r12d,%eax
  237e63:	48 83 c4 08          	add    $0x8,%rsp
  237e67:	5b                   	pop    %rbx
  237e68:	41 5c                	pop    %r12
  237e6a:	41 5d                	pop    %r13
  237e6c:	41 5e                	pop    %r14
  237e6e:	41 5f                	pop    %r15
  237e70:	5d                   	pop    %rbp
  237e71:	c3                   	retq   
  237e72:	31 ed                	xor    %ebp,%ebp
  237e74:	4c 89 ca             	mov    %r9,%rdx
  237e77:	40 80 fe f0          	cmp    $0xf0,%sil
  237e7b:	0f 82 b6 fd ff ff    	jb     237c37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  237e81:	09 c5                	or     %eax,%ebp
  237e83:	4c 39 ca             	cmp    %r9,%rdx
  237e86:	74 08                	je     237e90 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x360>
  237e88:	0f b6 02             	movzbl (%rdx),%eax
  237e8b:	83 e0 3f             	and    $0x3f,%eax
  237e8e:	eb 02                	jmp    237e92 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x362>
  237e90:	31 c0                	xor    %eax,%eax
  237e92:	83 e6 07             	and    $0x7,%esi
  237e95:	c1 e6 12             	shl    $0x12,%esi
  237e98:	c1 e5 06             	shl    $0x6,%ebp
  237e9b:	09 f5                	or     %esi,%ebp
  237e9d:	09 c5                	or     %eax,%ebp
  237e9f:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  237ea5:	0f 84 ea fd ff ff    	je     237c95 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  237eab:	e9 87 fd ff ff       	jmpq   237c37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>

0000000000237eb0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>:
  237eb0:	48 8b 47 20          	mov    0x20(%rdi),%rax
  237eb4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  237eb8:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  237ebc:	48 89 c7             	mov    %rax,%rdi
  237ebf:	ff e1                	jmpq   *%rcx
  237ec1:	cc                   	int3   
  237ec2:	cc                   	int3   
  237ec3:	cc                   	int3   
  237ec4:	cc                   	int3   
  237ec5:	cc                   	int3   
  237ec6:	cc                   	int3   
  237ec7:	cc                   	int3   
  237ec8:	cc                   	int3   
  237ec9:	cc                   	int3   
  237eca:	cc                   	int3   
  237ecb:	cc                   	int3   
  237ecc:	cc                   	int3   
  237ecd:	cc                   	int3   
  237ece:	cc                   	int3   
  237ecf:	cc                   	int3   

0000000000237ed0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>:
  237ed0:	8a 47 30             	mov    0x30(%rdi),%al
  237ed3:	24 04                	and    $0x4,%al
  237ed5:	c0 e8 02             	shr    $0x2,%al
  237ed8:	c3                   	retq   
  237ed9:	cc                   	int3   
  237eda:	cc                   	int3   
  237edb:	cc                   	int3   
  237edc:	cc                   	int3   
  237edd:	cc                   	int3   
  237ede:	cc                   	int3   
  237edf:	cc                   	int3   

0000000000237ee0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>:
  237ee0:	8a 47 30             	mov    0x30(%rdi),%al
  237ee3:	24 10                	and    $0x10,%al
  237ee5:	c0 e8 04             	shr    $0x4,%al
  237ee8:	c3                   	retq   
  237ee9:	cc                   	int3   
  237eea:	cc                   	int3   
  237eeb:	cc                   	int3   
  237eec:	cc                   	int3   
  237eed:	cc                   	int3   
  237eee:	cc                   	int3   
  237eef:	cc                   	int3   

0000000000237ef0 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>:
  237ef0:	8a 47 30             	mov    0x30(%rdi),%al
  237ef3:	24 20                	and    $0x20,%al
  237ef5:	c0 e8 05             	shr    $0x5,%al
  237ef8:	c3                   	retq   
  237ef9:	cc                   	int3   
  237efa:	cc                   	int3   
  237efb:	cc                   	int3   
  237efc:	cc                   	int3   
  237efd:	cc                   	int3   
  237efe:	cc                   	int3   
  237eff:	cc                   	int3   

0000000000237f00 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>:
  237f00:	53                   	push   %rbx
  237f01:	48 89 fb             	mov    %rdi,%rbx
  237f04:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  237f08:	48 8b 43 28          	mov    0x28(%rbx),%rax
  237f0c:	ff 50 18             	callq  *0x18(%rax)
  237f0f:	0f b6 d0             	movzbl %al,%edx
  237f12:	48 89 d8             	mov    %rbx,%rax
  237f15:	5b                   	pop    %rbx
  237f16:	c3                   	retq   
  237f17:	cc                   	int3   
  237f18:	cc                   	int3   
  237f19:	cc                   	int3   
  237f1a:	cc                   	int3   
  237f1b:	cc                   	int3   
  237f1c:	cc                   	int3   
  237f1d:	cc                   	int3   
  237f1e:	cc                   	int3   
  237f1f:	cc                   	int3   

0000000000237f20 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>:
  237f20:	41 57                	push   %r15
  237f22:	41 56                	push   %r14
  237f24:	53                   	push   %rbx
  237f25:	49 89 ce             	mov    %rcx,%r14
  237f28:	49 89 f7             	mov    %rsi,%r15
  237f2b:	48 89 fb             	mov    %rdi,%rbx
  237f2e:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  237f32:	48 8b 46 28          	mov    0x28(%rsi),%rax
  237f36:	48 89 d6             	mov    %rdx,%rsi
  237f39:	48 89 ca             	mov    %rcx,%rdx
  237f3c:	ff 50 18             	callq  *0x18(%rax)
  237f3f:	4d 85 f6             	test   %r14,%r14
  237f42:	4c 89 3b             	mov    %r15,(%rbx)
  237f45:	88 43 10             	mov    %al,0x10(%rbx)
  237f48:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  237f4f:	00 
  237f50:	0f 94 43 11          	sete   0x11(%rbx)
  237f54:	48 89 d8             	mov    %rbx,%rax
  237f57:	5b                   	pop    %rbx
  237f58:	41 5e                	pop    %r14
  237f5a:	41 5f                	pop    %r15
  237f5c:	c3                   	retq   
  237f5d:	cc                   	int3   
  237f5e:	cc                   	int3   
  237f5f:	cc                   	int3   

0000000000237f60 <_ZN4core3fmt9Formatter10debug_list17h63f19364d11dcc32E>:
  237f60:	53                   	push   %rbx
  237f61:	48 89 fb             	mov    %rdi,%rbx
  237f64:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  237f68:	48 8b 43 28          	mov    0x28(%rbx),%rax
  237f6c:	48 8d 35 2b c5 fc ff 	lea    -0x33ad5(%rip),%rsi        # 20449e <anon.8c5785e28e68a0869ce162bce53fbf2c.39.llvm.142292087146638061>
  237f73:	ba 01 00 00 00       	mov    $0x1,%edx
  237f78:	ff 50 18             	callq  *0x18(%rax)
  237f7b:	0f b6 d0             	movzbl %al,%edx
  237f7e:	48 89 d8             	mov    %rbx,%rax
  237f81:	5b                   	pop    %rbx
  237f82:	c3                   	retq   
  237f83:	cc                   	int3   
  237f84:	cc                   	int3   
  237f85:	cc                   	int3   
  237f86:	cc                   	int3   
  237f87:	cc                   	int3   
  237f88:	cc                   	int3   
  237f89:	cc                   	int3   
  237f8a:	cc                   	int3   
  237f8b:	cc                   	int3   
  237f8c:	cc                   	int3   
  237f8d:	cc                   	int3   
  237f8e:	cc                   	int3   
  237f8f:	cc                   	int3   

0000000000237f90 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>:
  237f90:	48 89 f0             	mov    %rsi,%rax
  237f93:	80 3f 00             	cmpb   $0x0,(%rdi)
  237f96:	74 14                	je     237fac <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E+0x1c>
  237f98:	48 8d 35 f9 89 fc ff 	lea    -0x37607(%rip),%rsi        # 200998 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467>
  237f9f:	ba 04 00 00 00       	mov    $0x4,%edx
  237fa4:	48 89 c7             	mov    %rax,%rdi
  237fa7:	e9 84 fb ff ff       	jmpq   237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  237fac:	48 8d 35 99 d2 fc ff 	lea    -0x32d67(%rip),%rsi        # 20524c <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467>
  237fb3:	ba 05 00 00 00       	mov    $0x5,%edx
  237fb8:	48 89 c7             	mov    %rax,%rdi
  237fbb:	e9 70 fb ff ff       	jmpq   237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>

0000000000237fc0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>:
  237fc0:	55                   	push   %rbp
  237fc1:	41 57                	push   %r15
  237fc3:	41 56                	push   %r14
  237fc5:	41 55                	push   %r13
  237fc7:	41 54                	push   %r12
  237fc9:	53                   	push   %rbx
  237fca:	48 83 ec 58          	sub    $0x58,%rsp
  237fce:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  237fd3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  237fd8:	48 8b 5a 20          	mov    0x20(%rdx),%rbx
  237fdc:	48 8b 42 28          	mov    0x28(%rdx),%rax
  237fe0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  237fe5:	48 8b 40 20          	mov    0x20(%rax),%rax
  237fe9:	48 89 df             	mov    %rbx,%rdi
  237fec:	be 22 00 00 00       	mov    $0x22,%esi
  237ff1:	49 89 c7             	mov    %rax,%r15
  237ff4:	ff d0                	callq  *%rax
  237ff6:	84 c0                	test   %al,%al
  237ff8:	74 11                	je     23800b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b>
  237ffa:	b0 01                	mov    $0x1,%al
  237ffc:	48 83 c4 58          	add    $0x58,%rsp
  238000:	5b                   	pop    %rbx
  238001:	41 5c                	pop    %r12
  238003:	41 5d                	pop    %r13
  238005:	41 5e                	pop    %r14
  238007:	41 5f                	pop    %r15
  238009:	5d                   	pop    %rbp
  23800a:	c3                   	retq   
  23800b:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  238010:	4d 85 c9             	test   %r9,%r9
  238013:	0f 84 e4 04 00 00    	je     2384fd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  238019:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23801e:	4a 8d 34 08          	lea    (%rax,%r9,1),%rsi
  238022:	45 31 d2             	xor    %r10d,%r10d
  238025:	4c 8d 35 e0 d0 fc ff 	lea    -0x32f20(%rip),%r14        # 20510c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x6b>
  23802c:	48 8d 15 71 d0 fc ff 	lea    -0x32f8f(%rip),%rdx        # 2050a4 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  238033:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  238038:	49 89 c4             	mov    %rax,%r12
  23803b:	31 c9                	xor    %ecx,%ecx
  23803d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  238042:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  238047:	41 0f b6 3c 24       	movzbl (%r12),%edi
  23804c:	40 84 ff             	test   %dil,%dil
  23804f:	78 08                	js     238059 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x99>
  238051:	49 89 c4             	mov    %rax,%r12
  238054:	e9 a7 00 00 00       	jmpq   238100 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  238059:	48 39 f0             	cmp    %rsi,%rax
  23805c:	74 49                	je     2380a7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xe7>
  23805e:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  238064:	49 83 c4 02          	add    $0x2,%r12
  238068:	83 e0 3f             	and    $0x3f,%eax
  23806b:	89 fd                	mov    %edi,%ebp
  23806d:	83 e5 1f             	and    $0x1f,%ebp
  238070:	40 80 ff df          	cmp    $0xdf,%dil
  238074:	76 41                	jbe    2380b7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xf7>
  238076:	49 39 f4             	cmp    %rsi,%r12
  238079:	74 41                	je     2380bc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xfc>
  23807b:	45 0f b6 04 24       	movzbl (%r12),%r8d
  238080:	49 83 c4 01          	add    $0x1,%r12
  238084:	41 83 e0 3f          	and    $0x3f,%r8d
  238088:	c1 e0 06             	shl    $0x6,%eax
  23808b:	44 09 c0             	or     %r8d,%eax
  23808e:	40 80 ff f0          	cmp    $0xf0,%dil
  238092:	72 3a                	jb     2380ce <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x10e>
  238094:	49 39 f4             	cmp    %rsi,%r12
  238097:	74 3e                	je     2380d7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x117>
  238099:	41 0f b6 3c 24       	movzbl (%r12),%edi
  23809e:	49 83 c4 01          	add    $0x1,%r12
  2380a2:	83 e7 3f             	and    $0x3f,%edi
  2380a5:	eb 35                	jmp    2380dc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x11c>
  2380a7:	31 c0                	xor    %eax,%eax
  2380a9:	49 89 f4             	mov    %rsi,%r12
  2380ac:	89 fd                	mov    %edi,%ebp
  2380ae:	83 e5 1f             	and    $0x1f,%ebp
  2380b1:	40 80 ff df          	cmp    $0xdf,%dil
  2380b5:	77 bf                	ja     238076 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xb6>
  2380b7:	c1 e5 06             	shl    $0x6,%ebp
  2380ba:	eb 15                	jmp    2380d1 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x111>
  2380bc:	45 31 c0             	xor    %r8d,%r8d
  2380bf:	49 89 f4             	mov    %rsi,%r12
  2380c2:	c1 e0 06             	shl    $0x6,%eax
  2380c5:	44 09 c0             	or     %r8d,%eax
  2380c8:	40 80 ff f0          	cmp    $0xf0,%dil
  2380cc:	73 c6                	jae    238094 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xd4>
  2380ce:	c1 e5 0c             	shl    $0xc,%ebp
  2380d1:	09 e8                	or     %ebp,%eax
  2380d3:	89 c7                	mov    %eax,%edi
  2380d5:	eb 29                	jmp    238100 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  2380d7:	31 ff                	xor    %edi,%edi
  2380d9:	49 89 f4             	mov    %rsi,%r12
  2380dc:	83 e5 07             	and    $0x7,%ebp
  2380df:	c1 e5 12             	shl    $0x12,%ebp
  2380e2:	c1 e0 06             	shl    $0x6,%eax
  2380e5:	09 e8                	or     %ebp,%eax
  2380e7:	09 f8                	or     %edi,%eax
  2380e9:	89 c7                	mov    %eax,%edi
  2380eb:	3d 00 00 11 00       	cmp    $0x110000,%eax
  2380f0:	0f 84 ec 03 00 00    	je     2384e2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x522>
  2380f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2380fd:	00 00 00 
  238100:	bd 02 00 00 00       	mov    $0x2,%ebp
  238105:	8d 47 f7             	lea    -0x9(%rdi),%eax
  238108:	83 f8 19             	cmp    $0x19,%eax
  23810b:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  238110:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  238115:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  23811a:	77 1e                	ja     23813a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x17a>
  23811c:	c7 44 24 0c 74 00 00 	movl   $0x74,0xc(%rsp)
  238123:	00 
  238124:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
  238128:	48 01 d0             	add    %rdx,%rax
  23812b:	ff e0                	jmpq   *%rax
  23812d:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  238134:	00 
  238135:	e9 86 01 00 00       	jmpq   2382c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  23813a:	83 ff 5c             	cmp    $0x5c,%edi
  23813d:	75 0b                	jne    23814a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x18a>
  23813f:	89 f8                	mov    %edi,%eax
  238141:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  238145:	e9 76 01 00 00       	jmpq   2382c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  23814a:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  23814f:	e8 4c d9 ff ff       	callq  235aa0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  238154:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  238159:	84 c0                	test   %al,%al
  23815b:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  238160:	0f 85 19 01 00 00    	jne    23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238166:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  23816c:	73 4c                	jae    2381ba <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x1fa>
  23816e:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  238175:	00 
  238176:	ba 28 00 00 00       	mov    $0x28,%edx
  23817b:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  238181:	48 8d 35 a9 c8 fc ff 	lea    -0x33757(%rip),%rsi        # 204a31 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  238188:	48 8d 0d f2 c8 fc ff 	lea    -0x3370e(%rip),%rcx        # 204a81 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  23818f:	4c 8d 0d 0b ca fc ff 	lea    -0x335f5(%rip),%r9        # 204ba1 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  238196:	e8 45 e6 ff ff       	callq  2367e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  23819b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2381a0:	84 c0                	test   %al,%al
  2381a2:	0f 84 d7 00 00 00    	je     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  2381a8:	e9 ad 00 00 00       	jmpq   23825a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  2381ad:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  2381b4:	00 
  2381b5:	e9 06 01 00 00       	jmpq   2382c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  2381ba:	81 ff 00 00 02 00    	cmp    $0x20000,%edi
  2381c0:	73 3b                	jae    2381fd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x23d>
  2381c2:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  2381c9:	00 
  2381ca:	ba 2a 00 00 00       	mov    $0x2a,%edx
  2381cf:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  2381d5:	48 8d 35 f4 ca fc ff 	lea    -0x3350c(%rip),%rsi        # 204cd0 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  2381dc:	48 8d 0d 41 cb fc ff 	lea    -0x334bf(%rip),%rcx        # 204d24 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  2381e3:	4c 8d 0d fa cb fc ff 	lea    -0x33406(%rip),%r9        # 204de4 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  2381ea:	e8 f1 e5 ff ff       	callq  2367e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  2381ef:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2381f4:	84 c0                	test   %al,%al
  2381f6:	75 62                	jne    23825a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  2381f8:	e9 82 00 00 00       	jmpq   23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  2381fd:	89 f8                	mov    %edi,%eax
  2381ff:	83 e0 e0             	and    $0xffffffe0,%eax
  238202:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  238207:	74 76                	je     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238209:	8d 87 c7 48 fd ff    	lea    -0x2b739(%rdi),%eax
  23820f:	83 f8 07             	cmp    $0x7,%eax
  238212:	72 6b                	jb     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238214:	89 f8                	mov    %edi,%eax
  238216:	83 e0 fe             	and    $0xfffffffe,%eax
  238219:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  23821e:	74 5f                	je     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238220:	8d 87 5e 31 fd ff    	lea    -0x2cea2(%rdi),%eax
  238226:	83 f8 0e             	cmp    $0xe,%eax
  238229:	72 54                	jb     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  23822b:	8d 87 1f 14 fd ff    	lea    -0x2ebe1(%rdi),%eax
  238231:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  238236:	72 47                	jb     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238238:	8d 87 e2 05 fd ff    	lea    -0x2fa1e(%rdi),%eax
  23823e:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  238243:	72 3a                	jb     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238245:	8d 87 b5 ec fc ff    	lea    -0x3134b(%rdi),%eax
  23824b:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  238250:	72 2d                	jb     23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  238252:	81 ff f0 01 0e 00    	cmp    $0xe01f0,%edi
  238258:	73 25                	jae    23827f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  23825a:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  23825f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  238264:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  238269:	48 8d 15 34 ce fc ff 	lea    -0x331cc(%rip),%rdx        # 2050a4 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  238270:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  238275:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  23827a:	e9 4f 02 00 00       	jmpq   2384ce <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x50e>
  23827f:	89 f8                	mov    %edi,%eax
  238281:	83 c8 01             	or     $0x1,%eax
  238284:	44 0f bd e0          	bsr    %eax,%r12d
  238288:	41 83 f4 1c          	xor    $0x1c,%r12d
  23828c:	41 c1 ec 02          	shr    $0x2,%r12d
  238290:	41 83 f4 07          	xor    $0x7,%r12d
  238294:	41 89 fd             	mov    %edi,%r13d
  238297:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
  23829e:	00 00 00 
  2382a1:	49 09 c5             	or     %rax,%r13
  2382a4:	bd 03 00 00 00       	mov    $0x3,%ebp
  2382a9:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  2382ae:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2382b3:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  2382b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  2382bf:	00 
  2382c0:	48 89 ca             	mov    %rcx,%rdx
  2382c3:	4c 29 d2             	sub    %r10,%rdx
  2382c6:	0f 82 90 02 00 00    	jb     23855c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2382cc:	4d 85 d2             	test   %r10,%r10
  2382cf:	74 1c                	je     2382ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  2382d1:	4d 39 ca             	cmp    %r9,%r10
  2382d4:	73 11                	jae    2382e7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x327>
  2382d6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2382db:	42 80 3c 10 c0       	cmpb   $0xc0,(%rax,%r10,1)
  2382e0:	7d 0b                	jge    2382ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  2382e2:	e9 75 02 00 00       	jmpq   23855c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2382e7:	0f 85 6f 02 00 00    	jne    23855c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2382ed:	48 85 c9             	test   %rcx,%rcx
  2382f0:	74 1b                	je     23830d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  2382f2:	4c 39 c9             	cmp    %r9,%rcx
  2382f5:	73 10                	jae    238307 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x347>
  2382f7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2382fc:	80 3c 08 bf          	cmpb   $0xbf,(%rax,%rcx,1)
  238300:	7f 0b                	jg     23830d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  238302:	e9 55 02 00 00       	jmpq   23855c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  238307:	0f 85 4f 02 00 00    	jne    23855c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  23830d:	4c 03 54 24 10       	add    0x10(%rsp),%r10
  238312:	48 89 df             	mov    %rbx,%rdi
  238315:	4c 89 d6             	mov    %r10,%rsi
  238318:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  23831d:	ff 50 18             	callq  *0x18(%rax)
  238320:	eb 1a                	jmp    23833c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x37c>
  238322:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  238329:	00 00 00 
  23832c:	0f 1f 40 00          	nopl   0x0(%rax)
  238330:	31 ed                	xor    %ebp,%ebp
  238332:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  238336:	48 89 df             	mov    %rbx,%rdi
  238339:	41 ff d7             	callq  *%r15
  23833c:	84 c0                	test   %al,%al
  23833e:	0f 85 b6 fc ff ff    	jne    237ffa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  238344:	be 5c 00 00 00       	mov    $0x5c,%esi
  238349:	89 e8                	mov    %ebp,%eax
  23834b:	49 63 04 86          	movslq (%r14,%rax,4),%rax
  23834f:	4c 01 f0             	add    %r14,%rax
  238352:	bd 01 00 00 00       	mov    $0x1,%ebp
  238357:	ff e0                	jmpq   *%rax
  238359:	4c 89 e8             	mov    %r13,%rax
  23835c:	48 c1 e8 20          	shr    $0x20,%rax
  238360:	0f b6 c0             	movzbl %al,%eax
  238363:	48 8d 0d b2 cd fc ff 	lea    -0x3324e(%rip),%rcx        # 20511c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x7b>
  23836a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23836e:	48 01 c8             	add    %rcx,%rax
  238371:	ff e0                	jmpq   *%rax
  238373:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  23837a:	49 21 c4             	and    %rax,%r12
  23837d:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  238384:	ff ff ff 
  238387:	49 21 c5             	and    %rax,%r13
  23838a:	bd 03 00 00 00       	mov    $0x3,%ebp
  23838f:	be 7d 00 00 00       	mov    $0x7d,%esi
  238394:	eb a0                	jmp    238336 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  238396:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  23839d:	49 21 c4             	and    %rax,%r12
  2383a0:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  2383a7:	ff ff ff 
  2383aa:	49 21 c5             	and    %rax,%r13
  2383ad:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  2383b4:	00 00 00 
  2383b7:	49 09 c5             	or     %rax,%r13
  2383ba:	bd 03 00 00 00       	mov    $0x3,%ebp
  2383bf:	be 75 00 00 00       	mov    $0x75,%esi
  2383c4:	e9 6d ff ff ff       	jmpq   238336 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  2383c9:	42 8d 0c a5 00 00 00 	lea    0x0(,%r12,4),%ecx
  2383d0:	00 
  2383d1:	44 89 e8             	mov    %r13d,%eax
  2383d4:	d3 e8                	shr    %cl,%eax
  2383d6:	83 e0 0f             	and    $0xf,%eax
  2383d9:	8d 48 57             	lea    0x57(%rax),%ecx
  2383dc:	89 c6                	mov    %eax,%esi
  2383de:	83 ce 30             	or     $0x30,%esi
  2383e1:	3c 0a                	cmp    $0xa,%al
  2383e3:	0f 43 f1             	cmovae %ecx,%esi
  2383e6:	4d 85 e4             	test   %r12,%r12
  2383e9:	74 64                	je     23844f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x48f>
  2383eb:	49 83 c4 ff          	add    $0xffffffffffffffff,%r12
  2383ef:	bd 03 00 00 00       	mov    $0x3,%ebp
  2383f4:	e9 3d ff ff ff       	jmpq   238336 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  2383f9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  238400:	49 21 c4             	and    %rax,%r12
  238403:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  23840a:	ff ff ff 
  23840d:	49 21 c5             	and    %rax,%r13
  238410:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  238417:	00 00 00 
  23841a:	49 09 c5             	or     %rax,%r13
  23841d:	bd 03 00 00 00       	mov    $0x3,%ebp
  238422:	be 7b 00 00 00       	mov    $0x7b,%esi
  238427:	e9 0a ff ff ff       	jmpq   238336 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  23842c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  238433:	49 21 c4             	and    %rax,%r12
  238436:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  23843d:	ff ff ff 
  238440:	49 21 c5             	and    %rax,%r13
  238443:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  23844a:	00 00 00 
  23844d:	eb 21                	jmp    238470 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b0>
  23844f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  238456:	49 21 c4             	and    %rax,%r12
  238459:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  238460:	ff ff ff 
  238463:	49 21 c5             	and    %rax,%r13
  238466:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  23846d:	00 00 00 
  238470:	49 09 c5             	or     %rax,%r13
  238473:	bd 03 00 00 00       	mov    $0x3,%ebp
  238478:	e9 b9 fe ff ff       	jmpq   238336 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  23847d:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  238483:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  238488:	3d 80 00 00 00       	cmp    $0x80,%eax
  23848d:	72 1c                	jb     2384ab <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  23848f:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  238495:	3d 00 08 00 00       	cmp    $0x800,%eax
  23849a:	72 0f                	jb     2384ab <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  23849c:	3d 00 00 01 00       	cmp    $0x10000,%eax
  2384a1:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  2384a7:	49 83 da 00          	sbb    $0x0,%r10
  2384ab:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2384b0:	49 01 ca             	add    %rcx,%r10
  2384b3:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  2384b8:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2384bd:	48 8d 15 e0 cb fc ff 	lea    -0x33420(%rip),%rdx        # 2050a4 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  2384c4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2384c9:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  2384ce:	48 29 c1             	sub    %rax,%rcx
  2384d1:	4c 01 e1             	add    %r12,%rcx
  2384d4:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  2384d9:	49 39 f4             	cmp    %rsi,%r12
  2384dc:	0f 85 60 fb ff ff    	jne    238042 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x82>
  2384e2:	4d 85 d2             	test   %r10,%r10
  2384e5:	74 16                	je     2384fd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  2384e7:	4d 39 ca             	cmp    %r9,%r10
  2384ea:	73 4f                	jae    23853b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x57b>
  2384ec:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2384f1:	42 80 3c 10 bf       	cmpb   $0xbf,(%rax,%r10,1)
  2384f6:	7e 48                	jle    238540 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x580>
  2384f8:	4c 89 d0             	mov    %r10,%rax
  2384fb:	eb 02                	jmp    2384ff <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  2384fd:	31 c0                	xor    %eax,%eax
  2384ff:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  238504:	48 01 c6             	add    %rax,%rsi
  238507:	49 29 c1             	sub    %rax,%r9
  23850a:	48 89 df             	mov    %rbx,%rdi
  23850d:	4c 89 ca             	mov    %r9,%rdx
  238510:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  238515:	ff 50 18             	callq  *0x18(%rax)
  238518:	84 c0                	test   %al,%al
  23851a:	0f 85 da fa ff ff    	jne    237ffa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  238520:	48 89 df             	mov    %rbx,%rdi
  238523:	be 22 00 00 00       	mov    $0x22,%esi
  238528:	4c 89 f8             	mov    %r15,%rax
  23852b:	48 83 c4 58          	add    $0x58,%rsp
  23852f:	5b                   	pop    %rbx
  238530:	41 5c                	pop    %r12
  238532:	41 5d                	pop    %r13
  238534:	41 5e                	pop    %r14
  238536:	41 5f                	pop    %r15
  238538:	5d                   	pop    %rbp
  238539:	ff e0                	jmpq   *%rax
  23853b:	4c 89 c8             	mov    %r9,%rax
  23853e:	74 bf                	je     2384ff <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  238540:	4c 8d 05 e9 55 00 00 	lea    0x55e9(%rip),%r8        # 23db30 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x48>
  238547:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  23854c:	4c 89 ce             	mov    %r9,%rsi
  23854f:	4c 89 d2             	mov    %r10,%rdx
  238552:	4c 89 c9             	mov    %r9,%rcx
  238555:	e8 d6 e8 ff ff       	callq  236e30 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  23855a:	0f 0b                	ud2    
  23855c:	4c 8d 05 b5 55 00 00 	lea    0x55b5(%rip),%r8        # 23db18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x30>
  238563:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  238568:	4c 89 ce             	mov    %r9,%rsi
  23856b:	4c 89 d2             	mov    %r10,%rdx
  23856e:	e8 bd e8 ff ff       	callq  236e30 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  238573:	0f 0b                	ud2    
  238575:	cc                   	int3   
  238576:	cc                   	int3   
  238577:	cc                   	int3   
  238578:	cc                   	int3   
  238579:	cc                   	int3   
  23857a:	cc                   	int3   
  23857b:	cc                   	int3   
  23857c:	cc                   	int3   
  23857d:	cc                   	int3   
  23857e:	cc                   	int3   
  23857f:	cc                   	int3   

0000000000238580 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>:
  238580:	48 89 d0             	mov    %rdx,%rax
  238583:	48 89 f2             	mov    %rsi,%rdx
  238586:	48 89 fe             	mov    %rdi,%rsi
  238589:	48 89 c7             	mov    %rax,%rdi
  23858c:	e9 9f f5 ff ff       	jmpq   237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  238591:	cc                   	int3   
  238592:	cc                   	int3   
  238593:	cc                   	int3   
  238594:	cc                   	int3   
  238595:	cc                   	int3   
  238596:	cc                   	int3   
  238597:	cc                   	int3   
  238598:	cc                   	int3   
  238599:	cc                   	int3   
  23859a:	cc                   	int3   
  23859b:	cc                   	int3   
  23859c:	cc                   	int3   
  23859d:	cc                   	int3   
  23859e:	cc                   	int3   
  23859f:	cc                   	int3   

00000000002385a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E>:
  2385a0:	55                   	push   %rbp
  2385a1:	41 57                	push   %r15
  2385a3:	41 56                	push   %r14
  2385a5:	41 55                	push   %r13
  2385a7:	41 54                	push   %r12
  2385a9:	53                   	push   %rbx
  2385aa:	48 83 ec 18          	sub    $0x18,%rsp
  2385ae:	49 89 fe             	mov    %rdi,%r14
  2385b1:	48 8b 5e 20          	mov    0x20(%rsi),%rbx
  2385b5:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2385b9:	48 8b 40 20          	mov    0x20(%rax),%rax
  2385bd:	48 89 df             	mov    %rbx,%rdi
  2385c0:	be 27 00 00 00       	mov    $0x27,%esi
  2385c5:	49 89 c7             	mov    %rax,%r15
  2385c8:	ff d0                	callq  *%rax
  2385ca:	84 c0                	test   %al,%al
  2385cc:	74 11                	je     2385df <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x3f>
  2385ce:	b0 01                	mov    $0x1,%al
  2385d0:	48 83 c4 18          	add    $0x18,%rsp
  2385d4:	5b                   	pop    %rbx
  2385d5:	41 5c                	pop    %r12
  2385d7:	41 5d                	pop    %r13
  2385d9:	41 5e                	pop    %r14
  2385db:	41 5f                	pop    %r15
  2385dd:	5d                   	pop    %rbp
  2385de:	c3                   	retq   
  2385df:	41 8b 3e             	mov    (%r14),%edi
  2385e2:	8d 4f f7             	lea    -0x9(%rdi),%ecx
  2385e5:	83 f9 1e             	cmp    $0x1e,%ecx
  2385e8:	77 5a                	ja     238644 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xa4>
  2385ea:	be 74 00 00 00       	mov    $0x74,%esi
  2385ef:	b8 02 00 00 00       	mov    $0x2,%eax
  2385f4:	48 8d 15 39 cb fc ff 	lea    -0x334c7(%rip),%rdx        # 205134 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x93>
  2385fb:	48 63 0c 8a          	movslq (%rdx,%rcx,4),%rcx
  2385ff:	48 01 d1             	add    %rdx,%rcx
  238602:	ff e1                	jmpq   *%rcx
  238604:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  23860b:	00 
  23860c:	b8 02 00 00 00       	mov    $0x2,%eax
  238611:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  238618:	ff ff ff 
  23861b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  238620:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  238627:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  23862d:	be 5c 00 00 00       	mov    $0x5c,%esi
  238632:	89 c0                	mov    %eax,%eax
  238634:	48 8d 0d 75 cb fc ff 	lea    -0x3348b(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  23863b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23863f:	48 01 c8             	add    %rcx,%rax
  238642:	ff e0                	jmpq   *%rax
  238644:	83 ff 5c             	cmp    $0x5c,%edi
  238647:	75 3e                	jne    238687 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xe7>
  238649:	b8 02 00 00 00       	mov    $0x2,%eax
  23864e:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  238655:	ff ff ff 
  238658:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  23865d:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  238664:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  23866a:	be 5c 00 00 00       	mov    $0x5c,%esi
  23866f:	89 c0                	mov    %eax,%eax
  238671:	48 8d 0d 38 cb fc ff 	lea    -0x334c8(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  238678:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23867c:	48 01 c8             	add    %rcx,%rax
  23867f:	89 f9                	mov    %edi,%ecx
  238681:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  238685:	ff e0                	jmpq   *%rax
  238687:	48 89 fd             	mov    %rdi,%rbp
  23868a:	e8 11 d4 ff ff       	callq  235aa0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  23868f:	84 c0                	test   %al,%al
  238691:	0f 84 d4 00 00 00    	je     23876b <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x1cb>
  238697:	89 e8                	mov    %ebp,%eax
  238699:	83 cd 01             	or     $0x1,%ebp
  23869c:	0f bd ed             	bsr    %ebp,%ebp
  23869f:	83 f5 1c             	xor    $0x1c,%ebp
  2386a2:	c1 ed 02             	shr    $0x2,%ebp
  2386a5:	83 f5 07             	xor    $0x7,%ebp
  2386a8:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  2386af:	00 00 00 
  2386b2:	49 09 c6             	or     %rax,%r14
  2386b5:	b8 03 00 00 00       	mov    $0x3,%eax
  2386ba:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  2386c1:	ff ff ff 
  2386c4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2386c9:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  2386d0:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  2386d6:	be 5c 00 00 00       	mov    $0x5c,%esi
  2386db:	89 c0                	mov    %eax,%eax
  2386dd:	48 8d 0d cc ca fc ff 	lea    -0x33534(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2386e4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2386e8:	48 01 c8             	add    %rcx,%rax
  2386eb:	ff e0                	jmpq   *%rax
  2386ed:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  2386f4:	00 
  2386f5:	b8 02 00 00 00       	mov    $0x2,%eax
  2386fa:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  238701:	ff ff ff 
  238704:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  238709:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  238710:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  238716:	be 5c 00 00 00       	mov    $0x5c,%esi
  23871b:	89 c0                	mov    %eax,%eax
  23871d:	48 8d 0d 8c ca fc ff 	lea    -0x33574(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  238724:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  238728:	48 01 c8             	add    %rcx,%rax
  23872b:	ff e0                	jmpq   *%rax
  23872d:	b8 02 00 00 00       	mov    $0x2,%eax
  238732:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  238739:	ff ff ff 
  23873c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  238741:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  238748:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  23874e:	be 5c 00 00 00       	mov    $0x5c,%esi
  238753:	89 c0                	mov    %eax,%eax
  238755:	48 8d 0d 54 ca fc ff 	lea    -0x335ac(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  23875c:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  238760:	48 01 c8             	add    %rcx,%rax
  238763:	89 f9                	mov    %edi,%ecx
  238765:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  238769:	ff e0                	jmpq   *%rax
  23876b:	81 fd 00 00 01 00    	cmp    $0x10000,%ebp
  238771:	73 3c                	jae    2387af <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x20f>
  238773:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  23877a:	00 
  23877b:	48 8d 35 af c2 fc ff 	lea    -0x33d51(%rip),%rsi        # 204a31 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  238782:	48 8d 0d f8 c2 fc ff 	lea    -0x33d08(%rip),%rcx        # 204a81 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  238789:	4c 8d 0d 11 c4 fc ff 	lea    -0x33bef(%rip),%r9        # 204ba1 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  238790:	ba 28 00 00 00       	mov    $0x28,%edx
  238795:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  23879b:	89 ef                	mov    %ebp,%edi
  23879d:	e8 3e e0 ff ff       	callq  2367e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  2387a2:	84 c0                	test   %al,%al
  2387a4:	0f 85 9f 00 00 00    	jne    238849 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  2387aa:	e9 a3 00 00 00       	jmpq   238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2387af:	81 fd 00 00 02 00    	cmp    $0x20000,%ebp
  2387b5:	73 35                	jae    2387ec <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x24c>
  2387b7:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  2387be:	00 
  2387bf:	48 8d 35 0a c5 fc ff 	lea    -0x33af6(%rip),%rsi        # 204cd0 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  2387c6:	48 8d 0d 57 c5 fc ff 	lea    -0x33aa9(%rip),%rcx        # 204d24 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  2387cd:	4c 8d 0d 10 c6 fc ff 	lea    -0x339f0(%rip),%r9        # 204de4 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  2387d4:	ba 2a 00 00 00       	mov    $0x2a,%edx
  2387d9:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  2387df:	89 ef                	mov    %ebp,%edi
  2387e1:	e8 fa df ff ff       	callq  2367e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  2387e6:	84 c0                	test   %al,%al
  2387e8:	75 5f                	jne    238849 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  2387ea:	eb 66                	jmp    238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2387ec:	89 e8                	mov    %ebp,%eax
  2387ee:	83 e0 e0             	and    $0xffffffe0,%eax
  2387f1:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  2387f6:	74 5a                	je     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2387f8:	8d 85 c7 48 fd ff    	lea    -0x2b739(%rbp),%eax
  2387fe:	83 f8 07             	cmp    $0x7,%eax
  238801:	72 4f                	jb     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  238803:	89 e8                	mov    %ebp,%eax
  238805:	83 e0 fe             	and    $0xfffffffe,%eax
  238808:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  23880d:	74 43                	je     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23880f:	8d 85 5e 31 fd ff    	lea    -0x2cea2(%rbp),%eax
  238815:	83 f8 0e             	cmp    $0xe,%eax
  238818:	72 38                	jb     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23881a:	8d 85 1f 14 fd ff    	lea    -0x2ebe1(%rbp),%eax
  238820:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  238825:	72 2b                	jb     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  238827:	8d 85 e2 05 fd ff    	lea    -0x2fa1e(%rbp),%eax
  23882d:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  238832:	72 1e                	jb     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  238834:	8d 85 b5 ec fc ff    	lea    -0x3134b(%rbp),%eax
  23883a:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  23883f:	72 11                	jb     238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  238841:	81 fd f0 01 0e 00    	cmp    $0xe01f0,%ebp
  238847:	73 09                	jae    238852 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  238849:	b8 01 00 00 00       	mov    $0x1,%eax
  23884e:	89 ee                	mov    %ebp,%esi
  238850:	eb 23                	jmp    238875 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2d5>
  238852:	89 e8                	mov    %ebp,%eax
  238854:	83 cd 01             	or     $0x1,%ebp
  238857:	0f bd ed             	bsr    %ebp,%ebp
  23885a:	83 f5 1c             	xor    $0x1c,%ebp
  23885d:	c1 ed 02             	shr    $0x2,%ebp
  238860:	83 f5 07             	xor    $0x7,%ebp
  238863:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  23886a:	00 00 00 
  23886d:	49 09 c6             	or     %rax,%r14
  238870:	b8 03 00 00 00       	mov    $0x3,%eax
  238875:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  238879:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  238880:	ff ff ff 
  238883:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  238888:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  23888f:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  238895:	be 5c 00 00 00       	mov    $0x5c,%esi
  23889a:	89 c0                	mov    %eax,%eax
  23889c:	48 8d 0d 0d c9 fc ff 	lea    -0x336f3(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2388a3:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2388a7:	48 01 c8             	add    %rcx,%rax
  2388aa:	ff e0                	jmpq   *%rax
  2388ac:	0f 1f 40 00          	nopl   0x0(%rax)
  2388b0:	48 89 df             	mov    %rbx,%rdi
  2388b3:	41 ff d7             	callq  *%r15
  2388b6:	84 c0                	test   %al,%al
  2388b8:	0f 85 10 fd ff ff    	jne    2385ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2e>
  2388be:	be 5c 00 00 00       	mov    $0x5c,%esi
  2388c3:	44 89 e0             	mov    %r12d,%eax
  2388c6:	48 8d 0d e3 c8 fc ff 	lea    -0x3371d(%rip),%rcx        # 2051b0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2388cd:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2388d1:	48 01 c8             	add    %rcx,%rax
  2388d4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  2388da:	ff e0                	jmpq   *%rax
  2388dc:	45 31 e4             	xor    %r12d,%r12d
  2388df:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  2388e3:	eb cb                	jmp    2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2388e5:	4c 89 f0             	mov    %r14,%rax
  2388e8:	48 c1 e8 20          	shr    $0x20,%rax
  2388ec:	0f b6 c0             	movzbl %al,%eax
  2388ef:	48 8d 0d ca c8 fc ff 	lea    -0x33736(%rip),%rcx        # 2051c0 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x11f>
  2388f6:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2388fa:	48 01 c8             	add    %rcx,%rax
  2388fd:	ff e0                	jmpq   *%rax
  2388ff:	4c 21 ed             	and    %r13,%rbp
  238902:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  238907:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  23890d:	be 7d 00 00 00       	mov    $0x7d,%esi
  238912:	eb 9c                	jmp    2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  238914:	8d 0c ad 00 00 00 00 	lea    0x0(,%rbp,4),%ecx
  23891b:	44 89 f0             	mov    %r14d,%eax
  23891e:	d3 e8                	shr    %cl,%eax
  238920:	83 e0 0f             	and    $0xf,%eax
  238923:	8d 48 57             	lea    0x57(%rax),%ecx
  238926:	89 c6                	mov    %eax,%esi
  238928:	83 ce 30             	or     $0x30,%esi
  23892b:	3c 0a                	cmp    $0xa,%al
  23892d:	0f 43 f1             	cmovae %ecx,%esi
  238930:	48 85 ed             	test   %rbp,%rbp
  238933:	74 7e                	je     2389b3 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x413>
  238935:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  238939:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  23893f:	e9 6c ff ff ff       	jmpq   2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  238944:	4c 21 ed             	and    %r13,%rbp
  238947:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  23894c:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  238953:	00 00 00 
  238956:	49 09 c6             	or     %rax,%r14
  238959:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  23895f:	be 7b 00 00 00       	mov    $0x7b,%esi
  238964:	e9 47 ff ff ff       	jmpq   2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  238969:	4c 21 ed             	and    %r13,%rbp
  23896c:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  238971:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  238978:	00 00 00 
  23897b:	49 09 c6             	or     %rax,%r14
  23897e:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  238984:	be 75 00 00 00       	mov    $0x75,%esi
  238989:	e9 22 ff ff ff       	jmpq   2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  23898e:	4c 21 ed             	and    %r13,%rbp
  238991:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  238996:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  23899d:	00 00 00 
  2389a0:	49 09 c6             	or     %rax,%r14
  2389a3:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2389a9:	be 5c 00 00 00       	mov    $0x5c,%esi
  2389ae:	e9 fd fe ff ff       	jmpq   2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2389b3:	4c 21 ed             	and    %r13,%rbp
  2389b6:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  2389bb:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  2389c2:	00 00 00 
  2389c5:	49 09 c6             	or     %rax,%r14
  2389c8:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2389ce:	e9 dd fe ff ff       	jmpq   2388b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2389d3:	48 89 df             	mov    %rbx,%rdi
  2389d6:	be 27 00 00 00       	mov    $0x27,%esi
  2389db:	4c 89 f8             	mov    %r15,%rax
  2389de:	48 83 c4 18          	add    $0x18,%rsp
  2389e2:	5b                   	pop    %rbx
  2389e3:	41 5c                	pop    %r12
  2389e5:	41 5d                	pop    %r13
  2389e7:	41 5e                	pop    %r14
  2389e9:	41 5f                	pop    %r15
  2389eb:	5d                   	pop    %rbp
  2389ec:	ff e0                	jmpq   *%rax
  2389ee:	cc                   	int3   
  2389ef:	cc                   	int3   

00000000002389f0 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h558b5ba4ec7667bfE>:
  2389f0:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2389f4:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2389f8:	48 8b 40 18          	mov    0x18(%rax),%rax
  2389fc:	48 8d 35 4e c8 fc ff 	lea    -0x337b2(%rip),%rsi        # 205251 <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467+0x5>
  238a03:	ba 05 00 00 00       	mov    $0x5,%edx
  238a08:	ff e0                	jmpq   *%rax
  238a0a:	cc                   	int3   
  238a0b:	cc                   	int3   
  238a0c:	cc                   	int3   
  238a0d:	cc                   	int3   
  238a0e:	cc                   	int3   
  238a0f:	cc                   	int3   

0000000000238a10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>:
  238a10:	48 8b 07             	mov    (%rdi),%rax
  238a13:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  238a17:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  238a1b:	48 89 c7             	mov    %rax,%rdi
  238a1e:	ff e1                	jmpq   *%rcx

0000000000238a20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE>:
  238a20:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  238a27:	48 8b 07             	mov    (%rdi),%rax
  238a2a:	8b 4e 30             	mov    0x30(%rsi),%ecx
  238a2d:	f6 c1 10             	test   $0x10,%cl
  238a30:	0f 85 dd 00 00 00    	jne    238b13 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xf3>
  238a36:	f6 c1 20             	test   $0x20,%cl
  238a39:	0f 85 20 01 00 00    	jne    238b5f <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x13f>
  238a3f:	4c 8b 10             	mov    (%rax),%r10
  238a42:	b9 27 00 00 00       	mov    $0x27,%ecx
  238a47:	49 81 fa 10 27 00 00 	cmp    $0x2710,%r10
  238a4e:	0f 82 8b 01 00 00    	jb     238bdf <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1bf>
  238a54:	41 bb 27 00 00 00    	mov    $0x27,%r11d
  238a5a:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  238a61:	c5 6d 34 
  238a64:	4c 8d 0d dd b8 fc ff 	lea    -0x34723(%rip),%r9        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  238a6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  238a70:	4c 89 d0             	mov    %r10,%rax
  238a73:	49 f7 e0             	mul    %r8
  238a76:	48 c1 ea 0b          	shr    $0xb,%rdx
  238a7a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  238a80:	44 89 d1             	mov    %r10d,%ecx
  238a83:	29 c1                	sub    %eax,%ecx
  238a85:	0f b7 c1             	movzwl %cx,%eax
  238a88:	c1 e8 02             	shr    $0x2,%eax
  238a8b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  238a91:	c1 e8 11             	shr    $0x11,%eax
  238a94:	6b f8 64             	imul   $0x64,%eax,%edi
  238a97:	29 f9                	sub    %edi,%ecx
  238a99:	0f b7 f9             	movzwl %cx,%edi
  238a9c:	49 8d 4b fc          	lea    -0x4(%r11),%rcx
  238aa0:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  238aa5:	66 42 89 44 1c 04    	mov    %ax,0x4(%rsp,%r11,1)
  238aab:	41 0f b7 04 79       	movzwl (%r9,%rdi,2),%eax
  238ab0:	66 42 89 44 1c 06    	mov    %ax,0x6(%rsp,%r11,1)
  238ab6:	49 89 cb             	mov    %rcx,%r11
  238ab9:	49 81 fa ff e0 f5 05 	cmp    $0x5f5e0ff,%r10
  238ac0:	49 89 d2             	mov    %rdx,%r10
  238ac3:	77 ab                	ja     238a70 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x50>
  238ac5:	48 83 fa 63          	cmp    $0x63,%rdx
  238ac9:	7e 2e                	jle    238af9 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xd9>
  238acb:	0f b7 c2             	movzwl %dx,%eax
  238ace:	c1 e8 02             	shr    $0x2,%eax
  238ad1:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  238ad7:	c1 e8 11             	shr    $0x11,%eax
  238ada:	6b f8 64             	imul   $0x64,%eax,%edi
  238add:	29 fa                	sub    %edi,%edx
  238adf:	0f b7 d2             	movzwl %dx,%edx
  238ae2:	48 8d 3d 5f b8 fc ff 	lea    -0x347a1(%rip),%rdi        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  238ae9:	0f b7 14 57          	movzwl (%rdi,%rdx,2),%edx
  238aed:	66 89 54 0c 06       	mov    %dx,0x6(%rsp,%rcx,1)
  238af2:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  238af6:	48 89 c2             	mov    %rax,%rdx
  238af9:	48 83 fa 0a          	cmp    $0xa,%rdx
  238afd:	0f 8d ee 00 00 00    	jge    238bf1 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1d1>
  238b03:	80 c2 30             	add    $0x30,%dl
  238b06:	88 54 0c 07          	mov    %dl,0x7(%rsp,%rcx,1)
  238b0a:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  238b0e:	e9 f2 00 00 00       	jmpq   238c05 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1e5>
  238b13:	48 8b 00             	mov    (%rax),%rax
  238b16:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  238b1d:	00 
  238b1e:	45 31 c9             	xor    %r9d,%r9d
  238b21:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  238b27:	48 89 c2             	mov    %rax,%rdx
  238b2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  238b30:	48 c1 ea 04          	shr    $0x4,%rdx
  238b34:	89 c1                	mov    %eax,%ecx
  238b36:	80 e1 0f             	and    $0xf,%cl
  238b39:	80 f9 0a             	cmp    $0xa,%cl
  238b3c:	bf 57 00 00 00       	mov    $0x57,%edi
  238b41:	41 0f 42 fa          	cmovb  %r10d,%edi
  238b45:	40 00 cf             	add    %cl,%dil
  238b48:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  238b4c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  238b50:	49 83 c1 01          	add    $0x1,%r9
  238b54:	48 83 f8 0f          	cmp    $0xf,%rax
  238b58:	48 89 d0             	mov    %rdx,%rax
  238b5b:	77 d3                	ja     238b30 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x110>
  238b5d:	eb 4e                	jmp    238bad <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x18d>
  238b5f:	48 8b 00             	mov    (%rax),%rax
  238b62:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  238b69:	00 
  238b6a:	45 31 c9             	xor    %r9d,%r9d
  238b6d:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  238b73:	48 89 c2             	mov    %rax,%rdx
  238b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  238b7d:	00 00 00 
  238b80:	48 c1 ea 04          	shr    $0x4,%rdx
  238b84:	89 c1                	mov    %eax,%ecx
  238b86:	80 e1 0f             	and    $0xf,%cl
  238b89:	80 f9 0a             	cmp    $0xa,%cl
  238b8c:	bf 37 00 00 00       	mov    $0x37,%edi
  238b91:	41 0f 42 fa          	cmovb  %r10d,%edi
  238b95:	40 00 cf             	add    %cl,%dil
  238b98:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  238b9c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  238ba0:	49 83 c1 01          	add    $0x1,%r9
  238ba4:	48 83 f8 0f          	cmp    $0xf,%rax
  238ba8:	48 89 d0             	mov    %rdx,%rax
  238bab:	77 d3                	ja     238b80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x160>
  238bad:	bf 80 00 00 00       	mov    $0x80,%edi
  238bb2:	4c 29 cf             	sub    %r9,%rdi
  238bb5:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  238bbc:	73 76                	jae    238c34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x214>
  238bbe:	48 8d 15 81 b7 fc ff 	lea    -0x3487f(%rip),%rdx        # 204346 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  238bc5:	b9 02 00 00 00       	mov    $0x2,%ecx
  238bca:	48 89 f7             	mov    %rsi,%rdi
  238bcd:	be 01 00 00 00       	mov    $0x1,%esi
  238bd2:	e8 39 eb ff ff       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  238bd7:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  238bde:	c3                   	retq   
  238bdf:	4c 89 d2             	mov    %r10,%rdx
  238be2:	48 83 fa 63          	cmp    $0x63,%rdx
  238be6:	0f 8f df fe ff ff    	jg     238acb <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xab>
  238bec:	e9 08 ff ff ff       	jmpq   238af9 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xd9>
  238bf1:	48 8d 05 50 b7 fc ff 	lea    -0x348b0(%rip),%rax        # 204348 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  238bf8:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  238bfc:	66 89 44 0c 06       	mov    %ax,0x6(%rsp,%rcx,1)
  238c01:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  238c05:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  238c09:	49 83 c0 08          	add    $0x8,%r8
  238c0d:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  238c13:	49 29 c9             	sub    %rcx,%r9
  238c16:	48 8d 15 7d c3 fc ff 	lea    -0x33c83(%rip),%rdx        # 204f9a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  238c1d:	48 89 f7             	mov    %rsi,%rdi
  238c20:	be 01 00 00 00       	mov    $0x1,%esi
  238c25:	31 c9                	xor    %ecx,%ecx
  238c27:	e8 e4 ea ff ff       	callq  237710 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  238c2c:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  238c33:	c3                   	retq   
  238c34:	48 8d 15 d5 4a 00 00 	lea    0x4ad5(%rip),%rdx        # 23d710 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  238c3b:	be 80 00 00 00       	mov    $0x80,%esi
  238c40:	e8 ab d2 ff ff       	callq  235ef0 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  238c45:	0f 0b                	ud2    
  238c47:	cc                   	int3   
  238c48:	cc                   	int3   
  238c49:	cc                   	int3   
  238c4a:	cc                   	int3   
  238c4b:	cc                   	int3   
  238c4c:	cc                   	int3   
  238c4d:	cc                   	int3   
  238c4e:	cc                   	int3   
  238c4f:	cc                   	int3   

0000000000238c50 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>:
  238c50:	48 83 ec 38          	sub    $0x38,%rsp
  238c54:	48 8b 07             	mov    (%rdi),%rax
  238c57:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  238c5b:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  238c5f:	48 8b 48 28          	mov    0x28(%rax),%rcx
  238c63:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  238c68:	48 8b 48 20          	mov    0x20(%rax),%rcx
  238c6c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  238c71:	48 8b 48 18          	mov    0x18(%rax),%rcx
  238c75:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  238c7a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  238c7e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  238c83:	48 8b 08             	mov    (%rax),%rcx
  238c86:	48 8b 40 08          	mov    0x8(%rax),%rax
  238c8a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  238c8f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  238c94:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  238c99:	e8 32 e8 ff ff       	callq  2374d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  238c9e:	48 83 c4 38          	add    $0x38,%rsp
  238ca2:	c3                   	retq   
  238ca3:	cc                   	int3   
  238ca4:	cc                   	int3   
  238ca5:	cc                   	int3   
  238ca6:	cc                   	int3   
  238ca7:	cc                   	int3   
  238ca8:	cc                   	int3   
  238ca9:	cc                   	int3   
  238caa:	cc                   	int3   
  238cab:	cc                   	int3   
  238cac:	cc                   	int3   
  238cad:	cc                   	int3   
  238cae:	cc                   	int3   
  238caf:	cc                   	int3   

0000000000238cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>:
  238cb0:	48 89 f0             	mov    %rsi,%rax
  238cb3:	48 8b 0f             	mov    (%rdi),%rcx
  238cb6:	48 8b 31             	mov    (%rcx),%rsi
  238cb9:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  238cbd:	48 89 c7             	mov    %rax,%rdi
  238cc0:	e9 6b ee ff ff       	jmpq   237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  238cc5:	cc                   	int3   
  238cc6:	cc                   	int3   
  238cc7:	cc                   	int3   
  238cc8:	cc                   	int3   
  238cc9:	cc                   	int3   
  238cca:	cc                   	int3   
  238ccb:	cc                   	int3   
  238ccc:	cc                   	int3   
  238ccd:	cc                   	int3   
  238cce:	cc                   	int3   
  238ccf:	cc                   	int3   

0000000000238cd0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>:
  238cd0:	48 89 f0             	mov    %rsi,%rax
  238cd3:	48 8b 37             	mov    (%rdi),%rsi
  238cd6:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  238cda:	48 89 c7             	mov    %rax,%rdi
  238cdd:	e9 4e ee ff ff       	jmpq   237b30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  238ce2:	cc                   	int3   
  238ce3:	cc                   	int3   
  238ce4:	cc                   	int3   
  238ce5:	cc                   	int3   
  238ce6:	cc                   	int3   
  238ce7:	cc                   	int3   
  238ce8:	cc                   	int3   
  238ce9:	cc                   	int3   
  238cea:	cc                   	int3   
  238ceb:	cc                   	int3   
  238cec:	cc                   	int3   
  238ced:	cc                   	int3   
  238cee:	cc                   	int3   
  238cef:	cc                   	int3   

0000000000238cf0 <memcpy>:
  238cf0:	48 89 f8             	mov    %rdi,%rax
  238cf3:	48 89 d1             	mov    %rdx,%rcx
  238cf6:	48 c1 e9 03          	shr    $0x3,%rcx
  238cfa:	83 e2 07             	and    $0x7,%edx
  238cfd:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  238d00:	89 d1                	mov    %edx,%ecx
  238d02:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  238d04:	c3                   	retq   
  238d05:	cc                   	int3   
  238d06:	cc                   	int3   
  238d07:	cc                   	int3   
  238d08:	cc                   	int3   
  238d09:	cc                   	int3   
  238d0a:	cc                   	int3   
  238d0b:	cc                   	int3   
  238d0c:	cc                   	int3   
  238d0d:	cc                   	int3   
  238d0e:	cc                   	int3   
  238d0f:	cc                   	int3   

0000000000238d10 <memset>:
  238d10:	49 89 f8             	mov    %rdi,%r8
  238d13:	48 89 d1             	mov    %rdx,%rcx
  238d16:	48 c1 e9 03          	shr    $0x3,%rcx
  238d1a:	83 e2 07             	and    $0x7,%edx
  238d1d:	40 0f b6 f6          	movzbl %sil,%esi
  238d21:	48 b8 01 01 01 01 01 	movabs $0x101010101010101,%rax
  238d28:	01 01 01 
  238d2b:	48 0f af c6          	imul   %rsi,%rax
  238d2f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  238d32:	89 d1                	mov    %edx,%ecx
  238d34:	f3 aa                	rep stos %al,%es:(%rdi)
  238d36:	4c 89 c0             	mov    %r8,%rax
  238d39:	c3                   	retq   
  238d3a:	cc                   	int3   
  238d3b:	cc                   	int3   
  238d3c:	cc                   	int3   
  238d3d:	cc                   	int3   
  238d3e:	cc                   	int3   
  238d3f:	cc                   	int3   

0000000000238d40 <memcmp>:
  238d40:	48 85 d2             	test   %rdx,%rdx
  238d43:	74 22                	je     238d67 <memcmp+0x27>
  238d45:	31 c9                	xor    %ecx,%ecx
  238d47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  238d4e:	00 00 
  238d50:	0f b6 04 0f          	movzbl (%rdi,%rcx,1),%eax
  238d54:	44 0f b6 04 0e       	movzbl (%rsi,%rcx,1),%r8d
  238d59:	44 38 c0             	cmp    %r8b,%al
  238d5c:	75 0c                	jne    238d6a <memcmp+0x2a>
  238d5e:	48 83 c1 01          	add    $0x1,%rcx
  238d62:	48 39 ca             	cmp    %rcx,%rdx
  238d65:	75 e9                	jne    238d50 <memcmp+0x10>
  238d67:	31 c0                	xor    %eax,%eax
  238d69:	c3                   	retq   
  238d6a:	44 29 c0             	sub    %r8d,%eax
  238d6d:	c3                   	retq   
