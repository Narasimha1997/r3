
kbin/x86_64/debug/r3_kernel:     file format elf64-x86-64


Disassembly of section .text:

0000000000203b00 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>:
                // shift away low bits
                bits >> range.start
            }

            #[inline]
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
  203b00:	48 83 ec 38          	sub    $0x38,%rsp
  203b04:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  203b09:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  203b0e:	88 d0                	mov    %dl,%al
  203b10:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  203b14:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  203b19:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  203b1e:	24 01                	and    $0x1,%al
  203b20:	88 44 24 37          	mov    %al,0x37(%rsp)
                assert!(bit < Self::BIT_LENGTH);
  203b24:	48 83 fe 10          	cmp    $0x10,%rsi
  203b28:	0f 92 c0             	setb   %al
  203b2b:	34 ff                	xor    $0xff,%al
  203b2d:	a8 01                	test   $0x1,%al
  203b2f:	75 0a                	jne    203b3b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x3b>
  203b31:	8a 44 24 1f          	mov    0x1f(%rsp),%al

                if value {
  203b35:	a8 01                	test   $0x1,%al
  203b37:	75 45                	jne    203b7e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x7e>
  203b39:	eb 1a                	jmp    203b55 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x55>
                assert!(bit < Self::BIT_LENGTH);
  203b3b:	48 8d 3d be c6 ff ff 	lea    -0x3942(%rip),%rdi        # 200200 <str.0-0x90>
  203b42:	48 8d 15 a7 af 01 00 	lea    0x1afa7(%rip),%rdx        # 21eaf0 <memset+0x1030>
  203b49:	be 28 00 00 00       	mov    $0x28,%esi
  203b4e:	e8 dd 74 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203b53:	0f 0b                	ud2    
  203b55:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
                } else {
                    *self &= !(1 << bit);
  203b5a:	48 89 c8             	mov    %rcx,%rax
  203b5d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  203b61:	48 83 f8 00          	cmp    $0x0,%rax
  203b65:	0f 95 c0             	setne  %al
  203b68:	66 83 e1 0f          	and    $0xf,%cx
  203b6c:	66 ba 01 00          	mov    $0x1,%dx
  203b70:	66 d3 e2             	shl    %cl,%dx
  203b73:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
  203b78:	a8 01                	test   $0x1,%al
  203b7a:	75 75                	jne    203bf1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xf1>
  203b7c:	eb 5d                	jmp    203bdb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xdb>
  203b7e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
  203b83:	48 89 c8             	mov    %rcx,%rax
  203b86:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  203b8a:	48 83 f8 00          	cmp    $0x0,%rax
  203b8e:	0f 95 c0             	setne  %al
  203b91:	66 83 e1 0f          	and    $0xf,%cx
  203b95:	66 ba 01 00          	mov    $0x1,%dx
  203b99:	66 d3 e2             	shl    %cl,%dx
  203b9c:	66 89 54 24 04       	mov    %dx,0x4(%rsp)
  203ba1:	a8 01                	test   $0x1,%al
  203ba3:	75 12                	jne    203bb7 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xb7>
  203ba5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203baa:	66 8b 4c 24 04       	mov    0x4(%rsp),%cx
  203baf:	66 0b 08             	or     (%rax),%cx
  203bb2:	66 89 08             	mov    %cx,(%rax)
                if value {
  203bb5:	eb 1a                	jmp    203bd1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xd1>
                    *self |= 1 << bit;
  203bb7:	48 8d 3d d2 c6 ff ff 	lea    -0x392e(%rip),%rdi        # 200290 <str.0>
  203bbe:	48 8d 15 2b af 01 00 	lea    0x1af2b(%rip),%rdx        # 21eaf0 <memset+0x1030>
  203bc5:	be 23 00 00 00       	mov    $0x23,%esi
  203bca:	e8 61 74 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203bcf:	0f 0b                	ud2    
  203bd1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                }

                self
            }
  203bd6:	48 83 c4 38          	add    $0x38,%rsp
  203bda:	c3                   	retq   
  203bdb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203be0:	66 8b 4c 24 06       	mov    0x6(%rsp),%cx
                    *self &= !(1 << bit);
  203be5:	66 83 f1 ff          	xor    $0xffff,%cx
  203be9:	66 23 08             	and    (%rax),%cx
  203bec:	66 89 08             	mov    %cx,(%rax)
                if value {
  203bef:	eb e0                	jmp    203bd1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xd1>
                    *self &= !(1 << bit);
  203bf1:	48 8d 3d 98 c6 ff ff 	lea    -0x3968(%rip),%rdi        # 200290 <str.0>
  203bf8:	48 8d 15 f1 ae 01 00 	lea    0x1aef1(%rip),%rdx        # 21eaf0 <memset+0x1030>
  203bff:	be 23 00 00 00       	mov    $0x23,%esi
  203c04:	e8 27 74 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203c09:	0f 0b                	ud2    
  203c0b:	cc                   	int3   
  203c0c:	cc                   	int3   
  203c0d:	cc                   	int3   
  203c0e:	cc                   	int3   
  203c0f:	cc                   	int3   

0000000000203c10 <_ZN9r3_kernel3cpu8segments4lgdt17ha22c06219a02a0cfE>:
}

// core assembly functions:

// Loads the GDT, after this, the segment register must be reloaded.
fn lgdt(ptr: &GDTPointer) {
  203c10:	50                   	push   %rax
  203c11:	48 89 3c 24          	mov    %rdi,(%rsp)
    unsafe {
        asm!(
  203c15:	0f 01 17             	lgdt   (%rdi)
            "lgdt [{0}]", in(reg) ptr,
            options(readonly, nostack, preserves_flags)
        )
    }
}
  203c18:	58                   	pop    %rax
  203c19:	c3                   	retq   
  203c1a:	cc                   	int3   
  203c1b:	cc                   	int3   
  203c1c:	cc                   	int3   
  203c1d:	cc                   	int3   
  203c1e:	cc                   	int3   
  203c1f:	cc                   	int3   

0000000000203c20 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E>:

// CS register cannot be reloaded with the new value like
// other DS, ES, SS, FS or GS registeres. So this is a special case.
fn special_set_cs(value: u16) {
  203c20:	48 83 ec 18          	sub    $0x18,%rsp
  203c24:	66 89 f8             	mov    %di,%ax
  203c27:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
            "push {sel}",
            "lea {tmp}, [1f + rip]",
            "push {tmp}",
            "retfq",
            "1:",
            sel = in(reg) u64::from(value),
  203c2c:	0f b7 f8             	movzwl %ax,%edi
  203c2f:	e8 0c 44 01 00       	callq  218040 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h0f0bf1c063626619E>
  203c34:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  203c39:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        asm!(
  203c3e:	50                   	push   %rax
  203c3f:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # 203c49 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E+0x29>
  203c46:	50                   	push   %rax
  203c47:	48 cb                	lretq  
            tmp = lateout(reg) _,
            options(preserves_flags),
        );
    }
}
  203c49:	48 83 c4 18          	add    $0x18,%rsp
  203c4d:	c3                   	retq   
  203c4e:	cc                   	int3   
  203c4f:	cc                   	int3   

0000000000203c50 <_ZN9r3_kernel3cpu8segments8load_tss17h2c868d95eb8693b2E>:

fn load_tss(value: u16) {
  203c50:	48 83 ec 02          	sub    $0x2,%rsp
  203c54:	66 89 f8             	mov    %di,%ax
  203c57:	66 89 04 24          	mov    %ax,(%rsp)
    unsafe {
        asm! (
  203c5b:	0f 00 d8             	ltr    %ax
            "ltr {:x}", in(reg) value,
            options(nomem, nostack, preserves_flags)
        );
    }
}
  203c5e:	48 83 c4 02          	add    $0x2,%rsp
  203c62:	c3                   	retq   
  203c63:	cc                   	int3   
  203c64:	cc                   	int3   
  203c65:	cc                   	int3   
  203c66:	cc                   	int3   
  203c67:	cc                   	int3   
  203c68:	cc                   	int3   
  203c69:	cc                   	int3   
  203c6a:	cc                   	int3   
  203c6b:	cc                   	int3   
  203c6c:	cc                   	int3   
  203c6d:	cc                   	int3   
  203c6e:	cc                   	int3   
  203c6f:	cc                   	int3   

0000000000203c70 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>:
#[derive(Debug)]
pub struct SegmentSelector(pub u16);

impl SegmentSelector {
    #[inline]
    pub fn new(index: u16, ring: PrivilegeLevel) -> SegmentSelector {
  203c70:	48 83 ec 0a          	sub    $0xa,%rsp
  203c74:	40 88 f1             	mov    %sil,%cl
  203c77:	88 4c 24 01          	mov    %cl,0x1(%rsp)
  203c7b:	66 89 f8             	mov    %di,%ax
  203c7e:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
  203c83:	88 4c 24 09          	mov    %cl,0x9(%rsp)
        SegmentSelector(index << 3 | (ring as u16))
  203c87:	66 c1 e0 03          	shl    $0x3,%ax
  203c8b:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  203c90:	66 8b 44 24 02       	mov    0x2(%rsp),%ax
  203c95:	8a 4c 24 01          	mov    0x1(%rsp),%cl
  203c99:	0f b6 c9             	movzbl %cl,%ecx
  203c9c:	66 09 c8             	or     %cx,%ax
  203c9f:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
    }
  203ca4:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  203ca9:	48 83 c4 0a          	add    $0xa,%rsp
  203cad:	c3                   	retq   
  203cae:	cc                   	int3   
  203caf:	cc                   	int3   

0000000000203cb0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE>:
    FS,
    GS,
}

impl SegmentRegister {
    pub fn set(&self, value: u16) {
  203cb0:	48 83 ec 28          	sub    $0x28,%rsp
  203cb4:	66 89 f0             	mov    %si,%ax
  203cb7:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203cbc:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  203cc1:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
        match self {
  203cc6:	0f b6 07             	movzbl (%rdi),%eax
  203cc9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  203cce:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203cd3:	48 8d 0d da c5 ff ff 	lea    -0x3a26(%rip),%rcx        # 2002b4 <str.0+0x24>
  203cda:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  203cde:	48 01 c8             	add    %rcx,%rax
  203ce1:	ff e0                	jmpq   *%rax
  203ce3:	0f 0b                	ud2    
  203ce5:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
            SegmentRegister::CS => special_set_cs(value),
  203cea:	0f b7 f8             	movzwl %ax,%edi
  203ced:	e8 2e ff ff ff       	callq  203c20 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E>
  203cf2:	eb 30                	jmp    203d24 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203cf4:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                    "mov gs, {:x}", in(reg) value,
                    options(nostack, preserves_flags)
                )
            },
            SegmentRegister::SS => unsafe {
                asm!(
  203cf9:	66 8e d0             	mov    %ax,%ss
  203cfc:	eb 26                	jmp    203d24 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203cfe:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203d03:	66 8e d8             	mov    %ax,%ds
  203d06:	eb 1c                	jmp    203d24 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203d08:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203d0d:	66 8e c0             	mov    %ax,%es
  203d10:	eb 12                	jmp    203d24 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203d12:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203d17:	66 8e e0             	mov    %ax,%fs
  203d1a:	eb 08                	jmp    203d24 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203d1c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203d21:	66 8e e8             	mov    %ax,%gs
                    "mov ss, {:x}", in(reg) value,
                    options(nostack, preserves_flags)
                )
            },
        }
    }
  203d24:	48 83 c4 28          	add    $0x28,%rsp
  203d28:	c3                   	retq   
  203d29:	cc                   	int3   
  203d2a:	cc                   	int3   
  203d2b:	cc                   	int3   
  203d2c:	cc                   	int3   
  203d2d:	cc                   	int3   
  203d2e:	cc                   	int3   
  203d2f:	cc                   	int3   

0000000000203d30 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>:

    pub fn get(&self) -> u16 {
  203d30:	48 83 ec 18          	sub    $0x18,%rsp
  203d34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let value: u16;
        match self {
  203d39:	0f b6 07             	movzbl (%rdi),%eax
  203d3c:	48 89 04 24          	mov    %rax,(%rsp)
  203d40:	48 8b 04 24          	mov    (%rsp),%rax
  203d44:	48 8d 0d 81 c5 ff ff 	lea    -0x3a7f(%rip),%rcx        # 2002cc <str.0+0x3c>
  203d4b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  203d4f:	48 01 c8             	add    %rcx,%rax
  203d52:	ff e0                	jmpq   *%rax
  203d54:	0f 0b                	ud2    
            SegmentRegister::CS => unsafe {
                asm!(
  203d56:	8c c8                	mov    %cs,%eax
  203d58:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203d5d:	eb 2b                	jmp    203d8a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                    "mov {:x}, gs", out(reg) value,
                    options(nomem, nostack, preserves_flags)
                )
            },
            SegmentRegister::SS => unsafe {
                asm!(
  203d5f:	8c d0                	mov    %ss,%eax
  203d61:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203d66:	eb 22                	jmp    203d8a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  203d68:	8c d8                	mov    %ds,%eax
  203d6a:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203d6f:	eb 19                	jmp    203d8a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  203d71:	8c c0                	mov    %es,%eax
  203d73:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203d78:	eb 10                	jmp    203d8a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  203d7a:	8c e0                	mov    %fs,%eax
  203d7c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203d81:	eb 07                	jmp    203d8a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  203d83:	8c e8                	mov    %gs,%eax
  203d85:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
                )
            },
        }

        return value;
    }
  203d8a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  203d8f:	48 83 c4 18          	add    $0x18,%rsp
  203d93:	c3                   	retq   
  203d94:	cc                   	int3   
  203d95:	cc                   	int3   
  203d96:	cc                   	int3   
  203d97:	cc                   	int3   
  203d98:	cc                   	int3   
  203d99:	cc                   	int3   
  203d9a:	cc                   	int3   
  203d9b:	cc                   	int3   
  203d9c:	cc                   	int3   
  203d9d:	cc                   	int3   
  203d9e:	cc                   	int3   
  203d9f:	cc                   	int3   

0000000000203da0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E>:

    pub fn assert_reg(&self, value: u16) {
  203da0:	48 83 ec 78          	sub    $0x78,%rsp
  203da4:	66 89 f0             	mov    %si,%ax
  203da7:	66 89 44 24 14       	mov    %ax,0x14(%rsp)
  203dac:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let read_value = self.get();
  203db1:	e8 7a ff ff ff       	callq  203d30 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  203db6:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
        assert_eq!(read_value, value);
  203dbb:	48 8d 44 24 16       	lea    0x16(%rsp),%rax
  203dc0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203dc5:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  203dca:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  203dcf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203dd4:	48 89 04 24          	mov    %rax,(%rsp)
  203dd8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  203ddd:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  203de2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  203de7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  203dec:	66 8b 00             	mov    (%rax),%ax
  203def:	66 3b 01             	cmp    (%rcx),%ax
  203df2:	0f 94 c0             	sete   %al
  203df5:	34 ff                	xor    $0xff,%al
  203df7:	a8 01                	test   $0x1,%al
  203df9:	75 05                	jne    203e00 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E+0x60>
    }
  203dfb:	48 83 c4 78          	add    $0x78,%rsp
  203dff:	c3                   	retq   
  203e00:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  203e05:	48 8b 34 24          	mov    (%rsp),%rsi
        assert_eq!(read_value, value);
  203e09:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  203e0e:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  203e15:	00 00 
  203e17:	4c 8d 05 ea ac 01 00 	lea    0x1acea(%rip),%r8        # 21eb08 <memset+0x1048>
  203e1e:	31 ff                	xor    %edi,%edi
  203e20:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  203e25:	e8 26 66 00 00       	callq  20a450 <_ZN4core9panicking13assert_failed17hf745d0fc64896bf3E>
  203e2a:	0f 0b                	ud2    
  203e2c:	cc                   	int3   
  203e2d:	cc                   	int3   
  203e2e:	cc                   	int3   
  203e2f:	cc                   	int3   

0000000000203e30 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17he7cacc0fe7603b71E>:
    pub reserved_4: u16,
    pub iomap_base: u16,
}

impl TaskStateSegment {
    pub fn empty() -> Self {
  203e30:	48 83 ec 68          	sub    $0x68,%rsp
  203e34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  203e39:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        TaskStateSegment {
            reserved_1: 0,
            privilege_stack_table: [0; 3],
  203e3e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  203e43:	31 f6                	xor    %esi,%esi
  203e45:	ba 18 00 00 00       	mov    $0x18,%edx
  203e4a:	e8 71 9c 01 00       	callq  21dac0 <memset>
            reserved_2: 0,
            interrupt_stack_table: [0; 7],
  203e4f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  203e54:	31 f6                	xor    %esi,%esi
  203e56:	ba 38 00 00 00       	mov    $0x38,%edx
  203e5b:	e8 60 9c 01 00       	callq  21dac0 <memset>
  203e60:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        TaskStateSegment {
  203e65:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  203e6b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203e70:	48 89 47 04          	mov    %rax,0x4(%rdi)
  203e74:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  203e79:	48 89 47 0c          	mov    %rax,0xc(%rdi)
  203e7d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  203e82:	48 89 47 14          	mov    %rax,0x14(%rdi)
  203e86:	48 c7 47 1c 00 00 00 	movq   $0x0,0x1c(%rdi)
  203e8d:	00 
  203e8e:	48 83 c7 24          	add    $0x24,%rdi
  203e92:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  203e97:	ba 38 00 00 00       	mov    $0x38,%edx
  203e9c:	e8 ff 9b 01 00       	callq  21daa0 <memcpy>
  203ea1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  203ea6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203eab:	48 c7 47 5c 00 00 00 	movq   $0x0,0x5c(%rdi)
  203eb2:	00 
  203eb3:	66 c7 47 64 00 00    	movw   $0x0,0x64(%rdi)
  203eb9:	66 c7 47 66 00 00    	movw   $0x0,0x66(%rdi)
            reserved_3: 0,
            reserved_4: 0,
            iomap_base: 0,
        }
    }
  203ebf:	48 83 c4 68          	add    $0x68,%rsp
  203ec3:	c3                   	retq   
  203ec4:	cc                   	int3   
  203ec5:	cc                   	int3   
  203ec6:	cc                   	int3   
  203ec7:	cc                   	int3   
  203ec8:	cc                   	int3   
  203ec9:	cc                   	int3   
  203eca:	cc                   	int3   
  203ecb:	cc                   	int3   
  203ecc:	cc                   	int3   
  203ecd:	cc                   	int3   
  203ece:	cc                   	int3   
  203ecf:	cc                   	int3   

0000000000203ed0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E>:
    pub high: u64,
    pub low: u64,
}

impl TaskStateDescriptor {
    pub fn new(tss: &'static TaskStateSegment) -> Self {
  203ed0:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  203ed7:	48 89 bc 24 70 01 00 	mov    %rdi,0x170(%rsp)
  203ede:	00 
        let mut low: u64 = SEGMENT_PRESENT;
  203edf:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
  203ee6:	80 00 00 
  203ee9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        let tss_addr = (tss as *const _) as u64;
  203eee:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)

        low.set_bits(16..40, tss_addr.get_bits(0..24));
  203ef3:	48 c7 44 24 70 10 00 	movq   $0x10,0x70(%rsp)
  203efa:	00 00 
  203efc:	48 c7 44 24 78 28 00 	movq   $0x28,0x78(%rsp)
  203f03:	00 00 
  203f05:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  203f0c:	00 00 00 00 00 
  203f11:	48 c7 84 24 88 00 00 	movq   $0x18,0x88(%rsp)
  203f18:	00 18 00 00 00 
  203f1d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  203f24:	00 
  203f25:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  203f2c:	00 
  203f2d:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  203f32:	e8 59 6b 00 00       	callq  20aa90 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  203f37:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  203f3c:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  203f41:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  203f46:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  203f4b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  203f50:	e8 5b 6d 00 00       	callq  20acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
        low.set_bits(56..64, tss_addr.get_bits(24..32));
  203f55:	48 c7 84 24 90 00 00 	movq   $0x38,0x90(%rsp)
  203f5c:	00 38 00 00 00 
  203f61:	48 c7 84 24 98 00 00 	movq   $0x40,0x98(%rsp)
  203f68:	00 40 00 00 00 
  203f6d:	48 c7 84 24 a0 00 00 	movq   $0x18,0xa0(%rsp)
  203f74:	00 18 00 00 00 
  203f79:	48 c7 84 24 a8 00 00 	movq   $0x20,0xa8(%rsp)
  203f80:	00 20 00 00 00 
  203f85:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  203f8c:	00 
  203f8d:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  203f94:	00 
  203f95:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  203f9a:	e8 f1 6a 00 00       	callq  20aa90 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  203f9f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  203fa4:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  203fa9:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  203fb0:	00 
  203fb1:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  203fb8:	00 
  203fb9:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  203fbe:	e8 ed 6c 00 00       	callq  20acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
        // limit (the `-1` in needed since the bound is inclusive)
        low.set_bits(0..16, (mem::size_of::<TaskStateSegment>() - 1) as u64);
  203fc3:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  203fca:	00 00 00 00 00 
  203fcf:	48 c7 84 24 b8 00 00 	movq   $0x10,0xb8(%rsp)
  203fd6:	00 10 00 00 00 
  203fdb:	b8 68 00 00 00       	mov    $0x68,%eax
  203fe0:	48 83 e8 01          	sub    $0x1,%rax
  203fe4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  203fe9:	0f 92 c0             	setb   %al
  203fec:	a8 01                	test   $0x1,%al
  203fee:	75 21                	jne    204011 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x141>
  203ff0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  203ff5:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  203ffc:	00 
  203ffd:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  204004:	00 
  204005:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20400a:	e8 a1 6c 00 00       	callq  20acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
  20400f:	eb 1a                	jmp    20402b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x15b>
  204011:	48 8d 3d e8 c2 ff ff 	lea    -0x3d18(%rip),%rdi        # 200300 <str.0>
  204018:	48 8d 15 01 ab 01 00 	lea    0x1ab01(%rip),%rdx        # 21eb20 <memset+0x1060>
  20401f:	be 21 00 00 00       	mov    $0x21,%esi
  204024:	e8 07 70 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204029:	0f 0b                	ud2    
        // type (0b1001 = available 64-bit tss)
        low.set_bits(40..44, 0b1001);
  20402b:	48 c7 84 24 c0 00 00 	movq   $0x28,0xc0(%rsp)
  204032:	00 28 00 00 00 
  204037:	48 c7 84 24 c8 00 00 	movq   $0x2c,0xc8(%rsp)
  20403e:	00 2c 00 00 00 
  204043:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  20404a:	00 
  20404b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  204052:	00 
  204053:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  204058:	b9 09 00 00 00       	mov    $0x9,%ecx
  20405d:	e8 4e 6c 00 00       	callq  20acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>

        let mut high = 0;
  204062:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  204069:	00 00 00 00 00 
        high.set_bits(0..32, tss_addr.get_bits(32..64));
  20406e:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  204075:	00 00 00 00 00 
  20407a:	48 c7 84 24 e0 00 00 	movq   $0x20,0xe0(%rsp)
  204081:	00 20 00 00 00 
  204086:	48 c7 84 24 e8 00 00 	movq   $0x20,0xe8(%rsp)
  20408d:	00 20 00 00 00 
  204092:	48 c7 84 24 f0 00 00 	movq   $0x40,0xf0(%rsp)
  204099:	00 40 00 00 00 
  20409e:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  2040a5:	00 
  2040a6:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  2040ad:	00 
  2040ae:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2040b3:	e8 d8 69 00 00       	callq  20aa90 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  2040b8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2040bd:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2040c2:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  2040c9:	00 
  2040ca:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  2040d1:	00 
  2040d2:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  2040d9:	00 
  2040da:	e8 d1 6b 00 00       	callq  20acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>

        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  2040df:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  2040e6:	00 04 00 00 00 
  2040eb:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2040f2:	00 
  2040f3:	48 8d 35 5e c2 ff ff 	lea    -0x3da2(%rip),%rsi        # 200358 <str.0+0x58>
  2040fa:	e8 61 1c 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2040ff:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  204103:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  204107:	a8 01                	test   $0x1,%al
  204109:	75 0c                	jne    204117 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x247>
  20410b:	eb 00                	jmp    20410d <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x23d>
  20410d:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  204114:	00 
  204115:	eb 5a                	jmp    204171 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2a1>
    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
    // is set to a usize that is a valid discriminant for `LevelFilter`.
    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  204117:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  20411e:	00 
  20411f:	48 8b 3d 7a c6 01 00 	mov    0x1c67a(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204126:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  20412d:	00 
  20412e:	e8 bd e9 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  204133:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  20413a:	00 
  20413b:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  204142:	00 
  204143:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20414a:	00 
  20414b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  204152:	00 
  204153:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  20415a:	00 
  20415b:	e8 00 1c 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204160:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  204164:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  204168:	24 01                	and    $0x1,%al
  20416a:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  204171:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  204178:	01 
  204179:	75 29                	jne    2041a4 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2d4>

        TaskStateDescriptor { high, low }
  20417b:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  204182:	00 
  204183:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  204188:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20418d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    }
  204192:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  204197:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20419c:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  2041a3:	c3                   	retq   
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  2041a4:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  2041ab:	00 
  2041ac:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  2041b3:	00 
  2041b4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  2041b9:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2041c0:	00 
  2041c1:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  2041c8:	00 
  2041c9:	48 89 bc 24 78 01 00 	mov    %rdi,0x178(%rsp)
  2041d0:	00 
  2041d1:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  2041d8:	00 
  2041d9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2041de:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2041e5:	00 
  2041e6:	48 8b 35 bb c5 01 00 	mov    0x1c5bb(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  2041ed:	e8 5e f6 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  2041f2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2041f7:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2041fc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  204201:	48 8b 35 a0 c5 01 00 	mov    0x1c5a0(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  204208:	e8 43 f6 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  20420d:	48 89 04 24          	mov    %rax,(%rsp)
  204211:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  204216:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20421b:	48 8b 0c 24          	mov    (%rsp),%rcx
  20421f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  204224:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  204229:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  204230:	00 
  204231:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
  204238:	00 
  204239:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  204240:	00 
  204241:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  204248:	00 
  204249:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  204250:	00 
  204251:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  204258:	00 
  204259:	48 8d 35 d8 a8 01 00 	lea    0x1a8d8(%rip),%rsi        # 21eb38 <memset+0x1078>
  204260:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  204266:	4c 89 c2             	mov    %r8,%rdx
  204269:	e8 92 0c 00 00       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20426e:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  204275:	00 
  204276:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  20427d:	00 
  20427e:	48 8d 15 d3 a8 01 00 	lea    0x1a8d3(%rip),%rdx        # 21eb58 <memset+0x1098>
  204285:	e8 86 45 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20428a:	e9 ec fe ff ff       	jmpq   20417b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2ab>
  20428f:	cc                   	int3   

0000000000204290 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17hc6ad18ad40b39fccE>:
    // contains the current index to be filled. [0 - first entry]
    pub filled: usize,
}

impl GlobalDescritorTable {
    pub fn empty() -> GlobalDescritorTable {
  204290:	48 83 ec 58          	sub    $0x58,%rsp
  204294:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  204299:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        GlobalDescritorTable {
            entries: [0; 8],
  20429e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2042a3:	31 f6                	xor    %esi,%esi
  2042a5:	ba 40 00 00 00       	mov    $0x40,%edx
  2042aa:	e8 11 98 01 00       	callq  21dac0 <memset>
  2042af:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        GlobalDescritorTable {
  2042b4:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  2042b9:	ba 40 00 00 00       	mov    $0x40,%edx
  2042be:	e8 dd 97 01 00       	callq  21daa0 <memcpy>
  2042c3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2042c8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2042cd:	48 c7 47 40 01 00 00 	movq   $0x1,0x40(%rdi)
  2042d4:	00 
            filled: 1,
        }
    }
  2042d5:	48 83 c4 58          	add    $0x58,%rsp
  2042d9:	c3                   	retq   
  2042da:	cc                   	int3   
  2042db:	cc                   	int3   
  2042dc:	cc                   	int3   
  2042dd:	cc                   	int3   
  2042de:	cc                   	int3   
  2042df:	cc                   	int3   

00000000002042e0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE>:
        }

        Ok(GlobalDescritorTable { entries, filled })
    }

    pub fn as_pointer(&self) -> GDTPointer {
  2042e0:	48 83 ec 48          	sub    $0x48,%rsp
  2042e4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2042e9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        GDTPointer {
            base_addr: self.entries.as_ptr() as u64,
  2042ee:	be 08 00 00 00       	mov    $0x8,%esi
  2042f3:	e8 a8 37 01 00       	callq  217aa0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h5cc1f53bc66c4beaE>
  2042f8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2042fd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  204302:	48 8b 40 40          	mov    0x40(%rax),%rax
  204306:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20430b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  204310:	b9 08 00 00 00       	mov    $0x8,%ecx
  204315:	48 f7 e1             	mul    %rcx
  204318:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20431d:	0f 90 c0             	seto   %al
  204320:	a8 01                	test   $0x1,%al
  204322:	75 17                	jne    20433b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x5b>
  204324:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204329:	48 83 e8 01          	sub    $0x1,%rax
  20432d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  204332:	0f 92 c0             	setb   %al
  204335:	a8 01                	test   $0x1,%al
  204337:	75 41                	jne    20437a <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x9a>
  204339:	eb 1a                	jmp    204355 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x75>
  20433b:	48 8d 3d 6e c0 ff ff 	lea    -0x3f92(%rip),%rdi        # 2003b0 <str.1>
  204342:	48 8d 15 47 a8 01 00 	lea    0x1a847(%rip),%rdx        # 21eb90 <memset+0x10d0>
  204349:	be 21 00 00 00       	mov    $0x21,%esi
  20434e:	e8 dd 6c 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204353:	0f 0b                	ud2    
  204355:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20435a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        GDTPointer {
  20435f:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
  204364:	48 89 44 24 32       	mov    %rax,0x32(%rsp)
        }
    }
  204369:	0f b7 44 24 38       	movzwl 0x38(%rsp),%eax
  20436e:	89 c2                	mov    %eax,%edx
  204370:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  204375:	48 83 c4 48          	add    $0x48,%rsp
  204379:	c3                   	retq   
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  20437a:	48 8d 3d 7f bf ff ff 	lea    -0x4081(%rip),%rdi        # 200300 <str.0>
  204381:	48 8d 15 20 a8 01 00 	lea    0x1a820(%rip),%rdx        # 21eba8 <memset+0x10e8>
  204388:	be 21 00 00 00       	mov    $0x21,%esi
  20438d:	e8 9e 6c 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204392:	0f 0b                	ud2    
  204394:	cc                   	int3   
  204395:	cc                   	int3   
  204396:	cc                   	int3   
  204397:	cc                   	int3   
  204398:	cc                   	int3   
  204399:	cc                   	int3   
  20439a:	cc                   	int3   
  20439b:	cc                   	int3   
  20439c:	cc                   	int3   
  20439d:	cc                   	int3   
  20439e:	cc                   	int3   
  20439f:	cc                   	int3   

00000000002043a0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h6757b776799da27dE>:

    pub fn load_into_cpu(&'static self) {
  2043a0:	48 83 ec 28          	sub    $0x28,%rsp
  2043a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let gdt_pointer = self.as_pointer();
  2043a9:	e8 32 ff ff ff       	callq  2042e0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE>
  2043ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2043b3:	66 89 d0             	mov    %dx,%ax
  2043b6:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  2043bb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2043c0:	48 89 04 24          	mov    %rax,(%rsp)
  2043c4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  2043c9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
        lgdt(&gdt_pointer);
  2043ce:	48 89 e7             	mov    %rsp,%rdi
  2043d1:	e8 3a f8 ff ff       	callq  203c10 <_ZN9r3_kernel3cpu8segments4lgdt17ha22c06219a02a0cfE>
    }
  2043d6:	48 83 c4 28          	add    $0x28,%rsp
  2043da:	c3                   	retq   
  2043db:	cc                   	int3   
  2043dc:	cc                   	int3   
  2043dd:	cc                   	int3   
  2043de:	cc                   	int3   
  2043df:	cc                   	int3   

00000000002043e0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE>:

    #[inline]
    fn get_user_seg_ring(entry: u64) -> PrivilegeLevel {
  2043e0:	48 83 ec 10          	sub    $0x10,%rsp
  2043e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // check if it is DPL3:
        if entry & RING_3_DPL_FLAG == RING_3_DPL_FLAG {
  2043e9:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  2043f0:	60 00 00 
  2043f3:	48 21 c7             	and    %rax,%rdi
  2043f6:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  2043fd:	60 00 00 
  204400:	48 39 c7             	cmp    %rax,%rdi
  204403:	74 07                	je     20440c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE+0x2c>
            return PrivilegeLevel::Ring3;
        }

        PrivilegeLevel::Ring0
  204405:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20440a:	eb 05                	jmp    204411 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE+0x31>
            return PrivilegeLevel::Ring3;
  20440c:	c6 44 24 07 03       	movb   $0x3,0x7(%rsp)
    }
  204411:	8a 44 24 07          	mov    0x7(%rsp),%al
  204415:	48 83 c4 10          	add    $0x10,%rsp
  204419:	c3                   	retq   
  20441a:	cc                   	int3   
  20441b:	cc                   	int3   
  20441c:	cc                   	int3   
  20441d:	cc                   	int3   
  20441e:	cc                   	int3   
  20441f:	cc                   	int3   

0000000000204420 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E>:

    pub fn set_user_segment(&mut self, entry: u64) -> Result<SegmentSelector, &'static str> {
  204420:	48 83 ec 68          	sub    $0x68,%rsp
  204424:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  204429:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20442e:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  204433:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  204438:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  20443d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  204442:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  204447:	73 1b                	jae    204464 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x44>
  204449:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
        }

        // add a new entry:
        self.entries[self.filled] = entry;
  20444e:	48 8b 40 40          	mov    0x40(%rax),%rax
  204452:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  204457:	48 83 f8 08          	cmp    $0x8,%rax
  20445b:	0f 92 c0             	setb   %al
  20445e:	a8 01                	test   $0x1,%al
  204460:	75 29                	jne    20448b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x6b>
  204462:	eb 5e                	jmp    2044c2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xa2>
  204464:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  204469:	48 8d 0d 61 bf ff ff 	lea    -0x409f(%rip),%rcx        # 2003d1 <str.1+0x21>
  204470:	48 89 48 08          	mov    %rcx,0x8(%rax)
  204474:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  20447b:	00 
  20447c:	66 c7 00 01 00       	movw   $0x1,(%rax)
  204481:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        let current_index = self.filled;
        self.filled += 1;

        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
        Ok(SegmentSelector::new(current_index as u16, ring))
    }
  204486:	48 83 c4 68          	add    $0x68,%rsp
  20448a:	c3                   	retq   
  20448b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  204490:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  204495:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
        self.entries[self.filled] = entry;
  20449a:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        let current_index = self.filled;
  20449e:	48 8b 48 40          	mov    0x40(%rax),%rcx
  2044a2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2044a7:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
        self.filled += 1;
  2044ac:	48 8b 40 40          	mov    0x40(%rax),%rax
  2044b0:	48 83 c0 01          	add    $0x1,%rax
  2044b4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2044b9:	0f 92 c0             	setb   %al
  2044bc:	a8 01                	test   $0x1,%al
  2044be:	75 3c                	jne    2044fc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xdc>
  2044c0:	eb 18                	jmp    2044da <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xba>
  2044c2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        self.entries[self.filled] = entry;
  2044c7:	48 8d 15 f2 a6 01 00 	lea    0x1a6f2(%rip),%rdx        # 21ebc0 <memset+0x1100>
  2044ce:	be 08 00 00 00       	mov    $0x8,%esi
  2044d3:	e8 a8 6b 01 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2044d8:	0f 0b                	ud2    
  2044da:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2044df:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2044e4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        self.filled += 1;
  2044e9:	48 89 48 40          	mov    %rcx,0x40(%rax)
        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
  2044ed:	e8 ee fe ff ff       	callq  2043e0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE>
  2044f2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2044f6:	88 44 24 67          	mov    %al,0x67(%rsp)
  2044fa:	eb 1a                	jmp    204516 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xf6>
        self.filled += 1;
  2044fc:	48 8d 3d fd be ff ff 	lea    -0x4103(%rip),%rdi        # 200400 <str.2>
  204503:	48 8d 15 ce a6 01 00 	lea    0x1a6ce(%rip),%rdx        # 21ebd8 <memset+0x1118>
  20450a:	be 1c 00 00 00       	mov    $0x1c,%esi
  20450f:	e8 1c 6b 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204514:	0f 0b                	ud2    
  204516:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20451a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Ok(SegmentSelector::new(current_index as u16, ring))
  20451f:	0f b7 f9             	movzwl %cx,%edi
  204522:	0f b6 f0             	movzbl %al,%esi
  204525:	e8 46 f7 ff ff       	callq  203c70 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>
  20452a:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  20452f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  204534:	66 8b 4c 24 0c       	mov    0xc(%rsp),%cx
  204539:	66 89 48 02          	mov    %cx,0x2(%rax)
  20453d:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  204542:	e9 3a ff ff ff       	jmpq   204481 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x61>
  204547:	cc                   	int3   
  204548:	cc                   	int3   
  204549:	cc                   	int3   
  20454a:	cc                   	int3   
  20454b:	cc                   	int3   
  20454c:	cc                   	int3   
  20454d:	cc                   	int3   
  20454e:	cc                   	int3   
  20454f:	cc                   	int3   

0000000000204550 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E>:

    pub fn set_system_segment(
  204550:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  204557:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20455c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  204561:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  204566:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  20456b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  204570:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  204575:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  20457a:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        &mut self,
        high: u64,
        low: u64,
    ) -> Result<SegmentSelector, &'static str> {
        if self.filled >= MAX_GDT_ENTRIES {
  20457f:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  204584:	73 2c                	jae    2045b2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x62>
  204586:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
        }

        // add a low and high entries:
        let current_index = self.filled;
  20458b:	48 8b 48 40          	mov    0x40(%rax),%rcx
  20458f:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  204594:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20459b:	00 
        self.entries[self.filled] = low;
  20459c:	48 8b 40 40          	mov    0x40(%rax),%rax
  2045a0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2045a5:	48 83 f8 08          	cmp    $0x8,%rax
  2045a9:	0f 92 c0             	setb   %al
  2045ac:	a8 01                	test   $0x1,%al
  2045ae:	75 2c                	jne    2045dc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x8c>
  2045b0:	eb 53                	jmp    204605 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xb5>
  2045b2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  2045b7:	48 8d 0d 13 be ff ff 	lea    -0x41ed(%rip),%rcx        # 2003d1 <str.1+0x21>
  2045be:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2045c2:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  2045c9:	00 
  2045ca:	66 c7 00 01 00       	movw   $0x1,(%rax)
  2045cf:	48 8b 44 24 58       	mov    0x58(%rsp),%rax

        Ok(SegmentSelector::new(
            current_index as u16,
            PrivilegeLevel::Ring0,
        ))
    }
  2045d4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2045db:	c3                   	retq   
  2045dc:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2045e1:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2045e6:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
        self.entries[self.filled] = low;
  2045eb:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  2045ef:	48 8b 40 40          	mov    0x40(%rax),%rax
  2045f3:	48 83 c0 01          	add    $0x1,%rax
  2045f7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2045fc:	0f 92 c0             	setb   %al
  2045ff:	a8 01                	test   $0x1,%al
  204601:	75 3e                	jne    204641 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xf1>
  204603:	eb 18                	jmp    20461d <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xcd>
  204605:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        self.entries[self.filled] = low;
  20460a:	48 8d 15 df a5 01 00 	lea    0x1a5df(%rip),%rdx        # 21ebf0 <memset+0x1130>
  204611:	be 08 00 00 00       	mov    $0x8,%esi
  204616:	e8 65 6a 01 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20461b:	0f 0b                	ud2    
  20461d:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  204622:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        self.filled += 1;
  204627:	48 89 48 40          	mov    %rcx,0x40(%rax)
        self.entries[self.filled] = high;
  20462b:	48 8b 40 40          	mov    0x40(%rax),%rax
  20462f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204634:	48 83 f8 08          	cmp    $0x8,%rax
  204638:	0f 92 c0             	setb   %al
  20463b:	a8 01                	test   $0x1,%al
  20463d:	75 1c                	jne    20465b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x10b>
  20463f:	eb 43                	jmp    204684 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x134>
        self.filled += 1;
  204641:	48 8d 3d b8 bd ff ff 	lea    -0x4248(%rip),%rdi        # 200400 <str.2>
  204648:	48 8d 15 b9 a5 01 00 	lea    0x1a5b9(%rip),%rdx        # 21ec08 <memset+0x1148>
  20464f:	be 1c 00 00 00       	mov    $0x1c,%esi
  204654:	e8 d7 69 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204659:	0f 0b                	ud2    
  20465b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  204660:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  204665:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
        self.entries[self.filled] = high;
  20466a:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  20466e:	48 8b 40 40          	mov    0x40(%rax),%rax
  204672:	48 83 c0 01          	add    $0x1,%rax
  204676:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20467b:	0f 92 c0             	setb   %al
  20467e:	a8 01                	test   $0x1,%al
  204680:	75 46                	jne    2046c8 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x178>
  204682:	eb 18                	jmp    20469c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x14c>
  204684:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        self.entries[self.filled] = high;
  204689:	48 8d 15 90 a5 01 00 	lea    0x1a590(%rip),%rdx        # 21ec20 <memset+0x1160>
  204690:	be 08 00 00 00       	mov    $0x8,%esi
  204695:	e8 e6 69 01 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20469a:	0f 0b                	ud2    
  20469c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2046a1:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  2046a6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        self.filled += 1;
  2046ab:	48 89 51 40          	mov    %rdx,0x40(%rcx)
            PrivilegeLevel::Ring0,
  2046af:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
        Ok(SegmentSelector::new(
  2046b4:	0f b7 f8             	movzwl %ax,%edi
  2046b7:	0f b6 74 24 67       	movzbl 0x67(%rsp),%esi
  2046bc:	e8 af f5 ff ff       	callq  203c70 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>
  2046c1:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2046c6:	eb 1a                	jmp    2046e2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x192>
        self.filled += 1;
  2046c8:	48 8d 3d 31 bd ff ff 	lea    -0x42cf(%rip),%rdi        # 200400 <str.2>
  2046cf:	48 8d 15 62 a5 01 00 	lea    0x1a562(%rip),%rdx        # 21ec38 <memset+0x1178>
  2046d6:	be 1c 00 00 00       	mov    $0x1c,%esi
  2046db:	e8 50 69 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2046e0:	0f 0b                	ud2    
  2046e2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2046e7:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
        Ok(SegmentSelector::new(
  2046ec:	66 89 48 02          	mov    %cx,0x2(%rax)
  2046f0:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  2046f5:	e9 d5 fe ff ff       	jmpq   2045cf <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x7f>
  2046fa:	cc                   	int3   
  2046fb:	cc                   	int3   
  2046fc:	cc                   	int3   
  2046fd:	cc                   	int3   
  2046fe:	cc                   	int3   
  2046ff:	cc                   	int3   

0000000000204700 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E>:
}

const STACK_SIZE: usize = 4096 * 5;
static mut TSS_STACK: [u8; STACK_SIZE] = [0; STACK_SIZE];

pub fn create_tss_for_bp() -> TaskStateSegment {
  204700:	48 83 ec 28          	sub    $0x28,%rsp
  204704:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  204709:	48 89 f8             	mov    %rdi,%rax
  20470c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut tss = TaskStateSegment::empty();
  204711:	e8 1a f7 ff ff       	callq  203e30 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17he7cacc0fe7603b71E>
    tss.interrupt_stack_table[0] = {
        let k_stack_start = (unsafe { &TSS_STACK } as *const _) as u64;
  204716:	48 8d 05 53 d1 01 00 	lea    0x1d153(%rip),%rax        # 221870 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h6f9475d03845fad0E>
  20471d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        k_stack_start + STACK_SIZE as u64
  204722:	48 8d 05 47 d1 01 00 	lea    0x1d147(%rip),%rax        # 221870 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h6f9475d03845fad0E>
  204729:	48 05 00 50 00 00    	add    $0x5000,%rax
  20472f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  204734:	0f 92 c0             	setb   %al
  204737:	a8 01                	test   $0x1,%al
  204739:	75 18                	jne    204753 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E+0x53>
  20473b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  204740:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  204745:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    tss.interrupt_stack_table[0] = {
  20474a:	48 89 51 24          	mov    %rdx,0x24(%rcx)
    };

    tss
}
  20474e:	48 83 c4 28          	add    $0x28,%rsp
  204752:	c3                   	retq   
        k_stack_start + STACK_SIZE as u64
  204753:	48 8d 3d a6 bc ff ff 	lea    -0x435a(%rip),%rdi        # 200400 <str.2>
  20475a:	48 8d 15 ef a4 01 00 	lea    0x1a4ef(%rip),%rdx        # 21ec50 <memset+0x1190>
  204761:	be 1c 00 00 00       	mov    $0x1c,%esi
  204766:	e8 c5 68 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20476b:	0f 0b                	ud2    
  20476d:	cc                   	int3   
  20476e:	cc                   	int3   
  20476f:	cc                   	int3   

0000000000204770 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE>:
lazy_static! {
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
}

// create GDT for the base processor:
pub fn create_gdt_for_bp() -> GDTContainer {
  204770:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  204777:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20477c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    // create a GDT with empty segment
    let mut gdt = GlobalDescritorTable::empty();
  204781:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  204786:	e8 05 fb ff ff       	callq  204290 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17hc6ad18ad40b39fccE>
    let k_code_segment_res = gdt.set_user_segment(LinuxKernelSegments::KernelCode as u64);
  20478b:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  204792:	00 
  204793:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  204798:	48 ba ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rdx
  20479f:	9b af 00 
  2047a2:	e8 79 fc ff ff       	callq  204420 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E>
    if k_code_segment_res.is_err() {
  2047a7:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  2047ae:	00 
  2047af:	e8 0c dd 00 00       	callq  2124c0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>
  2047b4:	88 44 24 27          	mov    %al,0x27(%rsp)
  2047b8:	8a 44 24 27          	mov    0x27(%rsp),%al
  2047bc:	a8 01                	test   $0x1,%al
  2047be:	75 15                	jne    2047d5 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x65>
  2047c0:	eb 00                	jmp    2047c2 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x52>
        panic!("{}", k_code_segment_res.unwrap_err());
    }

    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  2047c2:	48 8d 3d 2e bd ff ff 	lea    -0x42d2(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  2047c9:	e8 32 06 00 00       	callq  204e00 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc306cbd0648060a6E>
  2047ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2047d3:	eb 6a                	jmp    20483f <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0xcf>
        panic!("{}", k_code_segment_res.unwrap_err());
  2047d5:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2047dc:	00 
  2047dd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  2047e4:	00 
  2047e5:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2047ec:	00 
  2047ed:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2047f4:	00 
  2047f5:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  2047fc:	00 
  2047fd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  204804:	00 
  204805:	48 8d 35 5c a4 01 00 	lea    0x1a45c(%rip),%rsi        # 21ec68 <memset+0x11a8>
  20480c:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  204813:	00 
  204814:	e8 e7 da 00 00       	callq  212300 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>
  204819:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  204820:	00 
  204821:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  204828:	00 
  204829:	48 8d 35 50 a4 01 00 	lea    0x1a450(%rip),%rsi        # 21ec80 <memset+0x11c0>
  204830:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  204837:	00 
  204838:	e8 93 5c 00 00       	callq  20a4d0 <_ZN4core9panicking13panic_display17h436238fbdc089216E>
  20483d:	0f 0b                	ud2    
  20483f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  204844:	e8 87 f6 ff ff       	callq  203ed0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E>
  204849:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20484e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  204853:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  20485a:	00 
  20485b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  204862:	00 
  204863:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  204868:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx

    let k_tss_segment_result = gdt.set_system_segment(tss_descriptor.high, tss_descriptor.low);
  20486d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  204874:	00 
  204875:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  20487a:	e8 d1 fc ff ff       	callq  204550 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E>
    if k_tss_segment_result.is_err() {
  20487f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  204886:	00 
  204887:	e8 34 dc 00 00       	callq  2124c0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>
  20488c:	88 44 24 07          	mov    %al,0x7(%rsp)
  204890:	8a 44 24 07          	mov    0x7(%rsp),%al
  204894:	a8 01                	test   $0x1,%al
  204896:	75 64                	jne    2048fc <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x18c>
  204898:	eb 00                	jmp    20489a <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x12a>
        panic!("{}", k_tss_segment_result.unwrap_err());
    }

    GDTContainer {
        gdt_table: gdt,
  20489a:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2048a1:	00 
  2048a2:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  2048a7:	ba 48 00 00 00       	mov    $0x48,%edx
  2048ac:	e8 ef 91 01 00       	callq  21daa0 <memcpy>
        kernel_code_selector: k_code_segment_res.unwrap(),
  2048b1:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2048b8:	00 
  2048b9:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2048c0:	00 
  2048c1:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2048c8:	00 
  2048c9:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2048d0:	00 
  2048d1:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2048d8:	00 
  2048d9:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  2048e0:	00 
  2048e1:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  2048e8:	00 
  2048e9:	48 8d 35 d8 a3 01 00 	lea    0x1a3d8(%rip),%rsi        # 21ecc8 <memset+0x1208>
  2048f0:	e8 ab dc 00 00       	callq  2125a0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>
  2048f5:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  2048fa:	eb 6a                	jmp    204966 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x1f6>
        panic!("{}", k_tss_segment_result.unwrap_err());
  2048fc:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  204903:	00 
  204904:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20490b:	00 
  20490c:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  204913:	00 
  204914:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  20491b:	00 
  20491c:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  204923:	00 
  204924:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20492b:	00 
  20492c:	48 8d 35 65 a3 01 00 	lea    0x1a365(%rip),%rsi        # 21ec98 <memset+0x11d8>
  204933:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20493a:	00 
  20493b:	e8 c0 d9 00 00       	callq  212300 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>
  204940:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  204947:	00 
  204948:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20494f:	00 
  204950:	48 8d 35 59 a3 01 00 	lea    0x1a359(%rip),%rsi        # 21ecb0 <memset+0x11f0>
  204957:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  20495e:	00 
  20495f:	e8 6c 5b 00 00       	callq  20a4d0 <_ZN4core9panicking13panic_display17h436238fbdc089216E>
  204964:	0f 0b                	ud2    
        kernel_tss_selector: k_tss_segment_result.unwrap(),
  204966:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20496d:	00 
  20496e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  204975:	00 
  204976:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  20497d:	00 
  20497e:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  204985:	00 
  204986:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20498d:	00 
  20498e:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  204995:	00 
  204996:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20499d:	00 
  20499e:	48 8d 35 3b a3 01 00 	lea    0x1a33b(%rip),%rsi        # 21ece0 <memset+0x1220>
  2049a5:	e8 f6 db 00 00       	callq  2125a0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>
  2049aa:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  2049af:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    GDTContainer {
  2049b4:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  2049bb:	00 
  2049bc:	ba 48 00 00 00       	mov    $0x48,%edx
  2049c1:	e8 da 90 01 00       	callq  21daa0 <memcpy>
  2049c6:	66 8b 74 24 04       	mov    0x4(%rsp),%si
  2049cb:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  2049d0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2049d5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2049da:	66 89 71 48          	mov    %si,0x48(%rcx)
  2049de:	66 89 51 4a          	mov    %dx,0x4a(%rcx)
    }
}
  2049e2:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  2049e9:	c3                   	retq   
  2049ea:	cc                   	int3   
  2049eb:	cc                   	int3   
  2049ec:	cc                   	int3   
  2049ed:	cc                   	int3   
  2049ee:	cc                   	int3   
  2049ef:	cc                   	int3   

00000000002049f0 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E>:
lazy_static! {
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
}

// create the GDT
pub fn init_gdt() {
  2049f0:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
    // set ss to zero:

    // Not setting SS to 0 will make iretq throw double fault
    // because iretq expects SS to be 0 or needs a valid data-segment to be set-up.
    SegmentRegister::SS.set(0);
  2049f7:	48 8d 3d 1e ba ff ff 	lea    -0x45e2(%rip),%rdi        # 20041c <str.2+0x1c>
  2049fe:	31 f6                	xor    %esi,%esi
  204a00:	e8 ab f2 ff ff       	callq  203cb0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE>

    let gdt_table = &KERNEL_BASE_GDT.gdt_table;
  204a05:	48 8d 3d eb ba ff ff 	lea    -0x4515(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204a0c:	e8 1f 04 00 00       	callq  204e30 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204a11:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  204a16:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  204a1b:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  204a22:	00 
    gdt_table.load_into_cpu();
  204a23:	e8 78 f9 ff ff       	callq  2043a0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h6757b776799da27dE>

    // set the code segment register
    let kernel_cs = &KERNEL_BASE_GDT.kernel_code_selector;
  204a28:	48 8d 3d c8 ba ff ff 	lea    -0x4538(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204a2f:	e8 fc 03 00 00       	callq  204e30 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204a34:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  204a39:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  204a3e:	48 89 c1             	mov    %rax,%rcx
  204a41:	48 83 c1 48          	add    $0x48,%rcx
  204a45:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  204a4a:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  204a51:	00 
    SegmentRegister::CS.set(kernel_cs.0);
  204a52:	48 8d 3d c4 b9 ff ff 	lea    -0x463c(%rip),%rdi        # 20041d <str.2+0x1d>
  204a59:	0f b7 70 48          	movzwl 0x48(%rax),%esi
  204a5d:	e8 4e f2 ff ff       	callq  203cb0 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE>
  204a62:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

    // assert the register value:
    SegmentRegister::CS.assert_reg(kernel_cs.0);
  204a67:	48 8d 3d af b9 ff ff 	lea    -0x4651(%rip),%rdi        # 20041d <str.2+0x1d>
  204a6e:	0f b7 30             	movzwl (%rax),%esi
  204a71:	e8 2a f3 ff ff       	callq  203da0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E>
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  204a76:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  204a7d:	00 00 
  204a7f:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  204a84:	48 8d 35 cd b8 ff ff 	lea    -0x4733(%rip),%rsi        # 200358 <str.0+0x58>
  204a8b:	e8 d0 12 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204a90:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  204a94:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  204a98:	a8 01                	test   $0x1,%al
  204a9a:	75 09                	jne    204aa5 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xb5>
  204a9c:	eb 00                	jmp    204a9e <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xae>
  204a9e:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  204aa3:	eb 4e                	jmp    204af3 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x103>
  204aa5:	c6 84 24 7f 01 00 00 	movb   $0x0,0x17f(%rsp)
  204aac:	00 
  204aad:	48 8b 3d ec bc 01 00 	mov    0x1bcec(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204ab4:	0f b6 b4 24 7f 01 00 	movzbl 0x17f(%rsp),%esi
  204abb:	00 
  204abc:	e8 2f e0 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  204ac1:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  204ac8:	00 
  204ac9:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  204ad0:	00 
  204ad1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  204ad6:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  204adb:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  204ae0:	e8 7b 12 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204ae5:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  204ae9:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  204aed:	24 01                	and    $0x1,%al
  204aef:	88 44 24 57          	mov    %al,0x57(%rsp)
  204af3:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  204af8:	75 29                	jne    204b23 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x133>
    log::info!("Initialized GDT.");
  204afa:	48 c7 84 24 a8 00 00 	movq   $0x3,0xa8(%rsp)
  204b01:	00 03 00 00 00 
  204b06:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  204b0d:	00 
  204b0e:	48 8d 35 43 b8 ff ff 	lea    -0x47bd(%rip),%rsi        # 200358 <str.0+0x58>
  204b15:	e8 46 12 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204b1a:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  204b1e:	e9 8a 00 00 00       	jmpq   204bad <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1bd>
  204b23:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  204b28:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  204b2f:	00 
  204b30:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  204b37:	00 
  204b38:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  204b3f:	00 
  204b40:	48 8b 35 69 bc 01 00 	mov    0x1bc69(%rip),%rsi        # 2207b0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  204b47:	e8 64 ed 00 00       	callq  2138b0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  204b4c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204b51:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  204b56:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  204b5b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  204b60:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  204b67:	00 
  204b68:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  204b6f:	00 
  204b70:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  204b77:	00 
  204b78:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  204b7d:	48 8d 35 74 a1 01 00 	lea    0x1a174(%rip),%rsi        # 21ecf8 <memset+0x1238>
  204b84:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  204b8a:	4c 89 c2             	mov    %r8,%rdx
  204b8d:	e8 6e 03 00 00       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  204b92:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  204b97:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  204b9c:	48 8d 15 65 a1 01 00 	lea    0x1a165(%rip),%rdx        # 21ed08 <memset+0x1248>
  204ba3:	e8 68 3c 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  204ba8:	e9 4d ff ff ff       	jmpq   204afa <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x10a>
  204bad:	8a 44 24 2d          	mov    0x2d(%rsp),%al
    log::info!("Initialized GDT.");
  204bb1:	a8 01                	test   $0x1,%al
  204bb3:	75 0c                	jne    204bc1 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1d1>
  204bb5:	eb 00                	jmp    204bb7 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1c7>
  204bb7:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  204bbe:	00 
  204bbf:	eb 5a                	jmp    204c1b <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x22b>
  204bc1:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  204bc8:	00 
  204bc9:	48 8b 3d d0 bb 01 00 	mov    0x1bbd0(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204bd0:	0f b6 b4 24 6f 01 00 	movzbl 0x16f(%rsp),%esi
  204bd7:	00 
  204bd8:	e8 13 df 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  204bdd:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  204be4:	00 
  204be5:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  204bec:	00 
  204bed:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  204bf4:	00 
  204bf5:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  204bfc:	00 
  204bfd:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  204c04:	00 
  204c05:	e8 56 11 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204c0a:	88 44 24 17          	mov    %al,0x17(%rsp)
  204c0e:	8a 44 24 17          	mov    0x17(%rsp),%al
  204c12:	24 01                	and    $0x1,%al
  204c14:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  204c1b:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  204c22:	01 
  204c23:	75 13                	jne    204c38 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x248>

    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  204c25:	48 8d 3d cb b8 ff ff 	lea    -0x4735(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204c2c:	e8 ff 01 00 00       	callq  204e30 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204c31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  204c36:	eb 43                	jmp    204c7b <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x28b>
    log::info!("Initialized GDT.");
  204c38:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  204c3f:	00 
  204c40:	48 8d 35 f9 a0 01 00 	lea    0x1a0f9(%rip),%rsi        # 21ed40 <memset+0x1280>
  204c47:	ba 01 00 00 00       	mov    $0x1,%edx
  204c4c:	48 8d 0d 95 b8 ff ff 	lea    -0x476b(%rip),%rcx        # 2004e8 <str.2+0xe8>
  204c53:	31 c0                	xor    %eax,%eax
  204c55:	41 89 c0             	mov    %eax,%r8d
  204c58:	e8 a3 02 00 00       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  204c5d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  204c64:	00 
  204c65:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  204c6c:	00 
  204c6d:	48 8d 15 dc a0 01 00 	lea    0x1a0dc(%rip),%rdx        # 21ed50 <memset+0x1290>
  204c74:	e8 97 3b 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  204c79:	eb aa                	jmp    204c25 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x235>
  204c7b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  204c80:	48 89 c1             	mov    %rax,%rcx
  204c83:	48 83 c1 4a          	add    $0x4a,%rcx
  204c87:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  204c8e:	00 
    load_tss(tss_sel.0);
  204c8f:	0f b7 78 4a          	movzwl 0x4a(%rax),%edi
  204c93:	e8 b8 ef ff ff       	callq  203c50 <_ZN9r3_kernel3cpu8segments8load_tss17h2c868d95eb8693b2E>
    log::info!("Initialized TSS.");
  204c98:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  204c9f:	00 03 00 00 00 
  204ca4:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  204cab:	00 
  204cac:	48 8d 35 a5 b6 ff ff 	lea    -0x495b(%rip),%rsi        # 200358 <str.0+0x58>
  204cb3:	e8 a8 10 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204cb8:	88 44 24 07          	mov    %al,0x7(%rsp)
  204cbc:	8a 44 24 07          	mov    0x7(%rsp),%al
  204cc0:	a8 01                	test   $0x1,%al
  204cc2:	75 0c                	jne    204cd0 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x2e0>
  204cc4:	eb 00                	jmp    204cc6 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x2d6>
  204cc6:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  204ccd:	00 
  204cce:	eb 5a                	jmp    204d2a <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x33a>
  204cd0:	c6 84 24 5f 01 00 00 	movb   $0x0,0x15f(%rsp)
  204cd7:	00 
  204cd8:	48 8b 3d c1 ba 01 00 	mov    0x1bac1(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204cdf:	0f b6 b4 24 5f 01 00 	movzbl 0x15f(%rsp),%esi
  204ce6:	00 
  204ce7:	e8 04 de 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  204cec:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  204cf3:	00 
  204cf4:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  204cfb:	00 
  204cfc:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  204d03:	00 
  204d04:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  204d0b:	00 
  204d0c:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  204d13:	00 
  204d14:	e8 47 10 00 00       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204d19:	88 44 24 06          	mov    %al,0x6(%rsp)
  204d1d:	8a 44 24 06          	mov    0x6(%rsp),%al
  204d21:	24 01                	and    $0x1,%al
  204d23:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  204d2a:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  204d31:	01 
  204d32:	75 08                	jne    204d3c <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x34c>
}
  204d34:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  204d3b:	c3                   	retq   
    log::info!("Initialized TSS.");
  204d3c:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  204d43:	00 
  204d44:	48 8d 35 3d a0 01 00 	lea    0x1a03d(%rip),%rsi        # 21ed88 <memset+0x12c8>
  204d4b:	ba 01 00 00 00       	mov    $0x1,%edx
  204d50:	48 8d 0d 91 b7 ff ff 	lea    -0x486f(%rip),%rcx        # 2004e8 <str.2+0xe8>
  204d57:	31 c0                	xor    %eax,%eax
  204d59:	41 89 c0             	mov    %eax,%r8d
  204d5c:	e8 9f 01 00 00       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  204d61:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  204d68:	00 
  204d69:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  204d70:	00 
  204d71:	48 8d 15 20 a0 01 00 	lea    0x1a020(%rip),%rdx        # 21ed98 <memset+0x12d8>
  204d78:	e8 93 3a 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  204d7d:	eb b5                	jmp    204d34 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x344>
  204d7f:	cc                   	int3   

0000000000204d80 <_ZN78_$LT$r3_kernel..cpu..segments..SegmentSelector$u20$as$u20$core..fmt..Debug$GT$3fmt17hf7b4ee4cd1688ff2E>:
#[derive(Debug)]
  204d80:	48 83 ec 58          	sub    $0x58,%rsp
  204d84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  204d89:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  204d8e:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct SegmentSelector(pub u16);
  204d93:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug)]
  204d98:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204d9d:	48 8d 15 44 b7 ff ff 	lea    -0x48bc(%rip),%rdx        # 2004e8 <str.2+0xe8>
  204da4:	b9 0f 00 00 00       	mov    $0xf,%ecx
  204da9:	e8 82 81 01 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  204dae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204db3:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  204db8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct SegmentSelector(pub u16);
  204dbd:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  204dc2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug)]
  204dc7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204dcc:	48 8d 15 fd 9f 01 00 	lea    0x19ffd(%rip),%rdx        # 21edd0 <memset+0x1310>
  204dd3:	e8 88 5c 01 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  204dd8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204ddd:	e8 ee 5d 01 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  204de2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  204de6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  204dea:	24 01                	and    $0x1,%al
  204dec:	0f b6 c0             	movzbl %al,%eax
  204def:	48 83 c4 58          	add    $0x58,%rsp
  204df3:	c3                   	retq   
  204df4:	cc                   	int3   
  204df5:	cc                   	int3   
  204df6:	cc                   	int3   
  204df7:	cc                   	int3   
  204df8:	cc                   	int3   
  204df9:	cc                   	int3   
  204dfa:	cc                   	int3   
  204dfb:	cc                   	int3   
  204dfc:	cc                   	int3   
  204dfd:	cc                   	int3   
  204dfe:	cc                   	int3   
  204dff:	cc                   	int3   

0000000000204e00 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc306cbd0648060a6E>:
        lazy_static!($($t)*);
    };
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
  204e00:	48 83 ec 18          	sub    $0x18,%rsp
  204e04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  204e09:	48 8d 05 60 1a 02 00 	lea    0x21a60(%rip),%rax        # 226870 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hcc943e2095b446c4E>
  204e10:	48 89 44 24 10       	mov    %rax,0x10(%rsp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
  204e15:	48 8d 3d 54 1a 02 00 	lea    0x21a54(%rip),%rdi        # 226870 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hcc943e2095b446c4E>
  204e1c:	e8 bf 3a 00 00       	callq  2088e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E>
  204e21:	48 89 04 24          	mov    %rax,(%rsp)
  204e25:	48 8b 04 24          	mov    (%rsp),%rax
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
  204e29:	48 83 c4 18          	add    $0x18,%rsp
  204e2d:	c3                   	retq   
  204e2e:	cc                   	int3   
  204e2f:	cc                   	int3   

0000000000204e30 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>:
            fn deref(&self) -> &$T {
  204e30:	48 83 ec 18          	sub    $0x18,%rsp
  204e34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  204e39:	48 8d 05 a8 1a 02 00 	lea    0x21aa8(%rip),%rax        # 2268e8 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h5e166e16dd8a77c2E>
  204e40:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  204e45:	48 8d 3d 9c 1a 02 00 	lea    0x21a9c(%rip),%rdi        # 2268e8 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h5e166e16dd8a77c2E>
  204e4c:	e8 5f 47 00 00       	callq  2095b0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE>
  204e51:	48 89 04 24          	mov    %rax,(%rsp)
  204e55:	48 8b 04 24          	mov    (%rsp),%rax
            }
  204e59:	48 83 c4 18          	add    $0x18,%rsp
  204e5d:	c3                   	retq   
  204e5e:	cc                   	int3   
  204e5f:	cc                   	int3   

0000000000204e60 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17he730e5a2c8cdfc3cE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  204e60:	48 83 ec 28          	sub    $0x28,%rsp
  204e64:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  204e69:	48 89 f8             	mov    %rdi,%rax
  204e6c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  204e71:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204e76:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        f.pad("()")
  204e7b:	48 8d 35 75 b6 ff ff 	lea    -0x498b(%rip),%rsi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204e82:	ba 02 00 00 00       	mov    $0x2,%edx
  204e87:	e8 b4 7c 01 00       	callq  21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  204e8c:	88 44 24 17          	mov    %al,0x17(%rsp)
  204e90:	8a 44 24 17          	mov    0x17(%rsp),%al
    }
  204e94:	24 01                	and    $0x1,%al
  204e96:	0f b6 c0             	movzbl %al,%eax
  204e99:	48 83 c4 28          	add    $0x28,%rsp
  204e9d:	c3                   	retq   
  204e9e:	cc                   	int3   
  204e9f:	cc                   	int3   

0000000000204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>:
    pub const fn new_v1_formatted(
  204ea0:	48 83 ec 48          	sub    $0x48,%rsp
  204ea4:	4d 89 ca             	mov    %r9,%r10
  204ea7:	48 89 f8             	mov    %rdi,%rax
  204eaa:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  204eaf:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  204eb4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  204eb9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  204ebe:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  204ec3:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  204ec8:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
        Arguments { pieces, fmt: Some(fmt), args }
  204ecd:	4c 89 14 24          	mov    %r10,(%rsp)
  204ed1:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  204ed6:	48 89 37             	mov    %rsi,(%rdi)
  204ed9:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  204edd:	48 8b 34 24          	mov    (%rsp),%rsi
  204ee1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  204ee6:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  204eea:	48 89 57 18          	mov    %rdx,0x18(%rdi)
  204eee:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
  204ef2:	4c 89 47 28          	mov    %r8,0x28(%rdi)
    }
  204ef6:	48 83 c4 48          	add    $0x48,%rsp
  204efa:	c3                   	retq   
  204efb:	cc                   	int3   
  204efc:	cc                   	int3   
  204efd:	cc                   	int3   
  204efe:	cc                   	int3   
  204eff:	cc                   	int3   

0000000000204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  204f00:	48 83 ec 68          	sub    $0x68,%rsp
  204f04:	4c 89 04 24          	mov    %r8,(%rsp)
  204f08:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  204f0d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  204f12:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  204f17:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  204f1c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  204f21:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  204f26:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  204f2b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  204f30:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  204f35:	4c 39 c2             	cmp    %r8,%rdx
  204f38:	72 1b                	jb     204f55 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0x55>
  204f3a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204f3f:	48 8b 0c 24          	mov    (%rsp),%rcx
  204f43:	48 83 c1 01          	add    $0x1,%rcx
  204f47:	48 39 c8             	cmp    %rcx,%rax
  204f4a:	0f 97 c0             	seta   %al
  204f4d:	24 01                	and    $0x1,%al
  204f4f:	88 44 24 37          	mov    %al,0x37(%rsp)
  204f53:	eb 05                	jmp    204f5a <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0x5a>
  204f55:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  204f5a:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  204f5f:	75 4c                	jne    204fad <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0xad>
  204f61:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  204f66:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  204f6b:	48 8b 14 24          	mov    (%rsp),%rdx
  204f6f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  204f74:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  204f79:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  204f7e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  204f85:	00 00 
  204f87:	4c 89 01             	mov    %r8,(%rcx)
  204f8a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  204f8e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  204f93:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  204f98:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  204f9c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  204fa0:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  204fa4:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  204fa8:	48 83 c4 68          	add    $0x68,%rsp
  204fac:	c3                   	retq   
            panic!("invalid args");
  204fad:	48 8d 3d 45 b5 ff ff 	lea    -0x4abb(%rip),%rdi        # 2004f9 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x2>
  204fb4:	48 8d 15 35 9e 01 00 	lea    0x19e35(%rip),%rdx        # 21edf0 <memset+0x1330>
  204fbb:	be 0c 00 00 00       	mov    $0xc,%esi
  204fc0:	e8 6b 60 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204fc5:	0f 0b                	ud2    
  204fc7:	cc                   	int3   
  204fc8:	cc                   	int3   
  204fc9:	cc                   	int3   
  204fca:	cc                   	int3   
  204fcb:	cc                   	int3   
  204fcc:	cc                   	int3   
  204fcd:	cc                   	int3   
  204fce:	cc                   	int3   
  204fcf:	cc                   	int3   

0000000000204fd0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E>:
        }
    }
}

/// Represents the different types of memory.
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  204fd0:	48 83 ec 70          	sub    $0x70,%rsp
  204fd4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  204fd9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  204fde:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  204fe3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  204fe8:	8b 07                	mov    (%rdi),%eax
  204fea:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  204fef:	8b 0e                	mov    (%rsi),%ecx
  204ff1:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  204ff6:	48 39 c8             	cmp    %rcx,%rax
  204ff9:	74 0a                	je     205005 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x35>
  204ffb:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  205000:	e9 87 00 00 00       	jmpq   20508c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0xbc>
  205005:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20500a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20500f:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  205014:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  205019:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20501e:	8b 00                	mov    (%rax),%eax
  205020:	48 89 04 24          	mov    %rax,(%rsp)
  205024:	48 83 e8 02          	sub    $0x2,%rax
  205028:	74 15                	je     20503f <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x6f>
  20502a:	eb 00                	jmp    20502c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x5c>
  20502c:	48 8b 04 24          	mov    (%rsp),%rax
  205030:	48 83 e8 03          	sub    $0x3,%rax
  205034:	74 18                	je     20504e <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x7e>
  205036:	eb 00                	jmp    205038 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x68>
  205038:	c6 44 24 1f 01       	movb   $0x1,0x1f(%rsp)
  20503d:	eb 4d                	jmp    20508c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0xbc>
  20503f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205044:	8b 00                	mov    (%rax),%eax
  205046:	48 83 f8 02          	cmp    $0x2,%rax
  20504a:	74 4e                	je     20509a <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0xca>
  20504c:	eb ea                	jmp    205038 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x68>
  20504e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205053:	8b 00                	mov    (%rax),%eax
  205055:	48 83 f8 03          	cmp    $0x3,%rax
  205059:	75 dd                	jne    205038 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0x68>
    /// This should only be used if the UEFI memory type is known as usable.
    UnknownUefi(u32),
    /// An unknown memory region reported by the BIOS firmware.
    ///
    /// This should only be used if the BIOS memory type is known as usable.
    UnknownBios(u32),
  20505b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  205060:	48 89 c1             	mov    %rax,%rcx
  205063:	48 83 c1 04          	add    $0x4,%rcx
  205067:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20506c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  205071:	48 89 ca             	mov    %rcx,%rdx
  205074:	48 83 c2 04          	add    $0x4,%rdx
  205078:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20507d:	8b 40 04             	mov    0x4(%rax),%eax
  205080:	3b 41 04             	cmp    0x4(%rcx),%eax
  205083:	0f 94 c0             	sete   %al
  205086:	24 01                	and    $0x1,%al
  205088:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20508c:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  205090:	24 01                	and    $0x1,%al
  205092:	0f b6 c0             	movzbl %al,%eax
  205095:	48 83 c4 70          	add    $0x70,%rsp
  205099:	c3                   	retq   
    UnknownUefi(u32),
  20509a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20509f:	48 89 c1             	mov    %rax,%rcx
  2050a2:	48 83 c1 04          	add    $0x4,%rcx
  2050a6:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2050ab:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2050b0:	48 89 ca             	mov    %rcx,%rdx
  2050b3:	48 83 c2 04          	add    $0x4,%rdx
  2050b7:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2050bc:	8b 40 04             	mov    0x4(%rax),%eax
  2050bf:	3b 41 04             	cmp    0x4(%rcx),%eax
  2050c2:	0f 94 c0             	sete   %al
  2050c5:	24 01                	and    $0x1,%al
  2050c7:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2050cb:	eb bf                	jmp    20508c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E+0xbc>
  2050cd:	cc                   	int3   
  2050ce:	cc                   	int3   
  2050cf:	cc                   	int3   

00000000002050d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h3def670cf245a969E>:
        ($($t:ty)*) => {
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline]
                    fn clone(&self) -> Self {
  2050d0:	50                   	push   %rax
  2050d1:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  2050d5:	48 8b 07             	mov    (%rdi),%rax
                    }
  2050d8:	59                   	pop    %rcx
  2050d9:	c3                   	retq   
  2050da:	cc                   	int3   
  2050db:	cc                   	int3   
  2050dc:	cc                   	int3   
  2050dd:	cc                   	int3   
  2050de:	cc                   	int3   
  2050df:	cc                   	int3   

00000000002050e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17hb2fa8fb2c422790fE>:
                    fn clone(&self) -> Self {
  2050e0:	50                   	push   %rax
  2050e1:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  2050e5:	48 8b 07             	mov    (%rdi),%rax
                    }
  2050e8:	59                   	pop    %rcx
  2050e9:	c3                   	retq   
  2050ea:	cc                   	int3   
  2050eb:	cc                   	int3   
  2050ec:	cc                   	int3   
  2050ed:	cc                   	int3   
  2050ee:	cc                   	int3   
  2050ef:	cc                   	int3   

00000000002050f0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E>:
        }
    }
}

impl<T> From<Optional<T>> for Option<T> {
    fn from(optional: Optional<T>) -> Option<T> {
  2050f0:	48 83 ec 28          	sub    $0x28,%rsp
  2050f4:	89 3c 24             	mov    %edi,(%rsp)
  2050f7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match optional {
  2050fc:	8b 04 24             	mov    (%rsp),%eax
  2050ff:	48 85 c0             	test   %rax,%rax
  205102:	74 06                	je     20510a <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x1a>
  205104:	eb 00                	jmp    205106 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x16>
  205106:	eb 1c                	jmp    205124 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x34>
  205108:	0f 0b                	ud2    
            Optional::Some(v) => Some(v),
  20510a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20510f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  205114:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205119:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  205120:	00 00 
            Optional::None => None,
        }
    }
  205122:	eb 09                	jmp    20512d <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x3d>
            Optional::None => None,
  205124:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20512b:	00 00 
    }
  20512d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  205132:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  205137:	48 83 c4 28          	add    $0x28,%rsp
  20513b:	c3                   	retq   
  20513c:	cc                   	int3   
  20513d:	cc                   	int3   
  20513e:	cc                   	int3   
  20513f:	cc                   	int3   

0000000000205140 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E>:
    ///
    /// assert_eq!(maybe_some_len, Some(13));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  205140:	48 83 ec 78          	sub    $0x78,%rsp
  205144:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  205149:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20514e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  205153:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  205158:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
        match self {
  20515d:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  205162:	c6 44 24 5f 01       	movb   $0x1,0x5f(%rsp)
  205167:	48 8b 06             	mov    (%rsi),%rax
  20516a:	48 85 c0             	test   %rax,%rax
  20516d:	74 06                	je     205175 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0x35>
  20516f:	eb 00                	jmp    205171 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0x31>
  205171:	eb 0d                	jmp    205180 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0x40>
  205173:	0f 0b                	ud2    
  205175:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Some(x) => Some(f(x)),
            None => None,
  20517a:	c6 40 18 02          	movb   $0x2,0x18(%rax)
  20517e:	eb 67                	jmp    2051e7 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0xa7>
  205180:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  205185:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Some(x) => Some(f(x)),
  20518a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20518e:	48 8b 40 10          	mov    0x10(%rax),%rax
  205192:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  205197:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20519c:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  2051a1:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2051a6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2051ab:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  2051b0:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  2051b5:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2051ba:	e8 b1 33 00 00       	callq  208570 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h13c8dddacef8790bE>
  2051bf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2051c4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2051c9:	48 89 08             	mov    %rcx,(%rax)
  2051cc:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2051d1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2051d5:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2051da:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2051de:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2051e3:	48 89 48 18          	mov    %rcx,0x18(%rax)
        }
    }
  2051e7:	f6 44 24 5f 01       	testb  $0x1,0x5f(%rsp)
  2051ec:	75 0a                	jne    2051f8 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0xb8>
  2051ee:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2051f3:	48 83 c4 78          	add    $0x78,%rsp
  2051f7:	c3                   	retq   
  2051f8:	eb f4                	jmp    2051ee <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E+0xae>
  2051fa:	cc                   	int3   
  2051fb:	cc                   	int3   
  2051fc:	cc                   	int3   
  2051fd:	cc                   	int3   
  2051fe:	cc                   	int3   
  2051ff:	cc                   	int3   

0000000000205200 <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  205200:	48 83 ec 58          	sub    $0x58,%rsp
  205204:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  205209:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20520e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  205213:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  205218:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
        match self {
  20521d:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  205222:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  205227:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20522c:	48 85 c0             	test   %rax,%rax
  20522f:	0f 95 c0             	setne  %al
  205232:	0f b6 c0             	movzbl %al,%eax
  205235:	74 06                	je     20523d <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0x3d>
  205237:	eb 00                	jmp    205239 <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0x39>
  205239:	eb 10                	jmp    20524b <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0x4b>
  20523b:	0f 0b                	ud2    
  20523d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            None => None,
  205242:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  205249:	eb 4b                	jmp    205296 <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0x96>
  20524b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(x) => Some(f(x)),
  205250:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  205255:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20525a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20525f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  205264:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  205269:	e8 82 33 00 00       	callq  2085f0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h9c618108d69c2798E>
  20526e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  205273:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  205278:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20527d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  205282:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  205287:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20528b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20528f:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  205296:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20529b:	75 0a                	jne    2052a7 <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0xa7>
  20529d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2052a2:	48 83 c4 58          	add    $0x58,%rsp
  2052a6:	c3                   	retq   
  2052a7:	eb f4                	jmp    20529d <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E+0x9d>
  2052a9:	cc                   	int3   
  2052aa:	cc                   	int3   
  2052ab:	cc                   	int3   
  2052ac:	cc                   	int3   
  2052ad:	cc                   	int3   
  2052ae:	cc                   	int3   
  2052af:	cc                   	int3   

00000000002052b0 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  2052b0:	48 83 ec 58          	sub    $0x58,%rsp
  2052b4:	48 89 14 24          	mov    %rdx,(%rsp)
  2052b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2052bd:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2052c2:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
        match self {
  2052c7:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  2052cc:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
  2052d1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2052d6:	48 85 c0             	test   %rax,%rax
  2052d9:	74 06                	je     2052e1 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x31>
  2052db:	eb 00                	jmp    2052dd <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x2d>
  2052dd:	eb 0d                	jmp    2052ec <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x3c>
  2052df:	0f 0b                	ud2    
            None => None,
  2052e1:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  2052e8:	00 00 
  2052ea:	eb 44                	jmp    205330 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x80>
  2052ec:	48 8b 3c 24          	mov    (%rsp),%rdi
            Some(x) => Some(f(x)),
  2052f0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2052f5:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2052fa:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  2052ff:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  205304:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  205309:	e8 a2 32 00 00       	callq  2085b0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h870438385a9a49c5E>
  20530e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  205313:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  205318:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20531d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205322:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  205327:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  20532e:	00 00 
    }
  205330:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  205335:	75 0f                	jne    205346 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x96>
  205337:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20533c:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  205341:	48 83 c4 58          	add    $0x58,%rsp
  205345:	c3                   	retq   
  205346:	eb ef                	jmp    205337 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E+0x87>
  205348:	cc                   	int3   
  205349:	cc                   	int3   
  20534a:	cc                   	int3   
  20534b:	cc                   	int3   
  20534c:	cc                   	int3   
  20534d:	cc                   	int3   
  20534e:	cc                   	int3   
  20534f:	cc                   	int3   

0000000000205350 <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E>:
    /// let x: Option<&str> = None;
    /// assert_eq!(x.ok_or(0), Err(0));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  205350:	48 83 ec 58          	sub    $0x58,%rsp
  205354:	48 89 14 24          	mov    %rdx,(%rsp)
  205358:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20535d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  205362:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  205367:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20536c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  205371:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  205376:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        match self {
  20537b:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  205380:	c6 44 24 4f 01       	movb   $0x1,0x4f(%rsp)
  205385:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20538a:	48 85 c0             	test   %rax,%rax
  20538d:	74 06                	je     205395 <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x45>
  20538f:	eb 00                	jmp    205391 <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x41>
  205391:	eb 1b                	jmp    2053ae <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x5e>
  205393:	0f 0b                	ud2    
  205395:	48 8b 04 24          	mov    (%rsp),%rax
            Some(v) => Ok(v),
            None => Err(err),
  205399:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  20539e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2053a3:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  2053aa:	00 00 
  2053ac:	eb 27                	jmp    2053d5 <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x85>
            Some(v) => Ok(v),
  2053ae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2053b3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2053b8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2053bd:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2053c2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2053c7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2053cc:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  2053d3:	00 00 
        }
    }
  2053d5:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  2053da:	75 0f                	jne    2053eb <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x9b>
  2053dc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2053e1:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2053e6:	48 83 c4 58          	add    $0x58,%rsp
  2053ea:	c3                   	retq   
  2053eb:	eb ef                	jmp    2053dc <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E+0x8c>
  2053ed:	cc                   	int3   
  2053ee:	cc                   	int3   
  2053ef:	cc                   	int3   

00000000002053f0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE>:
    pub const fn as_mut(&mut self) -> Option<&mut T> {
  2053f0:	48 83 ec 20          	sub    $0x20,%rsp
  2053f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2053f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2053fd:	8a 47 18             	mov    0x18(%rdi),%al
  205400:	04 fe                	add    $0xfe,%al
  205402:	0f 95 c0             	setne  %al
  205405:	0f b6 c0             	movzbl %al,%eax
  205408:	74 06                	je     205410 <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE+0x20>
  20540a:	eb 00                	jmp    20540c <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE+0x1c>
  20540c:	eb 0d                	jmp    20541b <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE+0x2b>
  20540e:	0f 0b                	ud2    
            None => None,
  205410:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205417:	00 00 
  205419:	eb 0e                	jmp    205429 <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE+0x39>
  20541b:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref mut x) => Some(x),
  20541f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205424:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205429:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20542e:	48 83 c4 20          	add    $0x20,%rsp
  205432:	c3                   	retq   
  205433:	cc                   	int3   
  205434:	cc                   	int3   
  205435:	cc                   	int3   
  205436:	cc                   	int3   
  205437:	cc                   	int3   
  205438:	cc                   	int3   
  205439:	cc                   	int3   
  20543a:	cc                   	int3   
  20543b:	cc                   	int3   
  20543c:	cc                   	int3   
  20543d:	cc                   	int3   
  20543e:	cc                   	int3   
  20543f:	cc                   	int3   

0000000000205440 <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E>:
    pub const fn as_ref(&self) -> Option<&T> {
  205440:	48 83 ec 20          	sub    $0x20,%rsp
  205444:	48 89 3c 24          	mov    %rdi,(%rsp)
  205448:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20544d:	48 8b 07             	mov    (%rdi),%rax
  205450:	48 85 c0             	test   %rax,%rax
  205453:	74 06                	je     20545b <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E+0x1b>
  205455:	eb 00                	jmp    205457 <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E+0x17>
  205457:	eb 0d                	jmp    205466 <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E+0x26>
  205459:	0f 0b                	ud2    
            None => None,
  20545b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205462:	00 00 
  205464:	eb 12                	jmp    205478 <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E+0x38>
  205466:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20546a:	48 83 c0 08          	add    $0x8,%rax
  20546e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205473:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205478:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20547d:	48 83 c4 20          	add    $0x20,%rsp
  205481:	c3                   	retq   
  205482:	cc                   	int3   
  205483:	cc                   	int3   
  205484:	cc                   	int3   
  205485:	cc                   	int3   
  205486:	cc                   	int3   
  205487:	cc                   	int3   
  205488:	cc                   	int3   
  205489:	cc                   	int3   
  20548a:	cc                   	int3   
  20548b:	cc                   	int3   
  20548c:	cc                   	int3   
  20548d:	cc                   	int3   
  20548e:	cc                   	int3   
  20548f:	cc                   	int3   

0000000000205490 <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E>:
    pub const fn as_ref(&self) -> Option<&T> {
  205490:	48 83 ec 20          	sub    $0x20,%rsp
  205494:	48 89 3c 24          	mov    %rdi,(%rsp)
  205498:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20549d:	8b 07                	mov    (%rdi),%eax
  20549f:	48 85 c0             	test   %rax,%rax
  2054a2:	74 06                	je     2054aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E+0x1a>
  2054a4:	eb 00                	jmp    2054a6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E+0x16>
  2054a6:	eb 0d                	jmp    2054b5 <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E+0x25>
  2054a8:	0f 0b                	ud2    
            None => None,
  2054aa:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2054b1:	00 00 
  2054b3:	eb 12                	jmp    2054c7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E+0x37>
  2054b5:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2054b9:	48 83 c0 04          	add    $0x4,%rax
  2054bd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2054c2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2054c7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2054cc:	48 83 c4 20          	add    $0x20,%rsp
  2054d0:	c3                   	retq   
  2054d1:	cc                   	int3   
  2054d2:	cc                   	int3   
  2054d3:	cc                   	int3   
  2054d4:	cc                   	int3   
  2054d5:	cc                   	int3   
  2054d6:	cc                   	int3   
  2054d7:	cc                   	int3   
  2054d8:	cc                   	int3   
  2054d9:	cc                   	int3   
  2054da:	cc                   	int3   
  2054db:	cc                   	int3   
  2054dc:	cc                   	int3   
  2054dd:	cc                   	int3   
  2054de:	cc                   	int3   
  2054df:	cc                   	int3   

00000000002054e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2054e0:	48 83 ec 20          	sub    $0x20,%rsp
  2054e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2054e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2054ed:	0f b6 07             	movzbl (%rdi),%eax
  2054f0:	a8 01                	test   $0x1,%al
  2054f2:	74 06                	je     2054fa <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x1a>
  2054f4:	eb 00                	jmp    2054f6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x16>
  2054f6:	eb 0d                	jmp    205505 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x25>
  2054f8:	0f 0b                	ud2    
            None => None,
  2054fa:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205501:	00 00 
  205503:	eb 12                	jmp    205517 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x37>
  205505:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  205509:	48 83 c0 01          	add    $0x1,%rax
  20550d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205512:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205517:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20551c:	48 83 c4 20          	add    $0x20,%rsp
  205520:	c3                   	retq   
  205521:	cc                   	int3   
  205522:	cc                   	int3   
  205523:	cc                   	int3   
  205524:	cc                   	int3   
  205525:	cc                   	int3   
  205526:	cc                   	int3   
  205527:	cc                   	int3   
  205528:	cc                   	int3   
  205529:	cc                   	int3   
  20552a:	cc                   	int3   
  20552b:	cc                   	int3   
  20552c:	cc                   	int3   
  20552d:	cc                   	int3   
  20552e:	cc                   	int3   
  20552f:	cc                   	int3   

0000000000205530 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  205530:	48 83 ec 20          	sub    $0x20,%rsp
  205534:	48 89 3c 24          	mov    %rdi,(%rsp)
  205538:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20553d:	0f b6 07             	movzbl (%rdi),%eax
  205540:	a8 01                	test   $0x1,%al
  205542:	74 06                	je     20554a <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x1a>
  205544:	eb 00                	jmp    205546 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x16>
  205546:	eb 0d                	jmp    205555 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x25>
  205548:	0f 0b                	ud2    
            None => None,
  20554a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205551:	00 00 
  205553:	eb 12                	jmp    205567 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x37>
  205555:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  205559:	48 83 c0 10          	add    $0x10,%rax
  20555d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205562:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205567:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20556c:	48 83 c4 20          	add    $0x20,%rsp
  205570:	c3                   	retq   
  205571:	cc                   	int3   
  205572:	cc                   	int3   
  205573:	cc                   	int3   
  205574:	cc                   	int3   
  205575:	cc                   	int3   
  205576:	cc                   	int3   
  205577:	cc                   	int3   
  205578:	cc                   	int3   
  205579:	cc                   	int3   
  20557a:	cc                   	int3   
  20557b:	cc                   	int3   
  20557c:	cc                   	int3   
  20557d:	cc                   	int3   
  20557e:	cc                   	int3   
  20557f:	cc                   	int3   

0000000000205580 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE>:
    pub const fn as_ref(&self) -> Option<&T> {
  205580:	48 83 ec 20          	sub    $0x20,%rsp
  205584:	48 89 3c 24          	mov    %rdi,(%rsp)
  205588:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20558d:	48 8b 07             	mov    (%rdi),%rax
  205590:	48 85 c0             	test   %rax,%rax
  205593:	74 06                	je     20559b <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x1b>
  205595:	eb 00                	jmp    205597 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x17>
  205597:	eb 0d                	jmp    2055a6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x26>
  205599:	0f 0b                	ud2    
            None => None,
  20559b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2055a2:	00 00 
  2055a4:	eb 12                	jmp    2055b8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x38>
  2055a6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2055aa:	48 83 c0 08          	add    $0x8,%rax
  2055ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2055b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2055b8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2055bd:	48 83 c4 20          	add    $0x20,%rsp
  2055c1:	c3                   	retq   
  2055c2:	cc                   	int3   
  2055c3:	cc                   	int3   
  2055c4:	cc                   	int3   
  2055c5:	cc                   	int3   
  2055c6:	cc                   	int3   
  2055c7:	cc                   	int3   
  2055c8:	cc                   	int3   
  2055c9:	cc                   	int3   
  2055ca:	cc                   	int3   
  2055cb:	cc                   	int3   
  2055cc:	cc                   	int3   
  2055cd:	cc                   	int3   
  2055ce:	cc                   	int3   
  2055cf:	cc                   	int3   

00000000002055d0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E>:
    pub const fn as_ref(&self) -> Option<&T> {
  2055d0:	48 83 ec 20          	sub    $0x20,%rsp
  2055d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2055d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2055dd:	48 8b 07             	mov    (%rdi),%rax
  2055e0:	48 85 c0             	test   %rax,%rax
  2055e3:	74 06                	je     2055eb <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x1b>
  2055e5:	eb 00                	jmp    2055e7 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x17>
  2055e7:	eb 0d                	jmp    2055f6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x26>
  2055e9:	0f 0b                	ud2    
            None => None,
  2055eb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2055f2:	00 00 
  2055f4:	eb 12                	jmp    205608 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x38>
  2055f6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2055fa:	48 83 c0 08          	add    $0x8,%rax
  2055fe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205603:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205608:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20560d:	48 83 c4 20          	add    $0x20,%rsp
  205611:	c3                   	retq   
  205612:	cc                   	int3   
  205613:	cc                   	int3   
  205614:	cc                   	int3   
  205615:	cc                   	int3   
  205616:	cc                   	int3   
  205617:	cc                   	int3   
  205618:	cc                   	int3   
  205619:	cc                   	int3   
  20561a:	cc                   	int3   
  20561b:	cc                   	int3   
  20561c:	cc                   	int3   
  20561d:	cc                   	int3   
  20561e:	cc                   	int3   
  20561f:	cc                   	int3   

0000000000205620 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E>:
    pub const fn as_ref(&self) -> Option<&T> {
  205620:	48 83 ec 20          	sub    $0x20,%rsp
  205624:	48 89 3c 24          	mov    %rdi,(%rsp)
  205628:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20562d:	48 8b 07             	mov    (%rdi),%rax
  205630:	48 85 c0             	test   %rax,%rax
  205633:	74 06                	je     20563b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x1b>
  205635:	eb 00                	jmp    205637 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x17>
  205637:	eb 0d                	jmp    205646 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x26>
  205639:	0f 0b                	ud2    
            None => None,
  20563b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205642:	00 00 
  205644:	eb 12                	jmp    205658 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x38>
  205646:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20564a:	48 83 c0 08          	add    $0x8,%rax
  20564e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205653:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  205658:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20565d:	48 83 c4 20          	add    $0x20,%rsp
  205661:	c3                   	retq   
  205662:	cc                   	int3   
  205663:	cc                   	int3   
  205664:	cc                   	int3   
  205665:	cc                   	int3   
  205666:	cc                   	int3   
  205667:	cc                   	int3   
  205668:	cc                   	int3   
  205669:	cc                   	int3   
  20566a:	cc                   	int3   
  20566b:	cc                   	int3   
  20566c:	cc                   	int3   
  20566d:	cc                   	int3   
  20566e:	cc                   	int3   
  20566f:	cc                   	int3   

0000000000205670 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE>:
    pub const fn as_ref(&self) -> Option<&T> {
  205670:	48 83 ec 20          	sub    $0x20,%rsp
  205674:	48 89 3c 24          	mov    %rdi,(%rsp)
  205678:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20567d:	48 8b 07             	mov    (%rdi),%rax
  205680:	48 85 c0             	test   %rax,%rax
  205683:	74 06                	je     20568b <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE+0x1b>
  205685:	eb 00                	jmp    205687 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE+0x17>
  205687:	eb 0d                	jmp    205696 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE+0x26>
  205689:	0f 0b                	ud2    
            None => None,
  20568b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205692:	00 00 
  205694:	eb 12                	jmp    2056a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE+0x38>
  205696:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20569a:	48 83 c0 08          	add    $0x8,%rax
  20569e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2056a3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2056a8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2056ad:	48 83 c4 20          	add    $0x20,%rsp
  2056b1:	c3                   	retq   
  2056b2:	cc                   	int3   
  2056b3:	cc                   	int3   
  2056b4:	cc                   	int3   
  2056b5:	cc                   	int3   
  2056b6:	cc                   	int3   
  2056b7:	cc                   	int3   
  2056b8:	cc                   	int3   
  2056b9:	cc                   	int3   
  2056ba:	cc                   	int3   
  2056bb:	cc                   	int3   
  2056bc:	cc                   	int3   
  2056bd:	cc                   	int3   
  2056be:	cc                   	int3   
  2056bf:	cc                   	int3   

00000000002056c0 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2056c0:	48 83 ec 20          	sub    $0x20,%rsp
  2056c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2056c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2056cd:	48 8b 07             	mov    (%rdi),%rax
  2056d0:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  2056d4:	0f 95 c0             	setne  %al
  2056d7:	0f b6 c0             	movzbl %al,%eax
  2056da:	74 06                	je     2056e2 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x22>
  2056dc:	eb 00                	jmp    2056de <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x1e>
  2056de:	eb 0d                	jmp    2056ed <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x2d>
  2056e0:	0f 0b                	ud2    
            None => None,
  2056e2:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2056e9:	00 00 
  2056eb:	eb 0e                	jmp    2056fb <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x3b>
  2056ed:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2056f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2056f6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2056fb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205700:	48 83 c4 20          	add    $0x20,%rsp
  205704:	c3                   	retq   
  205705:	cc                   	int3   
  205706:	cc                   	int3   
  205707:	cc                   	int3   
  205708:	cc                   	int3   
  205709:	cc                   	int3   
  20570a:	cc                   	int3   
  20570b:	cc                   	int3   
  20570c:	cc                   	int3   
  20570d:	cc                   	int3   
  20570e:	cc                   	int3   
  20570f:	cc                   	int3   

0000000000205710 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>:
    pub const fn unwrap(self) -> T {
  205710:	48 83 ec 28          	sub    $0x28,%rsp
  205714:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  205719:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20571e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  205723:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  205728:	48 85 c0             	test   %rax,%rax
  20572b:	74 06                	je     205733 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x23>
  20572d:	eb 00                	jmp    20572f <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x1f>
  20572f:	eb 1a                	jmp    20574b <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x3b>
  205731:	0f 0b                	ud2    
  205733:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  205738:	48 8d 3d 3a ae ff ff 	lea    -0x51c6(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  20573f:	be 2b 00 00 00       	mov    $0x2b,%esi
  205744:	e8 e7 58 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  205749:	0f 0b                	ud2    
            Some(val) => val,
  20574b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  205750:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  205755:	48 83 c4 28          	add    $0x28,%rsp
  205759:	c3                   	retq   
  20575a:	cc                   	int3   
  20575b:	cc                   	int3   
  20575c:	cc                   	int3   
  20575d:	cc                   	int3   
  20575e:	cc                   	int3   
  20575f:	cc                   	int3   

0000000000205760 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E>:
    pub const fn unwrap(self) -> T {
  205760:	48 83 ec 38          	sub    $0x38,%rsp
  205764:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  205769:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20576e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  205773:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  205778:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20577d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  205782:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  205787:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20578c:	48 85 c0             	test   %rax,%rax
  20578f:	74 06                	je     205797 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E+0x37>
  205791:	eb 00                	jmp    205793 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E+0x33>
  205793:	eb 1a                	jmp    2057af <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E+0x4f>
  205795:	0f 0b                	ud2    
  205797:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  20579c:	48 8d 3d d6 ad ff ff 	lea    -0x522a(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  2057a3:	be 2b 00 00 00       	mov    $0x2b,%esi
  2057a8:	e8 83 58 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2057ad:	0f 0b                	ud2    
            Some(val) => val,
  2057af:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2057b4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  2057b9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2057be:	48 83 c4 38          	add    $0x38,%rsp
  2057c2:	c3                   	retq   
  2057c3:	cc                   	int3   
  2057c4:	cc                   	int3   
  2057c5:	cc                   	int3   
  2057c6:	cc                   	int3   
  2057c7:	cc                   	int3   
  2057c8:	cc                   	int3   
  2057c9:	cc                   	int3   
  2057ca:	cc                   	int3   
  2057cb:	cc                   	int3   
  2057cc:	cc                   	int3   
  2057cd:	cc                   	int3   
  2057ce:	cc                   	int3   
  2057cf:	cc                   	int3   

00000000002057d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h936a598a172f3c76E>:
    pub const fn unwrap(self) -> T {
  2057d0:	48 83 ec 28          	sub    $0x28,%rsp
  2057d4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2057d9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2057de:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  2057e3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2057e8:	48 85 c0             	test   %rax,%rax
  2057eb:	74 06                	je     2057f3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h936a598a172f3c76E+0x23>
  2057ed:	eb 00                	jmp    2057ef <_ZN4core6option15Option$LT$T$GT$6unwrap17h936a598a172f3c76E+0x1f>
  2057ef:	eb 1a                	jmp    20580b <_ZN4core6option15Option$LT$T$GT$6unwrap17h936a598a172f3c76E+0x3b>
  2057f1:	0f 0b                	ud2    
  2057f3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2057f8:	48 8d 3d 7a ad ff ff 	lea    -0x5286(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  2057ff:	be 2b 00 00 00       	mov    $0x2b,%esi
  205804:	e8 27 58 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  205809:	0f 0b                	ud2    
            Some(val) => val,
  20580b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  205810:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  205815:	48 83 c4 28          	add    $0x28,%rsp
  205819:	c3                   	retq   
  20581a:	cc                   	int3   
  20581b:	cc                   	int3   
  20581c:	cc                   	int3   
  20581d:	cc                   	int3   
  20581e:	cc                   	int3   
  20581f:	cc                   	int3   

0000000000205820 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E>:
    pub const fn unwrap(self) -> T {
  205820:	48 83 ec 18          	sub    $0x18,%rsp
  205824:	48 89 34 24          	mov    %rsi,(%rsp)
  205828:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20582d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205832:	48 85 c0             	test   %rax,%rax
  205835:	0f 95 c0             	setne  %al
  205838:	0f b6 c0             	movzbl %al,%eax
  20583b:	74 06                	je     205843 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x23>
  20583d:	eb 00                	jmp    20583f <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x1f>
  20583f:	eb 19                	jmp    20585a <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x3a>
  205841:	0f 0b                	ud2    
  205843:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  205847:	48 8d 3d 2b ad ff ff 	lea    -0x52d5(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  20584e:	be 2b 00 00 00       	mov    $0x2b,%esi
  205853:	e8 d8 57 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  205858:	0f 0b                	ud2    
            Some(val) => val,
  20585a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20585f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  205864:	48 83 c4 18          	add    $0x18,%rsp
  205868:	c3                   	retq   
  205869:	cc                   	int3   
  20586a:	cc                   	int3   
  20586b:	cc                   	int3   
  20586c:	cc                   	int3   
  20586d:	cc                   	int3   
  20586e:	cc                   	int3   
  20586f:	cc                   	int3   

0000000000205870 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E>:
    pub const fn unwrap(self) -> T {
  205870:	48 83 ec 18          	sub    $0x18,%rsp
  205874:	48 89 34 24          	mov    %rsi,(%rsp)
  205878:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20587d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205882:	48 85 c0             	test   %rax,%rax
  205885:	0f 95 c0             	setne  %al
  205888:	0f b6 c0             	movzbl %al,%eax
  20588b:	74 06                	je     205893 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x23>
  20588d:	eb 00                	jmp    20588f <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x1f>
  20588f:	eb 19                	jmp    2058aa <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x3a>
  205891:	0f 0b                	ud2    
  205893:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  205897:	48 8d 3d db ac ff ff 	lea    -0x5325(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  20589e:	be 2b 00 00 00       	mov    $0x2b,%esi
  2058a3:	e8 88 57 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2058a8:	0f 0b                	ud2    
            Some(val) => val,
  2058aa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2058af:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2058b4:	48 83 c4 18          	add    $0x18,%rsp
  2058b8:	c3                   	retq   
  2058b9:	cc                   	int3   
  2058ba:	cc                   	int3   
  2058bb:	cc                   	int3   
  2058bc:	cc                   	int3   
  2058bd:	cc                   	int3   
  2058be:	cc                   	int3   
  2058bf:	cc                   	int3   

00000000002058c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf8f5738d1e965780E>:
    pub const fn unwrap(self) -> T {
  2058c0:	48 83 ec 18          	sub    $0x18,%rsp
  2058c4:	48 89 34 24          	mov    %rsi,(%rsp)
  2058c8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2058cd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2058d2:	48 85 c0             	test   %rax,%rax
  2058d5:	0f 95 c0             	setne  %al
  2058d8:	0f b6 c0             	movzbl %al,%eax
  2058db:	74 06                	je     2058e3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf8f5738d1e965780E+0x23>
  2058dd:	eb 00                	jmp    2058df <_ZN4core6option15Option$LT$T$GT$6unwrap17hf8f5738d1e965780E+0x1f>
  2058df:	eb 19                	jmp    2058fa <_ZN4core6option15Option$LT$T$GT$6unwrap17hf8f5738d1e965780E+0x3a>
  2058e1:	0f 0b                	ud2    
  2058e3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2058e7:	48 8d 3d 8b ac ff ff 	lea    -0x5375(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  2058ee:	be 2b 00 00 00       	mov    $0x2b,%esi
  2058f3:	e8 38 57 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2058f8:	0f 0b                	ud2    
            Some(val) => val,
  2058fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2058ff:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  205904:	48 83 c4 18          	add    $0x18,%rsp
  205908:	c3                   	retq   
  205909:	cc                   	int3   
  20590a:	cc                   	int3   
  20590b:	cc                   	int3   
  20590c:	cc                   	int3   
  20590d:	cc                   	int3   
  20590e:	cc                   	int3   
  20590f:	cc                   	int3   

0000000000205910 <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE>:
    pub const fn unwrap(self) -> T {
  205910:	48 83 ec 28          	sub    $0x28,%rsp
  205914:	48 89 14 24          	mov    %rdx,(%rsp)
  205918:	40 88 f0             	mov    %sil,%al
  20591b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  205920:	88 44 24 10          	mov    %al,0x10(%rsp)
        match self {
  205924:	8a 44 24 10          	mov    0x10(%rsp),%al
  205928:	04 fe                	add    $0xfe,%al
  20592a:	0f 95 c0             	setne  %al
  20592d:	0f b6 c0             	movzbl %al,%eax
  205930:	74 06                	je     205938 <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE+0x28>
  205932:	eb 00                	jmp    205934 <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE+0x24>
  205934:	eb 19                	jmp    20594f <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE+0x3f>
  205936:	0f 0b                	ud2    
  205938:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  20593c:	48 8d 3d 36 ac ff ff 	lea    -0x53ca(%rip),%rdi        # 200579 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x82>
  205943:	be 2b 00 00 00       	mov    $0x2b,%esi
  205948:	e8 e3 56 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20594d:	0f 0b                	ud2    
            Some(val) => val,
  20594f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205954:	8a 54 24 10          	mov    0x10(%rsp),%dl
  205958:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20595d:	88 54 24 20          	mov    %dl,0x20(%rsp)
    }
  205961:	48 83 c4 28          	add    $0x28,%rsp
  205965:	c3                   	retq   
  205966:	cc                   	int3   
  205967:	cc                   	int3   
  205968:	cc                   	int3   
  205969:	cc                   	int3   
  20596a:	cc                   	int3   
  20596b:	cc                   	int3   
  20596c:	cc                   	int3   
  20596d:	cc                   	int3   
  20596e:	cc                   	int3   
  20596f:	cc                   	int3   

0000000000205970 <_ZN4core6option15Option$LT$T$GT$7is_none17h18ceee8ec0666f89E>:
    pub const fn is_none(&self) -> bool {
  205970:	48 83 ec 18          	sub    $0x18,%rsp
  205974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  205979:	e8 12 01 00 00       	callq  205a90 <_ZN4core6option15Option$LT$T$GT$7is_some17h2532b3bdaf75a414E>
  20597e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  205982:	8a 44 24 0f          	mov    0xf(%rsp),%al
  205986:	34 ff                	xor    $0xff,%al
    }
  205988:	24 01                	and    $0x1,%al
  20598a:	0f b6 c0             	movzbl %al,%eax
  20598d:	48 83 c4 18          	add    $0x18,%rsp
  205991:	c3                   	retq   
  205992:	cc                   	int3   
  205993:	cc                   	int3   
  205994:	cc                   	int3   
  205995:	cc                   	int3   
  205996:	cc                   	int3   
  205997:	cc                   	int3   
  205998:	cc                   	int3   
  205999:	cc                   	int3   
  20599a:	cc                   	int3   
  20599b:	cc                   	int3   
  20599c:	cc                   	int3   
  20599d:	cc                   	int3   
  20599e:	cc                   	int3   
  20599f:	cc                   	int3   

00000000002059a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h3bd5b0f183046273E>:
    pub const fn is_none(&self) -> bool {
  2059a0:	48 83 ec 18          	sub    $0x18,%rsp
  2059a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2059a9:	e8 22 01 00 00       	callq  205ad0 <_ZN4core6option15Option$LT$T$GT$7is_some17h5c0e717252278c17E>
  2059ae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2059b2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2059b6:	34 ff                	xor    $0xff,%al
    }
  2059b8:	24 01                	and    $0x1,%al
  2059ba:	0f b6 c0             	movzbl %al,%eax
  2059bd:	48 83 c4 18          	add    $0x18,%rsp
  2059c1:	c3                   	retq   
  2059c2:	cc                   	int3   
  2059c3:	cc                   	int3   
  2059c4:	cc                   	int3   
  2059c5:	cc                   	int3   
  2059c6:	cc                   	int3   
  2059c7:	cc                   	int3   
  2059c8:	cc                   	int3   
  2059c9:	cc                   	int3   
  2059ca:	cc                   	int3   
  2059cb:	cc                   	int3   
  2059cc:	cc                   	int3   
  2059cd:	cc                   	int3   
  2059ce:	cc                   	int3   
  2059cf:	cc                   	int3   

00000000002059d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h69736bcb03f1dbd1E>:
    pub const fn is_none(&self) -> bool {
  2059d0:	48 83 ec 18          	sub    $0x18,%rsp
  2059d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2059d9:	e8 62 01 00 00       	callq  205b40 <_ZN4core6option15Option$LT$T$GT$7is_some17he0e8e80cb5847bf5E>
  2059de:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2059e2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2059e6:	34 ff                	xor    $0xff,%al
    }
  2059e8:	24 01                	and    $0x1,%al
  2059ea:	0f b6 c0             	movzbl %al,%eax
  2059ed:	48 83 c4 18          	add    $0x18,%rsp
  2059f1:	c3                   	retq   
  2059f2:	cc                   	int3   
  2059f3:	cc                   	int3   
  2059f4:	cc                   	int3   
  2059f5:	cc                   	int3   
  2059f6:	cc                   	int3   
  2059f7:	cc                   	int3   
  2059f8:	cc                   	int3   
  2059f9:	cc                   	int3   
  2059fa:	cc                   	int3   
  2059fb:	cc                   	int3   
  2059fc:	cc                   	int3   
  2059fd:	cc                   	int3   
  2059fe:	cc                   	int3   
  2059ff:	cc                   	int3   

0000000000205a00 <_ZN4core6option15Option$LT$T$GT$7is_none17h77e8ab8022288640E>:
    pub const fn is_none(&self) -> bool {
  205a00:	48 83 ec 18          	sub    $0x18,%rsp
  205a04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  205a09:	e8 02 01 00 00       	callq  205b10 <_ZN4core6option15Option$LT$T$GT$7is_some17h630d0863021c6f92E>
  205a0e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  205a12:	8a 44 24 0f          	mov    0xf(%rsp),%al
  205a16:	34 ff                	xor    $0xff,%al
    }
  205a18:	24 01                	and    $0x1,%al
  205a1a:	0f b6 c0             	movzbl %al,%eax
  205a1d:	48 83 c4 18          	add    $0x18,%rsp
  205a21:	c3                   	retq   
  205a22:	cc                   	int3   
  205a23:	cc                   	int3   
  205a24:	cc                   	int3   
  205a25:	cc                   	int3   
  205a26:	cc                   	int3   
  205a27:	cc                   	int3   
  205a28:	cc                   	int3   
  205a29:	cc                   	int3   
  205a2a:	cc                   	int3   
  205a2b:	cc                   	int3   
  205a2c:	cc                   	int3   
  205a2d:	cc                   	int3   
  205a2e:	cc                   	int3   
  205a2f:	cc                   	int3   

0000000000205a30 <_ZN4core6option15Option$LT$T$GT$7is_none17h8f45e6ccf9255729E>:
    pub const fn is_none(&self) -> bool {
  205a30:	48 83 ec 18          	sub    $0x18,%rsp
  205a34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  205a39:	e8 22 00 00 00       	callq  205a60 <_ZN4core6option15Option$LT$T$GT$7is_some17h1b182e1b5b0b92c0E>
  205a3e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  205a42:	8a 44 24 0f          	mov    0xf(%rsp),%al
  205a46:	34 ff                	xor    $0xff,%al
    }
  205a48:	24 01                	and    $0x1,%al
  205a4a:	0f b6 c0             	movzbl %al,%eax
  205a4d:	48 83 c4 18          	add    $0x18,%rsp
  205a51:	c3                   	retq   
  205a52:	cc                   	int3   
  205a53:	cc                   	int3   
  205a54:	cc                   	int3   
  205a55:	cc                   	int3   
  205a56:	cc                   	int3   
  205a57:	cc                   	int3   
  205a58:	cc                   	int3   
  205a59:	cc                   	int3   
  205a5a:	cc                   	int3   
  205a5b:	cc                   	int3   
  205a5c:	cc                   	int3   
  205a5d:	cc                   	int3   
  205a5e:	cc                   	int3   
  205a5f:	cc                   	int3   

0000000000205a60 <_ZN4core6option15Option$LT$T$GT$7is_some17h1b182e1b5b0b92c0E>:
    pub const fn is_some(&self) -> bool {
  205a60:	48 83 ec 10          	sub    $0x10,%rsp
  205a64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205a69:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  205a6d:	75 07                	jne    205a76 <_ZN4core6option15Option$LT$T$GT$7is_some17h1b182e1b5b0b92c0E+0x16>
  205a6f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205a74:	eb 05                	jmp    205a7b <_ZN4core6option15Option$LT$T$GT$7is_some17h1b182e1b5b0b92c0E+0x1b>
  205a76:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205a7b:	8a 44 24 07          	mov    0x7(%rsp),%al
  205a7f:	24 01                	and    $0x1,%al
  205a81:	0f b6 c0             	movzbl %al,%eax
  205a84:	48 83 c4 10          	add    $0x10,%rsp
  205a88:	c3                   	retq   
  205a89:	cc                   	int3   
  205a8a:	cc                   	int3   
  205a8b:	cc                   	int3   
  205a8c:	cc                   	int3   
  205a8d:	cc                   	int3   
  205a8e:	cc                   	int3   
  205a8f:	cc                   	int3   

0000000000205a90 <_ZN4core6option15Option$LT$T$GT$7is_some17h2532b3bdaf75a414E>:
    pub const fn is_some(&self) -> bool {
  205a90:	48 83 ec 10          	sub    $0x10,%rsp
  205a94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205a99:	b8 01 00 00 00       	mov    $0x1,%eax
  205a9e:	31 c9                	xor    %ecx,%ecx
  205aa0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  205aa4:	48 0f 44 c1          	cmove  %rcx,%rax
  205aa8:	48 83 f8 01          	cmp    $0x1,%rax
  205aac:	75 07                	jne    205ab5 <_ZN4core6option15Option$LT$T$GT$7is_some17h2532b3bdaf75a414E+0x25>
  205aae:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205ab3:	eb 05                	jmp    205aba <_ZN4core6option15Option$LT$T$GT$7is_some17h2532b3bdaf75a414E+0x2a>
  205ab5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205aba:	8a 44 24 07          	mov    0x7(%rsp),%al
  205abe:	24 01                	and    $0x1,%al
  205ac0:	0f b6 c0             	movzbl %al,%eax
  205ac3:	48 83 c4 10          	add    $0x10,%rsp
  205ac7:	c3                   	retq   
  205ac8:	cc                   	int3   
  205ac9:	cc                   	int3   
  205aca:	cc                   	int3   
  205acb:	cc                   	int3   
  205acc:	cc                   	int3   
  205acd:	cc                   	int3   
  205ace:	cc                   	int3   
  205acf:	cc                   	int3   

0000000000205ad0 <_ZN4core6option15Option$LT$T$GT$7is_some17h5c0e717252278c17E>:
    pub const fn is_some(&self) -> bool {
  205ad0:	48 83 ec 10          	sub    $0x10,%rsp
  205ad4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205ad9:	8a 57 08             	mov    0x8(%rdi),%dl
  205adc:	80 ea 02             	sub    $0x2,%dl
  205adf:	b8 01 00 00 00       	mov    $0x1,%eax
  205ae4:	31 c9                	xor    %ecx,%ecx
  205ae6:	80 fa 00             	cmp    $0x0,%dl
  205ae9:	48 0f 44 c1          	cmove  %rcx,%rax
  205aed:	48 83 f8 01          	cmp    $0x1,%rax
  205af1:	75 07                	jne    205afa <_ZN4core6option15Option$LT$T$GT$7is_some17h5c0e717252278c17E+0x2a>
  205af3:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205af8:	eb 05                	jmp    205aff <_ZN4core6option15Option$LT$T$GT$7is_some17h5c0e717252278c17E+0x2f>
  205afa:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205aff:	8a 44 24 07          	mov    0x7(%rsp),%al
  205b03:	24 01                	and    $0x1,%al
  205b05:	0f b6 c0             	movzbl %al,%eax
  205b08:	48 83 c4 10          	add    $0x10,%rsp
  205b0c:	c3                   	retq   
  205b0d:	cc                   	int3   
  205b0e:	cc                   	int3   
  205b0f:	cc                   	int3   

0000000000205b10 <_ZN4core6option15Option$LT$T$GT$7is_some17h630d0863021c6f92E>:
    pub const fn is_some(&self) -> bool {
  205b10:	48 83 ec 10          	sub    $0x10,%rsp
  205b14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205b19:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  205b1d:	75 07                	jne    205b26 <_ZN4core6option15Option$LT$T$GT$7is_some17h630d0863021c6f92E+0x16>
  205b1f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205b24:	eb 05                	jmp    205b2b <_ZN4core6option15Option$LT$T$GT$7is_some17h630d0863021c6f92E+0x1b>
  205b26:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205b2b:	8a 44 24 07          	mov    0x7(%rsp),%al
  205b2f:	24 01                	and    $0x1,%al
  205b31:	0f b6 c0             	movzbl %al,%eax
  205b34:	48 83 c4 10          	add    $0x10,%rsp
  205b38:	c3                   	retq   
  205b39:	cc                   	int3   
  205b3a:	cc                   	int3   
  205b3b:	cc                   	int3   
  205b3c:	cc                   	int3   
  205b3d:	cc                   	int3   
  205b3e:	cc                   	int3   
  205b3f:	cc                   	int3   

0000000000205b40 <_ZN4core6option15Option$LT$T$GT$7is_some17he0e8e80cb5847bf5E>:
    pub const fn is_some(&self) -> bool {
  205b40:	48 83 ec 10          	sub    $0x10,%rsp
  205b44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205b49:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  205b4d:	75 07                	jne    205b56 <_ZN4core6option15Option$LT$T$GT$7is_some17he0e8e80cb5847bf5E+0x16>
  205b4f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205b54:	eb 05                	jmp    205b5b <_ZN4core6option15Option$LT$T$GT$7is_some17he0e8e80cb5847bf5E+0x1b>
  205b56:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205b5b:	8a 44 24 07          	mov    0x7(%rsp),%al
  205b5f:	24 01                	and    $0x1,%al
  205b61:	0f b6 c0             	movzbl %al,%eax
  205b64:	48 83 c4 10          	add    $0x10,%rsp
  205b68:	c3                   	retq   
  205b69:	cc                   	int3   
  205b6a:	cc                   	int3   
  205b6b:	cc                   	int3   
  205b6c:	cc                   	int3   
  205b6d:	cc                   	int3   
  205b6e:	cc                   	int3   
  205b6f:	cc                   	int3   

0000000000205b70 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E>:
    pub const fn is_some(&self) -> bool {
  205b70:	48 83 ec 10          	sub    $0x10,%rsp
  205b74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  205b79:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  205b7d:	75 07                	jne    205b86 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E+0x16>
  205b7f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205b84:	eb 05                	jmp    205b8b <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E+0x1b>
  205b86:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205b8b:	8a 44 24 07          	mov    0x7(%rsp),%al
  205b8f:	24 01                	and    $0x1,%al
  205b91:	0f b6 c0             	movzbl %al,%eax
  205b94:	48 83 c4 10          	add    $0x10,%rsp
  205b98:	c3                   	retq   
  205b99:	cc                   	int3   
  205b9a:	cc                   	int3   
  205b9b:	cc                   	int3   
  205b9c:	cc                   	int3   
  205b9d:	cc                   	int3   
  205b9e:	cc                   	int3   
  205b9f:	cc                   	int3   

0000000000205ba0 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E>:
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn copied(self) -> Option<T> {
  205ba0:	48 83 ec 10          	sub    $0x10,%rsp
  205ba4:	48 89 3c 24          	mov    %rdi,(%rsp)
        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        // ready yet, should be reverted when possible to avoid code repetition
        match self {
  205ba8:	48 8b 04 24          	mov    (%rsp),%rax
  205bac:	48 85 c0             	test   %rax,%rax
  205baf:	0f 95 c0             	setne  %al
  205bb2:	0f b6 c0             	movzbl %al,%eax
  205bb5:	74 06                	je     205bbd <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x1d>
  205bb7:	eb 00                	jmp    205bb9 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x19>
  205bb9:	eb 09                	jmp    205bc4 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x24>
  205bbb:	0f 0b                	ud2    
            Some(&v) => Some(v),
            None => None,
  205bbd:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
  205bc2:	eb 13                	jmp    205bd7 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x37>
            Some(&v) => Some(v),
  205bc4:	48 8b 04 24          	mov    (%rsp),%rax
  205bc8:	8a 00                	mov    (%rax),%al
  205bca:	88 44 24 0f          	mov    %al,0xf(%rsp)
  205bce:	88 44 24 09          	mov    %al,0x9(%rsp)
  205bd2:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
        }
    }
  205bd7:	8a 44 24 08          	mov    0x8(%rsp),%al
  205bdb:	8a 54 24 09          	mov    0x9(%rsp),%dl
  205bdf:	48 83 c4 10          	add    $0x10,%rsp
  205be3:	c3                   	retq   
  205be4:	cc                   	int3   
  205be5:	cc                   	int3   
  205be6:	cc                   	int3   
  205be7:	cc                   	int3   
  205be8:	cc                   	int3   
  205be9:	cc                   	int3   
  205bea:	cc                   	int3   
  205beb:	cc                   	int3   
  205bec:	cc                   	int3   
  205bed:	cc                   	int3   
  205bee:	cc                   	int3   
  205bef:	cc                   	int3   

0000000000205bf0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E>:
    fn from_output(output: Self::Output) -> Self {
        Some(output)
    }

    #[inline]
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  205bf0:	48 83 ec 18          	sub    $0x18,%rsp
  205bf4:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  205bf8:	48 8b 04 24          	mov    (%rsp),%rax
  205bfc:	48 85 c0             	test   %rax,%rax
  205bff:	0f 95 c0             	setne  %al
  205c02:	0f b6 c0             	movzbl %al,%eax
  205c05:	74 06                	je     205c0d <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E+0x1d>
  205c07:	eb 00                	jmp    205c09 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E+0x19>
  205c09:	eb 0d                	jmp    205c18 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E+0x28>
  205c0b:	0f 0b                	ud2    
            Some(v) => ControlFlow::Continue(v),
            None => ControlFlow::Break(None),
  205c0d:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  205c14:	00 00 
  205c16:	eb 0e                	jmp    205c26 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E+0x36>
            Some(v) => ControlFlow::Continue(v),
  205c18:	48 8b 04 24          	mov    (%rsp),%rax
  205c1c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  205c21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        }
    }
  205c26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205c2b:	48 83 c4 18          	add    $0x18,%rsp
  205c2f:	c3                   	retq   

0000000000205c30 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  205c30:	48 83 ec 10          	sub    $0x10,%rsp
  205c34:	40 88 f8             	mov    %dil,%al
  205c37:	24 01                	and    $0x1,%al
  205c39:	88 44 24 06          	mov    %al,0x6(%rsp)
        match self {
  205c3d:	0f b6 44 24 06       	movzbl 0x6(%rsp),%eax
  205c42:	a8 01                	test   $0x1,%al
  205c44:	74 06                	je     205c4c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE+0x1c>
  205c46:	eb 00                	jmp    205c48 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE+0x18>
  205c48:	eb 09                	jmp    205c53 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE+0x23>
  205c4a:	0f 0b                	ud2    
            None => ControlFlow::Break(None),
  205c4c:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  205c51:	eb 05                	jmp    205c58 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE+0x28>
            Some(v) => ControlFlow::Continue(v),
  205c53:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  205c58:	8a 44 24 07          	mov    0x7(%rsp),%al
  205c5c:	24 01                	and    $0x1,%al
  205c5e:	0f b6 c0             	movzbl %al,%eax
  205c61:	48 83 c4 10          	add    $0x10,%rsp
  205c65:	c3                   	retq   
  205c66:	cc                   	int3   
  205c67:	cc                   	int3   
  205c68:	cc                   	int3   
  205c69:	cc                   	int3   
  205c6a:	cc                   	int3   
  205c6b:	cc                   	int3   
  205c6c:	cc                   	int3   
  205c6d:	cc                   	int3   
  205c6e:	cc                   	int3   
  205c6f:	cc                   	int3   

0000000000205c70 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h3295d9591141a3c5E>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T> const ops::FromResidual for Option<T> {
    #[inline]
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
  205c70:	48 83 ec 18          	sub    $0x18,%rsp
        match residual {
            None => None,
  205c74:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  205c7b:	00 
        }
    }
  205c7c:	48 8b 04 24          	mov    (%rsp),%rax
  205c80:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  205c85:	48 83 c4 18          	add    $0x18,%rsp
  205c89:	c3                   	retq   
  205c8a:	cc                   	int3   
  205c8b:	cc                   	int3   
  205c8c:	cc                   	int3   
  205c8d:	cc                   	int3   
  205c8e:	cc                   	int3   
  205c8f:	cc                   	int3   

0000000000205c90 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hfc22b99dc79926f8E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
  205c90:	48 83 ec 18          	sub    $0x18,%rsp
            None => None,
  205c94:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  205c9b:	00 
    }
  205c9c:	48 8b 04 24          	mov    (%rsp),%rax
  205ca0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  205ca5:	48 83 c4 18          	add    $0x18,%rsp
  205ca9:	c3                   	retq   
  205caa:	cc                   	int3   
  205cab:	cc                   	int3   
  205cac:	cc                   	int3   
  205cad:	cc                   	int3   
  205cae:	cc                   	int3   
  205caf:	cc                   	int3   

0000000000205cb0 <_ZN3log13set_max_level17hde76aa4dc95feb85E>:
pub fn set_max_level(level: LevelFilter) {
  205cb0:	48 83 ec 18          	sub    $0x18,%rsp
  205cb4:	48 89 fe             	mov    %rdi,%rsi
  205cb7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    MAX_LOG_LEVEL_FILTER.store(level as usize, Ordering::SeqCst)
  205cbc:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  205cc1:	48 8b 3d d8 aa 01 00 	mov    0x1aad8(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  205cc8:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  205ccd:	e8 5e ce 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
}
  205cd2:	48 83 c4 18          	add    $0x18,%rsp
  205cd6:	c3                   	retq   
  205cd7:	cc                   	int3   
  205cd8:	cc                   	int3   
  205cd9:	cc                   	int3   
  205cda:	cc                   	int3   
  205cdb:	cc                   	int3   
  205cdc:	cc                   	int3   
  205cdd:	cc                   	int3   
  205cde:	cc                   	int3   
  205cdf:	cc                   	int3   

0000000000205ce0 <_ZN3log6Record4args17h00da0becc25b6d80E>:
    pub fn args(&self) -> &fmt::Arguments<'a> {
  205ce0:	50                   	push   %rax
  205ce1:	48 89 f8             	mov    %rdi,%rax
  205ce4:	48 89 04 24          	mov    %rax,(%rsp)
        &self.args
  205ce8:	48 83 c0 18          	add    $0x18,%rax
    }
  205cec:	59                   	pop    %rcx
  205ced:	c3                   	retq   
  205cee:	cc                   	int3   
  205cef:	cc                   	int3   

0000000000205cf0 <_ZN3log6Record5level17h9ec9075ad9e549b9E>:
    pub fn level(&self) -> Level {
  205cf0:	48 83 ec 18          	sub    $0x18,%rsp
  205cf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.level()
  205cf9:	e8 42 00 00 00       	callq  205d40 <_ZN3log8Metadata5level17h4faf105409024f8aE>
  205cfe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  205d03:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  205d08:	48 83 c4 18          	add    $0x18,%rsp
  205d0c:	c3                   	retq   
  205d0d:	cc                   	int3   
  205d0e:	cc                   	int3   
  205d0f:	cc                   	int3   

0000000000205d10 <_ZN3log6Record6target17h7f5fb57e8f9ebb4eE>:
    pub fn target(&self) -> &'a str {
  205d10:	48 83 ec 18          	sub    $0x18,%rsp
  205d14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.target()
  205d19:	e8 32 00 00 00       	callq  205d50 <_ZN3log8Metadata6target17hd479539607d524cfE>
  205d1e:	48 89 04 24          	mov    %rax,(%rsp)
  205d22:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  205d27:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  205d2c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  205d30:	48 83 c4 18          	add    $0x18,%rsp
  205d34:	c3                   	retq   
  205d35:	cc                   	int3   
  205d36:	cc                   	int3   
  205d37:	cc                   	int3   
  205d38:	cc                   	int3   
  205d39:	cc                   	int3   
  205d3a:	cc                   	int3   
  205d3b:	cc                   	int3   
  205d3c:	cc                   	int3   
  205d3d:	cc                   	int3   
  205d3e:	cc                   	int3   
  205d3f:	cc                   	int3   

0000000000205d40 <_ZN3log8Metadata5level17h4faf105409024f8aE>:
    pub fn level(&self) -> Level {
  205d40:	50                   	push   %rax
  205d41:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.level
  205d45:	48 8b 07             	mov    (%rdi),%rax
    }
  205d48:	59                   	pop    %rcx
  205d49:	c3                   	retq   
  205d4a:	cc                   	int3   
  205d4b:	cc                   	int3   
  205d4c:	cc                   	int3   
  205d4d:	cc                   	int3   
  205d4e:	cc                   	int3   
  205d4f:	cc                   	int3   

0000000000205d50 <_ZN3log8Metadata6target17hd479539607d524cfE>:
    pub fn target(&self) -> &'a str {
  205d50:	50                   	push   %rax
  205d51:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.target
  205d55:	48 8b 47 08          	mov    0x8(%rdi),%rax
  205d59:	48 8b 57 10          	mov    0x10(%rdi),%rdx
    }
  205d5d:	59                   	pop    %rcx
  205d5e:	c3                   	retq   
  205d5f:	cc                   	int3   

0000000000205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>:
    fn le(&self, other: &LevelFilter) -> bool {
  205d60:	48 83 ec 10          	sub    $0x10,%rsp
  205d64:	48 89 3c 24          	mov    %rdi,(%rsp)
  205d68:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        *self as usize <= *other as usize
  205d6d:	48 8b 07             	mov    (%rdi),%rax
  205d70:	48 8b 0e             	mov    (%rsi),%rcx
  205d73:	48 39 c8             	cmp    %rcx,%rax
  205d76:	0f 96 c0             	setbe  %al
    }
  205d79:	24 01                	and    $0x1,%al
  205d7b:	0f b6 c0             	movzbl %al,%eax
  205d7e:	48 83 c4 10          	add    $0x10,%rsp
  205d82:	c3                   	retq   
  205d83:	cc                   	int3   
  205d84:	cc                   	int3   
  205d85:	cc                   	int3   
  205d86:	cc                   	int3   
  205d87:	cc                   	int3   
  205d88:	cc                   	int3   
  205d89:	cc                   	int3   
  205d8a:	cc                   	int3   
  205d8b:	cc                   	int3   
  205d8c:	cc                   	int3   
  205d8d:	cc                   	int3   
  205d8e:	cc                   	int3   
  205d8f:	cc                   	int3   

0000000000205d90 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>:
    pub stack_pointer: u64,
    pub stack_segment: u64,
}

impl fmt::Debug for InterruptStackFrame {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  205d90:	48 83 ec 48          	sub    $0x48,%rsp
  205d94:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  205d99:	48 89 f8             	mov    %rdi,%rax
  205d9c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  205da1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  205da6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  205dab:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let mut format_string = f.debug_struct("Exception Info");
  205db0:	48 8d 35 ed a7 ff ff 	lea    -0x5813(%rip),%rsi        # 2005a4 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xad>
  205db7:	ba 0e 00 00 00       	mov    $0xe,%edx
  205dbc:	e8 4f 71 01 00       	callq  21cf10 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  205dc1:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  205dc6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  205dcb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  205dd0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205dd5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  205dda:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  205ddf:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("instruction_pointer", &self.instruction_pointer);
  205de4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205de9:	48 8d 35 c2 a7 ff ff 	lea    -0x583e(%rip),%rsi        # 2005b2 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xbb>
  205df0:	ba 13 00 00 00       	mov    $0x13,%edx
  205df5:	4c 8d 05 0c 90 01 00 	lea    0x1900c(%rip),%r8        # 21ee08 <memset+0x1348>
  205dfc:	e8 4f 4a 01 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  205e01:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("code_segment", &self.code_segment);
  205e06:	48 83 c1 08          	add    $0x8,%rcx
  205e0a:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205e0f:	48 8d 35 af a7 ff ff 	lea    -0x5851(%rip),%rsi        # 2005c5 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xce>
  205e16:	ba 0c 00 00 00       	mov    $0xc,%edx
  205e1b:	4c 8d 05 e6 8f 01 00 	lea    0x18fe6(%rip),%r8        # 21ee08 <memset+0x1348>
  205e22:	e8 29 4a 01 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  205e27:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("cpu_flags", &self.cpu_flags);
  205e2c:	48 83 c1 10          	add    $0x10,%rcx
  205e30:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205e35:	48 8d 35 95 a7 ff ff 	lea    -0x586b(%rip),%rsi        # 2005d1 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xda>
  205e3c:	ba 09 00 00 00       	mov    $0x9,%edx
  205e41:	4c 8d 05 c0 8f 01 00 	lea    0x18fc0(%rip),%r8        # 21ee08 <memset+0x1348>
  205e48:	e8 03 4a 01 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  205e4d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_pointer", &self.stack_pointer);
  205e52:	48 83 c1 18          	add    $0x18,%rcx
  205e56:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205e5b:	48 8d 35 78 a7 ff ff 	lea    -0x5888(%rip),%rsi        # 2005da <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xe3>
  205e62:	ba 0d 00 00 00       	mov    $0xd,%edx
  205e67:	4c 8d 05 9a 8f 01 00 	lea    0x18f9a(%rip),%r8        # 21ee08 <memset+0x1348>
  205e6e:	e8 dd 49 01 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  205e73:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_segment", &self.stack_segment);
  205e78:	48 83 c1 20          	add    $0x20,%rcx
  205e7c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205e81:	48 8d 35 5f a7 ff ff 	lea    -0x58a1(%rip),%rsi        # 2005e7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xf0>
  205e88:	ba 0d 00 00 00       	mov    $0xd,%edx
  205e8d:	4c 8d 05 74 8f 01 00 	lea    0x18f74(%rip),%r8        # 21ee08 <memset+0x1348>
  205e94:	e8 b7 49 01 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>

        format_string.finish()
  205e99:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205e9e:	e8 6d 4b 01 00       	callq  21aa10 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  205ea3:	88 44 24 07          	mov    %al,0x7(%rsp)
  205ea7:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  205eab:	24 01                	and    $0x1,%al
  205ead:	0f b6 c0             	movzbl %al,%eax
  205eb0:	48 83 c4 48          	add    $0x48,%rsp
  205eb4:	c3                   	retq   
  205eb5:	cc                   	int3   
  205eb6:	cc                   	int3   
  205eb7:	cc                   	int3   
  205eb8:	cc                   	int3   
  205eb9:	cc                   	int3   
  205eba:	cc                   	int3   
  205ebb:	cc                   	int3   
  205ebc:	cc                   	int3   
  205ebd:	cc                   	int3   
  205ebe:	cc                   	int3   
  205ebf:	cc                   	int3   

0000000000205ec0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E>:
    reserved_3: InterruptDescriptorEntry<DefaultHandlerFunction>,
    interrupts: [InterruptDescriptorEntry<DefaultHandlerFunction>; 256 - 32],
}

impl InterruptDescriptorTable {
    pub fn empty() -> Self {
  205ec0:	48 81 ec f8 11 00 00 	sub    $0x11f8,%rsp
  205ec7:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  205ecc:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        InterruptDescriptorTable {
            divide_error: InterruptDescriptorEntry::empty(),
  205ed1:	e8 4a 23 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205ed6:	48 89 94 24 70 10 00 	mov    %rdx,0x1070(%rsp)
  205edd:	00 
  205ede:	48 89 84 24 68 10 00 	mov    %rax,0x1068(%rsp)
  205ee5:	00 
  205ee6:	48 8b 84 24 68 10 00 	mov    0x1068(%rsp),%rax
  205eed:	00 
  205eee:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  205ef3:	48 8b 84 24 70 10 00 	mov    0x1070(%rsp),%rax
  205efa:	00 
  205efb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            debug: InterruptDescriptorEntry::empty(),
  205f00:	e8 1b 23 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205f05:	48 89 94 24 80 10 00 	mov    %rdx,0x1080(%rsp)
  205f0c:	00 
  205f0d:	48 89 84 24 78 10 00 	mov    %rax,0x1078(%rsp)
  205f14:	00 
  205f15:	48 8b 84 24 78 10 00 	mov    0x1078(%rsp),%rax
  205f1c:	00 
  205f1d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  205f22:	48 8b 84 24 80 10 00 	mov    0x1080(%rsp),%rax
  205f29:	00 
  205f2a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            non_maskable_interrupt: InterruptDescriptorEntry::empty(),
  205f2f:	e8 ec 22 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205f34:	48 89 94 24 90 10 00 	mov    %rdx,0x1090(%rsp)
  205f3b:	00 
  205f3c:	48 89 84 24 88 10 00 	mov    %rax,0x1088(%rsp)
  205f43:	00 
  205f44:	48 8b 84 24 88 10 00 	mov    0x1088(%rsp),%rax
  205f4b:	00 
  205f4c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  205f51:	48 8b 84 24 90 10 00 	mov    0x1090(%rsp),%rax
  205f58:	00 
  205f59:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            breakpoint: InterruptDescriptorEntry::empty(),
  205f5e:	e8 bd 22 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205f63:	48 89 94 24 a0 10 00 	mov    %rdx,0x10a0(%rsp)
  205f6a:	00 
  205f6b:	48 89 84 24 98 10 00 	mov    %rax,0x1098(%rsp)
  205f72:	00 
  205f73:	48 8b 84 24 98 10 00 	mov    0x1098(%rsp),%rax
  205f7a:	00 
  205f7b:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  205f80:	48 8b 84 24 a0 10 00 	mov    0x10a0(%rsp),%rax
  205f87:	00 
  205f88:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  205f8f:	00 
            overflow: InterruptDescriptorEntry::empty(),
  205f90:	e8 8b 22 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205f95:	48 89 94 24 b0 10 00 	mov    %rdx,0x10b0(%rsp)
  205f9c:	00 
  205f9d:	48 89 84 24 a8 10 00 	mov    %rax,0x10a8(%rsp)
  205fa4:	00 
  205fa5:	48 8b 84 24 a8 10 00 	mov    0x10a8(%rsp),%rax
  205fac:	00 
  205fad:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  205fb4:	00 
  205fb5:	48 8b 84 24 b0 10 00 	mov    0x10b0(%rsp),%rax
  205fbc:	00 
  205fbd:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  205fc4:	00 
            bound_range_exceeded: InterruptDescriptorEntry::empty(),
  205fc5:	e8 56 22 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205fca:	48 89 94 24 c0 10 00 	mov    %rdx,0x10c0(%rsp)
  205fd1:	00 
  205fd2:	48 89 84 24 b8 10 00 	mov    %rax,0x10b8(%rsp)
  205fd9:	00 
  205fda:	48 8b 84 24 b8 10 00 	mov    0x10b8(%rsp),%rax
  205fe1:	00 
  205fe2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  205fe9:	00 
  205fea:	48 8b 84 24 c0 10 00 	mov    0x10c0(%rsp),%rax
  205ff1:	00 
  205ff2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  205ff9:	00 
            invalid_opcode: InterruptDescriptorEntry::empty(),
  205ffa:	e8 21 22 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205fff:	48 89 94 24 d0 10 00 	mov    %rdx,0x10d0(%rsp)
  206006:	00 
  206007:	48 89 84 24 c8 10 00 	mov    %rax,0x10c8(%rsp)
  20600e:	00 
  20600f:	48 8b 84 24 c8 10 00 	mov    0x10c8(%rsp),%rax
  206016:	00 
  206017:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20601e:	00 
  20601f:	48 8b 84 24 d0 10 00 	mov    0x10d0(%rsp),%rax
  206026:	00 
  206027:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20602e:	00 
            device_not_available: InterruptDescriptorEntry::empty(),
  20602f:	e8 ec 21 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  206034:	48 89 94 24 e0 10 00 	mov    %rdx,0x10e0(%rsp)
  20603b:	00 
  20603c:	48 89 84 24 d8 10 00 	mov    %rax,0x10d8(%rsp)
  206043:	00 
  206044:	48 8b 84 24 d8 10 00 	mov    0x10d8(%rsp),%rax
  20604b:	00 
  20604c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  206053:	00 
  206054:	48 8b 84 24 e0 10 00 	mov    0x10e0(%rsp),%rax
  20605b:	00 
  20605c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  206063:	00 
            double_fault: InterruptDescriptorEntry::empty(),
  206064:	e8 37 22 00 00       	callq  2082a0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>
  206069:	48 89 94 24 f0 10 00 	mov    %rdx,0x10f0(%rsp)
  206070:	00 
  206071:	48 89 84 24 e8 10 00 	mov    %rax,0x10e8(%rsp)
  206078:	00 
  206079:	48 8b 84 24 e8 10 00 	mov    0x10e8(%rsp),%rax
  206080:	00 
  206081:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  206088:	00 
  206089:	48 8b 84 24 f0 10 00 	mov    0x10f0(%rsp),%rax
  206090:	00 
  206091:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  206098:	00 
            coprocessor_segment_overrun: InterruptDescriptorEntry::empty(),
  206099:	e8 82 21 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  20609e:	48 89 94 24 00 11 00 	mov    %rdx,0x1100(%rsp)
  2060a5:	00 
  2060a6:	48 89 84 24 f8 10 00 	mov    %rax,0x10f8(%rsp)
  2060ad:	00 
  2060ae:	48 8b 84 24 f8 10 00 	mov    0x10f8(%rsp),%rax
  2060b5:	00 
  2060b6:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2060bd:	00 
  2060be:	48 8b 84 24 00 11 00 	mov    0x1100(%rsp),%rax
  2060c5:	00 
  2060c6:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2060cd:	00 
            invalid_tss: InterruptDescriptorEntry::empty(),
  2060ce:	e8 8d 21 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  2060d3:	48 89 94 24 10 11 00 	mov    %rdx,0x1110(%rsp)
  2060da:	00 
  2060db:	48 89 84 24 08 11 00 	mov    %rax,0x1108(%rsp)
  2060e2:	00 
  2060e3:	48 8b 84 24 08 11 00 	mov    0x1108(%rsp),%rax
  2060ea:	00 
  2060eb:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2060f2:	00 
  2060f3:	48 8b 84 24 10 11 00 	mov    0x1110(%rsp),%rax
  2060fa:	00 
  2060fb:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  206102:	00 
            segment_not_present: InterruptDescriptorEntry::empty(),
  206103:	e8 58 21 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  206108:	48 89 94 24 20 11 00 	mov    %rdx,0x1120(%rsp)
  20610f:	00 
  206110:	48 89 84 24 18 11 00 	mov    %rax,0x1118(%rsp)
  206117:	00 
  206118:	48 8b 84 24 18 11 00 	mov    0x1118(%rsp),%rax
  20611f:	00 
  206120:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  206127:	00 
  206128:	48 8b 84 24 20 11 00 	mov    0x1120(%rsp),%rax
  20612f:	00 
  206130:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  206137:	00 
            stack_segment_fault: InterruptDescriptorEntry::empty(),
  206138:	e8 23 21 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  20613d:	48 89 94 24 30 11 00 	mov    %rdx,0x1130(%rsp)
  206144:	00 
  206145:	48 89 84 24 28 11 00 	mov    %rax,0x1128(%rsp)
  20614c:	00 
  20614d:	48 8b 84 24 28 11 00 	mov    0x1128(%rsp),%rax
  206154:	00 
  206155:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20615c:	00 
  20615d:	48 8b 84 24 30 11 00 	mov    0x1130(%rsp),%rax
  206164:	00 
  206165:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20616c:	00 
            general_protection_fault: InterruptDescriptorEntry::empty(),
  20616d:	e8 ee 20 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  206172:	48 89 94 24 40 11 00 	mov    %rdx,0x1140(%rsp)
  206179:	00 
  20617a:	48 89 84 24 38 11 00 	mov    %rax,0x1138(%rsp)
  206181:	00 
  206182:	48 8b 84 24 38 11 00 	mov    0x1138(%rsp),%rax
  206189:	00 
  20618a:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  206191:	00 
  206192:	48 8b 84 24 40 11 00 	mov    0x1140(%rsp),%rax
  206199:	00 
  20619a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  2061a1:	00 
            page_fault: InterruptDescriptorEntry::empty(),
  2061a2:	e8 b9 20 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  2061a7:	48 89 94 24 50 11 00 	mov    %rdx,0x1150(%rsp)
  2061ae:	00 
  2061af:	48 89 84 24 48 11 00 	mov    %rax,0x1148(%rsp)
  2061b6:	00 
  2061b7:	48 8b 84 24 48 11 00 	mov    0x1148(%rsp),%rax
  2061be:	00 
  2061bf:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2061c6:	00 
  2061c7:	48 8b 84 24 50 11 00 	mov    0x1150(%rsp),%rax
  2061ce:	00 
  2061cf:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2061d6:	00 
            reserved_1: InterruptDescriptorEntry::empty(),
  2061d7:	e8 44 20 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2061dc:	48 89 94 24 60 11 00 	mov    %rdx,0x1160(%rsp)
  2061e3:	00 
  2061e4:	48 89 84 24 58 11 00 	mov    %rax,0x1158(%rsp)
  2061eb:	00 
  2061ec:	48 8b 84 24 58 11 00 	mov    0x1158(%rsp),%rax
  2061f3:	00 
  2061f4:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2061fb:	00 
  2061fc:	48 8b 84 24 60 11 00 	mov    0x1160(%rsp),%rax
  206203:	00 
  206204:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20620b:	00 
            x87_floating_point: InterruptDescriptorEntry::empty(),
  20620c:	e8 0f 20 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  206211:	48 89 94 24 70 11 00 	mov    %rdx,0x1170(%rsp)
  206218:	00 
  206219:	48 89 84 24 68 11 00 	mov    %rax,0x1168(%rsp)
  206220:	00 
  206221:	48 8b 84 24 68 11 00 	mov    0x1168(%rsp),%rax
  206228:	00 
  206229:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  206230:	00 
  206231:	48 8b 84 24 70 11 00 	mov    0x1170(%rsp),%rax
  206238:	00 
  206239:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  206240:	00 
            alignment_check: InterruptDescriptorEntry::empty(),
  206241:	e8 1a 20 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  206246:	48 89 94 24 80 11 00 	mov    %rdx,0x1180(%rsp)
  20624d:	00 
  20624e:	48 89 84 24 78 11 00 	mov    %rax,0x1178(%rsp)
  206255:	00 
  206256:	48 8b 84 24 78 11 00 	mov    0x1178(%rsp),%rax
  20625d:	00 
  20625e:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  206265:	00 
  206266:	48 8b 84 24 80 11 00 	mov    0x1180(%rsp),%rax
  20626d:	00 
  20626e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  206275:	00 
            machine_check: InterruptDescriptorEntry::empty(),
  206276:	e8 65 1f 00 00       	callq  2081e0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h04c8c4937b73abf4E>
  20627b:	48 89 94 24 90 11 00 	mov    %rdx,0x1190(%rsp)
  206282:	00 
  206283:	48 89 84 24 88 11 00 	mov    %rax,0x1188(%rsp)
  20628a:	00 
  20628b:	48 8b 84 24 88 11 00 	mov    0x1188(%rsp),%rax
  206292:	00 
  206293:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  20629a:	00 
  20629b:	48 8b 84 24 90 11 00 	mov    0x1190(%rsp),%rax
  2062a2:	00 
  2062a3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  2062aa:	00 
            simd_floating_point: InterruptDescriptorEntry::empty(),
  2062ab:	e8 70 1f 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2062b0:	48 89 94 24 a0 11 00 	mov    %rdx,0x11a0(%rsp)
  2062b7:	00 
  2062b8:	48 89 84 24 98 11 00 	mov    %rax,0x1198(%rsp)
  2062bf:	00 
  2062c0:	48 8b 84 24 98 11 00 	mov    0x1198(%rsp),%rax
  2062c7:	00 
  2062c8:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  2062cf:	00 
  2062d0:	48 8b 84 24 a0 11 00 	mov    0x11a0(%rsp),%rax
  2062d7:	00 
  2062d8:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2062df:	00 
            virtualization: InterruptDescriptorEntry::empty(),
  2062e0:	e8 3b 1f 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2062e5:	48 89 94 24 b0 11 00 	mov    %rdx,0x11b0(%rsp)
  2062ec:	00 
  2062ed:	48 89 84 24 a8 11 00 	mov    %rax,0x11a8(%rsp)
  2062f4:	00 
  2062f5:	48 8b 84 24 a8 11 00 	mov    0x11a8(%rsp),%rax
  2062fc:	00 
  2062fd:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  206304:	00 
  206305:	48 8b 84 24 b0 11 00 	mov    0x11b0(%rsp),%rax
  20630c:	00 
  20630d:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  206314:	00 
            reserved_2: [InterruptDescriptorEntry::empty(); 9],
  206315:	e8 06 1f 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  20631a:	48 89 94 24 c0 11 00 	mov    %rdx,0x11c0(%rsp)
  206321:	00 
  206322:	48 89 84 24 b8 11 00 	mov    %rax,0x11b8(%rsp)
  206329:	00 
  20632a:	48 8b 84 24 b8 11 00 	mov    0x11b8(%rsp),%rax
  206331:	00 
  206332:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  206339:	00 
  20633a:	48 8b 84 24 c0 11 00 	mov    0x11c0(%rsp),%rax
  206341:	00 
  206342:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  206349:	00 
  20634a:	48 8d 84 24 98 01 00 	lea    0x198(%rsp),%rax
  206351:	00 
  206352:	48 8d 8c 24 98 01 00 	lea    0x198(%rsp),%rcx
  206359:	00 
  20635a:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
  206361:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  206366:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20636b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  206370:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206375:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20637a:	48 39 c8             	cmp    %rcx,%rax
  20637d:	74 27                	je     2063a6 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x4e6>
  20637f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  206384:	48 8b 8c 24 28 02 00 	mov    0x228(%rsp),%rcx
  20638b:	00 
  20638c:	48 89 08             	mov    %rcx,(%rax)
  20638f:	48 8b 8c 24 30 02 00 	mov    0x230(%rsp),%rcx
  206396:	00 
  206397:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20639b:	48 83 c0 10          	add    $0x10,%rax
  20639f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2063a4:	eb c5                	jmp    20636b <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x4ab>
            security_exception: InterruptDescriptorEntry::empty(),
  2063a6:	e8 b5 1e 00 00       	callq  208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  2063ab:	48 89 94 24 d0 11 00 	mov    %rdx,0x11d0(%rsp)
  2063b2:	00 
  2063b3:	48 89 84 24 c8 11 00 	mov    %rax,0x11c8(%rsp)
  2063ba:	00 
  2063bb:	48 8b 84 24 c8 11 00 	mov    0x11c8(%rsp),%rax
  2063c2:	00 
  2063c3:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  2063ca:	00 
  2063cb:	48 8b 84 24 d0 11 00 	mov    0x11d0(%rsp),%rax
  2063d2:	00 
  2063d3:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  2063da:	00 
            reserved_3: InterruptDescriptorEntry::empty(),
  2063db:	e8 40 1e 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2063e0:	48 89 94 24 e0 11 00 	mov    %rdx,0x11e0(%rsp)
  2063e7:	00 
  2063e8:	48 89 84 24 d8 11 00 	mov    %rax,0x11d8(%rsp)
  2063ef:	00 
  2063f0:	48 8b 84 24 d8 11 00 	mov    0x11d8(%rsp),%rax
  2063f7:	00 
  2063f8:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  2063ff:	00 
  206400:	48 8b 84 24 e0 11 00 	mov    0x11e0(%rsp),%rax
  206407:	00 
  206408:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  20640f:	00 
            interrupts: [InterruptDescriptorEntry::empty(); 256 - 32],
  206410:	e8 0b 1e 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  206415:	48 89 94 24 f0 11 00 	mov    %rdx,0x11f0(%rsp)
  20641c:	00 
  20641d:	48 89 84 24 e8 11 00 	mov    %rax,0x11e8(%rsp)
  206424:	00 
  206425:	48 8b 84 24 e8 11 00 	mov    0x11e8(%rsp),%rax
  20642c:	00 
  20642d:	48 89 84 24 58 10 00 	mov    %rax,0x1058(%rsp)
  206434:	00 
  206435:	48 8b 84 24 f0 11 00 	mov    0x11f0(%rsp),%rax
  20643c:	00 
  20643d:	48 89 84 24 60 10 00 	mov    %rax,0x1060(%rsp)
  206444:	00 
  206445:	48 8d 84 24 58 02 00 	lea    0x258(%rsp),%rax
  20644c:	00 
  20644d:	48 8d 8c 24 58 02 00 	lea    0x258(%rsp),%rcx
  206454:	00 
  206455:	48 81 c1 00 0e 00 00 	add    $0xe00,%rcx
  20645c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  206461:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206466:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20646b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206470:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206475:	48 39 c8             	cmp    %rcx,%rax
  206478:	74 27                	je     2064a1 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x5e1>
  20647a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20647f:	48 8b 8c 24 58 10 00 	mov    0x1058(%rsp),%rcx
  206486:	00 
  206487:	48 89 08             	mov    %rcx,(%rax)
  20648a:	48 8b 8c 24 60 10 00 	mov    0x1060(%rsp),%rcx
  206491:	00 
  206492:	48 89 48 08          	mov    %rcx,0x8(%rax)
  206496:	48 83 c0 10          	add    $0x10,%rax
  20649a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20649f:	eb c5                	jmp    206466 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x5a6>
  2064a1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        InterruptDescriptorTable {
  2064a6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2064ab:	48 89 07             	mov    %rax,(%rdi)
  2064ae:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2064b3:	48 89 47 08          	mov    %rax,0x8(%rdi)
  2064b7:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2064bc:	48 89 47 10          	mov    %rax,0x10(%rdi)
  2064c0:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2064c5:	48 89 47 18          	mov    %rax,0x18(%rdi)
  2064c9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2064ce:	48 89 47 20          	mov    %rax,0x20(%rdi)
  2064d2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2064d7:	48 89 47 28          	mov    %rax,0x28(%rdi)
  2064db:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2064e0:	48 89 47 30          	mov    %rax,0x30(%rdi)
  2064e4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2064eb:	00 
  2064ec:	48 89 47 38          	mov    %rax,0x38(%rdi)
  2064f0:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2064f7:	00 
  2064f8:	48 89 47 40          	mov    %rax,0x40(%rdi)
  2064fc:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  206503:	00 
  206504:	48 89 47 48          	mov    %rax,0x48(%rdi)
  206508:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  20650f:	00 
  206510:	48 89 47 50          	mov    %rax,0x50(%rdi)
  206514:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20651b:	00 
  20651c:	48 89 47 58          	mov    %rax,0x58(%rdi)
  206520:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  206527:	00 
  206528:	48 89 47 60          	mov    %rax,0x60(%rdi)
  20652c:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  206533:	00 
  206534:	48 89 47 68          	mov    %rax,0x68(%rdi)
  206538:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  20653f:	00 
  206540:	48 89 47 70          	mov    %rax,0x70(%rdi)
  206544:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20654b:	00 
  20654c:	48 89 47 78          	mov    %rax,0x78(%rdi)
  206550:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  206557:	00 
  206558:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  20655f:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  206566:	00 
  206567:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
  20656e:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  206575:	00 
  206576:	48 89 87 90 00 00 00 	mov    %rax,0x90(%rdi)
  20657d:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  206584:	00 
  206585:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
  20658c:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  206593:	00 
  206594:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
  20659b:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  2065a2:	00 
  2065a3:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)
  2065aa:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  2065b1:	00 
  2065b2:	48 89 87 b0 00 00 00 	mov    %rax,0xb0(%rdi)
  2065b9:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  2065c0:	00 
  2065c1:	48 89 87 b8 00 00 00 	mov    %rax,0xb8(%rdi)
  2065c8:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2065cf:	00 
  2065d0:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
  2065d7:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2065de:	00 
  2065df:	48 89 87 c8 00 00 00 	mov    %rax,0xc8(%rdi)
  2065e6:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  2065ed:	00 
  2065ee:	48 89 87 d0 00 00 00 	mov    %rax,0xd0(%rdi)
  2065f5:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  2065fc:	00 
  2065fd:	48 89 87 d8 00 00 00 	mov    %rax,0xd8(%rdi)
  206604:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  20660b:	00 
  20660c:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  206613:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  20661a:	00 
  20661b:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
  206622:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  206629:	00 
  20662a:	48 89 87 f0 00 00 00 	mov    %rax,0xf0(%rdi)
  206631:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  206638:	00 
  206639:	48 89 87 f8 00 00 00 	mov    %rax,0xf8(%rdi)
  206640:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  206647:	00 
  206648:	48 89 87 00 01 00 00 	mov    %rax,0x100(%rdi)
  20664f:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  206656:	00 
  206657:	48 89 87 08 01 00 00 	mov    %rax,0x108(%rdi)
  20665e:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  206665:	00 
  206666:	48 89 87 10 01 00 00 	mov    %rax,0x110(%rdi)
  20666d:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  206674:	00 
  206675:	48 89 87 18 01 00 00 	mov    %rax,0x118(%rdi)
  20667c:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  206683:	00 
  206684:	48 89 87 20 01 00 00 	mov    %rax,0x120(%rdi)
  20668b:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  206692:	00 
  206693:	48 89 87 28 01 00 00 	mov    %rax,0x128(%rdi)
  20669a:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  2066a1:	00 
  2066a2:	48 89 87 30 01 00 00 	mov    %rax,0x130(%rdi)
  2066a9:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  2066b0:	00 
  2066b1:	48 89 87 38 01 00 00 	mov    %rax,0x138(%rdi)
  2066b8:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  2066bf:	00 
  2066c0:	48 89 87 40 01 00 00 	mov    %rax,0x140(%rdi)
  2066c7:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  2066ce:	00 
  2066cf:	48 89 87 48 01 00 00 	mov    %rax,0x148(%rdi)
  2066d6:	48 81 c7 50 01 00 00 	add    $0x150,%rdi
  2066dd:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  2066e4:	00 
  2066e5:	ba 90 00 00 00       	mov    $0x90,%edx
  2066ea:	e8 b1 73 01 00       	callq  21daa0 <memcpy>
  2066ef:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2066f4:	48 8b 84 24 38 02 00 	mov    0x238(%rsp),%rax
  2066fb:	00 
  2066fc:	48 89 87 e0 01 00 00 	mov    %rax,0x1e0(%rdi)
  206703:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  20670a:	00 
  20670b:	48 89 87 e8 01 00 00 	mov    %rax,0x1e8(%rdi)
  206712:	48 8b 84 24 48 02 00 	mov    0x248(%rsp),%rax
  206719:	00 
  20671a:	48 89 87 f0 01 00 00 	mov    %rax,0x1f0(%rdi)
  206721:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  206728:	00 
  206729:	48 89 87 f8 01 00 00 	mov    %rax,0x1f8(%rdi)
  206730:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
  206737:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  20673e:	00 
  20673f:	ba 00 0e 00 00       	mov    $0xe00,%edx
  206744:	e8 57 73 01 00       	callq  21daa0 <memcpy>
  206749:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        }
    }
  20674e:	48 81 c4 f8 11 00 00 	add    $0x11f8,%rsp
  206755:	c3                   	retq   
  206756:	cc                   	int3   
  206757:	cc                   	int3   
  206758:	cc                   	int3   
  206759:	cc                   	int3   
  20675a:	cc                   	int3   
  20675b:	cc                   	int3   
  20675c:	cc                   	int3   
  20675d:	cc                   	int3   
  20675e:	cc                   	int3   
  20675f:	cc                   	int3   

0000000000206760 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E>:

    pub fn as_pointer(&self) -> IDTPointer {
  206760:	48 83 ec 28          	sub    $0x28,%rsp
  206764:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206769:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        IDTPointer {
            base_addr: (self as *const _) as u64,
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  20676e:	b8 00 10 00 00       	mov    $0x1000,%eax
  206773:	48 83 e8 01          	sub    $0x1,%rax
  206777:	48 89 04 24          	mov    %rax,(%rsp)
  20677b:	0f 92 c0             	setb   %al
  20677e:	a8 01                	test   $0x1,%al
  206780:	75 24                	jne    2067a6 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E+0x46>
  206782:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206787:	48 8b 0c 24          	mov    (%rsp),%rcx
        IDTPointer {
  20678b:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
  206790:	48 89 44 24 12       	mov    %rax,0x12(%rsp)
        }
    }
  206795:	0f b7 44 24 18       	movzwl 0x18(%rsp),%eax
  20679a:	89 c2                	mov    %eax,%edx
  20679c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2067a1:	48 83 c4 28          	add    $0x28,%rsp
  2067a5:	c3                   	retq   
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  2067a6:	48 8d 3d 63 9e ff ff 	lea    -0x619d(%rip),%rdi        # 200610 <str.0>
  2067ad:	48 8d 15 74 86 01 00 	lea    0x18674(%rip),%rdx        # 21ee28 <memset+0x1368>
  2067b4:	be 21 00 00 00       	mov    $0x21,%esi
  2067b9:	e8 72 48 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2067be:	0f 0b                	ud2    

00000000002067c0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17hfad6d3a77281dca1E>:

    pub fn load_into_cpu(&self) {
  2067c0:	48 83 ec 28          	sub    $0x28,%rsp
  2067c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let pointer = self.as_pointer();
  2067c9:	e8 92 ff ff ff       	callq  206760 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E>
  2067ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2067d3:	66 89 d0             	mov    %dx,%ax
  2067d6:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  2067db:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2067e0:	48 89 04 24          	mov    %rax,(%rsp)
  2067e4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  2067e9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
  2067ee:	48 89 e0             	mov    %rsp,%rax
        unsafe {
            asm!(
  2067f1:	0f 01 18             	lidt   (%rax)
                "lidt [{}]", in(reg) &pointer,
                options(nomem, nostack, preserves_flags)
            );
        }
    }
  2067f4:	48 83 c4 28          	add    $0x28,%rsp
  2067f8:	c3                   	retq   
  2067f9:	cc                   	int3   
  2067fa:	cc                   	int3   
  2067fb:	cc                   	int3   
  2067fc:	cc                   	int3   
  2067fd:	cc                   	int3   
  2067fe:	cc                   	int3   
  2067ff:	cc                   	int3   

0000000000206800 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>:
}

pub fn prepare_default_handle(
  206800:	48 83 ec 38          	sub    $0x38,%rsp
  206804:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: DefaultHandlerFunction,
) -> InterruptDescriptorEntry<DefaultHandlerFunction> {
    let handle_addr = func as u64;
  206809:	48 89 f8             	mov    %rdi,%rax
  20680c:	48 89 04 24          	mov    %rax,(%rsp)
  206810:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  206815:	e8 06 1a 00 00       	callq  208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  20681a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20681f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206824:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206829:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20682e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206833:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206838:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  20683c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  206841:	e8 da 1b 00 00       	callq  208420 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h87df60b3140f4d6eE>
    return idt_entry;
}
  206846:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20684b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  206850:	48 83 c4 38          	add    $0x38,%rsp
  206854:	c3                   	retq   
  206855:	cc                   	int3   
  206856:	cc                   	int3   
  206857:	cc                   	int3   
  206858:	cc                   	int3   
  206859:	cc                   	int3   
  20685a:	cc                   	int3   
  20685b:	cc                   	int3   
  20685c:	cc                   	int3   
  20685d:	cc                   	int3   
  20685e:	cc                   	int3   
  20685f:	cc                   	int3   

0000000000206860 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3b008e4f60cf1d75E>:

pub fn prepare_no_ret_error_code_handle(
  206860:	48 83 ec 38          	sub    $0x38,%rsp
  206864:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: HandlerFuncNoReturnWithErr,
) -> InterruptDescriptorEntry<HandlerFuncNoReturnWithErr> {
    let handle_addr = func as u64;
  206869:	48 89 f8             	mov    %rdi,%rax
  20686c:	48 89 04 24          	mov    %rax,(%rsp)
  206870:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  206875:	e8 26 1a 00 00       	callq  2082a0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>
  20687a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20687f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206884:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206889:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20688e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206893:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206898:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  20689c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  2068a1:	e8 ca 1b 00 00       	callq  208470 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf33eac12f7d04705E>
    return idt_entry;
}
  2068a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2068ab:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2068b0:	48 83 c4 38          	add    $0x38,%rsp
  2068b4:	c3                   	retq   
  2068b5:	cc                   	int3   
  2068b6:	cc                   	int3   
  2068b7:	cc                   	int3   
  2068b8:	cc                   	int3   
  2068b9:	cc                   	int3   
  2068ba:	cc                   	int3   
  2068bb:	cc                   	int3   
  2068bc:	cc                   	int3   
  2068bd:	cc                   	int3   
  2068be:	cc                   	int3   
  2068bf:	cc                   	int3   

00000000002068c0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h2895c2c060c9370bE>:
}

// unsafe impl<'a> Sync for BootProtoContainer<'a> {}

impl BootProtoContainer {
    pub fn empty() -> Self {
  2068c0:	48 83 ec 20          	sub    $0x20,%rsp
        BootProtoContainer { boot_info: None }
  2068c4:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  2068cb:	00 00 
  2068cd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2068d2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2068d7:	48 89 0c 24          	mov    %rcx,(%rsp)
  2068db:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2068e0:	48 8b 04 24          	mov    (%rsp),%rax
  2068e4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2068e9:	48 83 c4 20          	add    $0x20,%rsp
  2068ed:	c3                   	retq   
  2068ee:	cc                   	int3   
  2068ef:	cc                   	int3   

00000000002068f0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hf260aeb0ec104c1bE>:

    pub fn save(&mut self, b_proto: u64) {
  2068f0:	48 83 ec 20          	sub    $0x20,%rsp
  2068f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2068f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        self.boot_info = Some(b_proto);
  2068fe:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206903:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  20690a:	00 
  20690b:	48 8b 0c 24          	mov    (%rsp),%rcx
  20690f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206914:	48 89 0f             	mov    %rcx,(%rdi)
  206917:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  20691b:	48 83 c4 20          	add    $0x20,%rsp
  20691f:	c3                   	retq   

0000000000206920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>:
// this implementation than the whole codebase.
pub struct BootProtocol {}

impl BootProtocol {
    #[inline]
    fn get_boot_proto() -> Option<&'static BootInfo> {
  206920:	48 83 ec 48          	sub    $0x48,%rsp
        if let Some(boot_info_addr) = BOOT_INFO.lock().boot_info {
  206924:	48 8d 3d f2 9d ff ff 	lea    -0x620e(%rip),%rdi        # 20071d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  20692b:	e8 20 0f 00 00       	callq  207850 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>
  206930:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206935:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20693a:	e8 81 14 00 00       	callq  207dc0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>
  20693f:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  206944:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206949:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20694e:	e8 7d 15 00 00       	callq  207ed0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e8efa7287244e89E>
  206953:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206958:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20695d:	48 83 38 01          	cmpq   $0x1,(%rax)
  206961:	75 1a                	jne    20697d <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x5d>
  206963:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206968:	48 8b 78 08          	mov    0x8(%rax),%rdi
  20696c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
            return Some(unsafe { (boot_info_addr as *const BootInfo).as_ref().unwrap() });
  206971:	e8 0a 34 00 00       	callq  209d80 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E>
  206976:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20697b:	eb 1d                	jmp    20699a <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x7a>
        }
  20697d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  206982:	e8 b9 13 01 00       	callq  217d40 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>

        None
  206987:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20698e:	00 00 
    }
  206990:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206995:	48 83 c4 48          	add    $0x48,%rsp
  206999:	c3                   	retq   
  20699a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            return Some(unsafe { (boot_info_addr as *const BootInfo).as_ref().unwrap() });
  20699f:	48 8d 35 9a 84 01 00 	lea    0x1849a(%rip),%rsi        # 21ee40 <memset+0x1380>
  2069a6:	e8 c5 ee ff ff       	callq  205870 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E>
  2069ab:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2069b0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2069b5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        }
  2069ba:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2069bf:	e8 7c 13 01 00       	callq  217d40 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>
  2069c4:	eb ca                	jmp    206990 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x70>
  2069c6:	cc                   	int3   
  2069c7:	cc                   	int3   
  2069c8:	cc                   	int3   
  2069c9:	cc                   	int3   
  2069ca:	cc                   	int3   
  2069cb:	cc                   	int3   
  2069cc:	cc                   	int3   
  2069cd:	cc                   	int3   
  2069ce:	cc                   	int3   
  2069cf:	cc                   	int3   

00000000002069d0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17hda06133fa30eec4aE>:

    pub fn create(info: &'static BootInfo) {
  2069d0:	48 83 ec 38          	sub    $0x38,%rsp
  2069d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2069d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        // translate boot info to boot_proto:
        let boot_struct_addr = (info as *const BootInfo) as u64;
  2069de:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        BOOT_INFO.lock().save(boot_struct_addr);
  2069e3:	48 8d 3d 33 9d ff ff 	lea    -0x62cd(%rip),%rdi        # 20071d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  2069ea:	e8 61 0e 00 00       	callq  207850 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>
  2069ef:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2069f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2069f9:	e8 c2 13 00 00       	callq  207dc0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>
  2069fe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  206a03:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206a08:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  206a0d:	e8 ce 14 00 00       	callq  207ee0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776941560deab6E>
  206a12:	48 89 04 24          	mov    %rax,(%rsp)
  206a16:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  206a1b:	48 8b 3c 24          	mov    (%rsp),%rdi
  206a1f:	e8 cc fe ff ff       	callq  2068f0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hf260aeb0ec104c1bE>
  206a24:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  206a29:	e8 12 13 01 00       	callq  217d40 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>
    }
  206a2e:	48 83 c4 38          	add    $0x38,%rsp
  206a32:	c3                   	retq   
  206a33:	cc                   	int3   
  206a34:	cc                   	int3   
  206a35:	cc                   	int3   
  206a36:	cc                   	int3   
  206a37:	cc                   	int3   
  206a38:	cc                   	int3   
  206a39:	cc                   	int3   
  206a3a:	cc                   	int3   
  206a3b:	cc                   	int3   
  206a3c:	cc                   	int3   
  206a3d:	cc                   	int3   
  206a3e:	cc                   	int3   
  206a3f:	cc                   	int3   

0000000000206a40 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE>:

    pub fn get_memory_regions() -> Option<&'static MemoryRegions> {
  206a40:	48 83 ec 18          	sub    $0x18,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  206a44:	e8 d7 fe ff ff       	callq  206920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  206a49:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206a4e:	b8 01 00 00 00       	mov    $0x1,%eax
  206a53:	31 c9                	xor    %ecx,%ecx
  206a55:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  206a5b:	48 0f 44 c1          	cmove  %rcx,%rax
  206a5f:	48 83 f8 01          	cmp    $0x1,%rax
  206a63:	75 14                	jne    206a79 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE+0x39>
  206a65:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206a6a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            return Some(&bi.memory_regions);
  206a6f:	48 83 c0 08          	add    $0x8,%rax
  206a73:	48 89 04 24          	mov    %rax,(%rsp)
        }

        None
    }
  206a77:	eb 08                	jmp    206a81 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE+0x41>
        None
  206a79:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  206a80:	00 
    }
  206a81:	48 8b 04 24          	mov    (%rsp),%rax
  206a85:	48 83 c4 18          	add    $0x18,%rsp
  206a89:	c3                   	retq   
  206a8a:	cc                   	int3   
  206a8b:	cc                   	int3   
  206a8c:	cc                   	int3   
  206a8d:	cc                   	int3   
  206a8e:	cc                   	int3   
  206a8f:	cc                   	int3   

0000000000206a90 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE>:

    pub fn get_framebuffer_info() -> Option<FrameBufferInfo> {
  206a90:	48 83 ec 68          	sub    $0x68,%rsp
  206a94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206a99:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if let Some(bi) = BootProtocol::get_boot_proto() {
  206a9e:	e8 7d fe ff ff       	callq  206920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  206aa3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206aa8:	b8 01 00 00 00       	mov    $0x1,%eax
  206aad:	31 c9                	xor    %ecx,%ecx
  206aaf:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  206ab5:	48 0f 44 c1          	cmove  %rcx,%rax
  206ab9:	48 83 f8 01          	cmp    $0x1,%rax
  206abd:	75 1a                	jne    206ad9 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x49>
  206abf:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  206ac4:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  206ac9:	48 83 c7 18          	add    $0x18,%rdi
  206acd:	e8 2e 32 00 00       	callq  209d00 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E>
  206ad2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206ad7:	eb 16                	jmp    206aef <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x5f>
  206ad9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }

            return None;
        }

        None
  206ade:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  206ae5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  206aea:	48 83 c4 68          	add    $0x68,%rsp
  206aee:	c3                   	retq   
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  206aef:	b8 01 00 00 00       	mov    $0x1,%eax
  206af4:	31 c9                	xor    %ecx,%ecx
  206af6:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
  206afc:	48 0f 44 c1          	cmove  %rcx,%rax
  206b00:	48 83 f8 01          	cmp    $0x1,%rax
  206b04:	75 16                	jne    206b1c <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x8c>
  206b06:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  206b0b:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
                return Some(fb_struct.info());
  206b10:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  206b15:	e8 46 33 01 00       	callq  219e60 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>
  206b1a:	eb 0e                	jmp    206b2a <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x9a>
  206b1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            return None;
  206b21:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  206b28:	eb bb                	jmp    206ae5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x55>
  206b2a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                return Some(fb_struct.info());
  206b2f:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  206b34:	ba 30 00 00 00       	mov    $0x30,%edx
  206b39:	e8 62 6f 01 00       	callq  21daa0 <memcpy>
#![no_std] // don't link the Rust standard library
  206b3e:	eb a5                	jmp    206ae5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x55>

0000000000206b40 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17hefc2ca2ea50ece8cE>:

    pub fn get_phy_offset() -> Option<u64> {
  206b40:	48 83 ec 28          	sub    $0x28,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  206b44:	e8 d7 fd ff ff       	callq  206920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  206b49:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206b4e:	b8 01 00 00 00       	mov    $0x1,%eax
  206b53:	31 c9                	xor    %ecx,%ecx
  206b55:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  206b5b:	48 0f 44 c1          	cmove  %rcx,%rax
  206b5f:	48 83 f8 01          	cmp    $0x1,%rax
  206b63:	75 22                	jne    206b87 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17hefc2ca2ea50ece8cE+0x47>
  206b65:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206b6a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            return bi.physical_memory_offset.into_option();
  206b6f:	8b 78 60             	mov    0x60(%rax),%edi
  206b72:	48 8b 70 68          	mov    0x68(%rax),%rsi
  206b76:	e8 55 31 00 00       	callq  209cd0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17h2ff5b3c95de4d9fdE>
  206b7b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  206b80:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206b85:	eb 09                	jmp    206b90 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17hefc2ca2ea50ece8cE+0x50>
        }

        None
  206b87:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  206b8e:	00 00 
    }
  206b90:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206b95:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  206b9a:	48 83 c4 28          	add    $0x28,%rsp
  206b9e:	c3                   	retq   
  206b9f:	cc                   	int3   

0000000000206ba0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E>:

    pub fn print_boot_info() {
  206ba0:	48 81 ec e8 05 00 00 	sub    $0x5e8,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  206ba7:	e8 74 fd ff ff       	callq  206920 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  206bac:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  206bb3:	00 
  206bb4:	b8 01 00 00 00       	mov    $0x1,%eax
  206bb9:	31 c9                	xor    %ecx,%ecx
  206bbb:	48 83 bc 24 58 01 00 	cmpq   $0x0,0x158(%rsp)
  206bc2:	00 00 
  206bc4:	48 0f 44 c1          	cmove  %rcx,%rax
  206bc8:	48 83 f8 01          	cmp    $0x1,%rax
  206bcc:	75 41                	jne    206c0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  206bce:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  206bd5:	00 
  206bd6:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  206bdd:	00 
  206bde:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  206be5:	00 
            // display version:
            log::info!(
  206be6:	48 c7 84 24 60 01 00 	movq   $0x3,0x160(%rsp)
  206bed:	00 03 00 00 00 
  206bf2:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  206bf9:	00 
  206bfa:	48 8d 35 57 97 ff ff 	lea    -0x68a9(%rip),%rsi        # 200358 <str.0+0x58>
  206c01:	e8 5a f1 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206c06:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  206c0d:	eb 08                	jmp    206c17 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x77>
                );
            } else {
                log::warn!("Boot info doesn't contain framebuffer information.");
            }
        }
    }
  206c0f:	48 81 c4 e8 05 00 00 	add    $0x5e8,%rsp
  206c16:	c3                   	retq   
  206c17:	8a 84 24 57 01 00 00 	mov    0x157(%rsp),%al
            log::info!(
  206c1e:	a8 01                	test   $0x1,%al
  206c20:	75 0c                	jne    206c2e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x8e>
  206c22:	eb 00                	jmp    206c24 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x84>
  206c24:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  206c2b:	00 
  206c2c:	eb 60                	jmp    206c8e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xee>
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  206c2e:	c6 84 24 df 05 00 00 	movb   $0x0,0x5df(%rsp)
  206c35:	00 
  206c36:	48 8b 3d 63 9b 01 00 	mov    0x19b63(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  206c3d:	0f b6 b4 24 df 05 00 	movzbl 0x5df(%rsp),%esi
  206c44:	00 
  206c45:	e8 a6 be 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  206c4a:	48 89 84 24 e0 05 00 	mov    %rax,0x5e0(%rsp)
  206c51:	00 
  206c52:	48 8b 84 24 e0 05 00 	mov    0x5e0(%rsp),%rax
  206c59:	00 
  206c5a:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  206c61:	00 
  206c62:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  206c69:	00 
  206c6a:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  206c71:	00 
  206c72:	e8 e9 f0 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206c77:	88 84 24 47 01 00 00 	mov    %al,0x147(%rsp)
  206c7e:	8a 84 24 47 01 00 00 	mov    0x147(%rsp),%al
  206c85:	24 01                	and    $0x1,%al
  206c87:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  206c8e:	f6 84 24 6f 01 00 00 	testb  $0x1,0x16f(%rsp)
  206c95:	01 
  206c96:	75 2c                	jne    206cc4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x124>
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  206c98:	48 c7 84 24 f0 01 00 	movq   $0x3,0x1f0(%rsp)
  206c9f:	00 03 00 00 00 
  206ca4:	48 8d bc 24 f0 01 00 	lea    0x1f0(%rsp),%rdi
  206cab:	00 
  206cac:	48 8d 35 a5 96 ff ff 	lea    -0x695b(%rip),%rsi        # 200358 <str.0+0x58>
  206cb3:	e8 a8 f0 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206cb8:	88 84 24 46 01 00 00 	mov    %al,0x146(%rsp)
  206cbf:	e9 78 01 00 00       	jmpq   206e3c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x29c>
  206cc4:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  206ccb:	00 
                bi.version_major,
  206ccc:	48 89 c2             	mov    %rax,%rdx
                bi.version_minor,
  206ccf:	48 89 c1             	mov    %rax,%rcx
  206cd2:	48 83 c1 02          	add    $0x2,%rcx
                bi.version_patch
  206cd6:	48 83 c0 04          	add    $0x4,%rax
            log::info!(
  206cda:	48 89 94 24 d8 01 00 	mov    %rdx,0x1d8(%rsp)
  206ce1:	00 
  206ce2:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  206ce9:	00 
  206cea:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  206cf1:	00 
  206cf2:	48 8b bc 24 d8 01 00 	mov    0x1d8(%rsp),%rdi
  206cf9:	00 
  206cfa:	48 89 bc 24 08 05 00 	mov    %rdi,0x508(%rsp)
  206d01:	00 
  206d02:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  206d09:	00 
  206d0a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  206d11:	00 
  206d12:	48 89 84 24 10 05 00 	mov    %rax,0x510(%rsp)
  206d19:	00 
  206d1a:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  206d21:	00 
  206d22:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  206d29:	00 
  206d2a:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  206d31:	00 
  206d32:	48 8b 35 7f 9a 01 00 	mov    0x19a7f(%rip),%rsi        # 2207b8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  206d39:	e8 72 cb 00 00       	callq  2138b0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  206d3e:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  206d45:	00 
  206d46:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  206d4d:	00 
  206d4e:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  206d55:	00 
  206d56:	48 8b 35 5b 9a 01 00 	mov    0x19a5b(%rip),%rsi        # 2207b8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  206d5d:	e8 4e cb 00 00       	callq  2138b0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  206d62:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  206d69:	00 
  206d6a:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  206d71:	00 
  206d72:	48 8b bc 24 28 01 00 	mov    0x128(%rsp),%rdi
  206d79:	00 
  206d7a:	48 8b 35 37 9a 01 00 	mov    0x19a37(%rip),%rsi        # 2207b8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  206d81:	e8 2a cb 00 00       	callq  2138b0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  206d86:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  206d8d:	00 
  206d8e:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  206d95:	00 
  206d96:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  206d9d:	00 
  206d9e:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  206da5:	00 
  206da6:	48 8b 94 24 18 01 00 	mov    0x118(%rsp),%rdx
  206dad:	00 
  206dae:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
  206db5:	00 
  206db6:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  206dbd:	00 
  206dbe:	4c 8b 84 24 30 01 00 	mov    0x130(%rsp),%r8
  206dc5:	00 
  206dc6:	4c 89 84 24 a8 01 00 	mov    %r8,0x1a8(%rsp)
  206dcd:	00 
  206dce:	48 89 bc 24 b0 01 00 	mov    %rdi,0x1b0(%rsp)
  206dd5:	00 
  206dd6:	48 89 b4 24 b8 01 00 	mov    %rsi,0x1b8(%rsp)
  206ddd:	00 
  206dde:	48 89 94 24 c0 01 00 	mov    %rdx,0x1c0(%rsp)
  206de5:	00 
  206de6:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  206ded:	00 
  206dee:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  206df5:	00 
  206df6:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  206dfd:	00 
  206dfe:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  206e05:	00 
  206e06:	48 8d 35 4b 80 01 00 	lea    0x1804b(%rip),%rsi        # 21ee58 <memset+0x1398>
  206e0d:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  206e13:	4c 89 c2             	mov    %r8,%rdx
  206e16:	e8 e5 e0 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  206e1b:	48 8b b4 24 60 01 00 	mov    0x160(%rsp),%rsi
  206e22:	00 
  206e23:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  206e2a:	00 
  206e2b:	48 8d 15 56 80 01 00 	lea    0x18056(%rip),%rdx        # 21ee88 <memset+0x13c8>
  206e32:	e8 d9 19 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  206e37:	e9 5c fe ff ff       	jmpq   206c98 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xf8>
  206e3c:	8a 84 24 46 01 00 00 	mov    0x146(%rsp),%al
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  206e43:	a8 01                	test   $0x1,%al
  206e45:	75 0c                	jne    206e53 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x2b3>
  206e47:	eb 00                	jmp    206e49 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x2a9>
  206e49:	c6 84 24 ff 01 00 00 	movb   $0x0,0x1ff(%rsp)
  206e50:	00 
  206e51:	eb 60                	jmp    206eb3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x313>
  206e53:	c6 84 24 cf 05 00 00 	movb   $0x0,0x5cf(%rsp)
  206e5a:	00 
  206e5b:	48 8b 3d 3e 99 01 00 	mov    0x1993e(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  206e62:	0f b6 b4 24 cf 05 00 	movzbl 0x5cf(%rsp),%esi
  206e69:	00 
  206e6a:	e8 81 bc 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  206e6f:	48 89 84 24 d0 05 00 	mov    %rax,0x5d0(%rsp)
  206e76:	00 
  206e77:	48 8b 84 24 d0 05 00 	mov    0x5d0(%rsp),%rax
  206e7e:	00 
  206e7f:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  206e86:	00 
  206e87:	48 8d bc 24 f0 01 00 	lea    0x1f0(%rsp),%rdi
  206e8e:	00 
  206e8f:	48 8d b4 24 00 02 00 	lea    0x200(%rsp),%rsi
  206e96:	00 
  206e97:	e8 c4 ee ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206e9c:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  206ea3:	8a 84 24 ff 00 00 00 	mov    0xff(%rsp),%al
  206eaa:	24 01                	and    $0x1,%al
  206eac:	88 84 24 ff 01 00 00 	mov    %al,0x1ff(%rsp)
  206eb3:	f6 84 24 ff 01 00 00 	testb  $0x1,0x1ff(%rsp)
  206eba:	01 
  206ebb:	75 2c                	jne    206ee9 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x349>
            log::info!(
  206ebd:	48 c7 84 24 50 02 00 	movq   $0x3,0x250(%rsp)
  206ec4:	00 03 00 00 00 
  206ec9:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
  206ed0:	00 
  206ed1:	48 8d 35 80 94 ff ff 	lea    -0x6b80(%rip),%rsi        # 200358 <str.0+0x58>
  206ed8:	e8 83 ee ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206edd:	88 84 24 fe 00 00 00 	mov    %al,0xfe(%rsp)
  206ee4:	e9 a6 00 00 00       	jmpq   206f8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x3ef>
  206ee9:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  206ef0:	00 
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  206ef1:	48 83 c0 78          	add    $0x78,%rax
  206ef5:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  206efc:	00 
  206efd:	48 8b bc 24 48 02 00 	mov    0x248(%rsp),%rdi
  206f04:	00 
  206f05:	48 89 bc 24 20 05 00 	mov    %rdi,0x520(%rsp)
  206f0c:	00 
  206f0d:	48 8b 35 ac 98 01 00 	mov    0x198ac(%rip),%rsi        # 2207c0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x80>
  206f14:	e8 57 c4 00 00       	callq  213370 <_ZN4core3fmt10ArgumentV13new17h1055d36b2201d16bE>
  206f19:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  206f20:	00 
  206f21:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  206f28:	00 
  206f29:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  206f30:	00 
  206f31:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  206f38:	00 
  206f39:	48 89 8c 24 38 02 00 	mov    %rcx,0x238(%rsp)
  206f40:	00 
  206f41:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  206f48:	00 
  206f49:	48 8d 8c 24 38 02 00 	lea    0x238(%rsp),%rcx
  206f50:	00 
  206f51:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  206f58:	00 
  206f59:	48 8d 35 60 7f 01 00 	lea    0x17f60(%rip),%rsi        # 21eec0 <memset+0x1400>
  206f60:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  206f66:	4c 89 c2             	mov    %r8,%rdx
  206f69:	e8 92 df ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  206f6e:	48 8b b4 24 f0 01 00 	mov    0x1f0(%rsp),%rsi
  206f75:	00 
  206f76:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  206f7d:	00 
  206f7e:	48 8d 15 4b 7f 01 00 	lea    0x17f4b(%rip),%rdx        # 21eed0 <memset+0x1410>
  206f85:	e8 86 18 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  206f8a:	e9 2e ff ff ff       	jmpq   206ebd <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x31d>
  206f8f:	8a 84 24 fe 00 00 00 	mov    0xfe(%rsp),%al
            log::info!(
  206f96:	a8 01                	test   $0x1,%al
  206f98:	75 0c                	jne    206fa6 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x406>
  206f9a:	eb 00                	jmp    206f9c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x3fc>
  206f9c:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  206fa3:	00 
  206fa4:	eb 60                	jmp    207006 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x466>
  206fa6:	c6 84 24 bf 05 00 00 	movb   $0x0,0x5bf(%rsp)
  206fad:	00 
  206fae:	48 8b 3d eb 97 01 00 	mov    0x197eb(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  206fb5:	0f b6 b4 24 bf 05 00 	movzbl 0x5bf(%rsp),%esi
  206fbc:	00 
  206fbd:	e8 2e bb 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  206fc2:	48 89 84 24 c0 05 00 	mov    %rax,0x5c0(%rsp)
  206fc9:	00 
  206fca:	48 8b 84 24 c0 05 00 	mov    0x5c0(%rsp),%rax
  206fd1:	00 
  206fd2:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  206fd9:	00 
  206fda:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
  206fe1:	00 
  206fe2:	48 8d b4 24 60 02 00 	lea    0x260(%rsp),%rsi
  206fe9:	00 
  206fea:	e8 71 ed ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206fef:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
  206ff6:	8a 84 24 e7 00 00 00 	mov    0xe7(%rsp),%al
  206ffd:	24 01                	and    $0x1,%al
  206fff:	88 84 24 5f 02 00 00 	mov    %al,0x25f(%rsp)
  207006:	f6 84 24 5f 02 00 00 	testb  $0x1,0x25f(%rsp)
  20700d:	01 
  20700e:	75 12                	jne    207022 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x482>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  207010:	e8 2b fa ff ff       	callq  206a40 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE>
  207015:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  20701c:	00 
  20701d:	e9 ea 00 00 00       	jmpq   20710c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x56c>
  207022:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  207029:	00 
                bi.physical_memory_offset.into_option().unwrap()
  20702a:	8b 78 60             	mov    0x60(%rax),%edi
  20702d:	48 8b 70 68          	mov    0x68(%rax),%rsi
  207031:	e8 9a 2c 00 00       	callq  209cd0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17h2ff5b3c95de4d9fdE>
  207036:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20703d:	00 
  20703e:	48 89 94 24 d8 00 00 	mov    %rdx,0xd8(%rsp)
  207045:	00 
  207046:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  20704d:	00 
  20704e:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  207055:	00 
  207056:	48 8d 15 bb 7e 01 00 	lea    0x17ebb(%rip),%rdx        # 21ef18 <memset+0x1458>
  20705d:	e8 ae e6 ff ff       	callq  205710 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>
  207062:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  207069:	00 
            log::info!(
  20706a:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
  207071:	00 
  207072:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  207079:	00 
  20707a:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  207081:	00 
  207082:	48 89 bc 24 28 05 00 	mov    %rdi,0x528(%rsp)
  207089:	00 
  20708a:	48 8b 35 17 97 01 00 	mov    0x19717(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  207091:	e8 ba c7 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  207096:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20709d:	00 
  20709e:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  2070a5:	00 
  2070a6:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2070ad:	00 
  2070ae:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  2070b5:	00 
  2070b6:	48 89 8c 24 98 02 00 	mov    %rcx,0x298(%rsp)
  2070bd:	00 
  2070be:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  2070c5:	00 
  2070c6:	48 8d 8c 24 98 02 00 	lea    0x298(%rsp),%rcx
  2070cd:	00 
  2070ce:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  2070d5:	00 
  2070d6:	48 8d 35 2b 7e 01 00 	lea    0x17e2b(%rip),%rsi        # 21ef08 <memset+0x1448>
  2070dd:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2070e3:	4c 89 c2             	mov    %r8,%rdx
  2070e6:	e8 15 de ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2070eb:	48 8b b4 24 50 02 00 	mov    0x250(%rsp),%rsi
  2070f2:	00 
  2070f3:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  2070fa:	00 
  2070fb:	48 8d 15 2e 7e 01 00 	lea    0x17e2e(%rip),%rdx        # 21ef30 <memset+0x1470>
  207102:	e8 09 17 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  207107:	e9 04 ff ff ff       	jmpq   207010 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x470>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  20710c:	b8 01 00 00 00       	mov    $0x1,%eax
  207111:	31 c9                	xor    %ecx,%ecx
  207113:	48 83 bc 24 b8 02 00 	cmpq   $0x0,0x2b8(%rsp)
  20711a:	00 00 
  20711c:	48 0f 44 c1          	cmove  %rcx,%rax
  207120:	48 83 f8 01          	cmp    $0x1,%rax
  207124:	75 2a                	jne    207150 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5b0>
  207126:	48 8b bc 24 b8 02 00 	mov    0x2b8(%rsp),%rdi
  20712d:	00 
  20712e:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  207135:	00 
  207136:	48 89 bc 24 30 05 00 	mov    %rdi,0x530(%rsp)
  20713d:	00 
                for region_idx in 0..memory_regions.len() {
  20713e:	e8 ed 2c 01 00       	callq  219e30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  207143:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  20714a:	00 
  20714b:	e9 fd 00 00 00       	jmpq   20724d <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6ad>
                log::warn!("Boot info doesn't contain memory map information.");
  207150:	48 c7 84 24 68 03 00 	movq   $0x2,0x368(%rsp)
  207157:	00 02 00 00 00 
  20715c:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
  207163:	00 
  207164:	48 8d 35 ed 91 ff ff 	lea    -0x6e13(%rip),%rsi        # 200358 <str.0+0x58>
  20716b:	e8 f0 eb ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  207170:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  207177:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  20717e:	a8 01                	test   $0x1,%al
  207180:	75 0c                	jne    20718e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5ee>
  207182:	eb 00                	jmp    207184 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5e4>
  207184:	c6 84 24 77 03 00 00 	movb   $0x0,0x377(%rsp)
  20718b:	00 
  20718c:	eb 60                	jmp    2071ee <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x64e>
  20718e:	c6 84 24 af 05 00 00 	movb   $0x0,0x5af(%rsp)
  207195:	00 
  207196:	48 8b 3d 03 96 01 00 	mov    0x19603(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20719d:	0f b6 b4 24 af 05 00 	movzbl 0x5af(%rsp),%esi
  2071a4:	00 
  2071a5:	e8 46 b9 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2071aa:	48 89 84 24 b0 05 00 	mov    %rax,0x5b0(%rsp)
  2071b1:	00 
  2071b2:	48 8b 84 24 b0 05 00 	mov    0x5b0(%rsp),%rax
  2071b9:	00 
  2071ba:	48 89 84 24 78 03 00 	mov    %rax,0x378(%rsp)
  2071c1:	00 
  2071c2:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
  2071c9:	00 
  2071ca:	48 8d b4 24 78 03 00 	lea    0x378(%rsp),%rsi
  2071d1:	00 
  2071d2:	e8 89 eb ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2071d7:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  2071de:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  2071e5:	24 01                	and    $0x1,%al
  2071e7:	88 84 24 77 03 00 00 	mov    %al,0x377(%rsp)
  2071ee:	f6 84 24 77 03 00 00 	testb  $0x1,0x377(%rsp)
  2071f5:	01 
  2071f6:	75 12                	jne    20720a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x66a>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  2071f8:	48 8d bc 24 b0 03 00 	lea    0x3b0(%rsp),%rdi
  2071ff:	00 
  207200:	e8 8b f8 ff ff       	callq  206a90 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE>
  207205:	e9 c9 02 00 00       	jmpq   2074d3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x933>
                log::warn!("Boot info doesn't contain memory map information.");
  20720a:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  207211:	00 
  207212:	48 8d 35 4f 7d 01 00 	lea    0x17d4f(%rip),%rsi        # 21ef68 <memset+0x14a8>
  207219:	ba 01 00 00 00       	mov    $0x1,%edx
  20721e:	48 8d 0d 9b 94 ff ff 	lea    -0x6b65(%rip),%rcx        # 2006c0 <str.0+0xb0>
  207225:	31 c0                	xor    %eax,%eax
  207227:	41 89 c0             	mov    %eax,%r8d
  20722a:	e8 d1 dc ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20722f:	48 8b b4 24 68 03 00 	mov    0x368(%rsp),%rsi
  207236:	00 
  207237:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  20723e:	00 
  20723f:	48 8d 15 32 7d 01 00 	lea    0x17d32(%rip),%rdx        # 21ef78 <memset+0x14b8>
  207246:	e8 c5 15 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20724b:	eb ab                	jmp    2071f8 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x658>
  20724d:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207254:	00 
                for region_idx in 0..memory_regions.len() {
  207255:	48 c7 84 24 c0 02 00 	movq   $0x0,0x2c0(%rsp)
  20725c:	00 00 00 00 00 
  207261:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  207268:	00 
  207269:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  207270:	00 
  207271:	48 8b b4 24 c8 02 00 	mov    0x2c8(%rsp),%rsi
  207278:	00 
  207279:	e8 c2 9b 00 00       	callq  210e40 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17haabf9c3393bbf5bcE>
  20727e:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  207285:	00 
  207286:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  20728d:	00 
  20728e:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  207295:	00 
  207296:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  20729d:	00 
  20729e:	48 89 8c 24 d0 02 00 	mov    %rcx,0x2d0(%rsp)
  2072a5:	00 
  2072a6:	48 89 84 24 d8 02 00 	mov    %rax,0x2d8(%rsp)
  2072ad:	00 
  2072ae:	48 8d bc 24 d0 02 00 	lea    0x2d0(%rsp),%rdi
  2072b5:	00 
  2072b6:	e8 25 9b 00 00       	callq  210de0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hde79bfc4fb025d57E>
  2072bb:	48 89 94 24 e8 02 00 	mov    %rdx,0x2e8(%rsp)
  2072c2:	00 
  2072c3:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  2072ca:	00 
  2072cb:	48 8b 84 24 e0 02 00 	mov    0x2e0(%rsp),%rax
  2072d2:	00 
  2072d3:	48 85 c0             	test   %rax,%rax
  2072d6:	0f 84 1c ff ff ff    	je     2071f8 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x658>
  2072dc:	eb 00                	jmp    2072de <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x73e>
  2072de:	eb 02                	jmp    2072e2 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x742>
  2072e0:	0f 0b                	ud2    
  2072e2:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  2072e9:	00 
  2072ea:	48 8b 84 24 e8 02 00 	mov    0x2e8(%rsp),%rax
  2072f1:	00 
  2072f2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2072f9:	00 
  2072fa:	48 89 84 24 38 05 00 	mov    %rax,0x538(%rsp)
  207301:	00 
  207302:	48 89 84 24 40 05 00 	mov    %rax,0x540(%rsp)
  207309:	00 
  20730a:	48 89 84 24 48 05 00 	mov    %rax,0x548(%rsp)
  207311:	00 
                    let region = memory_regions[region_idx];
  207312:	e8 19 2b 01 00       	callq  219e30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  207317:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20731e:	00 
  20731f:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  207326:	00 
  207327:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20732e:	00 
  20732f:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  207336:	00 
  207337:	48 39 c8             	cmp    %rcx,%rax
  20733a:	0f 92 c0             	setb   %al
  20733d:	a8 01                	test   $0x1,%al
  20733f:	75 02                	jne    207343 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x7a3>
  207341:	eb 60                	jmp    2073a3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x803>
  207343:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20734a:	00 
  20734b:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  207352:	00 
  207353:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  207357:	48 01 c8             	add    %rcx,%rax
  20735a:	48 8b 08             	mov    (%rax),%rcx
  20735d:	48 89 8c 24 f0 02 00 	mov    %rcx,0x2f0(%rsp)
  207364:	00 
  207365:	48 8b 48 08          	mov    0x8(%rax),%rcx
  207369:	48 89 8c 24 f8 02 00 	mov    %rcx,0x2f8(%rsp)
  207370:	00 
  207371:	48 8b 40 10          	mov    0x10(%rax),%rax
  207375:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  20737c:	00 
                    log::info!("{:?}", region);
  20737d:	48 c7 84 24 08 03 00 	movq   $0x3,0x308(%rsp)
  207384:	00 03 00 00 00 
  207389:	48 8d bc 24 08 03 00 	lea    0x308(%rsp),%rdi
  207390:	00 
  207391:	48 8d 35 c0 8f ff ff 	lea    -0x7040(%rip),%rsi        # 200358 <str.0+0x58>
  207398:	e8 c3 e9 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20739d:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  2073a1:	eb 1e                	jmp    2073c1 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x821>
  2073a3:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  2073aa:	00 
  2073ab:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2073b2:	00 
                    let region = memory_regions[region_idx];
  2073b3:	48 8d 15 f6 7b 01 00 	lea    0x17bf6(%rip),%rdx        # 21efb0 <memset+0x14f0>
  2073ba:	e8 c1 3c 01 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2073bf:	0f 0b                	ud2    
  2073c1:	8a 44 24 7f          	mov    0x7f(%rsp),%al
                    log::info!("{:?}", region);
  2073c5:	a8 01                	test   $0x1,%al
  2073c7:	75 0c                	jne    2073d5 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x835>
  2073c9:	eb 00                	jmp    2073cb <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x82b>
  2073cb:	c6 84 24 17 03 00 00 	movb   $0x0,0x317(%rsp)
  2073d2:	00 
  2073d3:	eb 5a                	jmp    20742f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x88f>
  2073d5:	c6 84 24 9f 05 00 00 	movb   $0x0,0x59f(%rsp)
  2073dc:	00 
  2073dd:	48 8b 3d bc 93 01 00 	mov    0x193bc(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2073e4:	0f b6 b4 24 9f 05 00 	movzbl 0x59f(%rsp),%esi
  2073eb:	00 
  2073ec:	e8 ff b6 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2073f1:	48 89 84 24 a0 05 00 	mov    %rax,0x5a0(%rsp)
  2073f8:	00 
  2073f9:	48 8b 84 24 a0 05 00 	mov    0x5a0(%rsp),%rax
  207400:	00 
  207401:	48 89 84 24 18 03 00 	mov    %rax,0x318(%rsp)
  207408:	00 
  207409:	48 8d bc 24 08 03 00 	lea    0x308(%rsp),%rdi
  207410:	00 
  207411:	48 8d b4 24 18 03 00 	lea    0x318(%rsp),%rsi
  207418:	00 
  207419:	e8 42 e9 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20741e:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  207422:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  207426:	24 01                	and    $0x1,%al
  207428:	88 84 24 17 03 00 00 	mov    %al,0x317(%rsp)
  20742f:	f6 84 24 17 03 00 00 	testb  $0x1,0x317(%rsp)
  207436:	01 
  207437:	0f 84 71 fe ff ff    	je     2072ae <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x70e>
  20743d:	48 8d 84 24 f0 02 00 	lea    0x2f0(%rsp),%rax
  207444:	00 
  207445:	48 89 84 24 60 03 00 	mov    %rax,0x360(%rsp)
  20744c:	00 
  20744d:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
  207454:	00 
  207455:	48 89 bc 24 50 05 00 	mov    %rdi,0x550(%rsp)
  20745c:	00 
  20745d:	48 8b 35 64 93 01 00 	mov    0x19364(%rip),%rsi        # 2207c8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x88>
  207464:	e8 87 c0 00 00       	callq  2134f0 <_ZN4core3fmt10ArgumentV13new17h3d8fc7a58ad0ecdfE>
  207469:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20746e:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  207473:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  207478:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20747d:	48 89 8c 24 50 03 00 	mov    %rcx,0x350(%rsp)
  207484:	00 
  207485:	48 89 84 24 58 03 00 	mov    %rax,0x358(%rsp)
  20748c:	00 
  20748d:	48 8d 8c 24 50 03 00 	lea    0x350(%rsp),%rcx
  207494:	00 
  207495:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  20749c:	00 
  20749d:	48 8d 35 24 7b 01 00 	lea    0x17b24(%rip),%rsi        # 21efc8 <memset+0x1508>
  2074a4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2074aa:	4c 89 c2             	mov    %r8,%rdx
  2074ad:	e8 4e da ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2074b2:	48 8b b4 24 08 03 00 	mov    0x308(%rsp),%rsi
  2074b9:	00 
  2074ba:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  2074c1:	00 
  2074c2:	48 8d 15 0f 7b 01 00 	lea    0x17b0f(%rip),%rdx        # 21efd8 <memset+0x1518>
  2074c9:	e8 42 13 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2074ce:	e9 db fd ff ff       	jmpq   2072ae <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x70e>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  2074d3:	8b 94 24 c8 03 00 00 	mov    0x3c8(%rsp),%edx
  2074da:	83 ea 03             	sub    $0x3,%edx
  2074dd:	b8 01 00 00 00       	mov    $0x1,%eax
  2074e2:	31 c9                	xor    %ecx,%ecx
  2074e4:	83 fa 00             	cmp    $0x0,%edx
  2074e7:	48 0f 44 c1          	cmove  %rcx,%rax
  2074eb:	48 83 f8 01          	cmp    $0x1,%rax
  2074ef:	75 43                	jne    207534 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x994>
  2074f1:	48 8d b4 24 b0 03 00 	lea    0x3b0(%rsp),%rsi
  2074f8:	00 
  2074f9:	48 8d bc 24 e0 03 00 	lea    0x3e0(%rsp),%rdi
  207500:	00 
  207501:	ba 30 00 00 00       	mov    $0x30,%edx
  207506:	e8 95 65 01 00       	callq  21daa0 <memcpy>
                log::info!(
  20750b:	48 c7 84 24 10 04 00 	movq   $0x3,0x410(%rsp)
  207512:	00 03 00 00 00 
  207517:	48 8d bc 24 10 04 00 	lea    0x410(%rsp),%rdi
  20751e:	00 
  20751f:	48 8d 35 32 8e ff ff 	lea    -0x71ce(%rip),%rsi        # 200358 <str.0+0x58>
  207526:	e8 35 e8 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20752b:	88 44 24 67          	mov    %al,0x67(%rsp)
  20752f:	e9 e6 00 00 00       	jmpq   20761a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa7a>
                log::warn!("Boot info doesn't contain framebuffer information.");
  207534:	48 c7 84 24 b8 04 00 	movq   $0x2,0x4b8(%rsp)
  20753b:	00 02 00 00 00 
  207540:	48 8d bc 24 b8 04 00 	lea    0x4b8(%rsp),%rdi
  207547:	00 
  207548:	48 8d 35 09 8e ff ff 	lea    -0x71f7(%rip),%rsi        # 200358 <str.0+0x58>
  20754f:	e8 0c e8 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  207554:	88 44 24 66          	mov    %al,0x66(%rsp)
  207558:	8a 44 24 66          	mov    0x66(%rsp),%al
  20755c:	a8 01                	test   $0x1,%al
  20755e:	75 0c                	jne    20756c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x9cc>
  207560:	eb 00                	jmp    207562 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x9c2>
  207562:	c6 84 24 c7 04 00 00 	movb   $0x0,0x4c7(%rsp)
  207569:	00 
  20756a:	eb 5a                	jmp    2075c6 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa26>
  20756c:	c6 84 24 8f 05 00 00 	movb   $0x0,0x58f(%rsp)
  207573:	00 
  207574:	48 8b 3d 25 92 01 00 	mov    0x19225(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20757b:	0f b6 b4 24 8f 05 00 	movzbl 0x58f(%rsp),%esi
  207582:	00 
  207583:	e8 68 b5 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207588:	48 89 84 24 90 05 00 	mov    %rax,0x590(%rsp)
  20758f:	00 
  207590:	48 8b 84 24 90 05 00 	mov    0x590(%rsp),%rax
  207597:	00 
  207598:	48 89 84 24 c8 04 00 	mov    %rax,0x4c8(%rsp)
  20759f:	00 
  2075a0:	48 8d bc 24 b8 04 00 	lea    0x4b8(%rsp),%rdi
  2075a7:	00 
  2075a8:	48 8d b4 24 c8 04 00 	lea    0x4c8(%rsp),%rsi
  2075af:	00 
  2075b0:	e8 ab e7 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2075b5:	88 44 24 65          	mov    %al,0x65(%rsp)
  2075b9:	8a 44 24 65          	mov    0x65(%rsp),%al
  2075bd:	24 01                	and    $0x1,%al
  2075bf:	88 84 24 c7 04 00 00 	mov    %al,0x4c7(%rsp)
  2075c6:	f6 84 24 c7 04 00 00 	testb  $0x1,0x4c7(%rsp)
  2075cd:	01 
  2075ce:	0f 84 3b f6 ff ff    	je     206c0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  2075d4:	48 8d bc 24 d0 04 00 	lea    0x4d0(%rsp),%rdi
  2075db:	00 
  2075dc:	48 8d 35 2d 7a 01 00 	lea    0x17a2d(%rip),%rsi        # 21f010 <memset+0x1550>
  2075e3:	ba 01 00 00 00       	mov    $0x1,%edx
  2075e8:	48 8d 0d d1 90 ff ff 	lea    -0x6f2f(%rip),%rcx        # 2006c0 <str.0+0xb0>
  2075ef:	31 c0                	xor    %eax,%eax
  2075f1:	41 89 c0             	mov    %eax,%r8d
  2075f4:	e8 07 d9 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2075f9:	48 8b b4 24 b8 04 00 	mov    0x4b8(%rsp),%rsi
  207600:	00 
  207601:	48 8d bc 24 d0 04 00 	lea    0x4d0(%rsp),%rdi
  207608:	00 
  207609:	48 8d 15 10 7a 01 00 	lea    0x17a10(%rip),%rdx        # 21f020 <memset+0x1560>
  207610:	e8 fb 11 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  207615:	e9 f5 f5 ff ff       	jmpq   206c0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  20761a:	8a 44 24 67          	mov    0x67(%rsp),%al
                log::info!(
  20761e:	a8 01                	test   $0x1,%al
  207620:	75 0c                	jne    20762e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa8e>
  207622:	eb 00                	jmp    207624 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa84>
  207624:	c6 84 24 1f 04 00 00 	movb   $0x0,0x41f(%rsp)
  20762b:	00 
  20762c:	eb 5a                	jmp    207688 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xae8>
  20762e:	c6 84 24 7f 05 00 00 	movb   $0x0,0x57f(%rsp)
  207635:	00 
  207636:	48 8b 3d 63 91 01 00 	mov    0x19163(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20763d:	0f b6 b4 24 7f 05 00 	movzbl 0x57f(%rsp),%esi
  207644:	00 
  207645:	e8 a6 b4 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20764a:	48 89 84 24 80 05 00 	mov    %rax,0x580(%rsp)
  207651:	00 
  207652:	48 8b 84 24 80 05 00 	mov    0x580(%rsp),%rax
  207659:	00 
  20765a:	48 89 84 24 20 04 00 	mov    %rax,0x420(%rsp)
  207661:	00 
  207662:	48 8d bc 24 10 04 00 	lea    0x410(%rsp),%rdi
  207669:	00 
  20766a:	48 8d b4 24 20 04 00 	lea    0x420(%rsp),%rsi
  207671:	00 
  207672:	e8 e9 e6 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  207677:	88 44 24 64          	mov    %al,0x64(%rsp)
  20767b:	8a 44 24 64          	mov    0x64(%rsp),%al
  20767f:	24 01                	and    $0x1,%al
  207681:	88 84 24 1f 04 00 00 	mov    %al,0x41f(%rsp)
  207688:	f6 84 24 1f 04 00 00 	testb  $0x1,0x41f(%rsp)
  20768f:	01 
  207690:	0f 84 79 f5 ff ff    	je     206c0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
                    fb_info.horizontal_resolution,
  207696:	48 8d b4 24 e0 03 00 	lea    0x3e0(%rsp),%rsi
  20769d:	00 
  20769e:	48 83 c6 08          	add    $0x8,%rsi
                    fb_info.vertical_resolution,
  2076a2:	48 8d 94 24 e0 03 00 	lea    0x3e0(%rsp),%rdx
  2076a9:	00 
  2076aa:	48 83 c2 10          	add    $0x10,%rdx
                    fb_info.bytes_per_pixel,
  2076ae:	48 8d 8c 24 e0 03 00 	lea    0x3e0(%rsp),%rcx
  2076b5:	00 
  2076b6:	48 83 c1 20          	add    $0x20,%rcx
                    fb_info.pixel_format
  2076ba:	48 8d 84 24 e0 03 00 	lea    0x3e0(%rsp),%rax
  2076c1:	00 
  2076c2:	48 83 c0 18          	add    $0x18,%rax
                log::info!(
  2076c6:	48 89 b4 24 98 04 00 	mov    %rsi,0x498(%rsp)
  2076cd:	00 
  2076ce:	48 89 94 24 a0 04 00 	mov    %rdx,0x4a0(%rsp)
  2076d5:	00 
  2076d6:	48 89 8c 24 a8 04 00 	mov    %rcx,0x4a8(%rsp)
  2076dd:	00 
  2076de:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  2076e5:	00 
  2076e6:	48 8b bc 24 98 04 00 	mov    0x498(%rsp),%rdi
  2076ed:	00 
  2076ee:	48 89 bc 24 58 05 00 	mov    %rdi,0x558(%rsp)
  2076f5:	00 
  2076f6:	48 8b 84 24 a0 04 00 	mov    0x4a0(%rsp),%rax
  2076fd:	00 
  2076fe:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207703:	48 89 84 24 60 05 00 	mov    %rax,0x560(%rsp)
  20770a:	00 
  20770b:	48 8b 84 24 a8 04 00 	mov    0x4a8(%rsp),%rax
  207712:	00 
  207713:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207718:	48 89 84 24 68 05 00 	mov    %rax,0x568(%rsp)
  20771f:	00 
  207720:	48 8b 84 24 b0 04 00 	mov    0x4b0(%rsp),%rax
  207727:	00 
  207728:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20772d:	48 89 84 24 70 05 00 	mov    %rax,0x570(%rsp)
  207734:	00 
  207735:	48 8b 35 94 90 01 00 	mov    0x19094(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20773c:	e8 4f c0 00 00       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  207741:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  207746:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20774b:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  207750:	48 8b 35 79 90 01 00 	mov    0x19079(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  207757:	e8 34 c0 00 00       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  20775c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207761:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  207766:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  20776b:	48 8b 35 5e 90 01 00 	mov    0x1905e(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  207772:	e8 19 c0 00 00       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  207777:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20777c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  207781:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  207786:	48 8b 35 4b 90 01 00 	mov    0x1904b(%rip),%rsi        # 2207d8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x98>
  20778d:	e8 9e bf 00 00       	callq  213730 <_ZN4core3fmt10ArgumentV13new17hcebee369d36adbb6E>
  207792:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207797:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20779c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2077a1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2077a6:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2077ab:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2077b0:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2077b5:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  2077ba:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
  2077bf:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
  2077c4:	4c 89 94 24 58 04 00 	mov    %r10,0x458(%rsp)
  2077cb:	00 
  2077cc:	4c 89 8c 24 60 04 00 	mov    %r9,0x460(%rsp)
  2077d3:	00 
  2077d4:	4c 89 84 24 68 04 00 	mov    %r8,0x468(%rsp)
  2077db:	00 
  2077dc:	48 89 bc 24 70 04 00 	mov    %rdi,0x470(%rsp)
  2077e3:	00 
  2077e4:	48 89 b4 24 78 04 00 	mov    %rsi,0x478(%rsp)
  2077eb:	00 
  2077ec:	48 89 94 24 80 04 00 	mov    %rdx,0x480(%rsp)
  2077f3:	00 
  2077f4:	48 89 8c 24 88 04 00 	mov    %rcx,0x488(%rsp)
  2077fb:	00 
  2077fc:	48 89 84 24 90 04 00 	mov    %rax,0x490(%rsp)
  207803:	00 
  207804:	48 8d 8c 24 58 04 00 	lea    0x458(%rsp),%rcx
  20780b:	00 
  20780c:	48 8d bc 24 28 04 00 	lea    0x428(%rsp),%rdi
  207813:	00 
  207814:	48 8d 35 3d 78 01 00 	lea    0x1783d(%rip),%rsi        # 21f058 <memset+0x1598>
  20781b:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  207821:	4c 89 c2             	mov    %r8,%rdx
  207824:	e8 d7 d6 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  207829:	48 8b b4 24 10 04 00 	mov    0x410(%rsp),%rsi
  207830:	00 
  207831:	48 8d bc 24 28 04 00 	lea    0x428(%rsp),%rdi
  207838:	00 
  207839:	48 8d 15 58 78 01 00 	lea    0x17858(%rip),%rdx        # 21f098 <memset+0x15d8>
  207840:	e8 cb 0f 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  207845:	e9 c5 f3 ff ff       	jmpq   206c0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  20784a:	cc                   	int3   
  20784b:	cc                   	int3   
  20784c:	cc                   	int3   
  20784d:	cc                   	int3   
  20784e:	cc                   	int3   
  20784f:	cc                   	int3   

0000000000207850 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>:
            fn deref(&self) -> &$T {
  207850:	48 83 ec 18          	sub    $0x18,%rsp
  207854:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207859:	48 8d 05 e8 f0 01 00 	lea    0x1f0e8(%rip),%rax        # 226948 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h95f8b6f4aca1b584E>
  207860:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207865:	48 8d 3d dc f0 01 00 	lea    0x1f0dc(%rip),%rdi        # 226948 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h95f8b6f4aca1b584E>
  20786c:	e8 7f 14 00 00       	callq  208cf0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE>
  207871:	48 89 04 24          	mov    %rax,(%rsp)
  207875:	48 8b 04 24          	mov    (%rsp),%rax
            }
  207879:	48 83 c4 18          	add    $0x18,%rsp
  20787d:	c3                   	retq   
  20787e:	cc                   	int3   
  20787f:	cc                   	int3   

0000000000207880 <_ZN4core3mem7replace17h73afdf1293179534E>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[must_use = "if you don't need the old value, you can just assign the new value directly"]
#[rustc_const_unstable(feature = "const_replace", issue = "83164")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  207880:	48 83 ec 38          	sub    $0x38,%rsp
  207884:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207889:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20788e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207893:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    // SAFETY: We read from `dest` but directly write `src` into it afterwards,
    // such that the old value is not duplicated. Nothing is dropped and
    // nothing here can panic.
    unsafe {
        let result = ptr::read(dest);
  207898:	e8 43 d5 00 00       	callq  214de0 <_ZN4core3ptr4read17h3174a0a85995dc74E>
  20789d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2078a2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2078a7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2078ac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  2078b1:	e8 ca d5 00 00       	callq  214e80 <_ZN4core3ptr5write17hb4ae5111637a2d49E>
  2078b6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        result
    }
}
  2078bb:	48 83 c4 38          	add    $0x38,%rsp
  2078bf:	c3                   	retq   

00000000002078c0 <_ZN4core3mem7replace17h8091d9534b10fb61E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  2078c0:	48 83 ec 38          	sub    $0x38,%rsp
  2078c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2078c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2078ce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2078d3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let result = ptr::read(dest);
  2078d8:	e8 53 d5 00 00       	callq  214e30 <_ZN4core3ptr4read17h9c70907dc6f48ac9E>
  2078dd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2078e2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2078e7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2078ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  2078f1:	e8 aa d5 00 00       	callq  214ea0 <_ZN4core3ptr5write17hebcb375c2b2384e0E>
  2078f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  2078fb:	48 83 c4 38          	add    $0x38,%rsp
  2078ff:	c3                   	retq   

0000000000207900 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE>:
    }
}

impl<T: ?Sized> Mutex<T>
{
    fn obtain_lock(&self)
  207900:	48 83 ec 28          	sub    $0x28,%rsp
  207904:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207909:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20790e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    {
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  207913:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  207918:	31 f6                	xor    %esi,%esi
  20791a:	ba 01 00 00 00       	mov    $0x1,%edx
  20791f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  207924:	e8 37 ae 00 00       	callq  212760 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  207929:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20792d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  207931:	a8 01                	test   $0x1,%al
  207933:	75 07                	jne    20793c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x3c>
  207935:	eb 00                	jmp    207937 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x37>
            while self.lock.load(Ordering::Relaxed)
            {
                cpu_relax();
            }
        }
    }
  207937:	48 83 c4 28          	add    $0x28,%rsp
  20793b:	c3                   	retq   
  20793c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  207941:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  207946:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  20794b:	e8 e0 af 00 00       	callq  212930 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  207950:	88 44 24 0e          	mov    %al,0xe(%rsp)
  207954:	8a 44 24 0e          	mov    0xe(%rsp),%al
  207958:	a8 01                	test   $0x1,%al
  20795a:	75 02                	jne    20795e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x5e>
  20795c:	eb b0                	jmp    20790e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0xe>
                cpu_relax();
  20795e:	e8 0d b2 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207963:	eb d7                	jmp    20793c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x3c>
  207965:	cc                   	int3   
  207966:	cc                   	int3   
  207967:	cc                   	int3   
  207968:	cc                   	int3   
  207969:	cc                   	int3   
  20796a:	cc                   	int3   
  20796b:	cc                   	int3   
  20796c:	cc                   	int3   
  20796d:	cc                   	int3   
  20796e:	cc                   	int3   
  20796f:	cc                   	int3   

0000000000207970 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE>:
    fn obtain_lock(&self)
  207970:	48 83 ec 28          	sub    $0x28,%rsp
  207974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207979:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20797e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  207983:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  207988:	31 f6                	xor    %esi,%esi
  20798a:	ba 01 00 00 00       	mov    $0x1,%edx
  20798f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  207994:	e8 c7 ad 00 00       	callq  212760 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  207999:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20799d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2079a1:	a8 01                	test   $0x1,%al
  2079a3:	75 07                	jne    2079ac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x3c>
  2079a5:	eb 00                	jmp    2079a7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x37>
    }
  2079a7:	48 83 c4 28          	add    $0x28,%rsp
  2079ab:	c3                   	retq   
  2079ac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  2079b1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  2079b6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  2079bb:	e8 70 af 00 00       	callq  212930 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  2079c0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2079c4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2079c8:	a8 01                	test   $0x1,%al
  2079ca:	75 02                	jne    2079ce <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x5e>
  2079cc:	eb b0                	jmp    20797e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0xe>
                cpu_relax();
  2079ce:	e8 9d b1 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  2079d3:	eb d7                	jmp    2079ac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x3c>
  2079d5:	cc                   	int3   
  2079d6:	cc                   	int3   
  2079d7:	cc                   	int3   
  2079d8:	cc                   	int3   
  2079d9:	cc                   	int3   
  2079da:	cc                   	int3   
  2079db:	cc                   	int3   
  2079dc:	cc                   	int3   
  2079dd:	cc                   	int3   
  2079de:	cc                   	int3   
  2079df:	cc                   	int3   

00000000002079e0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E>:
    fn obtain_lock(&self)
  2079e0:	48 83 ec 28          	sub    $0x28,%rsp
  2079e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2079e9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2079ee:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  2079f3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  2079f8:	31 f6                	xor    %esi,%esi
  2079fa:	ba 01 00 00 00       	mov    $0x1,%edx
  2079ff:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  207a04:	e8 57 ad 00 00       	callq  212760 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  207a09:	88 44 24 0f          	mov    %al,0xf(%rsp)
  207a0d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  207a11:	a8 01                	test   $0x1,%al
  207a13:	75 07                	jne    207a1c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x3c>
  207a15:	eb 00                	jmp    207a17 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x37>
    }
  207a17:	48 83 c4 28          	add    $0x28,%rsp
  207a1b:	c3                   	retq   
  207a1c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  207a21:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  207a26:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  207a2b:	e8 00 af 00 00       	callq  212930 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  207a30:	88 44 24 0e          	mov    %al,0xe(%rsp)
  207a34:	8a 44 24 0e          	mov    0xe(%rsp),%al
  207a38:	a8 01                	test   $0x1,%al
  207a3a:	75 02                	jne    207a3e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x5e>
  207a3c:	eb b0                	jmp    2079ee <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0xe>
                cpu_relax();
  207a3e:	e8 2d b1 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207a43:	eb d7                	jmp    207a1c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x3c>
  207a45:	cc                   	int3   
  207a46:	cc                   	int3   
  207a47:	cc                   	int3   
  207a48:	cc                   	int3   
  207a49:	cc                   	int3   
  207a4a:	cc                   	int3   
  207a4b:	cc                   	int3   
  207a4c:	cc                   	int3   
  207a4d:	cc                   	int3   
  207a4e:	cc                   	int3   
  207a4f:	cc                   	int3   

0000000000207a50 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E>:
    fn obtain_lock(&self)
  207a50:	48 83 ec 28          	sub    $0x28,%rsp
  207a54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207a59:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207a5e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  207a63:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  207a68:	31 f6                	xor    %esi,%esi
  207a6a:	ba 01 00 00 00       	mov    $0x1,%edx
  207a6f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  207a74:	e8 e7 ac 00 00       	callq  212760 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  207a79:	88 44 24 0f          	mov    %al,0xf(%rsp)
  207a7d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  207a81:	a8 01                	test   $0x1,%al
  207a83:	75 07                	jne    207a8c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E+0x3c>
  207a85:	eb 00                	jmp    207a87 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E+0x37>
    }
  207a87:	48 83 c4 28          	add    $0x28,%rsp
  207a8b:	c3                   	retq   
  207a8c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  207a91:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  207a96:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  207a9b:	e8 90 ae 00 00       	callq  212930 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  207aa0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  207aa4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  207aa8:	a8 01                	test   $0x1,%al
  207aaa:	75 02                	jne    207aae <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E+0x5e>
  207aac:	eb b0                	jmp    207a5e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E+0xe>
                cpu_relax();
  207aae:	e8 bd b0 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207ab3:	eb d7                	jmp    207a8c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E+0x3c>
  207ab5:	cc                   	int3   
  207ab6:	cc                   	int3   
  207ab7:	cc                   	int3   
  207ab8:	cc                   	int3   
  207ab9:	cc                   	int3   
  207aba:	cc                   	int3   
  207abb:	cc                   	int3   
  207abc:	cc                   	int3   
  207abd:	cc                   	int3   
  207abe:	cc                   	int3   
  207abf:	cc                   	int3   

0000000000207ac0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1368181a5039d411E>:
    pub const fn new(user_data: T) -> Mutex<T>
  207ac0:	48 83 ec 78          	sub    $0x78,%rsp
  207ac4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  207ac9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207ace:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  207ad3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207ad8:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  207add:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
            lock: AtomicBool::new(false),
  207ae2:	31 ff                	xor    %edi,%edi
  207ae4:	e8 07 ae 00 00       	callq  2128f0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  207ae9:	88 44 24 57          	mov    %al,0x57(%rsp)
  207aed:	8a 44 24 57          	mov    0x57(%rsp),%al
  207af1:	88 44 24 38          	mov    %al,0x38(%rsp)
  207af5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207afa:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  207aff:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  207b04:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
  207b09:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207b0e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  207b13:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207b18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207b1d:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  207b22:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207b27:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207b2c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  207b31:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  207b36:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  207b3b:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  207b40:	40 88 39             	mov    %dil,(%rcx)
  207b43:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  207b47:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  207b4b:	48 83 c4 78          	add    $0x78,%rsp
  207b4f:	c3                   	retq   

0000000000207b50 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h278439292dab46e4E>:
    pub const fn new(user_data: T) -> Mutex<T>
  207b50:	48 81 ec 38 30 00 00 	sub    $0x3038,%rsp
  207b57:	48 89 34 24          	mov    %rsi,(%rsp)
  207b5b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207b60:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  207b65:	31 ff                	xor    %edi,%edi
  207b67:	e8 84 ad 00 00       	callq  2128f0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  207b6c:	88 84 24 2f 20 00 00 	mov    %al,0x202f(%rsp)
  207b73:	8a 84 24 2f 20 00 00 	mov    0x202f(%rsp),%al
  207b7a:	88 44 24 18          	mov    %al,0x18(%rsp)
  207b7e:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  207b82:	48 8d bc 24 20 10 00 	lea    0x1020(%rsp),%rdi
  207b89:	00 
  207b8a:	ba 00 10 00 00       	mov    $0x1000,%edx
  207b8f:	e8 0c 5f 01 00       	callq  21daa0 <memcpy>
        UnsafeCell { value }
  207b94:	48 8d bc 24 30 20 00 	lea    0x2030(%rsp),%rdi
  207b9b:	00 
  207b9c:	48 8d b4 24 20 10 00 	lea    0x1020(%rsp),%rsi
  207ba3:	00 
  207ba4:	ba 00 10 00 00       	mov    $0x1000,%edx
  207ba9:	e8 f2 5e 01 00       	callq  21daa0 <memcpy>
  207bae:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  207bb3:	48 8d b4 24 30 20 00 	lea    0x2030(%rsp),%rsi
  207bba:	00 
  207bbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  207bc0:	e8 db 5e 01 00       	callq  21daa0 <memcpy>
  207bc5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  207bca:	8a 44 24 18          	mov    0x18(%rsp),%al
  207bce:	88 07                	mov    %al,(%rdi)
  207bd0:	48 83 c7 10          	add    $0x10,%rdi
  207bd4:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  207bd9:	ba 00 10 00 00       	mov    $0x1000,%edx
  207bde:	e8 bd 5e 01 00       	callq  21daa0 <memcpy>
  207be3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  207be8:	48 81 c4 38 30 00 00 	add    $0x3038,%rsp
  207bef:	c3                   	retq   

0000000000207bf0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h8bbb6c38db5b36f5E>:
    pub const fn new(user_data: T) -> Mutex<T>
  207bf0:	48 83 ec 78          	sub    $0x78,%rsp
  207bf4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  207bf9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207bfe:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  207c03:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207c08:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  207c0d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
            lock: AtomicBool::new(false),
  207c12:	31 ff                	xor    %edi,%edi
  207c14:	e8 d7 ac 00 00       	callq  2128f0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  207c19:	88 44 24 57          	mov    %al,0x57(%rsp)
  207c1d:	8a 44 24 57          	mov    0x57(%rsp),%al
  207c21:	88 44 24 38          	mov    %al,0x38(%rsp)
  207c25:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207c2a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  207c2f:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  207c34:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  207c39:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207c3e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  207c43:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207c48:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207c4d:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  207c52:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207c57:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207c5c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  207c61:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  207c66:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  207c6b:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  207c70:	40 88 39             	mov    %dil,(%rcx)
  207c73:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  207c77:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  207c7b:	48 83 c4 78          	add    $0x78,%rsp
  207c7f:	c3                   	retq   

0000000000207c80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h9c67aabfb8c12465E>:
    pub const fn new(user_data: T) -> Mutex<T>
  207c80:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  207c87:	48 89 34 24          	mov    %rsi,(%rsp)
  207c8b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207c90:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  207c95:	31 ff                	xor    %edi,%edi
  207c97:	e8 54 ac 00 00       	callq  2128f0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  207c9c:	88 44 24 67          	mov    %al,0x67(%rsp)
  207ca0:	8a 44 24 67          	mov    0x67(%rsp),%al
  207ca4:	88 44 24 18          	mov    %al,0x18(%rsp)
  207ca8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  207cac:	48 8b 08             	mov    (%rax),%rcx
  207caf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  207cb4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  207cb8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  207cbd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  207cc1:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  207cc6:	48 8b 40 18          	mov    0x18(%rax),%rax
  207cca:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        UnsafeCell { value }
  207ccf:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  207cd4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  207cd9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  207cde:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  207ce3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  207ce8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  207ced:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207cf2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  207cf9:	00 
  207cfa:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  207cff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207d04:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  207d09:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207d0e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  207d13:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207d18:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  207d1f:	00 
  207d20:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207d25:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  207d2a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  207d2f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  207d33:	88 11                	mov    %dl,(%rcx)
  207d35:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207d3a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  207d3e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207d43:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  207d47:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  207d4c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  207d50:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  207d55:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  207d59:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  207d60:	c3                   	retq   
  207d61:	cc                   	int3   
  207d62:	cc                   	int3   
  207d63:	cc                   	int3   
  207d64:	cc                   	int3   
  207d65:	cc                   	int3   
  207d66:	cc                   	int3   
  207d67:	cc                   	int3   
  207d68:	cc                   	int3   
  207d69:	cc                   	int3   
  207d6a:	cc                   	int3   
  207d6b:	cc                   	int3   
  207d6c:	cc                   	int3   
  207d6d:	cc                   	int3   
  207d6e:	cc                   	int3   
  207d6f:	cc                   	int3   

0000000000207d70 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h2d82f46c320cde4bE>:
    ///     *data += 1;
    ///     // The lock is implicitly dropped
    /// }
    ///
    /// ```
    pub fn lock(&self) -> MutexGuard<T>
  207d70:	48 83 ec 38          	sub    $0x38,%rsp
  207d74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207d79:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
    {
        self.obtain_lock();
  207d7e:	e8 5d fc ff ff       	callq  2079e0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E>
  207d83:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        MutexGuard
        {
            lock: &self.lock,
  207d88:	48 89 c1             	mov    %rax,%rcx
  207d8b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  207d8f:	48 83 c0 10          	add    $0x10,%rax
  207d93:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207d98:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207d9d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207da2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  207da6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207dab:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        }
    }
  207db0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207db5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207dba:	48 83 c4 38          	add    $0x38,%rsp
  207dbe:	c3                   	retq   
  207dbf:	cc                   	int3   

0000000000207dc0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>:
    pub fn lock(&self) -> MutexGuard<T>
  207dc0:	48 83 ec 38          	sub    $0x38,%rsp
  207dc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207dc9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  207dce:	e8 9d fb ff ff       	callq  207970 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE>
  207dd3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  207dd8:	48 89 c1             	mov    %rax,%rcx
  207ddb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  207ddf:	48 83 c0 08          	add    $0x8,%rax
  207de3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207de8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207ded:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207df2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  207df6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207dfb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  207e00:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207e05:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207e0a:	48 83 c4 38          	add    $0x38,%rsp
  207e0e:	c3                   	retq   
  207e0f:	cc                   	int3   

0000000000207e10 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17ha54548437592490bE>:
    pub fn lock(&self) -> MutexGuard<T>
  207e10:	48 83 ec 38          	sub    $0x38,%rsp
  207e14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207e19:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  207e1e:	e8 2d fc ff ff       	callq  207a50 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hb28669026d5c4946E>
  207e23:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  207e28:	48 89 c1             	mov    %rax,%rcx
  207e2b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  207e2f:	48 83 c0 08          	add    $0x8,%rax
  207e33:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207e38:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207e3d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207e42:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  207e46:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207e4b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  207e50:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207e55:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207e5a:	48 83 c4 38          	add    $0x38,%rsp
  207e5e:	c3                   	retq   
  207e5f:	cc                   	int3   

0000000000207e60 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec36eaefd6fec6a2E>:
    pub fn lock(&self) -> MutexGuard<T>
  207e60:	48 83 ec 38          	sub    $0x38,%rsp
  207e64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207e69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  207e6e:	e8 8d fa ff ff       	callq  207900 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE>
  207e73:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  207e78:	48 89 c1             	mov    %rax,%rcx
  207e7b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  207e7f:	48 83 c0 08          	add    $0x8,%rax
  207e83:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207e88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207e8d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207e92:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  207e96:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207e9b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  207ea0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207ea5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207eaa:	48 83 c4 38          	add    $0x38,%rsp
  207eae:	c3                   	retq   
  207eaf:	cc                   	int3   

0000000000207eb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6438e4ee6feea27dE>:
}

impl<'a, T: ?Sized> Deref for MutexGuard<'a, T>
{
    type Target = T;
    fn deref<'b>(&'b self) -> &'b T { &*self.data }
  207eb0:	50                   	push   %rax
  207eb1:	48 89 3c 24          	mov    %rdi,(%rsp)
  207eb5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207eb9:	59                   	pop    %rcx
  207eba:	c3                   	retq   
  207ebb:	cc                   	int3   
  207ebc:	cc                   	int3   
  207ebd:	cc                   	int3   
  207ebe:	cc                   	int3   
  207ebf:	cc                   	int3   

0000000000207ec0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h66d1d1f3c105c8a0E>:
  207ec0:	50                   	push   %rax
  207ec1:	48 89 3c 24          	mov    %rdi,(%rsp)
  207ec5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207ec9:	59                   	pop    %rcx
  207eca:	c3                   	retq   
  207ecb:	cc                   	int3   
  207ecc:	cc                   	int3   
  207ecd:	cc                   	int3   
  207ece:	cc                   	int3   
  207ecf:	cc                   	int3   

0000000000207ed0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e8efa7287244e89E>:
  207ed0:	50                   	push   %rax
  207ed1:	48 89 3c 24          	mov    %rdi,(%rsp)
  207ed5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207ed9:	59                   	pop    %rcx
  207eda:	c3                   	retq   
  207edb:	cc                   	int3   
  207edc:	cc                   	int3   
  207edd:	cc                   	int3   
  207ede:	cc                   	int3   
  207edf:	cc                   	int3   

0000000000207ee0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776941560deab6E>:
}

impl<'a, T: ?Sized> DerefMut for MutexGuard<'a, T>
{
    fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
  207ee0:	50                   	push   %rax
  207ee1:	48 89 3c 24          	mov    %rdi,(%rsp)
  207ee5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207ee9:	59                   	pop    %rcx
  207eea:	c3                   	retq   
  207eeb:	cc                   	int3   
  207eec:	cc                   	int3   
  207eed:	cc                   	int3   
  207eee:	cc                   	int3   
  207eef:	cc                   	int3   

0000000000207ef0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4527adcfa9d432c1E>:
  207ef0:	50                   	push   %rax
  207ef1:	48 89 3c 24          	mov    %rdi,(%rsp)
  207ef5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207ef9:	59                   	pop    %rcx
  207efa:	c3                   	retq   
  207efb:	cc                   	int3   
  207efc:	cc                   	int3   
  207efd:	cc                   	int3   
  207efe:	cc                   	int3   
  207eff:	cc                   	int3   

0000000000207f00 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h54ef8133560726b4E>:
  207f00:	50                   	push   %rax
  207f01:	48 89 3c 24          	mov    %rdi,(%rsp)
  207f05:	48 8b 47 08          	mov    0x8(%rdi),%rax
  207f09:	59                   	pop    %rcx
  207f0a:	c3                   	retq   
  207f0b:	cc                   	int3   
  207f0c:	cc                   	int3   
  207f0d:	cc                   	int3   
  207f0e:	cc                   	int3   
  207f0f:	cc                   	int3   

0000000000207f10 <_ZN4core3fmt5Write10write_char17h9bab67b7f6efb3c7E>:
    fn write_char(&mut self, c: char) -> Result {
  207f10:	48 83 ec 48          	sub    $0x48,%rsp
  207f14:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  207f18:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207f1d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  207f22:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  207f26:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  207f2b:	31 f6                	xor    %esi,%esi
  207f2d:	ba 04 00 00 00       	mov    $0x4,%edx
  207f32:	e8 89 5b 01 00       	callq  21dac0 <memset>
  207f37:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  207f3b:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  207f40:	ba 04 00 00 00       	mov    $0x4,%edx
  207f45:	e8 36 96 00 00       	callq  211580 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817ha8814ecebb05de4fE>
  207f4a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207f4f:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207f54:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207f59:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207f5e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  207f63:	e8 e8 9a 00 00       	callq  211a50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>
  207f68:	88 44 24 0f          	mov    %al,0xf(%rsp)
  207f6c:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  207f70:	24 01                	and    $0x1,%al
  207f72:	0f b6 c0             	movzbl %al,%eax
  207f75:	48 83 c4 48          	add    $0x48,%rsp
  207f79:	c3                   	retq   
  207f7a:	cc                   	int3   
  207f7b:	cc                   	int3   
  207f7c:	cc                   	int3   
  207f7d:	cc                   	int3   
  207f7e:	cc                   	int3   
  207f7f:	cc                   	int3   

0000000000207f80 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  207f80:	48 83 ec 48          	sub    $0x48,%rsp
  207f84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  207f89:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  207f8e:	48 89 04 24          	mov    %rax,(%rsp)
  207f92:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  207f97:	ba 30 00 00 00       	mov    $0x30,%edx
  207f9c:	e8 ff 5a 01 00       	callq  21daa0 <memcpy>
  207fa1:	48 8b 3c 24          	mov    (%rsp),%rdi
  207fa5:	48 8d 35 24 71 01 00 	lea    0x17124(%rip),%rsi        # 21f0d0 <memset+0x1610>
  207fac:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  207fb1:	e8 2a 45 01 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  207fb6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  207fba:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  207fbe:	24 01                	and    $0x1,%al
  207fc0:	0f b6 c0             	movzbl %al,%eax
  207fc3:	48 83 c4 48          	add    $0x48,%rsp
  207fc7:	c3                   	retq   
  207fc8:	cc                   	int3   
  207fc9:	cc                   	int3   
  207fca:	cc                   	int3   
  207fcb:	cc                   	int3   
  207fcc:	cc                   	int3   
  207fcd:	cc                   	int3   
  207fce:	cc                   	int3   
  207fcf:	cc                   	int3   

0000000000207fd0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hf2c80c0b89e9db1aE>:
    fn write_char(&mut self, c: char) -> Result {
  207fd0:	48 83 ec 18          	sub    $0x18,%rsp
  207fd4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207fd9:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  207fdd:	48 8b 3f             	mov    (%rdi),%rdi
  207fe0:	e8 2b ff ff ff       	callq  207f10 <_ZN4core3fmt5Write10write_char17h9bab67b7f6efb3c7E>
  207fe5:	88 44 24 07          	mov    %al,0x7(%rsp)
  207fe9:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  207fed:	24 01                	and    $0x1,%al
  207fef:	0f b6 c0             	movzbl %al,%eax
  207ff2:	48 83 c4 18          	add    $0x18,%rsp
  207ff6:	c3                   	retq   
  207ff7:	cc                   	int3   
  207ff8:	cc                   	int3   
  207ff9:	cc                   	int3   
  207ffa:	cc                   	int3   
  207ffb:	cc                   	int3   
  207ffc:	cc                   	int3   
  207ffd:	cc                   	int3   
  207ffe:	cc                   	int3   
  207fff:	cc                   	int3   

0000000000208000 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h1a9ff4cd2b830013E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  208000:	48 83 ec 48          	sub    $0x48,%rsp
  208004:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  208009:	48 8b 07             	mov    (%rdi),%rax
  20800c:	48 89 04 24          	mov    %rax,(%rsp)
  208010:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  208015:	ba 30 00 00 00       	mov    $0x30,%edx
  20801a:	e8 81 5a 01 00       	callq  21daa0 <memcpy>
  20801f:	48 8b 3c 24          	mov    (%rsp),%rdi
  208023:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  208028:	e8 53 ff ff ff       	callq  207f80 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>
  20802d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  208031:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  208035:	24 01                	and    $0x1,%al
  208037:	0f b6 c0             	movzbl %al,%eax
  20803a:	48 83 c4 48          	add    $0x48,%rsp
  20803e:	c3                   	retq   
  20803f:	cc                   	int3   

0000000000208040 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5f230e53c2aa2cf4E>:
    fn write_str(&mut self, s: &str) -> Result {
  208040:	48 83 ec 28          	sub    $0x28,%rsp
  208044:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  208049:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20804e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  208053:	48 8b 3f             	mov    (%rdi),%rdi
  208056:	e8 f5 99 00 00       	callq  211a50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>
  20805b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20805f:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  208063:	24 01                	and    $0x1,%al
  208065:	0f b6 c0             	movzbl %al,%eax
  208068:	48 83 c4 28          	add    $0x28,%rsp
  20806c:	c3                   	retq   
  20806d:	cc                   	int3   
  20806e:	cc                   	int3   
  20806f:	cc                   	int3   

0000000000208070 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h7a91610591b68582E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
  208070:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  208077:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20807c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  208081:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  208086:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
  20808b:	48 01 f7             	add    %rsi,%rdi
  20808e:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  208093:	0f 92 44 24 70       	setb   0x70(%rsp)
  208098:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20809d:	8a 44 24 70          	mov    0x70(%rsp),%al
  2080a1:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  2080a6:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
            (a as Self, b)
  2080ad:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2080b2:	88 44 24 50          	mov    %al,0x50(%rsp)
        }
  2080b6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2080bb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2080c0:	8a 44 24 50          	mov    0x50(%rsp),%al
  2080c4:	88 44 24 17          	mov    %al,0x17(%rsp)
  2080c8:	8a 44 24 17          	mov    0x17(%rsp),%al
  2080cc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            let (a, b) = self.overflowing_add(rhs);
  2080d1:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2080d6:	88 c1                	mov    %al,%cl
  2080d8:	80 e1 01             	and    $0x1,%cl
  2080db:	88 4c 24 46          	mov    %cl,0x46(%rsp)
            if unlikely!(b) {None} else {Some(a)}
  2080df:	24 01                	and    $0x1,%al
  2080e1:	88 44 24 47          	mov    %al,0x47(%rsp)
  2080e5:	8a 44 24 47          	mov    0x47(%rsp),%al
  2080e9:	88 44 24 07          	mov    %al,0x7(%rsp)
  2080ed:	8a 44 24 07          	mov    0x7(%rsp),%al
  2080f1:	a8 01                	test   $0x1,%al
  2080f3:	75 17                	jne    20810c <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h7a91610591b68582E+0x9c>
  2080f5:	eb 00                	jmp    2080f7 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h7a91610591b68582E+0x87>
  2080f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2080fc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208101:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  208108:	00 00 
  20810a:	eb 09                	jmp    208115 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h7a91610591b68582E+0xa5>
  20810c:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  208113:	00 00 
        }
  208115:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20811a:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20811f:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  208126:	c3                   	retq   
  208127:	cc                   	int3   
  208128:	cc                   	int3   
  208129:	cc                   	int3   
  20812a:	cc                   	int3   
  20812b:	cc                   	int3   
  20812c:	cc                   	int3   
  20812d:	cc                   	int3   
  20812e:	cc                   	int3   
  20812f:	cc                   	int3   

0000000000208130 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  208130:	48 83 ec 38          	sub    $0x38,%rsp
  208134:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  208139:	48 89 f8             	mov    %rdi,%rax
  20813c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  208141:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208146:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20814b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  208150:	e8 9b 4d 01 00       	callq  21cef0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  208155:	88 44 24 26          	mov    %al,0x26(%rsp)
  208159:	8a 44 24 26          	mov    0x26(%rsp),%al
  20815d:	a8 01                	test   $0x1,%al
  20815f:	75 12                	jne    208173 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x43>
  208161:	eb 00                	jmp    208163 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x33>
  208163:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
  208168:	e8 93 4d 01 00       	callq  21cf00 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20816d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  208171:	eb 25                	jmp    208198 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x68>
  208173:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  208178:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20817d:	e8 0e 23 01 00       	callq  21a490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  208182:	24 01                	and    $0x1,%al
  208184:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  208188:	eb 00                	jmp    20818a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x5a>
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
                }
            }
  20818a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20818e:	24 01                	and    $0x1,%al
  208190:	0f b6 c0             	movzbl %al,%eax
  208193:	48 83 c4 38          	add    $0x38,%rsp
  208197:	c3                   	retq   
  208198:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20819c:	a8 01                	test   $0x1,%al
  20819e:	75 19                	jne    2081b9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x89>
  2081a0:	eb 00                	jmp    2081a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x72>
  2081a2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2081a7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2081ac:	e8 7f 3d 01 00       	callq  21bf30 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  2081b1:	24 01                	and    $0x1,%al
  2081b3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2081b7:	eb 19                	jmp    2081d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa2>
  2081b9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2081be:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  2081c3:	e8 68 23 01 00       	callq  21a530 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  2081c8:	24 01                	and    $0x1,%al
  2081ca:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  2081ce:	eb 00                	jmp    2081d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa0>
                if f.debug_lower_hex() {
  2081d0:	eb b8                	jmp    20818a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x5a>
                } else if f.debug_upper_hex() {
  2081d2:	eb fc                	jmp    2081d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa0>
  2081d4:	cc                   	int3   
  2081d5:	cc                   	int3   
  2081d6:	cc                   	int3   
  2081d7:	cc                   	int3   
  2081d8:	cc                   	int3   
  2081d9:	cc                   	int3   
  2081da:	cc                   	int3   
  2081db:	cc                   	int3   
  2081dc:	cc                   	int3   
  2081dd:	cc                   	int3   
  2081de:	cc                   	int3   
  2081df:	cc                   	int3   

00000000002081e0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h04c8c4937b73abf4E>:
    pub fn empty() -> Self {
  2081e0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  2081e4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  2081ea:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  2081f1:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  2081f8:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  2081ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  208206:	00 
  208207:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  20820e:	00 
    }
  20820f:	48 8b 04 24          	mov    (%rsp),%rax
  208213:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208218:	48 83 c4 10          	add    $0x10,%rsp
  20821c:	c3                   	retq   
  20821d:	cc                   	int3   
  20821e:	cc                   	int3   
  20821f:	cc                   	int3   

0000000000208220 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>:
    pub fn empty() -> Self {
  208220:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  208224:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  20822a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  208231:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  208238:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  20823f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  208246:	00 
  208247:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  20824e:	00 
    }
  20824f:	48 8b 04 24          	mov    (%rsp),%rax
  208253:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208258:	48 83 c4 10          	add    $0x10,%rsp
  20825c:	c3                   	retq   
  20825d:	cc                   	int3   
  20825e:	cc                   	int3   
  20825f:	cc                   	int3   

0000000000208260 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>:
    pub fn empty() -> Self {
  208260:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  208264:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  20826a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  208271:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  208278:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  20827f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  208286:	00 
  208287:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  20828e:	00 
    }
  20828f:	48 8b 04 24          	mov    (%rsp),%rax
  208293:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208298:	48 83 c4 10          	add    $0x10,%rsp
  20829c:	c3                   	retq   
  20829d:	cc                   	int3   
  20829e:	cc                   	int3   
  20829f:	cc                   	int3   

00000000002082a0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>:
    pub fn empty() -> Self {
  2082a0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  2082a4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  2082aa:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  2082b1:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  2082b8:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  2082bf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  2082c6:	00 
  2082c7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  2082ce:	00 
    }
  2082cf:	48 8b 04 24          	mov    (%rsp),%rax
  2082d3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2082d8:	48 83 c4 10          	add    $0x10,%rsp
  2082dc:	c3                   	retq   
  2082dd:	cc                   	int3   
  2082de:	cc                   	int3   
  2082df:	cc                   	int3   

00000000002082e0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h7f8161d063dd0582E>:
    fn read_cs(&self) -> u16 {
  2082e0:	48 83 ec 18          	sub    $0x18,%rsp
  2082e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  2082e9:	48 8d 3d 2d 84 ff ff 	lea    -0x7bd3(%rip),%rdi        # 20071d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  2082f0:	e8 3b ba ff ff       	callq  203d30 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  2082f5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2082fa:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  2082ff:	48 83 c4 18          	add    $0x18,%rsp
  208303:	c3                   	retq   
  208304:	cc                   	int3   
  208305:	cc                   	int3   
  208306:	cc                   	int3   
  208307:	cc                   	int3   
  208308:	cc                   	int3   
  208309:	cc                   	int3   
  20830a:	cc                   	int3   
  20830b:	cc                   	int3   
  20830c:	cc                   	int3   
  20830d:	cc                   	int3   
  20830e:	cc                   	int3   
  20830f:	cc                   	int3   

0000000000208310 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hb4e7d55b73862266E>:
    fn read_cs(&self) -> u16 {
  208310:	48 83 ec 18          	sub    $0x18,%rsp
  208314:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  208319:	48 8d 3d fd 83 ff ff 	lea    -0x7c03(%rip),%rdi        # 20071d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  208320:	e8 0b ba ff ff       	callq  203d30 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  208325:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  20832a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  20832f:	48 83 c4 18          	add    $0x18,%rsp
  208333:	c3                   	retq   
  208334:	cc                   	int3   
  208335:	cc                   	int3   
  208336:	cc                   	int3   
  208337:	cc                   	int3   
  208338:	cc                   	int3   
  208339:	cc                   	int3   
  20833a:	cc                   	int3   
  20833b:	cc                   	int3   
  20833c:	cc                   	int3   
  20833d:	cc                   	int3   
  20833e:	cc                   	int3   
  20833f:	cc                   	int3   

0000000000208340 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h5f5959c61bee202dE>:
    fn set_pointers(&mut self, addr: u64) {
  208340:	48 83 ec 30          	sub    $0x30,%rsp
  208344:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  208349:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20834e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  208353:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  208358:	48 89 f0             	mov    %rsi,%rax
  20835b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  208361:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  208364:	48 c1 ee 10          	shr    $0x10,%rsi
  208368:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20836d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208372:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  208377:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20837c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  208383:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  208387:	48 c1 e8 20          	shr    $0x20,%rax
  20838b:	48 89 04 24          	mov    %rax,(%rsp)
  20838f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208394:	48 8b 0c 24          	mov    (%rsp),%rcx
  208398:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  20839f:	00 00 00 
  2083a2:	48 21 d1             	and    %rdx,%rcx
  2083a5:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  2083a8:	48 83 c4 30          	add    $0x30,%rsp
  2083ac:	c3                   	retq   
  2083ad:	cc                   	int3   
  2083ae:	cc                   	int3   
  2083af:	cc                   	int3   

00000000002083b0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17hdf329a675328a8f5E>:
    fn set_pointers(&mut self, addr: u64) {
  2083b0:	48 83 ec 30          	sub    $0x30,%rsp
  2083b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2083b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2083be:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2083c3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  2083c8:	48 89 f0             	mov    %rsi,%rax
  2083cb:	48 25 ff ff 00 00    	and    $0xffff,%rax
  2083d1:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  2083d4:	48 c1 ee 10          	shr    $0x10,%rsi
  2083d8:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2083dd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2083e2:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2083e7:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2083ec:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  2083f3:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  2083f7:	48 c1 e8 20          	shr    $0x20,%rax
  2083fb:	48 89 04 24          	mov    %rax,(%rsp)
  2083ff:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208404:	48 8b 0c 24          	mov    (%rsp),%rcx
  208408:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  20840f:	00 00 00 
  208412:	48 21 d1             	and    %rdx,%rcx
  208415:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  208418:	48 83 c4 30          	add    $0x30,%rsp
  20841c:	c3                   	retq   
  20841d:	cc                   	int3   
  20841e:	cc                   	int3   
  20841f:	cc                   	int3   

0000000000208420 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h87df60b3140f4d6eE>:
    pub fn set_handler(&mut self, handler_address: u64) {
  208420:	48 83 ec 28          	sub    $0x28,%rsp
  208424:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  208429:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20842e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  208433:	e8 08 ff ff ff       	callq  208340 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h5f5959c61bee202dE>
  208438:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  20843d:	e8 ce fe ff ff       	callq  208310 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hb4e7d55b73862266E>
  208442:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  208447:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20844c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  208451:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  208455:	48 83 c7 04          	add    $0x4,%rdi
  208459:	be 0f 00 00 00       	mov    $0xf,%esi
  20845e:	ba 01 00 00 00       	mov    $0x1,%edx
  208463:	e8 98 b6 ff ff       	callq  203b00 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>
    }
  208468:	48 83 c4 28          	add    $0x28,%rsp
  20846c:	c3                   	retq   
  20846d:	cc                   	int3   
  20846e:	cc                   	int3   
  20846f:	cc                   	int3   

0000000000208470 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf33eac12f7d04705E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  208470:	48 83 ec 28          	sub    $0x28,%rsp
  208474:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  208479:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20847e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  208483:	e8 28 ff ff ff       	callq  2083b0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17hdf329a675328a8f5E>
  208488:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  20848d:	e8 4e fe ff ff       	callq  2082e0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h7f8161d063dd0582E>
  208492:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  208497:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20849c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  2084a1:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  2084a5:	48 83 c7 04          	add    $0x4,%rdi
  2084a9:	be 0f 00 00 00       	mov    $0xf,%esi
  2084ae:	ba 01 00 00 00       	mov    $0x1,%edx
  2084b3:	e8 48 b6 ff ff       	callq  203b00 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>
    }
  2084b8:	48 83 c4 28          	add    $0x28,%rsp
  2084bc:	c3                   	retq   
  2084bd:	cc                   	int3   
  2084be:	cc                   	int3   
  2084bf:	cc                   	int3   

00000000002084c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E>:
    pub fn set_stack_index(&mut self, stack_index: u16) {
  2084c0:	48 83 ec 38          	sub    $0x38,%rsp
  2084c4:	66 89 f0             	mov    %si,%ax
  2084c7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2084cc:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
        self.options.set_bits(0..3, stack_index + 1);
  2084d1:	48 83 c7 04          	add    $0x4,%rdi
  2084d5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2084da:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  2084e1:	00 00 
  2084e3:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  2084ea:	00 00 
  2084ec:	66 83 c0 01          	add    $0x1,%ax
  2084f0:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  2084f5:	0f 92 c0             	setb   %al
  2084f8:	a8 01                	test   $0x1,%al
  2084fa:	75 1e                	jne    20851a <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E+0x5a>
  2084fc:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
  208501:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  208506:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20850b:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  208510:	0f b7 c8             	movzwl %ax,%ecx
  208513:	e8 f8 20 00 00       	callq  20a610 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE>
  208518:	eb 1a                	jmp    208534 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E+0x74>
  20851a:	48 8d 3d 1f 82 ff ff 	lea    -0x7de1(%rip),%rdi        # 200740 <str.0>
  208521:	48 8d 15 d8 6b 01 00 	lea    0x16bd8(%rip),%rdx        # 21f100 <memset+0x1640>
  208528:	be 1c 00 00 00       	mov    $0x1c,%esi
  20852d:	e8 fe 2a 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208532:	0f 0b                	ud2    
    }
  208534:	48 83 c4 38          	add    $0x38,%rsp
  208538:	c3                   	retq   
  208539:	cc                   	int3   
  20853a:	cc                   	int3   
  20853b:	cc                   	int3   
  20853c:	cc                   	int3   
  20853d:	cc                   	int3   
  20853e:	cc                   	int3   
  20853f:	cc                   	int3   

0000000000208540 <_ZN4core3ops8function5impls79_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$8call_mut17h931094c9fc917d52E>:
    #[stable(feature = "rust1", since = "1.0.0")]
    impl<A, F: ?Sized> FnMut<A> for &mut F
    where
        F: FnMut<A>,
    {
        extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
  208540:	48 83 ec 18          	sub    $0x18,%rsp
  208544:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  208549:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            (*self).call_mut(args)
  20854e:	48 8b 3f             	mov    (%rdi),%rdi
  208551:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  208556:	e8 d5 00 00 00       	callq  208630 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE>
  20855b:	88 44 24 07          	mov    %al,0x7(%rsp)
  20855f:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  208563:	24 01                	and    $0x1,%al
  208565:	0f b6 c0             	movzbl %al,%eax
  208568:	48 83 c4 18          	add    $0x18,%rsp
  20856c:	c3                   	retq   
  20856d:	cc                   	int3   
  20856e:	cc                   	int3   
  20856f:	cc                   	int3   

0000000000208570 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h13c8dddacef8790bE>:
    impl<A, F: ?Sized> FnOnce<A> for &mut F
    where
        F: FnMut<A>,
    {
        type Output = F::Output;
        extern "rust-call" fn call_once(self, args: A) -> F::Output {
  208570:	48 83 ec 28          	sub    $0x28,%rsp
  208574:	48 89 f8             	mov    %rdi,%rax
  208577:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20857c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  208581:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  208586:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
            (*self).call_mut(args)
  20858b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  208590:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  208595:	e8 96 02 00 00       	callq  208830 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17hc1527759758b0c66E>
  20859a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        }
  20859f:	48 83 c4 28          	add    $0x28,%rsp
  2085a3:	c3                   	retq   
  2085a4:	cc                   	int3   
  2085a5:	cc                   	int3   
  2085a6:	cc                   	int3   
  2085a7:	cc                   	int3   
  2085a8:	cc                   	int3   
  2085a9:	cc                   	int3   
  2085aa:	cc                   	int3   
  2085ab:	cc                   	int3   
  2085ac:	cc                   	int3   
  2085ad:	cc                   	int3   
  2085ae:	cc                   	int3   
  2085af:	cc                   	int3   

00000000002085b0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h870438385a9a49c5E>:
        extern "rust-call" fn call_once(self, args: A) -> F::Output {
  2085b0:	48 83 ec 28          	sub    $0x28,%rsp
  2085b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2085b9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            (*self).call_mut(args)
  2085be:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2085c3:	e8 c8 02 00 00       	callq  208890 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h7ba1383d1f9617e4E>
  2085c8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2085cd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2085d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        }
  2085d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2085dc:	48 83 c4 28          	add    $0x28,%rsp
  2085e0:	c3                   	retq   
  2085e1:	cc                   	int3   
  2085e2:	cc                   	int3   
  2085e3:	cc                   	int3   
  2085e4:	cc                   	int3   
  2085e5:	cc                   	int3   
  2085e6:	cc                   	int3   
  2085e7:	cc                   	int3   
  2085e8:	cc                   	int3   
  2085e9:	cc                   	int3   
  2085ea:	cc                   	int3   
  2085eb:	cc                   	int3   
  2085ec:	cc                   	int3   
  2085ed:	cc                   	int3   
  2085ee:	cc                   	int3   
  2085ef:	cc                   	int3   

00000000002085f0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h9c618108d69c2798E>:
        extern "rust-call" fn call_once(self, args: A) -> F::Output {
  2085f0:	48 83 ec 28          	sub    $0x28,%rsp
  2085f4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2085f9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
            (*self).call_mut(args)
  2085fe:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  208603:	e8 f8 01 00 00       	callq  208800 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17he672b266d120da8fE>
  208608:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20860d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  208612:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  208617:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        }
  20861c:	48 83 c4 28          	add    $0x28,%rsp
  208620:	c3                   	retq   
  208621:	cc                   	int3   
  208622:	cc                   	int3   
  208623:	cc                   	int3   
  208624:	cc                   	int3   
  208625:	cc                   	int3   
  208626:	cc                   	int3   
  208627:	cc                   	int3   
  208628:	cc                   	int3   
  208629:	cc                   	int3   
  20862a:	cc                   	int3   
  20862b:	cc                   	int3   
  20862c:	cc                   	int3   
  20862d:	cc                   	int3   
  20862e:	cc                   	int3   
  20862f:	cc                   	int3   

0000000000208630 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE>:
    fn create_iterator(&self) -> impl Iterator<Item = Frame> {
        let memory_regions: &MemoryRegions = unsafe { &*self.memory_regions.get_ptr() };

        let region_iterator = memory_regions.iter();
        let usable_regions_iter =
            region_iterator.filter(|region| {
  208630:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  208637:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20863c:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  208643:	00 
  208644:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  20864b:	00 
                if region.kind == MemoryRegionKind::Usable {
  20864c:	48 8b 3e             	mov    (%rsi),%rdi
  20864f:	48 83 c7 10          	add    $0x10,%rdi
  208653:	48 8d 35 f6 7c ff ff 	lea    -0x830a(%rip),%rsi        # 200350 <str.0+0x50>
  20865a:	e8 71 c9 ff ff       	callq  204fd0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h07a9f31251420a84E>
  20865f:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  208663:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  208667:	a8 01                	test   $0x1,%al
  208669:	75 0c                	jne    208677 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x47>
  20866b:	eb 00                	jmp    20866d <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x3d>
                    log::debug!("Usable region start=0x{:x}, end=0x{:x}", region.start, region.end);
                    return true;
                }

                false
  20866d:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
            });
  208672:	e9 72 01 00 00       	jmpq   2087e9 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x1b9>
                    log::debug!("Usable region start=0x{:x}, end=0x{:x}", region.start, region.end);
  208677:	48 c7 44 24 40 04 00 	movq   $0x4,0x40(%rsp)
  20867e:	00 00 
  208680:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  208685:	48 8d 35 cc 7c ff ff 	lea    -0x8334(%rip),%rsi        # 200358 <str.0+0x58>
  20868c:	e8 cf d6 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  208691:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  208695:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  208699:	a8 01                	test   $0x1,%al
  20869b:	75 09                	jne    2086a6 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x76>
  20869d:	eb 00                	jmp    20869f <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x6f>
  20869f:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  2086a4:	eb 4e                	jmp    2086f4 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0xc4>
  2086a6:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  2086ad:	00 
  2086ae:	48 8b 3d eb 80 01 00 	mov    0x180eb(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2086b5:	0f b6 b4 24 df 00 00 	movzbl 0xdf(%rsp),%esi
  2086bc:	00 
  2086bd:	e8 2e a4 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2086c2:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2086c9:	00 
  2086ca:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  2086d1:	00 
  2086d2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2086d7:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2086dc:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  2086e1:	e8 7a d6 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2086e6:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  2086ea:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  2086ee:	24 01                	and    $0x1,%al
  2086f0:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  2086f4:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  2086f9:	75 0a                	jne    208705 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0xd5>
                    return true;
  2086fb:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
            });
  208700:	e9 e4 00 00 00       	jmpq   2087e9 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0x1b9>
  208705:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                    log::debug!("Usable region start=0x{:x}, end=0x{:x}", region.start, region.end);
  20870a:	48 8b 08             	mov    (%rax),%rcx
  20870d:	48 8b 00             	mov    (%rax),%rax
  208710:	48 83 c0 08          	add    $0x8,%rax
  208714:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  20871b:	00 
  20871c:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  208723:	00 
  208724:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  20872b:	00 
  20872c:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  208733:	00 
  208734:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20873b:	00 
  20873c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208741:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  208748:	00 
  208749:	48 8b 35 58 80 01 00 	mov    0x18058(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  208750:	e8 fb b0 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  208755:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20875a:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20875f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  208764:	48 8b 35 3d 80 01 00 	mov    0x1803d(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20876b:	e8 e0 b0 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  208770:	48 89 04 24          	mov    %rax,(%rsp)
  208774:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  208779:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20877e:	48 8b 0c 24          	mov    (%rsp),%rcx
  208782:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  208787:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20878c:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  208793:	00 
  208794:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  20879b:	00 
  20879c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2087a3:	00 
  2087a4:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2087ab:	00 
  2087ac:	48 8d 8c 24 88 00 00 	lea    0x88(%rsp),%rcx
  2087b3:	00 
  2087b4:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2087b9:	48 8d 35 58 69 01 00 	lea    0x16958(%rip),%rsi        # 21f118 <memset+0x1658>
  2087c0:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2087c6:	4c 89 c2             	mov    %r8,%rdx
  2087c9:	e8 32 c7 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2087ce:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2087d3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2087d8:	48 8d 15 59 69 01 00 	lea    0x16959(%rip),%rdx        # 21f138 <memset+0x1678>
  2087df:	e8 2c 00 01 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2087e4:	e9 12 ff ff ff       	jmpq   2086fb <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h0f4a9a1371a6892cE+0xcb>
            });
  2087e9:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  2087ed:	24 01                	and    $0x1,%al
  2087ef:	0f b6 c0             	movzbl %al,%eax
  2087f2:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  2087f9:	c3                   	retq   
  2087fa:	cc                   	int3   
  2087fb:	cc                   	int3   
  2087fc:	cc                   	int3   
  2087fd:	cc                   	int3   
  2087fe:	cc                   	int3   
  2087ff:	cc                   	int3   

0000000000208800 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17he672b266d120da8fE>:

        let address_range_iter = usable_regions_iter.map(|region| region.start..region.end);
  208800:	48 83 ec 20          	sub    $0x20,%rsp
  208804:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  208809:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20880e:	48 8b 0e             	mov    (%rsi),%rcx
  208811:	48 8b 46 08          	mov    0x8(%rsi),%rax
  208815:	48 89 0c 24          	mov    %rcx,(%rsp)
  208819:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20881e:	48 8b 04 24          	mov    (%rsp),%rax
  208822:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208827:	48 83 c4 20          	add    $0x20,%rsp
  20882b:	c3                   	retq   
  20882c:	cc                   	int3   
  20882d:	cc                   	int3   
  20882e:	cc                   	int3   
  20882f:	cc                   	int3   

0000000000208830 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17hc1527759758b0c66E>:

        let frame_aligned_addresses =
            address_range_iter.flat_map(|addr| addr.step_by(PageSize::Page4KiB.size() as usize));
  208830:	48 83 ec 48          	sub    $0x48,%rsp
  208834:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  208839:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20883e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  208843:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  208848:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20884d:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  208852:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  208857:	48 8d 3d 33 7f ff ff 	lea    -0x80cd(%rip),%rdi        # 200791 <str.0+0x51>
  20885e:	e8 cd d4 00 00       	callq  215d30 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E>
  208863:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208868:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20886d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208872:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  208877:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20887c:	e8 8f 85 00 00       	callq  210e10 <_ZN4core4iter6traits8iterator8Iterator7step_by17h461eab30fe130befE>
  208881:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208886:	48 83 c4 48          	add    $0x48,%rsp
  20888a:	c3                   	retq   
  20888b:	cc                   	int3   
  20888c:	cc                   	int3   
  20888d:	cc                   	int3   
  20888e:	cc                   	int3   
  20888f:	cc                   	int3   

0000000000208890 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator28_$u7b$$u7b$closure$u7d$$u7d$17h7ba1383d1f9617e4E>:

        // convert into Iterator<Frame> type:
        let frame_iterator = frame_aligned_addresses
            .map(|frame_addr| Frame::from_address(mm::PhysicalAddress::from_u64(frame_addr)));
  208890:	48 83 ec 38          	sub    $0x38,%rsp
  208894:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  208899:	48 89 f8             	mov    %rdi,%rax
  20889c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2088a1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2088a6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2088ab:	e8 d0 b9 00 00       	callq  214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>
  2088b0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2088b5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2088ba:	e8 21 b2 00 00       	callq  213ae0 <_ZN9r3_kernel2mm3phy5Frame12from_address17h032ea06d605e4009E>
  2088bf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2088c4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2088c9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2088ce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2088d3:	48 83 c4 38          	add    $0x38,%rsp
  2088d7:	c3                   	retq   
  2088d8:	cc                   	int3   
  2088d9:	cc                   	int3   
  2088da:	cc                   	int3   
  2088db:	cc                   	int3   
  2088dc:	cc                   	int3   
  2088dd:	cc                   	int3   
  2088de:	cc                   	int3   
  2088df:	cc                   	int3   

00000000002088e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2088e0:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  2088e7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2088ec:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  2088f3:	00 
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
  2088f4:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  2088fb:	00 
  2088fc:	c6 84 24 3f 01 00 00 	movb   $0x1,0x13f(%rsp)
  208903:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208904:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208909:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20890e:	e8 dd a1 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208913:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208918:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20891e:	74 29                	je     208949 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x69>
            match status {
  208920:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208925:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20892a:	48 83 e8 03          	sub    $0x3,%rax
  20892e:	0f 87 15 01 00 00    	ja     208a49 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x169>
  208934:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208939:	48 8d 0d 54 7e ff ff 	lea    -0x81ac(%rip),%rcx        # 200794 <str.0+0x54>
  208940:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208944:	48 01 c8             	add    %rcx,%rax
  208947:	ff e0                	jmpq   *%rax
  208949:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20894e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208953:	31 c0                	xor    %eax,%eax
  208955:	89 c6                	mov    %eax,%esi
  208957:	ba 01 00 00 00       	mov    $0x1,%edx
  20895c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208961:	e8 6a a0 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  208966:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20896b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208970:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208975:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20897b:	75 a3                	jne    208920 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x40>
  20897d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208982:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208987:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20898c:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  208993:	00 
  208994:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  20899b:	00 
  20899c:	e8 3f f1 00 00       	callq  217ae0 <_ZN4core3ops8function6FnOnce9call_once17h9f4a139d2a8e95dbE>
  2089a1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2089a6:	48 83 c7 01          	add    $0x1,%rdi
  2089aa:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  2089b1:	00 
  2089b2:	ba 68 00 00 00       	mov    $0x68,%edx
  2089b7:	e8 e4 50 01 00       	callq  21daa0 <memcpy>
  2089bc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2089c1:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  2089c6:	48 83 c0 08          	add    $0x8,%rax
  2089ca:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2089d1:	00 
  2089d2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2089d7:	eb 00                	jmp    2089d9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0xf9>
  2089d9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2089de:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2089e3:	ba 69 00 00 00       	mov    $0x69,%edx
  2089e8:	e8 b3 50 01 00       	callq  21daa0 <memcpy>
  2089ed:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2089f2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2089f7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2089fe:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208a00:	c6 84 24 3d 01 00 00 	movb   $0x4,0x13d(%rsp)
  208a07:	04 
  208a08:	be 02 00 00 00       	mov    $0x2,%esi
  208a0d:	0f b6 94 24 3d 01 00 	movzbl 0x13d(%rsp),%edx
  208a14:	00 
  208a15:	e8 16 a1 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  208a1a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208a1f:	e8 dc 10 00 00       	callq  209b00 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>
  208a24:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208a29:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208a2e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208a33:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208a38:	e8 83 f2 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
            }
        }
    }
  208a3d:	f6 84 24 3f 01 00 00 	testb  $0x1,0x13f(%rsp)
  208a44:	01 
  208a45:	75 6c                	jne    208ab3 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1d3>
  208a47:	eb 5d                	jmp    208aa6 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1c6>
                _ => unsafe { unreachable() },
  208a49:	e8 c2 d2 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  208a4e:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208a50:	48 8d 3d 24 7e ff ff 	lea    -0x81dc(%rip),%rdi        # 20087b <str.0+0x13b>
  208a57:	48 8d 15 2a 67 01 00 	lea    0x1672a(%rip),%rdx        # 21f188 <memset+0x16c8>
  208a5e:	be 28 00 00 00       	mov    $0x28,%esi
  208a63:	e8 c8 25 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a68:	0f 0b                	ud2    
                    cpu_relax();
  208a6a:	e8 01 a1 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  208a6f:	eb 44                	jmp    208ab5 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1d5>
                PANICKED => panic!("Once has panicked"),
  208a71:	48 8d 3d 9c 7d ff ff 	lea    -0x8264(%rip),%rdi        # 200814 <str.0+0xd4>
  208a78:	48 8d 15 f1 66 01 00 	lea    0x166f1(%rip),%rdx        # 21f170 <memset+0x16b0>
  208a7f:	be 11 00 00 00       	mov    $0x11,%esi
  208a84:	e8 a7 25 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a89:	0f 0b                	ud2    
  208a8b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208a90:	e8 6b 10 00 00       	callq  209b00 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>
  208a95:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208a9a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208a9f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208aa4:	eb 97                	jmp    208a3d <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x15d>
    }
  208aa6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208aab:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  208ab2:	c3                   	retq   
  208ab3:	eb f1                	jmp    208aa6 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1c6>
  208ab5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208aba:	c6 84 24 3e 01 00 00 	movb   $0x4,0x13e(%rsp)
  208ac1:	04 
  208ac2:	0f b6 b4 24 3e 01 00 	movzbl 0x13e(%rsp),%esi
  208ac9:	00 
  208aca:	e8 21 a0 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208acf:	48 89 04 24          	mov    %rax,(%rsp)
  208ad3:	48 8b 04 24          	mov    (%rsp),%rax
  208ad7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208adc:	e9 3f fe ff ff       	jmpq   208920 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x40>
  208ae1:	cc                   	int3   
  208ae2:	cc                   	int3   
  208ae3:	cc                   	int3   
  208ae4:	cc                   	int3   
  208ae5:	cc                   	int3   
  208ae6:	cc                   	int3   
  208ae7:	cc                   	int3   
  208ae8:	cc                   	int3   
  208ae9:	cc                   	int3   
  208aea:	cc                   	int3   
  208aeb:	cc                   	int3   
  208aec:	cc                   	int3   
  208aed:	cc                   	int3   
  208aee:	cc                   	int3   
  208aef:	cc                   	int3   

0000000000208af0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208af0:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  208af7:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  208afc:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  208b03:	00 
        loop {
  208b04:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  208b0b:	00 
  208b0c:	c6 84 24 cf 00 00 00 	movb   $0x1,0xcf(%rsp)
  208b13:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208b14:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  208b19:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  208b1e:	e8 cd 9f 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208b23:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  208b28:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  208b2e:	74 29                	je     208b59 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x69>
            match status {
  208b30:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  208b35:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  208b3a:	48 83 e8 03          	sub    $0x3,%rax
  208b3e:	0f 87 0c 01 00 00    	ja     208c50 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x160>
  208b44:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208b49:	48 8d 0d 54 7c ff ff 	lea    -0x83ac(%rip),%rcx        # 2007a4 <str.0+0x64>
  208b50:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208b54:	48 01 c8             	add    %rcx,%rax
  208b57:	ff e0                	jmpq   *%rax
  208b59:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  208b5e:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208b63:	31 c0                	xor    %eax,%eax
  208b65:	89 c6                	mov    %eax,%esi
  208b67:	ba 01 00 00 00       	mov    $0x1,%edx
  208b6c:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  208b71:	e8 5a 9e 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  208b76:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208b7b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208b80:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  208b85:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  208b8b:	75 a3                	jne    208b30 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x40>
  208b8d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208b92:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  208b97:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208b9c:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  208ba3:	00 
  208ba4:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  208bab:	00 
  208bac:	e8 6f f0 00 00       	callq  217c20 <_ZN4core3ops8function6FnOnce9call_once17he9df15db724f2edfE>
  208bb1:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  208bb6:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  208bbd:	00 
  208bbe:	ba 30 00 00 00       	mov    $0x30,%edx
  208bc3:	e8 d8 4e 01 00       	callq  21daa0 <memcpy>
  208bc8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208bcd:	48 83 c0 08          	add    $0x8,%rax
  208bd1:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  208bd8:	00 
  208bd9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208bde:	eb 00                	jmp    208be0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0xf0>
  208be0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  208be5:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  208bea:	ba 30 00 00 00       	mov    $0x30,%edx
  208bef:	e8 ac 4e 01 00       	callq  21daa0 <memcpy>
  208bf4:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  208bf9:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  208bfe:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  208c05:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208c07:	c6 84 24 cd 00 00 00 	movb   $0x4,0xcd(%rsp)
  208c0e:	04 
  208c0f:	be 02 00 00 00       	mov    $0x2,%esi
  208c14:	0f b6 94 24 cd 00 00 	movzbl 0xcd(%rsp),%edx
  208c1b:	00 
  208c1c:	e8 0f 9f 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  208c21:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  208c26:	e8 45 10 00 00       	callq  209c70 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>
  208c2b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208c30:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  208c35:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  208c3a:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  208c3f:	e8 7c f0 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  208c44:	f6 84 24 cf 00 00 00 	testb  $0x1,0xcf(%rsp)
  208c4b:	01 
  208c4c:	75 6c                	jne    208cba <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1ca>
  208c4e:	eb 5d                	jmp    208cad <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1bd>
                _ => unsafe { unreachable() },
  208c50:	e8 bb d0 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  208c55:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208c57:	48 8d 3d 1d 7c ff ff 	lea    -0x83e3(%rip),%rdi        # 20087b <str.0+0x13b>
  208c5e:	48 8d 15 23 65 01 00 	lea    0x16523(%rip),%rdx        # 21f188 <memset+0x16c8>
  208c65:	be 28 00 00 00       	mov    $0x28,%esi
  208c6a:	e8 c1 23 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c6f:	0f 0b                	ud2    
                    cpu_relax();
  208c71:	e8 fa 9e 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  208c76:	eb 44                	jmp    208cbc <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1cc>
                PANICKED => panic!("Once has panicked"),
  208c78:	48 8d 3d 95 7b ff ff 	lea    -0x846b(%rip),%rdi        # 200814 <str.0+0xd4>
  208c7f:	48 8d 15 ea 64 01 00 	lea    0x164ea(%rip),%rdx        # 21f170 <memset+0x16b0>
  208c86:	be 11 00 00 00       	mov    $0x11,%esi
  208c8b:	e8 a0 23 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c90:	0f 0b                	ud2    
  208c92:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208c97:	e8 d4 0f 00 00       	callq  209c70 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>
  208c9c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208ca1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208ca6:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208cab:	eb 97                	jmp    208c44 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x154>
    }
  208cad:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208cb2:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  208cb9:	c3                   	retq   
  208cba:	eb f1                	jmp    208cad <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1bd>
  208cbc:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208cc1:	c6 84 24 ce 00 00 00 	movb   $0x4,0xce(%rsp)
  208cc8:	04 
  208cc9:	0f b6 b4 24 ce 00 00 	movzbl 0xce(%rsp),%esi
  208cd0:	00 
  208cd1:	e8 1a 9e 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208cd6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208cdb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208ce0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  208ce5:	e9 46 fe ff ff       	jmpq   208b30 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x40>
  208cea:	cc                   	int3   
  208ceb:	cc                   	int3   
  208cec:	cc                   	int3   
  208ced:	cc                   	int3   
  208cee:	cc                   	int3   
  208cef:	cc                   	int3   

0000000000208cf0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208cf0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  208cf7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208cfc:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  208d03:	00 
        loop {
  208d04:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  208d0b:	00 
  208d0c:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  208d13:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208d14:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208d19:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208d1e:	e8 cd 9d 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208d23:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208d28:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208d2e:	74 29                	je     208d59 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x69>
            match status {
  208d30:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208d35:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208d3a:	48 83 e8 03          	sub    $0x3,%rax
  208d3e:	0f 87 39 01 00 00    	ja     208e7d <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x18d>
  208d44:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208d49:	48 8d 0d 64 7a ff ff 	lea    -0x859c(%rip),%rcx        # 2007b4 <str.0+0x74>
  208d50:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208d54:	48 01 c8             	add    %rcx,%rax
  208d57:	ff e0                	jmpq   *%rax
  208d59:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208d5e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208d63:	31 c0                	xor    %eax,%eax
  208d65:	89 c6                	mov    %eax,%esi
  208d67:	ba 01 00 00 00       	mov    $0x1,%edx
  208d6c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208d71:	e8 5a 9c 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  208d76:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208d7b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208d80:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208d85:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208d8b:	75 a3                	jne    208d30 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x40>
  208d8d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208d92:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208d97:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208d9c:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  208da3:	00 
  208da4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  208dab:	00 
  208dac:	e8 bf ed 00 00       	callq  217b70 <_ZN4core3ops8function6FnOnce9call_once17hc3c97168e4cb6453E>
  208db1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208db6:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  208dbd:	00 
  208dbe:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208dc3:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  208dca:	00 
  208dcb:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208dd0:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  208dd7:	00 
  208dd8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  208ddd:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208de4:	00 00 
  208de6:	48 83 c0 08          	add    $0x8,%rax
  208dea:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  208df1:	00 
  208df2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208df7:	eb 00                	jmp    208df9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x109>
  208df9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  208dfe:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  208e03:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  208e08:	48 89 08             	mov    %rcx,(%rax)
  208e0b:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  208e10:	48 89 48 08          	mov    %rcx,0x8(%rax)
  208e14:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  208e19:	48 89 48 10          	mov    %rcx,0x10(%rax)
  208e1d:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  208e22:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  208e26:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208e2b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208e32:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208e34:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  208e3b:	04 
  208e3c:	be 02 00 00 00       	mov    $0x2,%esi
  208e41:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  208e48:	00 
  208e49:	e8 e2 9c 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  208e4e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208e53:	e8 e8 0b 00 00       	callq  209a40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>
  208e58:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208e5d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208e62:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208e67:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208e6c:	e8 4f ee 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  208e71:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  208e78:	01 
  208e79:	75 6c                	jne    208ee7 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1f7>
  208e7b:	eb 5d                	jmp    208eda <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1ea>
                _ => unsafe { unreachable() },
  208e7d:	e8 8e ce 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  208e82:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208e84:	48 8d 3d f0 79 ff ff 	lea    -0x8610(%rip),%rdi        # 20087b <str.0+0x13b>
  208e8b:	48 8d 15 f6 62 01 00 	lea    0x162f6(%rip),%rdx        # 21f188 <memset+0x16c8>
  208e92:	be 28 00 00 00       	mov    $0x28,%esi
  208e97:	e8 94 21 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208e9c:	0f 0b                	ud2    
                    cpu_relax();
  208e9e:	e8 cd 9c 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  208ea3:	eb 44                	jmp    208ee9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1f9>
                PANICKED => panic!("Once has panicked"),
  208ea5:	48 8d 3d 68 79 ff ff 	lea    -0x8698(%rip),%rdi        # 200814 <str.0+0xd4>
  208eac:	48 8d 15 bd 62 01 00 	lea    0x162bd(%rip),%rdx        # 21f170 <memset+0x16b0>
  208eb3:	be 11 00 00 00       	mov    $0x11,%esi
  208eb8:	e8 73 21 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208ebd:	0f 0b                	ud2    
  208ebf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208ec4:	e8 77 0b 00 00       	callq  209a40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>
  208ec9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208ece:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208ed3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208ed8:	eb 97                	jmp    208e71 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x181>
    }
  208eda:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208edf:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  208ee6:	c3                   	retq   
  208ee7:	eb f1                	jmp    208eda <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1ea>
  208ee9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208eee:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  208ef5:	04 
  208ef6:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  208efd:	00 
  208efe:	e8 ed 9b 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208f03:	48 89 04 24          	mov    %rax,(%rsp)
  208f07:	48 8b 04 24          	mov    (%rsp),%rax
  208f0b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208f10:	e9 1b fe ff ff       	jmpq   208d30 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x40>
  208f15:	cc                   	int3   
  208f16:	cc                   	int3   
  208f17:	cc                   	int3   
  208f18:	cc                   	int3   
  208f19:	cc                   	int3   
  208f1a:	cc                   	int3   
  208f1b:	cc                   	int3   
  208f1c:	cc                   	int3   
  208f1d:	cc                   	int3   
  208f1e:	cc                   	int3   
  208f1f:	cc                   	int3   

0000000000208f20 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208f20:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  208f27:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208f2c:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  208f33:	00 
        loop {
  208f34:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  208f3b:	00 
  208f3c:	c6 84 24 8f 00 00 00 	movb   $0x1,0x8f(%rsp)
  208f43:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208f44:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208f49:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208f4e:	e8 9d 9b 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  208f53:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208f58:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208f5e:	74 29                	je     208f89 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x69>
            match status {
  208f60:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208f65:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208f6a:	48 83 e8 03          	sub    $0x3,%rax
  208f6e:	0f 87 42 01 00 00    	ja     2090b6 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x196>
  208f74:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208f79:	48 8d 0d 44 78 ff ff 	lea    -0x87bc(%rip),%rcx        # 2007c4 <str.0+0x84>
  208f80:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208f84:	48 01 c8             	add    %rcx,%rax
  208f87:	ff e0                	jmpq   *%rax
  208f89:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208f8e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208f93:	31 c0                	xor    %eax,%eax
  208f95:	89 c6                	mov    %eax,%esi
  208f97:	ba 01 00 00 00       	mov    $0x1,%edx
  208f9c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208fa1:	e8 2a 9a 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  208fa6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208fab:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208fb0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208fb5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208fbb:	75 a3                	jne    208f60 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x40>
  208fbd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208fc2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208fc7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208fcc:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  208fd3:	00 
  208fd4:	e8 c7 eb 00 00       	callq  217ba0 <_ZN4core3ops8function6FnOnce9call_once17hcf3b6ebc09314a4bE>
  208fd9:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  208fe0:	00 
  208fe1:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  208fe8:	00 
  208fe9:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  208ff0:	00 
  208ff1:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  208ff6:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  208ffd:	00 
  208ffe:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  209005:	00 
  209006:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20900b:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  209010:	48 89 4c 24 64       	mov    %rcx,0x64(%rsp)
  209015:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20901c:	00 
  20901d:	48 89 4c 24 6c       	mov    %rcx,0x6c(%rsp)
  209022:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
  209029:	00 
  20902a:	48 83 c0 08          	add    $0x8,%rax
  20902e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  209035:	00 
  209036:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20903b:	eb 00                	jmp    20903d <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x11d>
  20903d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  209042:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209047:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  20904c:	48 89 08             	mov    %rcx,(%rax)
  20904f:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  209054:	48 89 48 08          	mov    %rcx,0x8(%rax)
  209058:	8b 4c 24 70          	mov    0x70(%rsp),%ecx
  20905c:	89 48 10             	mov    %ecx,0x10(%rax)
                finish.panicked = false;
  20905f:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209064:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20906b:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20906d:	c6 84 24 8d 00 00 00 	movb   $0x4,0x8d(%rsp)
  209074:	04 
  209075:	be 02 00 00 00       	mov    $0x2,%esi
  20907a:	0f b6 94 24 8d 00 00 	movzbl 0x8d(%rsp),%edx
  209081:	00 
  209082:	e8 a9 9a 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  209087:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20908c:	e8 cf 0a 00 00       	callq  209b60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE>
  209091:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209096:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20909b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2090a0:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2090a5:	e8 16 ec 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  2090aa:	f6 84 24 8f 00 00 00 	testb  $0x1,0x8f(%rsp)
  2090b1:	01 
  2090b2:	75 6c                	jne    209120 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x200>
  2090b4:	eb 5d                	jmp    209113 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x1f3>
                _ => unsafe { unreachable() },
  2090b6:	e8 55 cc 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  2090bb:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2090bd:	48 8d 3d b7 77 ff ff 	lea    -0x8849(%rip),%rdi        # 20087b <str.0+0x13b>
  2090c4:	48 8d 15 bd 60 01 00 	lea    0x160bd(%rip),%rdx        # 21f188 <memset+0x16c8>
  2090cb:	be 28 00 00 00       	mov    $0x28,%esi
  2090d0:	e8 5b 1f 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2090d5:	0f 0b                	ud2    
                    cpu_relax();
  2090d7:	e8 94 9a 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  2090dc:	eb 44                	jmp    209122 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x202>
                PANICKED => panic!("Once has panicked"),
  2090de:	48 8d 3d 2f 77 ff ff 	lea    -0x88d1(%rip),%rdi        # 200814 <str.0+0xd4>
  2090e5:	48 8d 15 84 60 01 00 	lea    0x16084(%rip),%rdx        # 21f170 <memset+0x16b0>
  2090ec:	be 11 00 00 00       	mov    $0x11,%esi
  2090f1:	e8 3a 1f 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2090f6:	0f 0b                	ud2    
  2090f8:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2090fd:	e8 5e 0a 00 00       	callq  209b60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE>
  209102:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209107:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20910c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209111:	eb 97                	jmp    2090aa <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x18a>
    }
  209113:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209118:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  20911f:	c3                   	retq   
  209120:	eb f1                	jmp    209113 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x1f3>
  209122:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209127:	c6 84 24 8e 00 00 00 	movb   $0x4,0x8e(%rsp)
  20912e:	04 
  20912f:	0f b6 b4 24 8e 00 00 	movzbl 0x8e(%rsp),%esi
  209136:	00 
  209137:	e8 b4 99 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20913c:	48 89 04 24          	mov    %rax,(%rsp)
  209140:	48 8b 04 24          	mov    (%rsp),%rax
  209144:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209149:	e9 12 fe ff ff       	jmpq   208f60 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E+0x40>
  20914e:	cc                   	int3   
  20914f:	cc                   	int3   

0000000000209150 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209150:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  209157:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20915c:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  209163:	00 
        loop {
  209164:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  20916b:	00 
  20916c:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  209173:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209174:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209179:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20917e:	e8 6d 99 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  209183:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209188:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20918e:	74 29                	je     2091b9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x69>
            match status {
  209190:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209195:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20919a:	48 83 e8 03          	sub    $0x3,%rax
  20919e:	0f 87 39 01 00 00    	ja     2092dd <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x18d>
  2091a4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2091a9:	48 8d 0d 24 76 ff ff 	lea    -0x89dc(%rip),%rcx        # 2007d4 <str.0+0x94>
  2091b0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2091b4:	48 01 c8             	add    %rcx,%rax
  2091b7:	ff e0                	jmpq   *%rax
  2091b9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2091be:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2091c3:	31 c0                	xor    %eax,%eax
  2091c5:	89 c6                	mov    %eax,%esi
  2091c7:	ba 01 00 00 00       	mov    $0x1,%edx
  2091cc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2091d1:	e8 fa 97 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  2091d6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2091db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2091e0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2091e5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2091eb:	75 a3                	jne    209190 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x40>
  2091ed:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2091f2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2091f7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2091fc:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  209203:	00 
  209204:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20920b:	00 
  20920c:	e8 af e8 00 00       	callq  217ac0 <_ZN4core3ops8function6FnOnce9call_once17h5d223da6a4fc259bE>
  209211:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209216:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20921d:	00 
  20921e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  209223:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20922a:	00 
  20922b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  209230:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  209237:	00 
  209238:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20923d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209244:	00 00 
  209246:	48 83 c0 08          	add    $0x8,%rax
  20924a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  209251:	00 
  209252:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209257:	eb 00                	jmp    209259 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x109>
  209259:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20925e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209263:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  209268:	48 89 08             	mov    %rcx,(%rax)
  20926b:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  209270:	48 89 48 08          	mov    %rcx,0x8(%rax)
  209274:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  209279:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20927d:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  209282:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  209286:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20928b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209292:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209294:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  20929b:	04 
  20929c:	be 02 00 00 00       	mov    $0x2,%esi
  2092a1:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  2092a8:	00 
  2092a9:	e8 82 98 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  2092ae:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2092b3:	e8 58 09 00 00       	callq  209c10 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E>
  2092b8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2092bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2092c2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2092c7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2092cc:	e8 ef e9 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  2092d1:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  2092d8:	01 
  2092d9:	75 6c                	jne    209347 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x1f7>
  2092db:	eb 5d                	jmp    20933a <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x1ea>
                _ => unsafe { unreachable() },
  2092dd:	e8 2e ca 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  2092e2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2092e4:	48 8d 3d 90 75 ff ff 	lea    -0x8a70(%rip),%rdi        # 20087b <str.0+0x13b>
  2092eb:	48 8d 15 96 5e 01 00 	lea    0x15e96(%rip),%rdx        # 21f188 <memset+0x16c8>
  2092f2:	be 28 00 00 00       	mov    $0x28,%esi
  2092f7:	e8 34 1d 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2092fc:	0f 0b                	ud2    
                    cpu_relax();
  2092fe:	e8 6d 98 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  209303:	eb 44                	jmp    209349 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x1f9>
                PANICKED => panic!("Once has panicked"),
  209305:	48 8d 3d 08 75 ff ff 	lea    -0x8af8(%rip),%rdi        # 200814 <str.0+0xd4>
  20930c:	48 8d 15 5d 5e 01 00 	lea    0x15e5d(%rip),%rdx        # 21f170 <memset+0x16b0>
  209313:	be 11 00 00 00       	mov    $0x11,%esi
  209318:	e8 13 1d 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20931d:	0f 0b                	ud2    
  20931f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209324:	e8 e7 08 00 00       	callq  209c10 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E>
  209329:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20932e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209333:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209338:	eb 97                	jmp    2092d1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x181>
    }
  20933a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20933f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  209346:	c3                   	retq   
  209347:	eb f1                	jmp    20933a <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x1ea>
  209349:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20934e:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  209355:	04 
  209356:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  20935d:	00 
  20935e:	e8 8d 97 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  209363:	48 89 04 24          	mov    %rax,(%rsp)
  209367:	48 8b 04 24          	mov    (%rsp),%rax
  20936b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209370:	e9 1b fe ff ff       	jmpq   209190 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E+0x40>
  209375:	cc                   	int3   
  209376:	cc                   	int3   
  209377:	cc                   	int3   
  209378:	cc                   	int3   
  209379:	cc                   	int3   
  20937a:	cc                   	int3   
  20937b:	cc                   	int3   
  20937c:	cc                   	int3   
  20937d:	cc                   	int3   
  20937e:	cc                   	int3   
  20937f:	cc                   	int3   

0000000000209380 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209380:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  209387:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20938c:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  209393:	00 
        loop {
  209394:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  20939b:	00 
  20939c:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  2093a3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2093a4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2093a9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2093ae:	e8 3d 97 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2093b3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2093b8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2093be:	74 29                	je     2093e9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x69>
            match status {
  2093c0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2093c5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2093ca:	48 83 e8 03          	sub    $0x3,%rax
  2093ce:	0f 87 39 01 00 00    	ja     20950d <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x18d>
  2093d4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2093d9:	48 8d 0d 04 74 ff ff 	lea    -0x8bfc(%rip),%rcx        # 2007e4 <str.0+0xa4>
  2093e0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2093e4:	48 01 c8             	add    %rcx,%rax
  2093e7:	ff e0                	jmpq   *%rax
  2093e9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2093ee:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2093f3:	31 c0                	xor    %eax,%eax
  2093f5:	89 c6                	mov    %eax,%esi
  2093f7:	ba 01 00 00 00       	mov    $0x1,%edx
  2093fc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209401:	e8 ca 95 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  209406:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20940b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209410:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209415:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20941b:	75 a3                	jne    2093c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x40>
  20941d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209422:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209427:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20942c:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  209433:	00 
  209434:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20943b:	00 
  20943c:	e8 bf e6 00 00       	callq  217b00 <_ZN4core3ops8function6FnOnce9call_once17hb4c5c4d4e2b51e8fE>
  209441:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209446:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20944d:	00 
  20944e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  209453:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20945a:	00 
  20945b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  209460:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  209467:	00 
  209468:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20946d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209474:	00 00 
  209476:	48 83 c0 08          	add    $0x8,%rax
  20947a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  209481:	00 
  209482:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209487:	eb 00                	jmp    209489 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x109>
  209489:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20948e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209493:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  209498:	48 89 08             	mov    %rcx,(%rax)
  20949b:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2094a0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2094a4:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  2094a9:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2094ad:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2094b2:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  2094b6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2094bb:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2094c2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2094c4:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  2094cb:	04 
  2094cc:	be 02 00 00 00       	mov    $0x2,%esi
  2094d1:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  2094d8:	00 
  2094d9:	e8 52 96 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  2094de:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2094e3:	e8 f8 04 00 00       	callq  2099e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E>
  2094e8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2094ed:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2094f2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2094f7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2094fc:	e8 bf e7 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  209501:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  209508:	01 
  209509:	75 6c                	jne    209577 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x1f7>
  20950b:	eb 5d                	jmp    20956a <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x1ea>
                _ => unsafe { unreachable() },
  20950d:	e8 fe c7 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209512:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209514:	48 8d 3d 60 73 ff ff 	lea    -0x8ca0(%rip),%rdi        # 20087b <str.0+0x13b>
  20951b:	48 8d 15 66 5c 01 00 	lea    0x15c66(%rip),%rdx        # 21f188 <memset+0x16c8>
  209522:	be 28 00 00 00       	mov    $0x28,%esi
  209527:	e8 04 1b 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20952c:	0f 0b                	ud2    
                    cpu_relax();
  20952e:	e8 3d 96 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  209533:	eb 44                	jmp    209579 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x1f9>
                PANICKED => panic!("Once has panicked"),
  209535:	48 8d 3d d8 72 ff ff 	lea    -0x8d28(%rip),%rdi        # 200814 <str.0+0xd4>
  20953c:	48 8d 15 2d 5c 01 00 	lea    0x15c2d(%rip),%rdx        # 21f170 <memset+0x16b0>
  209543:	be 11 00 00 00       	mov    $0x11,%esi
  209548:	e8 e3 1a 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20954d:	0f 0b                	ud2    
  20954f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209554:	e8 87 04 00 00       	callq  2099e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E>
  209559:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20955e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209563:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209568:	eb 97                	jmp    209501 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x181>
    }
  20956a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20956f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  209576:	c3                   	retq   
  209577:	eb f1                	jmp    20956a <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x1ea>
  209579:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20957e:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  209585:	04 
  209586:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  20958d:	00 
  20958e:	e8 5d 95 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  209593:	48 89 04 24          	mov    %rax,(%rsp)
  209597:	48 8b 04 24          	mov    (%rsp),%rax
  20959b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2095a0:	e9 1b fe ff ff       	jmpq   2093c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE+0x40>
  2095a5:	cc                   	int3   
  2095a6:	cc                   	int3   
  2095a7:	cc                   	int3   
  2095a8:	cc                   	int3   
  2095a9:	cc                   	int3   
  2095aa:	cc                   	int3   
  2095ab:	cc                   	int3   
  2095ac:	cc                   	int3   
  2095ad:	cc                   	int3   
  2095ae:	cc                   	int3   
  2095af:	cc                   	int3   

00000000002095b0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2095b0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  2095b7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2095bc:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  2095c3:	00 
        loop {
  2095c4:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  2095cb:	00 
  2095cc:	c6 84 24 0f 01 00 00 	movb   $0x1,0x10f(%rsp)
  2095d3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2095d4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2095d9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2095de:	e8 0d 95 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2095e3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2095e8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2095ee:	74 29                	je     209619 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x69>
            match status {
  2095f0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2095f5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2095fa:	48 83 e8 03          	sub    $0x3,%rax
  2095fe:	0f 87 19 01 00 00    	ja     20971d <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x16d>
  209604:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209609:	48 8d 0d e4 71 ff ff 	lea    -0x8e1c(%rip),%rcx        # 2007f4 <str.0+0xb4>
  209610:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209614:	48 01 c8             	add    %rcx,%rax
  209617:	ff e0                	jmpq   *%rax
  209619:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20961e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209623:	31 c0                	xor    %eax,%eax
  209625:	89 c6                	mov    %eax,%esi
  209627:	ba 01 00 00 00       	mov    $0x1,%edx
  20962c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209631:	e8 9a 93 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  209636:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20963b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209640:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209645:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20964b:	75 a3                	jne    2095f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x40>
  20964d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209652:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209657:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20965c:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  209663:	00 
  209664:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20966b:	00 
  20966c:	e8 8f e5 00 00       	callq  217c00 <_ZN4core3ops8function6FnOnce9call_once17hd8afbc9466c583faE>
  209671:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209676:	48 83 c7 08          	add    $0x8,%rdi
  20967a:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  209681:	00 
  209682:	ba 50 00 00 00       	mov    $0x50,%edx
  209687:	e8 14 44 01 00       	callq  21daa0 <memcpy>
  20968c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209691:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209698:	00 00 
  20969a:	48 83 c0 08          	add    $0x8,%rax
  20969e:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  2096a5:	00 
  2096a6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2096ab:	eb 00                	jmp    2096ad <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0xfd>
  2096ad:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2096b2:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2096b7:	ba 58 00 00 00       	mov    $0x58,%edx
  2096bc:	e8 df 43 01 00       	callq  21daa0 <memcpy>
  2096c1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2096c6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2096cb:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2096d2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2096d4:	c6 84 24 0d 01 00 00 	movb   $0x4,0x10d(%rsp)
  2096db:	04 
  2096dc:	be 02 00 00 00       	mov    $0x2,%esi
  2096e1:	0f b6 94 24 0d 01 00 	movzbl 0x10d(%rsp),%edx
  2096e8:	00 
  2096e9:	e8 42 94 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  2096ee:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2096f3:	e8 a8 03 00 00       	callq  209aa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>
  2096f8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2096fd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209702:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209707:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20970c:	e8 af e5 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  209711:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  209718:	01 
  209719:	75 6c                	jne    209787 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1d7>
  20971b:	eb 5d                	jmp    20977a <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1ca>
                _ => unsafe { unreachable() },
  20971d:	e8 ee c5 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209722:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209724:	48 8d 3d 50 71 ff ff 	lea    -0x8eb0(%rip),%rdi        # 20087b <str.0+0x13b>
  20972b:	48 8d 15 56 5a 01 00 	lea    0x15a56(%rip),%rdx        # 21f188 <memset+0x16c8>
  209732:	be 28 00 00 00       	mov    $0x28,%esi
  209737:	e8 f4 18 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20973c:	0f 0b                	ud2    
                    cpu_relax();
  20973e:	e8 2d 94 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  209743:	eb 44                	jmp    209789 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209745:	48 8d 3d c8 70 ff ff 	lea    -0x8f38(%rip),%rdi        # 200814 <str.0+0xd4>
  20974c:	48 8d 15 1d 5a 01 00 	lea    0x15a1d(%rip),%rdx        # 21f170 <memset+0x16b0>
  209753:	be 11 00 00 00       	mov    $0x11,%esi
  209758:	e8 d3 18 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20975d:	0f 0b                	ud2    
  20975f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209764:	e8 37 03 00 00       	callq  209aa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>
  209769:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20976e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209773:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209778:	eb 97                	jmp    209711 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x161>
    }
  20977a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20977f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  209786:	c3                   	retq   
  209787:	eb f1                	jmp    20977a <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1ca>
  209789:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20978e:	c6 84 24 0e 01 00 00 	movb   $0x4,0x10e(%rsp)
  209795:	04 
  209796:	0f b6 b4 24 0e 01 00 	movzbl 0x10e(%rsp),%esi
  20979d:	00 
  20979e:	e8 4d 93 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2097a3:	48 89 04 24          	mov    %rax,(%rsp)
  2097a7:	48 8b 04 24          	mov    (%rsp),%rax
  2097ab:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2097b0:	e9 3b fe ff ff       	jmpq   2095f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x40>
  2097b5:	cc                   	int3   
  2097b6:	cc                   	int3   
  2097b7:	cc                   	int3   
  2097b8:	cc                   	int3   
  2097b9:	cc                   	int3   
  2097ba:	cc                   	int3   
  2097bb:	cc                   	int3   
  2097bc:	cc                   	int3   
  2097bd:	cc                   	int3   
  2097be:	cc                   	int3   
  2097bf:	cc                   	int3   

00000000002097c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2097c0:	48 81 ec b8 20 00 00 	sub    $0x20b8,%rsp
  2097c7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2097cc:	48 89 bc 24 a0 20 00 	mov    %rdi,0x20a0(%rsp)
  2097d3:	00 
        loop {
  2097d4:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  2097db:	00 
  2097dc:	c6 84 24 9f 20 00 00 	movb   $0x1,0x209f(%rsp)
  2097e3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2097e4:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  2097eb:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2097f0:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2097f5:	e8 f6 92 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2097fa:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2097ff:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209805:	74 29                	je     209830 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x70>
            match status {
  209807:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20980c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209811:	48 83 e8 03          	sub    $0x3,%rax
  209815:	0f 87 25 01 00 00    	ja     209940 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x180>
  20981b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209820:	48 8d 0d dd 6f ff ff 	lea    -0x9023(%rip),%rcx        # 200804 <str.0+0xc4>
  209827:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20982b:	48 01 c8             	add    %rcx,%rax
  20982e:	ff e0                	jmpq   *%rax
  209830:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            status = self.state.compare_and_swap(INCOMPLETE,
  209835:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
                                                 Ordering::SeqCst);
  20983c:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209841:	31 c0                	xor    %eax,%eax
  209843:	89 c6                	mov    %eax,%esi
  209845:	ba 01 00 00 00       	mov    $0x1,%edx
  20984a:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  20984f:	e8 7c 91 00 00       	callq  2129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  209854:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209859:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20985e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209863:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209869:	75 9c                	jne    209807 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x47>
  20986b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209870:	48 05 20 10 00 00    	add    $0x1020,%rax
  209876:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20987b:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209880:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  209887:	00 
  209888:	48 8d bc 24 80 10 00 	lea    0x1080(%rsp),%rdi
  20988f:	00 
  209890:	e8 9b e2 00 00       	callq  217b30 <_ZN4core3ops8function6FnOnce9call_once17hbfa38db203cdd59fE>
  209895:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20989a:	48 83 c7 10          	add    $0x10,%rdi
  20989e:	48 8d b4 24 80 10 00 	lea    0x1080(%rsp),%rsi
  2098a5:	00 
  2098a6:	ba 10 10 00 00       	mov    $0x1010,%edx
  2098ab:	e8 f0 41 01 00       	callq  21daa0 <memcpy>
  2098b0:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2098b5:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  2098ba:	48 89 84 24 b0 20 00 	mov    %rax,0x20b0(%rsp)
  2098c1:	00 
  2098c2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2098c7:	eb 00                	jmp    2098c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x109>
  2098c9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2098ce:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2098d3:	ba 20 10 00 00       	mov    $0x1020,%edx
  2098d8:	e8 c3 41 01 00       	callq  21daa0 <memcpy>
  2098dd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2098e2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2098e7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2098ee:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2098f0:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  2098f7:	c6 84 24 9d 20 00 00 	movb   $0x4,0x209d(%rsp)
  2098fe:	04 
  2098ff:	be 02 00 00 00       	mov    $0x2,%esi
  209904:	0f b6 94 24 9d 20 00 	movzbl 0x209d(%rsp),%edx
  20990b:	00 
  20990c:	e8 1f 92 00 00       	callq  212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  209911:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209916:	e8 a5 02 00 00       	callq  209bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>
  20991b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209920:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209925:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20992a:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20992f:	e8 8c e3 00 00       	callq  217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  209934:	f6 84 24 9f 20 00 00 	testb  $0x1,0x209f(%rsp)
  20993b:	01 
  20993c:	75 6c                	jne    2099aa <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1ea>
  20993e:	eb 5d                	jmp    20999d <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1dd>
                _ => unsafe { unreachable() },
  209940:	e8 cb c3 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209945:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209947:	48 8d 3d 2d 6f ff ff 	lea    -0x90d3(%rip),%rdi        # 20087b <str.0+0x13b>
  20994e:	48 8d 15 33 58 01 00 	lea    0x15833(%rip),%rdx        # 21f188 <memset+0x16c8>
  209955:	be 28 00 00 00       	mov    $0x28,%esi
  20995a:	e8 d1 16 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20995f:	0f 0b                	ud2    
                    cpu_relax();
  209961:	e8 0a 92 00 00       	callq  212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  209966:	eb 44                	jmp    2099ac <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1ec>
                PANICKED => panic!("Once has panicked"),
  209968:	48 8d 3d a5 6e ff ff 	lea    -0x915b(%rip),%rdi        # 200814 <str.0+0xd4>
  20996f:	48 8d 15 fa 57 01 00 	lea    0x157fa(%rip),%rdx        # 21f170 <memset+0x16b0>
  209976:	be 11 00 00 00       	mov    $0x11,%esi
  20997b:	e8 b0 16 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209980:	0f 0b                	ud2    
  209982:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209987:	e8 34 02 00 00       	callq  209bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>
  20998c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209991:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209996:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20999b:	eb 97                	jmp    209934 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x174>
    }
  20999d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2099a2:	48 81 c4 b8 20 00 00 	add    $0x20b8,%rsp
  2099a9:	c3                   	retq   
  2099aa:	eb f1                	jmp    20999d <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1dd>
  2099ac:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  2099b1:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  2099b8:	c6 84 24 9e 20 00 00 	movb   $0x4,0x209e(%rsp)
  2099bf:	04 
  2099c0:	0f b6 b4 24 9e 20 00 	movzbl 0x209e(%rsp),%esi
  2099c7:	00 
  2099c8:	e8 23 91 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2099cd:	48 89 04 24          	mov    %rax,(%rsp)
  2099d1:	48 8b 04 24          	mov    (%rsp),%rax
  2099d5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2099da:	e9 28 fe ff ff       	jmpq   209807 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x47>
  2099df:	cc                   	int3   

00000000002099e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E>:
    fn force_get<'a>(&'a self) -> &'a T {
  2099e0:	48 83 ec 28          	sub    $0x28,%rsp
  2099e4:	48 89 f8             	mov    %rdi,%rax
  2099e7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  2099ec:	48 83 c0 08          	add    $0x8,%rax
  2099f0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2099f5:	48 89 04 24          	mov    %rax,(%rsp)
  2099f9:	48 8b 3c 24          	mov    (%rsp),%rdi
  2099fd:	e8 6e bc ff ff       	callq  205670 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc77254d5f767f94aE>
  209a02:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209a07:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209a0c:	48 85 c0             	test   %rax,%rax
  209a0f:	0f 95 c0             	setne  %al
  209a12:	0f b6 c0             	movzbl %al,%eax
  209a15:	74 06                	je     209a1d <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E+0x3d>
  209a17:	eb 00                	jmp    209a19 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E+0x39>
  209a19:	eb 09                	jmp    209a24 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0a73bc07302cd048E+0x44>
  209a1b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209a1d:	e8 ee c2 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209a22:	0f 0b                	ud2    
            Some(p) => p,
  209a24:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209a29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209a2e:	48 83 c4 28          	add    $0x28,%rsp
  209a32:	c3                   	retq   
  209a33:	cc                   	int3   
  209a34:	cc                   	int3   
  209a35:	cc                   	int3   
  209a36:	cc                   	int3   
  209a37:	cc                   	int3   
  209a38:	cc                   	int3   
  209a39:	cc                   	int3   
  209a3a:	cc                   	int3   
  209a3b:	cc                   	int3   
  209a3c:	cc                   	int3   
  209a3d:	cc                   	int3   
  209a3e:	cc                   	int3   
  209a3f:	cc                   	int3   

0000000000209a40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>:
    fn force_get<'a>(&'a self) -> &'a T {
  209a40:	48 83 ec 28          	sub    $0x28,%rsp
  209a44:	48 89 f8             	mov    %rdi,%rax
  209a47:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209a4c:	48 83 c0 08          	add    $0x8,%rax
  209a50:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209a55:	48 89 04 24          	mov    %rax,(%rsp)
  209a59:	48 8b 3c 24          	mov    (%rsp),%rdi
  209a5d:	e8 1e bb ff ff       	callq  205580 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE>
  209a62:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209a67:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209a6c:	48 85 c0             	test   %rax,%rax
  209a6f:	0f 95 c0             	setne  %al
  209a72:	0f b6 c0             	movzbl %al,%eax
  209a75:	74 06                	je     209a7d <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x3d>
  209a77:	eb 00                	jmp    209a79 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x39>
  209a79:	eb 09                	jmp    209a84 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x44>
  209a7b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209a7d:	e8 8e c2 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209a82:	0f 0b                	ud2    
            Some(p) => p,
  209a84:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209a89:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209a8e:	48 83 c4 28          	add    $0x28,%rsp
  209a92:	c3                   	retq   
  209a93:	cc                   	int3   
  209a94:	cc                   	int3   
  209a95:	cc                   	int3   
  209a96:	cc                   	int3   
  209a97:	cc                   	int3   
  209a98:	cc                   	int3   
  209a99:	cc                   	int3   
  209a9a:	cc                   	int3   
  209a9b:	cc                   	int3   
  209a9c:	cc                   	int3   
  209a9d:	cc                   	int3   
  209a9e:	cc                   	int3   
  209a9f:	cc                   	int3   

0000000000209aa0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209aa0:	48 83 ec 28          	sub    $0x28,%rsp
  209aa4:	48 89 f8             	mov    %rdi,%rax
  209aa7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209aac:	48 83 c0 08          	add    $0x8,%rax
  209ab0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209ab5:	48 89 04 24          	mov    %rax,(%rsp)
  209ab9:	48 8b 3c 24          	mov    (%rsp),%rdi
  209abd:	e8 0e bb ff ff       	callq  2055d0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E>
  209ac2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209ac7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209acc:	48 85 c0             	test   %rax,%rax
  209acf:	0f 95 c0             	setne  %al
  209ad2:	0f b6 c0             	movzbl %al,%eax
  209ad5:	74 06                	je     209add <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x3d>
  209ad7:	eb 00                	jmp    209ad9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x39>
  209ad9:	eb 09                	jmp    209ae4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x44>
  209adb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209add:	e8 2e c2 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209ae2:	0f 0b                	ud2    
            Some(p) => p,
  209ae4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209ae9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209aee:	48 83 c4 28          	add    $0x28,%rsp
  209af2:	c3                   	retq   
  209af3:	cc                   	int3   
  209af4:	cc                   	int3   
  209af5:	cc                   	int3   
  209af6:	cc                   	int3   
  209af7:	cc                   	int3   
  209af8:	cc                   	int3   
  209af9:	cc                   	int3   
  209afa:	cc                   	int3   
  209afb:	cc                   	int3   
  209afc:	cc                   	int3   
  209afd:	cc                   	int3   
  209afe:	cc                   	int3   
  209aff:	cc                   	int3   

0000000000209b00 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209b00:	48 83 ec 28          	sub    $0x28,%rsp
  209b04:	48 89 f8             	mov    %rdi,%rax
  209b07:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209b0c:	48 83 c0 08          	add    $0x8,%rax
  209b10:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209b15:	48 89 04 24          	mov    %rax,(%rsp)
  209b19:	48 8b 3c 24          	mov    (%rsp),%rdi
  209b1d:	e8 be b9 ff ff       	callq  2054e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE>
  209b22:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209b27:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209b2c:	48 85 c0             	test   %rax,%rax
  209b2f:	0f 95 c0             	setne  %al
  209b32:	0f b6 c0             	movzbl %al,%eax
  209b35:	74 06                	je     209b3d <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x3d>
  209b37:	eb 00                	jmp    209b39 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x39>
  209b39:	eb 09                	jmp    209b44 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x44>
  209b3b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209b3d:	e8 ce c1 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209b42:	0f 0b                	ud2    
            Some(p) => p,
  209b44:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209b49:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209b4e:	48 83 c4 28          	add    $0x28,%rsp
  209b52:	c3                   	retq   
  209b53:	cc                   	int3   
  209b54:	cc                   	int3   
  209b55:	cc                   	int3   
  209b56:	cc                   	int3   
  209b57:	cc                   	int3   
  209b58:	cc                   	int3   
  209b59:	cc                   	int3   
  209b5a:	cc                   	int3   
  209b5b:	cc                   	int3   
  209b5c:	cc                   	int3   
  209b5d:	cc                   	int3   
  209b5e:	cc                   	int3   
  209b5f:	cc                   	int3   

0000000000209b60 <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209b60:	48 83 ec 28          	sub    $0x28,%rsp
  209b64:	48 89 f8             	mov    %rdi,%rax
  209b67:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209b6c:	48 83 c0 08          	add    $0x8,%rax
  209b70:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209b75:	48 89 04 24          	mov    %rax,(%rsp)
  209b79:	48 8b 3c 24          	mov    (%rsp),%rdi
  209b7d:	e8 0e b9 ff ff       	callq  205490 <_ZN4core6option15Option$LT$T$GT$6as_ref17h53a1a15d1c310b73E>
  209b82:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209b87:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209b8c:	48 85 c0             	test   %rax,%rax
  209b8f:	0f 95 c0             	setne  %al
  209b92:	0f b6 c0             	movzbl %al,%eax
  209b95:	74 06                	je     209b9d <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE+0x3d>
  209b97:	eb 00                	jmp    209b99 <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE+0x39>
  209b99:	eb 09                	jmp    209ba4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hb8d8d158e9caf52bE+0x44>
  209b9b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209b9d:	e8 6e c1 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209ba2:	0f 0b                	ud2    
            Some(p) => p,
  209ba4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209ba9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209bae:	48 83 c4 28          	add    $0x28,%rsp
  209bb2:	c3                   	retq   
  209bb3:	cc                   	int3   
  209bb4:	cc                   	int3   
  209bb5:	cc                   	int3   
  209bb6:	cc                   	int3   
  209bb7:	cc                   	int3   
  209bb8:	cc                   	int3   
  209bb9:	cc                   	int3   
  209bba:	cc                   	int3   
  209bbb:	cc                   	int3   
  209bbc:	cc                   	int3   
  209bbd:	cc                   	int3   
  209bbe:	cc                   	int3   
  209bbf:	cc                   	int3   

0000000000209bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209bc0:	48 83 ec 28          	sub    $0x28,%rsp
  209bc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209bc9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  209bce:	48 89 3c 24          	mov    %rdi,(%rsp)
  209bd2:	48 8b 3c 24          	mov    (%rsp),%rdi
        match unsafe { &*self.data.get() }.as_ref() {
  209bd6:	e8 55 b9 ff ff       	callq  205530 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE>
  209bdb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209be0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209be5:	48 85 c0             	test   %rax,%rax
  209be8:	0f 95 c0             	setne  %al
  209beb:	0f b6 c0             	movzbl %al,%eax
  209bee:	74 06                	je     209bf6 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x36>
  209bf0:	eb 00                	jmp    209bf2 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x32>
  209bf2:	eb 09                	jmp    209bfd <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x3d>
  209bf4:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209bf6:	e8 15 c1 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209bfb:	0f 0b                	ud2    
            Some(p) => p,
  209bfd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209c02:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209c07:	48 83 c4 28          	add    $0x28,%rsp
  209c0b:	c3                   	retq   
  209c0c:	cc                   	int3   
  209c0d:	cc                   	int3   
  209c0e:	cc                   	int3   
  209c0f:	cc                   	int3   

0000000000209c10 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E>:
    fn force_get<'a>(&'a self) -> &'a T {
  209c10:	48 83 ec 28          	sub    $0x28,%rsp
  209c14:	48 89 f8             	mov    %rdi,%rax
  209c17:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209c1c:	48 83 c0 08          	add    $0x8,%rax
  209c20:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209c25:	48 89 04 24          	mov    %rax,(%rsp)
  209c29:	48 8b 3c 24          	mov    (%rsp),%rdi
  209c2d:	e8 0e b8 ff ff       	callq  205440 <_ZN4core6option15Option$LT$T$GT$6as_ref17h42fa7d9d4fb64ed9E>
  209c32:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209c37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209c3c:	48 85 c0             	test   %rax,%rax
  209c3f:	0f 95 c0             	setne  %al
  209c42:	0f b6 c0             	movzbl %al,%eax
  209c45:	74 06                	je     209c4d <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E+0x3d>
  209c47:	eb 00                	jmp    209c49 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E+0x39>
  209c49:	eb 09                	jmp    209c54 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcce0d5e8eeed7c81E+0x44>
  209c4b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209c4d:	e8 be c0 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209c52:	0f 0b                	ud2    
            Some(p) => p,
  209c54:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209c59:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209c5e:	48 83 c4 28          	add    $0x28,%rsp
  209c62:	c3                   	retq   
  209c63:	cc                   	int3   
  209c64:	cc                   	int3   
  209c65:	cc                   	int3   
  209c66:	cc                   	int3   
  209c67:	cc                   	int3   
  209c68:	cc                   	int3   
  209c69:	cc                   	int3   
  209c6a:	cc                   	int3   
  209c6b:	cc                   	int3   
  209c6c:	cc                   	int3   
  209c6d:	cc                   	int3   
  209c6e:	cc                   	int3   
  209c6f:	cc                   	int3   

0000000000209c70 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209c70:	48 83 ec 28          	sub    $0x28,%rsp
  209c74:	48 89 f8             	mov    %rdi,%rax
  209c77:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209c7c:	48 83 c0 08          	add    $0x8,%rax
  209c80:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209c85:	48 89 04 24          	mov    %rax,(%rsp)
  209c89:	48 8b 3c 24          	mov    (%rsp),%rdi
  209c8d:	e8 2e ba ff ff       	callq  2056c0 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE>
  209c92:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209c97:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209c9c:	48 85 c0             	test   %rax,%rax
  209c9f:	0f 95 c0             	setne  %al
  209ca2:	0f b6 c0             	movzbl %al,%eax
  209ca5:	74 06                	je     209cad <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x3d>
  209ca7:	eb 00                	jmp    209ca9 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x39>
  209ca9:	eb 09                	jmp    209cb4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x44>
  209cab:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209cad:	e8 5e c0 00 00       	callq  215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  209cb2:	0f 0b                	ud2    
            Some(p) => p,
  209cb4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209cb9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209cbe:	48 83 c4 28          	add    $0x28,%rsp
  209cc2:	c3                   	retq   
  209cc3:	cc                   	int3   
  209cc4:	cc                   	int3   
  209cc5:	cc                   	int3   
  209cc6:	cc                   	int3   
  209cc7:	cc                   	int3   
  209cc8:	cc                   	int3   
  209cc9:	cc                   	int3   
  209cca:	cc                   	int3   
  209ccb:	cc                   	int3   
  209ccc:	cc                   	int3   
  209ccd:	cc                   	int3   
  209cce:	cc                   	int3   
  209ccf:	cc                   	int3   

0000000000209cd0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17h2ff5b3c95de4d9fdE>:
    pub fn into_option(self) -> Option<T> {
  209cd0:	48 83 ec 28          	sub    $0x28,%rsp
  209cd4:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  209cd8:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.into()
  209cdd:	e8 8e 01 00 00       	callq  209e70 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hae46ea32c13c45beE>
  209ce2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209ce7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  209cec:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  209cf1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  209cf6:	48 83 c4 28          	add    $0x28,%rsp
  209cfa:	c3                   	retq   
  209cfb:	cc                   	int3   
  209cfc:	cc                   	int3   
  209cfd:	cc                   	int3   
  209cfe:	cc                   	int3   
  209cff:	cc                   	int3   

0000000000209d00 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E>:
    pub const fn as_ref(&self) -> Option<&T> {
  209d00:	48 83 ec 20          	sub    $0x20,%rsp
  209d04:	48 89 3c 24          	mov    %rdi,(%rsp)
  209d08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  209d0d:	8b 07                	mov    (%rdi),%eax
  209d0f:	48 85 c0             	test   %rax,%rax
  209d12:	74 06                	je     209d1a <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x1a>
  209d14:	eb 00                	jmp    209d16 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x16>
  209d16:	eb 16                	jmp    209d2e <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x2e>
  209d18:	0f 0b                	ud2    
  209d1a:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  209d1e:	48 83 c0 08          	add    $0x8,%rax
  209d22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209d27:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209d2c:	eb 09                	jmp    209d37 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x37>
            Self::None => None,
  209d2e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  209d35:	00 00 
    }
  209d37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209d3c:	48 83 c4 20          	add    $0x20,%rsp
  209d40:	c3                   	retq   
  209d41:	cc                   	int3   
  209d42:	cc                   	int3   
  209d43:	cc                   	int3   
  209d44:	cc                   	int3   
  209d45:	cc                   	int3   
  209d46:	cc                   	int3   
  209d47:	cc                   	int3   
  209d48:	cc                   	int3   
  209d49:	cc                   	int3   
  209d4a:	cc                   	int3   
  209d4b:	cc                   	int3   
  209d4c:	cc                   	int3   
  209d4d:	cc                   	int3   
  209d4e:	cc                   	int3   
  209d4f:	cc                   	int3   

0000000000209d50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6ef1857f38a0a2dE>:
    /// assert!(!ptr.is_null());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
    #[inline]
    pub const fn is_null(self) -> bool {
  209d50:	48 83 ec 18          	sub    $0x18,%rsp
  209d54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209d59:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209d5e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        // Compare via a cast to a thin pointer, so fat pointers are only
        // considering their "data" part for null-ness.
        (self as *mut u8).guaranteed_eq(null_mut())
  209d63:	31 c0                	xor    %eax,%eax
  209d65:	89 c6                	mov    %eax,%esi
  209d67:	e8 54 fa 00 00       	callq  2197c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  209d6c:	88 44 24 07          	mov    %al,0x7(%rsp)
  209d70:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  209d74:	24 01                	and    $0x1,%al
  209d76:	0f b6 c0             	movzbl %al,%eax
  209d79:	48 83 c4 18          	add    $0x18,%rsp
  209d7d:	c3                   	retq   
  209d7e:	cc                   	int3   
  209d7f:	cc                   	int3   

0000000000209d80 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E>:
    ///     println!("We got back the value: {}!", val_back);
    /// }
    /// ```
    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
    #[inline]
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
  209d80:	48 83 ec 28          	sub    $0x28,%rsp
  209d84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209d89:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        // SAFETY: the caller must guarantee that `self` is valid
        // for a reference if it isn't null.
        if self.is_null() { None } else { unsafe { Some(&*self) } }
  209d8e:	e8 2d 00 00 00       	callq  209dc0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06f36695f88a226dE>
  209d93:	88 44 24 17          	mov    %al,0x17(%rsp)
  209d97:	8a 44 24 17          	mov    0x17(%rsp),%al
  209d9b:	a8 01                	test   $0x1,%al
  209d9d:	75 0e                	jne    209dad <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x2d>
  209d9f:	eb 00                	jmp    209da1 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x21>
  209da1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209da6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209dab:	eb 09                	jmp    209db6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x36>
  209dad:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  209db4:	00 00 
    }
  209db6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209dbb:	48 83 c4 28          	add    $0x28,%rsp
  209dbf:	c3                   	retq   

0000000000209dc0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06f36695f88a226dE>:
    pub const fn is_null(self) -> bool {
  209dc0:	48 83 ec 18          	sub    $0x18,%rsp
  209dc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209dc9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209dce:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  209dd3:	31 c0                	xor    %eax,%eax
  209dd5:	89 c6                	mov    %eax,%esi
  209dd7:	e8 44 fa 00 00       	callq  219820 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  209ddc:	88 44 24 07          	mov    %al,0x7(%rsp)
  209de0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  209de4:	24 01                	and    $0x1,%al
  209de6:	0f b6 c0             	movzbl %al,%eax
  209de9:	48 83 c4 18          	add    $0x18,%rsp
  209ded:	c3                   	retq   
  209dee:	cc                   	int3   
  209def:	cc                   	int3   

0000000000209df0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h40262206e0af07c1E>:
    pub const fn is_null(self) -> bool {
  209df0:	48 83 ec 18          	sub    $0x18,%rsp
  209df4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209df9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209dfe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  209e03:	31 c0                	xor    %eax,%eax
  209e05:	89 c6                	mov    %eax,%esi
  209e07:	e8 14 fa 00 00       	callq  219820 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  209e0c:	88 44 24 07          	mov    %al,0x7(%rsp)
  209e10:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  209e14:	24 01                	and    $0x1,%al
  209e16:	0f b6 c0             	movzbl %al,%eax
  209e19:	48 83 c4 18          	add    $0x18,%rsp
  209e1d:	c3                   	retq   
  209e1e:	cc                   	int3   
  209e1f:	cc                   	int3   

0000000000209e20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb29b1483586f5a9aE>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
  209e20:	48 83 ec 28          	sub    $0x28,%rsp
  209e24:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  209e29:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  209e2e:	e8 9d 8e 00 00       	callq  212cd0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E>
  209e33:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209e38:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  209e3d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  209e42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  209e47:	48 83 c4 28          	add    $0x28,%rsp
  209e4b:	c3                   	retq   
  209e4c:	cc                   	int3   
  209e4d:	cc                   	int3   
  209e4e:	cc                   	int3   
  209e4f:	cc                   	int3   

0000000000209e50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h62fe95701eedc12bE>:
    pub const fn as_ptr(&self) -> *const T {
  209e50:	48 83 ec 10          	sub    $0x10,%rsp
  209e54:	48 89 f8             	mov    %rdi,%rax
  209e57:	48 89 04 24          	mov    %rax,(%rsp)
  209e5b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  209e60:	48 83 c4 10          	add    $0x10,%rsp
  209e64:	c3                   	retq   
  209e65:	cc                   	int3   
  209e66:	cc                   	int3   
  209e67:	cc                   	int3   
  209e68:	cc                   	int3   
  209e69:	cc                   	int3   
  209e6a:	cc                   	int3   
  209e6b:	cc                   	int3   
  209e6c:	cc                   	int3   
  209e6d:	cc                   	int3   
  209e6e:	cc                   	int3   
  209e6f:	cc                   	int3   

0000000000209e70 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hae46ea32c13c45beE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<T, U> Into<U> for T
where
    U: From<T>,
{
    fn into(self) -> U {
  209e70:	48 83 ec 28          	sub    $0x28,%rsp
  209e74:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  209e78:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  209e7d:	e8 6e b2 ff ff       	callq  2050f0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E>
  209e82:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209e87:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  209e8c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  209e91:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  209e96:	48 83 c4 28          	add    $0x28,%rsp
  209e9a:	c3                   	retq   
  209e9b:	cc                   	int3   
  209e9c:	cc                   	int3   
  209e9d:	cc                   	int3   
  209e9e:	cc                   	int3   
  209e9f:	cc                   	int3   

0000000000209ea0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ca077acbcde698E>:
    F: FnMut(I::Item) -> B,
{
    type Item = B;

    #[inline]
    fn next(&mut self) -> Option<B> {
  209ea0:	48 83 ec 28          	sub    $0x28,%rsp
  209ea4:	48 89 34 24          	mov    %rsi,(%rsp)
  209ea8:	48 89 f8             	mov    %rdi,%rax
  209eab:	48 8b 3c 24          	mov    (%rsp),%rdi
  209eaf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209eb4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209eb9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        self.iter.next().map(&mut self.f)
  209ebe:	e8 1d 88 00 00       	callq  2126e0 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9f9431fe0cfc6d82E>
  209ec3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209ec8:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  209ecd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  209ed2:	48 8b 14 24          	mov    (%rsp),%rdx
  209ed6:	e8 25 b3 ff ff       	callq  205200 <_ZN4core6option15Option$LT$T$GT$3map17h8a5c3db5323d03d0E>
  209edb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  209ee0:	48 83 c4 28          	add    $0x28,%rsp
  209ee4:	c3                   	retq   
  209ee5:	cc                   	int3   
  209ee6:	cc                   	int3   
  209ee7:	cc                   	int3   
  209ee8:	cc                   	int3   
  209ee9:	cc                   	int3   
  209eea:	cc                   	int3   
  209eeb:	cc                   	int3   
  209eec:	cc                   	int3   
  209eed:	cc                   	int3   
  209eee:	cc                   	int3   
  209eef:	cc                   	int3   

0000000000209ef0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13cb05e389aec27dE>:
    fn next(&mut self) -> Option<B> {
  209ef0:	48 83 ec 48          	sub    $0x48,%rsp
  209ef4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209ef9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        self.iter.next().map(&mut self.f)
  209efe:	e8 bd af 00 00       	callq  214ec0 <_ZN114_$LT$core..iter..adapters..flatten..FlatMap$LT$I$C$U$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h592f9a86ceca3c02E>
  209f03:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209f08:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  209f0d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  209f12:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  209f17:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  209f1c:	e8 8f b3 ff ff       	callq  2052b0 <_ZN4core6option15Option$LT$T$GT$3map17h9bd54ea354b52a53E>
  209f21:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  209f26:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209f2b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209f30:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209f35:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209f3a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  209f3f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209f44:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  209f49:	48 83 c4 48          	add    $0x48,%rsp
  209f4d:	c3                   	retq   
  209f4e:	cc                   	int3   
  209f4f:	cc                   	int3   

0000000000209f50 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8401963b1cc66105E>:
    fn next(&mut self) -> Option<B> {
  209f50:	48 83 ec 38          	sub    $0x38,%rsp
  209f54:	48 89 34 24          	mov    %rsi,(%rsp)
  209f58:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209f5d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209f62:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        self.iter.next().map(&mut self.f)
  209f67:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  209f6c:	e8 2f ff ff ff       	callq  209ea0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ca077acbcde698E>
  209f71:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  209f76:	48 8b 14 24          	mov    (%rsp),%rdx
  209f7a:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  209f7f:	e8 bc b1 ff ff       	callq  205140 <_ZN4core6option15Option$LT$T$GT$3map17h572dd941ff9a39d9E>
  209f84:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  209f89:	48 83 c4 38          	add    $0x38,%rsp
  209f8d:	c3                   	retq   
  209f8e:	cc                   	int3   
  209f8f:	cc                   	int3   

0000000000209f90 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE>:
    /// assert_eq!(iter.advance_by(0), Ok(()));
    /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
    /// ```
    #[inline]
    #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
    fn advance_by(&mut self, n: usize) -> Result<(), usize> {
  209f90:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  209f97:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209f9c:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  209fa3:	00 
  209fa4:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  209fab:	00 
        for i in 0..n {
  209fac:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  209fb3:	00 00 
  209fb5:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  209fba:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  209fbf:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  209fc4:	e8 77 6e 00 00       	callq  210e40 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17haabf9c3393bbf5bcE>
  209fc9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209fce:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  209fd3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209fd8:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  209fdd:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  209fe2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209fe7:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  209fec:	e8 ef 6d 00 00       	callq  210de0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hde79bfc4fb025d57E>
  209ff1:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  209ff6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209ffb:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20a000:	48 85 c0             	test   %rax,%rax
  20a003:	74 06                	je     20a00b <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x7b>
  20a005:	eb 00                	jmp    20a007 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x77>
  20a007:	eb 10                	jmp    20a019 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x89>
  20a009:	0f 0b                	ud2    
            self.next().ok_or(i)?;
        }
        Ok(())
  20a00b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20a012:	00 00 
    }
  20a014:	e9 2f 01 00 00       	jmpq   20a148 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x1b8>
  20a019:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        for i in 0..n {
  20a01e:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20a023:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a028:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20a02f:	00 
  20a030:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20a037:	00 
  20a038:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20a03f:	00 
            self.next().ok_or(i)?;
  20a040:	e8 ab fe ff ff       	callq  209ef0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13cb05e389aec27dE>
  20a045:	48 89 94 24 d8 00 00 	mov    %rdx,0xd8(%rsp)
  20a04c:	00 
  20a04d:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20a054:	00 
  20a055:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20a05c:	00 
  20a05d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20a064:	00 
  20a065:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20a06c:	00 
  20a06d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20a074:	00 
  20a075:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a07a:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20a081:	00 
  20a082:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  20a089:	00 
  20a08a:	e8 c1 b2 ff ff       	callq  205350 <_ZN4core6option15Option$LT$T$GT$5ok_or17ha5082bdb99afd9f4E>
  20a08f:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  20a096:	00 
  20a097:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20a09e:	00 
  20a09f:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20a0a6:	00 
  20a0a7:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20a0ae:	00 
  20a0af:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  20a0b6:	00 
  20a0b7:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20a0be:	00 
  20a0bf:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  20a0c6:	00 
  20a0c7:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  20a0ce:	00 
  20a0cf:	e8 7c 85 00 00       	callq  212650 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E>
  20a0d4:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
  20a0db:	00 
  20a0dc:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20a0e3:	00 
  20a0e4:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20a0eb:	00 
  20a0ec:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20a0f1:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20a0f8:	00 
  20a0f9:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20a0fe:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20a103:	48 85 c0             	test   %rax,%rax
  20a106:	74 06                	je     20a10e <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x17e>
  20a108:	eb 00                	jmp    20a10a <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x17a>
  20a10a:	eb 1e                	jmp    20a12a <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x19a>
  20a10c:	0f 0b                	ud2    
  20a10e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20a113:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20a11a:	00 
  20a11b:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20a122:	00 
  20a123:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20a128:	eb 30                	jmp    20a15a <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x1ca>
  20a12a:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  20a12f:	48 89 bc 24 00 01 00 	mov    %rdi,0x100(%rsp)
  20a136:	00 
  20a137:	e8 54 80 00 00       	callq  212190 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h04f8868a7960e59eE>
  20a13c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20a141:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  20a146:	eb 00                	jmp    20a148 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x1b8>
  20a148:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20a14d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20a152:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  20a159:	c3                   	retq   
        for i in 0..n {
  20a15a:	e9 88 fe ff ff       	jmpq   209fe7 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE+0x57>
  20a15f:	cc                   	int3   

000000000020a160 <_ZN4core4iter6traits8iterator8Iterator3map17h8f2242c1760814f9E>:
    ///     println!("{}", x);
    /// }
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn map<B, F>(self, f: F) -> Map<Self, F>
  20a160:	48 83 ec 28          	sub    $0x28,%rsp
  20a164:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a169:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    where
        Self: Sized,
        F: FnMut(Self::Item) -> B,
    {
        Map::new(self, f)
  20a16e:	e8 ad 01 00 00       	callq  20a320 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17hc04731d6833ab0a1E>
  20a173:	48 89 04 24          	mov    %rax,(%rsp)
  20a177:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20a17c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a181:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20a185:	48 83 c4 28          	add    $0x28,%rsp
  20a189:	c3                   	retq   
  20a18a:	cc                   	int3   
  20a18b:	cc                   	int3   
  20a18c:	cc                   	int3   
  20a18d:	cc                   	int3   
  20a18e:	cc                   	int3   
  20a18f:	cc                   	int3   

000000000020a190 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E>:
    fn nth(&mut self, n: usize) -> Option<Self::Item> {
  20a190:	48 83 ec 78          	sub    $0x78,%rsp
  20a194:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a199:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a19e:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        self.advance_by(n).ok()?;
  20a1a3:	e8 e8 fd ff ff       	callq  209f90 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h2a3fab78ecfd80eeE>
  20a1a8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a1ad:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20a1b2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a1b7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20a1bc:	e8 af 81 00 00       	callq  212370 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE>
  20a1c1:	88 44 24 07          	mov    %al,0x7(%rsp)
  20a1c5:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a1c9:	0f b6 f8             	movzbl %al,%edi
  20a1cc:	83 e7 01             	and    $0x1,%edi
  20a1cf:	e8 5c ba ff ff       	callq  205c30 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1b504e8655c91a2cE>
  20a1d4:	24 01                	and    $0x1,%al
  20a1d6:	88 44 24 37          	mov    %al,0x37(%rsp)
  20a1da:	0f b6 44 24 37       	movzbl 0x37(%rsp),%eax
  20a1df:	a8 01                	test   $0x1,%al
  20a1e1:	74 06                	je     20a1e9 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0x59>
  20a1e3:	eb 00                	jmp    20a1e5 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0x55>
  20a1e5:	eb 2c                	jmp    20a213 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0x83>
  20a1e7:	0f 0b                	ud2    
  20a1e9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.next()
  20a1ee:	e8 fd fc ff ff       	callq  209ef0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13cb05e389aec27dE>
  20a1f3:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  20a1f8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20a1fd:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20a202:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a207:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20a20c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a211:	eb 34                	jmp    20a247 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0xb7>
        self.advance_by(n).ok()?;
  20a213:	e8 78 ba ff ff       	callq  205c90 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hfc22b99dc79926f8E>
  20a218:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  20a21d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20a222:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20a227:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a22c:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20a231:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  20a236:	eb 00                	jmp    20a238 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0xa8>
  20a238:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a23d:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  20a242:	48 83 c4 78          	add    $0x78,%rsp
  20a246:	c3                   	retq   
  20a247:	eb ef                	jmp    20a238 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E+0xa8>
  20a249:	cc                   	int3   
  20a24a:	cc                   	int3   
  20a24b:	cc                   	int3   
  20a24c:	cc                   	int3   
  20a24d:	cc                   	int3   
  20a24e:	cc                   	int3   
  20a24f:	cc                   	int3   

000000000020a250 <_ZN4core4iter6traits8iterator8Iterator4fuse17h7acc149d3cac7533E>:
    /// assert_eq!(iter.next(), None);
    /// assert_eq!(iter.next(), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn fuse(self) -> Fuse<Self>
  20a250:	48 83 ec 28          	sub    $0x28,%rsp
  20a254:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20a259:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    where
        Self: Sized,
    {
        Fuse::new(self)
  20a25e:	e8 fd 89 00 00       	callq  212c60 <_ZN4core4iter8adapters4fuse13Fuse$LT$I$GT$3new17h2c7cdda1f878b301E>
  20a263:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a268:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20a26d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20a272:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20a277:	48 83 c4 28          	add    $0x28,%rsp
  20a27b:	c3                   	retq   
  20a27c:	cc                   	int3   
  20a27d:	cc                   	int3   
  20a27e:	cc                   	int3   
  20a27f:	cc                   	int3   

000000000020a280 <_ZN4core4iter6traits8iterator8Iterator8flat_map17hca06f0b25c95b557E>:
    fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>
  20a280:	48 83 ec 28          	sub    $0x28,%rsp
  20a284:	48 89 f8             	mov    %rdi,%rax
  20a287:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a28c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20a291:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
        FlatMap::new(self, f)
  20a296:	e8 c5 af 00 00       	callq  215260 <_ZN4core4iter8adapters7flatten24FlatMap$LT$I$C$U$C$F$GT$3new17hf08ecf6d2857556eE>
  20a29b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20a2a0:	48 83 c4 28          	add    $0x28,%rsp
  20a2a4:	c3                   	retq   
  20a2a5:	cc                   	int3   
  20a2a6:	cc                   	int3   
  20a2a7:	cc                   	int3   
  20a2a8:	cc                   	int3   
  20a2a9:	cc                   	int3   
  20a2aa:	cc                   	int3   
  20a2ab:	cc                   	int3   
  20a2ac:	cc                   	int3   
  20a2ad:	cc                   	int3   
  20a2ae:	cc                   	int3   
  20a2af:	cc                   	int3   

000000000020a2b0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h56f355a7c0941633E>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  20a2b0:	48 83 ec 68          	sub    $0x68,%rsp
  20a2b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a2b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        Map { iter, f }
  20a2bd:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20a2c2:	ba 50 00 00 00       	mov    $0x50,%edx
  20a2c7:	e8 d4 37 01 00       	callq  21daa0 <memcpy>
  20a2cc:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a2d0:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20a2d5:	ba 50 00 00 00       	mov    $0x50,%edx
  20a2da:	e8 c1 37 01 00       	callq  21daa0 <memcpy>
  20a2df:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20a2e4:	48 83 c4 68          	add    $0x68,%rsp
  20a2e8:	c3                   	retq   
  20a2e9:	cc                   	int3   
  20a2ea:	cc                   	int3   
  20a2eb:	cc                   	int3   
  20a2ec:	cc                   	int3   
  20a2ed:	cc                   	int3   
  20a2ee:	cc                   	int3   
  20a2ef:	cc                   	int3   

000000000020a2f0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h9550593ca33b45d6E>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  20a2f0:	48 83 ec 28          	sub    $0x28,%rsp
  20a2f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a2f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  20a2fe:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a302:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  20a307:	48 8b 04 24          	mov    (%rsp),%rax
  20a30b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a310:	48 83 c4 28          	add    $0x28,%rsp
  20a314:	c3                   	retq   
  20a315:	cc                   	int3   
  20a316:	cc                   	int3   
  20a317:	cc                   	int3   
  20a318:	cc                   	int3   
  20a319:	cc                   	int3   
  20a31a:	cc                   	int3   
  20a31b:	cc                   	int3   
  20a31c:	cc                   	int3   
  20a31d:	cc                   	int3   
  20a31e:	cc                   	int3   
  20a31f:	cc                   	int3   

000000000020a320 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17hc04731d6833ab0a1E>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  20a320:	48 83 ec 28          	sub    $0x28,%rsp
  20a324:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a329:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  20a32e:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a332:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  20a337:	48 8b 04 24          	mov    (%rsp),%rax
  20a33b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a340:	48 83 c4 28          	add    $0x28,%rsp
  20a344:	c3                   	retq   
  20a345:	cc                   	int3   
  20a346:	cc                   	int3   
  20a347:	cc                   	int3   
  20a348:	cc                   	int3   
  20a349:	cc                   	int3   
  20a34a:	cc                   	int3   
  20a34b:	cc                   	int3   
  20a34c:	cc                   	int3   
  20a34d:	cc                   	int3   
  20a34e:	cc                   	int3   
  20a34f:	cc                   	int3   

000000000020a350 <_ZN4core9panicking13assert_failed17h3a419d42b0d29573E>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
  20a350:	48 83 ec 58          	sub    $0x58,%rsp
  20a354:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20a359:	48 89 d1             	mov    %rdx,%rcx
  20a35c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a361:	40 88 f8             	mov    %dil,%al
  20a364:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20a369:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a36e:	88 44 24 57          	mov    %al,0x57(%rsp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
  20a372:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  20a376:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  20a37b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  20a37f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20a384:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  20a388:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20a38d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  20a391:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20a396:	48 8b 0a             	mov    (%rdx),%rcx
  20a399:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  20a39d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20a3a2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20a3a7:	48 89 e1             	mov    %rsp,%rcx
  20a3aa:	4c 89 01             	mov    %r8,(%rcx)
  20a3ad:	0f b6 f8             	movzbl %al,%edi
  20a3b0:	4c 8d 05 e9 4d 01 00 	lea    0x14de9(%rip),%r8        # 21f1a0 <memset+0x16e0>
  20a3b7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20a3bc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  20a3c1:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  20a3c6:	4c 89 c2             	mov    %r8,%rdx
  20a3c9:	e8 72 0d 01 00       	callq  21b140 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  20a3ce:	0f 0b                	ud2    

000000000020a3d0 <_ZN4core9panicking13assert_failed17h767e4ad0380e1b13E>:
pub fn assert_failed<T, U>(
  20a3d0:	48 83 ec 58          	sub    $0x58,%rsp
  20a3d4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20a3d9:	48 89 d1             	mov    %rdx,%rcx
  20a3dc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a3e1:	40 88 f8             	mov    %dil,%al
  20a3e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20a3e9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a3ee:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  20a3f2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  20a3f6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  20a3fb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  20a3ff:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20a404:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  20a408:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20a40d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  20a411:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20a416:	48 8b 0a             	mov    (%rdx),%rcx
  20a419:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  20a41d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20a422:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20a427:	48 89 e1             	mov    %rsp,%rcx
  20a42a:	4c 89 01             	mov    %r8,(%rcx)
  20a42d:	0f b6 f8             	movzbl %al,%edi
  20a430:	4c 8d 05 89 4d 01 00 	lea    0x14d89(%rip),%r8        # 21f1c0 <memset+0x1700>
  20a437:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20a43c:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  20a441:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  20a446:	4c 89 c2             	mov    %r8,%rdx
  20a449:	e8 f2 0c 01 00       	callq  21b140 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  20a44e:	0f 0b                	ud2    

000000000020a450 <_ZN4core9panicking13assert_failed17hf745d0fc64896bf3E>:
pub fn assert_failed<T, U>(
  20a450:	48 83 ec 58          	sub    $0x58,%rsp
  20a454:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20a459:	48 89 d1             	mov    %rdx,%rcx
  20a45c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a461:	40 88 f8             	mov    %dil,%al
  20a464:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20a469:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a46e:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  20a472:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  20a476:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  20a47b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  20a47f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20a484:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  20a488:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20a48d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  20a491:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20a496:	48 8b 0a             	mov    (%rdx),%rcx
  20a499:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  20a49d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20a4a2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20a4a7:	48 89 e1             	mov    %rsp,%rcx
  20a4aa:	4c 89 01             	mov    %r8,(%rcx)
  20a4ad:	0f b6 f8             	movzbl %al,%edi
  20a4b0:	4c 8d 05 29 4d 01 00 	lea    0x14d29(%rip),%r8        # 21f1e0 <memset+0x1720>
  20a4b7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20a4bc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  20a4c1:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  20a4c6:	4c 89 c2             	mov    %r8,%rdx
  20a4c9:	e8 72 0c 01 00       	callq  21b140 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  20a4ce:	0f 0b                	ud2    

000000000020a4d0 <_ZN4core9panicking13panic_display17h436238fbdc089216E>:
pub fn panic_display<T: fmt::Display>(x: &T) -> ! {
  20a4d0:	48 83 ec 78          	sub    $0x78,%rsp
  20a4d4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20a4d9:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    panic_fmt(format_args!("{}", *x));
  20a4de:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20a4e3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  20a4e8:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  20a4ed:	48 8b 35 ec 62 01 00 	mov    0x162ec(%rip),%rsi        # 2207e0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  20a4f4:	e8 27 f1 00 00       	callq  219620 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  20a4f9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a4fe:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20a503:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20a508:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20a50d:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20a512:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20a517:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
  20a51c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20a521:	48 8d 35 d8 4c 01 00 	lea    0x14cd8(%rip),%rsi        # 21f200 <memset+0x1740>
  20a528:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20a52e:	4c 89 c2             	mov    %r8,%rdx
  20a531:	e8 ca a9 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20a536:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20a53b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20a540:	e8 bb 0b 01 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20a545:	0f 0b                	ud2    
  20a547:	cc                   	int3   
  20a548:	cc                   	int3   
  20a549:	cc                   	int3   
  20a54a:	cc                   	int3   
  20a54b:	cc                   	int3   
  20a54c:	cc                   	int3   
  20a54d:	cc                   	int3   
  20a54e:	cc                   	int3   
  20a54f:	cc                   	int3   

000000000020a550 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h043b2749de415b60E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
  20a550:	48 83 ec 18          	sub    $0x18,%rsp
  20a554:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.it.next().copied()
  20a559:	e8 02 8a 00 00       	callq  212f60 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E>
  20a55e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a563:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20a568:	e8 33 b6 ff ff       	callq  205ba0 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E>
  20a56d:	88 44 24 06          	mov    %al,0x6(%rsp)
  20a571:	88 54 24 07          	mov    %dl,0x7(%rsp)
  20a575:	8a 54 24 07          	mov    0x7(%rsp),%dl
  20a579:	8a 44 24 06          	mov    0x6(%rsp),%al
    }
  20a57d:	24 01                	and    $0x1,%al
  20a57f:	48 83 c4 18          	add    $0x18,%rsp
  20a583:	c3                   	retq   
  20a584:	cc                   	int3   
  20a585:	cc                   	int3   
  20a586:	cc                   	int3   
  20a587:	cc                   	int3   
  20a588:	cc                   	int3   
  20a589:	cc                   	int3   
  20a58a:	cc                   	int3   
  20a58b:	cc                   	int3   
  20a58c:	cc                   	int3   
  20a58d:	cc                   	int3   
  20a58e:	cc                   	int3   
  20a58f:	cc                   	int3   

000000000020a590 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb66ea3ee7d7e4e38E>:
impl<T, I> ops::IndexMut<I> for [T]
where
    I: SliceIndex<[T]>,
{
    #[inline]
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  20a590:	48 83 ec 38          	sub    $0x38,%rsp
  20a594:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20a599:	48 89 f2             	mov    %rsi,%rdx
  20a59c:	48 89 fe             	mov    %rdi,%rsi
  20a59f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20a5a4:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20a5a9:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20a5ae:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  20a5b3:	e8 78 67 00 00       	callq  210d30 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5113fb0e44857482E>
  20a5b8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a5bd:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20a5c2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20a5c7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20a5cc:	48 83 c4 38          	add    $0x38,%rsp
  20a5d0:	c3                   	retq   
  20a5d1:	cc                   	int3   
  20a5d2:	cc                   	int3   
  20a5d3:	cc                   	int3   
  20a5d4:	cc                   	int3   
  20a5d5:	cc                   	int3   
  20a5d6:	cc                   	int3   
  20a5d7:	cc                   	int3   
  20a5d8:	cc                   	int3   
  20a5d9:	cc                   	int3   
  20a5da:	cc                   	int3   
  20a5db:	cc                   	int3   
  20a5dc:	cc                   	int3   
  20a5dd:	cc                   	int3   
  20a5de:	cc                   	int3   
  20a5df:	cc                   	int3   

000000000020a5e0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc83c78073ebc3b89E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  20a5e0:	48 83 ec 28          	sub    $0x28,%rsp
  20a5e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a5e9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        index.index_mut(self)
  20a5ee:	e8 3d 6b 00 00       	callq  211130 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5ccb660a8b622ab1E>
  20a5f3:	48 89 04 24          	mov    %rax,(%rsp)
  20a5f7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20a5fc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a601:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20a605:	48 83 c4 28          	add    $0x28,%rsp
  20a609:	c3                   	retq   
  20a60a:	cc                   	int3   
  20a60b:	cc                   	int3   
  20a60c:	cc                   	int3   
  20a60d:	cc                   	int3   
  20a60e:	cc                   	int3   
  20a60f:	cc                   	int3   

000000000020a610 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE>:

            #[inline]
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  20a610:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  20a617:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20a61c:	66 89 c8             	mov    %cx,%ax
  20a61f:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  20a624:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  20a62b:	00 
  20a62c:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20a633:	00 
  20a634:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  20a63b:	00 
  20a63c:	66 89 84 24 9e 00 00 	mov    %ax,0x9e(%rsp)
  20a643:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  20a644:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20a64b:	00 
  20a64c:	be 10 00 00 00       	mov    $0x10,%esi
  20a651:	e8 0a 0b 00 00       	callq  20b160 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  20a656:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20a65b:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  20a660:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20a667:	00 
  20a668:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  20a66f:	00 
  20a670:	48 8b 44 24 70       	mov    0x70(%rsp),%rax

                assert!(range.start < Self::BIT_LENGTH);
  20a675:	48 83 f8 10          	cmp    $0x10,%rax
  20a679:	0f 92 c0             	setb   %al
  20a67c:	34 ff                	xor    $0xff,%al
  20a67e:	a8 01                	test   $0x1,%al
  20a680:	75 14                	jne    20a696 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x86>
  20a682:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  20a687:	48 83 f8 10          	cmp    $0x10,%rax
  20a68b:	0f 96 c0             	setbe  %al
  20a68e:	34 ff                	xor    $0xff,%al
  20a690:	a8 01                	test   $0x1,%al
  20a692:	75 34                	jne    20a6c8 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xb8>
  20a694:	eb 1a                	jmp    20a6b0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xa0>
                assert!(range.start < Self::BIT_LENGTH);
  20a696:	48 8d 3d 06 62 ff ff 	lea    -0x9dfa(%rip),%rdi        # 2008a3 <str.0+0x163>
  20a69d:	48 8d 15 6c 4b 01 00 	lea    0x14b6c(%rip),%rdx        # 21f210 <memset+0x1750>
  20a6a4:	be 30 00 00 00       	mov    $0x30,%esi
  20a6a9:	e8 82 09 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a6ae:	0f 0b                	ud2    
  20a6b0:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20a6b5:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                assert!(range.start < range.end);
  20a6ba:	48 39 c8             	cmp    %rcx,%rax
  20a6bd:	0f 92 c0             	setb   %al
  20a6c0:	34 ff                	xor    $0xff,%al
  20a6c2:	a8 01                	test   $0x1,%al
  20a6c4:	75 37                	jne    20a6fd <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xed>
  20a6c6:	eb 1a                	jmp    20a6e2 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xd2>
                assert!(range.end <= Self::BIT_LENGTH);
  20a6c8:	48 8d 3d 5f 62 ff ff 	lea    -0x9da1(%rip),%rdi        # 20092e <str.0+0x1ee>
  20a6cf:	48 8d 15 3a 4b 01 00 	lea    0x14b3a(%rip),%rdx        # 21f210 <memset+0x1750>
  20a6d6:	be 2f 00 00 00       	mov    $0x2f,%esi
  20a6db:	e8 50 09 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a6e0:	0f 0b                	ud2    
  20a6e2:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20a6e7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a6ec:	48 29 c8             	sub    %rcx,%rax
  20a6ef:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20a6f4:	0f 92 c0             	setb   %al
  20a6f7:	a8 01                	test   $0x1,%al
  20a6f9:	75 37                	jne    20a732 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x122>
  20a6fb:	eb 1a                	jmp    20a717 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x107>
                assert!(range.start < range.end);
  20a6fd:	48 8d 3d 59 62 ff ff 	lea    -0x9da7(%rip),%rdi        # 20095d <str.0+0x21d>
  20a704:	48 8d 15 05 4b 01 00 	lea    0x14b05(%rip),%rdx        # 21f210 <memset+0x1750>
  20a70b:	be 29 00 00 00       	mov    $0x29,%esi
  20a710:	e8 1b 09 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a715:	0f 0b                	ud2    
  20a717:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a71c:	b8 10 00 00 00       	mov    $0x10,%eax
  20a721:	48 29 c8             	sub    %rcx,%rax
  20a724:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20a729:	0f 92 c0             	setb   %al
  20a72c:	a8 01                	test   $0x1,%al
  20a72e:	75 46                	jne    20a776 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x166>
  20a730:	eb 1a                	jmp    20a74c <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x13c>
  20a732:	48 8d 3d 57 62 ff ff 	lea    -0x9da9(%rip),%rdi        # 200990 <str.0>
  20a739:	48 8d 15 d0 4a 01 00 	lea    0x14ad0(%rip),%rdx        # 21f210 <memset+0x1750>
  20a740:	be 21 00 00 00       	mov    $0x21,%esi
  20a745:	e8 e6 08 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a74a:	0f 0b                	ud2    
  20a74c:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  20a751:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  20a756:	48 89 c8             	mov    %rcx,%rax
  20a759:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a75d:	48 83 f8 00          	cmp    $0x0,%rax
  20a761:	0f 95 c0             	setne  %al
  20a764:	66 83 e1 0f          	and    $0xf,%cx
  20a768:	66 d3 e2             	shl    %cl,%dx
  20a76b:	66 89 54 24 4e       	mov    %dx,0x4e(%rsp)
  20a770:	a8 01                	test   $0x1,%al
  20a772:	75 37                	jne    20a7ab <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x19b>
  20a774:	eb 1a                	jmp    20a790 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x180>
  20a776:	48 8d 3d 13 62 ff ff 	lea    -0x9ded(%rip),%rdi        # 200990 <str.0>
  20a77d:	48 8d 15 8c 4a 01 00 	lea    0x14a8c(%rip),%rdx        # 21f210 <memset+0x1750>
  20a784:	be 21 00 00 00       	mov    $0x21,%esi
  20a789:	e8 a2 08 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a78e:	0f 0b                	ud2    
  20a790:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20a795:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20a79a:	48 29 c8             	sub    %rcx,%rax
  20a79d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20a7a2:	0f 92 c0             	setb   %al
  20a7a5:	a8 01                	test   $0x1,%al
  20a7a7:	75 37                	jne    20a7e0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1d0>
  20a7a9:	eb 1a                	jmp    20a7c5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1b5>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a7ab:	48 8d 3d 0e 62 ff ff 	lea    -0x9df2(%rip),%rdi        # 2009c0 <str.1>
  20a7b2:	48 8d 15 57 4a 01 00 	lea    0x14a57(%rip),%rdx        # 21f210 <memset+0x1750>
  20a7b9:	be 23 00 00 00       	mov    $0x23,%esi
  20a7be:	e8 6d 08 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a7c3:	0f 0b                	ud2    
  20a7c5:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20a7ca:	b8 10 00 00 00       	mov    $0x10,%eax
  20a7cf:	48 29 c8             	sub    %rcx,%rax
  20a7d2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a7d7:	0f 92 c0             	setb   %al
  20a7da:	a8 01                	test   $0x1,%al
  20a7dc:	75 46                	jne    20a824 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x214>
  20a7de:	eb 1a                	jmp    20a7fa <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1ea>
  20a7e0:	48 8d 3d a9 61 ff ff 	lea    -0x9e57(%rip),%rdi        # 200990 <str.0>
  20a7e7:	48 8d 15 22 4a 01 00 	lea    0x14a22(%rip),%rdx        # 21f210 <memset+0x1750>
  20a7ee:	be 21 00 00 00       	mov    $0x21,%esi
  20a7f3:	e8 38 08 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a7f8:	0f 0b                	ud2    
  20a7fa:	66 8b 54 24 4e       	mov    0x4e(%rsp),%dx
  20a7ff:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a804:	48 89 c8             	mov    %rcx,%rax
  20a807:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a80b:	48 83 f8 00          	cmp    $0x0,%rax
  20a80f:	0f 95 c0             	setne  %al
  20a812:	66 83 e1 0f          	and    $0xf,%cx
  20a816:	66 d3 ea             	shr    %cl,%dx
  20a819:	66 89 54 24 36       	mov    %dx,0x36(%rsp)
  20a81e:	a8 01                	test   $0x1,%al
  20a820:	75 34                	jne    20a856 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x246>
  20a822:	eb 1a                	jmp    20a83e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x22e>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20a824:	48 8d 3d 65 61 ff ff 	lea    -0x9e9b(%rip),%rdi        # 200990 <str.0>
  20a82b:	48 8d 15 de 49 01 00 	lea    0x149de(%rip),%rdx        # 21f210 <memset+0x1750>
  20a832:	be 21 00 00 00       	mov    $0x21,%esi
  20a837:	e8 f4 07 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a83c:	0f 0b                	ud2    
  20a83e:	66 8b 44 24 36       	mov    0x36(%rsp),%ax
  20a843:	66 8b 4c 24 6e       	mov    0x6e(%rsp),%cx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a848:	66 39 c8             	cmp    %cx,%ax
  20a84b:	0f 94 c0             	sete   %al
  20a84e:	34 ff                	xor    $0xff,%al
  20a850:	a8 01                	test   $0x1,%al
  20a852:	75 37                	jne    20a88b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x27b>
  20a854:	eb 1a                	jmp    20a870 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x260>
  20a856:	48 8d 3d 93 61 ff ff 	lea    -0x9e6d(%rip),%rdi        # 2009f0 <str.2>
  20a85d:	48 8d 15 ac 49 01 00 	lea    0x149ac(%rip),%rdx        # 21f210 <memset+0x1750>
  20a864:	be 24 00 00 00       	mov    $0x24,%esi
  20a869:	e8 c2 07 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a86e:	0f 0b                	ud2    
  20a870:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                        "value does not fit into bit range");

                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20a875:	b8 10 00 00 00       	mov    $0x10,%eax
  20a87a:	48 29 c8             	sub    %rcx,%rax
  20a87d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a882:	0f 92 c0             	setb   %al
  20a885:	a8 01                	test   $0x1,%al
  20a887:	75 45                	jne    20a8ce <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2be>
  20a889:	eb 1a                	jmp    20a8a5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x295>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20a88b:	48 8d 3d 82 61 ff ff 	lea    -0x9e7e(%rip),%rdi        # 200a14 <str.2+0x24>
  20a892:	48 8d 15 77 49 01 00 	lea    0x14977(%rip),%rdx        # 21f210 <memset+0x1750>
  20a899:	be 21 00 00 00       	mov    $0x21,%esi
  20a89e:	e8 8d 07 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a8a3:	0f 0b                	ud2    
  20a8a5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20a8aa:	48 89 c8             	mov    %rcx,%rax
  20a8ad:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a8b1:	48 83 f8 00          	cmp    $0x0,%rax
  20a8b5:	0f 95 c0             	setne  %al
  20a8b8:	66 83 e1 0f          	and    $0xf,%cx
  20a8bc:	66 ba ff ff          	mov    $0xffff,%dx
  20a8c0:	66 d3 e2             	shl    %cl,%dx
  20a8c3:	66 89 54 24 26       	mov    %dx,0x26(%rsp)
  20a8c8:	a8 01                	test   $0x1,%al
  20a8ca:	75 37                	jne    20a903 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2f3>
  20a8cc:	eb 1a                	jmp    20a8e8 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2d8>
  20a8ce:	48 8d 3d bb 60 ff ff 	lea    -0x9f45(%rip),%rdi        # 200990 <str.0>
  20a8d5:	48 8d 15 34 49 01 00 	lea    0x14934(%rip),%rdx        # 21f210 <memset+0x1750>
  20a8dc:	be 21 00 00 00       	mov    $0x21,%esi
  20a8e1:	e8 4a 07 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a8e6:	0f 0b                	ud2    
  20a8e8:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                                    (Self::BIT_LENGTH - range.end) >>
  20a8ed:	b8 10 00 00 00       	mov    $0x10,%eax
  20a8f2:	48 29 c8             	sub    %rcx,%rax
  20a8f5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a8fa:	0f 92 c0             	setb   %al
  20a8fd:	a8 01                	test   $0x1,%al
  20a8ff:	75 46                	jne    20a947 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x337>
  20a901:	eb 1a                	jmp    20a91d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x30d>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20a903:	48 8d 3d b6 60 ff ff 	lea    -0x9f4a(%rip),%rdi        # 2009c0 <str.1>
  20a90a:	48 8d 15 ff 48 01 00 	lea    0x148ff(%rip),%rdx        # 21f210 <memset+0x1750>
  20a911:	be 23 00 00 00       	mov    $0x23,%esi
  20a916:	e8 15 07 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a91b:	0f 0b                	ud2    
  20a91d:	66 8b 54 24 26       	mov    0x26(%rsp),%dx
  20a922:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20a927:	48 89 c8             	mov    %rcx,%rax
  20a92a:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a92e:	48 83 f8 00          	cmp    $0x0,%rax
  20a932:	0f 95 c0             	setne  %al
  20a935:	66 83 e1 0f          	and    $0xf,%cx
  20a939:	66 d3 ea             	shr    %cl,%dx
  20a93c:	66 89 54 24 16       	mov    %dx,0x16(%rsp)
  20a941:	a8 01                	test   $0x1,%al
  20a943:	75 46                	jne    20a98b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x37b>
  20a945:	eb 1a                	jmp    20a961 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x351>
                                    (Self::BIT_LENGTH - range.end) >>
  20a947:	48 8d 3d 42 60 ff ff 	lea    -0x9fbe(%rip),%rdi        # 200990 <str.0>
  20a94e:	48 8d 15 bb 48 01 00 	lea    0x148bb(%rip),%rdx        # 21f210 <memset+0x1750>
  20a955:	be 21 00 00 00       	mov    $0x21,%esi
  20a95a:	e8 d1 06 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a95f:	0f 0b                	ud2    
  20a961:	66 8b 54 24 16       	mov    0x16(%rsp),%dx
  20a966:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20a96b:	48 89 c8             	mov    %rcx,%rax
  20a96e:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a972:	48 83 f8 00          	cmp    $0x0,%rax
  20a976:	0f 95 c0             	setne  %al
  20a979:	66 83 e1 0f          	and    $0xf,%cx
  20a97d:	66 d3 ea             	shr    %cl,%dx
  20a980:	66 89 54 24 14       	mov    %dx,0x14(%rsp)
  20a985:	a8 01                	test   $0x1,%al
  20a987:	75 46                	jne    20a9cf <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x3bf>
  20a989:	eb 1a                	jmp    20a9a5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x395>
  20a98b:	48 8d 3d 5e 60 ff ff 	lea    -0x9fa2(%rip),%rdi        # 2009f0 <str.2>
  20a992:	48 8d 15 77 48 01 00 	lea    0x14877(%rip),%rdx        # 21f210 <memset+0x1750>
  20a999:	be 24 00 00 00       	mov    $0x24,%esi
  20a99e:	e8 8d 06 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a9a3:	0f 0b                	ud2    
  20a9a5:	66 8b 54 24 14       	mov    0x14(%rsp),%dx
  20a9aa:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20a9af:	48 89 c8             	mov    %rcx,%rax
  20a9b2:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20a9b6:	48 83 f8 00          	cmp    $0x0,%rax
  20a9ba:	0f 95 c0             	setne  %al
  20a9bd:	66 83 e1 0f          	and    $0xf,%cx
  20a9c1:	66 d3 e2             	shl    %cl,%dx
  20a9c4:	66 89 54 24 12       	mov    %dx,0x12(%rsp)
  20a9c9:	a8 01                	test   $0x1,%al
  20a9cb:	75 64                	jne    20aa31 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x421>
  20a9cd:	eb 1a                	jmp    20a9e9 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x3d9>
  20a9cf:	48 8d 3d 1a 60 ff ff 	lea    -0x9fe6(%rip),%rdi        # 2009f0 <str.2>
  20a9d6:	48 8d 15 33 48 01 00 	lea    0x14833(%rip),%rdx        # 21f210 <memset+0x1750>
  20a9dd:	be 24 00 00 00       	mov    $0x24,%esi
  20a9e2:	e8 49 06 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a9e7:	0f 0b                	ud2    
  20a9e9:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  20a9ee:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20a9f3:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20a9f8:	66 8b 44 24 12       	mov    0x12(%rsp),%ax
  20a9fd:	66 83 f0 ff          	xor    $0xffff,%ax
  20aa01:	66 89 84 24 b6 00 00 	mov    %ax,0xb6(%rsp)
  20aa08:	00 
                                    range.start << range.start);

                // set bits
                *self = (*self & bitmask) | (value << range.start);
  20aa09:	66 23 06             	and    (%rsi),%ax
  20aa0c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  20aa11:	48 89 c8             	mov    %rcx,%rax
  20aa14:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20aa18:	48 83 f8 00          	cmp    $0x0,%rax
  20aa1c:	0f 95 c0             	setne  %al
  20aa1f:	66 83 e1 0f          	and    $0xf,%cx
  20aa23:	66 d3 e2             	shl    %cl,%dx
  20aa26:	66 89 54 24 10       	mov    %dx,0x10(%rsp)
  20aa2b:	a8 01                	test   $0x1,%al
  20aa2d:	75 33                	jne    20aa62 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x452>
  20aa2f:	eb 1a                	jmp    20aa4b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x43b>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20aa31:	48 8d 3d 88 5f ff ff 	lea    -0xa078(%rip),%rdi        # 2009c0 <str.1>
  20aa38:	48 8d 15 d1 47 01 00 	lea    0x147d1(%rip),%rdx        # 21f210 <memset+0x1750>
  20aa3f:	be 23 00 00 00       	mov    $0x23,%esi
  20aa44:	e8 e7 05 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20aa49:	0f 0b                	ud2    
  20aa4b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20aa50:	66 8b 54 24 10       	mov    0x10(%rsp),%dx
  20aa55:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
                *self = (*self & bitmask) | (value << range.start);
  20aa5a:	66 09 d1             	or     %dx,%cx
  20aa5d:	66 89 08             	mov    %cx,(%rax)

                self
            }
  20aa60:	eb 1a                	jmp    20aa7c <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x46c>
                *self = (*self & bitmask) | (value << range.start);
  20aa62:	48 8d 3d 57 5f ff ff 	lea    -0xa0a9(%rip),%rdi        # 2009c0 <str.1>
  20aa69:	48 8d 15 a0 47 01 00 	lea    0x147a0(%rip),%rdx        # 21f210 <memset+0x1750>
  20aa70:	be 23 00 00 00       	mov    $0x23,%esi
  20aa75:	e8 b6 05 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20aa7a:	0f 0b                	ud2    
  20aa7c:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            }
  20aa81:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  20aa88:	c3                   	retq   
  20aa89:	cc                   	int3   
  20aa8a:	cc                   	int3   
  20aa8b:	cc                   	int3   
  20aa8c:	cc                   	int3   
  20aa8d:	cc                   	int3   
  20aa8e:	cc                   	int3   
  20aa8f:	cc                   	int3   

000000000020aa90 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  20aa90:	48 83 ec 78          	sub    $0x78,%rsp
  20aa94:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20aa99:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  20aa9e:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20aaa3:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  20aaa8:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20aaad:	be 40 00 00 00       	mov    $0x40,%esi
  20aab2:	e8 a9 06 00 00       	callq  20b160 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  20aab7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20aabc:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20aac1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20aac6:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  20aacb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  20aad0:	48 83 f8 40          	cmp    $0x40,%rax
  20aad4:	0f 92 c0             	setb   %al
  20aad7:	34 ff                	xor    $0xff,%al
  20aad9:	a8 01                	test   $0x1,%al
  20aadb:	75 14                	jne    20aaf1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x61>
  20aadd:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  20aae2:	48 83 f8 40          	cmp    $0x40,%rax
  20aae6:	0f 96 c0             	setbe  %al
  20aae9:	34 ff                	xor    $0xff,%al
  20aaeb:	a8 01                	test   $0x1,%al
  20aaed:	75 34                	jne    20ab23 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x93>
  20aaef:	eb 1a                	jmp    20ab0b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  20aaf1:	48 8d 3d ab 5d ff ff 	lea    -0xa255(%rip),%rdi        # 2008a3 <str.0+0x163>
  20aaf8:	48 8d 15 11 47 01 00 	lea    0x14711(%rip),%rdx        # 21f210 <memset+0x1750>
  20aaff:	be 30 00 00 00       	mov    $0x30,%esi
  20ab04:	e8 27 05 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ab09:	0f 0b                	ud2    
  20ab0b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ab10:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                assert!(range.start < range.end);
  20ab15:	48 39 c8             	cmp    %rcx,%rax
  20ab18:	0f 92 c0             	setb   %al
  20ab1b:	34 ff                	xor    $0xff,%al
  20ab1d:	a8 01                	test   $0x1,%al
  20ab1f:	75 44                	jne    20ab65 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xd5>
  20ab21:	eb 1a                	jmp    20ab3d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  20ab23:	48 8d 3d 04 5e ff ff 	lea    -0xa1fc(%rip),%rdi        # 20092e <str.0+0x1ee>
  20ab2a:	48 8d 15 df 46 01 00 	lea    0x146df(%rip),%rdx        # 21f210 <memset+0x1750>
  20ab31:	be 2f 00 00 00       	mov    $0x2f,%esi
  20ab36:	e8 f5 04 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ab3b:	0f 0b                	ud2    
  20ab3d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20ab42:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  20ab47:	48 8b 00             	mov    (%rax),%rax
  20ab4a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ab4f:	b8 40 00 00 00       	mov    $0x40,%eax
  20ab54:	48 29 c8             	sub    %rcx,%rax
  20ab57:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ab5c:	0f 92 c0             	setb   %al
  20ab5f:	a8 01                	test   $0x1,%al
  20ab61:	75 46                	jne    20aba9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x119>
  20ab63:	eb 1a                	jmp    20ab7f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xef>
                assert!(range.start < range.end);
  20ab65:	48 8d 3d f1 5d ff ff 	lea    -0xa20f(%rip),%rdi        # 20095d <str.0+0x21d>
  20ab6c:	48 8d 15 9d 46 01 00 	lea    0x1469d(%rip),%rdx        # 21f210 <memset+0x1750>
  20ab73:	be 29 00 00 00       	mov    $0x29,%esi
  20ab78:	e8 b3 04 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ab7d:	0f 0b                	ud2    
  20ab7f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ab84:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  20ab89:	48 89 c8             	mov    %rcx,%rax
  20ab8c:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20ab90:	48 83 f8 00          	cmp    $0x0,%rax
  20ab94:	0f 95 c0             	setne  %al
  20ab97:	48 83 e1 3f          	and    $0x3f,%rcx
  20ab9b:	48 d3 e2             	shl    %cl,%rdx
  20ab9e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20aba3:	a8 01                	test   $0x1,%al
  20aba5:	75 37                	jne    20abde <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x14e>
  20aba7:	eb 1a                	jmp    20abc3 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x133>
  20aba9:	48 8d 3d e0 5d ff ff 	lea    -0xa220(%rip),%rdi        # 200990 <str.0>
  20abb0:	48 8d 15 59 46 01 00 	lea    0x14659(%rip),%rdx        # 21f210 <memset+0x1750>
  20abb7:	be 21 00 00 00       	mov    $0x21,%esi
  20abbc:	e8 6f 04 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20abc1:	0f 0b                	ud2    
  20abc3:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20abc8:	b8 40 00 00 00       	mov    $0x40,%eax
  20abcd:	48 29 c8             	sub    %rcx,%rax
  20abd0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20abd5:	0f 92 c0             	setb   %al
  20abd8:	a8 01                	test   $0x1,%al
  20abda:	75 46                	jne    20ac22 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x192>
  20abdc:	eb 1a                	jmp    20abf8 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x168>
  20abde:	48 8d 3d db 5d ff ff 	lea    -0xa225(%rip),%rdi        # 2009c0 <str.1>
  20abe5:	48 8d 15 24 46 01 00 	lea    0x14624(%rip),%rdx        # 21f210 <memset+0x1750>
  20abec:	be 23 00 00 00       	mov    $0x23,%esi
  20abf1:	e8 3a 04 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20abf6:	0f 0b                	ud2    
  20abf8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20abfd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20ac02:	48 89 c8             	mov    %rcx,%rax
  20ac05:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20ac09:	48 83 f8 00          	cmp    $0x0,%rax
  20ac0d:	0f 95 c0             	setne  %al
  20ac10:	48 83 e1 3f          	and    $0x3f,%rcx
  20ac14:	48 d3 ea             	shr    %cl,%rdx
  20ac17:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20ac1c:	a8 01                	test   $0x1,%al
  20ac1e:	75 4a                	jne    20ac6a <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1da>
  20ac20:	eb 1a                	jmp    20ac3c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1ac>
  20ac22:	48 8d 3d 67 5d ff ff 	lea    -0xa299(%rip),%rdi        # 200990 <str.0>
  20ac29:	48 8d 15 e0 45 01 00 	lea    0x145e0(%rip),%rdx        # 21f210 <memset+0x1750>
  20ac30:	be 21 00 00 00       	mov    $0x21,%esi
  20ac35:	e8 f6 03 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ac3a:	0f 0b                	ud2    
  20ac3c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20ac41:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20ac46:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
                bits >> range.start
  20ac4b:	48 89 c8             	mov    %rcx,%rax
  20ac4e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20ac52:	48 83 f8 00          	cmp    $0x0,%rax
  20ac56:	0f 95 c0             	setne  %al
  20ac59:	48 83 e1 3f          	and    $0x3f,%rcx
  20ac5d:	48 d3 ea             	shr    %cl,%rdx
  20ac60:	48 89 14 24          	mov    %rdx,(%rsp)
  20ac64:	a8 01                	test   $0x1,%al
  20ac66:	75 1e                	jne    20ac86 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1f6>
  20ac68:	eb 1a                	jmp    20ac84 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1f4>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  20ac6a:	48 8d 3d 7f 5d ff ff 	lea    -0xa281(%rip),%rdi        # 2009f0 <str.2>
  20ac71:	48 8d 15 98 45 01 00 	lea    0x14598(%rip),%rdx        # 21f210 <memset+0x1750>
  20ac78:	be 24 00 00 00       	mov    $0x24,%esi
  20ac7d:	e8 ae 03 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ac82:	0f 0b                	ud2    
            }
  20ac84:	eb 1a                	jmp    20aca0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x210>
                bits >> range.start
  20ac86:	48 8d 3d 63 5d ff ff 	lea    -0xa29d(%rip),%rdi        # 2009f0 <str.2>
  20ac8d:	48 8d 15 7c 45 01 00 	lea    0x1457c(%rip),%rdx        # 21f210 <memset+0x1750>
  20ac94:	be 24 00 00 00       	mov    $0x24,%esi
  20ac99:	e8 92 03 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ac9e:	0f 0b                	ud2    
  20aca0:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20aca4:	48 83 c4 78          	add    $0x78,%rsp
  20aca8:	c3                   	retq   
  20aca9:	cc                   	int3   
  20acaa:	cc                   	int3   
  20acab:	cc                   	int3   
  20acac:	cc                   	int3   
  20acad:	cc                   	int3   
  20acae:	cc                   	int3   
  20acaf:	cc                   	int3   

000000000020acb0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>:
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  20acb0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  20acb7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20acbc:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  20acc1:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  20acc8:	00 
  20acc9:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  20acd0:	00 
  20acd1:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  20acd8:	00 
  20acd9:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  20ace0:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  20ace1:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  20ace8:	00 
  20ace9:	be 40 00 00 00       	mov    $0x40,%esi
  20acee:	e8 6d 04 00 00       	callq  20b160 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  20acf3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20acfa:	00 
  20acfb:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20ad02:	00 
  20ad03:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20ad0a:	00 
  20ad0b:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  20ad12:	00 
  20ad13:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20ad1a:	00 
                assert!(range.start < Self::BIT_LENGTH);
  20ad1b:	48 83 f8 40          	cmp    $0x40,%rax
  20ad1f:	0f 92 c0             	setb   %al
  20ad22:	34 ff                	xor    $0xff,%al
  20ad24:	a8 01                	test   $0x1,%al
  20ad26:	75 17                	jne    20ad3f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x8f>
  20ad28:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20ad2f:	00 
                assert!(range.end <= Self::BIT_LENGTH);
  20ad30:	48 83 f8 40          	cmp    $0x40,%rax
  20ad34:	0f 96 c0             	setbe  %al
  20ad37:	34 ff                	xor    $0xff,%al
  20ad39:	a8 01                	test   $0x1,%al
  20ad3b:	75 3a                	jne    20ad77 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xc7>
  20ad3d:	eb 1a                	jmp    20ad59 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xa9>
                assert!(range.start < Self::BIT_LENGTH);
  20ad3f:	48 8d 3d 5d 5b ff ff 	lea    -0xa4a3(%rip),%rdi        # 2008a3 <str.0+0x163>
  20ad46:	48 8d 15 c3 44 01 00 	lea    0x144c3(%rip),%rdx        # 21f210 <memset+0x1750>
  20ad4d:	be 30 00 00 00       	mov    $0x30,%esi
  20ad52:	e8 d9 02 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ad57:	0f 0b                	ud2    
  20ad59:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20ad60:	00 
  20ad61:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20ad68:	00 
                assert!(range.start < range.end);
  20ad69:	48 39 c8             	cmp    %rcx,%rax
  20ad6c:	0f 92 c0             	setb   %al
  20ad6f:	34 ff                	xor    $0xff,%al
  20ad71:	a8 01                	test   $0x1,%al
  20ad73:	75 3d                	jne    20adb2 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x102>
  20ad75:	eb 1a                	jmp    20ad91 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xe1>
                assert!(range.end <= Self::BIT_LENGTH);
  20ad77:	48 8d 3d b0 5b ff ff 	lea    -0xa450(%rip),%rdi        # 20092e <str.0+0x1ee>
  20ad7e:	48 8d 15 8b 44 01 00 	lea    0x1448b(%rip),%rdx        # 21f210 <memset+0x1750>
  20ad85:	be 2f 00 00 00       	mov    $0x2f,%esi
  20ad8a:	e8 a1 02 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ad8f:	0f 0b                	ud2    
  20ad91:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20ad98:	00 
  20ad99:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20ada0:	00 
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20ada1:	48 29 c8             	sub    %rcx,%rax
  20ada4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20ada9:	0f 92 c0             	setb   %al
  20adac:	a8 01                	test   $0x1,%al
  20adae:	75 37                	jne    20ade7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x137>
  20adb0:	eb 1a                	jmp    20adcc <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x11c>
                assert!(range.start < range.end);
  20adb2:	48 8d 3d a4 5b ff ff 	lea    -0xa45c(%rip),%rdi        # 20095d <str.0+0x21d>
  20adb9:	48 8d 15 50 44 01 00 	lea    0x14450(%rip),%rdx        # 21f210 <memset+0x1750>
  20adc0:	be 29 00 00 00       	mov    $0x29,%esi
  20adc5:	e8 66 02 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20adca:	0f 0b                	ud2    
  20adcc:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20add1:	b8 40 00 00 00       	mov    $0x40,%eax
  20add6:	48 29 c8             	sub    %rcx,%rax
  20add9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20adde:	0f 92 c0             	setb   %al
  20ade1:	a8 01                	test   $0x1,%al
  20ade3:	75 46                	jne    20ae2b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x17b>
  20ade5:	eb 1a                	jmp    20ae01 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x151>
  20ade7:	48 8d 3d a2 5b ff ff 	lea    -0xa45e(%rip),%rdi        # 200990 <str.0>
  20adee:	48 8d 15 1b 44 01 00 	lea    0x1441b(%rip),%rdx        # 21f210 <memset+0x1750>
  20adf5:	be 21 00 00 00       	mov    $0x21,%esi
  20adfa:	e8 31 02 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20adff:	0f 0b                	ud2    
  20ae01:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  20ae06:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  20ae0b:	48 89 c8             	mov    %rcx,%rax
  20ae0e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20ae12:	48 83 f8 00          	cmp    $0x0,%rax
  20ae16:	0f 95 c0             	setne  %al
  20ae19:	48 83 e1 3f          	and    $0x3f,%rcx
  20ae1d:	48 d3 e2             	shl    %cl,%rdx
  20ae20:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20ae25:	a8 01                	test   $0x1,%al
  20ae27:	75 3d                	jne    20ae66 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1b6>
  20ae29:	eb 1a                	jmp    20ae45 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x195>
  20ae2b:	48 8d 3d 5e 5b ff ff 	lea    -0xa4a2(%rip),%rdi        # 200990 <str.0>
  20ae32:	48 8d 15 d7 43 01 00 	lea    0x143d7(%rip),%rdx        # 21f210 <memset+0x1750>
  20ae39:	be 21 00 00 00       	mov    $0x21,%esi
  20ae3e:	e8 ed 01 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ae43:	0f 0b                	ud2    
  20ae45:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20ae4c:	00 
  20ae4d:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20ae54:	00 
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20ae55:	48 29 c8             	sub    %rcx,%rax
  20ae58:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20ae5d:	0f 92 c0             	setb   %al
  20ae60:	a8 01                	test   $0x1,%al
  20ae62:	75 37                	jne    20ae9b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1eb>
  20ae64:	eb 1a                	jmp    20ae80 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1d0>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20ae66:	48 8d 3d 53 5b ff ff 	lea    -0xa4ad(%rip),%rdi        # 2009c0 <str.1>
  20ae6d:	48 8d 15 9c 43 01 00 	lea    0x1439c(%rip),%rdx        # 21f210 <memset+0x1750>
  20ae74:	be 23 00 00 00       	mov    $0x23,%esi
  20ae79:	e8 b2 01 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ae7e:	0f 0b                	ud2    
  20ae80:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20ae85:	b8 40 00 00 00       	mov    $0x40,%eax
  20ae8a:	48 29 c8             	sub    %rcx,%rax
  20ae8d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ae92:	0f 92 c0             	setb   %al
  20ae95:	a8 01                	test   $0x1,%al
  20ae97:	75 46                	jne    20aedf <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x22f>
  20ae99:	eb 1a                	jmp    20aeb5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x205>
  20ae9b:	48 8d 3d ee 5a ff ff 	lea    -0xa512(%rip),%rdi        # 200990 <str.0>
  20aea2:	48 8d 15 67 43 01 00 	lea    0x14367(%rip),%rdx        # 21f210 <memset+0x1750>
  20aea9:	be 21 00 00 00       	mov    $0x21,%esi
  20aeae:	e8 7d 01 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20aeb3:	0f 0b                	ud2    
  20aeb5:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20aeba:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20aebf:	48 89 c8             	mov    %rcx,%rax
  20aec2:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20aec6:	48 83 f8 00          	cmp    $0x0,%rax
  20aeca:	0f 95 c0             	setne  %al
  20aecd:	48 83 e1 3f          	and    $0x3f,%rcx
  20aed1:	48 d3 ea             	shr    %cl,%rdx
  20aed4:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20aed9:	a8 01                	test   $0x1,%al
  20aedb:	75 34                	jne    20af11 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x261>
  20aedd:	eb 1a                	jmp    20aef9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x249>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20aedf:	48 8d 3d aa 5a ff ff 	lea    -0xa556(%rip),%rdi        # 200990 <str.0>
  20aee6:	48 8d 15 23 43 01 00 	lea    0x14323(%rip),%rdx        # 21f210 <memset+0x1750>
  20aeed:	be 21 00 00 00       	mov    $0x21,%esi
  20aef2:	e8 39 01 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20aef7:	0f 0b                	ud2    
  20aef9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20aefe:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20af03:	48 39 c8             	cmp    %rcx,%rax
  20af06:	0f 94 c0             	sete   %al
  20af09:	34 ff                	xor    $0xff,%al
  20af0b:	a8 01                	test   $0x1,%al
  20af0d:	75 3a                	jne    20af49 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x299>
  20af0f:	eb 1a                	jmp    20af2b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x27b>
  20af11:	48 8d 3d d8 5a ff ff 	lea    -0xa528(%rip),%rdi        # 2009f0 <str.2>
  20af18:	48 8d 15 f1 42 01 00 	lea    0x142f1(%rip),%rdx        # 21f210 <memset+0x1750>
  20af1f:	be 24 00 00 00       	mov    $0x24,%esi
  20af24:	e8 07 01 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20af29:	0f 0b                	ud2    
  20af2b:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20af32:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20af33:	b8 40 00 00 00       	mov    $0x40,%eax
  20af38:	48 29 c8             	sub    %rcx,%rax
  20af3b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20af40:	0f 92 c0             	setb   %al
  20af43:	a8 01                	test   $0x1,%al
  20af45:	75 48                	jne    20af8f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2df>
  20af47:	eb 1a                	jmp    20af63 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2b3>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20af49:	48 8d 3d c4 5a ff ff 	lea    -0xa53c(%rip),%rdi        # 200a14 <str.2+0x24>
  20af50:	48 8d 15 b9 42 01 00 	lea    0x142b9(%rip),%rdx        # 21f210 <memset+0x1750>
  20af57:	be 21 00 00 00       	mov    $0x21,%esi
  20af5c:	e8 cf 00 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20af61:	0f 0b                	ud2    
  20af63:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20af68:	48 89 c8             	mov    %rcx,%rax
  20af6b:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20af6f:	48 83 f8 00          	cmp    $0x0,%rax
  20af73:	0f 95 c0             	setne  %al
  20af76:	48 83 e1 3f          	and    $0x3f,%rcx
  20af7a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  20af81:	48 d3 e2             	shl    %cl,%rdx
  20af84:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20af89:	a8 01                	test   $0x1,%al
  20af8b:	75 3a                	jne    20afc7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x317>
  20af8d:	eb 1a                	jmp    20afa9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2f9>
  20af8f:	48 8d 3d fa 59 ff ff 	lea    -0xa606(%rip),%rdi        # 200990 <str.0>
  20af96:	48 8d 15 73 42 01 00 	lea    0x14273(%rip),%rdx        # 21f210 <memset+0x1750>
  20af9d:	be 21 00 00 00       	mov    $0x21,%esi
  20afa2:	e8 89 00 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20afa7:	0f 0b                	ud2    
  20afa9:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20afb0:	00 
                                    (Self::BIT_LENGTH - range.end) >>
  20afb1:	b8 40 00 00 00       	mov    $0x40,%eax
  20afb6:	48 29 c8             	sub    %rcx,%rax
  20afb9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20afbe:	0f 92 c0             	setb   %al
  20afc1:	a8 01                	test   $0x1,%al
  20afc3:	75 46                	jne    20b00b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x35b>
  20afc5:	eb 1a                	jmp    20afe1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x331>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20afc7:	48 8d 3d f2 59 ff ff 	lea    -0xa60e(%rip),%rdi        # 2009c0 <str.1>
  20afce:	48 8d 15 3b 42 01 00 	lea    0x1423b(%rip),%rdx        # 21f210 <memset+0x1750>
  20afd5:	be 23 00 00 00       	mov    $0x23,%esi
  20afda:	e8 51 00 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20afdf:	0f 0b                	ud2    
  20afe1:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20afe6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20afeb:	48 89 c8             	mov    %rcx,%rax
  20afee:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20aff2:	48 83 f8 00          	cmp    $0x0,%rax
  20aff6:	0f 95 c0             	setne  %al
  20aff9:	48 83 e1 3f          	and    $0x3f,%rcx
  20affd:	48 d3 ea             	shr    %cl,%rdx
  20b000:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20b005:	a8 01                	test   $0x1,%al
  20b007:	75 49                	jne    20b052 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3a2>
  20b009:	eb 1a                	jmp    20b025 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x375>
                                    (Self::BIT_LENGTH - range.end) >>
  20b00b:	48 8d 3d 7e 59 ff ff 	lea    -0xa682(%rip),%rdi        # 200990 <str.0>
  20b012:	48 8d 15 f7 41 01 00 	lea    0x141f7(%rip),%rdx        # 21f210 <memset+0x1750>
  20b019:	be 21 00 00 00       	mov    $0x21,%esi
  20b01e:	e8 0d 00 01 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b023:	0f 0b                	ud2    
  20b025:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20b02a:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20b031:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20b032:	48 89 c8             	mov    %rcx,%rax
  20b035:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20b039:	48 83 f8 00          	cmp    $0x0,%rax
  20b03d:	0f 95 c0             	setne  %al
  20b040:	48 83 e1 3f          	and    $0x3f,%rcx
  20b044:	48 d3 ea             	shr    %cl,%rdx
  20b047:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b04c:	a8 01                	test   $0x1,%al
  20b04e:	75 49                	jne    20b099 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3e9>
  20b050:	eb 1a                	jmp    20b06c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3bc>
  20b052:	48 8d 3d 97 59 ff ff 	lea    -0xa669(%rip),%rdi        # 2009f0 <str.2>
  20b059:	48 8d 15 b0 41 01 00 	lea    0x141b0(%rip),%rdx        # 21f210 <memset+0x1750>
  20b060:	be 24 00 00 00       	mov    $0x24,%esi
  20b065:	e8 c6 ff 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b06a:	0f 0b                	ud2    
  20b06c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b071:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20b078:	00 
  20b079:	48 89 c8             	mov    %rcx,%rax
  20b07c:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20b080:	48 83 f8 00          	cmp    $0x0,%rax
  20b084:	0f 95 c0             	setne  %al
  20b087:	48 83 e1 3f          	and    $0x3f,%rcx
  20b08b:	48 d3 e2             	shl    %cl,%rdx
  20b08e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20b093:	a8 01                	test   $0x1,%al
  20b095:	75 66                	jne    20b0fd <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x44d>
  20b097:	eb 1a                	jmp    20b0b3 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x403>
  20b099:	48 8d 3d 50 59 ff ff 	lea    -0xa6b0(%rip),%rdi        # 2009f0 <str.2>
  20b0a0:	48 8d 15 69 41 01 00 	lea    0x14169(%rip),%rdx        # 21f210 <memset+0x1750>
  20b0a7:	be 24 00 00 00       	mov    $0x24,%esi
  20b0ac:	e8 7f ff 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b0b1:	0f 0b                	ud2    
  20b0b3:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  20b0b8:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20b0bf:	00 
  20b0c0:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  20b0c5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b0ca:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
  20b0ce:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20b0d5:	00 
                *self = (*self & bitmask) | (value << range.start);
  20b0d6:	48 23 06             	and    (%rsi),%rax
  20b0d9:	48 89 04 24          	mov    %rax,(%rsp)
  20b0dd:	48 89 c8             	mov    %rcx,%rax
  20b0e0:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  20b0e4:	48 83 f8 00          	cmp    $0x0,%rax
  20b0e8:	0f 95 c0             	setne  %al
  20b0eb:	48 83 e1 3f          	and    $0x3f,%rcx
  20b0ef:	48 d3 e2             	shl    %cl,%rdx
  20b0f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20b0f7:	a8 01                	test   $0x1,%al
  20b0f9:	75 32                	jne    20b12d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x47d>
  20b0fb:	eb 1a                	jmp    20b117 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x467>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20b0fd:	48 8d 3d bc 58 ff ff 	lea    -0xa744(%rip),%rdi        # 2009c0 <str.1>
  20b104:	48 8d 15 05 41 01 00 	lea    0x14105(%rip),%rdx        # 21f210 <memset+0x1750>
  20b10b:	be 23 00 00 00       	mov    $0x23,%esi
  20b110:	e8 1b ff 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b115:	0f 0b                	ud2    
  20b117:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20b11c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20b121:	48 8b 0c 24          	mov    (%rsp),%rcx
                *self = (*self & bitmask) | (value << range.start);
  20b125:	48 09 d1             	or     %rdx,%rcx
  20b128:	48 89 08             	mov    %rcx,(%rax)
            }
  20b12b:	eb 1a                	jmp    20b147 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x497>
                *self = (*self & bitmask) | (value << range.start);
  20b12d:	48 8d 3d 8c 58 ff ff 	lea    -0xa774(%rip),%rdi        # 2009c0 <str.1>
  20b134:	48 8d 15 d5 40 01 00 	lea    0x140d5(%rip),%rdx        # 21f210 <memset+0x1750>
  20b13b:	be 23 00 00 00       	mov    $0x23,%esi
  20b140:	e8 eb fe 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b145:	0f 0b                	ud2    
  20b147:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
            }
  20b14c:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  20b153:	c3                   	retq   
  20b154:	cc                   	int3   
  20b155:	cc                   	int3   
  20b156:	cc                   	int3   
  20b157:	cc                   	int3   
  20b158:	cc                   	int3   
  20b159:	cc                   	int3   
  20b15a:	cc                   	int3   
  20b15b:	cc                   	int3   
  20b15c:	cc                   	int3   
  20b15d:	cc                   	int3   
  20b15e:	cc                   	int3   
  20b15f:	cc                   	int3   

000000000020b160 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>:
            );
        }
    }
}

fn to_regular_range<T: RangeBounds<usize>>(generic_rage: &T, bit_length: usize) -> Range<usize> {
  20b160:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  20b167:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20b16c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20b171:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  20b176:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  20b17d:	00 
    let start = match generic_rage.start_bound() {
  20b17e:	e8 4d 5f 00 00       	callq  2110d0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h20cb731e70ea6ee0E>
  20b183:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20b188:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20b18d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20b192:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b197:	48 85 c0             	test   %rax,%rax
  20b19a:	74 13                	je     20b1af <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x4f>
  20b19c:	eb 00                	jmp    20b19e <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x3e>
  20b19e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b1a3:	48 83 e8 01          	sub    $0x1,%rax
  20b1a7:	74 1d                	je     20b1c6 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x66>
  20b1a9:	eb 00                	jmp    20b1ab <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x4b>
  20b1ab:	eb 3b                	jmp    20b1e8 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x88>
  20b1ad:	0f 0b                	ud2    
        Bound::Excluded(&value) => value + 1,
        Bound::Included(&value) => value,
  20b1af:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20b1b4:	48 8b 00             	mov    (%rax),%rax
  20b1b7:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20b1be:	00 
  20b1bf:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b1c4:	eb 2b                	jmp    20b1f1 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x91>
        Bound::Excluded(&value) => value + 1,
  20b1c6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20b1cb:	48 8b 00             	mov    (%rax),%rax
  20b1ce:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20b1d5:	00 
  20b1d6:	48 83 c0 01          	add    $0x1,%rax
  20b1da:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b1df:	0f 92 c0             	setb   %al
  20b1e2:	a8 01                	test   $0x1,%al
  20b1e4:	75 2d                	jne    20b213 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xb3>
  20b1e6:	eb 1f                	jmp    20b207 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xa7>
        Bound::Unbounded => 0,
  20b1e8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20b1ef:	00 00 
  20b1f1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    };
    let end = match generic_rage.end_bound() {
  20b1f6:	e8 05 5f 00 00       	callq  211100 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h47dca5317176713dE>
  20b1fb:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  20b200:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20b205:	eb 26                	jmp    20b22d <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xcd>
  20b207:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Bound::Excluded(&value) => value + 1,
  20b20c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b211:	eb de                	jmp    20b1f1 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x91>
  20b213:	48 8d 3d 26 58 ff ff 	lea    -0xa7da(%rip),%rdi        # 200a40 <str.3>
  20b21a:	48 8d 15 07 40 01 00 	lea    0x14007(%rip),%rdx        # 21f228 <memset+0x1768>
  20b221:	be 1c 00 00 00       	mov    $0x1c,%esi
  20b226:	e8 05 fe 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b22b:	0f 0b                	ud2    
    let end = match generic_rage.end_bound() {
  20b22d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20b232:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b237:	48 85 c0             	test   %rax,%rax
  20b23a:	74 13                	je     20b24f <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xef>
  20b23c:	eb 00                	jmp    20b23e <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xde>
  20b23e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b243:	48 83 e8 01          	sub    $0x1,%rax
  20b247:	74 28                	je     20b271 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x111>
  20b249:	eb 00                	jmp    20b24b <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xeb>
  20b24b:	eb 3b                	jmp    20b288 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x128>
  20b24d:	0f 0b                	ud2    
        Bound::Excluded(&value) => value,
        Bound::Included(&value) => value + 1,
  20b24f:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20b254:	48 8b 00             	mov    (%rax),%rax
  20b257:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20b25e:	00 
  20b25f:	48 83 c0 01          	add    $0x1,%rax
  20b263:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b268:	0f 92 c0             	setb   %al
  20b26b:	a8 01                	test   $0x1,%al
  20b26d:	75 55                	jne    20b2c4 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x164>
  20b26f:	eb 47                	jmp    20b2b8 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x158>
        Bound::Excluded(&value) => value,
  20b271:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20b276:	48 8b 00             	mov    (%rax),%rax
  20b279:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20b280:	00 
  20b281:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20b286:	eb 0a                	jmp    20b292 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x132>
  20b288:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Bound::Unbounded => bit_length,
  20b28d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };

    start..end
  20b292:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20b297:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20b29c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b2a1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
}
  20b2a6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20b2ab:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20b2b0:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20b2b7:	c3                   	retq   
  20b2b8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        Bound::Included(&value) => value + 1,
  20b2bd:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20b2c2:	eb ce                	jmp    20b292 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x132>
  20b2c4:	48 8d 3d 75 57 ff ff 	lea    -0xa88b(%rip),%rdi        # 200a40 <str.3>
  20b2cb:	48 8d 15 6e 3f 01 00 	lea    0x13f6e(%rip),%rdx        # 21f240 <memset+0x1780>
  20b2d2:	be 1c 00 00 00       	mov    $0x1c,%esi
  20b2d7:	e8 54 fd 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20b2dc:	0f 0b                	ud2    
  20b2de:	cc                   	int3   
  20b2df:	cc                   	int3   

000000000020b2e0 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E>:
    pub edx: FlagsEDX,
    pub max_standard_level: u32,
    pub max_extended_level: u32,
}

fn probe_cpu_features() -> CPUFeatures {
  20b2e0:	48 81 ec 38 03 00 00 	sub    $0x338,%rsp
    let edx: u32;

    // used across this function as a exchange register.
    let mut ebx_scratch: u64;

    log::info!("Probing CPU Features with cpuid instruction.");
  20b2e7:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  20b2ee:	00 03 00 00 00 
  20b2f3:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20b2fa:	00 
  20b2fb:	48 8d 35 56 50 ff ff 	lea    -0xafaa(%rip),%rsi        # 200358 <str.0+0x58>
  20b302:	e8 59 aa ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b307:	88 84 24 cf 00 00 00 	mov    %al,0xcf(%rsp)
  20b30e:	8a 84 24 cf 00 00 00 	mov    0xcf(%rsp),%al
  20b315:	a8 01                	test   $0x1,%al
  20b317:	75 0c                	jne    20b325 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x45>
  20b319:	eb 00                	jmp    20b31b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x3b>
  20b31b:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  20b322:	00 
  20b323:	eb 60                	jmp    20b385 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0xa5>
  20b325:	c6 84 24 2f 03 00 00 	movb   $0x0,0x32f(%rsp)
  20b32c:	00 
  20b32d:	48 8b 3d 6c 54 01 00 	mov    0x1546c(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b334:	0f b6 b4 24 2f 03 00 	movzbl 0x32f(%rsp),%esi
  20b33b:	00 
  20b33c:	e8 af 77 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b341:	48 89 84 24 30 03 00 	mov    %rax,0x330(%rsp)
  20b348:	00 
  20b349:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  20b350:	00 
  20b351:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20b358:	00 
  20b359:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20b360:	00 
  20b361:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  20b368:	00 
  20b369:	e8 f2 a9 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b36e:	88 84 24 ce 00 00 00 	mov    %al,0xce(%rsp)
  20b375:	8a 84 24 ce 00 00 00 	mov    0xce(%rsp),%al
  20b37c:	24 01                	and    $0x1,%al
  20b37e:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  20b385:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  20b38c:	01 
  20b38d:	75 37                	jne    20b3c6 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0xe6>
  20b38f:	b8 01 00 00 00       	mov    $0x1,%eax

    unsafe {
        asm!(
  20b394:	48 87 f3             	xchg   %rsi,%rbx
  20b397:	0f a2                	cpuid  
  20b399:	48 87 f3             	xchg   %rsi,%rbx
  20b39c:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  20b3a3:	00 
  20b3a4:	89 c6                	mov    %eax,%esi
  20b3a6:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20b3ad:	00 
  20b3ae:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20b3b5:	00 
  20b3b6:	89 8c 24 e0 00 00 00 	mov    %ecx,0xe0(%rsp)
  20b3bd:	89 94 24 e4 00 00 00 	mov    %edx,0xe4(%rsp)
  20b3c4:	eb 43                	jmp    20b409 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x129>
    log::info!("Probing CPU Features with cpuid instruction.");
  20b3c6:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  20b3cd:	00 
  20b3ce:	48 8d 35 83 3e 01 00 	lea    0x13e83(%rip),%rsi        # 21f258 <memset+0x1798>
  20b3d5:	ba 01 00 00 00       	mov    $0x1,%edx
  20b3da:	48 8d 0d a7 56 ff ff 	lea    -0xa959(%rip),%rcx        # 200a88 <str.3+0x48>
  20b3e1:	31 c0                	xor    %eax,%eax
  20b3e3:	41 89 c0             	mov    %eax,%r8d
  20b3e6:	e8 15 9b ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b3eb:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  20b3f2:	00 
  20b3f3:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  20b3fa:	00 
  20b3fb:	48 8d 15 66 3e 01 00 	lea    0x13e66(%rip),%rdx        # 21f268 <memset+0x17a8>
  20b402:	e8 09 d4 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b407:	eb 86                	jmp    20b38f <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0xaf>
            out("edx") edx,
            options(nostack, nomem, preserves_flags)
        );
    }

    log::debug!(
  20b409:	48 c7 84 24 38 01 00 	movq   $0x4,0x138(%rsp)
  20b410:	00 04 00 00 00 
  20b415:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  20b41c:	00 
  20b41d:	48 8d 35 34 4f ff ff 	lea    -0xb0cc(%rip),%rsi        # 200358 <str.0+0x58>
  20b424:	e8 37 a9 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b429:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  20b430:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
  20b437:	a8 01                	test   $0x1,%al
  20b439:	75 0c                	jne    20b447 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x167>
  20b43b:	eb 00                	jmp    20b43d <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x15d>
  20b43d:	c6 84 24 47 01 00 00 	movb   $0x0,0x147(%rsp)
  20b444:	00 
  20b445:	eb 60                	jmp    20b4a7 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x1c7>
  20b447:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  20b44e:	00 
  20b44f:	48 8b 3d 4a 53 01 00 	mov    0x1534a(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b456:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  20b45d:	00 
  20b45e:	e8 8d 76 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b463:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  20b46a:	00 
  20b46b:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  20b472:	00 
  20b473:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  20b47a:	00 
  20b47b:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  20b482:	00 
  20b483:	48 8d b4 24 48 01 00 	lea    0x148(%rsp),%rsi
  20b48a:	00 
  20b48b:	e8 d0 a8 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b490:	88 84 24 be 00 00 00 	mov    %al,0xbe(%rsp)
  20b497:	8a 84 24 be 00 00 00 	mov    0xbe(%rsp),%al
  20b49e:	24 01                	and    $0x1,%al
  20b4a0:	88 84 24 47 01 00 00 	mov    %al,0x147(%rsp)
  20b4a7:	f6 84 24 47 01 00 00 	testb  $0x1,0x147(%rsp)
  20b4ae:	01 
  20b4af:	75 30                	jne    20b4e1 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x201>
  20b4b1:	31 c0                	xor    %eax,%eax
    // probe CPU level:
    let (max_standard_level, max_extended_level): (u32, u32);

    unsafe {
        // load standard levels:
        asm!(
  20b4b3:	48 87 f3             	xchg   %rsi,%rbx
  20b4b6:	0f a2                	cpuid  
  20b4b8:	48 87 f3             	xchg   %rsi,%rbx
  20b4bb:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  20b4c2:	00 
  20b4c3:	89 ce                	mov    %ecx,%esi
  20b4c5:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  20b4cc:	00 
  20b4cd:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  20b4d4:	00 
  20b4d5:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%rsp)
  20b4dc:	e9 6e 01 00 00       	jmpq   20b64f <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x36f>
    log::debug!(
  20b4e1:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  20b4e8:	00 
  20b4e9:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20b4f0:	00 
  20b4f1:	48 8d 84 24 e4 00 00 	lea    0xe4(%rsp),%rax
  20b4f8:	00 
  20b4f9:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  20b500:	00 
  20b501:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  20b508:	00 
  20b509:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  20b510:	00 
  20b511:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  20b518:	00 
  20b519:	48 89 bc 24 c0 02 00 	mov    %rdi,0x2c0(%rsp)
  20b520:	00 
  20b521:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  20b528:	00 
  20b529:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20b530:	00 
  20b531:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  20b538:	00 
  20b539:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  20b540:	00 
  20b541:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20b548:	00 
  20b549:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  20b550:	00 
  20b551:	48 8b 35 90 52 01 00 	mov    0x15290(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20b558:	e8 93 82 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20b55d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20b564:	00 
  20b565:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  20b56c:	00 
  20b56d:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20b574:	00 
  20b575:	48 8b 35 6c 52 01 00 	mov    0x1526c(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20b57c:	e8 6f 82 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20b581:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20b588:	00 
  20b589:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20b590:	00 
  20b591:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20b598:	00 
  20b599:	48 8b 35 08 52 01 00 	mov    0x15208(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20b5a0:	e8 ab 82 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  20b5a5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20b5aa:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  20b5af:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20b5b4:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20b5b9:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  20b5c0:	00 
  20b5c1:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20b5c8:	00 
  20b5c9:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  20b5d0:	00 
  20b5d1:	4c 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%r8
  20b5d8:	00 
  20b5d9:	4c 89 84 24 80 01 00 	mov    %r8,0x180(%rsp)
  20b5e0:	00 
  20b5e1:	48 89 bc 24 88 01 00 	mov    %rdi,0x188(%rsp)
  20b5e8:	00 
  20b5e9:	48 89 b4 24 90 01 00 	mov    %rsi,0x190(%rsp)
  20b5f0:	00 
  20b5f1:	48 89 94 24 98 01 00 	mov    %rdx,0x198(%rsp)
  20b5f8:	00 
  20b5f9:	48 89 8c 24 a0 01 00 	mov    %rcx,0x1a0(%rsp)
  20b600:	00 
  20b601:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  20b608:	00 
  20b609:	48 8d 8c 24 80 01 00 	lea    0x180(%rsp),%rcx
  20b610:	00 
  20b611:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  20b618:	00 
  20b619:	48 8d 35 80 3c 01 00 	lea    0x13c80(%rip),%rsi        # 21f2a0 <memset+0x17e0>
  20b620:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  20b626:	4c 89 c2             	mov    %r8,%rdx
  20b629:	e8 d2 98 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b62e:	48 8b b4 24 38 01 00 	mov    0x138(%rsp),%rsi
  20b635:	00 
  20b636:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  20b63d:	00 
  20b63e:	48 8d 15 8b 3c 01 00 	lea    0x13c8b(%rip),%rdx        # 21f2d0 <memset+0x1810>
  20b645:	e8 c6 d1 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b64a:	e9 62 fe ff ff       	jmpq   20b4b1 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x1d1>
            out("rdx") _,
            out("rcx") _,
            options(nostack, nomem, preserves_flags)
        );

        log::debug!(
  20b64f:	48 c7 84 24 d0 01 00 	movq   $0x4,0x1d0(%rsp)
  20b656:	00 04 00 00 00 
  20b65b:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  20b662:	00 
  20b663:	48 8d 35 ee 4c ff ff 	lea    -0xb312(%rip),%rsi        # 200358 <str.0+0x58>
  20b66a:	e8 f1 a6 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b66f:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20b673:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  20b677:	a8 01                	test   $0x1,%al
  20b679:	75 0c                	jne    20b687 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x3a7>
  20b67b:	eb 00                	jmp    20b67d <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x39d>
  20b67d:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  20b684:	00 
  20b685:	eb 5a                	jmp    20b6e1 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x401>
  20b687:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  20b68e:	00 
  20b68f:	48 8b 3d 0a 51 01 00 	mov    0x1510a(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b696:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  20b69d:	00 
  20b69e:	e8 4d 74 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b6a3:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  20b6aa:	00 
  20b6ab:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  20b6b2:	00 
  20b6b3:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  20b6ba:	00 
  20b6bb:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  20b6c2:	00 
  20b6c3:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
  20b6ca:	00 
  20b6cb:	e8 90 a6 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b6d0:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  20b6d4:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  20b6d8:	24 01                	and    $0x1,%al
  20b6da:	88 84 24 df 01 00 00 	mov    %al,0x1df(%rsp)
  20b6e1:	f6 84 24 df 01 00 00 	testb  $0x1,0x1df(%rsp)
  20b6e8:	01 
  20b6e9:	75 2d                	jne    20b718 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x438>
  20b6eb:	b8 00 00 00 80       	mov    $0x80000000,%eax
            max_standard_level,
            ebx_scratch
        );

        // load extended levels:
        asm!(
  20b6f0:	48 87 f3             	xchg   %rsi,%rbx
  20b6f3:	0f a2                	cpuid  
  20b6f5:	48 87 f3             	xchg   %rsi,%rbx
  20b6f8:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  20b6fd:	89 ce                	mov    %ecx,%esi
  20b6ff:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  20b704:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  20b70b:	00 
  20b70c:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%rsp)
  20b713:	e9 f2 00 00 00       	jmpq   20b80a <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x52a>
        log::debug!(
  20b718:	48 8d 84 24 c8 01 00 	lea    0x1c8(%rsp),%rax
  20b71f:	00 
  20b720:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  20b727:	00 
  20b728:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  20b72f:	00 
  20b730:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  20b737:	00 
  20b738:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
  20b73f:	00 
  20b740:	48 89 bc 24 d8 02 00 	mov    %rdi,0x2d8(%rsp)
  20b747:	00 
  20b748:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  20b74f:	00 
  20b750:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b755:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  20b75c:	00 
  20b75d:	48 8b 35 84 50 01 00 	mov    0x15084(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20b764:	e8 87 80 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20b769:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20b76e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20b773:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  20b778:	48 8b 35 29 50 01 00 	mov    0x15029(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20b77f:	e8 cc 80 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  20b784:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b789:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20b78e:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20b793:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20b798:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20b79d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  20b7a2:	48 89 b4 24 18 02 00 	mov    %rsi,0x218(%rsp)
  20b7a9:	00 
  20b7aa:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  20b7b1:	00 
  20b7b2:	48 89 8c 24 28 02 00 	mov    %rcx,0x228(%rsp)
  20b7b9:	00 
  20b7ba:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  20b7c1:	00 
  20b7c2:	48 8d 8c 24 18 02 00 	lea    0x218(%rsp),%rcx
  20b7c9:	00 
  20b7ca:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  20b7d1:	00 
  20b7d2:	48 8d 35 2f 3b 01 00 	lea    0x13b2f(%rip),%rsi        # 21f308 <memset+0x1848>
  20b7d9:	ba 03 00 00 00       	mov    $0x3,%edx
  20b7de:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  20b7e4:	e8 17 97 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b7e9:	48 8b b4 24 d0 01 00 	mov    0x1d0(%rsp),%rsi
  20b7f0:	00 
  20b7f1:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  20b7f8:	00 
  20b7f9:	48 8d 15 38 3b 01 00 	lea    0x13b38(%rip),%rdx        # 21f338 <memset+0x1878>
  20b800:	e8 0b d0 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b805:	e9 e1 fe ff ff       	jmpq   20b6eb <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x40b>
            out("rdx") _,
            out("rcx") _,
            options(nostack, nomem, preserves_flags)
        );

        log::debug!(
  20b80a:	48 c7 84 24 48 02 00 	movq   $0x4,0x248(%rsp)
  20b811:	00 04 00 00 00 
  20b816:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  20b81d:	00 
  20b81e:	48 8d 35 33 4b ff ff 	lea    -0xb4cd(%rip),%rsi        # 200358 <str.0+0x58>
  20b825:	e8 36 a5 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b82a:	88 44 24 37          	mov    %al,0x37(%rsp)
  20b82e:	8a 44 24 37          	mov    0x37(%rsp),%al
  20b832:	a8 01                	test   $0x1,%al
  20b834:	75 0c                	jne    20b842 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x562>
  20b836:	eb 00                	jmp    20b838 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x558>
  20b838:	c6 84 24 57 02 00 00 	movb   $0x0,0x257(%rsp)
  20b83f:	00 
  20b840:	eb 5a                	jmp    20b89c <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x5bc>
  20b842:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  20b849:	00 
  20b84a:	48 8b 3d 4f 4f 01 00 	mov    0x14f4f(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b851:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  20b858:	00 
  20b859:	e8 92 72 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b85e:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  20b865:	00 
  20b866:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  20b86d:	00 
  20b86e:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  20b875:	00 
  20b876:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  20b87d:	00 
  20b87e:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  20b885:	00 
  20b886:	e8 d5 a4 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b88b:	88 44 24 36          	mov    %al,0x36(%rsp)
  20b88f:	8a 44 24 36          	mov    0x36(%rsp),%al
  20b893:	24 01                	and    $0x1,%al
  20b895:	88 84 24 57 02 00 00 	mov    %al,0x257(%rsp)
  20b89c:	f6 84 24 57 02 00 00 	testb  $0x1,0x257(%rsp)
  20b8a3:	01 
  20b8a4:	75 15                	jne    20b8bb <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x5db>
            ebx_scratch
        );
    }

    CPUFeatures {
        ecx: FlagsECX::from_bits_truncate(ecx),
  20b8a6:	8b bc 24 e0 00 00 00 	mov    0xe0(%rsp),%edi
  20b8ad:	e8 fe 21 00 00       	callq  20dab0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17he9121e32f4c55965E>
  20b8b2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20b8b6:	e9 f2 00 00 00       	jmpq   20b9ad <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x6cd>
        log::debug!(
  20b8bb:	48 8d 84 24 cc 01 00 	lea    0x1cc(%rsp),%rax
  20b8c2:	00 
  20b8c3:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  20b8ca:	00 
  20b8cb:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  20b8d2:	00 
  20b8d3:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  20b8da:	00 
  20b8db:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  20b8e2:	00 
  20b8e3:	48 89 bc 24 e8 02 00 	mov    %rdi,0x2e8(%rsp)
  20b8ea:	00 
  20b8eb:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  20b8f2:	00 
  20b8f3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b8f8:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  20b8ff:	00 
  20b900:	48 8b 35 e1 4e 01 00 	mov    0x14ee1(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20b907:	e8 e4 7e 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20b90c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b911:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b916:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20b91b:	48 8b 35 86 4e 01 00 	mov    0x14e86(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20b922:	e8 29 7f 00 00       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  20b927:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b92c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20b931:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b936:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20b93b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  20b940:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20b945:	48 89 b4 24 90 02 00 	mov    %rsi,0x290(%rsp)
  20b94c:	00 
  20b94d:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  20b954:	00 
  20b955:	48 89 8c 24 a0 02 00 	mov    %rcx,0x2a0(%rsp)
  20b95c:	00 
  20b95d:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  20b964:	00 
  20b965:	48 8d 8c 24 90 02 00 	lea    0x290(%rsp),%rcx
  20b96c:	00 
  20b96d:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  20b974:	00 
  20b975:	48 8d 35 f4 39 01 00 	lea    0x139f4(%rip),%rsi        # 21f370 <memset+0x18b0>
  20b97c:	ba 03 00 00 00       	mov    $0x3,%edx
  20b981:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  20b987:	e8 74 95 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b98c:	48 8b b4 24 48 02 00 	mov    0x248(%rsp),%rsi
  20b993:	00 
  20b994:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  20b99b:	00 
  20b99c:	48 8d 15 fd 39 01 00 	lea    0x139fd(%rip),%rdx        # 21f3a0 <memset+0x18e0>
  20b9a3:	e8 68 ce 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b9a8:	e9 f9 fe ff ff       	jmpq   20b8a6 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E+0x5c6>
        edx: FlagsEDX::from_bits_truncate(edx),
  20b9ad:	8b bc 24 e4 00 00 00 	mov    0xe4(%rsp),%edi
  20b9b4:	e8 d7 44 00 00       	callq  20fe90 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h92757ad116716304E>
  20b9b9:	89 44 24 04          	mov    %eax,0x4(%rsp)
  20b9bd:	8b 54 24 04          	mov    0x4(%rsp),%edx
  20b9c1:	8b 74 24 30          	mov    0x30(%rsp),%esi
        max_extended_level,
  20b9c5:	8b 84 24 cc 01 00 00 	mov    0x1cc(%rsp),%eax
        max_standard_level,
  20b9cc:	8b 8c 24 c8 01 00 00 	mov    0x1c8(%rsp),%ecx
    CPUFeatures {
  20b9d3:	89 b4 24 d0 00 00 00 	mov    %esi,0xd0(%rsp)
  20b9da:	89 94 24 d4 00 00 00 	mov    %edx,0xd4(%rsp)
  20b9e1:	89 8c 24 d8 00 00 00 	mov    %ecx,0xd8(%rsp)
  20b9e8:	89 84 24 dc 00 00 00 	mov    %eax,0xdc(%rsp)
    }
}
  20b9ef:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20b9f6:	00 
  20b9f7:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  20b9fe:	00 
  20b9ff:	48 81 c4 38 03 00 00 	add    $0x338,%rsp
  20ba06:	c3                   	retq   
  20ba07:	cc                   	int3   
  20ba08:	cc                   	int3   
  20ba09:	cc                   	int3   
  20ba0a:	cc                   	int3   
  20ba0b:	cc                   	int3   
  20ba0c:	cc                   	int3   
  20ba0d:	cc                   	int3   
  20ba0e:	cc                   	int3   
  20ba0f:	cc                   	int3   

000000000020ba10 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE>:

pub fn has_extended_feature(flag: FlagsEDX) -> bool {
    CPU_FEATURES.edx.contains(flag)
}

pub fn assert_min_levels() {
  20ba10:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
    assert!(
        CPU_FEATURES.max_standard_level >= 3,
  20ba17:	48 8d 3d 9e 52 ff ff 	lea    -0xad62(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20ba1e:	e8 8d 4d 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20ba23:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ba28:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20ba2d:	83 78 08 03          	cmpl   $0x3,0x8(%rax)
  20ba31:	0f 93 c0             	setae  %al
    assert!(
  20ba34:	34 ff                	xor    $0xff,%al
  20ba36:	a8 01                	test   $0x1,%al
  20ba38:	75 16                	jne    20ba50 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x40>
        "Expected CPU standard level >= 3, got {}.",
        CPU_FEATURES.max_standard_level
    );

    assert!(
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  20ba3a:	48 8d 3d 7b 52 ff ff 	lea    -0xad85(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20ba41:	e8 6a 4d 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20ba46:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ba4b:	e9 99 00 00 00       	jmpq   20bae9 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0xd9>
        CPU_FEATURES.max_standard_level
  20ba50:	48 8d 3d 65 52 ff ff 	lea    -0xad9b(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20ba57:	e8 54 4d 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20ba5c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20ba61:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ba66:	48 83 c0 08          	add    $0x8,%rax
    assert!(
  20ba6a:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20ba71:	00 
  20ba72:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20ba79:	00 
  20ba7a:	48 89 bc 24 28 01 00 	mov    %rdi,0x128(%rsp)
  20ba81:	00 
  20ba82:	48 8b 35 67 4d 01 00 	mov    0x14d67(%rip),%rsi        # 2207f0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  20ba89:	e8 62 7d 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20ba8e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ba93:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20ba98:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20ba9d:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20baa2:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20baa9:	00 
  20baaa:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20bab1:	00 
  20bab2:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
  20bab9:	00 
  20baba:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20babf:	48 8d 35 12 39 01 00 	lea    0x13912(%rip),%rsi        # 21f3d8 <memset+0x1918>
  20bac6:	ba 02 00 00 00       	mov    $0x2,%edx
  20bacb:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20bad1:	e8 2a 94 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bad6:	48 8d 35 1b 39 01 00 	lea    0x1391b(%rip),%rsi        # 21f3f8 <memset+0x1938>
  20badd:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20bae2:	e8 19 f6 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20bae7:	0f 0b                	ud2    
  20bae9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  20baee:	81 78 0c 07 00 00 80 	cmpl   $0x80000007,0xc(%rax)
  20baf5:	0f 93 c0             	setae  %al
    assert!(
  20baf8:	34 ff                	xor    $0xff,%al
  20bafa:	a8 01                	test   $0x1,%al
  20bafc:	75 29                	jne    20bb27 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x117>
        "Expected CPU extended level >= 0x80000007, got 0x{:x}.",
        CPU_FEATURES.max_extended_level
    );

    log::info!("CPU level checks passed.");
  20bafe:	48 c7 84 24 e0 00 00 	movq   $0x3,0xe0(%rsp)
  20bb05:	00 03 00 00 00 
  20bb0a:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  20bb11:	00 
  20bb12:	48 8d 35 3f 48 ff ff 	lea    -0xb7c1(%rip),%rsi        # 200358 <str.0+0x58>
  20bb19:	e8 42 a2 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bb1e:	88 44 24 27          	mov    %al,0x27(%rsp)
  20bb22:	e9 9f 00 00 00       	jmpq   20bbc6 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x1b6>
        CPU_FEATURES.max_extended_level
  20bb27:	48 8d 3d 8e 51 ff ff 	lea    -0xae72(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20bb2e:	e8 7d 4c 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20bb33:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20bb38:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20bb3d:	48 83 c0 0c          	add    $0xc,%rax
    assert!(
  20bb41:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20bb48:	00 
  20bb49:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  20bb50:	00 
  20bb51:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  20bb58:	00 
  20bb59:	48 8b 35 88 4c 01 00 	mov    0x14c88(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20bb60:	e8 8b 7c 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20bb65:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20bb6a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20bb6f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20bb74:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20bb79:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  20bb80:	00 
  20bb81:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20bb88:	00 
  20bb89:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  20bb90:	00 
  20bb91:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20bb98:	00 
  20bb99:	48 8d 35 70 38 01 00 	lea    0x13870(%rip),%rsi        # 21f410 <memset+0x1950>
  20bba0:	ba 02 00 00 00       	mov    $0x2,%edx
  20bba5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20bbab:	e8 50 93 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bbb0:	48 8d 35 79 38 01 00 	lea    0x13879(%rip),%rsi        # 21f430 <memset+0x1970>
  20bbb7:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20bbbe:	00 
  20bbbf:	e8 3c f5 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20bbc4:	0f 0b                	ud2    
  20bbc6:	8a 44 24 27          	mov    0x27(%rsp),%al
    log::info!("CPU level checks passed.");
  20bbca:	a8 01                	test   $0x1,%al
  20bbcc:	75 0c                	jne    20bbda <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x1ca>
  20bbce:	eb 00                	jmp    20bbd0 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x1c0>
  20bbd0:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  20bbd7:	00 
  20bbd8:	eb 5a                	jmp    20bc34 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x224>
  20bbda:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  20bbe1:	00 
  20bbe2:	48 8b 3d b7 4b 01 00 	mov    0x14bb7(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20bbe9:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  20bbf0:	00 
  20bbf1:	e8 fa 6e 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20bbf6:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20bbfd:	00 
  20bbfe:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  20bc05:	00 
  20bc06:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20bc0d:	00 
  20bc0e:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  20bc15:	00 
  20bc16:	48 8d b4 24 f0 00 00 	lea    0xf0(%rsp),%rsi
  20bc1d:	00 
  20bc1e:	e8 3d a1 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bc23:	88 44 24 07          	mov    %al,0x7(%rsp)
  20bc27:	8a 44 24 07          	mov    0x7(%rsp),%al
  20bc2b:	24 01                	and    $0x1,%al
  20bc2d:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  20bc34:	f6 84 24 ef 00 00 00 	testb  $0x1,0xef(%rsp)
  20bc3b:	01 
  20bc3c:	75 08                	jne    20bc46 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x236>
}
  20bc3e:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20bc45:	c3                   	retq   
    log::info!("CPU level checks passed.");
  20bc46:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  20bc4d:	00 
  20bc4e:	48 8d 35 f3 37 01 00 	lea    0x137f3(%rip),%rsi        # 21f448 <memset+0x1988>
  20bc55:	ba 01 00 00 00       	mov    $0x1,%edx
  20bc5a:	48 8d 0d 27 4e ff ff 	lea    -0xb1d9(%rip),%rcx        # 200a88 <str.3+0x48>
  20bc61:	31 c0                	xor    %eax,%eax
  20bc63:	41 89 c0             	mov    %eax,%r8d
  20bc66:	e8 95 92 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bc6b:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  20bc72:	00 
  20bc73:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  20bc7a:	00 
  20bc7b:	48 8d 15 d6 37 01 00 	lea    0x137d6(%rip),%rdx        # 21f458 <memset+0x1998>
  20bc82:	e8 89 cb 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20bc87:	eb b5                	jmp    20bc3e <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE+0x22e>
  20bc89:	cc                   	int3   
  20bc8a:	cc                   	int3   
  20bc8b:	cc                   	int3   
  20bc8c:	cc                   	int3   
  20bc8d:	cc                   	int3   
  20bc8e:	cc                   	int3   
  20bc8f:	cc                   	int3   

000000000020bc90 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E>:
        "CPU does not support critical extended feature {:?}",
        flag
    );
}

pub fn display_features() {
  20bc90:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  20bc97:	48 c7 84 24 88 00 00 	movq   $0x3,0x88(%rsp)
  20bc9e:	00 03 00 00 00 
  20bca3:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20bcaa:	00 
  20bcab:	48 8d 35 a6 46 ff ff 	lea    -0xb95a(%rip),%rsi        # 200358 <str.0+0x58>
  20bcb2:	e8 a9 a0 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bcb7:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  20bcbe:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  20bcc5:	a8 01                	test   $0x1,%al
  20bcc7:	75 0c                	jne    20bcd5 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x45>
  20bcc9:	eb 00                	jmp    20bccb <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x3b>
  20bccb:	c6 84 24 97 00 00 00 	movb   $0x0,0x97(%rsp)
  20bcd2:	00 
  20bcd3:	eb 60                	jmp    20bd35 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0xa5>
  20bcd5:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  20bcdc:	00 
  20bcdd:	48 8b 3d bc 4a 01 00 	mov    0x14abc(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20bce4:	0f b6 b4 24 5f 02 00 	movzbl 0x25f(%rsp),%esi
  20bceb:	00 
  20bcec:	e8 ff 6d 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20bcf1:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  20bcf8:	00 
  20bcf9:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  20bd00:	00 
  20bd01:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20bd08:	00 
  20bd09:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20bd10:	00 
  20bd11:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  20bd18:	00 
  20bd19:	e8 42 a0 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bd1e:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  20bd25:	8a 84 24 86 00 00 00 	mov    0x86(%rsp),%al
  20bd2c:	24 01                	and    $0x1,%al
  20bd2e:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  20bd35:	f6 84 24 97 00 00 00 	testb  $0x1,0x97(%rsp)
  20bd3c:	01 
  20bd3d:	75 2c                	jne    20bd6b <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0xdb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  20bd3f:	48 c7 84 24 e8 00 00 	movq   $0x3,0xe8(%rsp)
  20bd46:	00 03 00 00 00 
  20bd4b:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20bd52:	00 
  20bd53:	48 8d 35 fe 45 ff ff 	lea    -0xba02(%rip),%rsi        # 200358 <str.0+0x58>
  20bd5a:	e8 01 a0 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bd5f:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  20bd66:	e9 a4 00 00 00       	jmpq   20be0f <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x17f>
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  20bd6b:	48 8d 3d 4a 4f ff ff 	lea    -0xb0b6(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20bd72:	e8 39 4a 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20bd77:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20bd7c:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20bd81:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20bd88:	00 
  20bd89:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  20bd90:	00 
  20bd91:	48 89 bc 24 08 02 00 	mov    %rdi,0x208(%rsp)
  20bd98:	00 
  20bd99:	48 8d 35 30 04 00 00 	lea    0x430(%rip),%rsi        # 20c1d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E>
  20bda0:	e8 cb 78 00 00       	callq  213670 <_ZN4core3fmt10ArgumentV13new17haa4c4d33961dd9b3E>
  20bda5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20bdaa:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  20bdaf:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20bdb4:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20bdb9:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  20bdc0:	00 
  20bdc1:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20bdc8:	00 
  20bdc9:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  20bdd0:	00 
  20bdd1:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20bdd8:	00 
  20bdd9:	48 8d 35 b0 36 01 00 	lea    0x136b0(%rip),%rsi        # 21f490 <memset+0x19d0>
  20bde0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20bde6:	4c 89 c2             	mov    %r8,%rdx
  20bde9:	e8 12 91 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bdee:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  20bdf5:	00 
  20bdf6:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20bdfd:	00 
  20bdfe:	48 8d 15 9b 36 01 00 	lea    0x1369b(%rip),%rdx        # 21f4a0 <memset+0x19e0>
  20be05:	e8 06 ca 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20be0a:	e9 30 ff ff ff       	jmpq   20bd3f <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0xaf>
  20be0f:	8a 84 24 85 00 00 00 	mov    0x85(%rsp),%al
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  20be16:	a8 01                	test   $0x1,%al
  20be18:	75 0c                	jne    20be26 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x196>
  20be1a:	eb 00                	jmp    20be1c <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x18c>
  20be1c:	c6 84 24 f7 00 00 00 	movb   $0x0,0xf7(%rsp)
  20be23:	00 
  20be24:	eb 5a                	jmp    20be80 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x1f0>
  20be26:	c6 84 24 4f 02 00 00 	movb   $0x0,0x24f(%rsp)
  20be2d:	00 
  20be2e:	48 8b 3d 6b 49 01 00 	mov    0x1496b(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20be35:	0f b6 b4 24 4f 02 00 	movzbl 0x24f(%rsp),%esi
  20be3c:	00 
  20be3d:	e8 ae 6c 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20be42:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  20be49:	00 
  20be4a:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  20be51:	00 
  20be52:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20be59:	00 
  20be5a:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20be61:	00 
  20be62:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
  20be69:	00 
  20be6a:	e8 f1 9e ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20be6f:	88 44 24 67          	mov    %al,0x67(%rsp)
  20be73:	8a 44 24 67          	mov    0x67(%rsp),%al
  20be77:	24 01                	and    $0x1,%al
  20be79:	88 84 24 f7 00 00 00 	mov    %al,0xf7(%rsp)
  20be80:	f6 84 24 f7 00 00 00 	testb  $0x1,0xf7(%rsp)
  20be87:	01 
  20be88:	75 29                	jne    20beb3 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x223>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  20be8a:	48 c7 84 24 48 01 00 	movq   $0x3,0x148(%rsp)
  20be91:	00 03 00 00 00 
  20be96:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  20be9d:	00 
  20be9e:	48 8d 35 b3 44 ff ff 	lea    -0xbb4d(%rip),%rsi        # 200358 <str.0+0x58>
  20bea5:	e8 b6 9e ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20beaa:	88 44 24 66          	mov    %al,0x66(%rsp)
  20beae:	e9 a8 00 00 00       	jmpq   20bf5b <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x2cb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  20beb3:	48 8d 3d 02 4e ff ff 	lea    -0xb1fe(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20beba:	e8 f1 48 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20bebf:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20bec4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20bec9:	48 83 c0 04          	add    $0x4,%rax
  20becd:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20bed4:	00 
  20bed5:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  20bedc:	00 
  20bedd:	48 89 bc 24 10 02 00 	mov    %rdi,0x210(%rsp)
  20bee4:	00 
  20bee5:	48 8d 35 f4 23 00 00 	lea    0x23f4(%rip),%rsi        # 20e2e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E>
  20beec:	e8 1f 77 00 00       	callq  213610 <_ZN4core3fmt10ArgumentV13new17ha785ec514c8c51adE>
  20bef1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20bef6:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20befb:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20bf00:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20bf05:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  20bf0c:	00 
  20bf0d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20bf14:	00 
  20bf15:	48 8d 8c 24 30 01 00 	lea    0x130(%rsp),%rcx
  20bf1c:	00 
  20bf1d:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20bf24:	00 
  20bf25:	48 8d 35 ac 35 01 00 	lea    0x135ac(%rip),%rsi        # 21f4d8 <memset+0x1a18>
  20bf2c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20bf32:	4c 89 c2             	mov    %r8,%rdx
  20bf35:	e8 c6 8f ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bf3a:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  20bf41:	00 
  20bf42:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20bf49:	00 
  20bf4a:	48 8d 15 97 35 01 00 	lea    0x13597(%rip),%rdx        # 21f4e8 <memset+0x1a28>
  20bf51:	e8 ba c8 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20bf56:	e9 2f ff ff ff       	jmpq   20be8a <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x1fa>
  20bf5b:	8a 44 24 66          	mov    0x66(%rsp),%al
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  20bf5f:	a8 01                	test   $0x1,%al
  20bf61:	75 0c                	jne    20bf6f <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x2df>
  20bf63:	eb 00                	jmp    20bf65 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x2d5>
  20bf65:	c6 84 24 57 01 00 00 	movb   $0x0,0x157(%rsp)
  20bf6c:	00 
  20bf6d:	eb 5a                	jmp    20bfc9 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x339>
  20bf6f:	c6 84 24 3f 02 00 00 	movb   $0x0,0x23f(%rsp)
  20bf76:	00 
  20bf77:	48 8b 3d 22 48 01 00 	mov    0x14822(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20bf7e:	0f b6 b4 24 3f 02 00 	movzbl 0x23f(%rsp),%esi
  20bf85:	00 
  20bf86:	e8 65 6b 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20bf8b:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  20bf92:	00 
  20bf93:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  20bf9a:	00 
  20bf9b:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  20bfa2:	00 
  20bfa3:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  20bfaa:	00 
  20bfab:	48 8d b4 24 58 01 00 	lea    0x158(%rsp),%rsi
  20bfb2:	00 
  20bfb3:	e8 a8 9d ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bfb8:	88 44 24 47          	mov    %al,0x47(%rsp)
  20bfbc:	8a 44 24 47          	mov    0x47(%rsp),%al
  20bfc0:	24 01                	and    $0x1,%al
  20bfc2:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  20bfc9:	f6 84 24 57 01 00 00 	testb  $0x1,0x157(%rsp)
  20bfd0:	01 
  20bfd1:	75 29                	jne    20bffc <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x36c>
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  20bfd3:	48 c7 84 24 a8 01 00 	movq   $0x3,0x1a8(%rsp)
  20bfda:	00 03 00 00 00 
  20bfdf:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  20bfe6:	00 
  20bfe7:	48 8d 35 6a 43 ff ff 	lea    -0xbc96(%rip),%rsi        # 200358 <str.0+0x58>
  20bfee:	e8 6d 9d ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bff3:	88 44 24 46          	mov    %al,0x46(%rsp)
  20bff7:	e9 a8 00 00 00       	jmpq   20c0a4 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x414>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  20bffc:	48 8d 3d b9 4c ff ff 	lea    -0xb347(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20c003:	e8 a8 47 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20c008:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20c00d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20c012:	48 83 c0 08          	add    $0x8,%rax
  20c016:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  20c01d:	00 
  20c01e:	48 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%rdi
  20c025:	00 
  20c026:	48 89 bc 24 18 02 00 	mov    %rdi,0x218(%rsp)
  20c02d:	00 
  20c02e:	48 8b 35 b3 47 01 00 	mov    0x147b3(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20c035:	e8 b6 77 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20c03a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20c03f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20c044:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20c049:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20c04e:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  20c055:	00 
  20c056:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  20c05d:	00 
  20c05e:	48 8d 8c 24 90 01 00 	lea    0x190(%rsp),%rcx
  20c065:	00 
  20c066:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20c06d:	00 
  20c06e:	48 8d 35 ab 34 01 00 	lea    0x134ab(%rip),%rsi        # 21f520 <memset+0x1a60>
  20c075:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20c07b:	4c 89 c2             	mov    %r8,%rdx
  20c07e:	e8 7d 8e ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20c083:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  20c08a:	00 
  20c08b:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20c092:	00 
  20c093:	48 8d 15 96 34 01 00 	lea    0x13496(%rip),%rdx        # 21f530 <memset+0x1a70>
  20c09a:	e8 71 c7 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20c09f:	e9 2f ff ff ff       	jmpq   20bfd3 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x343>
  20c0a4:	8a 44 24 46          	mov    0x46(%rsp),%al
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  20c0a8:	a8 01                	test   $0x1,%al
  20c0aa:	75 0c                	jne    20c0b8 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x428>
  20c0ac:	eb 00                	jmp    20c0ae <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x41e>
  20c0ae:	c6 84 24 b7 01 00 00 	movb   $0x0,0x1b7(%rsp)
  20c0b5:	00 
  20c0b6:	eb 5a                	jmp    20c112 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x482>
  20c0b8:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  20c0bf:	00 
  20c0c0:	48 8b 3d d9 46 01 00 	mov    0x146d9(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20c0c7:	0f b6 b4 24 2f 02 00 	movzbl 0x22f(%rsp),%esi
  20c0ce:	00 
  20c0cf:	e8 1c 6a 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20c0d4:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  20c0db:	00 
  20c0dc:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  20c0e3:	00 
  20c0e4:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  20c0eb:	00 
  20c0ec:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  20c0f3:	00 
  20c0f4:	48 8d b4 24 b8 01 00 	lea    0x1b8(%rsp),%rsi
  20c0fb:	00 
  20c0fc:	e8 5f 9c ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20c101:	88 44 24 27          	mov    %al,0x27(%rsp)
  20c105:	8a 44 24 27          	mov    0x27(%rsp),%al
  20c109:	24 01                	and    $0x1,%al
  20c10b:	88 84 24 b7 01 00 00 	mov    %al,0x1b7(%rsp)
  20c112:	f6 84 24 b7 01 00 00 	testb  $0x1,0x1b7(%rsp)
  20c119:	01 
  20c11a:	75 08                	jne    20c124 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x494>
}
  20c11c:	48 81 c4 68 02 00 00 	add    $0x268,%rsp
  20c123:	c3                   	retq   
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  20c124:	48 8d 3d 91 4b ff ff 	lea    -0xb46f(%rip),%rdi        # 200cbc <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E>
  20c12b:	e8 80 46 00 00       	callq  2107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>
  20c130:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c135:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20c13a:	48 83 c0 0c          	add    $0xc,%rax
  20c13e:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  20c145:	00 
  20c146:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  20c14d:	00 
  20c14e:	48 89 bc 24 20 02 00 	mov    %rdi,0x220(%rsp)
  20c155:	00 
  20c156:	48 8b 35 8b 46 01 00 	mov    0x1468b(%rip),%rsi        # 2207e8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  20c15d:	e8 8e 76 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  20c162:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c167:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20c16c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c171:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c176:	48 89 8c 24 f0 01 00 	mov    %rcx,0x1f0(%rsp)
  20c17d:	00 
  20c17e:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  20c185:	00 
  20c186:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  20c18d:	00 
  20c18e:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  20c195:	00 
  20c196:	48 8d 35 cb 33 01 00 	lea    0x133cb(%rip),%rsi        # 21f568 <memset+0x1aa8>
  20c19d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20c1a3:	4c 89 c2             	mov    %r8,%rdx
  20c1a6:	e8 55 8d ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20c1ab:	48 8b b4 24 a8 01 00 	mov    0x1a8(%rsp),%rsi
  20c1b2:	00 
  20c1b3:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  20c1ba:	00 
  20c1bb:	48 8d 15 b6 33 01 00 	lea    0x133b6(%rip),%rdx        # 21f578 <memset+0x1ab8>
  20c1c2:	e8 49 c6 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20c1c7:	e9 50 ff ff ff       	jmpq   20c11c <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E+0x48c>
  20c1cc:	cc                   	int3   
  20c1cd:	cc                   	int3   
  20c1ce:	cc                   	int3   
  20c1cf:	cc                   	int3   

000000000020c1d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E>:
                $Flag:ident = $value:expr;
            )*
        }
    ) => {
        impl $crate::_core::fmt::Debug for $BitFlags {
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  20c1d0:	48 81 ec 68 04 00 00 	sub    $0x468,%rsp
  20c1d7:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  20c1dc:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20c1e1:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  20c1e8:	00 
  20c1e9:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  20c1f0:	00 
                            }
                        }
                    )*
                }

                let mut first = true;
  20c1f1:	c6 44 24 75 01       	movb   $0x1,0x75(%rsp)
                $(
                    if <Self as __BitFlags>::$Flag(self) {
  20c1f6:	e8 e5 18 00 00       	callq  20dae0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317h05a7919899997ca0E>
  20c1fb:	88 44 24 73          	mov    %al,0x73(%rsp)
  20c1ff:	8a 44 24 73          	mov    0x73(%rsp),%al
bitflags! {
  20c203:	a8 01                	test   $0x1,%al
  20c205:	75 15                	jne    20c21c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x4c>
  20c207:	eb 00                	jmp    20c209 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x39>
  20c209:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  20c20e:	e8 0d 19 00 00       	callq  20db20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17hf7d1d666cb10c1ecE>
  20c213:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  20c217:	e9 ba 00 00 00       	jmpq   20c2d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x106>
                        if !first {
  20c21c:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c220:	34 ff                	xor    $0xff,%al
  20c222:	a8 01                	test   $0x1,%al
  20c224:	75 21                	jne    20c247 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x77>
  20c226:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
                        }
                        first = false;
  20c22b:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c230:	48 8d 35 be 49 ff ff 	lea    -0xb642(%rip),%rsi        # 200bf5 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x20>
  20c237:	ba 04 00 00 00       	mov    $0x4,%edx
  20c23c:	e8 7f 0c 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c241:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  20c245:	eb 5a                	jmp    20c2a1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd1>
  20c247:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c24c:	48 8d 35 5b 49 ff ff 	lea    -0xb6a5(%rip),%rsi        # 200bae <str.3+0x16e>
  20c253:	ba 03 00 00 00       	mov    $0x3,%edx
  20c258:	e8 63 0c 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c25d:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  20c261:	8a 44 24 5d          	mov    0x5d(%rsp),%al
  20c265:	0f b6 f8             	movzbl %al,%edi
  20c268:	83 e7 01             	and    $0x1,%edi
  20c26b:	e8 a0 63 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c270:	24 01                	and    $0x1,%al
  20c272:	88 44 24 76          	mov    %al,0x76(%rsp)
  20c276:	0f b6 44 24 76       	movzbl 0x76(%rsp),%eax
  20c27b:	a8 01                	test   $0x1,%al
  20c27d:	74 a7                	je     20c226 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x56>
  20c27f:	eb 00                	jmp    20c281 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb1>
  20c281:	eb 02                	jmp    20c285 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb5>
  20c283:	0f 0b                	ud2    
  20c285:	e8 46 5f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c28a:	24 01                	and    $0x1,%al
  20c28c:	88 44 24 74          	mov    %al,0x74(%rsp)
                }
                if first {
                    f.write_str("(empty)")?;
                }
                Ok(())
            }
  20c290:	8a 44 24 74          	mov    0x74(%rsp),%al
  20c294:	24 01                	and    $0x1,%al
  20c296:	0f b6 c0             	movzbl %al,%eax
  20c299:	48 81 c4 68 04 00 00 	add    $0x468,%rsp
  20c2a0:	c3                   	retq   
  20c2a1:	8a 44 24 5e          	mov    0x5e(%rsp),%al
  20c2a5:	0f b6 f8             	movzbl %al,%edi
  20c2a8:	83 e7 01             	and    $0x1,%edi
  20c2ab:	e8 60 63 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c2b0:	24 01                	and    $0x1,%al
  20c2b2:	88 44 24 77          	mov    %al,0x77(%rsp)
  20c2b6:	0f b6 44 24 77       	movzbl 0x77(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c2bb:	a8 01                	test   $0x1,%al
  20c2bd:	0f 84 46 ff ff ff    	je     20c209 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x39>
  20c2c3:	eb 00                	jmp    20c2c5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf5>
  20c2c5:	eb 02                	jmp    20c2c9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf9>
  20c2c7:	0f 0b                	ud2    
  20c2c9:	e8 02 5f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c2ce:	24 01                	and    $0x1,%al
  20c2d0:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c2d4:	eb ba                	jmp    20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c2d6:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  20c2da:	a8 01                	test   $0x1,%al
  20c2dc:	75 15                	jne    20c2f3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x123>
  20c2de:	eb 00                	jmp    20c2e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x110>
  20c2e0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c2e5:	e8 76 18 00 00       	callq  20db60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h38ed0fff0a694f6fE>
  20c2ea:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  20c2ee:	e9 b1 00 00 00       	jmpq   20c3a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1d4>
                        if !first {
  20c2f3:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c2f7:	34 ff                	xor    $0xff,%al
  20c2f9:	a8 01                	test   $0x1,%al
  20c2fb:	75 21                	jne    20c31e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x14e>
  20c2fd:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c302:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c307:	48 8d 35 f7 48 ff ff 	lea    -0xb709(%rip),%rsi        # 200c05 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x30>
  20c30e:	ba 06 00 00 00       	mov    $0x6,%edx
  20c313:	e8 a8 0b 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c318:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  20c31c:	eb 4e                	jmp    20c36c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x19c>
  20c31e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c323:	48 8d 35 84 48 ff ff 	lea    -0xb77c(%rip),%rsi        # 200bae <str.3+0x16e>
  20c32a:	ba 03 00 00 00       	mov    $0x3,%edx
  20c32f:	e8 8c 0b 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c334:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  20c338:	8a 44 24 5a          	mov    0x5a(%rsp),%al
  20c33c:	0f b6 f8             	movzbl %al,%edi
  20c33f:	83 e7 01             	and    $0x1,%edi
  20c342:	e8 c9 62 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c347:	24 01                	and    $0x1,%al
  20c349:	88 44 24 78          	mov    %al,0x78(%rsp)
  20c34d:	0f b6 44 24 78       	movzbl 0x78(%rsp),%eax
  20c352:	a8 01                	test   $0x1,%al
  20c354:	74 a7                	je     20c2fd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12d>
  20c356:	eb 00                	jmp    20c358 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x188>
  20c358:	eb 02                	jmp    20c35c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x18c>
  20c35a:	0f 0b                	ud2    
  20c35c:	e8 6f 5e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c361:	24 01                	and    $0x1,%al
  20c363:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c367:	e9 24 ff ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c36c:	8a 44 24 5b          	mov    0x5b(%rsp),%al
  20c370:	0f b6 f8             	movzbl %al,%edi
  20c373:	83 e7 01             	and    $0x1,%edi
  20c376:	e8 95 62 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c37b:	24 01                	and    $0x1,%al
  20c37d:	88 44 24 79          	mov    %al,0x79(%rsp)
  20c381:	0f b6 44 24 79       	movzbl 0x79(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c386:	a8 01                	test   $0x1,%al
  20c388:	0f 84 52 ff ff ff    	je     20c2e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x110>
  20c38e:	eb 00                	jmp    20c390 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1c0>
  20c390:	eb 02                	jmp    20c394 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1c4>
  20c392:	0f 0b                	ud2    
  20c394:	e8 37 5e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c399:	24 01                	and    $0x1,%al
  20c39b:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c39f:	e9 ec fe ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c3a4:	8a 44 24 5c          	mov    0x5c(%rsp),%al
  20c3a8:	a8 01                	test   $0x1,%al
  20c3aa:	75 15                	jne    20c3c1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1f1>
  20c3ac:	eb 00                	jmp    20c3ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1de>
  20c3ae:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c3b3:	e8 e8 17 00 00       	callq  20dba0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17h54c5cf518f3ae3bcE>
  20c3b8:	88 44 24 59          	mov    %al,0x59(%rsp)
  20c3bc:	e9 b1 00 00 00       	jmpq   20c472 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2a2>
                        if !first {
  20c3c1:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c3c5:	34 ff                	xor    $0xff,%al
  20c3c7:	a8 01                	test   $0x1,%al
  20c3c9:	75 21                	jne    20c3ec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x21c>
  20c3cb:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c3d0:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c3d5:	48 8d 35 2f 48 ff ff 	lea    -0xb7d1(%rip),%rsi        # 200c0b <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x36>
  20c3dc:	ba 06 00 00 00       	mov    $0x6,%edx
  20c3e1:	e8 da 0a 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c3e6:	88 44 24 58          	mov    %al,0x58(%rsp)
  20c3ea:	eb 4e                	jmp    20c43a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x26a>
  20c3ec:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c3f1:	48 8d 35 b6 47 ff ff 	lea    -0xb84a(%rip),%rsi        # 200bae <str.3+0x16e>
  20c3f8:	ba 03 00 00 00       	mov    $0x3,%edx
  20c3fd:	e8 be 0a 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c402:	88 44 24 57          	mov    %al,0x57(%rsp)
  20c406:	8a 44 24 57          	mov    0x57(%rsp),%al
  20c40a:	0f b6 f8             	movzbl %al,%edi
  20c40d:	83 e7 01             	and    $0x1,%edi
  20c410:	e8 fb 61 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c415:	24 01                	and    $0x1,%al
  20c417:	88 44 24 7a          	mov    %al,0x7a(%rsp)
  20c41b:	0f b6 44 24 7a       	movzbl 0x7a(%rsp),%eax
  20c420:	a8 01                	test   $0x1,%al
  20c422:	74 a7                	je     20c3cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1fb>
  20c424:	eb 00                	jmp    20c426 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x256>
  20c426:	eb 02                	jmp    20c42a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x25a>
  20c428:	0f 0b                	ud2    
  20c42a:	e8 a1 5d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c42f:	24 01                	and    $0x1,%al
  20c431:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c435:	e9 56 fe ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c43a:	8a 44 24 58          	mov    0x58(%rsp),%al
  20c43e:	0f b6 f8             	movzbl %al,%edi
  20c441:	83 e7 01             	and    $0x1,%edi
  20c444:	e8 c7 61 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c449:	24 01                	and    $0x1,%al
  20c44b:	88 44 24 7b          	mov    %al,0x7b(%rsp)
  20c44f:	0f b6 44 24 7b       	movzbl 0x7b(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c454:	a8 01                	test   $0x1,%al
  20c456:	0f 84 52 ff ff ff    	je     20c3ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1de>
  20c45c:	eb 00                	jmp    20c45e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x28e>
  20c45e:	eb 02                	jmp    20c462 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x292>
  20c460:	0f 0b                	ud2    
  20c462:	e8 69 5d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c467:	24 01                	and    $0x1,%al
  20c469:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c46d:	e9 1e fe ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c472:	8a 44 24 59          	mov    0x59(%rsp),%al
  20c476:	a8 01                	test   $0x1,%al
  20c478:	75 15                	jne    20c48f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2bf>
  20c47a:	eb 00                	jmp    20c47c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2ac>
  20c47c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c481:	e8 5a 17 00 00       	callq  20dbe0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17hedbbd25276ed604dE>
  20c486:	88 44 24 56          	mov    %al,0x56(%rsp)
  20c48a:	e9 b1 00 00 00       	jmpq   20c540 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x370>
                        if !first {
  20c48f:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c493:	34 ff                	xor    $0xff,%al
  20c495:	a8 01                	test   $0x1,%al
  20c497:	75 21                	jne    20c4ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2ea>
  20c499:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c49e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c4a3:	48 8d 35 67 47 ff ff 	lea    -0xb899(%rip),%rsi        # 200c11 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x3c>
  20c4aa:	ba 07 00 00 00       	mov    $0x7,%edx
  20c4af:	e8 0c 0a 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c4b4:	88 44 24 55          	mov    %al,0x55(%rsp)
  20c4b8:	eb 4e                	jmp    20c508 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x338>
  20c4ba:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c4bf:	48 8d 35 e8 46 ff ff 	lea    -0xb918(%rip),%rsi        # 200bae <str.3+0x16e>
  20c4c6:	ba 03 00 00 00       	mov    $0x3,%edx
  20c4cb:	e8 f0 09 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c4d0:	88 44 24 54          	mov    %al,0x54(%rsp)
  20c4d4:	8a 44 24 54          	mov    0x54(%rsp),%al
  20c4d8:	0f b6 f8             	movzbl %al,%edi
  20c4db:	83 e7 01             	and    $0x1,%edi
  20c4de:	e8 2d 61 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c4e3:	24 01                	and    $0x1,%al
  20c4e5:	88 44 24 7c          	mov    %al,0x7c(%rsp)
  20c4e9:	0f b6 44 24 7c       	movzbl 0x7c(%rsp),%eax
  20c4ee:	a8 01                	test   $0x1,%al
  20c4f0:	74 a7                	je     20c499 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2c9>
  20c4f2:	eb 00                	jmp    20c4f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x324>
  20c4f4:	eb 02                	jmp    20c4f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x328>
  20c4f6:	0f 0b                	ud2    
  20c4f8:	e8 d3 5c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c4fd:	24 01                	and    $0x1,%al
  20c4ff:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c503:	e9 88 fd ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c508:	8a 44 24 55          	mov    0x55(%rsp),%al
  20c50c:	0f b6 f8             	movzbl %al,%edi
  20c50f:	83 e7 01             	and    $0x1,%edi
  20c512:	e8 f9 60 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c517:	24 01                	and    $0x1,%al
  20c519:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  20c51d:	0f b6 44 24 7d       	movzbl 0x7d(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c522:	a8 01                	test   $0x1,%al
  20c524:	0f 84 52 ff ff ff    	je     20c47c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x2ac>
  20c52a:	eb 00                	jmp    20c52c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x35c>
  20c52c:	eb 02                	jmp    20c530 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x360>
  20c52e:	0f 0b                	ud2    
  20c530:	e8 9b 5c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c535:	24 01                	and    $0x1,%al
  20c537:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c53b:	e9 50 fd ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c540:	8a 44 24 56          	mov    0x56(%rsp),%al
  20c544:	a8 01                	test   $0x1,%al
  20c546:	75 15                	jne    20c55d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x38d>
  20c548:	eb 00                	jmp    20c54a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x37a>
  20c54a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c54f:	e8 cc 16 00 00       	callq  20dc20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h1db422617cbc19dcE>
  20c554:	88 44 24 53          	mov    %al,0x53(%rsp)
  20c558:	e9 b1 00 00 00       	jmpq   20c60e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x43e>
                        if !first {
  20c55d:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c561:	34 ff                	xor    $0xff,%al
  20c563:	a8 01                	test   $0x1,%al
  20c565:	75 21                	jne    20c588 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x3b8>
  20c567:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c56c:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c571:	48 8d 35 a0 46 ff ff 	lea    -0xb960(%rip),%rsi        # 200c18 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x43>
  20c578:	ba 06 00 00 00       	mov    $0x6,%edx
  20c57d:	e8 3e 09 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c582:	88 44 24 52          	mov    %al,0x52(%rsp)
  20c586:	eb 4e                	jmp    20c5d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x406>
  20c588:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c58d:	48 8d 35 1a 46 ff ff 	lea    -0xb9e6(%rip),%rsi        # 200bae <str.3+0x16e>
  20c594:	ba 03 00 00 00       	mov    $0x3,%edx
  20c599:	e8 22 09 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c59e:	88 44 24 51          	mov    %al,0x51(%rsp)
  20c5a2:	8a 44 24 51          	mov    0x51(%rsp),%al
  20c5a6:	0f b6 f8             	movzbl %al,%edi
  20c5a9:	83 e7 01             	and    $0x1,%edi
  20c5ac:	e8 5f 60 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c5b1:	24 01                	and    $0x1,%al
  20c5b3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20c5b7:	0f b6 44 24 7e       	movzbl 0x7e(%rsp),%eax
  20c5bc:	a8 01                	test   $0x1,%al
  20c5be:	74 a7                	je     20c567 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x397>
  20c5c0:	eb 00                	jmp    20c5c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x3f2>
  20c5c2:	eb 02                	jmp    20c5c6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x3f6>
  20c5c4:	0f 0b                	ud2    
  20c5c6:	e8 05 5c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c5cb:	24 01                	and    $0x1,%al
  20c5cd:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c5d1:	e9 ba fc ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c5d6:	8a 44 24 52          	mov    0x52(%rsp),%al
  20c5da:	0f b6 f8             	movzbl %al,%edi
  20c5dd:	83 e7 01             	and    $0x1,%edi
  20c5e0:	e8 2b 60 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c5e5:	24 01                	and    $0x1,%al
  20c5e7:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  20c5eb:	0f b6 44 24 7f       	movzbl 0x7f(%rsp),%eax
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c5f0:	a8 01                	test   $0x1,%al
  20c5f2:	0f 84 52 ff ff ff    	je     20c54a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x37a>
  20c5f8:	eb 00                	jmp    20c5fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x42a>
  20c5fa:	eb 02                	jmp    20c5fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x42e>
  20c5fc:	0f 0b                	ud2    
  20c5fe:	e8 cd 5b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c603:	24 01                	and    $0x1,%al
  20c605:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c609:	e9 82 fc ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c60e:	8a 44 24 53          	mov    0x53(%rsp),%al
  20c612:	a8 01                	test   $0x1,%al
  20c614:	75 15                	jne    20c62b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x45b>
  20c616:	eb 00                	jmp    20c618 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x448>
  20c618:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c61d:	e8 3e 16 00 00       	callq  20dc60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17h0fc406e8361fff5aE>
  20c622:	88 44 24 50          	mov    %al,0x50(%rsp)
  20c626:	e9 bd 00 00 00       	jmpq   20c6e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x518>
                        if !first {
  20c62b:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c62f:	34 ff                	xor    $0xff,%al
  20c631:	a8 01                	test   $0x1,%al
  20c633:	75 21                	jne    20c656 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x486>
  20c635:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c63a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c63f:	48 8d 35 d8 45 ff ff 	lea    -0xba28(%rip),%rsi        # 200c1e <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x49>
  20c646:	ba 03 00 00 00       	mov    $0x3,%edx
  20c64b:	e8 70 08 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c650:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  20c654:	eb 54                	jmp    20c6aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x4da>
  20c656:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c65b:	48 8d 35 4c 45 ff ff 	lea    -0xbab4(%rip),%rsi        # 200bae <str.3+0x16e>
  20c662:	ba 03 00 00 00       	mov    $0x3,%edx
  20c667:	e8 54 08 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c66c:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  20c670:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  20c674:	0f b6 f8             	movzbl %al,%edi
  20c677:	83 e7 01             	and    $0x1,%edi
  20c67a:	e8 91 5f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c67f:	24 01                	and    $0x1,%al
  20c681:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  20c688:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  20c68f:	00 
  20c690:	a8 01                	test   $0x1,%al
  20c692:	74 a1                	je     20c635 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x465>
  20c694:	eb 00                	jmp    20c696 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x4c6>
  20c696:	eb 02                	jmp    20c69a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x4ca>
  20c698:	0f 0b                	ud2    
  20c69a:	e8 31 5b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c69f:	24 01                	and    $0x1,%al
  20c6a1:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c6a5:	e9 e6 fb ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c6aa:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  20c6ae:	0f b6 f8             	movzbl %al,%edi
  20c6b1:	83 e7 01             	and    $0x1,%edi
  20c6b4:	e8 57 5f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c6b9:	24 01                	and    $0x1,%al
  20c6bb:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  20c6c2:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  20c6c9:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c6ca:	a8 01                	test   $0x1,%al
  20c6cc:	0f 84 46 ff ff ff    	je     20c618 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x448>
  20c6d2:	eb 00                	jmp    20c6d4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x504>
  20c6d4:	eb 02                	jmp    20c6d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x508>
  20c6d6:	0f 0b                	ud2    
  20c6d8:	e8 f3 5a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c6dd:	24 01                	and    $0x1,%al
  20c6df:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c6e3:	e9 a8 fb ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c6e8:	8a 44 24 50          	mov    0x50(%rsp),%al
  20c6ec:	a8 01                	test   $0x1,%al
  20c6ee:	75 15                	jne    20c705 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x535>
  20c6f0:	eb 00                	jmp    20c6f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x522>
  20c6f2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c6f7:	e8 a4 15 00 00       	callq  20dca0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17h4af46654590fc248E>
  20c6fc:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  20c700:	e9 bd 00 00 00       	jmpq   20c7c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5f2>
                        if !first {
  20c705:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c709:	34 ff                	xor    $0xff,%al
  20c70b:	a8 01                	test   $0x1,%al
  20c70d:	75 21                	jne    20c730 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x560>
  20c70f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c714:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c719:	48 8d 35 01 45 ff ff 	lea    -0xbaff(%rip),%rsi        # 200c21 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4c>
  20c720:	ba 03 00 00 00       	mov    $0x3,%edx
  20c725:	e8 96 07 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c72a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  20c72e:	eb 54                	jmp    20c784 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5b4>
  20c730:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c735:	48 8d 35 72 44 ff ff 	lea    -0xbb8e(%rip),%rsi        # 200bae <str.3+0x16e>
  20c73c:	ba 03 00 00 00       	mov    $0x3,%edx
  20c741:	e8 7a 07 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c746:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  20c74a:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  20c74e:	0f b6 f8             	movzbl %al,%edi
  20c751:	83 e7 01             	and    $0x1,%edi
  20c754:	e8 b7 5e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c759:	24 01                	and    $0x1,%al
  20c75b:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  20c762:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  20c769:	00 
  20c76a:	a8 01                	test   $0x1,%al
  20c76c:	74 a1                	je     20c70f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x53f>
  20c76e:	eb 00                	jmp    20c770 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5a0>
  20c770:	eb 02                	jmp    20c774 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5a4>
  20c772:	0f 0b                	ud2    
  20c774:	e8 57 5a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c779:	24 01                	and    $0x1,%al
  20c77b:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c77f:	e9 0c fb ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c784:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  20c788:	0f b6 f8             	movzbl %al,%edi
  20c78b:	83 e7 01             	and    $0x1,%edi
  20c78e:	e8 7d 5e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c793:	24 01                	and    $0x1,%al
  20c795:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  20c79c:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  20c7a3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c7a4:	a8 01                	test   $0x1,%al
  20c7a6:	0f 84 46 ff ff ff    	je     20c6f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x522>
  20c7ac:	eb 00                	jmp    20c7ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5de>
  20c7ae:	eb 02                	jmp    20c7b2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5e2>
  20c7b0:	0f 0b                	ud2    
  20c7b2:	e8 19 5a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c7b7:	24 01                	and    $0x1,%al
  20c7b9:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c7bd:	e9 ce fa ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c7c2:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  20c7c6:	a8 01                	test   $0x1,%al
  20c7c8:	75 15                	jne    20c7df <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x60f>
  20c7ca:	eb 00                	jmp    20c7cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5fc>
  20c7cc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c7d1:	e8 1a 15 00 00       	callq  20dcf0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217ha927bb1933afa797E>
  20c7d6:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  20c7da:	e9 bd 00 00 00       	jmpq   20c89c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6cc>
                        if !first {
  20c7df:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c7e3:	34 ff                	xor    $0xff,%al
  20c7e5:	a8 01                	test   $0x1,%al
  20c7e7:	75 21                	jne    20c80a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x63a>
  20c7e9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c7ee:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c7f3:	48 8d 35 2a 44 ff ff 	lea    -0xbbd6(%rip),%rsi        # 200c24 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4f>
  20c7fa:	ba 03 00 00 00       	mov    $0x3,%edx
  20c7ff:	e8 bc 06 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c804:	88 44 24 49          	mov    %al,0x49(%rsp)
  20c808:	eb 54                	jmp    20c85e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x68e>
  20c80a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c80f:	48 8d 35 98 43 ff ff 	lea    -0xbc68(%rip),%rsi        # 200bae <str.3+0x16e>
  20c816:	ba 03 00 00 00       	mov    $0x3,%edx
  20c81b:	e8 a0 06 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c820:	88 44 24 48          	mov    %al,0x48(%rsp)
  20c824:	8a 44 24 48          	mov    0x48(%rsp),%al
  20c828:	0f b6 f8             	movzbl %al,%edi
  20c82b:	83 e7 01             	and    $0x1,%edi
  20c82e:	e8 dd 5d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c833:	24 01                	and    $0x1,%al
  20c835:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  20c83c:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  20c843:	00 
  20c844:	a8 01                	test   $0x1,%al
  20c846:	74 a1                	je     20c7e9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x619>
  20c848:	eb 00                	jmp    20c84a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x67a>
  20c84a:	eb 02                	jmp    20c84e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x67e>
  20c84c:	0f 0b                	ud2    
  20c84e:	e8 7d 59 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c853:	24 01                	and    $0x1,%al
  20c855:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c859:	e9 32 fa ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c85e:	8a 44 24 49          	mov    0x49(%rsp),%al
  20c862:	0f b6 f8             	movzbl %al,%edi
  20c865:	83 e7 01             	and    $0x1,%edi
  20c868:	e8 a3 5d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c86d:	24 01                	and    $0x1,%al
  20c86f:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  20c876:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  20c87d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c87e:	a8 01                	test   $0x1,%al
  20c880:	0f 84 46 ff ff ff    	je     20c7cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x5fc>
  20c886:	eb 00                	jmp    20c888 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6b8>
  20c888:	eb 02                	jmp    20c88c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6bc>
  20c88a:	0f 0b                	ud2    
  20c88c:	e8 3f 59 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c891:	24 01                	and    $0x1,%al
  20c893:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c897:	e9 f4 f9 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c89c:	8a 44 24 4a          	mov    0x4a(%rsp),%al
  20c8a0:	a8 01                	test   $0x1,%al
  20c8a2:	75 15                	jne    20c8b9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6e9>
  20c8a4:	eb 00                	jmp    20c8a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6d6>
  20c8a6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c8ab:	e8 90 14 00 00       	callq  20dd40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h1ca84dad2531c9e6E>
  20c8b0:	88 44 24 47          	mov    %al,0x47(%rsp)
  20c8b4:	e9 bd 00 00 00       	jmpq   20c976 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7a6>
                        if !first {
  20c8b9:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c8bd:	34 ff                	xor    $0xff,%al
  20c8bf:	a8 01                	test   $0x1,%al
  20c8c1:	75 21                	jne    20c8e4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x714>
  20c8c3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c8c8:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c8cd:	48 8d 35 53 43 ff ff 	lea    -0xbcad(%rip),%rsi        # 200c27 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x52>
  20c8d4:	ba 03 00 00 00       	mov    $0x3,%edx
  20c8d9:	e8 e2 05 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c8de:	88 44 24 46          	mov    %al,0x46(%rsp)
  20c8e2:	eb 54                	jmp    20c938 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x768>
  20c8e4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c8e9:	48 8d 35 be 42 ff ff 	lea    -0xbd42(%rip),%rsi        # 200bae <str.3+0x16e>
  20c8f0:	ba 03 00 00 00       	mov    $0x3,%edx
  20c8f5:	e8 c6 05 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c8fa:	88 44 24 45          	mov    %al,0x45(%rsp)
  20c8fe:	8a 44 24 45          	mov    0x45(%rsp),%al
  20c902:	0f b6 f8             	movzbl %al,%edi
  20c905:	83 e7 01             	and    $0x1,%edi
  20c908:	e8 03 5d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c90d:	24 01                	and    $0x1,%al
  20c90f:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  20c916:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  20c91d:	00 
  20c91e:	a8 01                	test   $0x1,%al
  20c920:	74 a1                	je     20c8c3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6f3>
  20c922:	eb 00                	jmp    20c924 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x754>
  20c924:	eb 02                	jmp    20c928 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x758>
  20c926:	0f 0b                	ud2    
  20c928:	e8 a3 58 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c92d:	24 01                	and    $0x1,%al
  20c92f:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c933:	e9 58 f9 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c938:	8a 44 24 46          	mov    0x46(%rsp),%al
  20c93c:	0f b6 f8             	movzbl %al,%edi
  20c93f:	83 e7 01             	and    $0x1,%edi
  20c942:	e8 c9 5c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c947:	24 01                	and    $0x1,%al
  20c949:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  20c950:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  20c957:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c958:	a8 01                	test   $0x1,%al
  20c95a:	0f 84 46 ff ff ff    	je     20c8a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x6d6>
  20c960:	eb 00                	jmp    20c962 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x792>
  20c962:	eb 02                	jmp    20c966 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x796>
  20c964:	0f 0b                	ud2    
  20c966:	e8 65 58 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20c96b:	24 01                	and    $0x1,%al
  20c96d:	88 44 24 74          	mov    %al,0x74(%rsp)
  20c971:	e9 1a f9 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20c976:	8a 44 24 47          	mov    0x47(%rsp),%al
  20c97a:	a8 01                	test   $0x1,%al
  20c97c:	75 15                	jne    20c993 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7c3>
  20c97e:	eb 00                	jmp    20c980 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7b0>
  20c980:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20c985:	e8 06 14 00 00       	callq  20dd90 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h6ecab218315c367cE>
  20c98a:	88 44 24 44          	mov    %al,0x44(%rsp)
  20c98e:	e9 bd 00 00 00       	jmpq   20ca50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x880>
                        if !first {
  20c993:	8a 44 24 75          	mov    0x75(%rsp),%al
  20c997:	34 ff                	xor    $0xff,%al
  20c999:	a8 01                	test   $0x1,%al
  20c99b:	75 21                	jne    20c9be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7ee>
  20c99d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20c9a2:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20c9a7:	48 8d 35 7c 42 ff ff 	lea    -0xbd84(%rip),%rsi        # 200c2a <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x55>
  20c9ae:	ba 05 00 00 00       	mov    $0x5,%edx
  20c9b3:	e8 08 05 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c9b8:	88 44 24 43          	mov    %al,0x43(%rsp)
  20c9bc:	eb 54                	jmp    20ca12 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x842>
  20c9be:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20c9c3:	48 8d 35 e4 41 ff ff 	lea    -0xbe1c(%rip),%rsi        # 200bae <str.3+0x16e>
  20c9ca:	ba 03 00 00 00       	mov    $0x3,%edx
  20c9cf:	e8 ec 04 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20c9d4:	88 44 24 42          	mov    %al,0x42(%rsp)
  20c9d8:	8a 44 24 42          	mov    0x42(%rsp),%al
  20c9dc:	0f b6 f8             	movzbl %al,%edi
  20c9df:	83 e7 01             	and    $0x1,%edi
  20c9e2:	e8 29 5c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20c9e7:	24 01                	and    $0x1,%al
  20c9e9:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  20c9f0:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  20c9f7:	00 
  20c9f8:	a8 01                	test   $0x1,%al
  20c9fa:	74 a1                	je     20c99d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7cd>
  20c9fc:	eb 00                	jmp    20c9fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x82e>
  20c9fe:	eb 02                	jmp    20ca02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x832>
  20ca00:	0f 0b                	ud2    
  20ca02:	e8 c9 57 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ca07:	24 01                	and    $0x1,%al
  20ca09:	88 44 24 74          	mov    %al,0x74(%rsp)
  20ca0d:	e9 7e f8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20ca12:	8a 44 24 43          	mov    0x43(%rsp),%al
  20ca16:	0f b6 f8             	movzbl %al,%edi
  20ca19:	83 e7 01             	and    $0x1,%edi
  20ca1c:	e8 ef 5b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ca21:	24 01                	and    $0x1,%al
  20ca23:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  20ca2a:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  20ca31:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ca32:	a8 01                	test   $0x1,%al
  20ca34:	0f 84 46 ff ff ff    	je     20c980 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x7b0>
  20ca3a:	eb 00                	jmp    20ca3c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x86c>
  20ca3c:	eb 02                	jmp    20ca40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x870>
  20ca3e:	0f 0b                	ud2    
  20ca40:	e8 8b 57 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ca45:	24 01                	and    $0x1,%al
  20ca47:	88 44 24 74          	mov    %al,0x74(%rsp)
  20ca4b:	e9 40 f8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20ca50:	8a 44 24 44          	mov    0x44(%rsp),%al
  20ca54:	a8 01                	test   $0x1,%al
  20ca56:	75 15                	jne    20ca6d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x89d>
  20ca58:	eb 00                	jmp    20ca5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x88a>
  20ca5a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ca5f:	e8 7c 13 00 00       	callq  20dde0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hf317482f0871cea1E>
  20ca64:	88 44 24 41          	mov    %al,0x41(%rsp)
  20ca68:	e9 bd 00 00 00       	jmpq   20cb2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x95a>
                        if !first {
  20ca6d:	8a 44 24 75          	mov    0x75(%rsp),%al
  20ca71:	34 ff                	xor    $0xff,%al
  20ca73:	a8 01                	test   $0x1,%al
  20ca75:	75 21                	jne    20ca98 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x8c8>
  20ca77:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20ca7c:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ca81:	48 8d 35 a7 41 ff ff 	lea    -0xbe59(%rip),%rsi        # 200c2f <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x5a>
  20ca88:	ba 03 00 00 00       	mov    $0x3,%edx
  20ca8d:	e8 2e 04 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ca92:	88 44 24 40          	mov    %al,0x40(%rsp)
  20ca96:	eb 54                	jmp    20caec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x91c>
  20ca98:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20ca9d:	48 8d 35 0a 41 ff ff 	lea    -0xbef6(%rip),%rsi        # 200bae <str.3+0x16e>
  20caa4:	ba 03 00 00 00       	mov    $0x3,%edx
  20caa9:	e8 12 04 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20caae:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20cab2:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20cab6:	0f b6 f8             	movzbl %al,%edi
  20cab9:	83 e7 01             	and    $0x1,%edi
  20cabc:	e8 4f 5b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cac1:	24 01                	and    $0x1,%al
  20cac3:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  20caca:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  20cad1:	00 
  20cad2:	a8 01                	test   $0x1,%al
  20cad4:	74 a1                	je     20ca77 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x8a7>
  20cad6:	eb 00                	jmp    20cad8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x908>
  20cad8:	eb 02                	jmp    20cadc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x90c>
  20cada:	0f 0b                	ud2    
  20cadc:	e8 ef 56 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cae1:	24 01                	and    $0x1,%al
  20cae3:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cae7:	e9 a4 f7 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20caec:	8a 44 24 40          	mov    0x40(%rsp),%al
  20caf0:	0f b6 f8             	movzbl %al,%edi
  20caf3:	83 e7 01             	and    $0x1,%edi
  20caf6:	e8 15 5b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cafb:	24 01                	and    $0x1,%al
  20cafd:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  20cb04:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  20cb0b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cb0c:	a8 01                	test   $0x1,%al
  20cb0e:	0f 84 46 ff ff ff    	je     20ca5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x88a>
  20cb14:	eb 00                	jmp    20cb16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x946>
  20cb16:	eb 02                	jmp    20cb1a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x94a>
  20cb18:	0f 0b                	ud2    
  20cb1a:	e8 b1 56 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cb1f:	24 01                	and    $0x1,%al
  20cb21:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cb25:	e9 66 f7 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cb2a:	8a 44 24 41          	mov    0x41(%rsp),%al
  20cb2e:	a8 01                	test   $0x1,%al
  20cb30:	75 15                	jne    20cb47 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x977>
  20cb32:	eb 00                	jmp    20cb34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x964>
  20cb34:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cb39:	e8 f2 12 00 00       	callq  20de30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h04dbc705216d2f56E>
  20cb3e:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  20cb42:	e9 bd 00 00 00       	jmpq   20cc04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa34>
                        if !first {
  20cb47:	8a 44 24 75          	mov    0x75(%rsp),%al
  20cb4b:	34 ff                	xor    $0xff,%al
  20cb4d:	a8 01                	test   $0x1,%al
  20cb4f:	75 21                	jne    20cb72 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x9a2>
  20cb51:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cb56:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cb5b:	48 8d 35 d0 40 ff ff 	lea    -0xbf30(%rip),%rsi        # 200c32 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x5d>
  20cb62:	ba 03 00 00 00       	mov    $0x3,%edx
  20cb67:	e8 54 03 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cb6c:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  20cb70:	eb 54                	jmp    20cbc6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x9f6>
  20cb72:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20cb77:	48 8d 35 30 40 ff ff 	lea    -0xbfd0(%rip),%rsi        # 200bae <str.3+0x16e>
  20cb7e:	ba 03 00 00 00       	mov    $0x3,%edx
  20cb83:	e8 38 03 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cb88:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  20cb8c:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  20cb90:	0f b6 f8             	movzbl %al,%edi
  20cb93:	83 e7 01             	and    $0x1,%edi
  20cb96:	e8 75 5a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cb9b:	24 01                	and    $0x1,%al
  20cb9d:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  20cba4:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  20cbab:	00 
  20cbac:	a8 01                	test   $0x1,%al
  20cbae:	74 a1                	je     20cb51 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x981>
  20cbb0:	eb 00                	jmp    20cbb2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x9e2>
  20cbb2:	eb 02                	jmp    20cbb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x9e6>
  20cbb4:	0f 0b                	ud2    
  20cbb6:	e8 15 56 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cbbb:	24 01                	and    $0x1,%al
  20cbbd:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cbc1:	e9 ca f6 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cbc6:	8a 44 24 3d          	mov    0x3d(%rsp),%al
  20cbca:	0f b6 f8             	movzbl %al,%edi
  20cbcd:	83 e7 01             	and    $0x1,%edi
  20cbd0:	e8 3b 5a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cbd5:	24 01                	and    $0x1,%al
  20cbd7:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  20cbde:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  20cbe5:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cbe6:	a8 01                	test   $0x1,%al
  20cbe8:	0f 84 46 ff ff ff    	je     20cb34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x964>
  20cbee:	eb 00                	jmp    20cbf0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa20>
  20cbf0:	eb 02                	jmp    20cbf4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa24>
  20cbf2:	0f 0b                	ud2    
  20cbf4:	e8 d7 55 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cbf9:	24 01                	and    $0x1,%al
  20cbfb:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cbff:	e9 8c f6 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cc04:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  20cc08:	a8 01                	test   $0x1,%al
  20cc0a:	75 15                	jne    20cc21 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa51>
  20cc0c:	eb 00                	jmp    20cc0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa3e>
  20cc0e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cc13:	e8 68 12 00 00       	callq  20de80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17h9964258a547bf217E>
  20cc18:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  20cc1c:	e9 bd 00 00 00       	jmpq   20ccde <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb0e>
                        if !first {
  20cc21:	8a 44 24 75          	mov    0x75(%rsp),%al
  20cc25:	34 ff                	xor    $0xff,%al
  20cc27:	a8 01                	test   $0x1,%al
  20cc29:	75 21                	jne    20cc4c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa7c>
  20cc2b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cc30:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cc35:	48 8d 35 b5 3f ff ff 	lea    -0xc04b(%rip),%rsi        # 200bf1 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x1c>
  20cc3c:	ba 04 00 00 00       	mov    $0x4,%edx
  20cc41:	e8 7a 02 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cc46:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  20cc4a:	eb 54                	jmp    20cca0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xad0>
  20cc4c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20cc51:	48 8d 35 56 3f ff ff 	lea    -0xc0aa(%rip),%rsi        # 200bae <str.3+0x16e>
  20cc58:	ba 03 00 00 00       	mov    $0x3,%edx
  20cc5d:	e8 5e 02 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cc62:	88 44 24 39          	mov    %al,0x39(%rsp)
  20cc66:	8a 44 24 39          	mov    0x39(%rsp),%al
  20cc6a:	0f b6 f8             	movzbl %al,%edi
  20cc6d:	83 e7 01             	and    $0x1,%edi
  20cc70:	e8 9b 59 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cc75:	24 01                	and    $0x1,%al
  20cc77:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  20cc7e:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  20cc85:	00 
  20cc86:	a8 01                	test   $0x1,%al
  20cc88:	74 a1                	je     20cc2b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa5b>
  20cc8a:	eb 00                	jmp    20cc8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xabc>
  20cc8c:	eb 02                	jmp    20cc90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xac0>
  20cc8e:	0f 0b                	ud2    
  20cc90:	e8 3b 55 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cc95:	24 01                	and    $0x1,%al
  20cc97:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cc9b:	e9 f0 f5 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cca0:	8a 44 24 3a          	mov    0x3a(%rsp),%al
  20cca4:	0f b6 f8             	movzbl %al,%edi
  20cca7:	83 e7 01             	and    $0x1,%edi
  20ccaa:	e8 61 59 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ccaf:	24 01                	and    $0x1,%al
  20ccb1:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  20ccb8:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  20ccbf:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ccc0:	a8 01                	test   $0x1,%al
  20ccc2:	0f 84 46 ff ff ff    	je     20cc0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xa3e>
  20ccc8:	eb 00                	jmp    20ccca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xafa>
  20ccca:	eb 02                	jmp    20ccce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xafe>
  20cccc:	0f 0b                	ud2    
  20ccce:	e8 fd 54 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ccd3:	24 01                	and    $0x1,%al
  20ccd5:	88 44 24 74          	mov    %al,0x74(%rsp)
  20ccd9:	e9 b2 f5 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20ccde:	8a 44 24 3b          	mov    0x3b(%rsp),%al
  20cce2:	a8 01                	test   $0x1,%al
  20cce4:	75 15                	jne    20ccfb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb2b>
  20cce6:	eb 00                	jmp    20cce8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb18>
  20cce8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cced:	e8 de 11 00 00       	callq  20ded0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17hd20b7463471369f2E>
  20ccf2:	88 44 24 38          	mov    %al,0x38(%rsp)
  20ccf6:	e9 bd 00 00 00       	jmpq   20cdb8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbe8>
                        if !first {
  20ccfb:	8a 44 24 75          	mov    0x75(%rsp),%al
  20ccff:	34 ff                	xor    $0xff,%al
  20cd01:	a8 01                	test   $0x1,%al
  20cd03:	75 21                	jne    20cd26 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb56>
  20cd05:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cd0a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cd0f:	48 8d 35 1f 3f ff ff 	lea    -0xc0e1(%rip),%rsi        # 200c35 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x60>
  20cd16:	ba 05 00 00 00       	mov    $0x5,%edx
  20cd1b:	e8 a0 01 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cd20:	88 44 24 37          	mov    %al,0x37(%rsp)
  20cd24:	eb 54                	jmp    20cd7a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbaa>
  20cd26:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20cd2b:	48 8d 35 7c 3e ff ff 	lea    -0xc184(%rip),%rsi        # 200bae <str.3+0x16e>
  20cd32:	ba 03 00 00 00       	mov    $0x3,%edx
  20cd37:	e8 84 01 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cd3c:	88 44 24 36          	mov    %al,0x36(%rsp)
  20cd40:	8a 44 24 36          	mov    0x36(%rsp),%al
  20cd44:	0f b6 f8             	movzbl %al,%edi
  20cd47:	83 e7 01             	and    $0x1,%edi
  20cd4a:	e8 c1 58 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cd4f:	24 01                	and    $0x1,%al
  20cd51:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  20cd58:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  20cd5f:	00 
  20cd60:	a8 01                	test   $0x1,%al
  20cd62:	74 a1                	je     20cd05 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb35>
  20cd64:	eb 00                	jmp    20cd66 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb96>
  20cd66:	eb 02                	jmp    20cd6a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb9a>
  20cd68:	0f 0b                	ud2    
  20cd6a:	e8 61 54 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cd6f:	24 01                	and    $0x1,%al
  20cd71:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cd75:	e9 16 f5 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cd7a:	8a 44 24 37          	mov    0x37(%rsp),%al
  20cd7e:	0f b6 f8             	movzbl %al,%edi
  20cd81:	83 e7 01             	and    $0x1,%edi
  20cd84:	e8 87 58 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cd89:	24 01                	and    $0x1,%al
  20cd8b:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  20cd92:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  20cd99:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cd9a:	a8 01                	test   $0x1,%al
  20cd9c:	0f 84 46 ff ff ff    	je     20cce8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xb18>
  20cda2:	eb 00                	jmp    20cda4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbd4>
  20cda4:	eb 02                	jmp    20cda8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbd8>
  20cda6:	0f 0b                	ud2    
  20cda8:	e8 23 54 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cdad:	24 01                	and    $0x1,%al
  20cdaf:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cdb3:	e9 d8 f4 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cdb8:	8a 44 24 38          	mov    0x38(%rsp),%al
  20cdbc:	a8 01                	test   $0x1,%al
  20cdbe:	75 15                	jne    20cdd5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc05>
  20cdc0:	eb 00                	jmp    20cdc2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbf2>
  20cdc2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cdc7:	e8 54 11 00 00       	callq  20df20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17hd25d3a43911c077fE>
  20cdcc:	88 44 24 35          	mov    %al,0x35(%rsp)
  20cdd0:	e9 bd 00 00 00       	jmpq   20ce92 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xcc2>
                        if !first {
  20cdd5:	8a 44 24 75          	mov    0x75(%rsp),%al
  20cdd9:	34 ff                	xor    $0xff,%al
  20cddb:	a8 01                	test   $0x1,%al
  20cddd:	75 21                	jne    20ce00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc30>
  20cddf:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cde4:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cde9:	48 8d 35 c1 3d ff ff 	lea    -0xc23f(%rip),%rsi        # 200bb1 <str.3+0x171>
  20cdf0:	ba 04 00 00 00       	mov    $0x4,%edx
  20cdf5:	e8 c6 00 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cdfa:	88 44 24 34          	mov    %al,0x34(%rsp)
  20cdfe:	eb 54                	jmp    20ce54 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc84>
  20ce00:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20ce05:	48 8d 35 a2 3d ff ff 	lea    -0xc25e(%rip),%rsi        # 200bae <str.3+0x16e>
  20ce0c:	ba 03 00 00 00       	mov    $0x3,%edx
  20ce11:	e8 aa 00 01 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ce16:	88 44 24 33          	mov    %al,0x33(%rsp)
  20ce1a:	8a 44 24 33          	mov    0x33(%rsp),%al
  20ce1e:	0f b6 f8             	movzbl %al,%edi
  20ce21:	83 e7 01             	and    $0x1,%edi
  20ce24:	e8 e7 57 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ce29:	24 01                	and    $0x1,%al
  20ce2b:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  20ce32:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  20ce39:	00 
  20ce3a:	a8 01                	test   $0x1,%al
  20ce3c:	74 a1                	je     20cddf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0f>
  20ce3e:	eb 00                	jmp    20ce40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc70>
  20ce40:	eb 02                	jmp    20ce44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc74>
  20ce42:	0f 0b                	ud2    
  20ce44:	e8 87 53 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ce49:	24 01                	and    $0x1,%al
  20ce4b:	88 44 24 74          	mov    %al,0x74(%rsp)
  20ce4f:	e9 3c f4 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20ce54:	8a 44 24 34          	mov    0x34(%rsp),%al
  20ce58:	0f b6 f8             	movzbl %al,%edi
  20ce5b:	83 e7 01             	and    $0x1,%edi
  20ce5e:	e8 ad 57 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ce63:	24 01                	and    $0x1,%al
  20ce65:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  20ce6c:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  20ce73:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ce74:	a8 01                	test   $0x1,%al
  20ce76:	0f 84 46 ff ff ff    	je     20cdc2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xbf2>
  20ce7c:	eb 00                	jmp    20ce7e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xcae>
  20ce7e:	eb 02                	jmp    20ce82 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xcb2>
  20ce80:	0f 0b                	ud2    
  20ce82:	e8 49 53 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ce87:	24 01                	and    $0x1,%al
  20ce89:	88 44 24 74          	mov    %al,0x74(%rsp)
  20ce8d:	e9 fe f3 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20ce92:	8a 44 24 35          	mov    0x35(%rsp),%al
  20ce96:	a8 01                	test   $0x1,%al
  20ce98:	75 15                	jne    20ceaf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xcdf>
  20ce9a:	eb 00                	jmp    20ce9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xccc>
  20ce9c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cea1:	e8 ca 10 00 00       	callq  20df70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17h2f546a41e87b29d4E>
  20cea6:	88 44 24 32          	mov    %al,0x32(%rsp)
  20ceaa:	e9 bd 00 00 00       	jmpq   20cf6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd9c>
                        if !first {
  20ceaf:	8a 44 24 75          	mov    0x75(%rsp),%al
  20ceb3:	34 ff                	xor    $0xff,%al
  20ceb5:	a8 01                	test   $0x1,%al
  20ceb7:	75 21                	jne    20ceda <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd0a>
  20ceb9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cebe:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cec3:	48 8d 35 70 3d ff ff 	lea    -0xc290(%rip),%rsi        # 200c3a <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x65>
  20ceca:	ba 05 00 00 00       	mov    $0x5,%edx
  20cecf:	e8 ec ff 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ced4:	88 44 24 31          	mov    %al,0x31(%rsp)
  20ced8:	eb 54                	jmp    20cf2e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd5e>
  20ceda:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20cedf:	48 8d 35 c8 3c ff ff 	lea    -0xc338(%rip),%rsi        # 200bae <str.3+0x16e>
  20cee6:	ba 03 00 00 00       	mov    $0x3,%edx
  20ceeb:	e8 d0 ff 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cef0:	88 44 24 30          	mov    %al,0x30(%rsp)
  20cef4:	8a 44 24 30          	mov    0x30(%rsp),%al
  20cef8:	0f b6 f8             	movzbl %al,%edi
  20cefb:	83 e7 01             	and    $0x1,%edi
  20cefe:	e8 0d 57 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cf03:	24 01                	and    $0x1,%al
  20cf05:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  20cf0c:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  20cf13:	00 
  20cf14:	a8 01                	test   $0x1,%al
  20cf16:	74 a1                	je     20ceb9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xce9>
  20cf18:	eb 00                	jmp    20cf1a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd4a>
  20cf1a:	eb 02                	jmp    20cf1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd4e>
  20cf1c:	0f 0b                	ud2    
  20cf1e:	e8 ad 52 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cf23:	24 01                	and    $0x1,%al
  20cf25:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cf29:	e9 62 f3 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cf2e:	8a 44 24 31          	mov    0x31(%rsp),%al
  20cf32:	0f b6 f8             	movzbl %al,%edi
  20cf35:	83 e7 01             	and    $0x1,%edi
  20cf38:	e8 d3 56 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cf3d:	24 01                	and    $0x1,%al
  20cf3f:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  20cf46:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  20cf4d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cf4e:	a8 01                	test   $0x1,%al
  20cf50:	0f 84 46 ff ff ff    	je     20ce9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xccc>
  20cf56:	eb 00                	jmp    20cf58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd88>
  20cf58:	eb 02                	jmp    20cf5c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xd8c>
  20cf5a:	0f 0b                	ud2    
  20cf5c:	e8 6f 52 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cf61:	24 01                	and    $0x1,%al
  20cf63:	88 44 24 74          	mov    %al,0x74(%rsp)
  20cf67:	e9 24 f3 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20cf6c:	8a 44 24 32          	mov    0x32(%rsp),%al
  20cf70:	a8 01                	test   $0x1,%al
  20cf72:	75 15                	jne    20cf89 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xdb9>
  20cf74:	eb 00                	jmp    20cf76 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xda6>
  20cf76:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20cf7b:	e8 40 10 00 00       	callq  20dfc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h6ef8670be2e37455E>
  20cf80:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20cf84:	e9 bd 00 00 00       	jmpq   20d046 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe76>
                        if !first {
  20cf89:	8a 44 24 75          	mov    0x75(%rsp),%al
  20cf8d:	34 ff                	xor    $0xff,%al
  20cf8f:	a8 01                	test   $0x1,%al
  20cf91:	75 21                	jne    20cfb4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xde4>
  20cf93:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20cf98:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20cf9d:	48 8d 35 9b 3c ff ff 	lea    -0xc365(%rip),%rsi        # 200c3f <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x6a>
  20cfa4:	ba 03 00 00 00       	mov    $0x3,%edx
  20cfa9:	e8 12 ff 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cfae:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  20cfb2:	eb 54                	jmp    20d008 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe38>
  20cfb4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20cfb9:	48 8d 35 ee 3b ff ff 	lea    -0xc412(%rip),%rsi        # 200bae <str.3+0x16e>
  20cfc0:	ba 03 00 00 00       	mov    $0x3,%edx
  20cfc5:	e8 f6 fe 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20cfca:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  20cfce:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  20cfd2:	0f b6 f8             	movzbl %al,%edi
  20cfd5:	83 e7 01             	and    $0x1,%edi
  20cfd8:	e8 33 56 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20cfdd:	24 01                	and    $0x1,%al
  20cfdf:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  20cfe6:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  20cfed:	00 
  20cfee:	a8 01                	test   $0x1,%al
  20cff0:	74 a1                	je     20cf93 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xdc3>
  20cff2:	eb 00                	jmp    20cff4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe24>
  20cff4:	eb 02                	jmp    20cff8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe28>
  20cff6:	0f 0b                	ud2    
  20cff8:	e8 d3 51 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20cffd:	24 01                	and    $0x1,%al
  20cfff:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d003:	e9 88 f2 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d008:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  20d00c:	0f b6 f8             	movzbl %al,%edi
  20d00f:	83 e7 01             	and    $0x1,%edi
  20d012:	e8 f9 55 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d017:	24 01                	and    $0x1,%al
  20d019:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  20d020:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  20d027:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d028:	a8 01                	test   $0x1,%al
  20d02a:	0f 84 46 ff ff ff    	je     20cf76 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xda6>
  20d030:	eb 00                	jmp    20d032 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe62>
  20d032:	eb 02                	jmp    20d036 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe66>
  20d034:	0f 0b                	ud2    
  20d036:	e8 95 51 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d03b:	24 01                	and    $0x1,%al
  20d03d:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d041:	e9 4a f2 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d046:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  20d04a:	a8 01                	test   $0x1,%al
  20d04c:	75 15                	jne    20d063 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe93>
  20d04e:	eb 00                	jmp    20d050 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe80>
  20d050:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d055:	e8 b6 0f 00 00       	callq  20e010 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217hb2d092cf84a8cc80E>
  20d05a:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  20d05e:	e9 bd 00 00 00       	jmpq   20d120 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf50>
                        if !first {
  20d063:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d067:	34 ff                	xor    $0xff,%al
  20d069:	a8 01                	test   $0x1,%al
  20d06b:	75 21                	jne    20d08e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xebe>
  20d06d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d072:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d077:	48 8d 35 c4 3b ff ff 	lea    -0xc43c(%rip),%rsi        # 200c42 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x6d>
  20d07e:	ba 06 00 00 00       	mov    $0x6,%edx
  20d083:	e8 38 fe 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d088:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  20d08c:	eb 54                	jmp    20d0e2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf12>
  20d08e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d093:	48 8d 35 14 3b ff ff 	lea    -0xc4ec(%rip),%rsi        # 200bae <str.3+0x16e>
  20d09a:	ba 03 00 00 00       	mov    $0x3,%edx
  20d09f:	e8 1c fe 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d0a4:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  20d0a8:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  20d0ac:	0f b6 f8             	movzbl %al,%edi
  20d0af:	83 e7 01             	and    $0x1,%edi
  20d0b2:	e8 59 55 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d0b7:	24 01                	and    $0x1,%al
  20d0b9:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  20d0c0:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  20d0c7:	00 
  20d0c8:	a8 01                	test   $0x1,%al
  20d0ca:	74 a1                	je     20d06d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe9d>
  20d0cc:	eb 00                	jmp    20d0ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xefe>
  20d0ce:	eb 02                	jmp    20d0d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf02>
  20d0d0:	0f 0b                	ud2    
  20d0d2:	e8 f9 50 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d0d7:	24 01                	and    $0x1,%al
  20d0d9:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d0dd:	e9 ae f1 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d0e2:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  20d0e6:	0f b6 f8             	movzbl %al,%edi
  20d0e9:	83 e7 01             	and    $0x1,%edi
  20d0ec:	e8 1f 55 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d0f1:	24 01                	and    $0x1,%al
  20d0f3:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  20d0fa:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  20d101:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d102:	a8 01                	test   $0x1,%al
  20d104:	0f 84 46 ff ff ff    	je     20d050 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xe80>
  20d10a:	eb 00                	jmp    20d10c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf3c>
  20d10c:	eb 02                	jmp    20d110 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf40>
  20d10e:	0f 0b                	ud2    
  20d110:	e8 bb 50 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d115:	24 01                	and    $0x1,%al
  20d117:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d11b:	e9 70 f1 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d120:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  20d124:	a8 01                	test   $0x1,%al
  20d126:	75 15                	jne    20d13d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf6d>
  20d128:	eb 00                	jmp    20d12a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf5a>
  20d12a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d12f:	e8 2c 0f 00 00       	callq  20e060 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17h4fd2ea6906fa3b60E>
  20d134:	88 44 24 29          	mov    %al,0x29(%rsp)
  20d138:	e9 bd 00 00 00       	jmpq   20d1fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x102a>
                        if !first {
  20d13d:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d141:	34 ff                	xor    $0xff,%al
  20d143:	a8 01                	test   $0x1,%al
  20d145:	75 21                	jne    20d168 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf98>
  20d147:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d14c:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d151:	48 8d 35 f0 3a ff ff 	lea    -0xc510(%rip),%rsi        # 200c48 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x73>
  20d158:	ba 06 00 00 00       	mov    $0x6,%edx
  20d15d:	e8 5e fd 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d162:	88 44 24 28          	mov    %al,0x28(%rsp)
  20d166:	eb 54                	jmp    20d1bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xfec>
  20d168:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d16d:	48 8d 35 3a 3a ff ff 	lea    -0xc5c6(%rip),%rsi        # 200bae <str.3+0x16e>
  20d174:	ba 03 00 00 00       	mov    $0x3,%edx
  20d179:	e8 42 fd 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d17e:	88 44 24 27          	mov    %al,0x27(%rsp)
  20d182:	8a 44 24 27          	mov    0x27(%rsp),%al
  20d186:	0f b6 f8             	movzbl %al,%edi
  20d189:	83 e7 01             	and    $0x1,%edi
  20d18c:	e8 7f 54 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d191:	24 01                	and    $0x1,%al
  20d193:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  20d19a:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  20d1a1:	00 
  20d1a2:	a8 01                	test   $0x1,%al
  20d1a4:	74 a1                	je     20d147 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf77>
  20d1a6:	eb 00                	jmp    20d1a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xfd8>
  20d1a8:	eb 02                	jmp    20d1ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xfdc>
  20d1aa:	0f 0b                	ud2    
  20d1ac:	e8 1f 50 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d1b1:	24 01                	and    $0x1,%al
  20d1b3:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d1b7:	e9 d4 f0 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d1bc:	8a 44 24 28          	mov    0x28(%rsp),%al
  20d1c0:	0f b6 f8             	movzbl %al,%edi
  20d1c3:	83 e7 01             	and    $0x1,%edi
  20d1c6:	e8 45 54 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d1cb:	24 01                	and    $0x1,%al
  20d1cd:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  20d1d4:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  20d1db:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d1dc:	a8 01                	test   $0x1,%al
  20d1de:	0f 84 46 ff ff ff    	je     20d12a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xf5a>
  20d1e4:	eb 00                	jmp    20d1e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1016>
  20d1e6:	eb 02                	jmp    20d1ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x101a>
  20d1e8:	0f 0b                	ud2    
  20d1ea:	e8 e1 4f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d1ef:	24 01                	and    $0x1,%al
  20d1f1:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d1f5:	e9 96 f0 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d1fa:	8a 44 24 29          	mov    0x29(%rsp),%al
  20d1fe:	a8 01                	test   $0x1,%al
  20d200:	75 15                	jne    20d217 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1047>
  20d202:	eb 00                	jmp    20d204 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1034>
  20d204:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d209:	e8 a2 0e 00 00       	callq  20e0b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17h59a68489c15f7d5bE>
  20d20e:	88 44 24 26          	mov    %al,0x26(%rsp)
  20d212:	e9 bd 00 00 00       	jmpq   20d2d4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1104>
                        if !first {
  20d217:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d21b:	34 ff                	xor    $0xff,%al
  20d21d:	a8 01                	test   $0x1,%al
  20d21f:	75 21                	jne    20d242 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1072>
  20d221:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d226:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d22b:	48 8d 35 1c 3a ff ff 	lea    -0xc5e4(%rip),%rsi        # 200c4e <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x79>
  20d232:	ba 06 00 00 00       	mov    $0x6,%edx
  20d237:	e8 84 fc 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d23c:	88 44 24 25          	mov    %al,0x25(%rsp)
  20d240:	eb 54                	jmp    20d296 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x10c6>
  20d242:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d247:	48 8d 35 60 39 ff ff 	lea    -0xc6a0(%rip),%rsi        # 200bae <str.3+0x16e>
  20d24e:	ba 03 00 00 00       	mov    $0x3,%edx
  20d253:	e8 68 fc 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d258:	88 44 24 24          	mov    %al,0x24(%rsp)
  20d25c:	8a 44 24 24          	mov    0x24(%rsp),%al
  20d260:	0f b6 f8             	movzbl %al,%edi
  20d263:	83 e7 01             	and    $0x1,%edi
  20d266:	e8 a5 53 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d26b:	24 01                	and    $0x1,%al
  20d26d:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  20d274:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  20d27b:	00 
  20d27c:	a8 01                	test   $0x1,%al
  20d27e:	74 a1                	je     20d221 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1051>
  20d280:	eb 00                	jmp    20d282 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x10b2>
  20d282:	eb 02                	jmp    20d286 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x10b6>
  20d284:	0f 0b                	ud2    
  20d286:	e8 45 4f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d28b:	24 01                	and    $0x1,%al
  20d28d:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d291:	e9 fa ef ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d296:	8a 44 24 25          	mov    0x25(%rsp),%al
  20d29a:	0f b6 f8             	movzbl %al,%edi
  20d29d:	83 e7 01             	and    $0x1,%edi
  20d2a0:	e8 6b 53 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d2a5:	24 01                	and    $0x1,%al
  20d2a7:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  20d2ae:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  20d2b5:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d2b6:	a8 01                	test   $0x1,%al
  20d2b8:	0f 84 46 ff ff ff    	je     20d204 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1034>
  20d2be:	eb 00                	jmp    20d2c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x10f0>
  20d2c0:	eb 02                	jmp    20d2c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x10f4>
  20d2c2:	0f 0b                	ud2    
  20d2c4:	e8 07 4f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d2c9:	24 01                	and    $0x1,%al
  20d2cb:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d2cf:	e9 bc ef ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d2d4:	8a 44 24 26          	mov    0x26(%rsp),%al
  20d2d8:	a8 01                	test   $0x1,%al
  20d2da:	75 15                	jne    20d2f1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1121>
  20d2dc:	eb 00                	jmp    20d2de <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x110e>
  20d2de:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d2e3:	e8 18 0e 00 00       	callq  20e100 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17h8945a333f4fd0b53E>
  20d2e8:	88 44 24 23          	mov    %al,0x23(%rsp)
  20d2ec:	e9 bd 00 00 00       	jmpq   20d3ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11de>
                        if !first {
  20d2f1:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d2f5:	34 ff                	xor    $0xff,%al
  20d2f7:	a8 01                	test   $0x1,%al
  20d2f9:	75 21                	jne    20d31c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x114c>
  20d2fb:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d300:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d305:	48 8d 35 48 39 ff ff 	lea    -0xc6b8(%rip),%rsi        # 200c54 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x7f>
  20d30c:	ba 05 00 00 00       	mov    $0x5,%edx
  20d311:	e8 aa fb 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d316:	88 44 24 22          	mov    %al,0x22(%rsp)
  20d31a:	eb 54                	jmp    20d370 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11a0>
  20d31c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d321:	48 8d 35 86 38 ff ff 	lea    -0xc77a(%rip),%rsi        # 200bae <str.3+0x16e>
  20d328:	ba 03 00 00 00       	mov    $0x3,%edx
  20d32d:	e8 8e fb 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d332:	88 44 24 21          	mov    %al,0x21(%rsp)
  20d336:	8a 44 24 21          	mov    0x21(%rsp),%al
  20d33a:	0f b6 f8             	movzbl %al,%edi
  20d33d:	83 e7 01             	and    $0x1,%edi
  20d340:	e8 cb 52 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d345:	24 01                	and    $0x1,%al
  20d347:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  20d34e:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  20d355:	00 
  20d356:	a8 01                	test   $0x1,%al
  20d358:	74 a1                	je     20d2fb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x112b>
  20d35a:	eb 00                	jmp    20d35c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x118c>
  20d35c:	eb 02                	jmp    20d360 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1190>
  20d35e:	0f 0b                	ud2    
  20d360:	e8 6b 4e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d365:	24 01                	and    $0x1,%al
  20d367:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d36b:	e9 20 ef ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d370:	8a 44 24 22          	mov    0x22(%rsp),%al
  20d374:	0f b6 f8             	movzbl %al,%edi
  20d377:	83 e7 01             	and    $0x1,%edi
  20d37a:	e8 91 52 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d37f:	24 01                	and    $0x1,%al
  20d381:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  20d388:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  20d38f:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d390:	a8 01                	test   $0x1,%al
  20d392:	0f 84 46 ff ff ff    	je     20d2de <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x110e>
  20d398:	eb 00                	jmp    20d39a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11ca>
  20d39a:	eb 02                	jmp    20d39e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11ce>
  20d39c:	0f 0b                	ud2    
  20d39e:	e8 2d 4e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d3a3:	24 01                	and    $0x1,%al
  20d3a5:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d3a9:	e9 e2 ee ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d3ae:	8a 44 24 23          	mov    0x23(%rsp),%al
  20d3b2:	a8 01                	test   $0x1,%al
  20d3b4:	75 15                	jne    20d3cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11fb>
  20d3b6:	eb 00                	jmp    20d3b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11e8>
  20d3b8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d3bd:	e8 8e 0d 00 00       	callq  20e150 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17h7c7f2ed42077d483E>
  20d3c2:	88 44 24 20          	mov    %al,0x20(%rsp)
  20d3c6:	e9 bd 00 00 00       	jmpq   20d488 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12b8>
                        if !first {
  20d3cb:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d3cf:	34 ff                	xor    $0xff,%al
  20d3d1:	a8 01                	test   $0x1,%al
  20d3d3:	75 21                	jne    20d3f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1226>
  20d3d5:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d3da:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d3df:	48 8d 35 73 38 ff ff 	lea    -0xc78d(%rip),%rsi        # 200c59 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x84>
  20d3e6:	ba 06 00 00 00       	mov    $0x6,%edx
  20d3eb:	e8 d0 fa 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d3f0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d3f4:	eb 54                	jmp    20d44a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x127a>
  20d3f6:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d3fb:	48 8d 35 ac 37 ff ff 	lea    -0xc854(%rip),%rsi        # 200bae <str.3+0x16e>
  20d402:	ba 03 00 00 00       	mov    $0x3,%edx
  20d407:	e8 b4 fa 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d40c:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20d410:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20d414:	0f b6 f8             	movzbl %al,%edi
  20d417:	83 e7 01             	and    $0x1,%edi
  20d41a:	e8 f1 51 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d41f:	24 01                	and    $0x1,%al
  20d421:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  20d428:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  20d42f:	00 
  20d430:	a8 01                	test   $0x1,%al
  20d432:	74 a1                	je     20d3d5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1205>
  20d434:	eb 00                	jmp    20d436 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1266>
  20d436:	eb 02                	jmp    20d43a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x126a>
  20d438:	0f 0b                	ud2    
  20d43a:	e8 91 4d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d43f:	24 01                	and    $0x1,%al
  20d441:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d445:	e9 46 ee ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d44a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20d44e:	0f b6 f8             	movzbl %al,%edi
  20d451:	83 e7 01             	and    $0x1,%edi
  20d454:	e8 b7 51 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d459:	24 01                	and    $0x1,%al
  20d45b:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  20d462:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  20d469:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d46a:	a8 01                	test   $0x1,%al
  20d46c:	0f 84 46 ff ff ff    	je     20d3b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x11e8>
  20d472:	eb 00                	jmp    20d474 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12a4>
  20d474:	eb 02                	jmp    20d478 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12a8>
  20d476:	0f 0b                	ud2    
  20d478:	e8 53 4d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d47d:	24 01                	and    $0x1,%al
  20d47f:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d483:	e9 08 ee ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d488:	8a 44 24 20          	mov    0x20(%rsp),%al
  20d48c:	a8 01                	test   $0x1,%al
  20d48e:	75 15                	jne    20d4a5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12d5>
  20d490:	eb 00                	jmp    20d492 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12c2>
  20d492:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d497:	e8 04 0d 00 00       	callq  20e1a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h4b3ecfcee87d83dbE>
  20d49c:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  20d4a0:	e9 bd 00 00 00       	jmpq   20d562 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1392>
                        if !first {
  20d4a5:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d4a9:	34 ff                	xor    $0xff,%al
  20d4ab:	a8 01                	test   $0x1,%al
  20d4ad:	75 21                	jne    20d4d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1300>
  20d4af:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d4b4:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d4b9:	48 8d 35 21 37 ff ff 	lea    -0xc8df(%rip),%rsi        # 200be1 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc>
  20d4c0:	ba 04 00 00 00       	mov    $0x4,%edx
  20d4c5:	e8 f6 f9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d4ca:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  20d4ce:	eb 54                	jmp    20d524 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1354>
  20d4d0:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d4d5:	48 8d 35 d2 36 ff ff 	lea    -0xc92e(%rip),%rsi        # 200bae <str.3+0x16e>
  20d4dc:	ba 03 00 00 00       	mov    $0x3,%edx
  20d4e1:	e8 da f9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d4e6:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  20d4ea:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  20d4ee:	0f b6 f8             	movzbl %al,%edi
  20d4f1:	83 e7 01             	and    $0x1,%edi
  20d4f4:	e8 17 51 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d4f9:	24 01                	and    $0x1,%al
  20d4fb:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  20d502:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  20d509:	00 
  20d50a:	a8 01                	test   $0x1,%al
  20d50c:	74 a1                	je     20d4af <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12df>
  20d50e:	eb 00                	jmp    20d510 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1340>
  20d510:	eb 02                	jmp    20d514 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1344>
  20d512:	0f 0b                	ud2    
  20d514:	e8 b7 4c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d519:	24 01                	and    $0x1,%al
  20d51b:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d51f:	e9 6c ed ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d524:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  20d528:	0f b6 f8             	movzbl %al,%edi
  20d52b:	83 e7 01             	and    $0x1,%edi
  20d52e:	e8 dd 50 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d533:	24 01                	and    $0x1,%al
  20d535:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  20d53c:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  20d543:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d544:	a8 01                	test   $0x1,%al
  20d546:	0f 84 46 ff ff ff    	je     20d492 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x12c2>
  20d54c:	eb 00                	jmp    20d54e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x137e>
  20d54e:	eb 02                	jmp    20d552 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1382>
  20d550:	0f 0b                	ud2    
  20d552:	e8 79 4c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d557:	24 01                	and    $0x1,%al
  20d559:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d55d:	e9 2e ed ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d562:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  20d566:	a8 01                	test   $0x1,%al
  20d568:	75 15                	jne    20d57f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x13af>
  20d56a:	eb 00                	jmp    20d56c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x139c>
  20d56c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d571:	e8 7a 0c 00 00       	callq  20e1f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17hc4d92b7d70c6bd7cE>
  20d576:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  20d57a:	e9 bd 00 00 00       	jmpq   20d63c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x146c>
                        if !first {
  20d57f:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d583:	34 ff                	xor    $0xff,%al
  20d585:	a8 01                	test   $0x1,%al
  20d587:	75 21                	jne    20d5aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x13da>
  20d589:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d58e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d593:	48 8d 35 c5 36 ff ff 	lea    -0xc93b(%rip),%rsi        # 200c5f <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x8a>
  20d59a:	ba 03 00 00 00       	mov    $0x3,%edx
  20d59f:	e8 1c f9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d5a4:	88 44 24 19          	mov    %al,0x19(%rsp)
  20d5a8:	eb 54                	jmp    20d5fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x142e>
  20d5aa:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d5af:	48 8d 35 f8 35 ff ff 	lea    -0xca08(%rip),%rsi        # 200bae <str.3+0x16e>
  20d5b6:	ba 03 00 00 00       	mov    $0x3,%edx
  20d5bb:	e8 00 f9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d5c0:	88 44 24 18          	mov    %al,0x18(%rsp)
  20d5c4:	8a 44 24 18          	mov    0x18(%rsp),%al
  20d5c8:	0f b6 f8             	movzbl %al,%edi
  20d5cb:	83 e7 01             	and    $0x1,%edi
  20d5ce:	e8 3d 50 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d5d3:	24 01                	and    $0x1,%al
  20d5d5:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  20d5dc:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  20d5e3:	00 
  20d5e4:	a8 01                	test   $0x1,%al
  20d5e6:	74 a1                	je     20d589 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x13b9>
  20d5e8:	eb 00                	jmp    20d5ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x141a>
  20d5ea:	eb 02                	jmp    20d5ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x141e>
  20d5ec:	0f 0b                	ud2    
  20d5ee:	e8 dd 4b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d5f3:	24 01                	and    $0x1,%al
  20d5f5:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d5f9:	e9 92 ec ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d5fe:	8a 44 24 19          	mov    0x19(%rsp),%al
  20d602:	0f b6 f8             	movzbl %al,%edi
  20d605:	83 e7 01             	and    $0x1,%edi
  20d608:	e8 03 50 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d60d:	24 01                	and    $0x1,%al
  20d60f:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  20d616:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  20d61d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d61e:	a8 01                	test   $0x1,%al
  20d620:	0f 84 46 ff ff ff    	je     20d56c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x139c>
  20d626:	eb 00                	jmp    20d628 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1458>
  20d628:	eb 02                	jmp    20d62c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x145c>
  20d62a:	0f 0b                	ud2    
  20d62c:	e8 9f 4b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d631:	24 01                	and    $0x1,%al
  20d633:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d637:	e9 54 ec ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d63c:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  20d640:	a8 01                	test   $0x1,%al
  20d642:	75 15                	jne    20d659 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1489>
  20d644:	eb 00                	jmp    20d646 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1476>
  20d646:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d64b:	e8 f0 0b 00 00       	callq  20e240 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17hfdd8925645340eb4E>
  20d650:	88 44 24 17          	mov    %al,0x17(%rsp)
  20d654:	e9 bd 00 00 00       	jmpq   20d716 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1546>
                        if !first {
  20d659:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d65d:	34 ff                	xor    $0xff,%al
  20d65f:	a8 01                	test   $0x1,%al
  20d661:	75 21                	jne    20d684 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x14b4>
  20d663:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d668:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d66d:	48 8d 35 ee 35 ff ff 	lea    -0xca12(%rip),%rsi        # 200c62 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x8d>
  20d674:	ba 05 00 00 00       	mov    $0x5,%edx
  20d679:	e8 42 f8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d67e:	88 44 24 16          	mov    %al,0x16(%rsp)
  20d682:	eb 54                	jmp    20d6d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1508>
  20d684:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d689:	48 8d 35 1e 35 ff ff 	lea    -0xcae2(%rip),%rsi        # 200bae <str.3+0x16e>
  20d690:	ba 03 00 00 00       	mov    $0x3,%edx
  20d695:	e8 26 f8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d69a:	88 44 24 15          	mov    %al,0x15(%rsp)
  20d69e:	8a 44 24 15          	mov    0x15(%rsp),%al
  20d6a2:	0f b6 f8             	movzbl %al,%edi
  20d6a5:	83 e7 01             	and    $0x1,%edi
  20d6a8:	e8 63 4f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d6ad:	24 01                	and    $0x1,%al
  20d6af:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  20d6b6:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  20d6bd:	00 
  20d6be:	a8 01                	test   $0x1,%al
  20d6c0:	74 a1                	je     20d663 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1493>
  20d6c2:	eb 00                	jmp    20d6c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x14f4>
  20d6c4:	eb 02                	jmp    20d6c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x14f8>
  20d6c6:	0f 0b                	ud2    
  20d6c8:	e8 03 4b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d6cd:	24 01                	and    $0x1,%al
  20d6cf:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d6d3:	e9 b8 eb ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d6d8:	8a 44 24 16          	mov    0x16(%rsp),%al
  20d6dc:	0f b6 f8             	movzbl %al,%edi
  20d6df:	83 e7 01             	and    $0x1,%edi
  20d6e2:	e8 29 4f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d6e7:	24 01                	and    $0x1,%al
  20d6e9:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  20d6f0:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  20d6f7:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d6f8:	a8 01                	test   $0x1,%al
  20d6fa:	0f 84 46 ff ff ff    	je     20d646 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1476>
  20d700:	eb 00                	jmp    20d702 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1532>
  20d702:	eb 02                	jmp    20d706 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1536>
  20d704:	0f 0b                	ud2    
  20d706:	e8 c5 4a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d70b:	24 01                	and    $0x1,%al
  20d70d:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d711:	e9 7a eb ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d716:	8a 44 24 17          	mov    0x17(%rsp),%al
  20d71a:	a8 01                	test   $0x1,%al
  20d71c:	75 15                	jne    20d733 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1563>
  20d71e:	eb 00                	jmp    20d720 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1550>
  20d720:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20d725:	e8 66 0b 00 00       	callq  20e290 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17hc872176f33356e18E>
  20d72a:	88 44 24 14          	mov    %al,0x14(%rsp)
  20d72e:	e9 bd 00 00 00       	jmpq   20d7f0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1620>
                        if !first {
  20d733:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d737:	34 ff                	xor    $0xff,%al
  20d739:	a8 01                	test   $0x1,%al
  20d73b:	75 21                	jne    20d75e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x158e>
  20d73d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d742:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d747:	48 8d 35 19 35 ff ff 	lea    -0xcae7(%rip),%rsi        # 200c67 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x92>
  20d74e:	ba 07 00 00 00       	mov    $0x7,%edx
  20d753:	e8 68 f7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d758:	88 44 24 13          	mov    %al,0x13(%rsp)
  20d75c:	eb 54                	jmp    20d7b2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x15e2>
  20d75e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d763:	48 8d 35 44 34 ff ff 	lea    -0xcbbc(%rip),%rsi        # 200bae <str.3+0x16e>
  20d76a:	ba 03 00 00 00       	mov    $0x3,%edx
  20d76f:	e8 4c f7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d774:	88 44 24 12          	mov    %al,0x12(%rsp)
  20d778:	8a 44 24 12          	mov    0x12(%rsp),%al
  20d77c:	0f b6 f8             	movzbl %al,%edi
  20d77f:	83 e7 01             	and    $0x1,%edi
  20d782:	e8 89 4e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d787:	24 01                	and    $0x1,%al
  20d789:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  20d790:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  20d797:	00 
  20d798:	a8 01                	test   $0x1,%al
  20d79a:	74 a1                	je     20d73d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x156d>
  20d79c:	eb 00                	jmp    20d79e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x15ce>
  20d79e:	eb 02                	jmp    20d7a2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x15d2>
  20d7a0:	0f 0b                	ud2    
  20d7a2:	e8 29 4a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d7a7:	24 01                	and    $0x1,%al
  20d7a9:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d7ad:	e9 de ea ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d7b2:	8a 44 24 13          	mov    0x13(%rsp),%al
  20d7b6:	0f b6 f8             	movzbl %al,%edi
  20d7b9:	83 e7 01             	and    $0x1,%edi
  20d7bc:	e8 4f 4e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d7c1:	24 01                	and    $0x1,%al
  20d7c3:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  20d7ca:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  20d7d1:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d7d2:	a8 01                	test   $0x1,%al
  20d7d4:	0f 84 46 ff ff ff    	je     20d720 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1550>
  20d7da:	eb 00                	jmp    20d7dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x160c>
  20d7dc:	eb 02                	jmp    20d7e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1610>
  20d7de:	0f 0b                	ud2    
  20d7e0:	e8 eb 49 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d7e5:	24 01                	and    $0x1,%al
  20d7e7:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d7eb:	e9 a0 ea ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d7f0:	8a 44 24 14          	mov    0x14(%rsp),%al
  20d7f4:	a8 01                	test   $0x1,%al
  20d7f6:	75 1e                	jne    20d816 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1646>
  20d7f8:	eb 00                	jmp    20d7fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x162a>
  20d7fa:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  20d7ff:	8b 00                	mov    (%rax),%eax
  20d801:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  20d805:	e8 76 02 00 00       	callq  20da80 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h54b56e17e5e208a3E>
  20d80a:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
  20d811:	e9 bd 00 00 00       	jmpq   20d8d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1703>
                        if !first {
  20d816:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d81a:	34 ff                	xor    $0xff,%al
  20d81c:	a8 01                	test   $0x1,%al
  20d81e:	75 21                	jne    20d841 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1671>
  20d820:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  20d825:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d82a:	48 8d 35 3d 34 ff ff 	lea    -0xcbc3(%rip),%rsi        # 200c6e <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x99>
  20d831:	ba 03 00 00 00       	mov    $0x3,%edx
  20d836:	e8 85 f6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d83b:	88 44 24 0b          	mov    %al,0xb(%rsp)
  20d83f:	eb 54                	jmp    20d895 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x16c5>
  20d841:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  20d846:	48 8d 35 61 33 ff ff 	lea    -0xcc9f(%rip),%rsi        # 200bae <str.3+0x16e>
  20d84d:	ba 03 00 00 00       	mov    $0x3,%edx
  20d852:	e8 69 f6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d857:	88 44 24 0a          	mov    %al,0xa(%rsp)
  20d85b:	8a 44 24 0a          	mov    0xa(%rsp),%al
  20d85f:	0f b6 f8             	movzbl %al,%edi
  20d862:	83 e7 01             	and    $0x1,%edi
  20d865:	e8 a6 4d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d86a:	24 01                	and    $0x1,%al
  20d86c:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  20d873:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  20d87a:	00 
  20d87b:	a8 01                	test   $0x1,%al
  20d87d:	74 a1                	je     20d820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1650>
  20d87f:	eb 00                	jmp    20d881 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x16b1>
  20d881:	eb 02                	jmp    20d885 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x16b5>
  20d883:	0f 0b                	ud2    
  20d885:	e8 46 49 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d88a:	24 01                	and    $0x1,%al
  20d88c:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d890:	e9 fb e9 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d895:	8a 44 24 0b          	mov    0xb(%rsp),%al
  20d899:	0f b6 f8             	movzbl %al,%edi
  20d89c:	83 e7 01             	and    $0x1,%edi
  20d89f:	e8 6c 4d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d8a4:	24 01                	and    $0x1,%al
  20d8a6:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  20d8ad:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  20d8b4:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20d8b5:	a8 01                	test   $0x1,%al
  20d8b7:	0f 84 3d ff ff ff    	je     20d7fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x162a>
  20d8bd:	eb 00                	jmp    20d8bf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x16ef>
  20d8bf:	eb 02                	jmp    20d8c3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x16f3>
  20d8c1:	0f 0b                	ud2    
  20d8c3:	e8 08 49 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d8c8:	24 01                	and    $0x1,%al
  20d8ca:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d8ce:	e9 bd e9 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
                let extra_bits = self.bits & !Self::all().bits();
  20d8d3:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20d8da:	00 
  20d8db:	e8 c0 01 00 00       	callq  20daa0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17h8ef1cecbc62bc05fE>
  20d8e0:	89 44 24 04          	mov    %eax,0x4(%rsp)
  20d8e4:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  20d8e8:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  20d8ec:	83 f1 ff             	xor    $0xffffffff,%ecx
  20d8ef:	21 c8                	and    %ecx,%eax
  20d8f1:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
  20d8f8:	83 bc 24 ac 00 00 00 	cmpl   $0x0,0xac(%rsp)
  20d8ff:	00 
  20d900:	75 10                	jne    20d912 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1742>
  20d902:	f6 44 24 75 01       	testb  $0x1,0x75(%rsp)
  20d907:	0f 85 1e 01 00 00    	jne    20da2b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x185b>
  20d90d:	e9 0f 01 00 00       	jmpq   20da21 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1851>
                    if !first {
  20d912:	8a 44 24 75          	mov    0x75(%rsp),%al
  20d916:	34 ff                	xor    $0xff,%al
  20d918:	a8 01                	test   $0x1,%al
  20d91a:	75 21                	jne    20d93d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x176d>
  20d91c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    first = false;
  20d921:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                    f.write_str("0x")?;
  20d926:	48 8d 35 44 33 ff ff 	lea    -0xccbc(%rip),%rsi        # 200c71 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x9c>
  20d92d:	ba 02 00 00 00       	mov    $0x2,%edx
  20d932:	e8 89 f5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d937:	88 44 24 03          	mov    %al,0x3(%rsp)
  20d93b:	eb 54                	jmp    20d991 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x17c1>
  20d93d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        f.write_str(" | ")?;
  20d942:	48 8d 35 65 32 ff ff 	lea    -0xcd9b(%rip),%rsi        # 200bae <str.3+0x16e>
  20d949:	ba 03 00 00 00       	mov    $0x3,%edx
  20d94e:	e8 6d f5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d953:	88 44 24 02          	mov    %al,0x2(%rsp)
  20d957:	8a 44 24 02          	mov    0x2(%rsp),%al
  20d95b:	0f b6 f8             	movzbl %al,%edi
  20d95e:	83 e7 01             	and    $0x1,%edi
  20d961:	e8 aa 4c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d966:	24 01                	and    $0x1,%al
  20d968:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  20d96f:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  20d976:	00 
  20d977:	a8 01                	test   $0x1,%al
  20d979:	74 a1                	je     20d91c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x174c>
  20d97b:	eb 00                	jmp    20d97d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x17ad>
  20d97d:	eb 02                	jmp    20d981 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x17b1>
  20d97f:	0f 0b                	ud2    
  20d981:	e8 4a 48 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d986:	24 01                	and    $0x1,%al
  20d988:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d98c:	e9 ff e8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d991:	8a 44 24 03          	mov    0x3(%rsp),%al
  20d995:	0f b6 f8             	movzbl %al,%edi
  20d998:	83 e7 01             	and    $0x1,%edi
  20d99b:	e8 70 4c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d9a0:	24 01                	and    $0x1,%al
  20d9a2:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  20d9a9:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  20d9b0:	00 
                    f.write_str("0x")?;
  20d9b1:	a8 01                	test   $0x1,%al
  20d9b3:	74 06                	je     20d9bb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x17eb>
  20d9b5:	eb 00                	jmp    20d9b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x17e7>
  20d9b7:	eb 1a                	jmp    20d9d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1803>
  20d9b9:	0f 0b                	ud2    
  20d9bb:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  20d9c0:	48 8d bc 24 ac 00 00 	lea    0xac(%rsp),%rdi
  20d9c7:	00 
  20d9c8:	e8 a3 c9 00 00       	callq  21a370 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  20d9cd:	88 44 24 01          	mov    %al,0x1(%rsp)
  20d9d1:	eb 10                	jmp    20d9e3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1813>
  20d9d3:	e8 f8 47 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20d9d8:	24 01                	and    $0x1,%al
  20d9da:	88 44 24 74          	mov    %al,0x74(%rsp)
  20d9de:	e9 ad e8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20d9e3:	8a 44 24 01          	mov    0x1(%rsp),%al
  20d9e7:	0f b6 f8             	movzbl %al,%edi
  20d9ea:	83 e7 01             	and    $0x1,%edi
  20d9ed:	e8 1e 4c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20d9f2:	24 01                	and    $0x1,%al
  20d9f4:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  20d9fb:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  20da02:	00 
  20da03:	a8 01                	test   $0x1,%al
  20da05:	0f 84 f7 fe ff ff    	je     20d902 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1732>
  20da0b:	eb 00                	jmp    20da0d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x183d>
  20da0d:	eb 02                	jmp    20da11 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1841>
  20da0f:	0f 0b                	ud2    
  20da11:	e8 ba 47 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20da16:	24 01                	and    $0x1,%al
  20da18:	88 44 24 74          	mov    %al,0x74(%rsp)
  20da1c:	e9 6f e8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
                Ok(())
  20da21:	c6 44 24 74 00       	movb   $0x0,0x74(%rsp)
            }
  20da26:	e9 65 e8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20da2b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    f.write_str("(empty)")?;
  20da30:	48 8d 35 3c 32 ff ff 	lea    -0xcdc4(%rip),%rsi        # 200c73 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x9e>
  20da37:	ba 07 00 00 00       	mov    $0x7,%edx
  20da3c:	e8 7f f4 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20da41:	88 04 24             	mov    %al,(%rsp)
  20da44:	8a 04 24             	mov    (%rsp),%al
  20da47:	0f b6 f8             	movzbl %al,%edi
  20da4a:	83 e7 01             	and    $0x1,%edi
  20da4d:	e8 be 4b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20da52:	24 01                	and    $0x1,%al
  20da54:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  20da5b:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  20da62:	00 
  20da63:	a8 01                	test   $0x1,%al
  20da65:	74 ba                	je     20da21 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1851>
  20da67:	eb 00                	jmp    20da69 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x1899>
  20da69:	eb 02                	jmp    20da6d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0x189d>
  20da6b:	0f 0b                	ud2    
  20da6d:	e8 5e 47 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20da72:	24 01                	and    $0x1,%al
  20da74:	88 44 24 74          	mov    %al,0x74(%rsp)
  20da78:	e9 13 e8 ff ff       	jmpq   20c290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc63369afc1224c9E+0xc0>
  20da7d:	cc                   	int3   
  20da7e:	cc                   	int3   
  20da7f:	cc                   	int3   

000000000020da80 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h54b56e17e5e208a3E>:
                Self { bits: 0 }
            }

            /// Returns the set containing all flags.
            #[inline]
            pub const fn all() -> Self {
  20da80:	48 83 ec 04          	sub    $0x4,%rsp
  20da84:	c7 04 24 ff f7 fe 1f 	movl   $0x1ffef7ff,(%rsp)
                            $(#[$attr $($args)*])*
                            $Flag = $value;
                        )*
                    }
                }
            }
  20da8b:	8b 04 24             	mov    (%rsp),%eax
  20da8e:	48 83 c4 04          	add    $0x4,%rsp
  20da92:	c3                   	retq   
  20da93:	cc                   	int3   
  20da94:	cc                   	int3   
  20da95:	cc                   	int3   
  20da96:	cc                   	int3   
  20da97:	cc                   	int3   
  20da98:	cc                   	int3   
  20da99:	cc                   	int3   
  20da9a:	cc                   	int3   
  20da9b:	cc                   	int3   
  20da9c:	cc                   	int3   
  20da9d:	cc                   	int3   
  20da9e:	cc                   	int3   
  20da9f:	cc                   	int3   

000000000020daa0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17h8ef1cecbc62bc05fE>:

            /// Returns the raw value of the flags currently stored.
            #[inline]
            pub const fn bits(&self) -> $T {
  20daa0:	50                   	push   %rax
  20daa1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  20daa5:	8b 07                	mov    (%rdi),%eax
            }
  20daa7:	59                   	pop    %rcx
  20daa8:	c3                   	retq   
  20daa9:	cc                   	int3   
  20daaa:	cc                   	int3   
  20daab:	cc                   	int3   
  20daac:	cc                   	int3   
  20daad:	cc                   	int3   
  20daae:	cc                   	int3   
  20daaf:	cc                   	int3   

000000000020dab0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17he9121e32f4c55965E>:
            }

            /// Convert from underlying bit representation, dropping any bits
            /// that do not correspond to flags.
            #[inline]
            pub const fn from_bits_truncate(bits: $T) -> Self {
  20dab0:	48 83 ec 18          	sub    $0x18,%rsp
  20dab4:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  20dab8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  20dabc:	e8 bf ff ff ff       	callq  20da80 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h54b56e17e5e208a3E>
  20dac1:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  20dac5:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  20dac9:	8b 44 24 08          	mov    0x8(%rsp),%eax
  20dacd:	21 c8                	and    %ecx,%eax
  20dacf:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  20dad3:	8b 44 24 10          	mov    0x10(%rsp),%eax
  20dad7:	48 83 c4 18          	add    $0x18,%rsp
  20dadb:	c3                   	retq   
  20dadc:	cc                   	int3   
  20dadd:	cc                   	int3   
  20dade:	cc                   	int3   
  20dadf:	cc                   	int3   

000000000020dae0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317h05a7919899997ca0E>:
                            fn $Flag(&self) -> bool {
  20dae0:	48 83 ec 18          	sub    $0x18,%rsp
  20dae4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dae8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20daed:	31 c0                	xor    %eax,%eax
  20daef:	a8 01                	test   $0x1,%al
  20daf1:	75 17                	jne    20db0a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317h05a7919899997ca0E+0x2a>
  20daf3:	48 8b 04 24          	mov    (%rsp),%rax
  20daf7:	8b 00                	mov    (%rax),%eax
  20daf9:	83 e0 01             	and    $0x1,%eax
  20dafc:	83 f8 01             	cmp    $0x1,%eax
  20daff:	0f 94 c0             	sete   %al
  20db02:	24 01                	and    $0x1,%al
  20db04:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20db08:	eb 05                	jmp    20db0f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317h05a7919899997ca0E+0x2f>
  20db0a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    (
        $(#[$filtered:meta])*
        fn $($item:tt)*
    ) => {
        $(#[$filtered])*
        fn $($item)*
  20db0f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20db13:	24 01                	and    $0x1,%al
  20db15:	0f b6 c0             	movzbl %al,%eax
  20db18:	48 83 c4 18          	add    $0x18,%rsp
  20db1c:	c3                   	retq   
  20db1d:	cc                   	int3   
  20db1e:	cc                   	int3   
  20db1f:	cc                   	int3   

000000000020db20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17hf7d1d666cb10c1ecE>:
                            fn $Flag(&self) -> bool {
  20db20:	48 83 ec 18          	sub    $0x18,%rsp
  20db24:	48 89 3c 24          	mov    %rdi,(%rsp)
  20db28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20db2d:	31 c0                	xor    %eax,%eax
  20db2f:	a8 01                	test   $0x1,%al
  20db31:	75 17                	jne    20db4a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17hf7d1d666cb10c1ecE+0x2a>
  20db33:	48 8b 04 24          	mov    (%rsp),%rax
  20db37:	8b 00                	mov    (%rax),%eax
  20db39:	83 e0 02             	and    $0x2,%eax
  20db3c:	83 f8 02             	cmp    $0x2,%eax
  20db3f:	0f 94 c0             	sete   %al
  20db42:	24 01                	and    $0x1,%al
  20db44:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20db48:	eb 05                	jmp    20db4f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17hf7d1d666cb10c1ecE+0x2f>
  20db4a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20db4f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20db53:	24 01                	and    $0x1,%al
  20db55:	0f b6 c0             	movzbl %al,%eax
  20db58:	48 83 c4 18          	add    $0x18,%rsp
  20db5c:	c3                   	retq   
  20db5d:	cc                   	int3   
  20db5e:	cc                   	int3   
  20db5f:	cc                   	int3   

000000000020db60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h38ed0fff0a694f6fE>:
                            fn $Flag(&self) -> bool {
  20db60:	48 83 ec 18          	sub    $0x18,%rsp
  20db64:	48 89 3c 24          	mov    %rdi,(%rsp)
  20db68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20db6d:	31 c0                	xor    %eax,%eax
  20db6f:	a8 01                	test   $0x1,%al
  20db71:	75 17                	jne    20db8a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h38ed0fff0a694f6fE+0x2a>
  20db73:	48 8b 04 24          	mov    (%rsp),%rax
  20db77:	8b 00                	mov    (%rax),%eax
  20db79:	83 e0 04             	and    $0x4,%eax
  20db7c:	83 f8 04             	cmp    $0x4,%eax
  20db7f:	0f 94 c0             	sete   %al
  20db82:	24 01                	and    $0x1,%al
  20db84:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20db88:	eb 05                	jmp    20db8f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h38ed0fff0a694f6fE+0x2f>
  20db8a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20db8f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20db93:	24 01                	and    $0x1,%al
  20db95:	0f b6 c0             	movzbl %al,%eax
  20db98:	48 83 c4 18          	add    $0x18,%rsp
  20db9c:	c3                   	retq   
  20db9d:	cc                   	int3   
  20db9e:	cc                   	int3   
  20db9f:	cc                   	int3   

000000000020dba0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17h54c5cf518f3ae3bcE>:
                            fn $Flag(&self) -> bool {
  20dba0:	48 83 ec 18          	sub    $0x18,%rsp
  20dba4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dba8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dbad:	31 c0                	xor    %eax,%eax
  20dbaf:	a8 01                	test   $0x1,%al
  20dbb1:	75 17                	jne    20dbca <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17h54c5cf518f3ae3bcE+0x2a>
  20dbb3:	48 8b 04 24          	mov    (%rsp),%rax
  20dbb7:	8b 00                	mov    (%rax),%eax
  20dbb9:	83 e0 08             	and    $0x8,%eax
  20dbbc:	83 f8 08             	cmp    $0x8,%eax
  20dbbf:	0f 94 c0             	sete   %al
  20dbc2:	24 01                	and    $0x1,%al
  20dbc4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dbc8:	eb 05                	jmp    20dbcf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17h54c5cf518f3ae3bcE+0x2f>
  20dbca:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dbcf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dbd3:	24 01                	and    $0x1,%al
  20dbd5:	0f b6 c0             	movzbl %al,%eax
  20dbd8:	48 83 c4 18          	add    $0x18,%rsp
  20dbdc:	c3                   	retq   
  20dbdd:	cc                   	int3   
  20dbde:	cc                   	int3   
  20dbdf:	cc                   	int3   

000000000020dbe0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17hedbbd25276ed604dE>:
                            fn $Flag(&self) -> bool {
  20dbe0:	48 83 ec 18          	sub    $0x18,%rsp
  20dbe4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dbe8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dbed:	31 c0                	xor    %eax,%eax
  20dbef:	a8 01                	test   $0x1,%al
  20dbf1:	75 17                	jne    20dc0a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17hedbbd25276ed604dE+0x2a>
  20dbf3:	48 8b 04 24          	mov    (%rsp),%rax
  20dbf7:	8b 00                	mov    (%rax),%eax
  20dbf9:	83 e0 10             	and    $0x10,%eax
  20dbfc:	83 f8 10             	cmp    $0x10,%eax
  20dbff:	0f 94 c0             	sete   %al
  20dc02:	24 01                	and    $0x1,%al
  20dc04:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dc08:	eb 05                	jmp    20dc0f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17hedbbd25276ed604dE+0x2f>
  20dc0a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dc0f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dc13:	24 01                	and    $0x1,%al
  20dc15:	0f b6 c0             	movzbl %al,%eax
  20dc18:	48 83 c4 18          	add    $0x18,%rsp
  20dc1c:	c3                   	retq   
  20dc1d:	cc                   	int3   
  20dc1e:	cc                   	int3   
  20dc1f:	cc                   	int3   

000000000020dc20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h1db422617cbc19dcE>:
                            fn $Flag(&self) -> bool {
  20dc20:	48 83 ec 18          	sub    $0x18,%rsp
  20dc24:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dc28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dc2d:	31 c0                	xor    %eax,%eax
  20dc2f:	a8 01                	test   $0x1,%al
  20dc31:	75 17                	jne    20dc4a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h1db422617cbc19dcE+0x2a>
  20dc33:	48 8b 04 24          	mov    (%rsp),%rax
  20dc37:	8b 00                	mov    (%rax),%eax
  20dc39:	83 e0 20             	and    $0x20,%eax
  20dc3c:	83 f8 20             	cmp    $0x20,%eax
  20dc3f:	0f 94 c0             	sete   %al
  20dc42:	24 01                	and    $0x1,%al
  20dc44:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dc48:	eb 05                	jmp    20dc4f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h1db422617cbc19dcE+0x2f>
  20dc4a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dc4f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dc53:	24 01                	and    $0x1,%al
  20dc55:	0f b6 c0             	movzbl %al,%eax
  20dc58:	48 83 c4 18          	add    $0x18,%rsp
  20dc5c:	c3                   	retq   
  20dc5d:	cc                   	int3   
  20dc5e:	cc                   	int3   
  20dc5f:	cc                   	int3   

000000000020dc60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17h0fc406e8361fff5aE>:
                            fn $Flag(&self) -> bool {
  20dc60:	48 83 ec 18          	sub    $0x18,%rsp
  20dc64:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dc68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dc6d:	31 c0                	xor    %eax,%eax
  20dc6f:	a8 01                	test   $0x1,%al
  20dc71:	75 17                	jne    20dc8a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17h0fc406e8361fff5aE+0x2a>
  20dc73:	48 8b 04 24          	mov    (%rsp),%rax
  20dc77:	8b 00                	mov    (%rax),%eax
  20dc79:	83 e0 40             	and    $0x40,%eax
  20dc7c:	83 f8 40             	cmp    $0x40,%eax
  20dc7f:	0f 94 c0             	sete   %al
  20dc82:	24 01                	and    $0x1,%al
  20dc84:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dc88:	eb 05                	jmp    20dc8f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17h0fc406e8361fff5aE+0x2f>
  20dc8a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dc8f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dc93:	24 01                	and    $0x1,%al
  20dc95:	0f b6 c0             	movzbl %al,%eax
  20dc98:	48 83 c4 18          	add    $0x18,%rsp
  20dc9c:	c3                   	retq   
  20dc9d:	cc                   	int3   
  20dc9e:	cc                   	int3   
  20dc9f:	cc                   	int3   

000000000020dca0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17h4af46654590fc248E>:
                            fn $Flag(&self) -> bool {
  20dca0:	48 83 ec 18          	sub    $0x18,%rsp
  20dca4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dca8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dcad:	31 c0                	xor    %eax,%eax
  20dcaf:	a8 01                	test   $0x1,%al
  20dcb1:	75 1b                	jne    20dcce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17h4af46654590fc248E+0x2e>
  20dcb3:	48 8b 04 24          	mov    (%rsp),%rax
  20dcb7:	8b 00                	mov    (%rax),%eax
  20dcb9:	25 80 00 00 00       	and    $0x80,%eax
  20dcbe:	3d 80 00 00 00       	cmp    $0x80,%eax
  20dcc3:	0f 94 c0             	sete   %al
  20dcc6:	24 01                	and    $0x1,%al
  20dcc8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dccc:	eb 05                	jmp    20dcd3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17h4af46654590fc248E+0x33>
  20dcce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dcd3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dcd7:	24 01                	and    $0x1,%al
  20dcd9:	0f b6 c0             	movzbl %al,%eax
  20dcdc:	48 83 c4 18          	add    $0x18,%rsp
  20dce0:	c3                   	retq   
  20dce1:	cc                   	int3   
  20dce2:	cc                   	int3   
  20dce3:	cc                   	int3   
  20dce4:	cc                   	int3   
  20dce5:	cc                   	int3   
  20dce6:	cc                   	int3   
  20dce7:	cc                   	int3   
  20dce8:	cc                   	int3   
  20dce9:	cc                   	int3   
  20dcea:	cc                   	int3   
  20dceb:	cc                   	int3   
  20dcec:	cc                   	int3   
  20dced:	cc                   	int3   
  20dcee:	cc                   	int3   
  20dcef:	cc                   	int3   

000000000020dcf0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217ha927bb1933afa797E>:
                            fn $Flag(&self) -> bool {
  20dcf0:	48 83 ec 18          	sub    $0x18,%rsp
  20dcf4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dcf8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dcfd:	31 c0                	xor    %eax,%eax
  20dcff:	a8 01                	test   $0x1,%al
  20dd01:	75 1b                	jne    20dd1e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217ha927bb1933afa797E+0x2e>
  20dd03:	48 8b 04 24          	mov    (%rsp),%rax
  20dd07:	8b 00                	mov    (%rax),%eax
  20dd09:	25 00 01 00 00       	and    $0x100,%eax
  20dd0e:	3d 00 01 00 00       	cmp    $0x100,%eax
  20dd13:	0f 94 c0             	sete   %al
  20dd16:	24 01                	and    $0x1,%al
  20dd18:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dd1c:	eb 05                	jmp    20dd23 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217ha927bb1933afa797E+0x33>
  20dd1e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dd23:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dd27:	24 01                	and    $0x1,%al
  20dd29:	0f b6 c0             	movzbl %al,%eax
  20dd2c:	48 83 c4 18          	add    $0x18,%rsp
  20dd30:	c3                   	retq   
  20dd31:	cc                   	int3   
  20dd32:	cc                   	int3   
  20dd33:	cc                   	int3   
  20dd34:	cc                   	int3   
  20dd35:	cc                   	int3   
  20dd36:	cc                   	int3   
  20dd37:	cc                   	int3   
  20dd38:	cc                   	int3   
  20dd39:	cc                   	int3   
  20dd3a:	cc                   	int3   
  20dd3b:	cc                   	int3   
  20dd3c:	cc                   	int3   
  20dd3d:	cc                   	int3   
  20dd3e:	cc                   	int3   
  20dd3f:	cc                   	int3   

000000000020dd40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h1ca84dad2531c9e6E>:
                            fn $Flag(&self) -> bool {
  20dd40:	48 83 ec 18          	sub    $0x18,%rsp
  20dd44:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dd48:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dd4d:	31 c0                	xor    %eax,%eax
  20dd4f:	a8 01                	test   $0x1,%al
  20dd51:	75 1b                	jne    20dd6e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h1ca84dad2531c9e6E+0x2e>
  20dd53:	48 8b 04 24          	mov    (%rsp),%rax
  20dd57:	8b 00                	mov    (%rax),%eax
  20dd59:	25 00 02 00 00       	and    $0x200,%eax
  20dd5e:	3d 00 02 00 00       	cmp    $0x200,%eax
  20dd63:	0f 94 c0             	sete   %al
  20dd66:	24 01                	and    $0x1,%al
  20dd68:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dd6c:	eb 05                	jmp    20dd73 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h1ca84dad2531c9e6E+0x33>
  20dd6e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dd73:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dd77:	24 01                	and    $0x1,%al
  20dd79:	0f b6 c0             	movzbl %al,%eax
  20dd7c:	48 83 c4 18          	add    $0x18,%rsp
  20dd80:	c3                   	retq   
  20dd81:	cc                   	int3   
  20dd82:	cc                   	int3   
  20dd83:	cc                   	int3   
  20dd84:	cc                   	int3   
  20dd85:	cc                   	int3   
  20dd86:	cc                   	int3   
  20dd87:	cc                   	int3   
  20dd88:	cc                   	int3   
  20dd89:	cc                   	int3   
  20dd8a:	cc                   	int3   
  20dd8b:	cc                   	int3   
  20dd8c:	cc                   	int3   
  20dd8d:	cc                   	int3   
  20dd8e:	cc                   	int3   
  20dd8f:	cc                   	int3   

000000000020dd90 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h6ecab218315c367cE>:
                            fn $Flag(&self) -> bool {
  20dd90:	48 83 ec 18          	sub    $0x18,%rsp
  20dd94:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dd98:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dd9d:	31 c0                	xor    %eax,%eax
  20dd9f:	a8 01                	test   $0x1,%al
  20dda1:	75 1b                	jne    20ddbe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h6ecab218315c367cE+0x2e>
  20dda3:	48 8b 04 24          	mov    (%rsp),%rax
  20dda7:	8b 00                	mov    (%rax),%eax
  20dda9:	25 00 04 00 00       	and    $0x400,%eax
  20ddae:	3d 00 04 00 00       	cmp    $0x400,%eax
  20ddb3:	0f 94 c0             	sete   %al
  20ddb6:	24 01                	and    $0x1,%al
  20ddb8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ddbc:	eb 05                	jmp    20ddc3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h6ecab218315c367cE+0x33>
  20ddbe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20ddc3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ddc7:	24 01                	and    $0x1,%al
  20ddc9:	0f b6 c0             	movzbl %al,%eax
  20ddcc:	48 83 c4 18          	add    $0x18,%rsp
  20ddd0:	c3                   	retq   
  20ddd1:	cc                   	int3   
  20ddd2:	cc                   	int3   
  20ddd3:	cc                   	int3   
  20ddd4:	cc                   	int3   
  20ddd5:	cc                   	int3   
  20ddd6:	cc                   	int3   
  20ddd7:	cc                   	int3   
  20ddd8:	cc                   	int3   
  20ddd9:	cc                   	int3   
  20ddda:	cc                   	int3   
  20dddb:	cc                   	int3   
  20dddc:	cc                   	int3   
  20dddd:	cc                   	int3   
  20ddde:	cc                   	int3   
  20dddf:	cc                   	int3   

000000000020dde0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hf317482f0871cea1E>:
                            fn $Flag(&self) -> bool {
  20dde0:	48 83 ec 18          	sub    $0x18,%rsp
  20dde4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dde8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dded:	31 c0                	xor    %eax,%eax
  20ddef:	a8 01                	test   $0x1,%al
  20ddf1:	75 1b                	jne    20de0e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hf317482f0871cea1E+0x2e>
  20ddf3:	48 8b 04 24          	mov    (%rsp),%rax
  20ddf7:	8b 00                	mov    (%rax),%eax
  20ddf9:	25 00 10 00 00       	and    $0x1000,%eax
  20ddfe:	3d 00 10 00 00       	cmp    $0x1000,%eax
  20de03:	0f 94 c0             	sete   %al
  20de06:	24 01                	and    $0x1,%al
  20de08:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20de0c:	eb 05                	jmp    20de13 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hf317482f0871cea1E+0x33>
  20de0e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20de13:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20de17:	24 01                	and    $0x1,%al
  20de19:	0f b6 c0             	movzbl %al,%eax
  20de1c:	48 83 c4 18          	add    $0x18,%rsp
  20de20:	c3                   	retq   
  20de21:	cc                   	int3   
  20de22:	cc                   	int3   
  20de23:	cc                   	int3   
  20de24:	cc                   	int3   
  20de25:	cc                   	int3   
  20de26:	cc                   	int3   
  20de27:	cc                   	int3   
  20de28:	cc                   	int3   
  20de29:	cc                   	int3   
  20de2a:	cc                   	int3   
  20de2b:	cc                   	int3   
  20de2c:	cc                   	int3   
  20de2d:	cc                   	int3   
  20de2e:	cc                   	int3   
  20de2f:	cc                   	int3   

000000000020de30 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h04dbc705216d2f56E>:
                            fn $Flag(&self) -> bool {
  20de30:	48 83 ec 18          	sub    $0x18,%rsp
  20de34:	48 89 3c 24          	mov    %rdi,(%rsp)
  20de38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20de3d:	31 c0                	xor    %eax,%eax
  20de3f:	a8 01                	test   $0x1,%al
  20de41:	75 1b                	jne    20de5e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h04dbc705216d2f56E+0x2e>
  20de43:	48 8b 04 24          	mov    (%rsp),%rax
  20de47:	8b 00                	mov    (%rax),%eax
  20de49:	25 00 20 00 00       	and    $0x2000,%eax
  20de4e:	3d 00 20 00 00       	cmp    $0x2000,%eax
  20de53:	0f 94 c0             	sete   %al
  20de56:	24 01                	and    $0x1,%al
  20de58:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20de5c:	eb 05                	jmp    20de63 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h04dbc705216d2f56E+0x33>
  20de5e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20de63:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20de67:	24 01                	and    $0x1,%al
  20de69:	0f b6 c0             	movzbl %al,%eax
  20de6c:	48 83 c4 18          	add    $0x18,%rsp
  20de70:	c3                   	retq   
  20de71:	cc                   	int3   
  20de72:	cc                   	int3   
  20de73:	cc                   	int3   
  20de74:	cc                   	int3   
  20de75:	cc                   	int3   
  20de76:	cc                   	int3   
  20de77:	cc                   	int3   
  20de78:	cc                   	int3   
  20de79:	cc                   	int3   
  20de7a:	cc                   	int3   
  20de7b:	cc                   	int3   
  20de7c:	cc                   	int3   
  20de7d:	cc                   	int3   
  20de7e:	cc                   	int3   
  20de7f:	cc                   	int3   

000000000020de80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17h9964258a547bf217E>:
                            fn $Flag(&self) -> bool {
  20de80:	48 83 ec 18          	sub    $0x18,%rsp
  20de84:	48 89 3c 24          	mov    %rdi,(%rsp)
  20de88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20de8d:	31 c0                	xor    %eax,%eax
  20de8f:	a8 01                	test   $0x1,%al
  20de91:	75 1b                	jne    20deae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17h9964258a547bf217E+0x2e>
  20de93:	48 8b 04 24          	mov    (%rsp),%rax
  20de97:	8b 00                	mov    (%rax),%eax
  20de99:	25 00 40 00 00       	and    $0x4000,%eax
  20de9e:	3d 00 40 00 00       	cmp    $0x4000,%eax
  20dea3:	0f 94 c0             	sete   %al
  20dea6:	24 01                	and    $0x1,%al
  20dea8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20deac:	eb 05                	jmp    20deb3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17h9964258a547bf217E+0x33>
  20deae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20deb3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20deb7:	24 01                	and    $0x1,%al
  20deb9:	0f b6 c0             	movzbl %al,%eax
  20debc:	48 83 c4 18          	add    $0x18,%rsp
  20dec0:	c3                   	retq   
  20dec1:	cc                   	int3   
  20dec2:	cc                   	int3   
  20dec3:	cc                   	int3   
  20dec4:	cc                   	int3   
  20dec5:	cc                   	int3   
  20dec6:	cc                   	int3   
  20dec7:	cc                   	int3   
  20dec8:	cc                   	int3   
  20dec9:	cc                   	int3   
  20deca:	cc                   	int3   
  20decb:	cc                   	int3   
  20decc:	cc                   	int3   
  20decd:	cc                   	int3   
  20dece:	cc                   	int3   
  20decf:	cc                   	int3   

000000000020ded0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17hd20b7463471369f2E>:
                            fn $Flag(&self) -> bool {
  20ded0:	48 83 ec 18          	sub    $0x18,%rsp
  20ded4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ded8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dedd:	31 c0                	xor    %eax,%eax
  20dedf:	a8 01                	test   $0x1,%al
  20dee1:	75 1b                	jne    20defe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17hd20b7463471369f2E+0x2e>
  20dee3:	48 8b 04 24          	mov    (%rsp),%rax
  20dee7:	8b 00                	mov    (%rax),%eax
  20dee9:	25 00 80 00 00       	and    $0x8000,%eax
  20deee:	3d 00 80 00 00       	cmp    $0x8000,%eax
  20def3:	0f 94 c0             	sete   %al
  20def6:	24 01                	and    $0x1,%al
  20def8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20defc:	eb 05                	jmp    20df03 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17hd20b7463471369f2E+0x33>
  20defe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20df03:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20df07:	24 01                	and    $0x1,%al
  20df09:	0f b6 c0             	movzbl %al,%eax
  20df0c:	48 83 c4 18          	add    $0x18,%rsp
  20df10:	c3                   	retq   
  20df11:	cc                   	int3   
  20df12:	cc                   	int3   
  20df13:	cc                   	int3   
  20df14:	cc                   	int3   
  20df15:	cc                   	int3   
  20df16:	cc                   	int3   
  20df17:	cc                   	int3   
  20df18:	cc                   	int3   
  20df19:	cc                   	int3   
  20df1a:	cc                   	int3   
  20df1b:	cc                   	int3   
  20df1c:	cc                   	int3   
  20df1d:	cc                   	int3   
  20df1e:	cc                   	int3   
  20df1f:	cc                   	int3   

000000000020df20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17hd25d3a43911c077fE>:
                            fn $Flag(&self) -> bool {
  20df20:	48 83 ec 18          	sub    $0x18,%rsp
  20df24:	48 89 3c 24          	mov    %rdi,(%rsp)
  20df28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20df2d:	31 c0                	xor    %eax,%eax
  20df2f:	a8 01                	test   $0x1,%al
  20df31:	75 1b                	jne    20df4e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17hd25d3a43911c077fE+0x2e>
  20df33:	48 8b 04 24          	mov    (%rsp),%rax
  20df37:	8b 00                	mov    (%rax),%eax
  20df39:	25 00 00 02 00       	and    $0x20000,%eax
  20df3e:	3d 00 00 02 00       	cmp    $0x20000,%eax
  20df43:	0f 94 c0             	sete   %al
  20df46:	24 01                	and    $0x1,%al
  20df48:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20df4c:	eb 05                	jmp    20df53 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17hd25d3a43911c077fE+0x33>
  20df4e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20df53:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20df57:	24 01                	and    $0x1,%al
  20df59:	0f b6 c0             	movzbl %al,%eax
  20df5c:	48 83 c4 18          	add    $0x18,%rsp
  20df60:	c3                   	retq   
  20df61:	cc                   	int3   
  20df62:	cc                   	int3   
  20df63:	cc                   	int3   
  20df64:	cc                   	int3   
  20df65:	cc                   	int3   
  20df66:	cc                   	int3   
  20df67:	cc                   	int3   
  20df68:	cc                   	int3   
  20df69:	cc                   	int3   
  20df6a:	cc                   	int3   
  20df6b:	cc                   	int3   
  20df6c:	cc                   	int3   
  20df6d:	cc                   	int3   
  20df6e:	cc                   	int3   
  20df6f:	cc                   	int3   

000000000020df70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17h2f546a41e87b29d4E>:
                            fn $Flag(&self) -> bool {
  20df70:	48 83 ec 18          	sub    $0x18,%rsp
  20df74:	48 89 3c 24          	mov    %rdi,(%rsp)
  20df78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20df7d:	31 c0                	xor    %eax,%eax
  20df7f:	a8 01                	test   $0x1,%al
  20df81:	75 1b                	jne    20df9e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17h2f546a41e87b29d4E+0x2e>
  20df83:	48 8b 04 24          	mov    (%rsp),%rax
  20df87:	8b 00                	mov    (%rax),%eax
  20df89:	25 00 00 04 00       	and    $0x40000,%eax
  20df8e:	3d 00 00 04 00       	cmp    $0x40000,%eax
  20df93:	0f 94 c0             	sete   %al
  20df96:	24 01                	and    $0x1,%al
  20df98:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20df9c:	eb 05                	jmp    20dfa3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17h2f546a41e87b29d4E+0x33>
  20df9e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dfa3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dfa7:	24 01                	and    $0x1,%al
  20dfa9:	0f b6 c0             	movzbl %al,%eax
  20dfac:	48 83 c4 18          	add    $0x18,%rsp
  20dfb0:	c3                   	retq   
  20dfb1:	cc                   	int3   
  20dfb2:	cc                   	int3   
  20dfb3:	cc                   	int3   
  20dfb4:	cc                   	int3   
  20dfb5:	cc                   	int3   
  20dfb6:	cc                   	int3   
  20dfb7:	cc                   	int3   
  20dfb8:	cc                   	int3   
  20dfb9:	cc                   	int3   
  20dfba:	cc                   	int3   
  20dfbb:	cc                   	int3   
  20dfbc:	cc                   	int3   
  20dfbd:	cc                   	int3   
  20dfbe:	cc                   	int3   
  20dfbf:	cc                   	int3   

000000000020dfc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h6ef8670be2e37455E>:
                            fn $Flag(&self) -> bool {
  20dfc0:	48 83 ec 18          	sub    $0x18,%rsp
  20dfc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20dfc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20dfcd:	31 c0                	xor    %eax,%eax
  20dfcf:	a8 01                	test   $0x1,%al
  20dfd1:	75 1b                	jne    20dfee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h6ef8670be2e37455E+0x2e>
  20dfd3:	48 8b 04 24          	mov    (%rsp),%rax
  20dfd7:	8b 00                	mov    (%rax),%eax
  20dfd9:	25 00 00 08 00       	and    $0x80000,%eax
  20dfde:	3d 00 00 08 00       	cmp    $0x80000,%eax
  20dfe3:	0f 94 c0             	sete   %al
  20dfe6:	24 01                	and    $0x1,%al
  20dfe8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dfec:	eb 05                	jmp    20dff3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h6ef8670be2e37455E+0x33>
  20dfee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20dff3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20dff7:	24 01                	and    $0x1,%al
  20dff9:	0f b6 c0             	movzbl %al,%eax
  20dffc:	48 83 c4 18          	add    $0x18,%rsp
  20e000:	c3                   	retq   
  20e001:	cc                   	int3   
  20e002:	cc                   	int3   
  20e003:	cc                   	int3   
  20e004:	cc                   	int3   
  20e005:	cc                   	int3   
  20e006:	cc                   	int3   
  20e007:	cc                   	int3   
  20e008:	cc                   	int3   
  20e009:	cc                   	int3   
  20e00a:	cc                   	int3   
  20e00b:	cc                   	int3   
  20e00c:	cc                   	int3   
  20e00d:	cc                   	int3   
  20e00e:	cc                   	int3   
  20e00f:	cc                   	int3   

000000000020e010 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217hb2d092cf84a8cc80E>:
                            fn $Flag(&self) -> bool {
  20e010:	48 83 ec 18          	sub    $0x18,%rsp
  20e014:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e018:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e01d:	31 c0                	xor    %eax,%eax
  20e01f:	a8 01                	test   $0x1,%al
  20e021:	75 1b                	jne    20e03e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217hb2d092cf84a8cc80E+0x2e>
  20e023:	48 8b 04 24          	mov    (%rsp),%rax
  20e027:	8b 00                	mov    (%rax),%eax
  20e029:	25 00 00 10 00       	and    $0x100000,%eax
  20e02e:	3d 00 00 10 00       	cmp    $0x100000,%eax
  20e033:	0f 94 c0             	sete   %al
  20e036:	24 01                	and    $0x1,%al
  20e038:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e03c:	eb 05                	jmp    20e043 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217hb2d092cf84a8cc80E+0x33>
  20e03e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e043:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e047:	24 01                	and    $0x1,%al
  20e049:	0f b6 c0             	movzbl %al,%eax
  20e04c:	48 83 c4 18          	add    $0x18,%rsp
  20e050:	c3                   	retq   
  20e051:	cc                   	int3   
  20e052:	cc                   	int3   
  20e053:	cc                   	int3   
  20e054:	cc                   	int3   
  20e055:	cc                   	int3   
  20e056:	cc                   	int3   
  20e057:	cc                   	int3   
  20e058:	cc                   	int3   
  20e059:	cc                   	int3   
  20e05a:	cc                   	int3   
  20e05b:	cc                   	int3   
  20e05c:	cc                   	int3   
  20e05d:	cc                   	int3   
  20e05e:	cc                   	int3   
  20e05f:	cc                   	int3   

000000000020e060 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17h4fd2ea6906fa3b60E>:
                            fn $Flag(&self) -> bool {
  20e060:	48 83 ec 18          	sub    $0x18,%rsp
  20e064:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e068:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e06d:	31 c0                	xor    %eax,%eax
  20e06f:	a8 01                	test   $0x1,%al
  20e071:	75 1b                	jne    20e08e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17h4fd2ea6906fa3b60E+0x2e>
  20e073:	48 8b 04 24          	mov    (%rsp),%rax
  20e077:	8b 00                	mov    (%rax),%eax
  20e079:	25 00 00 20 00       	and    $0x200000,%eax
  20e07e:	3d 00 00 20 00       	cmp    $0x200000,%eax
  20e083:	0f 94 c0             	sete   %al
  20e086:	24 01                	and    $0x1,%al
  20e088:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e08c:	eb 05                	jmp    20e093 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17h4fd2ea6906fa3b60E+0x33>
  20e08e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e093:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e097:	24 01                	and    $0x1,%al
  20e099:	0f b6 c0             	movzbl %al,%eax
  20e09c:	48 83 c4 18          	add    $0x18,%rsp
  20e0a0:	c3                   	retq   
  20e0a1:	cc                   	int3   
  20e0a2:	cc                   	int3   
  20e0a3:	cc                   	int3   
  20e0a4:	cc                   	int3   
  20e0a5:	cc                   	int3   
  20e0a6:	cc                   	int3   
  20e0a7:	cc                   	int3   
  20e0a8:	cc                   	int3   
  20e0a9:	cc                   	int3   
  20e0aa:	cc                   	int3   
  20e0ab:	cc                   	int3   
  20e0ac:	cc                   	int3   
  20e0ad:	cc                   	int3   
  20e0ae:	cc                   	int3   
  20e0af:	cc                   	int3   

000000000020e0b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17h59a68489c15f7d5bE>:
                            fn $Flag(&self) -> bool {
  20e0b0:	48 83 ec 18          	sub    $0x18,%rsp
  20e0b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e0b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e0bd:	31 c0                	xor    %eax,%eax
  20e0bf:	a8 01                	test   $0x1,%al
  20e0c1:	75 1b                	jne    20e0de <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17h59a68489c15f7d5bE+0x2e>
  20e0c3:	48 8b 04 24          	mov    (%rsp),%rax
  20e0c7:	8b 00                	mov    (%rax),%eax
  20e0c9:	25 00 00 40 00       	and    $0x400000,%eax
  20e0ce:	3d 00 00 40 00       	cmp    $0x400000,%eax
  20e0d3:	0f 94 c0             	sete   %al
  20e0d6:	24 01                	and    $0x1,%al
  20e0d8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e0dc:	eb 05                	jmp    20e0e3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17h59a68489c15f7d5bE+0x33>
  20e0de:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e0e3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e0e7:	24 01                	and    $0x1,%al
  20e0e9:	0f b6 c0             	movzbl %al,%eax
  20e0ec:	48 83 c4 18          	add    $0x18,%rsp
  20e0f0:	c3                   	retq   
  20e0f1:	cc                   	int3   
  20e0f2:	cc                   	int3   
  20e0f3:	cc                   	int3   
  20e0f4:	cc                   	int3   
  20e0f5:	cc                   	int3   
  20e0f6:	cc                   	int3   
  20e0f7:	cc                   	int3   
  20e0f8:	cc                   	int3   
  20e0f9:	cc                   	int3   
  20e0fa:	cc                   	int3   
  20e0fb:	cc                   	int3   
  20e0fc:	cc                   	int3   
  20e0fd:	cc                   	int3   
  20e0fe:	cc                   	int3   
  20e0ff:	cc                   	int3   

000000000020e100 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17h8945a333f4fd0b53E>:
                            fn $Flag(&self) -> bool {
  20e100:	48 83 ec 18          	sub    $0x18,%rsp
  20e104:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e108:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e10d:	31 c0                	xor    %eax,%eax
  20e10f:	a8 01                	test   $0x1,%al
  20e111:	75 1b                	jne    20e12e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17h8945a333f4fd0b53E+0x2e>
  20e113:	48 8b 04 24          	mov    (%rsp),%rax
  20e117:	8b 00                	mov    (%rax),%eax
  20e119:	25 00 00 80 00       	and    $0x800000,%eax
  20e11e:	3d 00 00 80 00       	cmp    $0x800000,%eax
  20e123:	0f 94 c0             	sete   %al
  20e126:	24 01                	and    $0x1,%al
  20e128:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e12c:	eb 05                	jmp    20e133 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17h8945a333f4fd0b53E+0x33>
  20e12e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e133:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e137:	24 01                	and    $0x1,%al
  20e139:	0f b6 c0             	movzbl %al,%eax
  20e13c:	48 83 c4 18          	add    $0x18,%rsp
  20e140:	c3                   	retq   
  20e141:	cc                   	int3   
  20e142:	cc                   	int3   
  20e143:	cc                   	int3   
  20e144:	cc                   	int3   
  20e145:	cc                   	int3   
  20e146:	cc                   	int3   
  20e147:	cc                   	int3   
  20e148:	cc                   	int3   
  20e149:	cc                   	int3   
  20e14a:	cc                   	int3   
  20e14b:	cc                   	int3   
  20e14c:	cc                   	int3   
  20e14d:	cc                   	int3   
  20e14e:	cc                   	int3   
  20e14f:	cc                   	int3   

000000000020e150 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17h7c7f2ed42077d483E>:
                            fn $Flag(&self) -> bool {
  20e150:	48 83 ec 18          	sub    $0x18,%rsp
  20e154:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e158:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e15d:	31 c0                	xor    %eax,%eax
  20e15f:	a8 01                	test   $0x1,%al
  20e161:	75 1b                	jne    20e17e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17h7c7f2ed42077d483E+0x2e>
  20e163:	48 8b 04 24          	mov    (%rsp),%rax
  20e167:	8b 00                	mov    (%rax),%eax
  20e169:	25 00 00 00 01       	and    $0x1000000,%eax
  20e16e:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  20e173:	0f 94 c0             	sete   %al
  20e176:	24 01                	and    $0x1,%al
  20e178:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e17c:	eb 05                	jmp    20e183 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17h7c7f2ed42077d483E+0x33>
  20e17e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e183:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e187:	24 01                	and    $0x1,%al
  20e189:	0f b6 c0             	movzbl %al,%eax
  20e18c:	48 83 c4 18          	add    $0x18,%rsp
  20e190:	c3                   	retq   
  20e191:	cc                   	int3   
  20e192:	cc                   	int3   
  20e193:	cc                   	int3   
  20e194:	cc                   	int3   
  20e195:	cc                   	int3   
  20e196:	cc                   	int3   
  20e197:	cc                   	int3   
  20e198:	cc                   	int3   
  20e199:	cc                   	int3   
  20e19a:	cc                   	int3   
  20e19b:	cc                   	int3   
  20e19c:	cc                   	int3   
  20e19d:	cc                   	int3   
  20e19e:	cc                   	int3   
  20e19f:	cc                   	int3   

000000000020e1a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h4b3ecfcee87d83dbE>:
                            fn $Flag(&self) -> bool {
  20e1a0:	48 83 ec 18          	sub    $0x18,%rsp
  20e1a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e1a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e1ad:	31 c0                	xor    %eax,%eax
  20e1af:	a8 01                	test   $0x1,%al
  20e1b1:	75 1b                	jne    20e1ce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h4b3ecfcee87d83dbE+0x2e>
  20e1b3:	48 8b 04 24          	mov    (%rsp),%rax
  20e1b7:	8b 00                	mov    (%rax),%eax
  20e1b9:	25 00 00 00 02       	and    $0x2000000,%eax
  20e1be:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  20e1c3:	0f 94 c0             	sete   %al
  20e1c6:	24 01                	and    $0x1,%al
  20e1c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e1cc:	eb 05                	jmp    20e1d3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h4b3ecfcee87d83dbE+0x33>
  20e1ce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e1d3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e1d7:	24 01                	and    $0x1,%al
  20e1d9:	0f b6 c0             	movzbl %al,%eax
  20e1dc:	48 83 c4 18          	add    $0x18,%rsp
  20e1e0:	c3                   	retq   
  20e1e1:	cc                   	int3   
  20e1e2:	cc                   	int3   
  20e1e3:	cc                   	int3   
  20e1e4:	cc                   	int3   
  20e1e5:	cc                   	int3   
  20e1e6:	cc                   	int3   
  20e1e7:	cc                   	int3   
  20e1e8:	cc                   	int3   
  20e1e9:	cc                   	int3   
  20e1ea:	cc                   	int3   
  20e1eb:	cc                   	int3   
  20e1ec:	cc                   	int3   
  20e1ed:	cc                   	int3   
  20e1ee:	cc                   	int3   
  20e1ef:	cc                   	int3   

000000000020e1f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17hc4d92b7d70c6bd7cE>:
                            fn $Flag(&self) -> bool {
  20e1f0:	48 83 ec 18          	sub    $0x18,%rsp
  20e1f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e1f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e1fd:	31 c0                	xor    %eax,%eax
  20e1ff:	a8 01                	test   $0x1,%al
  20e201:	75 1b                	jne    20e21e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17hc4d92b7d70c6bd7cE+0x2e>
  20e203:	48 8b 04 24          	mov    (%rsp),%rax
  20e207:	8b 00                	mov    (%rax),%eax
  20e209:	25 00 00 00 04       	and    $0x4000000,%eax
  20e20e:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  20e213:	0f 94 c0             	sete   %al
  20e216:	24 01                	and    $0x1,%al
  20e218:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e21c:	eb 05                	jmp    20e223 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17hc4d92b7d70c6bd7cE+0x33>
  20e21e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e223:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e227:	24 01                	and    $0x1,%al
  20e229:	0f b6 c0             	movzbl %al,%eax
  20e22c:	48 83 c4 18          	add    $0x18,%rsp
  20e230:	c3                   	retq   
  20e231:	cc                   	int3   
  20e232:	cc                   	int3   
  20e233:	cc                   	int3   
  20e234:	cc                   	int3   
  20e235:	cc                   	int3   
  20e236:	cc                   	int3   
  20e237:	cc                   	int3   
  20e238:	cc                   	int3   
  20e239:	cc                   	int3   
  20e23a:	cc                   	int3   
  20e23b:	cc                   	int3   
  20e23c:	cc                   	int3   
  20e23d:	cc                   	int3   
  20e23e:	cc                   	int3   
  20e23f:	cc                   	int3   

000000000020e240 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17hfdd8925645340eb4E>:
                            fn $Flag(&self) -> bool {
  20e240:	48 83 ec 18          	sub    $0x18,%rsp
  20e244:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e248:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e24d:	31 c0                	xor    %eax,%eax
  20e24f:	a8 01                	test   $0x1,%al
  20e251:	75 1b                	jne    20e26e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17hfdd8925645340eb4E+0x2e>
  20e253:	48 8b 04 24          	mov    (%rsp),%rax
  20e257:	8b 00                	mov    (%rax),%eax
  20e259:	25 00 00 00 08       	and    $0x8000000,%eax
  20e25e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  20e263:	0f 94 c0             	sete   %al
  20e266:	24 01                	and    $0x1,%al
  20e268:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e26c:	eb 05                	jmp    20e273 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17hfdd8925645340eb4E+0x33>
  20e26e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e273:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e277:	24 01                	and    $0x1,%al
  20e279:	0f b6 c0             	movzbl %al,%eax
  20e27c:	48 83 c4 18          	add    $0x18,%rsp
  20e280:	c3                   	retq   
  20e281:	cc                   	int3   
  20e282:	cc                   	int3   
  20e283:	cc                   	int3   
  20e284:	cc                   	int3   
  20e285:	cc                   	int3   
  20e286:	cc                   	int3   
  20e287:	cc                   	int3   
  20e288:	cc                   	int3   
  20e289:	cc                   	int3   
  20e28a:	cc                   	int3   
  20e28b:	cc                   	int3   
  20e28c:	cc                   	int3   
  20e28d:	cc                   	int3   
  20e28e:	cc                   	int3   
  20e28f:	cc                   	int3   

000000000020e290 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17hc872176f33356e18E>:
                            fn $Flag(&self) -> bool {
  20e290:	48 83 ec 18          	sub    $0x18,%rsp
  20e294:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e298:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e29d:	31 c0                	xor    %eax,%eax
  20e29f:	a8 01                	test   $0x1,%al
  20e2a1:	75 1b                	jne    20e2be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17hc872176f33356e18E+0x2e>
  20e2a3:	48 8b 04 24          	mov    (%rsp),%rax
  20e2a7:	8b 00                	mov    (%rax),%eax
  20e2a9:	25 00 00 00 10       	and    $0x10000000,%eax
  20e2ae:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  20e2b3:	0f 94 c0             	sete   %al
  20e2b6:	24 01                	and    $0x1,%al
  20e2b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e2bc:	eb 05                	jmp    20e2c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17hc872176f33356e18E+0x33>
  20e2be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20e2c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e2c7:	24 01                	and    $0x1,%al
  20e2c9:	0f b6 c0             	movzbl %al,%eax
  20e2cc:	48 83 c4 18          	add    $0x18,%rsp
  20e2d0:	c3                   	retq   
  20e2d1:	cc                   	int3   
  20e2d2:	cc                   	int3   
  20e2d3:	cc                   	int3   
  20e2d4:	cc                   	int3   
  20e2d5:	cc                   	int3   
  20e2d6:	cc                   	int3   
  20e2d7:	cc                   	int3   
  20e2d8:	cc                   	int3   
  20e2d9:	cc                   	int3   
  20e2da:	cc                   	int3   
  20e2db:	cc                   	int3   
  20e2dc:	cc                   	int3   
  20e2dd:	cc                   	int3   
  20e2de:	cc                   	int3   
  20e2df:	cc                   	int3   

000000000020e2e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  20e2e0:	48 81 ec d8 04 00 00 	sub    $0x4d8,%rsp
  20e2e7:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  20e2ec:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  20e2f1:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  20e2f8:	00 
  20e2f9:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  20e300:	00 
                let mut first = true;
  20e301:	c6 44 24 7f 01       	movb   $0x1,0x7f(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  20e306:	e8 b5 1b 00 00       	callq  20fec0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17hc8d2db851bc9dd77E>
  20e30b:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  20e30f:	8a 44 24 7d          	mov    0x7d(%rsp),%al
bitflags! {
  20e313:	a8 01                	test   $0x1,%al
  20e315:	75 15                	jne    20e32c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x4c>
  20e317:	eb 00                	jmp    20e319 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x39>
  20e319:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  20e31e:	e8 dd 1b 00 00       	callq  20ff00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17h289db2efa00d6a12E>
  20e323:	88 44 24 67          	mov    %al,0x67(%rsp)
  20e327:	e9 c6 00 00 00       	jmpq   20e3f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x112>
                        if !first {
  20e32c:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e330:	34 ff                	xor    $0xff,%al
  20e332:	a8 01                	test   $0x1,%al
  20e334:	75 21                	jne    20e357 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x77>
  20e336:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e33b:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e340:	48 8d 35 33 29 ff ff 	lea    -0xd6cd(%rip),%rsi        # 200c7a <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xa5>
  20e347:	ba 03 00 00 00       	mov    $0x3,%edx
  20e34c:	e8 6f eb 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e351:	88 44 24 66          	mov    %al,0x66(%rsp)
  20e355:	eb 60                	jmp    20e3b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd7>
  20e357:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e35c:	48 8d 35 4b 28 ff ff 	lea    -0xd7b5(%rip),%rsi        # 200bae <str.3+0x16e>
  20e363:	ba 03 00 00 00       	mov    $0x3,%edx
  20e368:	e8 53 eb 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e36d:	88 44 24 65          	mov    %al,0x65(%rsp)
  20e371:	8a 44 24 65          	mov    0x65(%rsp),%al
  20e375:	0f b6 f8             	movzbl %al,%edi
  20e378:	83 e7 01             	and    $0x1,%edi
  20e37b:	e8 90 42 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e380:	24 01                	and    $0x1,%al
  20e382:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  20e389:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  20e390:	00 
  20e391:	a8 01                	test   $0x1,%al
  20e393:	74 a1                	je     20e336 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x56>
  20e395:	eb 00                	jmp    20e397 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb7>
  20e397:	eb 02                	jmp    20e39b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xbb>
  20e399:	0f 0b                	ud2    
  20e39b:	e8 30 3e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e3a0:	24 01                	and    $0x1,%al
  20e3a2:	88 44 24 7e          	mov    %al,0x7e(%rsp)
            }
  20e3a6:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  20e3aa:	24 01                	and    $0x1,%al
  20e3ac:	0f b6 c0             	movzbl %al,%eax
  20e3af:	48 81 c4 d8 04 00 00 	add    $0x4d8,%rsp
  20e3b6:	c3                   	retq   
  20e3b7:	8a 44 24 66          	mov    0x66(%rsp),%al
  20e3bb:	0f b6 f8             	movzbl %al,%edi
  20e3be:	83 e7 01             	and    $0x1,%edi
  20e3c1:	e8 4a 42 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e3c6:	24 01                	and    $0x1,%al
  20e3c8:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  20e3cf:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  20e3d6:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e3d7:	a8 01                	test   $0x1,%al
  20e3d9:	0f 84 3a ff ff ff    	je     20e319 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x39>
  20e3df:	eb 00                	jmp    20e3e1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x101>
  20e3e1:	eb 02                	jmp    20e3e5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x105>
  20e3e3:	0f 0b                	ud2    
  20e3e5:	e8 e6 3d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e3ea:	24 01                	and    $0x1,%al
  20e3ec:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e3f0:	eb b4                	jmp    20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e3f2:	8a 44 24 67          	mov    0x67(%rsp),%al
  20e3f6:	a8 01                	test   $0x1,%al
  20e3f8:	75 15                	jne    20e40f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12f>
  20e3fa:	eb 00                	jmp    20e3fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x11c>
  20e3fc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e401:	e8 3a 1b 00 00       	callq  20ff40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17h088511729f6a48bcE>
  20e406:	88 44 24 64          	mov    %al,0x64(%rsp)
  20e40a:	e9 bd 00 00 00       	jmpq   20e4cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1ec>
                        if !first {
  20e40f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e413:	34 ff                	xor    $0xff,%al
  20e415:	a8 01                	test   $0x1,%al
  20e417:	75 21                	jne    20e43a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x15a>
  20e419:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e41e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e423:	48 8d 35 53 28 ff ff 	lea    -0xd7ad(%rip),%rsi        # 200c7d <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xa8>
  20e42a:	ba 03 00 00 00       	mov    $0x3,%edx
  20e42f:	e8 8c ea 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e434:	88 44 24 63          	mov    %al,0x63(%rsp)
  20e438:	eb 54                	jmp    20e48e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1ae>
  20e43a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e43f:	48 8d 35 68 27 ff ff 	lea    -0xd898(%rip),%rsi        # 200bae <str.3+0x16e>
  20e446:	ba 03 00 00 00       	mov    $0x3,%edx
  20e44b:	e8 70 ea 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e450:	88 44 24 62          	mov    %al,0x62(%rsp)
  20e454:	8a 44 24 62          	mov    0x62(%rsp),%al
  20e458:	0f b6 f8             	movzbl %al,%edi
  20e45b:	83 e7 01             	and    $0x1,%edi
  20e45e:	e8 ad 41 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e463:	24 01                	and    $0x1,%al
  20e465:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  20e46c:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  20e473:	00 
  20e474:	a8 01                	test   $0x1,%al
  20e476:	74 a1                	je     20e419 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x139>
  20e478:	eb 00                	jmp    20e47a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19a>
  20e47a:	eb 02                	jmp    20e47e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19e>
  20e47c:	0f 0b                	ud2    
  20e47e:	e8 4d 3d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e483:	24 01                	and    $0x1,%al
  20e485:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e489:	e9 18 ff ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e48e:	8a 44 24 63          	mov    0x63(%rsp),%al
  20e492:	0f b6 f8             	movzbl %al,%edi
  20e495:	83 e7 01             	and    $0x1,%edi
  20e498:	e8 73 41 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e49d:	24 01                	and    $0x1,%al
  20e49f:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  20e4a6:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  20e4ad:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e4ae:	a8 01                	test   $0x1,%al
  20e4b0:	0f 84 46 ff ff ff    	je     20e3fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x11c>
  20e4b6:	eb 00                	jmp    20e4b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1d8>
  20e4b8:	eb 02                	jmp    20e4bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1dc>
  20e4ba:	0f 0b                	ud2    
  20e4bc:	e8 0f 3d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e4c1:	24 01                	and    $0x1,%al
  20e4c3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e4c7:	e9 da fe ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e4cc:	8a 44 24 64          	mov    0x64(%rsp),%al
  20e4d0:	a8 01                	test   $0x1,%al
  20e4d2:	75 15                	jne    20e4e9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x209>
  20e4d4:	eb 00                	jmp    20e4d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1f6>
  20e4d6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e4db:	e8 a0 1a 00 00       	callq  20ff80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h73ea792404c8f864E>
  20e4e0:	88 44 24 61          	mov    %al,0x61(%rsp)
  20e4e4:	e9 bd 00 00 00       	jmpq   20e5a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2c6>
                        if !first {
  20e4e9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e4ed:	34 ff                	xor    $0xff,%al
  20e4ef:	a8 01                	test   $0x1,%al
  20e4f1:	75 21                	jne    20e514 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x234>
  20e4f3:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e4f8:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e4fd:	48 8d 35 7c 27 ff ff 	lea    -0xd884(%rip),%rsi        # 200c80 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xab>
  20e504:	ba 02 00 00 00       	mov    $0x2,%edx
  20e509:	e8 b2 e9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e50e:	88 44 24 60          	mov    %al,0x60(%rsp)
  20e512:	eb 54                	jmp    20e568 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x288>
  20e514:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e519:	48 8d 35 8e 26 ff ff 	lea    -0xd972(%rip),%rsi        # 200bae <str.3+0x16e>
  20e520:	ba 03 00 00 00       	mov    $0x3,%edx
  20e525:	e8 96 e9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e52a:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  20e52e:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  20e532:	0f b6 f8             	movzbl %al,%edi
  20e535:	83 e7 01             	and    $0x1,%edi
  20e538:	e8 d3 40 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e53d:	24 01                	and    $0x1,%al
  20e53f:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  20e546:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  20e54d:	00 
  20e54e:	a8 01                	test   $0x1,%al
  20e550:	74 a1                	je     20e4f3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x213>
  20e552:	eb 00                	jmp    20e554 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x274>
  20e554:	eb 02                	jmp    20e558 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x278>
  20e556:	0f 0b                	ud2    
  20e558:	e8 73 3c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e55d:	24 01                	and    $0x1,%al
  20e55f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e563:	e9 3e fe ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e568:	8a 44 24 60          	mov    0x60(%rsp),%al
  20e56c:	0f b6 f8             	movzbl %al,%edi
  20e56f:	83 e7 01             	and    $0x1,%edi
  20e572:	e8 99 40 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e577:	24 01                	and    $0x1,%al
  20e579:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  20e580:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  20e587:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e588:	a8 01                	test   $0x1,%al
  20e58a:	0f 84 46 ff ff ff    	je     20e4d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1f6>
  20e590:	eb 00                	jmp    20e592 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2b2>
  20e592:	eb 02                	jmp    20e596 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2b6>
  20e594:	0f 0b                	ud2    
  20e596:	e8 35 3c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e59b:	24 01                	and    $0x1,%al
  20e59d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e5a1:	e9 00 fe ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e5a6:	8a 44 24 61          	mov    0x61(%rsp),%al
  20e5aa:	a8 01                	test   $0x1,%al
  20e5ac:	75 15                	jne    20e5c3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2e3>
  20e5ae:	eb 00                	jmp    20e5b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2d0>
  20e5b0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e5b5:	e8 06 1a 00 00       	callq  20ffc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17hc52234eaf87bd25fE>
  20e5ba:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  20e5be:	e9 bd 00 00 00       	jmpq   20e680 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3a0>
                        if !first {
  20e5c3:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e5c7:	34 ff                	xor    $0xff,%al
  20e5c9:	a8 01                	test   $0x1,%al
  20e5cb:	75 21                	jne    20e5ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x30e>
  20e5cd:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e5d2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e5d7:	48 8d 35 a4 26 ff ff 	lea    -0xd95c(%rip),%rsi        # 200c82 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xad>
  20e5de:	ba 03 00 00 00       	mov    $0x3,%edx
  20e5e3:	e8 d8 e8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e5e8:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  20e5ec:	eb 54                	jmp    20e642 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x362>
  20e5ee:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e5f3:	48 8d 35 b4 25 ff ff 	lea    -0xda4c(%rip),%rsi        # 200bae <str.3+0x16e>
  20e5fa:	ba 03 00 00 00       	mov    $0x3,%edx
  20e5ff:	e8 bc e8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e604:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  20e608:	8a 44 24 5c          	mov    0x5c(%rsp),%al
  20e60c:	0f b6 f8             	movzbl %al,%edi
  20e60f:	83 e7 01             	and    $0x1,%edi
  20e612:	e8 f9 3f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e617:	24 01                	and    $0x1,%al
  20e619:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  20e620:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  20e627:	00 
  20e628:	a8 01                	test   $0x1,%al
  20e62a:	74 a1                	je     20e5cd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2ed>
  20e62c:	eb 00                	jmp    20e62e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x34e>
  20e62e:	eb 02                	jmp    20e632 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x352>
  20e630:	0f 0b                	ud2    
  20e632:	e8 99 3b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e637:	24 01                	and    $0x1,%al
  20e639:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e63d:	e9 64 fd ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e642:	8a 44 24 5d          	mov    0x5d(%rsp),%al
  20e646:	0f b6 f8             	movzbl %al,%edi
  20e649:	83 e7 01             	and    $0x1,%edi
  20e64c:	e8 bf 3f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e651:	24 01                	and    $0x1,%al
  20e653:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  20e65a:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  20e661:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e662:	a8 01                	test   $0x1,%al
  20e664:	0f 84 46 ff ff ff    	je     20e5b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x2d0>
  20e66a:	eb 00                	jmp    20e66c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x38c>
  20e66c:	eb 02                	jmp    20e670 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x390>
  20e66e:	0f 0b                	ud2    
  20e670:	e8 5b 3b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e675:	24 01                	and    $0x1,%al
  20e677:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e67b:	e9 26 fd ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e680:	8a 44 24 5e          	mov    0x5e(%rsp),%al
  20e684:	a8 01                	test   $0x1,%al
  20e686:	75 15                	jne    20e69d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3bd>
  20e688:	eb 00                	jmp    20e68a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3aa>
  20e68a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e68f:	e8 6c 19 00 00       	callq  210000 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17hc4df86ce0ef85585E>
  20e694:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  20e698:	e9 bd 00 00 00       	jmpq   20e75a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x47a>
                        if !first {
  20e69d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e6a1:	34 ff                	xor    $0xff,%al
  20e6a3:	a8 01                	test   $0x1,%al
  20e6a5:	75 21                	jne    20e6c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3e8>
  20e6a7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e6ac:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e6b1:	48 8d 35 cd 25 ff ff 	lea    -0xda33(%rip),%rsi        # 200c85 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xb0>
  20e6b8:	ba 03 00 00 00       	mov    $0x3,%edx
  20e6bd:	e8 fe e7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e6c2:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  20e6c6:	eb 54                	jmp    20e71c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x43c>
  20e6c8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e6cd:	48 8d 35 da 24 ff ff 	lea    -0xdb26(%rip),%rsi        # 200bae <str.3+0x16e>
  20e6d4:	ba 03 00 00 00       	mov    $0x3,%edx
  20e6d9:	e8 e2 e7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e6de:	88 44 24 59          	mov    %al,0x59(%rsp)
  20e6e2:	8a 44 24 59          	mov    0x59(%rsp),%al
  20e6e6:	0f b6 f8             	movzbl %al,%edi
  20e6e9:	83 e7 01             	and    $0x1,%edi
  20e6ec:	e8 1f 3f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e6f1:	24 01                	and    $0x1,%al
  20e6f3:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  20e6fa:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  20e701:	00 
  20e702:	a8 01                	test   $0x1,%al
  20e704:	74 a1                	je     20e6a7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3c7>
  20e706:	eb 00                	jmp    20e708 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x428>
  20e708:	eb 02                	jmp    20e70c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x42c>
  20e70a:	0f 0b                	ud2    
  20e70c:	e8 bf 3a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e711:	24 01                	and    $0x1,%al
  20e713:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e717:	e9 8a fc ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e71c:	8a 44 24 5a          	mov    0x5a(%rsp),%al
  20e720:	0f b6 f8             	movzbl %al,%edi
  20e723:	83 e7 01             	and    $0x1,%edi
  20e726:	e8 e5 3e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e72b:	24 01                	and    $0x1,%al
  20e72d:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  20e734:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  20e73b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e73c:	a8 01                	test   $0x1,%al
  20e73e:	0f 84 46 ff ff ff    	je     20e68a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x3aa>
  20e744:	eb 00                	jmp    20e746 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x466>
  20e746:	eb 02                	jmp    20e74a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x46a>
  20e748:	0f 0b                	ud2    
  20e74a:	e8 81 3a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e74f:	24 01                	and    $0x1,%al
  20e751:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e755:	e9 4c fc ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e75a:	8a 44 24 5b          	mov    0x5b(%rsp),%al
  20e75e:	a8 01                	test   $0x1,%al
  20e760:	75 15                	jne    20e777 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x497>
  20e762:	eb 00                	jmp    20e764 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x484>
  20e764:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e769:	e8 d2 18 00 00       	callq  210040 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h59997e024a7bd261E>
  20e76e:	88 44 24 58          	mov    %al,0x58(%rsp)
  20e772:	e9 bd 00 00 00       	jmpq   20e834 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x554>
                        if !first {
  20e777:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e77b:	34 ff                	xor    $0xff,%al
  20e77d:	a8 01                	test   $0x1,%al
  20e77f:	75 21                	jne    20e7a2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x4c2>
  20e781:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e786:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e78b:	48 8d 35 f6 24 ff ff 	lea    -0xdb0a(%rip),%rsi        # 200c88 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xb3>
  20e792:	ba 03 00 00 00       	mov    $0x3,%edx
  20e797:	e8 24 e7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e79c:	88 44 24 57          	mov    %al,0x57(%rsp)
  20e7a0:	eb 54                	jmp    20e7f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x516>
  20e7a2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e7a7:	48 8d 35 00 24 ff ff 	lea    -0xdc00(%rip),%rsi        # 200bae <str.3+0x16e>
  20e7ae:	ba 03 00 00 00       	mov    $0x3,%edx
  20e7b3:	e8 08 e7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e7b8:	88 44 24 56          	mov    %al,0x56(%rsp)
  20e7bc:	8a 44 24 56          	mov    0x56(%rsp),%al
  20e7c0:	0f b6 f8             	movzbl %al,%edi
  20e7c3:	83 e7 01             	and    $0x1,%edi
  20e7c6:	e8 45 3e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e7cb:	24 01                	and    $0x1,%al
  20e7cd:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  20e7d4:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  20e7db:	00 
  20e7dc:	a8 01                	test   $0x1,%al
  20e7de:	74 a1                	je     20e781 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x4a1>
  20e7e0:	eb 00                	jmp    20e7e2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x502>
  20e7e2:	eb 02                	jmp    20e7e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x506>
  20e7e4:	0f 0b                	ud2    
  20e7e6:	e8 e5 39 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e7eb:	24 01                	and    $0x1,%al
  20e7ed:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e7f1:	e9 b0 fb ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e7f6:	8a 44 24 57          	mov    0x57(%rsp),%al
  20e7fa:	0f b6 f8             	movzbl %al,%edi
  20e7fd:	83 e7 01             	and    $0x1,%edi
  20e800:	e8 0b 3e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e805:	24 01                	and    $0x1,%al
  20e807:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  20e80e:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  20e815:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e816:	a8 01                	test   $0x1,%al
  20e818:	0f 84 46 ff ff ff    	je     20e764 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x484>
  20e81e:	eb 00                	jmp    20e820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x540>
  20e820:	eb 02                	jmp    20e824 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x544>
  20e822:	0f 0b                	ud2    
  20e824:	e8 a7 39 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e829:	24 01                	and    $0x1,%al
  20e82b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e82f:	e9 72 fb ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e834:	8a 44 24 58          	mov    0x58(%rsp),%al
  20e838:	a8 01                	test   $0x1,%al
  20e83a:	75 15                	jne    20e851 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x571>
  20e83c:	eb 00                	jmp    20e83e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x55e>
  20e83e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e843:	e8 38 18 00 00       	callq  210080 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17heba50b06dd4d0a29E>
  20e848:	88 44 24 55          	mov    %al,0x55(%rsp)
  20e84c:	e9 bd 00 00 00       	jmpq   20e90e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x62e>
                        if !first {
  20e851:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e855:	34 ff                	xor    $0xff,%al
  20e857:	a8 01                	test   $0x1,%al
  20e859:	75 21                	jne    20e87c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x59c>
  20e85b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e860:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e865:	48 8d 35 1f 24 ff ff 	lea    -0xdbe1(%rip),%rsi        # 200c8b <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xb6>
  20e86c:	ba 03 00 00 00       	mov    $0x3,%edx
  20e871:	e8 4a e6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e876:	88 44 24 54          	mov    %al,0x54(%rsp)
  20e87a:	eb 54                	jmp    20e8d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x5f0>
  20e87c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e881:	48 8d 35 26 23 ff ff 	lea    -0xdcda(%rip),%rsi        # 200bae <str.3+0x16e>
  20e888:	ba 03 00 00 00       	mov    $0x3,%edx
  20e88d:	e8 2e e6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e892:	88 44 24 53          	mov    %al,0x53(%rsp)
  20e896:	8a 44 24 53          	mov    0x53(%rsp),%al
  20e89a:	0f b6 f8             	movzbl %al,%edi
  20e89d:	83 e7 01             	and    $0x1,%edi
  20e8a0:	e8 6b 3d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e8a5:	24 01                	and    $0x1,%al
  20e8a7:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  20e8ae:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  20e8b5:	00 
  20e8b6:	a8 01                	test   $0x1,%al
  20e8b8:	74 a1                	je     20e85b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x57b>
  20e8ba:	eb 00                	jmp    20e8bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x5dc>
  20e8bc:	eb 02                	jmp    20e8c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x5e0>
  20e8be:	0f 0b                	ud2    
  20e8c0:	e8 0b 39 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e8c5:	24 01                	and    $0x1,%al
  20e8c7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e8cb:	e9 d6 fa ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e8d0:	8a 44 24 54          	mov    0x54(%rsp),%al
  20e8d4:	0f b6 f8             	movzbl %al,%edi
  20e8d7:	83 e7 01             	and    $0x1,%edi
  20e8da:	e8 31 3d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e8df:	24 01                	and    $0x1,%al
  20e8e1:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  20e8e8:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  20e8ef:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e8f0:	a8 01                	test   $0x1,%al
  20e8f2:	0f 84 46 ff ff ff    	je     20e83e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x55e>
  20e8f8:	eb 00                	jmp    20e8fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x61a>
  20e8fa:	eb 02                	jmp    20e8fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x61e>
  20e8fc:	0f 0b                	ud2    
  20e8fe:	e8 cd 38 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e903:	24 01                	and    $0x1,%al
  20e905:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e909:	e9 98 fa ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e90e:	8a 44 24 55          	mov    0x55(%rsp),%al
  20e912:	a8 01                	test   $0x1,%al
  20e914:	75 15                	jne    20e92b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x64b>
  20e916:	eb 00                	jmp    20e918 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x638>
  20e918:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e91d:	e8 ae 17 00 00       	callq  2100d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817hcef768f48fcbad45E>
  20e922:	88 44 24 52          	mov    %al,0x52(%rsp)
  20e926:	e9 bd 00 00 00       	jmpq   20e9e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x708>
                        if !first {
  20e92b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20e92f:	34 ff                	xor    $0xff,%al
  20e931:	a8 01                	test   $0x1,%al
  20e933:	75 21                	jne    20e956 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x676>
  20e935:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20e93a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e93f:	48 8d 35 48 23 ff ff 	lea    -0xdcb8(%rip),%rsi        # 200c8e <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xb9>
  20e946:	ba 03 00 00 00       	mov    $0x3,%edx
  20e94b:	e8 70 e5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e950:	88 44 24 51          	mov    %al,0x51(%rsp)
  20e954:	eb 54                	jmp    20e9aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x6ca>
  20e956:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20e95b:	48 8d 35 4c 22 ff ff 	lea    -0xddb4(%rip),%rsi        # 200bae <str.3+0x16e>
  20e962:	ba 03 00 00 00       	mov    $0x3,%edx
  20e967:	e8 54 e5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e96c:	88 44 24 50          	mov    %al,0x50(%rsp)
  20e970:	8a 44 24 50          	mov    0x50(%rsp),%al
  20e974:	0f b6 f8             	movzbl %al,%edi
  20e977:	83 e7 01             	and    $0x1,%edi
  20e97a:	e8 91 3c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e97f:	24 01                	and    $0x1,%al
  20e981:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  20e988:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  20e98f:	00 
  20e990:	a8 01                	test   $0x1,%al
  20e992:	74 a1                	je     20e935 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x655>
  20e994:	eb 00                	jmp    20e996 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x6b6>
  20e996:	eb 02                	jmp    20e99a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x6ba>
  20e998:	0f 0b                	ud2    
  20e99a:	e8 31 38 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e99f:	24 01                	and    $0x1,%al
  20e9a1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e9a5:	e9 fc f9 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e9aa:	8a 44 24 51          	mov    0x51(%rsp),%al
  20e9ae:	0f b6 f8             	movzbl %al,%edi
  20e9b1:	83 e7 01             	and    $0x1,%edi
  20e9b4:	e8 57 3c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20e9b9:	24 01                	and    $0x1,%al
  20e9bb:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  20e9c2:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  20e9c9:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20e9ca:	a8 01                	test   $0x1,%al
  20e9cc:	0f 84 46 ff ff ff    	je     20e918 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x638>
  20e9d2:	eb 00                	jmp    20e9d4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x6f4>
  20e9d4:	eb 02                	jmp    20e9d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x6f8>
  20e9d6:	0f 0b                	ud2    
  20e9d8:	e8 f3 37 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20e9dd:	24 01                	and    $0x1,%al
  20e9df:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20e9e3:	e9 be f9 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20e9e8:	8a 44 24 52          	mov    0x52(%rsp),%al
  20e9ec:	a8 01                	test   $0x1,%al
  20e9ee:	75 15                	jne    20ea05 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x725>
  20e9f0:	eb 00                	jmp    20e9f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x712>
  20e9f2:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20e9f7:	e8 24 17 00 00       	callq  210120 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h53afb08d60a06c06E>
  20e9fc:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  20ea00:	e9 bd 00 00 00       	jmpq   20eac2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7e2>
                        if !first {
  20ea05:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ea09:	34 ff                	xor    $0xff,%al
  20ea0b:	a8 01                	test   $0x1,%al
  20ea0d:	75 21                	jne    20ea30 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x750>
  20ea0f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20ea14:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ea19:	48 8d 35 71 22 ff ff 	lea    -0xdd8f(%rip),%rsi        # 200c91 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xbc>
  20ea20:	ba 03 00 00 00       	mov    $0x3,%edx
  20ea25:	e8 96 e4 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ea2a:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  20ea2e:	eb 54                	jmp    20ea84 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7a4>
  20ea30:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ea35:	48 8d 35 72 21 ff ff 	lea    -0xde8e(%rip),%rsi        # 200bae <str.3+0x16e>
  20ea3c:	ba 03 00 00 00       	mov    $0x3,%edx
  20ea41:	e8 7a e4 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ea46:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  20ea4a:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  20ea4e:	0f b6 f8             	movzbl %al,%edi
  20ea51:	83 e7 01             	and    $0x1,%edi
  20ea54:	e8 b7 3b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ea59:	24 01                	and    $0x1,%al
  20ea5b:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  20ea62:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  20ea69:	00 
  20ea6a:	a8 01                	test   $0x1,%al
  20ea6c:	74 a1                	je     20ea0f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x72f>
  20ea6e:	eb 00                	jmp    20ea70 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x790>
  20ea70:	eb 02                	jmp    20ea74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x794>
  20ea72:	0f 0b                	ud2    
  20ea74:	e8 57 37 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ea79:	24 01                	and    $0x1,%al
  20ea7b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ea7f:	e9 22 f9 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ea84:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  20ea88:	0f b6 f8             	movzbl %al,%edi
  20ea8b:	83 e7 01             	and    $0x1,%edi
  20ea8e:	e8 7d 3b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ea93:	24 01                	and    $0x1,%al
  20ea95:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  20ea9c:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  20eaa3:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20eaa4:	a8 01                	test   $0x1,%al
  20eaa6:	0f 84 46 ff ff ff    	je     20e9f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x712>
  20eaac:	eb 00                	jmp    20eaae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7ce>
  20eaae:	eb 02                	jmp    20eab2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7d2>
  20eab0:	0f 0b                	ud2    
  20eab2:	e8 19 37 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20eab7:	24 01                	and    $0x1,%al
  20eab9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20eabd:	e9 e4 f8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20eac2:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  20eac6:	a8 01                	test   $0x1,%al
  20eac8:	75 15                	jne    20eadf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7ff>
  20eaca:	eb 00                	jmp    20eacc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7ec>
  20eacc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ead1:	e8 9a 16 00 00       	callq  210170 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h4749c9f5bf6a4f48E>
  20ead6:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  20eada:	e9 bd 00 00 00       	jmpq   20eb9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8bc>
                        if !first {
  20eadf:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20eae3:	34 ff                	xor    $0xff,%al
  20eae5:	a8 01                	test   $0x1,%al
  20eae7:	75 21                	jne    20eb0a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x82a>
  20eae9:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20eaee:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20eaf3:	48 8d 35 d3 20 ff ff 	lea    -0xdf2d(%rip),%rsi        # 200bcd <str.3+0x18d>
  20eafa:	ba 04 00 00 00       	mov    $0x4,%edx
  20eaff:	e8 bc e3 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20eb04:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  20eb08:	eb 54                	jmp    20eb5e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x87e>
  20eb0a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20eb0f:	48 8d 35 98 20 ff ff 	lea    -0xdf68(%rip),%rsi        # 200bae <str.3+0x16e>
  20eb16:	ba 03 00 00 00       	mov    $0x3,%edx
  20eb1b:	e8 a0 e3 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20eb20:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  20eb24:	8a 44 24 4a          	mov    0x4a(%rsp),%al
  20eb28:	0f b6 f8             	movzbl %al,%edi
  20eb2b:	83 e7 01             	and    $0x1,%edi
  20eb2e:	e8 dd 3a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20eb33:	24 01                	and    $0x1,%al
  20eb35:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  20eb3c:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  20eb43:	00 
  20eb44:	a8 01                	test   $0x1,%al
  20eb46:	74 a1                	je     20eae9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x809>
  20eb48:	eb 00                	jmp    20eb4a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x86a>
  20eb4a:	eb 02                	jmp    20eb4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x86e>
  20eb4c:	0f 0b                	ud2    
  20eb4e:	e8 7d 36 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20eb53:	24 01                	and    $0x1,%al
  20eb55:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20eb59:	e9 48 f8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20eb5e:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  20eb62:	0f b6 f8             	movzbl %al,%edi
  20eb65:	83 e7 01             	and    $0x1,%edi
  20eb68:	e8 a3 3a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20eb6d:	24 01                	and    $0x1,%al
  20eb6f:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  20eb76:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  20eb7d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20eb7e:	a8 01                	test   $0x1,%al
  20eb80:	0f 84 46 ff ff ff    	je     20eacc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x7ec>
  20eb86:	eb 00                	jmp    20eb88 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8a8>
  20eb88:	eb 02                	jmp    20eb8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8ac>
  20eb8a:	0f 0b                	ud2    
  20eb8c:	e8 3f 36 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20eb91:	24 01                	and    $0x1,%al
  20eb93:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20eb97:	e9 0a f8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20eb9c:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  20eba0:	a8 01                	test   $0x1,%al
  20eba2:	75 15                	jne    20ebb9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8d9>
  20eba4:	eb 00                	jmp    20eba6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8c6>
  20eba6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ebab:	e8 10 16 00 00       	callq  2101c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17h7c62487d985c6722E>
  20ebb0:	88 44 24 49          	mov    %al,0x49(%rsp)
  20ebb4:	e9 bd 00 00 00       	jmpq   20ec76 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x996>
                        if !first {
  20ebb9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ebbd:	34 ff                	xor    $0xff,%al
  20ebbf:	a8 01                	test   $0x1,%al
  20ebc1:	75 21                	jne    20ebe4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x904>
  20ebc3:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20ebc8:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ebcd:	48 8d 35 c0 20 ff ff 	lea    -0xdf40(%rip),%rsi        # 200c94 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xbf>
  20ebd4:	ba 03 00 00 00       	mov    $0x3,%edx
  20ebd9:	e8 e2 e2 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ebde:	88 44 24 48          	mov    %al,0x48(%rsp)
  20ebe2:	eb 54                	jmp    20ec38 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x958>
  20ebe4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ebe9:	48 8d 35 be 1f ff ff 	lea    -0xe042(%rip),%rsi        # 200bae <str.3+0x16e>
  20ebf0:	ba 03 00 00 00       	mov    $0x3,%edx
  20ebf5:	e8 c6 e2 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ebfa:	88 44 24 47          	mov    %al,0x47(%rsp)
  20ebfe:	8a 44 24 47          	mov    0x47(%rsp),%al
  20ec02:	0f b6 f8             	movzbl %al,%edi
  20ec05:	83 e7 01             	and    $0x1,%edi
  20ec08:	e8 03 3a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ec0d:	24 01                	and    $0x1,%al
  20ec0f:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  20ec16:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  20ec1d:	00 
  20ec1e:	a8 01                	test   $0x1,%al
  20ec20:	74 a1                	je     20ebc3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8e3>
  20ec22:	eb 00                	jmp    20ec24 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x944>
  20ec24:	eb 02                	jmp    20ec28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x948>
  20ec26:	0f 0b                	ud2    
  20ec28:	e8 a3 35 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ec2d:	24 01                	and    $0x1,%al
  20ec2f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ec33:	e9 6e f7 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ec38:	8a 44 24 48          	mov    0x48(%rsp),%al
  20ec3c:	0f b6 f8             	movzbl %al,%edi
  20ec3f:	83 e7 01             	and    $0x1,%edi
  20ec42:	e8 c9 39 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ec47:	24 01                	and    $0x1,%al
  20ec49:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  20ec50:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  20ec57:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ec58:	a8 01                	test   $0x1,%al
  20ec5a:	0f 84 46 ff ff ff    	je     20eba6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x8c6>
  20ec60:	eb 00                	jmp    20ec62 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x982>
  20ec62:	eb 02                	jmp    20ec66 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x986>
  20ec64:	0f 0b                	ud2    
  20ec66:	e8 65 35 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ec6b:	24 01                	and    $0x1,%al
  20ec6d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ec71:	e9 30 f7 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ec76:	8a 44 24 49          	mov    0x49(%rsp),%al
  20ec7a:	a8 01                	test   $0x1,%al
  20ec7c:	75 15                	jne    20ec93 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x9b3>
  20ec7e:	eb 00                	jmp    20ec80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x9a0>
  20ec80:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ec85:	e8 86 15 00 00       	callq  210210 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17hbbbcbb96d2ced87dE>
  20ec8a:	88 44 24 46          	mov    %al,0x46(%rsp)
  20ec8e:	e9 bd 00 00 00       	jmpq   20ed50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa70>
                        if !first {
  20ec93:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ec97:	34 ff                	xor    $0xff,%al
  20ec99:	a8 01                	test   $0x1,%al
  20ec9b:	75 21                	jne    20ecbe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x9de>
  20ec9d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20eca2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20eca7:	48 8d 35 53 1f ff ff 	lea    -0xe0ad(%rip),%rsi        # 200c01 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x2c>
  20ecae:	ba 04 00 00 00       	mov    $0x4,%edx
  20ecb3:	e8 08 e2 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ecb8:	88 44 24 45          	mov    %al,0x45(%rsp)
  20ecbc:	eb 54                	jmp    20ed12 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa32>
  20ecbe:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ecc3:	48 8d 35 e4 1e ff ff 	lea    -0xe11c(%rip),%rsi        # 200bae <str.3+0x16e>
  20ecca:	ba 03 00 00 00       	mov    $0x3,%edx
  20eccf:	e8 ec e1 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ecd4:	88 44 24 44          	mov    %al,0x44(%rsp)
  20ecd8:	8a 44 24 44          	mov    0x44(%rsp),%al
  20ecdc:	0f b6 f8             	movzbl %al,%edi
  20ecdf:	83 e7 01             	and    $0x1,%edi
  20ece2:	e8 29 39 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ece7:	24 01                	and    $0x1,%al
  20ece9:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  20ecf0:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  20ecf7:	00 
  20ecf8:	a8 01                	test   $0x1,%al
  20ecfa:	74 a1                	je     20ec9d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x9bd>
  20ecfc:	eb 00                	jmp    20ecfe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa1e>
  20ecfe:	eb 02                	jmp    20ed02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa22>
  20ed00:	0f 0b                	ud2    
  20ed02:	e8 c9 34 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ed07:	24 01                	and    $0x1,%al
  20ed09:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ed0d:	e9 94 f6 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ed12:	8a 44 24 45          	mov    0x45(%rsp),%al
  20ed16:	0f b6 f8             	movzbl %al,%edi
  20ed19:	83 e7 01             	and    $0x1,%edi
  20ed1c:	e8 ef 38 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ed21:	24 01                	and    $0x1,%al
  20ed23:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  20ed2a:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  20ed31:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ed32:	a8 01                	test   $0x1,%al
  20ed34:	0f 84 46 ff ff ff    	je     20ec80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x9a0>
  20ed3a:	eb 00                	jmp    20ed3c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa5c>
  20ed3c:	eb 02                	jmp    20ed40 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa60>
  20ed3e:	0f 0b                	ud2    
  20ed40:	e8 8b 34 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ed45:	24 01                	and    $0x1,%al
  20ed47:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ed4b:	e9 56 f6 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ed50:	8a 44 24 46          	mov    0x46(%rsp),%al
  20ed54:	a8 01                	test   $0x1,%al
  20ed56:	75 15                	jne    20ed6d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa8d>
  20ed58:	eb 00                	jmp    20ed5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa7a>
  20ed5a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ed5f:	e8 fc 14 00 00       	callq  210260 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h5842facb45d8356bE>
  20ed64:	88 44 24 43          	mov    %al,0x43(%rsp)
  20ed68:	e9 bd 00 00 00       	jmpq   20ee2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb4a>
                        if !first {
  20ed6d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ed71:	34 ff                	xor    $0xff,%al
  20ed73:	a8 01                	test   $0x1,%al
  20ed75:	75 21                	jne    20ed98 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xab8>
  20ed77:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20ed7c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ed81:	48 8d 35 0f 1f ff ff 	lea    -0xe0f1(%rip),%rsi        # 200c97 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc2>
  20ed88:	ba 03 00 00 00       	mov    $0x3,%edx
  20ed8d:	e8 2e e1 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ed92:	88 44 24 42          	mov    %al,0x42(%rsp)
  20ed96:	eb 54                	jmp    20edec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb0c>
  20ed98:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ed9d:	48 8d 35 0a 1e ff ff 	lea    -0xe1f6(%rip),%rsi        # 200bae <str.3+0x16e>
  20eda4:	ba 03 00 00 00       	mov    $0x3,%edx
  20eda9:	e8 12 e1 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20edae:	88 44 24 41          	mov    %al,0x41(%rsp)
  20edb2:	8a 44 24 41          	mov    0x41(%rsp),%al
  20edb6:	0f b6 f8             	movzbl %al,%edi
  20edb9:	83 e7 01             	and    $0x1,%edi
  20edbc:	e8 4f 38 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20edc1:	24 01                	and    $0x1,%al
  20edc3:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  20edca:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  20edd1:	00 
  20edd2:	a8 01                	test   $0x1,%al
  20edd4:	74 a1                	je     20ed77 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa97>
  20edd6:	eb 00                	jmp    20edd8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xaf8>
  20edd8:	eb 02                	jmp    20eddc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xafc>
  20edda:	0f 0b                	ud2    
  20eddc:	e8 ef 33 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ede1:	24 01                	and    $0x1,%al
  20ede3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ede7:	e9 ba f5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20edec:	8a 44 24 42          	mov    0x42(%rsp),%al
  20edf0:	0f b6 f8             	movzbl %al,%edi
  20edf3:	83 e7 01             	and    $0x1,%edi
  20edf6:	e8 15 38 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20edfb:	24 01                	and    $0x1,%al
  20edfd:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  20ee04:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  20ee0b:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ee0c:	a8 01                	test   $0x1,%al
  20ee0e:	0f 84 46 ff ff ff    	je     20ed5a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xa7a>
  20ee14:	eb 00                	jmp    20ee16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb36>
  20ee16:	eb 02                	jmp    20ee1a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb3a>
  20ee18:	0f 0b                	ud2    
  20ee1a:	e8 b1 33 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ee1f:	24 01                	and    $0x1,%al
  20ee21:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ee25:	e9 7c f5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ee2a:	8a 44 24 43          	mov    0x43(%rsp),%al
  20ee2e:	a8 01                	test   $0x1,%al
  20ee30:	75 15                	jne    20ee47 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb67>
  20ee32:	eb 00                	jmp    20ee34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb54>
  20ee34:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ee39:	e8 72 14 00 00       	callq  2102b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17h07a13d37ab9f272aE>
  20ee3e:	88 44 24 40          	mov    %al,0x40(%rsp)
  20ee42:	e9 bd 00 00 00       	jmpq   20ef04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc24>
                        if !first {
  20ee47:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ee4b:	34 ff                	xor    $0xff,%al
  20ee4d:	a8 01                	test   $0x1,%al
  20ee4f:	75 21                	jne    20ee72 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb92>
  20ee51:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20ee56:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ee5b:	48 8d 35 38 1e ff ff 	lea    -0xe1c8(%rip),%rsi        # 200c9a <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc5>
  20ee62:	ba 03 00 00 00       	mov    $0x3,%edx
  20ee67:	e8 54 e0 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ee6c:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20ee70:	eb 54                	jmp    20eec6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xbe6>
  20ee72:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ee77:	48 8d 35 30 1d ff ff 	lea    -0xe2d0(%rip),%rsi        # 200bae <str.3+0x16e>
  20ee7e:	ba 03 00 00 00       	mov    $0x3,%edx
  20ee83:	e8 38 e0 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ee88:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  20ee8c:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  20ee90:	0f b6 f8             	movzbl %al,%edi
  20ee93:	83 e7 01             	and    $0x1,%edi
  20ee96:	e8 75 37 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ee9b:	24 01                	and    $0x1,%al
  20ee9d:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  20eea4:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  20eeab:	00 
  20eeac:	a8 01                	test   $0x1,%al
  20eeae:	74 a1                	je     20ee51 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb71>
  20eeb0:	eb 00                	jmp    20eeb2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xbd2>
  20eeb2:	eb 02                	jmp    20eeb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xbd6>
  20eeb4:	0f 0b                	ud2    
  20eeb6:	e8 15 33 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20eebb:	24 01                	and    $0x1,%al
  20eebd:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20eec1:	e9 e0 f4 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20eec6:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20eeca:	0f b6 f8             	movzbl %al,%edi
  20eecd:	83 e7 01             	and    $0x1,%edi
  20eed0:	e8 3b 37 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20eed5:	24 01                	and    $0x1,%al
  20eed7:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  20eede:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  20eee5:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20eee6:	a8 01                	test   $0x1,%al
  20eee8:	0f 84 46 ff ff ff    	je     20ee34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xb54>
  20eeee:	eb 00                	jmp    20eef0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc10>
  20eef0:	eb 02                	jmp    20eef4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc14>
  20eef2:	0f 0b                	ud2    
  20eef4:	e8 d7 32 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20eef9:	24 01                	and    $0x1,%al
  20eefb:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20eeff:	e9 a2 f4 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20ef04:	8a 44 24 40          	mov    0x40(%rsp),%al
  20ef08:	a8 01                	test   $0x1,%al
  20ef0a:	75 15                	jne    20ef21 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc41>
  20ef0c:	eb 00                	jmp    20ef0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc2e>
  20ef0e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20ef13:	e8 e8 13 00 00       	callq  210300 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hd397f79f5fa46c87E>
  20ef18:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  20ef1c:	e9 bd 00 00 00       	jmpq   20efde <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcfe>
                        if !first {
  20ef21:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20ef25:	34 ff                	xor    $0xff,%al
  20ef27:	a8 01                	test   $0x1,%al
  20ef29:	75 21                	jne    20ef4c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6c>
  20ef2b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20ef30:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20ef35:	48 8d 35 79 1c ff ff 	lea    -0xe387(%rip),%rsi        # 200bb5 <str.3+0x175>
  20ef3c:	ba 04 00 00 00       	mov    $0x4,%edx
  20ef41:	e8 7a df 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ef46:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  20ef4a:	eb 54                	jmp    20efa0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcc0>
  20ef4c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20ef51:	48 8d 35 56 1c ff ff 	lea    -0xe3aa(%rip),%rsi        # 200bae <str.3+0x16e>
  20ef58:	ba 03 00 00 00       	mov    $0x3,%edx
  20ef5d:	e8 5e df 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20ef62:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  20ef66:	8a 44 24 3b          	mov    0x3b(%rsp),%al
  20ef6a:	0f b6 f8             	movzbl %al,%edi
  20ef6d:	83 e7 01             	and    $0x1,%edi
  20ef70:	e8 9b 36 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20ef75:	24 01                	and    $0x1,%al
  20ef77:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  20ef7e:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  20ef85:	00 
  20ef86:	a8 01                	test   $0x1,%al
  20ef88:	74 a1                	je     20ef2b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc4b>
  20ef8a:	eb 00                	jmp    20ef8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcac>
  20ef8c:	eb 02                	jmp    20ef90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcb0>
  20ef8e:	0f 0b                	ud2    
  20ef90:	e8 3b 32 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20ef95:	24 01                	and    $0x1,%al
  20ef97:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20ef9b:	e9 06 f4 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20efa0:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  20efa4:	0f b6 f8             	movzbl %al,%edi
  20efa7:	83 e7 01             	and    $0x1,%edi
  20efaa:	e8 61 36 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20efaf:	24 01                	and    $0x1,%al
  20efb1:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  20efb8:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  20efbf:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20efc0:	a8 01                	test   $0x1,%al
  20efc2:	0f 84 46 ff ff ff    	je     20ef0e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc2e>
  20efc8:	eb 00                	jmp    20efca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcea>
  20efca:	eb 02                	jmp    20efce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xcee>
  20efcc:	0f 0b                	ud2    
  20efce:	e8 fd 31 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20efd3:	24 01                	and    $0x1,%al
  20efd5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20efd9:	e9 c8 f3 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20efde:	8a 44 24 3d          	mov    0x3d(%rsp),%al
  20efe2:	a8 01                	test   $0x1,%al
  20efe4:	75 15                	jne    20effb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd1b>
  20efe6:	eb 00                	jmp    20efe8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd08>
  20efe8:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20efed:	e8 5e 13 00 00       	callq  210350 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617h920008d6ec79214fE>
  20eff2:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  20eff6:	e9 bd 00 00 00       	jmpq   20f0b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xdd8>
                        if !first {
  20effb:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20efff:	34 ff                	xor    $0xff,%al
  20f001:	a8 01                	test   $0x1,%al
  20f003:	75 21                	jne    20f026 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd46>
  20f005:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f00a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f00f:	48 8d 35 87 1c ff ff 	lea    -0xe379(%rip),%rsi        # 200c9d <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc8>
  20f016:	ba 03 00 00 00       	mov    $0x3,%edx
  20f01b:	e8 a0 de 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f020:	88 44 24 39          	mov    %al,0x39(%rsp)
  20f024:	eb 54                	jmp    20f07a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd9a>
  20f026:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f02b:	48 8d 35 7c 1b ff ff 	lea    -0xe484(%rip),%rsi        # 200bae <str.3+0x16e>
  20f032:	ba 03 00 00 00       	mov    $0x3,%edx
  20f037:	e8 84 de 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f03c:	88 44 24 38          	mov    %al,0x38(%rsp)
  20f040:	8a 44 24 38          	mov    0x38(%rsp),%al
  20f044:	0f b6 f8             	movzbl %al,%edi
  20f047:	83 e7 01             	and    $0x1,%edi
  20f04a:	e8 c1 35 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f04f:	24 01                	and    $0x1,%al
  20f051:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  20f058:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  20f05f:	00 
  20f060:	a8 01                	test   $0x1,%al
  20f062:	74 a1                	je     20f005 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd25>
  20f064:	eb 00                	jmp    20f066 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd86>
  20f066:	eb 02                	jmp    20f06a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd8a>
  20f068:	0f 0b                	ud2    
  20f06a:	e8 61 31 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f06f:	24 01                	and    $0x1,%al
  20f071:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f075:	e9 2c f3 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f07a:	8a 44 24 39          	mov    0x39(%rsp),%al
  20f07e:	0f b6 f8             	movzbl %al,%edi
  20f081:	83 e7 01             	and    $0x1,%edi
  20f084:	e8 87 35 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f089:	24 01                	and    $0x1,%al
  20f08b:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  20f092:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  20f099:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f09a:	a8 01                	test   $0x1,%al
  20f09c:	0f 84 46 ff ff ff    	je     20efe8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xd08>
  20f0a2:	eb 00                	jmp    20f0a4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xdc4>
  20f0a4:	eb 02                	jmp    20f0a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xdc8>
  20f0a6:	0f 0b                	ud2    
  20f0a8:	e8 23 31 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f0ad:	24 01                	and    $0x1,%al
  20f0af:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f0b3:	e9 ee f2 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f0b8:	8a 44 24 3a          	mov    0x3a(%rsp),%al
  20f0bc:	a8 01                	test   $0x1,%al
  20f0be:	75 15                	jne    20f0d5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xdf5>
  20f0c0:	eb 00                	jmp    20f0c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xde2>
  20f0c2:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f0c7:	e8 d4 12 00 00       	callq  2103a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17hcb9e120f2faad715E>
  20f0cc:	88 44 24 37          	mov    %al,0x37(%rsp)
  20f0d0:	e9 bd 00 00 00       	jmpq   20f192 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xeb2>
                        if !first {
  20f0d5:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f0d9:	34 ff                	xor    $0xff,%al
  20f0db:	a8 01                	test   $0x1,%al
  20f0dd:	75 21                	jne    20f100 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xe20>
  20f0df:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f0e4:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f0e9:	48 8d 35 b0 1b ff ff 	lea    -0xe450(%rip),%rsi        # 200ca0 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xcb>
  20f0f0:	ba 05 00 00 00       	mov    $0x5,%edx
  20f0f5:	e8 c6 dd 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f0fa:	88 44 24 36          	mov    %al,0x36(%rsp)
  20f0fe:	eb 54                	jmp    20f154 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xe74>
  20f100:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f105:	48 8d 35 a2 1a ff ff 	lea    -0xe55e(%rip),%rsi        # 200bae <str.3+0x16e>
  20f10c:	ba 03 00 00 00       	mov    $0x3,%edx
  20f111:	e8 aa dd 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f116:	88 44 24 35          	mov    %al,0x35(%rsp)
  20f11a:	8a 44 24 35          	mov    0x35(%rsp),%al
  20f11e:	0f b6 f8             	movzbl %al,%edi
  20f121:	83 e7 01             	and    $0x1,%edi
  20f124:	e8 e7 34 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f129:	24 01                	and    $0x1,%al
  20f12b:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  20f132:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  20f139:	00 
  20f13a:	a8 01                	test   $0x1,%al
  20f13c:	74 a1                	je     20f0df <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xdff>
  20f13e:	eb 00                	jmp    20f140 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xe60>
  20f140:	eb 02                	jmp    20f144 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xe64>
  20f142:	0f 0b                	ud2    
  20f144:	e8 87 30 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f149:	24 01                	and    $0x1,%al
  20f14b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f14f:	e9 52 f2 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f154:	8a 44 24 36          	mov    0x36(%rsp),%al
  20f158:	0f b6 f8             	movzbl %al,%edi
  20f15b:	83 e7 01             	and    $0x1,%edi
  20f15e:	e8 ad 34 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f163:	24 01                	and    $0x1,%al
  20f165:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  20f16c:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  20f173:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f174:	a8 01                	test   $0x1,%al
  20f176:	0f 84 46 ff ff ff    	je     20f0c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xde2>
  20f17c:	eb 00                	jmp    20f17e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xe9e>
  20f17e:	eb 02                	jmp    20f182 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xea2>
  20f180:	0f 0b                	ud2    
  20f182:	e8 49 30 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f187:	24 01                	and    $0x1,%al
  20f189:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f18d:	e9 14 f2 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f192:	8a 44 24 37          	mov    0x37(%rsp),%al
  20f196:	a8 01                	test   $0x1,%al
  20f198:	75 15                	jne    20f1af <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xecf>
  20f19a:	eb 00                	jmp    20f19c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xebc>
  20f19c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f1a1:	e8 4a 12 00 00       	callq  2103f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h91a6893802e9a07cE>
  20f1a6:	88 44 24 34          	mov    %al,0x34(%rsp)
  20f1aa:	e9 bd 00 00 00       	jmpq   20f26c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf8c>
                        if !first {
  20f1af:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f1b3:	34 ff                	xor    $0xff,%al
  20f1b5:	a8 01                	test   $0x1,%al
  20f1b7:	75 21                	jne    20f1da <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xefa>
  20f1b9:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f1be:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f1c3:	48 8d 35 db 1a ff ff 	lea    -0xe525(%rip),%rsi        # 200ca5 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xd0>
  20f1ca:	ba 03 00 00 00       	mov    $0x3,%edx
  20f1cf:	e8 ec dc 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f1d4:	88 44 24 33          	mov    %al,0x33(%rsp)
  20f1d8:	eb 54                	jmp    20f22e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf4e>
  20f1da:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f1df:	48 8d 35 c8 19 ff ff 	lea    -0xe638(%rip),%rsi        # 200bae <str.3+0x16e>
  20f1e6:	ba 03 00 00 00       	mov    $0x3,%edx
  20f1eb:	e8 d0 dc 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f1f0:	88 44 24 32          	mov    %al,0x32(%rsp)
  20f1f4:	8a 44 24 32          	mov    0x32(%rsp),%al
  20f1f8:	0f b6 f8             	movzbl %al,%edi
  20f1fb:	83 e7 01             	and    $0x1,%edi
  20f1fe:	e8 0d 34 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f203:	24 01                	and    $0x1,%al
  20f205:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  20f20c:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  20f213:	00 
  20f214:	a8 01                	test   $0x1,%al
  20f216:	74 a1                	je     20f1b9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xed9>
  20f218:	eb 00                	jmp    20f21a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf3a>
  20f21a:	eb 02                	jmp    20f21e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf3e>
  20f21c:	0f 0b                	ud2    
  20f21e:	e8 ad 2f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f223:	24 01                	and    $0x1,%al
  20f225:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f229:	e9 78 f1 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f22e:	8a 44 24 33          	mov    0x33(%rsp),%al
  20f232:	0f b6 f8             	movzbl %al,%edi
  20f235:	83 e7 01             	and    $0x1,%edi
  20f238:	e8 d3 33 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f23d:	24 01                	and    $0x1,%al
  20f23f:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  20f246:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  20f24d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f24e:	a8 01                	test   $0x1,%al
  20f250:	0f 84 46 ff ff ff    	je     20f19c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xebc>
  20f256:	eb 00                	jmp    20f258 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf78>
  20f258:	eb 02                	jmp    20f25c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf7c>
  20f25a:	0f 0b                	ud2    
  20f25c:	e8 6f 2f 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f261:	24 01                	and    $0x1,%al
  20f263:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f267:	e9 3a f1 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f26c:	8a 44 24 34          	mov    0x34(%rsp),%al
  20f270:	a8 01                	test   $0x1,%al
  20f272:	75 15                	jne    20f289 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xfa9>
  20f274:	eb 00                	jmp    20f276 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf96>
  20f276:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f27b:	e8 c0 11 00 00       	callq  210440 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17h7bd522ef54af3ed8E>
  20f280:	88 44 24 31          	mov    %al,0x31(%rsp)
  20f284:	e9 bd 00 00 00       	jmpq   20f346 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1066>
                        if !first {
  20f289:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f28d:	34 ff                	xor    $0xff,%al
  20f28f:	a8 01                	test   $0x1,%al
  20f291:	75 21                	jne    20f2b4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xfd4>
  20f293:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f298:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f29d:	48 8d 35 04 1a ff ff 	lea    -0xe5fc(%rip),%rsi        # 200ca8 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xd3>
  20f2a4:	ba 03 00 00 00       	mov    $0x3,%edx
  20f2a9:	e8 12 dc 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f2ae:	88 44 24 30          	mov    %al,0x30(%rsp)
  20f2b2:	eb 54                	jmp    20f308 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1028>
  20f2b4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f2b9:	48 8d 35 ee 18 ff ff 	lea    -0xe712(%rip),%rsi        # 200bae <str.3+0x16e>
  20f2c0:	ba 03 00 00 00       	mov    $0x3,%edx
  20f2c5:	e8 f6 db 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f2ca:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20f2ce:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  20f2d2:	0f b6 f8             	movzbl %al,%edi
  20f2d5:	83 e7 01             	and    $0x1,%edi
  20f2d8:	e8 33 33 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f2dd:	24 01                	and    $0x1,%al
  20f2df:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  20f2e6:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  20f2ed:	00 
  20f2ee:	a8 01                	test   $0x1,%al
  20f2f0:	74 a1                	je     20f293 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xfb3>
  20f2f2:	eb 00                	jmp    20f2f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1014>
  20f2f4:	eb 02                	jmp    20f2f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1018>
  20f2f6:	0f 0b                	ud2    
  20f2f8:	e8 d3 2e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f2fd:	24 01                	and    $0x1,%al
  20f2ff:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f303:	e9 9e f0 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f308:	8a 44 24 30          	mov    0x30(%rsp),%al
  20f30c:	0f b6 f8             	movzbl %al,%edi
  20f30f:	83 e7 01             	and    $0x1,%edi
  20f312:	e8 f9 32 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f317:	24 01                	and    $0x1,%al
  20f319:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  20f320:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  20f327:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f328:	a8 01                	test   $0x1,%al
  20f32a:	0f 84 46 ff ff ff    	je     20f276 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xf96>
  20f330:	eb 00                	jmp    20f332 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1052>
  20f332:	eb 02                	jmp    20f336 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1056>
  20f334:	0f 0b                	ud2    
  20f336:	e8 95 2e 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f33b:	24 01                	and    $0x1,%al
  20f33d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f341:	e9 60 f0 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f346:	8a 44 24 31          	mov    0x31(%rsp),%al
  20f34a:	a8 01                	test   $0x1,%al
  20f34c:	75 15                	jne    20f363 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1083>
  20f34e:	eb 00                	jmp    20f350 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1070>
  20f350:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f355:	e8 36 11 00 00       	callq  210490 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17h79e82a88125b1e02E>
  20f35a:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  20f35e:	e9 bd 00 00 00       	jmpq   20f420 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1140>
                        if !first {
  20f363:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f367:	34 ff                	xor    $0xff,%al
  20f369:	a8 01                	test   $0x1,%al
  20f36b:	75 21                	jne    20f38e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x10ae>
  20f36d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f372:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f377:	48 8d 35 5b 18 ff ff 	lea    -0xe7a5(%rip),%rsi        # 200bd9 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4>
  20f37e:	ba 04 00 00 00       	mov    $0x4,%edx
  20f383:	e8 38 db 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f388:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  20f38c:	eb 54                	jmp    20f3e2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1102>
  20f38e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f393:	48 8d 35 14 18 ff ff 	lea    -0xe7ec(%rip),%rsi        # 200bae <str.3+0x16e>
  20f39a:	ba 03 00 00 00       	mov    $0x3,%edx
  20f39f:	e8 1c db 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f3a4:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  20f3a8:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  20f3ac:	0f b6 f8             	movzbl %al,%edi
  20f3af:	83 e7 01             	and    $0x1,%edi
  20f3b2:	e8 59 32 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f3b7:	24 01                	and    $0x1,%al
  20f3b9:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  20f3c0:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  20f3c7:	00 
  20f3c8:	a8 01                	test   $0x1,%al
  20f3ca:	74 a1                	je     20f36d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x108d>
  20f3cc:	eb 00                	jmp    20f3ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x10ee>
  20f3ce:	eb 02                	jmp    20f3d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x10f2>
  20f3d0:	0f 0b                	ud2    
  20f3d2:	e8 f9 2d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f3d7:	24 01                	and    $0x1,%al
  20f3d9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f3dd:	e9 c4 ef ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f3e2:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  20f3e6:	0f b6 f8             	movzbl %al,%edi
  20f3e9:	83 e7 01             	and    $0x1,%edi
  20f3ec:	e8 1f 32 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f3f1:	24 01                	and    $0x1,%al
  20f3f3:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  20f3fa:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  20f401:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f402:	a8 01                	test   $0x1,%al
  20f404:	0f 84 46 ff ff ff    	je     20f350 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1070>
  20f40a:	eb 00                	jmp    20f40c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x112c>
  20f40c:	eb 02                	jmp    20f410 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1130>
  20f40e:	0f 0b                	ud2    
  20f410:	e8 bb 2d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f415:	24 01                	and    $0x1,%al
  20f417:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f41b:	e9 86 ef ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f420:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  20f424:	a8 01                	test   $0x1,%al
  20f426:	75 15                	jne    20f43d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x115d>
  20f428:	eb 00                	jmp    20f42a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x114a>
  20f42a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f42f:	e8 ac 10 00 00       	callq  2104e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17h77372b770a15702aE>
  20f434:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  20f438:	e9 bd 00 00 00       	jmpq   20f4fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x121a>
                        if !first {
  20f43d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f441:	34 ff                	xor    $0xff,%al
  20f443:	a8 01                	test   $0x1,%al
  20f445:	75 21                	jne    20f468 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1188>
  20f447:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f44c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f451:	48 8d 35 65 17 ff ff 	lea    -0xe89b(%rip),%rsi        # 200bbd <str.3+0x17d>
  20f458:	ba 04 00 00 00       	mov    $0x4,%edx
  20f45d:	e8 5e da 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f462:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  20f466:	eb 54                	jmp    20f4bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x11dc>
  20f468:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f46d:	48 8d 35 3a 17 ff ff 	lea    -0xe8c6(%rip),%rsi        # 200bae <str.3+0x16e>
  20f474:	ba 03 00 00 00       	mov    $0x3,%edx
  20f479:	e8 42 da 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f47e:	88 44 24 29          	mov    %al,0x29(%rsp)
  20f482:	8a 44 24 29          	mov    0x29(%rsp),%al
  20f486:	0f b6 f8             	movzbl %al,%edi
  20f489:	83 e7 01             	and    $0x1,%edi
  20f48c:	e8 7f 31 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f491:	24 01                	and    $0x1,%al
  20f493:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  20f49a:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  20f4a1:	00 
  20f4a2:	a8 01                	test   $0x1,%al
  20f4a4:	74 a1                	je     20f447 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1167>
  20f4a6:	eb 00                	jmp    20f4a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x11c8>
  20f4a8:	eb 02                	jmp    20f4ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x11cc>
  20f4aa:	0f 0b                	ud2    
  20f4ac:	e8 1f 2d 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f4b1:	24 01                	and    $0x1,%al
  20f4b3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f4b7:	e9 ea ee ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f4bc:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  20f4c0:	0f b6 f8             	movzbl %al,%edi
  20f4c3:	83 e7 01             	and    $0x1,%edi
  20f4c6:	e8 45 31 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f4cb:	24 01                	and    $0x1,%al
  20f4cd:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  20f4d4:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  20f4db:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f4dc:	a8 01                	test   $0x1,%al
  20f4de:	0f 84 46 ff ff ff    	je     20f42a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x114a>
  20f4e4:	eb 00                	jmp    20f4e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1206>
  20f4e6:	eb 02                	jmp    20f4ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x120a>
  20f4e8:	0f 0b                	ud2    
  20f4ea:	e8 e1 2c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f4ef:	24 01                	and    $0x1,%al
  20f4f1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f4f5:	e9 ac ee ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f4fa:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  20f4fe:	a8 01                	test   $0x1,%al
  20f500:	75 15                	jne    20f517 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1237>
  20f502:	eb 00                	jmp    20f504 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1224>
  20f504:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f509:	e8 22 10 00 00       	callq  210530 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17h2276264ffb6623e5E>
  20f50e:	88 44 24 28          	mov    %al,0x28(%rsp)
  20f512:	e9 bd 00 00 00       	jmpq   20f5d4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12f4>
                        if !first {
  20f517:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f51b:	34 ff                	xor    $0xff,%al
  20f51d:	a8 01                	test   $0x1,%al
  20f51f:	75 21                	jne    20f542 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1262>
  20f521:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f526:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f52b:	48 8d 35 79 17 ff ff 	lea    -0xe887(%rip),%rsi        # 200cab <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xd6>
  20f532:	ba 03 00 00 00       	mov    $0x3,%edx
  20f537:	e8 84 d9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f53c:	88 44 24 27          	mov    %al,0x27(%rsp)
  20f540:	eb 54                	jmp    20f596 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12b6>
  20f542:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f547:	48 8d 35 60 16 ff ff 	lea    -0xe9a0(%rip),%rsi        # 200bae <str.3+0x16e>
  20f54e:	ba 03 00 00 00       	mov    $0x3,%edx
  20f553:	e8 68 d9 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f558:	88 44 24 26          	mov    %al,0x26(%rsp)
  20f55c:	8a 44 24 26          	mov    0x26(%rsp),%al
  20f560:	0f b6 f8             	movzbl %al,%edi
  20f563:	83 e7 01             	and    $0x1,%edi
  20f566:	e8 a5 30 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f56b:	24 01                	and    $0x1,%al
  20f56d:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  20f574:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  20f57b:	00 
  20f57c:	a8 01                	test   $0x1,%al
  20f57e:	74 a1                	je     20f521 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1241>
  20f580:	eb 00                	jmp    20f582 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12a2>
  20f582:	eb 02                	jmp    20f586 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12a6>
  20f584:	0f 0b                	ud2    
  20f586:	e8 45 2c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f58b:	24 01                	and    $0x1,%al
  20f58d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f591:	e9 10 ee ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f596:	8a 44 24 27          	mov    0x27(%rsp),%al
  20f59a:	0f b6 f8             	movzbl %al,%edi
  20f59d:	83 e7 01             	and    $0x1,%edi
  20f5a0:	e8 6b 30 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f5a5:	24 01                	and    $0x1,%al
  20f5a7:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  20f5ae:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  20f5b5:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f5b6:	a8 01                	test   $0x1,%al
  20f5b8:	0f 84 46 ff ff ff    	je     20f504 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1224>
  20f5be:	eb 00                	jmp    20f5c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12e0>
  20f5c0:	eb 02                	jmp    20f5c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12e4>
  20f5c2:	0f 0b                	ud2    
  20f5c4:	e8 07 2c 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f5c9:	24 01                	and    $0x1,%al
  20f5cb:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f5cf:	e9 d2 ed ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f5d4:	8a 44 24 28          	mov    0x28(%rsp),%al
  20f5d8:	a8 01                	test   $0x1,%al
  20f5da:	75 15                	jne    20f5f1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1311>
  20f5dc:	eb 00                	jmp    20f5de <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12fe>
  20f5de:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f5e3:	e8 98 0f 00 00       	callq  210580 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h56cb16ab6848739dE>
  20f5e8:	88 44 24 25          	mov    %al,0x25(%rsp)
  20f5ec:	e9 bd 00 00 00       	jmpq   20f6ae <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13ce>
                        if !first {
  20f5f1:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f5f5:	34 ff                	xor    $0xff,%al
  20f5f7:	a8 01                	test   $0x1,%al
  20f5f9:	75 21                	jne    20f61c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x133c>
  20f5fb:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f600:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f605:	48 8d 35 dd 15 ff ff 	lea    -0xea23(%rip),%rsi        # 200be9 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x14>
  20f60c:	ba 04 00 00 00       	mov    $0x4,%edx
  20f611:	e8 aa d8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f616:	88 44 24 24          	mov    %al,0x24(%rsp)
  20f61a:	eb 54                	jmp    20f670 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1390>
  20f61c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f621:	48 8d 35 86 15 ff ff 	lea    -0xea7a(%rip),%rsi        # 200bae <str.3+0x16e>
  20f628:	ba 03 00 00 00       	mov    $0x3,%edx
  20f62d:	e8 8e d8 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f632:	88 44 24 23          	mov    %al,0x23(%rsp)
  20f636:	8a 44 24 23          	mov    0x23(%rsp),%al
  20f63a:	0f b6 f8             	movzbl %al,%edi
  20f63d:	83 e7 01             	and    $0x1,%edi
  20f640:	e8 cb 2f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f645:	24 01                	and    $0x1,%al
  20f647:	88 84 24 ac 00 00 00 	mov    %al,0xac(%rsp)
  20f64e:	0f b6 84 24 ac 00 00 	movzbl 0xac(%rsp),%eax
  20f655:	00 
  20f656:	a8 01                	test   $0x1,%al
  20f658:	74 a1                	je     20f5fb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x131b>
  20f65a:	eb 00                	jmp    20f65c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x137c>
  20f65c:	eb 02                	jmp    20f660 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1380>
  20f65e:	0f 0b                	ud2    
  20f660:	e8 6b 2b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f665:	24 01                	and    $0x1,%al
  20f667:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f66b:	e9 36 ed ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f670:	8a 44 24 24          	mov    0x24(%rsp),%al
  20f674:	0f b6 f8             	movzbl %al,%edi
  20f677:	83 e7 01             	and    $0x1,%edi
  20f67a:	e8 91 2f 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f67f:	24 01                	and    $0x1,%al
  20f681:	88 84 24 ad 00 00 00 	mov    %al,0xad(%rsp)
  20f688:	0f b6 84 24 ad 00 00 	movzbl 0xad(%rsp),%eax
  20f68f:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f690:	a8 01                	test   $0x1,%al
  20f692:	0f 84 46 ff ff ff    	je     20f5de <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x12fe>
  20f698:	eb 00                	jmp    20f69a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13ba>
  20f69a:	eb 02                	jmp    20f69e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13be>
  20f69c:	0f 0b                	ud2    
  20f69e:	e8 2d 2b 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f6a3:	24 01                	and    $0x1,%al
  20f6a5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f6a9:	e9 f8 ec ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f6ae:	8a 44 24 25          	mov    0x25(%rsp),%al
  20f6b2:	a8 01                	test   $0x1,%al
  20f6b4:	75 15                	jne    20f6cb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13eb>
  20f6b6:	eb 00                	jmp    20f6b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13d8>
  20f6b8:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f6bd:	e8 0e 0f 00 00       	callq  2105d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h0d245b0177a80c85E>
  20f6c2:	88 44 24 22          	mov    %al,0x22(%rsp)
  20f6c6:	e9 bd 00 00 00       	jmpq   20f788 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14a8>
                        if !first {
  20f6cb:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f6cf:	34 ff                	xor    $0xff,%al
  20f6d1:	a8 01                	test   $0x1,%al
  20f6d3:	75 21                	jne    20f6f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1416>
  20f6d5:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f6da:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f6df:	48 8d 35 c8 15 ff ff 	lea    -0xea38(%rip),%rsi        # 200cae <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xd9>
  20f6e6:	ba 03 00 00 00       	mov    $0x3,%edx
  20f6eb:	e8 d0 d7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f6f0:	88 44 24 21          	mov    %al,0x21(%rsp)
  20f6f4:	eb 54                	jmp    20f74a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x146a>
  20f6f6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f6fb:	48 8d 35 ac 14 ff ff 	lea    -0xeb54(%rip),%rsi        # 200bae <str.3+0x16e>
  20f702:	ba 03 00 00 00       	mov    $0x3,%edx
  20f707:	e8 b4 d7 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f70c:	88 44 24 20          	mov    %al,0x20(%rsp)
  20f710:	8a 44 24 20          	mov    0x20(%rsp),%al
  20f714:	0f b6 f8             	movzbl %al,%edi
  20f717:	83 e7 01             	and    $0x1,%edi
  20f71a:	e8 f1 2e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f71f:	24 01                	and    $0x1,%al
  20f721:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  20f728:	0f b6 84 24 ae 00 00 	movzbl 0xae(%rsp),%eax
  20f72f:	00 
  20f730:	a8 01                	test   $0x1,%al
  20f732:	74 a1                	je     20f6d5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13f5>
  20f734:	eb 00                	jmp    20f736 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1456>
  20f736:	eb 02                	jmp    20f73a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x145a>
  20f738:	0f 0b                	ud2    
  20f73a:	e8 91 2a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f73f:	24 01                	and    $0x1,%al
  20f741:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f745:	e9 5c ec ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f74a:	8a 44 24 21          	mov    0x21(%rsp),%al
  20f74e:	0f b6 f8             	movzbl %al,%edi
  20f751:	83 e7 01             	and    $0x1,%edi
  20f754:	e8 b7 2e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f759:	24 01                	and    $0x1,%al
  20f75b:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  20f762:	0f b6 84 24 af 00 00 	movzbl 0xaf(%rsp),%eax
  20f769:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f76a:	a8 01                	test   $0x1,%al
  20f76c:	0f 84 46 ff ff ff    	je     20f6b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x13d8>
  20f772:	eb 00                	jmp    20f774 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1494>
  20f774:	eb 02                	jmp    20f778 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1498>
  20f776:	0f 0b                	ud2    
  20f778:	e8 53 2a 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f77d:	24 01                	and    $0x1,%al
  20f77f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f783:	e9 1e ec ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f788:	8a 44 24 22          	mov    0x22(%rsp),%al
  20f78c:	a8 01                	test   $0x1,%al
  20f78e:	75 15                	jne    20f7a5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14c5>
  20f790:	eb 00                	jmp    20f792 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14b2>
  20f792:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f797:	e8 84 0e 00 00       	callq  210620 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17h3297ce638405691eE>
  20f79c:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20f7a0:	e9 bd 00 00 00       	jmpq   20f862 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1582>
                        if !first {
  20f7a5:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f7a9:	34 ff                	xor    $0xff,%al
  20f7ab:	a8 01                	test   $0x1,%al
  20f7ad:	75 21                	jne    20f7d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14f0>
  20f7af:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f7b4:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f7b9:	48 8d 35 01 14 ff ff 	lea    -0xebff(%rip),%rsi        # 200bc1 <str.3+0x181>
  20f7c0:	ba 04 00 00 00       	mov    $0x4,%edx
  20f7c5:	e8 f6 d6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f7ca:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20f7ce:	eb 54                	jmp    20f824 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1544>
  20f7d0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f7d5:	48 8d 35 d2 13 ff ff 	lea    -0xec2e(%rip),%rsi        # 200bae <str.3+0x16e>
  20f7dc:	ba 03 00 00 00       	mov    $0x3,%edx
  20f7e1:	e8 da d6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f7e6:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  20f7ea:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  20f7ee:	0f b6 f8             	movzbl %al,%edi
  20f7f1:	83 e7 01             	and    $0x1,%edi
  20f7f4:	e8 17 2e 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f7f9:	24 01                	and    $0x1,%al
  20f7fb:	88 84 24 b0 00 00 00 	mov    %al,0xb0(%rsp)
  20f802:	0f b6 84 24 b0 00 00 	movzbl 0xb0(%rsp),%eax
  20f809:	00 
  20f80a:	a8 01                	test   $0x1,%al
  20f80c:	74 a1                	je     20f7af <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14cf>
  20f80e:	eb 00                	jmp    20f810 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1530>
  20f810:	eb 02                	jmp    20f814 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1534>
  20f812:	0f 0b                	ud2    
  20f814:	e8 b7 29 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f819:	24 01                	and    $0x1,%al
  20f81b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f81f:	e9 82 eb ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f824:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20f828:	0f b6 f8             	movzbl %al,%edi
  20f82b:	83 e7 01             	and    $0x1,%edi
  20f82e:	e8 dd 2d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f833:	24 01                	and    $0x1,%al
  20f835:	88 84 24 b1 00 00 00 	mov    %al,0xb1(%rsp)
  20f83c:	0f b6 84 24 b1 00 00 	movzbl 0xb1(%rsp),%eax
  20f843:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f844:	a8 01                	test   $0x1,%al
  20f846:	0f 84 46 ff ff ff    	je     20f792 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x14b2>
  20f84c:	eb 00                	jmp    20f84e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x156e>
  20f84e:	eb 02                	jmp    20f852 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1572>
  20f850:	0f 0b                	ud2    
  20f852:	e8 79 29 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f857:	24 01                	and    $0x1,%al
  20f859:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f85d:	e9 44 eb ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f862:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20f866:	a8 01                	test   $0x1,%al
  20f868:	75 15                	jne    20f87f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x159f>
  20f86a:	eb 00                	jmp    20f86c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x158c>
  20f86c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f871:	e8 fa 0d 00 00       	callq  210670 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h43f74dae3f79d1c5E>
  20f876:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  20f87a:	e9 bd 00 00 00       	jmpq   20f93c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x165c>
                        if !first {
  20f87f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f883:	34 ff                	xor    $0xff,%al
  20f885:	a8 01                	test   $0x1,%al
  20f887:	75 21                	jne    20f8aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x15ca>
  20f889:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f88e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f893:	48 8d 35 17 14 ff ff 	lea    -0xebe9(%rip),%rsi        # 200cb1 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xdc>
  20f89a:	ba 02 00 00 00       	mov    $0x2,%edx
  20f89f:	e8 1c d6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f8a4:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  20f8a8:	eb 54                	jmp    20f8fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x161e>
  20f8aa:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f8af:	48 8d 35 f8 12 ff ff 	lea    -0xed08(%rip),%rsi        # 200bae <str.3+0x16e>
  20f8b6:	ba 03 00 00 00       	mov    $0x3,%edx
  20f8bb:	e8 00 d6 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f8c0:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  20f8c4:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  20f8c8:	0f b6 f8             	movzbl %al,%edi
  20f8cb:	83 e7 01             	and    $0x1,%edi
  20f8ce:	e8 3d 2d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f8d3:	24 01                	and    $0x1,%al
  20f8d5:	88 84 24 b2 00 00 00 	mov    %al,0xb2(%rsp)
  20f8dc:	0f b6 84 24 b2 00 00 	movzbl 0xb2(%rsp),%eax
  20f8e3:	00 
  20f8e4:	a8 01                	test   $0x1,%al
  20f8e6:	74 a1                	je     20f889 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x15a9>
  20f8e8:	eb 00                	jmp    20f8ea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x160a>
  20f8ea:	eb 02                	jmp    20f8ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x160e>
  20f8ec:	0f 0b                	ud2    
  20f8ee:	e8 dd 28 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f8f3:	24 01                	and    $0x1,%al
  20f8f5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f8f9:	e9 a8 ea ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f8fe:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  20f902:	0f b6 f8             	movzbl %al,%edi
  20f905:	83 e7 01             	and    $0x1,%edi
  20f908:	e8 03 2d 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f90d:	24 01                	and    $0x1,%al
  20f90f:	88 84 24 b3 00 00 00 	mov    %al,0xb3(%rsp)
  20f916:	0f b6 84 24 b3 00 00 	movzbl 0xb3(%rsp),%eax
  20f91d:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f91e:	a8 01                	test   $0x1,%al
  20f920:	0f 84 46 ff ff ff    	je     20f86c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x158c>
  20f926:	eb 00                	jmp    20f928 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1648>
  20f928:	eb 02                	jmp    20f92c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x164c>
  20f92a:	0f 0b                	ud2    
  20f92c:	e8 9f 28 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f931:	24 01                	and    $0x1,%al
  20f933:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f937:	e9 6a ea ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f93c:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  20f940:	a8 01                	test   $0x1,%al
  20f942:	75 15                	jne    20f959 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1679>
  20f944:	eb 00                	jmp    20f946 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1666>
  20f946:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20f94b:	e8 70 0d 00 00       	callq  2106c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h5f0d46cfe8f5a425E>
  20f950:	88 44 24 19          	mov    %al,0x19(%rsp)
  20f954:	e9 bd 00 00 00       	jmpq   20fa16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1736>
                        if !first {
  20f959:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20f95d:	34 ff                	xor    $0xff,%al
  20f95f:	a8 01                	test   $0x1,%al
  20f961:	75 21                	jne    20f984 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x16a4>
  20f963:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20f968:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f96d:	48 8d 35 3f 13 ff ff 	lea    -0xecc1(%rip),%rsi        # 200cb3 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xde>
  20f974:	ba 03 00 00 00       	mov    $0x3,%edx
  20f979:	e8 42 d5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f97e:	88 44 24 18          	mov    %al,0x18(%rsp)
  20f982:	eb 54                	jmp    20f9d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x16f8>
  20f984:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20f989:	48 8d 35 1e 12 ff ff 	lea    -0xede2(%rip),%rsi        # 200bae <str.3+0x16e>
  20f990:	ba 03 00 00 00       	mov    $0x3,%edx
  20f995:	e8 26 d5 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20f99a:	88 44 24 17          	mov    %al,0x17(%rsp)
  20f99e:	8a 44 24 17          	mov    0x17(%rsp),%al
  20f9a2:	0f b6 f8             	movzbl %al,%edi
  20f9a5:	83 e7 01             	and    $0x1,%edi
  20f9a8:	e8 63 2c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f9ad:	24 01                	and    $0x1,%al
  20f9af:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  20f9b6:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  20f9bd:	00 
  20f9be:	a8 01                	test   $0x1,%al
  20f9c0:	74 a1                	je     20f963 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1683>
  20f9c2:	eb 00                	jmp    20f9c4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x16e4>
  20f9c4:	eb 02                	jmp    20f9c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x16e8>
  20f9c6:	0f 0b                	ud2    
  20f9c8:	e8 03 28 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20f9cd:	24 01                	and    $0x1,%al
  20f9cf:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20f9d3:	e9 ce e9 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20f9d8:	8a 44 24 18          	mov    0x18(%rsp),%al
  20f9dc:	0f b6 f8             	movzbl %al,%edi
  20f9df:	83 e7 01             	and    $0x1,%edi
  20f9e2:	e8 29 2c 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20f9e7:	24 01                	and    $0x1,%al
  20f9e9:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  20f9f0:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  20f9f7:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20f9f8:	a8 01                	test   $0x1,%al
  20f9fa:	0f 84 46 ff ff ff    	je     20f946 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1666>
  20fa00:	eb 00                	jmp    20fa02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1722>
  20fa02:	eb 02                	jmp    20fa06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1726>
  20fa04:	0f 0b                	ud2    
  20fa06:	e8 c5 27 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fa0b:	24 01                	and    $0x1,%al
  20fa0d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fa11:	e9 90 e9 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fa16:	8a 44 24 19          	mov    0x19(%rsp),%al
  20fa1a:	a8 01                	test   $0x1,%al
  20fa1c:	75 15                	jne    20fa33 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1753>
  20fa1e:	eb 00                	jmp    20fa20 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1740>
  20fa20:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20fa25:	e8 e6 0c 00 00       	callq  210710 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h5767ccead5970f2dE>
  20fa2a:	88 44 24 16          	mov    %al,0x16(%rsp)
  20fa2e:	e9 bd 00 00 00       	jmpq   20faf0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1810>
                        if !first {
  20fa33:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20fa37:	34 ff                	xor    $0xff,%al
  20fa39:	a8 01                	test   $0x1,%al
  20fa3b:	75 21                	jne    20fa5e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x177e>
  20fa3d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20fa42:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fa47:	48 8d 35 68 12 ff ff 	lea    -0xed98(%rip),%rsi        # 200cb6 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xe1>
  20fa4e:	ba 03 00 00 00       	mov    $0x3,%edx
  20fa53:	e8 68 d4 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fa58:	88 44 24 15          	mov    %al,0x15(%rsp)
  20fa5c:	eb 54                	jmp    20fab2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x17d2>
  20fa5e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20fa63:	48 8d 35 44 11 ff ff 	lea    -0xeebc(%rip),%rsi        # 200bae <str.3+0x16e>
  20fa6a:	ba 03 00 00 00       	mov    $0x3,%edx
  20fa6f:	e8 4c d4 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fa74:	88 44 24 14          	mov    %al,0x14(%rsp)
  20fa78:	8a 44 24 14          	mov    0x14(%rsp),%al
  20fa7c:	0f b6 f8             	movzbl %al,%edi
  20fa7f:	83 e7 01             	and    $0x1,%edi
  20fa82:	e8 89 2b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fa87:	24 01                	and    $0x1,%al
  20fa89:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  20fa90:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  20fa97:	00 
  20fa98:	a8 01                	test   $0x1,%al
  20fa9a:	74 a1                	je     20fa3d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x175d>
  20fa9c:	eb 00                	jmp    20fa9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x17be>
  20fa9e:	eb 02                	jmp    20faa2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x17c2>
  20faa0:	0f 0b                	ud2    
  20faa2:	e8 29 27 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20faa7:	24 01                	and    $0x1,%al
  20faa9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20faad:	e9 f4 e8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fab2:	8a 44 24 15          	mov    0x15(%rsp),%al
  20fab6:	0f b6 f8             	movzbl %al,%edi
  20fab9:	83 e7 01             	and    $0x1,%edi
  20fabc:	e8 4f 2b 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fac1:	24 01                	and    $0x1,%al
  20fac3:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  20faca:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  20fad1:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fad2:	a8 01                	test   $0x1,%al
  20fad4:	0f 84 46 ff ff ff    	je     20fa20 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1740>
  20fada:	eb 00                	jmp    20fadc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x17fc>
  20fadc:	eb 02                	jmp    20fae0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1800>
  20fade:	0f 0b                	ud2    
  20fae0:	e8 eb 26 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fae5:	24 01                	and    $0x1,%al
  20fae7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20faeb:	e9 b6 e8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20faf0:	8a 44 24 16          	mov    0x16(%rsp),%al
  20faf4:	a8 01                	test   $0x1,%al
  20faf6:	75 15                	jne    20fb0d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x182d>
  20faf8:	eb 00                	jmp    20fafa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x181a>
  20fafa:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
                    if <Self as __BitFlags>::$Flag(self) {
  20faff:	e8 5c 0c 00 00       	callq  210760 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17h9071124c16ba07b4E>
  20fb04:	88 44 24 13          	mov    %al,0x13(%rsp)
  20fb08:	e9 bd 00 00 00       	jmpq   20fbca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18ea>
                        if !first {
  20fb0d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20fb11:	34 ff                	xor    $0xff,%al
  20fb13:	a8 01                	test   $0x1,%al
  20fb15:	75 21                	jne    20fb38 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1858>
  20fb17:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20fb1c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fb21:	48 8d 35 bd 10 ff ff 	lea    -0xef43(%rip),%rsi        # 200be5 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x10>
  20fb28:	ba 04 00 00 00       	mov    $0x4,%edx
  20fb2d:	e8 8e d3 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fb32:	88 44 24 12          	mov    %al,0x12(%rsp)
  20fb36:	eb 54                	jmp    20fb8c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18ac>
  20fb38:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20fb3d:	48 8d 35 6a 10 ff ff 	lea    -0xef96(%rip),%rsi        # 200bae <str.3+0x16e>
  20fb44:	ba 03 00 00 00       	mov    $0x3,%edx
  20fb49:	e8 72 d3 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fb4e:	88 44 24 11          	mov    %al,0x11(%rsp)
  20fb52:	8a 44 24 11          	mov    0x11(%rsp),%al
  20fb56:	0f b6 f8             	movzbl %al,%edi
  20fb59:	83 e7 01             	and    $0x1,%edi
  20fb5c:	e8 af 2a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fb61:	24 01                	and    $0x1,%al
  20fb63:	88 84 24 b8 00 00 00 	mov    %al,0xb8(%rsp)
  20fb6a:	0f b6 84 24 b8 00 00 	movzbl 0xb8(%rsp),%eax
  20fb71:	00 
  20fb72:	a8 01                	test   $0x1,%al
  20fb74:	74 a1                	je     20fb17 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1837>
  20fb76:	eb 00                	jmp    20fb78 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1898>
  20fb78:	eb 02                	jmp    20fb7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x189c>
  20fb7a:	0f 0b                	ud2    
  20fb7c:	e8 4f 26 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fb81:	24 01                	and    $0x1,%al
  20fb83:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fb87:	e9 1a e8 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fb8c:	8a 44 24 12          	mov    0x12(%rsp),%al
  20fb90:	0f b6 f8             	movzbl %al,%edi
  20fb93:	83 e7 01             	and    $0x1,%edi
  20fb96:	e8 75 2a 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fb9b:	24 01                	and    $0x1,%al
  20fb9d:	88 84 24 b9 00 00 00 	mov    %al,0xb9(%rsp)
  20fba4:	0f b6 84 24 b9 00 00 	movzbl 0xb9(%rsp),%eax
  20fbab:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fbac:	a8 01                	test   $0x1,%al
  20fbae:	0f 84 46 ff ff ff    	je     20fafa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x181a>
  20fbb4:	eb 00                	jmp    20fbb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18d6>
  20fbb6:	eb 02                	jmp    20fbba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18da>
  20fbb8:	0f 0b                	ud2    
  20fbba:	e8 11 26 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fbbf:	24 01                	and    $0x1,%al
  20fbc1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fbc5:	e9 dc e7 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fbca:	8a 44 24 13          	mov    0x13(%rsp),%al
  20fbce:	a8 01                	test   $0x1,%al
  20fbd0:	75 1e                	jne    20fbf0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1910>
  20fbd2:	eb 00                	jmp    20fbd4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18f4>
  20fbd4:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  20fbd9:	8b 00                	mov    (%rax),%eax
  20fbdb:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  20fbdf:	e8 7c 02 00 00       	callq  20fe60 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17h2d7373420460fb09E>
  20fbe4:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
  20fbeb:	e9 bd 00 00 00       	jmpq   20fcad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19cd>
                        if !first {
  20fbf0:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20fbf4:	34 ff                	xor    $0xff,%al
  20fbf6:	a8 01                	test   $0x1,%al
  20fbf8:	75 21                	jne    20fc1b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x193b>
  20fbfa:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  20fbff:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fc04:	48 8d 35 ae 10 ff ff 	lea    -0xef52(%rip),%rsi        # 200cb9 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xe4>
  20fc0b:	ba 03 00 00 00       	mov    $0x3,%edx
  20fc10:	e8 ab d2 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fc15:	88 44 24 0b          	mov    %al,0xb(%rsp)
  20fc19:	eb 54                	jmp    20fc6f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x198f>
  20fc1b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  20fc20:	48 8d 35 87 0f ff ff 	lea    -0xf079(%rip),%rsi        # 200bae <str.3+0x16e>
  20fc27:	ba 03 00 00 00       	mov    $0x3,%edx
  20fc2c:	e8 8f d2 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fc31:	88 44 24 0a          	mov    %al,0xa(%rsp)
  20fc35:	8a 44 24 0a          	mov    0xa(%rsp),%al
  20fc39:	0f b6 f8             	movzbl %al,%edi
  20fc3c:	83 e7 01             	and    $0x1,%edi
  20fc3f:	e8 cc 29 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fc44:	24 01                	and    $0x1,%al
  20fc46:	88 84 24 ba 00 00 00 	mov    %al,0xba(%rsp)
  20fc4d:	0f b6 84 24 ba 00 00 	movzbl 0xba(%rsp),%eax
  20fc54:	00 
  20fc55:	a8 01                	test   $0x1,%al
  20fc57:	74 a1                	je     20fbfa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x191a>
  20fc59:	eb 00                	jmp    20fc5b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x197b>
  20fc5b:	eb 02                	jmp    20fc5f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x197f>
  20fc5d:	0f 0b                	ud2    
  20fc5f:	e8 6c 25 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fc64:	24 01                	and    $0x1,%al
  20fc66:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fc6a:	e9 37 e7 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fc6f:	8a 44 24 0b          	mov    0xb(%rsp),%al
  20fc73:	0f b6 f8             	movzbl %al,%edi
  20fc76:	83 e7 01             	and    $0x1,%edi
  20fc79:	e8 92 29 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fc7e:	24 01                	and    $0x1,%al
  20fc80:	88 84 24 bb 00 00 00 	mov    %al,0xbb(%rsp)
  20fc87:	0f b6 84 24 bb 00 00 	movzbl 0xbb(%rsp),%eax
  20fc8e:	00 
                        f.write_str($crate::_core::stringify!($Flag))?;
  20fc8f:	a8 01                	test   $0x1,%al
  20fc91:	0f 84 3d ff ff ff    	je     20fbd4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x18f4>
  20fc97:	eb 00                	jmp    20fc99 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19b9>
  20fc99:	eb 02                	jmp    20fc9d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19bd>
  20fc9b:	0f 0b                	ud2    
  20fc9d:	e8 2e 25 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fca2:	24 01                	and    $0x1,%al
  20fca4:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fca8:	e9 f9 e6 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
                let extra_bits = self.bits & !Self::all().bits();
  20fcad:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20fcb4:	00 
  20fcb5:	e8 c6 01 00 00       	callq  20fe80 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h8d79771777e507a3E>
  20fcba:	89 44 24 04          	mov    %eax,0x4(%rsp)
  20fcbe:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  20fcc2:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  20fcc6:	83 f1 ff             	xor    $0xffffffff,%ecx
  20fcc9:	21 c8                	and    %ecx,%eax
  20fccb:	89 84 24 bc 00 00 00 	mov    %eax,0xbc(%rsp)
  20fcd2:	83 bc 24 bc 00 00 00 	cmpl   $0x0,0xbc(%rsp)
  20fcd9:	00 
  20fcda:	75 10                	jne    20fcec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a0c>
  20fcdc:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  20fce1:	0f 85 1e 01 00 00    	jne    20fe05 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b25>
  20fce7:	e9 0f 01 00 00       	jmpq   20fdfb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b1b>
                    if !first {
  20fcec:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  20fcf0:	34 ff                	xor    $0xff,%al
  20fcf2:	a8 01                	test   $0x1,%al
  20fcf4:	75 21                	jne    20fd17 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a37>
  20fcf6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    first = false;
  20fcfb:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                    f.write_str("0x")?;
  20fd00:	48 8d 35 6a 0f ff ff 	lea    -0xf096(%rip),%rsi        # 200c71 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x9c>
  20fd07:	ba 02 00 00 00       	mov    $0x2,%edx
  20fd0c:	e8 af d1 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fd11:	88 44 24 03          	mov    %al,0x3(%rsp)
  20fd15:	eb 54                	jmp    20fd6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a8b>
  20fd17:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        f.write_str(" | ")?;
  20fd1c:	48 8d 35 8b 0e ff ff 	lea    -0xf175(%rip),%rsi        # 200bae <str.3+0x16e>
  20fd23:	ba 03 00 00 00       	mov    $0x3,%edx
  20fd28:	e8 93 d1 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fd2d:	88 44 24 02          	mov    %al,0x2(%rsp)
  20fd31:	8a 44 24 02          	mov    0x2(%rsp),%al
  20fd35:	0f b6 f8             	movzbl %al,%edi
  20fd38:	83 e7 01             	and    $0x1,%edi
  20fd3b:	e8 d0 28 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fd40:	24 01                	and    $0x1,%al
  20fd42:	88 84 24 c4 00 00 00 	mov    %al,0xc4(%rsp)
  20fd49:	0f b6 84 24 c4 00 00 	movzbl 0xc4(%rsp),%eax
  20fd50:	00 
  20fd51:	a8 01                	test   $0x1,%al
  20fd53:	74 a1                	je     20fcf6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a16>
  20fd55:	eb 00                	jmp    20fd57 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a77>
  20fd57:	eb 02                	jmp    20fd5b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1a7b>
  20fd59:	0f 0b                	ud2    
  20fd5b:	e8 70 24 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fd60:	24 01                	and    $0x1,%al
  20fd62:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fd66:	e9 3b e6 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fd6b:	8a 44 24 03          	mov    0x3(%rsp),%al
  20fd6f:	0f b6 f8             	movzbl %al,%edi
  20fd72:	83 e7 01             	and    $0x1,%edi
  20fd75:	e8 96 28 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fd7a:	24 01                	and    $0x1,%al
  20fd7c:	88 84 24 c5 00 00 00 	mov    %al,0xc5(%rsp)
  20fd83:	0f b6 84 24 c5 00 00 	movzbl 0xc5(%rsp),%eax
  20fd8a:	00 
                    f.write_str("0x")?;
  20fd8b:	a8 01                	test   $0x1,%al
  20fd8d:	74 06                	je     20fd95 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1ab5>
  20fd8f:	eb 00                	jmp    20fd91 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1ab1>
  20fd91:	eb 1a                	jmp    20fdad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1acd>
  20fd93:	0f 0b                	ud2    
  20fd95:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  20fd9a:	48 8d bc 24 bc 00 00 	lea    0xbc(%rsp),%rdi
  20fda1:	00 
  20fda2:	e8 c9 a5 00 00       	callq  21a370 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  20fda7:	88 44 24 01          	mov    %al,0x1(%rsp)
  20fdab:	eb 10                	jmp    20fdbd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1add>
  20fdad:	e8 1e 24 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fdb2:	24 01                	and    $0x1,%al
  20fdb4:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fdb8:	e9 e9 e5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fdbd:	8a 44 24 01          	mov    0x1(%rsp),%al
  20fdc1:	0f b6 f8             	movzbl %al,%edi
  20fdc4:	83 e7 01             	and    $0x1,%edi
  20fdc7:	e8 44 28 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fdcc:	24 01                	and    $0x1,%al
  20fdce:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  20fdd5:	0f b6 84 24 c6 00 00 	movzbl 0xc6(%rsp),%eax
  20fddc:	00 
  20fddd:	a8 01                	test   $0x1,%al
  20fddf:	0f 84 f7 fe ff ff    	je     20fcdc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x19fc>
  20fde5:	eb 00                	jmp    20fde7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b07>
  20fde7:	eb 02                	jmp    20fdeb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b0b>
  20fde9:	0f 0b                	ud2    
  20fdeb:	e8 e0 23 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fdf0:	24 01                	and    $0x1,%al
  20fdf2:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fdf6:	e9 ab e5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
                Ok(())
  20fdfb:	c6 44 24 7e 00       	movb   $0x0,0x7e(%rsp)
            }
  20fe00:	e9 a1 e5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fe05:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    f.write_str("(empty)")?;
  20fe0a:	48 8d 35 62 0e ff ff 	lea    -0xf19e(%rip),%rsi        # 200c73 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x9e>
  20fe11:	ba 07 00 00 00       	mov    $0x7,%edx
  20fe16:	e8 a5 d0 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20fe1b:	88 04 24             	mov    %al,(%rsp)
  20fe1e:	8a 04 24             	mov    (%rsp),%al
  20fe21:	0f b6 f8             	movzbl %al,%edi
  20fe24:	83 e7 01             	and    $0x1,%edi
  20fe27:	e8 e4 27 00 00       	callq  212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>
  20fe2c:	24 01                	and    $0x1,%al
  20fe2e:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  20fe35:	0f b6 84 24 c7 00 00 	movzbl 0xc7(%rsp),%eax
  20fe3c:	00 
  20fe3d:	a8 01                	test   $0x1,%al
  20fe3f:	74 ba                	je     20fdfb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b1b>
  20fe41:	eb 00                	jmp    20fe43 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b63>
  20fe43:	eb 02                	jmp    20fe47 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0x1b67>
  20fe45:	0f 0b                	ud2    
  20fe47:	e8 84 23 00 00       	callq  2121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>
  20fe4c:	24 01                	and    $0x1,%al
  20fe4e:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  20fe52:	e9 4f e5 ff ff       	jmpq   20e3a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h988eab7f9e0440f0E+0xc6>
  20fe57:	cc                   	int3   
  20fe58:	cc                   	int3   
  20fe59:	cc                   	int3   
  20fe5a:	cc                   	int3   
  20fe5b:	cc                   	int3   
  20fe5c:	cc                   	int3   
  20fe5d:	cc                   	int3   
  20fe5e:	cc                   	int3   
  20fe5f:	cc                   	int3   

000000000020fe60 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17h2d7373420460fb09E>:
            pub const fn all() -> Self {
  20fe60:	48 83 ec 04          	sub    $0x4,%rsp
  20fe64:	c7 04 24 ff fb ef ff 	movl   $0xffeffbff,(%rsp)
            }
  20fe6b:	8b 04 24             	mov    (%rsp),%eax
  20fe6e:	48 83 c4 04          	add    $0x4,%rsp
  20fe72:	c3                   	retq   
  20fe73:	cc                   	int3   
  20fe74:	cc                   	int3   
  20fe75:	cc                   	int3   
  20fe76:	cc                   	int3   
  20fe77:	cc                   	int3   
  20fe78:	cc                   	int3   
  20fe79:	cc                   	int3   
  20fe7a:	cc                   	int3   
  20fe7b:	cc                   	int3   
  20fe7c:	cc                   	int3   
  20fe7d:	cc                   	int3   
  20fe7e:	cc                   	int3   
  20fe7f:	cc                   	int3   

000000000020fe80 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h8d79771777e507a3E>:
            pub const fn bits(&self) -> $T {
  20fe80:	50                   	push   %rax
  20fe81:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  20fe85:	8b 07                	mov    (%rdi),%eax
            }
  20fe87:	59                   	pop    %rcx
  20fe88:	c3                   	retq   
  20fe89:	cc                   	int3   
  20fe8a:	cc                   	int3   
  20fe8b:	cc                   	int3   
  20fe8c:	cc                   	int3   
  20fe8d:	cc                   	int3   
  20fe8e:	cc                   	int3   
  20fe8f:	cc                   	int3   

000000000020fe90 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h92757ad116716304E>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  20fe90:	48 83 ec 18          	sub    $0x18,%rsp
  20fe94:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  20fe98:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  20fe9c:	e8 bf ff ff ff       	callq  20fe60 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17h2d7373420460fb09E>
  20fea1:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  20fea5:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  20fea9:	8b 44 24 08          	mov    0x8(%rsp),%eax
  20fead:	21 c8                	and    %ecx,%eax
  20feaf:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  20feb3:	8b 44 24 10          	mov    0x10(%rsp),%eax
  20feb7:	48 83 c4 18          	add    $0x18,%rsp
  20febb:	c3                   	retq   
  20febc:	cc                   	int3   
  20febd:	cc                   	int3   
  20febe:	cc                   	int3   
  20febf:	cc                   	int3   

000000000020fec0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17hc8d2db851bc9dd77E>:
                            fn $Flag(&self) -> bool {
  20fec0:	48 83 ec 18          	sub    $0x18,%rsp
  20fec4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fec8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20fecd:	31 c0                	xor    %eax,%eax
  20fecf:	a8 01                	test   $0x1,%al
  20fed1:	75 17                	jne    20feea <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17hc8d2db851bc9dd77E+0x2a>
  20fed3:	48 8b 04 24          	mov    (%rsp),%rax
  20fed7:	8b 00                	mov    (%rax),%eax
  20fed9:	83 e0 01             	and    $0x1,%eax
  20fedc:	83 f8 01             	cmp    $0x1,%eax
  20fedf:	0f 94 c0             	sete   %al
  20fee2:	24 01                	and    $0x1,%al
  20fee4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20fee8:	eb 05                	jmp    20feef <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17hc8d2db851bc9dd77E+0x2f>
  20feea:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20feef:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20fef3:	24 01                	and    $0x1,%al
  20fef5:	0f b6 c0             	movzbl %al,%eax
  20fef8:	48 83 c4 18          	add    $0x18,%rsp
  20fefc:	c3                   	retq   
  20fefd:	cc                   	int3   
  20fefe:	cc                   	int3   
  20feff:	cc                   	int3   

000000000020ff00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17h289db2efa00d6a12E>:
                            fn $Flag(&self) -> bool {
  20ff00:	48 83 ec 18          	sub    $0x18,%rsp
  20ff04:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ff08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ff0d:	31 c0                	xor    %eax,%eax
  20ff0f:	a8 01                	test   $0x1,%al
  20ff11:	75 17                	jne    20ff2a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17h289db2efa00d6a12E+0x2a>
  20ff13:	48 8b 04 24          	mov    (%rsp),%rax
  20ff17:	8b 00                	mov    (%rax),%eax
  20ff19:	83 e0 02             	and    $0x2,%eax
  20ff1c:	83 f8 02             	cmp    $0x2,%eax
  20ff1f:	0f 94 c0             	sete   %al
  20ff22:	24 01                	and    $0x1,%al
  20ff24:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ff28:	eb 05                	jmp    20ff2f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17h289db2efa00d6a12E+0x2f>
  20ff2a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20ff2f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ff33:	24 01                	and    $0x1,%al
  20ff35:	0f b6 c0             	movzbl %al,%eax
  20ff38:	48 83 c4 18          	add    $0x18,%rsp
  20ff3c:	c3                   	retq   
  20ff3d:	cc                   	int3   
  20ff3e:	cc                   	int3   
  20ff3f:	cc                   	int3   

000000000020ff40 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17h088511729f6a48bcE>:
                            fn $Flag(&self) -> bool {
  20ff40:	48 83 ec 18          	sub    $0x18,%rsp
  20ff44:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ff48:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ff4d:	31 c0                	xor    %eax,%eax
  20ff4f:	a8 01                	test   $0x1,%al
  20ff51:	75 17                	jne    20ff6a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17h088511729f6a48bcE+0x2a>
  20ff53:	48 8b 04 24          	mov    (%rsp),%rax
  20ff57:	8b 00                	mov    (%rax),%eax
  20ff59:	83 e0 04             	and    $0x4,%eax
  20ff5c:	83 f8 04             	cmp    $0x4,%eax
  20ff5f:	0f 94 c0             	sete   %al
  20ff62:	24 01                	and    $0x1,%al
  20ff64:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ff68:	eb 05                	jmp    20ff6f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17h088511729f6a48bcE+0x2f>
  20ff6a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20ff6f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ff73:	24 01                	and    $0x1,%al
  20ff75:	0f b6 c0             	movzbl %al,%eax
  20ff78:	48 83 c4 18          	add    $0x18,%rsp
  20ff7c:	c3                   	retq   
  20ff7d:	cc                   	int3   
  20ff7e:	cc                   	int3   
  20ff7f:	cc                   	int3   

000000000020ff80 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h73ea792404c8f864E>:
                            fn $Flag(&self) -> bool {
  20ff80:	48 83 ec 18          	sub    $0x18,%rsp
  20ff84:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ff88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ff8d:	31 c0                	xor    %eax,%eax
  20ff8f:	a8 01                	test   $0x1,%al
  20ff91:	75 17                	jne    20ffaa <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h73ea792404c8f864E+0x2a>
  20ff93:	48 8b 04 24          	mov    (%rsp),%rax
  20ff97:	8b 00                	mov    (%rax),%eax
  20ff99:	83 e0 08             	and    $0x8,%eax
  20ff9c:	83 f8 08             	cmp    $0x8,%eax
  20ff9f:	0f 94 c0             	sete   %al
  20ffa2:	24 01                	and    $0x1,%al
  20ffa4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ffa8:	eb 05                	jmp    20ffaf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h73ea792404c8f864E+0x2f>
  20ffaa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20ffaf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ffb3:	24 01                	and    $0x1,%al
  20ffb5:	0f b6 c0             	movzbl %al,%eax
  20ffb8:	48 83 c4 18          	add    $0x18,%rsp
  20ffbc:	c3                   	retq   
  20ffbd:	cc                   	int3   
  20ffbe:	cc                   	int3   
  20ffbf:	cc                   	int3   

000000000020ffc0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17hc52234eaf87bd25fE>:
                            fn $Flag(&self) -> bool {
  20ffc0:	48 83 ec 18          	sub    $0x18,%rsp
  20ffc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ffc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ffcd:	31 c0                	xor    %eax,%eax
  20ffcf:	a8 01                	test   $0x1,%al
  20ffd1:	75 17                	jne    20ffea <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17hc52234eaf87bd25fE+0x2a>
  20ffd3:	48 8b 04 24          	mov    (%rsp),%rax
  20ffd7:	8b 00                	mov    (%rax),%eax
  20ffd9:	83 e0 10             	and    $0x10,%eax
  20ffdc:	83 f8 10             	cmp    $0x10,%eax
  20ffdf:	0f 94 c0             	sete   %al
  20ffe2:	24 01                	and    $0x1,%al
  20ffe4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ffe8:	eb 05                	jmp    20ffef <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17hc52234eaf87bd25fE+0x2f>
  20ffea:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  20ffef:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20fff3:	24 01                	and    $0x1,%al
  20fff5:	0f b6 c0             	movzbl %al,%eax
  20fff8:	48 83 c4 18          	add    $0x18,%rsp
  20fffc:	c3                   	retq   
  20fffd:	cc                   	int3   
  20fffe:	cc                   	int3   
  20ffff:	cc                   	int3   

0000000000210000 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17hc4df86ce0ef85585E>:
                            fn $Flag(&self) -> bool {
  210000:	48 83 ec 18          	sub    $0x18,%rsp
  210004:	48 89 3c 24          	mov    %rdi,(%rsp)
  210008:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21000d:	31 c0                	xor    %eax,%eax
  21000f:	a8 01                	test   $0x1,%al
  210011:	75 17                	jne    21002a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17hc4df86ce0ef85585E+0x2a>
  210013:	48 8b 04 24          	mov    (%rsp),%rax
  210017:	8b 00                	mov    (%rax),%eax
  210019:	83 e0 20             	and    $0x20,%eax
  21001c:	83 f8 20             	cmp    $0x20,%eax
  21001f:	0f 94 c0             	sete   %al
  210022:	24 01                	and    $0x1,%al
  210024:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210028:	eb 05                	jmp    21002f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17hc4df86ce0ef85585E+0x2f>
  21002a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  21002f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210033:	24 01                	and    $0x1,%al
  210035:	0f b6 c0             	movzbl %al,%eax
  210038:	48 83 c4 18          	add    $0x18,%rsp
  21003c:	c3                   	retq   
  21003d:	cc                   	int3   
  21003e:	cc                   	int3   
  21003f:	cc                   	int3   

0000000000210040 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h59997e024a7bd261E>:
                            fn $Flag(&self) -> bool {
  210040:	48 83 ec 18          	sub    $0x18,%rsp
  210044:	48 89 3c 24          	mov    %rdi,(%rsp)
  210048:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21004d:	31 c0                	xor    %eax,%eax
  21004f:	a8 01                	test   $0x1,%al
  210051:	75 17                	jne    21006a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h59997e024a7bd261E+0x2a>
  210053:	48 8b 04 24          	mov    (%rsp),%rax
  210057:	8b 00                	mov    (%rax),%eax
  210059:	83 e0 40             	and    $0x40,%eax
  21005c:	83 f8 40             	cmp    $0x40,%eax
  21005f:	0f 94 c0             	sete   %al
  210062:	24 01                	and    $0x1,%al
  210064:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210068:	eb 05                	jmp    21006f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h59997e024a7bd261E+0x2f>
  21006a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  21006f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210073:	24 01                	and    $0x1,%al
  210075:	0f b6 c0             	movzbl %al,%eax
  210078:	48 83 c4 18          	add    $0x18,%rsp
  21007c:	c3                   	retq   
  21007d:	cc                   	int3   
  21007e:	cc                   	int3   
  21007f:	cc                   	int3   

0000000000210080 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17heba50b06dd4d0a29E>:
                            fn $Flag(&self) -> bool {
  210080:	48 83 ec 18          	sub    $0x18,%rsp
  210084:	48 89 3c 24          	mov    %rdi,(%rsp)
  210088:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21008d:	31 c0                	xor    %eax,%eax
  21008f:	a8 01                	test   $0x1,%al
  210091:	75 1b                	jne    2100ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17heba50b06dd4d0a29E+0x2e>
  210093:	48 8b 04 24          	mov    (%rsp),%rax
  210097:	8b 00                	mov    (%rax),%eax
  210099:	25 80 00 00 00       	and    $0x80,%eax
  21009e:	3d 80 00 00 00       	cmp    $0x80,%eax
  2100a3:	0f 94 c0             	sete   %al
  2100a6:	24 01                	and    $0x1,%al
  2100a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2100ac:	eb 05                	jmp    2100b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17heba50b06dd4d0a29E+0x33>
  2100ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2100b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2100b7:	24 01                	and    $0x1,%al
  2100b9:	0f b6 c0             	movzbl %al,%eax
  2100bc:	48 83 c4 18          	add    $0x18,%rsp
  2100c0:	c3                   	retq   
  2100c1:	cc                   	int3   
  2100c2:	cc                   	int3   
  2100c3:	cc                   	int3   
  2100c4:	cc                   	int3   
  2100c5:	cc                   	int3   
  2100c6:	cc                   	int3   
  2100c7:	cc                   	int3   
  2100c8:	cc                   	int3   
  2100c9:	cc                   	int3   
  2100ca:	cc                   	int3   
  2100cb:	cc                   	int3   
  2100cc:	cc                   	int3   
  2100cd:	cc                   	int3   
  2100ce:	cc                   	int3   
  2100cf:	cc                   	int3   

00000000002100d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817hcef768f48fcbad45E>:
                            fn $Flag(&self) -> bool {
  2100d0:	48 83 ec 18          	sub    $0x18,%rsp
  2100d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2100d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2100dd:	31 c0                	xor    %eax,%eax
  2100df:	a8 01                	test   $0x1,%al
  2100e1:	75 1b                	jne    2100fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817hcef768f48fcbad45E+0x2e>
  2100e3:	48 8b 04 24          	mov    (%rsp),%rax
  2100e7:	8b 00                	mov    (%rax),%eax
  2100e9:	25 00 01 00 00       	and    $0x100,%eax
  2100ee:	3d 00 01 00 00       	cmp    $0x100,%eax
  2100f3:	0f 94 c0             	sete   %al
  2100f6:	24 01                	and    $0x1,%al
  2100f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2100fc:	eb 05                	jmp    210103 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817hcef768f48fcbad45E+0x33>
  2100fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210103:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210107:	24 01                	and    $0x1,%al
  210109:	0f b6 c0             	movzbl %al,%eax
  21010c:	48 83 c4 18          	add    $0x18,%rsp
  210110:	c3                   	retq   
  210111:	cc                   	int3   
  210112:	cc                   	int3   
  210113:	cc                   	int3   
  210114:	cc                   	int3   
  210115:	cc                   	int3   
  210116:	cc                   	int3   
  210117:	cc                   	int3   
  210118:	cc                   	int3   
  210119:	cc                   	int3   
  21011a:	cc                   	int3   
  21011b:	cc                   	int3   
  21011c:	cc                   	int3   
  21011d:	cc                   	int3   
  21011e:	cc                   	int3   
  21011f:	cc                   	int3   

0000000000210120 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h53afb08d60a06c06E>:
                            fn $Flag(&self) -> bool {
  210120:	48 83 ec 18          	sub    $0x18,%rsp
  210124:	48 89 3c 24          	mov    %rdi,(%rsp)
  210128:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21012d:	31 c0                	xor    %eax,%eax
  21012f:	a8 01                	test   $0x1,%al
  210131:	75 1b                	jne    21014e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h53afb08d60a06c06E+0x2e>
  210133:	48 8b 04 24          	mov    (%rsp),%rax
  210137:	8b 00                	mov    (%rax),%eax
  210139:	25 00 02 00 00       	and    $0x200,%eax
  21013e:	3d 00 02 00 00       	cmp    $0x200,%eax
  210143:	0f 94 c0             	sete   %al
  210146:	24 01                	and    $0x1,%al
  210148:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21014c:	eb 05                	jmp    210153 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h53afb08d60a06c06E+0x33>
  21014e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210153:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210157:	24 01                	and    $0x1,%al
  210159:	0f b6 c0             	movzbl %al,%eax
  21015c:	48 83 c4 18          	add    $0x18,%rsp
  210160:	c3                   	retq   
  210161:	cc                   	int3   
  210162:	cc                   	int3   
  210163:	cc                   	int3   
  210164:	cc                   	int3   
  210165:	cc                   	int3   
  210166:	cc                   	int3   
  210167:	cc                   	int3   
  210168:	cc                   	int3   
  210169:	cc                   	int3   
  21016a:	cc                   	int3   
  21016b:	cc                   	int3   
  21016c:	cc                   	int3   
  21016d:	cc                   	int3   
  21016e:	cc                   	int3   
  21016f:	cc                   	int3   

0000000000210170 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h4749c9f5bf6a4f48E>:
                            fn $Flag(&self) -> bool {
  210170:	48 83 ec 18          	sub    $0x18,%rsp
  210174:	48 89 3c 24          	mov    %rdi,(%rsp)
  210178:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21017d:	31 c0                	xor    %eax,%eax
  21017f:	a8 01                	test   $0x1,%al
  210181:	75 1b                	jne    21019e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h4749c9f5bf6a4f48E+0x2e>
  210183:	48 8b 04 24          	mov    (%rsp),%rax
  210187:	8b 00                	mov    (%rax),%eax
  210189:	25 00 08 00 00       	and    $0x800,%eax
  21018e:	3d 00 08 00 00       	cmp    $0x800,%eax
  210193:	0f 94 c0             	sete   %al
  210196:	24 01                	and    $0x1,%al
  210198:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21019c:	eb 05                	jmp    2101a3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h4749c9f5bf6a4f48E+0x33>
  21019e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2101a3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2101a7:	24 01                	and    $0x1,%al
  2101a9:	0f b6 c0             	movzbl %al,%eax
  2101ac:	48 83 c4 18          	add    $0x18,%rsp
  2101b0:	c3                   	retq   
  2101b1:	cc                   	int3   
  2101b2:	cc                   	int3   
  2101b3:	cc                   	int3   
  2101b4:	cc                   	int3   
  2101b5:	cc                   	int3   
  2101b6:	cc                   	int3   
  2101b7:	cc                   	int3   
  2101b8:	cc                   	int3   
  2101b9:	cc                   	int3   
  2101ba:	cc                   	int3   
  2101bb:	cc                   	int3   
  2101bc:	cc                   	int3   
  2101bd:	cc                   	int3   
  2101be:	cc                   	int3   
  2101bf:	cc                   	int3   

00000000002101c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17h7c62487d985c6722E>:
                            fn $Flag(&self) -> bool {
  2101c0:	48 83 ec 18          	sub    $0x18,%rsp
  2101c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2101c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2101cd:	31 c0                	xor    %eax,%eax
  2101cf:	a8 01                	test   $0x1,%al
  2101d1:	75 1b                	jne    2101ee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17h7c62487d985c6722E+0x2e>
  2101d3:	48 8b 04 24          	mov    (%rsp),%rax
  2101d7:	8b 00                	mov    (%rax),%eax
  2101d9:	25 00 10 00 00       	and    $0x1000,%eax
  2101de:	3d 00 10 00 00       	cmp    $0x1000,%eax
  2101e3:	0f 94 c0             	sete   %al
  2101e6:	24 01                	and    $0x1,%al
  2101e8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2101ec:	eb 05                	jmp    2101f3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17h7c62487d985c6722E+0x33>
  2101ee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2101f3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2101f7:	24 01                	and    $0x1,%al
  2101f9:	0f b6 c0             	movzbl %al,%eax
  2101fc:	48 83 c4 18          	add    $0x18,%rsp
  210200:	c3                   	retq   
  210201:	cc                   	int3   
  210202:	cc                   	int3   
  210203:	cc                   	int3   
  210204:	cc                   	int3   
  210205:	cc                   	int3   
  210206:	cc                   	int3   
  210207:	cc                   	int3   
  210208:	cc                   	int3   
  210209:	cc                   	int3   
  21020a:	cc                   	int3   
  21020b:	cc                   	int3   
  21020c:	cc                   	int3   
  21020d:	cc                   	int3   
  21020e:	cc                   	int3   
  21020f:	cc                   	int3   

0000000000210210 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17hbbbcbb96d2ced87dE>:
                            fn $Flag(&self) -> bool {
  210210:	48 83 ec 18          	sub    $0x18,%rsp
  210214:	48 89 3c 24          	mov    %rdi,(%rsp)
  210218:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21021d:	31 c0                	xor    %eax,%eax
  21021f:	a8 01                	test   $0x1,%al
  210221:	75 1b                	jne    21023e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17hbbbcbb96d2ced87dE+0x2e>
  210223:	48 8b 04 24          	mov    (%rsp),%rax
  210227:	8b 00                	mov    (%rax),%eax
  210229:	25 00 20 00 00       	and    $0x2000,%eax
  21022e:	3d 00 20 00 00       	cmp    $0x2000,%eax
  210233:	0f 94 c0             	sete   %al
  210236:	24 01                	and    $0x1,%al
  210238:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21023c:	eb 05                	jmp    210243 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17hbbbcbb96d2ced87dE+0x33>
  21023e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210243:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210247:	24 01                	and    $0x1,%al
  210249:	0f b6 c0             	movzbl %al,%eax
  21024c:	48 83 c4 18          	add    $0x18,%rsp
  210250:	c3                   	retq   
  210251:	cc                   	int3   
  210252:	cc                   	int3   
  210253:	cc                   	int3   
  210254:	cc                   	int3   
  210255:	cc                   	int3   
  210256:	cc                   	int3   
  210257:	cc                   	int3   
  210258:	cc                   	int3   
  210259:	cc                   	int3   
  21025a:	cc                   	int3   
  21025b:	cc                   	int3   
  21025c:	cc                   	int3   
  21025d:	cc                   	int3   
  21025e:	cc                   	int3   
  21025f:	cc                   	int3   

0000000000210260 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h5842facb45d8356bE>:
                            fn $Flag(&self) -> bool {
  210260:	48 83 ec 18          	sub    $0x18,%rsp
  210264:	48 89 3c 24          	mov    %rdi,(%rsp)
  210268:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21026d:	31 c0                	xor    %eax,%eax
  21026f:	a8 01                	test   $0x1,%al
  210271:	75 1b                	jne    21028e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h5842facb45d8356bE+0x2e>
  210273:	48 8b 04 24          	mov    (%rsp),%rax
  210277:	8b 00                	mov    (%rax),%eax
  210279:	25 00 40 00 00       	and    $0x4000,%eax
  21027e:	3d 00 40 00 00       	cmp    $0x4000,%eax
  210283:	0f 94 c0             	sete   %al
  210286:	24 01                	and    $0x1,%al
  210288:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21028c:	eb 05                	jmp    210293 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h5842facb45d8356bE+0x33>
  21028e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210293:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210297:	24 01                	and    $0x1,%al
  210299:	0f b6 c0             	movzbl %al,%eax
  21029c:	48 83 c4 18          	add    $0x18,%rsp
  2102a0:	c3                   	retq   
  2102a1:	cc                   	int3   
  2102a2:	cc                   	int3   
  2102a3:	cc                   	int3   
  2102a4:	cc                   	int3   
  2102a5:	cc                   	int3   
  2102a6:	cc                   	int3   
  2102a7:	cc                   	int3   
  2102a8:	cc                   	int3   
  2102a9:	cc                   	int3   
  2102aa:	cc                   	int3   
  2102ab:	cc                   	int3   
  2102ac:	cc                   	int3   
  2102ad:	cc                   	int3   
  2102ae:	cc                   	int3   
  2102af:	cc                   	int3   

00000000002102b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17h07a13d37ab9f272aE>:
                            fn $Flag(&self) -> bool {
  2102b0:	48 83 ec 18          	sub    $0x18,%rsp
  2102b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2102b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2102bd:	31 c0                	xor    %eax,%eax
  2102bf:	a8 01                	test   $0x1,%al
  2102c1:	75 1b                	jne    2102de <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17h07a13d37ab9f272aE+0x2e>
  2102c3:	48 8b 04 24          	mov    (%rsp),%rax
  2102c7:	8b 00                	mov    (%rax),%eax
  2102c9:	25 00 80 00 00       	and    $0x8000,%eax
  2102ce:	3d 00 80 00 00       	cmp    $0x8000,%eax
  2102d3:	0f 94 c0             	sete   %al
  2102d6:	24 01                	and    $0x1,%al
  2102d8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2102dc:	eb 05                	jmp    2102e3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17h07a13d37ab9f272aE+0x33>
  2102de:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2102e3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2102e7:	24 01                	and    $0x1,%al
  2102e9:	0f b6 c0             	movzbl %al,%eax
  2102ec:	48 83 c4 18          	add    $0x18,%rsp
  2102f0:	c3                   	retq   
  2102f1:	cc                   	int3   
  2102f2:	cc                   	int3   
  2102f3:	cc                   	int3   
  2102f4:	cc                   	int3   
  2102f5:	cc                   	int3   
  2102f6:	cc                   	int3   
  2102f7:	cc                   	int3   
  2102f8:	cc                   	int3   
  2102f9:	cc                   	int3   
  2102fa:	cc                   	int3   
  2102fb:	cc                   	int3   
  2102fc:	cc                   	int3   
  2102fd:	cc                   	int3   
  2102fe:	cc                   	int3   
  2102ff:	cc                   	int3   

0000000000210300 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hd397f79f5fa46c87E>:
                            fn $Flag(&self) -> bool {
  210300:	48 83 ec 18          	sub    $0x18,%rsp
  210304:	48 89 3c 24          	mov    %rdi,(%rsp)
  210308:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21030d:	31 c0                	xor    %eax,%eax
  21030f:	a8 01                	test   $0x1,%al
  210311:	75 1b                	jne    21032e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hd397f79f5fa46c87E+0x2e>
  210313:	48 8b 04 24          	mov    (%rsp),%rax
  210317:	8b 00                	mov    (%rax),%eax
  210319:	25 00 00 01 00       	and    $0x10000,%eax
  21031e:	3d 00 00 01 00       	cmp    $0x10000,%eax
  210323:	0f 94 c0             	sete   %al
  210326:	24 01                	and    $0x1,%al
  210328:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21032c:	eb 05                	jmp    210333 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hd397f79f5fa46c87E+0x33>
  21032e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210333:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210337:	24 01                	and    $0x1,%al
  210339:	0f b6 c0             	movzbl %al,%eax
  21033c:	48 83 c4 18          	add    $0x18,%rsp
  210340:	c3                   	retq   
  210341:	cc                   	int3   
  210342:	cc                   	int3   
  210343:	cc                   	int3   
  210344:	cc                   	int3   
  210345:	cc                   	int3   
  210346:	cc                   	int3   
  210347:	cc                   	int3   
  210348:	cc                   	int3   
  210349:	cc                   	int3   
  21034a:	cc                   	int3   
  21034b:	cc                   	int3   
  21034c:	cc                   	int3   
  21034d:	cc                   	int3   
  21034e:	cc                   	int3   
  21034f:	cc                   	int3   

0000000000210350 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617h920008d6ec79214fE>:
                            fn $Flag(&self) -> bool {
  210350:	48 83 ec 18          	sub    $0x18,%rsp
  210354:	48 89 3c 24          	mov    %rdi,(%rsp)
  210358:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21035d:	31 c0                	xor    %eax,%eax
  21035f:	a8 01                	test   $0x1,%al
  210361:	75 1b                	jne    21037e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617h920008d6ec79214fE+0x2e>
  210363:	48 8b 04 24          	mov    (%rsp),%rax
  210367:	8b 00                	mov    (%rax),%eax
  210369:	25 00 00 02 00       	and    $0x20000,%eax
  21036e:	3d 00 00 02 00       	cmp    $0x20000,%eax
  210373:	0f 94 c0             	sete   %al
  210376:	24 01                	and    $0x1,%al
  210378:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21037c:	eb 05                	jmp    210383 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617h920008d6ec79214fE+0x33>
  21037e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210383:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210387:	24 01                	and    $0x1,%al
  210389:	0f b6 c0             	movzbl %al,%eax
  21038c:	48 83 c4 18          	add    $0x18,%rsp
  210390:	c3                   	retq   
  210391:	cc                   	int3   
  210392:	cc                   	int3   
  210393:	cc                   	int3   
  210394:	cc                   	int3   
  210395:	cc                   	int3   
  210396:	cc                   	int3   
  210397:	cc                   	int3   
  210398:	cc                   	int3   
  210399:	cc                   	int3   
  21039a:	cc                   	int3   
  21039b:	cc                   	int3   
  21039c:	cc                   	int3   
  21039d:	cc                   	int3   
  21039e:	cc                   	int3   
  21039f:	cc                   	int3   

00000000002103a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17hcb9e120f2faad715E>:
                            fn $Flag(&self) -> bool {
  2103a0:	48 83 ec 18          	sub    $0x18,%rsp
  2103a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2103a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2103ad:	31 c0                	xor    %eax,%eax
  2103af:	a8 01                	test   $0x1,%al
  2103b1:	75 1b                	jne    2103ce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17hcb9e120f2faad715E+0x2e>
  2103b3:	48 8b 04 24          	mov    (%rsp),%rax
  2103b7:	8b 00                	mov    (%rax),%eax
  2103b9:	25 00 00 04 00       	and    $0x40000,%eax
  2103be:	3d 00 00 04 00       	cmp    $0x40000,%eax
  2103c3:	0f 94 c0             	sete   %al
  2103c6:	24 01                	and    $0x1,%al
  2103c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2103cc:	eb 05                	jmp    2103d3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17hcb9e120f2faad715E+0x33>
  2103ce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2103d3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2103d7:	24 01                	and    $0x1,%al
  2103d9:	0f b6 c0             	movzbl %al,%eax
  2103dc:	48 83 c4 18          	add    $0x18,%rsp
  2103e0:	c3                   	retq   
  2103e1:	cc                   	int3   
  2103e2:	cc                   	int3   
  2103e3:	cc                   	int3   
  2103e4:	cc                   	int3   
  2103e5:	cc                   	int3   
  2103e6:	cc                   	int3   
  2103e7:	cc                   	int3   
  2103e8:	cc                   	int3   
  2103e9:	cc                   	int3   
  2103ea:	cc                   	int3   
  2103eb:	cc                   	int3   
  2103ec:	cc                   	int3   
  2103ed:	cc                   	int3   
  2103ee:	cc                   	int3   
  2103ef:	cc                   	int3   

00000000002103f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h91a6893802e9a07cE>:
                            fn $Flag(&self) -> bool {
  2103f0:	48 83 ec 18          	sub    $0x18,%rsp
  2103f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2103f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2103fd:	31 c0                	xor    %eax,%eax
  2103ff:	a8 01                	test   $0x1,%al
  210401:	75 1b                	jne    21041e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h91a6893802e9a07cE+0x2e>
  210403:	48 8b 04 24          	mov    (%rsp),%rax
  210407:	8b 00                	mov    (%rax),%eax
  210409:	25 00 00 08 00       	and    $0x80000,%eax
  21040e:	3d 00 00 08 00       	cmp    $0x80000,%eax
  210413:	0f 94 c0             	sete   %al
  210416:	24 01                	and    $0x1,%al
  210418:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21041c:	eb 05                	jmp    210423 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h91a6893802e9a07cE+0x33>
  21041e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210423:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210427:	24 01                	and    $0x1,%al
  210429:	0f b6 c0             	movzbl %al,%eax
  21042c:	48 83 c4 18          	add    $0x18,%rsp
  210430:	c3                   	retq   
  210431:	cc                   	int3   
  210432:	cc                   	int3   
  210433:	cc                   	int3   
  210434:	cc                   	int3   
  210435:	cc                   	int3   
  210436:	cc                   	int3   
  210437:	cc                   	int3   
  210438:	cc                   	int3   
  210439:	cc                   	int3   
  21043a:	cc                   	int3   
  21043b:	cc                   	int3   
  21043c:	cc                   	int3   
  21043d:	cc                   	int3   
  21043e:	cc                   	int3   
  21043f:	cc                   	int3   

0000000000210440 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17h7bd522ef54af3ed8E>:
                            fn $Flag(&self) -> bool {
  210440:	48 83 ec 18          	sub    $0x18,%rsp
  210444:	48 89 3c 24          	mov    %rdi,(%rsp)
  210448:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21044d:	31 c0                	xor    %eax,%eax
  21044f:	a8 01                	test   $0x1,%al
  210451:	75 1b                	jne    21046e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17h7bd522ef54af3ed8E+0x2e>
  210453:	48 8b 04 24          	mov    (%rsp),%rax
  210457:	8b 00                	mov    (%rax),%eax
  210459:	25 00 00 20 00       	and    $0x200000,%eax
  21045e:	3d 00 00 20 00       	cmp    $0x200000,%eax
  210463:	0f 94 c0             	sete   %al
  210466:	24 01                	and    $0x1,%al
  210468:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21046c:	eb 05                	jmp    210473 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17h7bd522ef54af3ed8E+0x33>
  21046e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210473:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210477:	24 01                	and    $0x1,%al
  210479:	0f b6 c0             	movzbl %al,%eax
  21047c:	48 83 c4 18          	add    $0x18,%rsp
  210480:	c3                   	retq   
  210481:	cc                   	int3   
  210482:	cc                   	int3   
  210483:	cc                   	int3   
  210484:	cc                   	int3   
  210485:	cc                   	int3   
  210486:	cc                   	int3   
  210487:	cc                   	int3   
  210488:	cc                   	int3   
  210489:	cc                   	int3   
  21048a:	cc                   	int3   
  21048b:	cc                   	int3   
  21048c:	cc                   	int3   
  21048d:	cc                   	int3   
  21048e:	cc                   	int3   
  21048f:	cc                   	int3   

0000000000210490 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17h79e82a88125b1e02E>:
                            fn $Flag(&self) -> bool {
  210490:	48 83 ec 18          	sub    $0x18,%rsp
  210494:	48 89 3c 24          	mov    %rdi,(%rsp)
  210498:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21049d:	31 c0                	xor    %eax,%eax
  21049f:	a8 01                	test   $0x1,%al
  2104a1:	75 1b                	jne    2104be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17h79e82a88125b1e02E+0x2e>
  2104a3:	48 8b 04 24          	mov    (%rsp),%rax
  2104a7:	8b 00                	mov    (%rax),%eax
  2104a9:	25 00 00 40 00       	and    $0x400000,%eax
  2104ae:	3d 00 00 40 00       	cmp    $0x400000,%eax
  2104b3:	0f 94 c0             	sete   %al
  2104b6:	24 01                	and    $0x1,%al
  2104b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2104bc:	eb 05                	jmp    2104c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17h79e82a88125b1e02E+0x33>
  2104be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2104c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2104c7:	24 01                	and    $0x1,%al
  2104c9:	0f b6 c0             	movzbl %al,%eax
  2104cc:	48 83 c4 18          	add    $0x18,%rsp
  2104d0:	c3                   	retq   
  2104d1:	cc                   	int3   
  2104d2:	cc                   	int3   
  2104d3:	cc                   	int3   
  2104d4:	cc                   	int3   
  2104d5:	cc                   	int3   
  2104d6:	cc                   	int3   
  2104d7:	cc                   	int3   
  2104d8:	cc                   	int3   
  2104d9:	cc                   	int3   
  2104da:	cc                   	int3   
  2104db:	cc                   	int3   
  2104dc:	cc                   	int3   
  2104dd:	cc                   	int3   
  2104de:	cc                   	int3   
  2104df:	cc                   	int3   

00000000002104e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17h77372b770a15702aE>:
                            fn $Flag(&self) -> bool {
  2104e0:	48 83 ec 18          	sub    $0x18,%rsp
  2104e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2104e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2104ed:	31 c0                	xor    %eax,%eax
  2104ef:	a8 01                	test   $0x1,%al
  2104f1:	75 1b                	jne    21050e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17h77372b770a15702aE+0x2e>
  2104f3:	48 8b 04 24          	mov    (%rsp),%rax
  2104f7:	8b 00                	mov    (%rax),%eax
  2104f9:	25 00 00 80 00       	and    $0x800000,%eax
  2104fe:	3d 00 00 80 00       	cmp    $0x800000,%eax
  210503:	0f 94 c0             	sete   %al
  210506:	24 01                	and    $0x1,%al
  210508:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21050c:	eb 05                	jmp    210513 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17h77372b770a15702aE+0x33>
  21050e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210513:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210517:	24 01                	and    $0x1,%al
  210519:	0f b6 c0             	movzbl %al,%eax
  21051c:	48 83 c4 18          	add    $0x18,%rsp
  210520:	c3                   	retq   
  210521:	cc                   	int3   
  210522:	cc                   	int3   
  210523:	cc                   	int3   
  210524:	cc                   	int3   
  210525:	cc                   	int3   
  210526:	cc                   	int3   
  210527:	cc                   	int3   
  210528:	cc                   	int3   
  210529:	cc                   	int3   
  21052a:	cc                   	int3   
  21052b:	cc                   	int3   
  21052c:	cc                   	int3   
  21052d:	cc                   	int3   
  21052e:	cc                   	int3   
  21052f:	cc                   	int3   

0000000000210530 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17h2276264ffb6623e5E>:
                            fn $Flag(&self) -> bool {
  210530:	48 83 ec 18          	sub    $0x18,%rsp
  210534:	48 89 3c 24          	mov    %rdi,(%rsp)
  210538:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21053d:	31 c0                	xor    %eax,%eax
  21053f:	a8 01                	test   $0x1,%al
  210541:	75 1b                	jne    21055e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17h2276264ffb6623e5E+0x2e>
  210543:	48 8b 04 24          	mov    (%rsp),%rax
  210547:	8b 00                	mov    (%rax),%eax
  210549:	25 00 00 00 01       	and    $0x1000000,%eax
  21054e:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  210553:	0f 94 c0             	sete   %al
  210556:	24 01                	and    $0x1,%al
  210558:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21055c:	eb 05                	jmp    210563 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17h2276264ffb6623e5E+0x33>
  21055e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210563:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210567:	24 01                	and    $0x1,%al
  210569:	0f b6 c0             	movzbl %al,%eax
  21056c:	48 83 c4 18          	add    $0x18,%rsp
  210570:	c3                   	retq   
  210571:	cc                   	int3   
  210572:	cc                   	int3   
  210573:	cc                   	int3   
  210574:	cc                   	int3   
  210575:	cc                   	int3   
  210576:	cc                   	int3   
  210577:	cc                   	int3   
  210578:	cc                   	int3   
  210579:	cc                   	int3   
  21057a:	cc                   	int3   
  21057b:	cc                   	int3   
  21057c:	cc                   	int3   
  21057d:	cc                   	int3   
  21057e:	cc                   	int3   
  21057f:	cc                   	int3   

0000000000210580 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h56cb16ab6848739dE>:
                            fn $Flag(&self) -> bool {
  210580:	48 83 ec 18          	sub    $0x18,%rsp
  210584:	48 89 3c 24          	mov    %rdi,(%rsp)
  210588:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21058d:	31 c0                	xor    %eax,%eax
  21058f:	a8 01                	test   $0x1,%al
  210591:	75 1b                	jne    2105ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h56cb16ab6848739dE+0x2e>
  210593:	48 8b 04 24          	mov    (%rsp),%rax
  210597:	8b 00                	mov    (%rax),%eax
  210599:	25 00 00 00 02       	and    $0x2000000,%eax
  21059e:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  2105a3:	0f 94 c0             	sete   %al
  2105a6:	24 01                	and    $0x1,%al
  2105a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2105ac:	eb 05                	jmp    2105b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h56cb16ab6848739dE+0x33>
  2105ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2105b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2105b7:	24 01                	and    $0x1,%al
  2105b9:	0f b6 c0             	movzbl %al,%eax
  2105bc:	48 83 c4 18          	add    $0x18,%rsp
  2105c0:	c3                   	retq   
  2105c1:	cc                   	int3   
  2105c2:	cc                   	int3   
  2105c3:	cc                   	int3   
  2105c4:	cc                   	int3   
  2105c5:	cc                   	int3   
  2105c6:	cc                   	int3   
  2105c7:	cc                   	int3   
  2105c8:	cc                   	int3   
  2105c9:	cc                   	int3   
  2105ca:	cc                   	int3   
  2105cb:	cc                   	int3   
  2105cc:	cc                   	int3   
  2105cd:	cc                   	int3   
  2105ce:	cc                   	int3   
  2105cf:	cc                   	int3   

00000000002105d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h0d245b0177a80c85E>:
                            fn $Flag(&self) -> bool {
  2105d0:	48 83 ec 18          	sub    $0x18,%rsp
  2105d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2105d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2105dd:	31 c0                	xor    %eax,%eax
  2105df:	a8 01                	test   $0x1,%al
  2105e1:	75 1b                	jne    2105fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h0d245b0177a80c85E+0x2e>
  2105e3:	48 8b 04 24          	mov    (%rsp),%rax
  2105e7:	8b 00                	mov    (%rax),%eax
  2105e9:	25 00 00 00 04       	and    $0x4000000,%eax
  2105ee:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  2105f3:	0f 94 c0             	sete   %al
  2105f6:	24 01                	and    $0x1,%al
  2105f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2105fc:	eb 05                	jmp    210603 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h0d245b0177a80c85E+0x33>
  2105fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210603:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210607:	24 01                	and    $0x1,%al
  210609:	0f b6 c0             	movzbl %al,%eax
  21060c:	48 83 c4 18          	add    $0x18,%rsp
  210610:	c3                   	retq   
  210611:	cc                   	int3   
  210612:	cc                   	int3   
  210613:	cc                   	int3   
  210614:	cc                   	int3   
  210615:	cc                   	int3   
  210616:	cc                   	int3   
  210617:	cc                   	int3   
  210618:	cc                   	int3   
  210619:	cc                   	int3   
  21061a:	cc                   	int3   
  21061b:	cc                   	int3   
  21061c:	cc                   	int3   
  21061d:	cc                   	int3   
  21061e:	cc                   	int3   
  21061f:	cc                   	int3   

0000000000210620 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17h3297ce638405691eE>:
                            fn $Flag(&self) -> bool {
  210620:	48 83 ec 18          	sub    $0x18,%rsp
  210624:	48 89 3c 24          	mov    %rdi,(%rsp)
  210628:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21062d:	31 c0                	xor    %eax,%eax
  21062f:	a8 01                	test   $0x1,%al
  210631:	75 1b                	jne    21064e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17h3297ce638405691eE+0x2e>
  210633:	48 8b 04 24          	mov    (%rsp),%rax
  210637:	8b 00                	mov    (%rax),%eax
  210639:	25 00 00 00 08       	and    $0x8000000,%eax
  21063e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  210643:	0f 94 c0             	sete   %al
  210646:	24 01                	and    $0x1,%al
  210648:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21064c:	eb 05                	jmp    210653 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17h3297ce638405691eE+0x33>
  21064e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210653:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210657:	24 01                	and    $0x1,%al
  210659:	0f b6 c0             	movzbl %al,%eax
  21065c:	48 83 c4 18          	add    $0x18,%rsp
  210660:	c3                   	retq   
  210661:	cc                   	int3   
  210662:	cc                   	int3   
  210663:	cc                   	int3   
  210664:	cc                   	int3   
  210665:	cc                   	int3   
  210666:	cc                   	int3   
  210667:	cc                   	int3   
  210668:	cc                   	int3   
  210669:	cc                   	int3   
  21066a:	cc                   	int3   
  21066b:	cc                   	int3   
  21066c:	cc                   	int3   
  21066d:	cc                   	int3   
  21066e:	cc                   	int3   
  21066f:	cc                   	int3   

0000000000210670 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h43f74dae3f79d1c5E>:
                            fn $Flag(&self) -> bool {
  210670:	48 83 ec 18          	sub    $0x18,%rsp
  210674:	48 89 3c 24          	mov    %rdi,(%rsp)
  210678:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21067d:	31 c0                	xor    %eax,%eax
  21067f:	a8 01                	test   $0x1,%al
  210681:	75 1b                	jne    21069e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h43f74dae3f79d1c5E+0x2e>
  210683:	48 8b 04 24          	mov    (%rsp),%rax
  210687:	8b 00                	mov    (%rax),%eax
  210689:	25 00 00 00 10       	and    $0x10000000,%eax
  21068e:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  210693:	0f 94 c0             	sete   %al
  210696:	24 01                	and    $0x1,%al
  210698:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21069c:	eb 05                	jmp    2106a3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h43f74dae3f79d1c5E+0x33>
  21069e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2106a3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2106a7:	24 01                	and    $0x1,%al
  2106a9:	0f b6 c0             	movzbl %al,%eax
  2106ac:	48 83 c4 18          	add    $0x18,%rsp
  2106b0:	c3                   	retq   
  2106b1:	cc                   	int3   
  2106b2:	cc                   	int3   
  2106b3:	cc                   	int3   
  2106b4:	cc                   	int3   
  2106b5:	cc                   	int3   
  2106b6:	cc                   	int3   
  2106b7:	cc                   	int3   
  2106b8:	cc                   	int3   
  2106b9:	cc                   	int3   
  2106ba:	cc                   	int3   
  2106bb:	cc                   	int3   
  2106bc:	cc                   	int3   
  2106bd:	cc                   	int3   
  2106be:	cc                   	int3   
  2106bf:	cc                   	int3   

00000000002106c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h5f0d46cfe8f5a425E>:
                            fn $Flag(&self) -> bool {
  2106c0:	48 83 ec 18          	sub    $0x18,%rsp
  2106c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2106c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2106cd:	31 c0                	xor    %eax,%eax
  2106cf:	a8 01                	test   $0x1,%al
  2106d1:	75 1b                	jne    2106ee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h5f0d46cfe8f5a425E+0x2e>
  2106d3:	48 8b 04 24          	mov    (%rsp),%rax
  2106d7:	8b 00                	mov    (%rax),%eax
  2106d9:	25 00 00 00 20       	and    $0x20000000,%eax
  2106de:	3d 00 00 00 20       	cmp    $0x20000000,%eax
  2106e3:	0f 94 c0             	sete   %al
  2106e6:	24 01                	and    $0x1,%al
  2106e8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2106ec:	eb 05                	jmp    2106f3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h5f0d46cfe8f5a425E+0x33>
  2106ee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2106f3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2106f7:	24 01                	and    $0x1,%al
  2106f9:	0f b6 c0             	movzbl %al,%eax
  2106fc:	48 83 c4 18          	add    $0x18,%rsp
  210700:	c3                   	retq   
  210701:	cc                   	int3   
  210702:	cc                   	int3   
  210703:	cc                   	int3   
  210704:	cc                   	int3   
  210705:	cc                   	int3   
  210706:	cc                   	int3   
  210707:	cc                   	int3   
  210708:	cc                   	int3   
  210709:	cc                   	int3   
  21070a:	cc                   	int3   
  21070b:	cc                   	int3   
  21070c:	cc                   	int3   
  21070d:	cc                   	int3   
  21070e:	cc                   	int3   
  21070f:	cc                   	int3   

0000000000210710 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h5767ccead5970f2dE>:
                            fn $Flag(&self) -> bool {
  210710:	48 83 ec 18          	sub    $0x18,%rsp
  210714:	48 89 3c 24          	mov    %rdi,(%rsp)
  210718:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21071d:	31 c0                	xor    %eax,%eax
  21071f:	a8 01                	test   $0x1,%al
  210721:	75 1b                	jne    21073e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h5767ccead5970f2dE+0x2e>
  210723:	48 8b 04 24          	mov    (%rsp),%rax
  210727:	8b 00                	mov    (%rax),%eax
  210729:	25 00 00 00 40       	and    $0x40000000,%eax
  21072e:	3d 00 00 00 40       	cmp    $0x40000000,%eax
  210733:	0f 94 c0             	sete   %al
  210736:	24 01                	and    $0x1,%al
  210738:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21073c:	eb 05                	jmp    210743 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h5767ccead5970f2dE+0x33>
  21073e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210743:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210747:	24 01                	and    $0x1,%al
  210749:	0f b6 c0             	movzbl %al,%eax
  21074c:	48 83 c4 18          	add    $0x18,%rsp
  210750:	c3                   	retq   
  210751:	cc                   	int3   
  210752:	cc                   	int3   
  210753:	cc                   	int3   
  210754:	cc                   	int3   
  210755:	cc                   	int3   
  210756:	cc                   	int3   
  210757:	cc                   	int3   
  210758:	cc                   	int3   
  210759:	cc                   	int3   
  21075a:	cc                   	int3   
  21075b:	cc                   	int3   
  21075c:	cc                   	int3   
  21075d:	cc                   	int3   
  21075e:	cc                   	int3   
  21075f:	cc                   	int3   

0000000000210760 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17h9071124c16ba07b4E>:
                            fn $Flag(&self) -> bool {
  210760:	48 83 ec 18          	sub    $0x18,%rsp
  210764:	48 89 3c 24          	mov    %rdi,(%rsp)
  210768:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21076d:	31 c0                	xor    %eax,%eax
  21076f:	a8 01                	test   $0x1,%al
  210771:	75 1b                	jne    21078e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17h9071124c16ba07b4E+0x2e>
  210773:	48 8b 04 24          	mov    (%rsp),%rax
  210777:	8b 00                	mov    (%rax),%eax
  210779:	25 00 00 00 80       	and    $0x80000000,%eax
  21077e:	3d 00 00 00 80       	cmp    $0x80000000,%eax
  210783:	0f 94 c0             	sete   %al
  210786:	24 01                	and    $0x1,%al
  210788:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21078c:	eb 05                	jmp    210793 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17h9071124c16ba07b4E+0x33>
  21078e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  210793:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210797:	24 01                	and    $0x1,%al
  210799:	0f b6 c0             	movzbl %al,%eax
  21079c:	48 83 c4 18          	add    $0x18,%rsp
  2107a0:	c3                   	retq   
  2107a1:	cc                   	int3   
  2107a2:	cc                   	int3   
  2107a3:	cc                   	int3   
  2107a4:	cc                   	int3   
  2107a5:	cc                   	int3   
  2107a6:	cc                   	int3   
  2107a7:	cc                   	int3   
  2107a8:	cc                   	int3   
  2107a9:	cc                   	int3   
  2107aa:	cc                   	int3   
  2107ab:	cc                   	int3   
  2107ac:	cc                   	int3   
  2107ad:	cc                   	int3   
  2107ae:	cc                   	int3   
  2107af:	cc                   	int3   

00000000002107b0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d80ed39fc949e73E>:
            fn deref(&self) -> &$T {
  2107b0:	48 83 ec 18          	sub    $0x18,%rsp
  2107b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2107b9:	48 8d 05 b0 61 01 00 	lea    0x161b0(%rip),%rax        # 226970 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hfa9b9dd42f37b5e5E>
  2107c0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2107c5:	48 8d 3d a4 61 01 00 	lea    0x161a4(%rip),%rdi        # 226970 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hfa9b9dd42f37b5e5E>
  2107cc:	e8 4f 87 ff ff       	callq  208f20 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd141465524788741E>
  2107d1:	48 89 04 24          	mov    %rax,(%rsp)
  2107d5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  2107d9:	48 83 c4 18          	add    $0x18,%rsp
  2107dd:	c3                   	retq   
  2107de:	cc                   	int3   
  2107df:	cc                   	int3   

00000000002107e0 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$7enabled17hffaa0d0f99793618E>:
        }
    );
}

impl log::Log for KernelLogger {
    fn enabled(&self, _meta: &Metadata) -> bool {
  2107e0:	48 83 ec 10          	sub    $0x10,%rsp
  2107e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2107e8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        // TOOD: Add level based filtering
        true
    }
  2107ed:	b0 01                	mov    $0x1,%al
  2107ef:	24 01                	and    $0x1,%al
  2107f1:	0f b6 c0             	movzbl %al,%eax
  2107f4:	48 83 c4 10          	add    $0x10,%rsp
  2107f8:	c3                   	retq   
  2107f9:	cc                   	int3   
  2107fa:	cc                   	int3   
  2107fb:	cc                   	int3   
  2107fc:	cc                   	int3   
  2107fd:	cc                   	int3   
  2107fe:	cc                   	int3   
  2107ff:	cc                   	int3   

0000000000210800 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E>:

    fn log(&self, record: &Record) {
  210800:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
  210807:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  21080e:	00 
  21080f:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  210816:	00 
  210817:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  21081e:	00 
        // TODO: Add level wise filtering and support multiple channels
        print_uart!(
  21081f:	48 8d 3d 29 06 ff ff 	lea    -0xf9d7(%rip),%rdi        # 200e4f <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E>
  210826:	e8 35 13 00 00       	callq  211b60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>
  21082b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  210832:	00 
  210833:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21083a:	00 
  21083b:	e8 30 53 ff ff       	callq  205b70 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E>
  210840:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  210844:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  210848:	a8 01                	test   $0x1,%al
  21084a:	75 0a                	jne    210856 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x56>
  21084c:	eb 00                	jmp    21084e <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x4e>
            "{:20} {:5} {}",
            record.target(),
            record.level(),
            record.args()
        );
    }
  21084e:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
  210855:	c3                   	retq   
        print_uart!(
  210856:	48 8d 3d f2 05 ff ff 	lea    -0xfa0e(%rip),%rdi        # 200e4f <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E>
  21085d:	e8 fe 12 00 00       	callq  211b60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>
  210862:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210867:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21086c:	e8 af 4d ff ff       	callq  205620 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E>
  210871:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  210876:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  21087b:	48 8d 35 2e ed 00 00 	lea    0xed2e(%rip),%rsi        # 21f5b0 <memset+0x1af0>
  210882:	e8 99 4f ff ff       	callq  205820 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E>
  210887:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21088c:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  210893:	00 
  210894:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  210899:	e8 c2 75 ff ff       	callq  207e60 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec36eaefd6fec6a2E>
  21089e:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  2108a5:	00 
  2108a6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2108ad:	00 
  2108ae:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2108b5:	00 
  2108b6:	e8 45 76 ff ff       	callq  207f00 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h54ef8133560726b4E>
  2108bb:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2108c0:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2108c7:	00 
            record.target(),
  2108c8:	e8 43 54 ff ff       	callq  205d10 <_ZN3log6Record6target17h7f5fb57e8f9ebb4eE>
  2108cd:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  2108d4:	00 
  2108d5:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  2108dc:	00 
  2108dd:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2108e4:	00 
            record.level(),
  2108e5:	e8 06 54 ff ff       	callq  205cf0 <_ZN3log6Record5level17h9ec9075ad9e549b9E>
  2108ea:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2108f1:	00 
  2108f2:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2108f9:	00 
            record.args()
  2108fa:	e8 e1 53 ff ff       	callq  205ce0 <_ZN3log6Record4args17h00da0becc25b6d80E>
  2108ff:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  210906:	00 
        print_uart!(
  210907:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
  21090e:	00 
  21090f:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  210916:	00 
  210917:	48 8d 84 24 28 01 00 	lea    0x128(%rsp),%rax
  21091e:	00 
  21091f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  210926:	00 
  210927:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  21092e:	00 
  21092f:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  210936:	00 
  210937:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  21093e:	00 
  21093f:	48 89 bc 24 50 01 00 	mov    %rdi,0x150(%rsp)
  210946:	00 
  210947:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  21094e:	00 
  21094f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  210954:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21095b:	00 
  21095c:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  210963:	00 
  210964:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  210969:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  210970:	00 
  210971:	48 8b 35 68 fe 00 00 	mov    0xfe68(%rip),%rsi        # 2207e0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  210978:	e8 a3 8c 00 00       	callq  219620 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  21097d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  210982:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  210987:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21098c:	48 8b 35 65 fe 00 00 	mov    0xfe65(%rip),%rsi        # 2207f8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  210993:	e8 38 2d 00 00       	callq  2136d0 <_ZN4core3fmt10ArgumentV13new17hbc228f159b345650E>
  210998:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21099d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2109a2:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2109a7:	48 8d 35 22 29 00 00 	lea    0x2922(%rip),%rsi        # 2132d0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h31b8a77bb6ae052eE>
  2109ae:	e8 fd 2b 00 00       	callq  2135b0 <_ZN4core3fmt10ArgumentV13new17h6660be7cf414b0ecE>
  2109b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2109b8:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2109bd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2109c2:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2109c7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2109cc:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  2109d1:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  2109d6:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  2109db:	4c 89 84 24 d0 00 00 	mov    %r8,0xd0(%rsp)
  2109e2:	00 
  2109e3:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  2109ea:	00 
  2109eb:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  2109f2:	00 
  2109f3:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  2109fa:	00 
  2109fb:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  210a02:	00 
  210a03:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  210a0a:	00 
  210a0b:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  210a12:	00 
  210a13:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210a18:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210a1d:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  210a24:	00 
  210a25:	48 8d 35 9c eb 00 00 	lea    0xeb9c(%rip),%rsi        # 21f5c8 <memset+0x1b08>
  210a2c:	ba 04 00 00 00       	mov    $0x4,%edx
  210a31:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  210a37:	4c 8d 0d 92 02 ff ff 	lea    -0xfd6e(%rip),%r9        # 200cd0 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17h7cd3f72d791594d9E+0x14>
  210a3e:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  210a45:	00 
  210a46:	e8 55 44 ff ff       	callq  204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  210a4b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  210a50:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  210a57:	00 
  210a58:	e8 23 75 ff ff       	callq  207f80 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>
  210a5d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210a61:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210a65:	0f b6 f8             	movzbl %al,%edi
  210a68:	83 e7 01             	and    $0x1,%edi
  210a6b:	48 8d 35 3e eb 00 00 	lea    0xeb3e(%rip),%rsi        # 21f5b0 <memset+0x1af0>
  210a72:	e8 d9 1a 00 00       	callq  212550 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E>
  210a77:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  210a7e:	00 
  210a7f:	e8 9c 72 00 00       	callq  217d20 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17h26685a7b93c5d71bE>
  210a84:	e9 c5 fd ff ff       	jmpq   21084e <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x4e>
  210a89:	cc                   	int3   
  210a8a:	cc                   	int3   
  210a8b:	cc                   	int3   
  210a8c:	cc                   	int3   
  210a8d:	cc                   	int3   
  210a8e:	cc                   	int3   
  210a8f:	cc                   	int3   

0000000000210a90 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$5flush17he7f1c735fab399deE>:

    fn flush(&self) {
  210a90:	50                   	push   %rax
  210a91:	48 89 3c 24          	mov    %rdi,(%rsp)
        // TODO: Will be used in future for dmesg
    }
  210a95:	58                   	pop    %rax
  210a96:	c3                   	retq   
  210a97:	cc                   	int3   
  210a98:	cc                   	int3   
  210a99:	cc                   	int3   
  210a9a:	cc                   	int3   
  210a9b:	cc                   	int3   
  210a9c:	cc                   	int3   
  210a9d:	cc                   	int3   
  210a9e:	cc                   	int3   
  210a9f:	cc                   	int3   

0000000000210aa0 <_ZN9r3_kernel7logging4init17h8bae91a50c531e46E>:
}

static KERNEL_LOGGER: KernelLogger = KernelLogger;

pub fn init() {
  210aa0:	50                   	push   %rax
    // unuse the result
    let _ = log::set_logger(&KERNEL_LOGGER);
  210aa1:	48 8d 3d d0 02 ff ff 	lea    -0xfd30(%rip),%rdi        # 200d78 <_ZN9r3_kernel7logging13KERNEL_LOGGER17h6e20b121c23bb05dE>
  210aa8:	48 8d 35 71 eb 00 00 	lea    0xeb71(%rip),%rsi        # 21f620 <memset+0x1b60>
  210aaf:	e8 5c 7b 00 00       	callq  218610 <_ZN3log10set_logger17ha1c2327ac82037ebE>
    log::set_max_level(LevelFilter::Debug);
  210ab4:	48 c7 04 24 04 00 00 	movq   $0x4,(%rsp)
  210abb:	00 
  210abc:	48 8b 3c 24          	mov    (%rsp),%rdi
  210ac0:	e8 eb 51 ff ff       	callq  205cb0 <_ZN3log13set_max_level17hde76aa4dc95feb85E>
}
  210ac5:	58                   	pop    %rax
  210ac6:	c3                   	retq   
  210ac7:	cc                   	int3   
  210ac8:	cc                   	int3   
  210ac9:	cc                   	int3   
  210aca:	cc                   	int3   
  210acb:	cc                   	int3   
  210acc:	cc                   	int3   
  210acd:	cc                   	int3   
  210ace:	cc                   	int3   
  210acf:	cc                   	int3   

0000000000210ad0 <rust_begin_unwind>:

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
  210ad0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  210ad7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    // write the panic info and loop infinitely:
    log::error!("{}", info);
  210adc:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  210ae3:	00 00 
  210ae5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  210aea:	48 8d 35 67 f8 fe ff 	lea    -0x10799(%rip),%rsi        # 200358 <str.0+0x58>
  210af1:	e8 6a 52 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  210af6:	88 44 24 17          	mov    %al,0x17(%rsp)
  210afa:	8a 44 24 17          	mov    0x17(%rsp),%al
  210afe:	a8 01                	test   $0x1,%al
  210b00:	75 09                	jne    210b0b <rust_begin_unwind+0x3b>
  210b02:	eb 00                	jmp    210b04 <rust_begin_unwind+0x34>
  210b04:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  210b09:	eb 4e                	jmp    210b59 <rust_begin_unwind+0x89>
  210b0b:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  210b12:	00 
  210b13:	48 8b 3d 86 fc 00 00 	mov    0xfc86(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  210b1a:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  210b21:	00 
  210b22:	e8 c9 1f 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  210b27:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  210b2e:	00 
  210b2f:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  210b36:	00 
  210b37:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210b3c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  210b41:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  210b46:	e8 15 52 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  210b4b:	88 44 24 16          	mov    %al,0x16(%rsp)
  210b4f:	8a 44 24 16          	mov    0x16(%rsp),%al
  210b53:	24 01                	and    $0x1,%al
  210b55:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  210b59:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  210b5e:	75 02                	jne    210b62 <rust_begin_unwind+0x92>
    loop {}
  210b60:	eb fe                	jmp    210b60 <rust_begin_unwind+0x90>
    log::error!("{}", info);
  210b62:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  210b67:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  210b6c:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  210b71:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
  210b78:	00 
  210b79:	48 8d 35 20 27 00 00 	lea    0x2720(%rip),%rsi        # 2132a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7e2a421563bf9ca4E>
  210b80:	e8 0b 29 00 00       	callq  213490 <_ZN4core3fmt10ArgumentV13new17h3a05cfc231554408E>
  210b85:	48 89 04 24          	mov    %rax,(%rsp)
  210b89:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210b8e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210b93:	48 8b 0c 24          	mov    (%rsp),%rcx
  210b97:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  210b9c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210ba1:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  210ba6:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  210bab:	48 8d 35 a6 ea 00 00 	lea    0xeaa6(%rip),%rsi        # 21f658 <memset+0x1b98>
  210bb2:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  210bb8:	4c 89 c2             	mov    %r8,%rdx
  210bbb:	e8 40 43 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  210bc0:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  210bc5:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  210bca:	48 8d 15 97 ea 00 00 	lea    0xea97(%rip),%rdx        # 21f668 <memset+0x1ba8>
  210bd1:	e8 3a 7c 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  210bd6:	eb 88                	jmp    210b60 <rust_begin_unwind+0x90>
  210bd8:	cc                   	int3   
  210bd9:	cc                   	int3   
  210bda:	cc                   	int3   
  210bdb:	cc                   	int3   
  210bdc:	cc                   	int3   
  210bdd:	cc                   	int3   
  210bde:	cc                   	int3   
  210bdf:	cc                   	int3   

0000000000210be0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h6957ef6876b66198E>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  210be0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  210be7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210bec:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210bf1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  210bf6:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  210bfb:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  210c00:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  210c05:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  210c0a:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  210c11:	00 
  210c12:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  210c17:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  210c1c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210c21:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  210c26:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  210c2b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  210c30:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // The obtained pointer is valid for writes since the caller must
        // guarantee that it points to the same allocated object as `self`.
        unsafe { intrinsics::offset(self, count) as *mut T }
  210c35:	48 01 c8             	add    %rcx,%rax
  210c38:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210c3d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  210c42:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210c47:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210c4c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210c51:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
  210c56:	48 29 c6             	sub    %rax,%rsi
  210c59:	e8 a2 8d 00 00       	callq  219a00 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  210c5e:	48 89 04 24          	mov    %rax,(%rsp)
  210c62:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210c67:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210c6c:	48 8b 04 24          	mov    (%rsp),%rax
        }
    }
  210c70:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  210c77:	c3                   	retq   
  210c78:	cc                   	int3   
  210c79:	cc                   	int3   
  210c7a:	cc                   	int3   
  210c7b:	cc                   	int3   
  210c7c:	cc                   	int3   
  210c7d:	cc                   	int3   
  210c7e:	cc                   	int3   
  210c7f:	cc                   	int3   

0000000000210c80 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  210c80:	48 83 ec 58          	sub    $0x58,%rsp
  210c84:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  210c89:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  210c8e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  210c93:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  210c98:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  210c9d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  210ca2:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  210ca7:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  210cac:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        if self.start > self.end {
  210cb1:	48 39 f7             	cmp    %rsi,%rdi
  210cb4:	77 11                	ja     210cc7 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x47>
  210cb6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210cbb:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
  210cc0:	48 39 c8             	cmp    %rcx,%rax
  210cc3:	77 3c                	ja     210d01 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x81>
  210cc5:	eb 16                	jmp    210cdd <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x5d>
  210cc7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210ccc:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210cd1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_index_order_fail(self.start, self.end);
  210cd6:	e8 55 a7 00 00       	callq  21b430 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  210cdb:	0f 0b                	ud2    
  210cdd:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  210ce2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  210ce7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210cec:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  210cf1:	e8 ea fe ff ff       	callq  210be0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h6957ef6876b66198E>
  210cf6:	48 89 04 24          	mov    %rax,(%rsp)
  210cfa:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210cff:	eb 16                	jmp    210d17 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x97>
  210d01:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210d06:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  210d0b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
  210d10:	e8 9b a6 00 00       	callq  21b3b0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  210d15:	0f 0b                	ud2    
  210d17:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210d1c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210d20:	48 83 c4 58          	add    $0x58,%rsp
  210d24:	c3                   	retq   
  210d25:	cc                   	int3   
  210d26:	cc                   	int3   
  210d27:	cc                   	int3   
  210d28:	cc                   	int3   
  210d29:	cc                   	int3   
  210d2a:	cc                   	int3   
  210d2b:	cc                   	int3   
  210d2c:	cc                   	int3   
  210d2d:	cc                   	int3   
  210d2e:	cc                   	int3   
  210d2f:	cc                   	int3   

0000000000210d30 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5113fb0e44857482E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  210d30:	48 83 ec 38          	sub    $0x38,%rsp
  210d34:	49 89 c8             	mov    %rcx,%r8
  210d37:	48 89 d1             	mov    %rdx,%rcx
  210d3a:	48 89 f2             	mov    %rsi,%rdx
  210d3d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210d42:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  210d47:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        (0..self.end).index_mut(slice)
  210d4c:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  210d53:	00 00 
  210d55:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210d5a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210d5f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  210d64:	e8 17 ff ff ff       	callq  210c80 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E>
  210d69:	48 89 04 24          	mov    %rax,(%rsp)
  210d6d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210d72:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210d77:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210d7b:	48 83 c4 38          	add    $0x38,%rsp
  210d7f:	c3                   	retq   

0000000000210d80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h8180bf909f032c76E>:
            (0, Some(0))
        }
    }

    #[inline]
    fn nth(&mut self, n: usize) -> Option<A> {
  210d80:	48 83 ec 28          	sub    $0x28,%rsp
  210d84:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210d89:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.spec_nth(n)
  210d8e:	e8 cd 00 00 00       	callq  210e60 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E>
  210d93:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210d98:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  210d9d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210da2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  210da7:	48 83 c4 28          	add    $0x28,%rsp
  210dab:	c3                   	retq   
  210dac:	cc                   	int3   
  210dad:	cc                   	int3   
  210dae:	cc                   	int3   
  210daf:	cc                   	int3   

0000000000210db0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h62de824db7bc4359E>:
    fn next(&mut self) -> Option<A> {
  210db0:	48 83 ec 18          	sub    $0x18,%rsp
  210db4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.spec_next()
  210db9:	e8 d2 01 00 00       	callq  210f90 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hcab601b22c76204dE>
  210dbe:	48 89 04 24          	mov    %rax,(%rsp)
  210dc2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210dc7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210dcc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210dd0:	48 83 c4 18          	add    $0x18,%rsp
  210dd4:	c3                   	retq   
  210dd5:	cc                   	int3   
  210dd6:	cc                   	int3   
  210dd7:	cc                   	int3   
  210dd8:	cc                   	int3   
  210dd9:	cc                   	int3   
  210dda:	cc                   	int3   
  210ddb:	cc                   	int3   
  210ddc:	cc                   	int3   
  210ddd:	cc                   	int3   
  210dde:	cc                   	int3   
  210ddf:	cc                   	int3   

0000000000210de0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hde79bfc4fb025d57E>:
    fn next(&mut self) -> Option<A> {
  210de0:	48 83 ec 18          	sub    $0x18,%rsp
  210de4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.spec_next()
  210de9:	e8 42 02 00 00       	callq  211030 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE>
  210dee:	48 89 04 24          	mov    %rax,(%rsp)
  210df2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210df7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210dfc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210e00:	48 83 c4 18          	add    $0x18,%rsp
  210e04:	c3                   	retq   
  210e05:	cc                   	int3   
  210e06:	cc                   	int3   
  210e07:	cc                   	int3   
  210e08:	cc                   	int3   
  210e09:	cc                   	int3   
  210e0a:	cc                   	int3   
  210e0b:	cc                   	int3   
  210e0c:	cc                   	int3   
  210e0d:	cc                   	int3   
  210e0e:	cc                   	int3   
  210e0f:	cc                   	int3   

0000000000210e10 <_ZN4core4iter6traits8iterator8Iterator7step_by17h461eab30fe130befE>:
    fn step_by(self, step: usize) -> StepBy<Self>
  210e10:	48 83 ec 28          	sub    $0x28,%rsp
  210e14:	48 89 f8             	mov    %rdi,%rax
  210e17:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210e1c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  210e21:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  210e26:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
        StepBy::new(self, step)
  210e2b:	e8 b0 23 00 00       	callq  2131e0 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h56fb087f2e5ca990E>
  210e30:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  210e35:	48 83 c4 28          	add    $0x28,%rsp
  210e39:	c3                   	retq   
  210e3a:	cc                   	int3   
  210e3b:	cc                   	int3   
  210e3c:	cc                   	int3   
  210e3d:	cc                   	int3   
  210e3e:	cc                   	int3   
  210e3f:	cc                   	int3   

0000000000210e40 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17haabf9c3393bbf5bcE>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
  210e40:	48 83 ec 10          	sub    $0x10,%rsp
  210e44:	48 89 f2             	mov    %rsi,%rdx
  210e47:	48 89 f8             	mov    %rdi,%rax
  210e4a:	48 89 04 24          	mov    %rax,(%rsp)
  210e4e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
        self
    }
  210e53:	48 83 c4 10          	add    $0x10,%rsp
  210e57:	c3                   	retq   
  210e58:	cc                   	int3   
  210e59:	cc                   	int3   
  210e5a:	cc                   	int3   
  210e5b:	cc                   	int3   
  210e5c:	cc                   	int3   
  210e5d:	cc                   	int3   
  210e5e:	cc                   	int3   
  210e5f:	cc                   	int3   

0000000000210e60 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E>:
    fn spec_nth(&mut self, n: usize) -> Option<T> {
  210e60:	48 83 ec 78          	sub    $0x78,%rsp
  210e64:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  210e69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  210e6e:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  210e73:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
  210e78:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  210e7d:	e8 4e 42 ff ff       	callq  2050d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h3def670cf245a969E>
  210e82:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210e87:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  210e8c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  210e91:	e8 aa 70 00 00       	callq  217f40 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE>
  210e96:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  210e9b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  210ea0:	c6 44 24 67 01       	movb   $0x1,0x67(%rsp)
  210ea5:	48 83 7c 24 48 01    	cmpq   $0x1,0x48(%rsp)
  210eab:	75 28                	jne    210ed5 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x75>
  210ead:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210eb2:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  210eb7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  210ebc:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
            if plus_n < self.end {
  210ec1:	48 83 c6 08          	add    $0x8,%rsi
  210ec5:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  210eca:	e8 71 6f 00 00       	callq  217e40 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u64$GT$2lt17h4ee5728252d75484E>
  210ecf:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  210ed3:	eb 0a                	jmp    210edf <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x7f>
        }
  210ed5:	48 83 7c 24 48 01    	cmpq   $0x1,0x48(%rsp)
  210edb:	74 69                	je     210f46 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xe6>
  210edd:	eb 6e                	jmp    210f4d <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xed>
  210edf:	8a 44 24 1f          	mov    0x1f(%rsp),%al
            if plus_n < self.end {
  210ee3:	a8 01                	test   $0x1,%al
  210ee5:	75 04                	jne    210eeb <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x8b>
  210ee7:	eb 00                	jmp    210ee9 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x89>
        }
  210ee9:	eb 59                	jmp    210f44 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xe4>
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
  210eeb:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  210ef0:	e8 db 41 ff ff       	callq  2050d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h3def670cf245a969E>
  210ef5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210efa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210eff:	be 01 00 00 00       	mov    $0x1,%esi
  210f04:	e8 b7 70 00 00       	callq  217fc0 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h5cf25f73d8f7eb3eE>
  210f09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210f0e:	eb 00                	jmp    210f10 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xb0>
  210f10:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210f15:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  210f1a:	48 89 08             	mov    %rcx,(%rax)
                return Some(plus_n);
  210f1d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  210f22:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  210f27:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  210f2e:	00 00 
        }
  210f30:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
    }
  210f35:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  210f3a:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  210f3f:	48 83 c4 78          	add    $0x78,%rsp
  210f43:	c3                   	retq   
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
  210f44:	eb 8f                	jmp    210ed5 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x75>
        }
  210f46:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  210f4b:	75 19                	jne    210f66 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x106>
  210f4d:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  210f52:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
        self.start = self.end.clone();
  210f57:	48 83 c7 08          	add    $0x8,%rdi
  210f5b:	e8 70 41 ff ff       	callq  2050d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h3def670cf245a969E>
  210f60:	48 89 04 24          	mov    %rax,(%rsp)
  210f64:	eb 02                	jmp    210f68 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x108>
        }
  210f66:	eb e5                	jmp    210f4d <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xed>
        self.start = self.end.clone();
  210f68:	eb 00                	jmp    210f6a <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0x10a>
  210f6a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210f6f:	48 8b 0c 24          	mov    (%rsp),%rcx
  210f73:	48 89 08             	mov    %rcx,(%rax)
        None
  210f76:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  210f7d:	00 00 
    }
  210f7f:	eb b4                	jmp    210f35 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$8spec_nth17h46d88934a8bb4381E+0xd5>
  210f81:	cc                   	int3   
  210f82:	cc                   	int3   
  210f83:	cc                   	int3   
  210f84:	cc                   	int3   
  210f85:	cc                   	int3   
  210f86:	cc                   	int3   
  210f87:	cc                   	int3   
  210f88:	cc                   	int3   
  210f89:	cc                   	int3   
  210f8a:	cc                   	int3   
  210f8b:	cc                   	int3   
  210f8c:	cc                   	int3   
  210f8d:	cc                   	int3   
  210f8e:	cc                   	int3   
  210f8f:	cc                   	int3   

0000000000210f90 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hcab601b22c76204dE>:
    fn spec_next(&mut self) -> Option<T> {
  210f90:	48 83 ec 48          	sub    $0x48,%rsp
  210f94:	48 89 fe             	mov    %rdi,%rsi
  210f97:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210f9c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        if self.start < self.end {
  210fa1:	48 89 f7             	mov    %rsi,%rdi
  210fa4:	48 83 c6 08          	add    $0x8,%rsi
  210fa8:	e8 93 6e 00 00       	callq  217e40 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u64$GT$2lt17h4ee5728252d75484E>
  210fad:	88 44 24 27          	mov    %al,0x27(%rsp)
  210fb1:	8a 44 24 27          	mov    0x27(%rsp),%al
  210fb5:	a8 01                	test   $0x1,%al
  210fb7:	75 0d                	jne    210fc6 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hcab601b22c76204dE+0x36>
  210fb9:	eb 00                	jmp    210fbb <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hcab601b22c76204dE+0x2b>
            None
  210fbb:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  210fc2:	00 00 
        if self.start < self.end {
  210fc4:	eb 4d                	jmp    211013 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hcab601b22c76204dE+0x83>
  210fc6:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
  210fcb:	e8 00 41 ff ff       	callq  2050d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u64$GT$5clone17h3def670cf245a969E>
  210fd0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210fd5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210fda:	be 01 00 00 00       	mov    $0x1,%esi
  210fdf:	e8 dc 6f 00 00       	callq  217fc0 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h5cf25f73d8f7eb3eE>
  210fe4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210fe9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  210fee:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  210ff3:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(mem::replace(&mut self.start, n))
  210ff8:	e8 c3 68 ff ff       	callq  2078c0 <_ZN4core3mem7replace17h8091d9534b10fb61E>
  210ffd:	48 89 04 24          	mov    %rax,(%rsp)
  211001:	48 8b 04 24          	mov    (%rsp),%rax
  211005:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21100a:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  211011:	00 00 
    }
  211013:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  211018:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21101d:	48 83 c4 48          	add    $0x48,%rsp
  211021:	c3                   	retq   
  211022:	cc                   	int3   
  211023:	cc                   	int3   
  211024:	cc                   	int3   
  211025:	cc                   	int3   
  211026:	cc                   	int3   
  211027:	cc                   	int3   
  211028:	cc                   	int3   
  211029:	cc                   	int3   
  21102a:	cc                   	int3   
  21102b:	cc                   	int3   
  21102c:	cc                   	int3   
  21102d:	cc                   	int3   
  21102e:	cc                   	int3   
  21102f:	cc                   	int3   

0000000000211030 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE>:
    fn spec_next(&mut self) -> Option<T> {
  211030:	48 83 ec 48          	sub    $0x48,%rsp
  211034:	48 89 fe             	mov    %rdi,%rsi
  211037:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21103c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        if self.start < self.end {
  211041:	48 89 f7             	mov    %rsi,%rdi
  211044:	48 83 c6 08          	add    $0x8,%rsi
  211048:	e8 13 6e 00 00       	callq  217e60 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17hfaed2971c47496d3E>
  21104d:	88 44 24 27          	mov    %al,0x27(%rsp)
  211051:	8a 44 24 27          	mov    0x27(%rsp),%al
  211055:	a8 01                	test   $0x1,%al
  211057:	75 0d                	jne    211066 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x36>
  211059:	eb 00                	jmp    21105b <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x2b>
            None
  21105b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  211062:	00 00 
        if self.start < self.end {
  211064:	eb 4d                	jmp    2110b3 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x83>
  211066:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
  21106b:	e8 70 40 ff ff       	callq  2050e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17hb2fa8fb2c422790fE>
  211070:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211075:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21107a:	be 01 00 00 00       	mov    $0x1,%esi
  21107f:	e8 7c 6f 00 00       	callq  218000 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h80a022844752abc3E>
  211084:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211089:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21108e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  211093:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(mem::replace(&mut self.start, n))
  211098:	e8 e3 67 ff ff       	callq  207880 <_ZN4core3mem7replace17h73afdf1293179534E>
  21109d:	48 89 04 24          	mov    %rax,(%rsp)
  2110a1:	48 8b 04 24          	mov    (%rsp),%rax
  2110a5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2110aa:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  2110b1:	00 00 
    }
  2110b3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2110b8:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2110bd:	48 83 c4 48          	add    $0x48,%rsp
  2110c1:	c3                   	retq   
  2110c2:	cc                   	int3   
  2110c3:	cc                   	int3   
  2110c4:	cc                   	int3   
  2110c5:	cc                   	int3   
  2110c6:	cc                   	int3   
  2110c7:	cc                   	int3   
  2110c8:	cc                   	int3   
  2110c9:	cc                   	int3   
  2110ca:	cc                   	int3   
  2110cb:	cc                   	int3   
  2110cc:	cc                   	int3   
  2110cd:	cc                   	int3   
  2110ce:	cc                   	int3   
  2110cf:	cc                   	int3   

00000000002110d0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h20cb731e70ea6ee0E>:
    }
}

#[stable(feature = "collections_range", since = "1.28.0")]
impl<T> RangeBounds<T> for Range<T> {
    fn start_bound(&self) -> Bound<&T> {
  2110d0:	48 83 ec 18          	sub    $0x18,%rsp
  2110d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Included(&self.start)
  2110d9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2110de:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  2110e5:	00 
    }
  2110e6:	48 8b 04 24          	mov    (%rsp),%rax
  2110ea:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2110ef:	48 83 c4 18          	add    $0x18,%rsp
  2110f3:	c3                   	retq   
  2110f4:	cc                   	int3   
  2110f5:	cc                   	int3   
  2110f6:	cc                   	int3   
  2110f7:	cc                   	int3   
  2110f8:	cc                   	int3   
  2110f9:	cc                   	int3   
  2110fa:	cc                   	int3   
  2110fb:	cc                   	int3   
  2110fc:	cc                   	int3   
  2110fd:	cc                   	int3   
  2110fe:	cc                   	int3   
  2110ff:	cc                   	int3   

0000000000211100 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h47dca5317176713dE>:
    fn end_bound(&self) -> Bound<&T> {
  211100:	48 83 ec 18          	sub    $0x18,%rsp
  211104:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Excluded(&self.end)
  211109:	48 83 c7 08          	add    $0x8,%rdi
  21110d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211112:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  211119:	00 
    }
  21111a:	48 8b 04 24          	mov    (%rsp),%rax
  21111e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211123:	48 83 c4 18          	add    $0x18,%rsp
  211127:	c3                   	retq   
  211128:	cc                   	int3   
  211129:	cc                   	int3   
  21112a:	cc                   	int3   
  21112b:	cc                   	int3   
  21112c:	cc                   	int3   
  21112d:	cc                   	int3   
  21112e:	cc                   	int3   
  21112f:	cc                   	int3   

0000000000211130 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5ccb660a8b622ab1E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  211130:	48 83 ec 18          	sub    $0x18,%rsp
  211134:	48 89 f2             	mov    %rsi,%rdx
  211137:	48 89 f8             	mov    %rdi,%rax
  21113a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21113f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        slice
    }
  211144:	48 83 c4 18          	add    $0x18,%rsp
  211148:	c3                   	retq   
  211149:	cc                   	int3   
  21114a:	cc                   	int3   
  21114b:	cc                   	int3   
  21114c:	cc                   	int3   
  21114d:	cc                   	int3   
  21114e:	cc                   	int3   
  21114f:	cc                   	int3   

0000000000211150 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
  211150:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  211157:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21115c:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  211161:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
  211168:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  21116f:	00 
  211170:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  211177:	00 
    let len = len_utf8(code);
  211178:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  21117f:	e8 4c 04 00 00       	callq  2115d0 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E>
  211184:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21118b:	00 
  21118c:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  211191:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
    match (len, &mut dst[..]) {
  211196:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21119d:	00 
  21119e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2111a3:	48 8d 15 f6 e4 00 00 	lea    0xe4f6(%rip),%rdx        # 21f6a0 <memset+0x1be0>
  2111aa:	e8 31 94 ff ff       	callq  20a5e0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc83c78073ebc3b89E>
  2111af:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2111b4:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2111b9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2111be:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2111c3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  2111c8:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2111cf:	00 
  2111d0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2111d7:	00 
  2111d8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2111df:	00 
  2111e0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2111e7:	00 
  2111e8:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  2111ec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2111f1:	48 83 e8 03          	sub    $0x3,%rax
  2111f5:	77 15                	ja     21120c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
  2111f7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2111fc:	48 8d 0d 89 fb fe ff 	lea    -0x10477(%rip),%rcx        # 200d8c <_ZN9r3_kernel7logging13KERNEL_LOGGER17h6e20b121c23bb05dE+0x14>
  211203:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211207:	48 01 c8             	add    %rcx,%rax
  21120a:	ff e0                	jmpq   *%rax
  21120c:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
  211211:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  211218:	00 
        _ => panic!(
  211219:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  211220:	00 
  211221:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  211228:	00 
  211229:	48 8d 84 24 84 00 00 	lea    0x84(%rsp),%rax
  211230:	00 
  211231:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  211238:	00 
  211239:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  211240:	00 
  211241:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  211248:	00 
  211249:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  211250:	00 
  211251:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  211258:	00 
  211259:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  211260:	00 
  211261:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  211266:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  21126d:	00 
  21126e:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  211275:	00 
  211276:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21127b:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  211282:	00 
  211283:	48 8b 35 46 f5 00 00 	mov    0xf546(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21128a:	e8 01 25 00 00       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  21128f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  211294:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  211299:	e9 21 02 00 00       	jmpq   2114bf <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x36f>
        (1, [a, ..]) => {
  21129e:	48 83 bc 24 a0 00 00 	cmpq   $0x1,0xa0(%rsp)
  2112a5:	00 01 
  2112a7:	0f 83 e2 01 00 00    	jae    21148f <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x33f>
  2112ad:	e9 5a ff ff ff       	jmpq   21120c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (2, [a, b, ..]) => {
  2112b2:	48 83 bc 24 a0 00 00 	cmpq   $0x2,0xa0(%rsp)
  2112b9:	00 02 
  2112bb:	0f 83 80 01 00 00    	jae    211441 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x2f1>
  2112c1:	e9 46 ff ff ff       	jmpq   21120c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (3, [a, b, c, ..]) => {
  2112c6:	48 83 bc 24 a0 00 00 	cmpq   $0x3,0xa0(%rsp)
  2112cd:	00 03 
  2112cf:	0f 83 f2 00 00 00    	jae    2113c7 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x277>
  2112d5:	e9 32 ff ff ff       	jmpq   21120c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (4, [a, b, c, d, ..]) => {
  2112da:	48 83 bc 24 a0 00 00 	cmpq   $0x4,0xa0(%rsp)
  2112e1:	00 04 
  2112e3:	0f 82 23 ff ff ff    	jb     21120c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
  2112e9:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  2112f0:	00 
  2112f1:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  2112f8:	00 
  2112f9:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  211300:	00 
  211301:	48 89 d0             	mov    %rdx,%rax
  211304:	48 83 c0 01          	add    $0x1,%rax
  211308:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21130f:	00 
  211310:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  211317:	00 
  211318:	48 89 c8             	mov    %rcx,%rax
  21131b:	48 83 c0 02          	add    $0x2,%rax
  21131f:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  211326:	00 
  211327:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21132e:	00 
  21132f:	48 89 c7             	mov    %rax,%rdi
  211332:	48 83 c7 03          	add    $0x3,%rdi
  211336:	48 89 bc 24 58 01 00 	mov    %rdi,0x158(%rsp)
  21133d:	00 
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
  21133e:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  211345:	c1 ef 12             	shr    $0x12,%edi
  211348:	83 e7 07             	and    $0x7,%edi
  21134b:	40 80 cf f0          	or     $0xf0,%dil
  21134f:	40 88 3e             	mov    %dil,(%rsi)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
  211352:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  211359:	c1 ee 0c             	shr    $0xc,%esi
  21135c:	83 e6 3f             	and    $0x3f,%esi
  21135f:	40 80 ce 80          	or     $0x80,%sil
  211363:	40 88 72 01          	mov    %sil,0x1(%rdx)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  211367:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  21136e:	c1 ea 06             	shr    $0x6,%edx
  211371:	83 e2 3f             	and    $0x3f,%edx
  211374:	80 ca 80             	or     $0x80,%dl
  211377:	88 51 02             	mov    %dl,0x2(%rcx)
            *d = (code & 0x3F) as u8 | TAG_CONT;
  21137a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  211381:	83 e1 3f             	and    $0x3f,%ecx
  211384:	80 c9 80             	or     $0x80,%cl
  211387:	88 48 03             	mov    %cl,0x3(%rax)
  21138a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21138f:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
        ),
    };
    &mut dst[..len]
  211394:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21139b:	00 
  21139c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2113a3:	00 
  2113a4:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  2113ab:	00 
  2113ac:	48 8d 0d 05 e3 00 00 	lea    0xe305(%rip),%rcx        # 21f6b8 <memset+0x1bf8>
  2113b3:	e8 d8 91 ff ff       	callq  20a590 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb66ea3ee7d7e4e38E>
  2113b8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2113bd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2113c2:	e9 e6 00 00 00       	jmpq   2114ad <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x35d>
        (3, [a, b, c, ..]) => {
  2113c7:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  2113ce:	00 
  2113cf:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  2113d6:	00 
  2113d7:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2113de:	00 
  2113df:	48 89 c8             	mov    %rcx,%rax
  2113e2:	48 83 c0 01          	add    $0x1,%rax
  2113e6:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2113ed:	00 
  2113ee:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2113f5:	00 
  2113f6:	48 89 c6             	mov    %rax,%rsi
  2113f9:	48 83 c6 02          	add    $0x2,%rsi
  2113fd:	48 89 b4 24 70 01 00 	mov    %rsi,0x170(%rsp)
  211404:	00 
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
  211405:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  21140c:	c1 ee 0c             	shr    $0xc,%esi
  21140f:	83 e6 0f             	and    $0xf,%esi
  211412:	40 80 ce e0          	or     $0xe0,%sil
  211416:	40 88 32             	mov    %sil,(%rdx)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  211419:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  211420:	c1 ea 06             	shr    $0x6,%edx
  211423:	83 e2 3f             	and    $0x3f,%edx
  211426:	80 ca 80             	or     $0x80,%dl
  211429:	88 51 01             	mov    %dl,0x1(%rcx)
            *c = (code & 0x3F) as u8 | TAG_CONT;
  21142c:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  211433:	83 e1 3f             	and    $0x3f,%ecx
  211436:	80 c9 80             	or     $0x80,%cl
  211439:	88 48 02             	mov    %cl,0x2(%rax)
        }
  21143c:	e9 49 ff ff ff       	jmpq   21138a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
        (2, [a, b, ..]) => {
  211441:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  211448:	00 
  211449:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  211450:	00 
  211451:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  211458:	00 
  211459:	48 89 c2             	mov    %rax,%rdx
  21145c:	48 83 c2 01          	add    $0x1,%rdx
  211460:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  211467:	00 
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
  211468:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  21146f:	c1 ea 06             	shr    $0x6,%edx
  211472:	83 e2 1f             	and    $0x1f,%edx
  211475:	80 ca c0             	or     $0xc0,%dl
  211478:	88 11                	mov    %dl,(%rcx)
            *b = (code & 0x3F) as u8 | TAG_CONT;
  21147a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  211481:	83 e1 3f             	and    $0x3f,%ecx
  211484:	80 c9 80             	or     $0x80,%cl
  211487:	88 48 01             	mov    %cl,0x1(%rax)
        }
  21148a:	e9 fb fe ff ff       	jmpq   21138a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
        (1, [a, ..]) => {
  21148f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  211496:	00 
  211497:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  21149e:	00 
            *a = code as u8;
  21149f:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  2114a6:	88 08                	mov    %cl,(%rax)
        }
  2114a8:	e9 dd fe ff ff       	jmpq   21138a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
  2114ad:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2114b2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  2114b7:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  2114be:	c3                   	retq   
  2114bf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        _ => panic!(
  2114c4:	48 8b 35 35 f3 00 00 	mov    0xf335(%rip),%rsi        # 220800 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  2114cb:	e8 20 23 00 00       	callq  2137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  2114d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2114d5:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2114da:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2114df:	48 8b 35 ea f2 00 00 	mov    0xf2ea(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2114e6:	e8 a5 22 00 00       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  2114eb:	48 89 04 24          	mov    %rax,(%rsp)
  2114ef:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2114f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2114f9:	48 8b 0c 24          	mov    (%rsp),%rcx
  2114fd:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  211502:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  211507:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21150c:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  211511:	4c 89 84 24 d8 00 00 	mov    %r8,0xd8(%rsp)
  211518:	00 
  211519:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  211520:	00 
  211521:	48 89 b4 24 e8 00 00 	mov    %rsi,0xe8(%rsp)
  211528:	00 
  211529:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  211530:	00 
  211531:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  211538:	00 
  211539:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  211540:	00 
  211541:	48 8d 8c 24 d8 00 00 	lea    0xd8(%rsp),%rcx
  211548:	00 
  211549:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  211550:	00 
  211551:	48 8d 35 78 e1 00 00 	lea    0xe178(%rip),%rsi        # 21f6d0 <memset+0x1c10>
  211558:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  21155e:	4c 89 c2             	mov    %r8,%rdx
  211561:	e8 9a 39 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  211566:	48 8d 35 93 e1 00 00 	lea    0xe193(%rip),%rsi        # 21f700 <memset+0x1c40>
  21156d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  211574:	00 
  211575:	e8 86 9b 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21157a:	0f 0b                	ud2    
  21157c:	cc                   	int3   
  21157d:	cc                   	int3   
  21157e:	cc                   	int3   
  21157f:	cc                   	int3   

0000000000211580 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817ha8814ecebb05de4fE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
  211580:	48 83 ec 38          	sub    $0x38,%rsp
  211584:	89 7c 24 24          	mov    %edi,0x24(%rsp)
  211588:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21158d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
  211592:	e8 b9 fb ff ff       	callq  211150 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E>
  211597:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21159c:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2115a1:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2115a6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2115ab:	e8 f0 3d 00 00       	callq  2153a0 <_ZN4core3str8converts23from_utf8_unchecked_mut17h954742d39eb3e2cbE>
  2115b0:	48 89 04 24          	mov    %rax,(%rsp)
  2115b4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2115b9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2115be:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2115c2:	48 83 c4 38          	add    $0x38,%rsp
  2115c6:	c3                   	retq   
  2115c7:	cc                   	int3   
  2115c8:	cc                   	int3   
  2115c9:	cc                   	int3   
  2115ca:	cc                   	int3   
  2115cb:	cc                   	int3   
  2115cc:	cc                   	int3   
  2115cd:	cc                   	int3   
  2115ce:	cc                   	int3   
  2115cf:	cc                   	int3   

00000000002115d0 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E>:
const fn len_utf8(code: u32) -> usize {
  2115d0:	48 83 ec 18          	sub    $0x18,%rsp
  2115d4:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  2115d8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
    if code < MAX_ONE_B {
  2115dc:	81 ff 80 00 00 00    	cmp    $0x80,%edi
  2115e2:	72 0d                	jb     2115f1 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x21>
  2115e4:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_TWO_B {
  2115e8:	3d 00 08 00 00       	cmp    $0x800,%eax
  2115ed:	72 22                	jb     211611 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x41>
  2115ef:	eb 13                	jmp    211604 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x34>
        1
  2115f1:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  2115f8:	00 00 
}
  2115fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2115ff:	48 83 c4 18          	add    $0x18,%rsp
  211603:	c3                   	retq   
  211604:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_THREE_B {
  211608:	3d 00 00 01 00       	cmp    $0x10000,%eax
  21160d:	72 18                	jb     211627 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x57>
  21160f:	eb 0b                	jmp    21161c <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x4c>
        2
  211611:	48 c7 44 24 08 02 00 	movq   $0x2,0x8(%rsp)
  211618:	00 00 
    if code < MAX_ONE_B {
  21161a:	eb de                	jmp    2115fa <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x2a>
        4
  21161c:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  211623:	00 00 
    } else if code < MAX_THREE_B {
  211625:	eb 09                	jmp    211630 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x60>
        3
  211627:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
  21162e:	00 00 
    } else if code < MAX_TWO_B {
  211630:	eb e8                	jmp    21161a <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x4a>
  211632:	cc                   	int3   
  211633:	cc                   	int3   
  211634:	cc                   	int3   
  211635:	cc                   	int3   
  211636:	cc                   	int3   
  211637:	cc                   	int3   
  211638:	cc                   	int3   
  211639:	cc                   	int3   
  21163a:	cc                   	int3   
  21163b:	cc                   	int3   
  21163c:	cc                   	int3   
  21163d:	cc                   	int3   
  21163e:	cc                   	int3   
  21163f:	cc                   	int3   

0000000000211640 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE>:
}

impl UART {
    // set UART in loopback mode and check if same data written is read
    // as it is, if not, the chip is faulty.
    fn chip_works_fine(port_4: &Port, port_0: &Port) -> bool {
  211640:	48 83 ec 38          	sub    $0x38,%rsp
  211644:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  211649:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21164e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211653:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        port_4.write_u8(X86_COM_PORT_LOOPBACK_MODE);
  211658:	be 1b 00 00 00       	mov    $0x1b,%esi
  21165d:	e8 ee 0a 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  211662:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // write some dummy byte
        port_0.write_u8(0xaf);
  211667:	be af 00 00 00       	mov    $0xaf,%esi
  21166c:	e8 df 0a 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  211671:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // try reading the same byte:
        match port_0.read_u8() {
  211676:	e8 b5 0a 00 00       	callq  212130 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>
  21167b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21167f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211683:	3c af                	cmp    $0xaf,%al
  211685:	75 11                	jne    211698 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x58>
  211687:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            0xaf => {
                // set chip in normal mode
                port_4.write_u8(0x0f);
  21168c:	be 0f 00 00 00       	mov    $0xf,%esi
  211691:	e8 ba 0a 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  211696:	eb 13                	jmp    2116ab <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x6b>
                return true;
            }
            _ => return false,
  211698:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
        }
    }
  21169d:	8a 44 24 27          	mov    0x27(%rsp),%al
  2116a1:	24 01                	and    $0x1,%al
  2116a3:	0f b6 c0             	movzbl %al,%eax
  2116a6:	48 83 c4 38          	add    $0x38,%rsp
  2116aa:	c3                   	retq   
                return true;
  2116ab:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  2116b0:	eb eb                	jmp    21169d <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x5d>
  2116b2:	cc                   	int3   
  2116b3:	cc                   	int3   
  2116b4:	cc                   	int3   
  2116b5:	cc                   	int3   
  2116b6:	cc                   	int3   
  2116b7:	cc                   	int3   
  2116b8:	cc                   	int3   
  2116b9:	cc                   	int3   
  2116ba:	cc                   	int3   
  2116bb:	cc                   	int3   
  2116bc:	cc                   	int3   
  2116bd:	cc                   	int3   
  2116be:	cc                   	int3   
  2116bf:	cc                   	int3   

00000000002116c0 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E>:

    pub fn new() -> Option<Self> {
  2116c0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  2116c7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2116cc:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2116d1:	bf f8 03 00 00       	mov    $0x3f8,%edi
  2116d6:	31 f6                	xor    %esi,%esi
        // configuration
        let port_0 = Port::new(X86_COM_PORT, false);
  2116d8:	e8 23 0a 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  2116dd:	88 54 24 30          	mov    %dl,0x30(%rsp)
  2116e1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2116e6:	bf f9 03 00 00       	mov    $0x3f9,%edi
  2116eb:	31 f6                	xor    %esi,%esi
        let port_1 = Port::new(X86_COM_PORT + 1, false);
  2116ed:	e8 0e 0a 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  2116f2:	88 54 24 40          	mov    %dl,0x40(%rsp)
  2116f6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2116fb:	bf fa 03 00 00       	mov    $0x3fa,%edi
  211700:	31 f6                	xor    %esi,%esi
        let port_2 = Port::new(X86_COM_PORT + 2, false);
  211702:	e8 f9 09 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  211707:	88 54 24 50          	mov    %dl,0x50(%rsp)
  21170b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  211710:	bf fb 03 00 00       	mov    $0x3fb,%edi
  211715:	31 f6                	xor    %esi,%esi
        let port_3 = Port::new(X86_COM_PORT + 3, false);
  211717:	e8 e4 09 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  21171c:	88 54 24 60          	mov    %dl,0x60(%rsp)
  211720:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  211725:	bf fc 03 00 00       	mov    $0x3fc,%edi
  21172a:	31 f6                	xor    %esi,%esi
        let port_4 = Port::new(X86_COM_PORT + 4, false);
  21172c:	e8 cf 09 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  211731:	88 54 24 70          	mov    %dl,0x70(%rsp)
  211735:	48 89 44 24 68       	mov    %rax,0x68(%rsp)

        // read only port.
        let port_5 = Port::new(X86_COM_PORT + 5, true);
  21173a:	bf fd 03 00 00       	mov    $0x3fd,%edi
  21173f:	be 01 00 00 00       	mov    $0x1,%esi
  211744:	e8 b7 09 00 00       	callq  212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  211749:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21174e:	88 54 24 17          	mov    %dl,0x17(%rsp)
  211752:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  211759:	00 
  21175a:	80 e2 01             	and    $0x1,%dl
  21175d:	88 94 24 a0 00 00 00 	mov    %dl,0xa0(%rsp)

        port_1.write_u8(0x00);
  211764:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  211769:	31 f6                	xor    %esi,%esi
  21176b:	e8 e0 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_3.write_u8(0x80);
  211770:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  211775:	be 80 00 00 00       	mov    $0x80,%esi
  21177a:	e8 d1 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_0.write_u8(0x03);
  21177f:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  211784:	be 03 00 00 00       	mov    $0x3,%esi
  211789:	e8 c2 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_1.write_u8(0x00);
  21178e:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  211793:	31 f6                	xor    %esi,%esi
  211795:	e8 b6 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_3.write_u8(0x03);
  21179a:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21179f:	be 03 00 00 00       	mov    $0x3,%esi
  2117a4:	e8 a7 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_2.write_u8(0xC7);
  2117a9:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2117ae:	be c7 00 00 00       	mov    $0xc7,%esi
  2117b3:	e8 98 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_4.write_u8(0x0B);
  2117b8:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2117bd:	be 0b 00 00 00       	mov    $0xb,%esi
  2117c2:	e8 89 09 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>

        // check for faulty chip:
        if !UART::chip_works_fine(&port_4, &port_0) {
  2117c7:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2117cc:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  2117d1:	e8 6a fe ff ff       	callq  211640 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE>
  2117d6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2117da:	8a 44 24 07          	mov    0x7(%rsp),%al
  2117de:	34 ff                	xor    $0xff,%al
  2117e0:	a8 01                	test   $0x1,%al
  2117e2:	75 69                	jne    21184d <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E+0x18d>
  2117e4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2117e9:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  2117ed:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            return None;
        }

        // return the UART instance:
        Some(UART {
            port_0: port_0,
  2117f2:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2117f7:	40 8a 74 24 30       	mov    0x30(%rsp),%sil
        Some(UART {
  2117fc:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  211801:	40 80 e6 01          	and    $0x1,%sil
  211805:	40 88 b4 24 80 00 00 	mov    %sil,0x80(%rsp)
  21180c:	00 
  21180d:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  211814:	00 
  211815:	80 e1 01             	and    $0x1,%cl
  211818:	88 8c 24 90 00 00 00 	mov    %cl,0x90(%rsp)
  21181f:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  211824:	48 89 08             	mov    %rcx,(%rax)
  211827:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21182e:	00 
  21182f:	48 89 48 08          	mov    %rcx,0x8(%rax)
  211833:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21183a:	00 
  21183b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  21183f:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  211846:	00 
  211847:	48 89 48 18          	mov    %rcx,0x18(%rax)
            port_5: port_5,
        })
    }
  21184b:	eb 09                	jmp    211856 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E+0x196>
  21184d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            return None;
  211852:	c6 40 08 02          	movb   $0x2,0x8(%rax)
  211856:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  21185b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  211862:	c3                   	retq   
  211863:	cc                   	int3   
  211864:	cc                   	int3   
  211865:	cc                   	int3   
  211866:	cc                   	int3   
  211867:	cc                   	int3   
  211868:	cc                   	int3   
  211869:	cc                   	int3   
  21186a:	cc                   	int3   
  21186b:	cc                   	int3   
  21186c:	cc                   	int3   
  21186d:	cc                   	int3   
  21186e:	cc                   	int3   
  21186f:	cc                   	int3   

0000000000211870 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17he49736ed003b01d9E>:

    #[inline]
    pub fn transit_empty(&self) -> bool {
  211870:	48 83 ec 18          	sub    $0x18,%rsp
  211874:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.port_5.read_u8() & X86_COM_PORT_EMPTY_FLAG != 0
  211879:	48 83 c7 10          	add    $0x10,%rdi
  21187d:	e8 ae 08 00 00       	callq  212130 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>
  211882:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211886:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21188a:	24 20                	and    $0x20,%al
  21188c:	3c 00                	cmp    $0x0,%al
  21188e:	0f 95 c0             	setne  %al
    }
  211891:	24 01                	and    $0x1,%al
  211893:	0f b6 c0             	movzbl %al,%eax
  211896:	48 83 c4 18          	add    $0x18,%rsp
  21189a:	c3                   	retq   
  21189b:	cc                   	int3   
  21189c:	cc                   	int3   
  21189d:	cc                   	int3   
  21189e:	cc                   	int3   
  21189f:	cc                   	int3   

00000000002118a0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>:
    pub fn read_u8(&self) -> u8 {
        while !self.transit_received() {}
        self.port_0.read_u8()
    }

    pub fn write_u8(&self, value: u8) {
  2118a0:	48 83 ec 28          	sub    $0x28,%rsp
  2118a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2118a9:	40 88 f0             	mov    %sil,%al
  2118ac:	88 44 24 17          	mov    %al,0x17(%rsp)
  2118b0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2118b5:	88 44 24 27          	mov    %al,0x27(%rsp)
  2118b9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.transit_empty() {}
  2118be:	e8 ad ff ff ff       	callq  211870 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17he49736ed003b01d9E>
  2118c3:	88 44 24 07          	mov    %al,0x7(%rsp)
  2118c7:	8a 44 24 07          	mov    0x7(%rsp),%al
  2118cb:	34 ff                	xor    $0xff,%al
  2118cd:	a8 01                	test   $0x1,%al
  2118cf:	75 e8                	jne    2118b9 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E+0x19>
  2118d1:	8a 44 24 17          	mov    0x17(%rsp),%al
  2118d5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.port_0.write_u8(value);
  2118da:	0f b6 f0             	movzbl %al,%esi
  2118dd:	e8 6e 08 00 00       	callq  212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
    }
  2118e2:	48 83 c4 28          	add    $0x28,%rsp
  2118e6:	c3                   	retq   
  2118e7:	cc                   	int3   
  2118e8:	cc                   	int3   
  2118e9:	cc                   	int3   
  2118ea:	cc                   	int3   
  2118eb:	cc                   	int3   
  2118ec:	cc                   	int3   
  2118ed:	cc                   	int3   
  2118ee:	cc                   	int3   
  2118ef:	cc                   	int3   

00000000002118f0 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE>:
            buffer[index] = self.read_u8();
        }
    }

    #[inline]
    fn is_writable_char(&self, char: &u8) -> bool {
  2118f0:	48 83 ec 20          	sub    $0x20,%rsp
  2118f4:	48 89 34 24          	mov    %rsi,(%rsp)
  2118f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2118fd:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        return *char >= 0x20 && *char <= 0x7e;
  211902:	80 3e 20             	cmpb   $0x20,(%rsi)
  211905:	73 07                	jae    21190e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE+0x1e>
  211907:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  21190c:	eb 10                	jmp    21191e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE+0x2e>
  21190e:	48 8b 04 24          	mov    (%rsp),%rax
  211912:	80 38 7e             	cmpb   $0x7e,(%rax)
  211915:	0f 96 c0             	setbe  %al
  211918:	24 01                	and    $0x1,%al
  21191a:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  21191e:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211922:	24 01                	and    $0x1,%al
  211924:	0f b6 c0             	movzbl %al,%eax
  211927:	48 83 c4 20          	add    $0x20,%rsp
  21192b:	c3                   	retq   
  21192c:	cc                   	int3   
  21192d:	cc                   	int3   
  21192e:	cc                   	int3   
  21192f:	cc                   	int3   

0000000000211930 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E>:

    pub fn write_safe_string(&self, string: &str) {
  211930:	48 83 ec 78          	sub    $0x78,%rsp
  211934:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  211939:	48 89 f0             	mov    %rsi,%rax
  21193c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  211941:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  211946:	48 89 f8             	mov    %rdi,%rax
  211949:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21194e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  211953:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  211958:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21195d:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
        for char in string.bytes() {
  211962:	e8 19 65 00 00       	callq  217e80 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h69793d84f9f7b42cE>
  211967:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21196c:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  211971:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  211976:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21197b:	e8 90 74 00 00       	callq  218e10 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>
  211980:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211985:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21198a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21198f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  211994:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  211999:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21199e:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2119a3:	e8 18 26 00 00       	callq  213fc0 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcd34291bd89f867dE>
  2119a8:	88 54 24 51          	mov    %dl,0x51(%rsp)
  2119ac:	88 44 24 50          	mov    %al,0x50(%rsp)
  2119b0:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  2119b5:	a8 01                	test   $0x1,%al
  2119b7:	74 06                	je     2119bf <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x8f>
  2119b9:	eb 00                	jmp    2119bb <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x8b>
  2119bb:	eb 07                	jmp    2119c4 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x94>
  2119bd:	0f 0b                	ud2    
            } else {
                // invalid char byte
                self.write_u8(COM_INVALID_CHAR_BYTE);
            }
        }
    }
  2119bf:	48 83 c4 78          	add    $0x78,%rsp
  2119c3:	c3                   	retq   
        for char in string.bytes() {
  2119c4:	8a 44 24 51          	mov    0x51(%rsp),%al
  2119c8:	88 44 24 76          	mov    %al,0x76(%rsp)
  2119cc:	88 44 24 77          	mov    %al,0x77(%rsp)
  2119d0:	88 44 24 57          	mov    %al,0x57(%rsp)
            if char == b'\n' {
  2119d4:	80 7c 24 57 0a       	cmpb   $0xa,0x57(%rsp)
  2119d9:	75 11                	jne    2119ec <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xbc>
  2119db:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\r');
  2119e0:	be 0d 00 00 00       	mov    $0xd,%esi
  2119e5:	e8 b6 fe ff ff       	callq  2118a0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  2119ea:	eb 42                	jmp    211a2e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xfe>
  2119ec:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            } else if self.is_writable_char(&char) {
  2119f1:	48 8d 74 24 57       	lea    0x57(%rsp),%rsi
  2119f6:	e8 f5 fe ff ff       	callq  2118f0 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE>
  2119fb:	88 44 24 07          	mov    %al,0x7(%rsp)
  2119ff:	8a 44 24 07          	mov    0x7(%rsp),%al
  211a03:	a8 01                	test   $0x1,%al
  211a05:	75 13                	jne    211a1a <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xea>
  211a07:	eb 00                	jmp    211a09 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xd9>
  211a09:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(COM_INVALID_CHAR_BYTE);
  211a0e:	be 3f 00 00 00       	mov    $0x3f,%esi
  211a13:	e8 88 fe ff ff       	callq  2118a0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  211a18:	eb 84                	jmp    21199e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  211a1a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(char);
  211a1f:	0f b6 74 24 57       	movzbl 0x57(%rsp),%esi
  211a24:	e8 77 fe ff ff       	callq  2118a0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  211a29:	e9 70 ff ff ff       	jmpq   21199e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  211a2e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\n');
  211a33:	be 0a 00 00 00       	mov    $0xa,%esi
  211a38:	e8 63 fe ff ff       	callq  2118a0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  211a3d:	e9 5c ff ff ff       	jmpq   21199e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  211a42:	cc                   	int3   
  211a43:	cc                   	int3   
  211a44:	cc                   	int3   
  211a45:	cc                   	int3   
  211a46:	cc                   	int3   
  211a47:	cc                   	int3   
  211a48:	cc                   	int3   
  211a49:	cc                   	int3   
  211a4a:	cc                   	int3   
  211a4b:	cc                   	int3   
  211a4c:	cc                   	int3   
  211a4d:	cc                   	int3   
  211a4e:	cc                   	int3   
  211a4f:	cc                   	int3   

0000000000211a50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>:
}

impl fmt::Write for UART {
    fn write_str(&mut self, string: &str) -> fmt::Result {
  211a50:	48 83 ec 28          	sub    $0x28,%rsp
  211a54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211a59:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  211a5e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write_safe_string(string);
  211a63:	e8 c8 fe ff ff       	callq  211930 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E>
        return Ok(());
  211a68:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  211a6d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211a71:	24 01                	and    $0x1,%al
  211a73:	0f b6 c0             	movzbl %al,%eax
  211a76:	48 83 c4 28          	add    $0x28,%rsp
  211a7a:	c3                   	retq   
  211a7b:	cc                   	int3   
  211a7c:	cc                   	int3   
  211a7d:	cc                   	int3   
  211a7e:	cc                   	int3   
  211a7f:	cc                   	int3   

0000000000211a80 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE>:
}

fn init_uart() -> Option<Mutex<UART>> {
  211a80:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  211a87:	48 89 3c 24          	mov    %rdi,(%rsp)
  211a8b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if let Some(uart) = UART::new() {
  211a90:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  211a95:	e8 26 fc ff ff       	callq  2116c0 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E>
  211a9a:	8a 54 24 18          	mov    0x18(%rsp),%dl
  211a9e:	80 ea 02             	sub    $0x2,%dl
  211aa1:	b8 01 00 00 00       	mov    $0x1,%eax
  211aa6:	31 c9                	xor    %ecx,%ecx
  211aa8:	80 fa 00             	cmp    $0x0,%dl
  211aab:	48 0f 44 c1          	cmove  %rcx,%rax
  211aaf:	48 83 f8 01          	cmp    $0x1,%rax
  211ab3:	75 6a                	jne    211b1f <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0x9f>
  211ab5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211aba:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  211abf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211ac4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  211ac9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  211ace:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  211ad3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  211ad8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        return Some(Mutex::new(uart));
  211add:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  211ae2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  211ae7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  211aec:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  211af3:	00 
  211af4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  211af9:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  211b00:	00 
  211b01:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  211b06:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  211b0d:	00 
  211b0e:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  211b13:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  211b18:	e8 63 61 ff ff       	callq  207c80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h9c67aabfb8c12465E>
  211b1d:	eb 18                	jmp    211b37 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0xb7>
  211b1f:	48 8b 04 24          	mov    (%rsp),%rax
    }
    None
  211b23:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  211b2a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  211b2f:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  211b36:	c3                   	retq   
  211b37:	48 8b 3c 24          	mov    (%rsp),%rdi
        return Some(Mutex::new(uart));
  211b3b:	48 83 c7 08          	add    $0x8,%rdi
  211b3f:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  211b44:	ba 28 00 00 00       	mov    $0x28,%edx
  211b49:	e8 52 bf 00 00       	callq  21daa0 <memcpy>
  211b4e:	48 8b 04 24          	mov    (%rsp),%rax
  211b52:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  211b59:	eb cf                	jmp    211b2a <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0xaa>
  211b5b:	cc                   	int3   
  211b5c:	cc                   	int3   
  211b5d:	cc                   	int3   
  211b5e:	cc                   	int3   
  211b5f:	cc                   	int3   

0000000000211b60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>:
            fn deref(&self) -> &$T {
  211b60:	48 83 ec 18          	sub    $0x18,%rsp
  211b64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211b69:	48 8d 05 b0 fc 00 00 	lea    0xfcb0(%rip),%rax        # 221820 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hbc1fb3ac42e3ec99E>
  211b70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211b75:	48 8d 3d a4 fc 00 00 	lea    0xfca4(%rip),%rdi        # 221820 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hbc1fb3ac42e3ec99E>
  211b7c:	e8 6f 6f ff ff       	callq  208af0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E>
  211b81:	48 89 04 24          	mov    %rax,(%rsp)
  211b85:	48 8b 04 24          	mov    (%rsp),%rax
            }
  211b89:	48 83 c4 18          	add    $0x18,%rsp
  211b8d:	c3                   	retq   
  211b8e:	cc                   	int3   
  211b8f:	cc                   	int3   

0000000000211b90 <_ZN9r3_kernel3cpu18disable_interrupts17h09f60a96b4b2704aE>:
    }
}

pub fn disable_interrupts() {
    unsafe {
        asm!("cli", options(nomem, nostack));
  211b90:	fa                   	cli    
    }
}
  211b91:	c3                   	retq   
  211b92:	cc                   	int3   
  211b93:	cc                   	int3   
  211b94:	cc                   	int3   
  211b95:	cc                   	int3   
  211b96:	cc                   	int3   
  211b97:	cc                   	int3   
  211b98:	cc                   	int3   
  211b99:	cc                   	int3   
  211b9a:	cc                   	int3   
  211b9b:	cc                   	int3   
  211b9c:	cc                   	int3   
  211b9d:	cc                   	int3   
  211b9e:	cc                   	int3   
  211b9f:	cc                   	int3   

0000000000211ba0 <_ZN9r3_kernel3cpu17create_breakpoint17h91b05c84067a39edE>:
    rflags::RFlags::is_set(rflags::RFlagsStruct::INTERRUPT_FLAG)
}

pub fn create_breakpoint() {
    unsafe {
        asm!("int3", options(nomem, nostack));
  211ba0:	cc                   	int3   
    }
}
  211ba1:	c3                   	retq   
  211ba2:	cc                   	int3   
  211ba3:	cc                   	int3   
  211ba4:	cc                   	int3   
  211ba5:	cc                   	int3   
  211ba6:	cc                   	int3   
  211ba7:	cc                   	int3   
  211ba8:	cc                   	int3   
  211ba9:	cc                   	int3   
  211baa:	cc                   	int3   
  211bab:	cc                   	int3   
  211bac:	cc                   	int3   
  211bad:	cc                   	int3   
  211bae:	cc                   	int3   
  211baf:	cc                   	int3   

0000000000211bb0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E>:
            asm!("hlt", options(nomem, nostack));
        }
    }
}

pub fn halt_no_interrupts() -> ! {
  211bb0:	50                   	push   %rax
    disable_interrupts();
  211bb1:	e8 da ff ff ff       	callq  211b90 <_ZN9r3_kernel3cpu18disable_interrupts17h09f60a96b4b2704aE>
    unsafe {
        loop {
            asm!("hlt", options(nomem, nostack));
  211bb6:	f4                   	hlt    
  211bb7:	eb fd                	jmp    211bb6 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E+0x6>
  211bb9:	cc                   	int3   
  211bba:	cc                   	int3   
  211bbb:	cc                   	int3   
  211bbc:	cc                   	int3   
  211bbd:	cc                   	int3   
  211bbe:	cc                   	int3   
  211bbf:	cc                   	int3   

0000000000211bc0 <_ZN9r3_kernel3cpu26init_base_processor_tables17h3a70a90a233e3282E>:
        }
    }
}

pub fn init_base_processor_tables() {
  211bc0:	50                   	push   %rax
    segments::init_gdt();
  211bc1:	e8 2a 2e ff ff       	callq  2049f0 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E>
    exceptions::init_exceptions();
  211bc6:	e8 05 40 00 00       	callq  215bd0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E>
}
  211bcb:	58                   	pop    %rax
  211bcc:	c3                   	retq   
  211bcd:	cc                   	int3   
  211bce:	cc                   	int3   
  211bcf:	cc                   	int3   

0000000000211bd0 <_ZN9r3_kernel3cpu23init_features_detection17h7973aea1105ee67eE>:

pub fn init_features_detection() {
  211bd0:	50                   	push   %rax
    // this will call the lazy static to initialize
    cpuid::display_features();
  211bd1:	e8 ba a0 ff ff       	callq  20bc90 <_ZN9r3_kernel3cpu5cpuid16display_features17hc41a31f51dcb6ec0E>
    cpuid::assert_min_levels();
  211bd6:	e8 35 9e ff ff       	callq  20ba10 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hc36b5eee4adcca5bE>
}
  211bdb:	58                   	pop    %rax
  211bdc:	c3                   	retq   
  211bdd:	cc                   	int3   
  211bde:	cc                   	int3   
  211bdf:	cc                   	int3   

0000000000211be0 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E>:

pub fn run_test_breakpoint_recovery() {
  211be0:	48 83 ec 68          	sub    $0x68,%rsp
    create_breakpoint();
  211be4:	e8 b7 ff ff ff       	callq  211ba0 <_ZN9r3_kernel3cpu17create_breakpoint17h91b05c84067a39edE>
    log::info!("Recovered from breakpoint, interrupts properly working.");
  211be9:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  211bf0:	00 00 
  211bf2:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  211bf7:	48 8d 35 5a e7 fe ff 	lea    -0x118a6(%rip),%rsi        # 200358 <str.0+0x58>
  211bfe:	e8 5d 41 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  211c03:	88 44 24 0f          	mov    %al,0xf(%rsp)
  211c07:	8a 44 24 0f          	mov    0xf(%rsp),%al
  211c0b:	a8 01                	test   $0x1,%al
  211c0d:	75 09                	jne    211c18 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E+0x38>
  211c0f:	eb 00                	jmp    211c11 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E+0x31>
  211c11:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  211c16:	eb 42                	jmp    211c5a <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E+0x7a>
  211c18:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  211c1d:	48 8b 3d 7c eb 00 00 	mov    0xeb7c(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  211c24:	0f b6 74 24 5f       	movzbl 0x5f(%rsp),%esi
  211c29:	e8 c2 0e 00 00       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  211c2e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  211c33:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  211c38:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  211c3d:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  211c42:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  211c47:	e8 14 41 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  211c4c:	88 44 24 0e          	mov    %al,0xe(%rsp)
  211c50:	8a 44 24 0e          	mov    0xe(%rsp),%al
  211c54:	24 01                	and    $0x1,%al
  211c56:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  211c5a:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  211c5f:	75 05                	jne    211c66 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E+0x86>
}
  211c61:	48 83 c4 68          	add    $0x68,%rsp
  211c65:	c3                   	retq   
    log::info!("Recovered from breakpoint, interrupts properly working.");
  211c66:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  211c6b:	48 8d 35 a6 da 00 00 	lea    0xdaa6(%rip),%rsi        # 21f718 <memset+0x1c58>
  211c72:	ba 01 00 00 00       	mov    $0x1,%edx
  211c77:	48 8d 0d 0a f2 fe ff 	lea    -0x10df6(%rip),%rcx        # 200e88 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x39>
  211c7e:	31 c0                	xor    %eax,%eax
  211c80:	41 89 c0             	mov    %eax,%r8d
  211c83:	e8 78 32 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  211c88:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  211c8d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  211c92:	48 8d 15 8f da 00 00 	lea    0xda8f(%rip),%rdx        # 21f728 <memset+0x1c68>
  211c99:	e8 72 6b 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  211c9e:	eb c1                	jmp    211c61 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E+0x81>

0000000000211ca0 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E>:
        }
    }
}

#[inline]
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  211ca0:	48 83 ec 28          	sub    $0x28,%rsp
  211ca4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211ca9:	40 88 f0             	mov    %sil,%al
  211cac:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  211cb0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    // SAFETY: the caller must uphold the safety contract for `atomic_load`.
    unsafe {
        match order {
  211cb5:	0f b6 44 24 1e       	movzbl 0x1e(%rsp),%eax
  211cba:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211cbf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211cc4:	48 8d 0d d9 f1 fe ff 	lea    -0x10e27(%rip),%rcx        # 200ea4 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x55>
  211ccb:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211ccf:	48 01 c8             	add    %rcx,%rax
  211cd2:	ff e0                	jmpq   *%rax
  211cd4:	0f 0b                	ud2    
  211cd6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  211cdb:	8a 00                	mov    (%rax),%al
  211cdd:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  211ce1:	eb 59                	jmp    211d3c <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x9c>
            SeqCst => intrinsics::atomic_load(dst),
            Release => panic!("there is no such thing as a release load"),
  211ce3:	48 8d 3d 9f f2 fe ff 	lea    -0x10d61(%rip),%rdi        # 200f89 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x13a>
  211cea:	48 8d 15 87 da 00 00 	lea    0xda87(%rip),%rdx        # 21f778 <memset+0x1cb8>
  211cf1:	be 28 00 00 00       	mov    $0x28,%esi
  211cf6:	e8 35 93 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211cfb:	0f 0b                	ud2    
  211cfd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  211d02:	8a 00                	mov    (%rax),%al
  211d04:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  211d08:	eb 30                	jmp    211d3a <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x9a>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  211d0a:	48 8d 3d cf f1 fe ff 	lea    -0x10e31(%rip),%rdi        # 200ee0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x91>
  211d11:	48 8d 15 48 da 00 00 	lea    0xda48(%rip),%rdx        # 21f760 <memset+0x1ca0>
  211d18:	be 31 00 00 00       	mov    $0x31,%esi
  211d1d:	e8 0e 93 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211d22:	0f 0b                	ud2    
  211d24:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  211d29:	8a 00                	mov    (%rax),%al
  211d2b:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  211d2f:	eb 00                	jmp    211d31 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
        }
    }
}
  211d31:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  211d35:	48 83 c4 28          	add    $0x28,%rsp
  211d39:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  211d3a:	eb f5                	jmp    211d31 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  211d3c:	eb f3                	jmp    211d31 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
  211d3e:	cc                   	int3   
  211d3f:	cc                   	int3   

0000000000211d40 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  211d40:	48 83 ec 38          	sub    $0x38,%rsp
  211d44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211d49:	88 d1                	mov    %dl,%cl
  211d4b:	40 88 f0             	mov    %sil,%al
  211d4e:	88 44 24 17          	mov    %al,0x17(%rsp)
  211d52:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  211d56:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211d5b:	88 44 24 37          	mov    %al,0x37(%rsp)
        match order {
  211d5f:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  211d64:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211d69:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211d6e:	48 8d 0d 43 f1 fe ff 	lea    -0x10ebd(%rip),%rcx        # 200eb8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x69>
  211d75:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211d79:	48 01 c8             	add    %rcx,%rax
  211d7c:	ff e0                	jmpq   *%rax
  211d7e:	0f 0b                	ud2    
  211d80:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211d85:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  211d89:	88 08                	mov    %cl,(%rax)
  211d8b:	eb 55                	jmp    211de2 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0xa2>
  211d8d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211d92:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Release => intrinsics::atomic_store_rel(dst, val),
  211d96:	88 08                	mov    %cl,(%rax)
  211d98:	eb 46                	jmp    211de0 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0xa0>
            Acquire => panic!("there is no such thing as an acquire store"),
  211d9a:	48 8d 3d 42 f2 fe ff 	lea    -0x10dbe(%rip),%rdi        # 200fe3 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x194>
  211da1:	48 8d 15 00 da 00 00 	lea    0xda00(%rip),%rdx        # 21f7a8 <memset+0x1ce8>
  211da8:	be 2a 00 00 00       	mov    $0x2a,%esi
  211dad:	e8 7e 92 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211db2:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  211db4:	48 8d 3d f6 f1 fe ff 	lea    -0x10e0a(%rip),%rdi        # 200fb1 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x162>
  211dbb:	48 8d 15 ce d9 00 00 	lea    0xd9ce(%rip),%rdx        # 21f790 <memset+0x1cd0>
  211dc2:	be 32 00 00 00       	mov    $0x32,%esi
  211dc7:	e8 64 92 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211dcc:	0f 0b                	ud2    
  211dce:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  211dd3:	8a 44 24 17          	mov    0x17(%rsp),%al
            SeqCst => intrinsics::atomic_store(dst, val),
  211dd7:	86 01                	xchg   %al,(%rcx)
  211dd9:	eb 00                	jmp    211ddb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
}
  211ddb:	48 83 c4 38          	add    $0x38,%rsp
  211ddf:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  211de0:	eb f9                	jmp    211ddb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  211de2:	eb f7                	jmp    211ddb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
  211de4:	cc                   	int3   
  211de5:	cc                   	int3   
  211de6:	cc                   	int3   
  211de7:	cc                   	int3   
  211de8:	cc                   	int3   
  211de9:	cc                   	int3   
  211dea:	cc                   	int3   
  211deb:	cc                   	int3   
  211dec:	cc                   	int3   
  211ded:	cc                   	int3   
  211dee:	cc                   	int3   
  211def:	cc                   	int3   

0000000000211df0 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E>:
    }
}

#[inline]
#[cfg(target_has_atomic = "8")]
unsafe fn atomic_compare_exchange<T: Copy>(
  211df0:	48 83 ec 68          	sub    $0x68,%rsp
  211df4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211df9:	44 88 c0             	mov    %r8b,%al
  211dfc:	88 54 24 36          	mov    %dl,0x36(%rsp)
  211e00:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  211e05:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  211e0a:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  211e0f:	88 54 24 63          	mov    %dl,0x63(%rsp)
  211e13:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  211e17:	88 44 24 65          	mov    %al,0x65(%rsp)
    success: Ordering,
    failure: Ordering,
) -> Result<T, T> {
    // SAFETY: the caller must uphold the safety contract for `atomic_compare_exchange`.
    let (val, ok) = unsafe {
        match (success, failure) {
  211e1b:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  211e1f:	88 44 24 51          	mov    %al,0x51(%rsp)
  211e23:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  211e28:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  211e2d:	48 83 e8 04          	sub    $0x4,%rax
  211e31:	77 15                	ja     211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211e33:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  211e38:	48 8d 0d 8d f0 fe ff 	lea    -0x10f73(%rip),%rcx        # 200ecc <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x7d>
  211e3f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211e43:	48 01 c8             	add    %rcx,%rax
  211e46:	ff e0                	jmpq   *%rax
  211e48:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211e4d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  211e52:	48 83 e8 01          	sub    $0x1,%rax
  211e56:	0f 84 38 02 00 00    	je     212094 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2a4>
  211e5c:	eb 00                	jmp    211e5e <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x6e>
  211e5e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  211e63:	48 83 e8 03          	sub    $0x3,%rax
  211e67:	0f 84 41 02 00 00    	je     2120ae <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2be>
  211e6d:	e9 08 02 00 00       	jmpq   21207a <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x28a>
  211e72:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211e77:	48 83 f8 00          	cmp    $0x0,%rax
  211e7b:	0f 84 d7 01 00 00    	je     212058 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x268>
  211e81:	eb c5                	jmp    211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211e83:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211e88:	48 83 f8 00          	cmp    $0x0,%rax
  211e8c:	0f 84 a1 01 00 00    	je     212033 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x243>
  211e92:	eb b4                	jmp    211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211e94:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211e99:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211e9e:	48 85 c0             	test   %rax,%rax
  211ea1:	0f 84 40 01 00 00    	je     211fe7 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1f7>
  211ea7:	eb 00                	jmp    211ea9 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0xb9>
  211ea9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211eae:	48 83 e8 02          	sub    $0x2,%rax
  211eb2:	0f 84 51 01 00 00    	je     212009 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x219>
  211eb8:	eb 8e                	jmp    211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211eba:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211ebf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211ec4:	48 85 c0             	test   %rax,%rax
  211ec7:	0f 84 d4 00 00 00    	je     211fa1 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1b1>
  211ecd:	eb 00                	jmp    211ecf <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0xdf>
  211ecf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211ed4:	48 83 e8 02          	sub    $0x2,%rax
  211ed8:	0f 84 e5 00 00 00    	je     211fc3 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1d3>
  211ede:	e9 65 ff ff ff       	jmpq   211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211ee3:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  211ee8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211eed:	48 85 c0             	test   %rax,%rax
  211ef0:	74 1f                	je     211f11 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x121>
  211ef2:	eb 00                	jmp    211ef4 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x104>
  211ef4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211ef9:	48 83 e8 02          	sub    $0x2,%rax
  211efd:	74 34                	je     211f33 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x143>
  211eff:	eb 00                	jmp    211f01 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x111>
  211f01:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211f06:	48 83 e8 04          	sub    $0x4,%rax
  211f0a:	74 49                	je     211f55 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x165>
  211f0c:	e9 37 ff ff ff       	jmpq   211e48 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  211f11:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211f16:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211f1a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  211f1e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211f22:	88 c1                	mov    %al,%cl
  211f24:	0f 94 c0             	sete   %al
  211f27:	24 01                	and    $0x1,%al
  211f29:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  211f2d:	88 44 24 49          	mov    %al,0x49(%rsp)
  211f31:	eb 6c                	jmp    211f9f <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1af>
  211f33:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211f38:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211f3c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  211f40:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211f44:	88 c1                	mov    %al,%cl
  211f46:	0f 94 c0             	sete   %al
  211f49:	24 01                	and    $0x1,%al
  211f4b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  211f4f:	88 44 24 49          	mov    %al,0x49(%rsp)
  211f53:	eb 48                	jmp    211f9d <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1ad>
  211f55:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211f5a:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211f5e:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  211f62:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211f66:	88 c1                	mov    %al,%cl
  211f68:	0f 94 c0             	sete   %al
  211f6b:	24 01                	and    $0x1,%al
  211f6d:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  211f71:	88 44 24 49          	mov    %al,0x49(%rsp)
  211f75:	eb 00                	jmp    211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
    let (val, ok) = unsafe {
  211f77:	8a 44 24 48          	mov    0x48(%rsp),%al
  211f7b:	88 44 24 07          	mov    %al,0x7(%rsp)
  211f7f:	88 44 24 66          	mov    %al,0x66(%rsp)
  211f83:	8a 44 24 49          	mov    0x49(%rsp),%al
  211f87:	88 c1                	mov    %al,%cl
  211f89:	80 e1 01             	and    $0x1,%cl
  211f8c:	88 4c 24 67          	mov    %cl,0x67(%rsp)
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
        }
    };
    if ok { Ok(val) } else { Err(val) }
  211f90:	a8 01                	test   $0x1,%al
  211f92:	0f 85 44 01 00 00    	jne    2120dc <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2ec>
  211f98:	e9 30 01 00 00       	jmpq   2120cd <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  211f9d:	eb d8                	jmp    211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  211f9f:	eb d6                	jmp    211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  211fa1:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211fa6:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211faa:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  211fae:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211fb2:	88 c1                	mov    %al,%cl
  211fb4:	0f 94 c0             	sete   %al
  211fb7:	24 01                	and    $0x1,%al
  211fb9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  211fbd:	88 44 24 49          	mov    %al,0x49(%rsp)
  211fc1:	eb 22                	jmp    211fe5 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1f5>
  211fc3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211fc8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211fcc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  211fd0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211fd4:	88 c1                	mov    %al,%cl
  211fd6:	0f 94 c0             	sete   %al
  211fd9:	24 01                	and    $0x1,%al
  211fdb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  211fdf:	88 44 24 49          	mov    %al,0x49(%rsp)
  211fe3:	eb 92                	jmp    211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  211fe5:	eb 90                	jmp    211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  211fe7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211fec:	8a 54 24 36          	mov    0x36(%rsp),%dl
  211ff0:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  211ff4:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  211ff8:	88 c1                	mov    %al,%cl
  211ffa:	0f 94 c0             	sete   %al
  211ffd:	24 01                	and    $0x1,%al
  211fff:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  212003:	88 44 24 49          	mov    %al,0x49(%rsp)
  212007:	eb 25                	jmp    21202e <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x23e>
  212009:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21200e:	8a 54 24 36          	mov    0x36(%rsp),%dl
  212012:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  212016:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  21201a:	88 c1                	mov    %al,%cl
  21201c:	0f 94 c0             	sete   %al
  21201f:	24 01                	and    $0x1,%al
  212021:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  212025:	88 44 24 49          	mov    %al,0x49(%rsp)
  212029:	e9 49 ff ff ff       	jmpq   211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  21202e:	e9 44 ff ff ff       	jmpq   211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  212033:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  212038:	8a 54 24 36          	mov    0x36(%rsp),%dl
  21203c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  212040:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  212044:	88 c1                	mov    %al,%cl
  212046:	0f 94 c0             	sete   %al
  212049:	24 01                	and    $0x1,%al
  21204b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  21204f:	88 44 24 49          	mov    %al,0x49(%rsp)
  212053:	e9 1f ff ff ff       	jmpq   211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  212058:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21205d:	8a 54 24 36          	mov    0x36(%rsp),%dl
  212061:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  212065:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  212069:	88 c1                	mov    %al,%cl
  21206b:	0f 94 c0             	sete   %al
  21206e:	24 01                	and    $0x1,%al
  212070:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  212074:	88 44 24 49          	mov    %al,0x49(%rsp)
  212078:	eb 4e                	jmp    2120c8 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  21207a:	48 8d 3d 8c ef fe ff 	lea    -0x11074(%rip),%rdi        # 20100d <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x1be>
  212081:	48 8d 15 38 d7 00 00 	lea    0xd738(%rip),%rdx        # 21f7c0 <memset+0x1d00>
  212088:	be 3c 00 00 00       	mov    $0x3c,%esi
  21208d:	e8 9e 8f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  212092:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  212094:	48 8d 3d eb ef fe ff 	lea    -0x11015(%rip),%rdi        # 201086 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x237>
  21209b:	48 8d 15 4e d7 00 00 	lea    0xd74e(%rip),%rdx        # 21f7f0 <memset+0x1d30>
  2120a2:	be 34 00 00 00       	mov    $0x34,%esi
  2120a7:	e8 84 8f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2120ac:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  2120ae:	48 8d 3d 94 ef fe ff 	lea    -0x1106c(%rip),%rdi        # 201049 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x1fa>
  2120b5:	48 8d 15 1c d7 00 00 	lea    0xd71c(%rip),%rdx        # 21f7d8 <memset+0x1d18>
  2120bc:	be 3d 00 00 00       	mov    $0x3d,%esi
  2120c1:	e8 6a 8f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2120c6:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  2120c8:	e9 aa fe ff ff       	jmpq   211f77 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  2120cd:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  2120d1:	88 44 24 41          	mov    %al,0x41(%rsp)
  2120d5:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  2120da:	eb 0d                	jmp    2120e9 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2f9>
  2120dc:	8a 44 24 07          	mov    0x7(%rsp),%al
  2120e0:	88 44 24 41          	mov    %al,0x41(%rsp)
  2120e4:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  2120e9:	8a 44 24 40          	mov    0x40(%rsp),%al
  2120ed:	8a 54 24 41          	mov    0x41(%rsp),%dl
  2120f1:	48 83 c4 68          	add    $0x68,%rsp
  2120f5:	c3                   	retq   
  2120f6:	cc                   	int3   
  2120f7:	cc                   	int3   
  2120f8:	cc                   	int3   
  2120f9:	cc                   	int3   
  2120fa:	cc                   	int3   
  2120fb:	cc                   	int3   
  2120fc:	cc                   	int3   
  2120fd:	cc                   	int3   
  2120fe:	cc                   	int3   
  2120ff:	cc                   	int3   

0000000000212100 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>:
    pub port_no: usize,
    pub read_only: bool
}

impl Port {
    pub fn new(port_no: usize, read_only: bool) -> Self {
  212100:	48 83 ec 20          	sub    $0x20,%rsp
  212104:	40 88 f0             	mov    %sil,%al
  212107:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21210c:	24 01                	and    $0x1,%al
  21210e:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        Port { port_no, read_only }
  212112:	48 89 3c 24          	mov    %rdi,(%rsp)
  212116:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  21211a:	48 8b 04 24          	mov    (%rsp),%rax
  21211e:	8a 54 24 08          	mov    0x8(%rsp),%dl
  212122:	48 83 c4 20          	add    $0x20,%rsp
  212126:	c3                   	retq   
  212127:	cc                   	int3   
  212128:	cc                   	int3   
  212129:	cc                   	int3   
  21212a:	cc                   	int3   
  21212b:	cc                   	int3   
  21212c:	cc                   	int3   
  21212d:	cc                   	int3   
  21212e:	cc                   	int3   
  21212f:	cc                   	int3   

0000000000212130 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>:

    pub fn read_u8(&self) -> u8 {
  212130:	48 83 ec 10          	sub    $0x10,%rsp
  212134:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // assembly is unsafe
        let value: u8;
        unsafe {
            asm!(
                "in al, dx", out("al") value, in("dx") self.port_no, 
  212139:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  21213c:	ec                   	in     (%dx),%al
  21213d:	88 44 24 07          	mov    %al,0x7(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  212141:	8a 44 24 07          	mov    0x7(%rsp),%al
  212145:	48 83 c4 10          	add    $0x10,%rsp
  212149:	c3                   	retq   
  21214a:	cc                   	int3   
  21214b:	cc                   	int3   
  21214c:	cc                   	int3   
  21214d:	cc                   	int3   
  21214e:	cc                   	int3   
  21214f:	cc                   	int3   

0000000000212150 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>:

    pub fn write_u8(&self, value: u8) {
  212150:	48 83 ec 20          	sub    $0x20,%rsp
  212154:	48 89 3c 24          	mov    %rdi,(%rsp)
  212158:	40 88 f0             	mov    %sil,%al
  21215b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21215f:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212164:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        if !self.read_only {
  212168:	8a 47 08             	mov    0x8(%rdi),%al
  21216b:	34 ff                	xor    $0xff,%al
  21216d:	a8 01                	test   $0x1,%al
  21216f:	75 05                	jne    212176 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE+0x26>
                    "out dx, al", in("dx") self.port_no, in("al") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  212171:	48 83 c4 20          	add    $0x20,%rsp
  212175:	c3                   	retq   
  212176:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21217a:	48 8b 0c 24          	mov    (%rsp),%rcx
                    "out dx, al", in("dx") self.port_no, in("al") value,
  21217e:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  212181:	ee                   	out    %al,(%dx)
  212182:	eb ed                	jmp    212171 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE+0x21>
  212184:	cc                   	int3   
  212185:	cc                   	int3   
  212186:	cc                   	int3   
  212187:	cc                   	int3   
  212188:	cc                   	int3   
  212189:	cc                   	int3   
  21218a:	cc                   	int3   
  21218b:	cc                   	int3   
  21218c:	cc                   	int3   
  21218d:	cc                   	int3   
  21218e:	cc                   	int3   
  21218f:	cc                   	int3   

0000000000212190 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h04f8868a7960e59eE>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  212190:	48 83 ec 28          	sub    $0x28,%rsp
  212194:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match residual {
            Err(e) => Err(From::from(e)),
  212199:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21219e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2121a3:	e8 98 1e 00 00       	callq  214040 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h9371227c881e3778E>
  2121a8:	48 89 04 24          	mov    %rax,(%rsp)
  2121ac:	48 8b 04 24          	mov    (%rsp),%rax
  2121b0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2121b5:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  2121bc:	00 00 
        }
    }
  2121be:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2121c3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2121c8:	48 83 c4 28          	add    $0x28,%rsp
  2121cc:	c3                   	retq   
  2121cd:	cc                   	int3   
  2121ce:	cc                   	int3   
  2121cf:	cc                   	int3   

00000000002121d0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h3938fb25d17c976dE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  2121d0:	48 83 ec 18          	sub    $0x18,%rsp
            Err(e) => Err(From::from(e)),
  2121d4:	e8 37 17 00 00       	callq  213910 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h7397929f36c3639bE>
  2121d9:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  2121de:	8a 44 24 07          	mov    0x7(%rsp),%al
  2121e2:	24 01                	and    $0x1,%al
  2121e4:	0f b6 c0             	movzbl %al,%eax
  2121e7:	48 83 c4 18          	add    $0x18,%rsp
  2121eb:	c3                   	retq   
  2121ec:	cc                   	int3   
  2121ed:	cc                   	int3   
  2121ee:	cc                   	int3   
  2121ef:	cc                   	int3   

00000000002121f0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h147481aef73ecc67E>:
    pub fn unwrap_err(self) -> E {
  2121f0:	48 83 ec 28          	sub    $0x28,%rsp
  2121f4:	48 89 34 24          	mov    %rsi,(%rsp)
  2121f8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2121fd:	48 8b 07             	mov    (%rdi),%rax
  212200:	48 85 c0             	test   %rax,%rax
  212203:	74 06                	je     21220b <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h147481aef73ecc67E+0x1b>
  212205:	eb 00                	jmp    212207 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h147481aef73ecc67E+0x17>
  212207:	eb 33                	jmp    21223c <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h147481aef73ecc67E+0x4c>
  212209:	0f 0b                	ud2    
  21220b:	4c 8b 04 24          	mov    (%rsp),%r8
  21220f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  212214:	48 8b 40 08          	mov    0x8(%rax),%rax
  212218:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21221d:	48 8d 3d 96 ee fe ff 	lea    -0x1116a(%rip),%rdi        # 2010ba <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x26b>
  212224:	48 8d 0d dd d5 00 00 	lea    0xd5dd(%rip),%rcx        # 21f808 <memset+0x1d48>
  21222b:	be 2e 00 00 00       	mov    $0x2e,%esi
  212230:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
  212235:	e8 a6 83 00 00       	callq  21a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  21223a:	0f 0b                	ud2    
  21223c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Err(e) => e,
  212241:	48 8b 41 08          	mov    0x8(%rcx),%rax
  212245:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  212249:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21224e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  212253:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212258:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21225d:	48 83 c4 28          	add    $0x28,%rsp
  212261:	c3                   	retq   
  212262:	cc                   	int3   
  212263:	cc                   	int3   
  212264:	cc                   	int3   
  212265:	cc                   	int3   
  212266:	cc                   	int3   
  212267:	cc                   	int3   
  212268:	cc                   	int3   
  212269:	cc                   	int3   
  21226a:	cc                   	int3   
  21226b:	cc                   	int3   
  21226c:	cc                   	int3   
  21226d:	cc                   	int3   
  21226e:	cc                   	int3   
  21226f:	cc                   	int3   

0000000000212270 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h15f410e001905f48E>:
    pub fn unwrap_err(self) -> E {
  212270:	48 83 ec 48          	sub    $0x48,%rsp
  212274:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212279:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21227e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  212283:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212288:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21228d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  212292:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  212297:	66 8b 44 24 10       	mov    0x10(%rsp),%ax
  21229c:	66 83 c0 f9          	add    $0xfff9,%ax
  2122a0:	0f 95 c0             	setne  %al
  2122a3:	0f b6 c0             	movzbl %al,%eax
  2122a6:	74 06                	je     2122ae <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h15f410e001905f48E+0x3e>
  2122a8:	eb 00                	jmp    2122aa <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h15f410e001905f48E+0x3a>
  2122aa:	eb 26                	jmp    2122d2 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h15f410e001905f48E+0x62>
  2122ac:	0f 0b                	ud2    
  2122ae:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  2122b3:	48 8d 3d 00 ee fe ff 	lea    -0x11200(%rip),%rdi        # 2010ba <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x26b>
  2122ba:	48 8d 0d 67 d5 00 00 	lea    0xd567(%rip),%rcx        # 21f828 <memset+0x1d68>
  2122c1:	be 2e 00 00 00       	mov    $0x2e,%esi
  2122c6:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  2122cb:	e8 10 83 00 00       	callq  21a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  2122d0:	0f 0b                	ud2    
            Err(e) => e,
  2122d2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2122d7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2122dc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2122e1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  2122e6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2122eb:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  2122f0:	48 83 c4 48          	add    $0x48,%rsp
  2122f4:	c3                   	retq   
  2122f5:	cc                   	int3   
  2122f6:	cc                   	int3   
  2122f7:	cc                   	int3   
  2122f8:	cc                   	int3   
  2122f9:	cc                   	int3   
  2122fa:	cc                   	int3   
  2122fb:	cc                   	int3   
  2122fc:	cc                   	int3   
  2122fd:	cc                   	int3   
  2122fe:	cc                   	int3   
  2122ff:	cc                   	int3   

0000000000212300 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>:
    pub fn unwrap_err(self) -> E {
  212300:	48 83 ec 28          	sub    $0x28,%rsp
  212304:	48 89 34 24          	mov    %rsi,(%rsp)
  212308:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21230d:	0f b7 07             	movzwl (%rdi),%eax
  212310:	48 85 c0             	test   %rax,%rax
  212313:	74 06                	je     21231b <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x1b>
  212315:	eb 00                	jmp    212317 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x17>
  212317:	eb 33                	jmp    21234c <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x4c>
  212319:	0f 0b                	ud2    
  21231b:	4c 8b 04 24          	mov    (%rsp),%r8
  21231f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  212324:	66 8b 40 02          	mov    0x2(%rax),%ax
  212328:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  21232d:	48 8d 3d 86 ed fe ff 	lea    -0x1127a(%rip),%rdi        # 2010ba <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x26b>
  212334:	48 8d 0d 0d d5 00 00 	lea    0xd50d(%rip),%rcx        # 21f848 <memset+0x1d88>
  21233b:	be 2e 00 00 00       	mov    $0x2e,%esi
  212340:	48 8d 54 24 16       	lea    0x16(%rsp),%rdx
  212345:	e8 96 82 00 00       	callq  21a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  21234a:	0f 0b                	ud2    
  21234c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Err(e) => e,
  212351:	48 8b 41 08          	mov    0x8(%rcx),%rax
  212355:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  212359:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21235e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    }
  212363:	48 83 c4 28          	add    $0x28,%rsp
  212367:	c3                   	retq   
  212368:	cc                   	int3   
  212369:	cc                   	int3   
  21236a:	cc                   	int3   
  21236b:	cc                   	int3   
  21236c:	cc                   	int3   
  21236d:	cc                   	int3   
  21236e:	cc                   	int3   
  21236f:	cc                   	int3   

0000000000212370 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE>:
    pub fn ok(self) -> Option<T> {
  212370:	48 83 ec 20          	sub    $0x20,%rsp
  212374:	48 89 3c 24          	mov    %rdi,(%rsp)
  212378:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  21237d:	48 8b 04 24          	mov    (%rsp),%rax
  212381:	48 85 c0             	test   %rax,%rax
  212384:	74 06                	je     21238c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x1c>
  212386:	eb 00                	jmp    212388 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x18>
  212388:	eb 09                	jmp    212393 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x23>
  21238a:	0f 0b                	ud2    
            Ok(x) => Some(x),
  21238c:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
    }
  212391:	eb 05                	jmp    212398 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x28>
            Err(_) => None,
  212393:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
    }
  212398:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  21239d:	75 0e                	jne    2123ad <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x3d>
  21239f:	8a 44 24 17          	mov    0x17(%rsp),%al
  2123a3:	24 01                	and    $0x1,%al
  2123a5:	0f b6 c0             	movzbl %al,%eax
  2123a8:	48 83 c4 20          	add    $0x20,%rsp
  2123ac:	c3                   	retq   
  2123ad:	eb f0                	jmp    21239f <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h77310983833f29acE+0x2f>
  2123af:	cc                   	int3   

00000000002123b0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E>:
    pub fn ok(self) -> Option<T> {
  2123b0:	48 83 ec 28          	sub    $0x28,%rsp
  2123b4:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  2123b8:	48 8b 07             	mov    (%rdi),%rax
  2123bb:	48 85 c0             	test   %rax,%rax
  2123be:	74 06                	je     2123c6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x16>
  2123c0:	eb 00                	jmp    2123c2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x12>
  2123c2:	eb 2e                	jmp    2123f2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x42>
  2123c4:	0f 0b                	ud2    
  2123c6:	48 8b 04 24          	mov    (%rsp),%rax
            Ok(x) => Some(x),
  2123ca:	48 8b 40 08          	mov    0x8(%rax),%rax
  2123ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2123d3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2123d8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2123dd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2123e2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2123e7:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  2123ee:	00 00 
    }
  2123f0:	eb 09                	jmp    2123fb <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x4b>
            Err(_) => None,
  2123f2:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2123f9:	00 00 
  2123fb:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2123ff:	48 83 38 00          	cmpq   $0x0,(%rax)
  212403:	75 0f                	jne    212414 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x64>
  212405:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21240a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21240f:	48 83 c4 28          	add    $0x28,%rsp
  212413:	c3                   	retq   
  212414:	eb ef                	jmp    212405 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E+0x55>
  212416:	cc                   	int3   
  212417:	cc                   	int3   
  212418:	cc                   	int3   
  212419:	cc                   	int3   
  21241a:	cc                   	int3   
  21241b:	cc                   	int3   
  21241c:	cc                   	int3   
  21241d:	cc                   	int3   
  21241e:	cc                   	int3   
  21241f:	cc                   	int3   

0000000000212420 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE>:
    pub const fn is_ok(&self) -> bool {
  212420:	48 83 ec 10          	sub    $0x10,%rsp
  212424:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  212429:	0f b7 07             	movzwl (%rdi),%eax
  21242c:	48 83 f8 00          	cmp    $0x0,%rax
  212430:	75 07                	jne    212439 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE+0x19>
  212432:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  212437:	eb 05                	jmp    21243e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE+0x1e>
  212439:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21243e:	8a 44 24 07          	mov    0x7(%rsp),%al
  212442:	24 01                	and    $0x1,%al
  212444:	0f b6 c0             	movzbl %al,%eax
  212447:	48 83 c4 10          	add    $0x10,%rsp
  21244b:	c3                   	retq   
  21244c:	cc                   	int3   
  21244d:	cc                   	int3   
  21244e:	cc                   	int3   
  21244f:	cc                   	int3   

0000000000212450 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd2b5b19d53e6fc94E>:
    pub const fn is_ok(&self) -> bool {
  212450:	48 83 ec 10          	sub    $0x10,%rsp
  212454:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  212459:	66 8b 17             	mov    (%rdi),%dx
  21245c:	66 83 ea 07          	sub    $0x7,%dx
  212460:	b8 01 00 00 00       	mov    $0x1,%eax
  212465:	31 c9                	xor    %ecx,%ecx
  212467:	66 83 fa 00          	cmp    $0x0,%dx
  21246b:	48 0f 44 c1          	cmove  %rcx,%rax
  21246f:	48 83 f8 00          	cmp    $0x0,%rax
  212473:	75 07                	jne    21247c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd2b5b19d53e6fc94E+0x2c>
  212475:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  21247a:	eb 05                	jmp    212481 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd2b5b19d53e6fc94E+0x31>
  21247c:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  212481:	8a 44 24 07          	mov    0x7(%rsp),%al
  212485:	24 01                	and    $0x1,%al
  212487:	0f b6 c0             	movzbl %al,%eax
  21248a:	48 83 c4 10          	add    $0x10,%rsp
  21248e:	c3                   	retq   
  21248f:	cc                   	int3   

0000000000212490 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he90eb437918c245bE>:
    pub const fn is_ok(&self) -> bool {
  212490:	48 83 ec 10          	sub    $0x10,%rsp
  212494:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  212499:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  21249d:	75 07                	jne    2124a6 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he90eb437918c245bE+0x16>
  21249f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2124a4:	eb 05                	jmp    2124ab <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he90eb437918c245bE+0x1b>
  2124a6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2124ab:	8a 44 24 07          	mov    0x7(%rsp),%al
  2124af:	24 01                	and    $0x1,%al
  2124b1:	0f b6 c0             	movzbl %al,%eax
  2124b4:	48 83 c4 10          	add    $0x10,%rsp
  2124b8:	c3                   	retq   
  2124b9:	cc                   	int3   
  2124ba:	cc                   	int3   
  2124bb:	cc                   	int3   
  2124bc:	cc                   	int3   
  2124bd:	cc                   	int3   
  2124be:	cc                   	int3   
  2124bf:	cc                   	int3   

00000000002124c0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>:
    pub const fn is_err(&self) -> bool {
  2124c0:	48 83 ec 18          	sub    $0x18,%rsp
  2124c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  2124c9:	e8 52 ff ff ff       	callq  212420 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE>
  2124ce:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2124d2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2124d6:	34 ff                	xor    $0xff,%al
    }
  2124d8:	24 01                	and    $0x1,%al
  2124da:	0f b6 c0             	movzbl %al,%eax
  2124dd:	48 83 c4 18          	add    $0x18,%rsp
  2124e1:	c3                   	retq   
  2124e2:	cc                   	int3   
  2124e3:	cc                   	int3   
  2124e4:	cc                   	int3   
  2124e5:	cc                   	int3   
  2124e6:	cc                   	int3   
  2124e7:	cc                   	int3   
  2124e8:	cc                   	int3   
  2124e9:	cc                   	int3   
  2124ea:	cc                   	int3   
  2124eb:	cc                   	int3   
  2124ec:	cc                   	int3   
  2124ed:	cc                   	int3   
  2124ee:	cc                   	int3   
  2124ef:	cc                   	int3   

00000000002124f0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h74ff6807ba79342fE>:
    pub const fn is_err(&self) -> bool {
  2124f0:	48 83 ec 18          	sub    $0x18,%rsp
  2124f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  2124f9:	e8 52 ff ff ff       	callq  212450 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd2b5b19d53e6fc94E>
  2124fe:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212502:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212506:	34 ff                	xor    $0xff,%al
    }
  212508:	24 01                	and    $0x1,%al
  21250a:	0f b6 c0             	movzbl %al,%eax
  21250d:	48 83 c4 18          	add    $0x18,%rsp
  212511:	c3                   	retq   
  212512:	cc                   	int3   
  212513:	cc                   	int3   
  212514:	cc                   	int3   
  212515:	cc                   	int3   
  212516:	cc                   	int3   
  212517:	cc                   	int3   
  212518:	cc                   	int3   
  212519:	cc                   	int3   
  21251a:	cc                   	int3   
  21251b:	cc                   	int3   
  21251c:	cc                   	int3   
  21251d:	cc                   	int3   
  21251e:	cc                   	int3   
  21251f:	cc                   	int3   

0000000000212520 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf6f3a08eb7a8b11eE>:
    pub const fn is_err(&self) -> bool {
  212520:	48 83 ec 18          	sub    $0x18,%rsp
  212524:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  212529:	e8 62 ff ff ff       	callq  212490 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he90eb437918c245bE>
  21252e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212532:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212536:	34 ff                	xor    $0xff,%al
    }
  212538:	24 01                	and    $0x1,%al
  21253a:	0f b6 c0             	movzbl %al,%eax
  21253d:	48 83 c4 18          	add    $0x18,%rsp
  212541:	c3                   	retq   
  212542:	cc                   	int3   
  212543:	cc                   	int3   
  212544:	cc                   	int3   
  212545:	cc                   	int3   
  212546:	cc                   	int3   
  212547:	cc                   	int3   
  212548:	cc                   	int3   
  212549:	cc                   	int3   
  21254a:	cc                   	int3   
  21254b:	cc                   	int3   
  21254c:	cc                   	int3   
  21254d:	cc                   	int3   
  21254e:	cc                   	int3   
  21254f:	cc                   	int3   

0000000000212550 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E>:
    pub fn unwrap(self) -> T {
  212550:	48 83 ec 28          	sub    $0x28,%rsp
  212554:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  212559:	40 88 f8             	mov    %dil,%al
  21255c:	24 01                	and    $0x1,%al
  21255e:	88 44 24 17          	mov    %al,0x17(%rsp)
        match self {
  212562:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  212567:	a8 01                	test   $0x1,%al
  212569:	74 06                	je     212571 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x21>
  21256b:	eb 00                	jmp    21256d <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x1d>
  21256d:	eb 07                	jmp    212576 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x26>
  21256f:	0f 0b                	ud2    
    }
  212571:	48 83 c4 28          	add    $0x28,%rsp
  212575:	c3                   	retq   
  212576:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  21257b:	48 8d 3d 66 eb fe ff 	lea    -0x1149a(%rip),%rdi        # 2010e8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x299>
  212582:	48 8d 0d df d2 00 00 	lea    0xd2df(%rip),%rcx        # 21f868 <memset+0x1da8>
  212589:	be 2b 00 00 00       	mov    $0x2b,%esi
  21258e:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  212593:	e8 48 80 00 00       	callq  21a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  212598:	0f 0b                	ud2    
  21259a:	cc                   	int3   
  21259b:	cc                   	int3   
  21259c:	cc                   	int3   
  21259d:	cc                   	int3   
  21259e:	cc                   	int3   
  21259f:	cc                   	int3   

00000000002125a0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>:
    pub fn unwrap(self) -> T {
  2125a0:	48 83 ec 28          	sub    $0x28,%rsp
  2125a4:	48 89 34 24          	mov    %rsi,(%rsp)
  2125a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2125ad:	0f b7 07             	movzwl (%rdi),%eax
  2125b0:	48 85 c0             	test   %rax,%rax
  2125b3:	74 06                	je     2125bb <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x1b>
  2125b5:	eb 00                	jmp    2125b7 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x17>
  2125b7:	eb 15                	jmp    2125ce <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x2e>
  2125b9:	0f 0b                	ud2    
  2125bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => t,
  2125c0:	66 8b 40 02          	mov    0x2(%rax),%ax
  2125c4:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
    }
  2125c9:	48 83 c4 28          	add    $0x28,%rsp
  2125cd:	c3                   	retq   
  2125ce:	4c 8b 04 24          	mov    (%rsp),%r8
  2125d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  2125d7:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2125db:	48 8b 40 10          	mov    0x10(%rax),%rax
  2125df:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2125e4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2125e9:	48 8d 3d f8 ea fe ff 	lea    -0x11508(%rip),%rdi        # 2010e8 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x299>
  2125f0:	48 8d 0d 91 d2 00 00 	lea    0xd291(%rip),%rcx        # 21f888 <memset+0x1dc8>
  2125f7:	be 2b 00 00 00       	mov    $0x2b,%esi
  2125fc:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  212601:	e8 da 7f 00 00       	callq  21a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  212606:	0f 0b                	ud2    
  212608:	cc                   	int3   
  212609:	cc                   	int3   
  21260a:	cc                   	int3   
  21260b:	cc                   	int3   
  21260c:	cc                   	int3   
  21260d:	cc                   	int3   
  21260e:	cc                   	int3   
  21260f:	cc                   	int3   

0000000000212610 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  212610:	48 83 ec 20          	sub    $0x20,%rsp
  212614:	40 88 f8             	mov    %dil,%al
  212617:	24 01                	and    $0x1,%al
  212619:	88 44 24 06          	mov    %al,0x6(%rsp)
        match self {
  21261d:	0f b6 44 24 06       	movzbl 0x6(%rsp),%eax
  212622:	a8 01                	test   $0x1,%al
  212624:	74 06                	je     21262c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E+0x1c>
  212626:	eb 00                	jmp    212628 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E+0x18>
  212628:	eb 09                	jmp    212633 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E+0x23>
  21262a:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  21262c:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  212631:	eb 05                	jmp    212638 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50b8d0a7dd807821E+0x28>
            Err(e) => ControlFlow::Break(Err(e)),
  212633:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  212638:	8a 44 24 07          	mov    0x7(%rsp),%al
  21263c:	24 01                	and    $0x1,%al
  21263e:	0f b6 c0             	movzbl %al,%eax
  212641:	48 83 c4 20          	add    $0x20,%rsp
  212645:	c3                   	retq   
  212646:	cc                   	int3   
  212647:	cc                   	int3   
  212648:	cc                   	int3   
  212649:	cc                   	int3   
  21264a:	cc                   	int3   
  21264b:	cc                   	int3   
  21264c:	cc                   	int3   
  21264d:	cc                   	int3   
  21264e:	cc                   	int3   
  21264f:	cc                   	int3   

0000000000212650 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  212650:	48 83 ec 50          	sub    $0x50,%rsp
  212654:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212659:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21265e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  212663:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  212668:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21266d:	48 89 04 24          	mov    %rax,(%rsp)
        match self {
  212671:	48 8b 04 24          	mov    (%rsp),%rax
  212675:	48 85 c0             	test   %rax,%rax
  212678:	74 06                	je     212680 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E+0x30>
  21267a:	eb 00                	jmp    21267c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E+0x2c>
  21267c:	eb 2b                	jmp    2126a9 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E+0x59>
  21267e:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  212680:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212685:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21268a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21268f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  212694:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  212699:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21269e:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  2126a5:	00 00 
  2126a7:	eb 22                	jmp    2126cb <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha43dd9871faecba4E+0x7b>
            Err(e) => ControlFlow::Break(Err(e)),
  2126a9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2126ae:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2126b3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2126b8:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2126bd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2126c2:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  2126c9:	00 00 
    }
  2126cb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2126d0:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2126d5:	48 83 c4 50          	add    $0x50,%rsp
  2126d9:	c3                   	retq   
  2126da:	cc                   	int3   
  2126db:	cc                   	int3   
  2126dc:	cc                   	int3   
  2126dd:	cc                   	int3   
  2126de:	cc                   	int3   
  2126df:	cc                   	int3   

00000000002126e0 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9f9431fe0cfc6d82E>:
    P: FnMut(&I::Item) -> bool,
{
    type Item = I::Item;

    #[inline]
    fn next(&mut self) -> Option<I::Item> {
  2126e0:	48 83 ec 18          	sub    $0x18,%rsp
  2126e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.iter.find(&mut self.predicate)
  2126e9:	48 89 fe             	mov    %rdi,%rsi
  2126ec:	e8 df 06 00 00       	callq  212dd0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E>
  2126f1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2126f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2126fb:	48 83 c4 18          	add    $0x18,%rsp
  2126ff:	c3                   	retq   

0000000000212700 <_ZN4core4iter6traits8iterator8Iterator3map17h42ac7f9217de9e49E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  212700:	48 83 ec 28          	sub    $0x28,%rsp
  212704:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212709:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map::new(self, f)
  21270e:	e8 dd 7b ff ff       	callq  20a2f0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h9550593ca33b45d6E>
  212713:	48 89 04 24          	mov    %rax,(%rsp)
  212717:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21271c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212721:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212725:	48 83 c4 28          	add    $0x28,%rsp
  212729:	c3                   	retq   
  21272a:	cc                   	int3   
  21272b:	cc                   	int3   
  21272c:	cc                   	int3   
  21272d:	cc                   	int3   
  21272e:	cc                   	int3   
  21272f:	cc                   	int3   

0000000000212730 <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17h1c9a418302d4ed51E>:
    pub(in crate::iter) fn new(iter: I, predicate: P) -> Filter<I, P> {
  212730:	48 83 ec 28          	sub    $0x28,%rsp
  212734:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212739:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Filter { iter, predicate }
  21273e:	48 89 3c 24          	mov    %rdi,(%rsp)
  212742:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  212747:	48 8b 04 24          	mov    (%rsp),%rax
  21274b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212750:	48 83 c4 28          	add    $0x28,%rsp
  212754:	c3                   	retq   
  212755:	cc                   	int3   
  212756:	cc                   	int3   
  212757:	cc                   	int3   
  212758:	cc                   	int3   
  212759:	cc                   	int3   
  21275a:	cc                   	int3   
  21275b:	cc                   	int3   
  21275c:	cc                   	int3   
  21275d:	cc                   	int3   
  21275e:	cc                   	int3   
  21275f:	cc                   	int3   

0000000000212760 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>:
    pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
  212760:	48 83 ec 28          	sub    $0x28,%rsp
  212764:	48 89 3c 24          	mov    %rdi,(%rsp)
  212768:	88 c8                	mov    %cl,%al
  21276a:	88 44 24 0b          	mov    %al,0xb(%rsp)
  21276e:	88 d1                	mov    %dl,%cl
  212770:	88 4c 24 0c          	mov    %cl,0xc(%rsp)
  212774:	40 88 f2             	mov    %sil,%dl
  212777:	88 54 24 0d          	mov    %dl,0xd(%rsp)
  21277b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212780:	80 e2 01             	and    $0x1,%dl
  212783:	88 54 24 23          	mov    %dl,0x23(%rsp)
  212787:	80 e1 01             	and    $0x1,%cl
  21278a:	88 4c 24 24          	mov    %cl,0x24(%rsp)
  21278e:	88 44 24 25          	mov    %al,0x25(%rsp)
        match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
  212792:	0f b6 f8             	movzbl %al,%edi
  212795:	e8 e6 03 00 00       	callq  212b80 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>
  21279a:	88 44 24 0e          	mov    %al,0xe(%rsp)
  21279e:	48 8b 3c 24          	mov    (%rsp),%rdi
  2127a2:	8a 44 24 0c          	mov    0xc(%rsp),%al
  2127a6:	8a 54 24 0d          	mov    0xd(%rsp),%dl
  2127aa:	40 8a 74 24 0e       	mov    0xe(%rsp),%sil
  2127af:	8a 4c 24 0b          	mov    0xb(%rsp),%cl
  2127b3:	0f b6 c9             	movzbl %cl,%ecx
  2127b6:	44 0f b6 c6          	movzbl %sil,%r8d
  2127ba:	0f b6 f2             	movzbl %dl,%esi
  2127bd:	83 e6 01             	and    $0x1,%esi
  2127c0:	0f b6 d0             	movzbl %al,%edx
  2127c3:	83 e2 01             	and    $0x1,%edx
  2127c6:	e8 55 00 00 00       	callq  212820 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E>
  2127cb:	88 54 24 11          	mov    %dl,0x11(%rsp)
  2127cf:	88 44 24 10          	mov    %al,0x10(%rsp)
  2127d3:	0f b6 44 24 10       	movzbl 0x10(%rsp),%eax
  2127d8:	a8 01                	test   $0x1,%al
  2127da:	74 06                	je     2127e2 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x82>
  2127dc:	eb 00                	jmp    2127de <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x7e>
  2127de:	eb 17                	jmp    2127f7 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x97>
  2127e0:	0f 0b                	ud2    
            Ok(x) => x,
  2127e2:	8a 44 24 11          	mov    0x11(%rsp),%al
  2127e6:	88 c1                	mov    %al,%cl
  2127e8:	80 e1 01             	and    $0x1,%cl
  2127eb:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  2127ef:	24 01                	and    $0x1,%al
  2127f1:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2127f5:	eb 13                	jmp    21280a <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0xaa>
            Err(x) => x,
  2127f7:	8a 44 24 11          	mov    0x11(%rsp),%al
  2127fb:	88 c1                	mov    %al,%cl
  2127fd:	80 e1 01             	and    $0x1,%cl
  212800:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  212804:	24 01                	and    $0x1,%al
  212806:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  21280a:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21280e:	24 01                	and    $0x1,%al
  212810:	0f b6 c0             	movzbl %al,%eax
  212813:	48 83 c4 28          	add    $0x28,%rsp
  212817:	c3                   	retq   
  212818:	cc                   	int3   
  212819:	cc                   	int3   
  21281a:	cc                   	int3   
  21281b:	cc                   	int3   
  21281c:	cc                   	int3   
  21281d:	cc                   	int3   
  21281e:	cc                   	int3   
  21281f:	cc                   	int3   

0000000000212820 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E>:
    pub fn compare_exchange(
  212820:	48 83 ec 38          	sub    $0x38,%rsp
  212824:	44 88 c0             	mov    %r8b,%al
  212827:	88 44 24 04          	mov    %al,0x4(%rsp)
  21282b:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  21282f:	88 54 24 06          	mov    %dl,0x6(%rsp)
  212833:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  212838:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21283d:	40 80 e6 01          	and    $0x1,%sil
  212841:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  212846:	80 e2 01             	and    $0x1,%dl
  212849:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  21284d:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  212851:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  212855:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21285a:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21285f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  212864:	8a 44 24 06          	mov    0x6(%rsp),%al
  212868:	8a 54 24 07          	mov    0x7(%rsp),%dl
  21286c:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  212871:	8a 4c 24 05          	mov    0x5(%rsp),%cl
            atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
  212875:	0f b6 c9             	movzbl %cl,%ecx
  212878:	44 0f b6 c6          	movzbl %sil,%r8d
  21287c:	0f b6 f2             	movzbl %dl,%esi
  21287f:	83 e6 01             	and    $0x1,%esi
  212882:	0f b6 d0             	movzbl %al,%edx
  212885:	83 e2 01             	and    $0x1,%edx
  212888:	e8 63 f5 ff ff       	callq  211df0 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E>
  21288d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  212891:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  212895:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  21289a:	a8 01                	test   $0x1,%al
  21289c:	74 06                	je     2128a4 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x84>
  21289e:	eb 00                	jmp    2128a0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x80>
  2128a0:	eb 1c                	jmp    2128be <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x9e>
  2128a2:	0f 0b                	ud2    
            Ok(x) => Ok(x != 0),
  2128a4:	8a 44 24 19          	mov    0x19(%rsp),%al
  2128a8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2128ac:	3c 00                	cmp    $0x0,%al
  2128ae:	0f 95 c0             	setne  %al
  2128b1:	24 01                	and    $0x1,%al
  2128b3:	88 44 24 11          	mov    %al,0x11(%rsp)
  2128b7:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  2128bc:	eb 18                	jmp    2128d6 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0xb6>
            Err(x) => Err(x != 0),
  2128be:	8a 44 24 19          	mov    0x19(%rsp),%al
  2128c2:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  2128c6:	3c 00                	cmp    $0x0,%al
  2128c8:	0f 95 c0             	setne  %al
  2128cb:	24 01                	and    $0x1,%al
  2128cd:	88 44 24 11          	mov    %al,0x11(%rsp)
  2128d1:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
    }
  2128d6:	8a 44 24 10          	mov    0x10(%rsp),%al
  2128da:	8a 54 24 11          	mov    0x11(%rsp),%dl
  2128de:	48 83 c4 38          	add    $0x38,%rsp
  2128e2:	c3                   	retq   
  2128e3:	cc                   	int3   
  2128e4:	cc                   	int3   
  2128e5:	cc                   	int3   
  2128e6:	cc                   	int3   
  2128e7:	cc                   	int3   
  2128e8:	cc                   	int3   
  2128e9:	cc                   	int3   
  2128ea:	cc                   	int3   
  2128eb:	cc                   	int3   
  2128ec:	cc                   	int3   
  2128ed:	cc                   	int3   
  2128ee:	cc                   	int3   
  2128ef:	cc                   	int3   

00000000002128f0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>:
    pub const fn new(v: bool) -> AtomicBool {
  2128f0:	48 83 ec 10          	sub    $0x10,%rsp
  2128f4:	40 88 f8             	mov    %dil,%al
  2128f7:	88 c1                	mov    %al,%cl
  2128f9:	80 e1 01             	and    $0x1,%cl
  2128fc:	88 4c 24 0d          	mov    %cl,0xd(%rsp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
  212900:	24 01                	and    $0x1,%al
  212902:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212906:	88 44 24 0e          	mov    %al,0xe(%rsp)
    }
  21290a:	8a 44 24 0e          	mov    0xe(%rsp),%al
  21290e:	88 44 24 07          	mov    %al,0x7(%rsp)
  212912:	8a 44 24 07          	mov    0x7(%rsp),%al
  212916:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  21291a:	8a 44 24 08          	mov    0x8(%rsp),%al
  21291e:	48 83 c4 10          	add    $0x10,%rsp
  212922:	c3                   	retq   
  212923:	cc                   	int3   
  212924:	cc                   	int3   
  212925:	cc                   	int3   
  212926:	cc                   	int3   
  212927:	cc                   	int3   
  212928:	cc                   	int3   
  212929:	cc                   	int3   
  21292a:	cc                   	int3   
  21292b:	cc                   	int3   
  21292c:	cc                   	int3   
  21292d:	cc                   	int3   
  21292e:	cc                   	int3   
  21292f:	cc                   	int3   

0000000000212930 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>:
    pub fn load(&self, order: Ordering) -> bool {
  212930:	48 83 ec 28          	sub    $0x28,%rsp
  212934:	40 88 f0             	mov    %sil,%al
  212937:	88 44 24 07          	mov    %al,0x7(%rsp)
  21293b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212940:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  212944:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212949:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21294e:	8a 44 24 07          	mov    0x7(%rsp),%al
  212952:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  212957:	0f b6 f0             	movzbl %al,%esi
  21295a:	e8 41 f3 ff ff       	callq  211ca0 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E>
  21295f:	88 44 24 06          	mov    %al,0x6(%rsp)
  212963:	8a 44 24 06          	mov    0x6(%rsp),%al
  212967:	3c 00                	cmp    $0x0,%al
  212969:	0f 95 c0             	setne  %al
    }
  21296c:	24 01                	and    $0x1,%al
  21296e:	0f b6 c0             	movzbl %al,%eax
  212971:	48 83 c4 28          	add    $0x28,%rsp
  212975:	c3                   	retq   
  212976:	cc                   	int3   
  212977:	cc                   	int3   
  212978:	cc                   	int3   
  212979:	cc                   	int3   
  21297a:	cc                   	int3   
  21297b:	cc                   	int3   
  21297c:	cc                   	int3   
  21297d:	cc                   	int3   
  21297e:	cc                   	int3   
  21297f:	cc                   	int3   

0000000000212980 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>:
    pub fn store(&self, val: bool, order: Ordering) {
  212980:	48 83 ec 28          	sub    $0x28,%rsp
  212984:	88 d0                	mov    %dl,%al
  212986:	88 44 24 06          	mov    %al,0x6(%rsp)
  21298a:	40 88 f1             	mov    %sil,%cl
  21298d:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  212991:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212996:	80 e1 01             	and    $0x1,%cl
  212999:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  21299d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2129a1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2129a6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2129ab:	8a 44 24 06          	mov    0x6(%rsp),%al
  2129af:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2129b4:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  2129b8:	80 e1 01             	and    $0x1,%cl
  2129bb:	0f b6 f1             	movzbl %cl,%esi
  2129be:	0f b6 d0             	movzbl %al,%edx
  2129c1:	e8 7a f3 ff ff       	callq  211d40 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E>
    }
  2129c6:	48 83 c4 28          	add    $0x28,%rsp
  2129ca:	c3                   	retq   
  2129cb:	cc                   	int3   
  2129cc:	cc                   	int3   
  2129cd:	cc                   	int3   
  2129ce:	cc                   	int3   
  2129cf:	cc                   	int3   

00000000002129d0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>:
            pub fn compare_and_swap(&self,
  2129d0:	48 83 ec 68          	sub    $0x68,%rsp
  2129d4:	48 89 14 24          	mov    %rdx,(%rsp)
  2129d8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2129dd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2129e2:	88 c8                	mov    %cl,%al
  2129e4:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  2129e8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  2129ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  2129f2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  2129f7:	88 44 24 57          	mov    %al,0x57(%rsp)
                                            strongest_failure_ordering(order)) {
  2129fb:	0f b6 f8             	movzbl %al,%edi
  2129fe:	e8 7d 01 00 00       	callq  212b80 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>
  212a03:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  212a07:	48 8b 14 24          	mov    (%rsp),%rdx
  212a0b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  212a10:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212a15:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  212a19:	8a 4c 24 1e          	mov    0x1e(%rsp),%cl
                match self.compare_exchange(current,
  212a1d:	0f b6 c9             	movzbl %cl,%ecx
  212a20:	44 0f b6 c0          	movzbl %al,%r8d
  212a24:	e8 47 00 00 00       	callq  212a70 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hdb7614b763f33c27E>
  212a29:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  212a2e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212a33:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  212a38:	48 85 c0             	test   %rax,%rax
  212a3b:	74 06                	je     212a43 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x73>
  212a3d:	eb 00                	jmp    212a3f <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x6f>
  212a3f:	eb 13                	jmp    212a54 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x84>
  212a41:	0f 0b                	ud2    
                    Ok(x) => x,
  212a43:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  212a48:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212a4d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  212a52:	eb 0f                	jmp    212a63 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x93>
                    Err(x) => x,
  212a54:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  212a59:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  212a5e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            }
  212a63:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212a68:	48 83 c4 68          	add    $0x68,%rsp
  212a6c:	c3                   	retq   
  212a6d:	cc                   	int3   
  212a6e:	cc                   	int3   
  212a6f:	cc                   	int3   

0000000000212a70 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hdb7614b763f33c27E>:
            pub fn compare_exchange(&self,
  212a70:	48 83 ec 58          	sub    $0x58,%rsp
  212a74:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  212a79:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212a7e:	44 88 c0             	mov    %r8b,%al
  212a81:	88 44 24 26          	mov    %al,0x26(%rsp)
  212a85:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  212a89:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  212a8e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  212a93:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  212a98:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  212a9c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  212aa0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  212aa5:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  212aaa:	8a 44 24 26          	mov    0x26(%rsp),%al
  212aae:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  212ab2:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  212ab7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  212abc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  212ac1:	0f b6 c9             	movzbl %cl,%ecx
  212ac4:	44 0f b6 c0          	movzbl %al,%r8d
  212ac8:	e8 63 67 00 00       	callq  219230 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  212acd:	48 89 04 24          	mov    %rax,(%rsp)
  212ad1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212ad6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212adb:	48 8b 04 24          	mov    (%rsp),%rax
            }
  212adf:	48 83 c4 58          	add    $0x58,%rsp
  212ae3:	c3                   	retq   
  212ae4:	cc                   	int3   
  212ae5:	cc                   	int3   
  212ae6:	cc                   	int3   
  212ae7:	cc                   	int3   
  212ae8:	cc                   	int3   
  212ae9:	cc                   	int3   
  212aea:	cc                   	int3   
  212aeb:	cc                   	int3   
  212aec:	cc                   	int3   
  212aed:	cc                   	int3   
  212aee:	cc                   	int3   
  212aef:	cc                   	int3   

0000000000212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>:
            pub fn load(&self, order: Ordering) -> $int_type {
  212af0:	48 83 ec 38          	sub    $0x38,%rsp
  212af4:	40 88 f0             	mov    %sil,%al
  212af7:	88 44 24 17          	mov    %al,0x17(%rsp)
  212afb:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212b00:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  212b04:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212b09:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  212b0e:	8a 44 24 17          	mov    0x17(%rsp),%al
  212b12:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  212b17:	0f b6 f0             	movzbl %al,%esi
  212b1a:	e8 a1 65 00 00       	callq  2190c0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  212b1f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212b24:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  212b29:	48 83 c4 38          	add    $0x38,%rsp
  212b2d:	c3                   	retq   
  212b2e:	cc                   	int3   
  212b2f:	cc                   	int3   

0000000000212b30 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  212b30:	48 83 ec 38          	sub    $0x38,%rsp
  212b34:	48 89 34 24          	mov    %rsi,(%rsp)
  212b38:	88 d0                	mov    %dl,%al
  212b3a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212b3e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212b43:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  212b48:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  212b4c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212b51:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  212b56:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212b5a:	48 8b 34 24          	mov    (%rsp),%rsi
  212b5e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  212b63:	0f b6 d0             	movzbl %al,%edx
  212b66:	e8 05 66 00 00       	callq  219170 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  212b6b:	48 83 c4 38          	add    $0x38,%rsp
  212b6f:	c3                   	retq   

0000000000212b70 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>:
///
/// [`hint::spin_loop`]: crate::hint::spin_loop
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[rustc_deprecated(since = "1.51.0", reason = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
  212b70:	50                   	push   %rax
    spin_loop()
  212b71:	e8 aa 31 00 00       	callq  215d20 <_ZN4core4hint9spin_loop17h42efeaf1154a507bE>
}
  212b76:	58                   	pop    %rax
  212b77:	c3                   	retq   
  212b78:	cc                   	int3   
  212b79:	cc                   	int3   
  212b7a:	cc                   	int3   
  212b7b:	cc                   	int3   
  212b7c:	cc                   	int3   
  212b7d:	cc                   	int3   
  212b7e:	cc                   	int3   
  212b7f:	cc                   	int3   

0000000000212b80 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
  212b80:	48 83 ec 10          	sub    $0x10,%rsp
  212b84:	40 88 f8             	mov    %dil,%al
  212b87:	88 44 24 0e          	mov    %al,0xe(%rsp)
    match order {
  212b8b:	0f b6 44 24 0e       	movzbl 0xe(%rsp),%eax
  212b90:	48 89 04 24          	mov    %rax,(%rsp)
  212b94:	48 8b 04 24          	mov    (%rsp),%rax
  212b98:	48 8d 0d 75 e5 fe ff 	lea    -0x11a8b(%rip),%rcx        # 201114 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x2c5>
  212b9f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  212ba3:	48 01 c8             	add    %rcx,%rax
  212ba6:	ff e0                	jmpq   *%rax
  212ba8:	0f 0b                	ud2    
        Relaxed => Relaxed,
  212baa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  212baf:	eb 1a                	jmp    212bcb <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        Release => Relaxed,
  212bb1:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  212bb6:	eb 13                	jmp    212bcb <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        Acquire => Acquire,
  212bb8:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  212bbd:	eb 0c                	jmp    212bcb <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        AcqRel => Acquire,
  212bbf:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  212bc4:	eb 05                	jmp    212bcb <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        SeqCst => SeqCst,
  212bc6:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
}
  212bcb:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212bcf:	48 83 c4 10          	add    $0x10,%rsp
  212bd3:	c3                   	retq   
  212bd4:	cc                   	int3   
  212bd5:	cc                   	int3   
  212bd6:	cc                   	int3   
  212bd7:	cc                   	int3   
  212bd8:	cc                   	int3   
  212bd9:	cc                   	int3   
  212bda:	cc                   	int3   
  212bdb:	cc                   	int3   
  212bdc:	cc                   	int3   
  212bdd:	cc                   	int3   
  212bde:	cc                   	int3   
  212bdf:	cc                   	int3   

0000000000212be0 <_ZN100_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf3ba1facbc6c1747E>:
    I: Iterator,
{
    type Item = <I as Iterator>::Item;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
  212be0:	48 83 ec 18          	sub    $0x18,%rsp
  212be4:	48 89 f8             	mov    %rdi,%rax
  212be7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212bec:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        FuseImpl::next(self)
  212bf1:	e8 0a 00 00 00       	callq  212c00 <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E>
  212bf6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  212bfb:	48 83 c4 18          	add    $0x18,%rsp
  212bff:	c3                   	retq   

0000000000212c00 <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E>:
impl<I> FuseImpl<I> for Fuse<I>
where
    I: FusedIterator,
{
    #[inline]
    fn next(&mut self) -> Option<<I as Iterator>::Item> {
  212c00:	48 83 ec 28          	sub    $0x28,%rsp
  212c04:	48 89 34 24          	mov    %rsi,(%rsp)
  212c08:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  212c0d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212c12:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        spec!(self.iter.next())
  212c17:	48 8b 06             	mov    (%rsi),%rax
  212c1a:	48 85 c0             	test   %rax,%rax
  212c1d:	0f 95 c0             	setne  %al
  212c20:	0f b6 c0             	movzbl %al,%eax
  212c23:	74 06                	je     212c2b <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E+0x2b>
  212c25:	eb 00                	jmp    212c27 <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E+0x27>
  212c27:	eb 0d                	jmp    212c36 <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E+0x36>
  212c29:	0f 0b                	ud2    
  212c2b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212c30:	c6 40 18 02          	movb   $0x2,0x18(%rax)
  212c34:	eb 15                	jmp    212c4b <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E+0x4b>
  212c36:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  212c3b:	48 8b 34 24          	mov    (%rsp),%rsi
  212c3f:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  212c44:	e8 07 73 ff ff       	callq  209f50 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8401963b1cc66105E>
  212c49:	eb 00                	jmp    212c4b <_ZN107_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..adapters..fuse..FuseImpl$LT$I$GT$$GT$4next17hce152ca510a1d482E+0x4b>
  212c4b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  212c50:	48 83 c4 28          	add    $0x28,%rsp
  212c54:	c3                   	retq   
  212c55:	cc                   	int3   
  212c56:	cc                   	int3   
  212c57:	cc                   	int3   
  212c58:	cc                   	int3   
  212c59:	cc                   	int3   
  212c5a:	cc                   	int3   
  212c5b:	cc                   	int3   
  212c5c:	cc                   	int3   
  212c5d:	cc                   	int3   
  212c5e:	cc                   	int3   
  212c5f:	cc                   	int3   

0000000000212c60 <_ZN4core4iter8adapters4fuse13Fuse$LT$I$GT$3new17h2c7cdda1f878b301E>:
    pub(in crate::iter) fn new(iter: I) -> Fuse<I> {
  212c60:	48 83 ec 30          	sub    $0x30,%rsp
  212c64:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212c69:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        Fuse { iter: Some(iter) }
  212c6e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212c73:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212c78:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212c7d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  212c82:	48 89 0c 24          	mov    %rcx,(%rsp)
  212c86:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  212c8b:	48 8b 04 24          	mov    (%rsp),%rax
  212c8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212c94:	48 83 c4 30          	add    $0x30,%rsp
  212c98:	c3                   	retq   
  212c99:	cc                   	int3   
  212c9a:	cc                   	int3   
  212c9b:	cc                   	int3   
  212c9c:	cc                   	int3   
  212c9d:	cc                   	int3   
  212c9e:	cc                   	int3   
  212c9f:	cc                   	int3   

0000000000212ca0 <_ZN4core4iter6traits8iterator8Iterator6filter17h3e1c1bdf76b5f4e0E>:
    fn filter<P>(self, predicate: P) -> Filter<Self, P>
  212ca0:	48 83 ec 28          	sub    $0x28,%rsp
  212ca4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212ca9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Filter::new(self, predicate)
  212cae:	e8 7d fa ff ff       	callq  212730 <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17h1c9a418302d4ed51E>
  212cb3:	48 89 04 24          	mov    %rax,(%rsp)
  212cb7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  212cbc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  212cc1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  212cc5:	48 83 c4 28          	add    $0x28,%rsp
  212cc9:	c3                   	retq   
  212cca:	cc                   	int3   
  212ccb:	cc                   	int3   
  212ccc:	cc                   	int3   
  212ccd:	cc                   	int3   
  212cce:	cc                   	int3   
  212ccf:	cc                   	int3   

0000000000212cd0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
  212cd0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  212cd7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212cdc:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  212ce1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  212ce6:	e8 65 71 ff ff       	callq  209e50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h62fe95701eedc12bE>
  212ceb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  212cf0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  212cf5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
  212cfa:	e8 f1 70 ff ff       	callq  209df0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h40262206e0af07c1E>

            let end = if mem::size_of::<T>() == 0 {
  212cff:	eb 00                	jmp    212d01 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0x31>
  212d01:	b8 18 00 00 00       	mov    $0x18,%eax
  212d06:	48 83 f8 00          	cmp    $0x0,%rax
  212d0a:	75 32                	jne    212d3e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0x6e>
  212d0c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  212d11:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212d16:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  212d1b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  212d20:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  212d25:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) }
  212d2a:	48 01 c8             	add    %rcx,%rax
  212d2d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  212d32:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  212d37:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  212d3c:	eb 59                	jmp    212d97 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0xc7>
  212d3e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212d43:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  212d48:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  212d4f:	00 
  212d50:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  212d57:	00 
  212d58:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  212d5f:	00 
  212d60:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  212d67:	00 
        unsafe { intrinsics::offset(self, count) }
  212d68:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  212d6c:	48 01 c8             	add    %rcx,%rax
  212d6f:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  212d76:	00 
  212d77:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  212d7e:	00 
            } else {
                ptr.add(slice.len())
  212d7f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  212d84:	eb 00                	jmp    212d86 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0xb6>
  212d86:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  212d8b:	e8 80 51 00 00       	callq  217f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h6b4b85800e3c5941E>
  212d90:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212d95:	eb 0c                	jmp    212da3 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0xd3>
  212d97:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  212d9c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  212da1:	eb e3                	jmp    212d86 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4a1d895f2d492ae3E+0xb6>
  212da3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  212da8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  212dad:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  212db2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  212db7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  212dbc:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  212dc1:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  212dc8:	c3                   	retq   
  212dc9:	cc                   	int3   
  212dca:	cc                   	int3   
  212dcb:	cc                   	int3   
  212dcc:	cc                   	int3   
  212dcd:	cc                   	int3   
  212dce:	cc                   	int3   
  212dcf:	cc                   	int3   

0000000000212dd0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
  212dd0:	48 83 ec 48          	sub    $0x48,%rsp
  212dd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  212dd9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212dde:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  212de3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            where
                Self: Sized,
                P: FnMut(&Self::Item) -> bool,
            {
                while let Some(x) = self.next() {
  212de8:	e8 73 00 00 00       	callq  212e60 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE>
  212ded:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212df2:	b8 01 00 00 00       	mov    $0x1,%eax
  212df7:	31 c9                	xor    %ecx,%ecx
  212df9:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  212dff:	48 0f 44 c1          	cmove  %rcx,%rax
  212e03:	48 83 f8 01          	cmp    $0x1,%rax
  212e07:	75 29                	jne    212e32 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x62>
  212e09:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  212e0e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if predicate(&x) {
  212e13:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  212e18:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  212e1d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  212e22:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  212e27:	e8 14 57 ff ff       	callq  208540 <_ZN4core3ops8function5impls79_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$8call_mut17h931094c9fc917d52E>
  212e2c:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212e30:	eb 13                	jmp    212e45 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x75>
                        return Some(x);
                    }
                }
                None
  212e32:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  212e39:	00 00 
            }
  212e3b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212e40:	48 83 c4 48          	add    $0x48,%rsp
  212e44:	c3                   	retq   
  212e45:	8a 44 24 0f          	mov    0xf(%rsp),%al
                    if predicate(&x) {
  212e49:	a8 01                	test   $0x1,%al
  212e4b:	75 04                	jne    212e51 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x81>
  212e4d:	eb 00                	jmp    212e4f <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x7f>
                while let Some(x) = self.next() {
  212e4f:	eb 92                	jmp    212de3 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x13>
                        return Some(x);
  212e51:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  212e56:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            }
  212e5b:	eb de                	jmp    212e3b <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4find17hf7ad590e81fc5426E+0x6b>
  212e5d:	cc                   	int3   
  212e5e:	cc                   	int3   
  212e5f:	cc                   	int3   

0000000000212e60 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE>:
            fn next(&mut self) -> Option<$elem> {
  212e60:	48 83 ec 78          	sub    $0x78,%rsp
  212e64:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212e69:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  212e6e:	48 8b 3f             	mov    (%rdi),%rdi
  212e71:	e8 ba 50 00 00       	callq  217f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h50d2e790f7322737E>
  212e76:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212e7b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  212e80:	e8 cb 6e ff ff       	callq  209d50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6ef1857f38a0a2dE>
                    if mem::size_of::<T>() != 0 {
  212e85:	eb 00                	jmp    212e87 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0x27>
  212e87:	b8 18 00 00 00       	mov    $0x18,%eax
  212e8c:	48 83 f8 00          	cmp    $0x0,%rax
  212e90:	75 02                	jne    212e94 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0x34>
  212e92:	eb 10                	jmp    212ea4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0x44>
  212e94:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  212e99:	48 8b 78 08          	mov    0x8(%rax),%rdi
  212e9d:	e8 4e 6f ff ff       	callq  209df0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h40262206e0af07c1E>
                    if mem::size_of::<T>() != 0 {
  212ea2:	eb 00                	jmp    212ea4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0x44>
  212ea4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  212ea9:	48 8b 38             	mov    (%rax),%rdi
  212eac:	e8 7f 50 00 00       	callq  217f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h50d2e790f7322737E>
  212eb1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212eb6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  212ebb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  212ec0:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  212ec4:	74 77                	je     212f3d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0xdd>
  212ec6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212ecb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212ed0:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  212ed7:	00 00 
                    let old = self.ptr.as_ptr();
  212ed9:	48 8b 38             	mov    (%rax),%rdi
  212edc:	e8 4f 50 00 00       	callq  217f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h50d2e790f7322737E>
  212ee1:	48 89 c1             	mov    %rax,%rcx
  212ee4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212ee9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  212eee:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  212ef3:	48 8b 38             	mov    (%rax),%rdi
  212ef6:	e8 35 50 00 00       	callq  217f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h50d2e790f7322737E>
  212efb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212f00:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  212f07:	00 00 
  212f09:	48 83 c0 18          	add    $0x18,%rax
  212f0d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  212f12:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  212f17:	e8 f4 4f 00 00       	callq  217f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h6b4b85800e3c5941E>
  212f1c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  212f21:	48 89 c2             	mov    %rax,%rdx
  212f24:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  212f29:	48 89 11             	mov    %rdx,(%rcx)
                    old
  212f2c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  212f31:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  212f36:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  212f3b:	eb 13                	jmp    212f50 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0xf0>
                        None
  212f3d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  212f44:	00 00 
            }
  212f46:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  212f4b:	48 83 c4 78          	add    $0x78,%rsp
  212f4f:	c3                   	retq   
  212f50:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  212f55:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  212f5a:	eb ea                	jmp    212f46 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09374699ede58f2bE+0xe6>
  212f5c:	cc                   	int3   
  212f5d:	cc                   	int3   
  212f5e:	cc                   	int3   
  212f5f:	cc                   	int3   

0000000000212f60 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E>:
            fn next(&mut self) -> Option<$elem> {
  212f60:	48 83 ec 78          	sub    $0x78,%rsp
  212f64:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212f69:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  212f6e:	48 8b 3f             	mov    (%rdi),%rdi
  212f71:	e8 8a 5e 00 00       	callq  218e00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  212f76:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212f7b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  212f80:	e8 2b 1e 00 00       	callq  214db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h33afae7df97e265bE>
                    if mem::size_of::<T>() != 0 {
  212f85:	eb 00                	jmp    212f87 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x27>
  212f87:	b8 01 00 00 00       	mov    $0x1,%eax
  212f8c:	48 83 f8 00          	cmp    $0x0,%rax
  212f90:	75 02                	jne    212f94 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x34>
  212f92:	eb 10                	jmp    212fa4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x44>
  212f94:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  212f99:	48 8b 78 08          	mov    0x8(%rax),%rdi
  212f9d:	e8 ae 68 00 00       	callq  219850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
                    if mem::size_of::<T>() != 0 {
  212fa2:	eb 00                	jmp    212fa4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x44>
  212fa4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  212fa9:	48 8b 38             	mov    (%rax),%rdi
  212fac:	e8 4f 5e 00 00       	callq  218e00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  212fb1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212fb6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  212fbb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  212fc0:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  212fc4:	74 77                	je     21303d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xdd>
  212fc6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212fcb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212fd0:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  212fd7:	00 00 
                    let old = self.ptr.as_ptr();
  212fd9:	48 8b 38             	mov    (%rax),%rdi
  212fdc:	e8 1f 5e 00 00       	callq  218e00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  212fe1:	48 89 c1             	mov    %rax,%rcx
  212fe4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212fe9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  212fee:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  212ff3:	48 8b 38             	mov    (%rax),%rdi
  212ff6:	e8 05 5e 00 00       	callq  218e00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  212ffb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  213000:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  213007:	00 00 
  213009:	48 83 c0 01          	add    $0x1,%rax
  21300d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  213012:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  213017:	e8 c4 5d 00 00       	callq  218de0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  21301c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  213021:	48 89 c2             	mov    %rax,%rdx
  213024:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213029:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21302c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  213031:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213036:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21303b:	eb 13                	jmp    213050 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xf0>
                        None
  21303d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  213044:	00 00 
            }
  213046:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21304b:	48 83 c4 78          	add    $0x78,%rsp
  21304f:	c3                   	retq   
  213050:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  213055:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21305a:	eb ea                	jmp    213046 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xe6>
  21305c:	cc                   	int3   
  21305d:	cc                   	int3   
  21305e:	cc                   	int3   
  21305f:	cc                   	int3   

0000000000213060 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2149cd4a713ced9E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  213060:	48 83 ec 18          	sub    $0x18,%rsp
  213064:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213069:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21306e:	48 8b 3f             	mov    (%rdi),%rdi
  213071:	e8 fa 1a 00 00       	callq  214b70 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17h95abf4b5622cda05E>
  213076:	88 44 24 07          	mov    %al,0x7(%rsp)
  21307a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21307e:	24 01                	and    $0x1,%al
  213080:	0f b6 c0             	movzbl %al,%eax
  213083:	48 83 c4 18          	add    $0x18,%rsp
  213087:	c3                   	retq   
  213088:	cc                   	int3   
  213089:	cc                   	int3   
  21308a:	cc                   	int3   
  21308b:	cc                   	int3   
  21308c:	cc                   	int3   
  21308d:	cc                   	int3   
  21308e:	cc                   	int3   
  21308f:	cc                   	int3   

0000000000213090 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hd20e8194d1bcd248E>:
    pub fn new_align_up(&self, size: u64) -> VirtualAddress {
        VirtualAddress::from_u64(Alignment::align_up(self.0, size))
    }

    #[inline]
    pub fn get_ptr<T>(self) -> *const T {
  213090:	48 83 ec 18          	sub    $0x18,%rsp
  213094:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  213099:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21309e:	e8 0d 10 00 00       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  2130a3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2130a8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2130ad:	48 83 c4 18          	add    $0x18,%rsp
  2130b1:	c3                   	retq   
  2130b2:	cc                   	int3   
  2130b3:	cc                   	int3   
  2130b4:	cc                   	int3   
  2130b5:	cc                   	int3   
  2130b6:	cc                   	int3   
  2130b7:	cc                   	int3   
  2130b8:	cc                   	int3   
  2130b9:	cc                   	int3   
  2130ba:	cc                   	int3   
  2130bb:	cc                   	int3   
  2130bc:	cc                   	int3   
  2130bd:	cc                   	int3   
  2130be:	cc                   	int3   
  2130bf:	cc                   	int3   

00000000002130c0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hff83e374f3300dd7E>:
    pub fn get_ptr<T>(self) -> *const T {
  2130c0:	48 83 ec 18          	sub    $0x18,%rsp
  2130c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  2130c9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2130ce:	e8 dd 0f 00 00       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  2130d3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2130d8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2130dd:	48 83 c4 18          	add    $0x18,%rsp
  2130e1:	c3                   	retq   
  2130e2:	cc                   	int3   
  2130e3:	cc                   	int3   
  2130e4:	cc                   	int3   
  2130e5:	cc                   	int3   
  2130e6:	cc                   	int3   
  2130e7:	cc                   	int3   
  2130e8:	cc                   	int3   
  2130e9:	cc                   	int3   
  2130ea:	cc                   	int3   
  2130eb:	cc                   	int3   
  2130ec:	cc                   	int3   
  2130ed:	cc                   	int3   
  2130ee:	cc                   	int3   
  2130ef:	cc                   	int3   

00000000002130f0 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17h320a5a3a5a31750eE>:

    #[inline]
    pub fn get_mut_ptr<T>(self) -> *mut T {
  2130f0:	48 83 ec 18          	sub    $0x18,%rsp
  2130f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *mut T
  2130f9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2130fe:	e8 ad 0f 00 00       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  213103:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213108:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21310d:	48 83 c4 18          	add    $0x18,%rsp
  213111:	c3                   	retq   
  213112:	cc                   	int3   
  213113:	cc                   	int3   
  213114:	cc                   	int3   
  213115:	cc                   	int3   
  213116:	cc                   	int3   
  213117:	cc                   	int3   
  213118:	cc                   	int3   
  213119:	cc                   	int3   
  21311a:	cc                   	int3   
  21311b:	cc                   	int3   
  21311c:	cc                   	int3   
  21311d:	cc                   	int3   
  21311e:	cc                   	int3   
  21311f:	cc                   	int3   

0000000000213120 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h22e92c6753ff6fd4E>:
    pub fn get_page_offset(&self) -> u16 {
        self.0 as u16 % (1 << 12)
    }

    #[inline]
    pub fn from_ptr<T>(ptr: *const T) -> Self {
  213120:	48 83 ec 18          	sub    $0x18,%rsp
  213124:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        VirtualAddress::from_u64(ptr as u64)
  213129:	e8 92 0f 00 00       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  21312e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213133:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213138:	48 83 c4 18          	add    $0x18,%rsp
  21313c:	c3                   	retq   
  21313d:	cc                   	int3   
  21313e:	cc                   	int3   
  21313f:	cc                   	int3   

0000000000213140 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h3f29e1dc81df599aE>:
    pub fn from_ptr<T>(ptr: *const T) -> Self {
  213140:	48 83 ec 18          	sub    $0x18,%rsp
  213144:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        VirtualAddress::from_u64(ptr as u64)
  213149:	e8 72 0f 00 00       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  21314e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213153:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213158:	48 83 c4 18          	add    $0x18,%rsp
  21315c:	c3                   	retq   
  21315d:	cc                   	int3   
  21315e:	cc                   	int3   
  21315f:	cc                   	int3   

0000000000213160 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h916a6d13569411feE>:
    pub fn from_ptr<T>(ptr: *const T) -> Self {
  213160:	48 83 ec 18          	sub    $0x18,%rsp
  213164:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        VirtualAddress::from_u64(ptr as u64)
  213169:	e8 52 0f 00 00       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  21316e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213173:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213178:	48 83 c4 18          	add    $0x18,%rsp
  21317c:	c3                   	retq   
  21317d:	cc                   	int3   
  21317e:	cc                   	int3   
  21317f:	cc                   	int3   

0000000000213180 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E>:
    I: Iterator,
{
    type Item = I::Item;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
  213180:	48 83 ec 28          	sub    $0x28,%rsp
  213184:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213189:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        if self.first_take {
  21318e:	f6 47 18 01          	testb  $0x1,0x18(%rdi)
  213192:	75 1a                	jne    2131ae <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E+0x2e>
  213194:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            self.first_take = false;
            self.iter.next()
        } else {
            self.iter.nth(self.step)
  213199:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  21319d:	e8 de db ff ff       	callq  210d80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h8180bf909f032c76E>
  2131a2:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2131a7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2131ac:	eb 29                	jmp    2131d7 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E+0x57>
  2131ae:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            self.first_take = false;
  2131b3:	c6 47 18 00          	movb   $0x0,0x18(%rdi)
            self.iter.next()
  2131b7:	e8 f4 db ff ff       	callq  210db0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h62de824db7bc4359E>
  2131bc:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2131c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        if self.first_take {
  2131c6:	eb 00                	jmp    2131c8 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E+0x48>
        }
    }
  2131c8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2131cd:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2131d2:	48 83 c4 28          	add    $0x28,%rsp
  2131d6:	c3                   	retq   
        if self.first_take {
  2131d7:	eb ef                	jmp    2131c8 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E+0x48>
  2131d9:	cc                   	int3   
  2131da:	cc                   	int3   
  2131db:	cc                   	int3   
  2131dc:	cc                   	int3   
  2131dd:	cc                   	int3   
  2131de:	cc                   	int3   
  2131df:	cc                   	int3   

00000000002131e0 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h56fb087f2e5ca990E>:
    pub(in crate::iter) fn new(iter: I, step: usize) -> StepBy<I> {
  2131e0:	48 83 ec 48          	sub    $0x48,%rsp
  2131e4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  2131e9:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2131ee:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2131f3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2131f8:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2131fd:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  213202:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  213207:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
        assert!(step != 0);
  21320c:	48 83 f9 00          	cmp    $0x0,%rcx
  213210:	0f 95 c0             	setne  %al
  213213:	34 ff                	xor    $0xff,%al
  213215:	a8 01                	test   $0x1,%al
  213217:	75 31                	jne    21324a <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h56fb087f2e5ca990E+0x6a>
  213219:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21321e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  213223:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  213228:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21322d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
        StepBy { iter, step: step - 1, first_take: true }
  213232:	48 83 ea 01          	sub    $0x1,%rdx
  213236:	48 89 39             	mov    %rdi,(%rcx)
  213239:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  21323d:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  213241:	c6 41 18 01          	movb   $0x1,0x18(%rcx)
    }
  213245:	48 83 c4 48          	add    $0x48,%rsp
  213249:	c3                   	retq   
        assert!(step != 0);
  21324a:	48 8d 3d d7 de fe ff 	lea    -0x12129(%rip),%rdi        # 201128 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x2d9>
  213251:	48 8d 15 50 c6 00 00 	lea    0xc650(%rip),%rdx        # 21f8a8 <memset+0x1de8>
  213258:	be 1b 00 00 00       	mov    $0x1b,%esi
  21325d:	e8 ce 7d 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  213262:	0f 0b                	ud2    
  213264:	cc                   	int3   
  213265:	cc                   	int3   
  213266:	cc                   	int3   
  213267:	cc                   	int3   
  213268:	cc                   	int3   
  213269:	cc                   	int3   
  21326a:	cc                   	int3   
  21326b:	cc                   	int3   
  21326c:	cc                   	int3   
  21326d:	cc                   	int3   
  21326e:	cc                   	int3   
  21326f:	cc                   	int3   

0000000000213270 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb9dcb764c8252fd9E>:
    fn into_iter(self) -> I {
  213270:	48 89 f8             	mov    %rdi,%rax
        self
  213273:	48 8b 0e             	mov    (%rsi),%rcx
  213276:	48 89 0f             	mov    %rcx,(%rdi)
  213279:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  21327d:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  213281:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  213285:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  213289:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
  21328d:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    }
  213291:	c3                   	retq   
  213292:	cc                   	int3   
  213293:	cc                   	int3   
  213294:	cc                   	int3   
  213295:	cc                   	int3   
  213296:	cc                   	int3   
  213297:	cc                   	int3   
  213298:	cc                   	int3   
  213299:	cc                   	int3   
  21329a:	cc                   	int3   
  21329b:	cc                   	int3   
  21329c:	cc                   	int3   
  21329d:	cc                   	int3   
  21329e:	cc                   	int3   
  21329f:	cc                   	int3   

00000000002132a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7e2a421563bf9ca4E>:
  2132a0:	48 83 ec 18          	sub    $0x18,%rsp
  2132a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2132a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2132ae:	48 8b 3f             	mov    (%rdi),%rdi
  2132b1:	e8 0a 82 00 00       	callq  21b4c0 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>
  2132b6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2132ba:	8a 44 24 07          	mov    0x7(%rsp),%al
  2132be:	24 01                	and    $0x1,%al
  2132c0:	0f b6 c0             	movzbl %al,%eax
  2132c3:	48 83 c4 18          	add    $0x18,%rsp
  2132c7:	c3                   	retq   
  2132c8:	cc                   	int3   
  2132c9:	cc                   	int3   
  2132ca:	cc                   	int3   
  2132cb:	cc                   	int3   
  2132cc:	cc                   	int3   
  2132cd:	cc                   	int3   
  2132ce:	cc                   	int3   
  2132cf:	cc                   	int3   

00000000002132d0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h31b8a77bb6ae052eE>:
  2132d0:	48 83 ec 18          	sub    $0x18,%rsp
  2132d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2132d9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2132de:	48 8b 3f             	mov    (%rdi),%rdi
  2132e1:	e8 9a 91 00 00       	callq  21c480 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>
  2132e6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2132ea:	8a 44 24 07          	mov    0x7(%rsp),%al
  2132ee:	24 01                	and    $0x1,%al
  2132f0:	0f b6 c0             	movzbl %al,%eax
  2132f3:	48 83 c4 18          	add    $0x18,%rsp
  2132f7:	c3                   	retq   
  2132f8:	cc                   	int3   
  2132f9:	cc                   	int3   
  2132fa:	cc                   	int3   
  2132fb:	cc                   	int3   
  2132fc:	cc                   	int3   
  2132fd:	cc                   	int3   
  2132fe:	cc                   	int3   
  2132ff:	cc                   	int3   

0000000000213300 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h7fb165eca4360e8fE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  213300:	48 83 ec 28          	sub    $0x28,%rsp
  213304:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  213309:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(*self as *const T), f)
  21330e:	48 8b 07             	mov    (%rdi),%rax
  213311:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213316:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21331b:	e8 00 06 00 00       	callq  213920 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E>
  213320:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213324:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213328:	24 01                	and    $0x1,%al
  21332a:	0f b6 c0             	movzbl %al,%eax
  21332d:	48 83 c4 28          	add    $0x28,%rsp
  213331:	c3                   	retq   
  213332:	cc                   	int3   
  213333:	cc                   	int3   
  213334:	cc                   	int3   
  213335:	cc                   	int3   
  213336:	cc                   	int3   
  213337:	cc                   	int3   
  213338:	cc                   	int3   
  213339:	cc                   	int3   
  21333a:	cc                   	int3   
  21333b:	cc                   	int3   
  21333c:	cc                   	int3   
  21333d:	cc                   	int3   
  21333e:	cc                   	int3   
  21333f:	cc                   	int3   

0000000000213340 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17hbf653384be78ce6bE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  213340:	48 83 ec 18          	sub    $0x18,%rsp
  213344:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213349:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21334e:	48 8b 3f             	mov    (%rdi),%rdi
  213351:	e8 3a 71 00 00       	callq  21a490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  213356:	88 44 24 07          	mov    %al,0x7(%rsp)
  21335a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21335e:	24 01                	and    $0x1,%al
  213360:	0f b6 c0             	movzbl %al,%eax
  213363:	48 83 c4 18          	add    $0x18,%rsp
  213367:	c3                   	retq   
  213368:	cc                   	int3   
  213369:	cc                   	int3   
  21336a:	cc                   	int3   
  21336b:	cc                   	int3   
  21336c:	cc                   	int3   
  21336d:	cc                   	int3   
  21336e:	cc                   	int3   
  21336f:	cc                   	int3   

0000000000213370 <_ZN4core3fmt10ArgumentV13new17h1055d36b2201d16bE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213370:	48 83 ec 48          	sub    $0x48,%rsp
  213374:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213379:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21337e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213383:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213388:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21338d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213392:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213397:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21339c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2133a1:	48 89 04 24          	mov    %rax,(%rsp)
  2133a5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2133aa:	48 8b 0c 24          	mov    (%rsp),%rcx
  2133ae:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2133b3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2133b8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2133bd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2133c2:	48 83 c4 48          	add    $0x48,%rsp
  2133c6:	c3                   	retq   
  2133c7:	cc                   	int3   
  2133c8:	cc                   	int3   
  2133c9:	cc                   	int3   
  2133ca:	cc                   	int3   
  2133cb:	cc                   	int3   
  2133cc:	cc                   	int3   
  2133cd:	cc                   	int3   
  2133ce:	cc                   	int3   
  2133cf:	cc                   	int3   

00000000002133d0 <_ZN4core3fmt10ArgumentV13new17h1d6b08ac514dd807E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2133d0:	48 83 ec 48          	sub    $0x48,%rsp
  2133d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2133d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2133de:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2133e3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2133e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2133ed:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2133f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2133f7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2133fc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213401:	48 89 04 24          	mov    %rax,(%rsp)
  213405:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21340a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21340e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213413:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213418:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21341d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213422:	48 83 c4 48          	add    $0x48,%rsp
  213426:	c3                   	retq   
  213427:	cc                   	int3   
  213428:	cc                   	int3   
  213429:	cc                   	int3   
  21342a:	cc                   	int3   
  21342b:	cc                   	int3   
  21342c:	cc                   	int3   
  21342d:	cc                   	int3   
  21342e:	cc                   	int3   
  21342f:	cc                   	int3   

0000000000213430 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213430:	48 83 ec 48          	sub    $0x48,%rsp
  213434:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213439:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21343e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213443:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213448:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21344d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213452:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213457:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21345c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213461:	48 89 04 24          	mov    %rax,(%rsp)
  213465:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21346a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21346e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213473:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213478:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21347d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213482:	48 83 c4 48          	add    $0x48,%rsp
  213486:	c3                   	retq   
  213487:	cc                   	int3   
  213488:	cc                   	int3   
  213489:	cc                   	int3   
  21348a:	cc                   	int3   
  21348b:	cc                   	int3   
  21348c:	cc                   	int3   
  21348d:	cc                   	int3   
  21348e:	cc                   	int3   
  21348f:	cc                   	int3   

0000000000213490 <_ZN4core3fmt10ArgumentV13new17h3a05cfc231554408E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213490:	48 83 ec 48          	sub    $0x48,%rsp
  213494:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213499:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21349e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2134a3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2134a8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2134ad:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2134b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2134b7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2134bc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2134c1:	48 89 04 24          	mov    %rax,(%rsp)
  2134c5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2134ca:	48 8b 0c 24          	mov    (%rsp),%rcx
  2134ce:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2134d3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2134d8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2134dd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2134e2:	48 83 c4 48          	add    $0x48,%rsp
  2134e6:	c3                   	retq   
  2134e7:	cc                   	int3   
  2134e8:	cc                   	int3   
  2134e9:	cc                   	int3   
  2134ea:	cc                   	int3   
  2134eb:	cc                   	int3   
  2134ec:	cc                   	int3   
  2134ed:	cc                   	int3   
  2134ee:	cc                   	int3   
  2134ef:	cc                   	int3   

00000000002134f0 <_ZN4core3fmt10ArgumentV13new17h3d8fc7a58ad0ecdfE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2134f0:	48 83 ec 48          	sub    $0x48,%rsp
  2134f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2134f9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2134fe:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213503:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213508:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21350d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213512:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213517:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21351c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213521:	48 89 04 24          	mov    %rax,(%rsp)
  213525:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21352a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21352e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213533:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213538:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21353d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213542:	48 83 c4 48          	add    $0x48,%rsp
  213546:	c3                   	retq   
  213547:	cc                   	int3   
  213548:	cc                   	int3   
  213549:	cc                   	int3   
  21354a:	cc                   	int3   
  21354b:	cc                   	int3   
  21354c:	cc                   	int3   
  21354d:	cc                   	int3   
  21354e:	cc                   	int3   
  21354f:	cc                   	int3   

0000000000213550 <_ZN4core3fmt10ArgumentV13new17h492c0fa204815478E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213550:	48 83 ec 48          	sub    $0x48,%rsp
  213554:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213559:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21355e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213563:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213568:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21356d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213572:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213577:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21357c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213581:	48 89 04 24          	mov    %rax,(%rsp)
  213585:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21358a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21358e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213593:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213598:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21359d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2135a2:	48 83 c4 48          	add    $0x48,%rsp
  2135a6:	c3                   	retq   
  2135a7:	cc                   	int3   
  2135a8:	cc                   	int3   
  2135a9:	cc                   	int3   
  2135aa:	cc                   	int3   
  2135ab:	cc                   	int3   
  2135ac:	cc                   	int3   
  2135ad:	cc                   	int3   
  2135ae:	cc                   	int3   
  2135af:	cc                   	int3   

00000000002135b0 <_ZN4core3fmt10ArgumentV13new17h6660be7cf414b0ecE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2135b0:	48 83 ec 48          	sub    $0x48,%rsp
  2135b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2135b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2135be:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2135c3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2135c8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2135cd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2135d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2135d7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2135dc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2135e1:	48 89 04 24          	mov    %rax,(%rsp)
  2135e5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2135ea:	48 8b 0c 24          	mov    (%rsp),%rcx
  2135ee:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2135f3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2135f8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2135fd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213602:	48 83 c4 48          	add    $0x48,%rsp
  213606:	c3                   	retq   
  213607:	cc                   	int3   
  213608:	cc                   	int3   
  213609:	cc                   	int3   
  21360a:	cc                   	int3   
  21360b:	cc                   	int3   
  21360c:	cc                   	int3   
  21360d:	cc                   	int3   
  21360e:	cc                   	int3   
  21360f:	cc                   	int3   

0000000000213610 <_ZN4core3fmt10ArgumentV13new17ha785ec514c8c51adE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213610:	48 83 ec 48          	sub    $0x48,%rsp
  213614:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213619:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21361e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213623:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213628:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21362d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213632:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213637:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21363c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213641:	48 89 04 24          	mov    %rax,(%rsp)
  213645:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21364a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21364e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213653:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213658:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21365d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213662:	48 83 c4 48          	add    $0x48,%rsp
  213666:	c3                   	retq   
  213667:	cc                   	int3   
  213668:	cc                   	int3   
  213669:	cc                   	int3   
  21366a:	cc                   	int3   
  21366b:	cc                   	int3   
  21366c:	cc                   	int3   
  21366d:	cc                   	int3   
  21366e:	cc                   	int3   
  21366f:	cc                   	int3   

0000000000213670 <_ZN4core3fmt10ArgumentV13new17haa4c4d33961dd9b3E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213670:	48 83 ec 48          	sub    $0x48,%rsp
  213674:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213679:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21367e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213683:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213688:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21368d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213692:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213697:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21369c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2136a1:	48 89 04 24          	mov    %rax,(%rsp)
  2136a5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2136aa:	48 8b 0c 24          	mov    (%rsp),%rcx
  2136ae:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2136b3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2136b8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2136bd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2136c2:	48 83 c4 48          	add    $0x48,%rsp
  2136c6:	c3                   	retq   
  2136c7:	cc                   	int3   
  2136c8:	cc                   	int3   
  2136c9:	cc                   	int3   
  2136ca:	cc                   	int3   
  2136cb:	cc                   	int3   
  2136cc:	cc                   	int3   
  2136cd:	cc                   	int3   
  2136ce:	cc                   	int3   
  2136cf:	cc                   	int3   

00000000002136d0 <_ZN4core3fmt10ArgumentV13new17hbc228f159b345650E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2136d0:	48 83 ec 48          	sub    $0x48,%rsp
  2136d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2136d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2136de:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2136e3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2136e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2136ed:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2136f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2136f7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2136fc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213701:	48 89 04 24          	mov    %rax,(%rsp)
  213705:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21370a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21370e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213713:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213718:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21371d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213722:	48 83 c4 48          	add    $0x48,%rsp
  213726:	c3                   	retq   
  213727:	cc                   	int3   
  213728:	cc                   	int3   
  213729:	cc                   	int3   
  21372a:	cc                   	int3   
  21372b:	cc                   	int3   
  21372c:	cc                   	int3   
  21372d:	cc                   	int3   
  21372e:	cc                   	int3   
  21372f:	cc                   	int3   

0000000000213730 <_ZN4core3fmt10ArgumentV13new17hcebee369d36adbb6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213730:	48 83 ec 48          	sub    $0x48,%rsp
  213734:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213739:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21373e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213743:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213748:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21374d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213752:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213757:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21375c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213761:	48 89 04 24          	mov    %rax,(%rsp)
  213765:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21376a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21376e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213773:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213778:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21377d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213782:	48 83 c4 48          	add    $0x48,%rsp
  213786:	c3                   	retq   
  213787:	cc                   	int3   
  213788:	cc                   	int3   
  213789:	cc                   	int3   
  21378a:	cc                   	int3   
  21378b:	cc                   	int3   
  21378c:	cc                   	int3   
  21378d:	cc                   	int3   
  21378e:	cc                   	int3   
  21378f:	cc                   	int3   

0000000000213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213790:	48 83 ec 48          	sub    $0x48,%rsp
  213794:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213799:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21379e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2137a3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2137a8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2137ad:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2137b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2137b7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2137bc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2137c1:	48 89 04 24          	mov    %rax,(%rsp)
  2137c5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2137ca:	48 8b 0c 24          	mov    (%rsp),%rcx
  2137ce:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2137d3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2137d8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2137dd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2137e2:	48 83 c4 48          	add    $0x48,%rsp
  2137e6:	c3                   	retq   
  2137e7:	cc                   	int3   
  2137e8:	cc                   	int3   
  2137e9:	cc                   	int3   
  2137ea:	cc                   	int3   
  2137eb:	cc                   	int3   
  2137ec:	cc                   	int3   
  2137ed:	cc                   	int3   
  2137ee:	cc                   	int3   
  2137ef:	cc                   	int3   

00000000002137f0 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2137f0:	48 83 ec 48          	sub    $0x48,%rsp
  2137f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2137f9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2137fe:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213803:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213808:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21380d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213812:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213817:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21381c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213821:	48 89 04 24          	mov    %rax,(%rsp)
  213825:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21382a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21382e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213833:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213838:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21383d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213842:	48 83 c4 48          	add    $0x48,%rsp
  213846:	c3                   	retq   
  213847:	cc                   	int3   
  213848:	cc                   	int3   
  213849:	cc                   	int3   
  21384a:	cc                   	int3   
  21384b:	cc                   	int3   
  21384c:	cc                   	int3   
  21384d:	cc                   	int3   
  21384e:	cc                   	int3   
  21384f:	cc                   	int3   

0000000000213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  213850:	48 83 ec 48          	sub    $0x48,%rsp
  213854:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213859:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21385e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  213863:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213868:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21386d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213872:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213877:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21387c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213881:	48 89 04 24          	mov    %rax,(%rsp)
  213885:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21388a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21388e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  213893:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213898:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21389d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2138a2:	48 83 c4 48          	add    $0x48,%rsp
  2138a6:	c3                   	retq   
  2138a7:	cc                   	int3   
  2138a8:	cc                   	int3   
  2138a9:	cc                   	int3   
  2138aa:	cc                   	int3   
  2138ab:	cc                   	int3   
  2138ac:	cc                   	int3   
  2138ad:	cc                   	int3   
  2138ae:	cc                   	int3   
  2138af:	cc                   	int3   

00000000002138b0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  2138b0:	48 83 ec 48          	sub    $0x48,%rsp
  2138b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2138b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2138be:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  2138c3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2138c8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2138cd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2138d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2138d7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2138dc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2138e1:	48 89 04 24          	mov    %rax,(%rsp)
  2138e5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2138ea:	48 8b 0c 24          	mov    (%rsp),%rcx
  2138ee:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2138f3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2138f8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2138fd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213902:	48 83 c4 48          	add    $0x48,%rsp
  213906:	c3                   	retq   
  213907:	cc                   	int3   
  213908:	cc                   	int3   
  213909:	cc                   	int3   
  21390a:	cc                   	int3   
  21390b:	cc                   	int3   
  21390c:	cc                   	int3   
  21390d:	cc                   	int3   
  21390e:	cc                   	int3   
  21390f:	cc                   	int3   

0000000000213910 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h7397929f36c3639bE>:

// From (and thus Into) is reflexive
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_convert", issue = "88674")]
impl<T> const From<T> for T {
    fn from(t: T) -> T {
  213910:	50                   	push   %rax
        t
    }
  213911:	58                   	pop    %rax
  213912:	c3                   	retq   
  213913:	cc                   	int3   
  213914:	cc                   	int3   
  213915:	cc                   	int3   
  213916:	cc                   	int3   
  213917:	cc                   	int3   
  213918:	cc                   	int3   
  213919:	cc                   	int3   
  21391a:	cc                   	int3   
  21391b:	cc                   	int3   
  21391c:	cc                   	int3   
  21391d:	cc                   	int3   
  21391e:	cc                   	int3   
  21391f:	cc                   	int3   

0000000000213920 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  213920:	48 83 ec 78          	sub    $0x78,%rsp
  213924:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  213929:	48 89 f8             	mov    %rdi,%rax
  21392c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  213931:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213936:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21393b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  213940:	48 8b 0f             	mov    (%rdi),%rcx
  213943:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  213948:	48 8b 47 08          	mov    0x8(%rdi),%rax
  21394c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  213951:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  213956:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  21395b:	8b 47 30             	mov    0x30(%rdi),%eax
  21395e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  213962:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  213966:	e8 75 95 00 00       	callq  21cee0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  21396b:	88 44 24 37          	mov    %al,0x37(%rsp)
  21396f:	8a 44 24 37          	mov    0x37(%rsp),%al
  213973:	a8 01                	test   $0x1,%al
  213975:	75 33                	jne    2139aa <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0x8a>
  213977:	eb 00                	jmp    213979 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0x59>
  213979:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21397e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  213983:	8b 4e 30             	mov    0x30(%rsi),%ecx
  213986:	83 c9 04             	or     $0x4,%ecx
  213989:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  21398c:	48 8b 00             	mov    (%rax),%rax
  21398f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  213994:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  213999:	e8 f2 6a 00 00       	callq  21a490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  21399e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2139a2:	24 01                	and    $0x1,%al
  2139a4:	88 44 24 77          	mov    %al,0x77(%rsp)
  2139a8:	eb 4d                	jmp    2139f7 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0xd7>
  2139aa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  2139af:	8b 47 30             	mov    0x30(%rdi),%eax
  2139b2:	83 c8 08             	or     $0x8,%eax
  2139b5:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  2139b8:	e8 13 64 00 00       	callq  219dd0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  2139bd:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2139c1:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2139c5:	a8 01                	test   $0x1,%al
  2139c7:	75 04                	jne    2139cd <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0xad>
  2139c9:	eb 00                	jmp    2139cb <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0xab>
        if f.alternate() {
  2139cb:	eb ac                	jmp    213979 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0x59>
  2139cd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  2139d2:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  2139d9:	00 00 
  2139db:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2139e2:	00 00 
  2139e4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  2139e9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2139ee:	48 89 10             	mov    %rdx,(%rax)
  2139f1:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  2139f5:	eb d4                	jmp    2139cb <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17ha8945ff08e2269c0E+0xab>
  2139f7:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2139fb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  213a00:	8b 54 24 30          	mov    0x30(%rsp),%edx
  213a04:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  213a09:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  213a0e:	48 89 39             	mov    %rdi,(%rcx)
  213a11:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  213a15:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  213a18:	24 01                	and    $0x1,%al
  213a1a:	0f b6 c0             	movzbl %al,%eax
  213a1d:	48 83 c4 78          	add    $0x78,%rsp
  213a21:	c3                   	retq   
  213a22:	cc                   	int3   
  213a23:	cc                   	int3   
  213a24:	cc                   	int3   
  213a25:	cc                   	int3   
  213a26:	cc                   	int3   
  213a27:	cc                   	int3   
  213a28:	cc                   	int3   
  213a29:	cc                   	int3   
  213a2a:	cc                   	int3   
  213a2b:	cc                   	int3   
  213a2c:	cc                   	int3   
  213a2d:	cc                   	int3   
  213a2e:	cc                   	int3   
  213a2f:	cc                   	int3   

0000000000213a30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17haa1ec7cdbf6929e5E>:
    pub fn from_aligned_address(addr: mm::PhysicalAddress) -> Result<Self, PagingError> {
  213a30:	48 83 ec 48          	sub    $0x48,%rsp
  213a34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  213a39:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  213a3e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if !addr.is_aligned_at(PageSize::Page4KiB.size()) {
  213a43:	48 8d 3d 7b d7 fe ff 	lea    -0x12885(%rip),%rdi        # 2011c5 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x376>
  213a4a:	e8 e1 22 00 00       	callq  215d30 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E>
  213a4f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  213a54:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  213a59:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  213a5e:	e8 3d 08 00 00       	callq  2142a0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hbe211fc0c0d16881E>
  213a63:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213a67:	8a 44 24 0f          	mov    0xf(%rsp),%al
  213a6b:	34 ff                	xor    $0xff,%al
  213a6d:	a8 01                	test   $0x1,%al
  213a6f:	75 21                	jne    213a92 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17haa1ec7cdbf6929e5E+0x62>
  213a71:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        Ok(Frame(addr))
  213a76:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  213a7b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  213a80:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  213a85:	48 89 48 08          	mov    %rcx,0x8(%rax)
  213a89:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  213a90:	eb 3c                	jmp    213ace <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17haa1ec7cdbf6929e5E+0x9e>
            return Err(PagingError::UnalignedAddress(addr.as_u64()));
  213a92:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  213a97:	e8 d4 07 00 00       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  213a9c:	48 89 04 24          	mov    %rax,(%rsp)
  213aa0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213aa5:	48 8b 0c 24          	mov    (%rsp),%rcx
  213aa9:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  213aae:	66 c7 44 24 30 03 00 	movw   $0x3,0x30(%rsp)
  213ab5:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  213aba:	48 89 48 08          	mov    %rcx,0x8(%rax)
  213abe:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  213ac3:	48 89 48 10          	mov    %rcx,0x10(%rax)
  213ac7:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  213ace:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  213ad3:	48 83 c4 48          	add    $0x48,%rsp
  213ad7:	c3                   	retq   
  213ad8:	cc                   	int3   
  213ad9:	cc                   	int3   
  213ada:	cc                   	int3   
  213adb:	cc                   	int3   
  213adc:	cc                   	int3   
  213add:	cc                   	int3   
  213ade:	cc                   	int3   
  213adf:	cc                   	int3   

0000000000213ae0 <_ZN9r3_kernel2mm3phy5Frame12from_address17h032ea06d605e4009E>:
    pub fn from_address(addr: mm::PhysicalAddress) -> Self {
  213ae0:	48 83 ec 28          	sub    $0x28,%rsp
  213ae4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Frame(addr.new_align_down(PageSize::Page4KiB.size()))
  213ae9:	48 8d 3d d5 d6 fe ff 	lea    -0x1292b(%rip),%rdi        # 2011c5 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x376>
  213af0:	e8 3b 22 00 00       	callq  215d30 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E>
  213af5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213afa:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  213aff:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  213b04:	e8 d7 07 00 00       	callq  2142e0 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h3b51993da23bcb61E>
  213b09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213b0e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213b13:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213b18:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  213b1d:	48 83 c4 28          	add    $0x28,%rsp
  213b21:	c3                   	retq   
  213b22:	cc                   	int3   
  213b23:	cc                   	int3   
  213b24:	cc                   	int3   
  213b25:	cc                   	int3   
  213b26:	cc                   	int3   
  213b27:	cc                   	int3   
  213b28:	cc                   	int3   
  213b29:	cc                   	int3   
  213b2a:	cc                   	int3   
  213b2b:	cc                   	int3   
  213b2c:	cc                   	int3   
  213b2d:	cc                   	int3   
  213b2e:	cc                   	int3   
  213b2f:	cc                   	int3   

0000000000213b30 <_ZN9r3_kernel2mm3phy5Frame6as_u6417hdea98847c689585fE>:
    pub fn as_u64(&self) -> u64 {
  213b30:	48 83 ec 18          	sub    $0x18,%rsp
  213b34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  213b39:	e8 32 07 00 00       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  213b3e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213b43:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213b48:	48 83 c4 18          	add    $0x18,%rsp
  213b4c:	c3                   	retq   
  213b4d:	cc                   	int3   
  213b4e:	cc                   	int3   
  213b4f:	cc                   	int3   

0000000000213b50 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17hbee9cae691e97102E>:
    pub fn init() -> Self {
  213b50:	48 83 ec 38          	sub    $0x38,%rsp
        let memory_map_opt = BootProtocol::get_memory_regions();
  213b54:	e8 e7 2e ff ff       	callq  206a40 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE>
  213b59:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if memory_map_opt.is_none() {
  213b5e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  213b63:	e8 08 1e ff ff       	callq  205970 <_ZN4core6option15Option$LT$T$GT$7is_none17h18ceee8ec0666f89E>
  213b68:	88 44 24 17          	mov    %al,0x17(%rsp)
  213b6c:	8a 44 24 17          	mov    0x17(%rsp),%al
  213b70:	a8 01                	test   $0x1,%al
  213b72:	75 1a                	jne    213b8e <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17hbee9cae691e97102E+0x3e>
  213b74:	eb 00                	jmp    213b76 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17hbee9cae691e97102E+0x26>
        let memory_map = memory_map_opt.unwrap();
  213b76:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  213b7b:	48 8d 35 56 bd 00 00 	lea    0xbd56(%rip),%rsi        # 21f8d8 <memset+0x1e18>
  213b82:	e8 39 1d ff ff       	callq  2058c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf8f5738d1e965780E>
  213b87:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  213b8c:	eb 1a                	jmp    213ba8 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17hbee9cae691e97102E+0x58>
            panic!("Bootloader did not provide memory map.");
  213b8e:	48 8d 3d 31 d6 fe ff 	lea    -0x129cf(%rip),%rdi        # 2011c6 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x377>
  213b95:	48 8d 15 24 bd 00 00 	lea    0xbd24(%rip),%rdx        # 21f8c0 <memset+0x1e00>
  213b9c:	be 26 00 00 00       	mov    $0x26,%esi
  213ba1:	e8 8a 74 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  213ba6:	0f 0b                	ud2    
            memory_regions: mm::VirtualAddress::from_ptr(&memory_map),
  213ba8:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  213bad:	e8 6e f5 ff ff       	callq  213120 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h22e92c6753ff6fd4E>
  213bb2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213bb7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        LinearFrameAllocator {
  213bbc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213bc1:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  213bc8:	00 00 
    }
  213bca:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  213bcf:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213bd4:	48 83 c4 38          	add    $0x38,%rsp
  213bd8:	c3                   	retq   
  213bd9:	cc                   	int3   
  213bda:	cc                   	int3   
  213bdb:	cc                   	int3   
  213bdc:	cc                   	int3   
  213bdd:	cc                   	int3   
  213bde:	cc                   	int3   
  213bdf:	cc                   	int3   

0000000000213be0 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator17hed0f9a838019b269E>:
    fn create_iterator(&self) -> impl Iterator<Item = Frame> {
  213be0:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  213be7:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  213bec:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  213bf1:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  213bf8:	00 
        let memory_regions: &MemoryRegions = unsafe { &*self.memory_regions.get_ptr() };
  213bf9:	48 8b 3e             	mov    (%rsi),%rdi
  213bfc:	e8 bf f4 ff ff       	callq  2130c0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hff83e374f3300dd7E>
  213c01:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  213c06:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  213c0b:	48 89 bc 24 00 01 00 	mov    %rdi,0x100(%rsp)
  213c12:	00 
        let region_iterator = memory_regions.iter();
  213c13:	e8 18 62 00 00       	callq  219e30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  213c18:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  213c1d:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  213c22:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  213c27:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  213c2c:	e8 ef 61 ff ff       	callq  209e20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb29b1483586f5a9aE>
  213c31:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  213c36:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  213c3b:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  213c42:	00 
  213c43:	48 89 94 24 10 01 00 	mov    %rdx,0x110(%rsp)
  213c4a:	00 
  213c4b:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  213c50:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            region_iterator.filter(|region| {
  213c55:	e8 46 f0 ff ff       	callq  212ca0 <_ZN4core4iter6traits8iterator8Iterator6filter17h3e1c1bdf76b5f4e0E>
  213c5a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213c5f:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  213c64:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  213c6b:	00 
  213c6c:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  213c73:	00 
  213c74:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  213c79:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let address_range_iter = usable_regions_iter.map(|region| region.start..region.end);
  213c7e:	e8 7d ea ff ff       	callq  212700 <_ZN4core4iter6traits8iterator8Iterator3map17h42ac7f9217de9e49E>
  213c83:	48 89 04 24          	mov    %rax,(%rsp)
  213c87:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  213c8c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  213c93:	00 
  213c94:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  213c9b:	00 
  213c9c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  213ca1:	48 8b 34 24          	mov    (%rsp),%rsi
            address_range_iter.flat_map(|addr| addr.step_by(PageSize::Page4KiB.size() as usize));
  213ca5:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  213caa:	e8 d1 65 ff ff       	callq  20a280 <_ZN4core4iter6traits8iterator8Iterator8flat_map17hca06f0b25c95b557E>
        let frame_iterator = frame_aligned_addresses
  213caf:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  213cb6:	00 
  213cb7:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  213cbc:	ba 50 00 00 00       	mov    $0x50,%edx
  213cc1:	e8 da 9d 00 00       	callq  21daa0 <memcpy>
  213cc6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213ccb:	48 8d b4 24 a8 00 00 	lea    0xa8(%rsp),%rsi
  213cd2:	00 
  213cd3:	e8 48 15 00 00       	callq  215220 <_ZN4core4iter6traits8iterator8Iterator3map17h83ac06ea34549621E>
  213cd8:	48 8b 44 24 48       	mov    0x48(%rsp),%rax

        frame_iterator
    }
  213cdd:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  213ce4:	c3                   	retq   
  213ce5:	cc                   	int3   
  213ce6:	cc                   	int3   
  213ce7:	cc                   	int3   
  213ce8:	cc                   	int3   
  213ce9:	cc                   	int3   
  213cea:	cc                   	int3   
  213ceb:	cc                   	int3   
  213cec:	cc                   	int3   
  213ced:	cc                   	int3   
  213cee:	cc                   	int3   
  213cef:	cc                   	int3   

0000000000213cf0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17hcc5b194094d46fccE>:
}

impl PhyFrameAllocator for LinearFrameAllocator {
    fn frame_alloc(&mut self) -> Option<Frame> {
  213cf0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  213cf7:	48 89 fe             	mov    %rdi,%rsi
  213cfa:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  213cff:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        let mut frame_iterator = self.create_iterator();
  213d04:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  213d09:	e8 d2 fe ff ff       	callq  213be0 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator15create_iterator17hed0f9a838019b269E>
  213d0e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        let phy_frame = frame_iterator.nth(self.next_index);
  213d13:	48 8b 70 08          	mov    0x8(%rax),%rsi
  213d17:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  213d1c:	e8 6f 64 ff ff       	callq  20a190 <_ZN4core4iter6traits8iterator8Iterator3nth17h003c13dd938e0382E>
  213d21:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  213d28:	00 
  213d29:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  213d2e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  213d33:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213d38:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  213d3f:	00 
  213d40:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213d45:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

        self.next_index += 1;
  213d4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  213d4e:	48 83 c0 01          	add    $0x1,%rax
  213d52:	48 89 04 24          	mov    %rax,(%rsp)
  213d56:	0f 92 c0             	setb   %al
  213d59:	a8 01                	test   $0x1,%al
  213d5b:	75 1f                	jne    213d7c <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17hcc5b194094d46fccE+0x8c>
  213d5d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  213d62:	48 8b 0c 24          	mov    (%rsp),%rcx
  213d66:	48 89 48 08          	mov    %rcx,0x8(%rax)

        phy_frame
    }
  213d6a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213d6f:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  213d74:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  213d7b:	c3                   	retq   
        self.next_index += 1;
  213d7c:	48 8d 3d 7d d4 fe ff 	lea    -0x12b83(%rip),%rdi        # 201200 <str.0>
  213d83:	48 8d 15 66 bb 00 00 	lea    0xbb66(%rip),%rdx        # 21f8f0 <memset+0x1e30>
  213d8a:	be 1c 00 00 00       	mov    $0x1c,%esi
  213d8f:	e8 9c 72 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  213d94:	0f 0b                	ud2    
  213d96:	cc                   	int3   
  213d97:	cc                   	int3   
  213d98:	cc                   	int3   
  213d99:	cc                   	int3   
  213d9a:	cc                   	int3   
  213d9b:	cc                   	int3   
  213d9c:	cc                   	int3   
  213d9d:	cc                   	int3   
  213d9e:	cc                   	int3   
  213d9f:	cc                   	int3   

0000000000213da0 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE>:
    pub static ref LINEAR_ALLOCATOR: Mutex<LinearFrameAllocator> =
        Mutex::new(LinearFrameAllocator::init());
}

/// a function that lazy initializes LIEAR_ALLOCATOR
pub fn setup_physical_memory() {
  213da0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  213da7:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  213dae:	00 00 
  213db0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  213db5:	48 8d 35 9c c5 fe ff 	lea    -0x13a64(%rip),%rsi        # 200358 <str.0+0x58>
  213dbc:	e8 9f 1f ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  213dc1:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  213dc5:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  213dc9:	a8 01                	test   $0x1,%al
  213dcb:	75 09                	jne    213dd6 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE+0x36>
  213dcd:	eb 00                	jmp    213dcf <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE+0x2f>
  213dcf:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  213dd4:	eb 4e                	jmp    213e24 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE+0x84>
  213dd6:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  213ddd:	00 
  213dde:	48 8b 3d bb c9 00 00 	mov    0xc9bb(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  213de5:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  213dec:	00 
  213ded:	e8 fe ec ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  213df2:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  213df9:	00 
  213dfa:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  213e01:	00 
  213e02:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  213e07:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  213e0c:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  213e11:	e8 4a 1f ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  213e16:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  213e1a:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  213e1e:	24 01                	and    $0x1,%al
  213e20:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  213e24:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  213e29:	75 08                	jne    213e33 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE+0x93>
        "Set-up Linear memory allocator for Physical memory successfull, initial_size={}",
        LINEAR_ALLOCATOR.lock().next_index
    );
}
  213e2b:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  213e32:	c3                   	retq   
        LINEAR_ALLOCATOR.lock().next_index
  213e33:	48 8d 3d 41 d4 fe ff 	lea    -0x12bbf(%rip),%rdi        # 20127b <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17ha34d2c14734b0bceE>
  213e3a:	e8 51 01 00 00       	callq  213f90 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h057f32e99b3ae445E>
  213e3f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  213e44:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  213e49:	e8 c2 3f ff ff       	callq  207e10 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17ha54548437592490bE>
  213e4e:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  213e55:	00 
  213e56:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  213e5d:	00 
  213e5e:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  213e65:	00 
  213e66:	e8 55 40 ff ff       	callq  207ec0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h66d1d1f3c105c8a0E>
  213e6b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213e70:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  213e75:	48 83 c0 08          	add    $0x8,%rax
    log::info!(
  213e79:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  213e80:	00 
  213e81:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  213e88:	00 
  213e89:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  213e90:	00 
  213e91:	48 8b 35 38 c9 00 00 	mov    0xc938(%rip),%rsi        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  213e98:	e8 f3 f8 ff ff       	callq  213790 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  213e9d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213ea2:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213ea7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213eac:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  213eb1:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  213eb6:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  213ebd:	00 
  213ebe:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  213ec3:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  213ec8:	48 8d 35 39 ba 00 00 	lea    0xba39(%rip),%rsi        # 21f908 <memset+0x1e48>
  213ecf:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  213ed5:	4c 89 c2             	mov    %r8,%rdx
  213ed8:	e8 23 10 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  213edd:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  213ee2:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  213ee7:	48 8d 15 2a ba 00 00 	lea    0xba2a(%rip),%rdx        # 21f918 <memset+0x1e58>
  213eee:	e8 1d 49 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  213ef3:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  213efa:	00 
  213efb:	e8 30 3e 00 00       	callq  217d30 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17h628efc428d946b11E>
  213f00:	e9 26 ff ff ff       	jmpq   213e2b <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE+0x8b>
  213f05:	cc                   	int3   
  213f06:	cc                   	int3   
  213f07:	cc                   	int3   
  213f08:	cc                   	int3   
  213f09:	cc                   	int3   
  213f0a:	cc                   	int3   
  213f0b:	cc                   	int3   
  213f0c:	cc                   	int3   
  213f0d:	cc                   	int3   
  213f0e:	cc                   	int3   
  213f0f:	cc                   	int3   

0000000000213f10 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17h5b7ebdec4dfeeac6E>:

pub struct PhysicalMemoryManager;

impl PhysicalMemoryManager {
    pub fn alloc() -> Option<Frame> {
  213f10:	48 83 ec 48          	sub    $0x48,%rsp
        LINEAR_ALLOCATOR.lock().frame_alloc()
  213f14:	48 8d 3d 60 d3 fe ff 	lea    -0x12ca0(%rip),%rdi        # 20127b <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17ha34d2c14734b0bceE>
  213f1b:	e8 70 00 00 00       	callq  213f90 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h057f32e99b3ae445E>
  213f20:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213f25:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  213f2a:	e8 e1 3e ff ff       	callq  207e10 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17ha54548437592490bE>
  213f2f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  213f34:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  213f39:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  213f3e:	e8 ad 3f ff ff       	callq  207ef0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4527adcfa9d432c1E>
  213f43:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213f48:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  213f4d:	e8 9e fd ff ff       	callq  213cf0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17hcc5b194094d46fccE>
  213f52:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  213f57:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  213f5c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  213f61:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213f66:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  213f6b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213f70:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  213f75:	e8 b6 3d 00 00       	callq  217d30 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17h628efc428d946b11E>
  213f7a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  213f7f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  213f84:	48 83 c4 48          	add    $0x48,%rsp
  213f88:	c3                   	retq   
  213f89:	cc                   	int3   
  213f8a:	cc                   	int3   
  213f8b:	cc                   	int3   
  213f8c:	cc                   	int3   
  213f8d:	cc                   	int3   
  213f8e:	cc                   	int3   
  213f8f:	cc                   	int3   

0000000000213f90 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h057f32e99b3ae445E>:
            fn deref(&self) -> &$T {
  213f90:	48 83 ec 18          	sub    $0x18,%rsp
  213f94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213f99:	48 8d 05 f0 29 01 00 	lea    0x129f0(%rip),%rax        # 226990 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha292c9f922f1d676E>
  213fa0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213fa5:	48 8d 3d e4 29 01 00 	lea    0x129e4(%rip),%rdi        # 226990 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha292c9f922f1d676E>
  213fac:	e8 cf 53 ff ff       	callq  209380 <_ZN4spin4once13Once$LT$T$GT$9call_once17hee8c13c74ffd5c5aE>
  213fb1:	48 89 04 24          	mov    %rax,(%rsp)
  213fb5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  213fb9:	48 83 c4 18          	add    $0x18,%rsp
  213fbd:	c3                   	retq   
  213fbe:	cc                   	int3   
  213fbf:	cc                   	int3   

0000000000213fc0 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcd34291bd89f867dE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
  213fc0:	48 83 ec 18          	sub    $0x18,%rsp
  213fc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.next()
  213fc9:	e8 82 65 ff ff       	callq  20a550 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h043b2749de415b60E>
  213fce:	88 44 24 0e          	mov    %al,0xe(%rsp)
  213fd2:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  213fd6:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  213fda:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  213fde:	24 01                	and    $0x1,%al
  213fe0:	48 83 c4 18          	add    $0x18,%rsp
  213fe4:	c3                   	retq   
  213fe5:	cc                   	int3   
  213fe6:	cc                   	int3   
  213fe7:	cc                   	int3   
  213fe8:	cc                   	int3   
  213fe9:	cc                   	int3   
  213fea:	cc                   	int3   
  213feb:	cc                   	int3   
  213fec:	cc                   	int3   
  213fed:	cc                   	int3   
  213fee:	cc                   	int3   
  213fef:	cc                   	int3   

0000000000213ff0 <_ZN9r3_kernel3cpu3mmu8read_cr317hf5a9ce5ba58146f1E>:
use crate::mm::PhysicalAddress;

const CR3_PHY_ADDR_MASK: u64 = 0x000ffffffffff000;

pub fn read_cr3() -> u64 {
  213ff0:	50                   	push   %rax
    let cr3_val: u64;
    unsafe {
        asm!(
  213ff1:	0f 20 d8             	mov    %cr3,%rax
  213ff4:	48 89 04 24          	mov    %rax,(%rsp)
            options(nomem, nostack, preserves_flags)
        );
    }

    cr3_val
}
  213ff8:	48 8b 04 24          	mov    (%rsp),%rax
  213ffc:	59                   	pop    %rcx
  213ffd:	c3                   	retq   
  213ffe:	cc                   	int3   
  213fff:	cc                   	int3   

0000000000214000 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17hc798fd89e7926e5aE>:

pub fn get_page_table_address() -> PhysicalAddress {
  214000:	48 83 ec 18          	sub    $0x18,%rsp
    let cr3_val = read_cr3();
  214004:	e8 e7 ff ff ff       	callq  213ff0 <_ZN9r3_kernel3cpu3mmu8read_cr317hf5a9ce5ba58146f1E>
  214009:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21400e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214013:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    PhysicalAddress::from_u64(cr3_val & CR3_PHY_ADDR_MASK)
  214018:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
  21401f:	ff 0f 00 
  214022:	48 21 c7             	and    %rax,%rdi
  214025:	e8 56 02 00 00       	callq  214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>
  21402a:	48 89 04 24          	mov    %rax,(%rsp)
  21402e:	48 8b 04 24          	mov    (%rsp),%rax
}
  214032:	48 83 c4 18          	add    $0x18,%rsp
  214036:	c3                   	retq   
  214037:	cc                   	int3   
  214038:	cc                   	int3   
  214039:	cc                   	int3   
  21403a:	cc                   	int3   
  21403b:	cc                   	int3   
  21403c:	cc                   	int3   
  21403d:	cc                   	int3   
  21403e:	cc                   	int3   
  21403f:	cc                   	int3   

0000000000214040 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h9371227c881e3778E>:
    fn from(t: T) -> T {
  214040:	50                   	push   %rax
  214041:	48 89 f8             	mov    %rdi,%rax
  214044:	48 89 04 24          	mov    %rax,(%rsp)
    }
  214048:	59                   	pop    %rcx
  214049:	c3                   	retq   
  21404a:	cc                   	int3   
  21404b:	cc                   	int3   
  21404c:	cc                   	int3   
  21404d:	cc                   	int3   
  21404e:	cc                   	int3   
  21404f:	cc                   	int3   

0000000000214050 <_ZN9r3_kernel2mm9Alignment10align_down17h7b292a4d17d6e41aE>:
    pub fn align_down(addr: u64, size: u64) -> u64 {
  214050:	48 83 ec 28          	sub    $0x28,%rsp
  214054:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214059:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21405e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        addr & !(size - 1)
  214063:	48 83 ee 01          	sub    $0x1,%rsi
  214067:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21406c:	0f 92 c0             	setb   %al
  21406f:	a8 01                	test   $0x1,%al
  214071:	75 16                	jne    214089 <_ZN9r3_kernel2mm9Alignment10align_down17h7b292a4d17d6e41aE+0x39>
  214073:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  214078:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21407d:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  214081:	48 21 c8             	and    %rcx,%rax
    }
  214084:	48 83 c4 28          	add    $0x28,%rsp
  214088:	c3                   	retq   
        addr & !(size - 1)
  214089:	48 8d 3d 10 d2 fe ff 	lea    -0x12df0(%rip),%rdi        # 2012a0 <str.0>
  214090:	48 8d 15 b9 b8 00 00 	lea    0xb8b9(%rip),%rdx        # 21f950 <memset+0x1e90>
  214097:	be 21 00 00 00       	mov    $0x21,%esi
  21409c:	e8 8f 6f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2140a1:	0f 0b                	ud2    
  2140a3:	cc                   	int3   
  2140a4:	cc                   	int3   
  2140a5:	cc                   	int3   
  2140a6:	cc                   	int3   
  2140a7:	cc                   	int3   
  2140a8:	cc                   	int3   
  2140a9:	cc                   	int3   
  2140aa:	cc                   	int3   
  2140ab:	cc                   	int3   
  2140ac:	cc                   	int3   
  2140ad:	cc                   	int3   
  2140ae:	cc                   	int3   
  2140af:	cc                   	int3   

00000000002140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>:
    pub fn as_u64(&self) -> u64 {
  2140b0:	50                   	push   %rax
  2140b1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  2140b5:	48 8b 07             	mov    (%rdi),%rax
    }
  2140b8:	59                   	pop    %rcx
  2140b9:	c3                   	retq   
  2140ba:	cc                   	int3   
  2140bb:	cc                   	int3   
  2140bc:	cc                   	int3   
  2140bd:	cc                   	int3   
  2140be:	cc                   	int3   
  2140bf:	cc                   	int3   

00000000002140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>:
    pub fn from_u64(addr: u64) -> Self {
  2140c0:	48 83 ec 10          	sub    $0x10,%rsp
  2140c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        VirtualAddress(addr)
  2140c9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  2140cd:	48 8b 04 24          	mov    (%rsp),%rax
  2140d1:	48 83 c4 10          	add    $0x10,%rsp
  2140d5:	c3                   	retq   
  2140d6:	cc                   	int3   
  2140d7:	cc                   	int3   
  2140d8:	cc                   	int3   
  2140d9:	cc                   	int3   
  2140da:	cc                   	int3   
  2140db:	cc                   	int3   
  2140dc:	cc                   	int3   
  2140dd:	cc                   	int3   
  2140de:	cc                   	int3   
  2140df:	cc                   	int3   

00000000002140e0 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17h3e264b6c93056dc3E>:
    pub fn new_align_down(&self, size: u64) -> VirtualAddress {
  2140e0:	48 83 ec 28          	sub    $0x28,%rsp
  2140e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2140e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        VirtualAddress::from_u64(Alignment::align_down(self.0, size))
  2140ee:	48 8b 3f             	mov    (%rdi),%rdi
  2140f1:	e8 5a ff ff ff       	callq  214050 <_ZN9r3_kernel2mm9Alignment10align_down17h7b292a4d17d6e41aE>
  2140f6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2140fb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214100:	e8 bb ff ff ff       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  214105:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21410a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21410f:	48 83 c4 28          	add    $0x28,%rsp
  214113:	c3                   	retq   
  214114:	cc                   	int3   
  214115:	cc                   	int3   
  214116:	cc                   	int3   
  214117:	cc                   	int3   
  214118:	cc                   	int3   
  214119:	cc                   	int3   
  21411a:	cc                   	int3   
  21411b:	cc                   	int3   
  21411c:	cc                   	int3   
  21411d:	cc                   	int3   
  21411e:	cc                   	int3   
  21411f:	cc                   	int3   

0000000000214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>:
    pub fn get_level_index(&self, level: PageTableLevel) -> paging::PageTableIndex {
  214120:	48 83 ec 78          	sub    $0x78,%rsp
  214124:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  214129:	40 88 f0             	mov    %sil,%al
  21412c:	88 44 24 6d          	mov    %al,0x6d(%rsp)
  214130:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
        match level {
  214135:	0f b6 44 24 6d       	movzbl 0x6d(%rsp),%eax
  21413a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21413f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214144:	48 8d 0d 31 d1 fe ff 	lea    -0x12ecf(%rip),%rcx        # 20127c <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17ha34d2c14734b0bceE+0x1>
  21414b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21414f:	48 01 c8             	add    %rcx,%rax
  214152:	ff e0                	jmpq   *%rax
  214154:	0f 0b                	ud2    
  214156:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  21415b:	48 8b 00             	mov    (%rax),%rax
  21415e:	48 c1 e8 0c          	shr    $0xc,%rax
  214162:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214167:	e9 a5 00 00 00       	jmpq   214211 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0xf1>
  21416c:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  214171:	48 8b 00             	mov    (%rax),%rax
  214174:	48 c1 e8 0c          	shr    $0xc,%rax
  214178:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21417d:	eb 62                	jmp    2141e1 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0xc1>
  21417f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  214184:	48 8b 00             	mov    (%rax),%rax
  214187:	48 c1 e8 0c          	shr    $0xc,%rax
  21418b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214190:	eb 2d                	jmp    2141bf <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0x9f>
  214192:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12) as u16);
  214197:	48 8b 00             	mov    (%rax),%rax
  21419a:	48 c1 e8 0c          	shr    $0xc,%rax
  21419e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2141a3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2141a8:	0f b7 f8             	movzwl %ax,%edi
  2141ab:	e8 d0 1b 00 00       	callq  215d80 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h41a0eadfb44e669cE>
  2141b0:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
    }
  2141b5:	66 8b 44 24 6e       	mov    0x6e(%rsp),%ax
  2141ba:	48 83 c4 78          	add    $0x78,%rsp
  2141be:	c3                   	retq   
  2141bf:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  2141c4:	48 c1 e8 09          	shr    $0x9,%rax
  2141c8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2141cd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2141d2:	0f b7 f8             	movzwl %ax,%edi
  2141d5:	e8 a6 1b 00 00       	callq  215d80 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h41a0eadfb44e669cE>
  2141da:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  2141df:	eb d4                	jmp    2141b5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0x95>
  2141e1:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  2141e6:	48 c1 e8 09          	shr    $0x9,%rax
  2141ea:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2141ef:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2141f4:	48 c1 e8 09          	shr    $0x9,%rax
  2141f8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2141fd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  214202:	0f b7 f8             	movzwl %ax,%edi
  214205:	e8 76 1b 00 00       	callq  215d80 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h41a0eadfb44e669cE>
  21420a:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  21420f:	eb a4                	jmp    2141b5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0x95>
  214211:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  214216:	48 c1 e8 09          	shr    $0x9,%rax
  21421a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21421f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  214224:	48 c1 e8 09          	shr    $0x9,%rax
  214228:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21422d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214232:	48 c1 e8 09          	shr    $0x9,%rax
  214236:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21423b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  214240:	0f b7 f8             	movzwl %ax,%edi
  214243:	e8 38 1b 00 00       	callq  215d80 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h41a0eadfb44e669cE>
  214248:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  21424d:	e9 63 ff ff ff       	jmpq   2141b5 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE+0x95>
  214252:	cc                   	int3   
  214253:	cc                   	int3   
  214254:	cc                   	int3   
  214255:	cc                   	int3   
  214256:	cc                   	int3   
  214257:	cc                   	int3   
  214258:	cc                   	int3   
  214259:	cc                   	int3   
  21425a:	cc                   	int3   
  21425b:	cc                   	int3   
  21425c:	cc                   	int3   
  21425d:	cc                   	int3   
  21425e:	cc                   	int3   
  21425f:	cc                   	int3   

0000000000214260 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17h554ec29b4eb0bd45E>:
    pub fn get_page_offset(&self) -> u16 {
  214260:	50                   	push   %rax
  214261:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as u16 % (1 << 12)
  214265:	48 8b 07             	mov    (%rdi),%rax
  214268:	66 25 ff 0f          	and    $0xfff,%ax
    }
  21426c:	59                   	pop    %rcx
  21426d:	c3                   	retq   
  21426e:	cc                   	int3   
  21426f:	cc                   	int3   

0000000000214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>:
}

impl PhysicalAddress {
    #[inline]
    pub fn as_u64(&self) -> u64 {
  214270:	50                   	push   %rax
  214271:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  214275:	48 8b 07             	mov    (%rdi),%rax
    }
  214278:	59                   	pop    %rcx
  214279:	c3                   	retq   
  21427a:	cc                   	int3   
  21427b:	cc                   	int3   
  21427c:	cc                   	int3   
  21427d:	cc                   	int3   
  21427e:	cc                   	int3   
  21427f:	cc                   	int3   

0000000000214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>:

    #[inline]
    pub fn from_u64(addr: u64) -> Self {
  214280:	48 83 ec 10          	sub    $0x10,%rsp
  214284:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        PhysicalAddress(addr)
  214289:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21428d:	48 8b 04 24          	mov    (%rsp),%rax
  214291:	48 83 c4 10          	add    $0x10,%rsp
  214295:	c3                   	retq   
  214296:	cc                   	int3   
  214297:	cc                   	int3   
  214298:	cc                   	int3   
  214299:	cc                   	int3   
  21429a:	cc                   	int3   
  21429b:	cc                   	int3   
  21429c:	cc                   	int3   
  21429d:	cc                   	int3   
  21429e:	cc                   	int3   
  21429f:	cc                   	int3   

00000000002142a0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hbe211fc0c0d16881E>:

    #[inline]
    pub fn is_aligned_at(&self, size: u64) -> bool {
  2142a0:	48 83 ec 28          	sub    $0x28,%rsp
  2142a4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2142a9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.0 == Alignment::align_down(self.0, size)
  2142ae:	48 8b 07             	mov    (%rdi),%rax
  2142b1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2142b6:	48 8b 3f             	mov    (%rdi),%rdi
  2142b9:	e8 92 fd ff ff       	callq  214050 <_ZN9r3_kernel2mm9Alignment10align_down17h7b292a4d17d6e41aE>
  2142be:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2142c3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2142c8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2142cd:	48 39 c8             	cmp    %rcx,%rax
  2142d0:	0f 94 c0             	sete   %al
    }
  2142d3:	24 01                	and    $0x1,%al
  2142d5:	0f b6 c0             	movzbl %al,%eax
  2142d8:	48 83 c4 28          	add    $0x28,%rsp
  2142dc:	c3                   	retq   
  2142dd:	cc                   	int3   
  2142de:	cc                   	int3   
  2142df:	cc                   	int3   

00000000002142e0 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h3b51993da23bcb61E>:
    pub fn align_up(&mut self, size: u64) {
        self.0 = Alignment::align_up(self.0, size);
    }

    #[inline]
    pub fn new_align_down(&self, size: u64) -> Self {
  2142e0:	48 83 ec 28          	sub    $0x28,%rsp
  2142e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2142e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PhysicalAddress::from_u64(Alignment::align_down(self.0, size))
  2142ee:	48 8b 3f             	mov    (%rdi),%rdi
  2142f1:	e8 5a fd ff ff       	callq  214050 <_ZN9r3_kernel2mm9Alignment10align_down17h7b292a4d17d6e41aE>
  2142f6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2142fb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214300:	e8 7b ff ff ff       	callq  214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>
  214305:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21430a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21430f:	48 83 c4 28          	add    $0x28,%rsp
  214313:	c3                   	retq   
  214314:	cc                   	int3   
  214315:	cc                   	int3   
  214316:	cc                   	int3   
  214317:	cc                   	int3   
  214318:	cc                   	int3   
  214319:	cc                   	int3   
  21431a:	cc                   	int3   
  21431b:	cc                   	int3   
  21431c:	cc                   	int3   
  21431d:	cc                   	int3   
  21431e:	cc                   	int3   
  21431f:	cc                   	int3   

0000000000214320 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE>:
    pub fn new_align_up(&self, size: u64) -> Self {
        PhysicalAddress::from_u64(Alignment::align_up(self.0, size))
    }
}

pub fn init() {
  214320:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!("Enabling frame allocator...");
  214327:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
  21432e:	00 00 
  214330:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  214335:	48 8d 35 1c c0 fe ff 	lea    -0x13fe4(%rip),%rsi        # 200358 <str.0+0x58>
  21433c:	e8 1f 1a ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214341:	88 44 24 07          	mov    %al,0x7(%rsp)
  214345:	8a 44 24 07          	mov    0x7(%rsp),%al
  214349:	a8 01                	test   $0x1,%al
  21434b:	75 09                	jne    214356 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x36>
  21434d:	eb 00                	jmp    21434f <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x2f>
  21434f:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  214354:	eb 4e                	jmp    2143a4 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x84>
  214356:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  21435d:	00 
  21435e:	48 8b 3d 3b c4 00 00 	mov    0xc43b(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214365:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  21436c:	00 
  21436d:	e8 7e e7 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  214372:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  214379:	00 
  21437a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  214381:	00 
  214382:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214387:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  21438c:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  214391:	e8 ca 19 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214396:	88 44 24 06          	mov    %al,0x6(%rsp)
  21439a:	8a 44 24 06          	mov    0x6(%rsp),%al
  21439e:	24 01                	and    $0x1,%al
  2143a0:	88 44 24 17          	mov    %al,0x17(%rsp)
  2143a4:	f6 44 24 17 01       	testb  $0x1,0x17(%rsp)
  2143a9:	75 07                	jne    2143b2 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x92>
    phy::setup_physical_memory();
  2143ab:	e8 f0 f9 ff ff       	callq  213da0 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h11cf59ae21aacf0dE>
  2143b0:	eb 3a                	jmp    2143ec <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0xcc>
    log::info!("Enabling frame allocator...");
  2143b2:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2143b7:	48 8d 35 aa b5 00 00 	lea    0xb5aa(%rip),%rsi        # 21f968 <memset+0x1ea8>
  2143be:	ba 01 00 00 00       	mov    $0x1,%edx
  2143c3:	48 8d 0d 16 cf fe ff 	lea    -0x130ea(%rip),%rcx        # 2012e0 <str.0+0x40>
  2143ca:	31 c0                	xor    %eax,%eax
  2143cc:	41 89 c0             	mov    %eax,%r8d
  2143cf:	e8 2c 0b ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2143d4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2143d9:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2143de:	48 8d 15 93 b5 00 00 	lea    0xb593(%rip),%rdx        # 21f978 <memset+0x1eb8>
  2143e5:	e8 26 44 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2143ea:	eb bf                	jmp    2143ab <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x8b>
    log::info!("Enabling kernel paging...");
  2143ec:	48 c7 44 24 50 03 00 	movq   $0x3,0x50(%rsp)
  2143f3:	00 00 
  2143f5:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2143fa:	48 8d 35 57 bf fe ff 	lea    -0x140a9(%rip),%rsi        # 200358 <str.0+0x58>
  214401:	e8 5a 19 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214406:	88 44 24 05          	mov    %al,0x5(%rsp)
  21440a:	8a 44 24 05          	mov    0x5(%rsp),%al
  21440e:	a8 01                	test   $0x1,%al
  214410:	75 09                	jne    21441b <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0xfb>
  214412:	eb 00                	jmp    214414 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0xf4>
  214414:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  214419:	eb 4e                	jmp    214469 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x149>
  21441b:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  214422:	00 
  214423:	48 8b 3d 76 c3 00 00 	mov    0xc376(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21442a:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  214431:	00 
  214432:	e8 b9 e6 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  214437:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21443e:	00 
  21443f:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  214446:	00 
  214447:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21444c:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  214451:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  214456:	e8 05 19 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21445b:	88 44 24 04          	mov    %al,0x4(%rsp)
  21445f:	8a 44 24 04          	mov    0x4(%rsp),%al
  214463:	24 01                	and    $0x1,%al
  214465:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  214469:	f6 44 24 5f 01       	testb  $0x1,0x5f(%rsp)
  21446e:	75 07                	jne    214477 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x157>
    paging::setup_paging();
  214470:	e8 2b 2d 00 00       	callq  2171a0 <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E>
  214475:	eb 3a                	jmp    2144b1 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x191>
    log::info!("Enabling kernel paging...");
  214477:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21447c:	48 8d 35 2d b5 00 00 	lea    0xb52d(%rip),%rsi        # 21f9b0 <memset+0x1ef0>
  214483:	ba 01 00 00 00       	mov    $0x1,%edx
  214488:	48 8d 0d 51 ce fe ff 	lea    -0x131af(%rip),%rcx        # 2012e0 <str.0+0x40>
  21448f:	31 c0                	xor    %eax,%eax
  214491:	41 89 c0             	mov    %eax,%r8d
  214494:	e8 67 0a ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  214499:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21449e:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2144a3:	48 8d 15 16 b5 00 00 	lea    0xb516(%rip),%rdx        # 21f9c0 <memset+0x1f00>
  2144aa:	e8 61 43 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2144af:	eb bf                	jmp    214470 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE+0x150>

    run_initial_paging_test();
  2144b1:	e8 1a 00 00 00       	callq  2144d0 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE>
    run_page_mapping_test();
  2144b6:	e8 05 05 00 00       	callq  2149c0 <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E>
}
  2144bb:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  2144c2:	c3                   	retq   
  2144c3:	cc                   	int3   
  2144c4:	cc                   	int3   
  2144c5:	cc                   	int3   
  2144c6:	cc                   	int3   
  2144c7:	cc                   	int3   
  2144c8:	cc                   	int3   
  2144c9:	cc                   	int3   
  2144ca:	cc                   	int3   
  2144cb:	cc                   	int3   
  2144cc:	cc                   	int3   
  2144cd:	cc                   	int3   
  2144ce:	cc                   	int3   
  2144cf:	cc                   	int3   

00000000002144d0 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE>:

#[inline]
pub fn run_initial_paging_test() {
  2144d0:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
    log::info!("Running simple paging test....");
  2144d7:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  2144de:	00 03 00 00 00 
  2144e3:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2144ea:	00 
  2144eb:	48 8d 35 66 be fe ff 	lea    -0x1419a(%rip),%rsi        # 200358 <str.0+0x58>
  2144f2:	e8 69 18 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2144f7:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  2144fe:	8a 84 24 9f 00 00 00 	mov    0x9f(%rsp),%al
  214505:	a8 01                	test   $0x1,%al
  214507:	75 0c                	jne    214515 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x45>
  214509:	eb 00                	jmp    21450b <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x3b>
  21450b:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  214512:	00 
  214513:	eb 60                	jmp    214575 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0xa5>
  214515:	c6 84 24 7f 02 00 00 	movb   $0x0,0x27f(%rsp)
  21451c:	00 
  21451d:	48 8b 3d 7c c2 00 00 	mov    0xc27c(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214524:	0f b6 b4 24 7f 02 00 	movzbl 0x27f(%rsp),%esi
  21452b:	00 
  21452c:	e8 bf e5 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  214531:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  214538:	00 
  214539:	48 8b 84 24 80 02 00 	mov    0x280(%rsp),%rax
  214540:	00 
  214541:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  214548:	00 
  214549:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  214550:	00 
  214551:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  214558:	00 
  214559:	e8 02 18 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21455e:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  214565:	8a 84 24 9e 00 00 00 	mov    0x9e(%rsp),%al
  21456c:	24 01                	and    $0x1,%al
  21456e:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  214575:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  21457c:	01 
  21457d:	75 23                	jne    2145a2 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0xd2>

    // some dummy value:
    let expected_value: u64 = 0x34445544;
  21457f:	48 c7 84 24 e8 00 00 	movq   $0x34445544,0xe8(%rsp)
  214586:	00 44 55 44 34 

    let k_table = paging::get_kernel_table();
  21458b:	e8 50 2d 00 00       	callq  2172e0 <_ZN9r3_kernel2mm6paging16get_kernel_table17h688bc53f41dd661cE>
  214590:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  214597:	00 
  214598:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  21459f:	00 
  2145a0:	eb 43                	jmp    2145e5 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x115>
    log::info!("Running simple paging test....");
  2145a2:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2145a9:	00 
  2145aa:	48 8d 35 47 b4 00 00 	lea    0xb447(%rip),%rsi        # 21f9f8 <memset+0x1f38>
  2145b1:	ba 01 00 00 00       	mov    $0x1,%edx
  2145b6:	48 8d 0d 23 cd fe ff 	lea    -0x132dd(%rip),%rcx        # 2012e0 <str.0+0x40>
  2145bd:	31 c0                	xor    %eax,%eax
  2145bf:	41 89 c0             	mov    %eax,%r8d
  2145c2:	e8 39 09 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2145c7:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  2145ce:	00 
  2145cf:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2145d6:	00 
  2145d7:	48 8d 15 2a b4 00 00 	lea    0xb42a(%rip),%rdx        # 21fa08 <memset+0x1f48>
  2145de:	e8 2d 42 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2145e3:	eb 9a                	jmp    21457f <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0xaf>
    let phy_addr = k_table.translate(VirtualAddress::from_ptr(&expected_value));
  2145e5:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2145ec:	00 
  2145ed:	e8 4e eb ff ff       	callq  213140 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h3f29e1dc81df599aE>
  2145f2:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2145f9:	00 
  2145fa:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  214601:	00 
  214602:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  214609:	00 
  21460a:	e8 51 26 00 00       	callq  216c60 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E>
  21460f:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
  214616:	00 
  214617:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21461e:	00 

    if phy_addr.is_none() {
  21461f:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  214626:	00 
  214627:	e8 d4 13 ff ff       	callq  205a00 <_ZN4core6option15Option$LT$T$GT$7is_none17h77e8ab8022288640E>
  21462c:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  214633:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  21463a:	a8 01                	test   $0x1,%al
  21463c:	75 26                	jne    214664 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x194>
  21463e:	eb 00                	jmp    214640 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x170>
            &expected_value
        );
    }

    // check if the difference between physical address and virtual address == phy_offset
    let phy_offset = BootProtocol::get_phy_offset();
  214640:	e8 fb 24 ff ff       	callq  206b40 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17hefc2ca2ea50ece8cE>
  214645:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21464a:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21464f:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  214656:	00 
  214657:	48 89 94 24 38 02 00 	mov    %rdx,0x238(%rsp)
  21465e:	00 
  21465f:	e9 9b 00 00 00       	jmpq   2146ff <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x22f>
            &expected_value
  214664:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  21466b:	00 
  21466c:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  214673:	00 
        panic!(
  214674:	48 8d 84 24 48 01 00 	lea    0x148(%rsp),%rax
  21467b:	00 
  21467c:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  214683:	00 
  214684:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  21468b:	00 
  21468c:	48 89 bc 24 28 02 00 	mov    %rdi,0x228(%rsp)
  214693:	00 
  214694:	48 8d 35 65 ec ff ff 	lea    -0x139b(%rip),%rsi        # 213300 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h7fb165eca4360e8fE>
  21469b:	e8 30 ed ff ff       	callq  2133d0 <_ZN4core3fmt10ArgumentV13new17h1d6b08ac514dd807E>
  2146a0:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2146a5:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2146aa:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2146af:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2146b4:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  2146bb:	00 
  2146bc:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2146c3:	00 
  2146c4:	48 8d 8c 24 30 01 00 	lea    0x130(%rsp),%rcx
  2146cb:	00 
  2146cc:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2146d3:	00 
  2146d4:	48 8d 35 65 b3 00 00 	lea    0xb365(%rip),%rsi        # 21fa40 <memset+0x1f80>
  2146db:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2146e1:	4c 89 c2             	mov    %r8,%rdx
  2146e4:	e8 17 08 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2146e9:	48 8d 35 60 b3 00 00 	lea    0xb360(%rip),%rsi        # 21fa50 <memset+0x1f90>
  2146f0:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2146f7:	00 
  2146f8:	e8 03 6a 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2146fd:	0f 0b                	ud2    
  2146ff:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  214704:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  214709:	48 8d 15 58 b3 00 00 	lea    0xb358(%rip),%rdx        # 21fa68 <memset+0x1fa8>
  214710:	e8 fb 0f ff ff       	callq  205710 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>
  214715:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21471a:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  214721:	00 
  214722:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  214729:	00 
  21472a:	48 8d 15 4f b3 00 00 	lea    0xb34f(%rip),%rdx        # 21fa80 <memset+0x1fc0>
  214731:	e8 9a 10 ff ff       	callq  2057d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h936a598a172f3c76E>
  214736:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  21473d:	00 
  21473e:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  214745:	00 
  214746:	e8 25 fb ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  21474b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214750:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  214755:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21475a:	48 01 c8             	add    %rcx,%rax
  21475d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  214762:	0f 92 c0             	setb   %al
  214765:	a8 01                	test   $0x1,%al
  214767:	75 70                	jne    2147d9 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x309>
  214769:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21476e:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  214775:	00 
    let value: &u64 = unsafe { &*(v_result_addr as *const u64) };
  214776:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21477d:	00 

    assert_eq!(expected_value, *value);
  21477e:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  214785:	00 
  214786:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  21478d:	00 
  21478e:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  214795:	00 
  214796:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21479d:	00 
  21479e:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  2147a5:	00 
  2147a6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2147ab:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  2147b2:	00 
  2147b3:	48 8b 8c 24 68 01 00 	mov    0x168(%rsp),%rcx
  2147ba:	00 
  2147bb:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2147c0:	48 89 8c 24 50 02 00 	mov    %rcx,0x250(%rsp)
  2147c7:	00 
  2147c8:	48 8b 00             	mov    (%rax),%rax
  2147cb:	48 3b 01             	cmp    (%rcx),%rax
  2147ce:	0f 94 c0             	sete   %al
  2147d1:	34 ff                	xor    $0xff,%al
  2147d3:	a8 01                	test   $0x1,%al
  2147d5:	75 42                	jne    214819 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x349>
  2147d7:	eb 1a                	jmp    2147f3 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x323>
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  2147d9:	48 8d 3d 90 cb fe ff 	lea    -0x13470(%rip),%rdi        # 201370 <str.1>
  2147e0:	48 8d 15 b1 b2 00 00 	lea    0xb2b1(%rip),%rdx        # 21fa98 <memset+0x1fd8>
  2147e7:	be 1c 00 00 00       	mov    $0x1c,%esi
  2147ec:	e8 3f 68 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2147f1:	0f 0b                	ud2    

    log::info!(
  2147f3:	48 c7 84 24 a8 01 00 	movq   $0x3,0x1a8(%rsp)
  2147fa:	00 03 00 00 00 
  2147ff:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  214806:	00 
  214807:	48 8d 35 4a bb fe ff 	lea    -0x144b6(%rip),%rsi        # 200358 <str.0+0x58>
  21480e:	e8 4d 15 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214813:	88 44 24 37          	mov    %al,0x37(%rsp)
  214817:	eb 36                	jmp    21484f <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x37f>
  214819:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21481e:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    assert_eq!(expected_value, *value);
  214823:	c6 84 24 77 01 00 00 	movb   $0x0,0x177(%rsp)
  21482a:	00 
  21482b:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  214832:	00 00 00 00 00 
  214837:	4c 8d 05 72 b2 00 00 	lea    0xb272(%rip),%r8        # 21fab0 <memset+0x1ff0>
  21483e:	31 ff                	xor    %edi,%edi
  214840:	48 8d 8c 24 78 01 00 	lea    0x178(%rsp),%rcx
  214847:	00 
  214848:	e8 83 5b ff ff       	callq  20a3d0 <_ZN4core9panicking13assert_failed17h767e4ad0380e1b13E>
  21484d:	0f 0b                	ud2    
  21484f:	8a 44 24 37          	mov    0x37(%rsp),%al
    log::info!(
  214853:	a8 01                	test   $0x1,%al
  214855:	75 0c                	jne    214863 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x393>
  214857:	eb 00                	jmp    214859 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x389>
  214859:	c6 84 24 b7 01 00 00 	movb   $0x0,0x1b7(%rsp)
  214860:	00 
  214861:	eb 5a                	jmp    2148bd <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x3ed>
  214863:	c6 84 24 6f 02 00 00 	movb   $0x0,0x26f(%rsp)
  21486a:	00 
  21486b:	48 8b 3d 2e bf 00 00 	mov    0xbf2e(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214872:	0f b6 b4 24 6f 02 00 	movzbl 0x26f(%rsp),%esi
  214879:	00 
  21487a:	e8 71 e2 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  21487f:	48 89 84 24 70 02 00 	mov    %rax,0x270(%rsp)
  214886:	00 
  214887:	48 8b 84 24 70 02 00 	mov    0x270(%rsp),%rax
  21488e:	00 
  21488f:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  214896:	00 
  214897:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  21489e:	00 
  21489f:	48 8d b4 24 b8 01 00 	lea    0x1b8(%rsp),%rsi
  2148a6:	00 
  2148a7:	e8 b4 14 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2148ac:	88 44 24 36          	mov    %al,0x36(%rsp)
  2148b0:	8a 44 24 36          	mov    0x36(%rsp),%al
  2148b4:	24 01                	and    $0x1,%al
  2148b6:	88 84 24 b7 01 00 00 	mov    %al,0x1b7(%rsp)
  2148bd:	f6 84 24 b7 01 00 00 	testb  $0x1,0x1b7(%rsp)
  2148c4:	01 
  2148c5:	75 08                	jne    2148cf <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x3ff>
        "Virtual Memory test passed, expected=0x{:x}, got=0x{:x}",
        expected_value,
        value
    );
}
  2148c7:	48 81 c4 88 02 00 00 	add    $0x288,%rsp
  2148ce:	c3                   	retq   
    log::info!(
  2148cf:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  2148d6:	00 
  2148d7:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  2148de:	00 
  2148df:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
  2148e6:	00 
  2148e7:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  2148ee:	00 
  2148ef:	48 8b bc 24 10 02 00 	mov    0x210(%rsp),%rdi
  2148f6:	00 
  2148f7:	48 89 bc 24 58 02 00 	mov    %rdi,0x258(%rsp)
  2148fe:	00 
  2148ff:	48 8b 84 24 18 02 00 	mov    0x218(%rsp),%rax
  214906:	00 
  214907:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21490c:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  214913:	00 
  214914:	48 8b 35 8d be 00 00 	mov    0xbe8d(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21491b:	e8 30 ef ff ff       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  214920:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214925:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21492a:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21492f:	48 8d 35 0a ea ff ff 	lea    -0x15f6(%rip),%rsi        # 213340 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17hbf653384be78ce6bE>
  214936:	e8 95 ea ff ff       	callq  2133d0 <_ZN4core3fmt10ArgumentV13new17h1d6b08ac514dd807E>
  21493b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214940:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214945:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21494a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21494f:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  214954:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214959:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  214960:	00 
  214961:	48 89 94 24 f8 01 00 	mov    %rdx,0x1f8(%rsp)
  214968:	00 
  214969:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  214970:	00 
  214971:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  214978:	00 
  214979:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  214980:	00 
  214981:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  214988:	00 
  214989:	48 8d 35 38 b1 00 00 	lea    0xb138(%rip),%rsi        # 21fac8 <memset+0x2008>
  214990:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  214996:	4c 89 c2             	mov    %r8,%rdx
  214999:	e8 62 05 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  21499e:	48 8b b4 24 a8 01 00 	mov    0x1a8(%rsp),%rsi
  2149a5:	00 
  2149a6:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  2149ad:	00 
  2149ae:	48 8d 15 33 b1 00 00 	lea    0xb133(%rip),%rdx        # 21fae8 <memset+0x2028>
  2149b5:	e8 56 3e 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2149ba:	e9 08 ff ff ff       	jmpq   2148c7 <_ZN9r3_kernel2mm23run_initial_paging_test17he2776e7f0e6b038bE+0x3f7>
  2149bf:	cc                   	int3   

00000000002149c0 <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E>:

#[inline]
fn run_page_mapping_test() {
  2149c0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    // allocate a new page:
    let test_var = 10;
  2149c7:	c7 44 24 44 0a 00 00 	movl   $0xa,0x44(%rsp)
  2149ce:	00 
    let to_alloc_addr =
        VirtualAddress::from_u64(VirtualAddress::from_ptr(&test_var).as_u64() + (100 * 1024));
  2149cf:	48 8d 7c 24 44       	lea    0x44(%rsp),%rdi
  2149d4:	e8 87 e7 ff ff       	callq  213160 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17h916a6d13569411feE>
  2149d9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2149de:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2149e3:	e8 c8 f6 ff ff       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  2149e8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2149ed:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2149f2:	48 05 00 90 01 00    	add    $0x19000,%rax
  2149f8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2149fd:	0f 92 c0             	setb   %al
  214a00:	a8 01                	test   $0x1,%al
  214a02:	75 19                	jne    214a1d <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E+0x5d>
  214a04:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  214a09:	e8 b2 f6 ff ff       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  214a0e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214a13:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  214a1a:	00 
  214a1b:	eb 1a                	jmp    214a37 <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E+0x77>
  214a1d:	48 8d 3d 4c c9 fe ff 	lea    -0x136b4(%rip),%rdi        # 201370 <str.1>
  214a24:	48 8d 15 f5 b0 00 00 	lea    0xb0f5(%rip),%rdx        # 21fb20 <memset+0x2060>
  214a2b:	be 1c 00 00 00       	mov    $0x1c,%esi
  214a30:	e8 fb 65 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  214a35:	0f 0b                	ud2    
    // allocate a frame for this addess:
    let page_res = paging::KernelVirtualMemoryManager::alloc_page(
        to_alloc_addr,
        paging::PageEntryFlags::kernel_flags(),
  214a37:	e8 f4 13 00 00       	callq  215e30 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h3eb3a0f9b9ea9ac7E>
  214a3c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214a41:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  214a46:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    let page_res = paging::KernelVirtualMemoryManager::alloc_page(
  214a4b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  214a50:	e8 ab 28 00 00       	callq  217300 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E>
    );

    if page_res.is_err() {
  214a55:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  214a5a:	e8 c1 da ff ff       	callq  212520 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf6f3a08eb7a8b11eE>
  214a5f:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214a63:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  214a67:	a8 01                	test   $0x1,%al
  214a69:	75 0a                	jne    214a75 <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E+0xb5>
  214a6b:	eb 00                	jmp    214a6d <_ZN9r3_kernel2mm21run_page_mapping_test17hb2a99113377a8d61E+0xad>
    if unmap_res.is_err() {
        panic!("Failed to unmap address={:p}", &got_value);
    }

    log::info!("Paging test passed."); */
}
  214a6d:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  214a74:	c3                   	retq   
        panic!("Page map test failed: {:?}", page_res.unwrap_err());
  214a75:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  214a7a:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  214a81:	00 
  214a82:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  214a87:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  214a8c:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  214a93:	00 
  214a94:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  214a9b:	00 
  214a9c:	48 8d 35 a5 b0 00 00 	lea    0xb0a5(%rip),%rsi        # 21fb48 <memset+0x2088>
  214aa3:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  214aaa:	00 
  214aab:	e8 40 d7 ff ff       	callq  2121f0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h147481aef73ecc67E>
  214ab0:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  214ab7:	00 
  214ab8:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  214abf:	00 
  214ac0:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  214ac7:	00 
  214ac8:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  214acf:	00 
  214ad0:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  214ad7:	00 
  214ad8:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  214adf:	00 
  214ae0:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
  214ae7:	00 
  214ae8:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  214aef:	00 
  214af0:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  214af7:	00 
  214af8:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  214aff:	00 
  214b00:	48 8d 35 29 2b 00 00 	lea    0x2b29(%rip),%rsi        # 217630 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E>
  214b07:	e8 44 ea ff ff       	callq  213550 <_ZN4core3fmt10ArgumentV13new17h492c0fa204815478E>
  214b0c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214b11:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214b16:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214b1b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  214b20:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  214b27:	00 
  214b28:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  214b2f:	00 
  214b30:	48 8d 8c 24 98 00 00 	lea    0x98(%rsp),%rcx
  214b37:	00 
  214b38:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  214b3d:	48 8d 35 f4 af 00 00 	lea    0xaff4(%rip),%rsi        # 21fb38 <memset+0x2078>
  214b44:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  214b4a:	4c 89 c2             	mov    %r8,%rdx
  214b4d:	e8 ae 03 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  214b52:	48 8d 35 07 b0 00 00 	lea    0xb007(%rip),%rsi        # 21fb60 <memset+0x20a0>
  214b59:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  214b5e:	e8 9d 65 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  214b63:	0f 0b                	ud2    
  214b65:	cc                   	int3   
  214b66:	cc                   	int3   
  214b67:	cc                   	int3   
  214b68:	cc                   	int3   
  214b69:	cc                   	int3   
  214b6a:	cc                   	int3   
  214b6b:	cc                   	int3   
  214b6c:	cc                   	int3   
  214b6d:	cc                   	int3   
  214b6e:	cc                   	int3   
  214b6f:	cc                   	int3   

0000000000214b70 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17h95abf4b5622cda05E>:
#[derive(Debug, Clone, Copy)]
  214b70:	48 83 ec 58          	sub    $0x58,%rsp
  214b74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  214b79:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  214b7e:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct VirtualAddress(u64);
  214b83:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug, Clone, Copy)]
  214b88:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  214b8d:	48 8d 15 35 c8 fe ff 	lea    -0x137cb(%rip),%rdx        # 2013c9 <str.1+0x59>
  214b94:	b9 0e 00 00 00       	mov    $0xe,%ecx
  214b99:	e8 92 83 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  214b9e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214ba3:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  214ba8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct VirtualAddress(u64);
  214bad:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  214bb2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug, Clone, Copy)]
  214bb7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  214bbc:	48 8d 15 b5 af 00 00 	lea    0xafb5(%rip),%rdx        # 21fb78 <memset+0x20b8>
  214bc3:	e8 98 5e 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  214bc8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  214bcd:	e8 fe 5f 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  214bd2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  214bd6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214bda:	24 01                	and    $0x1,%al
  214bdc:	0f b6 c0             	movzbl %al,%eax
  214bdf:	48 83 c4 58          	add    $0x58,%rsp
  214be3:	c3                   	retq   
  214be4:	cc                   	int3   
  214be5:	cc                   	int3   
  214be6:	cc                   	int3   
  214be7:	cc                   	int3   
  214be8:	cc                   	int3   
  214be9:	cc                   	int3   
  214bea:	cc                   	int3   
  214beb:	cc                   	int3   
  214bec:	cc                   	int3   
  214bed:	cc                   	int3   
  214bee:	cc                   	int3   
  214bef:	cc                   	int3   

0000000000214bf0 <_start>:

/// This function is called on panic.


#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start(boot_info: &'static BootInfo) -> ! {
  214bf0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  214bf7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214bfc:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  214c03:	00 

    // init basic logging through UART as of now:
    logging::init();
  214c04:	e8 97 be ff ff       	callq  210aa0 <_ZN9r3_kernel7logging4init17h8bae91a50c531e46E>
  214c09:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    BootProtocol::create(boot_info);
  214c0e:	e8 bd 1d ff ff       	callq  2069d0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17hda06133fa30eec4aE>
    log::info!("Saving boot info");
  214c13:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  214c1a:	00 00 
  214c1c:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  214c21:	48 8d 35 30 b7 fe ff 	lea    -0x148d0(%rip),%rsi        # 200358 <str.0+0x58>
  214c28:	e8 33 11 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214c2d:	88 44 24 07          	mov    %al,0x7(%rsp)
  214c31:	8a 44 24 07          	mov    0x7(%rsp),%al
  214c35:	a8 01                	test   $0x1,%al
  214c37:	75 09                	jne    214c42 <_start+0x52>
  214c39:	eb 00                	jmp    214c3b <_start+0x4b>
  214c3b:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  214c40:	eb 4e                	jmp    214c90 <_start+0xa0>
  214c42:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  214c49:	00 
  214c4a:	48 8b 3d 4f bb 00 00 	mov    0xbb4f(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214c51:	0f b6 b4 24 bf 00 00 	movzbl 0xbf(%rsp),%esi
  214c58:	00 
  214c59:	e8 92 de ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  214c5e:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  214c65:	00 
  214c66:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  214c6d:	00 
  214c6e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214c73:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  214c78:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  214c7d:	e8 de 10 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214c82:	88 44 24 06          	mov    %al,0x6(%rsp)
  214c86:	8a 44 24 06          	mov    0x6(%rsp),%al
  214c8a:	24 01                	and    $0x1,%al
  214c8c:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214c90:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  214c95:	75 20                	jne    214cb7 <_start+0xc7>
    log::info!("Hello, kernel world!");
  214c97:	48 c7 44 24 58 03 00 	movq   $0x3,0x58(%rsp)
  214c9e:	00 00 
  214ca0:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214ca5:	48 8d 35 ac b6 fe ff 	lea    -0x14954(%rip),%rsi        # 200358 <str.0+0x58>
  214cac:	e8 af 10 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214cb1:	88 44 24 05          	mov    %al,0x5(%rsp)
  214cb5:	eb 3a                	jmp    214cf1 <_start+0x101>
    log::info!("Saving boot info");
  214cb7:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  214cbc:	48 8d 35 d5 ae 00 00 	lea    0xaed5(%rip),%rsi        # 21fb98 <memset+0x20d8>
  214cc3:	ba 01 00 00 00       	mov    $0x1,%edx
  214cc8:	48 8d 0d 09 c7 fe ff 	lea    -0x138f7(%rip),%rcx        # 2013d8 <str.1+0x68>
  214ccf:	31 c0                	xor    %eax,%eax
  214cd1:	41 89 c0             	mov    %eax,%r8d
  214cd4:	e8 27 02 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  214cd9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  214cde:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  214ce3:	48 8d 15 be ae 00 00 	lea    0xaebe(%rip),%rdx        # 21fba8 <memset+0x20e8>
  214cea:	e8 21 3b 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  214cef:	eb a6                	jmp    214c97 <_start+0xa7>
  214cf1:	8a 44 24 05          	mov    0x5(%rsp),%al
    log::info!("Hello, kernel world!");
  214cf5:	a8 01                	test   $0x1,%al
  214cf7:	75 09                	jne    214d02 <_start+0x112>
  214cf9:	eb 00                	jmp    214cfb <_start+0x10b>
  214cfb:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  214d00:	eb 4e                	jmp    214d50 <_start+0x160>
  214d02:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  214d09:	00 
  214d0a:	48 8b 3d 8f ba 00 00 	mov    0xba8f(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214d11:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  214d18:	00 
  214d19:	e8 d2 dd ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  214d1e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  214d25:	00 
  214d26:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  214d2d:	00 
  214d2e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  214d33:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214d38:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  214d3d:	e8 1e 10 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  214d42:	88 44 24 04          	mov    %al,0x4(%rsp)
  214d46:	8a 44 24 04          	mov    0x4(%rsp),%al
  214d4a:	24 01                	and    $0x1,%al
  214d4c:	88 44 24 67          	mov    %al,0x67(%rsp)
  214d50:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  214d55:	75 07                	jne    214d5e <_start+0x16e>

    BootProtocol::print_boot_info();
  214d57:	e8 44 1e ff ff       	callq  206ba0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E>
  214d5c:	eb 3a                	jmp    214d98 <_start+0x1a8>
    log::info!("Hello, kernel world!");
  214d5e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  214d63:	48 8d 35 76 ae 00 00 	lea    0xae76(%rip),%rsi        # 21fbe0 <memset+0x2120>
  214d6a:	ba 01 00 00 00       	mov    $0x1,%edx
  214d6f:	48 8d 0d 62 c6 fe ff 	lea    -0x1399e(%rip),%rcx        # 2013d8 <str.1+0x68>
  214d76:	31 c0                	xor    %eax,%eax
  214d78:	41 89 c0             	mov    %eax,%r8d
  214d7b:	e8 80 01 ff ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  214d80:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  214d85:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  214d8a:	48 8d 15 5f ae 00 00 	lea    0xae5f(%rip),%rdx        # 21fbf0 <memset+0x2130>
  214d91:	e8 7a 3a 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  214d96:	eb bf                	jmp    214d57 <_start+0x167>

    cpu::init_features_detection();
  214d98:	e8 33 ce ff ff       	callq  211bd0 <_ZN9r3_kernel3cpu23init_features_detection17h7973aea1105ee67eE>
    cpu::init_base_processor_tables();
  214d9d:	e8 1e ce ff ff       	callq  211bc0 <_ZN9r3_kernel3cpu26init_base_processor_tables17h3a70a90a233e3282E>

    cpu::run_test_breakpoint_recovery();
  214da2:	e8 39 ce ff ff       	callq  211be0 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hb455cc9c03411c99E>

    mm::init();
  214da7:	e8 74 f5 ff ff       	callq  214320 <_ZN9r3_kernel2mm4init17hc85e7d66427fce9aE>

    loop {}
  214dac:	eb fe                	jmp    214dac <_start+0x1bc>
  214dae:	cc                   	int3   
  214daf:	cc                   	int3   

0000000000214db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h33afae7df97e265bE>:
    pub const fn is_null(self) -> bool {
  214db0:	48 83 ec 18          	sub    $0x18,%rsp
  214db4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214db9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  214dbe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  214dc3:	31 c0                	xor    %eax,%eax
  214dc5:	89 c6                	mov    %eax,%esi
  214dc7:	e8 f4 49 00 00       	callq  2197c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  214dcc:	88 44 24 07          	mov    %al,0x7(%rsp)
  214dd0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  214dd4:	24 01                	and    $0x1,%al
  214dd6:	0f b6 c0             	movzbl %al,%eax
  214dd9:	48 83 c4 18          	add    $0x18,%rsp
  214ddd:	c3                   	retq   
  214dde:	cc                   	int3   
  214ddf:	cc                   	int3   

0000000000214de0 <_ZN4core3ptr4read17h3174a0a85995dc74E>:
///
/// [valid]: self#safety
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
pub const unsafe fn read<T>(src: *const T) -> T {
  214de0:	48 83 ec 40          	sub    $0x40,%rsp
  214de4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214de9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    #[must_use]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
  214dee:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    extern "rust-intrinsic" {
        #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
    }

    let mut tmp = MaybeUninit::<T>::uninit();
  214df3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214df8:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  214dfd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214e02:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    // the stack as a separate allocated object.
    //
    // Also, since we just wrote a valid value into `tmp`, it is guaranteed
    // to be properly initialized.
    unsafe {
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  214e07:	48 8b 00             	mov    (%rax),%rax
  214e0a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        tmp.assume_init()
  214e0f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214e14:	48 89 04 24          	mov    %rax,(%rsp)
  214e18:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214e1d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214e22:	48 8b 04 24          	mov    (%rsp),%rax
    }
}
  214e26:	48 83 c4 40          	add    $0x40,%rsp
  214e2a:	c3                   	retq   
  214e2b:	cc                   	int3   
  214e2c:	cc                   	int3   
  214e2d:	cc                   	int3   
  214e2e:	cc                   	int3   
  214e2f:	cc                   	int3   

0000000000214e30 <_ZN4core3ptr4read17h9c70907dc6f48ac9E>:
pub const unsafe fn read<T>(src: *const T) -> T {
  214e30:	48 83 ec 40          	sub    $0x40,%rsp
  214e34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214e39:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  214e3e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    let mut tmp = MaybeUninit::<T>::uninit();
  214e43:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214e48:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  214e4d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  214e52:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  214e57:	48 8b 00             	mov    (%rax),%rax
  214e5a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        tmp.assume_init()
  214e5f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214e64:	48 89 04 24          	mov    %rax,(%rsp)
  214e68:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214e6d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  214e72:	48 8b 04 24          	mov    (%rsp),%rax
}
  214e76:	48 83 c4 40          	add    $0x40,%rsp
  214e7a:	c3                   	retq   
  214e7b:	cc                   	int3   
  214e7c:	cc                   	int3   
  214e7d:	cc                   	int3   
  214e7e:	cc                   	int3   
  214e7f:	cc                   	int3   

0000000000214e80 <_ZN4core3ptr5write17hb4ae5111637a2d49E>:
/// assert_eq!(bar, "foo");
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  214e80:	48 83 ec 10          	sub    $0x10,%rsp
  214e84:	48 89 34 24          	mov    %rsi,(%rsp)
  214e88:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

    // SAFETY: the caller must guarantee that `dst` is valid for writes.
    // `dst` cannot overlap `src` because the caller has mutable access
    // to `dst` while `src` is owned by this function.
    unsafe {
        copy_nonoverlapping(&src as *const T, dst, 1);
  214e8d:	48 8b 04 24          	mov    (%rsp),%rax
  214e91:	48 89 07             	mov    %rax,(%rdi)
        intrinsics::forget(src);
    }
}
  214e94:	48 83 c4 10          	add    $0x10,%rsp
  214e98:	c3                   	retq   
  214e99:	cc                   	int3   
  214e9a:	cc                   	int3   
  214e9b:	cc                   	int3   
  214e9c:	cc                   	int3   
  214e9d:	cc                   	int3   
  214e9e:	cc                   	int3   
  214e9f:	cc                   	int3   

0000000000214ea0 <_ZN4core3ptr5write17hebcb375c2b2384e0E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  214ea0:	48 83 ec 10          	sub    $0x10,%rsp
  214ea4:	48 89 34 24          	mov    %rsi,(%rsp)
  214ea8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  214ead:	48 8b 04 24          	mov    (%rsp),%rax
  214eb1:	48 89 07             	mov    %rax,(%rdi)
}
  214eb4:	48 83 c4 10          	add    $0x10,%rsp
  214eb8:	c3                   	retq   
  214eb9:	cc                   	int3   
  214eba:	cc                   	int3   
  214ebb:	cc                   	int3   
  214ebc:	cc                   	int3   
  214ebd:	cc                   	int3   
  214ebe:	cc                   	int3   
  214ebf:	cc                   	int3   

0000000000214ec0 <_ZN114_$LT$core..iter..adapters..flatten..FlatMap$LT$I$C$U$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h592f9a86ceca3c02E>:
    F: FnMut(I::Item) -> U,
{
    type Item = U::Item;

    #[inline]
    fn next(&mut self) -> Option<U::Item> {
  214ec0:	48 83 ec 18          	sub    $0x18,%rsp
  214ec4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.inner.next()
  214ec9:	e8 22 00 00 00       	callq  214ef0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E>
  214ece:	48 89 04 24          	mov    %rax,(%rsp)
  214ed2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  214ed7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  214edc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  214ee0:	48 83 c4 18          	add    $0x18,%rsp
  214ee4:	c3                   	retq   
  214ee5:	cc                   	int3   
  214ee6:	cc                   	int3   
  214ee7:	cc                   	int3   
  214ee8:	cc                   	int3   
  214ee9:	cc                   	int3   
  214eea:	cc                   	int3   
  214eeb:	cc                   	int3   
  214eec:	cc                   	int3   
  214eed:	cc                   	int3   
  214eee:	cc                   	int3   
  214eef:	cc                   	int3   

0000000000214ef0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E>:
    U: Iterator,
{
    type Item = U::Item;

    #[inline]
    fn next(&mut self) -> Option<U::Item> {
  214ef0:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
  214ef7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  214efc:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  214f03:	00 
        loop {
  214f04:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  214f0b:	00 
  214f0c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            if let Some(ref mut inner) = self.frontiter {
  214f11:	8a 50 28             	mov    0x28(%rax),%dl
  214f14:	80 ea 02             	sub    $0x2,%dl
  214f17:	b8 01 00 00 00       	mov    $0x1,%eax
  214f1c:	31 c9                	xor    %ecx,%ecx
  214f1e:	80 fa 00             	cmp    $0x0,%dl
  214f21:	48 0f 44 c1          	cmove  %rcx,%rax
  214f25:	48 83 f8 01          	cmp    $0x1,%rax
  214f29:	75 22                	jne    214f4d <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x5d>
  214f2b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214f30:	48 83 c7 10          	add    $0x10,%rdi
  214f34:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  214f3b:	00 
                match inner.next() {
  214f3c:	e8 3f e2 ff ff       	callq  213180 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E>
  214f41:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  214f46:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  214f4b:	eb 11                	jmp    214f5e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x6e>
  214f4d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
                    None => self.frontiter = None,
                    elt @ Some(_) => return elt,
                }
            }
            match self.iter.next() {
  214f52:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214f57:	e8 84 dc ff ff       	callq  212be0 <_ZN100_$LT$core..iter..adapters..fuse..Fuse$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf3ba1facbc6c1747E>
  214f5c:	eb 7b                	jmp    214fd9 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0xe9>
                match inner.next() {
  214f5e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  214f63:	48 85 c0             	test   %rax,%rax
  214f66:	74 06                	je     214f6e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x7e>
  214f68:	eb 00                	jmp    214f6a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x7a>
  214f6a:	eb 09                	jmp    214f75 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x85>
  214f6c:	0f 0b                	ud2    
                    None => self.frontiter = None,
  214f6e:	c6 44 24 50 02       	movb   $0x2,0x50(%rsp)
  214f73:	eb 36                	jmp    214fab <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0xbb>
                    elt @ Some(_) => return elt,
  214f75:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  214f7a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  214f7f:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  214f86:	00 
  214f87:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  214f8e:	00 
  214f8f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  214f94:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                    elt @ Some(_) => return elt,
                },
                Some(inner) => self.frontiter = Some(inner.into_iter()),
            }
        }
    }
  214f99:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  214f9e:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  214fa3:	48 81 c4 78 01 00 00 	add    $0x178,%rsp
  214faa:	c3                   	retq   
  214fab:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                    None => self.frontiter = None,
  214fb0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  214fb5:	48 89 48 10          	mov    %rcx,0x10(%rax)
  214fb9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  214fbe:	48 89 48 18          	mov    %rcx,0x18(%rax)
  214fc2:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  214fc7:	48 89 48 20          	mov    %rcx,0x20(%rax)
  214fcb:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  214fd0:	48 89 48 28          	mov    %rcx,0x28(%rax)
            if let Some(ref mut inner) = self.frontiter {
  214fd4:	e9 74 ff ff ff       	jmpq   214f4d <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x5d>
            match self.iter.next() {
  214fd9:	8a 44 24 70          	mov    0x70(%rsp),%al
  214fdd:	04 fe                	add    $0xfe,%al
  214fdf:	0f 95 c0             	setne  %al
  214fe2:	0f b6 c0             	movzbl %al,%eax
  214fe5:	74 06                	je     214fed <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0xfd>
  214fe7:	eb 00                	jmp    214fe9 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0xf9>
  214fe9:	eb 1a                	jmp    215005 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x115>
  214feb:	0f 0b                	ud2    
  214fed:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                None => match self.backiter.as_mut()?.next() {
  214ff2:	48 83 c7 30          	add    $0x30,%rdi
  214ff6:	e8 f5 03 ff ff       	callq  2053f0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h9470c8314f6c6aceE>
  214ffb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215000:	e9 03 01 00 00       	jmpq   215108 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x218>
                Some(inner) => self.frontiter = Some(inner.into_iter()),
  215005:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21500a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  215011:	00 
  215012:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  215017:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21501e:	00 
  21501f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  215024:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21502b:	00 
  21502c:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  215031:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  215038:	00 
  215039:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  215040:	00 
  215041:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  215048:	00 
  215049:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  215050:	00 
  215051:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  215058:	00 
  215059:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  215060:	00 
  215061:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  215068:	00 
  215069:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  215070:	00 
  215071:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  215078:	00 
  215079:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  215080:	00 
  215081:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
  215088:	00 
  215089:	e8 e2 e1 ff ff       	callq  213270 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb9dcb764c8252fd9E>
  21508e:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  215095:	00 
  215096:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21509d:	00 
  21509e:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  2150a5:	00 
  2150a6:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2150ad:	00 
  2150ae:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  2150b5:	00 
  2150b6:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2150bd:	00 
  2150be:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2150c5:	00 
  2150c6:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2150cd:	00 
  2150ce:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2150d3:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  2150da:	00 
  2150db:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2150df:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  2150e6:	00 
  2150e7:	48 89 48 18          	mov    %rcx,0x18(%rax)
  2150eb:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  2150f2:	00 
  2150f3:	48 89 48 20          	mov    %rcx,0x20(%rax)
  2150f7:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  2150fe:	00 
  2150ff:	48 89 48 28          	mov    %rcx,0x28(%rax)
        loop {
  215103:	e9 04 fe ff ff       	jmpq   214f0c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x1c>
  215108:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                None => match self.backiter.as_mut()?.next() {
  21510d:	e8 de 0a ff ff       	callq  205bf0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ae4f61bcf33a1a9E>
  215112:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  215119:	00 
  21511a:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  215121:	00 
  215122:	48 85 c0             	test   %rax,%rax
  215125:	0f 94 c0             	sete   %al
  215128:	0f b6 c0             	movzbl %al,%eax
  21512b:	75 06                	jne    215133 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x243>
  21512d:	eb 00                	jmp    21512f <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x23f>
  21512f:	eb 26                	jmp    215157 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x267>
  215131:	0f 0b                	ud2    
  215133:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21513a:	00 
  21513b:	48 89 bc 24 60 01 00 	mov    %rdi,0x160(%rsp)
  215142:	00 
  215143:	e8 38 e0 ff ff       	callq  213180 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39ed0a932443e6e1E>
  215148:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  21514f:	00 
  215150:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  215155:	eb 1e                	jmp    215175 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x285>
  215157:	e8 14 0b ff ff       	callq  205c70 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h3295d9591141a3c5E>
  21515c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  215161:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
#![no_std] // don't link the Rust standard library
  215166:	eb 00                	jmp    215168 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x278>
                },
  215168:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  21516f:	00 
  215170:	e9 24 fe ff ff       	jmpq   214f99 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0xa9>
                None => match self.backiter.as_mut()?.next() {
  215175:	c6 84 24 37 01 00 00 	movb   $0x1,0x137(%rsp)
  21517c:	01 
  21517d:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  215182:	48 85 c0             	test   %rax,%rax
  215185:	74 06                	je     21518d <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x29d>
  215187:	eb 00                	jmp    215189 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x299>
  215189:	eb 0c                	jmp    215197 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x2a7>
  21518b:	0f 0b                	ud2    
                        self.backiter = None;
  21518d:	c6 84 24 a8 00 00 00 	movb   $0x2,0xa8(%rsp)
  215194:	02 
  215195:	eb 3b                	jmp    2151d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x2e2>
                    elt @ Some(_) => return elt,
  215197:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  21519e:	00 
  21519f:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2151a4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2151ab:	00 
  2151ac:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  2151b3:	00 
  2151b4:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  2151bb:	00 
  2151bc:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2151c1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                },
  2151c6:	f6 84 24 37 01 00 00 	testb  $0x1,0x137(%rsp)
  2151cd:	01 
  2151ce:	75 42                	jne    215212 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x322>
  2151d0:	eb 96                	jmp    215168 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x278>
  2151d2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        self.backiter = None;
  2151d7:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2151de:	00 
  2151df:	48 89 48 30          	mov    %rcx,0x30(%rax)
  2151e3:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2151ea:	00 
  2151eb:	48 89 48 38          	mov    %rcx,0x38(%rax)
  2151ef:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  2151f6:	00 
  2151f7:	48 89 48 40          	mov    %rcx,0x40(%rax)
  2151fb:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  215202:	00 
  215203:	48 89 48 48          	mov    %rcx,0x48(%rax)
                        return None;
  215207:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  21520e:	00 00 
  215210:	eb b4                	jmp    2151c6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x2d6>
                },
  215212:	e9 51 ff ff ff       	jmpq   215168 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd7e20884e98a16e4E+0x278>
  215217:	cc                   	int3   
  215218:	cc                   	int3   
  215219:	cc                   	int3   
  21521a:	cc                   	int3   
  21521b:	cc                   	int3   
  21521c:	cc                   	int3   
  21521d:	cc                   	int3   
  21521e:	cc                   	int3   
  21521f:	cc                   	int3   

0000000000215220 <_ZN4core4iter6traits8iterator8Iterator3map17h83ac06ea34549621E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  215220:	48 83 ec 68          	sub    $0x68,%rsp
  215224:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  215229:	48 89 3c 24          	mov    %rdi,(%rsp)
        Map::new(self, f)
  21522d:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  215232:	ba 50 00 00 00       	mov    $0x50,%edx
  215237:	e8 64 88 00 00       	callq  21daa0 <memcpy>
  21523c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  215241:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  215246:	e8 65 50 ff ff       	callq  20a2b0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h56f355a7c0941633E>
  21524b:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21524f:	48 83 c4 68          	add    $0x68,%rsp
  215253:	c3                   	retq   
  215254:	cc                   	int3   
  215255:	cc                   	int3   
  215256:	cc                   	int3   
  215257:	cc                   	int3   
  215258:	cc                   	int3   
  215259:	cc                   	int3   
  21525a:	cc                   	int3   
  21525b:	cc                   	int3   
  21525c:	cc                   	int3   
  21525d:	cc                   	int3   
  21525e:	cc                   	int3   
  21525f:	cc                   	int3   

0000000000215260 <_ZN4core4iter8adapters7flatten24FlatMap$LT$I$C$U$C$F$GT$3new17hf08ecf6d2857556eE>:
    pub(in crate::iter) fn new(iter: I, f: F) -> FlatMap<I, U, F> {
  215260:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  215267:	48 89 14 24          	mov    %rdx,(%rsp)
  21526b:	48 89 f0             	mov    %rsi,%rax
  21526e:	48 8b 34 24          	mov    (%rsp),%rsi
  215272:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215277:	48 89 f8             	mov    %rdi,%rax
  21527a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21527f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215284:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215289:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
  215290:	00 
  215291:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  215298:	00 
        FlatMap { inner: FlattenCompat::new(iter.map(f)) }
  215299:	e8 c2 4e ff ff       	callq  20a160 <_ZN4core4iter6traits8iterator8Iterator3map17h8f2242c1760814f9E>
  21529e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2152a3:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2152a8:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2152ad:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2152b2:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2152b7:	e8 24 00 00 00       	callq  2152e0 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hc2cb64f3a7721086E>
  2152bc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2152c1:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  2152c6:	ba 50 00 00 00       	mov    $0x50,%edx
  2152cb:	e8 d0 87 00 00       	callq  21daa0 <memcpy>
  2152d0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  2152d5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2152dc:	c3                   	retq   
  2152dd:	cc                   	int3   
  2152de:	cc                   	int3   
  2152df:	cc                   	int3   

00000000002152e0 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hc2cb64f3a7721086E>:
    fn new(iter: I) -> FlattenCompat<I, U> {
  2152e0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2152e7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2152ec:	48 89 f0             	mov    %rsi,%rax
  2152ef:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2152f4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2152f9:	48 89 f8             	mov    %rdi,%rax
  2152fc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  215301:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215306:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21530b:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  215310:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  215317:	00 
        FlattenCompat { iter: iter.fuse(), frontiter: None, backiter: None }
  215318:	e8 33 4f ff ff       	callq  20a250 <_ZN4core4iter6traits8iterator8Iterator4fuse17h7acc149d3cac7533E>
  21531d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  215322:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  215327:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21532c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  215331:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  215336:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21533b:	c6 44 24 50 02       	movb   $0x2,0x50(%rsp)
  215340:	c6 44 24 70 02       	movb   $0x2,0x70(%rsp)
  215345:	48 89 31             	mov    %rsi,(%rcx)
  215348:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  21534c:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  215351:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  215355:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21535a:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  21535e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  215363:	48 89 51 20          	mov    %rdx,0x20(%rcx)
  215367:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  21536c:	48 89 51 28          	mov    %rdx,0x28(%rcx)
  215370:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  215375:	48 89 51 30          	mov    %rdx,0x30(%rcx)
  215379:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  21537e:	48 89 51 38          	mov    %rdx,0x38(%rcx)
  215382:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  215387:	48 89 51 40          	mov    %rdx,0x40(%rcx)
  21538b:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  215390:	48 89 51 48          	mov    %rdx,0x48(%rcx)
    }
  215394:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21539b:	c3                   	retq   
  21539c:	cc                   	int3   
  21539d:	cc                   	int3   
  21539e:	cc                   	int3   
  21539f:	cc                   	int3   

00000000002153a0 <_ZN4core3str8converts23from_utf8_unchecked_mut17h954742d39eb3e2cbE>:
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
  2153a0:	48 83 ec 10          	sub    $0x10,%rsp
  2153a4:	48 89 f2             	mov    %rsi,%rdx
  2153a7:	48 89 f8             	mov    %rdi,%rax
  2153aa:	48 89 04 24          	mov    %rax,(%rsp)
  2153ae:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
  2153b3:	48 83 c4 10          	add    $0x10,%rsp
  2153b7:	c3                   	retq   
  2153b8:	cc                   	int3   
  2153b9:	cc                   	int3   
  2153ba:	cc                   	int3   
  2153bb:	cc                   	int3   
  2153bc:	cc                   	int3   
  2153bd:	cc                   	int3   
  2153be:	cc                   	int3   
  2153bf:	cc                   	int3   

00000000002153c0 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE>:
use lazy_static::lazy_static;
use spin::Mutex;

// implements basic exception handlers:

pub extern "x86-interrupt" fn divide_by_zero(stk: InterruptStackFrame) {
  2153c0:	41 53                	push   %r11
  2153c2:	41 52                	push   %r10
  2153c4:	41 51                	push   %r9
  2153c6:	41 50                	push   %r8
  2153c8:	57                   	push   %rdi
  2153c9:	56                   	push   %rsi
  2153ca:	52                   	push   %rdx
  2153cb:	51                   	push   %rcx
  2153cc:	50                   	push   %rax
  2153cd:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  2153d4:	fc                   	cld    
  2153d5:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  2153dc:	00 
  2153dd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  2153e2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2153e9:	00 00 
  2153eb:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2153f0:	48 8d 35 61 af fe ff 	lea    -0x1509f(%rip),%rsi        # 200358 <str.0+0x58>
  2153f7:	e8 64 09 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2153fc:	88 44 24 37          	mov    %al,0x37(%rsp)
  215400:	8a 44 24 37          	mov    0x37(%rsp),%al
  215404:	a8 01                	test   $0x1,%al
  215406:	75 09                	jne    215411 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x51>
  215408:	eb 00                	jmp    21540a <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x4a>
  21540a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  21540f:	eb 4e                	jmp    21545f <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x9f>
  215411:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  215418:	00 
  215419:	48 8b 3d 80 b3 00 00 	mov    0xb380(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215420:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  215427:	00 
  215428:	e8 c3 d6 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  21542d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  215434:	00 
  215435:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21543c:	00 
  21543d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  215442:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  215447:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  21544c:	e8 0f 09 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215451:	88 44 24 27          	mov    %al,0x27(%rsp)
  215455:	8a 44 24 27          	mov    0x27(%rsp),%al
  215459:	24 01                	and    $0x1,%al
  21545b:	88 44 24 47          	mov    %al,0x47(%rsp)
  21545f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  215464:	75 16                	jne    21547c <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0xbc>
}
  215466:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  21546d:	58                   	pop    %rax
  21546e:	59                   	pop    %rcx
  21546f:	5a                   	pop    %rdx
  215470:	5e                   	pop    %rsi
  215471:	5f                   	pop    %rdi
  215472:	41 58                	pop    %r8
  215474:	41 59                	pop    %r9
  215476:	41 5a                	pop    %r10
  215478:	41 5b                	pop    %r11
  21547a:	48 cf                	iretq  
  21547c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  215481:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  215488:	00 
  215489:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  215490:	00 
  215491:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  215498:	00 
  215499:	48 8d 35 f0 08 ff ff 	lea    -0xf710(%rip),%rsi        # 205d90 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  2154a0:	e8 8b df ff ff       	callq  213430 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  2154a5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2154aa:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2154af:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2154b4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2154b9:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  2154c0:	00 
  2154c1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2154c8:	00 
  2154c9:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  2154d0:	00 
  2154d1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2154d6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2154db:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2154e0:	48 8d 35 41 a7 00 00 	lea    0xa741(%rip),%rsi        # 21fc28 <memset+0x2168>
  2154e7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2154ed:	4c 8d 0d 3c bf fe ff 	lea    -0x140c4(%rip),%r9        # 201430 <str.1+0xc0>
  2154f4:	4c 89 c2             	mov    %r8,%rdx
  2154f7:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  2154fe:	00 
  2154ff:	e8 9c f9 fe ff       	callq  204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  215504:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  215509:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21550e:	48 8d 15 23 a7 00 00 	lea    0xa723(%rip),%rdx        # 21fc38 <memset+0x2178>
  215515:	e8 f6 32 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21551a:	e9 47 ff ff ff       	jmpq   215466 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0xa6>
  21551f:	cc                   	int3   

0000000000215520 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E>:

extern "x86-interrupt" fn breakpoint(stk: InterruptStackFrame) {
  215520:	41 53                	push   %r11
  215522:	41 52                	push   %r10
  215524:	41 51                	push   %r9
  215526:	41 50                	push   %r8
  215528:	57                   	push   %rdi
  215529:	56                   	push   %rsi
  21552a:	52                   	push   %rdx
  21552b:	51                   	push   %rcx
  21552c:	50                   	push   %rax
  21552d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  215534:	fc                   	cld    
  215535:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  21553c:	00 
  21553d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  215542:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  215549:	00 00 
  21554b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  215550:	48 8d 35 01 ae fe ff 	lea    -0x151ff(%rip),%rsi        # 200358 <str.0+0x58>
  215557:	e8 04 08 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21555c:	88 44 24 37          	mov    %al,0x37(%rsp)
  215560:	8a 44 24 37          	mov    0x37(%rsp),%al
  215564:	a8 01                	test   $0x1,%al
  215566:	75 09                	jne    215571 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x51>
  215568:	eb 00                	jmp    21556a <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x4a>
  21556a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  21556f:	eb 4e                	jmp    2155bf <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x9f>
  215571:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  215578:	00 
  215579:	48 8b 3d 20 b2 00 00 	mov    0xb220(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215580:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  215587:	00 
  215588:	e8 63 d5 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  21558d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  215594:	00 
  215595:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21559c:	00 
  21559d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2155a2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2155a7:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  2155ac:	e8 af 07 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2155b1:	88 44 24 27          	mov    %al,0x27(%rsp)
  2155b5:	8a 44 24 27          	mov    0x27(%rsp),%al
  2155b9:	24 01                	and    $0x1,%al
  2155bb:	88 44 24 47          	mov    %al,0x47(%rsp)
  2155bf:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  2155c4:	75 16                	jne    2155dc <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0xbc>
}
  2155c6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  2155cd:	58                   	pop    %rax
  2155ce:	59                   	pop    %rcx
  2155cf:	5a                   	pop    %rdx
  2155d0:	5e                   	pop    %rsi
  2155d1:	5f                   	pop    %rdi
  2155d2:	41 58                	pop    %r8
  2155d4:	41 59                	pop    %r9
  2155d6:	41 5a                	pop    %r10
  2155d8:	41 5b                	pop    %r11
  2155da:	48 cf                	iretq  
  2155dc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  2155e1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2155e8:	00 
  2155e9:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  2155f0:	00 
  2155f1:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  2155f8:	00 
  2155f9:	48 8d 35 90 07 ff ff 	lea    -0xf870(%rip),%rsi        # 205d90 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  215600:	e8 2b de ff ff       	callq  213430 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  215605:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21560a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21560f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  215614:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  215619:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  215620:	00 
  215621:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  215628:	00 
  215629:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  215630:	00 
  215631:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215636:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21563b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  215640:	48 8d 35 29 a6 00 00 	lea    0xa629(%rip),%rsi        # 21fc70 <memset+0x21b0>
  215647:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21564d:	4c 8d 0d dc bd fe ff 	lea    -0x14224(%rip),%r9        # 201430 <str.1+0xc0>
  215654:	4c 89 c2             	mov    %r8,%rdx
  215657:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  21565e:	00 
  21565f:	e8 3c f8 fe ff       	callq  204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  215664:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  215669:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21566e:	48 8d 15 0b a6 00 00 	lea    0xa60b(%rip),%rdx        # 21fc80 <memset+0x21c0>
  215675:	e8 96 31 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21567a:	e9 47 ff ff ff       	jmpq   2155c6 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0xa6>
  21567f:	cc                   	int3   

0000000000215680 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE>:

extern "x86-interrupt" fn invalid_opcode(stk: InterruptStackFrame) {
  215680:	41 53                	push   %r11
  215682:	41 52                	push   %r10
  215684:	41 51                	push   %r9
  215686:	41 50                	push   %r8
  215688:	57                   	push   %rdi
  215689:	56                   	push   %rsi
  21568a:	52                   	push   %rdx
  21568b:	51                   	push   %rcx
  21568c:	50                   	push   %rax
  21568d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  215694:	fc                   	cld    
  215695:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  21569c:	00 
  21569d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  2156a2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2156a9:	00 00 
  2156ab:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2156b0:	48 8d 35 a1 ac fe ff 	lea    -0x1535f(%rip),%rsi        # 200358 <str.0+0x58>
  2156b7:	e8 a4 06 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2156bc:	88 44 24 37          	mov    %al,0x37(%rsp)
  2156c0:	8a 44 24 37          	mov    0x37(%rsp),%al
  2156c4:	a8 01                	test   $0x1,%al
  2156c6:	75 09                	jne    2156d1 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x51>
  2156c8:	eb 00                	jmp    2156ca <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x4a>
  2156ca:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  2156cf:	eb 4e                	jmp    21571f <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x9f>
  2156d1:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  2156d8:	00 
  2156d9:	48 8b 3d c0 b0 00 00 	mov    0xb0c0(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2156e0:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  2156e7:	00 
  2156e8:	e8 03 d4 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2156ed:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2156f4:	00 
  2156f5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2156fc:	00 
  2156fd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  215702:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  215707:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  21570c:	e8 4f 06 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215711:	88 44 24 27          	mov    %al,0x27(%rsp)
  215715:	8a 44 24 27          	mov    0x27(%rsp),%al
  215719:	24 01                	and    $0x1,%al
  21571b:	88 44 24 47          	mov    %al,0x47(%rsp)
  21571f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  215724:	75 16                	jne    21573c <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0xbc>
}
  215726:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  21572d:	58                   	pop    %rax
  21572e:	59                   	pop    %rcx
  21572f:	5a                   	pop    %rdx
  215730:	5e                   	pop    %rsi
  215731:	5f                   	pop    %rdi
  215732:	41 58                	pop    %r8
  215734:	41 59                	pop    %r9
  215736:	41 5a                	pop    %r10
  215738:	41 5b                	pop    %r11
  21573a:	48 cf                	iretq  
  21573c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  215741:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  215748:	00 
  215749:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  215750:	00 
  215751:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  215758:	00 
  215759:	48 8d 35 30 06 ff ff 	lea    -0xf9d0(%rip),%rsi        # 205d90 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  215760:	e8 cb dc ff ff       	callq  213430 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  215765:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21576a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21576f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  215774:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  215779:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  215780:	00 
  215781:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  215788:	00 
  215789:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  215790:	00 
  215791:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215796:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21579b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2157a0:	48 8d 35 11 a5 00 00 	lea    0xa511(%rip),%rsi        # 21fcb8 <memset+0x21f8>
  2157a7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2157ad:	4c 8d 0d 7c bc fe ff 	lea    -0x14384(%rip),%r9        # 201430 <str.1+0xc0>
  2157b4:	4c 89 c2             	mov    %r8,%rdx
  2157b7:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  2157be:	00 
  2157bf:	e8 dc f6 fe ff       	callq  204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  2157c4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2157c9:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2157ce:	48 8d 15 f3 a4 00 00 	lea    0xa4f3(%rip),%rdx        # 21fcc8 <memset+0x2208>
  2157d5:	e8 36 30 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2157da:	e9 47 ff ff ff       	jmpq   215726 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0xa6>
  2157df:	cc                   	int3   

00000000002157e0 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E>:

extern "x86-interrupt" fn double_fault(stk: InterruptStackFrame, err: u64) -> ! {
  2157e0:	50                   	push   %rax
  2157e1:	41 53                	push   %r11
  2157e3:	41 52                	push   %r10
  2157e5:	41 51                	push   %r9
  2157e7:	41 50                	push   %r8
  2157e9:	57                   	push   %rdi
  2157ea:	56                   	push   %rsi
  2157eb:	52                   	push   %rdx
  2157ec:	51                   	push   %rcx
  2157ed:	50                   	push   %rax
  2157ee:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  2157f5:	fc                   	cld    
  2157f6:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  2157fd:	00 
  2157fe:	48 8d 84 24 50 01 00 	lea    0x150(%rsp),%rax
  215805:	00 
  215806:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  21580b:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  215812:	00 00 
  215814:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  215819:	48 8d 35 38 ab fe ff 	lea    -0x154c8(%rip),%rsi        # 200358 <str.0+0x58>
  215820:	e8 3b 05 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215825:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  215829:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  21582d:	a8 01                	test   $0x1,%al
  21582f:	75 09                	jne    21583a <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0x5a>
  215831:	eb 00                	jmp    215833 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0x53>
  215833:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  215838:	eb 4e                	jmp    215888 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xa8>
  21583a:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  215841:	00 
  215842:	48 8b 3d 57 af 00 00 	mov    0xaf57(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215849:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  215850:	00 
  215851:	e8 9a d2 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  215856:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21585d:	00 
  21585e:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  215865:	00 
  215866:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21586b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  215870:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  215875:	e8 e6 04 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21587a:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  21587e:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  215882:	24 01                	and    $0x1,%al
  215884:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  215888:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  21588d:	75 07                	jne    215896 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xb6>
    cpu::halt_no_interrupts();
  21588f:	e8 1c c3 ff ff       	callq  211bb0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E>
  215894:	0f 0b                	ud2    
  215896:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  21589b:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  2158a2:	00 
  2158a3:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  2158aa:	00 
  2158ab:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  2158b2:	00 
  2158b3:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  2158ba:	00 
  2158bb:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  2158c2:	00 
  2158c3:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  2158ca:	00 
  2158cb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2158d0:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2158d7:	00 
  2158d8:	48 8b 35 29 af 00 00 	mov    0xaf29(%rip),%rsi        # 220808 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  2158df:	e8 6c df ff ff       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  2158e4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2158e9:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2158ee:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2158f3:	48 8d 35 96 04 ff ff 	lea    -0xfb6a(%rip),%rsi        # 205d90 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  2158fa:	e8 31 db ff ff       	callq  213430 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  2158ff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215904:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  215909:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21590e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  215913:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  215918:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21591d:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  215924:	00 
  215925:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  21592c:	00 
  21592d:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  215934:	00 
  215935:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21593c:	00 
  21593d:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  215944:	00 
  215945:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21594a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21594f:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  215954:	48 8d 35 a5 a3 00 00 	lea    0xa3a5(%rip),%rsi        # 21fd00 <memset+0x2240>
  21595b:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  215961:	4c 8d 0d a8 bb fe ff 	lea    -0x14458(%rip),%r9        # 201510 <str.1+0x1a0>
  215968:	4c 89 c2             	mov    %r8,%rdx
  21596b:	48 c7 04 24 02 00 00 	movq   $0x2,(%rsp)
  215972:	00 
  215973:	e8 28 f5 fe ff       	callq  204ea0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  215978:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21597d:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  215982:	48 8d 15 97 a3 00 00 	lea    0xa397(%rip),%rdx        # 21fd20 <memset+0x2260>
  215989:	e8 82 2e 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21598e:	e9 fc fe ff ff       	jmpq   21588f <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xaf>
  215993:	cc                   	int3   
  215994:	cc                   	int3   
  215995:	cc                   	int3   
  215996:	cc                   	int3   
  215997:	cc                   	int3   
  215998:	cc                   	int3   
  215999:	cc                   	int3   
  21599a:	cc                   	int3   
  21599b:	cc                   	int3   
  21599c:	cc                   	int3   
  21599d:	cc                   	int3   
  21599e:	cc                   	int3   
  21599f:	cc                   	int3   

00000000002159a0 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E>:
}

pub fn prepare_idt() -> InterruptDescriptorTable {
  2159a0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  2159a7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2159ac:	48 89 f8             	mov    %rdi,%rax
  2159af:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut idt = InterruptDescriptorTable::empty();
  2159b4:	e8 07 05 ff ff       	callq  205ec0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E>
    idt.divide_error = prepare_default_handle(divide_by_zero);
  2159b9:	48 8d 3d 00 fa ff ff 	lea    -0x600(%rip),%rdi        # 2153c0 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE>
  2159c0:	e8 3b 0e ff ff       	callq  206800 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  2159c5:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  2159cc:	00 
  2159cd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2159d4:	00 
  2159d5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2159dc:	00 
  2159dd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2159e2:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2159e9:	00 
  2159ea:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2159ef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2159f4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2159f9:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2159fe:	48 89 50 08          	mov    %rdx,0x8(%rax)
  215a02:	48 89 08             	mov    %rcx,(%rax)
    idt.invalid_opcode = prepare_default_handle(invalid_opcode);
  215a05:	48 8d 3d 74 fc ff ff 	lea    -0x38c(%rip),%rdi        # 215680 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE>
  215a0c:	e8 ef 0d ff ff       	callq  206800 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  215a11:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  215a18:	00 
  215a19:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  215a20:	00 
  215a21:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  215a28:	00 
  215a29:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215a2e:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  215a35:	00 
  215a36:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  215a3b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215a40:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  215a45:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  215a4a:	48 89 50 68          	mov    %rdx,0x68(%rax)
  215a4e:	48 89 48 60          	mov    %rcx,0x60(%rax)
    idt.breakpoint = prepare_default_handle(breakpoint);
  215a52:	48 8d 3d c7 fa ff ff 	lea    -0x539(%rip),%rdi        # 215520 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E>
  215a59:	e8 a2 0d ff ff       	callq  206800 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  215a5e:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  215a65:	00 
  215a66:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  215a6d:	00 
  215a6e:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  215a75:	00 
  215a76:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  215a7b:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  215a82:	00 
  215a83:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  215a88:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215a8d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  215a92:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  215a97:	48 89 50 38          	mov    %rdx,0x38(%rax)
  215a9b:	48 89 48 30          	mov    %rcx,0x30(%rax)
    idt.double_fault = prepare_no_ret_error_code_handle(double_fault);
  215a9f:	48 8d 3d 3a fd ff ff 	lea    -0x2c6(%rip),%rdi        # 2157e0 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E>
  215aa6:	e8 b5 0d ff ff       	callq  206860 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3b008e4f60cf1d75E>
  215aab:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  215ab2:	00 
  215ab3:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  215aba:	00 
  215abb:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  215ac2:	00 
  215ac3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  215ac8:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  215acf:	00 
  215ad0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  215ad5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  215ada:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  215adf:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  215ae6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  215aeb:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    idt.double_fault.set_stack_index(0);
  215af2:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
  215af9:	31 f6                	xor    %esi,%esi
  215afb:	e8 c0 29 ff ff       	callq  2084c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E>

    log::info!("Prepared basic exceptions.");
  215b00:	48 c7 44 24 60 03 00 	movq   $0x3,0x60(%rsp)
  215b07:	00 00 
  215b09:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  215b0e:	48 8d 35 43 a8 fe ff 	lea    -0x157bd(%rip),%rsi        # 200358 <str.0+0x58>
  215b15:	e8 46 02 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215b1a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215b1e:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215b22:	a8 01                	test   $0x1,%al
  215b24:	75 09                	jne    215b2f <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x18f>
  215b26:	eb 00                	jmp    215b28 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x188>
  215b28:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  215b2d:	eb 4e                	jmp    215b7d <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1dd>
  215b2f:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  215b36:	00 
  215b37:	48 8b 3d 62 ac 00 00 	mov    0xac62(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215b3e:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  215b45:	00 
  215b46:	e8 a5 cf ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  215b4b:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  215b52:	00 
  215b53:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  215b5a:	00 
  215b5b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  215b60:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  215b65:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  215b6a:	e8 f1 01 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215b6f:	88 44 24 0e          	mov    %al,0xe(%rsp)
  215b73:	8a 44 24 0e          	mov    0xe(%rsp),%al
  215b77:	24 01                	and    $0x1,%al
  215b79:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  215b7d:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  215b82:	75 0d                	jne    215b91 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1f1>
  215b84:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    return idt;
}
  215b89:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  215b90:	c3                   	retq   
    log::info!("Prepared basic exceptions.");
  215b91:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  215b96:	48 8d 35 bb a1 00 00 	lea    0xa1bb(%rip),%rsi        # 21fd58 <memset+0x2298>
  215b9d:	ba 01 00 00 00       	mov    $0x1,%edx
  215ba2:	48 8d 0d f7 b9 fe ff 	lea    -0x14609(%rip),%rcx        # 2015a0 <str.1+0x230>
  215ba9:	31 c0                	xor    %eax,%eax
  215bab:	41 89 c0             	mov    %eax,%r8d
  215bae:	e8 4d f3 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  215bb3:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  215bb8:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  215bbd:	48 8d 15 a4 a1 00 00 	lea    0xa1a4(%rip),%rdx        # 21fd68 <memset+0x22a8>
  215bc4:	e8 47 2c 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  215bc9:	eb b9                	jmp    215b84 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1e4>
  215bcb:	cc                   	int3   
  215bcc:	cc                   	int3   
  215bcd:	cc                   	int3   
  215bce:	cc                   	int3   
  215bcf:	cc                   	int3   

0000000000215bd0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E>:

lazy_static! {
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
}

pub fn init_exceptions() {
  215bd0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    // load processor IDT
    IDT.lock().load_into_cpu();
  215bd7:	48 8d 3d e9 b9 fe ff 	lea    -0x14617(%rip),%rdi        # 2015c7 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE>
  215bde:	e8 fd 00 00 00       	callq  215ce0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0f9b31e2dab7f12aE>
  215be3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215be8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  215bed:	e8 7e 21 ff ff       	callq  207d70 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h2d82f46c320cde4bE>
  215bf2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  215bf7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215bfc:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  215c01:	e8 aa 22 ff ff       	callq  207eb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6438e4ee6feea27dE>
  215c06:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215c0b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  215c10:	e8 ab 0b ff ff       	callq  2067c0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17hfad6d3a77281dca1E>
  215c15:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  215c1a:	e8 21 20 00 00       	callq  217c40 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h4dc346f8cb271829E>
    log::info!("Initialized Interrupt descriptor table.");
  215c1f:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  215c26:	00 00 
  215c28:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  215c2d:	48 8d 35 24 a7 fe ff 	lea    -0x158dc(%rip),%rsi        # 200358 <str.0+0x58>
  215c34:	e8 27 01 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215c39:	88 44 24 0f          	mov    %al,0xf(%rsp)
  215c3d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  215c41:	a8 01                	test   $0x1,%al
  215c43:	75 09                	jne    215c4e <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0x7e>
  215c45:	eb 00                	jmp    215c47 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0x77>
  215c47:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  215c4c:	eb 48                	jmp    215c96 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xc6>
  215c4e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  215c53:	48 8b 3d 46 ab 00 00 	mov    0xab46(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215c5a:	0f b6 74 24 7f       	movzbl 0x7f(%rsp),%esi
  215c5f:	e8 8c ce ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  215c64:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  215c6b:	00 
  215c6c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  215c73:	00 
  215c74:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  215c79:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  215c7e:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  215c83:	e8 d8 00 ff ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  215c88:	88 44 24 0e          	mov    %al,0xe(%rsp)
  215c8c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  215c90:	24 01                	and    $0x1,%al
  215c92:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  215c96:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  215c9b:	75 08                	jne    215ca5 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xd5>
}
  215c9d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  215ca4:	c3                   	retq   
    log::info!("Initialized Interrupt descriptor table.");
  215ca5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  215caa:	48 8d 35 ef a0 00 00 	lea    0xa0ef(%rip),%rsi        # 21fda0 <memset+0x22e0>
  215cb1:	ba 01 00 00 00       	mov    $0x1,%edx
  215cb6:	48 8d 0d e3 b8 fe ff 	lea    -0x1471d(%rip),%rcx        # 2015a0 <str.1+0x230>
  215cbd:	31 c0                	xor    %eax,%eax
  215cbf:	41 89 c0             	mov    %eax,%r8d
  215cc2:	e8 39 f2 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  215cc7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  215ccc:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  215cd1:	48 8d 15 d8 a0 00 00 	lea    0xa0d8(%rip),%rdx        # 21fdb0 <memset+0x22f0>
  215cd8:	e8 33 2b 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  215cdd:	eb be                	jmp    215c9d <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xcd>
  215cdf:	cc                   	int3   

0000000000215ce0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0f9b31e2dab7f12aE>:
            fn deref(&self) -> &$T {
  215ce0:	48 83 ec 18          	sub    $0x18,%rsp
  215ce4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  215ce9:	48 8d 05 d0 0c 01 00 	lea    0x10cd0(%rip),%rax        # 2269c0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17heb6b46609789e227E>
  215cf0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215cf5:	48 8d 3d c4 0c 01 00 	lea    0x10cc4(%rip),%rdi        # 2269c0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17heb6b46609789e227E>
  215cfc:	e8 bf 3a ff ff       	callq  2097c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E>
  215d01:	48 89 04 24          	mov    %rax,(%rsp)
  215d05:	48 8b 04 24          	mov    (%rsp),%rax
            }
  215d09:	48 83 c4 18          	add    $0x18,%rsp
  215d0d:	c3                   	retq   
  215d0e:	cc                   	int3   
  215d0f:	cc                   	int3   

0000000000215d10 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>:
#[stable(feature = "unreachable", since = "1.27.0")]
#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
pub const unsafe fn unreachable_unchecked() -> ! {
    // SAFETY: the safety contract for `intrinsics::unreachable` must
    // be upheld by the caller.
    unsafe { intrinsics::unreachable() }
  215d10:	0f 0b                	ud2    
  215d12:	cc                   	int3   
  215d13:	cc                   	int3   
  215d14:	cc                   	int3   
  215d15:	cc                   	int3   
  215d16:	cc                   	int3   
  215d17:	cc                   	int3   
  215d18:	cc                   	int3   
  215d19:	cc                   	int3   
  215d1a:	cc                   	int3   
  215d1b:	cc                   	int3   
  215d1c:	cc                   	int3   
  215d1d:	cc                   	int3   
  215d1e:	cc                   	int3   
  215d1f:	cc                   	int3   

0000000000215d20 <_ZN4core4hint9spin_loop17h42efeaf1154a507bE>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
  215d20:	c3                   	retq   
  215d21:	cc                   	int3   
  215d22:	cc                   	int3   
  215d23:	cc                   	int3   
  215d24:	cc                   	int3   
  215d25:	cc                   	int3   
  215d26:	cc                   	int3   
  215d27:	cc                   	int3   
  215d28:	cc                   	int3   
  215d29:	cc                   	int3   
  215d2a:	cc                   	int3   
  215d2b:	cc                   	int3   
  215d2c:	cc                   	int3   
  215d2d:	cc                   	int3   
  215d2e:	cc                   	int3   
  215d2f:	cc                   	int3   

0000000000215d30 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E>:
    Page1GiB,
}

impl PageSize {
    #[inline]
    pub fn size(&self) -> u64 {
  215d30:	48 83 ec 18          	sub    $0x18,%rsp
  215d34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  215d39:	0f b6 07             	movzbl (%rdi),%eax
  215d3c:	48 89 04 24          	mov    %rax,(%rsp)
  215d40:	48 85 c0             	test   %rax,%rax
  215d43:	74 12                	je     215d57 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x27>
  215d45:	eb 00                	jmp    215d47 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x17>
  215d47:	48 8b 04 24          	mov    (%rsp),%rax
  215d4b:	48 83 e8 01          	sub    $0x1,%rax
  215d4f:	74 11                	je     215d62 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x32>
  215d51:	eb 00                	jmp    215d53 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x23>
  215d53:	eb 18                	jmp    215d6d <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x3d>
  215d55:	0f 0b                	ud2    
            Self::Page4KiB => 4 * 1024,
  215d57:	48 c7 44 24 08 00 10 	movq   $0x1000,0x8(%rsp)
  215d5e:	00 00 
  215d60:	eb 14                	jmp    215d76 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x46>
            Self::Page2MiB => 2 * 1024 * 1024,
  215d62:	48 c7 44 24 08 00 00 	movq   $0x200000,0x8(%rsp)
  215d69:	20 00 
  215d6b:	eb 09                	jmp    215d76 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E+0x46>
            Self::Page1GiB => 1024 * 1024 * 1024,
  215d6d:	48 c7 44 24 08 00 00 	movq   $0x40000000,0x8(%rsp)
  215d74:	00 40 
        }
    }
  215d76:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215d7b:	48 83 c4 18          	add    $0x18,%rsp
  215d7f:	c3                   	retq   

0000000000215d80 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h41a0eadfb44e669cE>:

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct PageTableIndex(u16);

impl PageTableIndex {
    pub fn new(value: u16) -> Self {
  215d80:	48 83 ec 04          	sub    $0x4,%rsp
  215d84:	66 89 f8             	mov    %di,%ax
  215d87:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
        PageTableIndex(value % MAX_ENTRIES_PER_LEVEL)
  215d8c:	66 25 ff 01          	and    $0x1ff,%ax
  215d90:	66 89 04 24          	mov    %ax,(%rsp)
    }
  215d94:	66 8b 04 24          	mov    (%rsp),%ax
  215d98:	48 83 c4 04          	add    $0x4,%rsp
  215d9c:	c3                   	retq   
  215d9d:	cc                   	int3   
  215d9e:	cc                   	int3   
  215d9f:	cc                   	int3   

0000000000215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>:
    pub fn as_u16(&self) -> u16 {
        self.0
    }

    #[inline]
    pub fn as_usize(&self) -> usize {
  215da0:	50                   	push   %rax
  215da1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as usize
  215da5:	0f b7 07             	movzwl (%rdi),%eax
    }
  215da8:	59                   	pop    %rcx
  215da9:	c3                   	retq   
  215daa:	cc                   	int3   
  215dab:	cc                   	int3   
  215dac:	cc                   	int3   
  215dad:	cc                   	int3   
  215dae:	cc                   	int3   
  215daf:	cc                   	int3   

0000000000215db0 <_ZN9r3_kernel2mm6paging4Page12from_address17h7cbbeb1b75ffd710E>:
        }

        Ok(Page(addr))
    }

    pub fn from_address(addr: mm::VirtualAddress) -> Self {
  215db0:	48 83 ec 28          	sub    $0x28,%rsp
  215db4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Page(addr.new_align_down(PageSize::Page4KiB.size()))
  215db9:	48 8d 3d 24 b8 fe ff 	lea    -0x147dc(%rip),%rdi        # 2015e4 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x1d>
  215dc0:	e8 6b ff ff ff       	callq  215d30 <_ZN9r3_kernel2mm6paging8PageSize4size17heee9755fdf0d3241E>
  215dc5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215dca:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  215dcf:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  215dd4:	e8 07 e3 ff ff       	callq  2140e0 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17h3e264b6c93056dc3E>
  215dd9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215dde:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215de3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  215de8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  215ded:	48 83 c4 28          	add    $0x28,%rsp
  215df1:	c3                   	retq   
  215df2:	cc                   	int3   
  215df3:	cc                   	int3   
  215df4:	cc                   	int3   
  215df5:	cc                   	int3   
  215df6:	cc                   	int3   
  215df7:	cc                   	int3   
  215df8:	cc                   	int3   
  215df9:	cc                   	int3   
  215dfa:	cc                   	int3   
  215dfb:	cc                   	int3   
  215dfc:	cc                   	int3   
  215dfd:	cc                   	int3   
  215dfe:	cc                   	int3   
  215dff:	cc                   	int3   

0000000000215e00 <_ZN9r3_kernel2mm6paging4Page4addr17hd25cfb4196598732E>:

    #[inline]
    pub fn addr(&self) -> mm::VirtualAddress {
  215e00:	50                   	push   %rax
  215e01:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  215e05:	48 8b 07             	mov    (%rdi),%rax
    }
  215e08:	59                   	pop    %rcx
  215e09:	c3                   	retq   
  215e0a:	cc                   	int3   
  215e0b:	cc                   	int3   
  215e0c:	cc                   	int3   
  215e0d:	cc                   	int3   
  215e0e:	cc                   	int3   
  215e0f:	cc                   	int3   

0000000000215e10 <_ZN9r3_kernel2mm6paging4Page6as_u6417hd4c7272c07787f6fE>:

    #[inline]
    pub fn as_u64(&self) -> u64 {
  215e10:	48 83 ec 18          	sub    $0x18,%rsp
  215e14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  215e19:	e8 92 e2 ff ff       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  215e1e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215e23:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  215e28:	48 83 c4 18          	add    $0x18,%rsp
  215e2c:	c3                   	retq   
  215e2d:	cc                   	int3   
  215e2e:	cc                   	int3   
  215e2f:	cc                   	int3   

0000000000215e30 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h3eb3a0f9b9ea9ac7E>:
    }
}

impl PageEntryFlags {
    #[inline]
    pub fn kernel_flags() -> PageEntryFlags {
  215e30:	48 83 ec 28          	sub    $0x28,%rsp
        let value: u64 = PageEntryFlags::PRESENT.bits() | PageEntryFlags::READ_WRITE.bits();
  215e34:	48 8d 3d 05 a5 fe ff 	lea    -0x15afb(%rip),%rdi        # 200340 <str.0+0x40>
  215e3b:	e8 b0 1b 00 00       	callq  2179f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17he39e0832fb3eaeb7E>
  215e40:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215e45:	48 8d 3d ec a4 fe ff 	lea    -0x15b14(%rip),%rdi        # 200338 <str.0+0x38>
  215e4c:	e8 9f 1b 00 00       	callq  2179f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17he39e0832fb3eaeb7E>
  215e51:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215e56:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215e5b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  215e60:	48 09 c7             	or     %rax,%rdi
  215e63:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(value)
  215e68:	e8 93 1b 00 00       	callq  217a00 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hc4b704c1a50a7c3aE>
  215e6d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215e72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  215e77:	48 83 c4 28          	add    $0x28,%rsp
  215e7b:	c3                   	retq   
  215e7c:	cc                   	int3   
  215e7d:	cc                   	int3   
  215e7e:	cc                   	int3   
  215e7f:	cc                   	int3   

0000000000215e80 <_ZN9r3_kernel2mm6paging9PageEntry5empty17h4e1e4daadc859fe2E>:
#[repr(transparent)]
pub struct PageEntry(u64);

impl PageEntry {
    #[inline]
    pub fn empty() -> Self {
  215e80:	50                   	push   %rax
        PageEntry(0)
  215e81:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  215e88:	00 
    }
  215e89:	48 8b 04 24          	mov    (%rsp),%rax
  215e8d:	59                   	pop    %rcx
  215e8e:	c3                   	retq   
  215e8f:	cc                   	int3   

0000000000215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>:
    pub fn empty_from_flags(flags: PageEntryFlags) -> Self {
        PageEntry(0 | flags.bits())
    }

    #[inline]
    pub fn is_mapped(&self) -> bool {
  215e90:	50                   	push   %rax
  215e91:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 != 0
  215e95:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  215e99:	0f 95 c0             	setne  %al
    }
  215e9c:	24 01                	and    $0x1,%al
  215e9e:	0f b6 c0             	movzbl %al,%eax
  215ea1:	59                   	pop    %rcx
  215ea2:	c3                   	retq   
  215ea3:	cc                   	int3   
  215ea4:	cc                   	int3   
  215ea5:	cc                   	int3   
  215ea6:	cc                   	int3   
  215ea7:	cc                   	int3   
  215ea8:	cc                   	int3   
  215ea9:	cc                   	int3   
  215eaa:	cc                   	int3   
  215eab:	cc                   	int3   
  215eac:	cc                   	int3   
  215ead:	cc                   	int3   
  215eae:	cc                   	int3   
  215eaf:	cc                   	int3   

0000000000215eb0 <_ZN9r3_kernel2mm6paging9PageEntry4addr17h9db0a1be69b6567aE>:

    #[inline]
    pub fn addr(&self) -> mm::PhysicalAddress {
  215eb0:	48 83 ec 18          	sub    $0x18,%rsp
  215eb4:	48 89 f8             	mov    %rdi,%rax
  215eb7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        mm::PhysicalAddress::from_u64(self.0 & ENTRY_ADDR_BIT_MASK)
  215ebc:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
  215ec3:	ff 0f 00 
  215ec6:	48 23 38             	and    (%rax),%rdi
  215ec9:	e8 b2 e3 ff ff       	callq  214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>
  215ece:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215ed3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  215ed8:	48 83 c4 18          	add    $0x18,%rsp
  215edc:	c3                   	retq   
  215edd:	cc                   	int3   
  215ede:	cc                   	int3   
  215edf:	cc                   	int3   

0000000000215ee0 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17hf08e901483839714E>:
        self.0 = entry_value;
        Ok(())
    }

    #[inline]
    pub fn set_phy_frame(&mut self, addr: Frame, flags: PageEntryFlags) {
  215ee0:	48 83 ec 48          	sub    $0x48,%rsp
  215ee4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215ee9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  215eee:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  215ef3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215ef8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  215efd:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let phy_addr = addr.as_u64();
  215f02:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  215f07:	e8 24 dc ff ff       	callq  213b30 <_ZN9r3_kernel2mm3phy5Frame6as_u6417hdea98847c689585fE>
  215f0c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  215f11:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        self.0 = phy_addr | flags.bits();
  215f16:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  215f1b:	e8 d0 1a 00 00       	callq  2179f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17he39e0832fb3eaeb7E>
  215f20:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215f25:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215f2a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  215f2f:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  215f34:	48 09 d1             	or     %rdx,%rcx
  215f37:	48 89 08             	mov    %rcx,(%rax)
    }
  215f3a:	48 83 c4 48          	add    $0x48,%rsp
  215f3e:	c3                   	retq   
  215f3f:	cc                   	int3   

0000000000215f40 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17h0d5613b63eec79e5E>:
    pub fn set_flags(&mut self, flags: PageEntryFlags) {
        self.0 = self.addr().as_u64() | flags.bits()
    }

    #[inline]
    pub fn has_flag(&self, flag: PageEntryFlags) -> bool {
  215f40:	48 83 ec 28          	sub    $0x28,%rsp
  215f44:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  215f49:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  215f4e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(self.0).contains(flag)
  215f53:	48 8b 3f             	mov    (%rdi),%rdi
  215f56:	e8 a5 1a 00 00       	callq  217a00 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hc4b704c1a50a7c3aE>
  215f5b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215f60:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  215f65:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  215f6a:	e8 d1 1a 00 00       	callq  217a40 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17heb043b27f058cb80E>
  215f6f:	88 44 24 07          	mov    %al,0x7(%rsp)
  215f73:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  215f77:	24 01                	and    $0x1,%al
  215f79:	0f b6 c0             	movzbl %al,%eax
  215f7c:	48 83 c4 28          	add    $0x28,%rsp
  215f80:	c3                   	retq   
  215f81:	cc                   	int3   
  215f82:	cc                   	int3   
  215f83:	cc                   	int3   
  215f84:	cc                   	int3   
  215f85:	cc                   	int3   
  215f86:	cc                   	int3   
  215f87:	cc                   	int3   
  215f88:	cc                   	int3   
  215f89:	cc                   	int3   
  215f8a:	cc                   	int3   
  215f8b:	cc                   	int3   
  215f8c:	cc                   	int3   
  215f8d:	cc                   	int3   
  215f8e:	cc                   	int3   
  215f8f:	cc                   	int3   

0000000000215f90 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE>:
    #[inline]
    pub fn get_table_addr_by_offset(addr: u64, index: u64) -> u64 {
        addr + index * PAGE_TABLE_SIZE
    }

    pub fn from_cr3(phy_offset: u64) -> VirtualMemoryManager {
  215f90:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  215f97:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  215f9c:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  215fa1:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  215fa6:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  215fad:	00 
        let current_pt_addr = mmu::get_page_table_address();
  215fae:	e8 4d e0 ff ff       	callq  214000 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17hc798fd89e7926e5aE>
  215fb3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  215fb8:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  215fbd:	be 00 10 00 00       	mov    $0x1000,%esi
  215fc2:	e8 d9 e2 ff ff       	callq  2142a0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hbe211fc0c0d16881E>
  215fc7:	24 01                	and    $0x1,%al
  215fc9:	88 44 24 76          	mov    %al,0x76(%rsp)
  215fcd:	48 8d 44 24 76       	lea    0x76(%rsp),%rax
  215fd2:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  215fd7:	48 8d 05 07 b6 fe ff 	lea    -0x149f9(%rip),%rax        # 2015e5 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x1e>
  215fde:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  215fe3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  215fe8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215fed:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  215ff4:	00 
  215ff5:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  215ffa:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  215fff:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  216006:	00 
  216007:	8a 00                	mov    (%rax),%al
  216009:	34 ff                	xor    $0xff,%al
  21600b:	a8 01                	test   $0x1,%al
  21600d:	75 11                	jne    216020 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x90>

        // add the physical offset to that address:
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  21600f:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  216014:	e8 57 e2 ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  216019:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21601e:	eb 2d                	jmp    21604d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0xbd>
  216020:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  216025:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  21602a:	c6 44 24 77 00       	movb   $0x0,0x77(%rsp)
  21602f:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  216036:	00 00 
  216038:	4c 8d 05 a9 9d 00 00 	lea    0x9da9(%rip),%r8        # 21fde8 <memset+0x2328>
  21603f:	31 ff                	xor    %edi,%edi
  216041:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  216046:	e8 05 43 ff ff       	callq  20a350 <_ZN4core9panicking13assert_failed17h3a419d42b0d29573E>
  21604b:	0f 0b                	ud2    
  21604d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  216052:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  216057:	48 01 c8             	add    %rcx,%rax
  21605a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21605f:	0f 92 c0             	setb   %al
  216062:	a8 01                	test   $0x1,%al
  216064:	75 14                	jne    21607a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0xea>
  216066:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21606b:	e8 50 e0 ff ff       	callq  2140c0 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417haafd226c9de2369cE>
  216070:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  216077:	00 
  216078:	eb 1a                	jmp    216094 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x104>
  21607a:	48 8d 3d 6f b5 fe ff 	lea    -0x14a91(%rip),%rdi        # 2015f0 <str.0>
  216081:	48 8d 15 78 9d 00 00 	lea    0x9d78(%rip),%rdx        # 21fe00 <memset+0x2340>
  216088:	be 1c 00 00 00       	mov    $0x1c,%esi
  21608d:	e8 9e 4f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216092:	0f 0b                	ud2    

        log::info!(
  216094:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  21609b:	00 03 00 00 00 
  2160a0:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  2160a7:	00 
  2160a8:	48 8d 35 a9 a2 fe ff 	lea    -0x15d57(%rip),%rsi        # 200358 <str.0+0x58>
  2160af:	e8 ac fc fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2160b4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2160b8:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2160bc:	a8 01                	test   $0x1,%al
  2160be:	75 0c                	jne    2160cc <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x13c>
  2160c0:	eb 00                	jmp    2160c2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x132>
  2160c2:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  2160c9:	00 
  2160ca:	eb 5a                	jmp    216126 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x196>
  2160cc:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  2160d3:	00 
  2160d4:	48 8b 3d c5 a6 00 00 	mov    0xa6c5(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2160db:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  2160e2:	00 
  2160e3:	e8 08 ca ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2160e8:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2160ef:	00 
  2160f0:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  2160f7:	00 
  2160f8:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2160ff:	00 
  216100:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  216107:	00 
  216108:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  21610f:	00 
  216110:	e8 4b fc fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  216115:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  216119:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  21611d:	24 01                	and    $0x1,%al
  21611f:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  216126:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  21612d:	01 
  21612e:	75 2e                	jne    21615e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x1ce>
  216130:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  216135:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
            mapped_vmm_addr.as_u64()
        );

        VirtualMemoryManager {
            n_tables: 4,
            l4_virtual_address: mapped_vmm_addr,
  21613a:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  216141:	00 
            l4_phy_addr: current_pt_addr,
  216142:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
        VirtualMemoryManager {
  216147:	48 c7 01 04 00 00 00 	movq   $0x4,(%rcx)
  21614e:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  216152:	48 89 51 10          	mov    %rdx,0x10(%rcx)
        }
    }
  216156:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  21615d:	c3                   	retq   
            mapped_vmm_addr.as_u64()
  21615e:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  216165:	00 
  216166:	e8 45 df ff ff       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  21616b:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  216172:	00 
        log::info!(
  216173:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  21617a:	00 
  21617b:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  216182:	00 
  216183:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  21618a:	00 
  21618b:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  216192:	00 
  216193:	48 8b 35 0e a6 00 00 	mov    0xa60e(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21619a:	e8 b1 d6 ff ff       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  21619f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2161a4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2161a9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2161ae:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2161b3:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  2161ba:	00 
  2161bb:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  2161c2:	00 
  2161c3:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  2161ca:	00 
  2161cb:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2161d2:	00 
  2161d3:	48 8d 35 3e 9c 00 00 	lea    0x9c3e(%rip),%rsi        # 21fe18 <memset+0x2358>
  2161da:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2161e0:	4c 89 c2             	mov    %r8,%rdx
  2161e3:	e8 18 ed fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2161e8:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  2161ef:	00 
  2161f0:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2161f7:	00 
  2161f8:	48 8d 15 29 9c 00 00 	lea    0x9c29(%rip),%rdx        # 21fe28 <memset+0x2368>
  2161ff:	e8 0c 26 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216204:	e9 27 ff ff ff       	jmpq   216130 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE+0x1a0>
  216209:	cc                   	int3   
  21620a:	cc                   	int3   
  21620b:	cc                   	int3   
  21620c:	cc                   	int3   
  21620d:	cc                   	int3   
  21620e:	cc                   	int3   
  21620f:	cc                   	int3   

0000000000216210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE>:

    #[inline]
    fn get_level_address(&self, next_addr: u64) -> mm::VirtualAddress {
  216210:	48 83 ec 58          	sub    $0x58,%rsp
  216214:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  216219:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21621e:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  216223:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let offset = next_addr - self.l4_phy_addr.as_u64();
  216228:	48 83 c7 10          	add    $0x10,%rdi
  21622c:	e8 3f e0 ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  216231:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216236:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21623b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216240:	48 29 c8             	sub    %rcx,%rax
  216243:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216248:	0f 92 c0             	setb   %al
  21624b:	a8 01                	test   $0x1,%al
  21624d:	75 1f                	jne    21626e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE+0x5e>
  21624f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  216254:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216259:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  21625e:	48 83 c7 08          	add    $0x8,%rdi
  216262:	e8 49 de ff ff       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  216267:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21626c:	eb 1a                	jmp    216288 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE+0x78>
        let offset = next_addr - self.l4_phy_addr.as_u64();
  21626e:	48 8d 3d db b3 fe ff 	lea    -0x14c25(%rip),%rdi        # 201650 <str.1>
  216275:	48 8d 15 e4 9b 00 00 	lea    0x9be4(%rip),%rdx        # 21fe60 <memset+0x23a0>
  21627c:	be 21 00 00 00       	mov    $0x21,%esi
  216281:	e8 aa 4d 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216286:	0f 0b                	ud2    
  216288:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21628d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  216292:	48 01 c8             	add    %rcx,%rax
  216295:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21629a:	0f 92 c0             	setb   %al
  21629d:	a8 01                	test   $0x1,%al
  21629f:	75 14                	jne    2162b5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE+0xa5>
  2162a1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2162a6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  2162ab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2162b0:	48 83 c4 58          	add    $0x58,%rsp
  2162b4:	c3                   	retq   
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  2162b5:	48 8d 3d 34 b3 fe ff 	lea    -0x14ccc(%rip),%rdi        # 2015f0 <str.0>
  2162bc:	48 8d 15 b5 9b 00 00 	lea    0x9bb5(%rip),%rdx        # 21fe78 <memset+0x23b8>
  2162c3:	be 1c 00 00 00       	mov    $0x1c,%esi
  2162c8:	e8 63 4d 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2162cd:	0f 0b                	ud2    
  2162cf:	cc                   	int3   

00000000002162d0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E>:

    fn get_p2_physical_address(
  2162d0:	48 81 ec b8 02 00 00 	sub    $0x2b8,%rsp
  2162d7:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  2162de:	00 
  2162df:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  2162e6:	00 
  2162e7:	88 c8                	mov    %cl,%al
  2162e9:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  2162f0:	88 d1                	mov    %dl,%cl
  2162f2:	88 8c 24 c7 00 00 00 	mov    %cl,0xc7(%rsp)
  2162f9:	48 89 bc 24 30 02 00 	mov    %rdi,0x230(%rsp)
  216300:	00 
  216301:	48 89 b4 24 38 02 00 	mov    %rsi,0x238(%rsp)
  216308:	00 
  216309:	80 e1 01             	and    $0x1,%cl
  21630c:	88 8c 24 46 02 00 00 	mov    %cl,0x246(%rsp)
  216313:	24 01                	and    $0x1,%al
  216315:	88 84 24 47 02 00 00 	mov    %al,0x247(%rsp)
        &self,
        address: &mm::VirtualAddress,
        create: bool,
        assert_huge_page: bool,
    ) -> Option<(mm::PhysicalAddress, bool)> {
        let l4_table: &mut PageTable = unsafe { &mut *self.l4_virtual_address.get_mut_ptr() };
  21631c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  216320:	e8 cb cd ff ff       	callq  2130f0 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17h320a5a3a5a31750eE>
  216325:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21632c:	00 
  21632d:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  216334:	00 
  216335:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  21633c:	00 
  21633d:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  216344:	00 

        let l4_index = address.get_level_index(mm::PageTableLevel::Level4);
  216345:	c6 84 24 e7 00 00 00 	movb   $0x0,0xe7(%rsp)
  21634c:	00 
  21634d:	0f b6 b4 24 e7 00 00 	movzbl 0xe7(%rsp),%esi
  216354:	00 
  216355:	e8 c6 dd ff ff       	callq  214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>
  21635a:	66 89 84 24 e4 00 00 	mov    %ax,0xe4(%rsp)
  216361:	00 
  216362:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  216369:	00 
        let l3_index = address.get_level_index(mm::PageTableLevel::Level3);
  21636a:	c6 84 24 eb 00 00 00 	movb   $0x1,0xeb(%rsp)
  216371:	01 
  216372:	0f b6 b4 24 eb 00 00 	movzbl 0xeb(%rsp),%esi
  216379:	00 
  21637a:	e8 a1 dd ff ff       	callq  214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>
  21637f:	66 89 84 24 e8 00 00 	mov    %ax,0xe8(%rsp)
  216386:	00 
  216387:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  21638e:	00 
        let l2_index = address.get_level_index(mm::PageTableLevel::Level2);
  21638f:	c6 84 24 ef 00 00 00 	movb   $0x2,0xef(%rsp)
  216396:	02 
  216397:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  21639e:	00 
  21639f:	e8 7c dd ff ff       	callq  214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>
  2163a4:	66 89 84 24 ec 00 00 	mov    %ax,0xec(%rsp)
  2163ab:	00 

        let l4_entry: &PageEntry = &l4_table.entries[l4_index.as_usize()];
  2163ac:	48 8d bc 24 e4 00 00 	lea    0xe4(%rsp),%rdi
  2163b3:	00 
  2163b4:	e8 e7 f9 ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  2163b9:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2163c0:	00 
  2163c1:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2163c8:	00 
  2163c9:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  2163cf:	0f 92 c0             	setb   %al
  2163d2:	a8 01                	test   $0x1,%al
  2163d4:	75 02                	jne    2163d8 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x108>
  2163d6:	eb 35                	jmp    21640d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x13d>
  2163d8:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2163df:	00 
  2163e0:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  2163e7:	00 
  2163e8:	48 c1 e0 03          	shl    $0x3,%rax
  2163ec:	48 01 c7             	add    %rax,%rdi
  2163ef:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  2163f6:	00 
  2163f7:	48 89 bc 24 50 02 00 	mov    %rdi,0x250(%rsp)
  2163fe:	00 
        if !l4_entry.is_mapped() {
  2163ff:	e8 8c fa ff ff       	callq  215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>
  216404:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  21640b:	eb 1b                	jmp    216428 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x158>
  21640d:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  216414:	00 
        let l4_entry: &PageEntry = &l4_table.entries[l4_index.as_usize()];
  216415:	48 8d 15 74 9a 00 00 	lea    0x9a74(%rip),%rdx        # 21fe90 <memset+0x23d0>
  21641c:	be 00 02 00 00       	mov    $0x200,%esi
  216421:	e8 5a 4c 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216426:	0f 0b                	ud2    
  216428:	8a 84 24 a7 00 00 00 	mov    0xa7(%rsp),%al
        if !l4_entry.is_mapped() {
  21642f:	34 ff                	xor    $0xff,%al
  216431:	a8 01                	test   $0x1,%al
  216433:	75 1a                	jne    21644f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x17f>
  216435:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  21643c:	00 
            return None;
        }

        let l3_table: &mut PageTable = unsafe {
            &mut *self
                .get_level_address(l4_entry.addr().as_u64())
  21643d:	e8 6e fa ff ff       	callq  215eb0 <_ZN9r3_kernel2mm6paging9PageEntry4addr17h9db0a1be69b6567aE>
  216442:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  216449:	00 
  21644a:	e9 23 01 00 00       	jmpq   216572 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x2a2>
  21644f:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
            if create {
  216456:	a8 01                	test   $0x1,%al
  216458:	75 0f                	jne    216469 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x199>
  21645a:	eb 00                	jmp    21645c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x18c>
            return None;
  21645c:	c6 84 24 d8 00 00 00 	movb   $0x2,0xd8(%rsp)
  216463:	02 
  216464:	e9 f2 00 00 00       	jmpq   21655b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x28b>
                log::error!("Creating new page tables is not supported yet.");
  216469:	48 c7 84 24 f0 00 00 	movq   $0x1,0xf0(%rsp)
  216470:	00 01 00 00 00 
  216475:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21647c:	00 
  21647d:	48 8d 35 d4 9e fe ff 	lea    -0x1612c(%rip),%rsi        # 200358 <str.0+0x58>
  216484:	e8 d7 f8 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  216489:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  216490:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  216497:	a8 01                	test   $0x1,%al
  216499:	75 0c                	jne    2164a7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x1d7>
  21649b:	eb 00                	jmp    21649d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x1cd>
  21649d:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  2164a4:	00 
  2164a5:	eb 60                	jmp    216507 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x237>
  2164a7:	c6 84 24 af 02 00 00 	movb   $0x0,0x2af(%rsp)
  2164ae:	00 
  2164af:	48 8b 3d ea a2 00 00 	mov    0xa2ea(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2164b6:	0f b6 b4 24 af 02 00 	movzbl 0x2af(%rsp),%esi
  2164bd:	00 
  2164be:	e8 2d c6 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2164c3:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  2164ca:	00 
  2164cb:	48 8b 84 24 b0 02 00 	mov    0x2b0(%rsp),%rax
  2164d2:	00 
  2164d3:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  2164da:	00 
  2164db:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  2164e2:	00 
  2164e3:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  2164ea:	00 
  2164eb:	e8 70 f8 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2164f0:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  2164f7:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  2164fe:	24 01                	and    $0x1,%al
  216500:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  216507:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  21650e:	01 
  21650f:	0f 84 47 ff ff ff    	je     21645c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x18c>
  216515:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21651c:	00 
  21651d:	48 8d 35 84 99 00 00 	lea    0x9984(%rip),%rsi        # 21fea8 <memset+0x23e8>
  216524:	ba 01 00 00 00       	mov    $0x1,%edx
  216529:	48 8d 0d 70 b1 fe ff 	lea    -0x14e90(%rip),%rcx        # 2016a0 <str.1+0x50>
  216530:	31 c0                	xor    %eax,%eax
  216532:	41 89 c0             	mov    %eax,%r8d
  216535:	e8 c6 e9 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  21653a:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  216541:	00 
  216542:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  216549:	00 
  21654a:	48 8d 15 67 99 00 00 	lea    0x9967(%rip),%rdx        # 21feb8 <memset+0x23f8>
  216551:	e8 ba 22 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216556:	e9 01 ff ff ff       	jmpq   21645c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x18c>

        Some((
            l2_entry.addr(),
            l2_entry.has_flag(PageEntryFlags::HUGE_PAGE),
        ))
    }
  21655b:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  216562:	00 
  216563:	8a 94 24 d8 00 00 00 	mov    0xd8(%rsp),%dl
  21656a:	48 81 c4 b8 02 00 00 	add    $0x2b8,%rsp
  216571:	c3                   	retq   
                .get_level_address(l4_entry.addr().as_u64())
  216572:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  216579:	00 
  21657a:	e8 f1 dc ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  21657f:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  216586:	00 
  216587:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  21658e:	00 
  21658f:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  216596:	00 
            &mut *self
  216597:	e8 74 fc ff ff       	callq  216210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE>
  21659c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2165a3:	00 
  2165a4:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2165ab:	00 
  2165ac:	e8 3f cb ff ff       	callq  2130f0 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17h320a5a3a5a31750eE>
  2165b1:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2165b6:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2165bb:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  2165c2:	00 
        let l3_entry: &PageEntry = &l3_table.entries[l3_index.as_usize()];
  2165c3:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2165ca:	00 
  2165cb:	e8 d0 f7 ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  2165d0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2165d5:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2165da:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  2165e0:	0f 92 c0             	setb   %al
  2165e3:	a8 01                	test   $0x1,%al
  2165e5:	75 02                	jne    2165e9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x319>
  2165e7:	eb 29                	jmp    216612 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x342>
  2165e9:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2165ee:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  2165f3:	48 c1 e0 03          	shl    $0x3,%rax
  2165f7:	48 01 c7             	add    %rax,%rdi
  2165fa:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  2165ff:	48 89 bc 24 60 02 00 	mov    %rdi,0x260(%rsp)
  216606:	00 
        if !l3_entry.is_mapped() {
  216607:	e8 84 f8 ff ff       	callq  215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>
  21660c:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  216610:	eb 18                	jmp    21662a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x35a>
  216612:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
        let l3_entry: &PageEntry = &l3_table.entries[l3_index.as_usize()];
  216617:	48 8d 15 d2 98 00 00 	lea    0x98d2(%rip),%rdx        # 21fef0 <memset+0x2430>
  21661e:	be 00 02 00 00       	mov    $0x200,%esi
  216623:	e8 58 4a 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216628:	0f 0b                	ud2    
  21662a:	8a 44 24 6f          	mov    0x6f(%rsp),%al
        if !l3_entry.is_mapped() {
  21662e:	34 ff                	xor    $0xff,%al
  216630:	a8 01                	test   $0x1,%al
  216632:	75 17                	jne    21664b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x37b>
  216634:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                .get_level_address(l3_entry.addr().as_u64())
  216639:	e8 72 f8 ff ff       	callq  215eb0 <_ZN9r3_kernel2mm6paging9PageEntry4addr17h9db0a1be69b6567aE>
  21663e:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  216645:	00 
  216646:	e9 00 01 00 00       	jmpq   21674b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x47b>
  21664b:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
            if create {
  216652:	a8 01                	test   $0x1,%al
  216654:	75 0f                	jne    216665 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x395>
  216656:	eb 00                	jmp    216658 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x388>
            return None;
  216658:	c6 84 24 d8 00 00 00 	movb   $0x2,0xd8(%rsp)
  21665f:	02 
  216660:	e9 f6 fe ff ff       	jmpq   21655b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x28b>
                log::error!("Creating new page tables is not supported yet.");
  216665:	48 c7 84 24 40 01 00 	movq   $0x1,0x140(%rsp)
  21666c:	00 01 00 00 00 
  216671:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  216678:	00 
  216679:	48 8d 35 d8 9c fe ff 	lea    -0x16328(%rip),%rsi        # 200358 <str.0+0x58>
  216680:	e8 db f6 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  216685:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  216689:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  21668d:	a8 01                	test   $0x1,%al
  21668f:	75 0c                	jne    21669d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x3cd>
  216691:	eb 00                	jmp    216693 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x3c3>
  216693:	c6 84 24 4f 01 00 00 	movb   $0x0,0x14f(%rsp)
  21669a:	00 
  21669b:	eb 5a                	jmp    2166f7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x427>
  21669d:	c6 84 24 9f 02 00 00 	movb   $0x0,0x29f(%rsp)
  2166a4:	00 
  2166a5:	48 8b 3d f4 a0 00 00 	mov    0xa0f4(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2166ac:	0f b6 b4 24 9f 02 00 	movzbl 0x29f(%rsp),%esi
  2166b3:	00 
  2166b4:	e8 37 c4 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2166b9:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  2166c0:	00 
  2166c1:	48 8b 84 24 a0 02 00 	mov    0x2a0(%rsp),%rax
  2166c8:	00 
  2166c9:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2166d0:	00 
  2166d1:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  2166d8:	00 
  2166d9:	48 8d b4 24 50 01 00 	lea    0x150(%rsp),%rsi
  2166e0:	00 
  2166e1:	e8 7a f6 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2166e6:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  2166ea:	8a 44 24 5e          	mov    0x5e(%rsp),%al
  2166ee:	24 01                	and    $0x1,%al
  2166f0:	88 84 24 4f 01 00 00 	mov    %al,0x14f(%rsp)
  2166f7:	f6 84 24 4f 01 00 00 	testb  $0x1,0x14f(%rsp)
  2166fe:	01 
  2166ff:	0f 84 53 ff ff ff    	je     216658 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x388>
  216705:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  21670c:	00 
  21670d:	48 8d 35 94 97 00 00 	lea    0x9794(%rip),%rsi        # 21fea8 <memset+0x23e8>
  216714:	ba 01 00 00 00       	mov    $0x1,%edx
  216719:	48 8d 0d 80 af fe ff 	lea    -0x15080(%rip),%rcx        # 2016a0 <str.1+0x50>
  216720:	31 c0                	xor    %eax,%eax
  216722:	41 89 c0             	mov    %eax,%r8d
  216725:	e8 d6 e7 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  21672a:	48 8b b4 24 40 01 00 	mov    0x140(%rsp),%rsi
  216731:	00 
  216732:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  216739:	00 
  21673a:	48 8d 15 c7 97 00 00 	lea    0x97c7(%rip),%rdx        # 21ff08 <memset+0x2448>
  216741:	e8 ca 20 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216746:	e9 0d ff ff ff       	jmpq   216658 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x388>
                .get_level_address(l3_entry.addr().as_u64())
  21674b:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  216752:	00 
  216753:	e8 18 db ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  216758:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21675d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  216762:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  216769:	00 
            &mut *self
  21676a:	e8 a1 fa ff ff       	callq  216210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE>
  21676f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  216774:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  216779:	e8 72 c9 ff ff       	callq  2130f0 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17h320a5a3a5a31750eE>
  21677e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216783:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  216788:	48 89 84 24 68 02 00 	mov    %rax,0x268(%rsp)
  21678f:	00 
        let l2_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  216790:	48 8d bc 24 ec 00 00 	lea    0xec(%rsp),%rdi
  216797:	00 
  216798:	e8 03 f6 ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  21679d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2167a2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2167a7:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  2167ad:	0f 92 c0             	setb   %al
  2167b0:	a8 01                	test   $0x1,%al
  2167b2:	75 02                	jne    2167b6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x4e6>
  2167b4:	eb 29                	jmp    2167df <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x50f>
  2167b6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2167bb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2167c0:	48 c1 e0 03          	shl    $0x3,%rax
  2167c4:	48 01 c7             	add    %rax,%rdi
  2167c7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2167cc:	48 89 bc 24 70 02 00 	mov    %rdi,0x270(%rsp)
  2167d3:	00 
        if !l2_entry.is_mapped() {
  2167d4:	e8 b7 f6 ff ff       	callq  215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>
  2167d9:	88 44 24 37          	mov    %al,0x37(%rsp)
  2167dd:	eb 18                	jmp    2167f7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x527>
  2167df:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        let l2_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  2167e4:	48 8d 15 55 97 00 00 	lea    0x9755(%rip),%rdx        # 21ff40 <memset+0x2480>
  2167eb:	be 00 02 00 00       	mov    $0x200,%esi
  2167f0:	e8 8b 48 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2167f5:	0f 0b                	ud2    
  2167f7:	8a 44 24 37          	mov    0x37(%rsp),%al
        if !l2_entry.is_mapped() {
  2167fb:	34 ff                	xor    $0xff,%al
  2167fd:	a8 01                	test   $0x1,%al
  2167ff:	75 14                	jne    216815 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x545>
  216801:	8a 84 24 c6 00 00 00 	mov    0xc6(%rsp),%al
        if assert_huge_page {
  216808:	a8 01                	test   $0x1,%al
  21680a:	0f 85 19 01 00 00    	jne    216929 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x659>
  216810:	e9 00 01 00 00       	jmpq   216915 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x645>
  216815:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
            if create {
  21681c:	a8 01                	test   $0x1,%al
  21681e:	75 0f                	jne    21682f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x55f>
  216820:	eb 00                	jmp    216822 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x552>
            return None;
  216822:	c6 84 24 d8 00 00 00 	movb   $0x2,0xd8(%rsp)
  216829:	02 
  21682a:	e9 2c fd ff ff       	jmpq   21655b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x28b>
                log::error!("Creating new page tables is not supported yet.");
  21682f:	48 c7 84 24 90 01 00 	movq   $0x1,0x190(%rsp)
  216836:	00 01 00 00 00 
  21683b:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  216842:	00 
  216843:	48 8d 35 0e 9b fe ff 	lea    -0x164f2(%rip),%rsi        # 200358 <str.0+0x58>
  21684a:	e8 11 f5 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21684f:	88 44 24 27          	mov    %al,0x27(%rsp)
  216853:	8a 44 24 27          	mov    0x27(%rsp),%al
  216857:	a8 01                	test   $0x1,%al
  216859:	75 0c                	jne    216867 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x597>
  21685b:	eb 00                	jmp    21685d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x58d>
  21685d:	c6 84 24 9f 01 00 00 	movb   $0x0,0x19f(%rsp)
  216864:	00 
  216865:	eb 5a                	jmp    2168c1 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x5f1>
  216867:	c6 84 24 8f 02 00 00 	movb   $0x0,0x28f(%rsp)
  21686e:	00 
  21686f:	48 8b 3d 2a 9f 00 00 	mov    0x9f2a(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216876:	0f b6 b4 24 8f 02 00 	movzbl 0x28f(%rsp),%esi
  21687d:	00 
  21687e:	e8 6d c2 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  216883:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
  21688a:	00 
  21688b:	48 8b 84 24 90 02 00 	mov    0x290(%rsp),%rax
  216892:	00 
  216893:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  21689a:	00 
  21689b:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  2168a2:	00 
  2168a3:	48 8d b4 24 a0 01 00 	lea    0x1a0(%rsp),%rsi
  2168aa:	00 
  2168ab:	e8 b0 f4 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2168b0:	88 44 24 26          	mov    %al,0x26(%rsp)
  2168b4:	8a 44 24 26          	mov    0x26(%rsp),%al
  2168b8:	24 01                	and    $0x1,%al
  2168ba:	88 84 24 9f 01 00 00 	mov    %al,0x19f(%rsp)
  2168c1:	f6 84 24 9f 01 00 00 	testb  $0x1,0x19f(%rsp)
  2168c8:	01 
  2168c9:	0f 84 53 ff ff ff    	je     216822 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x552>
  2168cf:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  2168d6:	00 
  2168d7:	48 8d 35 ca 95 00 00 	lea    0x95ca(%rip),%rsi        # 21fea8 <memset+0x23e8>
  2168de:	ba 01 00 00 00       	mov    $0x1,%edx
  2168e3:	48 8d 0d b6 ad fe ff 	lea    -0x1524a(%rip),%rcx        # 2016a0 <str.1+0x50>
  2168ea:	31 c0                	xor    %eax,%eax
  2168ec:	41 89 c0             	mov    %eax,%r8d
  2168ef:	e8 0c e6 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2168f4:	48 8b b4 24 90 01 00 	mov    0x190(%rsp),%rsi
  2168fb:	00 
  2168fc:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  216903:	00 
  216904:	48 8d 15 4d 96 00 00 	lea    0x964d(%rip),%rdx        # 21ff58 <memset+0x2498>
  21690b:	e8 00 1f 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216910:	e9 0d ff ff ff       	jmpq   216822 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x552>
  216915:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            l2_entry.addr(),
  21691a:	e8 91 f5 ff ff       	callq  215eb0 <_ZN9r3_kernel2mm6paging9PageEntry4addr17h9db0a1be69b6567aE>
  21691f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216924:	e9 a1 00 00 00       	jmpq   2169ca <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x6fa>
  216929:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            assert_eq!(l2_entry.has_flag(PageEntryFlags::HUGE_PAGE), true);
  21692e:	be 80 00 00 00       	mov    $0x80,%esi
  216933:	e8 08 f6 ff ff       	callq  215f40 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17h0d5613b63eec79e5E>
  216938:	24 01                	and    $0x1,%al
  21693a:	88 84 24 ee 01 00 00 	mov    %al,0x1ee(%rsp)
  216941:	48 8d 84 24 ee 01 00 	lea    0x1ee(%rsp),%rax
  216948:	00 
  216949:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  216950:	00 
  216951:	48 8d 05 8d ac fe ff 	lea    -0x15373(%rip),%rax        # 2015e5 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x1e>
  216958:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  21695f:	00 
  216960:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  216967:	00 
  216968:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21696d:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  216974:	00 
  216975:	48 8b 8c 24 e0 01 00 	mov    0x1e0(%rsp),%rcx
  21697c:	00 
  21697d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  216982:	48 89 8c 24 80 02 00 	mov    %rcx,0x280(%rsp)
  216989:	00 
  21698a:	8a 00                	mov    (%rax),%al
  21698c:	34 ff                	xor    $0xff,%al
  21698e:	a8 01                	test   $0x1,%al
  216990:	75 02                	jne    216994 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x6c4>
  216992:	eb 81                	jmp    216915 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x645>
  216994:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  216999:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21699e:	c6 84 24 ef 01 00 00 	movb   $0x0,0x1ef(%rsp)
  2169a5:	00 
  2169a6:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  2169ad:	00 00 00 00 00 
  2169b2:	4c 8d 05 d7 95 00 00 	lea    0x95d7(%rip),%r8        # 21ff90 <memset+0x24d0>
  2169b9:	31 ff                	xor    %edi,%edi
  2169bb:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  2169c2:	00 
  2169c3:	e8 88 39 ff ff       	callq  20a350 <_ZN4core9panicking13assert_failed17h3a419d42b0d29573E>
  2169c8:	0f 0b                	ud2    
  2169ca:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            l2_entry.has_flag(PageEntryFlags::HUGE_PAGE),
  2169cf:	be 80 00 00 00       	mov    $0x80,%esi
  2169d4:	e8 67 f5 ff ff       	callq  215f40 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17h0d5613b63eec79e5E>
  2169d9:	88 44 24 07          	mov    %al,0x7(%rsp)
  2169dd:	8a 44 24 07          	mov    0x7(%rsp),%al
  2169e1:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        Some((
  2169e6:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  2169ed:	00 
  2169ee:	24 01                	and    $0x1,%al
  2169f0:	88 84 24 28 02 00 00 	mov    %al,0x228(%rsp)
  2169f7:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  2169fe:	00 
  2169ff:	8a 84 24 28 02 00 00 	mov    0x228(%rsp),%al
  216a06:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  216a0d:	00 
  216a0e:	24 01                	and    $0x1,%al
  216a10:	88 84 24 d8 00 00 00 	mov    %al,0xd8(%rsp)
    }
  216a17:	e9 3f fb ff ff       	jmpq   21655b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E+0x28b>
  216a1c:	cc                   	int3   
  216a1d:	cc                   	int3   
  216a1e:	cc                   	int3   
  216a1f:	cc                   	int3   

0000000000216a20 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E>:

    pub fn translate_to_frame(&self, address: &mm::VirtualAddress) -> Option<Frame> {
  216a20:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  216a27:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  216a2c:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  216a31:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  216a38:	00 
  216a39:	48 89 b4 24 c8 00 00 	mov    %rsi,0xc8(%rsp)
  216a40:	00 
  216a41:	31 c9                	xor    %ecx,%ecx
        let resolved_opt = self.get_p2_physical_address(address, false, false);
  216a43:	89 ca                	mov    %ecx,%edx
  216a45:	e8 86 f8 ff ff       	callq  2162d0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E>
  216a4a:	88 54 24 78          	mov    %dl,0x78(%rsp)
  216a4e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)

        if resolved_opt.is_none() {
  216a53:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  216a58:	e8 43 ef fe ff       	callq  2059a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h3bd5b0f183046273E>
  216a5d:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  216a61:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  216a65:	a8 01                	test   $0x1,%al
  216a67:	75 23                	jne    216a8c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x6c>
  216a69:	eb 00                	jmp    216a6b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x4b>
            return None;
        }

        let (l2_address, is_huge_page) = resolved_opt.unwrap();
  216a6b:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  216a70:	48 8d 15 31 95 00 00 	lea    0x9531(%rip),%rdx        # 21ffa8 <memset+0x24e8>
  216a77:	0f b6 74 24 78       	movzbl 0x78(%rsp),%esi
  216a7c:	e8 8f ee fe ff       	callq  205910 <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE>
  216a81:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216a86:	88 54 24 4e          	mov    %dl,0x4e(%rsp)
  216a8a:	eb 1b                	jmp    216aa7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x87>
            return None;
  216a8c:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  216a93:	00 00 
        if !l1_entry.is_mapped() {
            return None;
        }

        Frame::from_aligned_address(l1_entry.addr()).ok()
    }
  216a95:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  216a9a:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  216a9f:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  216aa6:	c3                   	retq   
  216aa7:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  216aab:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
        let (l2_address, is_huge_page) = resolved_opt.unwrap();
  216ab0:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  216ab7:	00 
  216ab8:	88 c1                	mov    %al,%cl
  216aba:	80 e1 01             	and    $0x1,%cl
  216abd:	88 8c 24 d7 00 00 00 	mov    %cl,0xd7(%rsp)
        if is_huge_page {
  216ac4:	a8 01                	test   $0x1,%al
  216ac6:	75 24                	jne    216aec <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0xcc>
  216ac8:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
        let l1_index = address.get_level_index(mm::PageTableLevel::Level1);
  216acd:	c6 84 24 a7 00 00 00 	movb   $0x3,0xa7(%rsp)
  216ad4:	03 
  216ad5:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  216adc:	00 
  216add:	e8 3e d6 ff ff       	callq  214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>
  216ae2:	66 89 84 24 a4 00 00 	mov    %ax,0xa4(%rsp)
  216ae9:	00 
  216aea:	eb 51                	jmp    216b3d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x11d>
            return Frame::from_aligned_address(l2_address).ok();
  216aec:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  216af3:	00 
  216af4:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  216afb:	00 
  216afc:	e8 2f cf ff ff       	callq  213a30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17haa1ec7cdbf6929e5E>
  216b01:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  216b08:	00 
  216b09:	e8 a2 b8 ff ff       	callq  2123b0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E>
  216b0e:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  216b15:	00 
  216b16:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  216b1d:	00 
  216b1e:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  216b25:	00 
  216b26:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  216b2b:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  216b32:	00 
  216b33:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  216b38:	e9 58 ff ff ff       	jmpq   216a95 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x75>
            unsafe { &*self.get_level_address(l2_address.as_u64()).get_ptr() };
  216b3d:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  216b44:	00 
  216b45:	e8 26 d7 ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  216b4a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216b4f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  216b54:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  216b59:	e8 b2 f6 ff ff       	callq  216210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE>
  216b5e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216b63:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  216b68:	e8 23 c5 ff ff       	callq  213090 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hd20e8194d1bcd248E>
  216b6d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  216b72:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  216b77:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  216b7e:	00 
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  216b7f:	48 8d bc 24 a4 00 00 	lea    0xa4(%rsp),%rdi
  216b86:	00 
  216b87:	e8 14 f2 ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  216b8c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  216b91:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216b96:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  216b9c:	0f 92 c0             	setb   %al
  216b9f:	a8 01                	test   $0x1,%al
  216ba1:	75 02                	jne    216ba5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x185>
  216ba3:	eb 29                	jmp    216bce <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x1ae>
  216ba5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216baa:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  216baf:	48 c1 e0 03          	shl    $0x3,%rax
  216bb3:	48 01 c7             	add    %rax,%rdi
  216bb6:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  216bbb:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  216bc2:	00 
        if !l1_entry.is_mapped() {
  216bc3:	e8 c8 f2 ff ff       	callq  215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>
  216bc8:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  216bcc:	eb 18                	jmp    216be6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x1c6>
  216bce:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  216bd3:	48 8d 15 e6 93 00 00 	lea    0x93e6(%rip),%rdx        # 21ffc0 <memset+0x2500>
  216bda:	be 00 02 00 00       	mov    $0x200,%esi
  216bdf:	e8 9c 44 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216be4:	0f 0b                	ud2    
  216be6:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        if !l1_entry.is_mapped() {
  216bea:	34 ff                	xor    $0xff,%al
  216bec:	a8 01                	test   $0x1,%al
  216bee:	75 11                	jne    216c01 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x1e1>
  216bf0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  216bf5:	e8 b6 f2 ff ff       	callq  215eb0 <_ZN9r3_kernel2mm6paging9PageEntry4addr17h9db0a1be69b6567aE>
  216bfa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216bff:	eb 0e                	jmp    216c0f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x1ef>
            return None;
  216c01:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  216c08:	00 00 
  216c0a:	e9 86 fe ff ff       	jmpq   216a95 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x75>
  216c0f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  216c14:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  216c1b:	00 
  216c1c:	e8 0f ce ff ff       	callq  213a30 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17haa1ec7cdbf6929e5E>
  216c21:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  216c28:	00 
  216c29:	e8 82 b7 ff ff       	callq  2123b0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h816479d8015347c9E>
  216c2e:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  216c35:	00 
  216c36:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  216c3d:	00 
  216c3e:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  216c45:	00 
  216c46:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  216c4b:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  216c52:	00 
  216c53:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  216c58:	e9 38 fe ff ff       	jmpq   216a95 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E+0x75>
  216c5d:	cc                   	int3   
  216c5e:	cc                   	int3   
  216c5f:	cc                   	int3   

0000000000216c60 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E>:

    pub fn translate(&self, addr: mm::VirtualAddress) -> Option<mm::PhysicalAddress> {
  216c60:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  216c67:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  216c6c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  216c71:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
        let translated_frame = self.translate_to_frame(&addr);
  216c76:	e8 a5 fd ff ff       	callq  216a20 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h5c11d5b95826f228E>
  216c7b:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  216c80:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  216c85:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  216c8a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216c8f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  216c94:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if translated_frame.is_none() {
  216c99:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  216c9e:	e8 8d ed fe ff       	callq  205a30 <_ZN4core6option15Option$LT$T$GT$7is_none17h8f45e6ccf9255729E>
  216ca3:	88 44 24 27          	mov    %al,0x27(%rsp)
  216ca7:	8a 44 24 27          	mov    0x27(%rsp),%al
  216cab:	a8 01                	test   $0x1,%al
  216cad:	75 43                	jne    216cf2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0x92>
  216caf:	eb 00                	jmp    216cb1 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0x51>
            return None;
        }

        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  216cb1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  216cb6:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  216cbb:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  216cc0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  216cc5:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  216cca:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  216ccf:	48 8d 15 02 93 00 00 	lea    0x9302(%rip),%rdx        # 21ffd8 <memset+0x2518>
  216cd6:	e8 85 ea fe ff       	callq  205760 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E>
  216cdb:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  216ce2:	00 
  216ce3:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  216cea:	00 
  216ceb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  216cf0:	eb 1b                	jmp    216d0d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0xad>
            return None;
  216cf2:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  216cf9:	00 00 
        let phy_offset = addr.get_page_offset() as u64;

        Some(mm::PhysicalAddress::from_u64(
            phy_u64_frame_addr + phy_offset,
        ))
    }
  216cfb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  216d00:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  216d05:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  216d0c:	c3                   	retq   
        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  216d0d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  216d12:	e8 19 ce ff ff       	callq  213b30 <_ZN9r3_kernel2mm3phy5Frame6as_u6417hdea98847c689585fE>
  216d17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216d1c:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  216d23:	00 
        let phy_offset = addr.get_page_offset() as u64;
  216d24:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  216d29:	e8 32 d5 ff ff       	callq  214260 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17h554ec29b4eb0bd45E>
  216d2e:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  216d33:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216d38:	66 8b 4c 24 16       	mov    0x16(%rsp),%cx
  216d3d:	0f b7 c9             	movzwl %cx,%ecx
  216d40:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  216d47:	00 
            phy_u64_frame_addr + phy_offset,
  216d48:	48 01 c8             	add    %rcx,%rax
  216d4b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216d50:	0f 92 c0             	setb   %al
  216d53:	a8 01                	test   $0x1,%al
  216d55:	75 10                	jne    216d67 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0x107>
  216d57:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Some(mm::PhysicalAddress::from_u64(
  216d5c:	e8 1f d5 ff ff       	callq  214280 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417he28f21af7fe84353E>
  216d61:	48 89 04 24          	mov    %rax,(%rsp)
  216d65:	eb 1a                	jmp    216d81 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0x121>
            phy_u64_frame_addr + phy_offset,
  216d67:	48 8d 3d 82 a8 fe ff 	lea    -0x1577e(%rip),%rdi        # 2015f0 <str.0>
  216d6e:	48 8d 15 7b 92 00 00 	lea    0x927b(%rip),%rdx        # 21fff0 <memset+0x2530>
  216d75:	be 1c 00 00 00       	mov    $0x1c,%esi
  216d7a:	e8 b1 42 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216d7f:	0f 0b                	ud2    
  216d81:	48 8b 04 24          	mov    (%rsp),%rax
        Some(mm::PhysicalAddress::from_u64(
  216d85:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216d8a:	48 c7 44 24 30 01 00 	movq   $0x1,0x30(%rsp)
  216d91:	00 00 
    }
  216d93:	e9 63 ff ff ff       	jmpq   216cfb <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h51e2ed487a5d4750E+0x9b>
  216d98:	cc                   	int3   
  216d99:	cc                   	int3   
  216d9a:	cc                   	int3   
  216d9b:	cc                   	int3   
  216d9c:	cc                   	int3   
  216d9d:	cc                   	int3   
  216d9e:	cc                   	int3   
  216d9f:	cc                   	int3   

0000000000216da0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE>:

    pub fn map_page(
  216da0:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  216da7:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  216dac:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  216db1:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  216db8:	00 
  216db9:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  216dc0:	00 
  216dc1:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  216dc6:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  216dcd:	00 
  216dce:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  216dd5:	00 
  216dd6:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  216ddd:	00 
  216dde:	48 89 bc 24 20 01 00 	mov    %rdi,0x120(%rsp)
  216de5:	00 
  216de6:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  216ded:	00 
        &self,
        page: Page,
        frame: Frame,
        flags: PageEntryFlags,
    ) -> Result<(), PagingError> {
        let resolved_opt = self.get_p2_physical_address(&page.addr(), true, false);
  216dee:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  216df3:	e8 08 f0 ff ff       	callq  215e00 <_ZN9r3_kernel2mm6paging4Page4addr17hd25cfb4196598732E>
  216df8:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  216dff:	00 
  216e00:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  216e05:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  216e0c:	00 
  216e0d:	ba 01 00 00 00       	mov    $0x1,%edx
  216e12:	31 c9                	xor    %ecx,%ecx
  216e14:	e8 b7 f4 ff ff       	callq  2162d0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager23get_p2_physical_address17he2ebeb5a23319095E>
  216e19:	88 94 24 b0 00 00 00 	mov    %dl,0xb0(%rsp)
  216e20:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  216e27:	00 

        if resolved_opt.is_none() {
  216e28:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  216e2f:	00 
  216e30:	e8 6b eb fe ff       	callq  2059a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h3bd5b0f183046273E>
  216e35:	88 44 24 67          	mov    %al,0x67(%rsp)
  216e39:	8a 44 24 67          	mov    0x67(%rsp),%al
  216e3d:	a8 01                	test   $0x1,%al
  216e3f:	75 29                	jne    216e6a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0xca>
  216e41:	eb 00                	jmp    216e43 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0xa3>
            return Err(PagingError::MappingError(page.as_u64()));
        }

        let (l2_address, is_huge_page) = resolved_opt.unwrap();
  216e43:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  216e4a:	00 
  216e4b:	48 8d 15 b6 91 00 00 	lea    0x91b6(%rip),%rdx        # 220008 <memset+0x2548>
  216e52:	0f b6 b4 24 b0 00 00 	movzbl 0xb0(%rsp),%esi
  216e59:	00 
  216e5a:	e8 b1 ea fe ff       	callq  205910 <_ZN4core6option15Option$LT$T$GT$6unwrap17hfa4e5b70443304dbE>
  216e5f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  216e64:	88 54 24 66          	mov    %dl,0x66(%rsp)
  216e68:	eb 5e                	jmp    216ec8 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x128>
            return Err(PagingError::MappingError(page.as_u64()));
  216e6a:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  216e6f:	e8 9c ef ff ff       	callq  215e10 <_ZN9r3_kernel2mm6paging4Page6as_u6417hd4c7272c07787f6fE>
  216e74:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  216e79:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  216e7e:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  216e85:	00 
  216e86:	66 c7 84 24 c0 00 00 	movw   $0x4,0xc0(%rsp)
  216e8d:	00 04 00 
  216e90:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  216e97:	00 
  216e98:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  216e9f:	00 
  216ea0:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  216ea7:	00 
  216ea8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  216eaf:	00 
        // not mapped, create a new page:
        let mut page_entry = PageEntry::empty();
        page_entry.set_phy_frame(frame, flags);
        l1_table.entries[l1_index.as_usize()] = page_entry;
        Ok(())
    }
  216eb0:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  216eb7:	00 
  216eb8:	48 8b 94 24 a0 00 00 	mov    0xa0(%rsp),%rdx
  216ebf:	00 
  216ec0:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  216ec7:	c3                   	retq   
  216ec8:	8a 44 24 66          	mov    0x66(%rsp),%al
  216ecc:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
        let (l2_address, is_huge_page) = resolved_opt.unwrap();
  216ed1:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  216ed8:	00 
  216ed9:	88 c1                	mov    %al,%cl
  216edb:	80 e1 01             	and    $0x1,%cl
  216ede:	88 8c 24 37 01 00 00 	mov    %cl,0x137(%rsp)
        if is_huge_page {
  216ee5:	a8 01                	test   $0x1,%al
  216ee7:	75 14                	jne    216efd <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x15d>
            unsafe { &mut *self.get_level_address(l2_address.as_u64()).get_mut_ptr() };
  216ee9:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  216ef0:	00 
  216ef1:	e8 7a d3 ff ff       	callq  214270 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h2776b09b2e453e90E>
  216ef6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  216efb:	eb 4b                	jmp    216f48 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x1a8>
            return Err(PagingError::IsAlreadyMapped(page.as_u64()));
  216efd:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  216f02:	e8 09 ef ff ff       	callq  215e10 <_ZN9r3_kernel2mm6paging4Page6as_u6417hd4c7272c07787f6fE>
  216f07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216f0c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  216f11:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  216f18:	00 
  216f19:	66 c7 84 24 d8 00 00 	movw   $0x5,0xd8(%rsp)
  216f20:	00 05 00 
  216f23:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  216f2a:	00 
  216f2b:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  216f32:	00 
  216f33:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  216f3a:	00 
  216f3b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  216f42:	00 
  216f43:	e9 68 ff ff ff       	jmpq   216eb0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x110>
  216f48:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  216f4d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
            unsafe { &mut *self.get_level_address(l2_address.as_u64()).get_mut_ptr() };
  216f52:	e8 b9 f2 ff ff       	callq  216210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17haebc90c778de7f2aE>
  216f57:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216f5c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  216f61:	e8 8a c1 ff ff       	callq  2130f0 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17h320a5a3a5a31750eE>
  216f66:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216f6b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  216f70:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  216f77:	00 
        let l1_index = page.addr().get_level_index(mm::PageTableLevel::Level1);
  216f78:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  216f7d:	e8 7e ee ff ff       	callq  215e00 <_ZN9r3_kernel2mm6paging4Page4addr17hd25cfb4196598732E>
  216f82:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  216f89:	00 
  216f8a:	c6 84 24 ff 00 00 00 	movb   $0x3,0xff(%rsp)
  216f91:	03 
  216f92:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  216f99:	00 
  216f9a:	0f b6 b4 24 ff 00 00 	movzbl 0xff(%rsp),%esi
  216fa1:	00 
  216fa2:	e8 79 d1 ff ff       	callq  214120 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hab44260b3110787eE>
  216fa7:	66 89 84 24 ee 00 00 	mov    %ax,0xee(%rsp)
  216fae:	00 
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  216faf:	48 8d bc 24 ee 00 00 	lea    0xee(%rsp),%rdi
  216fb6:	00 
  216fb7:	e8 e4 ed ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  216fbc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  216fc1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  216fc6:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  216fcc:	0f 92 c0             	setb   %al
  216fcf:	a8 01                	test   $0x1,%al
  216fd1:	75 02                	jne    216fd5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x235>
  216fd3:	eb 24                	jmp    216ff9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x259>
  216fd5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  216fda:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  216fdf:	48 c1 e0 03          	shl    $0x3,%rax
  216fe3:	48 01 c7             	add    %rax,%rdi
  216fe6:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  216fed:	00 
        if l1_entry.is_mapped() {
  216fee:	e8 9d ee ff ff       	callq  215e90 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17hc6c4114be9e51ee1E>
  216ff3:	88 44 24 27          	mov    %al,0x27(%rsp)
  216ff7:	eb 18                	jmp    217011 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x271>
  216ff9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  216ffe:	48 8d 15 1b 90 00 00 	lea    0x901b(%rip),%rdx        # 220020 <memset+0x2560>
  217005:	be 00 02 00 00       	mov    $0x200,%esi
  21700a:	e8 71 40 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21700f:	0f 0b                	ud2    
  217011:	8a 44 24 27          	mov    0x27(%rsp),%al
        if l1_entry.is_mapped() {
  217015:	a8 01                	test   $0x1,%al
  217017:	75 11                	jne    21702a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x28a>
  217019:	eb 00                	jmp    21701b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x27b>
        let mut page_entry = PageEntry::empty();
  21701b:	e8 60 ee ff ff       	callq  215e80 <_ZN9r3_kernel2mm6paging9PageEntry5empty17h4e1e4daadc859fe2E>
  217020:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  217027:	00 
  217028:	eb 4b                	jmp    217075 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x2d5>
            return Err(PagingError::IsAlreadyMapped(page.as_u64()));
  21702a:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  21702f:	e8 dc ed ff ff       	callq  215e10 <_ZN9r3_kernel2mm6paging4Page6as_u6417hd4c7272c07787f6fE>
  217034:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217039:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21703e:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  217045:	00 
  217046:	66 c7 84 24 00 01 00 	movw   $0x5,0x100(%rsp)
  21704d:	00 05 00 
  217050:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  217057:	00 
  217058:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21705f:	00 
  217060:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  217067:	00 
  217068:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21706f:	00 
  217070:	e9 3b fe ff ff       	jmpq   216eb0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x110>
  217075:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
        page_entry.set_phy_frame(frame, flags);
  21707a:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  217081:	00 
  217082:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  217089:	00 
  21708a:	48 8b b4 24 18 01 00 	mov    0x118(%rsp),%rsi
  217091:	00 
  217092:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  217099:	00 
  21709a:	e8 41 ee ff ff       	callq  215ee0 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17hf08e901483839714E>
        l1_table.entries[l1_index.as_usize()] = page_entry;
  21709f:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2170a6:	00 
  2170a7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2170ac:	48 8d bc 24 ee 00 00 	lea    0xee(%rsp),%rdi
  2170b3:	00 
  2170b4:	e8 e7 ec ff ff       	callq  215da0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17hdde454a3918311afE>
  2170b9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2170be:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2170c3:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  2170c9:	0f 92 c0             	setb   %al
  2170cc:	a8 01                	test   $0x1,%al
  2170ce:	75 02                	jne    2170d2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x332>
  2170d0:	eb 22                	jmp    2170f4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x354>
  2170d2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2170d7:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2170dc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2170e1:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        Ok(())
  2170e5:	66 c7 84 24 98 00 00 	movw   $0x7,0x98(%rsp)
  2170ec:	00 07 00 
    }
  2170ef:	e9 bc fd ff ff       	jmpq   216eb0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE+0x110>
  2170f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        l1_table.entries[l1_index.as_usize()] = page_entry;
  2170f9:	48 8d 15 38 8f 00 00 	lea    0x8f38(%rip),%rdx        # 220038 <memset+0x2578>
  217100:	be 00 02 00 00       	mov    $0x200,%esi
  217105:	e8 76 3f 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21710a:	0f 0b                	ud2    
  21710c:	cc                   	int3   
  21710d:	cc                   	int3   
  21710e:	cc                   	int3   
  21710f:	cc                   	int3   

0000000000217110 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h4528e93b49ff3f14E>:

        Some(current_page)
    }
}

pub fn init_kernel_vmm() -> VirtualMemoryManager {
  217110:	48 83 ec 38          	sub    $0x38,%rsp
  217114:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217119:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let phy_offset = BootProtocol::get_phy_offset();
  21711e:	e8 1d fa fe ff       	callq  206b40 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17hefc2ca2ea50ece8cE>
  217123:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  217128:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if phy_offset.is_none() {
  21712d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  217132:	e8 99 e8 fe ff       	callq  2059d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h69736bcb03f1dbd1E>
  217137:	88 44 24 17          	mov    %al,0x17(%rsp)
  21713b:	8a 44 24 17          	mov    0x17(%rsp),%al
  21713f:	a8 01                	test   $0x1,%al
  217141:	75 1f                	jne    217162 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h4528e93b49ff3f14E+0x52>
  217143:	eb 00                	jmp    217145 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h4528e93b49ff3f14E+0x35>
        panic!("Boot protocol did not provide physical memory offset.");
    }

    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  217145:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21714a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  21714f:	48 8d 15 12 8f 00 00 	lea    0x8f12(%rip),%rdx        # 220068 <memset+0x25a8>
  217156:	e8 b5 e5 fe ff       	callq  205710 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>
  21715b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217160:	eb 1a                	jmp    21717c <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h4528e93b49ff3f14E+0x6c>
        panic!("Boot protocol did not provide physical memory offset.");
  217162:	48 8d 3d 37 a5 fe ff 	lea    -0x15ac9(%rip),%rdi        # 2016a0 <str.1+0x50>
  217169:	48 8d 15 e0 8e 00 00 	lea    0x8ee0(%rip),%rdx        # 220050 <memset+0x2590>
  217170:	be 35 00 00 00       	mov    $0x35,%esi
  217175:	e8 b6 3e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21717a:	0f 0b                	ud2    
  21717c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  217181:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  217186:	e8 05 ee ff ff       	callq  215f90 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h8b6f8f76532a5ddbE>
  21718b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  217190:	48 83 c4 38          	add    $0x38,%rsp
  217194:	c3                   	retq   
  217195:	cc                   	int3   
  217196:	cc                   	int3   
  217197:	cc                   	int3   
  217198:	cc                   	int3   
  217199:	cc                   	int3   
  21719a:	cc                   	int3   
  21719b:	cc                   	int3   
  21719c:	cc                   	int3   
  21719d:	cc                   	int3   
  21719e:	cc                   	int3   
  21719f:	cc                   	int3   

00000000002171a0 <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E>:

lazy_static! {
    pub static ref KERNEL_PAGING: VirtualMemoryManager = init_kernel_vmm();
}

pub fn setup_paging() {
  2171a0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    // this function will make static lazy function to initialize
    log::info!(
  2171a7:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  2171ae:	00 00 
  2171b0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2171b5:	48 8d 35 9c 91 fe ff 	lea    -0x16e64(%rip),%rsi        # 200358 <str.0+0x58>
  2171bc:	e8 9f eb fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2171c1:	88 44 24 27          	mov    %al,0x27(%rsp)
  2171c5:	8a 44 24 27          	mov    0x27(%rsp),%al
  2171c9:	a8 01                	test   $0x1,%al
  2171cb:	75 09                	jne    2171d6 <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E+0x36>
  2171cd:	eb 00                	jmp    2171cf <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E+0x2f>
  2171cf:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  2171d4:	eb 4e                	jmp    217224 <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E+0x84>
  2171d6:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  2171dd:	00 
  2171de:	48 8b 3d bb 95 00 00 	mov    0x95bb(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2171e5:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  2171ec:	00 
  2171ed:	e8 fe b8 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2171f2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2171f9:	00 
  2171fa:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  217201:	00 
  217202:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  217207:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21720c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  217211:	e8 4a eb fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  217216:	88 44 24 26          	mov    %al,0x26(%rsp)
  21721a:	8a 44 24 26          	mov    0x26(%rsp),%al
  21721e:	24 01                	and    $0x1,%al
  217220:	88 44 24 37          	mov    %al,0x37(%rsp)
  217224:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  217229:	75 08                	jne    217233 <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E+0x93>
        "Kernel paging is initialized, address at: 0x{:x}",
        KERNEL_PAGING.l4_virtual_address.as_u64()
    );
}
  21722b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  217232:	c3                   	retq   
        KERNEL_PAGING.l4_virtual_address.as_u64()
  217233:	48 8d 3d 04 a5 fe ff 	lea    -0x15afc(%rip),%rdi        # 20173e <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E>
  21723a:	e8 31 08 00 00       	callq  217a70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17h75e5c784259a8396E>
  21723f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217244:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  217249:	48 83 c7 08          	add    $0x8,%rdi
  21724d:	e8 5e ce ff ff       	callq  2140b0 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417haccaa8c945be6062E>
  217252:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  217259:	00 
    log::info!(
  21725a:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  217261:	00 
  217262:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  217269:	00 
  21726a:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  217271:	00 
  217272:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  217279:	00 
  21727a:	48 8b 35 27 95 00 00 	mov    0x9527(%rip),%rsi        # 2207a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  217281:	e8 ca c5 ff ff       	callq  213850 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  217286:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21728b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  217290:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217295:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21729a:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21729f:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2172a4:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  2172a9:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2172ae:	48 8d 35 cb 8d 00 00 	lea    0x8dcb(%rip),%rsi        # 220080 <memset+0x25c0>
  2172b5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2172bb:	4c 89 c2             	mov    %r8,%rdx
  2172be:	e8 3d dc fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2172c3:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  2172c8:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2172cd:	48 8d 15 bc 8d 00 00 	lea    0x8dbc(%rip),%rdx        # 220090 <memset+0x25d0>
  2172d4:	e8 37 15 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2172d9:	e9 4d ff ff ff       	jmpq   21722b <_ZN9r3_kernel2mm6paging12setup_paging17hf834427f71528846E+0x8b>
  2172de:	cc                   	int3   
  2172df:	cc                   	int3   

00000000002172e0 <_ZN9r3_kernel2mm6paging16get_kernel_table17h688bc53f41dd661cE>:

pub fn get_kernel_table() -> &'static VirtualMemoryManager {
  2172e0:	50                   	push   %rax
    &KERNEL_PAGING
  2172e1:	48 8d 3d 56 a4 fe ff 	lea    -0x15baa(%rip),%rdi        # 20173e <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E>
  2172e8:	e8 83 07 00 00       	callq  217a70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17h75e5c784259a8396E>
  2172ed:	48 89 04 24          	mov    %rax,(%rsp)
  2172f1:	48 8b 04 24          	mov    (%rsp),%rax
}
  2172f5:	59                   	pop    %rcx
  2172f6:	c3                   	retq   
  2172f7:	cc                   	int3   
  2172f8:	cc                   	int3   
  2172f9:	cc                   	int3   
  2172fa:	cc                   	int3   
  2172fb:	cc                   	int3   
  2172fc:	cc                   	int3   
  2172fd:	cc                   	int3   
  2172fe:	cc                   	int3   
  2172ff:	cc                   	int3   

0000000000217300 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E>:
impl KernelVirtualMemoryManager {
    pub fn pt() -> &'static VirtualMemoryManager {
        &KERNEL_PAGING
    }

    pub fn alloc_page(
  217300:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
  217307:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21730c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  217311:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  217316:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21731b:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  217322:	00 
  217323:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  21732a:	00 
        address: mm::VirtualAddress,
        flags: PageEntryFlags,
    ) -> Result<Page, PagingError> {
        // allocate a physical frame
        let frame = PhysicalMemoryManager::alloc();
  21732b:	e8 e0 cb ff ff       	callq  213f10 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17h5b7ebdec4dfeeac6E>
  217330:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  217337:	00 
  217338:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  21733f:	00 
  217340:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  217347:	00 
  217348:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21734d:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  217354:	00 
  217355:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if frame.is_none() {
  21735a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  21735f:	e8 cc e6 fe ff       	callq  205a30 <_ZN4core6option15Option$LT$T$GT$7is_none17h8f45e6ccf9255729E>
  217364:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  217368:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21736c:	a8 01                	test   $0x1,%al
  21736e:	75 15                	jne    217385 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x85>
  217370:	eb 00                	jmp    217372 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x72>
        }

        // log::debug!("Physical address: 0x{:?}", frame);

        // allocate the page
        let result = KERNEL_PAGING.map_page(Page::from_address(address), frame.unwrap(), flags);
  217372:	48 8d 3d c5 a3 fe ff 	lea    -0x15c3b(%rip),%rdi        # 20173e <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E>
  217379:	e8 f2 06 00 00       	callq  217a70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17h75e5c784259a8396E>
  21737e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217383:	eb 32                	jmp    2173b7 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0xb7>
  217385:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            return Err(PagingError::OOM);
  21738a:	66 c7 44 24 50 00 00 	movw   $0x0,0x50(%rsp)
  217391:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  217396:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21739a:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  21739f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2173a3:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  2173aa:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
        }

        log::debug!("Allocated frame!");

        return Ok(Page::from_address(address));
    }
  2173af:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
  2173b6:	c3                   	retq   
  2173b7:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        let result = KERNEL_PAGING.map_page(Page::from_address(address), frame.unwrap(), flags);
  2173bc:	e8 ef e9 ff ff       	callq  215db0 <_ZN9r3_kernel2mm6paging4Page12from_address17h7cbbeb1b75ffd710E>
  2173c1:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  2173c8:	00 
  2173c9:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  2173d0:	00 
  2173d1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2173d6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2173db:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  2173e0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  2173e7:	00 
  2173e8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2173ef:	00 
  2173f0:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  2173f7:	00 
  2173f8:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  2173ff:	00 
  217400:	48 8d 15 c1 8c 00 00 	lea    0x8cc1(%rip),%rdx        # 2200c8 <memset+0x2608>
  217407:	e8 54 e3 fe ff       	callq  205760 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3ff3b5309e769d98E>
  21740c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  217413:	00 
  217414:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  21741b:	00 
  21741c:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  217421:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  217426:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21742b:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  217430:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  217435:	e8 66 f9 ff ff       	callq  216da0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8map_page17h215f3fe32026132aE>
  21743a:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  217441:	00 
  217442:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  217449:	00 
  21744a:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  217451:	00 
  217452:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  217457:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  21745e:	00 
  21745f:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if result.is_err() {
  217464:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  217469:	e8 82 b0 ff ff       	callq  2124f0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h74ff6807ba79342fE>
  21746e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  217472:	8a 44 24 0f          	mov    0xf(%rsp),%al
  217476:	a8 01                	test   $0x1,%al
  217478:	75 2b                	jne    2174a5 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x1a5>
  21747a:	eb 00                	jmp    21747c <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x17c>
        log::debug!("Allocated frame!");
  21747c:	48 c7 84 24 b0 00 00 	movq   $0x4,0xb0(%rsp)
  217483:	00 04 00 00 00 
  217488:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  21748f:	00 
  217490:	48 8d 35 c1 8e fe ff 	lea    -0x1713f(%rip),%rsi        # 200358 <str.0+0x58>
  217497:	e8 c4 e8 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  21749c:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2174a0:	e9 8f 00 00 00       	jmpq   217534 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x234>
            return Err(result.unwrap_err());
  2174a5:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2174aa:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2174af:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  2174b6:	00 
  2174b7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2174be:	00 
  2174bf:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  2174c6:	00 
  2174c7:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  2174ce:	00 
  2174cf:	48 8d 15 0a 8c 00 00 	lea    0x8c0a(%rip),%rdx        # 2200e0 <memset+0x2620>
  2174d6:	e8 95 ad ff ff       	callq  212270 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h15f410e001905f48E>
  2174db:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
  2174e2:	00 
  2174e3:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2174ea:	00 
  2174eb:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  2174f2:	00 
  2174f3:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2174fa:	00 
  2174fb:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  217502:	00 
  217503:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21750a:	00 
  21750b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  217510:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  217517:	00 
  217518:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21751c:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  217523:	00 
  217524:	48 89 48 10          	mov    %rcx,0x10(%rax)
  217528:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  21752f:	e9 76 fe ff ff       	jmpq   2173aa <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0xaa>
  217534:	8a 44 24 0e          	mov    0xe(%rsp),%al
        log::debug!("Allocated frame!");
  217538:	a8 01                	test   $0x1,%al
  21753a:	75 0c                	jne    217548 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x248>
  21753c:	eb 00                	jmp    21753e <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x23e>
  21753e:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  217545:	00 
  217546:	eb 5a                	jmp    2175a2 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x2a2>
  217548:	c6 84 24 5f 01 00 00 	movb   $0x0,0x15f(%rsp)
  21754f:	00 
  217550:	48 8b 3d 49 92 00 00 	mov    0x9249(%rip),%rdi        # 2207a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  217557:	0f b6 b4 24 5f 01 00 	movzbl 0x15f(%rsp),%esi
  21755e:	00 
  21755f:	e8 8c b5 ff ff       	callq  212af0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  217564:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21756b:	00 
  21756c:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  217573:	00 
  217574:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21757b:	00 
  21757c:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  217583:	00 
  217584:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  21758b:	00 
  21758c:	e8 cf e7 fe ff       	callq  205d60 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  217591:	88 44 24 0d          	mov    %al,0xd(%rsp)
  217595:	8a 44 24 0d          	mov    0xd(%rsp),%al
  217599:	24 01                	and    $0x1,%al
  21759b:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  2175a2:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  2175a9:	01 
  2175aa:	75 24                	jne    2175d0 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x2d0>
  2175ac:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        return Ok(Page::from_address(address));
  2175b1:	e8 fa e7 ff ff       	callq  215db0 <_ZN9r3_kernel2mm6paging4Page12from_address17h7cbbeb1b75ffd710E>
  2175b6:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2175bd:	00 
  2175be:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  2175c5:	00 
  2175c6:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  2175cd:	00 
  2175ce:	eb 43                	jmp    217613 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x313>
        log::debug!("Allocated frame!");
  2175d0:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2175d7:	00 
  2175d8:	48 8d 35 19 8b 00 00 	lea    0x8b19(%rip),%rsi        # 2200f8 <memset+0x2638>
  2175df:	ba 01 00 00 00       	mov    $0x1,%edx
  2175e4:	48 8d 0d b5 a0 fe ff 	lea    -0x15f4b(%rip),%rcx        # 2016a0 <str.1+0x50>
  2175eb:	31 c0                	xor    %eax,%eax
  2175ed:	41 89 c0             	mov    %eax,%r8d
  2175f0:	e8 0b d9 fe ff       	callq  204f00 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2175f5:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  2175fc:	00 
  2175fd:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  217604:	00 
  217605:	48 8d 15 fc 8a 00 00 	lea    0x8afc(%rip),%rdx        # 220108 <memset+0x2648>
  21760c:	e8 ff 11 00 00       	callq  218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  217611:	eb 99                	jmp    2175ac <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0x2ac>
  217613:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        return Ok(Page::from_address(address));
  217618:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  21761f:	00 
  217620:	48 89 48 08          	mov    %rcx,0x8(%rax)
  217624:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  21762b:	e9 7a fd ff ff       	jmpq   2173aa <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager10alloc_page17h9fc1ab5e28d53fb3E+0xaa>

0000000000217630 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E>:
#[derive(Debug)]
  217630:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  217637:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21763c:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  217643:	00 
  217644:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  21764b:	00 
  21764c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  217651:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  217656:	0f b7 00             	movzwl (%rax),%eax
  217659:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21765e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  217663:	48 8d 0d 5e 9f fe ff 	lea    -0x160a2(%rip),%rcx        # 2015c8 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x1>
  21766a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21766e:	48 01 c8             	add    %rcx,%rax
  217671:	ff e0                	jmpq   *%rax
  217673:	0f 0b                	ud2    
  217675:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21767a:	48 8d 35 ba a0 fe ff 	lea    -0x15f46(%rip),%rsi        # 20173b <str.1+0xeb>
  217681:	ba 03 00 00 00       	mov    $0x3,%edx
  217686:	e8 35 58 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21768b:	24 01                	and    $0x1,%al
  21768d:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  217691:	e9 7d 01 00 00       	jmpq   217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  217696:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21769b:	48 8d 35 87 a0 fe ff 	lea    -0x15f79(%rip),%rsi        # 201729 <str.1+0xd9>
  2176a2:	ba 12 00 00 00       	mov    $0x12,%edx
  2176a7:	e8 14 58 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2176ac:	24 01                	and    $0x1,%al
  2176ae:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2176b2:	e9 5c 01 00 00       	jmpq   217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  2176b7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    OutOfBoundsIndex(u16),
  2176bc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2176c1:	48 83 c0 02          	add    $0x2,%rax
  2176c5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2176ca:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2176d1:	00 
#[derive(Debug)]
  2176d2:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2176d7:	48 8d 15 78 8d fe ff 	lea    -0x17288(%rip),%rdx        # 200456 <str.2+0x56>
  2176de:	b9 10 00 00 00       	mov    $0x10,%ecx
  2176e3:	e8 48 58 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2176e8:	e9 1e 02 00 00       	jmpq   21790b <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x2db>
  2176ed:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    UnalignedAddress(u64),
  2176f2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2176f7:	48 83 c0 08          	add    $0x8,%rax
  2176fb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217700:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  217707:	00 
#[derive(Debug)]
  217708:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21770d:	48 8d 15 82 8d fe ff 	lea    -0x1727e(%rip),%rdx        # 200496 <str.2+0x96>
  217714:	b9 10 00 00 00       	mov    $0x10,%ecx
  217719:	e8 12 58 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21771e:	e9 a0 01 00 00       	jmpq   2178c3 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x293>
  217723:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    MappingError(u64),
  217728:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21772d:	48 83 c0 08          	add    $0x8,%rax
  217731:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217736:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  21773d:	00 
#[derive(Debug)]
  21773e:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  217745:	00 
  217746:	48 8d 15 d0 9f fe ff 	lea    -0x16030(%rip),%rdx        # 20171d <str.1+0xcd>
  21774d:	b9 0c 00 00 00       	mov    $0xc,%ecx
  217752:	e8 d9 57 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  217757:	e9 16 01 00 00       	jmpq   217872 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x242>
  21775c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    IsAlreadyMapped(u64),
  217761:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  217766:	48 83 c0 08          	add    $0x8,%rax
  21776a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21776f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  217776:	00 
#[derive(Debug)]
  217777:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21777e:	00 
  21777f:	48 8d 15 88 9f fe ff 	lea    -0x16078(%rip),%rdx        # 20170e <str.1+0xbe>
  217786:	b9 0f 00 00 00       	mov    $0xf,%ecx
  21778b:	e8 a0 57 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  217790:	e9 8f 00 00 00       	jmpq   217824 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1f4>
  217795:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    PageNotMapped(u64),
  21779a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21779f:	48 83 c0 08          	add    $0x8,%rax
  2177a3:	48 89 04 24          	mov    %rax,(%rsp)
  2177a7:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  2177ae:	00 
#[derive(Debug)]
  2177af:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2177b6:	00 
  2177b7:	48 8d 15 43 9f fe ff 	lea    -0x160bd(%rip),%rdx        # 201701 <str.1+0xb1>
  2177be:	b9 0d 00 00 00       	mov    $0xd,%ecx
  2177c3:	e8 68 57 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2177c8:	48 8b 04 24          	mov    (%rsp),%rax
  2177cc:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  2177d3:	00 
  2177d4:	48 89 8c 24 00 01 00 	mov    %rcx,0x100(%rsp)
  2177db:	00 
    PageNotMapped(u64),
  2177dc:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2177e3:	00 
  2177e4:	48 8d b4 24 e0 00 00 	lea    0xe0(%rsp),%rsi
  2177eb:	00 
#[derive(Debug)]
  2177ec:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2177f3:	00 
  2177f4:	48 8d 15 45 89 00 00 	lea    0x8945(%rip),%rdx        # 220140 <memset+0x2680>
  2177fb:	e8 60 32 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  217800:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  217807:	00 
  217808:	e8 c3 33 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21780d:	24 01                	and    $0x1,%al
  21780f:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  217813:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  217817:	24 01                	and    $0x1,%al
  217819:	0f b6 c0             	movzbl %al,%eax
  21781c:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  217823:	c3                   	retq   
  217824:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217829:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  217830:	00 
  217831:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  217838:	00 
    IsAlreadyMapped(u64),
  217839:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  217840:	00 
  217841:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  217848:	00 
#[derive(Debug)]
  217849:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  217850:	00 
  217851:	48 8d 15 e8 88 00 00 	lea    0x88e8(%rip),%rdx        # 220140 <memset+0x2680>
  217858:	e8 03 32 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21785d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  217864:	00 
  217865:	e8 66 33 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21786a:	24 01                	and    $0x1,%al
  21786c:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  217870:	eb a1                	jmp    217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  217872:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217877:	48 8d 8c 24 88 00 00 	lea    0x88(%rsp),%rcx
  21787e:	00 
  21787f:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  217886:	00 
    MappingError(u64),
  217887:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21788e:	00 
  21788f:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  217896:	00 
#[derive(Debug)]
  217897:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21789e:	00 
  21789f:	48 8d 15 9a 88 00 00 	lea    0x889a(%rip),%rdx        # 220140 <memset+0x2680>
  2178a6:	e8 b5 31 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2178ab:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2178b2:	00 
  2178b3:	e8 18 33 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2178b8:	24 01                	and    $0x1,%al
  2178ba:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2178be:	e9 50 ff ff ff       	jmpq   217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  2178c3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2178c8:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  2178cd:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  2178d4:	00 
    UnalignedAddress(u64),
  2178d5:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2178dc:	00 
  2178dd:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  2178e4:	00 
#[derive(Debug)]
  2178e5:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2178ea:	48 8d 15 4f 88 00 00 	lea    0x884f(%rip),%rdx        # 220140 <memset+0x2680>
  2178f1:	e8 6a 31 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2178f6:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2178fb:	e8 d0 32 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  217900:	24 01                	and    $0x1,%al
  217902:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  217906:	e9 08 ff ff ff       	jmpq   217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  21790b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217910:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  217915:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  21791c:	00 
    OutOfBoundsIndex(u16),
  21791d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  217922:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
#[derive(Debug)]
  217927:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21792c:	48 8d 15 2d 88 00 00 	lea    0x882d(%rip),%rdx        # 220160 <memset+0x26a0>
  217933:	e8 28 31 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  217938:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21793d:	e8 8e 32 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  217942:	24 01                	and    $0x1,%al
  217944:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  217948:	e9 c6 fe ff ff       	jmpq   217813 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h19dbfcc95fcac355E+0x1e3>
  21794d:	cc                   	int3   
  21794e:	cc                   	int3   
  21794f:	cc                   	int3   

0000000000217950 <_ZN64_$LT$r3_kernel..mm..paging..Page$u20$as$u20$core..fmt..Debug$GT$3fmt17h239833d10c2d26d8E>:
#[derive(Debug, Clone, Copy)]
  217950:	48 83 ec 58          	sub    $0x58,%rsp
  217954:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  217959:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  21795e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
pub struct Page(mm::VirtualAddress);
  217963:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug, Clone, Copy)]
  217968:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21796d:	48 8d 15 85 92 fe ff 	lea    -0x16d7b(%rip),%rdx        # 200bf9 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x24>
  217974:	b9 04 00 00 00       	mov    $0x4,%ecx
  217979:	e8 b2 55 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21797e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217983:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  217988:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct Page(mm::VirtualAddress);
  21798d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217992:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug, Clone, Copy)]
  217997:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21799c:	48 8d 15 dd 87 00 00 	lea    0x87dd(%rip),%rdx        # 220180 <memset+0x26c0>
  2179a3:	e8 b8 30 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2179a8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2179ad:	e8 1e 32 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2179b2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2179b6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2179ba:	24 01                	and    $0x1,%al
  2179bc:	0f b6 c0             	movzbl %al,%eax
  2179bf:	48 83 c4 58          	add    $0x58,%rsp
  2179c3:	c3                   	retq   
  2179c4:	cc                   	int3   
  2179c5:	cc                   	int3   
  2179c6:	cc                   	int3   
  2179c7:	cc                   	int3   
  2179c8:	cc                   	int3   
  2179c9:	cc                   	int3   
  2179ca:	cc                   	int3   
  2179cb:	cc                   	int3   
  2179cc:	cc                   	int3   
  2179cd:	cc                   	int3   
  2179ce:	cc                   	int3   
  2179cf:	cc                   	int3   

00000000002179d0 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17hf9bf8e7573bf8178E>:
            pub const fn all() -> Self {
  2179d0:	50                   	push   %rax
bitflags! {
  2179d1:	48 b8 ff 01 00 00 00 	movabs $0x80000000000001ff,%rax
  2179d8:	00 00 80 
  2179db:	48 89 04 24          	mov    %rax,(%rsp)
            }
  2179df:	48 8b 04 24          	mov    (%rsp),%rax
  2179e3:	59                   	pop    %rcx
  2179e4:	c3                   	retq   
  2179e5:	cc                   	int3   
  2179e6:	cc                   	int3   
  2179e7:	cc                   	int3   
  2179e8:	cc                   	int3   
  2179e9:	cc                   	int3   
  2179ea:	cc                   	int3   
  2179eb:	cc                   	int3   
  2179ec:	cc                   	int3   
  2179ed:	cc                   	int3   
  2179ee:	cc                   	int3   
  2179ef:	cc                   	int3   

00000000002179f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17he39e0832fb3eaeb7E>:
            pub const fn bits(&self) -> $T {
  2179f0:	50                   	push   %rax
  2179f1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  2179f5:	48 8b 07             	mov    (%rdi),%rax
            }
  2179f8:	59                   	pop    %rcx
  2179f9:	c3                   	retq   
  2179fa:	cc                   	int3   
  2179fb:	cc                   	int3   
  2179fc:	cc                   	int3   
  2179fd:	cc                   	int3   
  2179fe:	cc                   	int3   
  2179ff:	cc                   	int3   

0000000000217a00 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hc4b704c1a50a7c3aE>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  217a00:	48 83 ec 28          	sub    $0x28,%rsp
  217a04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217a09:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                Self { bits: bits & Self::all().bits }
  217a0e:	e8 bd ff ff ff       	callq  2179d0 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17hf9bf8e7573bf8178E>
  217a13:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217a18:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  217a1d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217a22:	48 21 c8             	and    %rcx,%rax
  217a25:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
            }
  217a2a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  217a2f:	48 83 c4 28          	add    $0x28,%rsp
  217a33:	c3                   	retq   
  217a34:	cc                   	int3   
  217a35:	cc                   	int3   
  217a36:	cc                   	int3   
  217a37:	cc                   	int3   
  217a38:	cc                   	int3   
  217a39:	cc                   	int3   
  217a3a:	cc                   	int3   
  217a3b:	cc                   	int3   
  217a3c:	cc                   	int3   
  217a3d:	cc                   	int3   
  217a3e:	cc                   	int3   
  217a3f:	cc                   	int3   

0000000000217a40 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17heb043b27f058cb80E>:
            pub const fn contains(&self, other: Self) -> bool {
  217a40:	48 83 ec 10          	sub    $0x10,%rsp
  217a44:	48 89 f0             	mov    %rsi,%rax
  217a47:	48 89 3c 24          	mov    %rdi,(%rsp)
  217a4b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
                (self.bits & other.bits) == other.bits
  217a50:	48 89 c6             	mov    %rax,%rsi
  217a53:	48 23 37             	and    (%rdi),%rsi
  217a56:	48 39 c6             	cmp    %rax,%rsi
  217a59:	0f 94 c0             	sete   %al
            }
  217a5c:	24 01                	and    $0x1,%al
  217a5e:	0f b6 c0             	movzbl %al,%eax
  217a61:	48 83 c4 10          	add    $0x10,%rsp
  217a65:	c3                   	retq   
  217a66:	cc                   	int3   
  217a67:	cc                   	int3   
  217a68:	cc                   	int3   
  217a69:	cc                   	int3   
  217a6a:	cc                   	int3   
  217a6b:	cc                   	int3   
  217a6c:	cc                   	int3   
  217a6d:	cc                   	int3   
  217a6e:	cc                   	int3   
  217a6f:	cc                   	int3   

0000000000217a70 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17h75e5c784259a8396E>:
            fn deref(&self) -> &$T {
  217a70:	48 83 ec 18          	sub    $0x18,%rsp
  217a74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217a79:	48 8d 05 70 ff 00 00 	lea    0xff70(%rip),%rax        # 2279f0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hfd1455e64391ac5bE>
  217a80:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217a85:	48 8d 3d 64 ff 00 00 	lea    0xff64(%rip),%rdi        # 2279f0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hfd1455e64391ac5bE>
  217a8c:	e8 bf 16 ff ff       	callq  209150 <_ZN4spin4once13Once$LT$T$GT$9call_once17hde0eb072c19c8484E>
  217a91:	48 89 04 24          	mov    %rax,(%rsp)
  217a95:	48 8b 04 24          	mov    (%rsp),%rax
            }
  217a99:	48 83 c4 18          	add    $0x18,%rsp
  217a9d:	c3                   	retq   
  217a9e:	cc                   	int3   
  217a9f:	cc                   	int3   

0000000000217aa0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h5cc1f53bc66c4beaE>:
    pub const fn as_ptr(&self) -> *const T {
  217aa0:	48 83 ec 10          	sub    $0x10,%rsp
  217aa4:	48 89 f8             	mov    %rdi,%rax
  217aa7:	48 89 04 24          	mov    %rax,(%rsp)
  217aab:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  217ab0:	48 83 c4 10          	add    $0x10,%rsp
  217ab4:	c3                   	retq   
  217ab5:	cc                   	int3   
  217ab6:	cc                   	int3   
  217ab7:	cc                   	int3   
  217ab8:	cc                   	int3   
  217ab9:	cc                   	int3   
  217aba:	cc                   	int3   
  217abb:	cc                   	int3   
  217abc:	cc                   	int3   
  217abd:	cc                   	int3   
  217abe:	cc                   	int3   
  217abf:	cc                   	int3   

0000000000217ac0 <_ZN4core3ops8function6FnOnce9call_once17h5d223da6a4fc259bE>:
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
  217ac0:	48 83 ec 18          	sub    $0x18,%rsp
  217ac4:	48 89 f8             	mov    %rdi,%rax
  217ac7:	48 89 04 24          	mov    %rax,(%rsp)
    pub static ref KERNEL_PAGING: VirtualMemoryManager = init_kernel_vmm();
  217acb:	e8 40 f6 ff ff       	callq  217110 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h4528e93b49ff3f14E>
  217ad0:	48 8b 04 24          	mov    (%rsp),%rax
  217ad4:	48 83 c4 18          	add    $0x18,%rsp
  217ad8:	c3                   	retq   
  217ad9:	cc                   	int3   
  217ada:	cc                   	int3   
  217adb:	cc                   	int3   
  217adc:	cc                   	int3   
  217add:	cc                   	int3   
  217ade:	cc                   	int3   
  217adf:	cc                   	int3   

0000000000217ae0 <_ZN4core3ops8function6FnOnce9call_once17h9f4a139d2a8e95dbE>:
  217ae0:	48 83 ec 18          	sub    $0x18,%rsp
  217ae4:	48 89 f8             	mov    %rdi,%rax
  217ae7:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
  217aeb:	e8 10 cc fe ff       	callq  204700 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E>
  217af0:	48 8b 04 24          	mov    (%rsp),%rax
  217af4:	48 83 c4 18          	add    $0x18,%rsp
  217af8:	c3                   	retq   
  217af9:	cc                   	int3   
  217afa:	cc                   	int3   
  217afb:	cc                   	int3   
  217afc:	cc                   	int3   
  217afd:	cc                   	int3   
  217afe:	cc                   	int3   
  217aff:	cc                   	int3   

0000000000217b00 <_ZN4core3ops8function6FnOnce9call_once17hb4c5c4d4e2b51e8fE>:
  217b00:	48 83 ec 28          	sub    $0x28,%rsp
  217b04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217b09:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        Mutex::new(LinearFrameAllocator::init());
  217b0e:	e8 3d c0 ff ff       	callq  213b50 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17hbee9cae691e97102E>
  217b13:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  217b18:	48 89 c6             	mov    %rax,%rsi
  217b1b:	e8 d0 00 ff ff       	callq  207bf0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h8bbb6c38db5b36f5E>
  217b20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217b25:	48 83 c4 28          	add    $0x28,%rsp
  217b29:	c3                   	retq   
  217b2a:	cc                   	int3   
  217b2b:	cc                   	int3   
  217b2c:	cc                   	int3   
  217b2d:	cc                   	int3   
  217b2e:	cc                   	int3   
  217b2f:	cc                   	int3   

0000000000217b30 <_ZN4core3ops8function6FnOnce9call_once17hbfa38db203cdd59fE>:
  217b30:	48 81 ec 28 10 00 00 	sub    $0x1028,%rsp
  217b37:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217b3c:	48 89 3c 24          	mov    %rdi,(%rsp)
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
  217b40:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  217b45:	e8 56 de ff ff       	callq  2159a0 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E>
  217b4a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  217b4f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  217b54:	e8 f7 ff fe ff       	callq  207b50 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h278439292dab46e4E>
  217b59:	48 8b 04 24          	mov    (%rsp),%rax
  217b5d:	48 81 c4 28 10 00 00 	add    $0x1028,%rsp
  217b64:	c3                   	retq   
  217b65:	cc                   	int3   
  217b66:	cc                   	int3   
  217b67:	cc                   	int3   
  217b68:	cc                   	int3   
  217b69:	cc                   	int3   
  217b6a:	cc                   	int3   
  217b6b:	cc                   	int3   
  217b6c:	cc                   	int3   
  217b6d:	cc                   	int3   
  217b6e:	cc                   	int3   
  217b6f:	cc                   	int3   

0000000000217b70 <_ZN4core3ops8function6FnOnce9call_once17hc3c97168e4cb6453E>:
  217b70:	48 83 ec 28          	sub    $0x28,%rsp
  217b74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217b79:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    pub static ref BOOT_INFO: Mutex<BootProtoContainer> = Mutex::new(BootProtoContainer::empty());
  217b7e:	e8 3d ed fe ff       	callq  2068c0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h2895c2c060c9370bE>
  217b83:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  217b88:	48 89 c6             	mov    %rax,%rsi
  217b8b:	e8 30 ff fe ff       	callq  207ac0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1368181a5039d411E>
  217b90:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217b95:	48 83 c4 28          	add    $0x28,%rsp
  217b99:	c3                   	retq   
  217b9a:	cc                   	int3   
  217b9b:	cc                   	int3   
  217b9c:	cc                   	int3   
  217b9d:	cc                   	int3   
  217b9e:	cc                   	int3   
  217b9f:	cc                   	int3   

0000000000217ba0 <_ZN4core3ops8function6FnOnce9call_once17hcf3b6ebc09314a4bE>:
  217ba0:	48 83 ec 58          	sub    $0x58,%rsp
    static ref CPU_FEATURES: CPUFeatures = probe_cpu_features();
  217ba4:	e8 37 37 ff ff       	callq  20b2e0 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17hbc9a09dd91e929c2E>
  217ba9:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  217bae:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  217bb3:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  217bb8:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  217bbd:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  217bc2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
                fn __static_ref_initialize() -> $T { $e }
  217bc7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  217bcc:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  217bd1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  217bd6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217bdb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217be0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217be5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  217bea:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217bef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217bf4:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  217bf9:	48 83 c4 58          	add    $0x58,%rsp
  217bfd:	c3                   	retq   
  217bfe:	cc                   	int3   
  217bff:	cc                   	int3   

0000000000217c00 <_ZN4core3ops8function6FnOnce9call_once17hd8afbc9466c583faE>:
  217c00:	48 83 ec 18          	sub    $0x18,%rsp
  217c04:	48 89 f8             	mov    %rdi,%rax
  217c07:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
  217c0b:	e8 60 cb fe ff       	callq  204770 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE>
  217c10:	48 8b 04 24          	mov    (%rsp),%rax
  217c14:	48 83 c4 18          	add    $0x18,%rsp
  217c18:	c3                   	retq   
  217c19:	cc                   	int3   
  217c1a:	cc                   	int3   
  217c1b:	cc                   	int3   
  217c1c:	cc                   	int3   
  217c1d:	cc                   	int3   
  217c1e:	cc                   	int3   
  217c1f:	cc                   	int3   

0000000000217c20 <_ZN4core3ops8function6FnOnce9call_once17he9df15db724f2edfE>:
  217c20:	48 83 ec 18          	sub    $0x18,%rsp
  217c24:	48 89 f8             	mov    %rdi,%rax
  217c27:	48 89 04 24          	mov    %rax,(%rsp)

lazy_static! {
    pub static ref UART_DRIVER: Option<Mutex<UART>> = init_uart();
  217c2b:	e8 50 9e ff ff       	callq  211a80 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE>
  217c30:	48 8b 04 24          	mov    (%rsp),%rax
  217c34:	48 83 c4 18          	add    $0x18,%rsp
  217c38:	c3                   	retq   
  217c39:	cc                   	int3   
  217c3a:	cc                   	int3   
  217c3b:	cc                   	int3   
  217c3c:	cc                   	int3   
  217c3d:	cc                   	int3   
  217c3e:	cc                   	int3   
  217c3f:	cc                   	int3   

0000000000217c40 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h4dc346f8cb271829E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  217c40:	50                   	push   %rax
  217c41:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c45:	e8 66 01 00 00       	callq  217db0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h799440b001dac72bE>
  217c4a:	58                   	pop    %rax
  217c4b:	c3                   	retq   
  217c4c:	cc                   	int3   
  217c4d:	cc                   	int3   
  217c4e:	cc                   	int3   
  217c4f:	cc                   	int3   

0000000000217c50 <_ZN4core3ptr24drop_in_place$LT$u64$GT$17ha57af979494c2506E>:
  217c50:	50                   	push   %rax
  217c51:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c55:	58                   	pop    %rax
  217c56:	c3                   	retq   
  217c57:	cc                   	int3   
  217c58:	cc                   	int3   
  217c59:	cc                   	int3   
  217c5a:	cc                   	int3   
  217c5b:	cc                   	int3   
  217c5c:	cc                   	int3   
  217c5d:	cc                   	int3   
  217c5e:	cc                   	int3   
  217c5f:	cc                   	int3   

0000000000217c60 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17hda917a2b14b04484E>:
  217c60:	50                   	push   %rax
  217c61:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c65:	58                   	pop    %rax
  217c66:	c3                   	retq   
  217c67:	cc                   	int3   
  217c68:	cc                   	int3   
  217c69:	cc                   	int3   
  217c6a:	cc                   	int3   
  217c6b:	cc                   	int3   
  217c6c:	cc                   	int3   
  217c6d:	cc                   	int3   
  217c6e:	cc                   	int3   
  217c6f:	cc                   	int3   

0000000000217c70 <_ZN4core3ptr28drop_in_place$LT$$RF$u16$GT$17hab59f3233d937d96E>:
  217c70:	50                   	push   %rax
  217c71:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c75:	58                   	pop    %rax
  217c76:	c3                   	retq   
  217c77:	cc                   	int3   
  217c78:	cc                   	int3   
  217c79:	cc                   	int3   
  217c7a:	cc                   	int3   
  217c7b:	cc                   	int3   
  217c7c:	cc                   	int3   
  217c7d:	cc                   	int3   
  217c7e:	cc                   	int3   
  217c7f:	cc                   	int3   

0000000000217c80 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h9458de1fbfee9adfE>:
  217c80:	50                   	push   %rax
  217c81:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c85:	58                   	pop    %rax
  217c86:	c3                   	retq   
  217c87:	cc                   	int3   
  217c88:	cc                   	int3   
  217c89:	cc                   	int3   
  217c8a:	cc                   	int3   
  217c8b:	cc                   	int3   
  217c8c:	cc                   	int3   
  217c8d:	cc                   	int3   
  217c8e:	cc                   	int3   
  217c8f:	cc                   	int3   

0000000000217c90 <_ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h6241f1115b854864E>:
  217c90:	50                   	push   %rax
  217c91:	48 89 3c 24          	mov    %rdi,(%rsp)
  217c95:	58                   	pop    %rax
  217c96:	c3                   	retq   
  217c97:	cc                   	int3   
  217c98:	cc                   	int3   
  217c99:	cc                   	int3   
  217c9a:	cc                   	int3   
  217c9b:	cc                   	int3   
  217c9c:	cc                   	int3   
  217c9d:	cc                   	int3   
  217c9e:	cc                   	int3   
  217c9f:	cc                   	int3   

0000000000217ca0 <_ZN4core3ptr29drop_in_place$LT$$RF$bool$GT$17h2559db6247df7a15E>:
  217ca0:	50                   	push   %rax
  217ca1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217ca5:	58                   	pop    %rax
  217ca6:	c3                   	retq   
  217ca7:	cc                   	int3   
  217ca8:	cc                   	int3   
  217ca9:	cc                   	int3   
  217caa:	cc                   	int3   
  217cab:	cc                   	int3   
  217cac:	cc                   	int3   
  217cad:	cc                   	int3   
  217cae:	cc                   	int3   
  217caf:	cc                   	int3   

0000000000217cb0 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hfdea5627f4b33806E>:
  217cb0:	50                   	push   %rax
  217cb1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217cb5:	58                   	pop    %rax
  217cb6:	c3                   	retq   
  217cb7:	cc                   	int3   
  217cb8:	cc                   	int3   
  217cb9:	cc                   	int3   
  217cba:	cc                   	int3   
  217cbb:	cc                   	int3   
  217cbc:	cc                   	int3   
  217cbd:	cc                   	int3   
  217cbe:	cc                   	int3   
  217cbf:	cc                   	int3   

0000000000217cc0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>:
  217cc0:	50                   	push   %rax
  217cc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217cc5:	e8 96 03 00 00       	callq  218060 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>
  217cca:	58                   	pop    %rax
  217ccb:	c3                   	retq   
  217ccc:	cc                   	int3   
  217ccd:	cc                   	int3   
  217cce:	cc                   	int3   
  217ccf:	cc                   	int3   

0000000000217cd0 <_ZN4core3ptr48drop_in_place$LT$r3_kernel..mm..paging..Page$GT$17h8c715853dbe68e1bE>:
  217cd0:	50                   	push   %rax
  217cd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217cd5:	58                   	pop    %rax
  217cd6:	c3                   	retq   
  217cd7:	cc                   	int3   
  217cd8:	cc                   	int3   
  217cd9:	cc                   	int3   
  217cda:	cc                   	int3   
  217cdb:	cc                   	int3   
  217cdc:	cc                   	int3   
  217cdd:	cc                   	int3   
  217cde:	cc                   	int3   
  217cdf:	cc                   	int3   

0000000000217ce0 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..logging..KernelLogger$GT$17h8776a4b6cb5745b5E>:
  217ce0:	50                   	push   %rax
  217ce1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217ce5:	58                   	pop    %rax
  217ce6:	c3                   	retq   
  217ce7:	cc                   	int3   
  217ce8:	cc                   	int3   
  217ce9:	cc                   	int3   
  217cea:	cc                   	int3   
  217ceb:	cc                   	int3   
  217cec:	cc                   	int3   
  217ced:	cc                   	int3   
  217cee:	cc                   	int3   
  217cef:	cc                   	int3   

0000000000217cf0 <_ZN4core3ptr54drop_in_place$LT$$RF$r3_kernel..mm..VirtualAddress$GT$17hf120f4e7195d9d60E>:
  217cf0:	50                   	push   %rax
  217cf1:	48 89 3c 24          	mov    %rdi,(%rsp)
  217cf5:	58                   	pop    %rax
  217cf6:	c3                   	retq   
  217cf7:	cc                   	int3   
  217cf8:	cc                   	int3   
  217cf9:	cc                   	int3   
  217cfa:	cc                   	int3   
  217cfb:	cc                   	int3   
  217cfc:	cc                   	int3   
  217cfd:	cc                   	int3   
  217cfe:	cc                   	int3   
  217cff:	cc                   	int3   

0000000000217d00 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..cpu..segments..SegmentSelector$GT$17hc02e85b8a65b92fcE>:
  217d00:	50                   	push   %rax
  217d01:	48 89 3c 24          	mov    %rdi,(%rsp)
  217d05:	58                   	pop    %rax
  217d06:	c3                   	retq   
  217d07:	cc                   	int3   
  217d08:	cc                   	int3   
  217d09:	cc                   	int3   
  217d0a:	cc                   	int3   
  217d0b:	cc                   	int3   
  217d0c:	cc                   	int3   
  217d0d:	cc                   	int3   
  217d0e:	cc                   	int3   
  217d0f:	cc                   	int3   

0000000000217d10 <_ZN4core3ptr63drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..uart..UART$GT$17h4eacb68016d4b9a7E>:
  217d10:	50                   	push   %rax
  217d11:	48 89 3c 24          	mov    %rdi,(%rsp)
  217d15:	58                   	pop    %rax
  217d16:	c3                   	retq   
  217d17:	cc                   	int3   
  217d18:	cc                   	int3   
  217d19:	cc                   	int3   
  217d1a:	cc                   	int3   
  217d1b:	cc                   	int3   
  217d1c:	cc                   	int3   
  217d1d:	cc                   	int3   
  217d1e:	cc                   	int3   
  217d1f:	cc                   	int3   

0000000000217d20 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17h26685a7b93c5d71bE>:
  217d20:	50                   	push   %rax
  217d21:	48 89 3c 24          	mov    %rdi,(%rsp)
  217d25:	e8 26 00 00 00       	callq  217d50 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2d9cee4c8ab35771E>
  217d2a:	58                   	pop    %rax
  217d2b:	c3                   	retq   
  217d2c:	cc                   	int3   
  217d2d:	cc                   	int3   
  217d2e:	cc                   	int3   
  217d2f:	cc                   	int3   

0000000000217d30 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17h628efc428d946b11E>:
  217d30:	50                   	push   %rax
  217d31:	48 89 3c 24          	mov    %rdi,(%rsp)
  217d35:	e8 46 00 00 00       	callq  217d80 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6db1f908b3da2282E>
  217d3a:	58                   	pop    %rax
  217d3b:	c3                   	retq   
  217d3c:	cc                   	int3   
  217d3d:	cc                   	int3   
  217d3e:	cc                   	int3   
  217d3f:	cc                   	int3   

0000000000217d40 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>:
  217d40:	50                   	push   %rax
  217d41:	48 89 3c 24          	mov    %rdi,(%rsp)
  217d45:	e8 96 00 00 00       	callq  217de0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf79b7fd7184a650eE>
  217d4a:	58                   	pop    %rax
  217d4b:	c3                   	retq   
  217d4c:	cc                   	int3   
  217d4d:	cc                   	int3   
  217d4e:	cc                   	int3   
  217d4f:	cc                   	int3   

0000000000217d50 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2d9cee4c8ab35771E>:
}

impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>
{
    /// The dropping of the MutexGuard will release the lock it was created from.
    fn drop(&mut self)
  217d50:	48 83 ec 18          	sub    $0x18,%rsp
  217d54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    {
        self.lock.store(false, Ordering::Release);
  217d59:	48 8b 3f             	mov    (%rdi),%rdi
  217d5c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  217d61:	31 f6                	xor    %esi,%esi
  217d63:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  217d68:	e8 13 ac ff ff       	callq  212980 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  217d6d:	48 83 c4 18          	add    $0x18,%rsp
  217d71:	c3                   	retq   
  217d72:	cc                   	int3   
  217d73:	cc                   	int3   
  217d74:	cc                   	int3   
  217d75:	cc                   	int3   
  217d76:	cc                   	int3   
  217d77:	cc                   	int3   
  217d78:	cc                   	int3   
  217d79:	cc                   	int3   
  217d7a:	cc                   	int3   
  217d7b:	cc                   	int3   
  217d7c:	cc                   	int3   
  217d7d:	cc                   	int3   
  217d7e:	cc                   	int3   
  217d7f:	cc                   	int3   

0000000000217d80 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6db1f908b3da2282E>:
    fn drop(&mut self)
  217d80:	48 83 ec 18          	sub    $0x18,%rsp
  217d84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  217d89:	48 8b 3f             	mov    (%rdi),%rdi
  217d8c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  217d91:	31 f6                	xor    %esi,%esi
  217d93:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  217d98:	e8 e3 ab ff ff       	callq  212980 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  217d9d:	48 83 c4 18          	add    $0x18,%rsp
  217da1:	c3                   	retq   
  217da2:	cc                   	int3   
  217da3:	cc                   	int3   
  217da4:	cc                   	int3   
  217da5:	cc                   	int3   
  217da6:	cc                   	int3   
  217da7:	cc                   	int3   
  217da8:	cc                   	int3   
  217da9:	cc                   	int3   
  217daa:	cc                   	int3   
  217dab:	cc                   	int3   
  217dac:	cc                   	int3   
  217dad:	cc                   	int3   
  217dae:	cc                   	int3   
  217daf:	cc                   	int3   

0000000000217db0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h799440b001dac72bE>:
    fn drop(&mut self)
  217db0:	48 83 ec 18          	sub    $0x18,%rsp
  217db4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  217db9:	48 8b 3f             	mov    (%rdi),%rdi
  217dbc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  217dc1:	31 f6                	xor    %esi,%esi
  217dc3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  217dc8:	e8 b3 ab ff ff       	callq  212980 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  217dcd:	48 83 c4 18          	add    $0x18,%rsp
  217dd1:	c3                   	retq   
  217dd2:	cc                   	int3   
  217dd3:	cc                   	int3   
  217dd4:	cc                   	int3   
  217dd5:	cc                   	int3   
  217dd6:	cc                   	int3   
  217dd7:	cc                   	int3   
  217dd8:	cc                   	int3   
  217dd9:	cc                   	int3   
  217dda:	cc                   	int3   
  217ddb:	cc                   	int3   
  217ddc:	cc                   	int3   
  217ddd:	cc                   	int3   
  217dde:	cc                   	int3   
  217ddf:	cc                   	int3   

0000000000217de0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf79b7fd7184a650eE>:
    fn drop(&mut self)
  217de0:	48 83 ec 18          	sub    $0x18,%rsp
  217de4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  217de9:	48 8b 3f             	mov    (%rdi),%rdi
  217dec:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  217df1:	31 f6                	xor    %esi,%esi
  217df3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  217df8:	e8 83 ab ff ff       	callq  212980 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  217dfd:	48 83 c4 18          	add    $0x18,%rsp
  217e01:	c3                   	retq   
  217e02:	cc                   	int3   
  217e03:	cc                   	int3   
  217e04:	cc                   	int3   
  217e05:	cc                   	int3   
  217e06:	cc                   	int3   
  217e07:	cc                   	int3   
  217e08:	cc                   	int3   
  217e09:	cc                   	int3   
  217e0a:	cc                   	int3   
  217e0b:	cc                   	int3   
  217e0c:	cc                   	int3   
  217e0d:	cc                   	int3   
  217e0e:	cc                   	int3   
  217e0f:	cc                   	int3   

0000000000217e10 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u64$GT$8try_from17hb8f7d083e4089abfE>:

            /// Try to create the target number type from a source
            /// number type. This returns an error if the source value
            /// is outside of the range of the target type.
            #[inline]
            fn try_from(value: $source) -> Result<Self, Self::Error> {
  217e10:	48 83 ec 18          	sub    $0x18,%rsp
  217e14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
                Ok(value as Self)
  217e19:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217e1e:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  217e25:	00 
            }
  217e26:	48 8b 04 24          	mov    (%rsp),%rax
  217e2a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  217e2f:	48 83 c4 18          	add    $0x18,%rsp
  217e33:	c3                   	retq   
  217e34:	cc                   	int3   
  217e35:	cc                   	int3   
  217e36:	cc                   	int3   
  217e37:	cc                   	int3   
  217e38:	cc                   	int3   
  217e39:	cc                   	int3   
  217e3a:	cc                   	int3   
  217e3b:	cc                   	int3   
  217e3c:	cc                   	int3   
  217e3d:	cc                   	int3   
  217e3e:	cc                   	int3   
  217e3f:	cc                   	int3   

0000000000217e40 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u64$GT$2lt17h4ee5728252d75484E>:
                #[inline]
                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
                    Some(self.cmp(other))
                }
                #[inline]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
  217e40:	48 83 ec 10          	sub    $0x10,%rsp
  217e44:	48 89 3c 24          	mov    %rdi,(%rsp)
  217e48:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  217e4d:	48 8b 07             	mov    (%rdi),%rax
  217e50:	48 3b 06             	cmp    (%rsi),%rax
  217e53:	0f 92 c0             	setb   %al
  217e56:	24 01                	and    $0x1,%al
  217e58:	0f b6 c0             	movzbl %al,%eax
  217e5b:	48 83 c4 10          	add    $0x10,%rsp
  217e5f:	c3                   	retq   

0000000000217e60 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17hfaed2971c47496d3E>:
  217e60:	48 83 ec 10          	sub    $0x10,%rsp
  217e64:	48 89 3c 24          	mov    %rdi,(%rsp)
  217e68:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  217e6d:	48 8b 07             	mov    (%rdi),%rax
  217e70:	48 3b 06             	cmp    (%rsi),%rax
  217e73:	0f 92 c0             	setb   %al
  217e76:	24 01                	and    $0x1,%al
  217e78:	0f b6 c0             	movzbl %al,%eax
  217e7b:	48 83 c4 10          	add    $0x10,%rsp
  217e7f:	c3                   	retq   

0000000000217e80 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h69793d84f9f7b42cE>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
  217e80:	48 83 ec 78          	sub    $0x78,%rsp
  217e84:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  217e89:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  217e8e:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  217e93:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        unsafe { mem::transmute(self) }
  217e98:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  217e9d:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  217ea2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  217ea7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217eac:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  217eb1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217eb6:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  217ebb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        Bytes(self.as_bytes().iter().copied())
  217ec0:	e8 cb 0e 00 00       	callq  218d90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  217ec5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217eca:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  217ecf:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  217ed4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  217ed9:	e8 52 0d 00 00       	callq  218c30 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>
  217ede:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217ee3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  217ee8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217eed:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  217ef2:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  217ef7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  217efc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  217f01:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  217f06:	48 83 c4 78          	add    $0x78,%rsp
  217f0a:	c3                   	retq   
  217f0b:	cc                   	int3   
  217f0c:	cc                   	int3   
  217f0d:	cc                   	int3   
  217f0e:	cc                   	int3   
  217f0f:	cc                   	int3   

0000000000217f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h6b4b85800e3c5941E>:
    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  217f10:	48 83 ec 10          	sub    $0x10,%rsp
  217f14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { NonNull { pointer: ptr as _ } }
  217f19:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  217f1d:	48 8b 04 24          	mov    (%rsp),%rax
  217f21:	48 83 c4 10          	add    $0x10,%rsp
  217f25:	c3                   	retq   
  217f26:	cc                   	int3   
  217f27:	cc                   	int3   
  217f28:	cc                   	int3   
  217f29:	cc                   	int3   
  217f2a:	cc                   	int3   
  217f2b:	cc                   	int3   
  217f2c:	cc                   	int3   
  217f2d:	cc                   	int3   
  217f2e:	cc                   	int3   
  217f2f:	cc                   	int3   

0000000000217f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h50d2e790f7322737E>:
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
    #[must_use]
    #[inline]
    pub const fn as_ptr(self) -> *mut T {
  217f30:	50                   	push   %rax
  217f31:	48 89 f8             	mov    %rdi,%rax
  217f34:	48 89 04 24          	mov    %rax,(%rsp)
        self.pointer as *mut T
    }
  217f38:	59                   	pop    %rcx
  217f39:	c3                   	retq   
  217f3a:	cc                   	int3   
  217f3b:	cc                   	int3   
  217f3c:	cc                   	int3   
  217f3d:	cc                   	int3   
  217f3e:	cc                   	int3   
  217f3f:	cc                   	int3   

0000000000217f40 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE>:
                fn forward_checked(start: Self, n: usize) -> Option<Self> {
  217f40:	48 83 ec 48          	sub    $0x48,%rsp
  217f44:	48 89 34 24          	mov    %rsi,(%rsp)
  217f48:	48 89 f8             	mov    %rdi,%rax
  217f4b:	48 8b 3c 24          	mov    (%rsp),%rdi
  217f4f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217f54:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217f59:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    match Self::try_from(n) {
  217f5e:	e8 ad fe ff ff       	callq  217e10 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u64$GT$8try_from17hb8f7d083e4089abfE>
  217f63:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  217f68:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217f6d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217f72:	48 85 c0             	test   %rax,%rax
  217f75:	74 06                	je     217f7d <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE+0x3d>
  217f77:	eb 00                	jmp    217f79 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE+0x39>
  217f79:	eb 22                	jmp    217f9d <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE+0x5d>
  217f7b:	0f 0b                	ud2    
  217f7d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                        Ok(n) => start.checked_add(n),
  217f82:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  217f87:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  217f8c:	e8 df 00 ff ff       	callq  208070 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h7a91610591b68582E>
  217f91:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  217f96:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217f9b:	eb 18                	jmp    217fb5 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE+0x75>
                        Err(_) => None, // if n is out of range, `unsigned_start + n` is too
  217f9d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  217fa4:	00 00 
                }
  217fa6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217fab:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  217fb0:	48 83 c4 48          	add    $0x48,%rsp
  217fb4:	c3                   	retq   
                        Ok(n) => start.checked_add(n),
  217fb5:	eb ef                	jmp    217fa6 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$15forward_checked17he09978dc66266fcaE+0x66>
  217fb7:	cc                   	int3   
  217fb8:	cc                   	int3   
  217fb9:	cc                   	int3   
  217fba:	cc                   	int3   
  217fbb:	cc                   	int3   
  217fbc:	cc                   	int3   
  217fbd:	cc                   	int3   
  217fbe:	cc                   	int3   
  217fbf:	cc                   	int3   

0000000000217fc0 <_ZN47_$LT$u64$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h5cf25f73d8f7eb3eE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
  217fc0:	48 83 ec 30          	sub    $0x30,%rsp
  217fc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217fc9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  217fce:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217fd3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
  217fd8:	48 01 f7             	add    %rsi,%rdi
  217fdb:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  217fe0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217fe5:	48 89 04 24          	mov    %rax,(%rsp)
  217fe9:	48 8b 04 24          	mov    (%rsp),%rax
        }
  217fed:	48 83 c4 30          	add    $0x30,%rsp
  217ff1:	c3                   	retq   
  217ff2:	cc                   	int3   
  217ff3:	cc                   	int3   
  217ff4:	cc                   	int3   
  217ff5:	cc                   	int3   
  217ff6:	cc                   	int3   
  217ff7:	cc                   	int3   
  217ff8:	cc                   	int3   
  217ff9:	cc                   	int3   
  217ffa:	cc                   	int3   
  217ffb:	cc                   	int3   
  217ffc:	cc                   	int3   
  217ffd:	cc                   	int3   
  217ffe:	cc                   	int3   
  217fff:	cc                   	int3   

0000000000218000 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h80a022844752abc3E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
  218000:	48 83 ec 30          	sub    $0x30,%rsp
  218004:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  218009:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21800e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218013:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  218018:	48 01 f7             	add    %rsi,%rdi
  21801b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  218020:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  218025:	48 89 04 24          	mov    %rax,(%rsp)
  218029:	48 8b 04 24          	mov    (%rsp),%rax
        }
  21802d:	48 83 c4 30          	add    $0x30,%rsp
  218031:	c3                   	retq   
  218032:	cc                   	int3   
  218033:	cc                   	int3   
  218034:	cc                   	int3   
  218035:	cc                   	int3   
  218036:	cc                   	int3   
  218037:	cc                   	int3   
  218038:	cc                   	int3   
  218039:	cc                   	int3   
  21803a:	cc                   	int3   
  21803b:	cc                   	int3   
  21803c:	cc                   	int3   
  21803d:	cc                   	int3   
  21803e:	cc                   	int3   
  21803f:	cc                   	int3   

0000000000218040 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h0f0bf1c063626619E>:
            fn from(small: $Small) -> Self {
  218040:	48 83 ec 02          	sub    $0x2,%rsp
  218044:	66 89 f8             	mov    %di,%ax
  218047:	66 89 04 24          	mov    %ax,(%rsp)
                small as Self
  21804b:	0f b7 c0             	movzwl %ax,%eax
            }
  21804e:	48 83 c4 02          	add    $0x2,%rsp
  218052:	c3                   	retq   
  218053:	cc                   	int3   
  218054:	cc                   	int3   
  218055:	cc                   	int3   
  218056:	cc                   	int3   
  218057:	cc                   	int3   
  218058:	cc                   	int3   
  218059:	cc                   	int3   
  21805a:	cc                   	int3   
  21805b:	cc                   	int3   
  21805c:	cc                   	int3   
  21805d:	cc                   	int3   
  21805e:	cc                   	int3   
  21805f:	cc                   	int3   

0000000000218060 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
  218060:	48 83 ec 18          	sub    $0x18,%rsp
  218064:	48 89 3c 24          	mov    %rdi,(%rsp)
  218068:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if self.panicked {
  21806d:	f6 47 08 01          	testb  $0x1,0x8(%rdi)
  218071:	75 05                	jne    218078 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x18>
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
  218073:	48 83 c4 18          	add    $0x18,%rsp
  218077:	c3                   	retq   
  218078:	48 8b 04 24          	mov    (%rsp),%rax
            self.state.store(PANICKED, Ordering::SeqCst);
  21807c:	48 8b 38             	mov    (%rax),%rdi
  21807f:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  218084:	be 03 00 00 00       	mov    $0x3,%esi
  218089:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  21808e:	e8 0d 00 00 00       	callq  2180a0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>
  218093:	eb de                	jmp    218073 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x13>
  218095:	cc                   	int3   
  218096:	cc                   	int3   
  218097:	cc                   	int3   
  218098:	cc                   	int3   
  218099:	cc                   	int3   
  21809a:	cc                   	int3   
  21809b:	cc                   	int3   
  21809c:	cc                   	int3   
  21809d:	cc                   	int3   
  21809e:	cc                   	int3   
  21809f:	cc                   	int3   

00000000002180a0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  2180a0:	48 83 ec 38          	sub    $0x38,%rsp
  2180a4:	48 89 34 24          	mov    %rsi,(%rsp)
  2180a8:	88 d0                	mov    %dl,%al
  2180aa:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2180ae:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2180b3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2180b8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2180bc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2180c1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2180c6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2180ca:	48 8b 34 24          	mov    (%rsp),%rsi
  2180ce:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  2180d3:	0f b6 d0             	movzbl %al,%edx
  2180d6:	e8 05 00 00 00       	callq  2180e0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>
            }
  2180db:	48 83 c4 38          	add    $0x38,%rsp
  2180df:	c3                   	retq   

00000000002180e0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  2180e0:	48 83 ec 38          	sub    $0x38,%rsp
  2180e4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2180e9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2180ee:	88 d0                	mov    %dl,%al
  2180f0:	88 44 24 27          	mov    %al,0x27(%rsp)
  2180f4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2180f9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  2180fe:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  218103:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  218108:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21810d:	48 8d 0d 2c 96 fe ff 	lea    -0x169d4(%rip),%rcx        # 201740 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E+0x2>
  218114:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  218118:	48 01 c8             	add    %rcx,%rax
  21811b:	ff e0                	jmpq   *%rax
  21811d:	0f 0b                	ud2    
  21811f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218124:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  218129:	48 89 08             	mov    %rcx,(%rax)
  21812c:	eb 59                	jmp    218187 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa7>
  21812e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218133:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  218138:	48 89 08             	mov    %rcx,(%rax)
  21813b:	eb 48                	jmp    218185 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  21813d:	48 8d 3d ba 96 fe ff 	lea    -0x16946(%rip),%rdi        # 2017fe <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E+0xc0>
  218144:	48 8d 15 6d 80 00 00 	lea    0x806d(%rip),%rdx        # 2201b8 <memset+0x26f8>
  21814b:	be 2a 00 00 00       	mov    $0x2a,%esi
  218150:	e8 db 2e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  218155:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  218157:	48 8d 3d f6 95 fe ff 	lea    -0x16a0a(%rip),%rdi        # 201754 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E+0x16>
  21815e:	48 8d 15 3b 80 00 00 	lea    0x803b(%rip),%rdx        # 2201a0 <memset+0x26e0>
  218165:	be 32 00 00 00       	mov    $0x32,%esi
  21816a:	e8 c1 2e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21816f:	0f 0b                	ud2    
  218171:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218176:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  21817b:	48 87 01             	xchg   %rax,(%rcx)
  21817e:	eb 00                	jmp    218180 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
}
  218180:	48 83 c4 38          	add    $0x38,%rsp
  218184:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  218185:	eb f9                	jmp    218180 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  218187:	eb f7                	jmp    218180 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
  218189:	cc                   	int3   
  21818a:	cc                   	int3   
  21818b:	cc                   	int3   
  21818c:	cc                   	int3   
  21818d:	cc                   	int3   
  21818e:	cc                   	int3   
  21818f:	cc                   	int3   

0000000000218190 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>:
    fn clone(&self) -> Level {
  218190:	50                   	push   %rax
  218191:	48 89 3c 24          	mov    %rdi,(%rsp)
        *self
  218195:	48 8b 07             	mov    (%rdi),%rax
    }
  218198:	59                   	pop    %rcx
  218199:	c3                   	retq   
  21819a:	cc                   	int3   
  21819b:	cc                   	int3   
  21819c:	cc                   	int3   
  21819d:	cc                   	int3   
  21819e:	cc                   	int3   
  21819f:	cc                   	int3   

00000000002181a0 <_ZN49_$LT$log..Level$u20$as$u20$core..fmt..Display$GT$3fmt17h774fa8d468057f7dE>:
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
  2181a0:	48 83 ec 38          	sub    $0x38,%rsp
  2181a4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2181a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2181ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt.pad(self.as_str())
  2181b3:	e8 38 00 00 00       	callq  2181f0 <_ZN3log5Level6as_str17h940f0b247dae748dE>
  2181b8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2181bd:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2181c2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2181c7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2181cc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2181d1:	e8 6a 49 00 00       	callq  21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  2181d6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2181da:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2181de:	24 01                	and    $0x1,%al
  2181e0:	0f b6 c0             	movzbl %al,%eax
  2181e3:	48 83 c4 38          	add    $0x38,%rsp
  2181e7:	c3                   	retq   
  2181e8:	cc                   	int3   
  2181e9:	cc                   	int3   
  2181ea:	cc                   	int3   
  2181eb:	cc                   	int3   
  2181ec:	cc                   	int3   
  2181ed:	cc                   	int3   
  2181ee:	cc                   	int3   
  2181ef:	cc                   	int3   

00000000002181f0 <_ZN3log5Level6as_str17h940f0b247dae748dE>:
    pub fn as_str(&self) -> &'static str {
  2181f0:	48 83 ec 18          	sub    $0x18,%rsp
  2181f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        LOG_LEVEL_NAMES[*self as usize]
  2181f9:	48 8b 07             	mov    (%rdi),%rax
  2181fc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218201:	48 83 f8 06          	cmp    $0x6,%rax
  218205:	0f 92 c0             	setb   %al
  218208:	a8 01                	test   $0x1,%al
  21820a:	75 02                	jne    21820e <_ZN3log5Level6as_str17h940f0b247dae748dE+0x1e>
  21820c:	eb 1e                	jmp    21822c <_ZN3log5Level6as_str17h940f0b247dae748dE+0x3c>
  21820e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  218213:	48 c1 e1 04          	shl    $0x4,%rcx
  218217:	48 8d 15 02 80 00 00 	lea    0x8002(%rip),%rdx        # 220220 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E>
  21821e:	48 8b 04 11          	mov    (%rcx,%rdx,1),%rax
  218222:	48 8b 54 11 08       	mov    0x8(%rcx,%rdx,1),%rdx
    }
  218227:	48 83 c4 18          	add    $0x18,%rsp
  21822b:	c3                   	retq   
  21822c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        LOG_LEVEL_NAMES[*self as usize]
  218231:	48 8d 15 48 80 00 00 	lea    0x8048(%rip),%rdx        # 220280 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x60>
  218238:	be 06 00 00 00       	mov    $0x6,%esi
  21823d:	e8 3e 2e 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  218242:	0f 0b                	ud2    
  218244:	cc                   	int3   
  218245:	cc                   	int3   
  218246:	cc                   	int3   
  218247:	cc                   	int3   
  218248:	cc                   	int3   
  218249:	cc                   	int3   
  21824a:	cc                   	int3   
  21824b:	cc                   	int3   
  21824c:	cc                   	int3   
  21824d:	cc                   	int3   
  21824e:	cc                   	int3   
  21824f:	cc                   	int3   

0000000000218250 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>:
    pub fn builder() -> RecordBuilder<'a> {
  218250:	50                   	push   %rax
  218251:	48 89 f8             	mov    %rdi,%rax
  218254:	48 89 04 24          	mov    %rax,(%rsp)
        RecordBuilder::new()
  218258:	e8 13 00 00 00       	callq  218270 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>
  21825d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  218261:	59                   	pop    %rcx
  218262:	c3                   	retq   
  218263:	cc                   	int3   
  218264:	cc                   	int3   
  218265:	cc                   	int3   
  218266:	cc                   	int3   
  218267:	cc                   	int3   
  218268:	cc                   	int3   
  218269:	cc                   	int3   
  21826a:	cc                   	int3   
  21826b:	cc                   	int3   
  21826c:	cc                   	int3   
  21826d:	cc                   	int3   
  21826e:	cc                   	int3   
  21826f:	cc                   	int3   

0000000000218270 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>:
    pub fn new() -> RecordBuilder<'a> {
  218270:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  218277:	48 89 3c 24          	mov    %rdi,(%rsp)
  21827b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                args: format_args!(""),
  218280:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  218287:	00 
  218288:	48 8d 0d 99 95 fe ff 	lea    -0x16a67(%rip),%rcx        # 201828 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E+0xea>
  21828f:	48 89 ce             	mov    %rcx,%rsi
  218292:	31 c0                	xor    %eax,%eax
  218294:	41 89 c0             	mov    %eax,%r8d
  218297:	4c 89 c2             	mov    %r8,%rdx
  21829a:	e8 e1 13 00 00       	callq  219680 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>
                metadata: Metadata::builder().build(),
  21829f:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  2182a6:	00 
  2182a7:	e8 84 02 00 00       	callq  218530 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>
  2182ac:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2182b3:	00 
  2182b4:	48 8d b4 24 d8 00 00 	lea    0xd8(%rsp),%rsi
  2182bb:	00 
  2182bc:	e8 df 02 00 00       	callq  2185a0 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>
                module_path: None,
  2182c1:	48 c7 84 24 f0 00 00 	movq   $0x2,0xf0(%rsp)
  2182c8:	00 02 00 00 00 
                file: None,
  2182cd:	48 c7 84 24 08 01 00 	movq   $0x2,0x108(%rsp)
  2182d4:	00 02 00 00 00 
                line: None,
  2182d9:	c7 84 24 20 01 00 00 	movl   $0x0,0x120(%rsp)
  2182e0:	00 00 00 00 
            record: Record {
  2182e4:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2182eb:	00 
  2182ec:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2182f1:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2182f8:	00 
  2182f9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2182fe:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  218305:	00 
  218306:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21830b:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  218310:	48 83 c7 18          	add    $0x18,%rdi
  218314:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  21831b:	00 
  21831c:	ba 30 00 00 00       	mov    $0x30,%edx
  218321:	e8 7a 57 00 00       	callq  21daa0 <memcpy>
  218326:	48 8b 3c 24          	mov    (%rsp),%rdi
  21832a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  218331:	00 
  218332:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218337:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  21833e:	00 
  21833f:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  218344:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  21834b:	00 
  21834c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  218351:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  218358:	00 
  218359:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21835e:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  218365:	00 
  218366:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21836b:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  218372:	00 
  218373:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21837a:	00 
  21837b:	8b 8c 24 20 01 00 00 	mov    0x120(%rsp),%ecx
  218382:	8b 84 24 24 01 00 00 	mov    0x124(%rsp),%eax
  218389:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
  218390:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%rsp)
        RecordBuilder {
  218397:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  21839c:	ba 80 00 00 00       	mov    $0x80,%edx
  2183a1:	e8 fa 56 00 00       	callq  21daa0 <memcpy>
  2183a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2183ab:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  2183b2:	c3                   	retq   
  2183b3:	cc                   	int3   
  2183b4:	cc                   	int3   
  2183b5:	cc                   	int3   
  2183b6:	cc                   	int3   
  2183b7:	cc                   	int3   
  2183b8:	cc                   	int3   
  2183b9:	cc                   	int3   
  2183ba:	cc                   	int3   
  2183bb:	cc                   	int3   
  2183bc:	cc                   	int3   
  2183bd:	cc                   	int3   
  2183be:	cc                   	int3   
  2183bf:	cc                   	int3   

00000000002183c0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
  2183c0:	48 83 ec 48          	sub    $0x48,%rsp
  2183c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2183c9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        self.record.args = args;
  2183ce:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2183d3:	ba 30 00 00 00       	mov    $0x30,%edx
  2183d8:	e8 c3 56 00 00       	callq  21daa0 <memcpy>
  2183dd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2183e2:	48 83 c7 18          	add    $0x18,%rdi
  2183e6:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  2183eb:	ba 30 00 00 00       	mov    $0x30,%edx
  2183f0:	e8 ab 56 00 00       	callq  21daa0 <memcpy>
  2183f5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2183fa:	48 83 c4 48          	add    $0x48,%rsp
  2183fe:	c3                   	retq   
  2183ff:	cc                   	int3   

0000000000218400 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
  218400:	48 83 ec 10          	sub    $0x10,%rsp
  218404:	48 89 f8             	mov    %rdi,%rax
  218407:	48 89 04 24          	mov    %rax,(%rsp)
  21840b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        self.record.metadata.level = level;
  218410:	48 89 30             	mov    %rsi,(%rax)
    }
  218413:	48 83 c4 10          	add    $0x10,%rsp
  218417:	c3                   	retq   
  218418:	cc                   	int3   
  218419:	cc                   	int3   
  21841a:	cc                   	int3   
  21841b:	cc                   	int3   
  21841c:	cc                   	int3   
  21841d:	cc                   	int3   
  21841e:	cc                   	int3   
  21841f:	cc                   	int3   

0000000000218420 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
  218420:	48 83 ec 18          	sub    $0x18,%rsp
  218424:	48 89 f8             	mov    %rdi,%rax
  218427:	48 89 04 24          	mov    %rax,(%rsp)
  21842b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  218430:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.record.metadata.target = target;
  218435:	48 89 70 08          	mov    %rsi,0x8(%rax)
  218439:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  21843d:	48 83 c4 18          	add    $0x18,%rsp
  218441:	c3                   	retq   
  218442:	cc                   	int3   
  218443:	cc                   	int3   
  218444:	cc                   	int3   
  218445:	cc                   	int3   
  218446:	cc                   	int3   
  218447:	cc                   	int3   
  218448:	cc                   	int3   
  218449:	cc                   	int3   
  21844a:	cc                   	int3   
  21844b:	cc                   	int3   
  21844c:	cc                   	int3   
  21844d:	cc                   	int3   
  21844e:	cc                   	int3   
  21844f:	cc                   	int3   

0000000000218450 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
  218450:	48 83 ec 38          	sub    $0x38,%rsp
  218454:	48 89 3c 24          	mov    %rdi,(%rsp)
  218458:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21845d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  218462:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.module_path = path.map(MaybeStaticStr::Static);
  218467:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  21846c:	e8 bf 09 00 00       	callq  218e30 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  218471:	48 8b 04 24          	mov    (%rsp),%rax
  218475:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21847a:	48 89 48 48          	mov    %rcx,0x48(%rax)
  21847e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218483:	48 89 48 50          	mov    %rcx,0x50(%rax)
  218487:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21848c:	48 89 48 58          	mov    %rcx,0x58(%rax)
    }
  218490:	48 83 c4 38          	add    $0x38,%rsp
  218494:	c3                   	retq   
  218495:	cc                   	int3   
  218496:	cc                   	int3   
  218497:	cc                   	int3   
  218498:	cc                   	int3   
  218499:	cc                   	int3   
  21849a:	cc                   	int3   
  21849b:	cc                   	int3   
  21849c:	cc                   	int3   
  21849d:	cc                   	int3   
  21849e:	cc                   	int3   
  21849f:	cc                   	int3   

00000000002184a0 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
  2184a0:	48 83 ec 38          	sub    $0x38,%rsp
  2184a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2184a8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2184ad:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2184b2:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.file = file.map(MaybeStaticStr::Static);
  2184b7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  2184bc:	e8 6f 09 00 00       	callq  218e30 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  2184c1:	48 8b 04 24          	mov    (%rsp),%rax
  2184c5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2184ca:	48 89 48 60          	mov    %rcx,0x60(%rax)
  2184ce:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2184d3:	48 89 48 68          	mov    %rcx,0x68(%rax)
  2184d7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2184dc:	48 89 48 70          	mov    %rcx,0x70(%rax)
    }
  2184e0:	48 83 c4 38          	add    $0x38,%rsp
  2184e4:	c3                   	retq   
  2184e5:	cc                   	int3   
  2184e6:	cc                   	int3   
  2184e7:	cc                   	int3   
  2184e8:	cc                   	int3   
  2184e9:	cc                   	int3   
  2184ea:	cc                   	int3   
  2184eb:	cc                   	int3   
  2184ec:	cc                   	int3   
  2184ed:	cc                   	int3   
  2184ee:	cc                   	int3   
  2184ef:	cc                   	int3   

00000000002184f0 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
  2184f0:	48 83 ec 10          	sub    $0x10,%rsp
  2184f4:	48 89 f8             	mov    %rdi,%rax
  2184f7:	48 89 04 24          	mov    %rax,(%rsp)
  2184fb:	89 74 24 08          	mov    %esi,0x8(%rsp)
  2184ff:	89 54 24 0c          	mov    %edx,0xc(%rsp)
        self.record.line = line;
  218503:	89 70 78             	mov    %esi,0x78(%rax)
  218506:	89 50 7c             	mov    %edx,0x7c(%rax)
    }
  218509:	48 83 c4 10          	add    $0x10,%rsp
  21850d:	c3                   	retq   
  21850e:	cc                   	int3   
  21850f:	cc                   	int3   

0000000000218510 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>:
    pub fn build(&self) -> Record<'a> {
  218510:	48 83 ec 18          	sub    $0x18,%rsp
  218514:	48 89 f8             	mov    %rdi,%rax
  218517:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21851c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.record.clone()
  218521:	e8 3a 05 00 00       	callq  218a60 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>
  218526:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21852b:	48 83 c4 18          	add    $0x18,%rsp
  21852f:	c3                   	retq   

0000000000218530 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>:
    pub fn builder() -> MetadataBuilder<'a> {
  218530:	50                   	push   %rax
  218531:	48 89 f8             	mov    %rdi,%rax
  218534:	48 89 04 24          	mov    %rax,(%rsp)
        MetadataBuilder::new()
  218538:	e8 13 00 00 00       	callq  218550 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>
  21853d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  218541:	59                   	pop    %rcx
  218542:	c3                   	retq   
  218543:	cc                   	int3   
  218544:	cc                   	int3   
  218545:	cc                   	int3   
  218546:	cc                   	int3   
  218547:	cc                   	int3   
  218548:	cc                   	int3   
  218549:	cc                   	int3   
  21854a:	cc                   	int3   
  21854b:	cc                   	int3   
  21854c:	cc                   	int3   
  21854d:	cc                   	int3   
  21854e:	cc                   	int3   
  21854f:	cc                   	int3   

0000000000218550 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>:
    pub fn new() -> MetadataBuilder<'a> {
  218550:	48 83 ec 18          	sub    $0x18,%rsp
  218554:	48 89 f8             	mov    %rdi,%rax
            metadata: Metadata {
  218557:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  21855e:	00 
  21855f:	48 8d 0d c2 92 fe ff 	lea    -0x16d3e(%rip),%rcx        # 201828 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17h98a4992344ad07d3E+0xea>
  218566:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21856b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  218572:	00 00 
        MetadataBuilder {
  218574:	48 8b 0c 24          	mov    (%rsp),%rcx
  218578:	48 89 0f             	mov    %rcx,(%rdi)
  21857b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  218580:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  218584:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218589:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    }
  21858d:	48 83 c4 18          	add    $0x18,%rsp
  218591:	c3                   	retq   
  218592:	cc                   	int3   
  218593:	cc                   	int3   
  218594:	cc                   	int3   
  218595:	cc                   	int3   
  218596:	cc                   	int3   
  218597:	cc                   	int3   
  218598:	cc                   	int3   
  218599:	cc                   	int3   
  21859a:	cc                   	int3   
  21859b:	cc                   	int3   
  21859c:	cc                   	int3   
  21859d:	cc                   	int3   
  21859e:	cc                   	int3   
  21859f:	cc                   	int3   

00000000002185a0 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>:
    pub fn build(&self) -> Metadata<'a> {
  2185a0:	48 83 ec 18          	sub    $0x18,%rsp
  2185a4:	48 89 f8             	mov    %rdi,%rax
  2185a7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2185ac:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.metadata.clone()
  2185b1:	e8 0a 06 00 00       	callq  218bc0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  2185b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2185bb:	48 83 c4 18          	add    $0x18,%rsp
  2185bf:	c3                   	retq   

00000000002185c0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h56ee4da12616bf71E>:
    fn enabled(&self, _: &Metadata) -> bool {
  2185c0:	48 83 ec 10          	sub    $0x10,%rsp
  2185c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2185c8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  2185cd:	31 c0                	xor    %eax,%eax
  2185cf:	24 01                	and    $0x1,%al
  2185d1:	0f b6 c0             	movzbl %al,%eax
  2185d4:	48 83 c4 10          	add    $0x10,%rsp
  2185d8:	c3                   	retq   
  2185d9:	cc                   	int3   
  2185da:	cc                   	int3   
  2185db:	cc                   	int3   
  2185dc:	cc                   	int3   
  2185dd:	cc                   	int3   
  2185de:	cc                   	int3   
  2185df:	cc                   	int3   

00000000002185e0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17h2de79af78304e972E>:
    fn log(&self, _: &Record) {}
  2185e0:	48 83 ec 10          	sub    $0x10,%rsp
  2185e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2185e8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2185ed:	48 83 c4 10          	add    $0x10,%rsp
  2185f1:	c3                   	retq   
  2185f2:	cc                   	int3   
  2185f3:	cc                   	int3   
  2185f4:	cc                   	int3   
  2185f5:	cc                   	int3   
  2185f6:	cc                   	int3   
  2185f7:	cc                   	int3   
  2185f8:	cc                   	int3   
  2185f9:	cc                   	int3   
  2185fa:	cc                   	int3   
  2185fb:	cc                   	int3   
  2185fc:	cc                   	int3   
  2185fd:	cc                   	int3   
  2185fe:	cc                   	int3   
  2185ff:	cc                   	int3   

0000000000218600 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h85912e3b490f95beE>:
    fn flush(&self) {}
  218600:	50                   	push   %rax
  218601:	48 89 3c 24          	mov    %rdi,(%rsp)
  218605:	58                   	pop    %rax
  218606:	c3                   	retq   
  218607:	cc                   	int3   
  218608:	cc                   	int3   
  218609:	cc                   	int3   
  21860a:	cc                   	int3   
  21860b:	cc                   	int3   
  21860c:	cc                   	int3   
  21860d:	cc                   	int3   
  21860e:	cc                   	int3   
  21860f:	cc                   	int3   

0000000000218610 <_ZN3log10set_logger17ha1c2327ac82037ebE>:
/// # }
/// ```
///
/// [`set_logger_racy`]: fn.set_logger_racy.html
#[cfg(atomic_cas)]
pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {
  218610:	48 83 ec 28          	sub    $0x28,%rsp
  218614:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218619:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    set_logger_inner(|| logger)
  21861e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  218623:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  218628:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21862d:	e8 2e 00 00 00       	callq  218660 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>
  218632:	88 44 24 0f          	mov    %al,0xf(%rsp)
  218636:	8a 44 24 0f          	mov    0xf(%rsp),%al
}
  21863a:	24 01                	and    $0x1,%al
  21863c:	0f b6 c0             	movzbl %al,%eax
  21863f:	48 83 c4 28          	add    $0x28,%rsp
  218643:	c3                   	retq   
  218644:	cc                   	int3   
  218645:	cc                   	int3   
  218646:	cc                   	int3   
  218647:	cc                   	int3   
  218648:	cc                   	int3   
  218649:	cc                   	int3   
  21864a:	cc                   	int3   
  21864b:	cc                   	int3   
  21864c:	cc                   	int3   
  21864d:	cc                   	int3   
  21864e:	cc                   	int3   
  21864f:	cc                   	int3   

0000000000218650 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>:
    set_logger_inner(|| logger)
  218650:	50                   	push   %rax
  218651:	48 89 3c 24          	mov    %rdi,(%rsp)
  218655:	48 8b 07             	mov    (%rdi),%rax
  218658:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  21865c:	59                   	pop    %rcx
  21865d:	c3                   	retq   
  21865e:	cc                   	int3   
  21865f:	cc                   	int3   

0000000000218660 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>:

#[cfg(atomic_cas)]
fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
  218660:	48 83 ec 68          	sub    $0x68,%rsp
  218664:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  218669:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
where
    F: FnOnce() -> &'static dyn Log,
{
    let old_state = match STATE.compare_exchange(
  21866e:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  218673:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
        UNINITIALIZED,
        INITIALIZING,
        Ordering::SeqCst,
  218678:	c6 44 24 46 04       	movb   $0x4,0x46(%rsp)
        Ordering::SeqCst,
  21867d:	c6 44 24 47 04       	movb   $0x4,0x47(%rsp)
    let old_state = match STATE.compare_exchange(
  218682:	44 0f b6 44 24 47    	movzbl 0x47(%rsp),%r8d
  218688:	0f b6 4c 24 46       	movzbl 0x46(%rsp),%ecx
  21868d:	48 8d 3d 84 f3 00 00 	lea    0xf384(%rip),%rdi        # 227a18 <_ZN3log5STATE17hb7f15395e9efabeeE>
  218694:	31 c0                	xor    %eax,%eax
  218696:	89 c6                	mov    %eax,%esi
  218698:	ba 01 00 00 00       	mov    $0x1,%edx
  21869d:	e8 1e 09 00 00       	callq  218fc0 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>
  2186a2:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2186a7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2186ac:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2186b1:	48 85 c0             	test   %rax,%rax
  2186b4:	74 06                	je     2186bc <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x5c>
  2186b6:	eb 00                	jmp    2186b8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x58>
  2186b8:	eb 0e                	jmp    2186c8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x68>
  2186ba:	0f 0b                	ud2    
    ) {
        Ok(s) | Err(s) => s,
  2186bc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2186c1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    let old_state = match STATE.compare_exchange(
  2186c6:	eb 0a                	jmp    2186d2 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x72>
        Ok(s) | Err(s) => s,
  2186c8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2186cd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2186d2:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2186d7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2186dc:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };
    match old_state {
  2186e1:	48 85 c0             	test   %rax,%rax
  2186e4:	74 16                	je     2186fc <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x9c>
  2186e6:	eb 00                	jmp    2186e8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x88>
  2186e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2186ed:	48 83 e8 01          	sub    $0x1,%rax
  2186f1:	74 24                	je     218717 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  2186f3:	eb 00                	jmp    2186f5 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x95>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
                std::sync::atomic::spin_loop_hint();
            }
            Err(SetLoggerError(()))
        }
        _ => Err(SetLoggerError(())),
  2186f5:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  2186fa:	eb 37                	jmp    218733 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
  2186fc:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                LOGGER = make_logger();
  218701:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  218706:	e8 45 ff ff ff       	callq  218650 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>
  21870b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218710:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218715:	eb 3d                	jmp    218754 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xf4>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  218717:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  21871c:	48 8d 3d f5 f2 00 00 	lea    0xf2f5(%rip),%rdi        # 227a18 <_ZN3log5STATE17hb7f15395e9efabeeE>
  218723:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  218728:	e8 13 09 00 00       	callq  219040 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  21872d:	48 89 04 24          	mov    %rax,(%rsp)
  218731:	eb 09                	jmp    21873c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xdc>
    }
}
  218733:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  218738:	75 62                	jne    21879c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x13c>
  21873a:	eb 52                	jmp    21878e <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  21873c:	48 8b 04 24          	mov    (%rsp),%rax
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  218740:	48 83 f8 01          	cmp    $0x1,%rax
  218744:	74 07                	je     21874d <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xed>
            Err(SetLoggerError(()))
  218746:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  21874b:	eb e6                	jmp    218733 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
                std::sync::atomic::spin_loop_hint();
  21874d:	e8 ce 0a 00 00       	callq  219220 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>
  218752:	eb c3                	jmp    218717 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  218754:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218759:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                LOGGER = make_logger();
  21875e:	48 89 0d f3 90 00 00 	mov    %rcx,0x90f3(%rip)        # 221858 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  218765:	48 89 05 f4 90 00 00 	mov    %rax,0x90f4(%rip)        # 221860 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
            STATE.store(INITIALIZED, Ordering::SeqCst);
  21876c:	c6 44 24 55 04       	movb   $0x4,0x55(%rsp)
  218771:	48 8d 3d a0 f2 00 00 	lea    0xf2a0(%rip),%rdi        # 227a18 <_ZN3log5STATE17hb7f15395e9efabeeE>
  218778:	be 02 00 00 00       	mov    $0x2,%esi
  21877d:	0f b6 54 24 55       	movzbl 0x55(%rsp),%edx
  218782:	e8 f9 08 00 00       	callq  219080 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>
            Ok(())
  218787:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  21878c:	eb a5                	jmp    218733 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
}
  21878e:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  218792:	24 01                	and    $0x1,%al
  218794:	0f b6 c0             	movzbl %al,%eax
  218797:	48 83 c4 68          	add    $0x68,%rsp
  21879b:	c3                   	retq   
  21879c:	eb f0                	jmp    21878e <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  21879e:	cc                   	int3   
  21879f:	cc                   	int3   

00000000002187a0 <_ZN3log6logger17hb619d971bb0802d6E>:
impl error::Error for ParseLevelError {}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static dyn Log {
  2187a0:	48 83 ec 28          	sub    $0x28,%rsp
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  2187a4:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  2187a9:	48 8d 3d 68 f2 00 00 	lea    0xf268(%rip),%rdi        # 227a18 <_ZN3log5STATE17hb7f15395e9efabeeE>
  2187b0:	0f b6 74 24 27       	movzbl 0x27(%rsp),%esi
  2187b5:	e8 86 08 00 00       	callq  219040 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  2187ba:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2187bf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2187c4:	48 83 f8 02          	cmp    $0x2,%rax
  2187c8:	75 1a                	jne    2187e4 <_ZN3log6logger17hb619d971bb0802d6E+0x44>
        static NOP: NopLogger = NopLogger;
        &NOP
    } else {
        unsafe { LOGGER }
  2187ca:	48 8b 0d 87 90 00 00 	mov    0x9087(%rip),%rcx        # 221858 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  2187d1:	48 8b 05 88 90 00 00 	mov    0x9088(%rip),%rax        # 221860 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
  2187d8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2187dd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  2187e2:	eb 18                	jmp    2187fc <_ZN3log6logger17hb619d971bb0802d6E+0x5c>
        &NOP
  2187e4:	48 8d 05 a4 90 fe ff 	lea    -0x16f5c(%rip),%rax        # 20188f <_ZN3log6logger3NOP17ha8b888e78aa907e8E>
  2187eb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2187f0:	48 8d 05 f1 79 00 00 	lea    0x79f1(%rip),%rax        # 2201e8 <memset+0x2728>
  2187f7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  2187fc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218801:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    }
}
  218806:	48 83 c4 28          	add    $0x28,%rsp
  21880a:	c3                   	retq   
  21880b:	cc                   	int3   
  21880c:	cc                   	int3   
  21880d:	cc                   	int3   
  21880e:	cc                   	int3   
  21880f:	cc                   	int3   

0000000000218810 <_ZN3log17__private_api_log17ha4b636ffcba62793E>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
  218810:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  218817:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21881c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  218821:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  218826:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  21882d:	00 
  21882e:	48 89 94 24 f8 01 00 	mov    %rdx,0x1f8(%rsp)
  218835:	00 
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
  218836:	48 8b 0a             	mov    (%rdx),%rcx
  218839:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21883e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  218842:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218847:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  21884e:	00 
  21884f:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  218856:	00 
  218857:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  21885b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  218860:	48 8b 42 18          	mov    0x18(%rdx),%rax
  218864:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  218869:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  218870:	00 
  218871:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  218878:	00 
  218879:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  21887d:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  218882:	48 8b 42 28          	mov    0x28(%rdx),%rax
  218886:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21888b:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  218892:	00 
  218893:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  21889a:	00 
  21889b:	8b 42 30             	mov    0x30(%rdx),%eax
  21889e:	89 84 24 84 00 00 00 	mov    %eax,0x84(%rsp)
  2188a5:	89 84 24 34 02 00 00 	mov    %eax,0x234(%rsp)
) {
    logger().log(
  2188ac:	e8 ef fe ff ff       	callq  2187a0 <_ZN3log6logger17hb619d971bb0802d6E>
  2188b1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2188b8:	00 
  2188b9:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2188c0:	00 
        &Record::builder()
  2188c1:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  2188c8:	00 
  2188c9:	e8 82 f9 ff ff       	callq  218250 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>
  2188ce:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
            .args(args)
  2188d3:	48 8d bc 24 98 01 00 	lea    0x198(%rsp),%rdi
  2188da:	00 
  2188db:	ba 30 00 00 00       	mov    $0x30,%edx
  2188e0:	e8 bb 51 00 00       	callq  21daa0 <memcpy>
        &Record::builder()
  2188e5:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  2188ec:	00 
  2188ed:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  2188f4:	00 
  2188f5:	e8 c6 fa ff ff       	callq  2183c0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>
  2188fa:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2188ff:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  218904:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  218909:	e8 f2 fa ff ff       	callq  218400 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>
  21890e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  218913:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  218918:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21891d:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  218922:	e8 f9 fa ff ff       	callq  218420 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>
  218927:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21892c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  218931:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  218936:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
  21893b:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  218942:	00 
  218943:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  21894a:	00 
        &Record::builder()
  21894b:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
  218952:	00 
  218953:	48 8b 94 24 d0 01 00 	mov    0x1d0(%rsp),%rdx
  21895a:	00 
  21895b:	e8 f0 fa ff ff       	callq  218450 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>
  218960:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  218965:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21896a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21896f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            .file_static(Some(file))
  218974:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  21897b:	00 
  21897c:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  218983:	00 
        &Record::builder()
  218984:	48 8b b4 24 d8 01 00 	mov    0x1d8(%rsp),%rsi
  21898b:	00 
  21898c:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  218993:	00 
  218994:	e8 07 fb ff ff       	callq  2184a0 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>
  218999:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21899e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2189a3:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
            .line(Some(line))
  2189aa:	89 84 24 ec 01 00 00 	mov    %eax,0x1ec(%rsp)
  2189b1:	c7 84 24 e8 01 00 00 	movl   $0x1,0x1e8(%rsp)
  2189b8:	01 00 00 00 
        &Record::builder()
  2189bc:	8b b4 24 e8 01 00 00 	mov    0x1e8(%rsp),%esi
  2189c3:	8b 94 24 ec 01 00 00 	mov    0x1ec(%rsp),%edx
  2189ca:	e8 21 fb ff ff       	callq  2184f0 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>
  2189cf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2189d4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2189d9:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  2189e0:	00 
  2189e1:	e8 2a fb ff ff       	callq  218510 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>
  2189e6:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2189ed:	00 
  2189ee:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  2189f5:	00 
    logger().log(
  2189f6:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  2189fd:	00 
  2189fe:	ff 50 28             	callq  *0x28(%rax)
            .build(),
    );
}
  218a01:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  218a08:	c3                   	retq   
  218a09:	cc                   	int3   
  218a0a:	cc                   	int3   
  218a0b:	cc                   	int3   
  218a0c:	cc                   	int3   
  218a0d:	cc                   	int3   
  218a0e:	cc                   	int3   
  218a0f:	cc                   	int3   

0000000000218a10 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>:
    Static(&'static str),
  218a10:	48 83 ec 10          	sub    $0x10,%rsp
  218a14:	48 89 f8             	mov    %rdi,%rax
  218a17:	48 89 34 24          	mov    %rsi,(%rsp)
  218a1b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  218a20:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  218a24:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  218a28:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  218a2f:	48 83 c4 10          	add    $0x10,%rsp
  218a33:	c3                   	retq   
  218a34:	cc                   	int3   
  218a35:	cc                   	int3   
  218a36:	cc                   	int3   
  218a37:	cc                   	int3   
  218a38:	cc                   	int3   
  218a39:	cc                   	int3   
  218a3a:	cc                   	int3   
  218a3b:	cc                   	int3   
  218a3c:	cc                   	int3   
  218a3d:	cc                   	int3   
  218a3e:	cc                   	int3   
  218a3f:	cc                   	int3   

0000000000218a40 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  218a40:	50                   	push   %rax
  218a41:	48 89 f8             	mov    %rdi,%rax
  218a44:	48 89 34 24          	mov    %rsi,(%rsp)
  218a48:	48 8b 0e             	mov    (%rsi),%rcx
  218a4b:	48 89 0f             	mov    %rcx,(%rdi)
  218a4e:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  218a52:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  218a56:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  218a5a:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  218a5e:	59                   	pop    %rcx
  218a5f:	c3                   	retq   

0000000000218a60 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>:
#[derive(Clone, Debug)]
  218a60:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  218a67:	48 89 f0             	mov    %rsi,%rax
  218a6a:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218a6f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218a74:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  218a7b:	00 
    metadata: Metadata<'a>,
  218a7c:	48 89 c6             	mov    %rax,%rsi
  218a7f:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  218a86:	00 
    args: fmt::Arguments<'a>,
  218a87:	48 89 c1             	mov    %rax,%rcx
  218a8a:	48 83 c1 18          	add    $0x18,%rcx
  218a8e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  218a93:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  218a9a:	00 
    module_path: Option<MaybeStaticStr<'a>>,
  218a9b:	48 89 c1             	mov    %rax,%rcx
  218a9e:	48 83 c1 48          	add    $0x48,%rcx
  218aa2:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  218aa7:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  218aae:	00 
    file: Option<MaybeStaticStr<'a>>,
  218aaf:	48 89 c1             	mov    %rax,%rcx
  218ab2:	48 83 c1 60          	add    $0x60,%rcx
  218ab6:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  218abb:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  218ac2:	00 
    line: Option<u32>,
  218ac3:	48 83 c0 78          	add    $0x78,%rax
  218ac7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  218acc:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  218ad3:	00 
    metadata: Metadata<'a>,
  218ad4:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  218ad9:	e8 e2 00 00 00       	callq  218bc0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  218ade:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    args: fmt::Arguments<'a>,
  218ae3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  218ae8:	e8 63 0c 00 00       	callq  219750 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>
  218aed:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    module_path: Option<MaybeStaticStr<'a>>,
  218af2:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  218af9:	00 
  218afa:	e8 41 04 00 00       	callq  218f40 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  218aff:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    file: Option<MaybeStaticStr<'a>>,
  218b04:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  218b0b:	00 
  218b0c:	e8 2f 04 00 00       	callq  218f40 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  218b11:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    line: Option<u32>,
  218b16:	e8 c5 03 00 00       	callq  218ee0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>
  218b1b:	89 44 24 08          	mov    %eax,0x8(%rsp)
  218b1f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  218b23:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
#[derive(Clone, Debug)]
  218b28:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  218b2d:	48 89 07             	mov    %rax,(%rdi)
  218b30:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  218b35:	48 89 47 08          	mov    %rax,0x8(%rdi)
  218b39:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  218b3e:	48 89 47 10          	mov    %rax,0x10(%rdi)
  218b42:	48 83 c7 18          	add    $0x18,%rdi
  218b46:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  218b4b:	ba 30 00 00 00       	mov    $0x30,%edx
  218b50:	e8 4b 4f 00 00       	callq  21daa0 <memcpy>
  218b55:	8b 74 24 08          	mov    0x8(%rsp),%esi
  218b59:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  218b5d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218b62:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  218b67:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  218b6e:	00 
  218b6f:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  218b73:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  218b7a:	00 
  218b7b:	48 89 79 50          	mov    %rdi,0x50(%rcx)
  218b7f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  218b86:	00 
  218b87:	48 89 79 58          	mov    %rdi,0x58(%rcx)
  218b8b:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  218b92:	00 
  218b93:	48 89 79 60          	mov    %rdi,0x60(%rcx)
  218b97:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  218b9e:	00 
  218b9f:	48 89 79 68          	mov    %rdi,0x68(%rcx)
  218ba3:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  218baa:	00 
  218bab:	48 89 79 70          	mov    %rdi,0x70(%rcx)
  218baf:	89 71 78             	mov    %esi,0x78(%rcx)
  218bb2:	89 51 7c             	mov    %edx,0x7c(%rcx)
  218bb5:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  218bbc:	c3                   	retq   
  218bbd:	cc                   	int3   
  218bbe:	cc                   	int3   
  218bbf:	cc                   	int3   

0000000000218bc0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  218bc0:	48 83 ec 48          	sub    $0x48,%rsp
  218bc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218bc9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218bce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    level: Level,
  218bd3:	48 89 f7             	mov    %rsi,%rdi
  218bd6:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
    target: &'a str,
  218bdb:	48 83 c6 08          	add    $0x8,%rsi
  218bdf:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  218be4:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
    level: Level,
  218be9:	e8 a2 f5 ff ff       	callq  218190 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>
  218bee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  218bf3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    target: &'a str,
  218bf8:	e8 13 0c 00 00       	callq  219810 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>
  218bfd:	48 89 04 24          	mov    %rax,(%rsp)
  218c01:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  218c06:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  218c0b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218c10:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  218c15:	48 8b 34 24          	mov    (%rsp),%rsi
  218c19:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  218c1e:	48 89 39             	mov    %rdi,(%rcx)
  218c21:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  218c25:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  218c29:	48 83 c4 48          	add    $0x48,%rsp
  218c2d:	c3                   	retq   
  218c2e:	cc                   	int3   
  218c2f:	cc                   	int3   

0000000000218c30 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>:
    ///
    /// assert_eq!(v_copied, vec![1, 2, 3]);
    /// assert_eq!(v_map, vec![1, 2, 3]);
    /// ```
    #[stable(feature = "iter_copied", since = "1.36.0")]
    fn copied<'a, T: 'a>(self) -> Copied<Self>
  218c30:	48 83 ec 28          	sub    $0x28,%rsp
  218c34:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218c39:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Copy,
    {
        Copied::new(self)
  218c3e:	e8 1d 01 00 00       	callq  218d60 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>
  218c43:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218c48:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218c4d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  218c52:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  218c57:	48 83 c4 28          	add    $0x28,%rsp
  218c5b:	c3                   	retq   
  218c5c:	cc                   	int3   
  218c5d:	cc                   	int3   
  218c5e:	cc                   	int3   
  218c5f:	cc                   	int3   

0000000000218c60 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
  218c60:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  218c67:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  218c6c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  218c71:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  218c76:	e8 45 01 00 00       	callq  218dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  218c7b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  218c80:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  218c85:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            assume(!ptr.is_null());
  218c8a:	e8 c1 0b 00 00       	callq  219850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
            let end = if mem::size_of::<T>() == 0 {
  218c8f:	eb 00                	jmp    218c91 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x31>
  218c91:	b8 01 00 00 00       	mov    $0x1,%eax
  218c96:	48 83 f8 00          	cmp    $0x0,%rax
  218c9a:	75 32                	jne    218cce <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x6e>
  218c9c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  218ca1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  218ca6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  218cab:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  218cb0:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  218cb5:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        unsafe { intrinsics::arith_offset(self, count) }
  218cba:	48 01 c8             	add    %rcx,%rax
  218cbd:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  218cc2:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  218cc7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  218ccc:	eb 55                	jmp    218d23 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xc3>
  218cce:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  218cd3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  218cd8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  218cdf:	00 
  218ce0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  218ce7:	00 
  218ce8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  218cef:	00 
  218cf0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  218cf7:	00 
        unsafe { intrinsics::offset(self, count) }
  218cf8:	48 01 c8             	add    %rcx,%rax
  218cfb:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  218d02:	00 
  218d03:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  218d0a:	00 
                ptr.add(slice.len())
  218d0b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  218d10:	eb 00                	jmp    218d12 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  218d12:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  218d17:	e8 c4 00 00 00       	callq  218de0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  218d1c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218d21:	eb 0c                	jmp    218d2f <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xcf>
  218d23:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  218d28:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  218d2d:	eb e3                	jmp    218d12 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  218d2f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  218d34:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  218d39:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  218d3e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  218d43:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  218d48:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  218d4d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  218d54:	c3                   	retq   
  218d55:	cc                   	int3   
  218d56:	cc                   	int3   
  218d57:	cc                   	int3   
  218d58:	cc                   	int3   
  218d59:	cc                   	int3   
  218d5a:	cc                   	int3   
  218d5b:	cc                   	int3   
  218d5c:	cc                   	int3   
  218d5d:	cc                   	int3   
  218d5e:	cc                   	int3   
  218d5f:	cc                   	int3   

0000000000218d60 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
  218d60:	48 83 ec 20          	sub    $0x20,%rsp
  218d64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218d69:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Copied { it }
  218d6e:	48 89 3c 24          	mov    %rdi,(%rsp)
  218d72:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  218d77:	48 8b 04 24          	mov    (%rsp),%rax
  218d7b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  218d80:	48 83 c4 20          	add    $0x20,%rsp
  218d84:	c3                   	retq   
  218d85:	cc                   	int3   
  218d86:	cc                   	int3   
  218d87:	cc                   	int3   
  218d88:	cc                   	int3   
  218d89:	cc                   	int3   
  218d8a:	cc                   	int3   
  218d8b:	cc                   	int3   
  218d8c:	cc                   	int3   
  218d8d:	cc                   	int3   
  218d8e:	cc                   	int3   
  218d8f:	cc                   	int3   

0000000000218d90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>:
    pub fn iter(&self) -> Iter<'_, T> {
  218d90:	48 83 ec 28          	sub    $0x28,%rsp
  218d94:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218d99:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  218d9e:	e8 bd fe ff ff       	callq  218c60 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>
  218da3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218da8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218dad:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  218db2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  218db7:	48 83 c4 28          	add    $0x28,%rsp
  218dbb:	c3                   	retq   
  218dbc:	cc                   	int3   
  218dbd:	cc                   	int3   
  218dbe:	cc                   	int3   
  218dbf:	cc                   	int3   

0000000000218dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>:
    pub const fn as_ptr(&self) -> *const T {
  218dc0:	48 83 ec 10          	sub    $0x10,%rsp
  218dc4:	48 89 f8             	mov    %rdi,%rax
  218dc7:	48 89 04 24          	mov    %rax,(%rsp)
  218dcb:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  218dd0:	48 83 c4 10          	add    $0x10,%rsp
  218dd4:	c3                   	retq   
  218dd5:	cc                   	int3   
  218dd6:	cc                   	int3   
  218dd7:	cc                   	int3   
  218dd8:	cc                   	int3   
  218dd9:	cc                   	int3   
  218dda:	cc                   	int3   
  218ddb:	cc                   	int3   
  218ddc:	cc                   	int3   
  218ddd:	cc                   	int3   
  218dde:	cc                   	int3   
  218ddf:	cc                   	int3   

0000000000218de0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  218de0:	48 83 ec 10          	sub    $0x10,%rsp
  218de4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  218de9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  218ded:	48 8b 04 24          	mov    (%rsp),%rax
  218df1:	48 83 c4 10          	add    $0x10,%rsp
  218df5:	c3                   	retq   
  218df6:	cc                   	int3   
  218df7:	cc                   	int3   
  218df8:	cc                   	int3   
  218df9:	cc                   	int3   
  218dfa:	cc                   	int3   
  218dfb:	cc                   	int3   
  218dfc:	cc                   	int3   
  218dfd:	cc                   	int3   
  218dfe:	cc                   	int3   
  218dff:	cc                   	int3   

0000000000218e00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>:
    pub const fn as_ptr(self) -> *mut T {
  218e00:	50                   	push   %rax
  218e01:	48 89 f8             	mov    %rdi,%rax
  218e04:	48 89 04 24          	mov    %rax,(%rsp)
    }
  218e08:	59                   	pop    %rcx
  218e09:	c3                   	retq   
  218e0a:	cc                   	int3   
  218e0b:	cc                   	int3   
  218e0c:	cc                   	int3   
  218e0d:	cc                   	int3   
  218e0e:	cc                   	int3   
  218e0f:	cc                   	int3   

0000000000218e10 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>:
    fn into_iter(self) -> I {
  218e10:	48 83 ec 10          	sub    $0x10,%rsp
  218e14:	48 89 f2             	mov    %rsi,%rdx
  218e17:	48 89 f8             	mov    %rdi,%rax
  218e1a:	48 89 04 24          	mov    %rax,(%rsp)
  218e1e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  218e23:	48 83 c4 10          	add    $0x10,%rsp
  218e27:	c3                   	retq   
  218e28:	cc                   	int3   
  218e29:	cc                   	int3   
  218e2a:	cc                   	int3   
  218e2b:	cc                   	int3   
  218e2c:	cc                   	int3   
  218e2d:	cc                   	int3   
  218e2e:	cc                   	int3   
  218e2f:	cc                   	int3   

0000000000218e30 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  218e30:	48 83 ec 68          	sub    $0x68,%rsp
  218e34:	48 89 3c 24          	mov    %rdi,(%rsp)
  218e38:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  218e3d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  218e42:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
        match self {
  218e47:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  218e4c:	c6 44 24 4f 01       	movb   $0x1,0x4f(%rsp)
  218e51:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218e56:	48 85 c0             	test   %rax,%rax
  218e59:	0f 95 c0             	setne  %al
  218e5c:	0f b6 c0             	movzbl %al,%eax
  218e5f:	74 06                	je     218e67 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x37>
  218e61:	eb 00                	jmp    218e63 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x33>
  218e63:	eb 0f                	jmp    218e74 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x44>
  218e65:	0f 0b                	ud2    
  218e67:	48 8b 04 24          	mov    (%rsp),%rax
            None => None,
  218e6b:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  218e72:	eb 55                	jmp    218ec9 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x99>
            Some(x) => Some(f(x)),
  218e74:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  218e79:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  218e7e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  218e83:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  218e88:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  218e8d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  218e92:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  218e97:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  218e9c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  218ea1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  218ea6:	e8 d5 08 00 00       	callq  219780 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>
  218eab:	48 8b 04 24          	mov    (%rsp),%rax
  218eaf:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  218eb4:	48 89 08             	mov    %rcx,(%rax)
  218eb7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  218ebc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  218ec0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  218ec5:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  218ec9:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  218ece:	75 0a                	jne    218eda <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xaa>
  218ed0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  218ed5:	48 83 c4 68          	add    $0x68,%rsp
  218ed9:	c3                   	retq   
  218eda:	eb f4                	jmp    218ed0 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xa0>
  218edc:	cc                   	int3   
  218edd:	cc                   	int3   
  218ede:	cc                   	int3   
  218edf:	cc                   	int3   

0000000000218ee0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>:
    fn clone(&self) -> Self {
  218ee0:	48 83 ec 28          	sub    $0x28,%rsp
  218ee4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  218ee9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  218eee:	8b 07                	mov    (%rdi),%eax
  218ef0:	48 85 c0             	test   %rax,%rax
  218ef3:	74 06                	je     218efb <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x1b>
  218ef5:	eb 00                	jmp    218ef7 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x17>
  218ef7:	eb 0c                	jmp    218f05 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x25>
  218ef9:	0f 0b                	ud2    
            None => None,
  218efb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  218f02:	00 
  218f03:	eb 27                	jmp    218f2c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x4c>
  218f05:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(x) => Some(x.clone()),
  218f0a:	48 83 c7 04          	add    $0x4,%rdi
  218f0e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  218f13:	e8 e8 08 00 00       	callq  219800 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>
  218f18:	89 44 24 04          	mov    %eax,0x4(%rsp)
  218f1c:	8b 44 24 04          	mov    0x4(%rsp),%eax
  218f20:	89 44 24 14          	mov    %eax,0x14(%rsp)
  218f24:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%rsp)
  218f2b:	00 
    }
  218f2c:	8b 44 24 10          	mov    0x10(%rsp),%eax
  218f30:	8b 54 24 14          	mov    0x14(%rsp),%edx
  218f34:	48 83 c4 28          	add    $0x28,%rsp
  218f38:	c3                   	retq   
  218f39:	cc                   	int3   
  218f3a:	cc                   	int3   
  218f3b:	cc                   	int3   
  218f3c:	cc                   	int3   
  218f3d:	cc                   	int3   
  218f3e:	cc                   	int3   
  218f3f:	cc                   	int3   

0000000000218f40 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>:
    fn clone(&self) -> Self {
  218f40:	48 83 ec 48          	sub    $0x48,%rsp
  218f44:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  218f49:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218f4e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  218f53:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        match self {
  218f58:	48 8b 06             	mov    (%rsi),%rax
  218f5b:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  218f5f:	0f 95 c0             	setne  %al
  218f62:	0f b6 c0             	movzbl %al,%eax
  218f65:	74 06                	je     218f6d <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x2d>
  218f67:	eb 00                	jmp    218f69 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x29>
  218f69:	eb 10                	jmp    218f7b <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x3b>
  218f6b:	0f 0b                	ud2    
  218f6d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  218f72:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  218f79:	eb 33                	jmp    218fae <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x6e>
  218f7b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            Some(x) => Some(x.clone()),
  218f80:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  218f85:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  218f8a:	e8 b1 fa ff ff       	callq  218a40 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>
  218f8f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218f94:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  218f99:	48 89 08             	mov    %rcx,(%rax)
  218f9c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  218fa1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  218fa5:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  218faa:	48 89 48 10          	mov    %rcx,0x10(%rax)
  218fae:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  218fb3:	48 83 c4 48          	add    $0x48,%rsp
  218fb7:	c3                   	retq   
  218fb8:	cc                   	int3   
  218fb9:	cc                   	int3   
  218fba:	cc                   	int3   
  218fbb:	cc                   	int3   
  218fbc:	cc                   	int3   
  218fbd:	cc                   	int3   
  218fbe:	cc                   	int3   
  218fbf:	cc                   	int3   

0000000000218fc0 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>:
            pub fn compare_exchange(&self,
  218fc0:	48 83 ec 58          	sub    $0x58,%rsp
  218fc4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218fc9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  218fce:	44 88 c0             	mov    %r8b,%al
  218fd1:	88 44 24 26          	mov    %al,0x26(%rsp)
  218fd5:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  218fd9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  218fde:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  218fe3:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  218fe8:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  218fec:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  218ff0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  218ff5:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  218ffa:	8a 44 24 26          	mov    0x26(%rsp),%al
  218ffe:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  219002:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  219007:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21900c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  219011:	0f b6 c9             	movzbl %cl,%ecx
  219014:	44 0f b6 c0          	movzbl %al,%r8d
  219018:	e8 13 02 00 00       	callq  219230 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  21901d:	48 89 04 24          	mov    %rax,(%rsp)
  219021:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  219026:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21902b:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21902f:	48 83 c4 58          	add    $0x58,%rsp
  219033:	c3                   	retq   
  219034:	cc                   	int3   
  219035:	cc                   	int3   
  219036:	cc                   	int3   
  219037:	cc                   	int3   
  219038:	cc                   	int3   
  219039:	cc                   	int3   
  21903a:	cc                   	int3   
  21903b:	cc                   	int3   
  21903c:	cc                   	int3   
  21903d:	cc                   	int3   
  21903e:	cc                   	int3   
  21903f:	cc                   	int3   

0000000000219040 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  219040:	48 83 ec 38          	sub    $0x38,%rsp
  219044:	40 88 f0             	mov    %sil,%al
  219047:	88 44 24 17          	mov    %al,0x17(%rsp)
  21904b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  219050:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  219054:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  219059:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21905e:	8a 44 24 17          	mov    0x17(%rsp),%al
  219062:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  219067:	0f b6 f0             	movzbl %al,%esi
  21906a:	e8 51 00 00 00       	callq  2190c0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  21906f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219074:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  219079:	48 83 c4 38          	add    $0x38,%rsp
  21907d:	c3                   	retq   
  21907e:	cc                   	int3   
  21907f:	cc                   	int3   

0000000000219080 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  219080:	48 83 ec 38          	sub    $0x38,%rsp
  219084:	48 89 34 24          	mov    %rsi,(%rsp)
  219088:	88 d0                	mov    %dl,%al
  21908a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21908e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  219093:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  219098:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21909c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2190a1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2190a6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2190aa:	48 8b 34 24          	mov    (%rsp),%rsi
  2190ae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  2190b3:	0f b6 d0             	movzbl %al,%edx
  2190b6:	e8 b5 00 00 00       	callq  219170 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  2190bb:	48 83 c4 38          	add    $0x38,%rsp
  2190bf:	c3                   	retq   

00000000002190c0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  2190c0:	48 83 ec 28          	sub    $0x28,%rsp
  2190c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2190c8:	40 88 f0             	mov    %sil,%al
  2190cb:	88 44 24 17          	mov    %al,0x17(%rsp)
  2190cf:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  2190d4:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  2190d9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2190de:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2190e3:	48 8d 0d a6 87 fe ff 	lea    -0x1785a(%rip),%rcx        # 201890 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1>
  2190ea:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2190ee:	48 01 c8             	add    %rcx,%rax
  2190f1:	ff e0                	jmpq   *%rax
  2190f3:	0f 0b                	ud2    
  2190f5:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  2190f9:	48 8b 00             	mov    (%rax),%rax
  2190fc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219101:	eb 5c                	jmp    21915f <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  219103:	48 8d 3d 6b 88 fe ff 	lea    -0x17795(%rip),%rdi        # 201975 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0xe6>
  21910a:	48 8d 15 9f 71 00 00 	lea    0x719f(%rip),%rdx        # 2202b0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x90>
  219111:	be 28 00 00 00       	mov    $0x28,%esi
  219116:	e8 15 1f 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21911b:	0f 0b                	ud2    
  21911d:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  219121:	48 8b 00             	mov    (%rax),%rax
  219124:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219129:	eb 32                	jmp    21915d <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  21912b:	48 8d 3d 9a 87 fe ff 	lea    -0x17866(%rip),%rdi        # 2018cc <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x3d>
  219132:	48 8d 15 5f 71 00 00 	lea    0x715f(%rip),%rdx        # 220298 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x78>
  219139:	be 31 00 00 00       	mov    $0x31,%esi
  21913e:	e8 ed 1e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219143:	0f 0b                	ud2    
  219145:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  219149:	48 8b 00             	mov    (%rax),%rax
  21914c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219151:	eb 00                	jmp    219153 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
}
  219153:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219158:	48 83 c4 28          	add    $0x28,%rsp
  21915c:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  21915d:	eb f4                	jmp    219153 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  21915f:	eb f2                	jmp    219153 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
  219161:	cc                   	int3   
  219162:	cc                   	int3   
  219163:	cc                   	int3   
  219164:	cc                   	int3   
  219165:	cc                   	int3   
  219166:	cc                   	int3   
  219167:	cc                   	int3   
  219168:	cc                   	int3   
  219169:	cc                   	int3   
  21916a:	cc                   	int3   
  21916b:	cc                   	int3   
  21916c:	cc                   	int3   
  21916d:	cc                   	int3   
  21916e:	cc                   	int3   
  21916f:	cc                   	int3   

0000000000219170 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  219170:	48 83 ec 38          	sub    $0x38,%rsp
  219174:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  219179:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21917e:	88 d0                	mov    %dl,%al
  219180:	88 44 24 27          	mov    %al,0x27(%rsp)
  219184:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  219189:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  21918e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  219193:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219198:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21919d:	48 8d 0d 00 87 fe ff 	lea    -0x17900(%rip),%rcx        # 2018a4 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x15>
  2191a4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2191a8:	48 01 c8             	add    %rcx,%rax
  2191ab:	ff e0                	jmpq   *%rax
  2191ad:	0f 0b                	ud2    
  2191af:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2191b4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  2191b9:	48 89 08             	mov    %rcx,(%rax)
  2191bc:	eb 59                	jmp    219217 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa7>
  2191be:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2191c3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  2191c8:	48 89 08             	mov    %rcx,(%rax)
  2191cb:	eb 48                	jmp    219215 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  2191cd:	48 8d 3d fb 87 fe ff 	lea    -0x17805(%rip),%rdi        # 2019cf <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x140>
  2191d4:	48 8d 15 05 71 00 00 	lea    0x7105(%rip),%rdx        # 2202e0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xc0>
  2191db:	be 2a 00 00 00       	mov    $0x2a,%esi
  2191e0:	e8 4b 1e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2191e5:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  2191e7:	48 8d 3d af 87 fe ff 	lea    -0x17851(%rip),%rdi        # 20199d <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x10e>
  2191ee:	48 8d 15 d3 70 00 00 	lea    0x70d3(%rip),%rdx        # 2202c8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xa8>
  2191f5:	be 32 00 00 00       	mov    $0x32,%esi
  2191fa:	e8 31 1e 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2191ff:	0f 0b                	ud2    
  219201:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  219206:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  21920b:	48 87 01             	xchg   %rax,(%rcx)
  21920e:	eb 00                	jmp    219210 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
}
  219210:	48 83 c4 38          	add    $0x38,%rsp
  219214:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  219215:	eb f9                	jmp    219210 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  219217:	eb f7                	jmp    219210 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
  219219:	cc                   	int3   
  21921a:	cc                   	int3   
  21921b:	cc                   	int3   
  21921c:	cc                   	int3   
  21921d:	cc                   	int3   
  21921e:	cc                   	int3   
  21921f:	cc                   	int3   

0000000000219220 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>:
pub fn spin_loop_hint() {
  219220:	50                   	push   %rax
    spin_loop()
  219221:	e8 ca 05 00 00       	callq  2197f0 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>
}
  219226:	58                   	pop    %rax
  219227:	c3                   	retq   
  219228:	cc                   	int3   
  219229:	cc                   	int3   
  21922a:	cc                   	int3   
  21922b:	cc                   	int3   
  21922c:	cc                   	int3   
  21922d:	cc                   	int3   
  21922e:	cc                   	int3   
  21922f:	cc                   	int3   

0000000000219230 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  219230:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  219237:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21923c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  219241:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  219246:	44 88 c0             	mov    %r8b,%al
  219249:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  21924e:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  219255:	00 
  219256:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21925d:	00 
  21925e:	88 8c 24 96 00 00 00 	mov    %cl,0x96(%rsp)
  219265:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
        match (success, failure) {
  21926c:	88 4c 24 70          	mov    %cl,0x70(%rsp)
  219270:	88 44 24 71          	mov    %al,0x71(%rsp)
  219274:	0f b6 44 24 70       	movzbl 0x70(%rsp),%eax
  219279:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21927e:	48 83 e8 04          	sub    $0x4,%rax
  219282:	77 15                	ja     219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  219284:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  219289:	48 8d 0d 28 86 fe ff 	lea    -0x179d8(%rip),%rcx        # 2018b8 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x29>
  219290:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  219294:	48 01 c8             	add    %rcx,%rax
  219297:	ff e0                	jmpq   *%rax
  219299:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  21929e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2192a3:	48 83 e8 01          	sub    $0x1,%rax
  2192a7:	0f 84 74 02 00 00    	je     219521 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2f1>
  2192ad:	eb 00                	jmp    2192af <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x7f>
  2192af:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2192b4:	48 83 e8 03          	sub    $0x3,%rax
  2192b8:	0f 84 7d 02 00 00    	je     21953b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x30b>
  2192be:	e9 44 02 00 00       	jmpq   219507 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2d7>
  2192c3:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2192c8:	48 83 f8 00          	cmp    $0x0,%rax
  2192cc:	0f 84 0e 02 00 00    	je     2194e0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2b0>
  2192d2:	eb c5                	jmp    219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2192d4:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2192d9:	48 83 f8 00          	cmp    $0x0,%rax
  2192dd:	0f 84 d3 01 00 00    	je     2194b6 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x286>
  2192e3:	eb b4                	jmp    219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2192e5:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2192ea:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2192ef:	48 85 c0             	test   %rax,%rax
  2192f2:	0f 84 68 01 00 00    	je     219460 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x230>
  2192f8:	eb 00                	jmp    2192fa <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xca>
  2192fa:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2192ff:	48 83 e8 02          	sub    $0x2,%rax
  219303:	0f 84 7e 01 00 00    	je     219487 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x257>
  219309:	eb 8e                	jmp    219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  21930b:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  219310:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219315:	48 85 c0             	test   %rax,%rax
  219318:	0f 84 ec 00 00 00    	je     21940a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1da>
  21931e:	eb 00                	jmp    219320 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xf0>
  219320:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219325:	48 83 e8 02          	sub    $0x2,%rax
  219329:	0f 84 02 01 00 00    	je     219431 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x201>
  21932f:	e9 65 ff ff ff       	jmpq   219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  219334:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  219339:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21933e:	48 85 c0             	test   %rax,%rax
  219341:	74 1f                	je     219362 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x132>
  219343:	eb 00                	jmp    219345 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x115>
  219345:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21934a:	48 83 e8 02          	sub    $0x2,%rax
  21934e:	74 39                	je     219389 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x159>
  219350:	eb 00                	jmp    219352 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x122>
  219352:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  219357:	48 83 e8 04          	sub    $0x4,%rax
  21935b:	74 53                	je     2193b0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x180>
  21935d:	e9 37 ff ff ff       	jmpq   219299 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  219362:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  219367:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21936c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  219371:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  219376:	48 89 c1             	mov    %rax,%rcx
  219379:	0f 94 c0             	sete   %al
  21937c:	24 01                	and    $0x1,%al
  21937e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219383:	88 44 24 68          	mov    %al,0x68(%rsp)
  219387:	eb 7f                	jmp    219408 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d8>
  219389:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21938e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219393:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  219398:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  21939d:	48 89 c1             	mov    %rax,%rcx
  2193a0:	0f 94 c0             	sete   %al
  2193a3:	24 01                	and    $0x1,%al
  2193a5:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2193aa:	88 44 24 68          	mov    %al,0x68(%rsp)
  2193ae:	eb 56                	jmp    219406 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d6>
  2193b0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2193b5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2193ba:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  2193bf:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2193c4:	48 89 c1             	mov    %rax,%rcx
  2193c7:	0f 94 c0             	sete   %al
  2193ca:	24 01                	and    $0x1,%al
  2193cc:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2193d1:	88 44 24 68          	mov    %al,0x68(%rsp)
  2193d5:	eb 00                	jmp    2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
    let (val, ok) = unsafe {
  2193d7:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2193dc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2193e1:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2193e8:	00 
  2193e9:	8a 44 24 68          	mov    0x68(%rsp),%al
  2193ed:	88 c1                	mov    %al,%cl
  2193ef:	80 e1 01             	and    $0x1,%cl
  2193f2:	88 8c 24 a7 00 00 00 	mov    %cl,0xa7(%rsp)
    if ok { Ok(val) } else { Err(val) }
  2193f9:	a8 01                	test   $0x1,%al
  2193fb:	0f 85 6e 01 00 00    	jne    21956f <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x33f>
  219401:	e9 54 01 00 00       	jmpq   21955a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x32a>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  219406:	eb cf                	jmp    2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  219408:	eb cd                	jmp    2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  21940a:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21940f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219414:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  219419:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  21941e:	48 89 c1             	mov    %rax,%rcx
  219421:	0f 94 c0             	sete   %al
  219424:	24 01                	and    $0x1,%al
  219426:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21942b:	88 44 24 68          	mov    %al,0x68(%rsp)
  21942f:	eb 2a                	jmp    21945b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x22b>
  219431:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  219436:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21943b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  219440:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  219445:	48 89 c1             	mov    %rax,%rcx
  219448:	0f 94 c0             	sete   %al
  21944b:	24 01                	and    $0x1,%al
  21944d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219452:	88 44 24 68          	mov    %al,0x68(%rsp)
  219456:	e9 7c ff ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  21945b:	e9 77 ff ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  219460:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  219465:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21946a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  21946f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  219474:	48 89 c1             	mov    %rax,%rcx
  219477:	0f 94 c0             	sete   %al
  21947a:	24 01                	and    $0x1,%al
  21947c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219481:	88 44 24 68          	mov    %al,0x68(%rsp)
  219485:	eb 2a                	jmp    2194b1 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x281>
  219487:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21948c:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219491:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  219496:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  21949b:	48 89 c1             	mov    %rax,%rcx
  21949e:	0f 94 c0             	sete   %al
  2194a1:	24 01                	and    $0x1,%al
  2194a3:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2194a8:	88 44 24 68          	mov    %al,0x68(%rsp)
  2194ac:	e9 26 ff ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  2194b1:	e9 21 ff ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  2194b6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2194bb:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2194c0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  2194c5:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2194ca:	48 89 c1             	mov    %rax,%rcx
  2194cd:	0f 94 c0             	sete   %al
  2194d0:	24 01                	and    $0x1,%al
  2194d2:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2194d7:	88 44 24 68          	mov    %al,0x68(%rsp)
  2194db:	e9 f7 fe ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  2194e0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2194e5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2194ea:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  2194ef:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2194f4:	48 89 c1             	mov    %rax,%rcx
  2194f7:	0f 94 c0             	sete   %al
  2194fa:	24 01                	and    $0x1,%al
  2194fc:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219501:	88 44 24 68          	mov    %al,0x68(%rsp)
  219505:	eb 4e                	jmp    219555 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x325>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  219507:	48 8d 3d eb 84 fe ff 	lea    -0x17b15(%rip),%rdi        # 2019f9 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x16a>
  21950e:	48 8d 15 e3 6d 00 00 	lea    0x6de3(%rip),%rdx        # 2202f8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xd8>
  219515:	be 3c 00 00 00       	mov    $0x3c,%esi
  21951a:	e8 11 1b 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21951f:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  219521:	48 8d 3d 4a 85 fe ff 	lea    -0x17ab6(%rip),%rdi        # 201a72 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1e3>
  219528:	48 8d 15 f9 6d 00 00 	lea    0x6df9(%rip),%rdx        # 220328 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x108>
  21952f:	be 34 00 00 00       	mov    $0x34,%esi
  219534:	e8 f7 1a 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219539:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  21953b:	48 8d 3d f3 84 fe ff 	lea    -0x17b0d(%rip),%rdi        # 201a35 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1a6>
  219542:	48 8d 15 c7 6d 00 00 	lea    0x6dc7(%rip),%rdx        # 220310 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xf0>
  219549:	be 3d 00 00 00       	mov    $0x3d,%esi
  21954e:	e8 dd 1a 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219553:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  219555:	e9 7d fe ff ff       	jmpq   2193d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  21955a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    if ok { Ok(val) } else { Err(val) }
  21955f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  219564:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  21956b:	00 00 
  21956d:	eb 13                	jmp    219582 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x352>
  21956f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219574:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  219579:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  219580:	00 00 
}
  219582:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  219587:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21958c:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  219593:	c3                   	retq   
  219594:	cc                   	int3   
  219595:	cc                   	int3   
  219596:	cc                   	int3   
  219597:	cc                   	int3   
  219598:	cc                   	int3   
  219599:	cc                   	int3   
  21959a:	cc                   	int3   
  21959b:	cc                   	int3   
  21959c:	cc                   	int3   
  21959d:	cc                   	int3   
  21959e:	cc                   	int3   
  21959f:	cc                   	int3   

00000000002195a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3fa8054ddf20da4cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  2195a0:	48 83 ec 18          	sub    $0x18,%rsp
  2195a4:	48 89 f2             	mov    %rsi,%rdx
  2195a7:	48 89 f8             	mov    %rdi,%rax
  2195aa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2195af:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2195b4:	48 8b 38             	mov    (%rax),%rdi
  2195b7:	48 8b 70 08          	mov    0x8(%rax),%rsi
  2195bb:	e8 e0 39 00 00       	callq  21cfa0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>
  2195c0:	88 44 24 07          	mov    %al,0x7(%rsp)
  2195c4:	8a 44 24 07          	mov    0x7(%rsp),%al
  2195c8:	24 01                	and    $0x1,%al
  2195ca:	0f b6 c0             	movzbl %al,%eax
  2195cd:	48 83 c4 18          	add    $0x18,%rsp
  2195d1:	c3                   	retq   
  2195d2:	cc                   	int3   
  2195d3:	cc                   	int3   
  2195d4:	cc                   	int3   
  2195d5:	cc                   	int3   
  2195d6:	cc                   	int3   
  2195d7:	cc                   	int3   
  2195d8:	cc                   	int3   
  2195d9:	cc                   	int3   
  2195da:	cc                   	int3   
  2195db:	cc                   	int3   
  2195dc:	cc                   	int3   
  2195dd:	cc                   	int3   
  2195de:	cc                   	int3   
  2195df:	cc                   	int3   

00000000002195e0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h72ffccc9870a62adE>:
  2195e0:	48 83 ec 18          	sub    $0x18,%rsp
  2195e4:	48 89 f2             	mov    %rsi,%rdx
  2195e7:	48 89 f8             	mov    %rdi,%rax
  2195ea:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2195ef:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2195f4:	48 8b 38             	mov    (%rax),%rdi
  2195f7:	48 8b 70 08          	mov    0x8(%rax),%rsi
  2195fb:	e8 60 3f 00 00       	callq  21d560 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>
  219600:	88 44 24 07          	mov    %al,0x7(%rsp)
  219604:	8a 44 24 07          	mov    0x7(%rsp),%al
  219608:	24 01                	and    $0x1,%al
  21960a:	0f b6 c0             	movzbl %al,%eax
  21960d:	48 83 c4 18          	add    $0x18,%rsp
  219611:	c3                   	retq   
  219612:	cc                   	int3   
  219613:	cc                   	int3   
  219614:	cc                   	int3   
  219615:	cc                   	int3   
  219616:	cc                   	int3   
  219617:	cc                   	int3   
  219618:	cc                   	int3   
  219619:	cc                   	int3   
  21961a:	cc                   	int3   
  21961b:	cc                   	int3   
  21961c:	cc                   	int3   
  21961d:	cc                   	int3   
  21961e:	cc                   	int3   
  21961f:	cc                   	int3   

0000000000219620 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  219620:	48 83 ec 48          	sub    $0x48,%rsp
  219624:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219629:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21962e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  219633:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  219638:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21963d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219642:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219647:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21964c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  219651:	48 89 04 24          	mov    %rax,(%rsp)
  219655:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21965a:	48 8b 0c 24          	mov    (%rsp),%rcx
  21965e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  219663:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  219668:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21966d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  219672:	48 83 c4 48          	add    $0x48,%rsp
  219676:	c3                   	retq   
  219677:	cc                   	int3   
  219678:	cc                   	int3   
  219679:	cc                   	int3   
  21967a:	cc                   	int3   
  21967b:	cc                   	int3   
  21967c:	cc                   	int3   
  21967d:	cc                   	int3   
  21967e:	cc                   	int3   
  21967f:	cc                   	int3   

0000000000219680 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  219680:	48 83 ec 68          	sub    $0x68,%rsp
  219684:	4c 89 04 24          	mov    %r8,(%rsp)
  219688:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21968d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  219692:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  219697:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21969c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2196a1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2196a6:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2196ab:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2196b0:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  2196b5:	4c 39 c2             	cmp    %r8,%rdx
  2196b8:	72 1b                	jb     2196d5 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x55>
  2196ba:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2196bf:	48 8b 0c 24          	mov    (%rsp),%rcx
  2196c3:	48 83 c1 01          	add    $0x1,%rcx
  2196c7:	48 39 c8             	cmp    %rcx,%rax
  2196ca:	0f 97 c0             	seta   %al
  2196cd:	24 01                	and    $0x1,%al
  2196cf:	88 44 24 37          	mov    %al,0x37(%rsp)
  2196d3:	eb 05                	jmp    2196da <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x5a>
  2196d5:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  2196da:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  2196df:	75 4c                	jne    21972d <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0xad>
  2196e1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2196e6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2196eb:	48 8b 14 24          	mov    (%rsp),%rdx
  2196ef:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2196f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2196f9:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  2196fe:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  219705:	00 00 
  219707:	4c 89 01             	mov    %r8,(%rcx)
  21970a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  21970e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  219713:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  219718:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  21971c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  219720:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  219724:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  219728:	48 83 c4 68          	add    $0x68,%rsp
  21972c:	c3                   	retq   
            panic!("invalid args");
  21972d:	48 8d 3d 72 83 fe ff 	lea    -0x17c8e(%rip),%rdi        # 201aa6 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x217>
  219734:	48 8d 15 05 6c 00 00 	lea    0x6c05(%rip),%rdx        # 220340 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x120>
  21973b:	be 0c 00 00 00       	mov    $0xc,%esi
  219740:	e8 eb 18 00 00       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219745:	0f 0b                	ud2    
  219747:	cc                   	int3   
  219748:	cc                   	int3   
  219749:	cc                   	int3   
  21974a:	cc                   	int3   
  21974b:	cc                   	int3   
  21974c:	cc                   	int3   
  21974d:	cc                   	int3   
  21974e:	cc                   	int3   
  21974f:	cc                   	int3   

0000000000219750 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>:
#[derive(Copy, Clone)]
  219750:	48 83 ec 18          	sub    $0x18,%rsp
  219754:	48 89 f8             	mov    %rdi,%rax
  219757:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21975c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219761:	ba 30 00 00 00       	mov    $0x30,%edx
  219766:	e8 35 43 00 00       	callq  21daa0 <memcpy>
  21976b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219770:	48 83 c4 18          	add    $0x18,%rsp
  219774:	c3                   	retq   
  219775:	cc                   	int3   
  219776:	cc                   	int3   
  219777:	cc                   	int3   
  219778:	cc                   	int3   
  219779:	cc                   	int3   
  21977a:	cc                   	int3   
  21977b:	cc                   	int3   
  21977c:	cc                   	int3   
  21977d:	cc                   	int3   
  21977e:	cc                   	int3   
  21977f:	cc                   	int3   

0000000000219780 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>:
  219780:	48 83 ec 28          	sub    $0x28,%rsp
  219784:	48 89 f8             	mov    %rdi,%rax
  219787:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21978c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219791:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  219796:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21979b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2197a0:	e8 6b f2 ff ff       	callq  218a10 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>
  2197a5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2197aa:	48 83 c4 28          	add    $0x28,%rsp
  2197ae:	c3                   	retq   
  2197af:	cc                   	int3   

00000000002197b0 <_ZN4core3ptr35drop_in_place$LT$log..NopLogger$GT$17heb548e4daff7e4f7E>:
  2197b0:	50                   	push   %rax
  2197b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2197b5:	58                   	pop    %rax
  2197b6:	c3                   	retq   
  2197b7:	cc                   	int3   
  2197b8:	cc                   	int3   
  2197b9:	cc                   	int3   
  2197ba:	cc                   	int3   
  2197bb:	cc                   	int3   
  2197bc:	cc                   	int3   
  2197bd:	cc                   	int3   
  2197be:	cc                   	int3   
  2197bf:	cc                   	int3   

00000000002197c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  2197c0:	48 83 ec 20          	sub    $0x20,%rsp
  2197c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2197c9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  2197ce:	48 39 f7             	cmp    %rsi,%rdi
  2197d1:	0f 94 c0             	sete   %al
  2197d4:	24 01                	and    $0x1,%al
  2197d6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2197da:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2197de:	88 44 24 07          	mov    %al,0x7(%rsp)
  2197e2:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  2197e6:	24 01                	and    $0x1,%al
  2197e8:	0f b6 c0             	movzbl %al,%eax
  2197eb:	48 83 c4 20          	add    $0x20,%rsp
  2197ef:	c3                   	retq   

00000000002197f0 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>:
  2197f0:	c3                   	retq   
  2197f1:	cc                   	int3   
  2197f2:	cc                   	int3   
  2197f3:	cc                   	int3   
  2197f4:	cc                   	int3   
  2197f5:	cc                   	int3   
  2197f6:	cc                   	int3   
  2197f7:	cc                   	int3   
  2197f8:	cc                   	int3   
  2197f9:	cc                   	int3   
  2197fa:	cc                   	int3   
  2197fb:	cc                   	int3   
  2197fc:	cc                   	int3   
  2197fd:	cc                   	int3   
  2197fe:	cc                   	int3   
  2197ff:	cc                   	int3   

0000000000219800 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>:
                    fn clone(&self) -> Self {
  219800:	50                   	push   %rax
  219801:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  219805:	8b 07                	mov    (%rdi),%eax
                    }
  219807:	59                   	pop    %rcx
  219808:	c3                   	retq   
  219809:	cc                   	int3   
  21980a:	cc                   	int3   
  21980b:	cc                   	int3   
  21980c:	cc                   	int3   
  21980d:	cc                   	int3   
  21980e:	cc                   	int3   
  21980f:	cc                   	int3   

0000000000219810 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>:
    /// Shared references can be cloned, but mutable references *cannot*!
    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for &T {
        #[inline]
        #[rustc_diagnostic_item = "noop_method_clone"]
        fn clone(&self) -> Self {
  219810:	50                   	push   %rax
  219811:	48 89 3c 24          	mov    %rdi,(%rsp)
            *self
  219815:	48 8b 07             	mov    (%rdi),%rax
  219818:	48 8b 57 08          	mov    0x8(%rdi),%rdx
        }
  21981c:	59                   	pop    %rcx
  21981d:	c3                   	retq   
  21981e:	cc                   	int3   
  21981f:	cc                   	int3   

0000000000219820 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *const T) -> bool
  219820:	48 83 ec 20          	sub    $0x20,%rsp
  219824:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219829:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self, other)
  21982e:	48 39 f7             	cmp    %rsi,%rdi
  219831:	0f 94 c0             	sete   %al
  219834:	24 01                	and    $0x1,%al
  219836:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21983a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21983e:	88 44 24 07          	mov    %al,0x7(%rsp)
  219842:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  219846:	24 01                	and    $0x1,%al
  219848:	0f b6 c0             	movzbl %al,%eax
  21984b:	48 83 c4 20          	add    $0x20,%rsp
  21984f:	c3                   	retq   

0000000000219850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>:
    pub const fn is_null(self) -> bool {
  219850:	48 83 ec 18          	sub    $0x18,%rsp
  219854:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219859:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21985e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  219863:	31 c0                	xor    %eax,%eax
  219865:	89 c6                	mov    %eax,%esi
  219867:	e8 b4 ff ff ff       	callq  219820 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  21986c:	88 44 24 07          	mov    %al,0x7(%rsp)
  219870:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  219874:	24 01                	and    $0x1,%al
  219876:	0f b6 c0             	movzbl %al,%eax
  219879:	48 83 c4 18          	add    $0x18,%rsp
  21987d:	c3                   	retq   
  21987e:	cc                   	int3   
  21987f:	cc                   	int3   

0000000000219880 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a0f9f2c6a34554E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  219880:	48 83 ec 18          	sub    $0x18,%rsp
  219884:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219889:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21988e:	48 8b 3f             	mov    (%rdi),%rdi
  219891:	e8 3a 07 00 00       	callq  219fd0 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>
  219896:	88 44 24 07          	mov    %al,0x7(%rsp)
  21989a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21989e:	24 01                	and    $0x1,%al
  2198a0:	0f b6 c0             	movzbl %al,%eax
  2198a3:	48 83 c4 18          	add    $0x18,%rsp
  2198a7:	c3                   	retq   
  2198a8:	cc                   	int3   
  2198a9:	cc                   	int3   
  2198aa:	cc                   	int3   
  2198ab:	cc                   	int3   
  2198ac:	cc                   	int3   
  2198ad:	cc                   	int3   
  2198ae:	cc                   	int3   
  2198af:	cc                   	int3   

00000000002198b0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>:
    pub const fn cast<U>(self) -> *const U {
  2198b0:	50                   	push   %rax
  2198b1:	48 89 f8             	mov    %rdi,%rax
  2198b4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  2198b8:	59                   	pop    %rcx
  2198b9:	c3                   	retq   
  2198ba:	cc                   	int3   
  2198bb:	cc                   	int3   
  2198bc:	cc                   	int3   
  2198bd:	cc                   	int3   
  2198be:	cc                   	int3   
  2198bf:	cc                   	int3   

00000000002198c0 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  2198c0:	48 83 ec 68          	sub    $0x68,%rsp
  2198c4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2198c9:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  2198ce:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  2198d3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2198d8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2198dd:	8b 00                	mov    (%rax),%eax
  2198df:	48 85 c0             	test   %rax,%rax
  2198e2:	74 06                	je     2198ea <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x2a>
  2198e4:	eb 00                	jmp    2198e6 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x26>
  2198e6:	eb 32                	jmp    21991a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x5a>
  2198e8:	0f 0b                	ud2    
  2198ea:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    Some(T),
  2198ef:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2198f4:	48 83 c0 08          	add    $0x8,%rax
  2198f8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2198fd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  219902:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  219907:	48 8d 15 bb 72 fe ff 	lea    -0x18d45(%rip),%rdx        # 200bc9 <str.3+0x189>
  21990e:	b9 04 00 00 00       	mov    $0x4,%ecx
  219913:	e8 18 36 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  219918:	eb 2a                	jmp    219944 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x84>
  21991a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21991f:	48 8d 35 d7 72 fe ff 	lea    -0x18d29(%rip),%rsi        # 200bfd <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x28>
  219926:	ba 04 00 00 00       	mov    $0x4,%edx
  21992b:	e8 90 35 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  219930:	24 01                	and    $0x1,%al
  219932:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  219936:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21993a:	24 01                	and    $0x1,%al
  21993c:	0f b6 c0             	movzbl %al,%eax
  21993f:	48 83 c4 68          	add    $0x68,%rsp
  219943:	c3                   	retq   
  219944:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219949:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  21994e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    Some(T),
  219953:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  219958:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  21995d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  219962:	48 8d 15 ef 69 00 00 	lea    0x69ef(%rip),%rdx        # 220358 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x138>
  219969:	e8 f2 10 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21996e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  219973:	e8 58 12 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  219978:	24 01                	and    $0x1,%al
  21997a:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21997e:	eb b6                	jmp    219936 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x76>

0000000000219980 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17h7ca190daa7803da4E>:
  219980:	50                   	push   %rax
  219981:	48 89 3c 24          	mov    %rdi,(%rsp)
  219985:	58                   	pop    %rax
  219986:	c3                   	retq   
  219987:	cc                   	int3   
  219988:	cc                   	int3   
  219989:	cc                   	int3   
  21998a:	cc                   	int3   
  21998b:	cc                   	int3   
  21998c:	cc                   	int3   
  21998d:	cc                   	int3   
  21998e:	cc                   	int3   
  21998f:	cc                   	int3   

0000000000219990 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h6df45f2823794112E>:
  219990:	50                   	push   %rax
  219991:	48 89 3c 24          	mov    %rdi,(%rsp)
  219995:	58                   	pop    %rax
  219996:	c3                   	retq   
  219997:	cc                   	int3   
  219998:	cc                   	int3   
  219999:	cc                   	int3   
  21999a:	cc                   	int3   
  21999b:	cc                   	int3   
  21999c:	cc                   	int3   
  21999d:	cc                   	int3   
  21999e:	cc                   	int3   
  21999f:	cc                   	int3   

00000000002199a0 <_ZN4core3ptr64drop_in_place$LT$$RF$bootloader..boot_info..MemoryRegionKind$GT$17h091086770a55a35bE>:
  2199a0:	50                   	push   %rax
  2199a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2199a5:	58                   	pop    %rax
  2199a6:	c3                   	retq   
  2199a7:	cc                   	int3   
  2199a8:	cc                   	int3   
  2199a9:	cc                   	int3   
  2199aa:	cc                   	int3   
  2199ab:	cc                   	int3   
  2199ac:	cc                   	int3   
  2199ad:	cc                   	int3   
  2199ae:	cc                   	int3   
  2199af:	cc                   	int3   

00000000002199b0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  2199b0:	48 83 ec 38          	sub    $0x38,%rsp
  2199b4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2199b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2199be:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  2199c3:	e8 e8 fe ff ff       	callq  2198b0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>
  2199c8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2199cd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2199d2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2199d7:	e8 74 00 00 00       	callq  219a50 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>
  2199dc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2199e1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2199e6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2199eb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2199f0:	48 83 c4 38          	add    $0x38,%rsp
  2199f4:	c3                   	retq   
  2199f5:	cc                   	int3   
  2199f6:	cc                   	int3   
  2199f7:	cc                   	int3   
  2199f8:	cc                   	int3   
  2199f9:	cc                   	int3   
  2199fa:	cc                   	int3   
  2199fb:	cc                   	int3   
  2199fc:	cc                   	int3   
  2199fd:	cc                   	int3   
  2199fe:	cc                   	int3   
  2199ff:	cc                   	int3   

0000000000219a00 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  219a00:	48 83 ec 38          	sub    $0x38,%rsp
  219a04:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219a09:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  219a0e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  219a13:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  219a18:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  219a1d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219a22:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  219a27:	e8 64 00 00 00       	callq  219a90 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>
  219a2c:	48 89 04 24          	mov    %rax,(%rsp)
  219a30:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  219a35:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  219a3a:	48 8b 04 24          	mov    (%rsp),%rax
}
  219a3e:	48 83 c4 38          	add    $0x38,%rsp
  219a42:	c3                   	retq   
  219a43:	cc                   	int3   
  219a44:	cc                   	int3   
  219a45:	cc                   	int3   
  219a46:	cc                   	int3   
  219a47:	cc                   	int3   
  219a48:	cc                   	int3   
  219a49:	cc                   	int3   
  219a4a:	cc                   	int3   
  219a4b:	cc                   	int3   
  219a4c:	cc                   	int3   
  219a4d:	cc                   	int3   
  219a4e:	cc                   	int3   
  219a4f:	cc                   	int3   

0000000000219a50 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
  219a50:	48 83 ec 30          	sub    $0x30,%rsp
  219a54:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  219a59:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  219a5e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  219a63:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  219a68:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  219a6d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219a72:	48 89 0c 24          	mov    %rcx,(%rsp)
  219a76:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219a7b:	48 8b 04 24          	mov    (%rsp),%rax
  219a7f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  219a84:	48 83 c4 30          	add    $0x30,%rsp
  219a88:	c3                   	retq   
  219a89:	cc                   	int3   
  219a8a:	cc                   	int3   
  219a8b:	cc                   	int3   
  219a8c:	cc                   	int3   
  219a8d:	cc                   	int3   
  219a8e:	cc                   	int3   
  219a8f:	cc                   	int3   

0000000000219a90 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
  219a90:	48 83 ec 30          	sub    $0x30,%rsp
  219a94:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  219a99:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  219a9e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  219aa3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  219aa8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  219aad:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219ab2:	48 89 0c 24          	mov    %rcx,(%rsp)
  219ab6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219abb:	48 8b 04 24          	mov    (%rsp),%rax
  219abf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  219ac4:	48 83 c4 30          	add    $0x30,%rsp
  219ac8:	c3                   	retq   
  219ac9:	cc                   	int3   
  219aca:	cc                   	int3   
  219acb:	cc                   	int3   
  219acc:	cc                   	int3   
  219acd:	cc                   	int3   
  219ace:	cc                   	int3   
  219acf:	cc                   	int3   

0000000000219ad0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h110c2e9d0d22ff67E>:
  219ad0:	48 83 ec 18          	sub    $0x18,%rsp
  219ad4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219ad9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219ade:	48 8b 3f             	mov    (%rdi),%rdi
  219ae1:	e8 ba 02 00 00       	callq  219da0 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>
  219ae6:	88 44 24 07          	mov    %al,0x7(%rsp)
  219aea:	8a 44 24 07          	mov    0x7(%rsp),%al
  219aee:	24 01                	and    $0x1,%al
  219af0:	0f b6 c0             	movzbl %al,%eax
  219af3:	48 83 c4 18          	add    $0x18,%rsp
  219af7:	c3                   	retq   
  219af8:	cc                   	int3   
  219af9:	cc                   	int3   
  219afa:	cc                   	int3   
  219afb:	cc                   	int3   
  219afc:	cc                   	int3   
  219afd:	cc                   	int3   
  219afe:	cc                   	int3   
  219aff:	cc                   	int3   

0000000000219b00 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a95e3f68e858f27E>:
  219b00:	48 83 ec 18          	sub    $0x18,%rsp
  219b04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219b09:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219b0e:	48 8b 3f             	mov    (%rdi),%rdi
  219b11:	e8 7a 00 00 00       	callq  219b90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>
  219b16:	88 44 24 07          	mov    %al,0x7(%rsp)
  219b1a:	8a 44 24 07          	mov    0x7(%rsp),%al
  219b1e:	24 01                	and    $0x1,%al
  219b20:	0f b6 c0             	movzbl %al,%eax
  219b23:	48 83 c4 18          	add    $0x18,%rsp
  219b27:	c3                   	retq   
  219b28:	cc                   	int3   
  219b29:	cc                   	int3   
  219b2a:	cc                   	int3   
  219b2b:	cc                   	int3   
  219b2c:	cc                   	int3   
  219b2d:	cc                   	int3   
  219b2e:	cc                   	int3   
  219b2f:	cc                   	int3   

0000000000219b30 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4835aefd08962e6eE>:
  219b30:	48 83 ec 18          	sub    $0x18,%rsp
  219b34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219b39:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219b3e:	48 8b 3f             	mov    (%rdi),%rdi
  219b41:	e8 aa 01 00 00       	callq  219cf0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>
  219b46:	88 44 24 07          	mov    %al,0x7(%rsp)
  219b4a:	8a 44 24 07          	mov    0x7(%rsp),%al
  219b4e:	24 01                	and    $0x1,%al
  219b50:	0f b6 c0             	movzbl %al,%eax
  219b53:	48 83 c4 18          	add    $0x18,%rsp
  219b57:	c3                   	retq   
  219b58:	cc                   	int3   
  219b59:	cc                   	int3   
  219b5a:	cc                   	int3   
  219b5b:	cc                   	int3   
  219b5c:	cc                   	int3   
  219b5d:	cc                   	int3   
  219b5e:	cc                   	int3   
  219b5f:	cc                   	int3   

0000000000219b60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c907112cc167dadE>:
  219b60:	48 83 ec 18          	sub    $0x18,%rsp
  219b64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219b69:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219b6e:	48 8b 3f             	mov    (%rdi),%rdi
  219b71:	e8 ca 00 00 00       	callq  219c40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>
  219b76:	88 44 24 07          	mov    %al,0x7(%rsp)
  219b7a:	8a 44 24 07          	mov    0x7(%rsp),%al
  219b7e:	24 01                	and    $0x1,%al
  219b80:	0f b6 c0             	movzbl %al,%eax
  219b83:	48 83 c4 18          	add    $0x18,%rsp
  219b87:	c3                   	retq   
  219b88:	cc                   	int3   
  219b89:	cc                   	int3   
  219b8a:	cc                   	int3   
  219b8b:	cc                   	int3   
  219b8c:	cc                   	int3   
  219b8d:	cc                   	int3   
  219b8e:	cc                   	int3   
  219b8f:	cc                   	int3   

0000000000219b90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  219b90:	48 83 ec 38          	sub    $0x38,%rsp
  219b94:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219b99:	48 89 f8             	mov    %rdi,%rax
  219b9c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  219ba1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219ba6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219bab:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  219bb0:	e8 3b 33 00 00       	callq  21cef0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  219bb5:	88 44 24 26          	mov    %al,0x26(%rsp)
  219bb9:	8a 44 24 26          	mov    0x26(%rsp),%al
  219bbd:	a8 01                	test   $0x1,%al
  219bbf:	75 12                	jne    219bd3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x43>
  219bc1:	eb 00                	jmp    219bc3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x33>
  219bc3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  219bc8:	e8 33 33 00 00       	callq  21cf00 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  219bcd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  219bd1:	eb 25                	jmp    219bf8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x68>
  219bd3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219bd8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  219bdd:	e8 4e 06 00 00       	callq  21a230 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>
  219be2:	24 01                	and    $0x1,%al
  219be4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  219be8:	eb 00                	jmp    219bea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
            }
  219bea:	8a 44 24 27          	mov    0x27(%rsp),%al
  219bee:	24 01                	and    $0x1,%al
  219bf0:	0f b6 c0             	movzbl %al,%eax
  219bf3:	48 83 c4 38          	add    $0x38,%rsp
  219bf7:	c3                   	retq   
  219bf8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  219bfc:	a8 01                	test   $0x1,%al
  219bfe:	75 19                	jne    219c19 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x89>
  219c00:	eb 00                	jmp    219c02 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x72>
  219c02:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219c07:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  219c0c:	e8 df 20 00 00       	callq  21bcf0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>
  219c11:	24 01                	and    $0x1,%al
  219c13:	88 44 24 27          	mov    %al,0x27(%rsp)
  219c17:	eb 19                	jmp    219c32 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa2>
  219c19:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219c1e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  219c23:	e8 a8 06 00 00       	callq  21a2d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>
  219c28:	24 01                	and    $0x1,%al
  219c2a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  219c2e:	eb 00                	jmp    219c30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
                if f.debug_lower_hex() {
  219c30:	eb b8                	jmp    219bea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
                } else if f.debug_upper_hex() {
  219c32:	eb fc                	jmp    219c30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
  219c34:	cc                   	int3   
  219c35:	cc                   	int3   
  219c36:	cc                   	int3   
  219c37:	cc                   	int3   
  219c38:	cc                   	int3   
  219c39:	cc                   	int3   
  219c3a:	cc                   	int3   
  219c3b:	cc                   	int3   
  219c3c:	cc                   	int3   
  219c3d:	cc                   	int3   
  219c3e:	cc                   	int3   
  219c3f:	cc                   	int3   

0000000000219c40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  219c40:	48 83 ec 38          	sub    $0x38,%rsp
  219c44:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219c49:	48 89 f8             	mov    %rdi,%rax
  219c4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  219c51:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219c56:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219c5b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  219c60:	e8 8b 32 00 00       	callq  21cef0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  219c65:	88 44 24 26          	mov    %al,0x26(%rsp)
  219c69:	8a 44 24 26          	mov    0x26(%rsp),%al
  219c6d:	a8 01                	test   $0x1,%al
  219c6f:	75 12                	jne    219c83 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x43>
  219c71:	eb 00                	jmp    219c73 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x33>
  219c73:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  219c78:	e8 83 32 00 00       	callq  21cf00 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  219c7d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  219c81:	eb 25                	jmp    219ca8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x68>
  219c83:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219c88:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  219c8d:	e8 de 06 00 00       	callq  21a370 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  219c92:	24 01                	and    $0x1,%al
  219c94:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  219c98:	eb 00                	jmp    219c9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
            }
  219c9a:	8a 44 24 27          	mov    0x27(%rsp),%al
  219c9e:	24 01                	and    $0x1,%al
  219ca0:	0f b6 c0             	movzbl %al,%eax
  219ca3:	48 83 c4 38          	add    $0x38,%rsp
  219ca7:	c3                   	retq   
  219ca8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  219cac:	a8 01                	test   $0x1,%al
  219cae:	75 19                	jne    219cc9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x89>
  219cb0:	eb 00                	jmp    219cb2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x72>
  219cb2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219cb7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  219cbc:	e8 3f 21 00 00       	callq  21be00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  219cc1:	24 01                	and    $0x1,%al
  219cc3:	88 44 24 27          	mov    %al,0x27(%rsp)
  219cc7:	eb 19                	jmp    219ce2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa2>
  219cc9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219cce:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  219cd3:	e8 28 07 00 00       	callq  21a400 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  219cd8:	24 01                	and    $0x1,%al
  219cda:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  219cde:	eb 00                	jmp    219ce0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
                if f.debug_lower_hex() {
  219ce0:	eb b8                	jmp    219c9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
                } else if f.debug_upper_hex() {
  219ce2:	eb fc                	jmp    219ce0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
  219ce4:	cc                   	int3   
  219ce5:	cc                   	int3   
  219ce6:	cc                   	int3   
  219ce7:	cc                   	int3   
  219ce8:	cc                   	int3   
  219ce9:	cc                   	int3   
  219cea:	cc                   	int3   
  219ceb:	cc                   	int3   
  219cec:	cc                   	int3   
  219ced:	cc                   	int3   
  219cee:	cc                   	int3   
  219cef:	cc                   	int3   

0000000000219cf0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  219cf0:	48 83 ec 38          	sub    $0x38,%rsp
  219cf4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219cf9:	48 89 f8             	mov    %rdi,%rax
  219cfc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  219d01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219d06:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219d0b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  219d10:	e8 db 31 00 00       	callq  21cef0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  219d15:	88 44 24 26          	mov    %al,0x26(%rsp)
  219d19:	8a 44 24 26          	mov    0x26(%rsp),%al
  219d1d:	a8 01                	test   $0x1,%al
  219d1f:	75 12                	jne    219d33 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x43>
  219d21:	eb 00                	jmp    219d23 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x33>
  219d23:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  219d28:	e8 d3 31 00 00       	callq  21cf00 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  219d2d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  219d31:	eb 25                	jmp    219d58 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x68>
  219d33:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219d38:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  219d3d:	e8 4e 07 00 00       	callq  21a490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  219d42:	24 01                	and    $0x1,%al
  219d44:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  219d48:	eb 00                	jmp    219d4a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
            }
  219d4a:	8a 44 24 27          	mov    0x27(%rsp),%al
  219d4e:	24 01                	and    $0x1,%al
  219d50:	0f b6 c0             	movzbl %al,%eax
  219d53:	48 83 c4 38          	add    $0x38,%rsp
  219d57:	c3                   	retq   
  219d58:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  219d5c:	a8 01                	test   $0x1,%al
  219d5e:	75 19                	jne    219d79 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x89>
  219d60:	eb 00                	jmp    219d62 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x72>
  219d62:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219d67:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  219d6c:	e8 bf 21 00 00       	callq  21bf30 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  219d71:	24 01                	and    $0x1,%al
  219d73:	88 44 24 27          	mov    %al,0x27(%rsp)
  219d77:	eb 19                	jmp    219d92 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa2>
  219d79:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  219d7e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  219d83:	e8 a8 07 00 00       	callq  21a530 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  219d88:	24 01                	and    $0x1,%al
  219d8a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  219d8e:	eb 00                	jmp    219d90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
                if f.debug_lower_hex() {
  219d90:	eb b8                	jmp    219d4a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
                } else if f.debug_upper_hex() {
  219d92:	eb fc                	jmp    219d90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
  219d94:	cc                   	int3   
  219d95:	cc                   	int3   
  219d96:	cc                   	int3   
  219d97:	cc                   	int3   
  219d98:	cc                   	int3   
  219d99:	cc                   	int3   
  219d9a:	cc                   	int3   
  219d9b:	cc                   	int3   
  219d9c:	cc                   	int3   
  219d9d:	cc                   	int3   
  219d9e:	cc                   	int3   
  219d9f:	cc                   	int3   

0000000000219da0 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  219da0:	48 83 ec 18          	sub    $0x18,%rsp
  219da4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219da9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        Display::fmt(self, f)
  219dae:	e8 bd 31 00 00       	callq  21cf70 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>
  219db3:	88 44 24 07          	mov    %al,0x7(%rsp)
  219db7:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  219dbb:	24 01                	and    $0x1,%al
  219dbd:	0f b6 c0             	movzbl %al,%eax
  219dc0:	48 83 c4 18          	add    $0x18,%rsp
  219dc4:	c3                   	retq   
  219dc5:	cc                   	int3   
  219dc6:	cc                   	int3   
  219dc7:	cc                   	int3   
  219dc8:	cc                   	int3   
  219dc9:	cc                   	int3   
  219dca:	cc                   	int3   
  219dcb:	cc                   	int3   
  219dcc:	cc                   	int3   
  219dcd:	cc                   	int3   
  219dce:	cc                   	int3   
  219dcf:	cc                   	int3   

0000000000219dd0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>:
    pub const fn is_none(&self) -> bool {
  219dd0:	48 83 ec 18          	sub    $0x18,%rsp
  219dd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  219dd9:	e8 22 00 00 00       	callq  219e00 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>
  219dde:	88 44 24 0f          	mov    %al,0xf(%rsp)
  219de2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  219de6:	34 ff                	xor    $0xff,%al
    }
  219de8:	24 01                	and    $0x1,%al
  219dea:	0f b6 c0             	movzbl %al,%eax
  219ded:	48 83 c4 18          	add    $0x18,%rsp
  219df1:	c3                   	retq   
  219df2:	cc                   	int3   
  219df3:	cc                   	int3   
  219df4:	cc                   	int3   
  219df5:	cc                   	int3   
  219df6:	cc                   	int3   
  219df7:	cc                   	int3   
  219df8:	cc                   	int3   
  219df9:	cc                   	int3   
  219dfa:	cc                   	int3   
  219dfb:	cc                   	int3   
  219dfc:	cc                   	int3   
  219dfd:	cc                   	int3   
  219dfe:	cc                   	int3   
  219dff:	cc                   	int3   

0000000000219e00 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>:
    pub const fn is_some(&self) -> bool {
  219e00:	48 83 ec 10          	sub    $0x10,%rsp
  219e04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  219e09:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  219e0d:	75 07                	jne    219e16 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x16>
  219e0f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  219e14:	eb 05                	jmp    219e1b <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x1b>
  219e16:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  219e1b:	8a 44 24 07          	mov    0x7(%rsp),%al
  219e1f:	24 01                	and    $0x1,%al
  219e21:	0f b6 c0             	movzbl %al,%eax
  219e24:	48 83 c4 10          	add    $0x10,%rsp
  219e28:	c3                   	retq   
  219e29:	cc                   	int3   
  219e2a:	cc                   	int3   
  219e2b:	cc                   	int3   
  219e2c:	cc                   	int3   
  219e2d:	cc                   	int3   
  219e2e:	cc                   	int3   
  219e2f:	cc                   	int3   

0000000000219e30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>:
    fn deref(&self) -> &Self::Target {
  219e30:	48 83 ec 18          	sub    $0x18,%rsp
  219e34:	48 89 f8             	mov    %rdi,%rax
  219e37:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts(self.ptr, self.len) }
  219e3c:	48 8b 38             	mov    (%rax),%rdi
  219e3f:	48 8b 70 08          	mov    0x8(%rax),%rsi
  219e43:	e8 b8 03 00 00       	callq  21a200 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>
  219e48:	48 89 04 24          	mov    %rax,(%rsp)
  219e4c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  219e51:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  219e56:	48 8b 04 24          	mov    (%rsp),%rax
    }
  219e5a:	48 83 c4 18          	add    $0x18,%rsp
  219e5e:	c3                   	retq   
  219e5f:	cc                   	int3   

0000000000219e60 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>:
    pub fn info(&self) -> FrameBufferInfo {
  219e60:	48 83 ec 18          	sub    $0x18,%rsp
  219e64:	48 89 f8             	mov    %rdi,%rax
  219e67:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219e6c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.info
  219e71:	48 83 c6 10          	add    $0x10,%rsi
  219e75:	ba 30 00 00 00       	mov    $0x30,%edx
  219e7a:	e8 21 3c 00 00       	callq  21daa0 <memcpy>
  219e7f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  219e84:	48 83 c4 18          	add    $0x18,%rsp
  219e88:	c3                   	retq   
  219e89:	cc                   	int3   
  219e8a:	cc                   	int3   
  219e8b:	cc                   	int3   
  219e8c:	cc                   	int3   
  219e8d:	cc                   	int3   
  219e8e:	cc                   	int3   
  219e8f:	cc                   	int3   

0000000000219e90 <_ZN72_$LT$bootloader..boot_info..MemoryRegion$u20$as$u20$core..fmt..Debug$GT$3fmt17h7b7f29e9503f8715E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219e90:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  219e97:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  219e9c:	48 89 f8             	mov    %rdi,%rax
  219e9f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  219ea4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  219ea9:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: u64,
  219eae:	48 89 c1             	mov    %rax,%rcx
  219eb1:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  219eb6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub end: u64,
  219ebb:	48 89 c1             	mov    %rax,%rcx
  219ebe:	48 83 c1 08          	add    $0x8,%rcx
  219ec2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  219ec7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub kind: MemoryRegionKind,
  219ecc:	48 83 c0 10          	add    $0x10,%rax
  219ed0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219ed5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219eda:	48 8d 35 57 7c fe ff 	lea    -0x183a9(%rip),%rsi        # 201b38 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2a9>
  219ee1:	ba 0c 00 00 00       	mov    $0xc,%edx
  219ee6:	e8 25 30 00 00       	callq  21cf10 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  219eeb:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  219ef2:	00 
  219ef3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  219efa:	00 
  219efb:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  219f02:	00 
  219f03:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219f08:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  219f0f:	00 
  219f10:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  219f15:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219f1a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  219f1f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  219f26:	00 
    pub start: u64,
  219f27:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  219f2c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219f31:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  219f36:	48 8d 35 07 7c fe ff 	lea    -0x183f9(%rip),%rsi        # 201b44 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2b5>
  219f3d:	ba 05 00 00 00       	mov    $0x5,%edx
  219f42:	4c 8d 05 2f 64 00 00 	lea    0x642f(%rip),%r8        # 220378 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  219f49:	e8 02 09 00 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  219f4e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub end: u64,
  219f53:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219f58:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219f5d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  219f62:	48 8d 35 e0 7b fe ff 	lea    -0x18420(%rip),%rsi        # 201b49 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2ba>
  219f69:	ba 03 00 00 00       	mov    $0x3,%edx
  219f6e:	4c 8d 05 03 64 00 00 	lea    0x6403(%rip),%r8        # 220378 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  219f75:	e8 d6 08 00 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  219f7a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub kind: MemoryRegionKind,
  219f7f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  219f84:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219f89:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  219f8e:	48 8d 35 48 6c fe ff 	lea    -0x193b8(%rip),%rsi        # 200bdd <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x8>
  219f95:	ba 04 00 00 00       	mov    $0x4,%edx
  219f9a:	4c 8d 05 f7 63 00 00 	lea    0x63f7(%rip),%r8        # 220398 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x178>
  219fa1:	e8 aa 08 00 00       	callq  21a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  219fa6:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  219fab:	e8 60 0a 00 00       	callq  21aa10 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  219fb0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  219fb4:	8a 44 24 0f          	mov    0xf(%rsp),%al
  219fb8:	24 01                	and    $0x1,%al
  219fba:	0f b6 c0             	movzbl %al,%eax
  219fbd:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  219fc4:	c3                   	retq   
  219fc5:	cc                   	int3   
  219fc6:	cc                   	int3   
  219fc7:	cc                   	int3   
  219fc8:	cc                   	int3   
  219fc9:	cc                   	int3   
  219fca:	cc                   	int3   
  219fcb:	cc                   	int3   
  219fcc:	cc                   	int3   
  219fcd:	cc                   	int3   
  219fce:	cc                   	int3   
  219fcf:	cc                   	int3   

0000000000219fd0 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  219fd0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  219fd7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  219fdc:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  219fe1:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  219fe8:	00 
  219fe9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  219fee:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  219ff3:	8b 00                	mov    (%rax),%eax
  219ff5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219ffa:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219fff:	48 8d 0d 22 7b fe ff 	lea    -0x184de(%rip),%rcx        # 201b28 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x299>
  21a006:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21a00a:	48 01 c8             	add    %rcx,%rax
  21a00d:	ff e0                	jmpq   *%rax
  21a00f:	0f 0b                	ud2    
  21a011:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21a016:	48 8d 35 4f 7b fe ff 	lea    -0x184b1(%rip),%rsi        # 201b6c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2dd>
  21a01d:	ba 06 00 00 00       	mov    $0x6,%edx
  21a022:	e8 99 2e 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21a027:	24 01                	and    $0x1,%al
  21a029:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21a02d:	e9 c2 00 00 00       	jmpq   21a0f4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  21a032:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21a037:	48 8d 35 24 7b fe ff 	lea    -0x184dc(%rip),%rsi        # 201b62 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2d3>
  21a03e:	ba 0a 00 00 00       	mov    $0xa,%edx
  21a043:	e8 78 2e 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21a048:	24 01                	and    $0x1,%al
  21a04a:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21a04e:	e9 a1 00 00 00       	jmpq   21a0f4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  21a053:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownUefi(u32),
  21a058:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21a05d:	48 83 c0 04          	add    $0x4,%rax
  21a061:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a066:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21a06d:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  21a06e:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21a073:	48 8d 15 dd 7a fe ff 	lea    -0x18523(%rip),%rdx        # 201b57 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2c8>
  21a07a:	b9 0b 00 00 00       	mov    $0xb,%ecx
  21a07f:	e8 ac 2e 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21a084:	eb 7f                	jmp    21a105 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x135>
  21a086:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownBios(u32),
  21a08b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21a090:	48 83 c0 04          	add    $0x4,%rax
  21a094:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a099:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21a0a0:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  21a0a1:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21a0a6:	48 8d 15 9f 7a fe ff 	lea    -0x18561(%rip),%rdx        # 201b4c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2bd>
  21a0ad:	b9 0b 00 00 00       	mov    $0xb,%ecx
  21a0b2:	e8 79 2e 00 00       	callq  21cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21a0b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21a0bc:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  21a0c1:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  21a0c8:	00 
    UnknownBios(u32),
  21a0c9:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21a0ce:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  21a0d3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21a0d8:	48 8d 15 d9 62 00 00 	lea    0x62d9(%rip),%rdx        # 2203b8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  21a0df:	e8 7c 09 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21a0e4:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21a0e9:	e8 e2 0a 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21a0ee:	24 01                	and    $0x1,%al
  21a0f0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21a0f4:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21a0f8:	24 01                	and    $0x1,%al
  21a0fa:	0f b6 c0             	movzbl %al,%eax
  21a0fd:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21a104:	c3                   	retq   
  21a105:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a10a:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
  21a10f:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  21a116:	00 
    UnknownUefi(u32),
  21a117:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21a11c:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  21a121:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21a126:	48 8d 15 8b 62 00 00 	lea    0x628b(%rip),%rdx        # 2203b8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  21a12d:	e8 2e 09 00 00       	callq  21aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21a132:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21a137:	e8 94 0a 00 00       	callq  21abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21a13c:	24 01                	and    $0x1,%al
  21a13e:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21a142:	eb b0                	jmp    21a0f4 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  21a144:	cc                   	int3   
  21a145:	cc                   	int3   
  21a146:	cc                   	int3   
  21a147:	cc                   	int3   
  21a148:	cc                   	int3   
  21a149:	cc                   	int3   
  21a14a:	cc                   	int3   
  21a14b:	cc                   	int3   
  21a14c:	cc                   	int3   
  21a14d:	cc                   	int3   
  21a14e:	cc                   	int3   
  21a14f:	cc                   	int3   

000000000021a150 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
  21a150:	48 83 ec 38          	sub    $0x38,%rsp
  21a154:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21a159:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21a15e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  21a163:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21a168:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21a16d:	8b 00                	mov    (%rax),%eax
  21a16f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a174:	48 85 c0             	test   %rax,%rax
  21a177:	74 13                	je     21a18c <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x3c>
  21a179:	eb 00                	jmp    21a17b <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x2b>
  21a17b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a180:	48 83 e8 01          	sub    $0x1,%rax
  21a184:	74 24                	je     21a1aa <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x5a>
  21a186:	eb 00                	jmp    21a188 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x38>
  21a188:	eb 3e                	jmp    21a1c8 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x78>
  21a18a:	0f 0b                	ud2    
  21a18c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21a191:	48 8d 35 df 79 fe ff 	lea    -0x18621(%rip),%rsi        # 201b77 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e8>
  21a198:	ba 03 00 00 00       	mov    $0x3,%edx
  21a19d:	e8 1e 2d 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21a1a2:	24 01                	and    $0x1,%al
  21a1a4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21a1a8:	eb 3a                	jmp    21a1e4 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  21a1aa:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21a1af:	48 8d 35 be 79 fe ff 	lea    -0x18642(%rip),%rsi        # 201b74 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e5>
  21a1b6:	ba 03 00 00 00       	mov    $0x3,%edx
  21a1bb:	e8 00 2d 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21a1c0:	24 01                	and    $0x1,%al
  21a1c2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21a1c6:	eb 1c                	jmp    21a1e4 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  21a1c8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21a1cd:	48 8d 35 9e 79 fe ff 	lea    -0x18662(%rip),%rsi        # 201b72 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e3>
  21a1d4:	ba 02 00 00 00       	mov    $0x2,%edx
  21a1d9:	e8 e2 2c 00 00       	callq  21cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21a1de:	24 01                	and    $0x1,%al
  21a1e0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21a1e4:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21a1e8:	24 01                	and    $0x1,%al
  21a1ea:	0f b6 c0             	movzbl %al,%eax
  21a1ed:	48 83 c4 38          	add    $0x38,%rsp
  21a1f1:	c3                   	retq   
  21a1f2:	cc                   	int3   
  21a1f3:	cc                   	int3   
  21a1f4:	cc                   	int3   
  21a1f5:	cc                   	int3   
  21a1f6:	cc                   	int3   
  21a1f7:	cc                   	int3   
  21a1f8:	cc                   	int3   
  21a1f9:	cc                   	int3   
  21a1fa:	cc                   	int3   
  21a1fb:	cc                   	int3   
  21a1fc:	cc                   	int3   
  21a1fd:	cc                   	int3   
  21a1fe:	cc                   	int3   
  21a1ff:	cc                   	int3   

000000000021a200 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  21a200:	48 83 ec 28          	sub    $0x28,%rsp
  21a204:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21a209:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  21a20e:	e8 9d f7 ff ff       	callq  2199b0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>
  21a213:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a218:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21a21d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21a222:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  21a227:	48 83 c4 28          	add    $0x28,%rsp
  21a22b:	c3                   	retq   
  21a22c:	cc                   	int3   
  21a22d:	cc                   	int3   
  21a22e:	cc                   	int3   
  21a22f:	cc                   	int3   

000000000021a230 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>:
  21a230:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a237:	0f b7 07             	movzwl (%rdi),%eax
  21a23a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a241:	00 
  21a242:	45 31 c9             	xor    %r9d,%r9d
  21a245:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a24b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  21a250:	0f b7 d0             	movzwl %ax,%edx
  21a253:	89 d0                	mov    %edx,%eax
  21a255:	c1 e8 04             	shr    $0x4,%eax
  21a258:	89 d1                	mov    %edx,%ecx
  21a25a:	80 e1 0f             	and    $0xf,%cl
  21a25d:	80 f9 0a             	cmp    $0xa,%cl
  21a260:	bf 57 00 00 00       	mov    $0x57,%edi
  21a265:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a269:	40 00 cf             	add    %cl,%dil
  21a26c:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a270:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a274:	49 83 c1 01          	add    $0x1,%r9
  21a278:	66 83 fa 0f          	cmp    $0xf,%dx
  21a27c:	77 d2                	ja     21a250 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x20>
  21a27e:	bf 80 00 00 00       	mov    $0x80,%edi
  21a283:	4c 29 cf             	sub    %r9,%rdi
  21a286:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a28d:	73 21                	jae    21a2b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x80>
  21a28f:	48 8d 15 58 79 fe ff 	lea    -0x186a8(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a296:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a29b:	48 89 f7             	mov    %rsi,%rdi
  21a29e:	be 01 00 00 00       	mov    $0x1,%esi
  21a2a3:	e8 78 24 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a2a8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a2af:	c3                   	retq   
  21a2b0:	48 8d 15 21 61 00 00 	lea    0x6121(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a2b7:	be 80 00 00 00       	mov    $0x80,%esi
  21a2bc:	e8 6f 10 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a2c1:	0f 0b                	ud2    
  21a2c3:	cc                   	int3   
  21a2c4:	cc                   	int3   
  21a2c5:	cc                   	int3   
  21a2c6:	cc                   	int3   
  21a2c7:	cc                   	int3   
  21a2c8:	cc                   	int3   
  21a2c9:	cc                   	int3   
  21a2ca:	cc                   	int3   
  21a2cb:	cc                   	int3   
  21a2cc:	cc                   	int3   
  21a2cd:	cc                   	int3   
  21a2ce:	cc                   	int3   
  21a2cf:	cc                   	int3   

000000000021a2d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>:
  21a2d0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a2d7:	0f b7 07             	movzwl (%rdi),%eax
  21a2da:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a2e1:	00 
  21a2e2:	45 31 c9             	xor    %r9d,%r9d
  21a2e5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a2eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  21a2f0:	0f b7 d0             	movzwl %ax,%edx
  21a2f3:	89 d0                	mov    %edx,%eax
  21a2f5:	c1 e8 04             	shr    $0x4,%eax
  21a2f8:	89 d1                	mov    %edx,%ecx
  21a2fa:	80 e1 0f             	and    $0xf,%cl
  21a2fd:	80 f9 0a             	cmp    $0xa,%cl
  21a300:	bf 37 00 00 00       	mov    $0x37,%edi
  21a305:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a309:	40 00 cf             	add    %cl,%dil
  21a30c:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a310:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a314:	49 83 c1 01          	add    $0x1,%r9
  21a318:	66 83 fa 0f          	cmp    $0xf,%dx
  21a31c:	77 d2                	ja     21a2f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x20>
  21a31e:	bf 80 00 00 00       	mov    $0x80,%edi
  21a323:	4c 29 cf             	sub    %r9,%rdi
  21a326:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a32d:	73 21                	jae    21a350 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x80>
  21a32f:	48 8d 15 b8 78 fe ff 	lea    -0x18748(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a336:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a33b:	48 89 f7             	mov    %rsi,%rdi
  21a33e:	be 01 00 00 00       	mov    $0x1,%esi
  21a343:	e8 d8 23 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a348:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a34f:	c3                   	retq   
  21a350:	48 8d 15 81 60 00 00 	lea    0x6081(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a357:	be 80 00 00 00       	mov    $0x80,%esi
  21a35c:	e8 cf 0f 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a361:	0f 0b                	ud2    
  21a363:	cc                   	int3   
  21a364:	cc                   	int3   
  21a365:	cc                   	int3   
  21a366:	cc                   	int3   
  21a367:	cc                   	int3   
  21a368:	cc                   	int3   
  21a369:	cc                   	int3   
  21a36a:	cc                   	int3   
  21a36b:	cc                   	int3   
  21a36c:	cc                   	int3   
  21a36d:	cc                   	int3   
  21a36e:	cc                   	int3   
  21a36f:	cc                   	int3   

000000000021a370 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>:
  21a370:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a377:	8b 07                	mov    (%rdi),%eax
  21a379:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a380:	00 
  21a381:	45 31 c9             	xor    %r9d,%r9d
  21a384:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a38a:	89 c2                	mov    %eax,%edx
  21a38c:	0f 1f 40 00          	nopl   0x0(%rax)
  21a390:	c1 ea 04             	shr    $0x4,%edx
  21a393:	89 c1                	mov    %eax,%ecx
  21a395:	80 e1 0f             	and    $0xf,%cl
  21a398:	80 f9 0a             	cmp    $0xa,%cl
  21a39b:	bf 57 00 00 00       	mov    $0x57,%edi
  21a3a0:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a3a4:	40 00 cf             	add    %cl,%dil
  21a3a7:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a3ab:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a3af:	49 83 c1 01          	add    $0x1,%r9
  21a3b3:	83 f8 0f             	cmp    $0xf,%eax
  21a3b6:	89 d0                	mov    %edx,%eax
  21a3b8:	77 d6                	ja     21a390 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x20>
  21a3ba:	bf 80 00 00 00       	mov    $0x80,%edi
  21a3bf:	4c 29 cf             	sub    %r9,%rdi
  21a3c2:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a3c9:	73 21                	jae    21a3ec <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x7c>
  21a3cb:	48 8d 15 1c 78 fe ff 	lea    -0x187e4(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a3d2:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a3d7:	48 89 f7             	mov    %rsi,%rdi
  21a3da:	be 01 00 00 00       	mov    $0x1,%esi
  21a3df:	e8 3c 23 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a3e4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a3eb:	c3                   	retq   
  21a3ec:	48 8d 15 e5 5f 00 00 	lea    0x5fe5(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a3f3:	be 80 00 00 00       	mov    $0x80,%esi
  21a3f8:	e8 33 0f 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a3fd:	0f 0b                	ud2    
  21a3ff:	cc                   	int3   

000000000021a400 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>:
  21a400:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a407:	8b 07                	mov    (%rdi),%eax
  21a409:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a410:	00 
  21a411:	45 31 c9             	xor    %r9d,%r9d
  21a414:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a41a:	89 c2                	mov    %eax,%edx
  21a41c:	0f 1f 40 00          	nopl   0x0(%rax)
  21a420:	c1 ea 04             	shr    $0x4,%edx
  21a423:	89 c1                	mov    %eax,%ecx
  21a425:	80 e1 0f             	and    $0xf,%cl
  21a428:	80 f9 0a             	cmp    $0xa,%cl
  21a42b:	bf 37 00 00 00       	mov    $0x37,%edi
  21a430:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a434:	40 00 cf             	add    %cl,%dil
  21a437:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a43b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a43f:	49 83 c1 01          	add    $0x1,%r9
  21a443:	83 f8 0f             	cmp    $0xf,%eax
  21a446:	89 d0                	mov    %edx,%eax
  21a448:	77 d6                	ja     21a420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x20>
  21a44a:	bf 80 00 00 00       	mov    $0x80,%edi
  21a44f:	4c 29 cf             	sub    %r9,%rdi
  21a452:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a459:	73 21                	jae    21a47c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x7c>
  21a45b:	48 8d 15 8c 77 fe ff 	lea    -0x18874(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a462:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a467:	48 89 f7             	mov    %rsi,%rdi
  21a46a:	be 01 00 00 00       	mov    $0x1,%esi
  21a46f:	e8 ac 22 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a474:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a47b:	c3                   	retq   
  21a47c:	48 8d 15 55 5f 00 00 	lea    0x5f55(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a483:	be 80 00 00 00       	mov    $0x80,%esi
  21a488:	e8 a3 0e 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a48d:	0f 0b                	ud2    
  21a48f:	cc                   	int3   

000000000021a490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>:
  21a490:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a497:	48 8b 07             	mov    (%rdi),%rax
  21a49a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a4a1:	00 
  21a4a2:	45 31 c9             	xor    %r9d,%r9d
  21a4a5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a4ab:	48 89 c2             	mov    %rax,%rdx
  21a4ae:	66 90                	xchg   %ax,%ax
  21a4b0:	48 c1 ea 04          	shr    $0x4,%rdx
  21a4b4:	89 c1                	mov    %eax,%ecx
  21a4b6:	80 e1 0f             	and    $0xf,%cl
  21a4b9:	80 f9 0a             	cmp    $0xa,%cl
  21a4bc:	bf 57 00 00 00       	mov    $0x57,%edi
  21a4c1:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a4c5:	40 00 cf             	add    %cl,%dil
  21a4c8:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a4cc:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a4d0:	49 83 c1 01          	add    $0x1,%r9
  21a4d4:	48 83 f8 0f          	cmp    $0xf,%rax
  21a4d8:	48 89 d0             	mov    %rdx,%rax
  21a4db:	77 d3                	ja     21a4b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x20>
  21a4dd:	bf 80 00 00 00       	mov    $0x80,%edi
  21a4e2:	4c 29 cf             	sub    %r9,%rdi
  21a4e5:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a4ec:	73 21                	jae    21a50f <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x7f>
  21a4ee:	48 8d 15 f9 76 fe ff 	lea    -0x18907(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a4f5:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a4fa:	48 89 f7             	mov    %rsi,%rdi
  21a4fd:	be 01 00 00 00       	mov    $0x1,%esi
  21a502:	e8 19 22 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a507:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a50e:	c3                   	retq   
  21a50f:	48 8d 15 c2 5e 00 00 	lea    0x5ec2(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a516:	be 80 00 00 00       	mov    $0x80,%esi
  21a51b:	e8 10 0e 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a520:	0f 0b                	ud2    
  21a522:	cc                   	int3   
  21a523:	cc                   	int3   
  21a524:	cc                   	int3   
  21a525:	cc                   	int3   
  21a526:	cc                   	int3   
  21a527:	cc                   	int3   
  21a528:	cc                   	int3   
  21a529:	cc                   	int3   
  21a52a:	cc                   	int3   
  21a52b:	cc                   	int3   
  21a52c:	cc                   	int3   
  21a52d:	cc                   	int3   
  21a52e:	cc                   	int3   
  21a52f:	cc                   	int3   

000000000021a530 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>:
  21a530:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21a537:	48 8b 07             	mov    (%rdi),%rax
  21a53a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  21a541:	00 
  21a542:	45 31 c9             	xor    %r9d,%r9d
  21a545:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  21a54b:	48 89 c2             	mov    %rax,%rdx
  21a54e:	66 90                	xchg   %ax,%ax
  21a550:	48 c1 ea 04          	shr    $0x4,%rdx
  21a554:	89 c1                	mov    %eax,%ecx
  21a556:	80 e1 0f             	and    $0xf,%cl
  21a559:	80 f9 0a             	cmp    $0xa,%cl
  21a55c:	bf 37 00 00 00       	mov    $0x37,%edi
  21a561:	41 0f 42 fa          	cmovb  %r10d,%edi
  21a565:	40 00 cf             	add    %cl,%dil
  21a568:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  21a56c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21a570:	49 83 c1 01          	add    $0x1,%r9
  21a574:	48 83 f8 0f          	cmp    $0xf,%rax
  21a578:	48 89 d0             	mov    %rdx,%rax
  21a57b:	77 d3                	ja     21a550 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x20>
  21a57d:	bf 80 00 00 00       	mov    $0x80,%edi
  21a582:	4c 29 cf             	sub    %r9,%rdi
  21a585:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21a58c:	73 21                	jae    21a5af <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x7f>
  21a58e:	48 8d 15 59 76 fe ff 	lea    -0x189a7(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21a595:	b9 02 00 00 00       	mov    $0x2,%ecx
  21a59a:	48 89 f7             	mov    %rsi,%rdi
  21a59d:	be 01 00 00 00       	mov    $0x1,%esi
  21a5a2:	e8 79 21 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21a5a7:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21a5ae:	c3                   	retq   
  21a5af:	48 8d 15 22 5e 00 00 	lea    0x5e22(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21a5b6:	be 80 00 00 00       	mov    $0x80,%esi
  21a5bb:	e8 70 0d 00 00       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21a5c0:	0f 0b                	ud2    
  21a5c2:	cc                   	int3   
  21a5c3:	cc                   	int3   
  21a5c4:	cc                   	int3   
  21a5c5:	cc                   	int3   
  21a5c6:	cc                   	int3   
  21a5c7:	cc                   	int3   
  21a5c8:	cc                   	int3   
  21a5c9:	cc                   	int3   
  21a5ca:	cc                   	int3   
  21a5cb:	cc                   	int3   
  21a5cc:	cc                   	int3   
  21a5cd:	cc                   	int3   
  21a5ce:	cc                   	int3   
  21a5cf:	cc                   	int3   

000000000021a5d0 <_ZN4core3ptr25drop_in_place$LT$char$GT$17h7170306f6109ec38E.llvm.142292087146638061>:
  21a5d0:	c3                   	retq   
  21a5d1:	cc                   	int3   
  21a5d2:	cc                   	int3   
  21a5d3:	cc                   	int3   
  21a5d4:	cc                   	int3   
  21a5d5:	cc                   	int3   
  21a5d6:	cc                   	int3   
  21a5d7:	cc                   	int3   
  21a5d8:	cc                   	int3   
  21a5d9:	cc                   	int3   
  21a5da:	cc                   	int3   
  21a5db:	cc                   	int3   
  21a5dc:	cc                   	int3   
  21a5dd:	cc                   	int3   
  21a5de:	cc                   	int3   
  21a5df:	cc                   	int3   

000000000021a5e0 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>:
  21a5e0:	48 83 ec 78          	sub    $0x78,%rsp
  21a5e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21a5e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21a5ee:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21a5f3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21a5f8:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21a5fd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21a602:	48 8d 05 77 34 00 00 	lea    0x3477(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21a609:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21a60e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21a613:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21a618:	48 8d 05 d1 33 00 00 	lea    0x33d1(%rip),%rax        # 21d9f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  21a61f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21a624:	48 8d 05 c5 5d 00 00 	lea    0x5dc5(%rip),%rax        # 2203f0 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x18>
  21a62b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21a630:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
  21a637:	00 00 
  21a639:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  21a640:	00 00 
  21a642:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  21a647:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21a64c:	48 c7 44 24 70 02 00 	movq   $0x2,0x70(%rsp)
  21a653:	00 00 
  21a655:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21a65a:	4c 89 c6             	mov    %r8,%rsi
  21a65d:	e8 9e 0a 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21a662:	0f 0b                	ud2    
  21a664:	cc                   	int3   
  21a665:	cc                   	int3   
  21a666:	cc                   	int3   
  21a667:	cc                   	int3   
  21a668:	cc                   	int3   
  21a669:	cc                   	int3   
  21a66a:	cc                   	int3   
  21a66b:	cc                   	int3   
  21a66c:	cc                   	int3   
  21a66d:	cc                   	int3   
  21a66e:	cc                   	int3   
  21a66f:	cc                   	int3   

000000000021a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>:
  21a670:	55                   	push   %rbp
  21a671:	41 57                	push   %r15
  21a673:	41 56                	push   %r14
  21a675:	41 55                	push   %r13
  21a677:	41 54                	push   %r12
  21a679:	53                   	push   %rbx
  21a67a:	50                   	push   %rax
  21a67b:	48 85 d2             	test   %rdx,%rdx
  21a67e:	0f 84 83 01 00 00    	je     21a807 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  21a684:	49 89 d5             	mov    %rdx,%r13
  21a687:	49 89 f6             	mov    %rsi,%r14
  21a68a:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  21a68e:	4c 8b 3f             	mov    (%rdi),%r15
  21a691:	48 8b 47 08          	mov    0x8(%rdi),%rax
  21a695:	48 89 04 24          	mov    %rax,(%rsp)
  21a699:	eb 2d                	jmp    21a6c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x58>
  21a69b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  21a6a0:	4c 89 ff             	mov    %r15,%rdi
  21a6a3:	4c 89 f6             	mov    %r14,%rsi
  21a6a6:	31 d2                	xor    %edx,%edx
  21a6a8:	48 8b 04 24          	mov    (%rsp),%rax
  21a6ac:	ff 50 18             	callq  *0x18(%rax)
  21a6af:	bb 00 00 00 00       	mov    $0x0,%ebx
  21a6b4:	84 c0                	test   %al,%al
  21a6b6:	0f 85 47 01 00 00    	jne    21a803 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  21a6bc:	49 01 de             	add    %rbx,%r14
  21a6bf:	49 29 dd             	sub    %rbx,%r13
  21a6c2:	0f 84 3f 01 00 00    	je     21a807 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  21a6c8:	80 7d 00 00          	cmpb   $0x0,0x0(%rbp)
  21a6cc:	74 1e                	je     21a6ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x7c>
  21a6ce:	ba 04 00 00 00       	mov    $0x4,%edx
  21a6d3:	4c 89 ff             	mov    %r15,%rdi
  21a6d6:	48 8d 35 dc 64 fe ff 	lea    -0x19b24(%rip),%rsi        # 200bb9 <str.3+0x179>
  21a6dd:	48 8b 04 24          	mov    (%rsp),%rax
  21a6e1:	ff 50 18             	callq  *0x18(%rax)
  21a6e4:	84 c0                	test   %al,%al
  21a6e6:	0f 85 17 01 00 00    	jne    21a803 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  21a6ec:	45 31 e4             	xor    %r12d,%r12d
  21a6ef:	4c 89 e8             	mov    %r13,%rax
  21a6f2:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  21a6f6:	48 83 f8 10          	cmp    $0x10,%rax
  21a6fa:	72 24                	jb     21a720 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  21a6fc:	0f 1f 40 00          	nopl   0x0(%rax)
  21a700:	bf 0a 00 00 00       	mov    $0xa,%edi
  21a705:	48 89 c2             	mov    %rax,%rdx
  21a708:	e8 c3 14 00 00       	callq  21bbd0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>
  21a70d:	48 83 f8 01          	cmp    $0x1,%rax
  21a711:	74 4d                	je     21a760 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  21a713:	e9 88 00 00 00       	jmpq   21a7a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  21a718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  21a71f:	00 
  21a720:	31 d2                	xor    %edx,%edx
  21a722:	48 85 c0             	test   %rax,%rax
  21a725:	74 1b                	je     21a742 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xd2>
  21a727:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  21a72e:	00 00 
  21a730:	80 3c 16 0a          	cmpb   $0xa,(%rsi,%rdx,1)
  21a734:	74 1a                	je     21a750 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xe0>
  21a736:	48 83 c2 01          	add    $0x1,%rdx
  21a73a:	48 39 d0             	cmp    %rdx,%rax
  21a73d:	75 f1                	jne    21a730 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xc0>
  21a73f:	48 89 c2             	mov    %rax,%rdx
  21a742:	31 c0                	xor    %eax,%eax
  21a744:	48 83 f8 01          	cmp    $0x1,%rax
  21a748:	74 16                	je     21a760 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  21a74a:	eb 54                	jmp    21a7a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  21a74c:	0f 1f 40 00          	nopl   0x0(%rax)
  21a750:	b8 01 00 00 00       	mov    $0x1,%eax
  21a755:	48 83 f8 01          	cmp    $0x1,%rax
  21a759:	75 45                	jne    21a7a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  21a75b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  21a760:	49 01 d4             	add    %rdx,%r12
  21a763:	4c 89 e3             	mov    %r12,%rbx
  21a766:	48 ff c3             	inc    %rbx
  21a769:	74 0c                	je     21a777 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  21a76b:	49 39 dd             	cmp    %rbx,%r13
  21a76e:	72 07                	jb     21a777 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  21a770:	43 80 3c 26 0a       	cmpb   $0xa,(%r14,%r12,1)
  21a775:	74 66                	je     21a7dd <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x16d>
  21a777:	4c 89 e8             	mov    %r13,%rax
  21a77a:	48 29 d8             	sub    %rbx,%rax
  21a77d:	72 21                	jb     21a7a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  21a77f:	49 89 dc             	mov    %rbx,%r12
  21a782:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  21a786:	48 83 f8 10          	cmp    $0x10,%rax
  21a78a:	72 94                	jb     21a720 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  21a78c:	e9 6f ff ff ff       	jmpq   21a700 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x90>
  21a791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21a798:	00 00 00 
  21a79b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  21a7a0:	c6 45 00 00          	movb   $0x0,0x0(%rbp)
  21a7a4:	4c 89 eb             	mov    %r13,%rbx
  21a7a7:	4d 85 ed             	test   %r13,%r13
  21a7aa:	0f 84 f0 fe ff ff    	je     21a6a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x30>
  21a7b0:	49 39 dd             	cmp    %rbx,%r13
  21a7b3:	76 31                	jbe    21a7e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x176>
  21a7b5:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  21a7ba:	7e 5c                	jle    21a818 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  21a7bc:	4c 89 ff             	mov    %r15,%rdi
  21a7bf:	4c 89 f6             	mov    %r14,%rsi
  21a7c2:	48 89 da             	mov    %rbx,%rdx
  21a7c5:	48 8b 04 24          	mov    (%rsp),%rax
  21a7c9:	ff 50 18             	callq  *0x18(%rax)
  21a7cc:	84 c0                	test   %al,%al
  21a7ce:	75 33                	jne    21a803 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  21a7d0:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  21a7d5:	0f 8f e1 fe ff ff    	jg     21a6bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  21a7db:	eb 54                	jmp    21a831 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1c1>
  21a7dd:	c6 45 00 01          	movb   $0x1,0x0(%rbp)
  21a7e1:	49 39 dd             	cmp    %rbx,%r13
  21a7e4:	77 cf                	ja     21a7b5 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x145>
  21a7e6:	75 30                	jne    21a818 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  21a7e8:	4c 89 ff             	mov    %r15,%rdi
  21a7eb:	4c 89 f6             	mov    %r14,%rsi
  21a7ee:	4c 89 ea             	mov    %r13,%rdx
  21a7f1:	48 8b 04 24          	mov    (%rsp),%rax
  21a7f5:	ff 50 18             	callq  *0x18(%rax)
  21a7f8:	4c 89 eb             	mov    %r13,%rbx
  21a7fb:	84 c0                	test   %al,%al
  21a7fd:	0f 84 b9 fe ff ff    	je     21a6bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  21a803:	b0 01                	mov    $0x1,%al
  21a805:	eb 02                	jmp    21a809 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x199>
  21a807:	31 c0                	xor    %eax,%eax
  21a809:	48 83 c4 08          	add    $0x8,%rsp
  21a80d:	5b                   	pop    %rbx
  21a80e:	41 5c                	pop    %r12
  21a810:	41 5d                	pop    %r13
  21a812:	41 5e                	pop    %r14
  21a814:	41 5f                	pop    %r15
  21a816:	5d                   	pop    %rbp
  21a817:	c3                   	retq   
  21a818:	4c 8d 05 f1 5b 00 00 	lea    0x5bf1(%rip),%r8        # 220410 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x38>
  21a81f:	4c 89 f7             	mov    %r14,%rdi
  21a822:	4c 89 ee             	mov    %r13,%rsi
  21a825:	31 d2                	xor    %edx,%edx
  21a827:	48 89 d9             	mov    %rbx,%rcx
  21a82a:	e8 31 18 00 00       	callq  21c060 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  21a82f:	0f 0b                	ud2    
  21a831:	4c 8d 05 f0 5b 00 00 	lea    0x5bf0(%rip),%r8        # 220428 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x50>
  21a838:	4c 89 f7             	mov    %r14,%rdi
  21a83b:	4c 89 ee             	mov    %r13,%rsi
  21a83e:	48 89 da             	mov    %rbx,%rdx
  21a841:	4c 89 e9             	mov    %r13,%rcx
  21a844:	e8 17 18 00 00       	callq  21c060 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  21a849:	0f 0b                	ud2    
  21a84b:	cc                   	int3   
  21a84c:	cc                   	int3   
  21a84d:	cc                   	int3   
  21a84e:	cc                   	int3   
  21a84f:	cc                   	int3   

000000000021a850 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>:
  21a850:	55                   	push   %rbp
  21a851:	41 57                	push   %r15
  21a853:	41 56                	push   %r14
  21a855:	41 55                	push   %r13
  21a857:	41 54                	push   %r12
  21a859:	53                   	push   %rbx
  21a85a:	48 83 ec 68          	sub    $0x68,%rsp
  21a85e:	48 89 fb             	mov    %rdi,%rbx
  21a861:	41 b4 01             	mov    $0x1,%r12b
  21a864:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  21a868:	74 1a                	je     21a884 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x34>
  21a86a:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  21a86e:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  21a872:	48 89 d8             	mov    %rbx,%rax
  21a875:	48 83 c4 68          	add    $0x68,%rsp
  21a879:	5b                   	pop    %rbx
  21a87a:	41 5c                	pop    %r12
  21a87c:	41 5d                	pop    %r13
  21a87e:	41 5e                	pop    %r14
  21a880:	41 5f                	pop    %r15
  21a882:	5d                   	pop    %rbp
  21a883:	c3                   	retq   
  21a884:	49 89 cf             	mov    %rcx,%r15
  21a887:	49 89 d5             	mov    %rdx,%r13
  21a88a:	49 89 f6             	mov    %rsi,%r14
  21a88d:	48 8b 2b             	mov    (%rbx),%rbp
  21a890:	8b 45 30             	mov    0x30(%rbp),%eax
  21a893:	8a 4b 09             	mov    0x9(%rbx),%cl
  21a896:	a8 04                	test   $0x4,%al
  21a898:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  21a89d:	75 73                	jne    21a912 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xc2>
  21a89f:	31 d2                	xor    %edx,%edx
  21a8a1:	84 c9                	test   %cl,%cl
  21a8a3:	48 8d 05 90 74 fe ff 	lea    -0x18b70(%rip),%rax        # 201d3a <anon.8c5785e28e68a0869ce162bce53fbf2c.27.llvm.142292087146638061>
  21a8aa:	48 8d 35 87 74 fe ff 	lea    -0x18b79(%rip),%rsi        # 201d38 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  21a8b1:	48 0f 44 f0          	cmove  %rax,%rsi
  21a8b5:	0f 94 c2             	sete   %dl
  21a8b8:	48 83 ca 02          	or     $0x2,%rdx
  21a8bc:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  21a8c0:	48 8b 45 28          	mov    0x28(%rbp),%rax
  21a8c4:	ff 50 18             	callq  *0x18(%rax)
  21a8c7:	84 c0                	test   %al,%al
  21a8c9:	75 9f                	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a8cb:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  21a8cf:	48 8b 45 28          	mov    0x28(%rbp),%rax
  21a8d3:	4c 89 f6             	mov    %r14,%rsi
  21a8d6:	4c 89 ea             	mov    %r13,%rdx
  21a8d9:	ff 50 18             	callq  *0x18(%rax)
  21a8dc:	84 c0                	test   %al,%al
  21a8de:	75 8a                	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a8e0:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  21a8e4:	48 8b 45 28          	mov    0x28(%rbp),%rax
  21a8e8:	48 8d 35 c9 73 fe ff 	lea    -0x18c37(%rip),%rsi        # 201cb8 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  21a8ef:	ba 02 00 00 00       	mov    $0x2,%edx
  21a8f4:	ff 50 18             	callq  *0x18(%rax)
  21a8f7:	84 c0                	test   %al,%al
  21a8f9:	0f 85 6b ff ff ff    	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a8ff:	4c 89 ff             	mov    %r15,%rdi
  21a902:	48 89 ee             	mov    %rbp,%rsi
  21a905:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21a90a:	ff 50 18             	callq  *0x18(%rax)
  21a90d:	e9 f5 00 00 00       	jmpq   21aa07 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1b7>
  21a912:	84 c9                	test   %cl,%cl
  21a914:	75 22                	jne    21a938 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xe8>
  21a916:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  21a91a:	48 8b 45 28          	mov    0x28(%rbp),%rax
  21a91e:	48 8d 35 0e 74 fe ff 	lea    -0x18bf2(%rip),%rsi        # 201d33 <anon.8c5785e28e68a0869ce162bce53fbf2c.24.llvm.142292087146638061>
  21a925:	ba 03 00 00 00       	mov    $0x3,%edx
  21a92a:	ff 50 18             	callq  *0x18(%rax)
  21a92d:	84 c0                	test   %al,%al
  21a92f:	0f 85 35 ff ff ff    	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a935:	8b 45 30             	mov    0x30(%rbp),%eax
  21a938:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  21a93d:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  21a941:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  21a945:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21a94a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21a94f:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  21a954:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21a959:	8b 4d 34             	mov    0x34(%rbp),%ecx
  21a95c:	8a 55 38             	mov    0x38(%rbp),%dl
  21a95f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  21a963:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  21a967:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  21a96b:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  21a96f:	89 44 24 58          	mov    %eax,0x58(%rsp)
  21a973:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
  21a977:	88 54 24 60          	mov    %dl,0x60(%rsp)
  21a97b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21a980:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21a985:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  21a98a:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  21a98f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21a994:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  21a999:	48 8d 05 a0 5d 00 00 	lea    0x5da0(%rip),%rax        # 220740 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  21a9a0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21a9a5:	4c 89 f6             	mov    %r14,%rsi
  21a9a8:	4c 89 ea             	mov    %r13,%rdx
  21a9ab:	e8 c0 fc ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21a9b0:	84 c0                	test   %al,%al
  21a9b2:	0f 85 b2 fe ff ff    	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a9b8:	48 8d 35 f9 72 fe ff 	lea    -0x18d07(%rip),%rsi        # 201cb8 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  21a9bf:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21a9c4:	ba 02 00 00 00       	mov    $0x2,%edx
  21a9c9:	e8 a2 fc ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21a9ce:	84 c0                	test   %al,%al
  21a9d0:	0f 85 94 fe ff ff    	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a9d6:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  21a9db:	4c 89 ff             	mov    %r15,%rdi
  21a9de:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21a9e3:	ff 50 18             	callq  *0x18(%rax)
  21a9e6:	84 c0                	test   %al,%al
  21a9e8:	0f 85 7c fe ff ff    	jne    21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21a9ee:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21a9f3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21a9f8:	48 8d 35 37 73 fe ff 	lea    -0x18cc9(%rip),%rsi        # 201d36 <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  21a9ff:	ba 02 00 00 00       	mov    $0x2,%edx
  21aa04:	ff 50 18             	callq  *0x18(%rax)
  21aa07:	41 89 c4             	mov    %eax,%r12d
  21aa0a:	e9 5b fe ff ff       	jmpq   21a86a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  21aa0f:	cc                   	int3   

000000000021aa10 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>:
  21aa10:	53                   	push   %rbx
  21aa11:	80 7f 09 00          	cmpb   $0x0,0x9(%rdi)
  21aa15:	8a 47 08             	mov    0x8(%rdi),%al
  21aa18:	74 42                	je     21aa5c <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x4c>
  21aa1a:	48 89 fb             	mov    %rdi,%rbx
  21aa1d:	84 c0                	test   %al,%al
  21aa1f:	b0 01                	mov    $0x1,%al
  21aa21:	75 36                	jne    21aa59 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x49>
  21aa23:	48 8b 03             	mov    (%rbx),%rax
  21aa26:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  21aa2a:	75 16                	jne    21aa42 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x32>
  21aa2c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  21aa30:	48 8b 40 28          	mov    0x28(%rax),%rax
  21aa34:	48 8d 35 03 73 fe ff 	lea    -0x18cfd(%rip),%rsi        # 201d3e <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  21aa3b:	ba 02 00 00 00       	mov    $0x2,%edx
  21aa40:	eb 14                	jmp    21aa56 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x46>
  21aa42:	48 8b 78 20          	mov    0x20(%rax),%rdi
  21aa46:	48 8b 40 28          	mov    0x28(%rax),%rax
  21aa4a:	48 8d 35 ec 72 fe ff 	lea    -0x18d14(%rip),%rsi        # 201d3d <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  21aa51:	ba 01 00 00 00       	mov    $0x1,%edx
  21aa56:	ff 50 18             	callq  *0x18(%rax)
  21aa59:	88 43 08             	mov    %al,0x8(%rbx)
  21aa5c:	5b                   	pop    %rbx
  21aa5d:	c3                   	retq   
  21aa5e:	cc                   	int3   
  21aa5f:	cc                   	int3   

000000000021aa60 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>:
  21aa60:	41 57                	push   %r15
  21aa62:	41 56                	push   %r14
  21aa64:	41 55                	push   %r13
  21aa66:	41 54                	push   %r12
  21aa68:	53                   	push   %rbx
  21aa69:	48 83 ec 60          	sub    $0x60,%rsp
  21aa6d:	48 89 fb             	mov    %rdi,%rbx
  21aa70:	80 7f 10 00          	cmpb   $0x0,0x10(%rdi)
  21aa74:	74 22                	je     21aa98 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x38>
  21aa76:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  21aa7a:	b0 01                	mov    $0x1,%al
  21aa7c:	88 43 10             	mov    %al,0x10(%rbx)
  21aa7f:	49 83 c5 01          	add    $0x1,%r13
  21aa83:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
  21aa87:	48 89 d8             	mov    %rbx,%rax
  21aa8a:	48 83 c4 60          	add    $0x60,%rsp
  21aa8e:	5b                   	pop    %rbx
  21aa8f:	41 5c                	pop    %r12
  21aa91:	41 5d                	pop    %r13
  21aa93:	41 5e                	pop    %r14
  21aa95:	41 5f                	pop    %r15
  21aa97:	c3                   	retq   
  21aa98:	49 89 d6             	mov    %rdx,%r14
  21aa9b:	49 89 f7             	mov    %rsi,%r15
  21aa9e:	4c 8b 23             	mov    (%rbx),%r12
  21aaa1:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  21aaa5:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  21aaaa:	a8 04                	test   $0x4,%al
  21aaac:	75 43                	jne    21aaf1 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x91>
  21aaae:	31 c0                	xor    %eax,%eax
  21aab0:	4d 85 ed             	test   %r13,%r13
  21aab3:	0f 94 c0             	sete   %al
  21aab6:	48 8d 0d 85 72 fe ff 	lea    -0x18d7b(%rip),%rcx        # 201d42 <anon.8c5785e28e68a0869ce162bce53fbf2c.34.llvm.142292087146638061>
  21aabd:	48 8d 35 74 72 fe ff 	lea    -0x18d8c(%rip),%rsi        # 201d38 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  21aac4:	48 0f 44 f1          	cmove  %rcx,%rsi
  21aac8:	ba 02 00 00 00       	mov    $0x2,%edx
  21aacd:	48 29 c2             	sub    %rax,%rdx
  21aad0:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  21aad5:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  21aada:	ff 50 18             	callq  *0x18(%rax)
  21aadd:	89 c1                	mov    %eax,%ecx
  21aadf:	b0 01                	mov    $0x1,%al
  21aae1:	84 c9                	test   %cl,%cl
  21aae3:	75 97                	jne    21aa7c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  21aae5:	4c 89 ff             	mov    %r15,%rdi
  21aae8:	4c 89 e6             	mov    %r12,%rsi
  21aaeb:	41 ff 56 18          	callq  *0x18(%r14)
  21aaef:	eb 8b                	jmp    21aa7c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  21aaf1:	4d 85 ed             	test   %r13,%r13
  21aaf4:	75 2c                	jne    21ab22 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xc2>
  21aaf6:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  21aafb:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  21ab00:	48 8d 35 39 72 fe ff 	lea    -0x18dc7(%rip),%rsi        # 201d40 <anon.8c5785e28e68a0869ce162bce53fbf2c.33.llvm.142292087146638061>
  21ab07:	ba 02 00 00 00       	mov    $0x2,%edx
  21ab0c:	ff 50 18             	callq  *0x18(%rax)
  21ab0f:	84 c0                	test   %al,%al
  21ab11:	74 0a                	je     21ab1d <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xbd>
  21ab13:	b0 01                	mov    $0x1,%al
  21ab15:	45 31 ed             	xor    %r13d,%r13d
  21ab18:	e9 5f ff ff ff       	jmpq   21aa7c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  21ab1d:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  21ab22:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  21ab27:	49 8b 4c 24 20       	mov    0x20(%r12),%rcx
  21ab2c:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
  21ab31:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21ab36:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21ab3b:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  21ab40:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21ab45:	41 8b 4c 24 34       	mov    0x34(%r12),%ecx
  21ab4a:	41 8a 54 24 38       	mov    0x38(%r12),%dl
  21ab4f:	49 8b 34 24          	mov    (%r12),%rsi
  21ab53:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  21ab58:	4d 8b 44 24 10       	mov    0x10(%r12),%r8
  21ab5d:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
  21ab62:	89 44 24 38          	mov    %eax,0x38(%rsp)
  21ab66:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  21ab6a:	88 54 24 40          	mov    %dl,0x40(%rsp)
  21ab6e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21ab73:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21ab78:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  21ab7d:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
  21ab82:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  21ab87:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ab8c:	48 8d 05 ad 5b 00 00 	lea    0x5bad(%rip),%rax        # 220740 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  21ab93:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ab98:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  21ab9d:	4c 89 ff             	mov    %r15,%rdi
  21aba0:	41 ff 56 18          	callq  *0x18(%r14)
  21aba4:	84 c0                	test   %al,%al
  21aba6:	0f 85 ce fe ff ff    	jne    21aa7a <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1a>
  21abac:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21abb1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21abb6:	48 8d 35 79 71 fe ff 	lea    -0x18e87(%rip),%rsi        # 201d36 <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  21abbd:	ba 02 00 00 00       	mov    $0x2,%edx
  21abc2:	ff 50 18             	callq  *0x18(%rax)
  21abc5:	e9 b2 fe ff ff       	jmpq   21aa7c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  21abca:	cc                   	int3   
  21abcb:	cc                   	int3   
  21abcc:	cc                   	int3   
  21abcd:	cc                   	int3   
  21abce:	cc                   	int3   
  21abcf:	cc                   	int3   

000000000021abd0 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>:
  21abd0:	55                   	push   %rbp
  21abd1:	53                   	push   %rbx
  21abd2:	50                   	push   %rax
  21abd3:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  21abd7:	8a 47 10             	mov    0x10(%rdi),%al
  21abda:	48 85 c9             	test   %rcx,%rcx
  21abdd:	74 5c                	je     21ac3b <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x6b>
  21abdf:	48 89 fb             	mov    %rdi,%rbx
  21abe2:	40 b5 01             	mov    $0x1,%bpl
  21abe5:	84 c0                	test   %al,%al
  21abe7:	75 4c                	jne    21ac35 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  21abe9:	48 83 f9 01          	cmp    $0x1,%rcx
  21abed:	75 2a                	jne    21ac19 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  21abef:	80 7b 11 00          	cmpb   $0x0,0x11(%rbx)
  21abf3:	74 24                	je     21ac19 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  21abf5:	48 8b 03             	mov    (%rbx),%rax
  21abf8:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  21abfc:	75 1b                	jne    21ac19 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  21abfe:	48 8b 78 20          	mov    0x20(%rax),%rdi
  21ac02:	48 8b 40 28          	mov    0x28(%rax),%rax
  21ac06:	48 8d 35 36 71 fe ff 	lea    -0x18eca(%rip),%rsi        # 201d43 <anon.8c5785e28e68a0869ce162bce53fbf2c.35.llvm.142292087146638061>
  21ac0d:	ba 01 00 00 00       	mov    $0x1,%edx
  21ac12:	ff 50 18             	callq  *0x18(%rax)
  21ac15:	84 c0                	test   %al,%al
  21ac17:	75 1c                	jne    21ac35 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  21ac19:	48 8b 03             	mov    (%rbx),%rax
  21ac1c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  21ac20:	48 8b 40 28          	mov    0x28(%rax),%rax
  21ac24:	48 8d 35 19 71 fe ff 	lea    -0x18ee7(%rip),%rsi        # 201d44 <anon.8c5785e28e68a0869ce162bce53fbf2c.36.llvm.142292087146638061>
  21ac2b:	ba 01 00 00 00       	mov    $0x1,%edx
  21ac30:	ff 50 18             	callq  *0x18(%rax)
  21ac33:	89 c5                	mov    %eax,%ebp
  21ac35:	40 88 6b 10          	mov    %bpl,0x10(%rbx)
  21ac39:	89 e8                	mov    %ebp,%eax
  21ac3b:	48 83 c4 08          	add    $0x8,%rsp
  21ac3f:	5b                   	pop    %rbx
  21ac40:	5d                   	pop    %rbp
  21ac41:	c3                   	retq   
  21ac42:	cc                   	int3   
  21ac43:	cc                   	int3   
  21ac44:	cc                   	int3   
  21ac45:	cc                   	int3   
  21ac46:	cc                   	int3   
  21ac47:	cc                   	int3   
  21ac48:	cc                   	int3   
  21ac49:	cc                   	int3   
  21ac4a:	cc                   	int3   
  21ac4b:	cc                   	int3   
  21ac4c:	cc                   	int3   
  21ac4d:	cc                   	int3   
  21ac4e:	cc                   	int3   
  21ac4f:	cc                   	int3   

000000000021ac50 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E>:
  21ac50:	50                   	push   %rax
  21ac51:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  21ac58:	00 
  21ac59:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  21ac5f:	73 16                	jae    21ac77 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x27>
  21ac61:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  21ac66:	ba 01 00 00 00       	mov    $0x1,%edx
  21ac6b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21ac70:	e8 fb f9 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ac75:	59                   	pop    %rcx
  21ac76:	c3                   	retq   
  21ac77:	89 f0                	mov    %esi,%eax
  21ac79:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  21ac7f:	73 27                	jae    21aca8 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x58>
  21ac81:	c1 e8 06             	shr    $0x6,%eax
  21ac84:	0c c0                	or     $0xc0,%al
  21ac86:	88 44 24 04          	mov    %al,0x4(%rsp)
  21ac8a:	40 80 e6 3f          	and    $0x3f,%sil
  21ac8e:	40 80 ce 80          	or     $0x80,%sil
  21ac92:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  21ac97:	ba 02 00 00 00       	mov    $0x2,%edx
  21ac9c:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21aca1:	e8 ca f9 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21aca6:	59                   	pop    %rcx
  21aca7:	c3                   	retq   
  21aca8:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  21acae:	73 34                	jae    21ace4 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x94>
  21acb0:	c1 e8 0c             	shr    $0xc,%eax
  21acb3:	0c e0                	or     $0xe0,%al
  21acb5:	88 44 24 04          	mov    %al,0x4(%rsp)
  21acb9:	89 f0                	mov    %esi,%eax
  21acbb:	c1 e8 06             	shr    $0x6,%eax
  21acbe:	24 3f                	and    $0x3f,%al
  21acc0:	0c 80                	or     $0x80,%al
  21acc2:	88 44 24 05          	mov    %al,0x5(%rsp)
  21acc6:	40 80 e6 3f          	and    $0x3f,%sil
  21acca:	40 80 ce 80          	or     $0x80,%sil
  21acce:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  21acd3:	ba 03 00 00 00       	mov    $0x3,%edx
  21acd8:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21acdd:	e8 8e f9 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ace2:	59                   	pop    %rcx
  21ace3:	c3                   	retq   
  21ace4:	c1 e8 12             	shr    $0x12,%eax
  21ace7:	0c f0                	or     $0xf0,%al
  21ace9:	88 44 24 04          	mov    %al,0x4(%rsp)
  21aced:	89 f0                	mov    %esi,%eax
  21acef:	c1 e8 0c             	shr    $0xc,%eax
  21acf2:	24 3f                	and    $0x3f,%al
  21acf4:	0c 80                	or     $0x80,%al
  21acf6:	88 44 24 05          	mov    %al,0x5(%rsp)
  21acfa:	89 f0                	mov    %esi,%eax
  21acfc:	c1 e8 06             	shr    $0x6,%eax
  21acff:	24 3f                	and    $0x3f,%al
  21ad01:	0c 80                	or     $0x80,%al
  21ad03:	88 44 24 06          	mov    %al,0x6(%rsp)
  21ad07:	40 80 e6 3f          	and    $0x3f,%sil
  21ad0b:	40 80 ce 80          	or     $0x80,%sil
  21ad0f:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  21ad14:	ba 04 00 00 00       	mov    $0x4,%edx
  21ad19:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21ad1e:	e8 4d f9 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ad23:	59                   	pop    %rcx
  21ad24:	c3                   	retq   
  21ad25:	cc                   	int3   
  21ad26:	cc                   	int3   
  21ad27:	cc                   	int3   
  21ad28:	cc                   	int3   
  21ad29:	cc                   	int3   
  21ad2a:	cc                   	int3   
  21ad2b:	cc                   	int3   
  21ad2c:	cc                   	int3   
  21ad2d:	cc                   	int3   
  21ad2e:	cc                   	int3   
  21ad2f:	cc                   	int3   

000000000021ad30 <_ZN4core3fmt5Write9write_fmt17h3844688a471abbbcE>:
  21ad30:	48 83 ec 38          	sub    $0x38,%rsp
  21ad34:	48 89 3c 24          	mov    %rdi,(%rsp)
  21ad38:	48 8b 46 28          	mov    0x28(%rsi),%rax
  21ad3c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ad41:	48 8b 46 20          	mov    0x20(%rsi),%rax
  21ad45:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ad4a:	48 8b 46 18          	mov    0x18(%rsi),%rax
  21ad4e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21ad53:	48 8b 46 10          	mov    0x10(%rsi),%rax
  21ad57:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21ad5c:	48 8b 06             	mov    (%rsi),%rax
  21ad5f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  21ad63:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21ad68:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ad6d:	48 8d 35 cc 56 00 00 	lea    0x56cc(%rip),%rsi        # 220440 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  21ad74:	48 89 e7             	mov    %rsp,%rdi
  21ad77:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  21ad7c:	e8 5f 17 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21ad81:	48 83 c4 38          	add    $0x38,%rsp
  21ad85:	c3                   	retq   
  21ad86:	cc                   	int3   
  21ad87:	cc                   	int3   
  21ad88:	cc                   	int3   
  21ad89:	cc                   	int3   
  21ad8a:	cc                   	int3   
  21ad8b:	cc                   	int3   
  21ad8c:	cc                   	int3   
  21ad8d:	cc                   	int3   
  21ad8e:	cc                   	int3   
  21ad8f:	cc                   	int3   

000000000021ad90 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h8d11a5cbe002f1bcE>:
  21ad90:	48 8b 3f             	mov    (%rdi),%rdi
  21ad93:	e9 d8 f8 ff ff       	jmpq   21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ad98:	cc                   	int3   
  21ad99:	cc                   	int3   
  21ad9a:	cc                   	int3   
  21ad9b:	cc                   	int3   
  21ad9c:	cc                   	int3   
  21ad9d:	cc                   	int3   
  21ad9e:	cc                   	int3   
  21ad9f:	cc                   	int3   

000000000021ada0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E>:
  21ada0:	50                   	push   %rax
  21ada1:	48 8b 3f             	mov    (%rdi),%rdi
  21ada4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  21adab:	00 
  21adac:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  21adb2:	73 16                	jae    21adca <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x2a>
  21adb4:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  21adb9:	ba 01 00 00 00       	mov    $0x1,%edx
  21adbe:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21adc3:	e8 a8 f8 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21adc8:	59                   	pop    %rcx
  21adc9:	c3                   	retq   
  21adca:	89 f0                	mov    %esi,%eax
  21adcc:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  21add2:	73 27                	jae    21adfb <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x5b>
  21add4:	c1 e8 06             	shr    $0x6,%eax
  21add7:	0c c0                	or     $0xc0,%al
  21add9:	88 44 24 04          	mov    %al,0x4(%rsp)
  21addd:	40 80 e6 3f          	and    $0x3f,%sil
  21ade1:	40 80 ce 80          	or     $0x80,%sil
  21ade5:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  21adea:	ba 02 00 00 00       	mov    $0x2,%edx
  21adef:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21adf4:	e8 77 f8 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21adf9:	59                   	pop    %rcx
  21adfa:	c3                   	retq   
  21adfb:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  21ae01:	73 34                	jae    21ae37 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x97>
  21ae03:	c1 e8 0c             	shr    $0xc,%eax
  21ae06:	0c e0                	or     $0xe0,%al
  21ae08:	88 44 24 04          	mov    %al,0x4(%rsp)
  21ae0c:	89 f0                	mov    %esi,%eax
  21ae0e:	c1 e8 06             	shr    $0x6,%eax
  21ae11:	24 3f                	and    $0x3f,%al
  21ae13:	0c 80                	or     $0x80,%al
  21ae15:	88 44 24 05          	mov    %al,0x5(%rsp)
  21ae19:	40 80 e6 3f          	and    $0x3f,%sil
  21ae1d:	40 80 ce 80          	or     $0x80,%sil
  21ae21:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  21ae26:	ba 03 00 00 00       	mov    $0x3,%edx
  21ae2b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21ae30:	e8 3b f8 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ae35:	59                   	pop    %rcx
  21ae36:	c3                   	retq   
  21ae37:	c1 e8 12             	shr    $0x12,%eax
  21ae3a:	0c f0                	or     $0xf0,%al
  21ae3c:	88 44 24 04          	mov    %al,0x4(%rsp)
  21ae40:	89 f0                	mov    %esi,%eax
  21ae42:	c1 e8 0c             	shr    $0xc,%eax
  21ae45:	24 3f                	and    $0x3f,%al
  21ae47:	0c 80                	or     $0x80,%al
  21ae49:	88 44 24 05          	mov    %al,0x5(%rsp)
  21ae4d:	89 f0                	mov    %esi,%eax
  21ae4f:	c1 e8 06             	shr    $0x6,%eax
  21ae52:	24 3f                	and    $0x3f,%al
  21ae54:	0c 80                	or     $0x80,%al
  21ae56:	88 44 24 06          	mov    %al,0x6(%rsp)
  21ae5a:	40 80 e6 3f          	and    $0x3f,%sil
  21ae5e:	40 80 ce 80          	or     $0x80,%sil
  21ae62:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  21ae67:	ba 04 00 00 00       	mov    $0x4,%edx
  21ae6c:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  21ae71:	e8 fa f7 ff ff       	callq  21a670 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  21ae76:	59                   	pop    %rcx
  21ae77:	c3                   	retq   
  21ae78:	cc                   	int3   
  21ae79:	cc                   	int3   
  21ae7a:	cc                   	int3   
  21ae7b:	cc                   	int3   
  21ae7c:	cc                   	int3   
  21ae7d:	cc                   	int3   
  21ae7e:	cc                   	int3   
  21ae7f:	cc                   	int3   

000000000021ae80 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h2f268ff30ef8847bE>:
  21ae80:	48 83 ec 38          	sub    $0x38,%rsp
  21ae84:	48 8b 07             	mov    (%rdi),%rax
  21ae87:	48 89 04 24          	mov    %rax,(%rsp)
  21ae8b:	48 8b 46 28          	mov    0x28(%rsi),%rax
  21ae8f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ae94:	48 8b 46 20          	mov    0x20(%rsi),%rax
  21ae98:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ae9d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  21aea1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21aea6:	48 8b 46 10          	mov    0x10(%rsi),%rax
  21aeaa:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21aeaf:	48 8b 06             	mov    (%rsi),%rax
  21aeb2:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  21aeb6:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21aebb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21aec0:	48 8d 35 79 55 00 00 	lea    0x5579(%rip),%rsi        # 220440 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  21aec7:	48 89 e7             	mov    %rsp,%rdi
  21aeca:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  21aecf:	e8 0c 16 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21aed4:	48 83 c4 38          	add    $0x38,%rsp
  21aed8:	c3                   	retq   
  21aed9:	cc                   	int3   
  21aeda:	cc                   	int3   
  21aedb:	cc                   	int3   
  21aedc:	cc                   	int3   
  21aedd:	cc                   	int3   
  21aede:	cc                   	int3   
  21aedf:	cc                   	int3   

000000000021aee0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>:
  21aee0:	50                   	push   %rax
  21aee1:	41 89 f9             	mov    %edi,%r9d
  21aee4:	41 c1 e1 0b          	shl    $0xb,%r9d
  21aee8:	b9 20 00 00 00       	mov    $0x20,%ecx
  21aeed:	31 c0                	xor    %eax,%eax
  21aeef:	4c 8d 05 d2 6e fe ff 	lea    -0x1912e(%rip),%r8        # 201dc8 <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h68677736f581025fE.llvm.142292087146638061>
  21aef6:	ba 20 00 00 00       	mov    $0x20,%edx
  21aefb:	eb 12                	jmp    21af0f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  21aefd:	0f 1f 00             	nopl   (%rax)
  21af00:	48 83 c1 01          	add    $0x1,%rcx
  21af04:	48 89 c8             	mov    %rcx,%rax
  21af07:	48 89 d1             	mov    %rdx,%rcx
  21af0a:	48 29 c1             	sub    %rax,%rcx
  21af0d:	76 25                	jbe    21af34 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  21af0f:	48 d1 e9             	shr    %rcx
  21af12:	48 01 c1             	add    %rax,%rcx
  21af15:	41 8b 34 88          	mov    (%r8,%rcx,4),%esi
  21af19:	c1 e6 0b             	shl    $0xb,%esi
  21af1c:	44 39 ce             	cmp    %r9d,%esi
  21af1f:	72 df                	jb     21af00 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x20>
  21af21:	74 0a                	je     21af2d <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x4d>
  21af23:	48 89 ca             	mov    %rcx,%rdx
  21af26:	48 29 c1             	sub    %rax,%rcx
  21af29:	77 e4                	ja     21af0f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  21af2b:	eb 07                	jmp    21af34 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  21af2d:	48 83 c1 01          	add    $0x1,%rcx
  21af31:	48 89 c8             	mov    %rcx,%rax
  21af34:	48 83 f8 1f          	cmp    $0x1f,%rax
  21af38:	0f 87 a8 00 00 00    	ja     21afe6 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x106>
  21af3e:	41 b9 c3 02 00 00    	mov    $0x2c3,%r9d
  21af44:	48 83 f8 1f          	cmp    $0x1f,%rax
  21af48:	74 09                	je     21af53 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x73>
  21af4a:	45 8b 4c 80 04       	mov    0x4(%r8,%rax,4),%r9d
  21af4f:	49 c1 e9 15          	shr    $0x15,%r9
  21af53:	31 d2                	xor    %edx,%edx
  21af55:	48 89 c1             	mov    %rax,%rcx
  21af58:	48 83 e9 01          	sub    $0x1,%rcx
  21af5c:	72 13                	jb     21af71 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x91>
  21af5e:	48 83 f9 20          	cmp    $0x20,%rcx
  21af62:	0f 83 94 00 00 00    	jae    21affc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x11c>
  21af68:	ba ff ff 1f 00       	mov    $0x1fffff,%edx
  21af6d:	41 23 14 88          	and    (%r8,%rcx,4),%edx
  21af71:	41 8b 04 80          	mov    (%r8,%rax,4),%eax
  21af75:	48 c1 e8 15          	shr    $0x15,%rax
  21af79:	48 89 c1             	mov    %rax,%rcx
  21af7c:	48 f7 d1             	not    %rcx
  21af7f:	4c 01 c9             	add    %r9,%rcx
  21af82:	74 48                	je     21afcc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  21af84:	29 d7                	sub    %edx,%edi
  21af86:	48 3d c4 02 00 00    	cmp    $0x2c4,%rax
  21af8c:	b9 c3 02 00 00       	mov    $0x2c3,%ecx
  21af91:	48 0f 43 c8          	cmovae %rax,%rcx
  21af95:	49 83 c1 ff          	add    $0xffffffffffffffff,%r9
  21af99:	31 d2                	xor    %edx,%edx
  21af9b:	4c 8d 05 a6 6e fe ff 	lea    -0x1915a(%rip),%r8        # 201e48 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061>
  21afa2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21afa9:	00 00 00 
  21afac:	0f 1f 40 00          	nopl   0x0(%rax)
  21afb0:	48 39 c1             	cmp    %rax,%rcx
  21afb3:	74 1b                	je     21afd0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xf0>
  21afb5:	42 0f b6 34 00       	movzbl (%rax,%r8,1),%esi
  21afba:	01 f2                	add    %esi,%edx
  21afbc:	39 fa                	cmp    %edi,%edx
  21afbe:	77 0c                	ja     21afcc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  21afc0:	48 83 c0 01          	add    $0x1,%rax
  21afc4:	49 39 c1             	cmp    %rax,%r9
  21afc7:	75 e7                	jne    21afb0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xd0>
  21afc9:	4c 89 c8             	mov    %r9,%rax
  21afcc:	24 01                	and    $0x1,%al
  21afce:	59                   	pop    %rcx
  21afcf:	c3                   	retq   
  21afd0:	48 8d 15 b1 54 00 00 	lea    0x54b1(%rip),%rdx        # 220488 <anon.8c5785e28e68a0869ce162bce53fbf2c.56.llvm.142292087146638061>
  21afd7:	be c3 02 00 00       	mov    $0x2c3,%esi
  21afdc:	48 89 cf             	mov    %rcx,%rdi
  21afdf:	e8 9c 00 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21afe4:	0f 0b                	ud2    
  21afe6:	48 8d 15 83 54 00 00 	lea    0x5483(%rip),%rdx        # 220470 <anon.8c5785e28e68a0869ce162bce53fbf2c.55.llvm.142292087146638061>
  21afed:	be 20 00 00 00       	mov    $0x20,%esi
  21aff2:	48 89 c7             	mov    %rax,%rdi
  21aff5:	e8 86 00 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21affa:	0f 0b                	ud2    
  21affc:	48 8d 15 9d 54 00 00 	lea    0x549d(%rip),%rdx        # 2204a0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061>
  21b003:	be 20 00 00 00       	mov    $0x20,%esi
  21b008:	48 89 cf             	mov    %rcx,%rdi
  21b00b:	e8 70 00 00 00       	callq  21b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21b010:	0f 0b                	ud2    
  21b012:	cc                   	int3   
  21b013:	cc                   	int3   
  21b014:	cc                   	int3   
  21b015:	cc                   	int3   
  21b016:	cc                   	int3   
  21b017:	cc                   	int3   
  21b018:	cc                   	int3   
  21b019:	cc                   	int3   
  21b01a:	cc                   	int3   
  21b01b:	cc                   	int3   
  21b01c:	cc                   	int3   
  21b01d:	cc                   	int3   
  21b01e:	cc                   	int3   
  21b01f:	cc                   	int3   

000000000021b020 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h1ecee3ae2cf00d6eE.llvm.5832540808935662489>:
  21b020:	c3                   	retq   
  21b021:	cc                   	int3   
  21b022:	cc                   	int3   
  21b023:	cc                   	int3   
  21b024:	cc                   	int3   
  21b025:	cc                   	int3   
  21b026:	cc                   	int3   
  21b027:	cc                   	int3   
  21b028:	cc                   	int3   
  21b029:	cc                   	int3   
  21b02a:	cc                   	int3   
  21b02b:	cc                   	int3   
  21b02c:	cc                   	int3   
  21b02d:	cc                   	int3   
  21b02e:	cc                   	int3   
  21b02f:	cc                   	int3   

000000000021b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>:
  21b030:	48 83 ec 48          	sub    $0x48,%rsp
  21b034:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b039:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21b03e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b043:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b048:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  21b04f:	00 00 
  21b051:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21b058:	00 00 
  21b05a:	48 8d 05 af 70 fe ff 	lea    -0x18f51(%rip),%rax        # 202110 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c8>
  21b061:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b066:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  21b06d:	00 00 
  21b06f:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21b074:	48 89 d6             	mov    %rdx,%rsi
  21b077:	e8 84 00 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b07c:	0f 0b                	ud2    
  21b07e:	cc                   	int3   
  21b07f:	cc                   	int3   

000000000021b080 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>:
  21b080:	48 83 ec 68          	sub    $0x68,%rsp
  21b084:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b089:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21b08e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  21b093:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b098:	48 8b 05 31 57 00 00 	mov    0x5731(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21b09f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b0a4:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  21b0a9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b0ae:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b0b3:	48 8d 05 1e 54 00 00 	lea    0x541e(%rip),%rax        # 2204d8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x38>
  21b0ba:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b0bf:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  21b0c6:	00 00 
  21b0c8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21b0cf:	00 00 
  21b0d1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b0d6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21b0db:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  21b0e2:	00 00 
  21b0e4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21b0e9:	48 89 d6             	mov    %rdx,%rsi
  21b0ec:	e8 0f 00 00 00       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b0f1:	0f 0b                	ud2    
  21b0f3:	cc                   	int3   
  21b0f4:	cc                   	int3   
  21b0f5:	cc                   	int3   
  21b0f6:	cc                   	int3   
  21b0f7:	cc                   	int3   
  21b0f8:	cc                   	int3   
  21b0f9:	cc                   	int3   
  21b0fa:	cc                   	int3   
  21b0fb:	cc                   	int3   
  21b0fc:	cc                   	int3   
  21b0fd:	cc                   	int3   
  21b0fe:	cc                   	int3   
  21b0ff:	cc                   	int3   

000000000021b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>:
  21b100:	48 83 ec 28          	sub    $0x28,%rsp
  21b104:	48 8d 05 05 70 fe ff 	lea    -0x18ffb(%rip),%rax        # 202110 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c8>
  21b10b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b110:	48 8d 05 a1 53 00 00 	lea    0x53a1(%rip),%rax        # 2204b8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x18>
  21b117:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b11c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21b121:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  21b126:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  21b12b:	e8 a0 59 ff ff       	callq  210ad0 <rust_begin_unwind>
  21b130:	0f 0b                	ud2    
  21b132:	cc                   	int3   
  21b133:	cc                   	int3   
  21b134:	cc                   	int3   
  21b135:	cc                   	int3   
  21b136:	cc                   	int3   
  21b137:	cc                   	int3   
  21b138:	cc                   	int3   
  21b139:	cc                   	int3   
  21b13a:	cc                   	int3   
  21b13b:	cc                   	int3   
  21b13c:	cc                   	int3   
  21b13d:	cc                   	int3   
  21b13e:	cc                   	int3   
  21b13f:	cc                   	int3   

000000000021b140 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>:
  21b140:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  21b147:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21b14c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21b151:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b156:	4c 89 44 24 30       	mov    %r8,0x30(%rsp)
  21b15b:	40 84 ff             	test   %dil,%dil
  21b15e:	74 13                	je     21b173 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x33>
  21b160:	40 80 ff 01          	cmp    $0x1,%dil
  21b164:	0f 85 b5 00 00 00    	jne    21b21f <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0xdf>
  21b16a:	48 8d 05 d8 6f fe ff 	lea    -0x19028(%rip),%rax        # 202149 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x301>
  21b171:	eb 07                	jmp    21b17a <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x3a>
  21b173:	48 8d 05 d1 6f fe ff 	lea    -0x1902f(%rip),%rax        # 20214b <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x303>
  21b17a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b17f:	b8 02 00 00 00       	mov    $0x2,%eax
  21b184:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  21b18b:	00 
  21b18c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b191:	49 83 39 00          	cmpq   $0x0,(%r9)
  21b195:	0f 85 ac 00 00 00    	jne    21b247 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x107>
  21b19b:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b1a0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b1a5:	48 8d 05 d4 28 00 00 	lea    0x28d4(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21b1ac:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b1b1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b1b6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b1bb:	48 8d 05 2e 28 00 00 	lea    0x282e(%rip),%rax        # 21d9f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  21b1c2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21b1c7:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  21b1cc:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21b1d1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b1d6:	48 8d 05 5b 53 00 00 	lea    0x535b(%rip),%rax        # 220538 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x98>
  21b1dd:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21b1e2:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  21b1e9:	00 04 00 00 00 
  21b1ee:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  21b1f5:	00 00 00 00 00 
  21b1fa:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  21b1ff:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21b206:	00 
  21b207:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  21b20e:	00 03 00 00 00 
  21b213:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  21b218:	e8 e3 fe ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b21d:	0f 0b                	ud2    
  21b21f:	48 8d 05 1c 6f fe ff 	lea    -0x190e4(%rip),%rax        # 202142 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2fa>
  21b226:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b22b:	b8 07 00 00 00       	mov    $0x7,%eax
  21b230:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  21b237:	00 
  21b238:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b23d:	49 83 39 00          	cmpq   $0x0,(%r9)
  21b241:	0f 84 54 ff ff ff    	je     21b19b <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x5b>
  21b247:	49 8b 41 28          	mov    0x28(%r9),%rax
  21b24b:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21b252:	00 
  21b253:	49 8b 41 20          	mov    0x20(%r9),%rax
  21b257:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21b25e:	00 
  21b25f:	49 8b 41 18          	mov    0x18(%r9),%rax
  21b263:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21b26a:	00 
  21b26b:	49 8b 41 10          	mov    0x10(%r9),%rax
  21b26f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21b276:	00 
  21b277:	49 8b 01             	mov    (%r9),%rax
  21b27a:	49 8b 49 08          	mov    0x8(%r9),%rcx
  21b27e:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  21b285:	00 
  21b286:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21b28d:	00 
  21b28e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b293:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b298:	48 8d 05 e1 27 00 00 	lea    0x27e1(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21b29f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b2a4:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b2a9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b2ae:	48 8d 05 3b 27 00 00 	lea    0x273b(%rip),%rax        # 21d9f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  21b2b5:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21b2ba:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  21b2bf:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21b2c4:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b2c9:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  21b2d0:	00 
  21b2d1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21b2d6:	48 8b 05 33 55 00 00 	mov    0x5533(%rip),%rax        # 220810 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  21b2dd:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21b2e2:	48 8d 05 0f 52 00 00 	lea    0x520f(%rip),%rax        # 2204f8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x58>
  21b2e9:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21b2ee:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  21b2f5:	00 04 00 00 00 
  21b2fa:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  21b301:	00 00 00 00 00 
  21b306:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  21b30b:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21b312:	00 
  21b313:	48 c7 84 24 a0 00 00 	movq   $0x4,0xa0(%rsp)
  21b31a:	00 04 00 00 00 
  21b31f:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  21b324:	e8 d7 fd ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b329:	0f 0b                	ud2    
  21b32b:	cc                   	int3   
  21b32c:	cc                   	int3   
  21b32d:	cc                   	int3   
  21b32e:	cc                   	int3   
  21b32f:	cc                   	int3   

000000000021b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>:
  21b330:	48 83 ec 68          	sub    $0x68,%rsp
  21b334:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b339:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21b33e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b343:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b348:	48 8b 05 81 54 00 00 	mov    0x5481(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21b34f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b354:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  21b359:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b35e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b363:	48 8d 05 0e 52 00 00 	lea    0x520e(%rip),%rax        # 220578 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xd8>
  21b36a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b36f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  21b376:	00 00 
  21b378:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21b37f:	00 00 
  21b381:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b386:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21b38b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  21b392:	00 00 
  21b394:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21b399:	48 89 d6             	mov    %rdx,%rsi
  21b39c:	e8 5f fd ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b3a1:	0f 0b                	ud2    
  21b3a3:	cc                   	int3   
  21b3a4:	cc                   	int3   
  21b3a5:	cc                   	int3   
  21b3a6:	cc                   	int3   
  21b3a7:	cc                   	int3   
  21b3a8:	cc                   	int3   
  21b3a9:	cc                   	int3   
  21b3aa:	cc                   	int3   
  21b3ab:	cc                   	int3   
  21b3ac:	cc                   	int3   
  21b3ad:	cc                   	int3   
  21b3ae:	cc                   	int3   
  21b3af:	cc                   	int3   

000000000021b3b0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>:
  21b3b0:	48 83 ec 68          	sub    $0x68,%rsp
  21b3b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b3b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21b3be:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b3c3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b3c8:	48 8b 05 01 54 00 00 	mov    0x5401(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21b3cf:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b3d4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  21b3d9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b3de:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b3e3:	48 8d 05 ae 51 00 00 	lea    0x51ae(%rip),%rax        # 220598 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xf8>
  21b3ea:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b3ef:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  21b3f6:	00 00 
  21b3f8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21b3ff:	00 00 
  21b401:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b406:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21b40b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  21b412:	00 00 
  21b414:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21b419:	48 89 d6             	mov    %rdx,%rsi
  21b41c:	e8 df fc ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b421:	0f 0b                	ud2    
  21b423:	cc                   	int3   
  21b424:	cc                   	int3   
  21b425:	cc                   	int3   
  21b426:	cc                   	int3   
  21b427:	cc                   	int3   
  21b428:	cc                   	int3   
  21b429:	cc                   	int3   
  21b42a:	cc                   	int3   
  21b42b:	cc                   	int3   
  21b42c:	cc                   	int3   
  21b42d:	cc                   	int3   
  21b42e:	cc                   	int3   
  21b42f:	cc                   	int3   

000000000021b430 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>:
  21b430:	48 83 ec 68          	sub    $0x68,%rsp
  21b434:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b439:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21b43e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b443:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b448:	48 8b 05 81 53 00 00 	mov    0x5381(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21b44f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b454:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  21b459:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b45e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b463:	48 8d 05 4e 51 00 00 	lea    0x514e(%rip),%rax        # 2205b8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x118>
  21b46a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b46f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  21b476:	00 00 
  21b478:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21b47f:	00 00 
  21b481:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  21b486:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21b48b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  21b492:	00 00 
  21b494:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21b499:	48 89 d6             	mov    %rdx,%rsi
  21b49c:	e8 5f fc ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21b4a1:	0f 0b                	ud2    
  21b4a3:	cc                   	int3   
  21b4a4:	cc                   	int3   
  21b4a5:	cc                   	int3   
  21b4a6:	cc                   	int3   
  21b4a7:	cc                   	int3   
  21b4a8:	cc                   	int3   
  21b4a9:	cc                   	int3   
  21b4aa:	cc                   	int3   
  21b4ab:	cc                   	int3   
  21b4ac:	cc                   	int3   
  21b4ad:	cc                   	int3   
  21b4ae:	cc                   	int3   
  21b4af:	cc                   	int3   

000000000021b4b0 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h12e93e433f98118dE>:
  21b4b0:	48 b8 25 61 0f d8 19 	movabs $0x254ed619d80f6125,%rax
  21b4b7:	d6 4e 25 
  21b4ba:	c3                   	retq   
  21b4bb:	cc                   	int3   
  21b4bc:	cc                   	int3   
  21b4bd:	cc                   	int3   
  21b4be:	cc                   	int3   
  21b4bf:	cc                   	int3   

000000000021b4c0 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>:
  21b4c0:	41 57                	push   %r15
  21b4c2:	41 56                	push   %r14
  21b4c4:	41 55                	push   %r13
  21b4c6:	41 54                	push   %r12
  21b4c8:	53                   	push   %rbx
  21b4c9:	48 83 ec 70          	sub    $0x70,%rsp
  21b4cd:	49 89 ff             	mov    %rdi,%r15
  21b4d0:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  21b4d4:	4c 8b 76 28          	mov    0x28(%rsi),%r14
  21b4d8:	48 8d 35 00 6d fe ff 	lea    -0x19300(%rip),%rsi        # 2021df <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x397>
  21b4df:	ba 0c 00 00 00       	mov    $0xc,%edx
  21b4e4:	4c 89 e7             	mov    %r12,%rdi
  21b4e7:	41 ff 56 18          	callq  *0x18(%r14)
  21b4eb:	b3 01                	mov    $0x1,%bl
  21b4ed:	84 c0                	test   %al,%al
  21b4ef:	0f 85 18 01 00 00    	jne    21b60d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  21b4f5:	49 8b 47 10          	mov    0x10(%r15),%rax
  21b4f9:	48 85 c0             	test   %rax,%rax
  21b4fc:	74 18                	je     21b516 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x56>
  21b4fe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b503:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b508:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b50d:	48 8d 05 ec 24 00 00 	lea    0x24ec(%rip),%rax        # 21da00 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>
  21b514:	eb 32                	jmp    21b548 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x88>
  21b516:	4d 8b 2f             	mov    (%r15),%r13
  21b519:	49 8b 47 08          	mov    0x8(%r15),%rax
  21b51d:	4c 89 ef             	mov    %r13,%rdi
  21b520:	ff 50 18             	callq  *0x18(%rax)
  21b523:	48 b9 f4 bc c7 ec 1e 	movabs $0x7ef2a91eecc7bcf4,%rcx
  21b52a:	a9 f2 7e 
  21b52d:	48 39 c8             	cmp    %rcx,%rax
  21b530:	75 60                	jne    21b592 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0xd2>
  21b532:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  21b537:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  21b53c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b541:	48 8d 05 18 25 00 00 	lea    0x2518(%rip),%rax        # 21da60 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>
  21b548:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21b54d:	48 8d 05 84 50 00 00 	lea    0x5084(%rip),%rax        # 2205d8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x138>
  21b554:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b559:	48 c7 44 24 18 02 00 	movq   $0x2,0x18(%rsp)
  21b560:	00 00 
  21b562:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21b569:	00 00 
  21b56b:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  21b570:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b575:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  21b57c:	00 00 
  21b57e:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  21b583:	4c 89 e7             	mov    %r12,%rdi
  21b586:	4c 89 f6             	mov    %r14,%rsi
  21b589:	e8 52 0f 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21b58e:	84 c0                	test   %al,%al
  21b590:	75 7b                	jne    21b60d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  21b592:	49 8b 47 18          	mov    0x18(%r15),%rax
  21b596:	48 8d 48 10          	lea    0x10(%rax),%rcx
  21b59a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b59f:	48 83 c0 14          	add    $0x14,%rax
  21b5a3:	48 8d 15 d6 24 00 00 	lea    0x24d6(%rip),%rdx        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21b5aa:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21b5af:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21b5b4:	48 8b 0d 35 52 00 00 	mov    0x5235(%rip),%rcx        # 2207f0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  21b5bb:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21b5c0:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21b5c5:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  21b5ca:	48 8d 05 3f 51 00 00 	lea    0x513f(%rip),%rax        # 220710 <anon.675a8c007e0eb0dbd1338020c4dcf401.6.llvm.17324098355855342093>
  21b5d1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b5d6:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
  21b5dd:	00 00 
  21b5df:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21b5e6:	00 00 
  21b5e8:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  21b5ed:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b5f2:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
  21b5f9:	00 00 
  21b5fb:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  21b600:	4c 89 e7             	mov    %r12,%rdi
  21b603:	4c 89 f6             	mov    %r14,%rsi
  21b606:	e8 d5 0e 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21b60b:	89 c3                	mov    %eax,%ebx
  21b60d:	89 d8                	mov    %ebx,%eax
  21b60f:	48 83 c4 70          	add    $0x70,%rsp
  21b613:	5b                   	pop    %rbx
  21b614:	41 5c                	pop    %r12
  21b616:	41 5d                	pop    %r13
  21b618:	41 5e                	pop    %r14
  21b61a:	41 5f                	pop    %r15
  21b61c:	c3                   	retq   
  21b61d:	cc                   	int3   
  21b61e:	cc                   	int3   
  21b61f:	cc                   	int3   

000000000021b620 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>:
  21b620:	41 57                	push   %r15
  21b622:	41 56                	push   %r14
  21b624:	53                   	push   %rbx
  21b625:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  21b62c:	49 89 f7             	mov    %rsi,%r15
  21b62f:	49 89 fe             	mov    %rdi,%r14
  21b632:	8b 46 30             	mov    0x30(%rsi),%eax
  21b635:	a8 10                	test   $0x10,%al
  21b637:	0f 85 d3 00 00 00    	jne    21b710 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xf0>
  21b63d:	a8 20                	test   $0x20,%al
  21b63f:	0f 85 19 01 00 00    	jne    21b75e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x13e>
  21b645:	49 8b 36             	mov    (%r14),%rsi
  21b648:	b8 27 00 00 00       	mov    $0x27,%eax
  21b64d:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  21b654:	0f 82 89 01 00 00    	jb     21b7e3 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1c3>
  21b65a:	bb 27 00 00 00       	mov    $0x27,%ebx
  21b65f:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  21b666:	c5 6d 34 
  21b669:	4c 8d 0d 80 65 fe ff 	lea    -0x19a80(%rip),%r9        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21b670:	48 89 f0             	mov    %rsi,%rax
  21b673:	49 f7 e0             	mul    %r8
  21b676:	48 c1 ea 0b          	shr    $0xb,%rdx
  21b67a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  21b680:	89 f1                	mov    %esi,%ecx
  21b682:	29 c1                	sub    %eax,%ecx
  21b684:	0f b7 c1             	movzwl %cx,%eax
  21b687:	c1 e8 02             	shr    $0x2,%eax
  21b68a:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  21b690:	c1 ef 11             	shr    $0x11,%edi
  21b693:	6b c7 64             	imul   $0x64,%edi,%eax
  21b696:	29 c1                	sub    %eax,%ecx
  21b698:	0f b7 c9             	movzwl %cx,%ecx
  21b69b:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  21b69f:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  21b6a4:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  21b6a9:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  21b6ae:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  21b6b3:	48 89 c3             	mov    %rax,%rbx
  21b6b6:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  21b6bd:	48 89 d6             	mov    %rdx,%rsi
  21b6c0:	77 ae                	ja     21b670 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x50>
  21b6c2:	48 83 fa 63          	cmp    $0x63,%rdx
  21b6c6:	7e 2e                	jle    21b6f6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  21b6c8:	0f b7 ca             	movzwl %dx,%ecx
  21b6cb:	c1 e9 02             	shr    $0x2,%ecx
  21b6ce:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  21b6d4:	c1 e9 11             	shr    $0x11,%ecx
  21b6d7:	6b f1 64             	imul   $0x64,%ecx,%esi
  21b6da:	29 f2                	sub    %esi,%edx
  21b6dc:	0f b7 d2             	movzwl %dx,%edx
  21b6df:	48 8d 35 0a 65 fe ff 	lea    -0x19af6(%rip),%rsi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21b6e6:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  21b6ea:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  21b6ef:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  21b6f3:	48 89 ca             	mov    %rcx,%rdx
  21b6f6:	48 83 fa 0a          	cmp    $0xa,%rdx
  21b6fa:	0f 8d f5 00 00 00    	jge    21b7f5 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1d5>
  21b700:	80 c2 30             	add    $0x30,%dl
  21b703:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  21b707:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  21b70b:	e9 f9 00 00 00       	jmpq   21b809 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1e9>
  21b710:	49 8b 06             	mov    (%r14),%rax
  21b713:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  21b71a:	00 
  21b71b:	45 31 c9             	xor    %r9d,%r9d
  21b71e:	b9 30 00 00 00       	mov    $0x30,%ecx
  21b723:	48 89 c2             	mov    %rax,%rdx
  21b726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21b72d:	00 00 00 
  21b730:	48 c1 ea 04          	shr    $0x4,%rdx
  21b734:	89 c3                	mov    %eax,%ebx
  21b736:	80 e3 0f             	and    $0xf,%bl
  21b739:	80 fb 0a             	cmp    $0xa,%bl
  21b73c:	be 57 00 00 00       	mov    $0x57,%esi
  21b741:	0f 42 f1             	cmovb  %ecx,%esi
  21b744:	40 00 de             	add    %bl,%sil
  21b747:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  21b74b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21b74f:	49 83 c1 01          	add    $0x1,%r9
  21b753:	48 83 f8 0f          	cmp    $0xf,%rax
  21b757:	48 89 d0             	mov    %rdx,%rax
  21b75a:	77 d4                	ja     21b730 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x110>
  21b75c:	eb 4e                	jmp    21b7ac <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x18c>
  21b75e:	49 8b 06             	mov    (%r14),%rax
  21b761:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  21b768:	00 
  21b769:	45 31 c9             	xor    %r9d,%r9d
  21b76c:	b9 30 00 00 00       	mov    $0x30,%ecx
  21b771:	48 89 c2             	mov    %rax,%rdx
  21b774:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21b77b:	00 00 00 
  21b77e:	66 90                	xchg   %ax,%ax
  21b780:	48 c1 ea 04          	shr    $0x4,%rdx
  21b784:	89 c3                	mov    %eax,%ebx
  21b786:	80 e3 0f             	and    $0xf,%bl
  21b789:	80 fb 0a             	cmp    $0xa,%bl
  21b78c:	be 37 00 00 00       	mov    $0x37,%esi
  21b791:	0f 42 f1             	cmovb  %ecx,%esi
  21b794:	40 00 de             	add    %bl,%sil
  21b797:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  21b79b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21b79f:	49 83 c1 01          	add    $0x1,%r9
  21b7a3:	48 83 f8 0f          	cmp    $0xf,%rax
  21b7a7:	48 89 d0             	mov    %rdx,%rax
  21b7aa:	77 d4                	ja     21b780 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x160>
  21b7ac:	bf 80 00 00 00       	mov    $0x80,%edi
  21b7b1:	4c 29 cf             	sub    %r9,%rdi
  21b7b4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21b7bb:	0f 83 2c 02 00 00    	jae    21b9ed <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  21b7c1:	48 8d 15 26 64 fe ff 	lea    -0x19bda(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21b7c8:	b9 02 00 00 00       	mov    $0x2,%ecx
  21b7cd:	4c 89 ff             	mov    %r15,%rdi
  21b7d0:	be 01 00 00 00       	mov    $0x1,%esi
  21b7d5:	e8 46 0f 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21b7da:	84 c0                	test   %al,%al
  21b7dc:	74 56                	je     21b834 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x214>
  21b7de:	e9 a4 02 00 00       	jmpq   21ba87 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  21b7e3:	48 89 f2             	mov    %rsi,%rdx
  21b7e6:	48 83 fa 63          	cmp    $0x63,%rdx
  21b7ea:	0f 8f d8 fe ff ff    	jg     21b6c8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xa8>
  21b7f0:	e9 01 ff ff ff       	jmpq   21b6f6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  21b7f5:	48 8d 0d f4 63 fe ff 	lea    -0x19c0c(%rip),%rcx        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21b7fc:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  21b800:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  21b805:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  21b809:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  21b80d:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  21b813:	49 29 c1             	sub    %rax,%r9
  21b816:	48 8d 15 ed 6f fe ff 	lea    -0x19013(%rip),%rdx        # 20280a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  21b81d:	4c 89 ff             	mov    %r15,%rdi
  21b820:	be 01 00 00 00       	mov    $0x1,%esi
  21b825:	31 c9                	xor    %ecx,%ecx
  21b827:	e8 f4 0e 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21b82c:	84 c0                	test   %al,%al
  21b82e:	0f 85 53 02 00 00    	jne    21ba87 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  21b834:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  21b838:	49 8b 77 28          	mov    0x28(%r15),%rsi
  21b83c:	48 8d 05 b5 4d 00 00 	lea    0x4db5(%rip),%rax        # 2205f8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x158>
  21b843:	48 89 04 24          	mov    %rax,(%rsp)
  21b847:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  21b84e:	00 00 
  21b850:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21b857:	00 00 
  21b859:	48 8d 05 98 69 fe ff 	lea    -0x19668(%rip),%rax        # 2021f8 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3b0>
  21b860:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b865:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21b86c:	00 00 
  21b86e:	48 89 e2             	mov    %rsp,%rdx
  21b871:	e8 6a 0c 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21b876:	84 c0                	test   %al,%al
  21b878:	0f 85 09 02 00 00    	jne    21ba87 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  21b87e:	41 8b 47 30          	mov    0x30(%r15),%eax
  21b882:	a8 10                	test   $0x10,%al
  21b884:	0f 85 8d 00 00 00    	jne    21b917 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2f7>
  21b88a:	a8 20                	test   $0x20,%al
  21b88c:	0f 85 07 01 00 00    	jne    21b999 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x379>
  21b892:	49 8b 76 08          	mov    0x8(%r14),%rsi
  21b896:	b8 27 00 00 00       	mov    $0x27,%eax
  21b89b:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  21b8a2:	0f 82 58 01 00 00    	jb     21ba00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e0>
  21b8a8:	bb 27 00 00 00       	mov    $0x27,%ebx
  21b8ad:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  21b8b4:	c5 6d 34 
  21b8b7:	4c 8d 0d 32 63 fe ff 	lea    -0x19cce(%rip),%r9        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21b8be:	66 90                	xchg   %ax,%ax
  21b8c0:	48 89 f0             	mov    %rsi,%rax
  21b8c3:	49 f7 e0             	mul    %r8
  21b8c6:	48 c1 ea 0b          	shr    $0xb,%rdx
  21b8ca:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  21b8d0:	89 f1                	mov    %esi,%ecx
  21b8d2:	29 c1                	sub    %eax,%ecx
  21b8d4:	0f b7 c1             	movzwl %cx,%eax
  21b8d7:	c1 e8 02             	shr    $0x2,%eax
  21b8da:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  21b8e0:	c1 ef 11             	shr    $0x11,%edi
  21b8e3:	6b c7 64             	imul   $0x64,%edi,%eax
  21b8e6:	29 c1                	sub    %eax,%ecx
  21b8e8:	0f b7 c9             	movzwl %cx,%ecx
  21b8eb:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  21b8ef:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  21b8f4:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  21b8f9:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  21b8fe:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  21b903:	48 89 c3             	mov    %rax,%rbx
  21b906:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  21b90d:	48 89 d6             	mov    %rdx,%rsi
  21b910:	77 ae                	ja     21b8c0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2a0>
  21b912:	e9 ec 00 00 00       	jmpq   21ba03 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e3>
  21b917:	49 8b 46 08          	mov    0x8(%r14),%rax
  21b91b:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  21b922:	00 
  21b923:	45 31 c9             	xor    %r9d,%r9d
  21b926:	b9 30 00 00 00       	mov    $0x30,%ecx
  21b92b:	48 89 c2             	mov    %rax,%rdx
  21b92e:	66 90                	xchg   %ax,%ax
  21b930:	48 c1 ea 04          	shr    $0x4,%rdx
  21b934:	89 c3                	mov    %eax,%ebx
  21b936:	80 e3 0f             	and    $0xf,%bl
  21b939:	80 fb 0a             	cmp    $0xa,%bl
  21b93c:	be 57 00 00 00       	mov    $0x57,%esi
  21b941:	0f 42 f1             	cmovb  %ecx,%esi
  21b944:	40 00 de             	add    %bl,%sil
  21b947:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  21b94b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21b94f:	49 83 c1 01          	add    $0x1,%r9
  21b953:	48 83 f8 0f          	cmp    $0xf,%rax
  21b957:	48 89 d0             	mov    %rdx,%rax
  21b95a:	77 d4                	ja     21b930 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x310>
  21b95c:	bf 80 00 00 00       	mov    $0x80,%edi
  21b961:	4c 29 cf             	sub    %r9,%rdi
  21b964:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21b96b:	0f 83 7c 00 00 00    	jae    21b9ed <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  21b971:	48 8d 15 76 62 fe ff 	lea    -0x19d8a(%rip),%rdx        # 201bee <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  21b978:	b9 02 00 00 00       	mov    $0x2,%ecx
  21b97d:	4c 89 ff             	mov    %r15,%rdi
  21b980:	be 01 00 00 00       	mov    $0x1,%esi
  21b985:	e8 96 0d 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21b98a:	84 c0                	test   %al,%al
  21b98c:	0f 85 f5 00 00 00    	jne    21ba87 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  21b992:	31 db                	xor    %ebx,%ebx
  21b994:	e9 f0 00 00 00       	jmpq   21ba89 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  21b999:	49 8b 46 08          	mov    0x8(%r14),%rax
  21b99d:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  21b9a4:	00 
  21b9a5:	45 31 c9             	xor    %r9d,%r9d
  21b9a8:	b9 30 00 00 00       	mov    $0x30,%ecx
  21b9ad:	48 89 c2             	mov    %rax,%rdx
  21b9b0:	48 c1 ea 04          	shr    $0x4,%rdx
  21b9b4:	89 c3                	mov    %eax,%ebx
  21b9b6:	80 e3 0f             	and    $0xf,%bl
  21b9b9:	80 fb 0a             	cmp    $0xa,%bl
  21b9bc:	be 37 00 00 00       	mov    $0x37,%esi
  21b9c1:	0f 42 f1             	cmovb  %ecx,%esi
  21b9c4:	40 00 de             	add    %bl,%sil
  21b9c7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  21b9cb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  21b9cf:	49 83 c1 01          	add    $0x1,%r9
  21b9d3:	48 83 f8 0f          	cmp    $0xf,%rax
  21b9d7:	48 89 d0             	mov    %rdx,%rax
  21b9da:	77 d4                	ja     21b9b0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x390>
  21b9dc:	bf 80 00 00 00       	mov    $0x80,%edi
  21b9e1:	4c 29 cf             	sub    %r9,%rdi
  21b9e4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  21b9eb:	72 84                	jb     21b971 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x351>
  21b9ed:	48 8d 15 e4 49 00 00 	lea    0x49e4(%rip),%rdx        # 2203d8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  21b9f4:	be 80 00 00 00       	mov    $0x80,%esi
  21b9f9:	e8 32 f9 ff ff       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21b9fe:	0f 0b                	ud2    
  21ba00:	48 89 f2             	mov    %rsi,%rdx
  21ba03:	48 83 fa 63          	cmp    $0x63,%rdx
  21ba07:	7e 2e                	jle    21ba37 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x417>
  21ba09:	0f b7 ca             	movzwl %dx,%ecx
  21ba0c:	c1 e9 02             	shr    $0x2,%ecx
  21ba0f:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  21ba15:	c1 e9 11             	shr    $0x11,%ecx
  21ba18:	6b f1 64             	imul   $0x64,%ecx,%esi
  21ba1b:	29 f2                	sub    %esi,%edx
  21ba1d:	0f b7 d2             	movzwl %dx,%edx
  21ba20:	48 8d 35 c9 61 fe ff 	lea    -0x19e37(%rip),%rsi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21ba27:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  21ba2b:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  21ba30:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  21ba34:	48 89 ca             	mov    %rcx,%rdx
  21ba37:	48 83 fa 0a          	cmp    $0xa,%rdx
  21ba3b:	7d 0d                	jge    21ba4a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x42a>
  21ba3d:	80 c2 30             	add    $0x30,%dl
  21ba40:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  21ba44:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  21ba48:	eb 14                	jmp    21ba5e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x43e>
  21ba4a:	48 8d 0d 9f 61 fe ff 	lea    -0x19e61(%rip),%rcx        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21ba51:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  21ba55:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  21ba5a:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  21ba5e:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  21ba62:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  21ba68:	49 29 c1             	sub    %rax,%r9
  21ba6b:	48 8d 15 98 6d fe ff 	lea    -0x19268(%rip),%rdx        # 20280a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  21ba72:	31 db                	xor    %ebx,%ebx
  21ba74:	4c 89 ff             	mov    %r15,%rdi
  21ba77:	be 01 00 00 00       	mov    $0x1,%esi
  21ba7c:	31 c9                	xor    %ecx,%ecx
  21ba7e:	e8 9d 0c 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21ba83:	84 c0                	test   %al,%al
  21ba85:	74 02                	je     21ba89 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  21ba87:	b3 01                	mov    $0x1,%bl
  21ba89:	89 d8                	mov    %ebx,%eax
  21ba8b:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  21ba92:	5b                   	pop    %rbx
  21ba93:	41 5e                	pop    %r14
  21ba95:	41 5f                	pop    %r15
  21ba97:	c3                   	retq   
  21ba98:	cc                   	int3   
  21ba99:	cc                   	int3   
  21ba9a:	cc                   	int3   
  21ba9b:	cc                   	int3   
  21ba9c:	cc                   	int3   
  21ba9d:	cc                   	int3   
  21ba9e:	cc                   	int3   
  21ba9f:	cc                   	int3   

000000000021baa0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>:
  21baa0:	41 57                	push   %r15
  21baa2:	41 56                	push   %r14
  21baa4:	53                   	push   %rbx
  21baa5:	48 85 d2             	test   %rdx,%rdx
  21baa8:	74 70                	je     21bb1a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  21baaa:	41 89 fb             	mov    %edi,%r11d
  21baad:	41 c1 eb 08          	shr    $0x8,%r11d
  21bab1:	4c 8d 34 56          	lea    (%rsi,%rdx,2),%r14
  21bab5:	45 31 ff             	xor    %r15d,%r15d
  21bab8:	48 89 f2             	mov    %rsi,%rdx
  21babb:	0f b6 5e 01          	movzbl 0x1(%rsi),%ebx
  21babf:	48 83 c6 02          	add    $0x2,%rsi
  21bac3:	4d 8d 14 1f          	lea    (%r15,%rbx,1),%r10
  21bac7:	44 38 1a             	cmp    %r11b,(%rdx)
  21baca:	75 44                	jne    21bb10 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x70>
  21bacc:	4d 39 fa             	cmp    %r15,%r10
  21bacf:	0f 82 c6 00 00 00    	jb     21bb9b <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xfb>
  21bad5:	4d 39 c2             	cmp    %r8,%r10
  21bad8:	0f 87 d1 00 00 00    	ja     21bbaf <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x10f>
  21bade:	49 01 cf             	add    %rcx,%r15
  21bae1:	31 d2                	xor    %edx,%edx
  21bae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21baea:	00 00 00 
  21baed:	0f 1f 00             	nopl   (%rax)
  21baf0:	48 39 d3             	cmp    %rdx,%rbx
  21baf3:	74 1d                	je     21bb12 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x72>
  21baf5:	48 8d 42 01          	lea    0x1(%rdx),%rax
  21baf9:	41 38 3c 17          	cmp    %dil,(%r15,%rdx,1)
  21bafd:	48 89 c2             	mov    %rax,%rdx
  21bb00:	75 ee                	jne    21baf0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x50>
  21bb02:	eb 6f                	jmp    21bb73 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd3>
  21bb04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21bb0b:	00 00 00 
  21bb0e:	66 90                	xchg   %ax,%ax
  21bb10:	77 08                	ja     21bb1a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  21bb12:	4d 89 d7             	mov    %r10,%r15
  21bb15:	4c 39 f6             	cmp    %r14,%rsi
  21bb18:	75 9e                	jne    21bab8 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x18>
  21bb1a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21bb1f:	48 85 c9             	test   %rcx,%rcx
  21bb22:	74 53                	je     21bb77 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd7>
  21bb24:	4c 01 c9             	add    %r9,%rcx
  21bb27:	0f b7 d7             	movzwl %di,%edx
  21bb2a:	b0 01                	mov    $0x1,%al
  21bb2c:	0f 1f 40 00          	nopl   0x0(%rax)
  21bb30:	49 8d 79 01          	lea    0x1(%r9),%rdi
  21bb34:	41 0f b6 31          	movzbl (%r9),%esi
  21bb38:	40 84 f6             	test   %sil,%sil
  21bb3b:	78 13                	js     21bb50 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xb0>
  21bb3d:	49 89 f9             	mov    %rdi,%r9
  21bb40:	29 f2                	sub    %esi,%edx
  21bb42:	79 26                	jns    21bb6a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xca>
  21bb44:	eb 33                	jmp    21bb79 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  21bb46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21bb4d:	00 00 00 
  21bb50:	48 39 cf             	cmp    %rcx,%rdi
  21bb53:	74 2c                	je     21bb81 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xe1>
  21bb55:	41 0f b6 79 01       	movzbl 0x1(%r9),%edi
  21bb5a:	49 83 c1 02          	add    $0x2,%r9
  21bb5e:	83 e6 7f             	and    $0x7f,%esi
  21bb61:	c1 e6 08             	shl    $0x8,%esi
  21bb64:	09 fe                	or     %edi,%esi
  21bb66:	29 f2                	sub    %esi,%edx
  21bb68:	78 0f                	js     21bb79 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  21bb6a:	34 01                	xor    $0x1,%al
  21bb6c:	49 39 c9             	cmp    %rcx,%r9
  21bb6f:	75 bf                	jne    21bb30 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x90>
  21bb71:	eb 06                	jmp    21bb79 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  21bb73:	31 c0                	xor    %eax,%eax
  21bb75:	eb 02                	jmp    21bb79 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  21bb77:	b0 01                	mov    $0x1,%al
  21bb79:	24 01                	and    $0x1,%al
  21bb7b:	5b                   	pop    %rbx
  21bb7c:	41 5e                	pop    %r14
  21bb7e:	41 5f                	pop    %r15
  21bb80:	c3                   	retq   
  21bb81:	48 8d 3d 70 66 fe ff 	lea    -0x19990(%rip),%rdi        # 2021f8 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3b0>
  21bb88:	48 8d 15 91 4a 00 00 	lea    0x4a91(%rip),%rdx        # 220620 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x180>
  21bb8f:	be 2b 00 00 00       	mov    $0x2b,%esi
  21bb94:	e8 97 f4 ff ff       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21bb99:	0f 0b                	ud2    
  21bb9b:	48 8d 15 66 4a 00 00 	lea    0x4a66(%rip),%rdx        # 220608 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x168>
  21bba2:	4c 89 ff             	mov    %r15,%rdi
  21bba5:	4c 89 d6             	mov    %r10,%rsi
  21bba8:	e8 83 f8 ff ff       	callq  21b430 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  21bbad:	0f 0b                	ud2    
  21bbaf:	48 8d 15 52 4a 00 00 	lea    0x4a52(%rip),%rdx        # 220608 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x168>
  21bbb6:	4c 89 d7             	mov    %r10,%rdi
  21bbb9:	4c 89 c6             	mov    %r8,%rsi
  21bbbc:	e8 ef f7 ff ff       	callq  21b3b0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  21bbc1:	0f 0b                	ud2    
  21bbc3:	cc                   	int3   
  21bbc4:	cc                   	int3   
  21bbc5:	cc                   	int3   
  21bbc6:	cc                   	int3   
  21bbc7:	cc                   	int3   
  21bbc8:	cc                   	int3   
  21bbc9:	cc                   	int3   
  21bbca:	cc                   	int3   
  21bbcb:	cc                   	int3   
  21bbcc:	cc                   	int3   
  21bbcd:	cc                   	int3   
  21bbce:	cc                   	int3   
  21bbcf:	cc                   	int3   

000000000021bbd0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>:
  21bbd0:	41 57                	push   %r15
  21bbd2:	41 56                	push   %r14
  21bbd4:	53                   	push   %rbx
  21bbd5:	41 89 f8             	mov    %edi,%r8d
  21bbd8:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
  21bbdc:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  21bbe0:	48 29 f7             	sub    %rsi,%rdi
  21bbe3:	74 39                	je     21bc1e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  21bbe5:	48 39 d7             	cmp    %rdx,%rdi
  21bbe8:	48 0f 47 fa          	cmova  %rdx,%rdi
  21bbec:	48 85 ff             	test   %rdi,%rdi
  21bbef:	74 2d                	je     21bc1e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  21bbf1:	31 c9                	xor    %ecx,%ecx
  21bbf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21bbfa:	00 00 00 
  21bbfd:	0f 1f 00             	nopl   (%rax)
  21bc00:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  21bc04:	0f 84 c4 00 00 00    	je     21bcce <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xfe>
  21bc0a:	48 83 c1 01          	add    $0x1,%rcx
  21bc0e:	48 39 cf             	cmp    %rcx,%rdi
  21bc11:	75 ed                	jne    21bc00 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x30>
  21bc13:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  21bc17:	4c 39 cf             	cmp    %r9,%rdi
  21bc1a:	76 08                	jbe    21bc24 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x54>
  21bc1c:	eb 72                	jmp    21bc90 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc0>
  21bc1e:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  21bc22:	31 ff                	xor    %edi,%edi
  21bc24:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  21bc2b:	fe fe fe 
  21bc2e:	49 be 80 80 80 80 80 	movabs $0x8080808080808080,%r14
  21bc35:	80 80 80 
  21bc38:	45 0f b6 d8          	movzbl %r8b,%r11d
  21bc3c:	49 bf 01 01 01 01 01 	movabs $0x101010101010101,%r15
  21bc43:	01 01 01 
  21bc46:	4d 0f af fb          	imul   %r11,%r15
  21bc4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  21bc50:	48 8b 04 3e          	mov    (%rsi,%rdi,1),%rax
  21bc54:	4c 31 f8             	xor    %r15,%rax
  21bc57:	48 89 c3             	mov    %rax,%rbx
  21bc5a:	48 f7 d3             	not    %rbx
  21bc5d:	4c 01 d0             	add    %r10,%rax
  21bc60:	4c 21 f3             	and    %r14,%rbx
  21bc63:	48 21 c3             	and    %rax,%rbx
  21bc66:	48 8b 4c 3e 08       	mov    0x8(%rsi,%rdi,1),%rcx
  21bc6b:	4c 31 f9             	xor    %r15,%rcx
  21bc6e:	48 89 c8             	mov    %rcx,%rax
  21bc71:	48 f7 d0             	not    %rax
  21bc74:	4c 01 d1             	add    %r10,%rcx
  21bc77:	4c 21 f0             	and    %r14,%rax
  21bc7a:	48 21 c8             	and    %rcx,%rax
  21bc7d:	48 09 d8             	or     %rbx,%rax
  21bc80:	75 09                	jne    21bc8b <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xbb>
  21bc82:	48 83 c7 10          	add    $0x10,%rdi
  21bc86:	4c 39 cf             	cmp    %r9,%rdi
  21bc89:	76 c5                	jbe    21bc50 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x80>
  21bc8b:	48 39 d7             	cmp    %rdx,%rdi
  21bc8e:	77 4c                	ja     21bcdc <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x10c>
  21bc90:	48 39 d7             	cmp    %rdx,%rdi
  21bc93:	75 04                	jne    21bc99 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc9>
  21bc95:	31 c0                	xor    %eax,%eax
  21bc97:	eb 3a                	jmp    21bcd3 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  21bc99:	48 01 fe             	add    %rdi,%rsi
  21bc9c:	48 29 fa             	sub    %rdi,%rdx
  21bc9f:	31 c0                	xor    %eax,%eax
  21bca1:	31 c9                	xor    %ecx,%ecx
  21bca3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21bcaa:	00 00 00 
  21bcad:	0f 1f 00             	nopl   (%rax)
  21bcb0:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  21bcb4:	74 0b                	je     21bcc1 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xf1>
  21bcb6:	48 83 c1 01          	add    $0x1,%rcx
  21bcba:	48 39 ca             	cmp    %rcx,%rdx
  21bcbd:	75 f1                	jne    21bcb0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xe0>
  21bcbf:	eb 12                	jmp    21bcd3 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  21bcc1:	48 01 cf             	add    %rcx,%rdi
  21bcc4:	b8 01 00 00 00       	mov    $0x1,%eax
  21bcc9:	48 89 f9             	mov    %rdi,%rcx
  21bccc:	eb 05                	jmp    21bcd3 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  21bcce:	b8 01 00 00 00       	mov    $0x1,%eax
  21bcd3:	48 89 ca             	mov    %rcx,%rdx
  21bcd6:	5b                   	pop    %rbx
  21bcd7:	41 5e                	pop    %r14
  21bcd9:	41 5f                	pop    %r15
  21bcdb:	c3                   	retq   
  21bcdc:	48 8d 05 55 49 00 00 	lea    0x4955(%rip),%rax        # 220638 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522>
  21bce3:	48 89 d6             	mov    %rdx,%rsi
  21bce6:	48 89 c2             	mov    %rax,%rdx
  21bce9:	e8 42 f6 ff ff       	callq  21b330 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21bcee:	0f 0b                	ud2    

000000000021bcf0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>:
  21bcf0:	48 83 ec 28          	sub    $0x28,%rsp
  21bcf4:	0f b7 07             	movzwl (%rdi),%eax
  21bcf7:	b9 27 00 00 00       	mov    $0x27,%ecx
  21bcfc:	48 3d 10 27 00 00    	cmp    $0x2710,%rax
  21bd02:	73 1d                	jae    21bd21 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x31>
  21bd04:	83 f8 63             	cmp    $0x63,%eax
  21bd07:	77 7a                	ja     21bd83 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x93>
  21bd09:	48 83 f8 0a          	cmp    $0xa,%rax
  21bd0d:	0f 8d a7 00 00 00    	jge    21bdba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xca>
  21bd13:	04 30                	add    $0x30,%al
  21bd15:	88 04 0c             	mov    %al,(%rsp,%rcx,1)
  21bd18:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  21bd1c:	e9 ad 00 00 00       	jmpq   21bdce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xde>
  21bd21:	89 c1                	mov    %eax,%ecx
  21bd23:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
  21bd28:	48 0f af d0          	imul   %rax,%rdx
  21bd2c:	c1 e8 04             	shr    $0x4,%eax
  21bd2f:	69 c0 47 03 00 00    	imul   $0x347,%eax,%eax
  21bd35:	c1 e8 13             	shr    $0x13,%eax
  21bd38:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  21bd3e:	29 c1                	sub    %eax,%ecx
  21bd40:	0f b7 c1             	movzwl %cx,%eax
  21bd43:	89 c1                	mov    %eax,%ecx
  21bd45:	c1 e9 02             	shr    $0x2,%ecx
  21bd48:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  21bd4e:	c1 e9 11             	shr    $0x11,%ecx
  21bd51:	6b f9 64             	imul   $0x64,%ecx,%edi
  21bd54:	29 f8                	sub    %edi,%eax
  21bd56:	0f b7 c0             	movzwl %ax,%eax
  21bd59:	48 8d 3d 90 5e fe ff 	lea    -0x1a170(%rip),%rdi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21bd60:	0f b7 0c 4f          	movzwl (%rdi,%rcx,2),%ecx
  21bd64:	66 89 4c 24 24       	mov    %cx,0x24(%rsp)
  21bd69:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  21bd6d:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  21bd72:	48 c1 ea 2d          	shr    $0x2d,%rdx
  21bd76:	b9 23 00 00 00       	mov    $0x23,%ecx
  21bd7b:	48 89 d0             	mov    %rdx,%rax
  21bd7e:	83 f8 63             	cmp    $0x63,%eax
  21bd81:	76 86                	jbe    21bd09 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x19>
  21bd83:	89 c2                	mov    %eax,%edx
  21bd85:	c1 ea 02             	shr    $0x2,%edx
  21bd88:	69 d2 7b 14 00 00    	imul   $0x147b,%edx,%edx
  21bd8e:	c1 ea 11             	shr    $0x11,%edx
  21bd91:	6b fa 64             	imul   $0x64,%edx,%edi
  21bd94:	29 f8                	sub    %edi,%eax
  21bd96:	0f b7 c0             	movzwl %ax,%eax
  21bd99:	48 8d 3d 50 5e fe ff 	lea    -0x1a1b0(%rip),%rdi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21bda0:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  21bda4:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  21bda9:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21bdad:	48 89 d0             	mov    %rdx,%rax
  21bdb0:	48 83 f8 0a          	cmp    $0xa,%rax
  21bdb4:	0f 8c 59 ff ff ff    	jl     21bd13 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x23>
  21bdba:	48 8d 15 2f 5e fe ff 	lea    -0x1a1d1(%rip),%rdx        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21bdc1:	0f b7 04 42          	movzwl (%rdx,%rax,2),%eax
  21bdc5:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  21bdca:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21bdce:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  21bdd2:	49 83 c0 01          	add    $0x1,%r8
  21bdd6:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  21bddc:	49 29 c9             	sub    %rcx,%r9
  21bddf:	48 8d 15 24 6a fe ff 	lea    -0x195dc(%rip),%rdx        # 20280a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  21bde6:	48 89 f7             	mov    %rsi,%rdi
  21bde9:	be 01 00 00 00       	mov    $0x1,%esi
  21bdee:	31 c9                	xor    %ecx,%ecx
  21bdf0:	e8 2b 09 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21bdf5:	48 83 c4 28          	add    $0x28,%rsp
  21bdf9:	c3                   	retq   
  21bdfa:	cc                   	int3   
  21bdfb:	cc                   	int3   
  21bdfc:	cc                   	int3   
  21bdfd:	cc                   	int3   
  21bdfe:	cc                   	int3   
  21bdff:	cc                   	int3   

000000000021be00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>:
  21be00:	48 83 ec 28          	sub    $0x28,%rsp
  21be04:	49 89 f2             	mov    %rsi,%r10
  21be07:	44 8b 1f             	mov    (%rdi),%r11d
  21be0a:	b9 27 00 00 00       	mov    $0x27,%ecx
  21be0f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  21be16:	0f 82 bd 00 00 00    	jb     21bed9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xd9>
  21be1c:	bf 27 00 00 00       	mov    $0x27,%edi
  21be21:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  21be28:	c5 6d 34 
  21be2b:	4c 8d 0d be 5d fe ff 	lea    -0x1a242(%rip),%r9        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21be32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21be39:	00 00 00 
  21be3c:	0f 1f 40 00          	nopl   0x0(%rax)
  21be40:	4c 89 d8             	mov    %r11,%rax
  21be43:	49 f7 e0             	mul    %r8
  21be46:	48 c1 ea 0b          	shr    $0xb,%rdx
  21be4a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  21be50:	44 89 d9             	mov    %r11d,%ecx
  21be53:	29 c1                	sub    %eax,%ecx
  21be55:	0f b7 c1             	movzwl %cx,%eax
  21be58:	c1 e8 02             	shr    $0x2,%eax
  21be5b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  21be61:	c1 e8 11             	shr    $0x11,%eax
  21be64:	6b f0 64             	imul   $0x64,%eax,%esi
  21be67:	29 f1                	sub    %esi,%ecx
  21be69:	0f b7 f1             	movzwl %cx,%esi
  21be6c:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  21be70:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  21be75:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  21be7a:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  21be7f:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  21be84:	48 89 cf             	mov    %rcx,%rdi
  21be87:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  21be8e:	49 89 d3             	mov    %rdx,%r11
  21be91:	77 ad                	ja     21be40 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x40>
  21be93:	48 83 fa 63          	cmp    $0x63,%rdx
  21be97:	76 2e                	jbe    21bec7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  21be99:	0f b7 c2             	movzwl %dx,%eax
  21be9c:	c1 e8 02             	shr    $0x2,%eax
  21be9f:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  21bea5:	c1 e8 11             	shr    $0x11,%eax
  21bea8:	6b f0 64             	imul   $0x64,%eax,%esi
  21beab:	29 f2                	sub    %esi,%edx
  21bead:	0f b7 d2             	movzwl %dx,%edx
  21beb0:	48 8d 35 39 5d fe ff 	lea    -0x1a2c7(%rip),%rsi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21beb7:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  21bebb:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  21bec0:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21bec4:	48 89 c2             	mov    %rax,%rdx
  21bec7:	48 83 fa 0a          	cmp    $0xa,%rdx
  21becb:	7d 17                	jge    21bee4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xe4>
  21becd:	80 c2 30             	add    $0x30,%dl
  21bed0:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  21bed3:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  21bed7:	eb 1f                	jmp    21bef8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xf8>
  21bed9:	4c 89 da             	mov    %r11,%rdx
  21bedc:	48 83 fa 63          	cmp    $0x63,%rdx
  21bee0:	77 b7                	ja     21be99 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x99>
  21bee2:	eb e3                	jmp    21bec7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  21bee4:	48 8d 05 05 5d fe ff 	lea    -0x1a2fb(%rip),%rax        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21beeb:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  21beef:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  21bef4:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21bef8:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  21befc:	49 83 c0 01          	add    $0x1,%r8
  21bf00:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  21bf06:	49 29 c9             	sub    %rcx,%r9
  21bf09:	48 8d 15 fa 68 fe ff 	lea    -0x19706(%rip),%rdx        # 20280a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  21bf10:	4c 89 d7             	mov    %r10,%rdi
  21bf13:	be 01 00 00 00       	mov    $0x1,%esi
  21bf18:	31 c9                	xor    %ecx,%ecx
  21bf1a:	e8 01 08 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21bf1f:	48 83 c4 28          	add    $0x28,%rsp
  21bf23:	c3                   	retq   
  21bf24:	cc                   	int3   
  21bf25:	cc                   	int3   
  21bf26:	cc                   	int3   
  21bf27:	cc                   	int3   
  21bf28:	cc                   	int3   
  21bf29:	cc                   	int3   
  21bf2a:	cc                   	int3   
  21bf2b:	cc                   	int3   
  21bf2c:	cc                   	int3   
  21bf2d:	cc                   	int3   
  21bf2e:	cc                   	int3   
  21bf2f:	cc                   	int3   

000000000021bf30 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>:
  21bf30:	48 83 ec 28          	sub    $0x28,%rsp
  21bf34:	49 89 f2             	mov    %rsi,%r10
  21bf37:	4c 8b 1f             	mov    (%rdi),%r11
  21bf3a:	b9 27 00 00 00       	mov    $0x27,%ecx
  21bf3f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  21bf46:	0f 82 bd 00 00 00    	jb     21c009 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xd9>
  21bf4c:	bf 27 00 00 00       	mov    $0x27,%edi
  21bf51:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  21bf58:	c5 6d 34 
  21bf5b:	4c 8d 0d 8e 5c fe ff 	lea    -0x1a372(%rip),%r9        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21bf62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21bf69:	00 00 00 
  21bf6c:	0f 1f 40 00          	nopl   0x0(%rax)
  21bf70:	4c 89 d8             	mov    %r11,%rax
  21bf73:	49 f7 e0             	mul    %r8
  21bf76:	48 c1 ea 0b          	shr    $0xb,%rdx
  21bf7a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  21bf80:	44 89 d9             	mov    %r11d,%ecx
  21bf83:	29 c1                	sub    %eax,%ecx
  21bf85:	0f b7 c1             	movzwl %cx,%eax
  21bf88:	c1 e8 02             	shr    $0x2,%eax
  21bf8b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  21bf91:	c1 e8 11             	shr    $0x11,%eax
  21bf94:	6b f0 64             	imul   $0x64,%eax,%esi
  21bf97:	29 f1                	sub    %esi,%ecx
  21bf99:	0f b7 f1             	movzwl %cx,%esi
  21bf9c:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  21bfa0:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  21bfa5:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  21bfaa:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  21bfaf:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  21bfb4:	48 89 cf             	mov    %rcx,%rdi
  21bfb7:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  21bfbe:	49 89 d3             	mov    %rdx,%r11
  21bfc1:	77 ad                	ja     21bf70 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x40>
  21bfc3:	48 83 fa 63          	cmp    $0x63,%rdx
  21bfc7:	7e 2e                	jle    21bff7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  21bfc9:	0f b7 c2             	movzwl %dx,%eax
  21bfcc:	c1 e8 02             	shr    $0x2,%eax
  21bfcf:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  21bfd5:	c1 e8 11             	shr    $0x11,%eax
  21bfd8:	6b f0 64             	imul   $0x64,%eax,%esi
  21bfdb:	29 f2                	sub    %esi,%edx
  21bfdd:	0f b7 d2             	movzwl %dx,%edx
  21bfe0:	48 8d 35 09 5c fe ff 	lea    -0x1a3f7(%rip),%rsi        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21bfe7:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  21bfeb:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  21bff0:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21bff4:	48 89 c2             	mov    %rax,%rdx
  21bff7:	48 83 fa 0a          	cmp    $0xa,%rdx
  21bffb:	7d 17                	jge    21c014 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xe4>
  21bffd:	80 c2 30             	add    $0x30,%dl
  21c000:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  21c003:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  21c007:	eb 1f                	jmp    21c028 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xf8>
  21c009:	4c 89 da             	mov    %r11,%rdx
  21c00c:	48 83 fa 63          	cmp    $0x63,%rdx
  21c010:	7f b7                	jg     21bfc9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x99>
  21c012:	eb e3                	jmp    21bff7 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  21c014:	48 8d 05 d5 5b fe ff 	lea    -0x1a42b(%rip),%rax        # 201bf0 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  21c01b:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  21c01f:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  21c024:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  21c028:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  21c02c:	49 83 c0 01          	add    $0x1,%r8
  21c030:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  21c036:	49 29 c9             	sub    %rcx,%r9
  21c039:	48 8d 15 ca 67 fe ff 	lea    -0x19836(%rip),%rdx        # 20280a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  21c040:	4c 89 d7             	mov    %r10,%rdi
  21c043:	be 01 00 00 00       	mov    $0x1,%esi
  21c048:	31 c9                	xor    %ecx,%ecx
  21c04a:	e8 d1 06 00 00       	callq  21c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  21c04f:	48 83 c4 28          	add    $0x28,%rsp
  21c053:	c3                   	retq   
  21c054:	cc                   	int3   
  21c055:	cc                   	int3   
  21c056:	cc                   	int3   
  21c057:	cc                   	int3   
  21c058:	cc                   	int3   
  21c059:	cc                   	int3   
  21c05a:	cc                   	int3   
  21c05b:	cc                   	int3   
  21c05c:	cc                   	int3   
  21c05d:	cc                   	int3   
  21c05e:	cc                   	int3   
  21c05f:	cc                   	int3   

000000000021c060 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>:
  21c060:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  21c067:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  21c06e:	00 
  21c06f:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  21c076:	00 
  21c077:	48 81 fe 01 01 00 00 	cmp    $0x101,%rsi
  21c07e:	72 51                	jb     21c0d1 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x71>
  21c080:	b8 00 01 00 00       	mov    $0x100,%eax
  21c085:	4c 8d 0d 24 68 fe ff 	lea    -0x197dc(%rip),%r9        # 2028b0 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  21c08c:	41 ba 05 00 00 00    	mov    $0x5,%r10d
  21c092:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21c099:	00 00 00 
  21c09c:	0f 1f 40 00          	nopl   0x0(%rax)
  21c0a0:	80 3c 07 bf          	cmpb   $0xbf,(%rdi,%rax,1)
  21c0a4:	7f 38                	jg     21c0de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  21c0a6:	80 7c 07 ff c0       	cmpb   $0xc0,-0x1(%rdi,%rax,1)
  21c0ab:	0f 8d bb 01 00 00    	jge    21c26c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x20c>
  21c0b1:	80 7c 07 fe bf       	cmpb   $0xbf,-0x2(%rdi,%rax,1)
  21c0b6:	0f 8f b9 01 00 00    	jg     21c275 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x215>
  21c0bc:	80 7c 07 fd bf       	cmpb   $0xbf,-0x3(%rdi,%rax,1)
  21c0c1:	0f 8f b7 01 00 00    	jg     21c27e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x21e>
  21c0c7:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  21c0cb:	75 d3                	jne    21c0a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x40>
  21c0cd:	31 c0                	xor    %eax,%eax
  21c0cf:	eb 0d                	jmp    21c0de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  21c0d1:	4c 8d 0d d8 67 fe ff 	lea    -0x19828(%rip),%r9        # 2028b0 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  21c0d8:	45 31 d2             	xor    %r10d,%r10d
  21c0db:	48 89 f0             	mov    %rsi,%rax
  21c0de:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  21c0e5:	00 
  21c0e6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21c0ed:	00 
  21c0ee:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
  21c0f5:	00 
  21c0f6:	4c 89 94 24 b0 00 00 	mov    %r10,0xb0(%rsp)
  21c0fd:	00 
  21c0fe:	48 39 f2             	cmp    %rsi,%rdx
  21c101:	77 0c                	ja     21c10f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0xaf>
  21c103:	48 39 f1             	cmp    %rsi,%rcx
  21c106:	0f 86 8f 00 00 00    	jbe    21c19b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x13b>
  21c10c:	48 89 ca             	mov    %rcx,%rdx
  21c10f:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  21c116:	00 
  21c117:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  21c11e:	00 
  21c11f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21c124:	48 8b 05 a5 46 00 00 	mov    0x46a5(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21c12b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c130:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  21c137:	00 
  21c138:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21c13d:	48 8d 05 3c 19 00 00 	lea    0x193c(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21c144:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21c149:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  21c150:	00 
  21c151:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  21c156:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c15b:	48 8d 05 ee 44 00 00 	lea    0x44ee(%rip),%rax        # 220650 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x18>
  21c162:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c167:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  21c16e:	00 00 
  21c170:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21c177:	00 00 
  21c179:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  21c17e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c183:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  21c18a:	00 00 
  21c18c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21c191:	4c 89 c6             	mov    %r8,%rsi
  21c194:	e8 67 ef ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21c199:	0f 0b                	ud2    
  21c19b:	48 39 ca             	cmp    %rcx,%rdx
  21c19e:	0f 86 99 00 00 00    	jbe    21c23d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1dd>
  21c1a4:	48 8d 84 24 c8 00 00 	lea    0xc8(%rsp),%rax
  21c1ab:	00 
  21c1ac:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21c1b1:	48 8b 05 18 46 00 00 	mov    0x4618(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21c1b8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c1bd:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  21c1c4:	00 
  21c1c5:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21c1ca:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21c1cf:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  21c1d6:	00 
  21c1d7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c1dc:	48 8d 05 9d 18 00 00 	lea    0x189d(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21c1e3:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c1e8:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  21c1ef:	00 
  21c1f0:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  21c1f5:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21c1fc:	00 
  21c1fd:	48 8d 05 7c 44 00 00 	lea    0x447c(%rip),%rax        # 220680 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x48>
  21c204:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c209:	48 c7 44 24 20 04 00 	movq   $0x4,0x20(%rsp)
  21c210:	00 00 
  21c212:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21c219:	00 00 
  21c21b:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  21c220:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c225:	48 c7 44 24 40 04 00 	movq   $0x4,0x40(%rsp)
  21c22c:	00 00 
  21c22e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21c233:	4c 89 c6             	mov    %r8,%rsi
  21c236:	e8 c5 ee ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21c23b:	0f 0b                	ud2    
  21c23d:	48 85 d2             	test   %rdx,%rdx
  21c240:	75 45                	jne    21c287 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x227>
  21c242:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21c247:	48 85 c9             	test   %rcx,%rcx
  21c24a:	75 60                	jne    21c2ac <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  21c24c:	31 c9                	xor    %ecx,%ecx
  21c24e:	48 39 f1             	cmp    %rsi,%rcx
  21c251:	74 63                	je     21c2b6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  21c253:	48 8d 04 0f          	lea    (%rdi,%rcx,1),%rax
  21c257:	0f b6 10             	movzbl (%rax),%edx
  21c25a:	84 d2                	test   %dl,%dl
  21c25c:	78 6e                	js     21c2cc <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x26c>
  21c25e:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  21c262:	b8 01 00 00 00       	mov    $0x1,%eax
  21c267:	e9 0e 01 00 00       	jmpq   21c37a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  21c26c:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  21c270:	e9 69 fe ff ff       	jmpq   21c0de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  21c275:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  21c279:	e9 60 fe ff ff       	jmpq   21c0de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  21c27e:	48 83 c0 fd          	add    $0xfffffffffffffffd,%rax
  21c282:	e9 57 fe ff ff       	jmpq   21c0de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  21c287:	48 39 f2             	cmp    %rsi,%rdx
  21c28a:	73 08                	jae    21c294 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x234>
  21c28c:	80 3c 17 bf          	cmpb   $0xbf,(%rdi,%rdx,1)
  21c290:	7f b0                	jg     21c242 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  21c292:	eb 02                	jmp    21c296 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x236>
  21c294:	74 ac                	je     21c242 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  21c296:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21c29b:	48 89 d1             	mov    %rdx,%rcx
  21c29e:	eb 0c                	jmp    21c2ac <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  21c2a0:	80 3c 0f bf          	cmpb   $0xbf,(%rdi,%rcx,1)
  21c2a4:	7f a8                	jg     21c24e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ee>
  21c2a6:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  21c2aa:	74 a0                	je     21c24c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ec>
  21c2ac:	48 39 f1             	cmp    %rsi,%rcx
  21c2af:	72 ef                	jb     21c2a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x240>
  21c2b1:	48 39 ce             	cmp    %rcx,%rsi
  21c2b4:	75 f0                	jne    21c2a6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x246>
  21c2b6:	48 8d 3d c6 65 fe ff 	lea    -0x19a3a(%rip),%rdi        # 202883 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0x79>
  21c2bd:	be 2b 00 00 00       	mov    $0x2b,%esi
  21c2c2:	4c 89 c2             	mov    %r8,%rdx
  21c2c5:	e8 66 ed ff ff       	callq  21b030 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21c2ca:	0f 0b                	ud2    
  21c2cc:	48 01 f7             	add    %rsi,%rdi
  21c2cf:	4c 8d 50 01          	lea    0x1(%rax),%r10
  21c2d3:	31 f6                	xor    %esi,%esi
  21c2d5:	49 89 f9             	mov    %rdi,%r9
  21c2d8:	49 39 fa             	cmp    %rdi,%r10
  21c2db:	74 0e                	je     21c2eb <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x28b>
  21c2dd:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  21c2e1:	48 83 c0 02          	add    $0x2,%rax
  21c2e5:	83 e6 3f             	and    $0x3f,%esi
  21c2e8:	49 89 c1             	mov    %rax,%r9
  21c2eb:	89 d0                	mov    %edx,%eax
  21c2ed:	83 e0 1f             	and    $0x1f,%eax
  21c2f0:	80 fa df             	cmp    $0xdf,%dl
  21c2f3:	76 4e                	jbe    21c343 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e3>
  21c2f5:	45 31 db             	xor    %r11d,%r11d
  21c2f8:	49 89 fa             	mov    %rdi,%r10
  21c2fb:	49 39 f9             	cmp    %rdi,%r9
  21c2fe:	74 0f                	je     21c30f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2af>
  21c300:	45 0f b6 19          	movzbl (%r9),%r11d
  21c304:	49 83 c1 01          	add    $0x1,%r9
  21c308:	41 83 e3 3f          	and    $0x3f,%r11d
  21c30c:	4d 89 ca             	mov    %r9,%r10
  21c30f:	c1 e6 06             	shl    $0x6,%esi
  21c312:	44 09 de             	or     %r11d,%esi
  21c315:	80 fa f0             	cmp    $0xf0,%dl
  21c318:	72 2e                	jb     21c348 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e8>
  21c31a:	31 d2                	xor    %edx,%edx
  21c31c:	49 39 fa             	cmp    %rdi,%r10
  21c31f:	74 07                	je     21c328 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2c8>
  21c321:	41 0f b6 12          	movzbl (%r10),%edx
  21c325:	83 e2 3f             	and    $0x3f,%edx
  21c328:	83 e0 07             	and    $0x7,%eax
  21c32b:	c1 e0 12             	shl    $0x12,%eax
  21c32e:	c1 e6 06             	shl    $0x6,%esi
  21c331:	09 c6                	or     %eax,%esi
  21c333:	09 d6                	or     %edx,%esi
  21c335:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  21c33b:	0f 84 75 ff ff ff    	je     21c2b6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  21c341:	eb 0a                	jmp    21c34d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2ed>
  21c343:	c1 e0 06             	shl    $0x6,%eax
  21c346:	eb 03                	jmp    21c34b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2eb>
  21c348:	c1 e0 0c             	shl    $0xc,%eax
  21c34b:	09 c6                	or     %eax,%esi
  21c34d:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  21c351:	b8 01 00 00 00       	mov    $0x1,%eax
  21c356:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  21c35c:	72 1c                	jb     21c37a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  21c35e:	b8 02 00 00 00       	mov    $0x2,%eax
  21c363:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  21c369:	72 0f                	jb     21c37a <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  21c36b:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  21c371:	b8 04 00 00 00       	mov    $0x4,%eax
  21c376:	48 83 d8 00          	sbb    $0x0,%rax
  21c37a:	48 01 c8             	add    %rcx,%rax
  21c37d:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  21c384:	00 
  21c385:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21c38c:	00 
  21c38d:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  21c392:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21c397:	48 8b 05 32 44 00 00 	mov    0x4432(%rip),%rax        # 2207d0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  21c39e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c3a3:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
  21c3a8:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21c3ad:	48 8b 05 64 44 00 00 	mov    0x4464(%rip),%rax        # 220818 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd8>
  21c3b4:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21c3b9:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  21c3c0:	00 
  21c3c1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c3c6:	48 8d 05 53 f2 ff ff 	lea    -0xdad(%rip),%rax        # 21b620 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>
  21c3cd:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c3d2:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  21c3d9:	00 
  21c3da:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21c3df:	48 8d 05 9a 16 00 00 	lea    0x169a(%rip),%rax        # 21da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  21c3e6:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21c3ed:	00 
  21c3ee:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  21c3f5:	00 
  21c3f6:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21c3fd:	00 
  21c3fe:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21c405:	00 
  21c406:	48 8d 05 b3 42 00 00 	lea    0x42b3(%rip),%rax        # 2206c0 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x88>
  21c40d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c412:	48 c7 44 24 20 05 00 	movq   $0x5,0x20(%rsp)
  21c419:	00 00 
  21c41b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21c422:	00 00 
  21c424:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  21c429:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c42e:	48 c7 44 24 40 05 00 	movq   $0x5,0x40(%rsp)
  21c435:	00 00 
  21c437:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21c43c:	4c 89 c6             	mov    %r8,%rsi
  21c43f:	e8 bc ec ff ff       	callq  21b100 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21c444:	0f 0b                	ud2    
  21c446:	cc                   	int3   
  21c447:	cc                   	int3   
  21c448:	cc                   	int3   
  21c449:	cc                   	int3   
  21c44a:	cc                   	int3   
  21c44b:	cc                   	int3   
  21c44c:	cc                   	int3   
  21c44d:	cc                   	int3   
  21c44e:	cc                   	int3   
  21c44f:	cc                   	int3   

000000000021c450 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>:
  21c450:	48 8b 07             	mov    (%rdi),%rax
  21c453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21c45a:	00 00 00 
  21c45d:	0f 1f 00             	nopl   (%rax)
  21c460:	eb fe                	jmp    21c460 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467+0x10>
  21c462:	cc                   	int3   
  21c463:	cc                   	int3   
  21c464:	cc                   	int3   
  21c465:	cc                   	int3   
  21c466:	cc                   	int3   
  21c467:	cc                   	int3   
  21c468:	cc                   	int3   
  21c469:	cc                   	int3   
  21c46a:	cc                   	int3   
  21c46b:	cc                   	int3   
  21c46c:	cc                   	int3   
  21c46d:	cc                   	int3   
  21c46e:	cc                   	int3   
  21c46f:	cc                   	int3   

000000000021c470 <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hbd463aa3be6e96dfE.llvm.2324975589069524467>:
  21c470:	c3                   	retq   
  21c471:	cc                   	int3   
  21c472:	cc                   	int3   
  21c473:	cc                   	int3   
  21c474:	cc                   	int3   
  21c475:	cc                   	int3   
  21c476:	cc                   	int3   
  21c477:	cc                   	int3   
  21c478:	cc                   	int3   
  21c479:	cc                   	int3   
  21c47a:	cc                   	int3   
  21c47b:	cc                   	int3   
  21c47c:	cc                   	int3   
  21c47d:	cc                   	int3   
  21c47e:	cc                   	int3   
  21c47f:	cc                   	int3   

000000000021c480 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>:
  21c480:	48 83 ec 38          	sub    $0x38,%rsp
  21c484:	48 8b 46 20          	mov    0x20(%rsi),%rax
  21c488:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  21c48c:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  21c490:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21c495:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
  21c499:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21c49e:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  21c4a2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21c4a7:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  21c4ab:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21c4b0:	48 8b 0f             	mov    (%rdi),%rcx
  21c4b3:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  21c4b7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21c4bc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21c4c1:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  21c4c6:	48 89 c7             	mov    %rax,%rdi
  21c4c9:	e8 12 00 00 00       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21c4ce:	48 83 c4 38          	add    $0x38,%rsp
  21c4d2:	c3                   	retq   
  21c4d3:	cc                   	int3   
  21c4d4:	cc                   	int3   
  21c4d5:	cc                   	int3   
  21c4d6:	cc                   	int3   
  21c4d7:	cc                   	int3   
  21c4d8:	cc                   	int3   
  21c4d9:	cc                   	int3   
  21c4da:	cc                   	int3   
  21c4db:	cc                   	int3   
  21c4dc:	cc                   	int3   
  21c4dd:	cc                   	int3   
  21c4de:	cc                   	int3   
  21c4df:	cc                   	int3   

000000000021c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>:
  21c4e0:	55                   	push   %rbp
  21c4e1:	41 57                	push   %r15
  21c4e3:	41 56                	push   %r14
  21c4e5:	41 55                	push   %r13
  21c4e7:	41 54                	push   %r12
  21c4e9:	53                   	push   %rbx
  21c4ea:	48 83 ec 48          	sub    $0x48,%rsp
  21c4ee:	49 89 d4             	mov    %rdx,%r12
  21c4f1:	48 b8 00 00 00 00 20 	movabs $0x2000000000,%rax
  21c4f8:	00 00 00 
  21c4fb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21c500:	c6 44 24 38 03       	movb   $0x3,0x38(%rsp)
  21c505:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  21c50c:	00 
  21c50d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21c514:	00 00 
  21c516:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21c51b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21c520:	48 8b 5a 10          	mov    0x10(%rdx),%rbx
  21c524:	48 85 db             	test   %rbx,%rbx
  21c527:	0f 84 28 01 00 00    	je     21c655 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x175>
  21c52d:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  21c532:	4c 6b e8 38          	imul   $0x38,%rax,%r13
  21c536:	4d 85 ed             	test   %r13,%r13
  21c539:	0f 84 91 01 00 00    	je     21c6d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  21c53f:	49 8b 2c 24          	mov    (%r12),%rbp
  21c543:	4c 8d 3c c5 f8 ff ff 	lea    -0x8(,%rax,8),%r15
  21c54a:	ff 
  21c54b:	49 c1 ef 03          	shr    $0x3,%r15
  21c54f:	49 83 c7 01          	add    $0x1,%r15
  21c553:	48 83 c5 08          	add    $0x8,%rbp
  21c557:	45 31 f6             	xor    %r14d,%r14d
  21c55a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  21c560:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  21c564:	48 85 d2             	test   %rdx,%rdx
  21c567:	74 19                	je     21c582 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xa2>
  21c569:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21c56e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c573:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  21c577:	ff 50 18             	callq  *0x18(%rax)
  21c57a:	84 c0                	test   %al,%al
  21c57c:	0f 85 80 01 00 00    	jne    21c702 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21c582:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  21c587:	42 8b 4c 33 28       	mov    0x28(%rbx,%r14,1),%ecx
  21c58c:	89 4c 24 34          	mov    %ecx,0x34(%rsp)
  21c590:	42 0f b6 4c 33 30    	movzbl 0x30(%rbx,%r14,1),%ecx
  21c596:	88 4c 24 38          	mov    %cl,0x38(%rsp)
  21c59a:	42 8b 4c 33 2c       	mov    0x2c(%rbx,%r14,1),%ecx
  21c59f:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
  21c5a3:	4a 8b 54 33 18       	mov    0x18(%rbx,%r14,1),%rdx
  21c5a8:	4a 8b 4c 33 20       	mov    0x20(%rbx,%r14,1),%rcx
  21c5ad:	48 85 d2             	test   %rdx,%rdx
  21c5b0:	74 23                	je     21c5d5 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xf5>
  21c5b2:	48 83 fa 01          	cmp    $0x1,%rdx
  21c5b6:	75 12                	jne    21c5ca <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xea>
  21c5b8:	48 c1 e1 04          	shl    $0x4,%rcx
  21c5bc:	48 8d 15 8d fe ff ff 	lea    -0x173(%rip),%rdx        # 21c450 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  21c5c3:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  21c5c8:	74 04                	je     21c5ce <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xee>
  21c5ca:	31 d2                	xor    %edx,%edx
  21c5cc:	eb 0c                	jmp    21c5da <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xfa>
  21c5ce:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  21c5d2:	48 8b 09             	mov    (%rcx),%rcx
  21c5d5:	ba 01 00 00 00       	mov    $0x1,%edx
  21c5da:	48 89 14 24          	mov    %rdx,(%rsp)
  21c5de:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21c5e3:	4a 8b 54 33 08       	mov    0x8(%rbx,%r14,1),%rdx
  21c5e8:	4a 8b 4c 33 10       	mov    0x10(%rbx,%r14,1),%rcx
  21c5ed:	48 85 d2             	test   %rdx,%rdx
  21c5f0:	74 23                	je     21c615 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x135>
  21c5f2:	48 83 fa 01          	cmp    $0x1,%rdx
  21c5f6:	75 12                	jne    21c60a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12a>
  21c5f8:	48 c1 e1 04          	shl    $0x4,%rcx
  21c5fc:	48 8d 15 4d fe ff ff 	lea    -0x1b3(%rip),%rdx        # 21c450 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  21c603:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  21c608:	74 04                	je     21c60e <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12e>
  21c60a:	31 d2                	xor    %edx,%edx
  21c60c:	eb 0c                	jmp    21c61a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x13a>
  21c60e:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  21c612:	48 8b 09             	mov    (%rcx),%rcx
  21c615:	ba 01 00 00 00       	mov    $0x1,%edx
  21c61a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21c61f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21c624:	4a 8b 0c 33          	mov    (%rbx,%r14,1),%rcx
  21c628:	48 c1 e1 04          	shl    $0x4,%rcx
  21c62c:	48 8b 3c 08          	mov    (%rax,%rcx,1),%rdi
  21c630:	48 89 e6             	mov    %rsp,%rsi
  21c633:	ff 54 08 08          	callq  *0x8(%rax,%rcx,1)
  21c637:	84 c0                	test   %al,%al
  21c639:	0f 85 c3 00 00 00    	jne    21c702 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21c63f:	48 83 c5 10          	add    $0x10,%rbp
  21c643:	49 83 c6 38          	add    $0x38,%r14
  21c647:	4d 39 f5             	cmp    %r14,%r13
  21c64a:	0f 85 10 ff ff ff    	jne    21c560 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x80>
  21c650:	4c 89 fa             	mov    %r15,%rdx
  21c653:	eb 7d                	jmp    21c6d2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  21c655:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  21c65a:	4d 85 ed             	test   %r13,%r13
  21c65d:	74 71                	je     21c6d0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  21c65f:	49 8b 6c 24 20       	mov    0x20(%r12),%rbp
  21c664:	49 8b 1c 24          	mov    (%r12),%rbx
  21c668:	49 c1 e5 04          	shl    $0x4,%r13
  21c66c:	49 8d 45 f0          	lea    -0x10(%r13),%rax
  21c670:	48 c1 e8 04          	shr    $0x4,%rax
  21c674:	48 83 c0 01          	add    $0x1,%rax
  21c678:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21c67d:	45 31 ff             	xor    %r15d,%r15d
  21c680:	49 89 e6             	mov    %rsp,%r14
  21c683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21c68a:	00 00 00 
  21c68d:	0f 1f 00             	nopl   (%rax)
  21c690:	4a 8b 54 3b 08       	mov    0x8(%rbx,%r15,1),%rdx
  21c695:	48 85 d2             	test   %rdx,%rdx
  21c698:	74 15                	je     21c6af <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1cf>
  21c69a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21c69f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c6a4:	4a 8b 34 3b          	mov    (%rbx,%r15,1),%rsi
  21c6a8:	ff 50 18             	callq  *0x18(%rax)
  21c6ab:	84 c0                	test   %al,%al
  21c6ad:	75 53                	jne    21c702 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21c6af:	4a 8b 7c 3d 00       	mov    0x0(%rbp,%r15,1),%rdi
  21c6b4:	4c 89 f6             	mov    %r14,%rsi
  21c6b7:	42 ff 54 3d 08       	callq  *0x8(%rbp,%r15,1)
  21c6bc:	84 c0                	test   %al,%al
  21c6be:	75 42                	jne    21c702 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21c6c0:	49 83 c7 10          	add    $0x10,%r15
  21c6c4:	4d 39 fd             	cmp    %r15,%r13
  21c6c7:	75 c7                	jne    21c690 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1b0>
  21c6c9:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21c6ce:	eb 02                	jmp    21c6d2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  21c6d0:	31 d2                	xor    %edx,%edx
  21c6d2:	48 89 d1             	mov    %rdx,%rcx
  21c6d5:	48 c1 e1 04          	shl    $0x4,%rcx
  21c6d9:	49 03 0c 24          	add    (%r12),%rcx
  21c6dd:	31 c0                	xor    %eax,%eax
  21c6df:	49 3b 54 24 08       	cmp    0x8(%r12),%rdx
  21c6e4:	48 0f 42 c1          	cmovb  %rcx,%rax
  21c6e8:	73 1c                	jae    21c706 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  21c6ea:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21c6ef:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21c6f4:	48 8b 30             	mov    (%rax),%rsi
  21c6f7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  21c6fb:	ff 51 18             	callq  *0x18(%rcx)
  21c6fe:	84 c0                	test   %al,%al
  21c700:	74 04                	je     21c706 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  21c702:	b0 01                	mov    $0x1,%al
  21c704:	eb 02                	jmp    21c708 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x228>
  21c706:	31 c0                	xor    %eax,%eax
  21c708:	48 83 c4 48          	add    $0x48,%rsp
  21c70c:	5b                   	pop    %rbx
  21c70d:	41 5c                	pop    %r12
  21c70f:	41 5d                	pop    %r13
  21c711:	41 5e                	pop    %r14
  21c713:	41 5f                	pop    %r15
  21c715:	5d                   	pop    %rbp
  21c716:	c3                   	retq   
  21c717:	cc                   	int3   
  21c718:	cc                   	int3   
  21c719:	cc                   	int3   
  21c71a:	cc                   	int3   
  21c71b:	cc                   	int3   
  21c71c:	cc                   	int3   
  21c71d:	cc                   	int3   
  21c71e:	cc                   	int3   
  21c71f:	cc                   	int3   

000000000021c720 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>:
  21c720:	55                   	push   %rbp
  21c721:	41 57                	push   %r15
  21c723:	41 56                	push   %r14
  21c725:	41 55                	push   %r13
  21c727:	41 54                	push   %r12
  21c729:	53                   	push   %rbx
  21c72a:	48 83 ec 38          	sub    $0x38,%rsp
  21c72e:	4d 89 ce             	mov    %r9,%r14
  21c731:	4d 89 c4             	mov    %r8,%r12
  21c734:	49 89 fd             	mov    %rdi,%r13
  21c737:	85 f6                	test   %esi,%esi
  21c739:	74 47                	je     21c782 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x62>
  21c73b:	45 8b 45 30          	mov    0x30(%r13),%r8d
  21c73f:	45 89 c2             	mov    %r8d,%r10d
  21c742:	41 83 e2 01          	and    $0x1,%r10d
  21c746:	4d 85 d2             	test   %r10,%r10
  21c749:	b8 00 00 11 00       	mov    $0x110000,%eax
  21c74e:	41 bf 2b 00 00 00    	mov    $0x2b,%r15d
  21c754:	44 0f 44 f8          	cmove  %eax,%r15d
  21c758:	4d 01 f2             	add    %r14,%r10
  21c75b:	41 f6 c0 04          	test   $0x4,%r8b
  21c75f:	74 35                	je     21c796 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x76>
  21c761:	48 85 c9             	test   %rcx,%rcx
  21c764:	74 57                	je     21c7bd <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x9d>
  21c766:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
  21c76a:	89 c8                	mov    %ecx,%eax
  21c76c:	83 e0 03             	and    $0x3,%eax
  21c76f:	48 83 fe 03          	cmp    $0x3,%rsi
  21c773:	73 52                	jae    21c7c7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xa7>
  21c775:	49 89 c9             	mov    %rcx,%r9
  21c778:	31 f6                	xor    %esi,%esi
  21c77a:	48 89 d7             	mov    %rdx,%rdi
  21c77d:	e9 99 00 00 00       	jmpq   21c81b <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xfb>
  21c782:	4d 8d 56 01          	lea    0x1(%r14),%r10
  21c786:	45 8b 45 30          	mov    0x30(%r13),%r8d
  21c78a:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  21c790:	41 f6 c0 04          	test   $0x4,%r8b
  21c794:	75 cb                	jne    21c761 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x41>
  21c796:	31 d2                	xor    %edx,%edx
  21c798:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  21c79d:	0f 84 b3 00 00 00    	je     21c856 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x136>
  21c7a3:	4c 89 ef             	mov    %r13,%rdi
  21c7a6:	44 89 fe             	mov    %r15d,%esi
  21c7a9:	e8 42 03 00 00       	callq  21caf0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21c7ae:	b1 01                	mov    $0x1,%cl
  21c7b0:	84 c0                	test   %al,%al
  21c7b2:	0f 84 0c 01 00 00    	je     21c8c4 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1a4>
  21c7b8:	e9 cc 02 00 00       	jmpq   21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21c7bd:	49 89 c9             	mov    %rcx,%r9
  21c7c0:	31 f6                	xor    %esi,%esi
  21c7c2:	e9 7e 00 00 00       	jmpq   21c845 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  21c7c7:	49 89 c9             	mov    %rcx,%r9
  21c7ca:	48 89 cd             	mov    %rcx,%rbp
  21c7cd:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  21c7d1:	48 f7 dd             	neg    %rbp
  21c7d4:	31 f6                	xor    %esi,%esi
  21c7d6:	48 89 d7             	mov    %rdx,%rdi
  21c7d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  21c7e0:	31 db                	xor    %ebx,%ebx
  21c7e2:	80 3f c0             	cmpb   $0xc0,(%rdi)
  21c7e5:	0f 9d c3             	setge  %bl
  21c7e8:	48 01 f3             	add    %rsi,%rbx
  21c7eb:	31 f6                	xor    %esi,%esi
  21c7ed:	80 7f 01 c0          	cmpb   $0xc0,0x1(%rdi)
  21c7f1:	40 0f 9d c6          	setge  %sil
  21c7f5:	48 01 de             	add    %rbx,%rsi
  21c7f8:	31 db                	xor    %ebx,%ebx
  21c7fa:	80 7f 02 c0          	cmpb   $0xc0,0x2(%rdi)
  21c7fe:	0f 9d c3             	setge  %bl
  21c801:	48 01 f3             	add    %rsi,%rbx
  21c804:	31 f6                	xor    %esi,%esi
  21c806:	80 7f 03 c0          	cmpb   $0xc0,0x3(%rdi)
  21c80a:	48 8d 7f 04          	lea    0x4(%rdi),%rdi
  21c80e:	40 0f 9d c6          	setge  %sil
  21c812:	48 01 de             	add    %rbx,%rsi
  21c815:	48 83 c5 04          	add    $0x4,%rbp
  21c819:	75 c5                	jne    21c7e0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xc0>
  21c81b:	48 85 c0             	test   %rax,%rax
  21c81e:	74 25                	je     21c845 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  21c820:	31 ed                	xor    %ebp,%ebp
  21c822:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21c829:	00 00 00 
  21c82c:	0f 1f 40 00          	nopl   0x0(%rax)
  21c830:	31 db                	xor    %ebx,%ebx
  21c832:	80 3c 2f c0          	cmpb   $0xc0,(%rdi,%rbp,1)
  21c836:	0f 9d c3             	setge  %bl
  21c839:	48 01 de             	add    %rbx,%rsi
  21c83c:	48 83 c5 01          	add    $0x1,%rbp
  21c840:	48 39 e8             	cmp    %rbp,%rax
  21c843:	75 eb                	jne    21c830 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x110>
  21c845:	49 01 f2             	add    %rsi,%r10
  21c848:	4c 89 c9             	mov    %r9,%rcx
  21c84b:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  21c850:	0f 85 4d ff ff ff    	jne    21c7a3 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x83>
  21c856:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21c85b:	49 8b 6d 08          	mov    0x8(%r13),%rbp
  21c85f:	48 89 eb             	mov    %rbp,%rbx
  21c862:	4c 29 d3             	sub    %r10,%rbx
  21c865:	76 43                	jbe    21c8aa <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x18a>
  21c867:	41 f6 c0 08          	test   $0x8,%r8b
  21c86b:	75 79                	jne    21c8e6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1c6>
  21c86d:	4c 29 d5             	sub    %r10,%rbp
  21c870:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  21c874:	80 f9 03             	cmp    $0x3,%cl
  21c877:	b8 01 00 00 00       	mov    $0x1,%eax
  21c87c:	0f 45 c1             	cmovne %ecx,%eax
  21c87f:	84 c0                	test   %al,%al
  21c881:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  21c886:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  21c88b:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21c890:	0f 84 b8 00 00 00    	je     21c94e <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x22e>
  21c896:	3c 01                	cmp    $0x1,%al
  21c898:	0f 85 b9 00 00 00    	jne    21c957 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x237>
  21c89e:	31 c0                	xor    %eax,%eax
  21c8a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c8a5:	e9 c2 00 00 00       	jmpq   21c96c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  21c8aa:	4c 89 ef             	mov    %r13,%rdi
  21c8ad:	44 89 fe             	mov    %r15d,%esi
  21c8b0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c8b5:	e8 36 02 00 00       	callq  21caf0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21c8ba:	b1 01                	mov    $0x1,%cl
  21c8bc:	84 c0                	test   %al,%al
  21c8be:	0f 85 c5 01 00 00    	jne    21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21c8c4:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  21c8c8:	49 8b 45 28          	mov    0x28(%r13),%rax
  21c8cc:	48 8b 40 18          	mov    0x18(%rax),%rax
  21c8d0:	4c 89 e6             	mov    %r12,%rsi
  21c8d3:	4c 89 f2             	mov    %r14,%rdx
  21c8d6:	48 83 c4 38          	add    $0x38,%rsp
  21c8da:	5b                   	pop    %rbx
  21c8db:	41 5c                	pop    %r12
  21c8dd:	41 5d                	pop    %r13
  21c8df:	41 5e                	pop    %r14
  21c8e1:	41 5f                	pop    %r15
  21c8e3:	5d                   	pop    %rbp
  21c8e4:	ff e0                	jmpq   *%rax
  21c8e6:	41 8b 6d 34          	mov    0x34(%r13),%ebp
  21c8ea:	41 c7 45 34 30 00 00 	movl   $0x30,0x34(%r13)
  21c8f1:	00 
  21c8f2:	41 8a 45 38          	mov    0x38(%r13),%al
  21c8f6:	88 44 24 08          	mov    %al,0x8(%rsp)
  21c8fa:	41 c6 45 38 01       	movb   $0x1,0x38(%r13)
  21c8ff:	4c 89 ef             	mov    %r13,%rdi
  21c902:	44 89 fe             	mov    %r15d,%esi
  21c905:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c90a:	e8 e1 01 00 00       	callq  21caf0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21c90f:	b1 01                	mov    $0x1,%cl
  21c911:	84 c0                	test   %al,%al
  21c913:	0f 85 70 01 00 00    	jne    21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21c919:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  21c91d:	80 f9 03             	cmp    $0x3,%cl
  21c920:	b8 01 00 00 00       	mov    $0x1,%eax
  21c925:	0f 45 c1             	cmovne %ecx,%eax
  21c928:	84 c0                	test   %al,%al
  21c92a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  21c92f:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  21c934:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  21c938:	0f 84 e7 00 00 00    	je     21ca25 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x305>
  21c93e:	3c 01                	cmp    $0x1,%al
  21c940:	0f 85 e6 00 00 00    	jne    21ca2c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x30c>
  21c946:	45 31 e4             	xor    %r12d,%r12d
  21c949:	e9 f1 00 00 00       	jmpq   21ca3f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  21c94e:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  21c953:	31 ed                	xor    %ebp,%ebp
  21c955:	eb 15                	jmp    21c96c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  21c957:	48 89 e8             	mov    %rbp,%rax
  21c95a:	48 d1 e8             	shr    %rax
  21c95d:	48 83 c5 01          	add    $0x1,%rbp
  21c961:	48 d1 ed             	shr    %rbp
  21c964:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  21c969:	48 89 c5             	mov    %rax,%rbp
  21c96c:	49 8b 5d 20          	mov    0x20(%r13),%rbx
  21c970:	4d 8b 65 28          	mov    0x28(%r13),%r12
  21c974:	45 8b 75 34          	mov    0x34(%r13),%r14d
  21c978:	48 83 c5 01          	add    $0x1,%rbp
  21c97c:	0f 1f 40 00          	nopl   0x0(%rax)
  21c980:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  21c984:	74 14                	je     21c99a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x27a>
  21c986:	48 89 df             	mov    %rbx,%rdi
  21c989:	44 89 f6             	mov    %r14d,%esi
  21c98c:	41 ff 54 24 20       	callq  *0x20(%r12)
  21c991:	84 c0                	test   %al,%al
  21c993:	74 eb                	je     21c980 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x260>
  21c995:	e9 ed 00 00 00       	jmpq   21ca87 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  21c99a:	b1 01                	mov    $0x1,%cl
  21c99c:	41 81 fe 00 00 11 00 	cmp    $0x110000,%r14d
  21c9a3:	0f 84 e0 00 00 00    	je     21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21c9a9:	4c 89 ef             	mov    %r13,%rdi
  21c9ac:	44 89 fe             	mov    %r15d,%esi
  21c9af:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21c9b4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c9b9:	e8 32 01 00 00       	callq  21caf0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21c9be:	84 c0                	test   %al,%al
  21c9c0:	0f 85 c1 00 00 00    	jne    21ca87 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  21c9c6:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  21c9ca:	49 8b 45 28          	mov    0x28(%r13),%rax
  21c9ce:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21c9d3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21c9d8:	ff 50 18             	callq  *0x18(%rax)
  21c9db:	84 c0                	test   %al,%al
  21c9dd:	b1 01                	mov    $0x1,%cl
  21c9df:	0f 85 a4 00 00 00    	jne    21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21c9e5:	4d 8b 7d 20          	mov    0x20(%r13),%r15
  21c9e9:	4d 8b 65 28          	mov    0x28(%r13),%r12
  21c9ed:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  21c9f2:	4c 89 ed             	mov    %r13,%rbp
  21c9f5:	48 f7 dd             	neg    %rbp
  21c9f8:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  21c9ff:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  21ca03:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  21ca07:	0f 84 d3 00 00 00    	je     21cae0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c0>
  21ca0d:	4c 89 ff             	mov    %r15,%rdi
  21ca10:	44 89 f6             	mov    %r14d,%esi
  21ca13:	41 ff 54 24 20       	callq  *0x20(%r12)
  21ca18:	48 83 c3 01          	add    $0x1,%rbx
  21ca1c:	84 c0                	test   %al,%al
  21ca1e:	74 df                	je     21c9ff <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x2df>
  21ca20:	e9 be 00 00 00       	jmpq   21cae3 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c3>
  21ca25:	49 89 dc             	mov    %rbx,%r12
  21ca28:	31 db                	xor    %ebx,%ebx
  21ca2a:	eb 13                	jmp    21ca3f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  21ca2c:	48 89 d8             	mov    %rbx,%rax
  21ca2f:	48 d1 e8             	shr    %rax
  21ca32:	48 83 c3 01          	add    $0x1,%rbx
  21ca36:	48 d1 eb             	shr    %rbx
  21ca39:	49 89 dc             	mov    %rbx,%r12
  21ca3c:	48 89 c3             	mov    %rax,%rbx
  21ca3f:	4d 8b 75 20          	mov    0x20(%r13),%r14
  21ca43:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  21ca47:	45 8b 7d 34          	mov    0x34(%r13),%r15d
  21ca4b:	48 83 c3 01          	add    $0x1,%rbx
  21ca4f:	90                   	nop
  21ca50:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  21ca54:	74 0f                	je     21ca65 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x345>
  21ca56:	4c 89 f7             	mov    %r14,%rdi
  21ca59:	44 89 fe             	mov    %r15d,%esi
  21ca5c:	ff 55 20             	callq  *0x20(%rbp)
  21ca5f:	84 c0                	test   %al,%al
  21ca61:	74 ed                	je     21ca50 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x330>
  21ca63:	eb 22                	jmp    21ca87 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  21ca65:	41 81 ff 00 00 11 00 	cmp    $0x110000,%r15d
  21ca6c:	74 19                	je     21ca87 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  21ca6e:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  21ca72:	49 8b 45 28          	mov    0x28(%r13),%rax
  21ca76:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21ca7b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21ca80:	ff 50 18             	callq  *0x18(%rax)
  21ca83:	84 c0                	test   %al,%al
  21ca85:	74 13                	je     21ca9a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x37a>
  21ca87:	b1 01                	mov    $0x1,%cl
  21ca89:	89 c8                	mov    %ecx,%eax
  21ca8b:	48 83 c4 38          	add    $0x38,%rsp
  21ca8f:	5b                   	pop    %rbx
  21ca90:	41 5c                	pop    %r12
  21ca92:	41 5d                	pop    %r13
  21ca94:	41 5e                	pop    %r14
  21ca96:	41 5f                	pop    %r15
  21ca98:	5d                   	pop    %rbp
  21ca99:	c3                   	retq   
  21ca9a:	4d 8b 75 20          	mov    0x20(%r13),%r14
  21ca9e:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  21caa2:	bb 01 00 00 00       	mov    $0x1,%ebx
  21caa7:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  21caab:	48 83 f8 01          	cmp    $0x1,%rax
  21caaf:	74 1b                	je     21cacc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3ac>
  21cab1:	4c 89 f7             	mov    %r14,%rdi
  21cab4:	44 89 fe             	mov    %r15d,%esi
  21cab7:	ff 55 20             	callq  *0x20(%rbp)
  21caba:	b1 01                	mov    $0x1,%cl
  21cabc:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  21cac0:	84 c0                	test   %al,%al
  21cac2:	74 e3                	je     21caa7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x387>
  21cac4:	48 f7 db             	neg    %rbx
  21cac7:	4c 39 e3             	cmp    %r12,%rbx
  21caca:	72 bd                	jb     21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21cacc:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  21cad0:	41 89 45 34          	mov    %eax,0x34(%r13)
  21cad4:	8a 44 24 08          	mov    0x8(%rsp),%al
  21cad8:	41 88 45 38          	mov    %al,0x38(%r13)
  21cadc:	31 c9                	xor    %ecx,%ecx
  21cade:	eb a9                	jmp    21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21cae0:	4c 89 eb             	mov    %r13,%rbx
  21cae3:	4c 39 eb             	cmp    %r13,%rbx
  21cae6:	0f 92 c1             	setb   %cl
  21cae9:	eb 9e                	jmp    21ca89 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21caeb:	cc                   	int3   
  21caec:	cc                   	int3   
  21caed:	cc                   	int3   
  21caee:	cc                   	int3   
  21caef:	cc                   	int3   

000000000021caf0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>:
  21caf0:	41 57                	push   %r15
  21caf2:	41 56                	push   %r14
  21caf4:	53                   	push   %rbx
  21caf5:	49 89 ce             	mov    %rcx,%r14
  21caf8:	49 89 d7             	mov    %rdx,%r15
  21cafb:	48 89 fb             	mov    %rdi,%rbx
  21cafe:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  21cb04:	74 13                	je     21cb19 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x29>
  21cb06:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  21cb0a:	48 8b 43 28          	mov    0x28(%rbx),%rax
  21cb0e:	ff 50 20             	callq  *0x20(%rax)
  21cb11:	89 c1                	mov    %eax,%ecx
  21cb13:	b0 01                	mov    $0x1,%al
  21cb15:	84 c9                	test   %cl,%cl
  21cb17:	75 20                	jne    21cb39 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x49>
  21cb19:	4d 85 ff             	test   %r15,%r15
  21cb1c:	74 19                	je     21cb37 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x47>
  21cb1e:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  21cb22:	48 8b 43 28          	mov    0x28(%rbx),%rax
  21cb26:	48 8b 40 18          	mov    0x18(%rax),%rax
  21cb2a:	4c 89 fe             	mov    %r15,%rsi
  21cb2d:	4c 89 f2             	mov    %r14,%rdx
  21cb30:	5b                   	pop    %rbx
  21cb31:	41 5e                	pop    %r14
  21cb33:	41 5f                	pop    %r15
  21cb35:	ff e0                	jmpq   *%rax
  21cb37:	31 c0                	xor    %eax,%eax
  21cb39:	5b                   	pop    %rbx
  21cb3a:	41 5e                	pop    %r14
  21cb3c:	41 5f                	pop    %r15
  21cb3e:	c3                   	retq   
  21cb3f:	cc                   	int3   

000000000021cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>:
  21cb40:	55                   	push   %rbp
  21cb41:	41 57                	push   %r15
  21cb43:	41 56                	push   %r14
  21cb45:	41 55                	push   %r13
  21cb47:	41 54                	push   %r12
  21cb49:	53                   	push   %rbx
  21cb4a:	50                   	push   %rax
  21cb4b:	49 89 d7             	mov    %rdx,%r15
  21cb4e:	49 89 f4             	mov    %rsi,%r12
  21cb51:	4c 8b 07             	mov    (%rdi),%r8
  21cb54:	48 8b 47 10          	mov    0x10(%rdi),%rax
  21cb58:	49 83 f8 01          	cmp    $0x1,%r8
  21cb5c:	75 0b                	jne    21cb69 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x29>
  21cb5e:	48 83 f8 01          	cmp    $0x1,%rax
  21cb62:	74 0f                	je     21cb73 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x33>
  21cb64:	e9 46 01 00 00       	jmpq   21ccaf <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x16f>
  21cb69:	48 83 f8 01          	cmp    $0x1,%rax
  21cb6d:	0f 85 02 02 00 00    	jne    21cd75 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  21cb73:	48 8b 6f 18          	mov    0x18(%rdi),%rbp
  21cb77:	4f 8d 0c 3c          	lea    (%r12,%r15,1),%r9
  21cb7b:	31 c9                	xor    %ecx,%ecx
  21cb7d:	48 85 ed             	test   %rbp,%rbp
  21cb80:	0f 84 b1 00 00 00    	je     21cc37 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xf7>
  21cb86:	4c 89 e6             	mov    %r12,%rsi
  21cb89:	eb 44                	jmp    21cbcf <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x8f>
  21cb8b:	44 0f b6 1a          	movzbl (%rdx),%r11d
  21cb8f:	48 83 c2 01          	add    $0x1,%rdx
  21cb93:	41 83 e3 3f          	and    $0x3f,%r11d
  21cb97:	83 e0 07             	and    $0x7,%eax
  21cb9a:	c1 e0 12             	shl    $0x12,%eax
  21cb9d:	41 c1 e2 0c          	shl    $0xc,%r10d
  21cba1:	41 09 c2             	or     %eax,%r10d
  21cba4:	c1 e3 06             	shl    $0x6,%ebx
  21cba7:	44 09 d3             	or     %r10d,%ebx
  21cbaa:	44 09 db             	or     %r11d,%ebx
  21cbad:	81 fb 00 00 11 00    	cmp    $0x110000,%ebx
  21cbb3:	0f 84 ec 00 00 00    	je     21cca5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  21cbb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  21cbc0:	48 29 f1             	sub    %rsi,%rcx
  21cbc3:	48 01 d1             	add    %rdx,%rcx
  21cbc6:	48 89 d6             	mov    %rdx,%rsi
  21cbc9:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  21cbcd:	74 6b                	je     21cc3a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xfa>
  21cbcf:	4c 39 ce             	cmp    %r9,%rsi
  21cbd2:	0f 84 cd 00 00 00    	je     21cca5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  21cbd8:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  21cbdc:	0f b6 06             	movzbl (%rsi),%eax
  21cbdf:	84 c0                	test   %al,%al
  21cbe1:	79 dd                	jns    21cbc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  21cbe3:	4c 39 ca             	cmp    %r9,%rdx
  21cbe6:	74 13                	je     21cbfb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xbb>
  21cbe8:	48 8d 56 02          	lea    0x2(%rsi),%rdx
  21cbec:	44 0f b6 56 01       	movzbl 0x1(%rsi),%r10d
  21cbf1:	41 83 e2 3f          	and    $0x3f,%r10d
  21cbf5:	3c e0                	cmp    $0xe0,%al
  21cbf7:	72 c7                	jb     21cbc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  21cbf9:	eb 0a                	jmp    21cc05 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xc5>
  21cbfb:	45 31 d2             	xor    %r10d,%r10d
  21cbfe:	4c 89 ca             	mov    %r9,%rdx
  21cc01:	3c e0                	cmp    $0xe0,%al
  21cc03:	72 bb                	jb     21cbc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  21cc05:	4c 39 ca             	cmp    %r9,%rdx
  21cc08:	74 10                	je     21cc1a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xda>
  21cc0a:	0f b6 1a             	movzbl (%rdx),%ebx
  21cc0d:	48 83 c2 01          	add    $0x1,%rdx
  21cc11:	83 e3 3f             	and    $0x3f,%ebx
  21cc14:	3c f0                	cmp    $0xf0,%al
  21cc16:	72 a8                	jb     21cbc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  21cc18:	eb 09                	jmp    21cc23 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xe3>
  21cc1a:	31 db                	xor    %ebx,%ebx
  21cc1c:	4c 89 ca             	mov    %r9,%rdx
  21cc1f:	3c f0                	cmp    $0xf0,%al
  21cc21:	72 9d                	jb     21cbc0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  21cc23:	4c 39 ca             	cmp    %r9,%rdx
  21cc26:	0f 85 5f ff ff ff    	jne    21cb8b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x4b>
  21cc2c:	45 31 db             	xor    %r11d,%r11d
  21cc2f:	4c 89 ca             	mov    %r9,%rdx
  21cc32:	e9 60 ff ff ff       	jmpq   21cb97 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x57>
  21cc37:	4c 89 e2             	mov    %r12,%rdx
  21cc3a:	4c 39 ca             	cmp    %r9,%rdx
  21cc3d:	74 66                	je     21cca5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  21cc3f:	0f b6 32             	movzbl (%rdx),%esi
  21cc42:	40 84 f6             	test   %sil,%sil
  21cc45:	78 16                	js     21cc5d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x11d>
  21cc47:	48 85 c9             	test   %rcx,%rcx
  21cc4a:	74 38                	je     21cc84 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x144>
  21cc4c:	4c 39 f9             	cmp    %r15,%rcx
  21cc4f:	73 37                	jae    21cc88 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x148>
  21cc51:	41 80 3c 0c c0       	cmpb   $0xc0,(%r12,%rcx,1)
  21cc56:	7c 40                	jl     21cc98 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  21cc58:	48 89 c8             	mov    %rcx,%rax
  21cc5b:	eb 33                	jmp    21cc90 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  21cc5d:	48 8d 42 01          	lea    0x1(%rdx),%rax
  21cc61:	4c 39 c8             	cmp    %r9,%rax
  21cc64:	0f 84 d3 01 00 00    	je     21ce3d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2fd>
  21cc6a:	0f b6 42 01          	movzbl 0x1(%rdx),%eax
  21cc6e:	48 83 c2 02          	add    $0x2,%rdx
  21cc72:	83 e0 3f             	and    $0x3f,%eax
  21cc75:	c1 e0 06             	shl    $0x6,%eax
  21cc78:	40 80 fe e0          	cmp    $0xe0,%sil
  21cc7c:	0f 83 ca 01 00 00    	jae    21ce4c <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x30c>
  21cc82:	eb c3                	jmp    21cc47 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  21cc84:	31 c0                	xor    %eax,%eax
  21cc86:	eb 08                	jmp    21cc90 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  21cc88:	4c 89 f8             	mov    %r15,%rax
  21cc8b:	4c 39 f9             	cmp    %r15,%rcx
  21cc8e:	75 08                	jne    21cc98 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  21cc90:	48 89 c1             	mov    %rax,%rcx
  21cc93:	4c 89 e0             	mov    %r12,%rax
  21cc96:	eb 02                	jmp    21cc9a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x15a>
  21cc98:	31 c0                	xor    %eax,%eax
  21cc9a:	48 85 c0             	test   %rax,%rax
  21cc9d:	4c 0f 45 e0          	cmovne %rax,%r12
  21cca1:	4c 0f 45 f9          	cmovne %rcx,%r15
  21cca5:	49 83 f8 01          	cmp    $0x1,%r8
  21cca9:	0f 85 c6 00 00 00    	jne    21cd75 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  21ccaf:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
  21ccb3:	4d 85 ff             	test   %r15,%r15
  21ccb6:	74 17                	je     21cccf <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x18f>
  21ccb8:	49 8d 4f ff          	lea    -0x1(%r15),%rcx
  21ccbc:	44 89 f8             	mov    %r15d,%eax
  21ccbf:	83 e0 03             	and    $0x3,%eax
  21ccc2:	48 83 f9 03          	cmp    $0x3,%rcx
  21ccc6:	73 0e                	jae    21ccd6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x196>
  21ccc8:	31 c9                	xor    %ecx,%ecx
  21ccca:	4c 89 e2             	mov    %r12,%rdx
  21cccd:	eb 5c                	jmp    21cd2b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1eb>
  21cccf:	31 c9                	xor    %ecx,%ecx
  21ccd1:	e9 80 00 00 00       	jmpq   21cd56 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  21ccd6:	4c 89 fe             	mov    %r15,%rsi
  21ccd9:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  21ccdd:	48 f7 de             	neg    %rsi
  21cce0:	31 c9                	xor    %ecx,%ecx
  21cce2:	4c 89 e2             	mov    %r12,%rdx
  21cce5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21ccec:	00 00 00 
  21ccef:	90                   	nop
  21ccf0:	31 ed                	xor    %ebp,%ebp
  21ccf2:	80 3a c0             	cmpb   $0xc0,(%rdx)
  21ccf5:	40 0f 9d c5          	setge  %bpl
  21ccf9:	48 01 cd             	add    %rcx,%rbp
  21ccfc:	31 c9                	xor    %ecx,%ecx
  21ccfe:	80 7a 01 c0          	cmpb   $0xc0,0x1(%rdx)
  21cd02:	0f 9d c1             	setge  %cl
  21cd05:	48 01 e9             	add    %rbp,%rcx
  21cd08:	31 ed                	xor    %ebp,%ebp
  21cd0a:	80 7a 02 c0          	cmpb   $0xc0,0x2(%rdx)
  21cd0e:	40 0f 9d c5          	setge  %bpl
  21cd12:	48 01 cd             	add    %rcx,%rbp
  21cd15:	31 c9                	xor    %ecx,%ecx
  21cd17:	80 7a 03 c0          	cmpb   $0xc0,0x3(%rdx)
  21cd1b:	48 8d 52 04          	lea    0x4(%rdx),%rdx
  21cd1f:	0f 9d c1             	setge  %cl
  21cd22:	48 01 e9             	add    %rbp,%rcx
  21cd25:	48 83 c6 04          	add    $0x4,%rsi
  21cd29:	75 c5                	jne    21ccf0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1b0>
  21cd2b:	48 85 c0             	test   %rax,%rax
  21cd2e:	74 26                	je     21cd56 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  21cd30:	31 f6                	xor    %esi,%esi
  21cd32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21cd39:	00 00 00 
  21cd3c:	0f 1f 40 00          	nopl   0x0(%rax)
  21cd40:	31 ed                	xor    %ebp,%ebp
  21cd42:	80 3c 32 c0          	cmpb   $0xc0,(%rdx,%rsi,1)
  21cd46:	40 0f 9d c5          	setge  %bpl
  21cd4a:	48 01 e9             	add    %rbp,%rcx
  21cd4d:	48 83 c6 01          	add    $0x1,%rsi
  21cd51:	48 39 f0             	cmp    %rsi,%rax
  21cd54:	75 ea                	jne    21cd40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x200>
  21cd56:	48 29 cb             	sub    %rcx,%rbx
  21cd59:	76 1a                	jbe    21cd75 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  21cd5b:	8b 47 38             	mov    0x38(%rdi),%eax
  21cd5e:	31 c9                	xor    %ecx,%ecx
  21cd60:	3c 03                	cmp    $0x3,%al
  21cd62:	0f 44 c1             	cmove  %ecx,%eax
  21cd65:	84 c0                	test   %al,%al
  21cd67:	74 31                	je     21cd9a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x25a>
  21cd69:	3c 01                	cmp    $0x1,%al
  21cd6b:	75 35                	jne    21cda2 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x262>
  21cd6d:	31 c0                	xor    %eax,%eax
  21cd6f:	48 89 04 24          	mov    %rax,(%rsp)
  21cd73:	eb 41                	jmp    21cdb6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  21cd75:	48 8b 47 20          	mov    0x20(%rdi),%rax
  21cd79:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  21cd7d:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  21cd81:	48 89 c7             	mov    %rax,%rdi
  21cd84:	4c 89 e6             	mov    %r12,%rsi
  21cd87:	4c 89 fa             	mov    %r15,%rdx
  21cd8a:	48 83 c4 08          	add    $0x8,%rsp
  21cd8e:	5b                   	pop    %rbx
  21cd8f:	41 5c                	pop    %r12
  21cd91:	41 5d                	pop    %r13
  21cd93:	41 5e                	pop    %r14
  21cd95:	41 5f                	pop    %r15
  21cd97:	5d                   	pop    %rbp
  21cd98:	ff e1                	jmpq   *%rcx
  21cd9a:	48 89 1c 24          	mov    %rbx,(%rsp)
  21cd9e:	31 db                	xor    %ebx,%ebx
  21cda0:	eb 14                	jmp    21cdb6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  21cda2:	48 89 d8             	mov    %rbx,%rax
  21cda5:	48 d1 e8             	shr    %rax
  21cda8:	48 83 c3 01          	add    $0x1,%rbx
  21cdac:	48 d1 eb             	shr    %rbx
  21cdaf:	48 89 1c 24          	mov    %rbx,(%rsp)
  21cdb3:	48 89 c3             	mov    %rax,%rbx
  21cdb6:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
  21cdba:	4c 8b 77 28          	mov    0x28(%rdi),%r14
  21cdbe:	8b 6f 34             	mov    0x34(%rdi),%ebp
  21cdc1:	48 83 c3 01          	add    $0x1,%rbx
  21cdc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21cdcc:	00 00 00 
  21cdcf:	90                   	nop
  21cdd0:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  21cdd4:	74 15                	je     21cdeb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2ab>
  21cdd6:	4c 89 ef             	mov    %r13,%rdi
  21cdd9:	89 ee                	mov    %ebp,%esi
  21cddb:	41 ff 56 20          	callq  *0x20(%r14)
  21cddf:	84 c0                	test   %al,%al
  21cde1:	74 ed                	je     21cdd0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x290>
  21cde3:	41 b4 01             	mov    $0x1,%r12b
  21cde6:	e9 85 00 00 00       	jmpq   21ce70 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  21cdeb:	4c 89 e6             	mov    %r12,%rsi
  21cdee:	41 b4 01             	mov    $0x1,%r12b
  21cdf1:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  21cdf7:	74 77                	je     21ce70 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  21cdf9:	4c 89 ef             	mov    %r13,%rdi
  21cdfc:	4c 89 fa             	mov    %r15,%rdx
  21cdff:	41 ff 56 18          	callq  *0x18(%r14)
  21ce03:	84 c0                	test   %al,%al
  21ce05:	75 69                	jne    21ce70 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  21ce07:	4c 8b 24 24          	mov    (%rsp),%r12
  21ce0b:	4d 89 e7             	mov    %r12,%r15
  21ce0e:	49 f7 df             	neg    %r15
  21ce11:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  21ce18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  21ce1f:	00 
  21ce20:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  21ce24:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  21ce28:	74 3c                	je     21ce66 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x326>
  21ce2a:	4c 89 ef             	mov    %r13,%rdi
  21ce2d:	89 ee                	mov    %ebp,%esi
  21ce2f:	41 ff 56 20          	callq  *0x20(%r14)
  21ce33:	48 83 c3 01          	add    $0x1,%rbx
  21ce37:	84 c0                	test   %al,%al
  21ce39:	74 e5                	je     21ce20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2e0>
  21ce3b:	eb 2c                	jmp    21ce69 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x329>
  21ce3d:	31 c0                	xor    %eax,%eax
  21ce3f:	4c 89 ca             	mov    %r9,%rdx
  21ce42:	40 80 fe e0          	cmp    $0xe0,%sil
  21ce46:	0f 82 fb fd ff ff    	jb     21cc47 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  21ce4c:	4c 39 ca             	cmp    %r9,%rdx
  21ce4f:	74 31                	je     21ce82 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x342>
  21ce51:	0f b6 2a             	movzbl (%rdx),%ebp
  21ce54:	48 83 c2 01          	add    $0x1,%rdx
  21ce58:	83 e5 3f             	and    $0x3f,%ebp
  21ce5b:	40 80 fe f0          	cmp    $0xf0,%sil
  21ce5f:	73 30                	jae    21ce91 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x351>
  21ce61:	e9 e1 fd ff ff       	jmpq   21cc47 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  21ce66:	4c 89 e3             	mov    %r12,%rbx
  21ce69:	4c 39 e3             	cmp    %r12,%rbx
  21ce6c:	41 0f 92 c4          	setb   %r12b
  21ce70:	44 89 e0             	mov    %r12d,%eax
  21ce73:	48 83 c4 08          	add    $0x8,%rsp
  21ce77:	5b                   	pop    %rbx
  21ce78:	41 5c                	pop    %r12
  21ce7a:	41 5d                	pop    %r13
  21ce7c:	41 5e                	pop    %r14
  21ce7e:	41 5f                	pop    %r15
  21ce80:	5d                   	pop    %rbp
  21ce81:	c3                   	retq   
  21ce82:	31 ed                	xor    %ebp,%ebp
  21ce84:	4c 89 ca             	mov    %r9,%rdx
  21ce87:	40 80 fe f0          	cmp    $0xf0,%sil
  21ce8b:	0f 82 b6 fd ff ff    	jb     21cc47 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  21ce91:	09 c5                	or     %eax,%ebp
  21ce93:	4c 39 ca             	cmp    %r9,%rdx
  21ce96:	74 08                	je     21cea0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x360>
  21ce98:	0f b6 02             	movzbl (%rdx),%eax
  21ce9b:	83 e0 3f             	and    $0x3f,%eax
  21ce9e:	eb 02                	jmp    21cea2 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x362>
  21cea0:	31 c0                	xor    %eax,%eax
  21cea2:	83 e6 07             	and    $0x7,%esi
  21cea5:	c1 e6 12             	shl    $0x12,%esi
  21cea8:	c1 e5 06             	shl    $0x6,%ebp
  21ceab:	09 f5                	or     %esi,%ebp
  21cead:	09 c5                	or     %eax,%ebp
  21ceaf:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  21ceb5:	0f 84 ea fd ff ff    	je     21cca5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  21cebb:	e9 87 fd ff ff       	jmpq   21cc47 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>

000000000021cec0 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>:
  21cec0:	48 8b 47 20          	mov    0x20(%rdi),%rax
  21cec4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  21cec8:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  21cecc:	48 89 c7             	mov    %rax,%rdi
  21cecf:	ff e1                	jmpq   *%rcx
  21ced1:	cc                   	int3   
  21ced2:	cc                   	int3   
  21ced3:	cc                   	int3   
  21ced4:	cc                   	int3   
  21ced5:	cc                   	int3   
  21ced6:	cc                   	int3   
  21ced7:	cc                   	int3   
  21ced8:	cc                   	int3   
  21ced9:	cc                   	int3   
  21ceda:	cc                   	int3   
  21cedb:	cc                   	int3   
  21cedc:	cc                   	int3   
  21cedd:	cc                   	int3   
  21cede:	cc                   	int3   
  21cedf:	cc                   	int3   

000000000021cee0 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>:
  21cee0:	8a 47 30             	mov    0x30(%rdi),%al
  21cee3:	24 04                	and    $0x4,%al
  21cee5:	c0 e8 02             	shr    $0x2,%al
  21cee8:	c3                   	retq   
  21cee9:	cc                   	int3   
  21ceea:	cc                   	int3   
  21ceeb:	cc                   	int3   
  21ceec:	cc                   	int3   
  21ceed:	cc                   	int3   
  21ceee:	cc                   	int3   
  21ceef:	cc                   	int3   

000000000021cef0 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>:
  21cef0:	8a 47 30             	mov    0x30(%rdi),%al
  21cef3:	24 10                	and    $0x10,%al
  21cef5:	c0 e8 04             	shr    $0x4,%al
  21cef8:	c3                   	retq   
  21cef9:	cc                   	int3   
  21cefa:	cc                   	int3   
  21cefb:	cc                   	int3   
  21cefc:	cc                   	int3   
  21cefd:	cc                   	int3   
  21cefe:	cc                   	int3   
  21ceff:	cc                   	int3   

000000000021cf00 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>:
  21cf00:	8a 47 30             	mov    0x30(%rdi),%al
  21cf03:	24 20                	and    $0x20,%al
  21cf05:	c0 e8 05             	shr    $0x5,%al
  21cf08:	c3                   	retq   
  21cf09:	cc                   	int3   
  21cf0a:	cc                   	int3   
  21cf0b:	cc                   	int3   
  21cf0c:	cc                   	int3   
  21cf0d:	cc                   	int3   
  21cf0e:	cc                   	int3   
  21cf0f:	cc                   	int3   

000000000021cf10 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>:
  21cf10:	53                   	push   %rbx
  21cf11:	48 89 fb             	mov    %rdi,%rbx
  21cf14:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  21cf18:	48 8b 43 28          	mov    0x28(%rbx),%rax
  21cf1c:	ff 50 18             	callq  *0x18(%rax)
  21cf1f:	0f b6 d0             	movzbl %al,%edx
  21cf22:	48 89 d8             	mov    %rbx,%rax
  21cf25:	5b                   	pop    %rbx
  21cf26:	c3                   	retq   
  21cf27:	cc                   	int3   
  21cf28:	cc                   	int3   
  21cf29:	cc                   	int3   
  21cf2a:	cc                   	int3   
  21cf2b:	cc                   	int3   
  21cf2c:	cc                   	int3   
  21cf2d:	cc                   	int3   
  21cf2e:	cc                   	int3   
  21cf2f:	cc                   	int3   

000000000021cf30 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>:
  21cf30:	41 57                	push   %r15
  21cf32:	41 56                	push   %r14
  21cf34:	53                   	push   %rbx
  21cf35:	49 89 ce             	mov    %rcx,%r14
  21cf38:	49 89 f7             	mov    %rsi,%r15
  21cf3b:	48 89 fb             	mov    %rdi,%rbx
  21cf3e:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  21cf42:	48 8b 46 28          	mov    0x28(%rsi),%rax
  21cf46:	48 89 d6             	mov    %rdx,%rsi
  21cf49:	48 89 ca             	mov    %rcx,%rdx
  21cf4c:	ff 50 18             	callq  *0x18(%rax)
  21cf4f:	4d 85 f6             	test   %r14,%r14
  21cf52:	4c 89 3b             	mov    %r15,(%rbx)
  21cf55:	88 43 10             	mov    %al,0x10(%rbx)
  21cf58:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  21cf5f:	00 
  21cf60:	0f 94 43 11          	sete   0x11(%rbx)
  21cf64:	48 89 d8             	mov    %rbx,%rax
  21cf67:	5b                   	pop    %rbx
  21cf68:	41 5e                	pop    %r14
  21cf6a:	41 5f                	pop    %r15
  21cf6c:	c3                   	retq   
  21cf6d:	cc                   	int3   
  21cf6e:	cc                   	int3   
  21cf6f:	cc                   	int3   

000000000021cf70 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>:
  21cf70:	48 89 f0             	mov    %rsi,%rax
  21cf73:	80 3f 00             	cmpb   $0x0,(%rdi)
  21cf76:	74 14                	je     21cf8c <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E+0x1c>
  21cf78:	48 8d 35 56 3c fe ff 	lea    -0x1c3aa(%rip),%rsi        # 200bd5 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467>
  21cf7f:	ba 04 00 00 00       	mov    $0x4,%edx
  21cf84:	48 89 c7             	mov    %rax,%rdi
  21cf87:	e9 b4 fb ff ff       	jmpq   21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  21cf8c:	48 8d 35 29 5b fe ff 	lea    -0x1a4d7(%rip),%rsi        # 202abc <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467>
  21cf93:	ba 05 00 00 00       	mov    $0x5,%edx
  21cf98:	48 89 c7             	mov    %rax,%rdi
  21cf9b:	e9 a0 fb ff ff       	jmpq   21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>

000000000021cfa0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>:
  21cfa0:	55                   	push   %rbp
  21cfa1:	41 57                	push   %r15
  21cfa3:	41 56                	push   %r14
  21cfa5:	41 55                	push   %r13
  21cfa7:	41 54                	push   %r12
  21cfa9:	53                   	push   %rbx
  21cfaa:	48 83 ec 58          	sub    $0x58,%rsp
  21cfae:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21cfb3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21cfb8:	48 8b 5a 20          	mov    0x20(%rdx),%rbx
  21cfbc:	48 8b 42 28          	mov    0x28(%rdx),%rax
  21cfc0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21cfc5:	48 8b 40 20          	mov    0x20(%rax),%rax
  21cfc9:	48 89 df             	mov    %rbx,%rdi
  21cfcc:	be 22 00 00 00       	mov    $0x22,%esi
  21cfd1:	49 89 c7             	mov    %rax,%r15
  21cfd4:	ff d0                	callq  *%rax
  21cfd6:	84 c0                	test   %al,%al
  21cfd8:	74 11                	je     21cfeb <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b>
  21cfda:	b0 01                	mov    $0x1,%al
  21cfdc:	48 83 c4 58          	add    $0x58,%rsp
  21cfe0:	5b                   	pop    %rbx
  21cfe1:	41 5c                	pop    %r12
  21cfe3:	41 5d                	pop    %r13
  21cfe5:	41 5e                	pop    %r14
  21cfe7:	41 5f                	pop    %r15
  21cfe9:	5d                   	pop    %rbp
  21cfea:	c3                   	retq   
  21cfeb:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  21cff0:	4d 85 c9             	test   %r9,%r9
  21cff3:	0f 84 e4 04 00 00    	je     21d4dd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  21cff9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21cffe:	4a 8d 34 08          	lea    (%rax,%r9,1),%rsi
  21d002:	45 31 d2             	xor    %r10d,%r10d
  21d005:	4c 8d 35 70 59 fe ff 	lea    -0x1a690(%rip),%r14        # 20297c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x6b>
  21d00c:	48 8d 15 01 59 fe ff 	lea    -0x1a6ff(%rip),%rdx        # 202914 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  21d013:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21d018:	49 89 c4             	mov    %rax,%r12
  21d01b:	31 c9                	xor    %ecx,%ecx
  21d01d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21d022:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  21d027:	41 0f b6 3c 24       	movzbl (%r12),%edi
  21d02c:	40 84 ff             	test   %dil,%dil
  21d02f:	78 08                	js     21d039 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x99>
  21d031:	49 89 c4             	mov    %rax,%r12
  21d034:	e9 a7 00 00 00       	jmpq   21d0e0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  21d039:	48 39 f0             	cmp    %rsi,%rax
  21d03c:	74 49                	je     21d087 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xe7>
  21d03e:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  21d044:	49 83 c4 02          	add    $0x2,%r12
  21d048:	83 e0 3f             	and    $0x3f,%eax
  21d04b:	89 fd                	mov    %edi,%ebp
  21d04d:	83 e5 1f             	and    $0x1f,%ebp
  21d050:	40 80 ff df          	cmp    $0xdf,%dil
  21d054:	76 41                	jbe    21d097 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xf7>
  21d056:	49 39 f4             	cmp    %rsi,%r12
  21d059:	74 41                	je     21d09c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xfc>
  21d05b:	45 0f b6 04 24       	movzbl (%r12),%r8d
  21d060:	49 83 c4 01          	add    $0x1,%r12
  21d064:	41 83 e0 3f          	and    $0x3f,%r8d
  21d068:	c1 e0 06             	shl    $0x6,%eax
  21d06b:	44 09 c0             	or     %r8d,%eax
  21d06e:	40 80 ff f0          	cmp    $0xf0,%dil
  21d072:	72 3a                	jb     21d0ae <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x10e>
  21d074:	49 39 f4             	cmp    %rsi,%r12
  21d077:	74 3e                	je     21d0b7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x117>
  21d079:	41 0f b6 3c 24       	movzbl (%r12),%edi
  21d07e:	49 83 c4 01          	add    $0x1,%r12
  21d082:	83 e7 3f             	and    $0x3f,%edi
  21d085:	eb 35                	jmp    21d0bc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x11c>
  21d087:	31 c0                	xor    %eax,%eax
  21d089:	49 89 f4             	mov    %rsi,%r12
  21d08c:	89 fd                	mov    %edi,%ebp
  21d08e:	83 e5 1f             	and    $0x1f,%ebp
  21d091:	40 80 ff df          	cmp    $0xdf,%dil
  21d095:	77 bf                	ja     21d056 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xb6>
  21d097:	c1 e5 06             	shl    $0x6,%ebp
  21d09a:	eb 15                	jmp    21d0b1 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x111>
  21d09c:	45 31 c0             	xor    %r8d,%r8d
  21d09f:	49 89 f4             	mov    %rsi,%r12
  21d0a2:	c1 e0 06             	shl    $0x6,%eax
  21d0a5:	44 09 c0             	or     %r8d,%eax
  21d0a8:	40 80 ff f0          	cmp    $0xf0,%dil
  21d0ac:	73 c6                	jae    21d074 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xd4>
  21d0ae:	c1 e5 0c             	shl    $0xc,%ebp
  21d0b1:	09 e8                	or     %ebp,%eax
  21d0b3:	89 c7                	mov    %eax,%edi
  21d0b5:	eb 29                	jmp    21d0e0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  21d0b7:	31 ff                	xor    %edi,%edi
  21d0b9:	49 89 f4             	mov    %rsi,%r12
  21d0bc:	83 e5 07             	and    $0x7,%ebp
  21d0bf:	c1 e5 12             	shl    $0x12,%ebp
  21d0c2:	c1 e0 06             	shl    $0x6,%eax
  21d0c5:	09 e8                	or     %ebp,%eax
  21d0c7:	09 f8                	or     %edi,%eax
  21d0c9:	89 c7                	mov    %eax,%edi
  21d0cb:	3d 00 00 11 00       	cmp    $0x110000,%eax
  21d0d0:	0f 84 ec 03 00 00    	je     21d4c2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x522>
  21d0d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21d0dd:	00 00 00 
  21d0e0:	bd 02 00 00 00       	mov    $0x2,%ebp
  21d0e5:	8d 47 f7             	lea    -0x9(%rdi),%eax
  21d0e8:	83 f8 19             	cmp    $0x19,%eax
  21d0eb:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21d0f0:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21d0f5:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  21d0fa:	77 1e                	ja     21d11a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x17a>
  21d0fc:	c7 44 24 0c 74 00 00 	movl   $0x74,0xc(%rsp)
  21d103:	00 
  21d104:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
  21d108:	48 01 d0             	add    %rdx,%rax
  21d10b:	ff e0                	jmpq   *%rax
  21d10d:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  21d114:	00 
  21d115:	e9 86 01 00 00       	jmpq   21d2a0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  21d11a:	83 ff 5c             	cmp    $0x5c,%edi
  21d11d:	75 0b                	jne    21d12a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x18a>
  21d11f:	89 f8                	mov    %edi,%eax
  21d121:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  21d125:	e9 76 01 00 00       	jmpq   21d2a0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  21d12a:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  21d12f:	e8 ac dd ff ff       	callq  21aee0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  21d134:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21d139:	84 c0                	test   %al,%al
  21d13b:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  21d140:	0f 85 19 01 00 00    	jne    21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d146:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  21d14c:	73 4c                	jae    21d19a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x1fa>
  21d14e:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  21d155:	00 
  21d156:	ba 28 00 00 00       	mov    $0x28,%edx
  21d15b:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  21d161:	48 8d 35 39 51 fe ff 	lea    -0x1aec7(%rip),%rsi        # 2022a1 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  21d168:	48 8d 0d 82 51 fe ff 	lea    -0x1ae7e(%rip),%rcx        # 2022f1 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  21d16f:	4c 8d 0d 9b 52 fe ff 	lea    -0x1ad65(%rip),%r9        # 202411 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  21d176:	e8 25 e9 ff ff       	callq  21baa0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  21d17b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21d180:	84 c0                	test   %al,%al
  21d182:	0f 84 d7 00 00 00    	je     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d188:	e9 ad 00 00 00       	jmpq   21d23a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  21d18d:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  21d194:	00 
  21d195:	e9 06 01 00 00       	jmpq   21d2a0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  21d19a:	81 ff 00 00 02 00    	cmp    $0x20000,%edi
  21d1a0:	73 3b                	jae    21d1dd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x23d>
  21d1a2:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  21d1a9:	00 
  21d1aa:	ba 2a 00 00 00       	mov    $0x2a,%edx
  21d1af:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  21d1b5:	48 8d 35 84 53 fe ff 	lea    -0x1ac7c(%rip),%rsi        # 202540 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  21d1bc:	48 8d 0d d1 53 fe ff 	lea    -0x1ac2f(%rip),%rcx        # 202594 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  21d1c3:	4c 8d 0d 8a 54 fe ff 	lea    -0x1ab76(%rip),%r9        # 202654 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  21d1ca:	e8 d1 e8 ff ff       	callq  21baa0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  21d1cf:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21d1d4:	84 c0                	test   %al,%al
  21d1d6:	75 62                	jne    21d23a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  21d1d8:	e9 82 00 00 00       	jmpq   21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d1dd:	89 f8                	mov    %edi,%eax
  21d1df:	83 e0 e0             	and    $0xffffffe0,%eax
  21d1e2:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  21d1e7:	74 76                	je     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d1e9:	8d 87 c7 48 fd ff    	lea    -0x2b739(%rdi),%eax
  21d1ef:	83 f8 07             	cmp    $0x7,%eax
  21d1f2:	72 6b                	jb     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d1f4:	89 f8                	mov    %edi,%eax
  21d1f6:	83 e0 fe             	and    $0xfffffffe,%eax
  21d1f9:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  21d1fe:	74 5f                	je     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d200:	8d 87 5e 31 fd ff    	lea    -0x2cea2(%rdi),%eax
  21d206:	83 f8 0e             	cmp    $0xe,%eax
  21d209:	72 54                	jb     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d20b:	8d 87 1f 14 fd ff    	lea    -0x2ebe1(%rdi),%eax
  21d211:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  21d216:	72 47                	jb     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d218:	8d 87 e2 05 fd ff    	lea    -0x2fa1e(%rdi),%eax
  21d21e:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  21d223:	72 3a                	jb     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d225:	8d 87 b5 ec fc ff    	lea    -0x3134b(%rdi),%eax
  21d22b:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  21d230:	72 2d                	jb     21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d232:	81 ff f0 01 0e 00    	cmp    $0xe01f0,%edi
  21d238:	73 25                	jae    21d25f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21d23a:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  21d23f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21d244:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21d249:	48 8d 15 c4 56 fe ff 	lea    -0x1a93c(%rip),%rdx        # 202914 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  21d250:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21d255:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  21d25a:	e9 4f 02 00 00       	jmpq   21d4ae <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x50e>
  21d25f:	89 f8                	mov    %edi,%eax
  21d261:	83 c8 01             	or     $0x1,%eax
  21d264:	44 0f bd e0          	bsr    %eax,%r12d
  21d268:	41 83 f4 1c          	xor    $0x1c,%r12d
  21d26c:	41 c1 ec 02          	shr    $0x2,%r12d
  21d270:	41 83 f4 07          	xor    $0x7,%r12d
  21d274:	41 89 fd             	mov    %edi,%r13d
  21d277:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
  21d27e:	00 00 00 
  21d281:	49 09 c5             	or     %rax,%r13
  21d284:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d289:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  21d28e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21d293:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  21d298:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  21d29f:	00 
  21d2a0:	48 89 ca             	mov    %rcx,%rdx
  21d2a3:	4c 29 d2             	sub    %r10,%rdx
  21d2a6:	0f 82 90 02 00 00    	jb     21d53c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21d2ac:	4d 85 d2             	test   %r10,%r10
  21d2af:	74 1c                	je     21d2cd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  21d2b1:	4d 39 ca             	cmp    %r9,%r10
  21d2b4:	73 11                	jae    21d2c7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x327>
  21d2b6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d2bb:	42 80 3c 10 c0       	cmpb   $0xc0,(%rax,%r10,1)
  21d2c0:	7d 0b                	jge    21d2cd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  21d2c2:	e9 75 02 00 00       	jmpq   21d53c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21d2c7:	0f 85 6f 02 00 00    	jne    21d53c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21d2cd:	48 85 c9             	test   %rcx,%rcx
  21d2d0:	74 1b                	je     21d2ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  21d2d2:	4c 39 c9             	cmp    %r9,%rcx
  21d2d5:	73 10                	jae    21d2e7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x347>
  21d2d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d2dc:	80 3c 08 bf          	cmpb   $0xbf,(%rax,%rcx,1)
  21d2e0:	7f 0b                	jg     21d2ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  21d2e2:	e9 55 02 00 00       	jmpq   21d53c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21d2e7:	0f 85 4f 02 00 00    	jne    21d53c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21d2ed:	4c 03 54 24 10       	add    0x10(%rsp),%r10
  21d2f2:	48 89 df             	mov    %rbx,%rdi
  21d2f5:	4c 89 d6             	mov    %r10,%rsi
  21d2f8:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21d2fd:	ff 50 18             	callq  *0x18(%rax)
  21d300:	eb 1a                	jmp    21d31c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x37c>
  21d302:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  21d309:	00 00 00 
  21d30c:	0f 1f 40 00          	nopl   0x0(%rax)
  21d310:	31 ed                	xor    %ebp,%ebp
  21d312:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  21d316:	48 89 df             	mov    %rbx,%rdi
  21d319:	41 ff d7             	callq  *%r15
  21d31c:	84 c0                	test   %al,%al
  21d31e:	0f 85 b6 fc ff ff    	jne    21cfda <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  21d324:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d329:	89 e8                	mov    %ebp,%eax
  21d32b:	49 63 04 86          	movslq (%r14,%rax,4),%rax
  21d32f:	4c 01 f0             	add    %r14,%rax
  21d332:	bd 01 00 00 00       	mov    $0x1,%ebp
  21d337:	ff e0                	jmpq   *%rax
  21d339:	4c 89 e8             	mov    %r13,%rax
  21d33c:	48 c1 e8 20          	shr    $0x20,%rax
  21d340:	0f b6 c0             	movzbl %al,%eax
  21d343:	48 8d 0d 42 56 fe ff 	lea    -0x1a9be(%rip),%rcx        # 20298c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x7b>
  21d34a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d34e:	48 01 c8             	add    %rcx,%rax
  21d351:	ff e0                	jmpq   *%rax
  21d353:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21d35a:	49 21 c4             	and    %rax,%r12
  21d35d:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21d364:	ff ff ff 
  21d367:	49 21 c5             	and    %rax,%r13
  21d36a:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d36f:	be 7d 00 00 00       	mov    $0x7d,%esi
  21d374:	eb a0                	jmp    21d316 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21d376:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21d37d:	49 21 c4             	and    %rax,%r12
  21d380:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21d387:	ff ff ff 
  21d38a:	49 21 c5             	and    %rax,%r13
  21d38d:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  21d394:	00 00 00 
  21d397:	49 09 c5             	or     %rax,%r13
  21d39a:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d39f:	be 75 00 00 00       	mov    $0x75,%esi
  21d3a4:	e9 6d ff ff ff       	jmpq   21d316 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21d3a9:	42 8d 0c a5 00 00 00 	lea    0x0(,%r12,4),%ecx
  21d3b0:	00 
  21d3b1:	44 89 e8             	mov    %r13d,%eax
  21d3b4:	d3 e8                	shr    %cl,%eax
  21d3b6:	83 e0 0f             	and    $0xf,%eax
  21d3b9:	8d 48 57             	lea    0x57(%rax),%ecx
  21d3bc:	89 c6                	mov    %eax,%esi
  21d3be:	83 ce 30             	or     $0x30,%esi
  21d3c1:	3c 0a                	cmp    $0xa,%al
  21d3c3:	0f 43 f1             	cmovae %ecx,%esi
  21d3c6:	4d 85 e4             	test   %r12,%r12
  21d3c9:	74 64                	je     21d42f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x48f>
  21d3cb:	49 83 c4 ff          	add    $0xffffffffffffffff,%r12
  21d3cf:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d3d4:	e9 3d ff ff ff       	jmpq   21d316 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21d3d9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21d3e0:	49 21 c4             	and    %rax,%r12
  21d3e3:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21d3ea:	ff ff ff 
  21d3ed:	49 21 c5             	and    %rax,%r13
  21d3f0:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  21d3f7:	00 00 00 
  21d3fa:	49 09 c5             	or     %rax,%r13
  21d3fd:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d402:	be 7b 00 00 00       	mov    $0x7b,%esi
  21d407:	e9 0a ff ff ff       	jmpq   21d316 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21d40c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21d413:	49 21 c4             	and    %rax,%r12
  21d416:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21d41d:	ff ff ff 
  21d420:	49 21 c5             	and    %rax,%r13
  21d423:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  21d42a:	00 00 00 
  21d42d:	eb 21                	jmp    21d450 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b0>
  21d42f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21d436:	49 21 c4             	and    %rax,%r12
  21d439:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21d440:	ff ff ff 
  21d443:	49 21 c5             	and    %rax,%r13
  21d446:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  21d44d:	00 00 00 
  21d450:	49 09 c5             	or     %rax,%r13
  21d453:	bd 03 00 00 00       	mov    $0x3,%ebp
  21d458:	e9 b9 fe ff ff       	jmpq   21d316 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21d45d:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  21d463:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21d468:	3d 80 00 00 00       	cmp    $0x80,%eax
  21d46d:	72 1c                	jb     21d48b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  21d46f:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  21d475:	3d 00 08 00 00       	cmp    $0x800,%eax
  21d47a:	72 0f                	jb     21d48b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  21d47c:	3d 00 00 01 00       	cmp    $0x10000,%eax
  21d481:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  21d487:	49 83 da 00          	sbb    $0x0,%r10
  21d48b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21d490:	49 01 ca             	add    %rcx,%r10
  21d493:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  21d498:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21d49d:	48 8d 15 70 54 fe ff 	lea    -0x1ab90(%rip),%rdx        # 202914 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  21d4a4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21d4a9:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  21d4ae:	48 29 c1             	sub    %rax,%rcx
  21d4b1:	4c 01 e1             	add    %r12,%rcx
  21d4b4:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  21d4b9:	49 39 f4             	cmp    %rsi,%r12
  21d4bc:	0f 85 60 fb ff ff    	jne    21d022 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x82>
  21d4c2:	4d 85 d2             	test   %r10,%r10
  21d4c5:	74 16                	je     21d4dd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  21d4c7:	4d 39 ca             	cmp    %r9,%r10
  21d4ca:	73 4f                	jae    21d51b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x57b>
  21d4cc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d4d1:	42 80 3c 10 bf       	cmpb   $0xbf,(%rax,%r10,1)
  21d4d6:	7e 48                	jle    21d520 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x580>
  21d4d8:	4c 89 d0             	mov    %r10,%rax
  21d4db:	eb 02                	jmp    21d4df <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  21d4dd:	31 c0                	xor    %eax,%eax
  21d4df:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21d4e4:	48 01 c6             	add    %rax,%rsi
  21d4e7:	49 29 c1             	sub    %rax,%r9
  21d4ea:	48 89 df             	mov    %rbx,%rdi
  21d4ed:	4c 89 ca             	mov    %r9,%rdx
  21d4f0:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21d4f5:	ff 50 18             	callq  *0x18(%rax)
  21d4f8:	84 c0                	test   %al,%al
  21d4fa:	0f 85 da fa ff ff    	jne    21cfda <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  21d500:	48 89 df             	mov    %rbx,%rdi
  21d503:	be 22 00 00 00       	mov    $0x22,%esi
  21d508:	4c 89 f8             	mov    %r15,%rax
  21d50b:	48 83 c4 58          	add    $0x58,%rsp
  21d50f:	5b                   	pop    %rbx
  21d510:	41 5c                	pop    %r12
  21d512:	41 5d                	pop    %r13
  21d514:	41 5e                	pop    %r14
  21d516:	41 5f                	pop    %r15
  21d518:	5d                   	pop    %rbp
  21d519:	ff e0                	jmpq   *%rax
  21d51b:	4c 89 c8             	mov    %r9,%rax
  21d51e:	74 bf                	je     21d4df <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  21d520:	4c 8d 05 61 32 00 00 	lea    0x3261(%rip),%r8        # 220788 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x48>
  21d527:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21d52c:	4c 89 ce             	mov    %r9,%rsi
  21d52f:	4c 89 d2             	mov    %r10,%rdx
  21d532:	4c 89 c9             	mov    %r9,%rcx
  21d535:	e8 26 eb ff ff       	callq  21c060 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  21d53a:	0f 0b                	ud2    
  21d53c:	4c 8d 05 2d 32 00 00 	lea    0x322d(%rip),%r8        # 220770 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x30>
  21d543:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21d548:	4c 89 ce             	mov    %r9,%rsi
  21d54b:	4c 89 d2             	mov    %r10,%rdx
  21d54e:	e8 0d eb ff ff       	callq  21c060 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  21d553:	0f 0b                	ud2    
  21d555:	cc                   	int3   
  21d556:	cc                   	int3   
  21d557:	cc                   	int3   
  21d558:	cc                   	int3   
  21d559:	cc                   	int3   
  21d55a:	cc                   	int3   
  21d55b:	cc                   	int3   
  21d55c:	cc                   	int3   
  21d55d:	cc                   	int3   
  21d55e:	cc                   	int3   
  21d55f:	cc                   	int3   

000000000021d560 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>:
  21d560:	48 89 d0             	mov    %rdx,%rax
  21d563:	48 89 f2             	mov    %rsi,%rdx
  21d566:	48 89 fe             	mov    %rdi,%rsi
  21d569:	48 89 c7             	mov    %rax,%rdi
  21d56c:	e9 cf f5 ff ff       	jmpq   21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  21d571:	cc                   	int3   
  21d572:	cc                   	int3   
  21d573:	cc                   	int3   
  21d574:	cc                   	int3   
  21d575:	cc                   	int3   
  21d576:	cc                   	int3   
  21d577:	cc                   	int3   
  21d578:	cc                   	int3   
  21d579:	cc                   	int3   
  21d57a:	cc                   	int3   
  21d57b:	cc                   	int3   
  21d57c:	cc                   	int3   
  21d57d:	cc                   	int3   
  21d57e:	cc                   	int3   
  21d57f:	cc                   	int3   

000000000021d580 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E>:
  21d580:	55                   	push   %rbp
  21d581:	41 57                	push   %r15
  21d583:	41 56                	push   %r14
  21d585:	41 55                	push   %r13
  21d587:	41 54                	push   %r12
  21d589:	53                   	push   %rbx
  21d58a:	48 83 ec 18          	sub    $0x18,%rsp
  21d58e:	49 89 fe             	mov    %rdi,%r14
  21d591:	48 8b 5e 20          	mov    0x20(%rsi),%rbx
  21d595:	48 8b 46 28          	mov    0x28(%rsi),%rax
  21d599:	48 8b 40 20          	mov    0x20(%rax),%rax
  21d59d:	48 89 df             	mov    %rbx,%rdi
  21d5a0:	be 27 00 00 00       	mov    $0x27,%esi
  21d5a5:	49 89 c7             	mov    %rax,%r15
  21d5a8:	ff d0                	callq  *%rax
  21d5aa:	84 c0                	test   %al,%al
  21d5ac:	74 11                	je     21d5bf <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x3f>
  21d5ae:	b0 01                	mov    $0x1,%al
  21d5b0:	48 83 c4 18          	add    $0x18,%rsp
  21d5b4:	5b                   	pop    %rbx
  21d5b5:	41 5c                	pop    %r12
  21d5b7:	41 5d                	pop    %r13
  21d5b9:	41 5e                	pop    %r14
  21d5bb:	41 5f                	pop    %r15
  21d5bd:	5d                   	pop    %rbp
  21d5be:	c3                   	retq   
  21d5bf:	41 8b 3e             	mov    (%r14),%edi
  21d5c2:	8d 4f f7             	lea    -0x9(%rdi),%ecx
  21d5c5:	83 f9 1e             	cmp    $0x1e,%ecx
  21d5c8:	77 5a                	ja     21d624 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xa4>
  21d5ca:	be 74 00 00 00       	mov    $0x74,%esi
  21d5cf:	b8 02 00 00 00       	mov    $0x2,%eax
  21d5d4:	48 8d 15 c9 53 fe ff 	lea    -0x1ac37(%rip),%rdx        # 2029a4 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x93>
  21d5db:	48 63 0c 8a          	movslq (%rdx,%rcx,4),%rcx
  21d5df:	48 01 d1             	add    %rdx,%rcx
  21d5e2:	ff e1                	jmpq   *%rcx
  21d5e4:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  21d5eb:	00 
  21d5ec:	b8 02 00 00 00       	mov    $0x2,%eax
  21d5f1:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d5f8:	ff ff ff 
  21d5fb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d600:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d607:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d60d:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d612:	89 c0                	mov    %eax,%eax
  21d614:	48 8d 0d 05 54 fe ff 	lea    -0x1abfb(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d61b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d61f:	48 01 c8             	add    %rcx,%rax
  21d622:	ff e0                	jmpq   *%rax
  21d624:	83 ff 5c             	cmp    $0x5c,%edi
  21d627:	75 3e                	jne    21d667 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xe7>
  21d629:	b8 02 00 00 00       	mov    $0x2,%eax
  21d62e:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d635:	ff ff ff 
  21d638:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d63d:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d644:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d64a:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d64f:	89 c0                	mov    %eax,%eax
  21d651:	48 8d 0d c8 53 fe ff 	lea    -0x1ac38(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d658:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d65c:	48 01 c8             	add    %rcx,%rax
  21d65f:	89 f9                	mov    %edi,%ecx
  21d661:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  21d665:	ff e0                	jmpq   *%rax
  21d667:	48 89 fd             	mov    %rdi,%rbp
  21d66a:	e8 71 d8 ff ff       	callq  21aee0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  21d66f:	84 c0                	test   %al,%al
  21d671:	0f 84 d4 00 00 00    	je     21d74b <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x1cb>
  21d677:	89 e8                	mov    %ebp,%eax
  21d679:	83 cd 01             	or     $0x1,%ebp
  21d67c:	0f bd ed             	bsr    %ebp,%ebp
  21d67f:	83 f5 1c             	xor    $0x1c,%ebp
  21d682:	c1 ed 02             	shr    $0x2,%ebp
  21d685:	83 f5 07             	xor    $0x7,%ebp
  21d688:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  21d68f:	00 00 00 
  21d692:	49 09 c6             	or     %rax,%r14
  21d695:	b8 03 00 00 00       	mov    $0x3,%eax
  21d69a:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d6a1:	ff ff ff 
  21d6a4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d6a9:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d6b0:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d6b6:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d6bb:	89 c0                	mov    %eax,%eax
  21d6bd:	48 8d 0d 5c 53 fe ff 	lea    -0x1aca4(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d6c4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d6c8:	48 01 c8             	add    %rcx,%rax
  21d6cb:	ff e0                	jmpq   *%rax
  21d6cd:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  21d6d4:	00 
  21d6d5:	b8 02 00 00 00       	mov    $0x2,%eax
  21d6da:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d6e1:	ff ff ff 
  21d6e4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d6e9:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d6f0:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d6f6:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d6fb:	89 c0                	mov    %eax,%eax
  21d6fd:	48 8d 0d 1c 53 fe ff 	lea    -0x1ace4(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d704:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d708:	48 01 c8             	add    %rcx,%rax
  21d70b:	ff e0                	jmpq   *%rax
  21d70d:	b8 02 00 00 00       	mov    $0x2,%eax
  21d712:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d719:	ff ff ff 
  21d71c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d721:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d728:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d72e:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d733:	89 c0                	mov    %eax,%eax
  21d735:	48 8d 0d e4 52 fe ff 	lea    -0x1ad1c(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d73c:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d740:	48 01 c8             	add    %rcx,%rax
  21d743:	89 f9                	mov    %edi,%ecx
  21d745:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  21d749:	ff e0                	jmpq   *%rax
  21d74b:	81 fd 00 00 01 00    	cmp    $0x10000,%ebp
  21d751:	73 3c                	jae    21d78f <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x20f>
  21d753:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  21d75a:	00 
  21d75b:	48 8d 35 3f 4b fe ff 	lea    -0x1b4c1(%rip),%rsi        # 2022a1 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  21d762:	48 8d 0d 88 4b fe ff 	lea    -0x1b478(%rip),%rcx        # 2022f1 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  21d769:	4c 8d 0d a1 4c fe ff 	lea    -0x1b35f(%rip),%r9        # 202411 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  21d770:	ba 28 00 00 00       	mov    $0x28,%edx
  21d775:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  21d77b:	89 ef                	mov    %ebp,%edi
  21d77d:	e8 1e e3 ff ff       	callq  21baa0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  21d782:	84 c0                	test   %al,%al
  21d784:	0f 85 9f 00 00 00    	jne    21d829 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  21d78a:	e9 a3 00 00 00       	jmpq   21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d78f:	81 fd 00 00 02 00    	cmp    $0x20000,%ebp
  21d795:	73 35                	jae    21d7cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x24c>
  21d797:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  21d79e:	00 
  21d79f:	48 8d 35 9a 4d fe ff 	lea    -0x1b266(%rip),%rsi        # 202540 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  21d7a6:	48 8d 0d e7 4d fe ff 	lea    -0x1b219(%rip),%rcx        # 202594 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  21d7ad:	4c 8d 0d a0 4e fe ff 	lea    -0x1b160(%rip),%r9        # 202654 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  21d7b4:	ba 2a 00 00 00       	mov    $0x2a,%edx
  21d7b9:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  21d7bf:	89 ef                	mov    %ebp,%edi
  21d7c1:	e8 da e2 ff ff       	callq  21baa0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  21d7c6:	84 c0                	test   %al,%al
  21d7c8:	75 5f                	jne    21d829 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  21d7ca:	eb 66                	jmp    21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d7cc:	89 e8                	mov    %ebp,%eax
  21d7ce:	83 e0 e0             	and    $0xffffffe0,%eax
  21d7d1:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  21d7d6:	74 5a                	je     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d7d8:	8d 85 c7 48 fd ff    	lea    -0x2b739(%rbp),%eax
  21d7de:	83 f8 07             	cmp    $0x7,%eax
  21d7e1:	72 4f                	jb     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d7e3:	89 e8                	mov    %ebp,%eax
  21d7e5:	83 e0 fe             	and    $0xfffffffe,%eax
  21d7e8:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  21d7ed:	74 43                	je     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d7ef:	8d 85 5e 31 fd ff    	lea    -0x2cea2(%rbp),%eax
  21d7f5:	83 f8 0e             	cmp    $0xe,%eax
  21d7f8:	72 38                	jb     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d7fa:	8d 85 1f 14 fd ff    	lea    -0x2ebe1(%rbp),%eax
  21d800:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  21d805:	72 2b                	jb     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d807:	8d 85 e2 05 fd ff    	lea    -0x2fa1e(%rbp),%eax
  21d80d:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  21d812:	72 1e                	jb     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d814:	8d 85 b5 ec fc ff    	lea    -0x3134b(%rbp),%eax
  21d81a:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  21d81f:	72 11                	jb     21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d821:	81 fd f0 01 0e 00    	cmp    $0xe01f0,%ebp
  21d827:	73 09                	jae    21d832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21d829:	b8 01 00 00 00       	mov    $0x1,%eax
  21d82e:	89 ee                	mov    %ebp,%esi
  21d830:	eb 23                	jmp    21d855 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2d5>
  21d832:	89 e8                	mov    %ebp,%eax
  21d834:	83 cd 01             	or     $0x1,%ebp
  21d837:	0f bd ed             	bsr    %ebp,%ebp
  21d83a:	83 f5 1c             	xor    $0x1c,%ebp
  21d83d:	c1 ed 02             	shr    $0x2,%ebp
  21d840:	83 f5 07             	xor    $0x7,%ebp
  21d843:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  21d84a:	00 00 00 
  21d84d:	49 09 c6             	or     %rax,%r14
  21d850:	b8 03 00 00 00       	mov    $0x3,%eax
  21d855:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  21d859:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  21d860:	ff ff ff 
  21d863:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21d868:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21d86f:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d875:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d87a:	89 c0                	mov    %eax,%eax
  21d87c:	48 8d 0d 9d 51 fe ff 	lea    -0x1ae63(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d883:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d887:	48 01 c8             	add    %rcx,%rax
  21d88a:	ff e0                	jmpq   *%rax
  21d88c:	0f 1f 40 00          	nopl   0x0(%rax)
  21d890:	48 89 df             	mov    %rbx,%rdi
  21d893:	41 ff d7             	callq  *%r15
  21d896:	84 c0                	test   %al,%al
  21d898:	0f 85 10 fd ff ff    	jne    21d5ae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2e>
  21d89e:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d8a3:	44 89 e0             	mov    %r12d,%eax
  21d8a6:	48 8d 0d 73 51 fe ff 	lea    -0x1ae8d(%rip),%rcx        # 202a20 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21d8ad:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d8b1:	48 01 c8             	add    %rcx,%rax
  21d8b4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21d8ba:	ff e0                	jmpq   *%rax
  21d8bc:	45 31 e4             	xor    %r12d,%r12d
  21d8bf:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  21d8c3:	eb cb                	jmp    21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d8c5:	4c 89 f0             	mov    %r14,%rax
  21d8c8:	48 c1 e8 20          	shr    $0x20,%rax
  21d8cc:	0f b6 c0             	movzbl %al,%eax
  21d8cf:	48 8d 0d 5a 51 fe ff 	lea    -0x1aea6(%rip),%rcx        # 202a30 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x11f>
  21d8d6:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21d8da:	48 01 c8             	add    %rcx,%rax
  21d8dd:	ff e0                	jmpq   *%rax
  21d8df:	4c 21 ed             	and    %r13,%rbp
  21d8e2:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21d8e7:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d8ed:	be 7d 00 00 00       	mov    $0x7d,%esi
  21d8f2:	eb 9c                	jmp    21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d8f4:	8d 0c ad 00 00 00 00 	lea    0x0(,%rbp,4),%ecx
  21d8fb:	44 89 f0             	mov    %r14d,%eax
  21d8fe:	d3 e8                	shr    %cl,%eax
  21d900:	83 e0 0f             	and    $0xf,%eax
  21d903:	8d 48 57             	lea    0x57(%rax),%ecx
  21d906:	89 c6                	mov    %eax,%esi
  21d908:	83 ce 30             	or     $0x30,%esi
  21d90b:	3c 0a                	cmp    $0xa,%al
  21d90d:	0f 43 f1             	cmovae %ecx,%esi
  21d910:	48 85 ed             	test   %rbp,%rbp
  21d913:	74 7e                	je     21d993 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x413>
  21d915:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  21d919:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d91f:	e9 6c ff ff ff       	jmpq   21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d924:	4c 21 ed             	and    %r13,%rbp
  21d927:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21d92c:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  21d933:	00 00 00 
  21d936:	49 09 c6             	or     %rax,%r14
  21d939:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d93f:	be 7b 00 00 00       	mov    $0x7b,%esi
  21d944:	e9 47 ff ff ff       	jmpq   21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d949:	4c 21 ed             	and    %r13,%rbp
  21d94c:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21d951:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  21d958:	00 00 00 
  21d95b:	49 09 c6             	or     %rax,%r14
  21d95e:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d964:	be 75 00 00 00       	mov    $0x75,%esi
  21d969:	e9 22 ff ff ff       	jmpq   21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d96e:	4c 21 ed             	and    %r13,%rbp
  21d971:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21d976:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  21d97d:	00 00 00 
  21d980:	49 09 c6             	or     %rax,%r14
  21d983:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d989:	be 5c 00 00 00       	mov    $0x5c,%esi
  21d98e:	e9 fd fe ff ff       	jmpq   21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d993:	4c 21 ed             	and    %r13,%rbp
  21d996:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21d99b:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  21d9a2:	00 00 00 
  21d9a5:	49 09 c6             	or     %rax,%r14
  21d9a8:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21d9ae:	e9 dd fe ff ff       	jmpq   21d890 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21d9b3:	48 89 df             	mov    %rbx,%rdi
  21d9b6:	be 27 00 00 00       	mov    $0x27,%esi
  21d9bb:	4c 89 f8             	mov    %r15,%rax
  21d9be:	48 83 c4 18          	add    $0x18,%rsp
  21d9c2:	5b                   	pop    %rbx
  21d9c3:	41 5c                	pop    %r12
  21d9c5:	41 5d                	pop    %r13
  21d9c7:	41 5e                	pop    %r14
  21d9c9:	41 5f                	pop    %r15
  21d9cb:	5d                   	pop    %rbp
  21d9cc:	ff e0                	jmpq   *%rax
  21d9ce:	cc                   	int3   
  21d9cf:	cc                   	int3   

000000000021d9d0 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h558b5ba4ec7667bfE>:
  21d9d0:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  21d9d4:	48 8b 46 28          	mov    0x28(%rsi),%rax
  21d9d8:	48 8b 40 18          	mov    0x18(%rax),%rax
  21d9dc:	48 8d 35 de 50 fe ff 	lea    -0x1af22(%rip),%rsi        # 202ac1 <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467+0x5>
  21d9e3:	ba 05 00 00 00       	mov    $0x5,%edx
  21d9e8:	ff e0                	jmpq   *%rax
  21d9ea:	cc                   	int3   
  21d9eb:	cc                   	int3   
  21d9ec:	cc                   	int3   
  21d9ed:	cc                   	int3   
  21d9ee:	cc                   	int3   
  21d9ef:	cc                   	int3   

000000000021d9f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>:
  21d9f0:	48 8b 07             	mov    (%rdi),%rax
  21d9f3:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  21d9f7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  21d9fb:	48 89 c7             	mov    %rax,%rdi
  21d9fe:	ff e1                	jmpq   *%rcx

000000000021da00 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>:
  21da00:	48 83 ec 38          	sub    $0x38,%rsp
  21da04:	48 8b 07             	mov    (%rdi),%rax
  21da07:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  21da0b:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  21da0f:	48 8b 48 28          	mov    0x28(%rax),%rcx
  21da13:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21da18:	48 8b 48 20          	mov    0x20(%rax),%rcx
  21da1c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21da21:	48 8b 48 18          	mov    0x18(%rax),%rcx
  21da25:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21da2a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  21da2e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21da33:	48 8b 08             	mov    (%rax),%rcx
  21da36:	48 8b 40 08          	mov    0x8(%rax),%rax
  21da3a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21da3f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21da44:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  21da49:	e8 92 ea ff ff       	callq  21c4e0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21da4e:	48 83 c4 38          	add    $0x38,%rsp
  21da52:	c3                   	retq   
  21da53:	cc                   	int3   
  21da54:	cc                   	int3   
  21da55:	cc                   	int3   
  21da56:	cc                   	int3   
  21da57:	cc                   	int3   
  21da58:	cc                   	int3   
  21da59:	cc                   	int3   
  21da5a:	cc                   	int3   
  21da5b:	cc                   	int3   
  21da5c:	cc                   	int3   
  21da5d:	cc                   	int3   
  21da5e:	cc                   	int3   
  21da5f:	cc                   	int3   

000000000021da60 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>:
  21da60:	48 89 f0             	mov    %rsi,%rax
  21da63:	48 8b 0f             	mov    (%rdi),%rcx
  21da66:	48 8b 31             	mov    (%rcx),%rsi
  21da69:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  21da6d:	48 89 c7             	mov    %rax,%rdi
  21da70:	e9 cb f0 ff ff       	jmpq   21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  21da75:	cc                   	int3   
  21da76:	cc                   	int3   
  21da77:	cc                   	int3   
  21da78:	cc                   	int3   
  21da79:	cc                   	int3   
  21da7a:	cc                   	int3   
  21da7b:	cc                   	int3   
  21da7c:	cc                   	int3   
  21da7d:	cc                   	int3   
  21da7e:	cc                   	int3   
  21da7f:	cc                   	int3   

000000000021da80 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>:
  21da80:	48 89 f0             	mov    %rsi,%rax
  21da83:	48 8b 37             	mov    (%rdi),%rsi
  21da86:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  21da8a:	48 89 c7             	mov    %rax,%rdi
  21da8d:	e9 ae f0 ff ff       	jmpq   21cb40 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  21da92:	cc                   	int3   
  21da93:	cc                   	int3   
  21da94:	cc                   	int3   
  21da95:	cc                   	int3   
  21da96:	cc                   	int3   
  21da97:	cc                   	int3   
  21da98:	cc                   	int3   
  21da99:	cc                   	int3   
  21da9a:	cc                   	int3   
  21da9b:	cc                   	int3   
  21da9c:	cc                   	int3   
  21da9d:	cc                   	int3   
  21da9e:	cc                   	int3   
  21da9f:	cc                   	int3   

000000000021daa0 <memcpy>:
  21daa0:	48 89 f8             	mov    %rdi,%rax
  21daa3:	48 89 d1             	mov    %rdx,%rcx
  21daa6:	48 c1 e9 03          	shr    $0x3,%rcx
  21daaa:	83 e2 07             	and    $0x7,%edx
  21daad:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  21dab0:	89 d1                	mov    %edx,%ecx
  21dab2:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  21dab4:	c3                   	retq   
  21dab5:	cc                   	int3   
  21dab6:	cc                   	int3   
  21dab7:	cc                   	int3   
  21dab8:	cc                   	int3   
  21dab9:	cc                   	int3   
  21daba:	cc                   	int3   
  21dabb:	cc                   	int3   
  21dabc:	cc                   	int3   
  21dabd:	cc                   	int3   
  21dabe:	cc                   	int3   
  21dabf:	cc                   	int3   

000000000021dac0 <memset>:
  21dac0:	49 89 f8             	mov    %rdi,%r8
  21dac3:	48 89 d1             	mov    %rdx,%rcx
  21dac6:	48 c1 e9 03          	shr    $0x3,%rcx
  21daca:	83 e2 07             	and    $0x7,%edx
  21dacd:	40 0f b6 f6          	movzbl %sil,%esi
  21dad1:	48 b8 01 01 01 01 01 	movabs $0x101010101010101,%rax
  21dad8:	01 01 01 
  21dadb:	48 0f af c6          	imul   %rsi,%rax
  21dadf:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  21dae2:	89 d1                	mov    %edx,%ecx
  21dae4:	f3 aa                	rep stos %al,%es:(%rdi)
  21dae6:	4c 89 c0             	mov    %r8,%rax
  21dae9:	c3                   	retq   
