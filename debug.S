
kbin/x86_64/debug/r3_kernel:     file format elf64-x86-64


Disassembly of section .text:

00000000002060c0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  2060c0:	48 83 ec 38          	sub    $0x38,%rsp
  2060c4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2060c9:	48 89 f8             	mov    %rdi,%rax
  2060cc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2060d1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2060d6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2060db:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  2060e0:	e8 6b f6 02 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  2060e5:	88 44 24 26          	mov    %al,0x26(%rsp)
  2060e9:	8a 44 24 26          	mov    0x26(%rsp),%al
  2060ed:	a8 01                	test   $0x1,%al
  2060ef:	75 12                	jne    206103 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x43>
  2060f1:	eb 00                	jmp    2060f3 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x33>
  2060f3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
  2060f8:	e8 63 f6 02 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2060fd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206101:	eb 25                	jmp    206128 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x68>
  206103:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206108:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20610d:	e8 ae c2 02 00       	callq  2323c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE>
  206112:	24 01                	and    $0x1,%al
  206114:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  206118:	eb 00                	jmp    20611a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x5a>
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
                }
            }
  20611a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20611e:	24 01                	and    $0x1,%al
  206120:	0f b6 c0             	movzbl %al,%eax
  206123:	48 83 c4 38          	add    $0x38,%rsp
  206127:	c3                   	retq   
  206128:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20612c:	a8 01                	test   $0x1,%al
  20612e:	75 19                	jne    206149 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x89>
  206130:	eb 00                	jmp    206132 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x72>
  206132:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206137:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  20613c:	e8 5f e1 02 00       	callq  2342a0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E>
  206141:	24 01                	and    $0x1,%al
  206143:	88 44 24 27          	mov    %al,0x27(%rsp)
  206147:	eb 19                	jmp    206162 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa2>
  206149:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20614e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  206153:	e8 f8 c2 02 00       	callq  232450 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E>
  206158:	24 01                	and    $0x1,%al
  20615a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20615e:	eb 00                	jmp    206160 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa0>
                if f.debug_lower_hex() {
  206160:	eb b8                	jmp    20611a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0x5a>
                } else if f.debug_upper_hex() {
  206162:	eb fc                	jmp    206160 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE+0xa0>
  206164:	cc                   	int3   
  206165:	cc                   	int3   
  206166:	cc                   	int3   
  206167:	cc                   	int3   
  206168:	cc                   	int3   
  206169:	cc                   	int3   
  20616a:	cc                   	int3   
  20616b:	cc                   	int3   
  20616c:	cc                   	int3   
  20616d:	cc                   	int3   
  20616e:	cc                   	int3   
  20616f:	cc                   	int3   

0000000000206170 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  206170:	48 83 ec 38          	sub    $0x38,%rsp
  206174:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206179:	48 89 f8             	mov    %rdi,%rax
  20617c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206181:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206186:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20618b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  206190:	e8 bb f5 02 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  206195:	88 44 24 26          	mov    %al,0x26(%rsp)
  206199:	8a 44 24 26          	mov    0x26(%rsp),%al
  20619d:	a8 01                	test   $0x1,%al
  20619f:	75 12                	jne    2061b3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x43>
  2061a1:	eb 00                	jmp    2061a3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x33>
  2061a3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  2061a8:	e8 b3 f5 02 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2061ad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2061b1:	eb 25                	jmp    2061d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x68>
  2061b3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2061b8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  2061bd:	e8 7e c5 02 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  2061c2:	24 01                	and    $0x1,%al
  2061c4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  2061c8:	eb 00                	jmp    2061ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x5a>
            }
  2061ca:	8a 44 24 27          	mov    0x27(%rsp),%al
  2061ce:	24 01                	and    $0x1,%al
  2061d0:	0f b6 c0             	movzbl %al,%eax
  2061d3:	48 83 c4 38          	add    $0x38,%rsp
  2061d7:	c3                   	retq   
  2061d8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  2061dc:	a8 01                	test   $0x1,%al
  2061de:	75 19                	jne    2061f9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x89>
  2061e0:	eb 00                	jmp    2061e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x72>
  2061e2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2061e7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2061ec:	e8 7f e3 02 00       	callq  234570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  2061f1:	24 01                	and    $0x1,%al
  2061f3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2061f7:	eb 19                	jmp    206212 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa2>
  2061f9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2061fe:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  206203:	e8 d8 c5 02 00       	callq  2327e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  206208:	24 01                	and    $0x1,%al
  20620a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20620e:	eb 00                	jmp    206210 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa0>
                if f.debug_lower_hex() {
  206210:	eb b8                	jmp    2061ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0x5a>
                } else if f.debug_upper_hex() {
  206212:	eb fc                	jmp    206210 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h6cebf1fbf756c217E+0xa0>
  206214:	cc                   	int3   
  206215:	cc                   	int3   
  206216:	cc                   	int3   
  206217:	cc                   	int3   
  206218:	cc                   	int3   
  206219:	cc                   	int3   
  20621a:	cc                   	int3   
  20621b:	cc                   	int3   
  20621c:	cc                   	int3   
  20621d:	cc                   	int3   
  20621e:	cc                   	int3   
  20621f:	cc                   	int3   

0000000000206220 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3231da5c25fe9b6bE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  206220:	48 83 ec 28          	sub    $0x28,%rsp
  206224:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206229:	48 89 f8             	mov    %rdi,%rax
  20622c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  206231:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206236:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        f.pad("()")
  20623b:	48 8d 35 be 9f ff ff 	lea    -0x6042(%rip),%rsi        # 200200 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x82>
  206242:	ba 02 00 00 00       	mov    $0x2,%edx
  206247:	e8 54 f1 02 00       	callq  2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  20624c:	88 44 24 17          	mov    %al,0x17(%rsp)
  206250:	8a 44 24 17          	mov    0x17(%rsp),%al
    }
  206254:	24 01                	and    $0x1,%al
  206256:	0f b6 c0             	movzbl %al,%eax
  206259:	48 83 c4 28          	add    $0x28,%rsp
  20625d:	c3                   	retq   
  20625e:	cc                   	int3   
  20625f:	cc                   	int3   

0000000000206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>:
    pub const fn new_v1_formatted(
  206260:	48 83 ec 48          	sub    $0x48,%rsp
  206264:	4d 89 ca             	mov    %r9,%r10
  206267:	48 89 f8             	mov    %rdi,%rax
  20626a:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  20626f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206274:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  206279:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20627e:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  206283:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  206288:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
        Arguments { pieces, fmt: Some(fmt), args }
  20628d:	4c 89 14 24          	mov    %r10,(%rsp)
  206291:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  206296:	48 89 37             	mov    %rsi,(%rdi)
  206299:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  20629d:	48 8b 34 24          	mov    (%rsp),%rsi
  2062a1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2062a6:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  2062aa:	48 89 57 18          	mov    %rdx,0x18(%rdi)
  2062ae:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
  2062b2:	4c 89 47 28          	mov    %r8,0x28(%rdi)
    }
  2062b6:	48 83 c4 48          	add    $0x48,%rsp
  2062ba:	c3                   	retq   
  2062bb:	cc                   	int3   
  2062bc:	cc                   	int3   
  2062bd:	cc                   	int3   
  2062be:	cc                   	int3   
  2062bf:	cc                   	int3   

00000000002062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  2062c0:	48 83 ec 68          	sub    $0x68,%rsp
  2062c4:	4c 89 04 24          	mov    %r8,(%rsp)
  2062c8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  2062cd:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2062d2:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2062d7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2062dc:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2062e1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2062e6:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2062eb:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2062f0:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  2062f5:	4c 39 c2             	cmp    %r8,%rdx
  2062f8:	72 1b                	jb     206315 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0x55>
  2062fa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2062ff:	48 8b 0c 24          	mov    (%rsp),%rcx
  206303:	48 83 c1 01          	add    $0x1,%rcx
  206307:	48 39 c8             	cmp    %rcx,%rax
  20630a:	0f 97 c0             	seta   %al
  20630d:	24 01                	and    $0x1,%al
  20630f:	88 44 24 37          	mov    %al,0x37(%rsp)
  206313:	eb 05                	jmp    20631a <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0x5a>
  206315:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20631a:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20631f:	75 4c                	jne    20636d <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E+0xad>
  206321:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206326:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20632b:	48 8b 14 24          	mov    (%rsp),%rdx
  20632f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  206334:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206339:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  20633e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  206345:	00 00 
  206347:	4c 89 01             	mov    %r8,(%rcx)
  20634a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  20634e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  206353:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  206358:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  20635c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  206360:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  206364:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  206368:	48 83 c4 68          	add    $0x68,%rsp
  20636c:	c3                   	retq   
            panic!("invalid args");
  20636d:	48 8d 3d 8e 9e ff ff 	lea    -0x6172(%rip),%rdi        # 200202 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE-0x80>
  206374:	48 8d 15 65 12 03 00 	lea    0x31265(%rip),%rdx        # 2375e0 <memcmp+0x1030>
  20637b:	be 0c 00 00 00       	mov    $0xc,%esi
  206380:	e8 db d0 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  206385:	0f 0b                	ud2    
  206387:	cc                   	int3   
  206388:	cc                   	int3   
  206389:	cc                   	int3   
  20638a:	cc                   	int3   
  20638b:	cc                   	int3   
  20638c:	cc                   	int3   
  20638d:	cc                   	int3   
  20638e:	cc                   	int3   
  20638f:	cc                   	int3   

0000000000206390 <_ZN9r3_kernel3cpu13hw_interrupts16pit_irq0_handler17h052240fa4a00c4aaE>:
use exceptions::IDT;
use interrupts::{prepare_default_handle, InterruptStackFrame};
use pic::CHAINED_PIC;
use pit::pit_callback;

extern "x86-interrupt" fn pit_irq0_handler(_stk: InterruptStackFrame) {
  206390:	41 53                	push   %r11
  206392:	41 52                	push   %r10
  206394:	41 51                	push   %r9
  206396:	41 50                	push   %r8
  206398:	57                   	push   %rdi
  206399:	56                   	push   %rsi
  20639a:	52                   	push   %rdx
  20639b:	51                   	push   %rcx
  20639c:	50                   	push   %rax
  20639d:	48 83 ec 20          	sub    $0x20,%rsp
  2063a1:	fc                   	cld    
    pit_callback();
  2063a2:	e8 b9 65 02 00       	callq  22c960 <_ZN9r3_kernel3cpu3pit12pit_callback17ha4008cf7d5ddd5c3E>
    CHAINED_PIC.lock().send_eoi(0x20);
  2063a7:	48 8d 3d 78 d0 ff ff 	lea    -0x2f88(%rip),%rdi        # 203426 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  2063ae:	e8 cd 4e 02 00       	callq  22b280 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  2063b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2063b8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2063bd:	e8 1e 60 02 00       	callq  22c3e0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  2063c2:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2063c7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2063cc:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2063d1:	e8 3a 61 02 00       	callq  22c510 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  2063d6:	48 89 04 24          	mov    %rax,(%rsp)
  2063da:	48 8b 3c 24          	mov    (%rsp),%rdi
  2063de:	be 20 00 00 00       	mov    $0x20,%esi
  2063e3:	e8 f8 48 02 00       	callq  22ace0 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E>
  2063e8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2063ed:	e8 ae 56 00 00       	callq  20baa0 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
}
  2063f2:	48 83 c4 20          	add    $0x20,%rsp
  2063f6:	58                   	pop    %rax
  2063f7:	59                   	pop    %rcx
  2063f8:	5a                   	pop    %rdx
  2063f9:	5e                   	pop    %rsi
  2063fa:	5f                   	pop    %rdi
  2063fb:	41 58                	pop    %r8
  2063fd:	41 59                	pop    %r9
  2063ff:	41 5a                	pop    %r10
  206401:	41 5b                	pop    %r11
  206403:	48 cf                	iretq  
  206405:	cc                   	int3   
  206406:	cc                   	int3   
  206407:	cc                   	int3   
  206408:	cc                   	int3   
  206409:	cc                   	int3   
  20640a:	cc                   	int3   
  20640b:	cc                   	int3   
  20640c:	cc                   	int3   
  20640d:	cc                   	int3   
  20640e:	cc                   	int3   
  20640f:	cc                   	int3   

0000000000206410 <_ZN9r3_kernel3cpu13hw_interrupts19setup_hw_interrupts17ha6aa69e3fa23ad1eE>:

pub fn setup_hw_interrupts() {
  206410:	48 83 ec 58          	sub    $0x58,%rsp
    let irq0_handle = prepare_default_handle(pit_irq0_handler);
  206414:	48 8d 3d 75 ff ff ff 	lea    -0x8b(%rip),%rdi        # 206390 <_ZN9r3_kernel3cpu13hw_interrupts16pit_irq0_handler17h052240fa4a00c4aaE>
  20641b:	e8 c0 19 02 00       	callq  227de0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  206420:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  206425:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20642a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20642f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206434:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  206439:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    IDT.lock().interrupts[0] = irq0_handle;
  20643e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206443:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206448:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20644d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206452:	48 8d 3d 76 cd ff ff 	lea    -0x328a(%rip),%rdi        # 2031cf <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E>
  206459:	e8 62 36 02 00       	callq  229ac0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h535fd7346896ff92E>
  20645e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206463:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206468:	e8 13 60 02 00       	callq  22c480 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hf747a5da2ef31e32E>
  20646d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  206472:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206477:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20647c:	e8 1f 61 02 00       	callq  22c5a0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbcafc1d0b2686958E>
  206481:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206486:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20648b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  206490:	48 89 88 00 02 00 00 	mov    %rcx,0x200(%rax)
  206497:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20649c:	48 89 88 08 02 00 00 	mov    %rcx,0x208(%rax)
  2064a3:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2064a8:	e8 23 53 00 00       	callq  20b7d0 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h6b7435ddd305bf85E>
}
  2064ad:	48 83 c4 58          	add    $0x58,%rsp
  2064b1:	c3                   	retq   
  2064b2:	cc                   	int3   
  2064b3:	cc                   	int3   
  2064b4:	cc                   	int3   
  2064b5:	cc                   	int3   
  2064b6:	cc                   	int3   
  2064b7:	cc                   	int3   
  2064b8:	cc                   	int3   
  2064b9:	cc                   	int3   
  2064ba:	cc                   	int3   
  2064bb:	cc                   	int3   
  2064bc:	cc                   	int3   
  2064bd:	cc                   	int3   
  2064be:	cc                   	int3   
  2064bf:	cc                   	int3   

00000000002064c0 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h6e8530f8c2c6f51bE>:
        impl const From<$Small> for $Large {
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline]
            fn from(small: $Small) -> Self {
  2064c0:	48 83 ec 02          	sub    $0x2,%rsp
  2064c4:	66 89 f8             	mov    %di,%ax
  2064c7:	66 89 04 24          	mov    %ax,(%rsp)
                small as Self
  2064cb:	0f b7 c0             	movzwl %ax,%eax
            }
  2064ce:	48 83 c4 02          	add    $0x2,%rsp
  2064d2:	c3                   	retq   
  2064d3:	cc                   	int3   
  2064d4:	cc                   	int3   
  2064d5:	cc                   	int3   
  2064d6:	cc                   	int3   
  2064d7:	cc                   	int3   
  2064d8:	cc                   	int3   
  2064d9:	cc                   	int3   
  2064da:	cc                   	int3   
  2064db:	cc                   	int3   
  2064dc:	cc                   	int3   
  2064dd:	cc                   	int3   
  2064de:	cc                   	int3   
  2064df:	cc                   	int3   

00000000002064e0 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE>:
}

impl UART {
    // set UART in loopback mode and check if same data written is read
    // as it is, if not, the chip is faulty.
    fn chip_works_fine(port_4: &Port, port_0: &Port) -> bool {
  2064e0:	48 83 ec 38          	sub    $0x38,%rsp
  2064e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2064e9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2064ee:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2064f3:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        port_4.write_u8(X86_COM_PORT_LOOPBACK_MODE);
  2064f8:	be 1b 00 00 00       	mov    $0x1b,%esi
  2064fd:	e8 ae 12 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  206502:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // write some dummy byte
        port_0.write_u8(0xaf);
  206507:	be af 00 00 00       	mov    $0xaf,%esi
  20650c:	e8 9f 12 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  206511:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // try reading the same byte:
        match port_0.read_u8() {
  206516:	e8 75 12 01 00       	callq  217790 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>
  20651b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20651f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206523:	3c af                	cmp    $0xaf,%al
  206525:	75 11                	jne    206538 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x58>
  206527:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            0xaf => {
                // set chip in normal mode
                port_4.write_u8(0x0f);
  20652c:	be 0f 00 00 00       	mov    $0xf,%esi
  206531:	e8 7a 12 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  206536:	eb 13                	jmp    20654b <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x6b>
                return true;
            }
            _ => return false,
  206538:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
        }
    }
  20653d:	8a 44 24 27          	mov    0x27(%rsp),%al
  206541:	24 01                	and    $0x1,%al
  206543:	0f b6 c0             	movzbl %al,%eax
  206546:	48 83 c4 38          	add    $0x38,%rsp
  20654a:	c3                   	retq   
                return true;
  20654b:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  206550:	eb eb                	jmp    20653d <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE+0x5d>
  206552:	cc                   	int3   
  206553:	cc                   	int3   
  206554:	cc                   	int3   
  206555:	cc                   	int3   
  206556:	cc                   	int3   
  206557:	cc                   	int3   
  206558:	cc                   	int3   
  206559:	cc                   	int3   
  20655a:	cc                   	int3   
  20655b:	cc                   	int3   
  20655c:	cc                   	int3   
  20655d:	cc                   	int3   
  20655e:	cc                   	int3   
  20655f:	cc                   	int3   

0000000000206560 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E>:

    pub fn new() -> Option<Self> {
  206560:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  206567:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20656c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206571:	bf f8 03 00 00       	mov    $0x3f8,%edi
  206576:	31 f6                	xor    %esi,%esi
        // configuration
        let port_0 = Port::new(X86_COM_PORT, false);
  206578:	e8 e3 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  20657d:	88 54 24 30          	mov    %dl,0x30(%rsp)
  206581:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206586:	bf f9 03 00 00       	mov    $0x3f9,%edi
  20658b:	31 f6                	xor    %esi,%esi
        let port_1 = Port::new(X86_COM_PORT + 1, false);
  20658d:	e8 ce 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  206592:	88 54 24 40          	mov    %dl,0x40(%rsp)
  206596:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20659b:	bf fa 03 00 00       	mov    $0x3fa,%edi
  2065a0:	31 f6                	xor    %esi,%esi
        let port_2 = Port::new(X86_COM_PORT + 2, false);
  2065a2:	e8 b9 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  2065a7:	88 54 24 50          	mov    %dl,0x50(%rsp)
  2065ab:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2065b0:	bf fb 03 00 00       	mov    $0x3fb,%edi
  2065b5:	31 f6                	xor    %esi,%esi
        let port_3 = Port::new(X86_COM_PORT + 3, false);
  2065b7:	e8 a4 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  2065bc:	88 54 24 60          	mov    %dl,0x60(%rsp)
  2065c0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2065c5:	bf fc 03 00 00       	mov    $0x3fc,%edi
  2065ca:	31 f6                	xor    %esi,%esi
        let port_4 = Port::new(X86_COM_PORT + 4, false);
  2065cc:	e8 8f 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  2065d1:	88 54 24 70          	mov    %dl,0x70(%rsp)
  2065d5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)

        // read only port.
        let port_5 = Port::new(X86_COM_PORT + 5, true);
  2065da:	bf fd 03 00 00       	mov    $0x3fd,%edi
  2065df:	be 01 00 00 00       	mov    $0x1,%esi
  2065e4:	e8 77 11 01 00       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  2065e9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2065ee:	88 54 24 17          	mov    %dl,0x17(%rsp)
  2065f2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2065f9:	00 
  2065fa:	80 e2 01             	and    $0x1,%dl
  2065fd:	88 94 24 a0 00 00 00 	mov    %dl,0xa0(%rsp)

        port_1.write_u8(0x00);
  206604:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206609:	31 f6                	xor    %esi,%esi
  20660b:	e8 a0 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_3.write_u8(0x80);
  206610:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  206615:	be 80 00 00 00       	mov    $0x80,%esi
  20661a:	e8 91 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_0.write_u8(0x03);
  20661f:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  206624:	be 03 00 00 00       	mov    $0x3,%esi
  206629:	e8 82 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_1.write_u8(0x00);
  20662e:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206633:	31 f6                	xor    %esi,%esi
  206635:	e8 76 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_3.write_u8(0x03);
  20663a:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20663f:	be 03 00 00 00       	mov    $0x3,%esi
  206644:	e8 67 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_2.write_u8(0xC7);
  206649:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20664e:	be c7 00 00 00       	mov    $0xc7,%esi
  206653:	e8 58 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        port_4.write_u8(0x0B);
  206658:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20665d:	be 0b 00 00 00       	mov    $0xb,%esi
  206662:	e8 49 11 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>

        // check for faulty chip:
        if !UART::chip_works_fine(&port_4, &port_0) {
  206667:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20666c:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  206671:	e8 6a fe ff ff       	callq  2064e0 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h1635cc20379f432aE>
  206676:	88 44 24 07          	mov    %al,0x7(%rsp)
  20667a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20667e:	34 ff                	xor    $0xff,%al
  206680:	a8 01                	test   $0x1,%al
  206682:	75 69                	jne    2066ed <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E+0x18d>
  206684:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206689:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  20668d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            return None;
        }

        // return the UART instance:
        Some(UART {
            port_0: port_0,
  206692:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  206697:	40 8a 74 24 30       	mov    0x30(%rsp),%sil
        Some(UART {
  20669c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  2066a1:	40 80 e6 01          	and    $0x1,%sil
  2066a5:	40 88 b4 24 80 00 00 	mov    %sil,0x80(%rsp)
  2066ac:	00 
  2066ad:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2066b4:	00 
  2066b5:	80 e1 01             	and    $0x1,%cl
  2066b8:	88 8c 24 90 00 00 00 	mov    %cl,0x90(%rsp)
  2066bf:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2066c4:	48 89 08             	mov    %rcx,(%rax)
  2066c7:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2066ce:	00 
  2066cf:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2066d3:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2066da:	00 
  2066db:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2066df:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2066e6:	00 
  2066e7:	48 89 48 18          	mov    %rcx,0x18(%rax)
            port_5: port_5,
        })
    }
  2066eb:	eb 09                	jmp    2066f6 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E+0x196>
  2066ed:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            return None;
  2066f2:	c6 40 08 02          	movb   $0x2,0x8(%rax)
  2066f6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  2066fb:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  206702:	c3                   	retq   
  206703:	cc                   	int3   
  206704:	cc                   	int3   
  206705:	cc                   	int3   
  206706:	cc                   	int3   
  206707:	cc                   	int3   
  206708:	cc                   	int3   
  206709:	cc                   	int3   
  20670a:	cc                   	int3   
  20670b:	cc                   	int3   
  20670c:	cc                   	int3   
  20670d:	cc                   	int3   
  20670e:	cc                   	int3   
  20670f:	cc                   	int3   

0000000000206710 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17ha7bcda3ea9842aa9E>:

    #[inline]
    pub fn transit_empty(&self) -> bool {
  206710:	48 83 ec 18          	sub    $0x18,%rsp
  206714:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.port_5.read_u8() & X86_COM_PORT_EMPTY_FLAG != 0
  206719:	48 83 c7 10          	add    $0x10,%rdi
  20671d:	e8 6e 10 01 00       	callq  217790 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>
  206722:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206726:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20672a:	24 20                	and    $0x20,%al
  20672c:	3c 00                	cmp    $0x0,%al
  20672e:	0f 95 c0             	setne  %al
    }
  206731:	24 01                	and    $0x1,%al
  206733:	0f b6 c0             	movzbl %al,%eax
  206736:	48 83 c4 18          	add    $0x18,%rsp
  20673a:	c3                   	retq   
  20673b:	cc                   	int3   
  20673c:	cc                   	int3   
  20673d:	cc                   	int3   
  20673e:	cc                   	int3   
  20673f:	cc                   	int3   

0000000000206740 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>:
    pub fn read_u8(&self) -> u8 {
        while !self.transit_received() {}
        self.port_0.read_u8()
    }

    pub fn write_u8(&self, value: u8) {
  206740:	48 83 ec 28          	sub    $0x28,%rsp
  206744:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206749:	40 88 f0             	mov    %sil,%al
  20674c:	88 44 24 17          	mov    %al,0x17(%rsp)
  206750:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  206755:	88 44 24 27          	mov    %al,0x27(%rsp)
  206759:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.transit_empty() {}
  20675e:	e8 ad ff ff ff       	callq  206710 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17ha7bcda3ea9842aa9E>
  206763:	88 44 24 07          	mov    %al,0x7(%rsp)
  206767:	8a 44 24 07          	mov    0x7(%rsp),%al
  20676b:	34 ff                	xor    $0xff,%al
  20676d:	a8 01                	test   $0x1,%al
  20676f:	75 e8                	jne    206759 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E+0x19>
  206771:	8a 44 24 17          	mov    0x17(%rsp),%al
  206775:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.port_0.write_u8(value);
  20677a:	0f b6 f0             	movzbl %al,%esi
  20677d:	e8 2e 10 01 00       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  206782:	48 83 c4 28          	add    $0x28,%rsp
  206786:	c3                   	retq   
  206787:	cc                   	int3   
  206788:	cc                   	int3   
  206789:	cc                   	int3   
  20678a:	cc                   	int3   
  20678b:	cc                   	int3   
  20678c:	cc                   	int3   
  20678d:	cc                   	int3   
  20678e:	cc                   	int3   
  20678f:	cc                   	int3   

0000000000206790 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE>:
            buffer[index] = self.read_u8();
        }
    }

    #[inline]
    fn is_writable_char(&self, char: &u8) -> bool {
  206790:	48 83 ec 20          	sub    $0x20,%rsp
  206794:	48 89 34 24          	mov    %rsi,(%rsp)
  206798:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20679d:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        return *char >= 0x20 && *char <= 0x7e;
  2067a2:	80 3e 20             	cmpb   $0x20,(%rsi)
  2067a5:	73 07                	jae    2067ae <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE+0x1e>
  2067a7:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  2067ac:	eb 10                	jmp    2067be <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE+0x2e>
  2067ae:	48 8b 04 24          	mov    (%rsp),%rax
  2067b2:	80 38 7e             	cmpb   $0x7e,(%rax)
  2067b5:	0f 96 c0             	setbe  %al
  2067b8:	24 01                	and    $0x1,%al
  2067ba:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  2067be:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2067c2:	24 01                	and    $0x1,%al
  2067c4:	0f b6 c0             	movzbl %al,%eax
  2067c7:	48 83 c4 20          	add    $0x20,%rsp
  2067cb:	c3                   	retq   
  2067cc:	cc                   	int3   
  2067cd:	cc                   	int3   
  2067ce:	cc                   	int3   
  2067cf:	cc                   	int3   

00000000002067d0 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE>:

    pub fn write_safe_string(&self, string: &str) {
  2067d0:	48 83 ec 78          	sub    $0x78,%rsp
  2067d4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2067d9:	48 89 f0             	mov    %rsi,%rax
  2067dc:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2067e1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2067e6:	48 89 f8             	mov    %rdi,%rax
  2067e9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2067ee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2067f3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2067f8:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  2067fd:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
        for char in string.bytes() {
  206802:	e8 89 8d 00 00       	callq  20f590 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h43a7e9e40985a180E>
  206807:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20680c:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  206811:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  206816:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20681b:	e8 b0 a4 02 00       	callq  230cd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>
  206820:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206825:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20682a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20682f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  206834:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  206839:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20683e:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  206843:	e8 b8 3c 00 00       	callq  20a500 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdbc274460ee4dd34E>
  206848:	88 54 24 51          	mov    %dl,0x51(%rsp)
  20684c:	88 44 24 50          	mov    %al,0x50(%rsp)
  206850:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  206855:	a8 01                	test   $0x1,%al
  206857:	74 06                	je     20685f <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x8f>
  206859:	eb 00                	jmp    20685b <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x8b>
  20685b:	eb 07                	jmp    206864 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x94>
  20685d:	0f 0b                	ud2    
            } else {
                // invalid char byte
                self.write_u8(COM_INVALID_CHAR_BYTE);
            }
        }
    }
  20685f:	48 83 c4 78          	add    $0x78,%rsp
  206863:	c3                   	retq   
        for char in string.bytes() {
  206864:	8a 44 24 51          	mov    0x51(%rsp),%al
  206868:	88 44 24 76          	mov    %al,0x76(%rsp)
  20686c:	88 44 24 77          	mov    %al,0x77(%rsp)
  206870:	88 44 24 57          	mov    %al,0x57(%rsp)
            if char == b'\n' {
  206874:	80 7c 24 57 0a       	cmpb   $0xa,0x57(%rsp)
  206879:	75 11                	jne    20688c <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xbc>
  20687b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\r');
  206880:	be 0d 00 00 00       	mov    $0xd,%esi
  206885:	e8 b6 fe ff ff       	callq  206740 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  20688a:	eb 42                	jmp    2068ce <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xfe>
  20688c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            } else if self.is_writable_char(&char) {
  206891:	48 8d 74 24 57       	lea    0x57(%rsp),%rsi
  206896:	e8 f5 fe ff ff       	callq  206790 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17h28ffd4aa66bb24ccE>
  20689b:	88 44 24 07          	mov    %al,0x7(%rsp)
  20689f:	8a 44 24 07          	mov    0x7(%rsp),%al
  2068a3:	a8 01                	test   $0x1,%al
  2068a5:	75 13                	jne    2068ba <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xea>
  2068a7:	eb 00                	jmp    2068a9 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0xd9>
  2068a9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(COM_INVALID_CHAR_BYTE);
  2068ae:	be 3f 00 00 00       	mov    $0x3f,%esi
  2068b3:	e8 88 fe ff ff       	callq  206740 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  2068b8:	eb 84                	jmp    20683e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  2068ba:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(char);
  2068bf:	0f b6 74 24 57       	movzbl 0x57(%rsp),%esi
  2068c4:	e8 77 fe ff ff       	callq  206740 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  2068c9:	e9 70 ff ff ff       	jmpq   20683e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  2068ce:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\n');
  2068d3:	be 0a 00 00 00       	mov    $0xa,%esi
  2068d8:	e8 63 fe ff ff       	callq  206740 <_ZN9r3_kernel7drivers4uart4UART8write_u817h3d1582a24c091e55E>
  2068dd:	e9 5c ff ff ff       	jmpq   20683e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE+0x6e>
  2068e2:	cc                   	int3   
  2068e3:	cc                   	int3   
  2068e4:	cc                   	int3   
  2068e5:	cc                   	int3   
  2068e6:	cc                   	int3   
  2068e7:	cc                   	int3   
  2068e8:	cc                   	int3   
  2068e9:	cc                   	int3   
  2068ea:	cc                   	int3   
  2068eb:	cc                   	int3   
  2068ec:	cc                   	int3   
  2068ed:	cc                   	int3   
  2068ee:	cc                   	int3   
  2068ef:	cc                   	int3   

00000000002068f0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>:
}

impl fmt::Write for UART {
    fn write_str(&mut self, string: &str) -> fmt::Result {
  2068f0:	48 83 ec 28          	sub    $0x28,%rsp
  2068f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2068f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2068fe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write_safe_string(string);
  206903:	e8 c8 fe ff ff       	callq  2067d0 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17hbd620fd44f283e0eE>
        return Ok(());
  206908:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  20690d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206911:	24 01                	and    $0x1,%al
  206913:	0f b6 c0             	movzbl %al,%eax
  206916:	48 83 c4 28          	add    $0x28,%rsp
  20691a:	c3                   	retq   
  20691b:	cc                   	int3   
  20691c:	cc                   	int3   
  20691d:	cc                   	int3   
  20691e:	cc                   	int3   
  20691f:	cc                   	int3   

0000000000206920 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE>:
}

fn init_uart() -> Option<Mutex<UART>> {
  206920:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  206927:	48 89 3c 24          	mov    %rdi,(%rsp)
  20692b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if let Some(uart) = UART::new() {
  206930:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  206935:	e8 26 fc ff ff       	callq  206560 <_ZN9r3_kernel7drivers4uart4UART3new17h37304e54c6130f33E>
  20693a:	8a 54 24 18          	mov    0x18(%rsp),%dl
  20693e:	80 ea 02             	sub    $0x2,%dl
  206941:	b8 01 00 00 00       	mov    $0x1,%eax
  206946:	31 c9                	xor    %ecx,%ecx
  206948:	80 fa 00             	cmp    $0x0,%dl
  20694b:	48 0f 44 c1          	cmove  %rcx,%rax
  20694f:	48 83 f8 01          	cmp    $0x1,%rax
  206953:	75 6a                	jne    2069bf <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0x9f>
  206955:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20695a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20695f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206964:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206969:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20696e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  206973:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206978:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        return Some(Mutex::new(uart));
  20697d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206982:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  206987:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20698c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  206993:	00 
  206994:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  206999:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2069a0:	00 
  2069a1:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2069a6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2069ad:	00 
  2069ae:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2069b3:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  2069b8:	e8 03 56 02 00       	callq  22bfc0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hba9b1c03bd7af26fE>
  2069bd:	eb 18                	jmp    2069d7 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0xb7>
  2069bf:	48 8b 04 24          	mov    (%rsp),%rax
    }
    None
  2069c3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2069ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2069cf:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2069d6:	c3                   	retq   
  2069d7:	48 8b 3c 24          	mov    (%rsp),%rdi
        return Some(Mutex::new(uart));
  2069db:	48 83 c7 08          	add    $0x8,%rdi
  2069df:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  2069e4:	ba 28 00 00 00       	mov    $0x28,%edx
  2069e9:	e8 72 fb 02 00       	callq  236560 <memcpy>
  2069ee:	48 8b 04 24          	mov    (%rsp),%rax
  2069f2:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  2069f9:	eb cf                	jmp    2069ca <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE+0xaa>
  2069fb:	cc                   	int3   
  2069fc:	cc                   	int3   
  2069fd:	cc                   	int3   
  2069fe:	cc                   	int3   
  2069ff:	cc                   	int3   

0000000000206a00 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>:
        lazy_static!($($t)*);
    };
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
  206a00:	48 83 ec 18          	sub    $0x18,%rsp
  206a04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206a09:	48 8d 05 a0 57 03 00 	lea    0x357a0(%rip),%rax        # 23c1b0 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha6c567e751ae2da6E>
  206a10:	48 89 44 24 10       	mov    %rax,0x10(%rsp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
  206a15:	48 8d 3d 94 57 03 00 	lea    0x35794(%rip),%rdi        # 23c1b0 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17ha6c567e751ae2da6E>
  206a1c:	e8 5f 26 00 00       	callq  209080 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE>
  206a21:	48 89 04 24          	mov    %rax,(%rsp)
  206a25:	48 8b 04 24          	mov    (%rsp),%rax
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
  206a29:	48 83 c4 18          	add    $0x18,%rsp
  206a2d:	c3                   	retq   
  206a2e:	cc                   	int3   
  206a2f:	cc                   	int3   

0000000000206a30 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>:
// This function is outside `RawVec` to minimize compile times. See the comment
// above `RawVec::grow_amortized` for details. (The `A` parameter isn't
// significant, because the number of different `A` types seen in practice is
// much smaller than the number of `T` types.)
#[inline(never)]
fn finish_grow<A>(
  206a30:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  206a37:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  206a3c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  206a41:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  206a46:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  206a4b:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  206a52:	00 
  206a53:	48 89 94 24 d8 00 00 	mov    %rdx,0xd8(%rsp)
  206a5a:	00 
  206a5b:	4c 89 84 24 e0 00 00 	mov    %r8,0xe0(%rsp)
  206a62:	00 
) -> Result<NonNull<[u8]>, TryReserveError>
where
    A: Allocator,
{
    // Check for the error here to minimize the size of `RawVec::grow_*`.
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  206a63:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  206a68:	e8 93 44 00 00       	callq  20af00 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE>
  206a6d:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  206a72:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  206a77:	e8 34 49 00 00       	callq  20b3b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E>
  206a7c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206a81:	48 85 c0             	test   %rax,%rax
  206a84:	74 06                	je     206a8c <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x5c>
  206a86:	eb 00                	jmp    206a88 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x58>
  206a88:	eb 37                	jmp    206ac1 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x91>
  206a8a:	0f 0b                	ud2    
  206a8c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  206a91:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  206a96:	48 89 8c 24 00 01 00 	mov    %rcx,0x100(%rsp)
  206a9d:	00 
  206a9e:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  206aa5:	00 
  206aa6:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  206aab:	48 89 44 24 40       	mov    %rax,0x40(%rsp)

    alloc_guard(new_layout.size())?;
  206ab0:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206ab5:	e8 96 39 01 00       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  206aba:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206abf:	eb 28                	jmp    206ae9 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb9>
  206ac1:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  206ac6:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  206acb:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  206ad0:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  206ad7:	00 
  206ad8:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
  206adf:	00 
  206ae0:	e8 3b 3b 00 00       	callq  20a620 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h6bce559bf06336b0E>
#![no_std] // don't link the Rust standard library
  206ae5:	eb 00                	jmp    206ae7 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb7>
    } else {
        alloc.allocate(new_layout)
    };

    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
}
  206ae7:	eb 7c                	jmp    206b65 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x135>
  206ae9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    alloc_guard(new_layout.size())?;
  206aee:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  206af5:	00 
  206af6:	e8 25 f4 00 00       	callq  215f20 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E>
  206afb:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  206b00:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  206b07:	00 
  206b08:	e8 63 46 00 00       	callq  20b170 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E>
  206b0d:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  206b12:	48 85 c0             	test   %rax,%rax
  206b15:	74 06                	je     206b1d <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xed>
  206b17:	eb 00                	jmp    206b19 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xe9>
  206b19:	eb 1e                	jmp    206b39 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x109>
  206b1b:	0f 0b                	ud2    
  206b1d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    let memory = if let Some((ptr, old_layout)) = current_memory {
  206b22:	b8 01 00 00 00       	mov    $0x1,%eax
  206b27:	31 c9                	xor    %ecx,%ecx
  206b29:	48 83 3a 00          	cmpq   $0x0,(%rdx)
  206b2d:	48 0f 44 c1          	cmove  %rcx,%rax
  206b31:	48 83 f8 01          	cmp    $0x1,%rax
  206b35:	74 3b                	je     206b72 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x142>
  206b37:	eb 75                	jmp    206bae <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x17e>
  206b39:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    alloc_guard(new_layout.size())?;
  206b3e:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  206b45:	00 
  206b46:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  206b4d:	00 
  206b4e:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  206b55:	00 
  206b56:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  206b5d:	00 
  206b5e:	e8 4d 3a 00 00       	callq  20a5b0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h49782eb3ee2624a2E>
  206b63:	eb 82                	jmp    206ae7 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0xb7>
  206b65:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
}
  206b6a:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  206b71:	c3                   	retq   
  206b72:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    let memory = if let Some((ptr, old_layout)) = current_memory {
  206b77:	48 8b 08             	mov    (%rax),%rcx
  206b7a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  206b7f:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  206b86:	00 
  206b87:	48 8b 48 08          	mov    0x8(%rax),%rcx
  206b8b:	48 8b 40 10          	mov    0x10(%rax),%rax
  206b8f:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  206b96:	00 
  206b97:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  206b9e:	00 
            intrinsics::assume(old_layout.align() == new_layout.align());
  206b9f:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  206ba6:	00 
  206ba7:	e8 b4 38 01 00       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  206bac:	eb 57                	jmp    206c05 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1d5>
  206bae:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        alloc.allocate(new_layout)
  206bb3:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  206bb8:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  206bbd:	e8 6e 88 01 00       	callq  21f430 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h02f8801b0183b761E>
  206bc2:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  206bc9:	00 
  206bca:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  206bd1:	00 
    let memory = if let Some((ptr, old_layout)) = current_memory {
  206bd2:	eb 00                	jmp    206bd4 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1a4>
  206bd4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
  206bd9:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  206be0:	00 
  206be1:	48 8b 94 24 b0 00 00 	mov    0xb0(%rsp),%rdx
  206be8:	00 
  206be9:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  206bee:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  206bf5:	00 
  206bf6:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  206bfd:	00 
  206bfe:	e8 ad 43 00 00       	callq  20afb0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E>
  206c03:	eb 45                	jmp    206c4a <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x21a>
            intrinsics::assume(old_layout.align() == new_layout.align());
  206c05:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  206c0a:	e8 51 38 01 00       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  206c0f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  206c14:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            alloc.grow(ptr, old_layout, new_layout)
  206c19:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  206c20:	00 
  206c21:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  206c28:	00 
  206c29:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  206c2e:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
  206c33:	e8 a8 87 01 00       	callq  21f3e0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf6a7d38fd3e79973E>
  206c38:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  206c3f:	00 
  206c40:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  206c47:	00 
    let memory = if let Some((ptr, old_layout)) = current_memory {
  206c48:	eb 8a                	jmp    206bd4 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x1a4>
}
  206c4a:	e9 16 ff ff ff       	jmpq   206b65 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE+0x135>
  206c4f:	cc                   	int3   

0000000000206c50 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h86893349264546edE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
  206c50:	48 83 ec 38          	sub    $0x38,%rsp
  206c54:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  206c59:	48 8b 0f             	mov    (%rdi),%rcx
  206c5c:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206c60:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  206c65:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206c6a:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  206c6f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  206c74:	e8 d7 34 01 00       	callq  21a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  206c79:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206c7e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  206c83:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  206c88:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206c8d:	48 83 c4 38          	add    $0x38,%rsp
  206c91:	c3                   	retq   
  206c92:	cc                   	int3   
  206c93:	cc                   	int3   
  206c94:	cc                   	int3   
  206c95:	cc                   	int3   
  206c96:	cc                   	int3   
  206c97:	cc                   	int3   
  206c98:	cc                   	int3   
  206c99:	cc                   	int3   
  206c9a:	cc                   	int3   
  206c9b:	cc                   	int3   
  206c9c:	cc                   	int3   
  206c9d:	cc                   	int3   
  206c9e:	cc                   	int3   
  206c9f:	cc                   	int3   

0000000000206ca0 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hf886e098f4878047E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
  206ca0:	48 83 ec 20          	sub    $0x20,%rsp
  206ca4:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  206cab:	00 00 
  206cad:	48 8b 04 24          	mov    (%rsp),%rax
  206cb1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206cb6:	48 83 c4 20          	add    $0x20,%rsp
  206cba:	c3                   	retq   
  206cbb:	cc                   	int3   
  206cbc:	cc                   	int3   
  206cbd:	cc                   	int3   
  206cbe:	cc                   	int3   
  206cbf:	cc                   	int3   

0000000000206cc0 <_ZN5alloc7raw_vec14handle_reserve28_$u7b$$u7b$closure$u7d$$u7d$17h1efb542338459167E>:

// Central function for reserve error handling.
#[cfg(not(no_global_oom_handling))]
#[inline]
fn handle_reserve(result: Result<(), TryReserveError>) {
    match result.map_err(|e| e.kind()) {
  206cc0:	48 83 ec 28          	sub    $0x28,%rsp
  206cc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206cc9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206cce:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  206cd3:	e8 08 5f 01 00       	callq  21cbe0 <_ZN5alloc11collections15TryReserveError4kind17h258eb8c8c0660a86E>
  206cd8:	48 89 04 24          	mov    %rax,(%rsp)
  206cdc:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  206ce1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206ce6:	48 8b 04 24          	mov    (%rsp),%rax
  206cea:	48 83 c4 28          	add    $0x28,%rsp
  206cee:	c3                   	retq   
  206cef:	cc                   	int3   

0000000000206cf0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h5ef58445af2f1ffdE>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  206cf0:	48 83 ec 58          	sub    $0x58,%rsp
  206cf4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  206cf9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206cfe:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206d03:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  206d08:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  206d0d:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  206d12:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206d16:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  206d1b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206d20:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206d25:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  206d2a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206d2f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206d34:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn wrapping_sub(self, rhs: Self) -> Self {
            intrinsics::wrapping_sub(self, rhs)
  206d39:	48 29 c8             	sub    %rcx,%rax
  206d3c:	48 89 04 24          	mov    %rax,(%rsp)
  206d40:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206d45:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  206d49:	48 39 c8             	cmp    %rcx,%rax
  206d4c:	0f 97 c0             	seta   %al
    }
  206d4f:	24 01                	and    $0x1,%al
  206d51:	0f b6 c0             	movzbl %al,%eax
  206d54:	48 83 c4 58          	add    $0x58,%rsp
  206d58:	c3                   	retq   
  206d59:	cc                   	int3   
  206d5a:	cc                   	int3   
  206d5b:	cc                   	int3   
  206d5c:	cc                   	int3   
  206d5d:	cc                   	int3   
  206d5e:	cc                   	int3   
  206d5f:	cc                   	int3   

0000000000206d60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h6c9536dd384d8cd6E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  206d60:	48 83 ec 58          	sub    $0x58,%rsp
  206d64:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  206d69:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206d6e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206d73:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  206d78:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  206d7d:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  206d82:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206d86:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  206d8b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206d90:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206d95:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  206d9a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206d9f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206da4:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  206da9:	48 29 c8             	sub    %rcx,%rax
  206dac:	48 89 04 24          	mov    %rax,(%rsp)
  206db0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206db5:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  206db9:	48 39 c8             	cmp    %rcx,%rax
  206dbc:	0f 97 c0             	seta   %al
    }
  206dbf:	24 01                	and    $0x1,%al
  206dc1:	0f b6 c0             	movzbl %al,%eax
  206dc4:	48 83 c4 58          	add    $0x58,%rsp
  206dc8:	c3                   	retq   
  206dc9:	cc                   	int3   
  206dca:	cc                   	int3   
  206dcb:	cc                   	int3   
  206dcc:	cc                   	int3   
  206dcd:	cc                   	int3   
  206dce:	cc                   	int3   
  206dcf:	cc                   	int3   

0000000000206dd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17he7f2300bb740c949E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  206dd0:	48 83 ec 58          	sub    $0x58,%rsp
  206dd4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  206dd9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206dde:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206de3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  206de8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  206ded:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  206df2:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206df6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  206dfb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206e00:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206e05:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  206e0a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206e0f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206e14:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  206e19:	48 29 c8             	sub    %rcx,%rax
  206e1c:	48 89 04 24          	mov    %rax,(%rsp)
  206e20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206e25:	48 8b 0c 24          	mov    (%rsp),%rcx
        additional > self.capacity().wrapping_sub(len)
  206e29:	48 39 c8             	cmp    %rcx,%rax
  206e2c:	0f 97 c0             	seta   %al
    }
  206e2f:	24 01                	and    $0x1,%al
  206e31:	0f b6 c0             	movzbl %al,%eax
  206e34:	48 83 c4 58          	add    $0x58,%rsp
  206e38:	c3                   	retq   
  206e39:	cc                   	int3   
  206e3a:	cc                   	int3   
  206e3b:	cc                   	int3   
  206e3c:	cc                   	int3   
  206e3d:	cc                   	int3   
  206e3e:	cc                   	int3   
  206e3f:	cc                   	int3   

0000000000206e40 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  206e40:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  206e47:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  206e4c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  206e51:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  206e56:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  206e5b:	b8 20 00 00 00       	mov    $0x20,%eax
  206e60:	48 83 f8 00          	cmp    $0x0,%rax
  206e64:	75 07                	jne    206e6d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x2d>
  206e66:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  206e6b:	eb 13                	jmp    206e80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x40>
  206e6d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206e72:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  206e77:	0f 94 c0             	sete   %al
  206e7a:	24 01                	and    $0x1,%al
  206e7c:	88 44 24 47          	mov    %al,0x47(%rsp)
  206e80:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  206e85:	75 0b                	jne    206e92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x52>
                let align = mem::align_of::<T>();
  206e87:	48 c7 44 24 68 04 00 	movq   $0x4,0x68(%rsp)
  206e8e:	00 00 
  206e90:	eb 19                	jmp    206eab <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x6b>
  206e92:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  206e97:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  206e9e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  206ea3:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  206eaa:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  206eab:	eb 00                	jmp    206ead <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x6d>
  206ead:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206eb2:	48 8b 78 08          	mov    0x8(%rax),%rdi
  206eb6:	48 c1 e7 05          	shl    $0x5,%rdi
  206eba:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  206ebf:	be 04 00 00 00       	mov    $0x4,%esi
  206ec4:	e8 37 35 01 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  206ec9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206ece:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  206ed3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  206ed8:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  206edf:	00 
  206ee0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  206ee5:	48 8b 38             	mov    (%rax),%rdi
  206ee8:	e8 93 0a 01 00       	callq  217980 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h2891587fd6e47c2cE>
  206eed:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  206ef2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206ef7:	e8 54 0b 01 00       	callq  217a50 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  206efc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206f01:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  206f06:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  206f0b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  206f10:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  206f15:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  206f1a:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  206f1f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  206f24:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  206f29:	48 89 08             	mov    %rcx,(%rax)
  206f2c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  206f31:	48 89 48 08          	mov    %rcx,0x8(%rax)
  206f35:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  206f3a:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  206f3e:	e9 5b ff ff ff       	jmpq   206e9e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E+0x5e>
  206f43:	cc                   	int3   
  206f44:	cc                   	int3   
  206f45:	cc                   	int3   
  206f46:	cc                   	int3   
  206f47:	cc                   	int3   
  206f48:	cc                   	int3   
  206f49:	cc                   	int3   
  206f4a:	cc                   	int3   
  206f4b:	cc                   	int3   
  206f4c:	cc                   	int3   
  206f4d:	cc                   	int3   
  206f4e:	cc                   	int3   
  206f4f:	cc                   	int3   

0000000000206f50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  206f50:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  206f57:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  206f5c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  206f61:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  206f66:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  206f6b:	b8 08 00 00 00       	mov    $0x8,%eax
  206f70:	48 83 f8 00          	cmp    $0x0,%rax
  206f74:	75 07                	jne    206f7d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x2d>
  206f76:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  206f7b:	eb 13                	jmp    206f90 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x40>
  206f7d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206f82:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  206f87:	0f 94 c0             	sete   %al
  206f8a:	24 01                	and    $0x1,%al
  206f8c:	88 44 24 47          	mov    %al,0x47(%rsp)
  206f90:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  206f95:	75 0b                	jne    206fa2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x52>
                let align = mem::align_of::<T>();
  206f97:	48 c7 44 24 68 08 00 	movq   $0x8,0x68(%rsp)
  206f9e:	00 00 
  206fa0:	eb 19                	jmp    206fbb <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x6b>
  206fa2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  206fa7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  206fae:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  206fb3:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  206fba:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  206fbb:	eb 00                	jmp    206fbd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x6d>
  206fbd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  206fc2:	48 8b 78 08          	mov    0x8(%rax),%rdi
  206fc6:	48 c1 e7 03          	shl    $0x3,%rdi
  206fca:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  206fcf:	be 08 00 00 00       	mov    $0x8,%esi
  206fd4:	e8 27 34 01 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  206fd9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206fde:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  206fe3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  206fe8:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  206fef:	00 
  206ff0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  206ff5:	48 8b 38             	mov    (%rax),%rdi
  206ff8:	e8 e3 09 01 00       	callq  2179e0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hf2b47319a3fe8fdcE>
  206ffd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207002:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  207007:	e8 44 0a 01 00       	callq  217a50 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  20700c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207011:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207016:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20701b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  207020:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207025:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  20702a:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20702f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207034:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  207039:	48 89 08             	mov    %rcx,(%rax)
  20703c:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  207041:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207045:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  20704a:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20704e:	e9 5b ff ff ff       	jmpq   206fae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E+0x5e>
  207053:	cc                   	int3   
  207054:	cc                   	int3   
  207055:	cc                   	int3   
  207056:	cc                   	int3   
  207057:	cc                   	int3   
  207058:	cc                   	int3   
  207059:	cc                   	int3   
  20705a:	cc                   	int3   
  20705b:	cc                   	int3   
  20705c:	cc                   	int3   
  20705d:	cc                   	int3   
  20705e:	cc                   	int3   
  20705f:	cc                   	int3   

0000000000207060 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
  207060:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  207067:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20706c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207071:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  207076:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20707b:	b8 06 00 00 00       	mov    $0x6,%eax
  207080:	48 83 f8 00          	cmp    $0x0,%rax
  207084:	75 07                	jne    20708d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x2d>
  207086:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20708b:	eb 13                	jmp    2070a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x40>
  20708d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207092:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  207097:	0f 94 c0             	sete   %al
  20709a:	24 01                	and    $0x1,%al
  20709c:	88 44 24 47          	mov    %al,0x47(%rsp)
  2070a0:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  2070a5:	75 0b                	jne    2070b2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x52>
                let align = mem::align_of::<T>();
  2070a7:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  2070ae:	00 00 
  2070b0:	eb 19                	jmp    2070cb <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x6b>
  2070b2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            None
  2070b7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2070be:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    }
  2070c3:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2070ca:	c3                   	retq   
                let size = mem::size_of::<T>() * self.cap;
  2070cb:	eb 00                	jmp    2070cd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x6d>
  2070cd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2070d2:	48 6b 78 08 06       	imul   $0x6,0x8(%rax),%rdi
  2070d7:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
                let layout = Layout::from_size_align_unchecked(size, align);
  2070dc:	be 01 00 00 00       	mov    $0x1,%esi
  2070e1:	e8 1a 33 01 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  2070e6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2070eb:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2070f0:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2070f5:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  2070fc:	00 
  2070fd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                Some((self.ptr.cast().into(), layout))
  207102:	48 8b 38             	mov    (%rax),%rdi
  207105:	e8 a6 08 01 00       	callq  2179b0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h4b66210a99f50f58E>
  20710a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20710f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  207114:	e8 37 09 01 00       	callq  217a50 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>
  207119:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20711e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207123:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  207128:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20712d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207132:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  207137:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20713c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  207141:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  207146:	48 89 08             	mov    %rcx,(%rax)
  207149:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  20714e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207152:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  207157:	48 89 48 10          	mov    %rcx,0x10(%rax)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
  20715b:	e9 5e ff ff ff       	jmpq   2070be <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE+0x5e>

0000000000207160 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  207160:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  207167:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20716c:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  207171:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  207176:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20717b:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  207180:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  207187:	00 
  207188:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  20718f:	00 
  207190:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  207197:	00 
        if mem::size_of::<T>() == 0 {
  207198:	b8 08 00 00 00       	mov    $0x8,%eax
  20719d:	48 83 f8 00          	cmp    $0x0,%rax
  2071a1:	75 27                	jne    2071ca <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x6a>
            return Err(CapacityOverflow.into());
  2071a3:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  2071aa:	00 00 
  2071ac:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2071b1:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  2071b6:	e8 95 2f 01 00       	callq  21a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  2071bb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2071c0:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2071c5:	e9 fa 01 00 00       	jmpq   2073c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x264>
  2071ca:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2071cf:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  2071d4:	e8 f7 12 02 00       	callq  2284d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  2071d9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2071de:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2071e3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2071e8:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2071ed:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  2071f4:	00 00 00 00 00 
  2071f9:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  207200:	00 
  207201:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  207208:	00 
  207209:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  207210:	00 
  207211:	e8 0a 87 00 00       	callq  20f920 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  207216:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20721b:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  207222:	00 
  207223:	e8 f8 40 00 00       	callq  20b320 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  207228:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20722d:	48 85 c0             	test   %rax,%rax
  207230:	74 06                	je     207238 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0xd8>
  207232:	eb 00                	jmp    207234 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0xd4>
  207234:	eb 3b                	jmp    207271 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x111>
  207236:	0f 0b                	ud2    
  207238:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20723d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207244:	00 
  207245:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  20724c:	00 
  20724d:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  207254:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  207255:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207259:	48 c1 e7 01          	shl    $0x1,%rdi
  20725d:	e8 ce 15 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207262:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207267:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20726e:	00 
  20726f:	eb 31                	jmp    2072a2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x142>
  207271:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207276:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20727d:	00 
  20727e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  207285:	00 
  207286:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  20728d:	00 
  20728e:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  207295:	00 
  207296:	e8 95 34 00 00       	callq  20a730 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  20729b:	eb 00                	jmp    20729d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x13d>
  20729d:	e9 07 01 00 00       	jmpq   2073a9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  2072a2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  2072a7:	bf 04 00 00 00       	mov    $0x4,%edi
  2072ac:	e8 7f 15 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  2072b1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2072b6:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2072bd:	00 
  2072be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  2072c3:	e8 28 c5 00 00       	callq  2137f0 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E>
  2072c8:	48 89 04 24          	mov    %rax,(%rsp)
  2072cc:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2072d1:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2072d8:	00 
  2072d9:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  2072e0:	00 
  2072e1:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  2072e6:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2072ed:	00 
  2072ee:	e8 5d fc ff ff       	callq  206f50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>
  2072f3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2072f8:	48 8b 34 24          	mov    (%rsp),%rsi
  2072fc:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  207301:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  207308:	00 
  207309:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  207310:	00 
  207311:	e8 1a f7 ff ff       	callq  206a30 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  207316:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20731d:	00 
  20731e:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  207325:	00 
  207326:	e8 15 3f 00 00       	callq  20b240 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  20732b:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207332:	00 
  207333:	48 85 c0             	test   %rax,%rax
  207336:	74 06                	je     20733e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x1de>
  207338:	eb 00                	jmp    20733a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x1da>
  20733a:	eb 3e                	jmp    20737a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x21a>
  20733c:	0f 0b                	ud2    
  20733e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  207343:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  20734a:	00 
  20734b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207352:	00 
  207353:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  20735a:	00 
  20735b:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  207362:	00 
  207363:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  20736a:	00 
  20736b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207372:	00 
        self.set_ptr(ptr);
  207373:	e8 d8 09 00 00       	callq  207d50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h9b9ccef11e164c81E>
  207378:	eb 3c                	jmp    2073b6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x256>
  20737a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  20737f:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207386:	00 
  207387:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  20738e:	00 
  20738f:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  207396:	00 
  207397:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  20739e:	00 
  20739f:	e8 ec 32 00 00       	callq  20a690 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  2073a4:	e9 f4 fe ff ff       	jmpq   20729d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x13d>
  2073a9:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  2073ae:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  2073b5:	c3                   	retq   
  2073b6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  2073bb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  2073c2:	eb e5                	jmp    2073a9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  2073c4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2073c9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2073ce:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  2073d3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  2073d7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2073db:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  2073e2:	eb c5                	jmp    2073a9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE+0x249>
  2073e4:	cc                   	int3   
  2073e5:	cc                   	int3   
  2073e6:	cc                   	int3   
  2073e7:	cc                   	int3   
  2073e8:	cc                   	int3   
  2073e9:	cc                   	int3   
  2073ea:	cc                   	int3   
  2073eb:	cc                   	int3   
  2073ec:	cc                   	int3   
  2073ed:	cc                   	int3   
  2073ee:	cc                   	int3   
  2073ef:	cc                   	int3   

00000000002073f0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  2073f0:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  2073f7:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2073fc:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  207401:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  207406:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20740b:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  207410:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  207417:	00 
  207418:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  20741f:	00 
  207420:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  207427:	00 
        if mem::size_of::<T>() == 0 {
  207428:	b8 20 00 00 00       	mov    $0x20,%eax
  20742d:	48 83 f8 00          	cmp    $0x0,%rax
  207431:	75 27                	jne    20745a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x6a>
            return Err(CapacityOverflow.into());
  207433:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  20743a:	00 00 
  20743c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  207441:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  207446:	e8 05 2d 01 00       	callq  21a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  20744b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207450:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  207455:	e9 fa 01 00 00       	jmpq   207654 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x264>
  20745a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  20745f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207464:	e8 67 10 02 00       	callq  2284d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  207469:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20746e:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207473:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207478:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20747d:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  207484:	00 00 00 00 00 
  207489:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  207490:	00 
  207491:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  207498:	00 
  207499:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2074a0:	00 
  2074a1:	e8 7a 84 00 00       	callq  20f920 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  2074a6:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2074ab:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  2074b2:	00 
  2074b3:	e8 68 3e 00 00       	callq  20b320 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  2074b8:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2074bd:	48 85 c0             	test   %rax,%rax
  2074c0:	74 06                	je     2074c8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0xd8>
  2074c2:	eb 00                	jmp    2074c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0xd4>
  2074c4:	eb 3b                	jmp    207501 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x111>
  2074c6:	0f 0b                	ud2    
  2074c8:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2074cd:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  2074d4:	00 
  2074d5:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  2074dc:	00 
  2074dd:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  2074e4:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  2074e5:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2074e9:	48 c1 e7 01          	shl    $0x1,%rdi
  2074ed:	e8 3e 13 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  2074f2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2074f7:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2074fe:	00 
  2074ff:	eb 31                	jmp    207532 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x142>
  207501:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207506:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20750d:	00 
  20750e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  207515:	00 
  207516:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  20751d:	00 
  20751e:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  207525:	00 
  207526:	e8 05 32 00 00       	callq  20a730 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  20752b:	eb 00                	jmp    20752d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x13d>
  20752d:	e9 07 01 00 00       	jmpq   207639 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207532:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  207537:	bf 04 00 00 00       	mov    $0x4,%edi
  20753c:	e8 ef 12 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207541:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207546:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20754d:	00 
  20754e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  207553:	e8 c8 c3 00 00       	callq  213920 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E>
  207558:	48 89 04 24          	mov    %rax,(%rsp)
  20755c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  207561:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  207568:	00 
  207569:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  207570:	00 
  207571:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207576:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20757d:	00 
  20757e:	e8 bd f8 ff ff       	callq  206e40 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>
  207583:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207588:	48 8b 34 24          	mov    (%rsp),%rsi
  20758c:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  207591:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  207598:	00 
  207599:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  2075a0:	00 
  2075a1:	e8 8a f4 ff ff       	callq  206a30 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  2075a6:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2075ad:	00 
  2075ae:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  2075b5:	00 
  2075b6:	e8 85 3c 00 00       	callq  20b240 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  2075bb:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  2075c2:	00 
  2075c3:	48 85 c0             	test   %rax,%rax
  2075c6:	74 06                	je     2075ce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x1de>
  2075c8:	eb 00                	jmp    2075ca <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x1da>
  2075ca:	eb 3e                	jmp    20760a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x21a>
  2075cc:	0f 0b                	ud2    
  2075ce:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  2075d3:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  2075da:	00 
  2075db:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  2075e2:	00 
  2075e3:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  2075ea:	00 
  2075eb:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  2075f2:	00 
  2075f3:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  2075fa:	00 
  2075fb:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207602:	00 
        self.set_ptr(ptr);
  207603:	e8 a8 06 00 00       	callq  207cb0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h88bff482bda567aeE>
  207608:	eb 3c                	jmp    207646 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x256>
  20760a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  20760f:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  207616:	00 
  207617:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  20761e:	00 
  20761f:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  207626:	00 
  207627:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  20762e:	00 
  20762f:	e8 5c 30 00 00       	callq  20a690 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  207634:	e9 f4 fe ff ff       	jmpq   20752d <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x13d>
  207639:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  20763e:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  207645:	c3                   	retq   
  207646:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  20764b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  207652:	eb e5                	jmp    207639 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207654:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  207659:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20765e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  207663:	48 89 50 08          	mov    %rdx,0x8(%rax)
  207667:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20766b:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  207672:	eb c5                	jmp    207639 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E+0x249>
  207674:	cc                   	int3   
  207675:	cc                   	int3   
  207676:	cc                   	int3   
  207677:	cc                   	int3   
  207678:	cc                   	int3   
  207679:	cc                   	int3   
  20767a:	cc                   	int3   
  20767b:	cc                   	int3   
  20767c:	cc                   	int3   
  20767d:	cc                   	int3   
  20767e:	cc                   	int3   
  20767f:	cc                   	int3   

0000000000207680 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
  207680:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  207687:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20768c:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  207691:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  207696:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20769b:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  2076a0:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  2076a7:	00 
  2076a8:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  2076af:	00 
  2076b0:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  2076b7:	00 
        if mem::size_of::<T>() == 0 {
  2076b8:	b8 06 00 00 00       	mov    $0x6,%eax
  2076bd:	48 83 f8 00          	cmp    $0x0,%rax
  2076c1:	75 27                	jne    2076ea <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x6a>
            return Err(CapacityOverflow.into());
  2076c3:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  2076ca:	00 00 
  2076cc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2076d1:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  2076d6:	e8 75 2a 01 00       	callq  21a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  2076db:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2076e0:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2076e5:	e9 fa 01 00 00       	jmpq   2078e4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x264>
  2076ea:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2076ef:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  2076f4:	e8 d7 0d 02 00       	callq  2284d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>
  2076f9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2076fe:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207703:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207708:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20770d:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  207714:	00 00 00 00 00 
  207719:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  207720:	00 
  207721:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
  207728:	00 
  207729:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  207730:	00 
  207731:	e8 ea 81 00 00       	callq  20f920 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>
  207736:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20773b:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  207742:	00 
  207743:	e8 d8 3b 00 00       	callq  20b320 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>
  207748:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20774d:	48 85 c0             	test   %rax,%rax
  207750:	74 06                	je     207758 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0xd8>
  207752:	eb 00                	jmp    207754 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0xd4>
  207754:	eb 3b                	jmp    207791 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x111>
  207756:	0f 0b                	ud2    
  207758:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20775d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  207764:	00 
  207765:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  20776c:	00 
  20776d:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  207774:	00 
        let cap = cmp::max(self.cap * 2, required_cap);
  207775:	48 8b 78 08          	mov    0x8(%rax),%rdi
  207779:	48 c1 e7 01          	shl    $0x1,%rdi
  20777d:	e8 ae 10 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  207782:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207787:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20778e:	00 
  20778f:	eb 31                	jmp    2077c2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x142>
  207791:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
  207796:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20779d:	00 
  20779e:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  2077a5:	00 
  2077a6:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  2077ad:	00 
  2077ae:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  2077b5:	00 
  2077b6:	e8 75 2f 00 00       	callq  20a730 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>
  2077bb:	eb 00                	jmp    2077bd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x13d>
  2077bd:	e9 07 01 00 00       	jmpq   2078c9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  2077c2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
  2077c7:	bf 04 00 00 00       	mov    $0x4,%edi
  2077cc:	e8 5f 10 02 00       	callq  228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>
  2077d1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2077d6:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2077dd:	00 
  2077de:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let new_layout = Layout::array::<T>(cap);
  2077e3:	e8 68 c2 00 00       	callq  213a50 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE>
  2077e8:	48 89 04 24          	mov    %rax,(%rsp)
  2077ec:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2077f1:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2077f8:	00 
  2077f9:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  207800:	00 
  207801:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  207806:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20780d:	00 
  20780e:	e8 4d f8 ff ff       	callq  207060 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>
  207813:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207818:	48 8b 34 24          	mov    (%rsp),%rsi
  20781c:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  207821:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  207828:	00 
  207829:	48 8d 8c 24 e8 00 00 	lea    0xe8(%rsp),%rcx
  207830:	00 
  207831:	e8 fa f1 ff ff       	callq  206a30 <_ZN5alloc7raw_vec11finish_grow17h1e802e26c11a75aaE>
  207836:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20783d:	00 
  20783e:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  207845:	00 
  207846:	e8 f5 39 00 00       	callq  20b240 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>
  20784b:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  207852:	00 
  207853:	48 85 c0             	test   %rax,%rax
  207856:	74 06                	je     20785e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x1de>
  207858:	eb 00                	jmp    20785a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x1da>
  20785a:	eb 3e                	jmp    20789a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x21a>
  20785c:	0f 0b                	ud2    
  20785e:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  207863:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  20786a:	00 
  20786b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  207872:	00 
  207873:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  20787a:	00 
  20787b:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  207882:	00 
  207883:	48 89 b4 24 78 01 00 	mov    %rsi,0x178(%rsp)
  20788a:	00 
  20788b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  207892:	00 
        self.set_ptr(ptr);
  207893:	e8 78 03 00 00       	callq  207c10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h22022347191ab383E>
  207898:	eb 3c                	jmp    2078d6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x256>
  20789a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
  20789f:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  2078a6:	00 
  2078a7:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  2078ae:	00 
  2078af:	48 89 b4 24 58 01 00 	mov    %rsi,0x158(%rsp)
  2078b6:	00 
  2078b7:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  2078be:	00 
  2078bf:	e8 cc 2d 00 00       	callq  20a690 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>
  2078c4:	e9 f4 fe ff ff       	jmpq   2077bd <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x13d>
  2078c9:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    }
  2078ce:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  2078d5:	c3                   	retq   
  2078d6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        Ok(())
  2078db:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  2078e2:	eb e5                	jmp    2078c9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  2078e4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2078e9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2078ee:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            return Err(CapacityOverflow.into());
  2078f3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  2078f7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2078fb:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  207902:	eb c5                	jmp    2078c9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E+0x249>
  207904:	cc                   	int3   
  207905:	cc                   	int3   
  207906:	cc                   	int3   
  207907:	cc                   	int3   
  207908:	cc                   	int3   
  207909:	cc                   	int3   
  20790a:	cc                   	int3   
  20790b:	cc                   	int3   
  20790c:	cc                   	int3   
  20790d:	cc                   	int3   
  20790e:	cc                   	int3   
  20790f:	cc                   	int3   

0000000000207910 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE>:
    fn capacity_from_bytes(excess: usize) -> usize {
  207910:	48 83 ec 18          	sub    $0x18,%rsp
  207914:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207919:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  20791e:	b8 20 00 00 00       	mov    $0x20,%eax
  207923:	48 83 f8 00          	cmp    $0x0,%rax
  207927:	0f 94 c0             	sete   %al
  20792a:	a8 01                	test   $0x1,%al
  20792c:	75 0e                	jne    20793c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE+0x2c>
  20792e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207933:	48 c1 e8 05          	shr    $0x5,%rax
    }
  207937:	48 83 c4 18          	add    $0x18,%rsp
  20793b:	c3                   	retq   
        excess / mem::size_of::<T>()
  20793c:	48 8d 3d bd 89 ff ff 	lea    -0x7643(%rip),%rdi        # 200300 <str.0>
  207943:	48 8d 15 ae fc 02 00 	lea    0x2fcae(%rip),%rdx        # 2375f8 <memcmp+0x1048>
  20794a:	be 19 00 00 00       	mov    $0x19,%esi
  20794f:	e8 0c bb 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207954:	0f 0b                	ud2    
  207956:	cc                   	int3   
  207957:	cc                   	int3   
  207958:	cc                   	int3   
  207959:	cc                   	int3   
  20795a:	cc                   	int3   
  20795b:	cc                   	int3   
  20795c:	cc                   	int3   
  20795d:	cc                   	int3   
  20795e:	cc                   	int3   
  20795f:	cc                   	int3   

0000000000207960 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E>:
    fn capacity_from_bytes(excess: usize) -> usize {
  207960:	48 83 ec 18          	sub    $0x18,%rsp
  207964:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207969:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  20796e:	b8 06 00 00 00       	mov    $0x6,%eax
  207973:	48 83 f8 00          	cmp    $0x0,%rax
  207977:	0f 94 c0             	sete   %al
  20797a:	a8 01                	test   $0x1,%al
  20797c:	75 14                	jne    207992 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E+0x32>
  20797e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207983:	b9 06 00 00 00       	mov    $0x6,%ecx
  207988:	31 d2                	xor    %edx,%edx
  20798a:	48 f7 f1             	div    %rcx
    }
  20798d:	48 83 c4 18          	add    $0x18,%rsp
  207991:	c3                   	retq   
        excess / mem::size_of::<T>()
  207992:	48 8d 3d 67 89 ff ff 	lea    -0x7699(%rip),%rdi        # 200300 <str.0>
  207999:	48 8d 15 58 fc 02 00 	lea    0x2fc58(%rip),%rdx        # 2375f8 <memcmp+0x1048>
  2079a0:	be 19 00 00 00       	mov    $0x19,%esi
  2079a5:	e8 b6 ba 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2079aa:	0f 0b                	ud2    
  2079ac:	cc                   	int3   
  2079ad:	cc                   	int3   
  2079ae:	cc                   	int3   
  2079af:	cc                   	int3   

00000000002079b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E>:
    fn capacity_from_bytes(excess: usize) -> usize {
  2079b0:	48 83 ec 18          	sub    $0x18,%rsp
  2079b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2079b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        excess / mem::size_of::<T>()
  2079be:	b8 08 00 00 00       	mov    $0x8,%eax
  2079c3:	48 83 f8 00          	cmp    $0x0,%rax
  2079c7:	0f 94 c0             	sete   %al
  2079ca:	a8 01                	test   $0x1,%al
  2079cc:	75 0e                	jne    2079dc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E+0x2c>
  2079ce:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2079d3:	48 c1 e8 03          	shr    $0x3,%rax
    }
  2079d7:	48 83 c4 18          	add    $0x18,%rsp
  2079db:	c3                   	retq   
        excess / mem::size_of::<T>()
  2079dc:	48 8d 3d 1d 89 ff ff 	lea    -0x76e3(%rip),%rdi        # 200300 <str.0>
  2079e3:	48 8d 15 0e fc 02 00 	lea    0x2fc0e(%rip),%rdx        # 2375f8 <memcmp+0x1048>
  2079ea:	be 19 00 00 00       	mov    $0x19,%esi
  2079ef:	e8 6c ba 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2079f4:	0f 0b                	ud2    
  2079f6:	cc                   	int3   
  2079f7:	cc                   	int3   
  2079f8:	cc                   	int3   
  2079f9:	cc                   	int3   
  2079fa:	cc                   	int3   
  2079fb:	cc                   	int3   
  2079fc:	cc                   	int3   
  2079fd:	cc                   	int3   
  2079fe:	cc                   	int3   
  2079ff:	cc                   	int3   

0000000000207a00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>:
    pub fn ptr(&self) -> *mut T {
  207a00:	48 83 ec 18          	sub    $0x18,%rsp
  207a04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207a09:	48 8b 3f             	mov    (%rdi),%rdi
  207a0c:	e8 2f 00 01 00       	callq  217a40 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>
  207a11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207a16:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207a1b:	48 83 c4 18          	add    $0x18,%rsp
  207a1f:	c3                   	retq   

0000000000207a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>:
    pub fn ptr(&self) -> *mut T {
  207a20:	48 83 ec 18          	sub    $0x18,%rsp
  207a24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207a29:	48 8b 3f             	mov    (%rdi),%rdi
  207a2c:	e8 ff ff 00 00       	callq  217a30 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>
  207a31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207a36:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207a3b:	48 83 c4 18          	add    $0x18,%rsp
  207a3f:	c3                   	retq   

0000000000207a40 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h878b30743715fdd5E>:
    pub fn ptr(&self) -> *mut T {
  207a40:	48 83 ec 18          	sub    $0x18,%rsp
  207a44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.ptr.as_ptr()
  207a49:	48 8b 3f             	mov    (%rdi),%rdi
  207a4c:	e8 bf ff 00 00       	callq  217a10 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>
  207a51:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207a56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207a5b:	48 83 c4 18          	add    $0x18,%rsp
  207a5f:	c3                   	retq   

0000000000207a60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207a60:	48 83 ec 38          	sub    $0x38,%rsp
  207a64:	48 89 14 24          	mov    %rdx,(%rsp)
  207a68:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207a6d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207a72:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207a77:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207a7c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207a81:	e8 4a f3 ff ff       	callq  206dd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17he7f2300bb740c949E>
  207a86:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207a8a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207a8e:	a8 01                	test   $0x1,%al
  207a90:	75 07                	jne    207a99 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x39>
  207a92:	eb 00                	jmp    207a94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x34>
    }
  207a94:	48 83 c4 38          	add    $0x38,%rsp
  207a98:	c3                   	retq   
  207a99:	48 8b 14 24          	mov    (%rsp),%rdx
  207a9d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207aa2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  207aa7:	e8 e4 00 00 00       	callq  207b90 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9c721d4c845ce776E>
        if self.needs_to_grow(len, additional) {
  207aac:	eb e6                	jmp    207a94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E+0x34>
  207aae:	cc                   	int3   
  207aaf:	cc                   	int3   

0000000000207ab0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207ab0:	48 83 ec 38          	sub    $0x38,%rsp
  207ab4:	48 89 14 24          	mov    %rdx,(%rsp)
  207ab8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207abd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207ac2:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207ac7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207acc:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207ad1:	e8 8a f2 ff ff       	callq  206d60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h6c9536dd384d8cd6E>
  207ad6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207ada:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207ade:	a8 01                	test   $0x1,%al
  207ae0:	75 07                	jne    207ae9 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x39>
  207ae2:	eb 00                	jmp    207ae4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x34>
    }
  207ae4:	48 83 c4 38          	add    $0x38,%rsp
  207ae8:	c3                   	retq   
  207ae9:	48 8b 14 24          	mov    (%rsp),%rdx
  207aed:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207af2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  207af7:	e8 d4 00 00 00       	callq  207bd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hdfd6a07f45ba3a7cE>
        if self.needs_to_grow(len, additional) {
  207afc:	eb e6                	jmp    207ae4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E+0x34>
  207afe:	cc                   	int3   
  207aff:	cc                   	int3   

0000000000207b00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
  207b00:	48 83 ec 38          	sub    $0x38,%rsp
  207b04:	48 89 14 24          	mov    %rdx,(%rsp)
  207b08:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207b0d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207b12:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207b17:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  207b1c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if self.needs_to_grow(len, additional) {
  207b21:	e8 ca f1 ff ff       	callq  206cf0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h5ef58445af2f1ffdE>
  207b26:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207b2a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207b2e:	a8 01                	test   $0x1,%al
  207b30:	75 07                	jne    207b39 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x39>
  207b32:	eb 00                	jmp    207b34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x34>
    }
  207b34:	48 83 c4 38          	add    $0x38,%rsp
  207b38:	c3                   	retq   
  207b39:	48 8b 14 24          	mov    (%rsp),%rdx
  207b3d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207b42:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            do_reserve_and_handle(self, len, additional);
  207b47:	e8 04 00 00 00       	callq  207b50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9904d31e0c150511E>
        if self.needs_to_grow(len, additional) {
  207b4c:	eb e6                	jmp    207b34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E+0x34>
  207b4e:	cc                   	int3   
  207b4f:	cc                   	int3   

0000000000207b50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9904d31e0c150511E>:
        fn do_reserve_and_handle<T, A: Allocator>(
  207b50:	48 83 ec 38          	sub    $0x38,%rsp
  207b54:	48 89 d1             	mov    %rdx,%rcx
  207b57:	48 89 f2             	mov    %rsi,%rdx
  207b5a:	48 89 fe             	mov    %rdi,%rsi
  207b5d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207b62:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207b67:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  207b6c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207b71:	e8 ea f5 ff ff       	callq  207160 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1d8134efb335945dE>
  207b76:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207b7b:	e8 10 e4 00 00       	callq  215f90 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  207b80:	48 83 c4 38          	add    $0x38,%rsp
  207b84:	c3                   	retq   
  207b85:	cc                   	int3   
  207b86:	cc                   	int3   
  207b87:	cc                   	int3   
  207b88:	cc                   	int3   
  207b89:	cc                   	int3   
  207b8a:	cc                   	int3   
  207b8b:	cc                   	int3   
  207b8c:	cc                   	int3   
  207b8d:	cc                   	int3   
  207b8e:	cc                   	int3   
  207b8f:	cc                   	int3   

0000000000207b90 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9c721d4c845ce776E>:
        fn do_reserve_and_handle<T, A: Allocator>(
  207b90:	48 83 ec 38          	sub    $0x38,%rsp
  207b94:	48 89 d1             	mov    %rdx,%rcx
  207b97:	48 89 f2             	mov    %rsi,%rdx
  207b9a:	48 89 fe             	mov    %rdi,%rsi
  207b9d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207ba2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207ba7:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  207bac:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207bb1:	e8 3a f8 ff ff       	callq  2073f0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6652cc9d43d27f79E>
  207bb6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207bbb:	e8 d0 e3 00 00       	callq  215f90 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  207bc0:	48 83 c4 38          	add    $0x38,%rsp
  207bc4:	c3                   	retq   
  207bc5:	cc                   	int3   
  207bc6:	cc                   	int3   
  207bc7:	cc                   	int3   
  207bc8:	cc                   	int3   
  207bc9:	cc                   	int3   
  207bca:	cc                   	int3   
  207bcb:	cc                   	int3   
  207bcc:	cc                   	int3   
  207bcd:	cc                   	int3   
  207bce:	cc                   	int3   
  207bcf:	cc                   	int3   

0000000000207bd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hdfd6a07f45ba3a7cE>:
        fn do_reserve_and_handle<T, A: Allocator>(
  207bd0:	48 83 ec 38          	sub    $0x38,%rsp
  207bd4:	48 89 d1             	mov    %rdx,%rcx
  207bd7:	48 89 f2             	mov    %rsi,%rdx
  207bda:	48 89 fe             	mov    %rdi,%rsi
  207bdd:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207be2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207be7:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
            handle_reserve(slf.grow_amortized(len, additional));
  207bec:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207bf1:	e8 8a fa ff ff       	callq  207680 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h9fb720f9c146bb49E>
  207bf6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  207bfb:	e8 90 e3 00 00       	callq  215f90 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>
        }
  207c00:	48 83 c4 38          	add    $0x38,%rsp
  207c04:	c3                   	retq   
  207c05:	cc                   	int3   
  207c06:	cc                   	int3   
  207c07:	cc                   	int3   
  207c08:	cc                   	int3   
  207c09:	cc                   	int3   
  207c0a:	cc                   	int3   
  207c0b:	cc                   	int3   
  207c0c:	cc                   	int3   
  207c0d:	cc                   	int3   
  207c0e:	cc                   	int3   
  207c0f:	cc                   	int3   

0000000000207c10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h22022347191ab383E>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  207c10:	48 83 ec 58          	sub    $0x58,%rsp
  207c14:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  207c19:	48 89 f0             	mov    %rsi,%rax
  207c1c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207c21:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207c26:	48 89 f8             	mov    %rdi,%rax
  207c29:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207c2e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207c33:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207c38:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  207c3d:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  207c42:	e8 f9 03 02 00       	callq  228040 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he83c423481392309E>
  207c47:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207c4c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  207c51:	e8 ca 04 02 00       	callq  228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  207c56:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207c5b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  207c60:	e8 db fc 00 00       	callq  217940 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h6c462c971cf16ae0E>
  207c65:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207c6a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207c6f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207c74:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207c79:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  207c7e:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  207c81:	e8 9a 05 02 00       	callq  228220 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  207c86:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207c8b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  207c90:	e8 cb fc ff ff       	callq  207960 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h77e37d77c1dad7b2E>
  207c95:	48 89 04 24          	mov    %rax,(%rsp)
  207c99:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207c9e:	48 8b 0c 24          	mov    (%rsp),%rcx
  207ca2:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  207ca6:	48 83 c4 58          	add    $0x58,%rsp
  207caa:	c3                   	retq   
  207cab:	cc                   	int3   
  207cac:	cc                   	int3   
  207cad:	cc                   	int3   
  207cae:	cc                   	int3   
  207caf:	cc                   	int3   

0000000000207cb0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h88bff482bda567aeE>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  207cb0:	48 83 ec 58          	sub    $0x58,%rsp
  207cb4:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  207cb9:	48 89 f0             	mov    %rsi,%rax
  207cbc:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207cc1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207cc6:	48 89 f8             	mov    %rdi,%rax
  207cc9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207cce:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207cd3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207cd8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  207cdd:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  207ce2:	e8 19 03 02 00       	callq  228000 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85f07a89a7a7a8a1E>
  207ce7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207cec:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  207cf1:	e8 da 03 02 00       	callq  2280d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h552a258b54bc04b4E>
  207cf6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207cfb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  207d00:	e8 1b fc 00 00       	callq  217920 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h490cf4a7df51fc38E>
  207d05:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207d0a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207d0f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207d14:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207d19:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  207d1e:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  207d21:	e8 fa 04 02 00       	callq  228220 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  207d26:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207d2b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  207d30:	e8 db fb ff ff       	callq  207910 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h2111529f02ce747fE>
  207d35:	48 89 04 24          	mov    %rax,(%rsp)
  207d39:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207d3e:	48 8b 0c 24          	mov    (%rsp),%rcx
  207d42:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  207d46:	48 83 c4 58          	add    $0x58,%rsp
  207d4a:	c3                   	retq   
  207d4b:	cc                   	int3   
  207d4c:	cc                   	int3   
  207d4d:	cc                   	int3   
  207d4e:	cc                   	int3   
  207d4f:	cc                   	int3   

0000000000207d50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17h9b9ccef11e164c81E>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
  207d50:	48 83 ec 58          	sub    $0x58,%rsp
  207d54:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  207d59:	48 89 f0             	mov    %rsi,%rax
  207d5c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207d61:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207d66:	48 89 f8             	mov    %rdi,%rax
  207d69:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207d6e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  207d73:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207d78:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  207d7d:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  207d82:	e8 f9 02 02 00       	callq  228080 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17heceef75a4b1639c3E>
  207d87:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207d8c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  207d91:	e8 2a 03 02 00       	callq  2280c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4044b6540ffdc00bE>
  207d96:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207d9b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  207da0:	e8 5b fb 00 00       	callq  217900 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h26d845bbebccc84cE>
  207da5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207daa:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207daf:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  207db4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207db9:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  207dbe:	48 89 08             	mov    %rcx,(%rax)
        self.cap = Self::capacity_from_bytes(ptr.len());
  207dc1:	e8 5a 04 02 00       	callq  228220 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>
  207dc6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207dcb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  207dd0:	e8 db fb ff ff       	callq  2079b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hfbdb567b914738e8E>
  207dd5:	48 89 04 24          	mov    %rax,(%rsp)
  207dd9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207dde:	48 8b 0c 24          	mov    (%rsp),%rcx
  207de2:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  207de6:	48 83 c4 58          	add    $0x58,%rsp
  207dea:	c3                   	retq   
  207deb:	cc                   	int3   
  207dec:	cc                   	int3   
  207ded:	cc                   	int3   
  207dee:	cc                   	int3   
  207def:	cc                   	int3   

0000000000207df0 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
  207df0:	48 83 ec 48          	sub    $0x48,%rsp
  207df4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207df9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  207dfe:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207e03:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let size = layout.size();
  207e08:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  207e0d:	e8 3e 26 01 00       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  207e12:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207e17:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207e1c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
  207e21:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207e26:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  207e2b:	e8 30 53 02 00       	callq  22d160 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  207e30:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207e35:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207e3a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        if !ptr.is_null() {
  207e3f:	e8 7c 75 02 00       	callq  22f3c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  207e44:	88 44 24 07          	mov    %al,0x7(%rsp)
  207e48:	8a 44 24 07          	mov    0x7(%rsp),%al
  207e4c:	34 ff                	xor    $0xff,%al
  207e4e:	a8 01                	test   $0x1,%al
  207e50:	75 0a                	jne    207e5c <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E+0x6c>
  207e52:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
        }
        ptr
    }
  207e57:	48 83 c4 48          	add    $0x48,%rsp
  207e5b:	c3                   	retq   
  207e5c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  207e61:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            unsafe { ptr::write_bytes(ptr, 0, size) };
  207e66:	31 f6                	xor    %esi,%esi
  207e68:	e8 43 09 02 00       	callq  2287b0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>
        if !ptr.is_null() {
  207e6d:	eb e3                	jmp    207e52 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E+0x62>
  207e6f:	cc                   	int3   

0000000000207e70 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  207e70:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  207e77:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  207e7c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  207e81:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  207e86:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  207e8b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  207e90:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  207e95:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  207e9a:	4c 89 44 24 78       	mov    %r8,0x78(%rsp)
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
  207e9f:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  207ea4:	e8 b7 25 01 00       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  207ea9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  207eae:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  207eb3:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  207eb8:	e8 43 25 01 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  207ebd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207ec2:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  207ec7:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  207ece:	00 
  207ecf:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  207ed6:	00 
  207ed7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  207edc:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  207ee1:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
  207ee6:	e8 75 52 02 00       	callq  22d160 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  207eeb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207ef0:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  207ef7:	00 
  207ef8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        if !new_ptr.is_null() {
  207efd:	e8 be 74 02 00       	callq  22f3c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  207f02:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  207f06:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  207f0a:	34 ff                	xor    $0xff,%al
  207f0c:	a8 01                	test   $0x1,%al
  207f0e:	75 0d                	jne    207f1d <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E+0xad>
  207f10:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
                self.dealloc(ptr, layout);
            }
        }
        new_ptr
    }
  207f15:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  207f1c:	c3                   	retq   
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
  207f1d:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  207f22:	e8 29 25 01 00       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  207f27:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207f2c:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  207f31:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  207f36:	e8 25 8c 02 00       	callq  230b60 <_ZN4core3cmp3min17he6f664f09d7a8d9bE>
  207f3b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207f40:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207f45:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  207f4a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  207f4f:	e8 8c 08 02 00       	callq  2287e0 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
  207f54:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  207f59:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
                self.dealloc(ptr, layout);
  207f5e:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  207f63:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  207f68:	e8 83 52 02 00       	callq  22d1f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>
        if !new_ptr.is_null() {
  207f6d:	eb a1                	jmp    207f10 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E+0xa0>
  207f6f:	cc                   	int3   

0000000000207f70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  207f70:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  207f77:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  207f7c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  207f83:	00 
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
  207f84:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  207f8b:	00 
  207f8c:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  207f93:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  207f94:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  207f99:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  207f9e:	e8 1d 0d 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  207fa3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  207fa8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  207fae:	74 29                	je     207fd9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x69>
            match status {
  207fb0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  207fb5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  207fba:	48 83 e8 03          	sub    $0x3,%rax
  207fbe:	0f 87 35 01 00 00    	ja     2080f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x189>
  207fc4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207fc9:	48 8d 0d 4c 83 ff ff 	lea    -0x7cb4(%rip),%rcx        # 20031c <str.0+0x1c>
  207fd0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  207fd4:	48 01 c8             	add    %rcx,%rax
  207fd7:	ff e0                	jmpq   *%rax
  207fd9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  207fde:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  207fe3:	31 c0                	xor    %eax,%eax
  207fe5:	89 c6                	mov    %eax,%esi
  207fe7:	ba 01 00 00 00       	mov    $0x1,%edx
  207fec:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  207ff1:	e8 aa 0b 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  207ff6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207ffb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208000:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208005:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20800b:	75 a3                	jne    207fb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x40>
  20800d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208012:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208017:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20801c:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  208023:	00 
  208024:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20802b:	00 
  20802c:	e8 7f 35 00 00       	callq  20b5b0 <_ZN4core3ops8function6FnOnce9call_once17h4985b7a711a6d100E>
  208031:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208036:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20803d:	00 
  20803e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208043:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20804a:	00 
  20804b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208050:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  208057:	00 
  208058:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20805d:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  208064:	00 
  208065:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20806c:	00 
  20806d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208074:	00 00 
  208076:	48 83 c0 08          	add    $0x8,%rax
  20807a:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  208081:	00 
  208082:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208087:	eb 00                	jmp    208089 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x119>
  208089:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20808e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208093:	ba 28 00 00 00       	mov    $0x28,%edx
  208098:	e8 c3 e4 02 00       	callq  236560 <memcpy>
  20809d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2080a2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2080a7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2080ae:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2080b0:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  2080b7:	04 
  2080b8:	be 02 00 00 00       	mov    $0x2,%esi
  2080bd:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  2080c4:	00 
  2080c5:	e8 36 0c 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2080ca:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2080cf:	e8 0c 21 00 00       	callq  20a1e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>
  2080d4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2080d9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2080de:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2080e3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2080e8:	e8 43 38 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
            }
        }
    }
  2080ed:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  2080f4:	01 
  2080f5:	75 6c                	jne    208163 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1f3>
  2080f7:	eb 5d                	jmp    208156 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1e6>
                _ => unsafe { unreachable() },
  2080f9:	e8 42 f6 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2080fe:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208100:	48 8d 3d 6c 83 ff ff 	lea    -0x7c94(%rip),%rdi        # 200473 <str.0+0x173>
  208107:	48 8d 15 1a f5 02 00 	lea    0x2f51a(%rip),%rdx        # 237628 <memcmp+0x1078>
  20810e:	be 28 00 00 00       	mov    $0x28,%esi
  208113:	e8 48 b3 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208118:	0f 0b                	ud2    
                    cpu_relax();
  20811a:	e8 71 0c 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  20811f:	eb 44                	jmp    208165 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1f5>
                PANICKED => panic!("Once has panicked"),
  208121:	48 8d 3d e4 82 ff ff 	lea    -0x7d1c(%rip),%rdi        # 20040c <str.0+0x10c>
  208128:	48 8d 15 e1 f4 02 00 	lea    0x2f4e1(%rip),%rdx        # 237610 <memcmp+0x1060>
  20812f:	be 11 00 00 00       	mov    $0x11,%esi
  208134:	e8 27 b3 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208139:	0f 0b                	ud2    
  20813b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208140:	e8 9b 20 00 00       	callq  20a1e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>
  208145:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20814a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20814f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208154:	eb 97                	jmp    2080ed <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x17d>
    }
  208156:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20815b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208162:	c3                   	retq   
  208163:	eb f1                	jmp    208156 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x1e6>
  208165:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20816a:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  208171:	04 
  208172:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  208179:	00 
  20817a:	e8 41 0b 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20817f:	48 89 04 24          	mov    %rax,(%rsp)
  208183:	48 8b 04 24          	mov    (%rsp),%rax
  208187:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20818c:	e9 1f fe ff ff       	jmpq   207fb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE+0x40>
  208191:	cc                   	int3   
  208192:	cc                   	int3   
  208193:	cc                   	int3   
  208194:	cc                   	int3   
  208195:	cc                   	int3   
  208196:	cc                   	int3   
  208197:	cc                   	int3   
  208198:	cc                   	int3   
  208199:	cc                   	int3   
  20819a:	cc                   	int3   
  20819b:	cc                   	int3   
  20819c:	cc                   	int3   
  20819d:	cc                   	int3   
  20819e:	cc                   	int3   
  20819f:	cc                   	int3   

00000000002081a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2081a0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  2081a7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2081ac:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  2081b3:	00 
        loop {
  2081b4:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2081bb:	00 
  2081bc:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  2081c3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2081c4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2081c9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2081ce:	e8 ed 0a 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2081d3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2081d8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2081de:	74 29                	je     208209 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x69>
            match status {
  2081e0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2081e5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2081ea:	48 83 e8 03          	sub    $0x3,%rax
  2081ee:	0f 87 35 01 00 00    	ja     208329 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x189>
  2081f4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2081f9:	48 8d 0d 2c 81 ff ff 	lea    -0x7ed4(%rip),%rcx        # 20032c <str.0+0x2c>
  208200:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208204:	48 01 c8             	add    %rcx,%rax
  208207:	ff e0                	jmpq   *%rax
  208209:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20820e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208213:	31 c0                	xor    %eax,%eax
  208215:	89 c6                	mov    %eax,%esi
  208217:	ba 01 00 00 00       	mov    $0x1,%edx
  20821c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208221:	e8 7a 09 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208226:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20822b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208230:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208235:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20823b:	75 a3                	jne    2081e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x40>
  20823d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208242:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208247:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20824c:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  208253:	00 
  208254:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20825b:	00 
  20825c:	e8 4f 32 00 00       	callq  20b4b0 <_ZN4core3ops8function6FnOnce9call_once17h1edd667f22cfc967E>
  208261:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208266:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20826d:	00 
  20826e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  208273:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20827a:	00 
  20827b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  208280:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  208287:	00 
  208288:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20828d:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  208294:	00 
  208295:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20829c:	00 
  20829d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  2082a4:	00 00 
  2082a6:	48 83 c0 08          	add    $0x8,%rax
  2082aa:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2082b1:	00 
  2082b2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2082b7:	eb 00                	jmp    2082b9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x119>
  2082b9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2082be:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2082c3:	ba 28 00 00 00       	mov    $0x28,%edx
  2082c8:	e8 93 e2 02 00       	callq  236560 <memcpy>
  2082cd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2082d2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2082d7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2082de:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2082e0:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  2082e7:	04 
  2082e8:	be 02 00 00 00       	mov    $0x2,%esi
  2082ed:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  2082f4:	00 
  2082f5:	e8 06 0a 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2082fa:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2082ff:	e8 1c 1e 00 00       	callq  20a120 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>
  208304:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208309:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20830e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208313:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208318:	e8 13 36 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  20831d:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  208324:	01 
  208325:	75 6c                	jne    208393 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1f3>
  208327:	eb 5d                	jmp    208386 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1e6>
                _ => unsafe { unreachable() },
  208329:	e8 12 f4 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20832e:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208330:	48 8d 3d 3c 81 ff ff 	lea    -0x7ec4(%rip),%rdi        # 200473 <str.0+0x173>
  208337:	48 8d 15 ea f2 02 00 	lea    0x2f2ea(%rip),%rdx        # 237628 <memcmp+0x1078>
  20833e:	be 28 00 00 00       	mov    $0x28,%esi
  208343:	e8 18 b1 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208348:	0f 0b                	ud2    
                    cpu_relax();
  20834a:	e8 41 0a 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  20834f:	eb 44                	jmp    208395 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1f5>
                PANICKED => panic!("Once has panicked"),
  208351:	48 8d 3d b4 80 ff ff 	lea    -0x7f4c(%rip),%rdi        # 20040c <str.0+0x10c>
  208358:	48 8d 15 b1 f2 02 00 	lea    0x2f2b1(%rip),%rdx        # 237610 <memcmp+0x1060>
  20835f:	be 11 00 00 00       	mov    $0x11,%esi
  208364:	e8 f7 b0 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208369:	0f 0b                	ud2    
  20836b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208370:	e8 ab 1d 00 00       	callq  20a120 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>
  208375:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20837a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20837f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208384:	eb 97                	jmp    20831d <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x17d>
    }
  208386:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20838b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208392:	c3                   	retq   
  208393:	eb f1                	jmp    208386 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x1e6>
  208395:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20839a:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  2083a1:	04 
  2083a2:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  2083a9:	00 
  2083aa:	e8 11 09 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2083af:	48 89 04 24          	mov    %rax,(%rsp)
  2083b3:	48 8b 04 24          	mov    (%rsp),%rax
  2083b7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2083bc:	e9 1f fe ff ff       	jmpq   2081e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E+0x40>
  2083c1:	cc                   	int3   
  2083c2:	cc                   	int3   
  2083c3:	cc                   	int3   
  2083c4:	cc                   	int3   
  2083c5:	cc                   	int3   
  2083c6:	cc                   	int3   
  2083c7:	cc                   	int3   
  2083c8:	cc                   	int3   
  2083c9:	cc                   	int3   
  2083ca:	cc                   	int3   
  2083cb:	cc                   	int3   
  2083cc:	cc                   	int3   
  2083cd:	cc                   	int3   
  2083ce:	cc                   	int3   
  2083cf:	cc                   	int3   

00000000002083d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2083d0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  2083d7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2083dc:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  2083e3:	00 
        loop {
  2083e4:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  2083eb:	00 
  2083ec:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  2083f3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2083f4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2083f9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2083fe:	e8 bd 08 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208403:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208408:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20840e:	74 29                	je     208439 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x69>
            match status {
  208410:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208415:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20841a:	48 83 e8 03          	sub    $0x3,%rax
  20841e:	0f 87 39 01 00 00    	ja     20855d <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x18d>
  208424:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208429:	48 8d 0d 0c 7f ff ff 	lea    -0x80f4(%rip),%rcx        # 20033c <str.0+0x3c>
  208430:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208434:	48 01 c8             	add    %rcx,%rax
  208437:	ff e0                	jmpq   *%rax
  208439:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20843e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208443:	31 c0                	xor    %eax,%eax
  208445:	89 c6                	mov    %eax,%esi
  208447:	ba 01 00 00 00       	mov    $0x1,%edx
  20844c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208451:	e8 4a 07 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208456:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20845b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208460:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208465:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20846b:	75 a3                	jne    208410 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x40>
  20846d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208472:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208477:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20847c:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  208483:	00 
  208484:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20848b:	00 
  20848c:	e8 9f 32 00 00       	callq  20b730 <_ZN4core3ops8function6FnOnce9call_once17hc0401856d345fdcbE>
  208491:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208496:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20849d:	00 
  20849e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2084a3:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2084aa:	00 
  2084ab:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  2084b0:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2084b7:	00 
  2084b8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  2084bd:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  2084c4:	00 00 
  2084c6:	48 83 c0 08          	add    $0x8,%rax
  2084ca:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2084d1:	00 
  2084d2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2084d7:	eb 00                	jmp    2084d9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x109>
  2084d9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2084de:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2084e3:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2084e8:	48 89 08             	mov    %rcx,(%rax)
  2084eb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2084f0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  2084f4:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  2084f9:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2084fd:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  208502:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  208506:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20850b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208512:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208514:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  20851b:	04 
  20851c:	be 02 00 00 00       	mov    $0x2,%esi
  208521:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  208528:	00 
  208529:	e8 d2 07 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  20852e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208533:	e8 48 1c 00 00       	callq  20a180 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>
  208538:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20853d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208542:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208547:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20854c:	e8 df 33 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208551:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  208558:	01 
  208559:	75 6c                	jne    2085c7 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1f7>
  20855b:	eb 5d                	jmp    2085ba <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1ea>
                _ => unsafe { unreachable() },
  20855d:	e8 de f1 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208562:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208564:	48 8d 3d 08 7f ff ff 	lea    -0x80f8(%rip),%rdi        # 200473 <str.0+0x173>
  20856b:	48 8d 15 b6 f0 02 00 	lea    0x2f0b6(%rip),%rdx        # 237628 <memcmp+0x1078>
  208572:	be 28 00 00 00       	mov    $0x28,%esi
  208577:	e8 e4 ae 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20857c:	0f 0b                	ud2    
                    cpu_relax();
  20857e:	e8 0d 08 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208583:	eb 44                	jmp    2085c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1f9>
                PANICKED => panic!("Once has panicked"),
  208585:	48 8d 3d 80 7e ff ff 	lea    -0x8180(%rip),%rdi        # 20040c <str.0+0x10c>
  20858c:	48 8d 15 7d f0 02 00 	lea    0x2f07d(%rip),%rdx        # 237610 <memcmp+0x1060>
  208593:	be 11 00 00 00       	mov    $0x11,%esi
  208598:	e8 c3 ae 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20859d:	0f 0b                	ud2    
  20859f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2085a4:	e8 d7 1b 00 00       	callq  20a180 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>
  2085a9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2085ae:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2085b3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2085b8:	eb 97                	jmp    208551 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x181>
    }
  2085ba:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2085bf:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  2085c6:	c3                   	retq   
  2085c7:	eb f1                	jmp    2085ba <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x1ea>
  2085c9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  2085ce:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  2085d5:	04 
  2085d6:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  2085dd:	00 
  2085de:	e8 dd 06 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2085e3:	48 89 04 24          	mov    %rax,(%rsp)
  2085e7:	48 8b 04 24          	mov    (%rsp),%rax
  2085eb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2085f0:	e9 1b fe ff ff       	jmpq   208410 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E+0x40>
  2085f5:	cc                   	int3   
  2085f6:	cc                   	int3   
  2085f7:	cc                   	int3   
  2085f8:	cc                   	int3   
  2085f9:	cc                   	int3   
  2085fa:	cc                   	int3   
  2085fb:	cc                   	int3   
  2085fc:	cc                   	int3   
  2085fd:	cc                   	int3   
  2085fe:	cc                   	int3   
  2085ff:	cc                   	int3   

0000000000208600 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208600:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  208607:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20860c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  208613:	00 
        loop {
  208614:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  20861b:	00 
  20861c:	c6 84 24 af 00 00 00 	movb   $0x1,0xaf(%rsp)
  208623:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208624:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208629:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20862e:	e8 8d 06 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208633:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208638:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20863e:	74 29                	je     208669 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x69>
            match status {
  208640:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208645:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20864a:	48 83 e8 03          	sub    $0x3,%rax
  20864e:	0f 87 3d 01 00 00    	ja     208791 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x191>
  208654:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208659:	48 8d 0d ec 7c ff ff 	lea    -0x8314(%rip),%rcx        # 20034c <str.0+0x4c>
  208660:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208664:	48 01 c8             	add    %rcx,%rax
  208667:	ff e0                	jmpq   *%rax
  208669:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20866e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208673:	31 c0                	xor    %eax,%eax
  208675:	89 c6                	mov    %eax,%esi
  208677:	ba 01 00 00 00       	mov    $0x1,%edx
  20867c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208681:	e8 1a 05 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208686:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20868b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208690:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208695:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20869b:	75 a3                	jne    208640 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x40>
  20869d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2086a2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2086a7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2086ac:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  2086b3:	00 
  2086b4:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2086bb:	00 
  2086bc:	e8 2f 2f 00 00       	callq  20b5f0 <_ZN4core3ops8function6FnOnce9call_once17h598ec53524868f86E>
  2086c1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2086c6:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2086cd:	00 
  2086ce:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2086d3:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2086da:	00 
  2086db:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  2086e0:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2086e7:	00 
  2086e8:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  2086ed:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  2086f4:	00 
  2086f5:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  2086fc:	00 
  2086fd:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208704:	00 00 
  208706:	48 83 c0 08          	add    $0x8,%rax
  20870a:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  208711:	00 
  208712:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208717:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20871c:	e8 3f 31 00 00       	callq  20b860 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E>
  208721:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208726:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  20872b:	ba 28 00 00 00       	mov    $0x28,%edx
  208730:	e8 2b de 02 00       	callq  236560 <memcpy>
  208735:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  20873a:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20873f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208746:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208748:	c6 84 24 ad 00 00 00 	movb   $0x4,0xad(%rsp)
  20874f:	04 
  208750:	be 02 00 00 00       	mov    $0x2,%esi
  208755:	0f b6 94 24 ad 00 00 	movzbl 0xad(%rsp),%edx
  20875c:	00 
  20875d:	e8 9e 05 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208762:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208767:	e8 54 1c 00 00       	callq  20a3c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>
  20876c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208771:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208776:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20877b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208780:	e8 ab 31 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208785:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  20878c:	01 
  20878d:	75 6c                	jne    2087fb <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1fb>
  20878f:	eb 5d                	jmp    2087ee <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1ee>
                _ => unsafe { unreachable() },
  208791:	e8 aa ef 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208796:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208798:	48 8d 3d d4 7c ff ff 	lea    -0x832c(%rip),%rdi        # 200473 <str.0+0x173>
  20879f:	48 8d 15 82 ee 02 00 	lea    0x2ee82(%rip),%rdx        # 237628 <memcmp+0x1078>
  2087a6:	be 28 00 00 00       	mov    $0x28,%esi
  2087ab:	e8 b0 ac 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2087b0:	0f 0b                	ud2    
                    cpu_relax();
  2087b2:	e8 d9 05 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2087b7:	eb 44                	jmp    2087fd <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1fd>
                PANICKED => panic!("Once has panicked"),
  2087b9:	48 8d 3d 4c 7c ff ff 	lea    -0x83b4(%rip),%rdi        # 20040c <str.0+0x10c>
  2087c0:	48 8d 15 49 ee 02 00 	lea    0x2ee49(%rip),%rdx        # 237610 <memcmp+0x1060>
  2087c7:	be 11 00 00 00       	mov    $0x11,%esi
  2087cc:	e8 8f ac 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2087d1:	0f 0b                	ud2    
  2087d3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2087d8:	e8 e3 1b 00 00       	callq  20a3c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>
  2087dd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2087e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2087e7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2087ec:	eb 97                	jmp    208785 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x185>
    }
  2087ee:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2087f3:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  2087fa:	c3                   	retq   
  2087fb:	eb f1                	jmp    2087ee <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x1ee>
  2087fd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208802:	c6 84 24 ae 00 00 00 	movb   $0x4,0xae(%rsp)
  208809:	04 
  20880a:	0f b6 b4 24 ae 00 00 	movzbl 0xae(%rsp),%esi
  208811:	00 
  208812:	e8 a9 04 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208817:	48 89 04 24          	mov    %rax,(%rsp)
  20881b:	48 8b 04 24          	mov    (%rsp),%rax
  20881f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208824:	e9 17 fe ff ff       	jmpq   208640 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE+0x40>
  208829:	cc                   	int3   
  20882a:	cc                   	int3   
  20882b:	cc                   	int3   
  20882c:	cc                   	int3   
  20882d:	cc                   	int3   
  20882e:	cc                   	int3   
  20882f:	cc                   	int3   

0000000000208830 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208830:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  208837:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20883c:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  208843:	00 
        loop {
  208844:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20884b:	00 
  20884c:	c6 84 24 bf 00 00 00 	movb   $0x1,0xbf(%rsp)
  208853:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208854:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208859:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20885e:	e8 5d 04 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208863:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208868:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20886e:	74 29                	je     208899 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x69>
            match status {
  208870:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208875:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20887a:	48 83 e8 03          	sub    $0x3,%rax
  20887e:	0f 87 21 01 00 00    	ja     2089a5 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x175>
  208884:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208889:	48 8d 0d cc 7a ff ff 	lea    -0x8534(%rip),%rcx        # 20035c <str.0+0x5c>
  208890:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208894:	48 01 c8             	add    %rcx,%rax
  208897:	ff e0                	jmpq   *%rax
  208899:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20889e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2088a3:	31 c0                	xor    %eax,%eax
  2088a5:	89 c6                	mov    %eax,%esi
  2088a7:	ba 01 00 00 00       	mov    $0x1,%edx
  2088ac:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2088b1:	e8 ea 02 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  2088b6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2088bb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2088c0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2088c5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2088cb:	75 a3                	jne    208870 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x40>
  2088cd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2088d2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2088d7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2088dc:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  2088e3:	00 
  2088e4:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2088eb:	00 
  2088ec:	e8 df 2b 00 00       	callq  20b4d0 <_ZN4core3ops8function6FnOnce9call_once17h292df0ed92871557E>
  2088f1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2088f6:	48 83 c7 08          	add    $0x8,%rdi
  2088fa:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  208901:	00 
  208902:	ba 28 00 00 00       	mov    $0x28,%edx
  208907:	e8 54 dc 02 00       	callq  236560 <memcpy>
  20890c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208911:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208918:	00 00 
  20891a:	48 83 c0 08          	add    $0x8,%rax
  20891e:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  208925:	00 
  208926:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20892b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208930:	e8 db 2e 00 00       	callq  20b810 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE>
  208935:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20893a:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  20893f:	ba 30 00 00 00       	mov    $0x30,%edx
  208944:	e8 17 dc 02 00       	callq  236560 <memcpy>
  208949:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  20894e:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208953:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20895a:	00 00 
                self.state.store(status, Ordering::SeqCst);
  20895c:	c6 84 24 bd 00 00 00 	movb   $0x4,0xbd(%rsp)
  208963:	04 
  208964:	be 02 00 00 00       	mov    $0x2,%esi
  208969:	0f b6 94 24 bd 00 00 	movzbl 0xbd(%rsp),%edx
  208970:	00 
  208971:	e8 8a 03 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208976:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20897b:	e8 d0 15 00 00       	callq  209f50 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>
  208980:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208985:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20898a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  20898f:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208994:	e8 97 2f 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208999:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  2089a0:	01 
  2089a1:	75 6c                	jne    208a0f <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1df>
  2089a3:	eb 5d                	jmp    208a02 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1d2>
                _ => unsafe { unreachable() },
  2089a5:	e8 96 ed 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2089aa:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2089ac:	48 8d 3d c0 7a ff ff 	lea    -0x8540(%rip),%rdi        # 200473 <str.0+0x173>
  2089b3:	48 8d 15 6e ec 02 00 	lea    0x2ec6e(%rip),%rdx        # 237628 <memcmp+0x1078>
  2089ba:	be 28 00 00 00       	mov    $0x28,%esi
  2089bf:	e8 9c aa 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2089c4:	0f 0b                	ud2    
                    cpu_relax();
  2089c6:	e8 c5 03 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  2089cb:	eb 44                	jmp    208a11 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1e1>
                PANICKED => panic!("Once has panicked"),
  2089cd:	48 8d 3d 38 7a ff ff 	lea    -0x85c8(%rip),%rdi        # 20040c <str.0+0x10c>
  2089d4:	48 8d 15 35 ec 02 00 	lea    0x2ec35(%rip),%rdx        # 237610 <memcmp+0x1060>
  2089db:	be 11 00 00 00       	mov    $0x11,%esi
  2089e0:	e8 7b aa 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2089e5:	0f 0b                	ud2    
  2089e7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  2089ec:	e8 5f 15 00 00       	callq  209f50 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>
  2089f1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2089f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2089fb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208a00:	eb 97                	jmp    208999 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x169>
    }
  208a02:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208a07:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  208a0e:	c3                   	retq   
  208a0f:	eb f1                	jmp    208a02 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x1d2>
  208a11:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208a16:	c6 84 24 be 00 00 00 	movb   $0x4,0xbe(%rsp)
  208a1d:	04 
  208a1e:	0f b6 b4 24 be 00 00 	movzbl 0xbe(%rsp),%esi
  208a25:	00 
  208a26:	e8 95 02 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208a2b:	48 89 04 24          	mov    %rax,(%rsp)
  208a2f:	48 8b 04 24          	mov    (%rsp),%rax
  208a33:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208a38:	e9 33 fe ff ff       	jmpq   208870 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E+0x40>
  208a3d:	cc                   	int3   
  208a3e:	cc                   	int3   
  208a3f:	cc                   	int3   

0000000000208a40 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208a40:	48 81 ec b8 20 00 00 	sub    $0x20b8,%rsp
  208a47:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208a4c:	48 89 bc 24 a0 20 00 	mov    %rdi,0x20a0(%rsp)
  208a53:	00 
        loop {
  208a54:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  208a5b:	00 
  208a5c:	c6 84 24 9f 20 00 00 	movb   $0x1,0x209f(%rsp)
  208a63:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208a64:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  208a6b:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208a70:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208a75:	e8 46 02 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208a7a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208a7f:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208a85:	74 29                	je     208ab0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x70>
            match status {
  208a87:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208a8c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208a91:	48 83 e8 03          	sub    $0x3,%rax
  208a95:	0f 87 25 01 00 00    	ja     208bc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x180>
  208a9b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208aa0:	48 8d 0d c5 78 ff ff 	lea    -0x873b(%rip),%rcx        # 20036c <str.0+0x6c>
  208aa7:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208aab:	48 01 c8             	add    %rcx,%rax
  208aae:	ff e0                	jmpq   *%rax
  208ab0:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            status = self.state.compare_and_swap(INCOMPLETE,
  208ab5:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
                                                 Ordering::SeqCst);
  208abc:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208ac1:	31 c0                	xor    %eax,%eax
  208ac3:	89 c6                	mov    %eax,%esi
  208ac5:	ba 01 00 00 00       	mov    $0x1,%edx
  208aca:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208acf:	e8 cc 00 02 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208ad4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208ad9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208ade:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208ae3:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208ae9:	75 9c                	jne    208a87 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x47>
  208aeb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208af0:	48 05 20 10 00 00    	add    $0x1020,%rax
  208af6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208afb:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208b00:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  208b07:	00 
  208b08:	48 8d bc 24 80 10 00 	lea    0x1080(%rsp),%rdi
  208b0f:	00 
  208b10:	e8 3b 2a 00 00       	callq  20b550 <_ZN4core3ops8function6FnOnce9call_once17h2ba66678938adde7E>
  208b15:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  208b1a:	48 83 c7 10          	add    $0x10,%rdi
  208b1e:	48 8d b4 24 80 10 00 	lea    0x1080(%rsp),%rsi
  208b25:	00 
  208b26:	ba 10 10 00 00       	mov    $0x1010,%edx
  208b2b:	e8 30 da 02 00       	callq  236560 <memcpy>
  208b30:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208b35:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  208b3a:	48 89 84 24 b0 20 00 	mov    %rax,0x20b0(%rsp)
  208b41:	00 
  208b42:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208b47:	eb 00                	jmp    208b49 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x109>
  208b49:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208b4e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208b53:	ba 20 10 00 00       	mov    $0x1020,%edx
  208b58:	e8 03 da 02 00       	callq  236560 <memcpy>
  208b5d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208b62:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208b67:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208b6e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208b70:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  208b77:	c6 84 24 9d 20 00 00 	movb   $0x4,0x209d(%rsp)
  208b7e:	04 
  208b7f:	be 02 00 00 00       	mov    $0x2,%esi
  208b84:	0f b6 94 24 9d 20 00 	movzbl 0x209d(%rsp),%edx
  208b8b:	00 
  208b8c:	e8 6f 01 02 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208b91:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208b96:	e8 d5 14 00 00       	callq  20a070 <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E>
  208b9b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208ba0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208ba5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208baa:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208baf:	e8 7c 2d 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208bb4:	f6 84 24 9f 20 00 00 	testb  $0x1,0x209f(%rsp)
  208bbb:	01 
  208bbc:	75 6c                	jne    208c2a <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x1ea>
  208bbe:	eb 5d                	jmp    208c1d <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x1dd>
                _ => unsafe { unreachable() },
  208bc0:	e8 7b eb 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208bc5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208bc7:	48 8d 3d a5 78 ff ff 	lea    -0x875b(%rip),%rdi        # 200473 <str.0+0x173>
  208bce:	48 8d 15 53 ea 02 00 	lea    0x2ea53(%rip),%rdx        # 237628 <memcmp+0x1078>
  208bd5:	be 28 00 00 00       	mov    $0x28,%esi
  208bda:	e8 81 a8 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208bdf:	0f 0b                	ud2    
                    cpu_relax();
  208be1:	e8 aa 01 02 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208be6:	eb 44                	jmp    208c2c <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x1ec>
                PANICKED => panic!("Once has panicked"),
  208be8:	48 8d 3d 1d 78 ff ff 	lea    -0x87e3(%rip),%rdi        # 20040c <str.0+0x10c>
  208bef:	48 8d 15 1a ea 02 00 	lea    0x2ea1a(%rip),%rdx        # 237610 <memcmp+0x1060>
  208bf6:	be 11 00 00 00       	mov    $0x11,%esi
  208bfb:	e8 60 a8 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c00:	0f 0b                	ud2    
  208c02:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208c07:	e8 64 14 00 00       	callq  20a070 <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E>
  208c0c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208c11:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208c16:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208c1b:	eb 97                	jmp    208bb4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x174>
    }
  208c1d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208c22:	48 81 c4 b8 20 00 00 	add    $0x20b8,%rsp
  208c29:	c3                   	retq   
  208c2a:	eb f1                	jmp    208c1d <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x1dd>
  208c2c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208c31:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  208c38:	c6 84 24 9e 20 00 00 	movb   $0x4,0x209e(%rsp)
  208c3f:	04 
  208c40:	0f b6 b4 24 9e 20 00 	movzbl 0x209e(%rsp),%esi
  208c47:	00 
  208c48:	e8 73 00 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208c4d:	48 89 04 24          	mov    %rax,(%rsp)
  208c51:	48 8b 04 24          	mov    (%rsp),%rax
  208c55:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208c5a:	e9 28 fe ff ff       	jmpq   208a87 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E+0x47>
  208c5f:	cc                   	int3   

0000000000208c60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208c60:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  208c67:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208c6c:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  208c73:	00 
        loop {
  208c74:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  208c7b:	00 
  208c7c:	c6 84 24 3f 01 00 00 	movb   $0x1,0x13f(%rsp)
  208c83:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208c84:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208c89:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208c8e:	e8 2d 00 02 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208c93:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208c98:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208c9e:	74 29                	je     208cc9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x69>
            match status {
  208ca0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208ca5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208caa:	48 83 e8 03          	sub    $0x3,%rax
  208cae:	0f 87 15 01 00 00    	ja     208dc9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x169>
  208cb4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208cb9:	48 8d 0d bc 76 ff ff 	lea    -0x8944(%rip),%rcx        # 20037c <str.0+0x7c>
  208cc0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208cc4:	48 01 c8             	add    %rcx,%rax
  208cc7:	ff e0                	jmpq   *%rax
  208cc9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208cce:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208cd3:	31 c0                	xor    %eax,%eax
  208cd5:	89 c6                	mov    %eax,%esi
  208cd7:	ba 01 00 00 00       	mov    $0x1,%edx
  208cdc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208ce1:	e8 ba fe 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208ce6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208ceb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208cf0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208cf5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208cfb:	75 a3                	jne    208ca0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x40>
  208cfd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208d02:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208d07:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208d0c:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  208d13:	00 
  208d14:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  208d1b:	00 
  208d1c:	e8 7f 2a 00 00       	callq  20b7a0 <_ZN4core3ops8function6FnOnce9call_once17hd8203fd94ba4d5e4E>
  208d21:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  208d26:	48 83 c7 01          	add    $0x1,%rdi
  208d2a:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  208d31:	00 
  208d32:	ba 68 00 00 00       	mov    $0x68,%edx
  208d37:	e8 24 d8 02 00       	callq  236560 <memcpy>
  208d3c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208d41:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  208d46:	48 83 c0 08          	add    $0x8,%rax
  208d4a:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  208d51:	00 
  208d52:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208d57:	eb 00                	jmp    208d59 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0xf9>
  208d59:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208d5e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208d63:	ba 69 00 00 00       	mov    $0x69,%edx
  208d68:	e8 f3 d7 02 00       	callq  236560 <memcpy>
  208d6d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208d72:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208d77:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208d7e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208d80:	c6 84 24 3d 01 00 00 	movb   $0x4,0x13d(%rsp)
  208d87:	04 
  208d88:	be 02 00 00 00       	mov    $0x2,%esi
  208d8d:	0f b6 94 24 3d 01 00 	movzbl 0x13d(%rsp),%edx
  208d94:	00 
  208d95:	e8 66 ff 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208d9a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208d9f:	e8 1c 13 00 00       	callq  20a0c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>
  208da4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208da9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208dae:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208db3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208db8:	e8 73 2b 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208dbd:	f6 84 24 3f 01 00 00 	testb  $0x1,0x13f(%rsp)
  208dc4:	01 
  208dc5:	75 6c                	jne    208e33 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1d3>
  208dc7:	eb 5d                	jmp    208e26 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1c6>
                _ => unsafe { unreachable() },
  208dc9:	e8 72 e9 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208dce:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208dd0:	48 8d 3d 9c 76 ff ff 	lea    -0x8964(%rip),%rdi        # 200473 <str.0+0x173>
  208dd7:	48 8d 15 4a e8 02 00 	lea    0x2e84a(%rip),%rdx        # 237628 <memcmp+0x1078>
  208dde:	be 28 00 00 00       	mov    $0x28,%esi
  208de3:	e8 78 a6 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208de8:	0f 0b                	ud2    
                    cpu_relax();
  208dea:	e8 a1 ff 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  208def:	eb 44                	jmp    208e35 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1d5>
                PANICKED => panic!("Once has panicked"),
  208df1:	48 8d 3d 14 76 ff ff 	lea    -0x89ec(%rip),%rdi        # 20040c <str.0+0x10c>
  208df8:	48 8d 15 11 e8 02 00 	lea    0x2e811(%rip),%rdx        # 237610 <memcmp+0x1060>
  208dff:	be 11 00 00 00       	mov    $0x11,%esi
  208e04:	e8 57 a6 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208e09:	0f 0b                	ud2    
  208e0b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  208e10:	e8 ab 12 00 00       	callq  20a0c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>
  208e15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208e1a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  208e1f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208e24:	eb 97                	jmp    208dbd <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x15d>
    }
  208e26:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208e2b:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  208e32:	c3                   	retq   
  208e33:	eb f1                	jmp    208e26 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x1c6>
  208e35:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  208e3a:	c6 84 24 3e 01 00 00 	movb   $0x4,0x13e(%rsp)
  208e41:	04 
  208e42:	0f b6 b4 24 3e 01 00 	movzbl 0x13e(%rsp),%esi
  208e49:	00 
  208e4a:	e8 71 fe 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208e4f:	48 89 04 24          	mov    %rax,(%rsp)
  208e53:	48 8b 04 24          	mov    (%rsp),%rax
  208e57:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208e5c:	e9 3f fe ff ff       	jmpq   208ca0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E+0x40>
  208e61:	cc                   	int3   
  208e62:	cc                   	int3   
  208e63:	cc                   	int3   
  208e64:	cc                   	int3   
  208e65:	cc                   	int3   
  208e66:	cc                   	int3   
  208e67:	cc                   	int3   
  208e68:	cc                   	int3   
  208e69:	cc                   	int3   
  208e6a:	cc                   	int3   
  208e6b:	cc                   	int3   
  208e6c:	cc                   	int3   
  208e6d:	cc                   	int3   
  208e6e:	cc                   	int3   
  208e6f:	cc                   	int3   

0000000000208e70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  208e70:	48 81 ec a8 10 00 00 	sub    $0x10a8,%rsp
  208e77:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208e7c:	48 89 bc 24 90 10 00 	mov    %rdi,0x1090(%rsp)
  208e83:	00 
        loop {
  208e84:	c6 84 24 8f 10 00 00 	movb   $0x0,0x108f(%rsp)
  208e8b:	00 
  208e8c:	c6 84 24 8f 10 00 00 	movb   $0x1,0x108f(%rsp)
  208e93:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  208e94:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  208e99:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  208e9e:	e8 1d fe 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  208ea3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  208ea8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208eae:	74 29                	je     208ed9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x69>
            match status {
  208eb0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  208eb5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208eba:	48 83 e8 03          	sub    $0x3,%rax
  208ebe:	0f 87 19 01 00 00    	ja     208fdd <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x16d>
  208ec4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  208ec9:	48 8d 0d bc 74 ff ff 	lea    -0x8b44(%rip),%rcx        # 20038c <str.0+0x8c>
  208ed0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  208ed4:	48 01 c8             	add    %rcx,%rax
  208ed7:	ff e0                	jmpq   *%rax
  208ed9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  208ede:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  208ee3:	31 c0                	xor    %eax,%eax
  208ee5:	89 c6                	mov    %eax,%esi
  208ee7:	ba 01 00 00 00       	mov    $0x1,%edx
  208eec:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  208ef1:	e8 aa fc 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  208ef6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208efb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208f00:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  208f05:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  208f0b:	75 a3                	jne    208eb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x40>
  208f0d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  208f12:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208f17:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  208f1c:	c6 84 24 8f 10 00 00 	movb   $0x0,0x108f(%rsp)
  208f23:	00 
  208f24:	48 8d bc 24 78 08 00 	lea    0x878(%rsp),%rdi
  208f2b:	00 
  208f2c:	e8 2f 28 00 00       	callq  20b760 <_ZN4core3ops8function6FnOnce9call_once17hc979a394b9036ee6E>
  208f31:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  208f36:	48 83 c7 08          	add    $0x8,%rdi
  208f3a:	48 8d b4 24 78 08 00 	lea    0x878(%rsp),%rsi
  208f41:	00 
  208f42:	ba 10 08 00 00       	mov    $0x810,%edx
  208f47:	e8 14 d6 02 00       	callq  236560 <memcpy>
  208f4c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  208f51:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  208f58:	00 00 
  208f5a:	48 83 c0 08          	add    $0x8,%rax
  208f5e:	48 89 84 24 a0 10 00 	mov    %rax,0x10a0(%rsp)
  208f65:	00 
  208f66:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208f6b:	eb 00                	jmp    208f6d <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0xfd>
  208f6d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  208f72:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  208f77:	ba 18 08 00 00       	mov    $0x818,%edx
  208f7c:	e8 df d5 02 00       	callq  236560 <memcpy>
  208f81:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  208f86:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  208f8b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  208f92:	00 00 
                self.state.store(status, Ordering::SeqCst);
  208f94:	c6 84 24 8d 10 00 00 	movb   $0x4,0x108d(%rsp)
  208f9b:	04 
  208f9c:	be 02 00 00 00       	mov    $0x2,%esi
  208fa1:	0f b6 94 24 8d 10 00 	movzbl 0x108d(%rsp),%edx
  208fa8:	00 
  208fa9:	e8 52 fd 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  208fae:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  208fb3:	e8 f8 0f 00 00       	callq  209fb0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>
  208fb8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208fbd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208fc2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  208fc7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  208fcc:	e8 5f 29 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  208fd1:	f6 84 24 8f 10 00 00 	testb  $0x1,0x108f(%rsp)
  208fd8:	01 
  208fd9:	75 6c                	jne    209047 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1d7>
  208fdb:	eb 5d                	jmp    20903a <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1ca>
                _ => unsafe { unreachable() },
  208fdd:	e8 5e e7 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  208fe2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  208fe4:	48 8d 3d 88 74 ff ff 	lea    -0x8b78(%rip),%rdi        # 200473 <str.0+0x173>
  208feb:	48 8d 15 36 e6 02 00 	lea    0x2e636(%rip),%rdx        # 237628 <memcmp+0x1078>
  208ff2:	be 28 00 00 00       	mov    $0x28,%esi
  208ff7:	e8 64 a4 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208ffc:	0f 0b                	ud2    
                    cpu_relax();
  208ffe:	e8 8d fd 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209003:	eb 44                	jmp    209049 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209005:	48 8d 3d 00 74 ff ff 	lea    -0x8c00(%rip),%rdi        # 20040c <str.0+0x10c>
  20900c:	48 8d 15 fd e5 02 00 	lea    0x2e5fd(%rip),%rdx        # 237610 <memcmp+0x1060>
  209013:	be 11 00 00 00       	mov    $0x11,%esi
  209018:	e8 43 a4 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20901d:	0f 0b                	ud2    
  20901f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209024:	e8 87 0f 00 00       	callq  209fb0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>
  209029:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20902e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209033:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209038:	eb 97                	jmp    208fd1 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x161>
    }
  20903a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20903f:	48 81 c4 a8 10 00 00 	add    $0x10a8,%rsp
  209046:	c3                   	retq   
  209047:	eb f1                	jmp    20903a <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x1ca>
  209049:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20904e:	c6 84 24 8e 10 00 00 	movb   $0x4,0x108e(%rsp)
  209055:	04 
  209056:	0f b6 b4 24 8e 10 00 	movzbl 0x108e(%rsp),%esi
  20905d:	00 
  20905e:	e8 5d fc 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209063:	48 89 04 24          	mov    %rax,(%rsp)
  209067:	48 8b 04 24          	mov    (%rsp),%rax
  20906b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209070:	e9 3b fe ff ff       	jmpq   208eb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE+0x40>
  209075:	cc                   	int3   
  209076:	cc                   	int3   
  209077:	cc                   	int3   
  209078:	cc                   	int3   
  209079:	cc                   	int3   
  20907a:	cc                   	int3   
  20907b:	cc                   	int3   
  20907c:	cc                   	int3   
  20907d:	cc                   	int3   
  20907e:	cc                   	int3   
  20907f:	cc                   	int3   

0000000000209080 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209080:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  209087:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20908c:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  209093:	00 
        loop {
  209094:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  20909b:	00 
  20909c:	c6 84 24 cf 00 00 00 	movb   $0x1,0xcf(%rsp)
  2090a3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2090a4:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  2090a9:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  2090ae:	e8 0d fc 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2090b3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  2090b8:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  2090be:	74 29                	je     2090e9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x69>
            match status {
  2090c0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2090c5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2090ca:	48 83 e8 03          	sub    $0x3,%rax
  2090ce:	0f 87 0c 01 00 00    	ja     2091e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x160>
  2090d4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2090d9:	48 8d 0d bc 72 ff ff 	lea    -0x8d44(%rip),%rcx        # 20039c <str.0+0x9c>
  2090e0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2090e4:	48 01 c8             	add    %rcx,%rax
  2090e7:	ff e0                	jmpq   *%rax
  2090e9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  2090ee:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2090f3:	31 c0                	xor    %eax,%eax
  2090f5:	89 c6                	mov    %eax,%esi
  2090f7:	ba 01 00 00 00       	mov    $0x1,%edx
  2090fc:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  209101:	e8 9a fa 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209106:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20910b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209110:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  209115:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  20911b:	75 a3                	jne    2090c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x40>
  20911d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209122:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209127:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20912c:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  209133:	00 
  209134:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20913b:	00 
  20913c:	e8 4f 24 00 00       	callq  20b590 <_ZN4core3ops8function6FnOnce9call_once17h35dfcc7c677b1963E>
  209141:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209146:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  20914d:	00 
  20914e:	ba 30 00 00 00       	mov    $0x30,%edx
  209153:	e8 08 d4 02 00       	callq  236560 <memcpy>
  209158:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20915d:	48 83 c0 08          	add    $0x8,%rax
  209161:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  209168:	00 
  209169:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20916e:	eb 00                	jmp    209170 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0xf0>
  209170:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  209175:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  20917a:	ba 30 00 00 00       	mov    $0x30,%edx
  20917f:	e8 dc d3 02 00       	callq  236560 <memcpy>
  209184:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  209189:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  20918e:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  209195:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209197:	c6 84 24 cd 00 00 00 	movb   $0x4,0xcd(%rsp)
  20919e:	04 
  20919f:	be 02 00 00 00       	mov    $0x2,%esi
  2091a4:	0f b6 94 24 cd 00 00 	movzbl 0xcd(%rsp),%edx
  2091ab:	00 
  2091ac:	e8 4f fb 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2091b1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  2091b6:	e8 65 12 00 00       	callq  20a420 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>
  2091bb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2091c0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2091c5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  2091ca:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2091cf:	e8 5c 27 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2091d4:	f6 84 24 cf 00 00 00 	testb  $0x1,0xcf(%rsp)
  2091db:	01 
  2091dc:	75 6c                	jne    20924a <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1ca>
  2091de:	eb 5d                	jmp    20923d <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1bd>
                _ => unsafe { unreachable() },
  2091e0:	e8 5b e5 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2091e5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2091e7:	48 8d 3d 85 72 ff ff 	lea    -0x8d7b(%rip),%rdi        # 200473 <str.0+0x173>
  2091ee:	48 8d 15 33 e4 02 00 	lea    0x2e433(%rip),%rdx        # 237628 <memcmp+0x1078>
  2091f5:	be 28 00 00 00       	mov    $0x28,%esi
  2091fa:	e8 61 a2 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2091ff:	0f 0b                	ud2    
                    cpu_relax();
  209201:	e8 8a fb 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209206:	eb 44                	jmp    20924c <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1cc>
                PANICKED => panic!("Once has panicked"),
  209208:	48 8d 3d fd 71 ff ff 	lea    -0x8e03(%rip),%rdi        # 20040c <str.0+0x10c>
  20920f:	48 8d 15 fa e3 02 00 	lea    0x2e3fa(%rip),%rdx        # 237610 <memcmp+0x1060>
  209216:	be 11 00 00 00       	mov    $0x11,%esi
  20921b:	e8 40 a2 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209220:	0f 0b                	ud2    
  209222:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209227:	e8 f4 11 00 00       	callq  20a420 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>
  20922c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209231:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209236:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20923b:	eb 97                	jmp    2091d4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x154>
    }
  20923d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209242:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  209249:	c3                   	retq   
  20924a:	eb f1                	jmp    20923d <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x1bd>
  20924c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209251:	c6 84 24 ce 00 00 00 	movb   $0x4,0xce(%rsp)
  209258:	04 
  209259:	0f b6 b4 24 ce 00 00 	movzbl 0xce(%rsp),%esi
  209260:	00 
  209261:	e8 5a fa 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209266:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20926b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209270:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209275:	e9 46 fe ff ff       	jmpq   2090c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h94ca2a99b8405a3fE+0x40>
  20927a:	cc                   	int3   
  20927b:	cc                   	int3   
  20927c:	cc                   	int3   
  20927d:	cc                   	int3   
  20927e:	cc                   	int3   
  20927f:	cc                   	int3   

0000000000209280 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209280:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  209287:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20928c:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  209293:	00 
        loop {
  209294:	c6 84 24 2f 01 00 00 	movb   $0x0,0x12f(%rsp)
  20929b:	00 
  20929c:	c6 84 24 2f 01 00 00 	movb   $0x1,0x12f(%rsp)
  2092a3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2092a4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2092a9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2092ae:	e8 0d fa 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2092b3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2092b8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2092be:	74 29                	je     2092e9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x69>
            match status {
  2092c0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2092c5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2092ca:	48 83 e8 03          	sub    $0x3,%rax
  2092ce:	0f 87 19 01 00 00    	ja     2093ed <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x16d>
  2092d4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2092d9:	48 8d 0d cc 70 ff ff 	lea    -0x8f34(%rip),%rcx        # 2003ac <str.0+0xac>
  2092e0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2092e4:	48 01 c8             	add    %rcx,%rax
  2092e7:	ff e0                	jmpq   *%rax
  2092e9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2092ee:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2092f3:	31 c0                	xor    %eax,%eax
  2092f5:	89 c6                	mov    %eax,%esi
  2092f7:	ba 01 00 00 00       	mov    $0x1,%edx
  2092fc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209301:	e8 9a f8 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209306:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20930b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209310:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209315:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20931b:	75 a3                	jne    2092c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x40>
  20931d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209322:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209327:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20932c:	c6 84 24 2f 01 00 00 	movb   $0x0,0x12f(%rsp)
  209333:	00 
  209334:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20933b:	00 
  20933c:	e8 cf 21 00 00       	callq  20b510 <_ZN4core3ops8function6FnOnce9call_once17h2a57aa7eac2aa15bE>
  209341:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209346:	48 83 c7 08          	add    $0x8,%rdi
  20934a:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  209351:	00 
  209352:	ba 60 00 00 00       	mov    $0x60,%edx
  209357:	e8 04 d2 02 00       	callq  236560 <memcpy>
  20935c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209361:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209368:	00 00 
  20936a:	48 83 c0 08          	add    $0x8,%rax
  20936e:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  209375:	00 
  209376:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20937b:	eb 00                	jmp    20937d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0xfd>
  20937d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209382:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209387:	ba 68 00 00 00       	mov    $0x68,%edx
  20938c:	e8 cf d1 02 00       	callq  236560 <memcpy>
  209391:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209396:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20939b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2093a2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2093a4:	c6 84 24 2d 01 00 00 	movb   $0x4,0x12d(%rsp)
  2093ab:	04 
  2093ac:	be 02 00 00 00       	mov    $0x2,%esi
  2093b1:	0f b6 94 24 2d 01 00 	movzbl 0x12d(%rsp),%edx
  2093b8:	00 
  2093b9:	e8 42 f9 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2093be:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2093c3:	e8 78 0e 00 00       	callq  20a240 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>
  2093c8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2093cd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2093d2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2093d7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2093dc:	e8 4f 25 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2093e1:	f6 84 24 2f 01 00 00 	testb  $0x1,0x12f(%rsp)
  2093e8:	01 
  2093e9:	75 6c                	jne    209457 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1d7>
  2093eb:	eb 5d                	jmp    20944a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1ca>
                _ => unsafe { unreachable() },
  2093ed:	e8 4e e3 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2093f2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2093f4:	48 8d 3d 78 70 ff ff 	lea    -0x8f88(%rip),%rdi        # 200473 <str.0+0x173>
  2093fb:	48 8d 15 26 e2 02 00 	lea    0x2e226(%rip),%rdx        # 237628 <memcmp+0x1078>
  209402:	be 28 00 00 00       	mov    $0x28,%esi
  209407:	e8 54 a0 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20940c:	0f 0b                	ud2    
                    cpu_relax();
  20940e:	e8 7d f9 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209413:	eb 44                	jmp    209459 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209415:	48 8d 3d f0 6f ff ff 	lea    -0x9010(%rip),%rdi        # 20040c <str.0+0x10c>
  20941c:	48 8d 15 ed e1 02 00 	lea    0x2e1ed(%rip),%rdx        # 237610 <memcmp+0x1060>
  209423:	be 11 00 00 00       	mov    $0x11,%esi
  209428:	e8 33 a0 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20942d:	0f 0b                	ud2    
  20942f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209434:	e8 07 0e 00 00       	callq  20a240 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>
  209439:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20943e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209443:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209448:	eb 97                	jmp    2093e1 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x161>
    }
  20944a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20944f:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  209456:	c3                   	retq   
  209457:	eb f1                	jmp    20944a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x1ca>
  209459:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20945e:	c6 84 24 2e 01 00 00 	movb   $0x4,0x12e(%rsp)
  209465:	04 
  209466:	0f b6 b4 24 2e 01 00 	movzbl 0x12e(%rsp),%esi
  20946d:	00 
  20946e:	e8 4d f8 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209473:	48 89 04 24          	mov    %rax,(%rsp)
  209477:	48 8b 04 24          	mov    (%rsp),%rax
  20947b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209480:	e9 3b fe ff ff       	jmpq   2092c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E+0x40>
  209485:	cc                   	int3   
  209486:	cc                   	int3   
  209487:	cc                   	int3   
  209488:	cc                   	int3   
  209489:	cc                   	int3   
  20948a:	cc                   	int3   
  20948b:	cc                   	int3   
  20948c:	cc                   	int3   
  20948d:	cc                   	int3   
  20948e:	cc                   	int3   
  20948f:	cc                   	int3   

0000000000209490 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209490:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  209497:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20949c:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  2094a3:	00 
        loop {
  2094a4:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  2094ab:	00 
  2094ac:	c6 84 24 df 00 00 00 	movb   $0x1,0xdf(%rsp)
  2094b3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2094b4:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  2094b9:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  2094be:	e8 fd f7 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2094c3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  2094c8:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  2094ce:	74 29                	je     2094f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x69>
            match status {
  2094d0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2094d5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2094da:	48 83 e8 03          	sub    $0x3,%rax
  2094de:	0f 87 0c 01 00 00    	ja     2095f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x160>
  2094e4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2094e9:	48 8d 0d cc 6e ff ff 	lea    -0x9134(%rip),%rcx        # 2003bc <str.0+0xbc>
  2094f0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2094f4:	48 01 c8             	add    %rcx,%rax
  2094f7:	ff e0                	jmpq   *%rax
  2094f9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  2094fe:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209503:	31 c0                	xor    %eax,%eax
  209505:	89 c6                	mov    %eax,%esi
  209507:	ba 01 00 00 00       	mov    $0x1,%edx
  20950c:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  209511:	e8 8a f6 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209516:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20951b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209520:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  209525:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  20952b:	75 a3                	jne    2094d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x40>
  20952d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209532:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209537:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20953c:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  209543:	00 
  209544:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20954b:	00 
  20954c:	e8 3f 21 00 00       	callq  20b690 <_ZN4core3ops8function6FnOnce9call_once17h904af9fc8ad763bdE>
  209551:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209556:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  20955d:	00 
  20955e:	ba 38 00 00 00       	mov    $0x38,%edx
  209563:	e8 f8 cf 02 00       	callq  236560 <memcpy>
  209568:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20956d:	48 83 c0 08          	add    $0x8,%rax
  209571:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  209578:	00 
  209579:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20957e:	eb 00                	jmp    209580 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0xf0>
  209580:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  209585:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  20958a:	ba 38 00 00 00       	mov    $0x38,%edx
  20958f:	e8 cc cf 02 00       	callq  236560 <memcpy>
  209594:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  209599:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  20959e:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  2095a5:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2095a7:	c6 84 24 dd 00 00 00 	movb   $0x4,0xdd(%rsp)
  2095ae:	04 
  2095af:	be 02 00 00 00       	mov    $0x2,%esi
  2095b4:	0f b6 94 24 dd 00 00 	movzbl 0xdd(%rsp),%edx
  2095bb:	00 
  2095bc:	e8 3f f7 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2095c1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  2095c6:	e8 35 0d 00 00       	callq  20a300 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>
  2095cb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2095d0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2095d5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  2095da:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2095df:	e8 4c 23 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2095e4:	f6 84 24 df 00 00 00 	testb  $0x1,0xdf(%rsp)
  2095eb:	01 
  2095ec:	75 6c                	jne    20965a <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1ca>
  2095ee:	eb 5d                	jmp    20964d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1bd>
                _ => unsafe { unreachable() },
  2095f0:	e8 4b e1 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  2095f5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2095f7:	48 8d 3d 75 6e ff ff 	lea    -0x918b(%rip),%rdi        # 200473 <str.0+0x173>
  2095fe:	48 8d 15 23 e0 02 00 	lea    0x2e023(%rip),%rdx        # 237628 <memcmp+0x1078>
  209605:	be 28 00 00 00       	mov    $0x28,%esi
  20960a:	e8 51 9e 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20960f:	0f 0b                	ud2    
                    cpu_relax();
  209611:	e8 7a f7 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209616:	eb 44                	jmp    20965c <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1cc>
                PANICKED => panic!("Once has panicked"),
  209618:	48 8d 3d ed 6d ff ff 	lea    -0x9213(%rip),%rdi        # 20040c <str.0+0x10c>
  20961f:	48 8d 15 ea df 02 00 	lea    0x2dfea(%rip),%rdx        # 237610 <memcmp+0x1060>
  209626:	be 11 00 00 00       	mov    $0x11,%esi
  20962b:	e8 30 9e 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209630:	0f 0b                	ud2    
  209632:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209637:	e8 c4 0c 00 00       	callq  20a300 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>
  20963c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209641:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209646:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20964b:	eb 97                	jmp    2095e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x154>
    }
  20964d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209652:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  209659:	c3                   	retq   
  20965a:	eb f1                	jmp    20964d <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x1bd>
  20965c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209661:	c6 84 24 de 00 00 00 	movb   $0x4,0xde(%rsp)
  209668:	04 
  209669:	0f b6 b4 24 de 00 00 	movzbl 0xde(%rsp),%esi
  209670:	00 
  209671:	e8 4a f6 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209676:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20967b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209680:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209685:	e9 46 fe ff ff       	jmpq   2094d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE+0x40>
  20968a:	cc                   	int3   
  20968b:	cc                   	int3   
  20968c:	cc                   	int3   
  20968d:	cc                   	int3   
  20968e:	cc                   	int3   
  20968f:	cc                   	int3   

0000000000209690 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209690:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  209697:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20969c:	48 89 bc 24 00 01 00 	mov    %rdi,0x100(%rsp)
  2096a3:	00 
        loop {
  2096a4:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  2096ab:	00 
  2096ac:	c6 84 24 ff 00 00 00 	movb   $0x1,0xff(%rsp)
  2096b3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2096b4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2096b9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2096be:	e8 fd f5 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2096c3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2096c8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2096ce:	74 29                	je     2096f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x69>
            match status {
  2096d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2096d5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2096da:	48 83 e8 03          	sub    $0x3,%rax
  2096de:	0f 87 19 01 00 00    	ja     2097fd <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x16d>
  2096e4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2096e9:	48 8d 0d dc 6c ff ff 	lea    -0x9324(%rip),%rcx        # 2003cc <str.0+0xcc>
  2096f0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2096f4:	48 01 c8             	add    %rcx,%rax
  2096f7:	ff e0                	jmpq   *%rax
  2096f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2096fe:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209703:	31 c0                	xor    %eax,%eax
  209705:	89 c6                	mov    %eax,%esi
  209707:	ba 01 00 00 00       	mov    $0x1,%edx
  20970c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209711:	e8 8a f4 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209716:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20971b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209720:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209725:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20972b:	75 a3                	jne    2096d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x40>
  20972d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209732:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209737:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20973c:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  209743:	00 
  209744:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20974b:	00 
  20974c:	e8 5f 1f 00 00       	callq  20b6b0 <_ZN4core3ops8function6FnOnce9call_once17h9b71252915a475a7E>
  209751:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209756:	48 83 c7 08          	add    $0x8,%rdi
  20975a:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  209761:	00 
  209762:	ba 48 00 00 00       	mov    $0x48,%edx
  209767:	e8 f4 cd 02 00       	callq  236560 <memcpy>
  20976c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209771:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209778:	00 00 
  20977a:	48 83 c0 08          	add    $0x8,%rax
  20977e:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  209785:	00 
  209786:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20978b:	eb 00                	jmp    20978d <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0xfd>
  20978d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209792:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209797:	ba 50 00 00 00       	mov    $0x50,%edx
  20979c:	e8 bf cd 02 00       	callq  236560 <memcpy>
  2097a1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2097a6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2097ab:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2097b2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2097b4:	c6 84 24 fd 00 00 00 	movb   $0x4,0xfd(%rsp)
  2097bb:	04 
  2097bc:	be 02 00 00 00       	mov    $0x2,%esi
  2097c1:	0f b6 94 24 fd 00 00 	movzbl 0xfd(%rsp),%edx
  2097c8:	00 
  2097c9:	e8 32 f5 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2097ce:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2097d3:	e8 18 07 00 00       	callq  209ef0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>
  2097d8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2097dd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2097e2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2097e7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2097ec:	e8 3f 21 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  2097f1:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  2097f8:	01 
  2097f9:	75 6c                	jne    209867 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1d7>
  2097fb:	eb 5d                	jmp    20985a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1ca>
                _ => unsafe { unreachable() },
  2097fd:	e8 3e df 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209802:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209804:	48 8d 3d 68 6c ff ff 	lea    -0x9398(%rip),%rdi        # 200473 <str.0+0x173>
  20980b:	48 8d 15 16 de 02 00 	lea    0x2de16(%rip),%rdx        # 237628 <memcmp+0x1078>
  209812:	be 28 00 00 00       	mov    $0x28,%esi
  209817:	e8 44 9c 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20981c:	0f 0b                	ud2    
                    cpu_relax();
  20981e:	e8 6d f5 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209823:	eb 44                	jmp    209869 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209825:	48 8d 3d e0 6b ff ff 	lea    -0x9420(%rip),%rdi        # 20040c <str.0+0x10c>
  20982c:	48 8d 15 dd dd 02 00 	lea    0x2dddd(%rip),%rdx        # 237610 <memcmp+0x1060>
  209833:	be 11 00 00 00       	mov    $0x11,%esi
  209838:	e8 23 9c 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20983d:	0f 0b                	ud2    
  20983f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209844:	e8 a7 06 00 00       	callq  209ef0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>
  209849:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20984e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209853:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209858:	eb 97                	jmp    2097f1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x161>
    }
  20985a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20985f:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  209866:	c3                   	retq   
  209867:	eb f1                	jmp    20985a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x1ca>
  209869:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20986e:	c6 84 24 fe 00 00 00 	movb   $0x4,0xfe(%rsp)
  209875:	04 
  209876:	0f b6 b4 24 fe 00 00 	movzbl 0xfe(%rsp),%esi
  20987d:	00 
  20987e:	e8 3d f4 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209883:	48 89 04 24          	mov    %rax,(%rsp)
  209887:	48 8b 04 24          	mov    (%rsp),%rax
  20988b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209890:	e9 3b fe ff ff       	jmpq   2096d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E+0x40>
  209895:	cc                   	int3   
  209896:	cc                   	int3   
  209897:	cc                   	int3   
  209898:	cc                   	int3   
  209899:	cc                   	int3   
  20989a:	cc                   	int3   
  20989b:	cc                   	int3   
  20989c:	cc                   	int3   
  20989d:	cc                   	int3   
  20989e:	cc                   	int3   
  20989f:	cc                   	int3   

00000000002098a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2098a0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  2098a7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2098ac:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  2098b3:	00 
        loop {
  2098b4:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  2098bb:	00 
  2098bc:	c6 84 24 0f 01 00 00 	movb   $0x1,0x10f(%rsp)
  2098c3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2098c4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2098c9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2098ce:	e8 ed f3 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2098d3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2098d8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2098de:	74 29                	je     209909 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x69>
            match status {
  2098e0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2098e5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2098ea:	48 83 e8 03          	sub    $0x3,%rax
  2098ee:	0f 87 19 01 00 00    	ja     209a0d <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x16d>
  2098f4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2098f9:	48 8d 0d dc 6a ff ff 	lea    -0x9524(%rip),%rcx        # 2003dc <str.0+0xdc>
  209900:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209904:	48 01 c8             	add    %rcx,%rax
  209907:	ff e0                	jmpq   *%rax
  209909:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  20990e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209913:	31 c0                	xor    %eax,%eax
  209915:	89 c6                	mov    %eax,%esi
  209917:	ba 01 00 00 00       	mov    $0x1,%edx
  20991c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209921:	e8 7a f2 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209926:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20992b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209930:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209935:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20993b:	75 a3                	jne    2098e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x40>
  20993d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209942:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209947:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20994c:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  209953:	00 
  209954:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20995b:	00 
  20995c:	e8 2f 1b 00 00       	callq  20b490 <_ZN4core3ops8function6FnOnce9call_once17h113bbf498259d8e9E>
  209961:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209966:	48 83 c7 08          	add    $0x8,%rdi
  20996a:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  209971:	00 
  209972:	ba 50 00 00 00       	mov    $0x50,%edx
  209977:	e8 e4 cb 02 00       	callq  236560 <memcpy>
  20997c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209981:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209988:	00 00 
  20998a:	48 83 c0 08          	add    $0x8,%rax
  20998e:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  209995:	00 
  209996:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20999b:	eb 00                	jmp    20999d <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0xfd>
  20999d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2099a2:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  2099a7:	ba 58 00 00 00       	mov    $0x58,%edx
  2099ac:	e8 af cb 02 00       	callq  236560 <memcpy>
  2099b1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2099b6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2099bb:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2099c2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2099c4:	c6 84 24 0d 01 00 00 	movb   $0x4,0x10d(%rsp)
  2099cb:	04 
  2099cc:	be 02 00 00 00       	mov    $0x2,%esi
  2099d1:	0f b6 94 24 0d 01 00 	movzbl 0x10d(%rsp),%edx
  2099d8:	00 
  2099d9:	e8 22 f3 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  2099de:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2099e3:	e8 b8 08 00 00       	callq  20a2a0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>
  2099e8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2099ed:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2099f2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2099f7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2099fc:	e8 2f 1f 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209a01:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  209a08:	01 
  209a09:	75 6c                	jne    209a77 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1d7>
  209a0b:	eb 5d                	jmp    209a6a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1ca>
                _ => unsafe { unreachable() },
  209a0d:	e8 2e dd 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209a12:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209a14:	48 8d 3d 58 6a ff ff 	lea    -0x95a8(%rip),%rdi        # 200473 <str.0+0x173>
  209a1b:	48 8d 15 06 dc 02 00 	lea    0x2dc06(%rip),%rdx        # 237628 <memcmp+0x1078>
  209a22:	be 28 00 00 00       	mov    $0x28,%esi
  209a27:	e8 34 9a 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209a2c:	0f 0b                	ud2    
                    cpu_relax();
  209a2e:	e8 5d f3 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209a33:	eb 44                	jmp    209a79 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209a35:	48 8d 3d d0 69 ff ff 	lea    -0x9630(%rip),%rdi        # 20040c <str.0+0x10c>
  209a3c:	48 8d 15 cd db 02 00 	lea    0x2dbcd(%rip),%rdx        # 237610 <memcmp+0x1060>
  209a43:	be 11 00 00 00       	mov    $0x11,%esi
  209a48:	e8 13 9a 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209a4d:	0f 0b                	ud2    
  209a4f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209a54:	e8 47 08 00 00       	callq  20a2a0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>
  209a59:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209a5e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209a63:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209a68:	eb 97                	jmp    209a01 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x161>
    }
  209a6a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209a6f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  209a76:	c3                   	retq   
  209a77:	eb f1                	jmp    209a6a <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x1ca>
  209a79:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209a7e:	c6 84 24 0e 01 00 00 	movb   $0x4,0x10e(%rsp)
  209a85:	04 
  209a86:	0f b6 b4 24 0e 01 00 	movzbl 0x10e(%rsp),%esi
  209a8d:	00 
  209a8e:	e8 2d f2 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209a93:	48 89 04 24          	mov    %rax,(%rsp)
  209a97:	48 8b 04 24          	mov    (%rsp),%rax
  209a9b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209aa0:	e9 3b fe ff ff       	jmpq   2098e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E+0x40>
  209aa5:	cc                   	int3   
  209aa6:	cc                   	int3   
  209aa7:	cc                   	int3   
  209aa8:	cc                   	int3   
  209aa9:	cc                   	int3   
  209aaa:	cc                   	int3   
  209aab:	cc                   	int3   
  209aac:	cc                   	int3   
  209aad:	cc                   	int3   
  209aae:	cc                   	int3   
  209aaf:	cc                   	int3   

0000000000209ab0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209ab0:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  209ab7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  209abc:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  209ac3:	00 
        loop {
  209ac4:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  209acb:	00 
  209acc:	c6 84 24 8f 00 00 00 	movb   $0x1,0x8f(%rsp)
  209ad3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209ad4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209ad9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  209ade:	e8 dd f1 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209ae3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209ae8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209aee:	74 29                	je     209b19 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x69>
            match status {
  209af0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209af5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209afa:	48 83 e8 03          	sub    $0x3,%rax
  209afe:	0f 87 42 01 00 00    	ja     209c46 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x196>
  209b04:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209b09:	48 8d 0d dc 68 ff ff 	lea    -0x9724(%rip),%rcx        # 2003ec <str.0+0xec>
  209b10:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209b14:	48 01 c8             	add    %rcx,%rax
  209b17:	ff e0                	jmpq   *%rax
  209b19:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  209b1e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209b23:	31 c0                	xor    %eax,%eax
  209b25:	89 c6                	mov    %eax,%esi
  209b27:	ba 01 00 00 00       	mov    $0x1,%edx
  209b2c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209b31:	e8 6a f0 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209b36:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209b3b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209b40:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209b45:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209b4b:	75 a3                	jne    209af0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x40>
  209b4d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209b52:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209b57:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209b5c:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  209b63:	00 
  209b64:	e8 67 1b 00 00       	callq  20b6d0 <_ZN4core3ops8function6FnOnce9call_once17ha33d620dcb6c3e32E>
  209b69:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  209b70:	00 
  209b71:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  209b78:	00 
  209b79:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  209b80:	00 
  209b81:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  209b86:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  209b8d:	00 
  209b8e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  209b95:	00 
  209b96:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209b9b:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  209ba0:	48 89 4c 24 64       	mov    %rcx,0x64(%rsp)
  209ba5:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  209bac:	00 
  209bad:	48 89 4c 24 6c       	mov    %rcx,0x6c(%rsp)
  209bb2:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
  209bb9:	00 
  209bba:	48 83 c0 08          	add    $0x8,%rax
  209bbe:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  209bc5:	00 
  209bc6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209bcb:	eb 00                	jmp    209bcd <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x11d>
  209bcd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  209bd2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209bd7:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  209bdc:	48 89 08             	mov    %rcx,(%rax)
  209bdf:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  209be4:	48 89 48 08          	mov    %rcx,0x8(%rax)
  209be8:	8b 4c 24 70          	mov    0x70(%rsp),%ecx
  209bec:	89 48 10             	mov    %ecx,0x10(%rax)
                finish.panicked = false;
  209bef:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209bf4:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209bfb:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209bfd:	c6 84 24 8d 00 00 00 	movb   $0x4,0x8d(%rsp)
  209c04:	04 
  209c05:	be 02 00 00 00       	mov    $0x2,%esi
  209c0a:	0f b6 94 24 8d 00 00 	movzbl 0x8d(%rsp),%edx
  209c11:	00 
  209c12:	e8 e9 f0 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209c17:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209c1c:	e8 3f 07 00 00       	callq  20a360 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>
  209c21:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209c26:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209c2b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209c30:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209c35:	e8 f6 1c 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209c3a:	f6 84 24 8f 00 00 00 	testb  $0x1,0x8f(%rsp)
  209c41:	01 
  209c42:	75 6c                	jne    209cb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x200>
  209c44:	eb 5d                	jmp    209ca3 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x1f3>
                _ => unsafe { unreachable() },
  209c46:	e8 f5 da 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209c4b:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209c4d:	48 8d 3d 1f 68 ff ff 	lea    -0x97e1(%rip),%rdi        # 200473 <str.0+0x173>
  209c54:	48 8d 15 cd d9 02 00 	lea    0x2d9cd(%rip),%rdx        # 237628 <memcmp+0x1078>
  209c5b:	be 28 00 00 00       	mov    $0x28,%esi
  209c60:	e8 fb 97 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209c65:	0f 0b                	ud2    
                    cpu_relax();
  209c67:	e8 24 f1 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209c6c:	eb 44                	jmp    209cb2 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x202>
                PANICKED => panic!("Once has panicked"),
  209c6e:	48 8d 3d 97 67 ff ff 	lea    -0x9869(%rip),%rdi        # 20040c <str.0+0x10c>
  209c75:	48 8d 15 94 d9 02 00 	lea    0x2d994(%rip),%rdx        # 237610 <memcmp+0x1060>
  209c7c:	be 11 00 00 00       	mov    $0x11,%esi
  209c81:	e8 da 97 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209c86:	0f 0b                	ud2    
  209c88:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209c8d:	e8 ce 06 00 00       	callq  20a360 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>
  209c92:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209c97:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209c9c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209ca1:	eb 97                	jmp    209c3a <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x18a>
    }
  209ca3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209ca8:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  209caf:	c3                   	retq   
  209cb0:	eb f1                	jmp    209ca3 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x1f3>
  209cb2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209cb7:	c6 84 24 8e 00 00 00 	movb   $0x4,0x8e(%rsp)
  209cbe:	04 
  209cbf:	0f b6 b4 24 8e 00 00 	movzbl 0x8e(%rsp),%esi
  209cc6:	00 
  209cc7:	e8 f4 ef 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209ccc:	48 89 04 24          	mov    %rax,(%rsp)
  209cd0:	48 8b 04 24          	mov    (%rsp),%rax
  209cd4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209cd9:	e9 12 fe ff ff       	jmpq   209af0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E+0x40>
  209cde:	cc                   	int3   
  209cdf:	cc                   	int3   

0000000000209ce0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  209ce0:	48 81 ec b8 03 00 00 	sub    $0x3b8,%rsp
  209ce7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  209cec:	48 89 bc 24 a0 03 00 	mov    %rdi,0x3a0(%rsp)
  209cf3:	00 
        loop {
  209cf4:	c6 84 24 9f 03 00 00 	movb   $0x0,0x39f(%rsp)
  209cfb:	00 
  209cfc:	c6 84 24 9f 03 00 00 	movb   $0x1,0x39f(%rsp)
  209d03:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  209d04:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  209d09:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  209d0e:	e8 ad ef 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209d13:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  209d18:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209d1e:	74 29                	je     209d49 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x69>
            match status {
  209d20:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209d25:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209d2a:	48 83 e8 03          	sub    $0x3,%rax
  209d2e:	0f 87 19 01 00 00    	ja     209e4d <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x16d>
  209d34:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209d39:	48 8d 0d bc 66 ff ff 	lea    -0x9944(%rip),%rcx        # 2003fc <str.0+0xfc>
  209d40:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209d44:	48 01 c8             	add    %rcx,%rax
  209d47:	ff e0                	jmpq   *%rax
  209d49:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  209d4e:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  209d53:	31 c0                	xor    %eax,%eax
  209d55:	89 c6                	mov    %eax,%esi
  209d57:	ba 01 00 00 00       	mov    $0x1,%edx
  209d5c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  209d61:	e8 3a ee 01 00       	callq  228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>
  209d66:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209d6b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209d70:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  209d75:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  209d7b:	75 a3                	jne    209d20 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x40>
  209d7d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  209d82:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209d87:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  209d8c:	c6 84 24 9f 03 00 00 	movb   $0x0,0x39f(%rsp)
  209d93:	00 
  209d94:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  209d9b:	00 
  209d9c:	e8 af 18 00 00       	callq  20b650 <_ZN4core3ops8function6FnOnce9call_once17h818c130c4421a1d0E>
  209da1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  209da6:	48 83 c7 08          	add    $0x8,%rdi
  209daa:	48 8d b4 24 00 02 00 	lea    0x200(%rsp),%rsi
  209db1:	00 
  209db2:	ba 98 01 00 00       	mov    $0x198,%edx
  209db7:	e8 a4 c7 02 00       	callq  236560 <memcpy>
  209dbc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209dc1:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  209dc8:	00 00 
  209dca:	48 83 c0 08          	add    $0x8,%rax
  209dce:	48 89 84 24 b0 03 00 	mov    %rax,0x3b0(%rsp)
  209dd5:	00 
  209dd6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209ddb:	eb 00                	jmp    209ddd <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0xfd>
  209ddd:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  209de2:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  209de7:	ba a0 01 00 00       	mov    $0x1a0,%edx
  209dec:	e8 6f c7 02 00       	callq  236560 <memcpy>
  209df1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  209df6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  209dfb:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  209e02:	00 00 
                self.state.store(status, Ordering::SeqCst);
  209e04:	c6 84 24 9d 03 00 00 	movb   $0x4,0x39d(%rsp)
  209e0b:	04 
  209e0c:	be 02 00 00 00       	mov    $0x2,%esi
  209e11:	0f b6 94 24 9d 03 00 	movzbl 0x39d(%rsp),%edx
  209e18:	00 
  209e19:	e8 e2 ee 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
  209e1e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  209e23:	e8 e8 01 00 00       	callq  20a010 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>
  209e28:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209e2d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209e32:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  209e37:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209e3c:	e8 ef 1a 00 00       	callq  20b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>
    }
  209e41:	f6 84 24 9f 03 00 00 	testb  $0x1,0x39f(%rsp)
  209e48:	01 
  209e49:	75 6c                	jne    209eb7 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1d7>
  209e4b:	eb 5d                	jmp    209eaa <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1ca>
                _ => unsafe { unreachable() },
  209e4d:	e8 ee d8 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209e52:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  209e54:	48 8d 3d 18 66 ff ff 	lea    -0x99e8(%rip),%rdi        # 200473 <str.0+0x173>
  209e5b:	48 8d 15 c6 d7 02 00 	lea    0x2d7c6(%rip),%rdx        # 237628 <memcmp+0x1078>
  209e62:	be 28 00 00 00       	mov    $0x28,%esi
  209e67:	e8 f4 95 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209e6c:	0f 0b                	ud2    
                    cpu_relax();
  209e6e:	e8 1d ef 01 00       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  209e73:	eb 44                	jmp    209eb9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  209e75:	48 8d 3d 90 65 ff ff 	lea    -0x9a70(%rip),%rdi        # 20040c <str.0+0x10c>
  209e7c:	48 8d 15 8d d7 02 00 	lea    0x2d78d(%rip),%rdx        # 237610 <memcmp+0x1060>
  209e83:	be 11 00 00 00       	mov    $0x11,%esi
  209e88:	e8 d3 95 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209e8d:	0f 0b                	ud2    
  209e8f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  209e94:	e8 77 01 00 00       	callq  20a010 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>
  209e99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209e9e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209ea3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209ea8:	eb 97                	jmp    209e41 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x161>
    }
  209eaa:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209eaf:	48 81 c4 b8 03 00 00 	add    $0x3b8,%rsp
  209eb6:	c3                   	retq   
  209eb7:	eb f1                	jmp    209eaa <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x1ca>
  209eb9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  209ebe:	c6 84 24 9e 03 00 00 	movb   $0x4,0x39e(%rsp)
  209ec5:	04 
  209ec6:	0f b6 b4 24 9e 03 00 	movzbl 0x39e(%rsp),%esi
  209ecd:	00 
  209ece:	e8 ed ed 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  209ed3:	48 89 04 24          	mov    %rax,(%rsp)
  209ed7:	48 8b 04 24          	mov    (%rsp),%rax
  209edb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209ee0:	e9 3b fe ff ff       	jmpq   209d20 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE+0x40>
  209ee5:	cc                   	int3   
  209ee6:	cc                   	int3   
  209ee7:	cc                   	int3   
  209ee8:	cc                   	int3   
  209ee9:	cc                   	int3   
  209eea:	cc                   	int3   
  209eeb:	cc                   	int3   
  209eec:	cc                   	int3   
  209eed:	cc                   	int3   
  209eee:	cc                   	int3   
  209eef:	cc                   	int3   

0000000000209ef0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E>:
    fn force_get<'a>(&'a self) -> &'a T {
  209ef0:	48 83 ec 28          	sub    $0x28,%rsp
  209ef4:	48 89 f8             	mov    %rdi,%rax
  209ef7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209efc:	48 83 c0 08          	add    $0x8,%rax
  209f00:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209f05:	48 89 04 24          	mov    %rax,(%rsp)
  209f09:	48 8b 3c 24          	mov    (%rsp),%rdi
  209f0d:	e8 be 5b 00 00       	callq  20fad0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E>
  209f12:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209f17:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209f1c:	48 85 c0             	test   %rax,%rax
  209f1f:	0f 95 c0             	setne  %al
  209f22:	0f b6 c0             	movzbl %al,%eax
  209f25:	74 06                	je     209f2d <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x3d>
  209f27:	eb 00                	jmp    209f29 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x39>
  209f29:	eb 09                	jmp    209f34 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2a8c61e85a9b8965E+0x44>
  209f2b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209f2d:	e8 0e d8 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209f32:	0f 0b                	ud2    
            Some(p) => p,
  209f34:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209f39:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209f3e:	48 83 c4 28          	add    $0x28,%rsp
  209f42:	c3                   	retq   
  209f43:	cc                   	int3   
  209f44:	cc                   	int3   
  209f45:	cc                   	int3   
  209f46:	cc                   	int3   
  209f47:	cc                   	int3   
  209f48:	cc                   	int3   
  209f49:	cc                   	int3   
  209f4a:	cc                   	int3   
  209f4b:	cc                   	int3   
  209f4c:	cc                   	int3   
  209f4d:	cc                   	int3   
  209f4e:	cc                   	int3   
  209f4f:	cc                   	int3   

0000000000209f50 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E>:
    fn force_get<'a>(&'a self) -> &'a T {
  209f50:	48 83 ec 28          	sub    $0x28,%rsp
  209f54:	48 89 f8             	mov    %rdi,%rax
  209f57:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209f5c:	48 83 c0 08          	add    $0x8,%rax
  209f60:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209f65:	48 89 04 24          	mov    %rax,(%rsp)
  209f69:	48 8b 3c 24          	mov    (%rsp),%rdi
  209f6d:	e8 be 5f 00 00       	callq  20ff30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E>
  209f72:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209f77:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209f7c:	48 85 c0             	test   %rax,%rax
  209f7f:	0f 95 c0             	setne  %al
  209f82:	0f b6 c0             	movzbl %al,%eax
  209f85:	74 06                	je     209f8d <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x3d>
  209f87:	eb 00                	jmp    209f89 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x39>
  209f89:	eb 09                	jmp    209f94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h34e6487dc76385d6E+0x44>
  209f8b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209f8d:	e8 ae d7 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209f92:	0f 0b                	ud2    
            Some(p) => p,
  209f94:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209f99:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209f9e:	48 83 c4 28          	add    $0x28,%rsp
  209fa2:	c3                   	retq   
  209fa3:	cc                   	int3   
  209fa4:	cc                   	int3   
  209fa5:	cc                   	int3   
  209fa6:	cc                   	int3   
  209fa7:	cc                   	int3   
  209fa8:	cc                   	int3   
  209fa9:	cc                   	int3   
  209faa:	cc                   	int3   
  209fab:	cc                   	int3   
  209fac:	cc                   	int3   
  209fad:	cc                   	int3   
  209fae:	cc                   	int3   
  209faf:	cc                   	int3   

0000000000209fb0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE>:
    fn force_get<'a>(&'a self) -> &'a T {
  209fb0:	48 83 ec 28          	sub    $0x28,%rsp
  209fb4:	48 89 f8             	mov    %rdi,%rax
  209fb7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  209fbc:	48 83 c0 08          	add    $0x8,%rax
  209fc0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209fc5:	48 89 04 24          	mov    %rax,(%rsp)
  209fc9:	48 8b 3c 24          	mov    (%rsp),%rdi
  209fcd:	e8 5e 5a 00 00       	callq  20fa30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E>
  209fd2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209fd7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209fdc:	48 85 c0             	test   %rax,%rax
  209fdf:	0f 95 c0             	setne  %al
  209fe2:	0f b6 c0             	movzbl %al,%eax
  209fe5:	74 06                	je     209fed <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x3d>
  209fe7:	eb 00                	jmp    209fe9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x39>
  209fe9:	eb 09                	jmp    209ff4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h43bface2ec8aaafdE+0x44>
  209feb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  209fed:	e8 4e d7 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  209ff2:	0f 0b                	ud2    
            Some(p) => p,
  209ff4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209ff9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  209ffe:	48 83 c4 28          	add    $0x28,%rsp
  20a002:	c3                   	retq   
  20a003:	cc                   	int3   
  20a004:	cc                   	int3   
  20a005:	cc                   	int3   
  20a006:	cc                   	int3   
  20a007:	cc                   	int3   
  20a008:	cc                   	int3   
  20a009:	cc                   	int3   
  20a00a:	cc                   	int3   
  20a00b:	cc                   	int3   
  20a00c:	cc                   	int3   
  20a00d:	cc                   	int3   
  20a00e:	cc                   	int3   
  20a00f:	cc                   	int3   

000000000020a010 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a010:	48 83 ec 28          	sub    $0x28,%rsp
  20a014:	48 89 f8             	mov    %rdi,%rax
  20a017:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a01c:	48 83 c0 08          	add    $0x8,%rax
  20a020:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a025:	48 89 04 24          	mov    %rax,(%rsp)
  20a029:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a02d:	e8 3e 5b 00 00       	callq  20fb70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E>
  20a032:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a037:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a03c:	48 85 c0             	test   %rax,%rax
  20a03f:	0f 95 c0             	setne  %al
  20a042:	0f b6 c0             	movzbl %al,%eax
  20a045:	74 06                	je     20a04d <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x3d>
  20a047:	eb 00                	jmp    20a049 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x39>
  20a049:	eb 09                	jmp    20a054 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f8487ad448157bfE+0x44>
  20a04b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a04d:	e8 ee d6 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a052:	0f 0b                	ud2    
            Some(p) => p,
  20a054:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a059:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a05e:	48 83 c4 28          	add    $0x28,%rsp
  20a062:	c3                   	retq   
  20a063:	cc                   	int3   
  20a064:	cc                   	int3   
  20a065:	cc                   	int3   
  20a066:	cc                   	int3   
  20a067:	cc                   	int3   
  20a068:	cc                   	int3   
  20a069:	cc                   	int3   
  20a06a:	cc                   	int3   
  20a06b:	cc                   	int3   
  20a06c:	cc                   	int3   
  20a06d:	cc                   	int3   
  20a06e:	cc                   	int3   
  20a06f:	cc                   	int3   

000000000020a070 <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a070:	48 83 ec 28          	sub    $0x28,%rsp
  20a074:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a079:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a07e:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a082:	48 8b 3c 24          	mov    (%rsp),%rdi
        match unsafe { &*self.data.get() }.as_ref() {
  20a086:	e8 25 5c 00 00       	callq  20fcb0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE>
  20a08b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a090:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a095:	48 85 c0             	test   %rax,%rax
  20a098:	0f 95 c0             	setne  %al
  20a09b:	0f b6 c0             	movzbl %al,%eax
  20a09e:	74 06                	je     20a0a6 <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E+0x36>
  20a0a0:	eb 00                	jmp    20a0a2 <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E+0x32>
  20a0a2:	eb 09                	jmp    20a0ad <_ZN4spin4once13Once$LT$T$GT$9force_get17h71f12504522089a2E+0x3d>
  20a0a4:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a0a6:	e8 95 d6 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a0ab:	0f 0b                	ud2    
            Some(p) => p,
  20a0ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a0b2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a0b7:	48 83 c4 28          	add    $0x28,%rsp
  20a0bb:	c3                   	retq   
  20a0bc:	cc                   	int3   
  20a0bd:	cc                   	int3   
  20a0be:	cc                   	int3   
  20a0bf:	cc                   	int3   

000000000020a0c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a0c0:	48 83 ec 28          	sub    $0x28,%rsp
  20a0c4:	48 89 f8             	mov    %rdi,%rax
  20a0c7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a0cc:	48 83 c0 08          	add    $0x8,%rax
  20a0d0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a0d5:	48 89 04 24          	mov    %rax,(%rsp)
  20a0d9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a0dd:	e8 fe 5d 00 00       	callq  20fee0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E>
  20a0e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a0e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a0ec:	48 85 c0             	test   %rax,%rax
  20a0ef:	0f 95 c0             	setne  %al
  20a0f2:	0f b6 c0             	movzbl %al,%eax
  20a0f5:	74 06                	je     20a0fd <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x3d>
  20a0f7:	eb 00                	jmp    20a0f9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x39>
  20a0f9:	eb 09                	jmp    20a104 <_ZN4spin4once13Once$LT$T$GT$9force_get17h72feba64f587094aE+0x44>
  20a0fb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a0fd:	e8 3e d6 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a102:	0f 0b                	ud2    
            Some(p) => p,
  20a104:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a109:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a10e:	48 83 c4 28          	add    $0x28,%rsp
  20a112:	c3                   	retq   
  20a113:	cc                   	int3   
  20a114:	cc                   	int3   
  20a115:	cc                   	int3   
  20a116:	cc                   	int3   
  20a117:	cc                   	int3   
  20a118:	cc                   	int3   
  20a119:	cc                   	int3   
  20a11a:	cc                   	int3   
  20a11b:	cc                   	int3   
  20a11c:	cc                   	int3   
  20a11d:	cc                   	int3   
  20a11e:	cc                   	int3   
  20a11f:	cc                   	int3   

000000000020a120 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a120:	48 83 ec 28          	sub    $0x28,%rsp
  20a124:	48 89 f8             	mov    %rdi,%rax
  20a127:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a12c:	48 83 c0 08          	add    $0x8,%rax
  20a130:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a135:	48 89 04 24          	mov    %rax,(%rsp)
  20a139:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a13d:	e8 ce 5a 00 00       	callq  20fc10 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE>
  20a142:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a147:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a14c:	48 85 c0             	test   %rax,%rax
  20a14f:	0f 95 c0             	setne  %al
  20a152:	0f b6 c0             	movzbl %al,%eax
  20a155:	74 06                	je     20a15d <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x3d>
  20a157:	eb 00                	jmp    20a159 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x39>
  20a159:	eb 09                	jmp    20a164 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7581534a2c006c5fE+0x44>
  20a15b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a15d:	e8 de d5 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a162:	0f 0b                	ud2    
            Some(p) => p,
  20a164:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a169:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a16e:	48 83 c4 28          	add    $0x28,%rsp
  20a172:	c3                   	retq   
  20a173:	cc                   	int3   
  20a174:	cc                   	int3   
  20a175:	cc                   	int3   
  20a176:	cc                   	int3   
  20a177:	cc                   	int3   
  20a178:	cc                   	int3   
  20a179:	cc                   	int3   
  20a17a:	cc                   	int3   
  20a17b:	cc                   	int3   
  20a17c:	cc                   	int3   
  20a17d:	cc                   	int3   
  20a17e:	cc                   	int3   
  20a17f:	cc                   	int3   

000000000020a180 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a180:	48 83 ec 28          	sub    $0x28,%rsp
  20a184:	48 89 f8             	mov    %rdi,%rax
  20a187:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a18c:	48 83 c0 08          	add    $0x8,%rax
  20a190:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a195:	48 89 04 24          	mov    %rax,(%rsp)
  20a199:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a19d:	e8 ee 5c 00 00       	callq  20fe90 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE>
  20a1a2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a1a7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a1ac:	48 85 c0             	test   %rax,%rax
  20a1af:	0f 95 c0             	setne  %al
  20a1b2:	0f b6 c0             	movzbl %al,%eax
  20a1b5:	74 06                	je     20a1bd <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x3d>
  20a1b7:	eb 00                	jmp    20a1b9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x39>
  20a1b9:	eb 09                	jmp    20a1c4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h76bdb69a28a231adE+0x44>
  20a1bb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a1bd:	e8 7e d5 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a1c2:	0f 0b                	ud2    
            Some(p) => p,
  20a1c4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a1c9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a1ce:	48 83 c4 28          	add    $0x28,%rsp
  20a1d2:	c3                   	retq   
  20a1d3:	cc                   	int3   
  20a1d4:	cc                   	int3   
  20a1d5:	cc                   	int3   
  20a1d6:	cc                   	int3   
  20a1d7:	cc                   	int3   
  20a1d8:	cc                   	int3   
  20a1d9:	cc                   	int3   
  20a1da:	cc                   	int3   
  20a1db:	cc                   	int3   
  20a1dc:	cc                   	int3   
  20a1dd:	cc                   	int3   
  20a1de:	cc                   	int3   
  20a1df:	cc                   	int3   

000000000020a1e0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a1e0:	48 83 ec 28          	sub    $0x28,%rsp
  20a1e4:	48 89 f8             	mov    %rdi,%rax
  20a1e7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a1ec:	48 83 c0 08          	add    $0x8,%rax
  20a1f0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a1f5:	48 89 04 24          	mov    %rax,(%rsp)
  20a1f9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a1fd:	e8 7e 58 00 00       	callq  20fa80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E>
  20a202:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a207:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a20c:	48 85 c0             	test   %rax,%rax
  20a20f:	0f 95 c0             	setne  %al
  20a212:	0f b6 c0             	movzbl %al,%eax
  20a215:	74 06                	je     20a21d <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x3d>
  20a217:	eb 00                	jmp    20a219 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x39>
  20a219:	eb 09                	jmp    20a224 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7805e3fd0e019c67E+0x44>
  20a21b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a21d:	e8 1e d5 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a222:	0f 0b                	ud2    
            Some(p) => p,
  20a224:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a229:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a22e:	48 83 c4 28          	add    $0x28,%rsp
  20a232:	c3                   	retq   
  20a233:	cc                   	int3   
  20a234:	cc                   	int3   
  20a235:	cc                   	int3   
  20a236:	cc                   	int3   
  20a237:	cc                   	int3   
  20a238:	cc                   	int3   
  20a239:	cc                   	int3   
  20a23a:	cc                   	int3   
  20a23b:	cc                   	int3   
  20a23c:	cc                   	int3   
  20a23d:	cc                   	int3   
  20a23e:	cc                   	int3   
  20a23f:	cc                   	int3   

000000000020a240 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a240:	48 83 ec 28          	sub    $0x28,%rsp
  20a244:	48 89 f8             	mov    %rdi,%rax
  20a247:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a24c:	48 83 c0 08          	add    $0x8,%rax
  20a250:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a255:	48 89 04 24          	mov    %rax,(%rsp)
  20a259:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a25d:	e8 fe 59 00 00       	callq  20fc60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E>
  20a262:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a267:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a26c:	48 85 c0             	test   %rax,%rax
  20a26f:	0f 95 c0             	setne  %al
  20a272:	0f b6 c0             	movzbl %al,%eax
  20a275:	74 06                	je     20a27d <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x3d>
  20a277:	eb 00                	jmp    20a279 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x39>
  20a279:	eb 09                	jmp    20a284 <_ZN4spin4once13Once$LT$T$GT$9force_get17h8b454fdcf7e8277bE+0x44>
  20a27b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a27d:	e8 be d4 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a282:	0f 0b                	ud2    
            Some(p) => p,
  20a284:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a289:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a28e:	48 83 c4 28          	add    $0x28,%rsp
  20a292:	c3                   	retq   
  20a293:	cc                   	int3   
  20a294:	cc                   	int3   
  20a295:	cc                   	int3   
  20a296:	cc                   	int3   
  20a297:	cc                   	int3   
  20a298:	cc                   	int3   
  20a299:	cc                   	int3   
  20a29a:	cc                   	int3   
  20a29b:	cc                   	int3   
  20a29c:	cc                   	int3   
  20a29d:	cc                   	int3   
  20a29e:	cc                   	int3   
  20a29f:	cc                   	int3   

000000000020a2a0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a2a0:	48 83 ec 28          	sub    $0x28,%rsp
  20a2a4:	48 89 f8             	mov    %rdi,%rax
  20a2a7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a2ac:	48 83 c0 08          	add    $0x8,%rax
  20a2b0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a2b5:	48 89 04 24          	mov    %rax,(%rsp)
  20a2b9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a2bd:	e8 fe 58 00 00       	callq  20fbc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E>
  20a2c2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a2c7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a2cc:	48 85 c0             	test   %rax,%rax
  20a2cf:	0f 95 c0             	setne  %al
  20a2d2:	0f b6 c0             	movzbl %al,%eax
  20a2d5:	74 06                	je     20a2dd <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x3d>
  20a2d7:	eb 00                	jmp    20a2d9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x39>
  20a2d9:	eb 09                	jmp    20a2e4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9d3528ef080b2a97E+0x44>
  20a2db:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a2dd:	e8 5e d4 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a2e2:	0f 0b                	ud2    
            Some(p) => p,
  20a2e4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a2e9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a2ee:	48 83 c4 28          	add    $0x28,%rsp
  20a2f2:	c3                   	retq   
  20a2f3:	cc                   	int3   
  20a2f4:	cc                   	int3   
  20a2f5:	cc                   	int3   
  20a2f6:	cc                   	int3   
  20a2f7:	cc                   	int3   
  20a2f8:	cc                   	int3   
  20a2f9:	cc                   	int3   
  20a2fa:	cc                   	int3   
  20a2fb:	cc                   	int3   
  20a2fc:	cc                   	int3   
  20a2fd:	cc                   	int3   
  20a2fe:	cc                   	int3   
  20a2ff:	cc                   	int3   

000000000020a300 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a300:	48 83 ec 28          	sub    $0x28,%rsp
  20a304:	48 89 f8             	mov    %rdi,%rax
  20a307:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a30c:	48 83 c0 08          	add    $0x8,%rax
  20a310:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a315:	48 89 04 24          	mov    %rax,(%rsp)
  20a319:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a31d:	e8 de 59 00 00       	callq  20fd00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E>
  20a322:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a327:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a32c:	48 85 c0             	test   %rax,%rax
  20a32f:	0f 95 c0             	setne  %al
  20a332:	0f b6 c0             	movzbl %al,%eax
  20a335:	74 06                	je     20a33d <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x3d>
  20a337:	eb 00                	jmp    20a339 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x39>
  20a339:	eb 09                	jmp    20a344 <_ZN4spin4once13Once$LT$T$GT$9force_get17hac39404499bc3531E+0x44>
  20a33b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a33d:	e8 fe d3 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a342:	0f 0b                	ud2    
            Some(p) => p,
  20a344:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a349:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a34e:	48 83 c4 28          	add    $0x28,%rsp
  20a352:	c3                   	retq   
  20a353:	cc                   	int3   
  20a354:	cc                   	int3   
  20a355:	cc                   	int3   
  20a356:	cc                   	int3   
  20a357:	cc                   	int3   
  20a358:	cc                   	int3   
  20a359:	cc                   	int3   
  20a35a:	cc                   	int3   
  20a35b:	cc                   	int3   
  20a35c:	cc                   	int3   
  20a35d:	cc                   	int3   
  20a35e:	cc                   	int3   
  20a35f:	cc                   	int3   

000000000020a360 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a360:	48 83 ec 28          	sub    $0x28,%rsp
  20a364:	48 89 f8             	mov    %rdi,%rax
  20a367:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a36c:	48 83 c0 08          	add    $0x8,%rax
  20a370:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a375:	48 89 04 24          	mov    %rax,(%rsp)
  20a379:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a37d:	e8 1e 5a 00 00       	callq  20fda0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE>
  20a382:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a387:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a38c:	48 85 c0             	test   %rax,%rax
  20a38f:	0f 95 c0             	setne  %al
  20a392:	0f b6 c0             	movzbl %al,%eax
  20a395:	74 06                	je     20a39d <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x3d>
  20a397:	eb 00                	jmp    20a399 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x39>
  20a399:	eb 09                	jmp    20a3a4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hc7a0e91524e2e63aE+0x44>
  20a39b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a39d:	e8 9e d3 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a3a2:	0f 0b                	ud2    
            Some(p) => p,
  20a3a4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a3a9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a3ae:	48 83 c4 28          	add    $0x28,%rsp
  20a3b2:	c3                   	retq   
  20a3b3:	cc                   	int3   
  20a3b4:	cc                   	int3   
  20a3b5:	cc                   	int3   
  20a3b6:	cc                   	int3   
  20a3b7:	cc                   	int3   
  20a3b8:	cc                   	int3   
  20a3b9:	cc                   	int3   
  20a3ba:	cc                   	int3   
  20a3bb:	cc                   	int3   
  20a3bc:	cc                   	int3   
  20a3bd:	cc                   	int3   
  20a3be:	cc                   	int3   
  20a3bf:	cc                   	int3   

000000000020a3c0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a3c0:	48 83 ec 28          	sub    $0x28,%rsp
  20a3c4:	48 89 f8             	mov    %rdi,%rax
  20a3c7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a3cc:	48 83 c0 08          	add    $0x8,%rax
  20a3d0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a3d5:	48 89 04 24          	mov    %rax,(%rsp)
  20a3d9:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a3dd:	e8 9e 5b 00 00       	callq  20ff80 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE>
  20a3e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a3e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a3ec:	48 85 c0             	test   %rax,%rax
  20a3ef:	0f 95 c0             	setne  %al
  20a3f2:	0f b6 c0             	movzbl %al,%eax
  20a3f5:	74 06                	je     20a3fd <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x3d>
  20a3f7:	eb 00                	jmp    20a3f9 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x39>
  20a3f9:	eb 09                	jmp    20a404 <_ZN4spin4once13Once$LT$T$GT$9force_get17hf798daf329f2d66aE+0x44>
  20a3fb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a3fd:	e8 3e d3 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a402:	0f 0b                	ud2    
            Some(p) => p,
  20a404:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a409:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a40e:	48 83 c4 28          	add    $0x28,%rsp
  20a412:	c3                   	retq   
  20a413:	cc                   	int3   
  20a414:	cc                   	int3   
  20a415:	cc                   	int3   
  20a416:	cc                   	int3   
  20a417:	cc                   	int3   
  20a418:	cc                   	int3   
  20a419:	cc                   	int3   
  20a41a:	cc                   	int3   
  20a41b:	cc                   	int3   
  20a41c:	cc                   	int3   
  20a41d:	cc                   	int3   
  20a41e:	cc                   	int3   
  20a41f:	cc                   	int3   

000000000020a420 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE>:
    fn force_get<'a>(&'a self) -> &'a T {
  20a420:	48 83 ec 28          	sub    $0x28,%rsp
  20a424:	48 89 f8             	mov    %rdi,%rax
  20a427:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  20a42c:	48 83 c0 08          	add    $0x8,%rax
  20a430:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a435:	48 89 04 24          	mov    %rax,(%rsp)
  20a439:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a43d:	e8 fe 59 00 00       	callq  20fe40 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E>
  20a442:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a447:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a44c:	48 85 c0             	test   %rax,%rax
  20a44f:	0f 95 c0             	setne  %al
  20a452:	0f b6 c0             	movzbl %al,%eax
  20a455:	74 06                	je     20a45d <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x3d>
  20a457:	eb 00                	jmp    20a459 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x39>
  20a459:	eb 09                	jmp    20a464 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfe5052baa31a5a3cE+0x44>
  20a45b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  20a45d:	e8 de d2 00 00       	callq  217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>
  20a462:	0f 0b                	ud2    
            Some(p) => p,
  20a464:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a469:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a46e:	48 83 c4 28          	add    $0x28,%rsp
  20a472:	c3                   	retq   
  20a473:	cc                   	int3   
  20a474:	cc                   	int3   
  20a475:	cc                   	int3   
  20a476:	cc                   	int3   
  20a477:	cc                   	int3   
  20a478:	cc                   	int3   
  20a479:	cc                   	int3   
  20a47a:	cc                   	int3   
  20a47b:	cc                   	int3   
  20a47c:	cc                   	int3   
  20a47d:	cc                   	int3   
  20a47e:	cc                   	int3   
  20a47f:	cc                   	int3   

000000000020a480 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E>:
        impl Mul for $t {
            type Output = $t;

            #[inline]
            #[rustc_inherit_overflow_checks]
            fn mul(self, other: $t) -> $t { self * other }
  20a480:	48 83 ec 18          	sub    $0x18,%rsp
  20a484:	48 89 f8             	mov    %rdi,%rax
  20a487:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a48c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20a491:	48 f7 e6             	mul    %rsi
  20a494:	48 89 04 24          	mov    %rax,(%rsp)
  20a498:	0f 90 c0             	seto   %al
  20a49b:	a8 01                	test   $0x1,%al
  20a49d:	75 09                	jne    20a4a8 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E+0x28>
  20a49f:	48 8b 04 24          	mov    (%rsp),%rax
  20a4a3:	48 83 c4 18          	add    $0x18,%rsp
  20a4a7:	c3                   	retq   
  20a4a8:	48 8d 3d 71 60 ff ff 	lea    -0x9f8f(%rip),%rdi        # 200520 <str.0>
  20a4af:	48 8d 15 8a d1 02 00 	lea    0x2d18a(%rip),%rdx        # 237640 <memcmp+0x1090>
  20a4b6:	be 21 00 00 00       	mov    $0x21,%esi
  20a4bb:	e8 a0 8f 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a4c0:	0f 0b                	ud2    
  20a4c2:	cc                   	int3   
  20a4c3:	cc                   	int3   
  20a4c4:	cc                   	int3   
  20a4c5:	cc                   	int3   
  20a4c6:	cc                   	int3   
  20a4c7:	cc                   	int3   
  20a4c8:	cc                   	int3   
  20a4c9:	cc                   	int3   
  20a4ca:	cc                   	int3   
  20a4cb:	cc                   	int3   
  20a4cc:	cc                   	int3   
  20a4cd:	cc                   	int3   
  20a4ce:	cc                   	int3   
  20a4cf:	cc                   	int3   

000000000020a4d0 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>:
        #[$attr]
        impl<'a> $imp<$u> for &'a $t {
            type Output = <$t as $imp<$u>>::Output;

            #[inline]
            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {
  20a4d0:	48 83 ec 18          	sub    $0x18,%rsp
  20a4d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a4d9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                $imp::$method(*self, other)
  20a4de:	48 8b 3f             	mov    (%rdi),%rdi
  20a4e1:	e8 9a ff ff ff       	callq  20a480 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Mul$GT$3mul17h96416bfbf677fa66E>
  20a4e6:	48 89 04 24          	mov    %rax,(%rsp)
  20a4ea:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20a4ee:	48 83 c4 18          	add    $0x18,%rsp
  20a4f2:	c3                   	retq   
  20a4f3:	cc                   	int3   
  20a4f4:	cc                   	int3   
  20a4f5:	cc                   	int3   
  20a4f6:	cc                   	int3   
  20a4f7:	cc                   	int3   
  20a4f8:	cc                   	int3   
  20a4f9:	cc                   	int3   
  20a4fa:	cc                   	int3   
  20a4fb:	cc                   	int3   
  20a4fc:	cc                   	int3   
  20a4fd:	cc                   	int3   
  20a4fe:	cc                   	int3   
  20a4ff:	cc                   	int3   

000000000020a500 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdbc274460ee4dd34E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
  20a500:	48 83 ec 18          	sub    $0x18,%rsp
  20a504:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.next()
  20a509:	e8 12 76 00 00       	callq  211b20 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9893b0f9eccf63e0E>
  20a50e:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20a512:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  20a516:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  20a51a:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  20a51e:	24 01                	and    $0x1,%al
  20a520:	48 83 c4 18          	add    $0x18,%rsp
  20a524:	c3                   	retq   
  20a525:	cc                   	int3   
  20a526:	cc                   	int3   
  20a527:	cc                   	int3   
  20a528:	cc                   	int3   
  20a529:	cc                   	int3   
  20a52a:	cc                   	int3   
  20a52b:	cc                   	int3   
  20a52c:	cc                   	int3   
  20a52d:	cc                   	int3   
  20a52e:	cc                   	int3   
  20a52f:	cc                   	int3   

000000000020a530 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a530:	48 83 ec 28          	sub    $0x28,%rsp
        match residual {
            Err(e) => Err(From::from(e)),
  20a534:	e8 07 45 01 00       	callq  21ea40 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17habc6910e9567a3dbE>
  20a539:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20a540:	00 00 
        }
    }
  20a542:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a547:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20a54c:	48 83 c4 28          	add    $0x28,%rsp
  20a550:	c3                   	retq   
  20a551:	cc                   	int3   
  20a552:	cc                   	int3   
  20a553:	cc                   	int3   
  20a554:	cc                   	int3   
  20a555:	cc                   	int3   
  20a556:	cc                   	int3   
  20a557:	cc                   	int3   
  20a558:	cc                   	int3   
  20a559:	cc                   	int3   
  20a55a:	cc                   	int3   
  20a55b:	cc                   	int3   
  20a55c:	cc                   	int3   
  20a55d:	cc                   	int3   
  20a55e:	cc                   	int3   
  20a55f:	cc                   	int3   

000000000020a560 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a560:	48 83 ec 28          	sub    $0x28,%rsp
            Err(e) => Err(From::from(e)),
  20a564:	e8 17 96 00 00       	callq  213b80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>
  20a569:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20a570:	00 00 
    }
  20a572:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a577:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20a57c:	48 83 c4 28          	add    $0x28,%rsp
  20a580:	c3                   	retq   
  20a581:	cc                   	int3   
  20a582:	cc                   	int3   
  20a583:	cc                   	int3   
  20a584:	cc                   	int3   
  20a585:	cc                   	int3   
  20a586:	cc                   	int3   
  20a587:	cc                   	int3   
  20a588:	cc                   	int3   
  20a589:	cc                   	int3   
  20a58a:	cc                   	int3   
  20a58b:	cc                   	int3   
  20a58c:	cc                   	int3   
  20a58d:	cc                   	int3   
  20a58e:	cc                   	int3   
  20a58f:	cc                   	int3   

000000000020a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a590:	48 83 ec 18          	sub    $0x18,%rsp
            Err(e) => Err(From::from(e)),
  20a594:	e8 87 4a 00 00       	callq  20f020 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h818e9191d55a10c0E>
  20a599:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  20a59e:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a5a2:	24 01                	and    $0x1,%al
  20a5a4:	0f b6 c0             	movzbl %al,%eax
  20a5a7:	48 83 c4 18          	add    $0x18,%rsp
  20a5ab:	c3                   	retq   
  20a5ac:	cc                   	int3   
  20a5ad:	cc                   	int3   
  20a5ae:	cc                   	int3   
  20a5af:	cc                   	int3   

000000000020a5b0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h49782eb3ee2624a2E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a5b0:	48 83 ec 48          	sub    $0x48,%rsp
  20a5b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a5b9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a5be:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20a5c3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20a5c8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20a5cd:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20a5d2:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a5d7:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20a5dc:	e8 4f fb 00 00       	callq  21a130 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>
  20a5e1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a5e6:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20a5eb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a5f0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20a5f5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20a5fa:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a5ff:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20a603:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20a607:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20a60e:	48 83 c4 48          	add    $0x48,%rsp
  20a612:	c3                   	retq   
  20a613:	cc                   	int3   
  20a614:	cc                   	int3   
  20a615:	cc                   	int3   
  20a616:	cc                   	int3   
  20a617:	cc                   	int3   
  20a618:	cc                   	int3   
  20a619:	cc                   	int3   
  20a61a:	cc                   	int3   
  20a61b:	cc                   	int3   
  20a61c:	cc                   	int3   
  20a61d:	cc                   	int3   
  20a61e:	cc                   	int3   
  20a61f:	cc                   	int3   

000000000020a620 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h6bce559bf06336b0E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a620:	48 83 ec 48          	sub    $0x48,%rsp
  20a624:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a629:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a62e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20a633:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20a638:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20a63d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20a642:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a647:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20a64c:	e8 5f 25 01 00       	callq  21cbb0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  20a651:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a656:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20a65b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a660:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20a665:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20a66a:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a66f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20a673:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20a677:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20a67e:	48 83 c4 48          	add    $0x48,%rsp
  20a682:	c3                   	retq   
  20a683:	cc                   	int3   
  20a684:	cc                   	int3   
  20a685:	cc                   	int3   
  20a686:	cc                   	int3   
  20a687:	cc                   	int3   
  20a688:	cc                   	int3   
  20a689:	cc                   	int3   
  20a68a:	cc                   	int3   
  20a68b:	cc                   	int3   
  20a68c:	cc                   	int3   
  20a68d:	cc                   	int3   
  20a68e:	cc                   	int3   
  20a68f:	cc                   	int3   

000000000020a690 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8b855bbe44d4466aE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a690:	48 83 ec 48          	sub    $0x48,%rsp
  20a694:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a699:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a69e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20a6a3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20a6a8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20a6ad:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20a6b2:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a6b7:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20a6bc:	e8 6f fa 00 00       	callq  21a130 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>
  20a6c1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a6c6:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20a6cb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a6d0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20a6d5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20a6da:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a6df:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20a6e3:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20a6e7:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20a6ee:	48 83 c4 48          	add    $0x48,%rsp
  20a6f2:	c3                   	retq   
  20a6f3:	cc                   	int3   
  20a6f4:	cc                   	int3   
  20a6f5:	cc                   	int3   
  20a6f6:	cc                   	int3   
  20a6f7:	cc                   	int3   
  20a6f8:	cc                   	int3   
  20a6f9:	cc                   	int3   
  20a6fa:	cc                   	int3   
  20a6fb:	cc                   	int3   
  20a6fc:	cc                   	int3   
  20a6fd:	cc                   	int3   
  20a6fe:	cc                   	int3   
  20a6ff:	cc                   	int3   

000000000020a700 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h9b93c8b5a9bc9b46E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a700:	48 83 ec 28          	sub    $0x28,%rsp
  20a704:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a709:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            Err(e) => Err(From::from(e)),
  20a70e:	e8 6d 94 00 00       	callq  213b80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>
  20a713:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a718:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20a71d:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  20a724:	00 
    }
  20a725:	48 83 c4 28          	add    $0x28,%rsp
  20a729:	c3                   	retq   
  20a72a:	cc                   	int3   
  20a72b:	cc                   	int3   
  20a72c:	cc                   	int3   
  20a72d:	cc                   	int3   
  20a72e:	cc                   	int3   
  20a72f:	cc                   	int3   

000000000020a730 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0990f6fa1d8cf4cE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
  20a730:	48 83 ec 48          	sub    $0x48,%rsp
  20a734:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a739:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a73e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20a743:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
            Err(e) => Err(From::from(e)),
  20a748:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20a74d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20a752:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a757:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20a75c:	e8 4f 24 01 00       	callq  21cbb0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  20a761:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a766:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20a76b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a770:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20a775:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20a77a:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a77f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20a783:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20a787:	48 c7 01 01 00 00 00 	movq   $0x1,(%rcx)
    }
  20a78e:	48 83 c4 48          	add    $0x48,%rsp
  20a792:	c3                   	retq   
  20a793:	cc                   	int3   
  20a794:	cc                   	int3   
  20a795:	cc                   	int3   
  20a796:	cc                   	int3   
  20a797:	cc                   	int3   
  20a798:	cc                   	int3   
  20a799:	cc                   	int3   
  20a79a:	cc                   	int3   
  20a79b:	cc                   	int3   
  20a79c:	cc                   	int3   
  20a79d:	cc                   	int3   
  20a79e:	cc                   	int3   
  20a79f:	cc                   	int3   

000000000020a7a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>:
    pub fn unwrap_err(self) -> E {
  20a7a0:	48 83 ec 28          	sub    $0x28,%rsp
  20a7a4:	48 89 34 24          	mov    %rsi,(%rsp)
  20a7a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20a7ad:	0f b7 07             	movzwl (%rdi),%eax
  20a7b0:	48 85 c0             	test   %rax,%rax
  20a7b3:	74 06                	je     20a7bb <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x1b>
  20a7b5:	eb 00                	jmp    20a7b7 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x17>
  20a7b7:	eb 33                	jmp    20a7ec <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E+0x4c>
  20a7b9:	0f 0b                	ud2    
  20a7bb:	4c 8b 04 24          	mov    (%rsp),%r8
  20a7bf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a7c4:	66 8b 40 02          	mov    0x2(%rax),%ax
  20a7c8:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  20a7cd:	48 8d 3d 6d 5d ff ff 	lea    -0xa293(%rip),%rdi        # 200541 <str.0+0x21>
  20a7d4:	48 8d 0d 7d ce 02 00 	lea    0x2ce7d(%rip),%rcx        # 237658 <memcmp+0x10a8>
  20a7db:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a7e0:	48 8d 54 24 16       	lea    0x16(%rsp),%rdx
  20a7e5:	e8 a6 80 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a7ea:	0f 0b                	ud2    
  20a7ec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Err(e) => e,
  20a7f1:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a7f5:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  20a7f9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a7fe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    }
  20a803:	48 83 c4 28          	add    $0x28,%rsp
  20a807:	c3                   	retq   
  20a808:	cc                   	int3   
  20a809:	cc                   	int3   
  20a80a:	cc                   	int3   
  20a80b:	cc                   	int3   
  20a80c:	cc                   	int3   
  20a80d:	cc                   	int3   
  20a80e:	cc                   	int3   
  20a80f:	cc                   	int3   

000000000020a810 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E>:
    pub fn unwrap_err(self) -> E {
  20a810:	48 83 ec 48          	sub    $0x48,%rsp
  20a814:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20a819:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20a81e:	48 8b 07             	mov    (%rdi),%rax
  20a821:	48 85 c0             	test   %rax,%rax
  20a824:	74 06                	je     20a82c <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x1c>
  20a826:	eb 00                	jmp    20a828 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x18>
  20a828:	eb 4f                	jmp    20a879 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E+0x69>
  20a82a:	0f 0b                	ud2    
  20a82c:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  20a831:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a836:	48 8b 41 20          	mov    0x20(%rcx),%rax
  20a83a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20a83f:	48 8b 41 18          	mov    0x18(%rcx),%rax
  20a843:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a848:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a84c:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20a850:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20a855:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a85a:	48 8d 3d e0 5c ff ff 	lea    -0xa320(%rip),%rdi        # 200541 <str.0+0x21>
  20a861:	48 8d 0d 10 ce 02 00 	lea    0x2ce10(%rip),%rcx        # 237678 <memcmp+0x10c8>
  20a868:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a86d:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
  20a872:	e8 19 80 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a877:	0f 0b                	ud2    
  20a879:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            Err(e) => e,
  20a87e:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a882:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20a886:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20a88b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  20a890:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20a895:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20a89a:	48 83 c4 48          	add    $0x48,%rsp
  20a89e:	c3                   	retq   
  20a89f:	cc                   	int3   

000000000020a8a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E>:
    pub fn unwrap_err(self) -> E {
  20a8a0:	48 83 ec 28          	sub    $0x28,%rsp
  20a8a4:	48 89 34 24          	mov    %rsi,(%rsp)
  20a8a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20a8ad:	0f b6 07             	movzbl (%rdi),%eax
  20a8b0:	a8 01                	test   $0x1,%al
  20a8b2:	74 06                	je     20a8ba <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x1a>
  20a8b4:	eb 00                	jmp    20a8b6 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x16>
  20a8b6:	eb 3c                	jmp    20a8f4 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E+0x54>
  20a8b8:	0f 0b                	ud2    
  20a8ba:	4c 8b 04 24          	mov    (%rsp),%r8
  20a8be:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a8c3:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a8c7:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20a8cb:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a8d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a8d5:	48 8d 3d 65 5c ff ff 	lea    -0xa39b(%rip),%rdi        # 200541 <str.0+0x21>
  20a8dc:	48 8d 0d b5 cd 02 00 	lea    0x2cdb5(%rip),%rcx        # 237698 <memcmp+0x10e8>
  20a8e3:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a8e8:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20a8ed:	e8 9e 7f 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a8f2:	0f 0b                	ud2    
  20a8f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => e,
  20a8f9:	8a 40 01             	mov    0x1(%rax),%al
  20a8fc:	88 44 24 27          	mov    %al,0x27(%rsp)
    }
  20a900:	48 83 c4 28          	add    $0x28,%rsp
  20a904:	c3                   	retq   
  20a905:	cc                   	int3   
  20a906:	cc                   	int3   
  20a907:	cc                   	int3   
  20a908:	cc                   	int3   
  20a909:	cc                   	int3   
  20a90a:	cc                   	int3   
  20a90b:	cc                   	int3   
  20a90c:	cc                   	int3   
  20a90d:	cc                   	int3   
  20a90e:	cc                   	int3   
  20a90f:	cc                   	int3   

000000000020a910 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE>:
    pub fn unwrap_err(self) -> E {
  20a910:	48 83 ec 38          	sub    $0x38,%rsp
  20a914:	48 89 34 24          	mov    %rsi,(%rsp)
  20a918:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20a91d:	0f b6 07             	movzbl (%rdi),%eax
  20a920:	a8 01                	test   $0x1,%al
  20a922:	74 06                	je     20a92a <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x1a>
  20a924:	eb 00                	jmp    20a926 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x16>
  20a926:	eb 4e                	jmp    20a976 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE+0x66>
  20a928:	0f 0b                	ud2    
  20a92a:	4c 8b 04 24          	mov    (%rsp),%r8
  20a92e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a933:	48 8b 41 20          	mov    0x20(%rcx),%rax
  20a937:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a93c:	48 8b 41 18          	mov    0x18(%rcx),%rax
  20a940:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a945:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a949:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20a94d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a952:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a957:	48 8d 3d e3 5b ff ff 	lea    -0xa41d(%rip),%rdi        # 200541 <str.0+0x21>
  20a95e:	48 8d 0d 53 cd 02 00 	lea    0x2cd53(%rip),%rcx        # 2376b8 <memcmp+0x1108>
  20a965:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a96a:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20a96f:	e8 1c 7f 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a974:	0f 0b                	ud2    
  20a976:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => e,
  20a97b:	8a 40 01             	mov    0x1(%rax),%al
  20a97e:	88 c1                	mov    %al,%cl
  20a980:	80 e1 01             	and    $0x1,%cl
  20a983:	88 4c 24 37          	mov    %cl,0x37(%rsp)
    }
  20a987:	24 01                	and    $0x1,%al
  20a989:	0f b6 c0             	movzbl %al,%eax
  20a98c:	48 83 c4 38          	add    $0x38,%rsp
  20a990:	c3                   	retq   
  20a991:	cc                   	int3   
  20a992:	cc                   	int3   
  20a993:	cc                   	int3   
  20a994:	cc                   	int3   
  20a995:	cc                   	int3   
  20a996:	cc                   	int3   
  20a997:	cc                   	int3   
  20a998:	cc                   	int3   
  20a999:	cc                   	int3   
  20a99a:	cc                   	int3   
  20a99b:	cc                   	int3   
  20a99c:	cc                   	int3   
  20a99d:	cc                   	int3   
  20a99e:	cc                   	int3   
  20a99f:	cc                   	int3   

000000000020a9a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>:
    pub fn unwrap_err(self) -> E {
  20a9a0:	48 83 ec 48          	sub    $0x48,%rsp
  20a9a4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20a9a9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a9ae:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20a9b3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a9b8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a9bd:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20a9c2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  20a9c7:	66 8b 44 24 10       	mov    0x10(%rsp),%ax
  20a9cc:	66 83 c0 f9          	add    $0xfff9,%ax
  20a9d0:	0f 95 c0             	setne  %al
  20a9d3:	0f b6 c0             	movzbl %al,%eax
  20a9d6:	74 06                	je     20a9de <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x3e>
  20a9d8:	eb 00                	jmp    20a9da <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x3a>
  20a9da:	eb 26                	jmp    20aa02 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E+0x62>
  20a9dc:	0f 0b                	ud2    
  20a9de:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a9e3:	48 8d 3d 57 5b ff ff 	lea    -0xa4a9(%rip),%rdi        # 200541 <str.0+0x21>
  20a9ea:	48 8d 0d e7 cc 02 00 	lea    0x2cce7(%rip),%rcx        # 2376d8 <memcmp+0x1128>
  20a9f1:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a9f6:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  20a9fb:	e8 90 7e 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20aa00:	0f 0b                	ud2    
            Err(e) => e,
  20aa02:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20aa07:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20aa0c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20aa11:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  20aa16:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20aa1b:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20aa20:	48 83 c4 48          	add    $0x48,%rsp
  20aa24:	c3                   	retq   
  20aa25:	cc                   	int3   
  20aa26:	cc                   	int3   
  20aa27:	cc                   	int3   
  20aa28:	cc                   	int3   
  20aa29:	cc                   	int3   
  20aa2a:	cc                   	int3   
  20aa2b:	cc                   	int3   
  20aa2c:	cc                   	int3   
  20aa2d:	cc                   	int3   
  20aa2e:	cc                   	int3   
  20aa2f:	cc                   	int3   

000000000020aa30 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>:
    pub fn ok(self) -> Option<T> {
  20aa30:	48 83 ec 28          	sub    $0x28,%rsp
  20aa34:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  20aa38:	48 8b 07             	mov    (%rdi),%rax
  20aa3b:	48 85 c0             	test   %rax,%rax
  20aa3e:	74 06                	je     20aa46 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x16>
  20aa40:	eb 00                	jmp    20aa42 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x12>
  20aa42:	eb 2e                	jmp    20aa72 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x42>
  20aa44:	0f 0b                	ud2    
  20aa46:	48 8b 04 24          	mov    (%rsp),%rax
            Ok(x) => Some(x),
  20aa4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  20aa4e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20aa53:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20aa58:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20aa5d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20aa62:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20aa67:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  20aa6e:	00 00 
    }
  20aa70:	eb 09                	jmp    20aa7b <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x4b>
            Err(_) => None,
  20aa72:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20aa79:	00 00 
  20aa7b:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20aa7f:	48 83 38 00          	cmpq   $0x0,(%rax)
  20aa83:	75 0f                	jne    20aa94 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x64>
  20aa85:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa8a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20aa8f:	48 83 c4 28          	add    $0x28,%rsp
  20aa93:	c3                   	retq   
  20aa94:	eb ef                	jmp    20aa85 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E+0x55>
  20aa96:	cc                   	int3   
  20aa97:	cc                   	int3   
  20aa98:	cc                   	int3   
  20aa99:	cc                   	int3   
  20aa9a:	cc                   	int3   
  20aa9b:	cc                   	int3   
  20aa9c:	cc                   	int3   
  20aa9d:	cc                   	int3   
  20aa9e:	cc                   	int3   
  20aa9f:	cc                   	int3   

000000000020aaa0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E>:
    pub const fn is_ok(&self) -> bool {
  20aaa0:	48 83 ec 10          	sub    $0x10,%rsp
  20aaa4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20aaa9:	8a 07                	mov    (%rdi),%al
  20aaab:	24 01                	and    $0x1,%al
  20aaad:	0f b6 c0             	movzbl %al,%eax
  20aab0:	48 83 f8 00          	cmp    $0x0,%rax
  20aab4:	75 07                	jne    20aabd <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E+0x1d>
  20aab6:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20aabb:	eb 05                	jmp    20aac2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E+0x22>
  20aabd:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20aac2:	8a 44 24 07          	mov    0x7(%rsp),%al
  20aac6:	24 01                	and    $0x1,%al
  20aac8:	0f b6 c0             	movzbl %al,%eax
  20aacb:	48 83 c4 10          	add    $0x10,%rsp
  20aacf:	c3                   	retq   

000000000020aad0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE>:
    pub const fn is_ok(&self) -> bool {
  20aad0:	48 83 ec 10          	sub    $0x10,%rsp
  20aad4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20aad9:	8a 07                	mov    (%rdi),%al
  20aadb:	24 01                	and    $0x1,%al
  20aadd:	0f b6 c0             	movzbl %al,%eax
  20aae0:	48 83 f8 00          	cmp    $0x0,%rax
  20aae4:	75 07                	jne    20aaed <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE+0x1d>
  20aae6:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20aaeb:	eb 05                	jmp    20aaf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE+0x22>
  20aaed:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20aaf2:	8a 44 24 07          	mov    0x7(%rsp),%al
  20aaf6:	24 01                	and    $0x1,%al
  20aaf8:	0f b6 c0             	movzbl %al,%eax
  20aafb:	48 83 c4 10          	add    $0x10,%rsp
  20aaff:	c3                   	retq   

000000000020ab00 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E>:
    pub const fn is_ok(&self) -> bool {
  20ab00:	48 83 ec 10          	sub    $0x10,%rsp
  20ab04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20ab09:	66 8b 17             	mov    (%rdi),%dx
  20ab0c:	66 83 ea 07          	sub    $0x7,%dx
  20ab10:	b8 01 00 00 00       	mov    $0x1,%eax
  20ab15:	31 c9                	xor    %ecx,%ecx
  20ab17:	66 83 fa 00          	cmp    $0x0,%dx
  20ab1b:	48 0f 44 c1          	cmove  %rcx,%rax
  20ab1f:	48 83 f8 00          	cmp    $0x0,%rax
  20ab23:	75 07                	jne    20ab2c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E+0x2c>
  20ab25:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20ab2a:	eb 05                	jmp    20ab31 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E+0x31>
  20ab2c:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20ab31:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ab35:	24 01                	and    $0x1,%al
  20ab37:	0f b6 c0             	movzbl %al,%eax
  20ab3a:	48 83 c4 10          	add    $0x10,%rsp
  20ab3e:	c3                   	retq   
  20ab3f:	cc                   	int3   

000000000020ab40 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E>:
    pub const fn is_ok(&self) -> bool {
  20ab40:	48 83 ec 10          	sub    $0x10,%rsp
  20ab44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20ab49:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20ab4d:	75 07                	jne    20ab56 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E+0x16>
  20ab4f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20ab54:	eb 05                	jmp    20ab5b <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E+0x1b>
  20ab56:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20ab5b:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ab5f:	24 01                	and    $0x1,%al
  20ab61:	0f b6 c0             	movzbl %al,%eax
  20ab64:	48 83 c4 10          	add    $0x10,%rsp
  20ab68:	c3                   	retq   
  20ab69:	cc                   	int3   
  20ab6a:	cc                   	int3   
  20ab6b:	cc                   	int3   
  20ab6c:	cc                   	int3   
  20ab6d:	cc                   	int3   
  20ab6e:	cc                   	int3   
  20ab6f:	cc                   	int3   

000000000020ab70 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE>:
    pub const fn is_ok(&self) -> bool {
  20ab70:	48 83 ec 10          	sub    $0x10,%rsp
  20ab74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20ab79:	0f b7 07             	movzwl (%rdi),%eax
  20ab7c:	48 83 f8 00          	cmp    $0x0,%rax
  20ab80:	75 07                	jne    20ab89 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE+0x19>
  20ab82:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20ab87:	eb 05                	jmp    20ab8e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE+0x1e>
  20ab89:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20ab8e:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ab92:	24 01                	and    $0x1,%al
  20ab94:	0f b6 c0             	movzbl %al,%eax
  20ab97:	48 83 c4 10          	add    $0x10,%rsp
  20ab9b:	c3                   	retq   
  20ab9c:	cc                   	int3   
  20ab9d:	cc                   	int3   
  20ab9e:	cc                   	int3   
  20ab9f:	cc                   	int3   

000000000020aba0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>:
    pub const fn is_err(&self) -> bool {
  20aba0:	48 83 ec 18          	sub    $0x18,%rsp
  20aba4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20aba9:	e8 c2 ff ff ff       	callq  20ab70 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hd4ec6d9b4b58f73fE>
  20abae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20abb2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20abb6:	34 ff                	xor    $0xff,%al
    }
  20abb8:	24 01                	and    $0x1,%al
  20abba:	0f b6 c0             	movzbl %al,%eax
  20abbd:	48 83 c4 18          	add    $0x18,%rsp
  20abc1:	c3                   	retq   
  20abc2:	cc                   	int3   
  20abc3:	cc                   	int3   
  20abc4:	cc                   	int3   
  20abc5:	cc                   	int3   
  20abc6:	cc                   	int3   
  20abc7:	cc                   	int3   
  20abc8:	cc                   	int3   
  20abc9:	cc                   	int3   
  20abca:	cc                   	int3   
  20abcb:	cc                   	int3   
  20abcc:	cc                   	int3   
  20abcd:	cc                   	int3   
  20abce:	cc                   	int3   
  20abcf:	cc                   	int3   

000000000020abd0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>:
    pub const fn is_err(&self) -> bool {
  20abd0:	48 83 ec 18          	sub    $0x18,%rsp
  20abd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20abd9:	e8 22 ff ff ff       	callq  20ab00 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h3e8bfb96c402fb17E>
  20abde:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20abe2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20abe6:	34 ff                	xor    $0xff,%al
    }
  20abe8:	24 01                	and    $0x1,%al
  20abea:	0f b6 c0             	movzbl %al,%eax
  20abed:	48 83 c4 18          	add    $0x18,%rsp
  20abf1:	c3                   	retq   
  20abf2:	cc                   	int3   
  20abf3:	cc                   	int3   
  20abf4:	cc                   	int3   
  20abf5:	cc                   	int3   
  20abf6:	cc                   	int3   
  20abf7:	cc                   	int3   
  20abf8:	cc                   	int3   
  20abf9:	cc                   	int3   
  20abfa:	cc                   	int3   
  20abfb:	cc                   	int3   
  20abfc:	cc                   	int3   
  20abfd:	cc                   	int3   
  20abfe:	cc                   	int3   
  20abff:	cc                   	int3   

000000000020ac00 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h82bd04722172da00E>:
    pub const fn is_err(&self) -> bool {
  20ac00:	48 83 ec 18          	sub    $0x18,%rsp
  20ac04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20ac09:	e8 92 fe ff ff       	callq  20aaa0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0ea6202afaa3cbe7E>
  20ac0e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ac12:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ac16:	34 ff                	xor    $0xff,%al
    }
  20ac18:	24 01                	and    $0x1,%al
  20ac1a:	0f b6 c0             	movzbl %al,%eax
  20ac1d:	48 83 c4 18          	add    $0x18,%rsp
  20ac21:	c3                   	retq   
  20ac22:	cc                   	int3   
  20ac23:	cc                   	int3   
  20ac24:	cc                   	int3   
  20ac25:	cc                   	int3   
  20ac26:	cc                   	int3   
  20ac27:	cc                   	int3   
  20ac28:	cc                   	int3   
  20ac29:	cc                   	int3   
  20ac2a:	cc                   	int3   
  20ac2b:	cc                   	int3   
  20ac2c:	cc                   	int3   
  20ac2d:	cc                   	int3   
  20ac2e:	cc                   	int3   
  20ac2f:	cc                   	int3   

000000000020ac30 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17haa604f8299c01af4E>:
    pub const fn is_err(&self) -> bool {
  20ac30:	48 83 ec 18          	sub    $0x18,%rsp
  20ac34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20ac39:	e8 92 fe ff ff       	callq  20aad0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h1ed3838bef0da0cbE>
  20ac3e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ac42:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ac46:	34 ff                	xor    $0xff,%al
    }
  20ac48:	24 01                	and    $0x1,%al
  20ac4a:	0f b6 c0             	movzbl %al,%eax
  20ac4d:	48 83 c4 18          	add    $0x18,%rsp
  20ac51:	c3                   	retq   
  20ac52:	cc                   	int3   
  20ac53:	cc                   	int3   
  20ac54:	cc                   	int3   
  20ac55:	cc                   	int3   
  20ac56:	cc                   	int3   
  20ac57:	cc                   	int3   
  20ac58:	cc                   	int3   
  20ac59:	cc                   	int3   
  20ac5a:	cc                   	int3   
  20ac5b:	cc                   	int3   
  20ac5c:	cc                   	int3   
  20ac5d:	cc                   	int3   
  20ac5e:	cc                   	int3   
  20ac5f:	cc                   	int3   

000000000020ac60 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf7814dd879df2886E>:
    pub const fn is_err(&self) -> bool {
  20ac60:	48 83 ec 18          	sub    $0x18,%rsp
  20ac64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20ac69:	e8 d2 fe ff ff       	callq  20ab40 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hbb5d55306ab8f2a6E>
  20ac6e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ac72:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ac76:	34 ff                	xor    $0xff,%al
    }
  20ac78:	24 01                	and    $0x1,%al
  20ac7a:	0f b6 c0             	movzbl %al,%eax
  20ac7d:	48 83 c4 18          	add    $0x18,%rsp
  20ac81:	c3                   	retq   
  20ac82:	cc                   	int3   
  20ac83:	cc                   	int3   
  20ac84:	cc                   	int3   
  20ac85:	cc                   	int3   
  20ac86:	cc                   	int3   
  20ac87:	cc                   	int3   
  20ac88:	cc                   	int3   
  20ac89:	cc                   	int3   
  20ac8a:	cc                   	int3   
  20ac8b:	cc                   	int3   
  20ac8c:	cc                   	int3   
  20ac8d:	cc                   	int3   
  20ac8e:	cc                   	int3   
  20ac8f:	cc                   	int3   

000000000020ac90 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>:
    pub fn unwrap(self) -> T {
  20ac90:	48 83 ec 28          	sub    $0x28,%rsp
  20ac94:	48 89 34 24          	mov    %rsi,(%rsp)
  20ac98:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20ac9d:	0f b7 07             	movzwl (%rdi),%eax
  20aca0:	48 85 c0             	test   %rax,%rax
  20aca3:	74 06                	je     20acab <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x1b>
  20aca5:	eb 00                	jmp    20aca7 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x17>
  20aca7:	eb 15                	jmp    20acbe <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E+0x2e>
  20aca9:	0f 0b                	ud2    
  20acab:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => t,
  20acb0:	66 8b 40 02          	mov    0x2(%rax),%ax
  20acb4:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
    }
  20acb9:	48 83 c4 28          	add    $0x28,%rsp
  20acbd:	c3                   	retq   
  20acbe:	4c 8b 04 24          	mov    (%rsp),%r8
  20acc2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20acc7:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20accb:	48 8b 40 10          	mov    0x10(%rax),%rax
  20accf:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20acd4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20acd9:	48 8d 3d 8f 58 ff ff 	lea    -0xa771(%rip),%rdi        # 20056f <str.0+0x4f>
  20ace0:	48 8d 0d 11 ca 02 00 	lea    0x2ca11(%rip),%rcx        # 2376f8 <memcmp+0x1148>
  20ace7:	be 2b 00 00 00       	mov    $0x2b,%esi
  20acec:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20acf1:	e8 9a 7b 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20acf6:	0f 0b                	ud2    
  20acf8:	cc                   	int3   
  20acf9:	cc                   	int3   
  20acfa:	cc                   	int3   
  20acfb:	cc                   	int3   
  20acfc:	cc                   	int3   
  20acfd:	cc                   	int3   
  20acfe:	cc                   	int3   
  20acff:	cc                   	int3   

000000000020ad00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E>:
    pub fn unwrap(self) -> T {
  20ad00:	48 83 ec 28          	sub    $0x28,%rsp
  20ad04:	48 89 14 24          	mov    %rdx,(%rsp)
  20ad08:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20ad0d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ad12:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  20ad17:	0f b6 06             	movzbl (%rsi),%eax
  20ad1a:	a8 01                	test   $0x1,%al
  20ad1c:	74 06                	je     20ad24 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x24>
  20ad1e:	eb 00                	jmp    20ad20 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x20>
  20ad20:	eb 35                	jmp    20ad57 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E+0x57>
  20ad22:	0f 0b                	ud2    
  20ad24:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ad29:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20ad2e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            Ok(t) => t,
  20ad33:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  20ad37:	48 89 31             	mov    %rsi,(%rcx)
  20ad3a:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  20ad3e:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20ad42:	48 8b 72 18          	mov    0x18(%rdx),%rsi
  20ad46:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  20ad4a:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  20ad4e:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  20ad52:	48 83 c4 28          	add    $0x28,%rsp
  20ad56:	c3                   	retq   
  20ad57:	4c 8b 04 24          	mov    (%rsp),%r8
  20ad5b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20ad60:	8a 40 01             	mov    0x1(%rax),%al
  20ad63:	88 44 24 27          	mov    %al,0x27(%rsp)
  20ad67:	48 8d 3d 01 58 ff ff 	lea    -0xa7ff(%rip),%rdi        # 20056f <str.0+0x4f>
  20ad6e:	48 8d 0d a3 c9 02 00 	lea    0x2c9a3(%rip),%rcx        # 237718 <memcmp+0x1168>
  20ad75:	be 2b 00 00 00       	mov    $0x2b,%esi
  20ad7a:	48 8d 54 24 27       	lea    0x27(%rsp),%rdx
  20ad7f:	e8 0c 7b 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20ad84:	0f 0b                	ud2    
  20ad86:	cc                   	int3   
  20ad87:	cc                   	int3   
  20ad88:	cc                   	int3   
  20ad89:	cc                   	int3   
  20ad8a:	cc                   	int3   
  20ad8b:	cc                   	int3   
  20ad8c:	cc                   	int3   
  20ad8d:	cc                   	int3   
  20ad8e:	cc                   	int3   
  20ad8f:	cc                   	int3   

000000000020ad90 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE>:
    pub fn unwrap(self) -> T {
  20ad90:	48 83 ec 28          	sub    $0x28,%rsp
  20ad94:	48 89 34 24          	mov    %rsi,(%rsp)
  20ad98:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20ad9d:	0f b6 07             	movzbl (%rdi),%eax
  20ada0:	a8 01                	test   $0x1,%al
  20ada2:	74 06                	je     20adaa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x1a>
  20ada4:	eb 00                	jmp    20ada6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x16>
  20ada6:	eb 28                	jmp    20add0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE+0x40>
  20ada8:	0f 0b                	ud2    
  20adaa:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Ok(t) => t,
  20adaf:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20adb3:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20adb7:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20adbc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  20adc1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20adc6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20adcb:	48 83 c4 28          	add    $0x28,%rsp
  20adcf:	c3                   	retq   
  20add0:	4c 8b 04 24          	mov    (%rsp),%r8
  20add4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20add9:	8a 40 01             	mov    0x1(%rax),%al
  20addc:	88 44 24 27          	mov    %al,0x27(%rsp)
  20ade0:	48 8d 3d 88 57 ff ff 	lea    -0xa878(%rip),%rdi        # 20056f <str.0+0x4f>
  20ade7:	48 8d 0d 4a c9 02 00 	lea    0x2c94a(%rip),%rcx        # 237738 <memcmp+0x1188>
  20adee:	be 2b 00 00 00       	mov    $0x2b,%esi
  20adf3:	48 8d 54 24 27       	lea    0x27(%rsp),%rdx
  20adf8:	e8 93 7a 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20adfd:	0f 0b                	ud2    
  20adff:	cc                   	int3   

000000000020ae00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE>:
    pub fn unwrap(self) -> T {
  20ae00:	48 83 ec 28          	sub    $0x28,%rsp
  20ae04:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20ae09:	40 88 f8             	mov    %dil,%al
  20ae0c:	24 01                	and    $0x1,%al
  20ae0e:	88 44 24 17          	mov    %al,0x17(%rsp)
        match self {
  20ae12:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  20ae17:	a8 01                	test   $0x1,%al
  20ae19:	74 06                	je     20ae21 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x21>
  20ae1b:	eb 00                	jmp    20ae1d <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x1d>
  20ae1d:	eb 07                	jmp    20ae26 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE+0x26>
  20ae1f:	0f 0b                	ud2    
    }
  20ae21:	48 83 c4 28          	add    $0x28,%rsp
  20ae25:	c3                   	retq   
  20ae26:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20ae2b:	48 8d 3d 3d 57 ff ff 	lea    -0xa8c3(%rip),%rdi        # 20056f <str.0+0x4f>
  20ae32:	48 8d 0d 1f c9 02 00 	lea    0x2c91f(%rip),%rcx        # 237758 <memcmp+0x11a8>
  20ae39:	be 2b 00 00 00       	mov    $0x2b,%esi
  20ae3e:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  20ae43:	e8 48 7a 02 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20ae48:	0f 0b                	ud2    
  20ae4a:	cc                   	int3   
  20ae4b:	cc                   	int3   
  20ae4c:	cc                   	int3   
  20ae4d:	cc                   	int3   
  20ae4e:	cc                   	int3   
  20ae4f:	cc                   	int3   

000000000020ae50 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20ae50:	48 83 ec 68          	sub    $0x68,%rsp
  20ae54:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20ae59:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20ae5e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        match self {
  20ae63:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20ae68:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20ae6d:	48 8b 06             	mov    (%rsi),%rax
  20ae70:	48 85 c0             	test   %rax,%rax
  20ae73:	74 06                	je     20ae7b <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x2b>
  20ae75:	eb 00                	jmp    20ae77 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x27>
  20ae77:	eb 10                	jmp    20ae89 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x39>
  20ae79:	0f 0b                	ud2    
  20ae7b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            Ok(t) => Ok(t),
  20ae80:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20ae87:	eb 5d                	jmp    20aee6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x96>
  20ae89:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Err(e) => Err(op(e)),
  20ae8e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20ae92:	48 8b 40 10          	mov    0x10(%rax),%rax
  20ae96:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20ae9b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20aea0:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20aea5:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20aeaa:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20aeaf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20aeb4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20aeb9:	e8 02 be ff ff       	callq  206cc0 <_ZN5alloc7raw_vec14handle_reserve28_$u7b$$u7b$closure$u7d$$u7d$17h1efb542338459167E>
  20aebe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20aec3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20aec8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20aecd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20aed2:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20aed7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20aedb:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20aedf:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20aee6:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20aeeb:	75 0a                	jne    20aef7 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0xa7>
  20aeed:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20aef2:	48 83 c4 68          	add    $0x68,%rsp
  20aef6:	c3                   	retq   
  20aef7:	eb f4                	jmp    20aeed <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E+0x9d>
  20aef9:	cc                   	int3   
  20aefa:	cc                   	int3   
  20aefb:	cc                   	int3   
  20aefc:	cc                   	int3   
  20aefd:	cc                   	int3   
  20aefe:	cc                   	int3   
  20aeff:	cc                   	int3   

000000000020af00 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20af00:	48 83 ec 58          	sub    $0x58,%rsp
  20af04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20af09:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20af0e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20af13:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        match self {
  20af18:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20af1d:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20af22:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20af27:	48 85 c0             	test   %rax,%rax
  20af2a:	0f 94 c0             	sete   %al
  20af2d:	0f b6 c0             	movzbl %al,%eax
  20af30:	75 06                	jne    20af38 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x38>
  20af32:	eb 00                	jmp    20af34 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x34>
  20af34:	eb 2c                	jmp    20af62 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x62>
  20af36:	0f 0b                	ud2    
  20af38:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Ok(t) => Ok(t),
  20af3d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20af42:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20af47:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  20af4c:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20af51:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20af55:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20af59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20af60:	eb 30                	jmp    20af92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x92>
            Err(e) => Err(op(e)),
  20af62:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20af67:	e8 34 bd ff ff       	callq  206ca0 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hf886e098f4878047E>
  20af6c:	48 89 04 24          	mov    %rax,(%rsp)
  20af70:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20af75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20af7a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20af7f:	48 8b 14 24          	mov    (%rsp),%rdx
  20af83:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20af87:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20af8b:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20af92:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20af97:	75 0a                	jne    20afa3 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0xa3>
  20af99:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20af9e:	48 83 c4 58          	add    $0x58,%rsp
  20afa2:	c3                   	retq   
  20afa3:	eb f4                	jmp    20af99 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3a9f784f45a4962aE+0x99>
  20afa5:	cc                   	int3   
  20afa6:	cc                   	int3   
  20afa7:	cc                   	int3   
  20afa8:	cc                   	int3   
  20afa9:	cc                   	int3   
  20afaa:	cc                   	int3   
  20afab:	cc                   	int3   
  20afac:	cc                   	int3   
  20afad:	cc                   	int3   
  20afae:	cc                   	int3   
  20afaf:	cc                   	int3   

000000000020afb0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  20afb0:	48 83 ec 68          	sub    $0x68,%rsp
  20afb4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20afb9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20afbe:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20afc3:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20afc8:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20afcd:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
        match self {
  20afd2:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20afd7:	c6 44 24 47 01       	movb   $0x1,0x47(%rsp)
  20afdc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20afe1:	48 85 c0             	test   %rax,%rax
  20afe4:	0f 94 c0             	sete   %al
  20afe7:	0f b6 c0             	movzbl %al,%eax
  20afea:	75 06                	jne    20aff2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x42>
  20afec:	eb 00                	jmp    20afee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x3e>
  20afee:	eb 2c                	jmp    20b01c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0x6c>
  20aff0:	0f 0b                	ud2    
  20aff2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            Ok(t) => Ok(t),
  20aff7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20affc:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20b001:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  20b006:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20b00b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b00f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b013:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b01a:	eb 37                	jmp    20b053 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xa3>
  20b01c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Err(e) => Err(op(e)),
  20b021:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b026:	e8 25 bc ff ff       	callq  206c50 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h86893349264546edE>
  20b02b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b030:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20b035:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20b03a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b03f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20b044:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b048:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b04c:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  20b053:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b058:	75 0a                	jne    20b064 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xb4>
  20b05a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b05f:	48 83 c4 68          	add    $0x68,%rsp
  20b063:	c3                   	retq   
  20b064:	eb f4                	jmp    20b05a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hcd5e7b5e4bf8a3a4E+0xaa>
  20b066:	cc                   	int3   
  20b067:	cc                   	int3   
  20b068:	cc                   	int3   
  20b069:	cc                   	int3   
  20b06a:	cc                   	int3   
  20b06b:	cc                   	int3   
  20b06c:	cc                   	int3   
  20b06d:	cc                   	int3   
  20b06e:	cc                   	int3   
  20b06f:	cc                   	int3   

000000000020b070 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b070:	48 83 ec 40          	sub    $0x40,%rsp
  20b074:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b078:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  20b07d:	48 8b 04 24          	mov    (%rsp),%rax
  20b081:	48 85 c0             	test   %rax,%rax
  20b084:	0f 94 c0             	sete   %al
  20b087:	0f b6 c0             	movzbl %al,%eax
  20b08a:	75 06                	jne    20b092 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x22>
  20b08c:	eb 00                	jmp    20b08e <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x1e>
  20b08e:	eb 21                	jmp    20b0b1 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x41>
  20b090:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b092:	48 8b 0c 24          	mov    (%rsp),%rcx
  20b096:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b09b:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b0a0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b0a5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20b0aa:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b0af:	eb 09                	jmp    20b0ba <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E+0x4a>
            Err(e) => ControlFlow::Break(Err(e)),
  20b0b1:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20b0b8:	00 00 
    }
  20b0ba:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b0bf:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b0c4:	48 83 c4 40          	add    $0x40,%rsp
  20b0c8:	c3                   	retq   
  20b0c9:	cc                   	int3   
  20b0ca:	cc                   	int3   
  20b0cb:	cc                   	int3   
  20b0cc:	cc                   	int3   
  20b0cd:	cc                   	int3   
  20b0ce:	cc                   	int3   
  20b0cf:	cc                   	int3   

000000000020b0d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b0d0:	48 83 ec 58          	sub    $0x58,%rsp
  20b0d4:	48 89 34 24          	mov    %rsi,(%rsp)
  20b0d8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b0dd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b0e2:	48 8b 46 08          	mov    0x8(%rsi),%rax
  20b0e6:	48 85 c0             	test   %rax,%rax
  20b0e9:	0f 94 c0             	sete   %al
  20b0ec:	0f b6 c0             	movzbl %al,%eax
  20b0ef:	75 06                	jne    20b0f7 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x27>
  20b0f1:	eb 00                	jmp    20b0f3 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x23>
  20b0f3:	eb 5f                	jmp    20b154 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x84>
  20b0f5:	0f 0b                	ud2    
  20b0f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b0fc:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b100:	48 8b 11             	mov    (%rcx),%rdx
  20b103:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b108:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b10c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20b111:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b115:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20b11a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20b11f:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b124:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b129:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b12e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20b133:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b138:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20b13d:	48 89 08             	mov    %rcx,(%rax)
  20b140:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20b145:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20b149:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20b14e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b152:	eb 0d                	jmp    20b161 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E+0x91>
  20b154:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => ControlFlow::Break(Err(e)),
  20b159:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  20b160:	00 
  20b161:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b166:	48 83 c4 58          	add    $0x58,%rsp
  20b16a:	c3                   	retq   
  20b16b:	cc                   	int3   
  20b16c:	cc                   	int3   
  20b16d:	cc                   	int3   
  20b16e:	cc                   	int3   
  20b16f:	cc                   	int3   

000000000020b170 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b170:	48 83 ec 40          	sub    $0x40,%rsp
  20b174:	48 89 34 24          	mov    %rsi,(%rsp)
  20b178:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b17d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b182:	48 8b 06             	mov    (%rsi),%rax
  20b185:	48 85 c0             	test   %rax,%rax
  20b188:	74 06                	je     20b190 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x20>
  20b18a:	eb 00                	jmp    20b18c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x1c>
  20b18c:	eb 10                	jmp    20b19e <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x2e>
  20b18e:	0f 0b                	ud2    
  20b190:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(v) => ControlFlow::Continue(v),
  20b195:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b19c:	eb 3e                	jmp    20b1dc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h3999a298f0de4330E+0x6c>
  20b19e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b1a3:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b1a7:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b1ab:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b1af:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20b1b4:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b1b9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b1be:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b1c3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b1c8:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b1cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b1d1:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b1d5:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20b1dc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b1e1:	48 83 c4 40          	add    $0x40,%rsp
  20b1e5:	c3                   	retq   
  20b1e6:	cc                   	int3   
  20b1e7:	cc                   	int3   
  20b1e8:	cc                   	int3   
  20b1e9:	cc                   	int3   
  20b1ea:	cc                   	int3   
  20b1eb:	cc                   	int3   
  20b1ec:	cc                   	int3   
  20b1ed:	cc                   	int3   
  20b1ee:	cc                   	int3   
  20b1ef:	cc                   	int3   

000000000020b1f0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b1f0:	48 83 ec 38          	sub    $0x38,%rsp
  20b1f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b1f8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  20b1fd:	48 8b 04 24          	mov    (%rsp),%rax
  20b201:	48 85 c0             	test   %rax,%rax
  20b204:	74 06                	je     20b20c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x1c>
  20b206:	eb 00                	jmp    20b208 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x18>
  20b208:	eb 1c                	jmp    20b226 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x36>
  20b20a:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b20c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b211:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20b216:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b21b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20b222:	00 00 
  20b224:	eb 09                	jmp    20b22f <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE+0x3f>
            Err(e) => ControlFlow::Break(Err(e)),
  20b226:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  20b22d:	00 00 
    }
  20b22f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b234:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b239:	48 83 c4 38          	add    $0x38,%rsp
  20b23d:	c3                   	retq   
  20b23e:	cc                   	int3   
  20b23f:	cc                   	int3   

000000000020b240 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b240:	48 83 ec 48          	sub    $0x48,%rsp
  20b244:	48 89 34 24          	mov    %rsi,(%rsp)
  20b248:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b24d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b252:	48 8b 06             	mov    (%rsi),%rax
  20b255:	48 85 c0             	test   %rax,%rax
  20b258:	74 06                	je     20b260 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x20>
  20b25a:	eb 00                	jmp    20b25c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x1c>
  20b25c:	eb 2e                	jmp    20b28c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x4c>
  20b25e:	0f 0b                	ud2    
  20b260:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b265:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b269:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b26d:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b271:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20b276:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b27b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b27f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b283:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b28a:	eb 3e                	jmp    20b2ca <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7f995eaa4ea58de0E+0x8a>
  20b28c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b291:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b295:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b299:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b29d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b2a2:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b2a7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b2ac:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b2b1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b2b6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b2bb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b2bf:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b2c3:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20b2ca:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b2cf:	48 83 c4 48          	add    $0x48,%rsp
  20b2d3:	c3                   	retq   
  20b2d4:	cc                   	int3   
  20b2d5:	cc                   	int3   
  20b2d6:	cc                   	int3   
  20b2d7:	cc                   	int3   
  20b2d8:	cc                   	int3   
  20b2d9:	cc                   	int3   
  20b2da:	cc                   	int3   
  20b2db:	cc                   	int3   
  20b2dc:	cc                   	int3   
  20b2dd:	cc                   	int3   
  20b2de:	cc                   	int3   
  20b2df:	cc                   	int3   

000000000020b2e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b2e0:	48 83 ec 28          	sub    $0x28,%rsp
  20b2e4:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  20b2e8:	48 8b 04 24          	mov    (%rsp),%rax
  20b2ec:	48 85 c0             	test   %rax,%rax
  20b2ef:	0f 94 c0             	sete   %al
  20b2f2:	0f b6 c0             	movzbl %al,%eax
  20b2f5:	75 06                	jne    20b2fd <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x1d>
  20b2f7:	eb 00                	jmp    20b2f9 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x19>
  20b2f9:	eb 12                	jmp    20b30d <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x2d>
  20b2fb:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b2fd:	48 8b 04 24          	mov    (%rsp),%rax
  20b301:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b306:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b30b:	eb 09                	jmp    20b316 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE+0x36>
            Err(e) => ControlFlow::Break(Err(e)),
  20b30d:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20b314:	00 00 
    }
  20b316:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b31b:	48 83 c4 28          	add    $0x28,%rsp
  20b31f:	c3                   	retq   

000000000020b320 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b320:	48 83 ec 40          	sub    $0x40,%rsp
  20b324:	48 89 34 24          	mov    %rsi,(%rsp)
  20b328:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b32d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b332:	48 8b 06             	mov    (%rsi),%rax
  20b335:	48 85 c0             	test   %rax,%rax
  20b338:	74 06                	je     20b340 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x20>
  20b33a:	eb 00                	jmp    20b33c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x1c>
  20b33c:	eb 21                	jmp    20b35f <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x3f>
  20b33e:	0f 0b                	ud2    
  20b340:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b345:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b349:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  20b34d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20b352:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20b356:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b35d:	eb 3e                	jmp    20b39d <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h95fa5695fb2a340fE+0x7d>
  20b35f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b364:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b368:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b36c:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b370:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b375:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b37a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b37f:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b384:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b389:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b38e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b392:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b396:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20b39d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b3a2:	48 83 c4 40          	add    $0x40,%rsp
  20b3a6:	c3                   	retq   
  20b3a7:	cc                   	int3   
  20b3a8:	cc                   	int3   
  20b3a9:	cc                   	int3   
  20b3aa:	cc                   	int3   
  20b3ab:	cc                   	int3   
  20b3ac:	cc                   	int3   
  20b3ad:	cc                   	int3   
  20b3ae:	cc                   	int3   
  20b3af:	cc                   	int3   

000000000020b3b0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b3b0:	48 83 ec 48          	sub    $0x48,%rsp
  20b3b4:	48 89 34 24          	mov    %rsi,(%rsp)
  20b3b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b3bd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20b3c2:	48 8b 06             	mov    (%rsi),%rax
  20b3c5:	48 85 c0             	test   %rax,%rax
  20b3c8:	74 06                	je     20b3d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x20>
  20b3ca:	eb 00                	jmp    20b3cc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x1c>
  20b3cc:	eb 2e                	jmp    20b3fc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x4c>
  20b3ce:	0f 0b                	ud2    
  20b3d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b3d5:	48 8b 0c 24          	mov    (%rsp),%rcx
            Ok(v) => ControlFlow::Continue(v),
  20b3d9:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b3dd:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b3e1:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20b3e6:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b3eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b3ef:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b3f3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  20b3fa:	eb 3e                	jmp    20b43a <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb125d4abb86e7241E+0x8a>
  20b3fc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b401:	48 8b 0c 24          	mov    (%rsp),%rcx
            Err(e) => ControlFlow::Break(Err(e)),
  20b405:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  20b409:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  20b40d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b412:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b417:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b41c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20b421:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b426:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b42b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b42f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20b433:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20b43a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20b43f:	48 83 c4 48          	add    $0x48,%rsp
  20b443:	c3                   	retq   
  20b444:	cc                   	int3   
  20b445:	cc                   	int3   
  20b446:	cc                   	int3   
  20b447:	cc                   	int3   
  20b448:	cc                   	int3   
  20b449:	cc                   	int3   
  20b44a:	cc                   	int3   
  20b44b:	cc                   	int3   
  20b44c:	cc                   	int3   
  20b44d:	cc                   	int3   
  20b44e:	cc                   	int3   
  20b44f:	cc                   	int3   

000000000020b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  20b450:	48 83 ec 20          	sub    $0x20,%rsp
  20b454:	40 88 f8             	mov    %dil,%al
  20b457:	24 01                	and    $0x1,%al
  20b459:	88 44 24 06          	mov    %al,0x6(%rsp)
        match self {
  20b45d:	0f b6 44 24 06       	movzbl 0x6(%rsp),%eax
  20b462:	a8 01                	test   $0x1,%al
  20b464:	74 06                	je     20b46c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x1c>
  20b466:	eb 00                	jmp    20b468 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x18>
  20b468:	eb 09                	jmp    20b473 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x23>
  20b46a:	0f 0b                	ud2    
            Ok(v) => ControlFlow::Continue(v),
  20b46c:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  20b471:	eb 05                	jmp    20b478 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E+0x28>
            Err(e) => ControlFlow::Break(Err(e)),
  20b473:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
    }
  20b478:	8a 44 24 07          	mov    0x7(%rsp),%al
  20b47c:	24 01                	and    $0x1,%al
  20b47e:	0f b6 c0             	movzbl %al,%eax
  20b481:	48 83 c4 20          	add    $0x20,%rsp
  20b485:	c3                   	retq   
  20b486:	cc                   	int3   
  20b487:	cc                   	int3   
  20b488:	cc                   	int3   
  20b489:	cc                   	int3   
  20b48a:	cc                   	int3   
  20b48b:	cc                   	int3   
  20b48c:	cc                   	int3   
  20b48d:	cc                   	int3   
  20b48e:	cc                   	int3   
  20b48f:	cc                   	int3   

000000000020b490 <_ZN4core3ops8function6FnOnce9call_once17h113bbf498259d8e9E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
  20b490:	48 83 ec 18          	sub    $0x18,%rsp
  20b494:	48 89 f8             	mov    %rdi,%rax
  20b497:	48 89 04 24          	mov    %rax,(%rsp)
        kernel_tss_selector: k_tss_segment_result.unwrap(),
    }
}

lazy_static! {
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
  20b49b:	e8 b0 fd 00 00       	callq  21b250 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE>
  20b4a0:	48 8b 04 24          	mov    (%rsp),%rax
  20b4a4:	48 83 c4 18          	add    $0x18,%rsp
  20b4a8:	c3                   	retq   
  20b4a9:	cc                   	int3   
  20b4aa:	cc                   	int3   
  20b4ab:	cc                   	int3   
  20b4ac:	cc                   	int3   
  20b4ad:	cc                   	int3   
  20b4ae:	cc                   	int3   
  20b4af:	cc                   	int3   

000000000020b4b0 <_ZN4core3ops8function6FnOnce9call_once17h1edd667f22cfc967E>:
  20b4b0:	48 83 ec 18          	sub    $0x18,%rsp
  20b4b4:	48 89 f8             	mov    %rdi,%rax
  20b4b7:	48 89 04 24          	mov    %rax,(%rsp)

    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
}

lazy_static! {
    pub static ref KERNEL_PAGING: VirtualMemoryManager = init_kernel_vmm();
  20b4bb:	e8 d0 23 00 00       	callq  20d890 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE>
  20b4c0:	48 8b 04 24          	mov    (%rsp),%rax
  20b4c4:	48 83 c4 18          	add    $0x18,%rsp
  20b4c8:	c3                   	retq   
  20b4c9:	cc                   	int3   
  20b4ca:	cc                   	int3   
  20b4cb:	cc                   	int3   
  20b4cc:	cc                   	int3   
  20b4cd:	cc                   	int3   
  20b4ce:	cc                   	int3   
  20b4cf:	cc                   	int3   

000000000020b4d0 <_ZN4core3ops8function6FnOnce9call_once17h292df0ed92871557E>:
  20b4d0:	48 83 ec 48          	sub    $0x48,%rsp
  20b4d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b4d9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

    probe_res.unwrap()
}

lazy_static! {
    pub static ref PROCESSORS: Mutex<Processors> = Mutex::new(probe_cpus());
  20b4de:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20b4e3:	e8 c8 a0 01 00       	callq  2255b0 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E>
  20b4e8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20b4ed:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20b4f2:	e8 d9 09 02 00       	callq  22bed0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb8a225ac51d82457E>
  20b4f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b4fc:	48 83 c4 48          	add    $0x48,%rsp
  20b500:	c3                   	retq   
  20b501:	cc                   	int3   
  20b502:	cc                   	int3   
  20b503:	cc                   	int3   
  20b504:	cc                   	int3   
  20b505:	cc                   	int3   
  20b506:	cc                   	int3   
  20b507:	cc                   	int3   
  20b508:	cc                   	int3   
  20b509:	cc                   	int3   
  20b50a:	cc                   	int3   
  20b50b:	cc                   	int3   
  20b50c:	cc                   	int3   
  20b50d:	cc                   	int3   
  20b50e:	cc                   	int3   
  20b50f:	cc                   	int3   

000000000020b510 <_ZN4core3ops8function6FnOnce9call_once17h2a57aa7eac2aa15bE>:
  20b510:	48 83 ec 78          	sub    $0x78,%rsp
  20b514:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b519:	48 89 3c 24          	mov    %rdi,(%rsp)
        cpcis
    }
}

lazy_static! {
    pub static ref CHAINED_PIC: Mutex<ChainedPIC> = Mutex::new(ChainedPIC::init(0xff, 0xff));
  20b51d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20b522:	ba ff 00 00 00       	mov    $0xff,%edx
  20b527:	89 d6                	mov    %edx,%esi
  20b529:	e8 92 fa 01 00       	callq  22afc0 <_ZN9r3_kernel3cpu3pic10ChainedPIC4init17hfc2fdf5ad2bb63a7E>
  20b52e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b533:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20b538:	e8 c3 05 02 00       	callq  22bb00 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3fd6b3d9821e2ef0E>
  20b53d:	48 8b 04 24          	mov    (%rsp),%rax
  20b541:	48 83 c4 78          	add    $0x78,%rsp
  20b545:	c3                   	retq   
  20b546:	cc                   	int3   
  20b547:	cc                   	int3   
  20b548:	cc                   	int3   
  20b549:	cc                   	int3   
  20b54a:	cc                   	int3   
  20b54b:	cc                   	int3   
  20b54c:	cc                   	int3   
  20b54d:	cc                   	int3   
  20b54e:	cc                   	int3   
  20b54f:	cc                   	int3   

000000000020b550 <_ZN4core3ops8function6FnOnce9call_once17h2ba66678938adde7E>:
  20b550:	48 81 ec 28 10 00 00 	sub    $0x1028,%rsp
  20b557:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b55c:	48 89 3c 24          	mov    %rdi,(%rsp)
    log::info!("Prepared basic exceptions.");
    return idt;
}

lazy_static! {
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
  20b560:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20b565:	e8 b6 e1 01 00       	callq  229720 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE>
  20b56a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b56f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20b574:	e8 67 07 02 00       	callq  22bce0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h75f3bb8e10f24d6cE>
  20b579:	48 8b 04 24          	mov    (%rsp),%rax
  20b57d:	48 81 c4 28 10 00 00 	add    $0x1028,%rsp
  20b584:	c3                   	retq   
  20b585:	cc                   	int3   
  20b586:	cc                   	int3   
  20b587:	cc                   	int3   
  20b588:	cc                   	int3   
  20b589:	cc                   	int3   
  20b58a:	cc                   	int3   
  20b58b:	cc                   	int3   
  20b58c:	cc                   	int3   
  20b58d:	cc                   	int3   
  20b58e:	cc                   	int3   
  20b58f:	cc                   	int3   

000000000020b590 <_ZN4core3ops8function6FnOnce9call_once17h35dfcc7c677b1963E>:
  20b590:	48 83 ec 18          	sub    $0x18,%rsp
  20b594:	48 89 f8             	mov    %rdi,%rax
  20b597:	48 89 04 24          	mov    %rax,(%rsp)

lazy_static! {
    pub static ref UART_DRIVER: Option<Mutex<UART>> = init_uart();
  20b59b:	e8 80 b3 ff ff       	callq  206920 <_ZN9r3_kernel7drivers4uart9init_uart17h09d38c99ebaa066bE>
  20b5a0:	48 8b 04 24          	mov    (%rsp),%rax
  20b5a4:	48 83 c4 18          	add    $0x18,%rsp
  20b5a8:	c3                   	retq   
  20b5a9:	cc                   	int3   
  20b5aa:	cc                   	int3   
  20b5ab:	cc                   	int3   
  20b5ac:	cc                   	int3   
  20b5ad:	cc                   	int3   
  20b5ae:	cc                   	int3   
  20b5af:	cc                   	int3   

000000000020b5b0 <_ZN4core3ops8function6FnOnce9call_once17h4985b7a711a6d100E>:
  20b5b0:	48 83 ec 28          	sub    $0x28,%rsp
  20b5b4:	48 89 f8             	mov    %rdi,%rax
  20b5b7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    Mutex::new(FramebufferLogger::init(color))
}

lazy_static! {
    pub static ref FRAMEBUFFER_LOGGER: Mutex<FramebufferLogger> =
        setup_framebuffer(framebuffer::Pixel {
  20b5bc:	c6 44 24 20 ff       	movb   $0xff,0x20(%rsp)
  20b5c1:	c6 44 24 21 ff       	movb   $0xff,0x21(%rsp)
  20b5c6:	c6 44 24 22 ff       	movb   $0xff,0x22(%rsp)
  20b5cb:	c6 44 24 23 00       	movb   $0x0,0x23(%rsp)
  20b5d0:	8b 74 24 20          	mov    0x20(%rsp),%esi
  20b5d4:	e8 07 25 01 00       	callq  21dae0 <_ZN9r3_kernel7drivers7display7fb_text17setup_framebuffer17hacd8dd41e1df2539E>
  20b5d9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b5de:	48 83 c4 28          	add    $0x28,%rsp
  20b5e2:	c3                   	retq   
  20b5e3:	cc                   	int3   
  20b5e4:	cc                   	int3   
  20b5e5:	cc                   	int3   
  20b5e6:	cc                   	int3   
  20b5e7:	cc                   	int3   
  20b5e8:	cc                   	int3   
  20b5e9:	cc                   	int3   
  20b5ea:	cc                   	int3   
  20b5eb:	cc                   	int3   
  20b5ec:	cc                   	int3   
  20b5ed:	cc                   	int3   
  20b5ee:	cc                   	int3   
  20b5ef:	cc                   	int3   

000000000020b5f0 <_ZN4core3ops8function6FnOnce9call_once17h598ec53524868f86E>:
  20b5f0:	48 83 ec 38          	sub    $0x38,%rsp
  20b5f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b5f9:	48 89 3c 24          	mov    %rdi,(%rsp)
        config_reg.write_config(value);
    }
}

lazy_static! {
    pub static ref PCI_DEVICES: Mutex<Vec<PCIDevice>> = Mutex::new(Vec::new());
  20b5fd:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20b602:	e8 f9 58 00 00       	callq  210f00 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc024dbab028df719E>
  20b607:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b60c:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20b611:	e8 8a 03 02 00       	callq  22b9a0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1d35398e75f8f15cE>
  20b616:	48 8b 04 24          	mov    (%rsp),%rax
  20b61a:	48 83 c4 38          	add    $0x38,%rsp
  20b61e:	c3                   	retq   
  20b61f:	cc                   	int3   

000000000020b620 <_ZN4core3ops8function6FnOnce9call_once17h764d520568e619d0E>:
  20b620:	48 83 ec 28          	sub    $0x28,%rsp
  20b624:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b629:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20b62e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20b633:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20b638:	e8 73 b5 01 00       	callq  226bb0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E>
  20b63d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20b641:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20b645:	48 83 c4 28          	add    $0x28,%rsp
  20b649:	c3                   	retq   
  20b64a:	cc                   	int3   
  20b64b:	cc                   	int3   
  20b64c:	cc                   	int3   
  20b64d:	cc                   	int3   
  20b64e:	cc                   	int3   
  20b64f:	cc                   	int3   

000000000020b650 <_ZN4core3ops8function6FnOnce9call_once17h818c130c4421a1d0E>:
  20b650:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
  20b657:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b65c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        None
    }
}

lazy_static! {
    pub static ref ACPI: Mutex<Option<Acpi>> = Mutex::new(init_acpi());
  20b661:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20b666:	e8 e5 6b 00 00       	callq  212250 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E>
  20b66b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20b670:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20b675:	e8 e6 03 02 00       	callq  22ba60 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3237b67d888c05a7E>
  20b67a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b67f:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
  20b686:	c3                   	retq   
  20b687:	cc                   	int3   
  20b688:	cc                   	int3   
  20b689:	cc                   	int3   
  20b68a:	cc                   	int3   
  20b68b:	cc                   	int3   
  20b68c:	cc                   	int3   
  20b68d:	cc                   	int3   
  20b68e:	cc                   	int3   
  20b68f:	cc                   	int3   

000000000020b690 <_ZN4core3ops8function6FnOnce9call_once17h904af9fc8ad763bdE>:
  20b690:	48 83 ec 18          	sub    $0x18,%rsp
  20b694:	48 89 f8             	mov    %rdi,%rax
  20b697:	48 89 04 24          	mov    %rax,(%rsp)

    Some(Mutex::new(fb_opt.unwrap()))
}

lazy_static! {
    pub static ref FRAMEBUFFER: Option<LockedFramebuffer> = init_framebuffer();
  20b69b:	e8 b0 97 00 00       	callq  214e50 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE>
  20b6a0:	48 8b 04 24          	mov    (%rsp),%rax
  20b6a4:	48 83 c4 18          	add    $0x18,%rsp
  20b6a8:	c3                   	retq   
  20b6a9:	cc                   	int3   
  20b6aa:	cc                   	int3   
  20b6ab:	cc                   	int3   
  20b6ac:	cc                   	int3   
  20b6ad:	cc                   	int3   
  20b6ae:	cc                   	int3   
  20b6af:	cc                   	int3   

000000000020b6b0 <_ZN4core3ops8function6FnOnce9call_once17h9b71252915a475a7E>:
  20b6b0:	48 83 ec 18          	sub    $0x18,%rsp
  20b6b4:	48 89 f8             	mov    %rdi,%rax
  20b6b7:	48 89 04 24          	mov    %rax,(%rsp)
    let pit = PITCommandControl::new();
    pit
}

lazy_static! {
    pub static ref PIT: PITCommandControl = init();
  20b6bb:	e8 c0 10 02 00       	callq  22c780 <_ZN9r3_kernel3cpu3pit4init17hf03d8e373d7c27d5E>
  20b6c0:	48 8b 04 24          	mov    (%rsp),%rax
  20b6c4:	48 83 c4 18          	add    $0x18,%rsp
  20b6c8:	c3                   	retq   
  20b6c9:	cc                   	int3   
  20b6ca:	cc                   	int3   
  20b6cb:	cc                   	int3   
  20b6cc:	cc                   	int3   
  20b6cd:	cc                   	int3   
  20b6ce:	cc                   	int3   
  20b6cf:	cc                   	int3   

000000000020b6d0 <_ZN4core3ops8function6FnOnce9call_once17ha33d620dcb6c3e32E>:
  20b6d0:	48 83 ec 58          	sub    $0x58,%rsp
        max_standard_level,
    }
}

lazy_static! {
    static ref CPU_FEATURES: CPUFeatures = probe_cpu_features();
  20b6d4:	e8 47 41 01 00       	callq  21f820 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE>
  20b6d9:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20b6de:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b6e3:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20b6e8:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  20b6ed:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  20b6f2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
                fn __static_ref_initialize() -> $T { $e }
  20b6f7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20b6fc:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20b701:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20b706:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20b70b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b710:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b715:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20b71a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b71f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b724:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20b729:	48 83 c4 58          	add    $0x58,%rsp
  20b72d:	c3                   	retq   
  20b72e:	cc                   	int3   
  20b72f:	cc                   	int3   

000000000020b730 <_ZN4core3ops8function6FnOnce9call_once17hc0401856d345fdcbE>:
  20b730:	48 83 ec 28          	sub    $0x28,%rsp
  20b734:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b739:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        self.boot_info = Some(b_proto);
    }
}

lazy_static! {
    pub static ref BOOT_INFO: Mutex<BootProtoContainer> = Mutex::new(BootProtoContainer::empty());
  20b73e:	e8 5d c6 00 00       	callq  217da0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h18c47f5fed896c76E>
  20b743:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20b748:	48 89 c6             	mov    %rax,%rsi
  20b74b:	e8 30 06 02 00       	callq  22bd80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h7b64888ecb399409E>
  20b750:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20b755:	48 83 c4 28          	add    $0x28,%rsp
  20b759:	c3                   	retq   
  20b75a:	cc                   	int3   
  20b75b:	cc                   	int3   
  20b75c:	cc                   	int3   
  20b75d:	cc                   	int3   
  20b75e:	cc                   	int3   
  20b75f:	cc                   	int3   

000000000020b760 <_ZN4core3ops8function6FnOnce9call_once17hc979a394b9036ee6E>:
  20b760:	48 81 ec 28 08 00 00 	sub    $0x828,%rsp
  20b767:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b76c:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
}

lazy_static! {
    pub static ref LINEAR_ALLOCATOR: Mutex<LinearFrameAllocator> =
        Mutex::new(LinearFrameAllocator::init());
  20b770:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20b775:	e8 96 b2 00 00       	callq  216a10 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E>
  20b77a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b77f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20b784:	e8 27 09 02 00       	callq  22c0b0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hd79f873b25981983E>
  20b789:	48 8b 04 24          	mov    (%rsp),%rax
  20b78d:	48 81 c4 28 08 00 00 	add    $0x828,%rsp
  20b794:	c3                   	retq   
  20b795:	cc                   	int3   
  20b796:	cc                   	int3   
  20b797:	cc                   	int3   
  20b798:	cc                   	int3   
  20b799:	cc                   	int3   
  20b79a:	cc                   	int3   
  20b79b:	cc                   	int3   
  20b79c:	cc                   	int3   
  20b79d:	cc                   	int3   
  20b79e:	cc                   	int3   
  20b79f:	cc                   	int3   

000000000020b7a0 <_ZN4core3ops8function6FnOnce9call_once17hd8203fd94ba4d5e4E>:
  20b7a0:	48 83 ec 18          	sub    $0x18,%rsp
  20b7a4:	48 89 f8             	mov    %rdi,%rax
  20b7a7:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
  20b7ab:	e8 30 fa 00 00       	callq  21b1e0 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E>
  20b7b0:	48 8b 04 24          	mov    (%rsp),%rax
  20b7b4:	48 83 c4 18          	add    $0x18,%rsp
  20b7b8:	c3                   	retq   
  20b7b9:	cc                   	int3   
  20b7ba:	cc                   	int3   
  20b7bb:	cc                   	int3   
  20b7bc:	cc                   	int3   
  20b7bd:	cc                   	int3   
  20b7be:	cc                   	int3   
  20b7bf:	cc                   	int3   

000000000020b7c0 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h12077539360bc3b9E>:
/// assert!(weak.upgrade().is_none());
/// ```
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  20b7c0:	50                   	push   %rax
  20b7c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b7c5:	48 83 c7 08          	add    $0x8,%rdi
  20b7c9:	e8 32 00 00 00       	callq  20b800 <_ZN4core3ptr108drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h0909451fada9f1cfE>
  20b7ce:	58                   	pop    %rax
  20b7cf:	c3                   	retq   

000000000020b7d0 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h6b7435ddd305bf85E>:
  20b7d0:	50                   	push   %rax
  20b7d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b7d5:	e8 e6 04 00 00       	callq  20bcc0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5f29223eba14b0d9E>
  20b7da:	58                   	pop    %rax
  20b7db:	c3                   	retq   
  20b7dc:	cc                   	int3   
  20b7dd:	cc                   	int3   
  20b7de:	cc                   	int3   
  20b7df:	cc                   	int3   

000000000020b7e0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>:
  20b7e0:	50                   	push   %rax
  20b7e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b7e5:	e8 36 05 00 00       	callq  20bd20 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h756125f32cd8645dE>
  20b7ea:	58                   	pop    %rax
  20b7eb:	c3                   	retq   
  20b7ec:	cc                   	int3   
  20b7ed:	cc                   	int3   
  20b7ee:	cc                   	int3   
  20b7ef:	cc                   	int3   

000000000020b7f0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$$GT$17h46c9f61d2c18a255E>:
  20b7f0:	50                   	push   %rax
  20b7f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b7f5:	e8 f6 04 00 00       	callq  20bcf0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d20b1d630f88b51E>
  20b7fa:	58                   	pop    %rax
  20b7fb:	c3                   	retq   
  20b7fc:	cc                   	int3   
  20b7fd:	cc                   	int3   
  20b7fe:	cc                   	int3   
  20b7ff:	cc                   	int3   

000000000020b800 <_ZN4core3ptr108drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h0909451fada9f1cfE>:
  20b800:	50                   	push   %rax
  20b801:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b805:	e8 46 02 00 00       	callq  20ba50 <_ZN4core3ptr78drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17h216fad7122761ab4E>
  20b80a:	58                   	pop    %rax
  20b80b:	c3                   	retq   
  20b80c:	cc                   	int3   
  20b80d:	cc                   	int3   
  20b80e:	cc                   	int3   
  20b80f:	cc                   	int3   

000000000020b810 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE>:
  20b810:	48 83 ec 18          	sub    $0x18,%rsp
  20b814:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b819:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b81e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20b822:	75 05                	jne    20b829 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE+0x19>
  20b824:	48 83 c4 18          	add    $0x18,%rsp
  20b828:	c3                   	retq   
  20b829:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b82e:	48 83 c7 08          	add    $0x8,%rdi
  20b832:	e8 49 02 00 00       	callq  20ba80 <_ZN4core3ptr80drop_in_place$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17he0385d7b1a1e9266E>
  20b837:	eb eb                	jmp    20b824 <_ZN4core3ptr108drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$$GT$17h4ebdd0951a05205bE+0x14>
  20b839:	cc                   	int3   
  20b83a:	cc                   	int3   
  20b83b:	cc                   	int3   
  20b83c:	cc                   	int3   
  20b83d:	cc                   	int3   
  20b83e:	cc                   	int3   
  20b83f:	cc                   	int3   

000000000020b840 <_ZN4core3ptr109drop_in_place$LT$spin..mutex..MutexGuard$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h8235977f861fb9cdE>:
  20b840:	50                   	push   %rax
  20b841:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b845:	e8 96 05 00 00       	callq  20bde0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfd8a5de3b3c2f6f2E>
  20b84a:	58                   	pop    %rax
  20b84b:	c3                   	retq   
  20b84c:	cc                   	int3   
  20b84d:	cc                   	int3   
  20b84e:	cc                   	int3   
  20b84f:	cc                   	int3   

000000000020b850 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>:
  20b850:	50                   	push   %rax
  20b851:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b855:	e8 36 04 00 00       	callq  20bc90 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5adf5324be6f8979E>
  20b85a:	58                   	pop    %rax
  20b85b:	c3                   	retq   
  20b85c:	cc                   	int3   
  20b85d:	cc                   	int3   
  20b85e:	cc                   	int3   
  20b85f:	cc                   	int3   

000000000020b860 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E>:
  20b860:	48 83 ec 18          	sub    $0x18,%rsp
  20b864:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b869:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b86e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20b872:	75 05                	jne    20b879 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E+0x19>
  20b874:	48 83 c4 18          	add    $0x18,%rsp
  20b878:	c3                   	retq   
  20b879:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b87e:	48 83 c7 08          	add    $0x8,%rdi
  20b882:	e8 39 ff ff ff       	callq  20b7c0 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h12077539360bc3b9E>
  20b887:	eb eb                	jmp    20b874 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$$GT$17h3bd8883fc2709277E+0x14>
  20b889:	cc                   	int3   
  20b88a:	cc                   	int3   
  20b88b:	cc                   	int3   
  20b88c:	cc                   	int3   
  20b88d:	cc                   	int3   
  20b88e:	cc                   	int3   
  20b88f:	cc                   	int3   

000000000020b890 <_ZN4core3ptr24drop_in_place$LT$u64$GT$17hacdc4778a9e1453eE>:
  20b890:	50                   	push   %rax
  20b891:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b895:	58                   	pop    %rax
  20b896:	c3                   	retq   
  20b897:	cc                   	int3   
  20b898:	cc                   	int3   
  20b899:	cc                   	int3   
  20b89a:	cc                   	int3   
  20b89b:	cc                   	int3   
  20b89c:	cc                   	int3   
  20b89d:	cc                   	int3   
  20b89e:	cc                   	int3   
  20b89f:	cc                   	int3   

000000000020b8a0 <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17h109654ab3046a581E>:
  20b8a0:	50                   	push   %rax
  20b8a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8a5:	58                   	pop    %rax
  20b8a6:	c3                   	retq   
  20b8a7:	cc                   	int3   
  20b8a8:	cc                   	int3   
  20b8a9:	cc                   	int3   
  20b8aa:	cc                   	int3   
  20b8ab:	cc                   	int3   
  20b8ac:	cc                   	int3   
  20b8ad:	cc                   	int3   
  20b8ae:	cc                   	int3   
  20b8af:	cc                   	int3   

000000000020b8b0 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17ha56bfcebe0ce7549E>:
  20b8b0:	50                   	push   %rax
  20b8b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8b5:	58                   	pop    %rax
  20b8b6:	c3                   	retq   
  20b8b7:	cc                   	int3   
  20b8b8:	cc                   	int3   
  20b8b9:	cc                   	int3   
  20b8ba:	cc                   	int3   
  20b8bb:	cc                   	int3   
  20b8bc:	cc                   	int3   
  20b8bd:	cc                   	int3   
  20b8be:	cc                   	int3   
  20b8bf:	cc                   	int3   

000000000020b8c0 <_ZN4core3ptr28drop_in_place$LT$$RF$u16$GT$17h950920499e87b73aE>:
  20b8c0:	50                   	push   %rax
  20b8c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8c5:	58                   	pop    %rax
  20b8c6:	c3                   	retq   
  20b8c7:	cc                   	int3   
  20b8c8:	cc                   	int3   
  20b8c9:	cc                   	int3   
  20b8ca:	cc                   	int3   
  20b8cb:	cc                   	int3   
  20b8cc:	cc                   	int3   
  20b8cd:	cc                   	int3   
  20b8ce:	cc                   	int3   
  20b8cf:	cc                   	int3   

000000000020b8d0 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17hb731a3b520d8f0dbE>:
  20b8d0:	50                   	push   %rax
  20b8d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8d5:	58                   	pop    %rax
  20b8d6:	c3                   	retq   
  20b8d7:	cc                   	int3   
  20b8d8:	cc                   	int3   
  20b8d9:	cc                   	int3   
  20b8da:	cc                   	int3   
  20b8db:	cc                   	int3   
  20b8dc:	cc                   	int3   
  20b8dd:	cc                   	int3   
  20b8de:	cc                   	int3   
  20b8df:	cc                   	int3   

000000000020b8e0 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h97dba134a3a50395E>:
  20b8e0:	50                   	push   %rax
  20b8e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8e5:	58                   	pop    %rax
  20b8e6:	c3                   	retq   
  20b8e7:	cc                   	int3   
  20b8e8:	cc                   	int3   
  20b8e9:	cc                   	int3   
  20b8ea:	cc                   	int3   
  20b8eb:	cc                   	int3   
  20b8ec:	cc                   	int3   
  20b8ed:	cc                   	int3   
  20b8ee:	cc                   	int3   
  20b8ef:	cc                   	int3   

000000000020b8f0 <_ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17hfbe49c2abb5d14daE>:
  20b8f0:	50                   	push   %rax
  20b8f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b8f5:	58                   	pop    %rax
  20b8f6:	c3                   	retq   
  20b8f7:	cc                   	int3   
  20b8f8:	cc                   	int3   
  20b8f9:	cc                   	int3   
  20b8fa:	cc                   	int3   
  20b8fb:	cc                   	int3   
  20b8fc:	cc                   	int3   
  20b8fd:	cc                   	int3   
  20b8fe:	cc                   	int3   
  20b8ff:	cc                   	int3   

000000000020b900 <_ZN4core3ptr29drop_in_place$LT$$RF$bool$GT$17h94a6c33174cb40b8E>:
  20b900:	50                   	push   %rax
  20b901:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b905:	58                   	pop    %rax
  20b906:	c3                   	retq   
  20b907:	cc                   	int3   
  20b908:	cc                   	int3   
  20b909:	cc                   	int3   
  20b90a:	cc                   	int3   
  20b90b:	cc                   	int3   
  20b90c:	cc                   	int3   
  20b90d:	cc                   	int3   
  20b90e:	cc                   	int3   
  20b90f:	cc                   	int3   

000000000020b910 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4a227c68c5b45683E>:
  20b910:	50                   	push   %rax
  20b911:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b915:	58                   	pop    %rax
  20b916:	c3                   	retq   
  20b917:	cc                   	int3   
  20b918:	cc                   	int3   
  20b919:	cc                   	int3   
  20b91a:	cc                   	int3   
  20b91b:	cc                   	int3   
  20b91c:	cc                   	int3   
  20b91d:	cc                   	int3   
  20b91e:	cc                   	int3   
  20b91f:	cc                   	int3   

000000000020b920 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hfa77002b7bdeb0afE>:
  20b920:	50                   	push   %rax
  20b921:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b925:	58                   	pop    %rax
  20b926:	c3                   	retq   
  20b927:	cc                   	int3   
  20b928:	cc                   	int3   
  20b929:	cc                   	int3   
  20b92a:	cc                   	int3   
  20b92b:	cc                   	int3   
  20b92c:	cc                   	int3   
  20b92d:	cc                   	int3   
  20b92e:	cc                   	int3   
  20b92f:	cc                   	int3   

000000000020b930 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1e72272e055ed4abE>:
  20b930:	50                   	push   %rax
  20b931:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b935:	e8 06 45 02 00       	callq  22fe40 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>
  20b93a:	58                   	pop    %rax
  20b93b:	c3                   	retq   
  20b93c:	cc                   	int3   
  20b93d:	cc                   	int3   
  20b93e:	cc                   	int3   
  20b93f:	cc                   	int3   

000000000020b940 <_ZN4core3ptr47drop_in_place$LT$alloc..vec..Vec$LT$u64$GT$$GT$17h366995e978bb6b5fE>:
  20b940:	48 83 ec 18          	sub    $0x18,%rsp
  20b944:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b949:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b94e:	e8 1d 02 00 00       	callq  20bb70 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E>
  20b953:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20b958:	e8 43 00 00 00       	callq  20b9a0 <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u64$GT$$GT$17hab641697e021095cE>
  20b95d:	48 83 c4 18          	add    $0x18,%rsp
  20b961:	c3                   	retq   
  20b962:	cc                   	int3   
  20b963:	cc                   	int3   
  20b964:	cc                   	int3   
  20b965:	cc                   	int3   
  20b966:	cc                   	int3   
  20b967:	cc                   	int3   
  20b968:	cc                   	int3   
  20b969:	cc                   	int3   
  20b96a:	cc                   	int3   
  20b96b:	cc                   	int3   
  20b96c:	cc                   	int3   
  20b96d:	cc                   	int3   
  20b96e:	cc                   	int3   
  20b96f:	cc                   	int3   

000000000020b970 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..acpi..madt..MADTError$GT$17hbabe6cec272370d1E>:
  20b970:	50                   	push   %rax
  20b971:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b975:	58                   	pop    %rax
  20b976:	c3                   	retq   
  20b977:	cc                   	int3   
  20b978:	cc                   	int3   
  20b979:	cc                   	int3   
  20b97a:	cc                   	int3   
  20b97b:	cc                   	int3   
  20b97c:	cc                   	int3   
  20b97d:	cc                   	int3   
  20b97e:	cc                   	int3   
  20b97f:	cc                   	int3   

000000000020b980 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..logging..KernelLogger$GT$17h7b3f54a96c00704eE>:
  20b980:	50                   	push   %rax
  20b981:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b985:	58                   	pop    %rax
  20b986:	c3                   	retq   
  20b987:	cc                   	int3   
  20b988:	cc                   	int3   
  20b989:	cc                   	int3   
  20b98a:	cc                   	int3   
  20b98b:	cc                   	int3   
  20b98c:	cc                   	int3   
  20b98d:	cc                   	int3   
  20b98e:	cc                   	int3   
  20b98f:	cc                   	int3   

000000000020b990 <_ZN4core3ptr54drop_in_place$LT$$RF$r3_kernel..mm..VirtualAddress$GT$17h17ae9654d06dc752E>:
  20b990:	50                   	push   %rax
  20b991:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b995:	58                   	pop    %rax
  20b996:	c3                   	retq   
  20b997:	cc                   	int3   
  20b998:	cc                   	int3   
  20b999:	cc                   	int3   
  20b99a:	cc                   	int3   
  20b99b:	cc                   	int3   
  20b99c:	cc                   	int3   
  20b99d:	cc                   	int3   
  20b99e:	cc                   	int3   
  20b99f:	cc                   	int3   

000000000020b9a0 <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u64$GT$$GT$17hab641697e021095cE>:
  20b9a0:	50                   	push   %rax
  20b9a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9a5:	e8 d6 04 00 00       	callq  20be80 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE>
  20b9aa:	58                   	pop    %rax
  20b9ab:	c3                   	retq   
  20b9ac:	cc                   	int3   
  20b9ad:	cc                   	int3   
  20b9ae:	cc                   	int3   
  20b9af:	cc                   	int3   

000000000020b9b0 <_ZN4core3ptr54drop_in_place$LT$r3_kernel..acpi..madt..Processors$GT$17h9494aa1cdddb7d39E>:
  20b9b0:	50                   	push   %rax
  20b9b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9b5:	e8 f6 00 00 00       	callq  20bab0 <_ZN4core3ptr84drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hb9a1b0e74e8717b4E>
  20b9ba:	58                   	pop    %rax
  20b9bb:	c3                   	retq   
  20b9bc:	cc                   	int3   
  20b9bd:	cc                   	int3   
  20b9be:	cc                   	int3   
  20b9bf:	cc                   	int3   

000000000020b9c0 <_ZN4core3ptr56drop_in_place$LT$$RF$r3_kernel..mm..paging..PageSize$GT$17h46036be801aa4055E>:
  20b9c0:	50                   	push   %rax
  20b9c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9c5:	58                   	pop    %rax
  20b9c6:	c3                   	retq   
  20b9c7:	cc                   	int3   
  20b9c8:	cc                   	int3   
  20b9c9:	cc                   	int3   
  20b9ca:	cc                   	int3   
  20b9cb:	cc                   	int3   
  20b9cc:	cc                   	int3   
  20b9cd:	cc                   	int3   
  20b9ce:	cc                   	int3   
  20b9cf:	cc                   	int3   

000000000020b9d0 <_ZN4core3ptr57drop_in_place$LT$$RF$r3_kernel..mm..paging..PageRange$GT$17h1f5c059d298fae03E>:
  20b9d0:	50                   	push   %rax
  20b9d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9d5:	58                   	pop    %rax
  20b9d6:	c3                   	retq   
  20b9d7:	cc                   	int3   
  20b9d8:	cc                   	int3   
  20b9d9:	cc                   	int3   
  20b9da:	cc                   	int3   
  20b9db:	cc                   	int3   
  20b9dc:	cc                   	int3   
  20b9dd:	cc                   	int3   
  20b9de:	cc                   	int3   
  20b9df:	cc                   	int3   

000000000020b9e0 <_ZN4core3ptr61drop_in_place$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$GT$17hfc98157e614409bfE>:
  20b9e0:	50                   	push   %rax
  20b9e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9e5:	58                   	pop    %rax
  20b9e6:	c3                   	retq   
  20b9e7:	cc                   	int3   
  20b9e8:	cc                   	int3   
  20b9e9:	cc                   	int3   
  20b9ea:	cc                   	int3   
  20b9eb:	cc                   	int3   
  20b9ec:	cc                   	int3   
  20b9ed:	cc                   	int3   
  20b9ee:	cc                   	int3   
  20b9ef:	cc                   	int3   

000000000020b9f0 <_ZN4core3ptr61drop_in_place$LT$r3_kernel..mm..paging..PageRangeIterator$GT$17h811d1757875a6025E>:
  20b9f0:	50                   	push   %rax
  20b9f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20b9f5:	58                   	pop    %rax
  20b9f6:	c3                   	retq   
  20b9f7:	cc                   	int3   
  20b9f8:	cc                   	int3   
  20b9f9:	cc                   	int3   
  20b9fa:	cc                   	int3   
  20b9fb:	cc                   	int3   
  20b9fc:	cc                   	int3   
  20b9fd:	cc                   	int3   
  20b9fe:	cc                   	int3   
  20b9ff:	cc                   	int3   

000000000020ba00 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$GT$17he2257fd5e183e821E>:
  20ba00:	50                   	push   %rax
  20ba01:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba05:	58                   	pop    %rax
  20ba06:	c3                   	retq   
  20ba07:	cc                   	int3   
  20ba08:	cc                   	int3   
  20ba09:	cc                   	int3   
  20ba0a:	cc                   	int3   
  20ba0b:	cc                   	int3   
  20ba0c:	cc                   	int3   
  20ba0d:	cc                   	int3   
  20ba0e:	cc                   	int3   
  20ba0f:	cc                   	int3   

000000000020ba10 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..cpu..segments..SegmentSelector$GT$17h1f9fea70a88ab9f9E>:
  20ba10:	50                   	push   %rax
  20ba11:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba15:	58                   	pop    %rax
  20ba16:	c3                   	retq   
  20ba17:	cc                   	int3   
  20ba18:	cc                   	int3   
  20ba19:	cc                   	int3   
  20ba1a:	cc                   	int3   
  20ba1b:	cc                   	int3   
  20ba1c:	cc                   	int3   
  20ba1d:	cc                   	int3   
  20ba1e:	cc                   	int3   
  20ba1f:	cc                   	int3   

000000000020ba20 <_ZN4core3ptr63drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..uart..UART$GT$17h75b93f733fea1da2E>:
  20ba20:	50                   	push   %rax
  20ba21:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba25:	58                   	pop    %rax
  20ba26:	c3                   	retq   
  20ba27:	cc                   	int3   
  20ba28:	cc                   	int3   
  20ba29:	cc                   	int3   
  20ba2a:	cc                   	int3   
  20ba2b:	cc                   	int3   
  20ba2c:	cc                   	int3   
  20ba2d:	cc                   	int3   
  20ba2e:	cc                   	int3   
  20ba2f:	cc                   	int3   

000000000020ba30 <_ZN4core3ptr65drop_in_place$LT$$RF$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$17h5cc250ff6beb8c54E>:
  20ba30:	50                   	push   %rax
  20ba31:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba35:	58                   	pop    %rax
  20ba36:	c3                   	retq   
  20ba37:	cc                   	int3   
  20ba38:	cc                   	int3   
  20ba39:	cc                   	int3   
  20ba3a:	cc                   	int3   
  20ba3b:	cc                   	int3   
  20ba3c:	cc                   	int3   
  20ba3d:	cc                   	int3   
  20ba3e:	cc                   	int3   
  20ba3f:	cc                   	int3   

000000000020ba40 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>:
  20ba40:	50                   	push   %rax
  20ba41:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba45:	e8 b6 01 00 00       	callq  20bc00 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238699b63bfd6d36E>
  20ba4a:	58                   	pop    %rax
  20ba4b:	c3                   	retq   
  20ba4c:	cc                   	int3   
  20ba4d:	cc                   	int3   
  20ba4e:	cc                   	int3   
  20ba4f:	cc                   	int3   

000000000020ba50 <_ZN4core3ptr78drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17h216fad7122761ab4E>:
  20ba50:	48 83 ec 18          	sub    $0x18,%rsp
  20ba54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ba59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ba5e:	e8 3d 01 00 00       	callq  20bba0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E>
  20ba63:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20ba68:	e8 83 00 00 00       	callq  20baf0 <_ZN4core3ptr85drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17he886184af3ec47c2E>
  20ba6d:	48 83 c4 18          	add    $0x18,%rsp
  20ba71:	c3                   	retq   
  20ba72:	cc                   	int3   
  20ba73:	cc                   	int3   
  20ba74:	cc                   	int3   
  20ba75:	cc                   	int3   
  20ba76:	cc                   	int3   
  20ba77:	cc                   	int3   
  20ba78:	cc                   	int3   
  20ba79:	cc                   	int3   
  20ba7a:	cc                   	int3   
  20ba7b:	cc                   	int3   
  20ba7c:	cc                   	int3   
  20ba7d:	cc                   	int3   
  20ba7e:	cc                   	int3   
  20ba7f:	cc                   	int3   

000000000020ba80 <_ZN4core3ptr80drop_in_place$LT$spin..mutex..Mutex$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17he0385d7b1a1e9266E>:
  20ba80:	50                   	push   %rax
  20ba81:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba85:	48 83 c7 08          	add    $0x8,%rdi
  20ba89:	e8 52 00 00 00       	callq  20bae0 <_ZN4core3ptr84drop_in_place$LT$core..cell..UnsafeCell$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17h2a43fe36e5d999bbE>
  20ba8e:	58                   	pop    %rax
  20ba8f:	c3                   	retq   

000000000020ba90 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17ha1bb7375bd21c262E>:
  20ba90:	50                   	push   %rax
  20ba91:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ba95:	e8 96 01 00 00       	callq  20bc30 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33502fe759f98579E>
  20ba9a:	58                   	pop    %rax
  20ba9b:	c3                   	retq   
  20ba9c:	cc                   	int3   
  20ba9d:	cc                   	int3   
  20ba9e:	cc                   	int3   
  20ba9f:	cc                   	int3   

000000000020baa0 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>:
  20baa0:	50                   	push   %rax
  20baa1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20baa5:	e8 d6 02 00 00       	callq  20bd80 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hdc9394d9dc611043E>
  20baaa:	58                   	pop    %rax
  20baab:	c3                   	retq   
  20baac:	cc                   	int3   
  20baad:	cc                   	int3   
  20baae:	cc                   	int3   
  20baaf:	cc                   	int3   

000000000020bab0 <_ZN4core3ptr84drop_in_place$LT$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hb9a1b0e74e8717b4E>:
  20bab0:	48 83 ec 18          	sub    $0x18,%rsp
  20bab4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bab9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20babe:	e8 0d 01 00 00       	callq  20bbd0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E>
  20bac3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bac8:	e8 63 00 00 00       	callq  20bb30 <_ZN4core3ptr91drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17h60395535fe151d29E>
  20bacd:	48 83 c4 18          	add    $0x18,%rsp
  20bad1:	c3                   	retq   
  20bad2:	cc                   	int3   
  20bad3:	cc                   	int3   
  20bad4:	cc                   	int3   
  20bad5:	cc                   	int3   
  20bad6:	cc                   	int3   
  20bad7:	cc                   	int3   
  20bad8:	cc                   	int3   
  20bad9:	cc                   	int3   
  20bada:	cc                   	int3   
  20badb:	cc                   	int3   
  20badc:	cc                   	int3   
  20badd:	cc                   	int3   
  20bade:	cc                   	int3   
  20badf:	cc                   	int3   

000000000020bae0 <_ZN4core3ptr84drop_in_place$LT$core..cell..UnsafeCell$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17h2a43fe36e5d999bbE>:
  20bae0:	50                   	push   %rax
  20bae1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bae5:	e8 c6 fe ff ff       	callq  20b9b0 <_ZN4core3ptr54drop_in_place$LT$r3_kernel..acpi..madt..Processors$GT$17h9494aa1cdddb7d39E>
  20baea:	58                   	pop    %rax
  20baeb:	c3                   	retq   
  20baec:	cc                   	int3   
  20baed:	cc                   	int3   
  20baee:	cc                   	int3   
  20baef:	cc                   	int3   

000000000020baf0 <_ZN4core3ptr85drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$17he886184af3ec47c2E>:
  20baf0:	50                   	push   %rax
  20baf1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20baf5:	e8 f6 03 00 00       	callq  20bef0 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E>
  20bafa:	58                   	pop    %rax
  20bafb:	c3                   	retq   
  20bafc:	cc                   	int3   
  20bafd:	cc                   	int3   
  20bafe:	cc                   	int3   
  20baff:	cc                   	int3   

000000000020bb00 <_ZN4core3ptr85drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17ha6c6c78d0d7b5940E>:
  20bb00:	50                   	push   %rax
  20bb01:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb05:	e8 56 01 00 00       	callq  20bc60 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3bc9d3885aad2c98E>
  20bb0a:	58                   	pop    %rax
  20bb0b:	c3                   	retq   
  20bb0c:	cc                   	int3   
  20bb0d:	cc                   	int3   
  20bb0e:	cc                   	int3   
  20bb0f:	cc                   	int3   

000000000020bb10 <_ZN4core3ptr88drop_in_place$LT$$RF$alloc..vec..Vec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17hc101a363ddd88117E>:
  20bb10:	50                   	push   %rax
  20bb11:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb15:	58                   	pop    %rax
  20bb16:	c3                   	retq   
  20bb17:	cc                   	int3   
  20bb18:	cc                   	int3   
  20bb19:	cc                   	int3   
  20bb1a:	cc                   	int3   
  20bb1b:	cc                   	int3   
  20bb1c:	cc                   	int3   
  20bb1d:	cc                   	int3   
  20bb1e:	cc                   	int3   
  20bb1f:	cc                   	int3   

000000000020bb20 <_ZN4core3ptr88drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$17h84ecd27d0b038aa5E>:
  20bb20:	50                   	push   %rax
  20bb21:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb25:	58                   	pop    %rax
  20bb26:	c3                   	retq   
  20bb27:	cc                   	int3   
  20bb28:	cc                   	int3   
  20bb29:	cc                   	int3   
  20bb2a:	cc                   	int3   
  20bb2b:	cc                   	int3   
  20bb2c:	cc                   	int3   
  20bb2d:	cc                   	int3   
  20bb2e:	cc                   	int3   
  20bb2f:	cc                   	int3   

000000000020bb30 <_ZN4core3ptr91drop_in_place$LT$alloc..raw_vec..RawVec$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$GT$$GT$17h60395535fe151d29E>:
  20bb30:	50                   	push   %rax
  20bb31:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb35:	e8 d6 02 00 00       	callq  20be10 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE>
  20bb3a:	58                   	pop    %rax
  20bb3b:	c3                   	retq   
  20bb3c:	cc                   	int3   
  20bb3d:	cc                   	int3   
  20bb3e:	cc                   	int3   
  20bb3f:	cc                   	int3   

000000000020bb40 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>:
  20bb40:	50                   	push   %rax
  20bb41:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb45:	e8 06 02 00 00       	callq  20bd50 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9812ecd4aea0404dE>
  20bb4a:	58                   	pop    %rax
  20bb4b:	c3                   	retq   
  20bb4c:	cc                   	int3   
  20bb4d:	cc                   	int3   
  20bb4e:	cc                   	int3   
  20bb4f:	cc                   	int3   

000000000020bb50 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>:
  20bb50:	50                   	push   %rax
  20bb51:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb55:	e8 56 02 00 00       	callq  20bdb0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf64dd5ac2c6d25faE>
  20bb5a:	58                   	pop    %rax
  20bb5b:	c3                   	retq   
  20bb5c:	cc                   	int3   
  20bb5d:	cc                   	int3   
  20bb5e:	cc                   	int3   
  20bb5f:	cc                   	int3   

000000000020bb60 <_ZN4core5clone5Clone5clone17h3340d57e31d9f28aE>:
    ///
    /// assert_eq!("Hello", hello.clone());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use = "cloning is often expensive and is not expected to have side effects"]
    fn clone(&self) -> Self;
  20bb60:	50                   	push   %rax
  20bb61:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb65:	58                   	pop    %rax
  20bb66:	c3                   	retq   
  20bb67:	cc                   	int3   
  20bb68:	cc                   	int3   
  20bb69:	cc                   	int3   
  20bb6a:	cc                   	int3   
  20bb6b:	cc                   	int3   
  20bb6c:	cc                   	int3   
  20bb6d:	cc                   	int3   
  20bb6e:	cc                   	int3   
  20bb6f:	cc                   	int3   

000000000020bb70 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
  20bb70:	48 83 ec 18          	sub    $0x18,%rsp
  20bb74:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bb78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20bb7d:	e8 3e 54 00 00       	callq  210fc0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>
  20bb82:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20bb87:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bb8c:	48 8b 04 24          	mov    (%rsp),%rax
  20bb90:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20bb94:	e8 e7 3a 01 00       	callq  21f680 <_ZN4core3ptr24slice_from_raw_parts_mut17hc788c569ab4f87efE>
  20bb99:	eb 00                	jmp    20bb9b <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d093846e965b0c4E+0x2b>
        }
        // RawVec handles deallocation
    }
  20bb9b:	48 83 c4 18          	add    $0x18,%rsp
  20bb9f:	c3                   	retq   

000000000020bba0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E>:
    fn drop(&mut self) {
  20bba0:	48 83 ec 18          	sub    $0x18,%rsp
  20bba4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bba8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20bbad:	e8 ae 53 00 00       	callq  210f60 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>
  20bbb2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20bbb7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bbbc:	48 8b 04 24          	mov    (%rsp),%rax
  20bbc0:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20bbc4:	e8 67 3a 01 00       	callq  21f630 <_ZN4core3ptr24slice_from_raw_parts_mut17h4baadfda013033adE>
  20bbc9:	eb 00                	jmp    20bbcb <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47ce4cf26d35b936E+0x2b>
    }
  20bbcb:	48 83 c4 18          	add    $0x18,%rsp
  20bbcf:	c3                   	retq   

000000000020bbd0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E>:
    fn drop(&mut self) {
  20bbd0:	48 83 ec 18          	sub    $0x18,%rsp
  20bbd4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bbd8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
  20bbdd:	e8 ae 53 00 00       	callq  210f90 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>
  20bbe2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20bbe7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bbec:	48 8b 04 24          	mov    (%rsp),%rax
  20bbf0:	48 8b 70 10          	mov    0x10(%rax),%rsi
  20bbf4:	e8 d7 3a 01 00       	callq  21f6d0 <_ZN4core3ptr24slice_from_raw_parts_mut17hccce3149d2f44078E>
  20bbf9:	eb 00                	jmp    20bbfb <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82df0dde5becf758E+0x2b>
    }
  20bbfb:	48 83 c4 18          	add    $0x18,%rsp
  20bbff:	c3                   	retq   

000000000020bc00 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238699b63bfd6d36E>:
}

impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>
{
    /// The dropping of the MutexGuard will release the lock it was created from.
    fn drop(&mut self)
  20bc00:	48 83 ec 18          	sub    $0x18,%rsp
  20bc04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    {
        self.lock.store(false, Ordering::Release);
  20bc09:	48 8b 3f             	mov    (%rdi),%rdi
  20bc0c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bc11:	31 f6                	xor    %esi,%esi
  20bc13:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bc18:	e8 33 cf 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bc1d:	48 83 c4 18          	add    $0x18,%rsp
  20bc21:	c3                   	retq   
  20bc22:	cc                   	int3   
  20bc23:	cc                   	int3   
  20bc24:	cc                   	int3   
  20bc25:	cc                   	int3   
  20bc26:	cc                   	int3   
  20bc27:	cc                   	int3   
  20bc28:	cc                   	int3   
  20bc29:	cc                   	int3   
  20bc2a:	cc                   	int3   
  20bc2b:	cc                   	int3   
  20bc2c:	cc                   	int3   
  20bc2d:	cc                   	int3   
  20bc2e:	cc                   	int3   
  20bc2f:	cc                   	int3   

000000000020bc30 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33502fe759f98579E>:
    fn drop(&mut self)
  20bc30:	48 83 ec 18          	sub    $0x18,%rsp
  20bc34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bc39:	48 8b 3f             	mov    (%rdi),%rdi
  20bc3c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bc41:	31 f6                	xor    %esi,%esi
  20bc43:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bc48:	e8 03 cf 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bc4d:	48 83 c4 18          	add    $0x18,%rsp
  20bc51:	c3                   	retq   
  20bc52:	cc                   	int3   
  20bc53:	cc                   	int3   
  20bc54:	cc                   	int3   
  20bc55:	cc                   	int3   
  20bc56:	cc                   	int3   
  20bc57:	cc                   	int3   
  20bc58:	cc                   	int3   
  20bc59:	cc                   	int3   
  20bc5a:	cc                   	int3   
  20bc5b:	cc                   	int3   
  20bc5c:	cc                   	int3   
  20bc5d:	cc                   	int3   
  20bc5e:	cc                   	int3   
  20bc5f:	cc                   	int3   

000000000020bc60 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3bc9d3885aad2c98E>:
    fn drop(&mut self)
  20bc60:	48 83 ec 18          	sub    $0x18,%rsp
  20bc64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bc69:	48 8b 3f             	mov    (%rdi),%rdi
  20bc6c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bc71:	31 f6                	xor    %esi,%esi
  20bc73:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bc78:	e8 d3 ce 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bc7d:	48 83 c4 18          	add    $0x18,%rsp
  20bc81:	c3                   	retq   
  20bc82:	cc                   	int3   
  20bc83:	cc                   	int3   
  20bc84:	cc                   	int3   
  20bc85:	cc                   	int3   
  20bc86:	cc                   	int3   
  20bc87:	cc                   	int3   
  20bc88:	cc                   	int3   
  20bc89:	cc                   	int3   
  20bc8a:	cc                   	int3   
  20bc8b:	cc                   	int3   
  20bc8c:	cc                   	int3   
  20bc8d:	cc                   	int3   
  20bc8e:	cc                   	int3   
  20bc8f:	cc                   	int3   

000000000020bc90 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5adf5324be6f8979E>:
    fn drop(&mut self)
  20bc90:	48 83 ec 18          	sub    $0x18,%rsp
  20bc94:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bc99:	48 8b 3f             	mov    (%rdi),%rdi
  20bc9c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bca1:	31 f6                	xor    %esi,%esi
  20bca3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bca8:	e8 a3 ce 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bcad:	48 83 c4 18          	add    $0x18,%rsp
  20bcb1:	c3                   	retq   
  20bcb2:	cc                   	int3   
  20bcb3:	cc                   	int3   
  20bcb4:	cc                   	int3   
  20bcb5:	cc                   	int3   
  20bcb6:	cc                   	int3   
  20bcb7:	cc                   	int3   
  20bcb8:	cc                   	int3   
  20bcb9:	cc                   	int3   
  20bcba:	cc                   	int3   
  20bcbb:	cc                   	int3   
  20bcbc:	cc                   	int3   
  20bcbd:	cc                   	int3   
  20bcbe:	cc                   	int3   
  20bcbf:	cc                   	int3   

000000000020bcc0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5f29223eba14b0d9E>:
    fn drop(&mut self)
  20bcc0:	48 83 ec 18          	sub    $0x18,%rsp
  20bcc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bcc9:	48 8b 3f             	mov    (%rdi),%rdi
  20bccc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bcd1:	31 f6                	xor    %esi,%esi
  20bcd3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bcd8:	e8 73 ce 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bcdd:	48 83 c4 18          	add    $0x18,%rsp
  20bce1:	c3                   	retq   
  20bce2:	cc                   	int3   
  20bce3:	cc                   	int3   
  20bce4:	cc                   	int3   
  20bce5:	cc                   	int3   
  20bce6:	cc                   	int3   
  20bce7:	cc                   	int3   
  20bce8:	cc                   	int3   
  20bce9:	cc                   	int3   
  20bcea:	cc                   	int3   
  20bceb:	cc                   	int3   
  20bcec:	cc                   	int3   
  20bced:	cc                   	int3   
  20bcee:	cc                   	int3   
  20bcef:	cc                   	int3   

000000000020bcf0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6d20b1d630f88b51E>:
    fn drop(&mut self)
  20bcf0:	48 83 ec 18          	sub    $0x18,%rsp
  20bcf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bcf9:	48 8b 3f             	mov    (%rdi),%rdi
  20bcfc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bd01:	31 f6                	xor    %esi,%esi
  20bd03:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bd08:	e8 43 ce 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bd0d:	48 83 c4 18          	add    $0x18,%rsp
  20bd11:	c3                   	retq   
  20bd12:	cc                   	int3   
  20bd13:	cc                   	int3   
  20bd14:	cc                   	int3   
  20bd15:	cc                   	int3   
  20bd16:	cc                   	int3   
  20bd17:	cc                   	int3   
  20bd18:	cc                   	int3   
  20bd19:	cc                   	int3   
  20bd1a:	cc                   	int3   
  20bd1b:	cc                   	int3   
  20bd1c:	cc                   	int3   
  20bd1d:	cc                   	int3   
  20bd1e:	cc                   	int3   
  20bd1f:	cc                   	int3   

000000000020bd20 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h756125f32cd8645dE>:
    fn drop(&mut self)
  20bd20:	48 83 ec 18          	sub    $0x18,%rsp
  20bd24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bd29:	48 8b 3f             	mov    (%rdi),%rdi
  20bd2c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bd31:	31 f6                	xor    %esi,%esi
  20bd33:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bd38:	e8 13 ce 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bd3d:	48 83 c4 18          	add    $0x18,%rsp
  20bd41:	c3                   	retq   
  20bd42:	cc                   	int3   
  20bd43:	cc                   	int3   
  20bd44:	cc                   	int3   
  20bd45:	cc                   	int3   
  20bd46:	cc                   	int3   
  20bd47:	cc                   	int3   
  20bd48:	cc                   	int3   
  20bd49:	cc                   	int3   
  20bd4a:	cc                   	int3   
  20bd4b:	cc                   	int3   
  20bd4c:	cc                   	int3   
  20bd4d:	cc                   	int3   
  20bd4e:	cc                   	int3   
  20bd4f:	cc                   	int3   

000000000020bd50 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9812ecd4aea0404dE>:
    fn drop(&mut self)
  20bd50:	48 83 ec 18          	sub    $0x18,%rsp
  20bd54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bd59:	48 8b 3f             	mov    (%rdi),%rdi
  20bd5c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bd61:	31 f6                	xor    %esi,%esi
  20bd63:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bd68:	e8 e3 cd 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bd6d:	48 83 c4 18          	add    $0x18,%rsp
  20bd71:	c3                   	retq   
  20bd72:	cc                   	int3   
  20bd73:	cc                   	int3   
  20bd74:	cc                   	int3   
  20bd75:	cc                   	int3   
  20bd76:	cc                   	int3   
  20bd77:	cc                   	int3   
  20bd78:	cc                   	int3   
  20bd79:	cc                   	int3   
  20bd7a:	cc                   	int3   
  20bd7b:	cc                   	int3   
  20bd7c:	cc                   	int3   
  20bd7d:	cc                   	int3   
  20bd7e:	cc                   	int3   
  20bd7f:	cc                   	int3   

000000000020bd80 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hdc9394d9dc611043E>:
    fn drop(&mut self)
  20bd80:	48 83 ec 18          	sub    $0x18,%rsp
  20bd84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bd89:	48 8b 3f             	mov    (%rdi),%rdi
  20bd8c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bd91:	31 f6                	xor    %esi,%esi
  20bd93:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bd98:	e8 b3 cd 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bd9d:	48 83 c4 18          	add    $0x18,%rsp
  20bda1:	c3                   	retq   
  20bda2:	cc                   	int3   
  20bda3:	cc                   	int3   
  20bda4:	cc                   	int3   
  20bda5:	cc                   	int3   
  20bda6:	cc                   	int3   
  20bda7:	cc                   	int3   
  20bda8:	cc                   	int3   
  20bda9:	cc                   	int3   
  20bdaa:	cc                   	int3   
  20bdab:	cc                   	int3   
  20bdac:	cc                   	int3   
  20bdad:	cc                   	int3   
  20bdae:	cc                   	int3   
  20bdaf:	cc                   	int3   

000000000020bdb0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf64dd5ac2c6d25faE>:
    fn drop(&mut self)
  20bdb0:	48 83 ec 18          	sub    $0x18,%rsp
  20bdb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bdb9:	48 8b 3f             	mov    (%rdi),%rdi
  20bdbc:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bdc1:	31 f6                	xor    %esi,%esi
  20bdc3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bdc8:	e8 83 cd 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bdcd:	48 83 c4 18          	add    $0x18,%rsp
  20bdd1:	c3                   	retq   
  20bdd2:	cc                   	int3   
  20bdd3:	cc                   	int3   
  20bdd4:	cc                   	int3   
  20bdd5:	cc                   	int3   
  20bdd6:	cc                   	int3   
  20bdd7:	cc                   	int3   
  20bdd8:	cc                   	int3   
  20bdd9:	cc                   	int3   
  20bdda:	cc                   	int3   
  20bddb:	cc                   	int3   
  20bddc:	cc                   	int3   
  20bddd:	cc                   	int3   
  20bdde:	cc                   	int3   
  20bddf:	cc                   	int3   

000000000020bde0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfd8a5de3b3c2f6f2E>:
    fn drop(&mut self)
  20bde0:	48 83 ec 18          	sub    $0x18,%rsp
  20bde4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20bde9:	48 8b 3f             	mov    (%rdi),%rdi
  20bdec:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bdf1:	31 f6                	xor    %esi,%esi
  20bdf3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bdf8:	e8 53 cd 01 00       	callq  228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>
    }
  20bdfd:	48 83 c4 18          	add    $0x18,%rsp
  20be01:	c3                   	retq   
  20be02:	cc                   	int3   
  20be03:	cc                   	int3   
  20be04:	cc                   	int3   
  20be05:	cc                   	int3   
  20be06:	cc                   	int3   
  20be07:	cc                   	int3   
  20be08:	cc                   	int3   
  20be09:	cc                   	int3   
  20be0a:	cc                   	int3   
  20be0b:	cc                   	int3   
  20be0c:	cc                   	int3   
  20be0d:	cc                   	int3   
  20be0e:	cc                   	int3   
  20be0f:	cc                   	int3   

000000000020be10 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE>:
    fn drop(&mut self) {
  20be10:	48 83 ec 48          	sub    $0x48,%rsp
  20be14:	48 89 fe             	mov    %rdi,%rsi
  20be17:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20be1c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20be21:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20be26:	e8 35 b2 ff ff       	callq  207060 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc04146cff3006b9bE>
  20be2b:	b8 01 00 00 00       	mov    $0x1,%eax
  20be30:	31 c9                	xor    %ecx,%ecx
  20be32:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20be38:	48 0f 44 c1          	cmove  %rcx,%rax
  20be3c:	48 83 f8 01          	cmp    $0x1,%rax
  20be40:	75 2a                	jne    20be6c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x5c>
  20be42:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20be47:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20be4c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20be51:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20be56:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20be5b:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20be60:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20be65:	e8 06 35 01 00       	callq  21f370 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20be6a:	eb 05                	jmp    20be71 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x61>
    }
  20be6c:	48 83 c4 48          	add    $0x48,%rsp
  20be70:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20be71:	eb f9                	jmp    20be6c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h00e3a86ad9865b6bE+0x5c>
  20be73:	cc                   	int3   
  20be74:	cc                   	int3   
  20be75:	cc                   	int3   
  20be76:	cc                   	int3   
  20be77:	cc                   	int3   
  20be78:	cc                   	int3   
  20be79:	cc                   	int3   
  20be7a:	cc                   	int3   
  20be7b:	cc                   	int3   
  20be7c:	cc                   	int3   
  20be7d:	cc                   	int3   
  20be7e:	cc                   	int3   
  20be7f:	cc                   	int3   

000000000020be80 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE>:
    fn drop(&mut self) {
  20be80:	48 83 ec 48          	sub    $0x48,%rsp
  20be84:	48 89 fe             	mov    %rdi,%rsi
  20be87:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20be8c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20be91:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20be96:	e8 b5 b0 ff ff       	callq  206f50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h85387c7e272b7970E>
  20be9b:	b8 01 00 00 00       	mov    $0x1,%eax
  20bea0:	31 c9                	xor    %ecx,%ecx
  20bea2:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20bea8:	48 0f 44 c1          	cmove  %rcx,%rax
  20beac:	48 83 f8 01          	cmp    $0x1,%rax
  20beb0:	75 2a                	jne    20bedc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x5c>
  20beb2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20beb7:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20bebc:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20bec1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20bec6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20becb:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20bed0:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20bed5:	e8 96 34 01 00       	callq  21f370 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20beda:	eb 05                	jmp    20bee1 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x61>
    }
  20bedc:	48 83 c4 48          	add    $0x48,%rsp
  20bee0:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20bee1:	eb f9                	jmp    20bedc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1219b33c66ca668fE+0x5c>
  20bee3:	cc                   	int3   
  20bee4:	cc                   	int3   
  20bee5:	cc                   	int3   
  20bee6:	cc                   	int3   
  20bee7:	cc                   	int3   
  20bee8:	cc                   	int3   
  20bee9:	cc                   	int3   
  20beea:	cc                   	int3   
  20beeb:	cc                   	int3   
  20beec:	cc                   	int3   
  20beed:	cc                   	int3   
  20beee:	cc                   	int3   
  20beef:	cc                   	int3   

000000000020bef0 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E>:
    fn drop(&mut self) {
  20bef0:	48 83 ec 48          	sub    $0x48,%rsp
  20bef4:	48 89 fe             	mov    %rdi,%rsi
  20bef7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20befc:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if let Some((ptr, layout)) = self.current_memory() {
  20bf01:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20bf06:	e8 35 af ff ff       	callq  206e40 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39f6a902ac7405c0E>
  20bf0b:	b8 01 00 00 00       	mov    $0x1,%eax
  20bf10:	31 c9                	xor    %ecx,%ecx
  20bf12:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  20bf18:	48 0f 44 c1          	cmove  %rcx,%rax
  20bf1c:	48 83 f8 01          	cmp    $0x1,%rax
  20bf20:	75 2a                	jne    20bf4c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x5c>
  20bf22:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bf27:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20bf2c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20bf31:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20bf36:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20bf3b:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20bf40:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            unsafe { self.alloc.deallocate(ptr, layout) }
  20bf45:	e8 26 34 01 00       	callq  21f370 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  20bf4a:	eb 05                	jmp    20bf51 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x61>
    }
  20bf4c:	48 83 c4 48          	add    $0x48,%rsp
  20bf50:	c3                   	retq   
        if let Some((ptr, layout)) = self.current_memory() {
  20bf51:	eb f9                	jmp    20bf4c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd68993800a4e632E+0x5c>
  20bf53:	cc                   	int3   
  20bf54:	cc                   	int3   
  20bf55:	cc                   	int3   
  20bf56:	cc                   	int3   
  20bf57:	cc                   	int3   
  20bf58:	cc                   	int3   
  20bf59:	cc                   	int3   
  20bf5a:	cc                   	int3   
  20bf5b:	cc                   	int3   
  20bf5c:	cc                   	int3   
  20bf5d:	cc                   	int3   
  20bf5e:	cc                   	int3   
  20bf5f:	cc                   	int3   

000000000020bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>:
    pub fn size(&self) -> u64 {
  20bf60:	48 83 ec 18          	sub    $0x18,%rsp
  20bf64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  20bf69:	0f b6 07             	movzbl (%rdi),%eax
  20bf6c:	48 89 04 24          	mov    %rax,(%rsp)
  20bf70:	48 85 c0             	test   %rax,%rax
  20bf73:	74 12                	je     20bf87 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x27>
  20bf75:	eb 00                	jmp    20bf77 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x17>
  20bf77:	48 8b 04 24          	mov    (%rsp),%rax
  20bf7b:	48 83 e8 01          	sub    $0x1,%rax
  20bf7f:	74 11                	je     20bf92 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x32>
  20bf81:	eb 00                	jmp    20bf83 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x23>
  20bf83:	eb 18                	jmp    20bf9d <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x3d>
  20bf85:	0f 0b                	ud2    
            Self::Page4KiB => 4 * 1024,
  20bf87:	48 c7 44 24 08 00 10 	movq   $0x1000,0x8(%rsp)
  20bf8e:	00 00 
  20bf90:	eb 14                	jmp    20bfa6 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x46>
            Self::Page2MiB => 2 * 1024 * 1024,
  20bf92:	48 c7 44 24 08 00 00 	movq   $0x200000,0x8(%rsp)
  20bf99:	20 00 
  20bf9b:	eb 09                	jmp    20bfa6 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E+0x46>
            Self::Page1GiB => 1024 * 1024 * 1024,
  20bf9d:	48 c7 44 24 08 00 00 	movq   $0x40000000,0x8(%rsp)
  20bfa4:	00 40 
    }
  20bfa6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bfab:	48 83 c4 18          	add    $0x18,%rsp
  20bfaf:	c3                   	retq   

000000000020bfb0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>:
    pub fn new(value: u16) -> Self {
  20bfb0:	48 83 ec 04          	sub    $0x4,%rsp
  20bfb4:	66 89 f8             	mov    %di,%ax
  20bfb7:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
        PageTableIndex(value % MAX_ENTRIES_PER_LEVEL)
  20bfbc:	66 25 ff 01          	and    $0x1ff,%ax
  20bfc0:	66 89 04 24          	mov    %ax,(%rsp)
    }
  20bfc4:	66 8b 04 24          	mov    (%rsp),%ax
  20bfc8:	48 83 c4 04          	add    $0x4,%rsp
  20bfcc:	c3                   	retq   
  20bfcd:	cc                   	int3   
  20bfce:	cc                   	int3   
  20bfcf:	cc                   	int3   

000000000020bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>:
    pub fn as_usize(&self) -> usize {
  20bfd0:	50                   	push   %rax
  20bfd1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as usize
  20bfd5:	0f b7 07             	movzwl (%rdi),%eax
    }
  20bfd8:	59                   	pop    %rcx
  20bfd9:	c3                   	retq   
  20bfda:	cc                   	int3   
  20bfdb:	cc                   	int3   
  20bfdc:	cc                   	int3   
  20bfdd:	cc                   	int3   
  20bfde:	cc                   	int3   
  20bfdf:	cc                   	int3   

000000000020bfe0 <_ZN9r3_kernel2mm6paging4Page12from_address17h3af72bb28e0481a7E>:
    pub fn from_address(addr: mm::VirtualAddress) -> Self {
  20bfe0:	48 83 ec 28          	sub    $0x28,%rsp
  20bfe4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Page(addr.new_align_down(PageSize::Page4KiB.size()))
  20bfe9:	48 8d 3d c8 45 ff ff 	lea    -0xba38(%rip),%rdi        # 2005b8 <str.0+0x98>
  20bff0:	e8 6b ff ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20bff5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20bffa:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20bfff:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20c004:	e8 27 9f 01 00       	callq  225f30 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17hf7ff72a768299b95E>
  20c009:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c00e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c013:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20c018:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20c01d:	48 83 c4 28          	add    $0x28,%rsp
  20c021:	c3                   	retq   
  20c022:	cc                   	int3   
  20c023:	cc                   	int3   
  20c024:	cc                   	int3   
  20c025:	cc                   	int3   
  20c026:	cc                   	int3   
  20c027:	cc                   	int3   
  20c028:	cc                   	int3   
  20c029:	cc                   	int3   
  20c02a:	cc                   	int3   
  20c02b:	cc                   	int3   
  20c02c:	cc                   	int3   
  20c02d:	cc                   	int3   
  20c02e:	cc                   	int3   
  20c02f:	cc                   	int3   

000000000020c030 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>:
    pub fn addr(&self) -> mm::VirtualAddress {
  20c030:	50                   	push   %rax
  20c031:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  20c035:	48 8b 07             	mov    (%rdi),%rax
    }
  20c038:	59                   	pop    %rcx
  20c039:	c3                   	retq   
  20c03a:	cc                   	int3   
  20c03b:	cc                   	int3   
  20c03c:	cc                   	int3   
  20c03d:	cc                   	int3   
  20c03e:	cc                   	int3   
  20c03f:	cc                   	int3   

000000000020c040 <_ZN9r3_kernel2mm6paging4Page6as_u6417h562c4c3e06a8062eE>:
    pub fn as_u64(&self) -> u64 {
  20c040:	48 83 ec 18          	sub    $0x18,%rsp
  20c044:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  20c049:	e8 b2 9e 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20c04e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c053:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c058:	48 83 c4 18          	add    $0x18,%rsp
  20c05c:	c3                   	retq   
  20c05d:	cc                   	int3   
  20c05e:	cc                   	int3   
  20c05f:	cc                   	int3   

000000000020c060 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h97321716d9d017ceE>:
    pub fn kernel_flags() -> PageEntryFlags {
  20c060:	48 83 ec 28          	sub    $0x28,%rsp
        let value: u64 = PageEntryFlags::PRESENT.bits() | PageEntryFlags::READ_WRITE.bits();
  20c064:	48 8d 3d 9d 45 ff ff 	lea    -0xba63(%rip),%rdi        # 200608 <str.0+0xe8>
  20c06b:	e8 30 22 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c070:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c075:	48 8d 3d 5c 45 ff ff 	lea    -0xbaa4(%rip),%rdi        # 2005d8 <str.0+0xb8>
  20c07c:	e8 1f 22 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c081:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c086:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c08b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20c090:	48 09 c7             	or     %rax,%rdi
  20c093:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(value)
  20c098:	e8 13 22 00 00       	callq  20e2b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20c09d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c0a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c0a7:	48 83 c4 28          	add    $0x28,%rsp
  20c0ab:	c3                   	retq   
  20c0ac:	cc                   	int3   
  20c0ad:	cc                   	int3   
  20c0ae:	cc                   	int3   
  20c0af:	cc                   	int3   

000000000020c0b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags21kernel_hugepage_flags17he0b9fa3eb36123b3E>:
    pub fn kernel_hugepage_flags() -> PageEntryFlags {
  20c0b0:	48 83 ec 38          	sub    $0x38,%rsp
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c0b4:	48 8d 3d 4d 45 ff ff 	lea    -0xbab3(%rip),%rdi        # 200608 <str.0+0xe8>
  20c0bb:	e8 e0 21 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c0c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            | PageEntryFlags::READ_WRITE.bits()
  20c0c5:	48 8d 3d 0c 45 ff ff 	lea    -0xbaf4(%rip),%rdi        # 2005d8 <str.0+0xb8>
  20c0cc:	e8 cf 21 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c0d1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c0d6:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c0db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c0e0:	48 09 c8             	or     %rcx,%rax
  20c0e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            | PageEntryFlags::HUGE_PAGE.bits();
  20c0e8:	48 8d 3d 41 45 ff ff 	lea    -0xbabf(%rip),%rdi        # 200630 <str.0+0x110>
  20c0ef:	e8 ac 21 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c0f4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c0f9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c0fe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let value: u64 = PageEntryFlags::PRESENT.bits()
  20c103:	48 09 c7             	or     %rax,%rdi
  20c106:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let flags = PageEntryFlags::from_bits_truncate(value);
  20c10b:	e8 a0 21 00 00       	callq  20e2b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20c110:	48 89 04 24          	mov    %rax,(%rsp)
  20c114:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c119:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20c11d:	48 83 c4 38          	add    $0x38,%rsp
  20c121:	c3                   	retq   
  20c122:	cc                   	int3   
  20c123:	cc                   	int3   
  20c124:	cc                   	int3   
  20c125:	cc                   	int3   
  20c126:	cc                   	int3   
  20c127:	cc                   	int3   
  20c128:	cc                   	int3   
  20c129:	cc                   	int3   
  20c12a:	cc                   	int3   
  20c12b:	cc                   	int3   
  20c12c:	cc                   	int3   
  20c12d:	cc                   	int3   
  20c12e:	cc                   	int3   
  20c12f:	cc                   	int3   

000000000020c130 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>:
    pub fn is_mapped(&self) -> bool {
  20c130:	50                   	push   %rax
  20c131:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 != 0
  20c135:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  20c139:	0f 95 c0             	setne  %al
    }
  20c13c:	24 01                	and    $0x1,%al
  20c13e:	0f b6 c0             	movzbl %al,%eax
  20c141:	59                   	pop    %rcx
  20c142:	c3                   	retq   
  20c143:	cc                   	int3   
  20c144:	cc                   	int3   
  20c145:	cc                   	int3   
  20c146:	cc                   	int3   
  20c147:	cc                   	int3   
  20c148:	cc                   	int3   
  20c149:	cc                   	int3   
  20c14a:	cc                   	int3   
  20c14b:	cc                   	int3   
  20c14c:	cc                   	int3   
  20c14d:	cc                   	int3   
  20c14e:	cc                   	int3   
  20c14f:	cc                   	int3   

000000000020c150 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>:
    pub fn addr(&self) -> mm::PhysicalAddress {
  20c150:	48 83 ec 18          	sub    $0x18,%rsp
  20c154:	48 89 f8             	mov    %rdi,%rax
  20c157:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        mm::PhysicalAddress::from_u64(self.0 & ENTRY_ADDR_BIT_MASK)
  20c15c:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
  20c163:	ff 0f 00 
  20c166:	48 23 38             	and    (%rax),%rdi
  20c169:	e8 62 9f 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  20c16e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c173:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c178:	48 83 c4 18          	add    $0x18,%rsp
  20c17c:	c3                   	retq   
  20c17d:	cc                   	int3   
  20c17e:	cc                   	int3   
  20c17f:	cc                   	int3   

000000000020c180 <_ZN9r3_kernel2mm6paging9PageEntry11unmap_entry17h3e90615ec2a5f16fE>:
    pub fn unmap_entry(&mut self) {
  20c180:	50                   	push   %rax
  20c181:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 = 0;
  20c185:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    }
  20c18c:	58                   	pop    %rax
  20c18d:	c3                   	retq   
  20c18e:	cc                   	int3   
  20c18f:	cc                   	int3   

000000000020c190 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E>:
    pub fn set_address(
  20c190:	48 83 ec 78          	sub    $0x78,%rsp
  20c194:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20c199:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20c19e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20c1a3:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        if !addr.is_aligned_at(PageSize::Page4KiB.size()) {
  20c1a8:	48 8d 3d 09 44 ff ff 	lea    -0xbbf7(%rip),%rdi        # 2005b8 <str.0+0x98>
  20c1af:	e8 ac fd ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20c1b4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c1b9:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20c1be:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c1c3:	e8 28 9f 01 00       	callq  2260f0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  20c1c8:	88 44 24 27          	mov    %al,0x27(%rsp)
  20c1cc:	8a 44 24 27          	mov    0x27(%rsp),%al
  20c1d0:	34 ff                	xor    $0xff,%al
  20c1d2:	a8 01                	test   $0x1,%al
  20c1d4:	75 11                	jne    20c1e7 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x57>
        let entry_value = addr.as_u64() | flags.bits();
  20c1d6:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c1db:	e8 e0 9e 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c1e0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c1e5:	eb 43                	jmp    20c22a <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x9a>
            return Err(PagingError::UnalignedAddress(addr.as_u64()));
  20c1e7:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20c1ec:	e8 cf 9e 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c1f1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c1f6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c1fb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20c200:	66 c7 44 24 58 03 00 	movw   $0x3,0x58(%rsp)
  20c207:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20c20c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20c211:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20c216:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    }
  20c21b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20c220:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  20c225:	48 83 c4 78          	add    $0x78,%rsp
  20c229:	c3                   	retq   
        let entry_value = addr.as_u64() | flags.bits();
  20c22a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20c22f:	e8 6c 20 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c234:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c239:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20c23e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20c243:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c248:	48 09 d1             	or     %rdx,%rcx
  20c24b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        self.0 = entry_value;
  20c250:	48 89 08             	mov    %rcx,(%rax)
        Ok(())
  20c253:	66 c7 44 24 48 07 00 	movw   $0x7,0x48(%rsp)
    }
  20c25a:	eb bf                	jmp    20c21b <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E+0x8b>
  20c25c:	cc                   	int3   
  20c25d:	cc                   	int3   
  20c25e:	cc                   	int3   
  20c25f:	cc                   	int3   

000000000020c260 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17h15fa22b15023e643E>:
    pub fn set_phy_frame(&mut self, addr: Frame, flags: PageEntryFlags) {
  20c260:	48 83 ec 48          	sub    $0x48,%rsp
  20c264:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c269:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20c26e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20c273:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20c278:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20c27d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let phy_addr = addr.as_u64();
  20c282:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20c287:	e8 94 9e 00 00       	callq  216120 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>
  20c28c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c291:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        self.0 = phy_addr | flags.bits();
  20c296:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20c29b:	e8 00 20 00 00       	callq  20e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>
  20c2a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c2a5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c2aa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20c2af:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c2b4:	48 09 d1             	or     %rdx,%rcx
  20c2b7:	48 89 08             	mov    %rcx,(%rax)
    }
  20c2ba:	48 83 c4 48          	add    $0x48,%rsp
  20c2be:	c3                   	retq   
  20c2bf:	cc                   	int3   

000000000020c2c0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>:
    pub fn has_flag(&self, flag: PageEntryFlags) -> bool {
  20c2c0:	48 83 ec 28          	sub    $0x28,%rsp
  20c2c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c2c9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20c2ce:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PageEntryFlags::from_bits_truncate(self.0).contains(flag)
  20c2d3:	48 8b 3f             	mov    (%rdi),%rdi
  20c2d6:	e8 d5 1f 00 00       	callq  20e2b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>
  20c2db:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c2e0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20c2e5:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c2ea:	e8 01 20 00 00       	callq  20e2f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17hd3ff2771bf260abaE>
  20c2ef:	88 44 24 07          	mov    %al,0x7(%rsp)
  20c2f3:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20c2f7:	24 01                	and    $0x1,%al
  20c2f9:	0f b6 c0             	movzbl %al,%eax
  20c2fc:	48 83 c4 28          	add    $0x28,%rsp
  20c300:	c3                   	retq   
  20c301:	cc                   	int3   
  20c302:	cc                   	int3   
  20c303:	cc                   	int3   
  20c304:	cc                   	int3   
  20c305:	cc                   	int3   
  20c306:	cc                   	int3   
  20c307:	cc                   	int3   
  20c308:	cc                   	int3   
  20c309:	cc                   	int3   
  20c30a:	cc                   	int3   
  20c30b:	cc                   	int3   
  20c30c:	cc                   	int3   
  20c30d:	cc                   	int3   
  20c30e:	cc                   	int3   
  20c30f:	cc                   	int3   

000000000020c310 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E>:
    pub fn reset(&mut self) {
  20c310:	48 83 ec 58          	sub    $0x58,%rsp
  20c314:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        for entry in self.entries.iter_mut() {
  20c319:	be 00 02 00 00       	mov    $0x200,%esi
  20c31e:	e8 9d 71 00 00       	callq  2134c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h21f431eaaa4aac60E>
  20c323:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c328:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20c32d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20c332:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20c337:	e8 24 d1 00 00       	callq  219460 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h47923d31c017090eE>
  20c33c:	48 89 04 24          	mov    %rax,(%rsp)
  20c340:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20c345:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c34a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20c34e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20c353:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20c358:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20c35d:	e8 3e d4 00 00       	callq  2197a0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE>
  20c362:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c367:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20c36c:	48 85 c0             	test   %rax,%rax
  20c36f:	0f 95 c0             	setne  %al
  20c372:	0f b6 c0             	movzbl %al,%eax
  20c375:	74 06                	je     20c37d <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x6d>
  20c377:	eb 00                	jmp    20c379 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x69>
  20c379:	eb 07                	jmp    20c382 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x72>
  20c37b:	0f 0b                	ud2    
    }
  20c37d:	48 83 c4 58          	add    $0x58,%rsp
  20c381:	c3                   	retq   
        for entry in self.entries.iter_mut() {
  20c382:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20c387:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20c38c:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20c391:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
            entry.unmap_entry();
  20c396:	e8 e5 fd ff ff       	callq  20c180 <_ZN9r3_kernel2mm6paging9PageEntry11unmap_entry17h3e90615ec2a5f16fE>
  20c39b:	eb bb                	jmp    20c358 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E+0x48>
  20c39d:	cc                   	int3   
  20c39e:	cc                   	int3   
  20c39f:	cc                   	int3   

000000000020c3a0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE>:
    pub fn from_cr3(phy_offset: u64) -> VirtualMemoryManager {
  20c3a0:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20c3a7:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20c3ac:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20c3b1:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  20c3b6:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  20c3bd:	00 
        let current_pt_addr = mmu::get_page_table_address();
  20c3be:	e8 3d 79 00 00       	callq  213d00 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17h99c814258e74bc8aE>
  20c3c3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  20c3c8:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20c3cd:	be 00 10 00 00       	mov    $0x1000,%esi
  20c3d2:	e8 19 9d 01 00       	callq  2260f0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  20c3d7:	24 01                	and    $0x1,%al
  20c3d9:	88 44 24 76          	mov    %al,0x76(%rsp)
  20c3dd:	48 8d 44 24 76       	lea    0x76(%rsp),%rax
  20c3e2:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20c3e7:	48 8d 05 82 42 ff ff 	lea    -0xbd7e(%rip),%rax        # 200670 <str.0+0x150>
  20c3ee:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20c3f3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20c3f8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c3fd:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20c404:	00 
  20c405:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  20c40a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20c40f:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  20c416:	00 
  20c417:	8a 00                	mov    (%rax),%al
  20c419:	34 ff                	xor    $0xff,%al
  20c41b:	a8 01                	test   $0x1,%al
  20c41d:	75 11                	jne    20c430 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x90>
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  20c41f:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20c424:	e8 97 9c 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c429:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20c42e:	eb 2d                	jmp    20c45d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0xbd>
  20c430:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20c435:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
        assert_eq!(current_pt_addr.is_aligned_at(PAGE_TABLE_SIZE), true);
  20c43a:	c6 44 24 77 00       	movb   $0x0,0x77(%rsp)
  20c43f:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  20c446:	00 00 
  20c448:	4c 8d 05 29 b3 02 00 	lea    0x2b329(%rip),%r8        # 237778 <memcmp+0x11c8>
  20c44f:	31 ff                	xor    %edi,%edi
  20c451:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  20c456:	e8 f5 26 01 00       	callq  21eb50 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  20c45b:	0f 0b                	ud2    
  20c45d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20c462:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        let mapped_vmm_addr = mm::VirtualAddress::from_u64(current_pt_addr.as_u64() + phy_offset);
  20c467:	48 01 c8             	add    %rcx,%rax
  20c46a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20c46f:	0f 92 c0             	setb   %al
  20c472:	a8 01                	test   $0x1,%al
  20c474:	75 14                	jne    20c48a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0xea>
  20c476:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20c47b:	e8 90 9a 01 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20c480:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20c487:	00 
  20c488:	eb 1a                	jmp    20c4a4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x104>
  20c48a:	48 8d 3d df 42 ff ff 	lea    -0xbd21(%rip),%rdi        # 200770 <str.0>
  20c491:	48 8d 15 f8 b2 02 00 	lea    0x2b2f8(%rip),%rdx        # 237790 <memcmp+0x11e0>
  20c498:	be 1c 00 00 00       	mov    $0x1c,%esi
  20c49d:	e8 be 6f 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c4a2:	0f 0b                	ud2    
        log::info!(
  20c4a4:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  20c4ab:	00 03 00 00 00 
  20c4b0:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20c4b7:	00 
  20c4b8:	48 8d 35 79 41 ff ff 	lea    -0xbe87(%rip),%rsi        # 200638 <str.0+0x118>
  20c4bf:	e8 2c 56 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20c4c4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20c4c8:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20c4cc:	a8 01                	test   $0x1,%al
  20c4ce:	75 0c                	jne    20c4dc <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x13c>
  20c4d0:	eb 00                	jmp    20c4d2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x132>
  20c4d2:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20c4d9:	00 
  20c4da:	eb 5a                	jmp    20c536 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x196>
    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
    // is set to a usize that is a valid discriminant for `LevelFilter`.
    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  20c4dc:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  20c4e3:	00 
  20c4e4:	48 8b 3d 25 ec 02 00 	mov    0x2ec25(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20c4eb:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  20c4f2:	00 
  20c4f3:	e8 c8 c7 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20c4f8:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20c4ff:	00 
  20c500:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  20c507:	00 
  20c508:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20c50f:	00 
  20c510:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20c517:	00 
  20c518:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  20c51f:	00 
  20c520:	e8 cb 55 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20c525:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20c529:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20c52d:	24 01                	and    $0x1,%al
  20c52f:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  20c536:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  20c53d:	01 
  20c53e:	75 0a                	jne    20c54a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x1aa>
        mmu::reload_flush();
  20c540:	e8 1b 78 00 00       	callq  213d60 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>
  20c545:	e9 ab 00 00 00       	jmpq   20c5f5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x255>
            mapped_vmm_addr.as_u64()
  20c54a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20c551:	00 
  20c552:	e8 a9 99 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20c557:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20c55e:	00 
        log::info!(
  20c55f:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  20c566:	00 
  20c567:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20c56e:	00 
  20c56f:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  20c576:	00 
  20c577:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  20c57e:	00 
  20c57f:	48 8b 35 92 eb 02 00 	mov    0x2eb92(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20c586:	e8 b5 28 00 00       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  20c58b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c590:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20c595:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c59a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c59f:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  20c5a6:	00 
  20c5a7:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20c5ae:	00 
  20c5af:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  20c5b6:	00 
  20c5b7:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20c5be:	00 
  20c5bf:	48 8d 35 e2 b1 02 00 	lea    0x2b1e2(%rip),%rsi        # 2377a8 <memcmp+0x11f8>
  20c5c6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20c5cc:	4c 89 c2             	mov    %r8,%rdx
  20c5cf:	e8 ec 9c ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20c5d4:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  20c5db:	00 
  20c5dc:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20c5e3:	00 
  20c5e4:	48 8d 15 cd b1 02 00 	lea    0x2b1cd(%rip),%rdx        # 2377b8 <memcmp+0x1208>
  20c5eb:	e8 00 40 02 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20c5f0:	e9 4b ff ff ff       	jmpq   20c540 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE+0x1a0>
  20c5f5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20c5fa:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20c5ff:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            l4_virtual_address: mapped_vmm_addr,
  20c604:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  20c60b:	00 
            l4_phy_addr: current_pt_addr,
  20c60c:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
        VirtualMemoryManager {
  20c611:	48 c7 01 04 00 00 00 	movq   $0x4,(%rcx)
  20c618:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  20c61c:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  20c620:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  20c624:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20c62b:	c3                   	retq   
  20c62c:	cc                   	int3   
  20c62d:	cc                   	int3   
  20c62e:	cc                   	int3   
  20c62f:	cc                   	int3   

000000000020c630 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE>:
    fn get_level_address(&self, next_addr: u64) -> mm::VirtualAddress {
  20c630:	48 83 ec 58          	sub    $0x58,%rsp
  20c634:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20c639:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20c63e:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20c643:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let offset = next_addr - self.l4_phy_addr.as_u64();
  20c648:	48 83 c7 10          	add    $0x10,%rdi
  20c64c:	e8 6f 9a 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c651:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c656:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20c65b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20c660:	48 29 c8             	sub    %rcx,%rax
  20c663:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c668:	0f 92 c0             	setb   %al
  20c66b:	a8 01                	test   $0x1,%al
  20c66d:	75 1f                	jne    20c68e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0x5e>
  20c66f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20c674:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20c679:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20c67e:	48 83 c7 08          	add    $0x8,%rdi
  20c682:	e8 79 98 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20c687:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c68c:	eb 1a                	jmp    20c6a8 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0x78>
        let offset = next_addr - self.l4_phy_addr.as_u64();
  20c68e:	48 8d 3d 3b 41 ff ff 	lea    -0xbec5(%rip),%rdi        # 2007d0 <str.1>
  20c695:	48 8d 15 54 b1 02 00 	lea    0x2b154(%rip),%rdx        # 2377f0 <memcmp+0x1240>
  20c69c:	be 21 00 00 00       	mov    $0x21,%esi
  20c6a1:	e8 ba 6d 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c6a6:	0f 0b                	ud2    
  20c6a8:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c6ad:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20c6b2:	48 01 c8             	add    %rcx,%rax
  20c6b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c6ba:	0f 92 c0             	setb   %al
  20c6bd:	a8 01                	test   $0x1,%al
  20c6bf:	75 14                	jne    20c6d5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE+0xa5>
  20c6c1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c6c6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  20c6cb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20c6d0:	48 83 c4 58          	add    $0x58,%rsp
  20c6d4:	c3                   	retq   
        mm::VirtualAddress(self.l4_virtual_address.as_u64() + offset)
  20c6d5:	48 8d 3d 94 40 ff ff 	lea    -0xbf6c(%rip),%rdi        # 200770 <str.0>
  20c6dc:	48 8d 15 25 b1 02 00 	lea    0x2b125(%rip),%rdx        # 237808 <memcmp+0x1258>
  20c6e3:	be 1c 00 00 00       	mov    $0x1c,%esi
  20c6e8:	e8 73 6d 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c6ed:	0f 0b                	ud2    
  20c6ef:	cc                   	int3   

000000000020c6f0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>:
    fn get_or_create_table(
  20c6f0:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  20c6f7:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  20c6fe:	00 
  20c6ff:	48 89 f9             	mov    %rdi,%rcx
  20c702:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20c709:	00 
  20c70a:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20c711:	00 
  20c712:	88 d0                	mov    %dl,%al
  20c714:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  20c71b:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  20c722:	00 
  20c723:	48 89 bc 24 c8 01 00 	mov    %rdi,0x1c8(%rsp)
  20c72a:	00 
  20c72b:	24 01                	and    $0x1,%al
  20c72d:	88 84 24 d7 01 00 00 	mov    %al,0x1d7(%rsp)
        if entry.is_mapped() {
  20c734:	e8 f7 f9 ff ff       	callq  20c130 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20c739:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  20c740:	8a 84 24 9f 00 00 00 	mov    0x9f(%rsp),%al
  20c747:	a8 01                	test   $0x1,%al
  20c749:	75 13                	jne    20c75e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x6e>
  20c74b:	eb 00                	jmp    20c74d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x5d>
  20c74d:	8a 84 24 9e 00 00 00 	mov    0x9e(%rsp),%al
        if create {
  20c754:	a8 01                	test   $0x1,%al
  20c756:	0f 85 88 00 00 00    	jne    20c7e4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xf4>
  20c75c:	eb 78                	jmp    20c7d6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xe6>
  20c75e:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20c765:	00 
                unsafe { &mut *self.get_level_address(entry.addr().as_u64()).get_mut_ptr() };
  20c766:	e8 e5 f9 ff ff       	callq  20c150 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20c76b:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20c772:	00 
  20c773:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20c77a:	00 
  20c77b:	e8 40 99 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c780:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20c787:	00 
  20c788:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  20c78f:	00 
  20c790:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20c797:	00 
  20c798:	e8 93 fe ff ff       	callq  20c630 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager17get_level_address17hb747058e68a1ba8cE>
  20c79d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20c7a2:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  20c7a7:	e8 a4 b4 00 00       	callq  217c50 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20c7ac:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20c7b1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20c7b6:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  20c7bd:	00 
            return Some(pt);
  20c7be:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20c7c5:	00 
    }
  20c7c6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20c7cd:	00 
  20c7ce:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  20c7d5:	c3                   	retq   
        return None;
  20c7d6:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  20c7dd:	00 00 00 00 00 
  20c7e2:	eb e2                	jmp    20c7c6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xd6>
            let frame_for_pt_opt = PhysicalMemoryManager::alloc();
  20c7e4:	e8 c7 ad 00 00       	callq  2175b0 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17hc6e626f75c02576bE>
  20c7e9:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  20c7f0:	00 
  20c7f1:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  20c7f8:	00 
  20c7f9:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  20c800:	00 
  20c801:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20c808:	00 
  20c809:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  20c810:	00 
  20c811:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20c818:	00 
            if frame_for_pt_opt.is_none() {
  20c819:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20c820:	00 
  20c821:	e8 ca 3d 00 00       	callq  2105f0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20c826:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20c82a:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  20c82e:	a8 01                	test   $0x1,%al
  20c830:	75 58                	jne    20c88a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x19a>
  20c832:	eb 00                	jmp    20c834 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x144>
            let frame_addr = frame_for_pt_opt.unwrap().addr();
  20c834:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20c83b:	00 
  20c83c:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  20c843:	00 
  20c844:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  20c84b:	00 
  20c84c:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20c853:	00 
  20c854:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  20c85b:	00 
  20c85c:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  20c863:	00 
  20c864:	48 8d 15 cd af 02 00 	lea    0x2afcd(%rip),%rdx        # 237838 <memcmp+0x1288>
  20c86b:	e8 a0 38 00 00       	callq  210110 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20c870:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  20c877:	00 
  20c878:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  20c87f:	00 
  20c880:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20c887:	00 
  20c888:	eb 1a                	jmp    20c8a4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x1b4>
                panic!("Failed to create new page table because of OOM.");
  20c88a:	48 8d 3d 60 3f ff ff 	lea    -0xc0a0(%rip),%rdi        # 2007f1 <str.1+0x21>
  20c891:	48 8d 15 88 af 02 00 	lea    0x2af88(%rip),%rdx        # 237820 <memcmp+0x1270>
  20c898:	be 2f 00 00 00       	mov    $0x2f,%esi
  20c89d:	e8 be 6b 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c8a2:	0f 0b                	ud2    
            let frame_addr = frame_for_pt_opt.unwrap().addr();
  20c8a4:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20c8ab:	00 
  20c8ac:	e8 5f 98 00 00       	callq  216110 <_ZN9r3_kernel2mm3phy5Frame4addr17h1a4e3a91f04f8e02E>
  20c8b1:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20c8b8:	00 
            let res = entry.set_address(frame_addr, PageEntryFlags::kernel_flags());
  20c8b9:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20c8c0:	00 
  20c8c1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20c8c6:	e8 95 f7 ff ff       	callq  20c060 <_ZN9r3_kernel2mm6paging14PageEntryFlags12kernel_flags17h97321716d9d017ceE>
  20c8cb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20c8d0:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  20c8d5:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  20c8da:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20c8e1:	00 
  20c8e2:	e8 a9 f8 ff ff       	callq  20c190 <_ZN9r3_kernel2mm6paging9PageEntry11set_address17h7599786ff33e0de2E>
  20c8e7:	48 89 94 24 00 02 00 	mov    %rdx,0x200(%rsp)
  20c8ee:	00 
  20c8ef:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  20c8f6:	00 
  20c8f7:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  20c8fe:	00 
  20c8ff:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20c906:	00 
  20c907:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  20c90e:	00 
  20c90f:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20c916:	00 
            if res.is_err() {
  20c917:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  20c91e:	00 
  20c91f:	e8 ac e2 ff ff       	callq  20abd0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>
  20c924:	88 44 24 57          	mov    %al,0x57(%rsp)
  20c928:	8a 44 24 57          	mov    0x57(%rsp),%al
  20c92c:	a8 01                	test   $0x1,%al
  20c92e:	75 19                	jne    20c949 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x259>
  20c930:	eb 00                	jmp    20c932 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x242>
                &mut *mm::VirtualAddress::from_u64(frame_addr.as_u64() + self.phy_offset)
  20c932:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20c939:	00 
  20c93a:	e8 81 97 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  20c93f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20c944:	e9 f7 00 00 00       	jmpq   20ca40 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x350>
                panic!("{:?}", res.unwrap_err());
  20c949:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20c950:	00 
  20c951:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  20c958:	00 
  20c959:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  20c960:	00 
  20c961:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  20c968:	00 
  20c969:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
  20c970:	00 
  20c971:	48 8b b4 24 50 01 00 	mov    0x150(%rsp),%rsi
  20c978:	00 
  20c979:	48 8d 15 e0 ae 02 00 	lea    0x2aee0(%rip),%rdx        # 237860 <memcmp+0x12b0>
  20c980:	e8 1b e0 ff ff       	callq  20a9a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>
  20c985:	48 89 94 24 10 02 00 	mov    %rdx,0x210(%rsp)
  20c98c:	00 
  20c98d:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  20c994:	00 
  20c995:	48 8b 84 24 08 02 00 	mov    0x208(%rsp),%rax
  20c99c:	00 
  20c99d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20c9a4:	00 
  20c9a5:	48 8b 84 24 10 02 00 	mov    0x210(%rsp),%rax
  20c9ac:	00 
  20c9ad:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20c9b4:	00 
  20c9b5:	48 8d 84 24 38 01 00 	lea    0x138(%rsp),%rax
  20c9bc:	00 
  20c9bd:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  20c9c4:	00 
  20c9c5:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
  20c9cc:	00 
  20c9cd:	48 89 bc 24 18 02 00 	mov    %rdi,0x218(%rsp)
  20c9d4:	00 
  20c9d5:	48 8d 35 84 14 00 00 	lea    0x1484(%rip),%rsi        # 20de60 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>
  20c9dc:	e8 9f 20 00 00       	callq  20ea80 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>
  20c9e1:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20c9e6:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20c9eb:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20c9f0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  20c9f5:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20c9fc:	00 
  20c9fd:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20ca04:	00 
  20ca05:	48 8d 8c 24 20 01 00 	lea    0x120(%rsp),%rcx
  20ca0c:	00 
  20ca0d:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20ca14:	00 
  20ca15:	48 8d 35 34 ae 02 00 	lea    0x2ae34(%rip),%rsi        # 237850 <memcmp+0x12a0>
  20ca1c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20ca22:	4c 89 c2             	mov    %r8,%rdx
  20ca25:	e8 96 98 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20ca2a:	48 8d 35 47 ae 02 00 	lea    0x2ae47(%rip),%rsi        # 237878 <memcmp+0x12c8>
  20ca31:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20ca38:	00 
  20ca39:	e8 f2 6a 02 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20ca3e:	0f 0b                	ud2    
  20ca40:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  20ca47:	00 
  20ca48:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                &mut *mm::VirtualAddress::from_u64(frame_addr.as_u64() + self.phy_offset)
  20ca4d:	48 03 41 18          	add    0x18(%rcx),%rax
  20ca51:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ca56:	0f 92 c0             	setb   %al
  20ca59:	a8 01                	test   $0x1,%al
  20ca5b:	75 11                	jne    20ca6e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x37e>
  20ca5d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20ca62:	e8 a9 94 01 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20ca67:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ca6c:	eb 1a                	jmp    20ca88 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x398>
  20ca6e:	48 8d 3d fb 3c ff ff 	lea    -0xc305(%rip),%rdi        # 200770 <str.0>
  20ca75:	48 8d 15 14 ae 02 00 	lea    0x2ae14(%rip),%rdx        # 237890 <memcmp+0x12e0>
  20ca7c:	be 1c 00 00 00       	mov    $0x1c,%esi
  20ca81:	e8 da 69 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20ca86:	0f 0b                	ud2    
  20ca88:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ca8d:	e8 be b1 00 00       	callq  217c50 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20ca92:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ca97:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20ca9c:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  20caa3:	00 
            new_pt.reset();
  20caa4:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
  20caab:	00 
  20caac:	e8 5f f8 ff ff       	callq  20c310 <_ZN9r3_kernel2mm6paging9PageTable5reset17h73af86cec6a52d31E>
            log::debug!("Created new page table at {:p}", new_pt);
  20cab1:	48 c7 84 24 60 01 00 	movq   $0x4,0x160(%rsp)
  20cab8:	00 04 00 00 00 
  20cabd:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20cac4:	00 
  20cac5:	48 8d 35 6c 3b ff ff 	lea    -0xc494(%rip),%rsi        # 200638 <str.0+0x118>
  20cacc:	e8 1f 50 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20cad1:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20cad5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20cad9:	a8 01                	test   $0x1,%al
  20cadb:	75 0c                	jne    20cae9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x3f9>
  20cadd:	eb 00                	jmp    20cadf <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x3ef>
  20cadf:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  20cae6:	00 
  20cae7:	eb 5a                	jmp    20cb43 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x453>
  20cae9:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  20caf0:	00 
  20caf1:	48 8b 3d 18 e6 02 00 	mov    0x2e618(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20caf8:	0f b6 b4 24 2f 02 00 	movzbl 0x22f(%rsp),%esi
  20caff:	00 
  20cb00:	e8 bb c1 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20cb05:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  20cb0c:	00 
  20cb0d:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  20cb14:	00 
  20cb15:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  20cb1c:	00 
  20cb1d:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  20cb24:	00 
  20cb25:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  20cb2c:	00 
  20cb2d:	e8 be 4f 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20cb32:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20cb36:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  20cb3a:	24 01                	and    $0x1,%al
  20cb3c:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  20cb43:	f6 84 24 6f 01 00 00 	testb  $0x1,0x16f(%rsp)
  20cb4a:	01 
  20cb4b:	75 15                	jne    20cb62 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x472>
            return Some(new_pt);
  20cb4d:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  20cb54:	00 
  20cb55:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20cb5c:	00 
  20cb5d:	e9 64 fc ff ff       	jmpq   20c7c6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0xd6>
            log::debug!("Created new page table at {:p}", new_pt);
  20cb62:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
  20cb69:	00 
  20cb6a:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  20cb71:	00 
  20cb72:	48 8b bc 24 b8 01 00 	mov    0x1b8(%rsp),%rdi
  20cb79:	00 
  20cb7a:	48 89 bc 24 20 02 00 	mov    %rdi,0x220(%rsp)
  20cb81:	00 
  20cb82:	48 8d 35 67 69 00 00 	lea    0x6967(%rip),%rsi        # 2134f0 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h50650571f0c00760E>
  20cb89:	e8 32 21 00 00       	callq  20ecc0 <_ZN4core3fmt10ArgumentV13new17ha27f7629ef6a1995E>
  20cb8e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cb93:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20cb98:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20cb9d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20cba2:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  20cba9:	00 
  20cbaa:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20cbb1:	00 
  20cbb2:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  20cbb9:	00 
  20cbba:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  20cbc1:	00 
  20cbc2:	48 8d 35 df ac 02 00 	lea    0x2acdf(%rip),%rsi        # 2378a8 <memcmp+0x12f8>
  20cbc9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20cbcf:	4c 89 c2             	mov    %r8,%rdx
  20cbd2:	e8 e9 96 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20cbd7:	48 8b b4 24 60 01 00 	mov    0x160(%rsp),%rsi
  20cbde:	00 
  20cbdf:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  20cbe6:	00 
  20cbe7:	48 8d 15 ca ac 02 00 	lea    0x2acca(%rip),%rdx        # 2378b8 <memcmp+0x1308>
  20cbee:	e8 fd 39 02 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20cbf3:	e9 55 ff ff ff       	jmpq   20cb4d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E+0x45d>
  20cbf8:	cc                   	int3   
  20cbf9:	cc                   	int3   
  20cbfa:	cc                   	int3   
  20cbfb:	cc                   	int3   
  20cbfc:	cc                   	int3   
  20cbfd:	cc                   	int3   
  20cbfe:	cc                   	int3   
  20cbff:	cc                   	int3   

000000000020cc00 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>:
    fn walk_hierarchy(
  20cc00:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20cc07:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  20cc0c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20cc11:	44 88 c0             	mov    %r8b,%al
  20cc14:	88 44 24 75          	mov    %al,0x75(%rsp)
  20cc18:	88 4c 24 76          	mov    %cl,0x76(%rsp)
  20cc1c:	88 54 24 77          	mov    %dl,0x77(%rsp)
  20cc20:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  20cc27:	00 
  20cc28:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  20cc2f:	00 
  20cc30:	80 e2 01             	and    $0x1,%dl
  20cc33:	88 94 24 05 01 00 00 	mov    %dl,0x105(%rsp)
  20cc3a:	80 e1 01             	and    $0x1,%cl
  20cc3d:	88 8c 24 06 01 00 00 	mov    %cl,0x106(%rsp)
  20cc44:	24 01                	and    $0x1,%al
  20cc46:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
        let l4_table: &mut PageTable = unsafe { &mut *self.l4_virtual_address.get_mut_ptr() };
  20cc4d:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  20cc51:	e8 fa af 00 00       	callq  217c50 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>
  20cc56:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20cc5b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  20cc60:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20cc65:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20cc6c:	00 
        let l4_index = address.get_level_index(mm::PageTableLevel::Level4);
  20cc6d:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  20cc74:	00 
  20cc75:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  20cc7c:	00 
  20cc7d:	e8 ee 92 01 00       	callq  225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20cc82:	66 89 84 24 8c 00 00 	mov    %ax,0x8c(%rsp)
  20cc89:	00 
  20cc8a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l3_index = address.get_level_index(mm::PageTableLevel::Level3);
  20cc8f:	c6 84 24 93 00 00 00 	movb   $0x1,0x93(%rsp)
  20cc96:	01 
  20cc97:	0f b6 b4 24 93 00 00 	movzbl 0x93(%rsp),%esi
  20cc9e:	00 
  20cc9f:	e8 cc 92 01 00       	callq  225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20cca4:	66 89 84 24 90 00 00 	mov    %ax,0x90(%rsp)
  20ccab:	00 
  20ccac:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l2_index = address.get_level_index(mm::PageTableLevel::Level2);
  20ccb1:	c6 84 24 97 00 00 00 	movb   $0x2,0x97(%rsp)
  20ccb8:	02 
  20ccb9:	0f b6 b4 24 97 00 00 	movzbl 0x97(%rsp),%esi
  20ccc0:	00 
  20ccc1:	e8 aa 92 01 00       	callq  225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20ccc6:	66 89 84 24 94 00 00 	mov    %ax,0x94(%rsp)
  20cccd:	00 
        let l4_entry: &mut PageEntry = &mut l4_table.entries[l4_index.as_usize()];
  20ccce:	48 8d bc 24 8c 00 00 	lea    0x8c(%rsp),%rdi
  20ccd5:	00 
  20ccd6:	e8 f5 f2 ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20ccdb:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20cce0:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20cce5:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20cceb:	0f 92 c0             	setb   %al
  20ccee:	a8 01                	test   $0x1,%al
  20ccf0:	75 02                	jne    20ccf4 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0xf4>
  20ccf2:	eb 37                	jmp    20cd2b <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x12b>
  20ccf4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  20ccf9:	8a 44 24 77          	mov    0x77(%rsp),%al
  20ccfd:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  20cd02:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  20cd07:	48 c1 e1 03          	shl    $0x3,%rcx
  20cd0b:	48 01 ce             	add    %rcx,%rsi
  20cd0e:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  20cd15:	00 
        let l3_table_opt = self.get_or_create_table(l4_entry, create);
  20cd16:	0f b6 d0             	movzbl %al,%edx
  20cd19:	83 e2 01             	and    $0x1,%edx
  20cd1c:	e8 cf f9 ff ff       	callq  20c6f0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20cd21:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20cd28:	00 
  20cd29:	eb 18                	jmp    20cd43 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x143>
  20cd2b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let l4_entry: &mut PageEntry = &mut l4_table.entries[l4_index.as_usize()];
  20cd30:	48 8d 15 b9 ab 02 00 	lea    0x2abb9(%rip),%rdx        # 2378f0 <memcmp+0x1340>
  20cd37:	be 00 02 00 00       	mov    $0x200,%esi
  20cd3c:	e8 6f 67 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20cd41:	0f 0b                	ud2    
        if l3_table_opt.is_none() {
  20cd43:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20cd4a:	00 
  20cd4b:	e8 80 37 00 00       	callq  2104d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20cd50:	88 44 24 57          	mov    %al,0x57(%rsp)
  20cd54:	8a 44 24 57          	mov    0x57(%rsp),%al
  20cd58:	a8 01                	test   $0x1,%al
  20cd5a:	75 25                	jne    20cd81 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x181>
  20cd5c:	eb 00                	jmp    20cd5e <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x15e>
        let l3_table = l3_table_opt.unwrap();
  20cd5e:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20cd65:	00 
  20cd66:	48 8d 35 9b ab 02 00 	lea    0x2ab9b(%rip),%rsi        # 237908 <memcmp+0x1358>
  20cd6d:	e8 7e 34 00 00       	callq  2101f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20cd72:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20cd77:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  20cd7e:	00 
  20cd7f:	eb 1c                	jmp    20cd9d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x19d>
            return None;
  20cd81:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  20cd88:	00 00 00 00 00 
    }
  20cd8d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20cd94:	00 
  20cd95:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20cd9c:	c3                   	retq   
        let l3_entry: &mut PageEntry = &mut l3_table.entries[l3_index.as_usize()];
  20cd9d:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  20cda4:	00 
  20cda5:	e8 26 f2 ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20cdaa:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20cdaf:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20cdb4:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20cdba:	0f 92 c0             	setb   %al
  20cdbd:	a8 01                	test   $0x1,%al
  20cdbf:	75 02                	jne    20cdc3 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x1c3>
  20cdc1:	eb 28                	jmp    20cdeb <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x1eb>
  20cdc3:	8a 44 24 75          	mov    0x75(%rsp),%al
  20cdc7:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20cdcc:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20cdd1:	48 c1 e2 03          	shl    $0x3,%rdx
  20cdd5:	48 01 d1             	add    %rdx,%rcx
  20cdd8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20cddd:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20cde4:	00 
        if l3 {
  20cde5:	a8 01                	test   $0x1,%al
  20cde7:	75 3d                	jne    20ce26 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x226>
  20cde9:	eb 18                	jmp    20ce03 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x203>
  20cdeb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let l3_entry: &mut PageEntry = &mut l3_table.entries[l3_index.as_usize()];
  20cdf0:	48 8d 15 29 ab 02 00 	lea    0x2ab29(%rip),%rdx        # 237920 <memcmp+0x1370>
  20cdf7:	be 00 02 00 00       	mov    $0x200,%esi
  20cdfc:	e8 af 66 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ce01:	0f 0b                	ud2    
  20ce03:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20ce08:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  20ce0d:	8a 44 24 77          	mov    0x77(%rsp),%al
        let l2_table_opt = self.get_or_create_table(l3_entry, create);
  20ce11:	0f b6 d0             	movzbl %al,%edx
  20ce14:	83 e2 01             	and    $0x1,%edx
  20ce17:	e8 d4 f8 ff ff       	callq  20c6f0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20ce1c:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20ce23:	00 
  20ce24:	eb 12                	jmp    20ce38 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x238>
  20ce26:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Some(l3_entry);
  20ce2b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20ce32:	00 
  20ce33:	e9 55 ff ff ff       	jmpq   20cd8d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
        if l2_table_opt.is_none() {
  20ce38:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20ce3f:	00 
  20ce40:	e8 8b 36 00 00       	callq  2104d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20ce45:	88 44 24 37          	mov    %al,0x37(%rsp)
  20ce49:	8a 44 24 37          	mov    0x37(%rsp),%al
  20ce4d:	a8 01                	test   $0x1,%al
  20ce4f:	75 25                	jne    20ce76 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x276>
  20ce51:	eb 00                	jmp    20ce53 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x253>
        let l2_table = l2_table_opt.unwrap();
  20ce53:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  20ce5a:	00 
  20ce5b:	48 8d 35 d6 aa 02 00 	lea    0x2aad6(%rip),%rsi        # 237938 <memcmp+0x1388>
  20ce62:	e8 89 33 00 00       	callq  2101f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20ce67:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ce6c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20ce73:	00 
  20ce74:	eb 11                	jmp    20ce87 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x287>
            return None;
  20ce76:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  20ce7d:	00 00 00 00 00 
  20ce82:	e9 06 ff ff ff       	jmpq   20cd8d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
        let l2_entry: &mut PageEntry = &mut l2_table.entries[l2_index.as_usize()];
  20ce87:	48 8d bc 24 94 00 00 	lea    0x94(%rsp),%rdi
  20ce8e:	00 
  20ce8f:	e8 3c f1 ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20ce94:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ce99:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20ce9e:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20cea4:	0f 92 c0             	setb   %al
  20cea7:	a8 01                	test   $0x1,%al
  20cea9:	75 02                	jne    20cead <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ad>
  20ceab:	eb 28                	jmp    20ced5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2d5>
  20cead:	8a 44 24 76          	mov    0x76(%rsp),%al
  20ceb1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ceb6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20cebb:	48 c1 e2 03          	shl    $0x3,%rdx
  20cebf:	48 01 d1             	add    %rdx,%rcx
  20cec2:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20cec7:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  20cece:	00 
        if assert_huge_page {
  20cecf:	a8 01                	test   $0x1,%al
  20ced1:	75 2c                	jne    20ceff <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ff>
  20ced3:	eb 18                	jmp    20ceed <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ed>
  20ced5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let l2_entry: &mut PageEntry = &mut l2_table.entries[l2_index.as_usize()];
  20ceda:	48 8d 15 6f aa 02 00 	lea    0x2aa6f(%rip),%rdx        # 237950 <memcmp+0x13a0>
  20cee1:	be 00 02 00 00       	mov    $0x200,%esi
  20cee6:	e8 c5 65 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ceeb:	0f 0b                	ud2    
  20ceed:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Some(l2_entry)
  20cef2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20cef9:	00 
    }
  20cefa:	e9 8e fe ff ff       	jmpq   20cd8d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x18d>
  20ceff:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            assert_eq!(l2_entry.has_flag(PageEntryFlags::HUGE_PAGE), true);
  20cf04:	be 80 00 00 00       	mov    $0x80,%esi
  20cf09:	e8 b2 f3 ff ff       	callq  20c2c0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>
  20cf0e:	24 01                	and    $0x1,%al
  20cf10:	88 84 24 be 00 00 00 	mov    %al,0xbe(%rsp)
  20cf17:	48 8d 84 24 be 00 00 	lea    0xbe(%rsp),%rax
  20cf1e:	00 
  20cf1f:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20cf26:	00 
  20cf27:	48 8d 05 42 37 ff ff 	lea    -0xc8be(%rip),%rax        # 200670 <str.0+0x150>
  20cf2e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20cf35:	00 
  20cf36:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20cf3d:	00 
  20cf3e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cf43:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20cf4a:	00 
  20cf4b:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  20cf52:	00 
  20cf53:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20cf58:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  20cf5f:	00 
  20cf60:	8a 00                	mov    (%rax),%al
  20cf62:	34 ff                	xor    $0xff,%al
  20cf64:	a8 01                	test   $0x1,%al
  20cf66:	75 02                	jne    20cf6a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x36a>
  20cf68:	eb 83                	jmp    20ceed <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E+0x2ed>
  20cf6a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20cf6f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20cf74:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  20cf7b:	00 
  20cf7c:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  20cf83:	00 00 00 00 00 
  20cf88:	4c 8d 05 d9 a9 02 00 	lea    0x2a9d9(%rip),%r8        # 237968 <memcmp+0x13b8>
  20cf8f:	31 ff                	xor    %edi,%edi
  20cf91:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  20cf98:	00 
  20cf99:	e8 b2 1b 01 00       	callq  21eb50 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  20cf9e:	0f 0b                	ud2    

000000000020cfa0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E>:
    pub fn translate_to_frame(&self, address: &mm::VirtualAddress) -> Option<Frame> {
  20cfa0:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  20cfa7:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  20cfac:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20cfb1:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  20cfb8:	00 
  20cfb9:	48 89 b4 24 c8 00 00 	mov    %rsi,0xc8(%rsp)
  20cfc0:	00 
        let resolved_opt = self.walk_hierarchy(address, false, false, false);
  20cfc1:	45 31 c0             	xor    %r8d,%r8d
  20cfc4:	44 89 c2             	mov    %r8d,%edx
  20cfc7:	44 89 c1             	mov    %r8d,%ecx
  20cfca:	e8 31 fc ff ff       	callq  20cc00 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>
  20cfcf:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
        if resolved_opt.is_none() {
  20cfd4:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20cfd9:	e8 c2 34 00 00       	callq  2104a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>
  20cfde:	88 44 24 57          	mov    %al,0x57(%rsp)
  20cfe2:	8a 44 24 57          	mov    0x57(%rsp),%al
  20cfe6:	a8 01                	test   $0x1,%al
  20cfe8:	75 22                	jne    20d00c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x6c>
  20cfea:	eb 00                	jmp    20cfec <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x4c>
        let l2_entry = resolved_opt.unwrap();
  20cfec:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  20cff1:	48 8d 35 88 a9 02 00 	lea    0x2a988(%rip),%rsi        # 237980 <memcmp+0x13d0>
  20cff8:	e8 c3 30 00 00       	callq  2100c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>
  20cffd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d002:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20d009:	00 
  20d00a:	eb 1b                	jmp    20d027 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x87>
            return None;
  20d00c:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d013:	00 00 
    }
  20d015:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20d01a:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  20d01f:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  20d026:	c3                   	retq   
  20d027:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        if l2_entry.has_flag(PageEntryFlags::HUGE_PAGE) {
  20d02c:	be 80 00 00 00       	mov    $0x80,%esi
  20d031:	e8 8a f2 ff ff       	callq  20c2c0 <_ZN9r3_kernel2mm6paging9PageEntry8has_flag17hc99ea9399f7e90e4E>
  20d036:	88 44 24 47          	mov    %al,0x47(%rsp)
  20d03a:	8a 44 24 47          	mov    0x47(%rsp),%al
  20d03e:	a8 01                	test   $0x1,%al
  20d040:	75 26                	jne    20d068 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0xc8>
  20d042:	eb 00                	jmp    20d044 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0xa4>
  20d044:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        let l1_index = address.get_level_index(mm::PageTableLevel::Level1);
  20d049:	c6 84 24 9f 00 00 00 	movb   $0x3,0x9f(%rsp)
  20d050:	03 
  20d051:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  20d058:	00 
  20d059:	e8 12 8f 01 00       	callq  225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d05e:	66 89 84 24 9c 00 00 	mov    %ax,0x9c(%rsp)
  20d065:	00 
  20d066:	eb 5d                	jmp    20d0c5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x125>
  20d068:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
            return Frame::from_aligned_address(l2_entry.addr()).ok();
  20d06d:	e8 de f0 ff ff       	callq  20c150 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20d072:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d077:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20d07c:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20d083:	00 
  20d084:	e8 87 8f 00 00       	callq  216010 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>
  20d089:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20d090:	00 
  20d091:	e8 9a d9 ff ff       	callq  20aa30 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>
  20d096:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  20d09d:	00 
  20d09e:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20d0a5:	00 
  20d0a6:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20d0ad:	00 
  20d0ae:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20d0b3:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20d0ba:	00 
  20d0bb:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20d0c0:	e9 50 ff ff ff       	jmpq   20d015 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20d0c5:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  20d0ca:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l1_table_opt = self.get_or_create_table(l2_entry, false);
  20d0cf:	31 d2                	xor    %edx,%edx
  20d0d1:	e8 1a f6 ff ff       	callq  20c6f0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20d0d6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d0dd:	00 
        if l1_table_opt.is_none() {
  20d0de:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20d0e5:	00 
  20d0e6:	e8 e5 33 00 00       	callq  2104d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20d0eb:	88 44 24 37          	mov    %al,0x37(%rsp)
  20d0ef:	8a 44 24 37          	mov    0x37(%rsp),%al
  20d0f3:	a8 01                	test   $0x1,%al
  20d0f5:	75 25                	jne    20d11c <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x17c>
  20d0f7:	eb 00                	jmp    20d0f9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x159>
        let l1_table = l1_table_opt.unwrap();
  20d0f9:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  20d100:	00 
  20d101:	48 8d 35 90 a8 02 00 	lea    0x2a890(%rip),%rsi        # 237998 <memcmp+0x13e8>
  20d108:	e8 e3 30 00 00       	callq  2101f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20d10d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d112:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20d119:	00 
  20d11a:	eb 0e                	jmp    20d12a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x18a>
            return None;
  20d11c:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d123:	00 00 
  20d125:	e9 eb fe ff ff       	jmpq   20d015 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  20d12a:	48 8d bc 24 9c 00 00 	lea    0x9c(%rsp),%rdi
  20d131:	00 
  20d132:	e8 99 ee ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d137:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d13c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d141:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d147:	0f 92 c0             	setb   %al
  20d14a:	a8 01                	test   $0x1,%al
  20d14c:	75 02                	jne    20d150 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1b0>
  20d14e:	eb 29                	jmp    20d179 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1d9>
  20d150:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d155:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20d15a:	48 c1 e0 03          	shl    $0x3,%rax
  20d15e:	48 01 c7             	add    %rax,%rdi
  20d161:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d166:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  20d16d:	00 
        if !l1_entry.is_mapped() {
  20d16e:	e8 bd ef ff ff       	callq  20c130 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20d173:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d177:	eb 18                	jmp    20d191 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x1f1>
  20d179:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let l1_entry: &PageEntry = &l1_table.entries[l1_index.as_usize()];
  20d17e:	48 8d 15 2b a8 02 00 	lea    0x2a82b(%rip),%rdx        # 2379b0 <memcmp+0x1400>
  20d185:	be 00 02 00 00       	mov    $0x200,%esi
  20d18a:	e8 21 63 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d18f:	0f 0b                	ud2    
  20d191:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        if !l1_entry.is_mapped() {
  20d195:	34 ff                	xor    $0xff,%al
  20d197:	a8 01                	test   $0x1,%al
  20d199:	75 11                	jne    20d1ac <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x20c>
  20d19b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  20d1a0:	e8 ab ef ff ff       	callq  20c150 <_ZN9r3_kernel2mm6paging9PageEntry4addr17hd359ba4f4bc8301bE>
  20d1a5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d1aa:	eb 0e                	jmp    20d1ba <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x21a>
            return None;
  20d1ac:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  20d1b3:	00 00 
  20d1b5:	e9 5b fe ff ff       	jmpq   20d015 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20d1ba:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Frame::from_aligned_address(l1_entry.addr()).ok()
  20d1bf:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20d1c6:	00 
  20d1c7:	e8 44 8e 00 00       	callq  216010 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>
  20d1cc:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20d1d3:	00 
  20d1d4:	e8 57 d8 ff ff       	callq  20aa30 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9cb3415aefb5cfd2E>
  20d1d9:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  20d1e0:	00 
  20d1e1:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20d1e8:	00 
  20d1e9:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20d1f0:	00 
  20d1f1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20d1f6:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20d1fd:	00 
  20d1fe:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20d203:	e9 0d fe ff ff       	jmpq   20d015 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E+0x75>
  20d208:	cc                   	int3   
  20d209:	cc                   	int3   
  20d20a:	cc                   	int3   
  20d20b:	cc                   	int3   
  20d20c:	cc                   	int3   
  20d20d:	cc                   	int3   
  20d20e:	cc                   	int3   
  20d20f:	cc                   	int3   

000000000020d210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E>:
    pub fn translate(&self, addr: mm::VirtualAddress) -> Option<mm::PhysicalAddress> {
  20d210:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  20d217:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20d21c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20d221:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
        let translated_frame = self.translate_to_frame(&addr);
  20d226:	e8 75 fd ff ff       	callq  20cfa0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager18translate_to_frame17h1df82d19e0f2c318E>
  20d22b:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  20d230:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20d235:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20d23a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20d23f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20d244:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if translated_frame.is_none() {
  20d249:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20d24e:	e8 9d 33 00 00       	callq  2105f0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20d253:	88 44 24 27          	mov    %al,0x27(%rsp)
  20d257:	8a 44 24 27          	mov    0x27(%rsp),%al
  20d25b:	a8 01                	test   $0x1,%al
  20d25d:	75 43                	jne    20d2a2 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x92>
  20d25f:	eb 00                	jmp    20d261 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x51>
        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  20d261:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d266:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  20d26b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d270:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d275:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  20d27a:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20d27f:	48 8d 15 42 a7 02 00 	lea    0x2a742(%rip),%rdx        # 2379c8 <memcmp+0x1418>
  20d286:	e8 85 2e 00 00       	callq  210110 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20d28b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20d292:	00 
  20d293:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20d29a:	00 
  20d29b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20d2a0:	eb 1b                	jmp    20d2bd <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0xad>
            return None;
  20d2a2:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  20d2a9:	00 00 
    }
  20d2ab:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20d2b0:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20d2b5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  20d2bc:	c3                   	retq   
        let phy_u64_frame_addr = translated_frame.unwrap().as_u64();
  20d2bd:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20d2c2:	e8 59 8e 00 00       	callq  216120 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>
  20d2c7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d2cc:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20d2d3:	00 
        let phy_offset = addr.get_page_offset() as u64;
  20d2d4:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d2d9:	e8 d2 8d 01 00       	callq  2260b0 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17ha2e641ae4c72d812E>
  20d2de:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  20d2e3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d2e8:	66 8b 4c 24 16       	mov    0x16(%rsp),%cx
  20d2ed:	0f b7 c9             	movzwl %cx,%ecx
  20d2f0:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20d2f7:	00 
            phy_u64_frame_addr + phy_offset,
  20d2f8:	48 01 c8             	add    %rcx,%rax
  20d2fb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d300:	0f 92 c0             	setb   %al
  20d303:	a8 01                	test   $0x1,%al
  20d305:	75 10                	jne    20d317 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x107>
  20d307:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Some(mm::PhysicalAddress::from_u64(
  20d30c:	e8 bf 8d 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  20d311:	48 89 04 24          	mov    %rax,(%rsp)
  20d315:	eb 1a                	jmp    20d331 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x121>
            phy_u64_frame_addr + phy_offset,
  20d317:	48 8d 3d 52 34 ff ff 	lea    -0xcbae(%rip),%rdi        # 200770 <str.0>
  20d31e:	48 8d 15 bb a6 02 00 	lea    0x2a6bb(%rip),%rdx        # 2379e0 <memcmp+0x1430>
  20d325:	be 1c 00 00 00       	mov    $0x1c,%esi
  20d32a:	e8 31 61 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d32f:	0f 0b                	ud2    
  20d331:	48 8b 04 24          	mov    (%rsp),%rax
        Some(mm::PhysicalAddress::from_u64(
  20d335:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d33a:	48 c7 44 24 30 01 00 	movq   $0x1,0x30(%rsp)
  20d341:	00 00 
    }
  20d343:	e9 63 ff ff ff       	jmpq   20d2ab <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E+0x9b>
  20d348:	cc                   	int3   
  20d349:	cc                   	int3   
  20d34a:	cc                   	int3   
  20d34b:	cc                   	int3   
  20d34c:	cc                   	int3   
  20d34d:	cc                   	int3   
  20d34e:	cc                   	int3   
  20d34f:	cc                   	int3   

000000000020d350 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE>:
    pub fn map_huge_page(
  20d350:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  20d357:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20d35c:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20d361:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  20d366:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20d36b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20d370:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  20d377:	00 
  20d378:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20d37f:	00 
  20d380:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20d385:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  20d38c:	00 
  20d38d:	48 89 8c 24 18 01 00 	mov    %rcx,0x118(%rsp)
  20d394:	00 
        let resolved_opt = self.walk_hierarchy(&page.addr(), true, false, true);
  20d395:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20d39a:	e8 91 ec ff ff       	callq  20c030 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20d39f:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d3a6:	00 
  20d3a7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  20d3ac:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  20d3b3:	00 
  20d3b4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20d3ba:	31 c9                	xor    %ecx,%ecx
  20d3bc:	44 89 c2             	mov    %r8d,%edx
  20d3bf:	e8 3c f8 ff ff       	callq  20cc00 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager14walk_hierarchy17h675418ee2ea3eea7E>
  20d3c4:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20d3cb:	00 
        if resolved_opt.is_none() {
  20d3cc:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20d3d3:	00 
  20d3d4:	e8 c7 30 00 00       	callq  2104a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>
  20d3d9:	88 44 24 57          	mov    %al,0x57(%rsp)
  20d3dd:	8a 44 24 57          	mov    0x57(%rsp),%al
  20d3e1:	a8 01                	test   $0x1,%al
  20d3e3:	75 25                	jne    20d40a <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0xba>
  20d3e5:	eb 00                	jmp    20d3e7 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x97>
        let l3_entry = resolved_opt.unwrap();
  20d3e7:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20d3ee:	00 
  20d3ef:	48 8d 35 02 a6 02 00 	lea    0x2a602(%rip),%rsi        # 2379f8 <memcmp+0x1448>
  20d3f6:	e8 c5 2c 00 00       	callq  2100c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>
  20d3fb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d400:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20d407:	00 
  20d408:	eb 5e                	jmp    20d468 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x118>
            return Err(PagingError::MappingError(page.as_u64()));
  20d40a:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20d40f:	e8 2c ec ff ff       	callq  20c040 <_ZN9r3_kernel2mm6paging4Page6as_u6417h562c4c3e06a8062eE>
  20d414:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20d419:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d41e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20d425:	00 
  20d426:	66 c7 84 24 a8 00 00 	movw   $0x4,0xa8(%rsp)
  20d42d:	00 04 00 
  20d430:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20d437:	00 
  20d438:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20d43f:	00 
  20d440:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20d447:	00 
  20d448:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20d44f:	00 
    }
  20d450:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20d457:	00 
  20d458:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  20d45f:	00 
  20d460:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  20d467:	c3                   	retq   
        let l2_index = page.addr().get_level_index(mm::PageTableLevel::Level2);
  20d468:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20d46d:	e8 be eb ff ff       	callq  20c030 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20d472:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20d479:	00 
  20d47a:	c6 84 24 cf 00 00 00 	movb   $0x2,0xcf(%rsp)
  20d481:	02 
  20d482:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20d489:	00 
  20d48a:	0f b6 b4 24 cf 00 00 	movzbl 0xcf(%rsp),%esi
  20d491:	00 
  20d492:	e8 d9 8a 01 00       	callq  225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>
  20d497:	66 89 84 24 be 00 00 	mov    %ax,0xbe(%rsp)
  20d49e:	00 
  20d49f:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  20d4a4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
        let l2_table_opt = self.get_or_create_table(l3_entry, true);
  20d4a9:	ba 01 00 00 00       	mov    $0x1,%edx
  20d4ae:	e8 3d f2 ff ff       	callq  20c6f0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager19get_or_create_table17hed39bb9090d0d789E>
  20d4b3:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20d4ba:	00 
        if l2_table_opt.is_none() {
  20d4bb:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  20d4c2:	00 
  20d4c3:	e8 08 30 00 00       	callq  2104d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>
  20d4c8:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20d4cc:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20d4d0:	a8 01                	test   $0x1,%al
  20d4d2:	75 25                	jne    20d4f9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x1a9>
  20d4d4:	eb 00                	jmp    20d4d6 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x186>
        let l2_table = l2_table_opt.unwrap();
  20d4d6:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  20d4dd:	00 
  20d4de:	48 8d 35 2b a5 02 00 	lea    0x2a52b(%rip),%rsi        # 237a10 <memcmp+0x1460>
  20d4e5:	e8 06 2d 00 00       	callq  2101f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>
  20d4ea:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20d4ef:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20d4f6:	00 
  20d4f7:	eb 60                	jmp    20d559 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x209>
            return Err(PagingError::MappingError(page.addr().as_u64()));
  20d4f9:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20d4fe:	e8 2d eb ff ff       	callq  20c030 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20d503:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20d50a:	00 
  20d50b:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20d512:	00 
  20d513:	e8 e8 89 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20d518:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d51d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20d522:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20d529:	00 
  20d52a:	66 c7 84 24 d8 00 00 	movw   $0x4,0xd8(%rsp)
  20d531:	00 04 00 
  20d534:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20d53b:	00 
  20d53c:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20d543:	00 
  20d544:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20d54b:	00 
  20d54c:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20d553:	00 
  20d554:	e9 f7 fe ff ff       	jmpq   20d450 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
        let page_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  20d559:	48 8d bc 24 be 00 00 	lea    0xbe(%rsp),%rdi
  20d560:	00 
  20d561:	e8 6a ea ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d566:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d56b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d570:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d576:	0f 92 c0             	setb   %al
  20d579:	a8 01                	test   $0x1,%al
  20d57b:	75 02                	jne    20d57f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x22f>
  20d57d:	eb 24                	jmp    20d5a3 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x253>
  20d57f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d584:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20d589:	48 c1 e0 03          	shl    $0x3,%rax
  20d58d:	48 01 c7             	add    %rax,%rdi
  20d590:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  20d597:	00 
        if page_entry.is_mapped() {
  20d598:	e8 93 eb ff ff       	callq  20c130 <_ZN9r3_kernel2mm6paging9PageEntry9is_mapped17h18bcd28dee9d1775E>
  20d59d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d5a1:	eb 18                	jmp    20d5bb <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x26b>
  20d5a3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let page_entry: &PageEntry = &l2_table.entries[l2_index.as_usize()];
  20d5a8:	48 8d 15 79 a4 02 00 	lea    0x2a479(%rip),%rdx        # 237a28 <memcmp+0x1478>
  20d5af:	be 00 02 00 00       	mov    $0x200,%esi
  20d5b4:	e8 f7 5e 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d5b9:	0f 0b                	ud2    
  20d5bb:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        if page_entry.is_mapped() {
  20d5bf:	a8 01                	test   $0x1,%al
  20d5c1:	75 16                	jne    20d5d9 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x289>
  20d5c3:	eb 00                	jmp    20d5c5 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x275>
        l2_table.entries[l2_index.as_usize()].set_phy_frame(frame, flags);
  20d5c5:	48 8d bc 24 be 00 00 	lea    0xbe(%rsp),%rdi
  20d5cc:	00 
  20d5cd:	e8 fe e9 ff ff       	callq  20bfd0 <_ZN9r3_kernel2mm6paging14PageTableIndex8as_usize17h02dc4b376b162cbfE>
  20d5d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20d5d7:	eb 60                	jmp    20d639 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x2e9>
            return Err(PagingError::MappingError(page.addr().as_u64()));
  20d5d9:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20d5de:	e8 4d ea ff ff       	callq  20c030 <_ZN9r3_kernel2mm6paging4Page4addr17h9337b68f992923b8E>
  20d5e3:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20d5ea:	00 
  20d5eb:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20d5f2:	00 
  20d5f3:	e8 08 89 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20d5f8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d5fd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d602:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20d609:	00 
  20d60a:	66 c7 84 24 f0 00 00 	movw   $0x4,0xf0(%rsp)
  20d611:	00 04 00 
  20d614:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20d61b:	00 
  20d61c:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20d623:	00 
  20d624:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20d62b:	00 
  20d62c:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20d633:	00 
  20d634:	e9 17 fe ff ff       	jmpq   20d450 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
  20d639:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        l2_table.entries[l2_index.as_usize()].set_phy_frame(frame, flags);
  20d63e:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  20d644:	0f 92 c0             	setb   %al
  20d647:	a8 01                	test   $0x1,%al
  20d649:	75 02                	jne    20d64d <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x2fd>
  20d64b:	eb 32                	jmp    20d67f <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x32f>
  20d64d:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20d652:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d657:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20d65c:	48 c1 e0 03          	shl    $0x3,%rax
  20d660:	48 01 c7             	add    %rax,%rdi
  20d663:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20d668:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20d66f:	00 
  20d670:	48 8b b4 24 08 01 00 	mov    0x108(%rsp),%rsi
  20d677:	00 
  20d678:	e8 e3 eb ff ff       	callq  20c260 <_ZN9r3_kernel2mm6paging9PageEntry13set_phy_frame17h15fa22b15023e643E>
  20d67d:	eb 18                	jmp    20d697 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x347>
  20d67f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20d684:	48 8d 15 b5 a3 02 00 	lea    0x2a3b5(%rip),%rdx        # 237a40 <memcmp+0x1490>
  20d68b:	be 00 02 00 00       	mov    $0x200,%esi
  20d690:	e8 1b 5e 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20d695:	0f 0b                	ud2    
        Ok(())
  20d697:	66 c7 84 24 88 00 00 	movw   $0x7,0x88(%rsp)
  20d69e:	00 07 00 
    }
  20d6a1:	e9 aa fd ff ff       	jmpq   20d450 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE+0x100>
  20d6a6:	cc                   	int3   
  20d6a7:	cc                   	int3   
  20d6a8:	cc                   	int3   
  20d6a9:	cc                   	int3   
  20d6aa:	cc                   	int3   
  20d6ab:	cc                   	int3   
  20d6ac:	cc                   	int3   
  20d6ad:	cc                   	int3   
  20d6ae:	cc                   	int3   
  20d6af:	cc                   	int3   

000000000020d6b0 <_ZN9r3_kernel2mm6paging9PageRange3new17h47b633cb9e347323E>:
    pub fn new(start: mm::VirtualAddress, n: usize, size: PageSize) -> Self {
  20d6b0:	48 83 ec 18          	sub    $0x18,%rsp
  20d6b4:	48 89 f8             	mov    %rdi,%rax
  20d6b7:	48 89 34 24          	mov    %rsi,(%rsp)
  20d6bb:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20d6c0:	88 4c 24 17          	mov    %cl,0x17(%rsp)
        PageRange { start, n, size }
  20d6c4:	48 89 37             	mov    %rsi,(%rdi)
  20d6c7:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  20d6cb:	88 4f 10             	mov    %cl,0x10(%rdi)
    }
  20d6ce:	48 83 c4 18          	add    $0x18,%rsp
  20d6d2:	c3                   	retq   
  20d6d3:	cc                   	int3   
  20d6d4:	cc                   	int3   
  20d6d5:	cc                   	int3   
  20d6d6:	cc                   	int3   
  20d6d7:	cc                   	int3   
  20d6d8:	cc                   	int3   
  20d6d9:	cc                   	int3   
  20d6da:	cc                   	int3   
  20d6db:	cc                   	int3   
  20d6dc:	cc                   	int3   
  20d6dd:	cc                   	int3   
  20d6de:	cc                   	int3   
  20d6df:	cc                   	int3   

000000000020d6e0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>:
    pub fn new(page_range: PageRange) -> Self {
  20d6e0:	48 83 ec 18          	sub    $0x18,%rsp
  20d6e4:	48 89 f8             	mov    %rdi,%rax
            page_range,
  20d6e7:	48 8b 0e             	mov    (%rsi),%rcx
  20d6ea:	48 89 0c 24          	mov    %rcx,(%rsp)
  20d6ee:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  20d6f2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20d6f7:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  20d6fb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
        PageRangeIterator {
  20d700:	48 8b 0c 24          	mov    (%rsp),%rcx
  20d704:	48 89 0f             	mov    %rcx,(%rdi)
  20d707:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20d70c:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  20d710:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20d715:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  20d719:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
  20d720:	00 
    }
  20d721:	48 83 c4 18          	add    $0x18,%rsp
  20d725:	c3                   	retq   
  20d726:	cc                   	int3   
  20d727:	cc                   	int3   
  20d728:	cc                   	int3   
  20d729:	cc                   	int3   
  20d72a:	cc                   	int3   
  20d72b:	cc                   	int3   
  20d72c:	cc                   	int3   
  20d72d:	cc                   	int3   
  20d72e:	cc                   	int3   
  20d72f:	cc                   	int3   

000000000020d730 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E>:
    fn next(&mut self) -> Option<Self::Item> {
  20d730:	48 83 ec 78          	sub    $0x78,%rsp
  20d734:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20d739:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        if self.current >= self.page_range.n {
  20d73e:	48 8b 47 18          	mov    0x18(%rdi),%rax
  20d742:	48 3b 47 08          	cmp    0x8(%rdi),%rax
  20d746:	73 11                	jae    20d759 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x29>
  20d748:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20d74d:	e8 ae 87 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20d752:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d757:	eb 18                	jmp    20d771 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x41>
            return None;
  20d759:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20d760:	00 00 
    }
  20d762:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20d767:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  20d76c:	48 83 c4 78          	add    $0x78,%rsp
  20d770:	c3                   	retq   
  20d771:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20d776:	48 8b 47 18          	mov    0x18(%rdi),%rax
  20d77a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d77f:	48 83 c7 10          	add    $0x10,%rdi
  20d783:	e8 d8 e7 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  20d788:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20d78d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20d792:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20d797:	48 f7 e1             	mul    %rcx
  20d79a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d79f:	0f 90 c0             	seto   %al
  20d7a2:	a8 01                	test   $0x1,%al
  20d7a4:	75 1b                	jne    20d7c1 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x91>
  20d7a6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20d7ab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20d7b0:	48 01 c8             	add    %rcx,%rax
  20d7b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d7b8:	0f 92 c0             	setb   %al
  20d7bb:	a8 01                	test   $0x1,%al
  20d7bd:	75 2d                	jne    20d7ec <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xbc>
  20d7bf:	eb 1a                	jmp    20d7db <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xab>
  20d7c1:	48 8d 3d 78 30 ff ff 	lea    -0xcf88(%rip),%rdi        # 200840 <str.2>
  20d7c8:	48 8d 15 89 a2 02 00 	lea    0x2a289(%rip),%rdx        # 237a58 <memcmp+0x14a8>
  20d7cf:	be 21 00 00 00       	mov    $0x21,%esi
  20d7d4:	e8 87 5c 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d7d9:	0f 0b                	ud2    
  20d7db:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        let current_page = Page::from_address(mm::VirtualAddress::from_u64(
  20d7e0:	e8 2b 87 01 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  20d7e5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20d7ea:	eb 1a                	jmp    20d806 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0xd6>
            self.page_range.start.as_u64() + self.current as u64 * self.page_range.size.size(),
  20d7ec:	48 8d 3d 7d 2f ff ff 	lea    -0xd083(%rip),%rdi        # 200770 <str.0>
  20d7f3:	48 8d 15 76 a2 02 00 	lea    0x2a276(%rip),%rdx        # 237a70 <memcmp+0x14c0>
  20d7fa:	be 1c 00 00 00       	mov    $0x1c,%esi
  20d7ff:	e8 5c 5c 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d804:	0f 0b                	ud2    
  20d806:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        let current_page = Page::from_address(mm::VirtualAddress::from_u64(
  20d80b:	e8 d0 e7 ff ff       	callq  20bfe0 <_ZN9r3_kernel2mm6paging4Page12from_address17h3af72bb28e0481a7E>
  20d810:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20d815:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20d81a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d81f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        self.current += 1;
  20d824:	48 8b 40 18          	mov    0x18(%rax),%rax
  20d828:	48 83 c0 01          	add    $0x1,%rax
  20d82c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d831:	0f 92 c0             	setb   %al
  20d834:	a8 01                	test   $0x1,%al
  20d836:	75 30                	jne    20d868 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x138>
  20d838:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d83d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20d842:	48 89 48 18          	mov    %rcx,0x18(%rax)
        Some(current_page)
  20d846:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20d84b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20d850:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20d855:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20d85a:	48 c7 44 24 48 01 00 	movq   $0x1,0x48(%rsp)
  20d861:	00 00 
    }
  20d863:	e9 fa fe ff ff       	jmpq   20d762 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E+0x32>
        self.current += 1;
  20d868:	48 8d 3d 01 2f ff ff 	lea    -0xd0ff(%rip),%rdi        # 200770 <str.0>
  20d86f:	48 8d 15 12 a2 02 00 	lea    0x2a212(%rip),%rdx        # 237a88 <memcmp+0x14d8>
  20d876:	be 1c 00 00 00       	mov    $0x1c,%esi
  20d87b:	e8 e0 5b 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d880:	0f 0b                	ud2    
  20d882:	cc                   	int3   
  20d883:	cc                   	int3   
  20d884:	cc                   	int3   
  20d885:	cc                   	int3   
  20d886:	cc                   	int3   
  20d887:	cc                   	int3   
  20d888:	cc                   	int3   
  20d889:	cc                   	int3   
  20d88a:	cc                   	int3   
  20d88b:	cc                   	int3   
  20d88c:	cc                   	int3   
  20d88d:	cc                   	int3   
  20d88e:	cc                   	int3   
  20d88f:	cc                   	int3   

000000000020d890 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE>:
pub fn init_kernel_vmm() -> VirtualMemoryManager {
  20d890:	48 83 ec 38          	sub    $0x38,%rsp
  20d894:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20d899:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let phy_offset = BootProtocol::get_phy_offset();
  20d89e:	e8 0d a8 00 00       	callq  2180b0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  20d8a3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20d8a8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if phy_offset.is_none() {
  20d8ad:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d8b2:	e8 79 2c 00 00       	callq  210530 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  20d8b7:	88 44 24 17          	mov    %al,0x17(%rsp)
  20d8bb:	8a 44 24 17          	mov    0x17(%rsp),%al
  20d8bf:	a8 01                	test   $0x1,%al
  20d8c1:	75 1f                	jne    20d8e2 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x52>
  20d8c3:	eb 00                	jmp    20d8c5 <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x35>
    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  20d8c5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20d8ca:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20d8cf:	48 8d 15 e2 a1 02 00 	lea    0x2a1e2(%rip),%rdx        # 237ab8 <memcmp+0x1508>
  20d8d6:	e8 45 27 00 00       	callq  210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  20d8db:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d8e0:	eb 1a                	jmp    20d8fc <_ZN9r3_kernel2mm6paging15init_kernel_vmm17h387ef03e793b01eeE+0x6c>
        panic!("Boot protocol did not provide physical memory offset.");
  20d8e2:	48 8d 3d 78 2f ff ff 	lea    -0xd088(%rip),%rdi        # 200861 <str.2+0x21>
  20d8e9:	48 8d 15 b0 a1 02 00 	lea    0x2a1b0(%rip),%rdx        # 237aa0 <memcmp+0x14f0>
  20d8f0:	be 35 00 00 00       	mov    $0x35,%esi
  20d8f5:	e8 66 5b 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d8fa:	0f 0b                	ud2    
  20d8fc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20d901:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    VirtualMemoryManager::from_cr3(phy_offset.unwrap())
  20d906:	e8 95 ea ff ff       	callq  20c3a0 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager8from_cr317h72a0c0ae3945536cE>
  20d90b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  20d910:	48 83 c4 38          	add    $0x38,%rsp
  20d914:	c3                   	retq   
  20d915:	cc                   	int3   
  20d916:	cc                   	int3   
  20d917:	cc                   	int3   
  20d918:	cc                   	int3   
  20d919:	cc                   	int3   
  20d91a:	cc                   	int3   
  20d91b:	cc                   	int3   
  20d91c:	cc                   	int3   
  20d91d:	cc                   	int3   
  20d91e:	cc                   	int3   
  20d91f:	cc                   	int3   

000000000020d920 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE>:
}

pub fn setup_paging() {
  20d920:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    // this function will make static lazy function to initialize
    log::info!(
  20d927:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  20d92e:	00 00 
  20d930:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d935:	48 8d 35 fc 2c ff ff 	lea    -0xd304(%rip),%rsi        # 200638 <str.0+0x118>
  20d93c:	e8 af 41 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20d941:	88 44 24 27          	mov    %al,0x27(%rsp)
  20d945:	8a 44 24 27          	mov    0x27(%rsp),%al
  20d949:	a8 01                	test   $0x1,%al
  20d94b:	75 09                	jne    20d956 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x36>
  20d94d:	eb 00                	jmp    20d94f <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x2f>
  20d94f:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20d954:	eb 4e                	jmp    20d9a4 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x84>
  20d956:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  20d95d:	00 
  20d95e:	48 8b 3d ab d7 02 00 	mov    0x2d7ab(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20d965:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  20d96c:	00 
  20d96d:	e8 4e b3 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20d972:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20d979:	00 
  20d97a:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20d981:	00 
  20d982:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20d987:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d98c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  20d991:	e8 5a 41 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20d996:	88 44 24 26          	mov    %al,0x26(%rsp)
  20d99a:	8a 44 24 26          	mov    0x26(%rsp),%al
  20d99e:	24 01                	and    $0x1,%al
  20d9a0:	88 44 24 37          	mov    %al,0x37(%rsp)
  20d9a4:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20d9a9:	75 08                	jne    20d9b3 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x93>
        "Kernel paging is initialized, address at: 0x{:x}",
        KERNEL_PAGING.l4_virtual_address.as_u64()
    );
}
  20d9ab:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20d9b2:	c3                   	retq   
        KERNEL_PAGING.l4_virtual_address.as_u64()
  20d9b3:	48 8d 3d dc 2f ff ff 	lea    -0xd024(%rip),%rdi        # 200996 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20d9ba:	e8 21 0c 00 00       	callq  20e5e0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20d9bf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d9c4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20d9c9:	48 83 c7 08          	add    $0x8,%rdi
  20d9cd:	e8 2e 85 01 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  20d9d2:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20d9d9:	00 
    log::info!(
  20d9da:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  20d9e1:	00 
  20d9e2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20d9e9:	00 
  20d9ea:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  20d9f1:	00 
  20d9f2:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  20d9f9:	00 
  20d9fa:	48 8b 35 17 d7 02 00 	mov    0x2d717(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  20da01:	e8 3a 14 00 00       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  20da06:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20da0b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20da10:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20da15:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20da1a:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20da1f:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20da24:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  20da29:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20da2e:	48 8d 35 9b a0 02 00 	lea    0x2a09b(%rip),%rsi        # 237ad0 <memcmp+0x1520>
  20da35:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20da3b:	4c 89 c2             	mov    %r8,%rdx
  20da3e:	e8 7d 88 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20da43:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20da48:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20da4d:	48 8d 15 8c a0 02 00 	lea    0x2a08c(%rip),%rdx        # 237ae0 <memcmp+0x1530>
  20da54:	e8 97 2b 02 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20da59:	e9 4d ff ff ff       	jmpq   20d9ab <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE+0x8b>
  20da5e:	cc                   	int3   
  20da5f:	cc                   	int3   

000000000020da60 <_ZN9r3_kernel2mm6paging16get_kernel_table17h7f76f9d3055d33d3E>:

pub fn get_kernel_table() -> &'static VirtualMemoryManager {
  20da60:	50                   	push   %rax
    &KERNEL_PAGING
  20da61:	48 8d 3d 2e 2f ff ff 	lea    -0xd0d2(%rip),%rdi        # 200996 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20da68:	e8 73 0b 00 00       	callq  20e5e0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20da6d:	48 89 04 24          	mov    %rax,(%rsp)
  20da71:	48 8b 04 24          	mov    (%rsp),%rax
}
  20da75:	59                   	pop    %rcx
  20da76:	c3                   	retq   
  20da77:	cc                   	int3   
  20da78:	cc                   	int3   
  20da79:	cc                   	int3   
  20da7a:	cc                   	int3   
  20da7b:	cc                   	int3   
  20da7c:	cc                   	int3   
  20da7d:	cc                   	int3   
  20da7e:	cc                   	int3   
  20da7f:	cc                   	int3   

000000000020da80 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E>:

        // return the iterator
        Ok(PageRangeIterator::new(region))
    }

    pub fn alloc_huge_page_region(
  20da80:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  20da87:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20da8c:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20da91:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20da96:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20da9b:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  20daa2:	00 
        region: PageRange,
        flags: PageEntryFlags,
    ) -> Result<PageRangeIterator, PagingError> {
        let range_iterator = PageRangeIterator::new(region.clone());
  20daa3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20daa8:	e8 73 08 00 00       	callq  20e320 <_ZN71_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..clone..Clone$GT$5clone17h9fd30caad970ce48E>
  20daad:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20dab2:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  20dab7:	e8 24 fc ff ff       	callq  20d6e0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>

        for page in range_iterator {
  20dabc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20dac1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20dac8:	00 
  20dac9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20dace:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20dad5:	00 
  20dad6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20dadb:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20dae2:	00 
  20dae3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20dae8:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20daef:	00 
  20daf0:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  20daf5:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  20dafc:	00 
  20dafd:	e8 3e 5b 00 00       	callq  213640 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4c4b5ea2e2ac9d28E>
  20db02:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20db07:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20db0e:	00 
  20db0f:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20db14:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20db1b:	00 
  20db1c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20db23:	00 
  20db24:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20db2b:	00 
  20db2c:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20db33:	00 
  20db34:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20db3b:	00 
  20db3c:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  20db43:	00 
  20db44:	e8 e7 fb ff ff       	callq  20d730 <_ZN99_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hde3d6409deb49841E>
  20db49:	48 89 94 24 b8 01 00 	mov    %rdx,0x1b8(%rsp)
  20db50:	00 
  20db51:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  20db58:	00 
  20db59:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  20db60:	00 
  20db61:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20db68:	00 
  20db69:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  20db70:	00 
  20db71:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20db78:	00 
  20db79:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20db80:	00 
  20db81:	48 85 c0             	test   %rax,%rax
  20db84:	74 06                	je     20db8c <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x10c>
  20db86:	eb 00                	jmp    20db88 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x108>
  20db88:	eb 0c                	jmp    20db96 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x116>
  20db8a:	0f 0b                	ud2    
            if result.is_err() {
                return Err(result.unwrap_err());
            }
        }

        mmu::reload_flush();
  20db8c:	e8 cf 61 00 00       	callq  213d60 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>
  20db91:	e9 44 02 00 00       	jmpq   20ddda <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x35a>
        for page in range_iterator {
  20db96:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20db9d:	00 
  20db9e:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20dba5:	00 
  20dba6:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  20dbad:	00 
  20dbae:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20dbb5:	00 
  20dbb6:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20dbbd:	00 
  20dbbe:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20dbc5:	00 
  20dbc6:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20dbcd:	00 
  20dbce:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20dbd5:	00 
            let frame_opt = PhysicalMemoryManager::alloc_huge_page();
  20dbd6:	e8 55 9a 00 00       	callq  217630 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE>
  20dbdb:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  20dbe2:	00 
  20dbe3:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  20dbea:	00 
  20dbeb:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  20dbf2:	00 
  20dbf3:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20dbfa:	00 
  20dbfb:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  20dc02:	00 
  20dc03:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20dc0a:	00 
            if frame_opt.is_none() {
  20dc0b:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  20dc12:	00 
  20dc13:	e8 d8 29 00 00       	callq  2105f0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>
  20dc18:	88 44 24 17          	mov    %al,0x17(%rsp)
  20dc1c:	8a 44 24 17          	mov    0x17(%rsp),%al
  20dc20:	a8 01                	test   $0x1,%al
  20dc22:	75 15                	jne    20dc39 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1b9>
  20dc24:	eb 00                	jmp    20dc26 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1a6>
            let result = KERNEL_PAGING.map_huge_page(page, frame_opt.unwrap(), flags);
  20dc26:	48 8d 3d 69 2d ff ff 	lea    -0xd297(%rip),%rdi        # 200996 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE>
  20dc2d:	e8 ae 09 00 00       	callq  20e5e0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>
  20dc32:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20dc37:	eb 3b                	jmp    20dc74 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1f4>
  20dc39:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                return Err(PagingError::OOM);
  20dc3e:	66 c7 84 24 10 01 00 	movw   $0x0,0x110(%rsp)
  20dc45:	00 00 00 
  20dc48:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  20dc4f:	00 
  20dc50:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20dc54:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  20dc5b:	00 
  20dc5c:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20dc60:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20dc67:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

        Ok(PageRangeIterator::new(region))
    }
  20dc6c:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  20dc73:	c3                   	retq   
            let result = KERNEL_PAGING.map_huge_page(page, frame_opt.unwrap(), flags);
  20dc74:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20dc7b:	00 
  20dc7c:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  20dc83:	00 
  20dc84:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20dc8b:	00 
  20dc8c:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  20dc93:	00 
  20dc94:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  20dc9b:	00 
  20dc9c:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  20dca3:	00 
  20dca4:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  20dcab:	00 
  20dcac:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  20dcb3:	00 
  20dcb4:	48 8d 15 5d 9e 02 00 	lea    0x29e5d(%rip),%rdx        # 237b18 <memcmp+0x1568>
  20dcbb:	e8 50 24 00 00       	callq  210110 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>
  20dcc0:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  20dcc7:	00 
  20dcc8:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  20dccf:	00 
  20dcd0:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20dcd7:	00 
  20dcd8:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20dcdd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20dce2:	48 8b b4 24 30 01 00 	mov    0x130(%rsp),%rsi
  20dce9:	00 
  20dcea:	48 8b 94 24 38 01 00 	mov    0x138(%rsp),%rdx
  20dcf1:	00 
  20dcf2:	e8 59 f6 ff ff       	callq  20d350 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager13map_huge_page17h8cee93fccbf2c8beE>
  20dcf7:	48 89 94 24 e0 01 00 	mov    %rdx,0x1e0(%rsp)
  20dcfe:	00 
  20dcff:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  20dd06:	00 
  20dd07:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  20dd0e:	00 
  20dd0f:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20dd16:	00 
  20dd17:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  20dd1e:	00 
  20dd1f:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20dd26:	00 
            if result.is_err() {
  20dd27:	48 8d bc 24 20 01 00 	lea    0x120(%rsp),%rdi
  20dd2e:	00 
  20dd2f:	e8 9c ce ff ff       	callq  20abd0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h4800f947d095df67E>
  20dd34:	88 44 24 07          	mov    %al,0x7(%rsp)
  20dd38:	8a 44 24 07          	mov    0x7(%rsp),%al
  20dd3c:	a8 01                	test   $0x1,%al
  20dd3e:	75 05                	jne    20dd45 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x2c5>
  20dd40:	e9 f7 fd ff ff       	jmpq   20db3c <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0xbc>
                return Err(result.unwrap_err());
  20dd45:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  20dd4c:	00 
  20dd4d:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  20dd54:	00 
  20dd55:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  20dd5c:	00 
  20dd5d:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  20dd64:	00 
  20dd65:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  20dd6c:	00 
  20dd6d:	48 8b b4 24 68 01 00 	mov    0x168(%rsp),%rsi
  20dd74:	00 
  20dd75:	48 8d 15 b4 9d 02 00 	lea    0x29db4(%rip),%rdx        # 237b30 <memcmp+0x1580>
  20dd7c:	e8 1f cc ff ff       	callq  20a9a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hbb5d250649e12fb2E>
  20dd81:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  20dd88:	00 
  20dd89:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  20dd90:	00 
  20dd91:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  20dd98:	00 
  20dd99:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  20dda0:	00 
  20dda1:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  20dda8:	00 
  20dda9:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  20ddb0:	00 
  20ddb1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20ddb6:	48 8b 8c 24 50 01 00 	mov    0x150(%rsp),%rcx
  20ddbd:	00 
  20ddbe:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20ddc2:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  20ddc9:	00 
  20ddca:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20ddce:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20ddd5:	e9 8d fe ff ff       	jmpq   20dc67 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1e7>
  20ddda:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        Ok(PageRangeIterator::new(region))
  20dddf:	48 8b 08             	mov    (%rax),%rcx
  20dde2:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  20dde9:	00 
  20ddea:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20ddee:	48 89 8c 24 98 01 00 	mov    %rcx,0x198(%rsp)
  20ddf5:	00 
  20ddf6:	48 8b 40 10          	mov    0x10(%rax),%rax
  20ddfa:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  20de01:	00 
  20de02:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  20de09:	00 
  20de0a:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  20de11:	00 
  20de12:	e8 c9 f8 ff ff       	callq  20d6e0 <_ZN9r3_kernel2mm6paging17PageRangeIterator3new17hf9e64f88a88a4c28E>
  20de17:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20de1c:	48 8b 8c 24 70 01 00 	mov    0x170(%rsp),%rcx
  20de23:	00 
  20de24:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20de28:	48 8b 8c 24 78 01 00 	mov    0x178(%rsp),%rcx
  20de2f:	00 
  20de30:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20de34:	48 8b 8c 24 80 01 00 	mov    0x180(%rsp),%rcx
  20de3b:	00 
  20de3c:	48 89 48 18          	mov    %rcx,0x18(%rax)
  20de40:	48 8b 8c 24 88 01 00 	mov    0x188(%rsp),%rcx
  20de47:	00 
  20de48:	48 89 48 20          	mov    %rcx,0x20(%rax)
  20de4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  20de53:	e9 0f fe ff ff       	jmpq   20dc67 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E+0x1e7>
  20de58:	cc                   	int3   
  20de59:	cc                   	int3   
  20de5a:	cc                   	int3   
  20de5b:	cc                   	int3   
  20de5c:	cc                   	int3   
  20de5d:	cc                   	int3   
  20de5e:	cc                   	int3   
  20de5f:	cc                   	int3   

000000000020de60 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>:
#[derive(Debug)]
  20de60:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
  20de67:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20de6c:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  20de73:	00 
  20de74:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  20de7b:	00 
  20de7c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20de81:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20de86:	0f b7 00             	movzwl (%rax),%eax
  20de89:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20de8e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20de93:	48 8d 0d 02 27 ff ff 	lea    -0xd8fe(%rip),%rcx        # 20059c <str.0+0x7c>
  20de9a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20de9e:	48 01 c8             	add    %rcx,%rax
  20dea1:	ff e0                	jmpq   *%rax
  20dea3:	0f 0b                	ud2    
  20dea5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20deaa:	48 8d 35 4b 2a ff ff 	lea    -0xd5b5(%rip),%rsi        # 2008fc <str.2+0xbc>
  20deb1:	ba 03 00 00 00       	mov    $0x3,%edx
  20deb6:	e8 65 78 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20debb:	24 01                	and    $0x1,%al
  20debd:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20dec1:	e9 7d 01 00 00       	jmpq   20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20dec6:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20decb:	48 8d 35 18 2a ff ff 	lea    -0xd5e8(%rip),%rsi        # 2008ea <str.2+0xaa>
  20ded2:	ba 12 00 00 00       	mov    $0x12,%edx
  20ded7:	e8 44 78 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20dedc:	24 01                	and    $0x1,%al
  20dede:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20dee2:	e9 5c 01 00 00       	jmpq   20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20dee7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    OutOfBoundsIndex(u16),
  20deec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20def1:	48 83 c0 02          	add    $0x2,%rax
  20def5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20defa:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  20df01:	00 
#[derive(Debug)]
  20df02:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20df07:	48 8d 15 8a 27 ff ff 	lea    -0xd876(%rip),%rdx        # 200698 <str.0+0x178>
  20df0e:	b9 10 00 00 00       	mov    $0x10,%ecx
  20df13:	e8 78 78 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20df18:	e9 1e 02 00 00       	jmpq   20e13b <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x2db>
  20df1d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    UnalignedAddress(u64),
  20df22:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20df27:	48 83 c0 08          	add    $0x8,%rax
  20df2b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20df30:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  20df37:	00 
#[derive(Debug)]
  20df38:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20df3d:	48 8d 15 d4 27 ff ff 	lea    -0xd82c(%rip),%rdx        # 200718 <str.0+0x1f8>
  20df44:	b9 10 00 00 00       	mov    $0x10,%ecx
  20df49:	e8 42 78 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20df4e:	e9 a0 01 00 00       	jmpq   20e0f3 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x293>
  20df53:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    MappingError(u64),
  20df58:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20df5d:	48 83 c0 08          	add    $0x8,%rax
  20df61:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20df66:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  20df6d:	00 
#[derive(Debug)]
  20df6e:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20df75:	00 
  20df76:	48 8d 15 61 29 ff ff 	lea    -0xd69f(%rip),%rdx        # 2008de <str.2+0x9e>
  20df7d:	b9 0c 00 00 00       	mov    $0xc,%ecx
  20df82:	e8 09 78 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20df87:	e9 16 01 00 00       	jmpq   20e0a2 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x242>
  20df8c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    IsAlreadyMapped(u64),
  20df91:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20df96:	48 83 c0 08          	add    $0x8,%rax
  20df9a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20df9f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20dfa6:	00 
#[derive(Debug)]
  20dfa7:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20dfae:	00 
  20dfaf:	48 8d 15 19 29 ff ff 	lea    -0xd6e7(%rip),%rdx        # 2008cf <str.2+0x8f>
  20dfb6:	b9 0f 00 00 00       	mov    $0xf,%ecx
  20dfbb:	e8 d0 77 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20dfc0:	e9 8f 00 00 00       	jmpq   20e054 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1f4>
  20dfc5:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    PageNotMapped(u64),
  20dfca:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20dfcf:	48 83 c0 08          	add    $0x8,%rax
  20dfd3:	48 89 04 24          	mov    %rax,(%rsp)
  20dfd7:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20dfde:	00 
#[derive(Debug)]
  20dfdf:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20dfe6:	00 
  20dfe7:	48 8d 15 d4 28 ff ff 	lea    -0xd72c(%rip),%rdx        # 2008c2 <str.2+0x82>
  20dfee:	b9 0d 00 00 00       	mov    $0xd,%ecx
  20dff3:	e8 98 77 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20dff8:	48 8b 04 24          	mov    (%rsp),%rax
  20dffc:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  20e003:	00 
  20e004:	48 89 8c 24 00 01 00 	mov    %rcx,0x100(%rsp)
  20e00b:	00 
    PageNotMapped(u64),
  20e00c:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20e013:	00 
  20e014:	48 8d b4 24 e0 00 00 	lea    0xe0(%rsp),%rsi
  20e01b:	00 
#[derive(Debug)]
  20e01c:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20e023:	00 
  20e024:	48 8d 15 1d 9b 02 00 	lea    0x29b1d(%rip),%rdx        # 237b48 <memcmp+0x1598>
  20e02b:	e8 e0 4c 02 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e030:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  20e037:	00 
  20e038:	e8 43 4e 02 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e03d:	24 01                	and    $0x1,%al
  20e03f:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e043:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  20e047:	24 01                	and    $0x1,%al
  20e049:	0f b6 c0             	movzbl %al,%eax
  20e04c:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  20e053:	c3                   	retq   
  20e054:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e059:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  20e060:	00 
  20e061:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  20e068:	00 
    IsAlreadyMapped(u64),
  20e069:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20e070:	00 
  20e071:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  20e078:	00 
#[derive(Debug)]
  20e079:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20e080:	00 
  20e081:	48 8d 15 c0 9a 02 00 	lea    0x29ac0(%rip),%rdx        # 237b48 <memcmp+0x1598>
  20e088:	e8 83 4c 02 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e08d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20e094:	00 
  20e095:	e8 e6 4d 02 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e09a:	24 01                	and    $0x1,%al
  20e09c:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e0a0:	eb a1                	jmp    20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e0a2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e0a7:	48 8d 8c 24 88 00 00 	lea    0x88(%rsp),%rcx
  20e0ae:	00 
  20e0af:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  20e0b6:	00 
    MappingError(u64),
  20e0b7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20e0be:	00 
  20e0bf:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  20e0c6:	00 
#[derive(Debug)]
  20e0c7:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20e0ce:	00 
  20e0cf:	48 8d 15 72 9a 02 00 	lea    0x29a72(%rip),%rdx        # 237b48 <memcmp+0x1598>
  20e0d6:	e8 35 4c 02 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e0db:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20e0e2:	00 
  20e0e3:	e8 98 4d 02 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e0e8:	24 01                	and    $0x1,%al
  20e0ea:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e0ee:	e9 50 ff ff ff       	jmpq   20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e0f3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e0f8:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  20e0fd:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  20e104:	00 
    UnalignedAddress(u64),
  20e105:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20e10c:	00 
  20e10d:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  20e114:	00 
#[derive(Debug)]
  20e115:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20e11a:	48 8d 15 27 9a 02 00 	lea    0x29a27(%rip),%rdx        # 237b48 <memcmp+0x1598>
  20e121:	e8 ea 4b 02 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e126:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  20e12b:	e8 50 4d 02 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e130:	24 01                	and    $0x1,%al
  20e132:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e136:	e9 08 ff ff ff       	jmpq   20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e13b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20e140:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  20e145:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  20e14c:	00 
    OutOfBoundsIndex(u16),
  20e14d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20e152:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
#[derive(Debug)]
  20e157:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e15c:	48 8d 15 05 9a 02 00 	lea    0x29a05(%rip),%rdx        # 237b68 <memcmp+0x15b8>
  20e163:	e8 a8 4b 02 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20e168:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e16d:	e8 0e 4d 02 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20e172:	24 01                	and    $0x1,%al
  20e174:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20e178:	e9 c6 fe ff ff       	jmpq   20e043 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE+0x1e3>
  20e17d:	cc                   	int3   
  20e17e:	cc                   	int3   
  20e17f:	cc                   	int3   

000000000020e180 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE>:
#[derive(Debug, Clone)]
  20e180:	48 83 ec 38          	sub    $0x38,%rsp
  20e184:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20e189:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e18e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20e193:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20e198:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20e19d:	0f b6 00             	movzbl (%rax),%eax
  20e1a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e1a5:	48 85 c0             	test   %rax,%rax
  20e1a8:	74 13                	je     20e1bd <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x3d>
  20e1aa:	eb 00                	jmp    20e1ac <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x2c>
  20e1ac:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e1b1:	48 83 e8 01          	sub    $0x1,%rax
  20e1b5:	74 24                	je     20e1db <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x5b>
  20e1b7:	eb 00                	jmp    20e1b9 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x39>
  20e1b9:	eb 3e                	jmp    20e1f9 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x79>
  20e1bb:	0f 0b                	ud2    
  20e1bd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e1c2:	48 8d 35 27 24 ff ff 	lea    -0xdbd9(%rip),%rsi        # 2005f0 <str.0+0xd0>
  20e1c9:	ba 08 00 00 00       	mov    $0x8,%edx
  20e1ce:	e8 4d 75 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e1d3:	24 01                	and    $0x1,%al
  20e1d5:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e1d9:	eb 3a                	jmp    20e215 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x95>
  20e1db:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e1e0:	48 8d 35 01 24 ff ff 	lea    -0xdbff(%rip),%rsi        # 2005e8 <str.0+0xc8>
  20e1e7:	ba 08 00 00 00       	mov    $0x8,%edx
  20e1ec:	e8 2f 75 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e1f1:	24 01                	and    $0x1,%al
  20e1f3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e1f7:	eb 1c                	jmp    20e215 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE+0x95>
  20e1f9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e1fe:	48 8d 35 4b 24 ff ff 	lea    -0xdbb5(%rip),%rsi        # 200650 <str.0+0x130>
  20e205:	ba 08 00 00 00       	mov    $0x8,%edx
  20e20a:	e8 11 75 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e20f:	24 01                	and    $0x1,%al
  20e211:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e215:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20e219:	24 01                	and    $0x1,%al
  20e21b:	0f b6 c0             	movzbl %al,%eax
  20e21e:	48 83 c4 38          	add    $0x38,%rsp
  20e222:	c3                   	retq   
  20e223:	cc                   	int3   
  20e224:	cc                   	int3   
  20e225:	cc                   	int3   
  20e226:	cc                   	int3   
  20e227:	cc                   	int3   
  20e228:	cc                   	int3   
  20e229:	cc                   	int3   
  20e22a:	cc                   	int3   
  20e22b:	cc                   	int3   
  20e22c:	cc                   	int3   
  20e22d:	cc                   	int3   
  20e22e:	cc                   	int3   
  20e22f:	cc                   	int3   

000000000020e230 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE>:
  20e230:	48 83 ec 20          	sub    $0x20,%rsp
  20e234:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e239:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e23e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e243:	0f b6 00             	movzbl (%rax),%eax
  20e246:	48 89 04 24          	mov    %rax,(%rsp)
  20e24a:	48 85 c0             	test   %rax,%rax
  20e24d:	74 12                	je     20e261 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x31>
  20e24f:	eb 00                	jmp    20e251 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x21>
  20e251:	48 8b 04 24          	mov    (%rsp),%rax
  20e255:	48 83 e8 01          	sub    $0x1,%rax
  20e259:	74 0d                	je     20e268 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x38>
  20e25b:	eb 00                	jmp    20e25d <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x2d>
  20e25d:	eb 10                	jmp    20e26f <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x3f>
  20e25f:	0f 0b                	ud2    
  20e261:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  20e266:	eb 0c                	jmp    20e274 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x44>
  20e268:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20e26d:	eb 05                	jmp    20e274 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE+0x44>
  20e26f:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  20e274:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e278:	48 83 c4 20          	add    $0x20,%rsp
  20e27c:	c3                   	retq   
  20e27d:	cc                   	int3   
  20e27e:	cc                   	int3   
  20e27f:	cc                   	int3   

000000000020e280 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17h1fac2bbdf4c0d6e2E>:
                Self { bits: 0 }
            }

            /// Returns the set containing all flags.
            #[inline]
            pub const fn all() -> Self {
  20e280:	50                   	push   %rax
                __impl_all_bitflags! {
  20e281:	48 b8 ff 01 00 00 00 	movabs $0x80000000000001ff,%rax
  20e288:	00 00 80 
  20e28b:	48 89 04 24          	mov    %rax,(%rsp)
                            $(#[$attr $($args)*])*
                            $Flag = $value;
                        )*
                    }
                }
            }
  20e28f:	48 8b 04 24          	mov    (%rsp),%rax
  20e293:	59                   	pop    %rcx
  20e294:	c3                   	retq   
  20e295:	cc                   	int3   
  20e296:	cc                   	int3   
  20e297:	cc                   	int3   
  20e298:	cc                   	int3   
  20e299:	cc                   	int3   
  20e29a:	cc                   	int3   
  20e29b:	cc                   	int3   
  20e29c:	cc                   	int3   
  20e29d:	cc                   	int3   
  20e29e:	cc                   	int3   
  20e29f:	cc                   	int3   

000000000020e2a0 <_ZN9r3_kernel2mm6paging14PageEntryFlags4bits17h42fab1082eb4aabbE>:

            /// Returns the raw value of the flags currently stored.
            #[inline]
            pub const fn bits(&self) -> $T {
  20e2a0:	50                   	push   %rax
  20e2a1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  20e2a5:	48 8b 07             	mov    (%rdi),%rax
            }
  20e2a8:	59                   	pop    %rcx
  20e2a9:	c3                   	retq   
  20e2aa:	cc                   	int3   
  20e2ab:	cc                   	int3   
  20e2ac:	cc                   	int3   
  20e2ad:	cc                   	int3   
  20e2ae:	cc                   	int3   
  20e2af:	cc                   	int3   

000000000020e2b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags18from_bits_truncate17hae959402b9b8ec66E>:
            }

            /// Convert from underlying bit representation, dropping any bits
            /// that do not correspond to flags.
            #[inline]
            pub const fn from_bits_truncate(bits: $T) -> Self {
  20e2b0:	48 83 ec 28          	sub    $0x28,%rsp
  20e2b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e2b9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                Self { bits: bits & Self::all().bits }
  20e2be:	e8 bd ff ff ff       	callq  20e280 <_ZN9r3_kernel2mm6paging14PageEntryFlags3all17h1fac2bbdf4c0d6e2E>
  20e2c3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e2c8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20e2cd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e2d2:	48 21 c8             	and    %rcx,%rax
  20e2d5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
            }
  20e2da:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e2df:	48 83 c4 28          	add    $0x28,%rsp
  20e2e3:	c3                   	retq   
  20e2e4:	cc                   	int3   
  20e2e5:	cc                   	int3   
  20e2e6:	cc                   	int3   
  20e2e7:	cc                   	int3   
  20e2e8:	cc                   	int3   
  20e2e9:	cc                   	int3   
  20e2ea:	cc                   	int3   
  20e2eb:	cc                   	int3   
  20e2ec:	cc                   	int3   
  20e2ed:	cc                   	int3   
  20e2ee:	cc                   	int3   
  20e2ef:	cc                   	int3   

000000000020e2f0 <_ZN9r3_kernel2mm6paging14PageEntryFlags8contains17hd3ff2771bf260abaE>:
                !(Self { bits: self.bits & other.bits}).is_empty()
            }

            /// Returns `true` if all of the flags in `other` are contained within `self`.
            #[inline]
            pub const fn contains(&self, other: Self) -> bool {
  20e2f0:	48 83 ec 10          	sub    $0x10,%rsp
  20e2f4:	48 89 f0             	mov    %rsi,%rax
  20e2f7:	48 89 3c 24          	mov    %rdi,(%rsp)
  20e2fb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
                (self.bits & other.bits) == other.bits
  20e300:	48 89 c6             	mov    %rax,%rsi
  20e303:	48 23 37             	and    (%rdi),%rsi
  20e306:	48 39 c6             	cmp    %rax,%rsi
  20e309:	0f 94 c0             	sete   %al
            }
  20e30c:	24 01                	and    $0x1,%al
  20e30e:	0f b6 c0             	movzbl %al,%eax
  20e311:	48 83 c4 10          	add    $0x10,%rsp
  20e315:	c3                   	retq   
  20e316:	cc                   	int3   
  20e317:	cc                   	int3   
  20e318:	cc                   	int3   
  20e319:	cc                   	int3   
  20e31a:	cc                   	int3   
  20e31b:	cc                   	int3   
  20e31c:	cc                   	int3   
  20e31d:	cc                   	int3   
  20e31e:	cc                   	int3   
  20e31f:	cc                   	int3   

000000000020e320 <_ZN71_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..clone..Clone$GT$5clone17h9fd30caad970ce48E>:
#[derive(Clone, Debug)]
  20e320:	48 83 ec 58          	sub    $0x58,%rsp
  20e324:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e329:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e32e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
    pub start: mm::VirtualAddress,
  20e333:	48 89 f7             	mov    %rsi,%rdi
  20e336:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
    pub n: usize,
  20e33b:	48 89 f0             	mov    %rsi,%rax
  20e33e:	48 83 c0 08          	add    $0x8,%rax
  20e342:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20e347:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    pub size: PageSize,
  20e34c:	48 83 c6 10          	add    $0x10,%rsi
  20e350:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20e355:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
    pub start: mm::VirtualAddress,
  20e35a:	e8 41 88 01 00       	callq  226ba0 <_ZN68_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..clone..Clone$GT$5clone17h4032ae80f4183b4aE>
  20e35f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e364:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    pub n: usize,
  20e369:	e8 12 12 01 00       	callq  21f580 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>
  20e36e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e373:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    pub size: PageSize,
  20e378:	e8 b3 fe ff ff       	callq  20e230 <_ZN70_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..clone..Clone$GT$5clone17hd1e6f4fd73b9e4faE>
  20e37d:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e381:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e386:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20e38b:	8a 54 24 07          	mov    0x7(%rsp),%dl
  20e38f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20e394:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
#[derive(Clone, Debug)]
  20e399:	48 89 39             	mov    %rdi,(%rcx)
  20e39c:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20e3a0:	88 51 10             	mov    %dl,0x10(%rcx)
  20e3a3:	48 83 c4 58          	add    $0x58,%rsp
  20e3a7:	c3                   	retq   
  20e3a8:	cc                   	int3   
  20e3a9:	cc                   	int3   
  20e3aa:	cc                   	int3   
  20e3ab:	cc                   	int3   
  20e3ac:	cc                   	int3   
  20e3ad:	cc                   	int3   
  20e3ae:	cc                   	int3   
  20e3af:	cc                   	int3   

000000000020e3b0 <_ZN69_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..fmt..Debug$GT$3fmt17h063c54f93d0e7a84E>:
  20e3b0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  20e3b7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20e3bc:	48 89 f8             	mov    %rdi,%rax
  20e3bf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20e3c4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20e3c9:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: mm::VirtualAddress,
  20e3ce:	48 89 c1             	mov    %rax,%rcx
  20e3d1:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e3d6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub n: usize,
  20e3db:	48 89 c1             	mov    %rax,%rcx
  20e3de:	48 83 c1 08          	add    $0x8,%rcx
  20e3e2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20e3e7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub size: PageSize,
  20e3ec:	48 83 c0 10          	add    $0x10,%rax
  20e3f0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20e3f5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Clone, Debug)]
  20e3fa:	48 8d 35 fe 24 ff ff 	lea    -0xdb02(%rip),%rsi        # 2008ff <str.2+0xbf>
  20e401:	ba 09 00 00 00       	mov    $0x9,%edx
  20e406:	e8 65 73 02 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  20e40b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20e412:	00 
  20e413:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20e41a:	00 
  20e41b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20e422:	00 
  20e423:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e428:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20e42f:	00 
  20e430:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20e435:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e43a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  20e43f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20e446:	00 
    pub start: mm::VirtualAddress,
  20e447:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e44c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Clone, Debug)]
  20e451:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20e456:	48 8d 35 ab 24 ff ff 	lea    -0xdb55(%rip),%rsi        # 200908 <str.2+0xc8>
  20e45d:	ba 05 00 00 00       	mov    $0x5,%edx
  20e462:	4c 8d 05 1f 97 02 00 	lea    0x2971f(%rip),%r8        # 237b88 <memcmp+0x15d8>
  20e469:	e8 92 46 02 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20e46e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub n: usize,
  20e473:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20e478:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Clone, Debug)]
  20e47d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20e482:	48 8d 35 84 24 ff ff 	lea    -0xdb7c(%rip),%rsi        # 20090d <str.2+0xcd>
  20e489:	ba 01 00 00 00       	mov    $0x1,%edx
  20e48e:	4c 8d 05 13 97 02 00 	lea    0x29713(%rip),%r8        # 237ba8 <memcmp+0x15f8>
  20e495:	e8 66 46 02 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20e49a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub size: PageSize,
  20e49f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20e4a4:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Clone, Debug)]
  20e4a9:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20e4ae:	48 8d 35 63 24 ff ff 	lea    -0xdb9d(%rip),%rsi        # 200918 <str.2+0xd8>
  20e4b5:	ba 04 00 00 00       	mov    $0x4,%edx
  20e4ba:	4c 8d 05 07 97 02 00 	lea    0x29707(%rip),%r8        # 237bc8 <memcmp+0x1618>
  20e4c1:	e8 3a 46 02 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20e4c6:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20e4cb:	e8 f0 47 02 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  20e4d0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e4d4:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20e4d8:	24 01                	and    $0x1,%al
  20e4da:	0f b6 c0             	movzbl %al,%eax
  20e4dd:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  20e4e4:	c3                   	retq   
  20e4e5:	cc                   	int3   
  20e4e6:	cc                   	int3   
  20e4e7:	cc                   	int3   
  20e4e8:	cc                   	int3   
  20e4e9:	cc                   	int3   
  20e4ea:	cc                   	int3   
  20e4eb:	cc                   	int3   
  20e4ec:	cc                   	int3   
  20e4ed:	cc                   	int3   
  20e4ee:	cc                   	int3   
  20e4ef:	cc                   	int3   

000000000020e4f0 <_ZN77_$LT$r3_kernel..mm..paging..PageRangeIterator$u20$as$u20$core..fmt..Debug$GT$3fmt17hb7c92e24f629fa2bE>:
#[derive(Debug)]
  20e4f0:	48 83 ec 78          	sub    $0x78,%rsp
  20e4f4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20e4f9:	48 89 f8             	mov    %rdi,%rax
  20e4fc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e501:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e506:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub page_range: PageRange,
  20e50b:	48 89 c1             	mov    %rax,%rcx
  20e50e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20e513:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    pub current: usize,
  20e518:	48 83 c0 18          	add    $0x18,%rax
  20e51c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20e521:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug)]
  20e526:	48 8d 35 47 24 ff ff 	lea    -0xdbb9(%rip),%rsi        # 200974 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x3c>
  20e52d:	ba 11 00 00 00       	mov    $0x11,%edx
  20e532:	e8 39 72 02 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  20e537:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  20e53c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20e541:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20e546:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20e54b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20e550:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20e555:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e55a:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
  20e55f:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub page_range: PageRange,
  20e564:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e569:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug)]
  20e56e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20e573:	48 8d 35 0b 24 ff ff 	lea    -0xdbf5(%rip),%rsi        # 200985 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4d>
  20e57a:	ba 0a 00 00 00       	mov    $0xa,%edx
  20e57f:	4c 8d 05 62 96 02 00 	lea    0x29662(%rip),%r8        # 237be8 <memcmp+0x1638>
  20e586:	e8 75 45 02 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20e58b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    pub current: usize,
  20e590:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20e595:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug)]
  20e59a:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20e59f:	48 8d 35 e9 23 ff ff 	lea    -0xdc17(%rip),%rsi        # 20098f <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x57>
  20e5a6:	ba 07 00 00 00       	mov    $0x7,%edx
  20e5ab:	4c 8d 05 f6 95 02 00 	lea    0x295f6(%rip),%r8        # 237ba8 <memcmp+0x15f8>
  20e5b2:	e8 49 45 02 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20e5b7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20e5bc:	e8 ff 46 02 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  20e5c1:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e5c5:	8a 44 24 07          	mov    0x7(%rsp),%al
  20e5c9:	24 01                	and    $0x1,%al
  20e5cb:	0f b6 c0             	movzbl %al,%eax
  20e5ce:	48 83 c4 78          	add    $0x78,%rsp
  20e5d2:	c3                   	retq   
  20e5d3:	cc                   	int3   
  20e5d4:	cc                   	int3   
  20e5d5:	cc                   	int3   
  20e5d6:	cc                   	int3   
  20e5d7:	cc                   	int3   
  20e5d8:	cc                   	int3   
  20e5d9:	cc                   	int3   
  20e5da:	cc                   	int3   
  20e5db:	cc                   	int3   
  20e5dc:	cc                   	int3   
  20e5dd:	cc                   	int3   
  20e5de:	cc                   	int3   
  20e5df:	cc                   	int3   

000000000020e5e0 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd3b2eca41e054db2E>:
            fn deref(&self) -> &$T {
  20e5e0:	48 83 ec 18          	sub    $0x18,%rsp
  20e5e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e5e9:	48 8d 05 50 dc 02 00 	lea    0x2dc50(%rip),%rax        # 23c240 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h896b6b0eb703483bE>
  20e5f0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e5f5:	48 8d 3d 44 dc 02 00 	lea    0x2dc44(%rip),%rdi        # 23c240 <_ZN80_$LT$r3_kernel..mm..paging..KERNEL_PAGING$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h896b6b0eb703483bE>
  20e5fc:	e8 9f 9b ff ff       	callq  2081a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h02e84ef863697735E>
  20e601:	48 89 04 24          	mov    %rax,(%rsp)
  20e605:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20e609:	48 83 c4 18          	add    $0x18,%rsp
  20e60d:	c3                   	retq   
  20e60e:	cc                   	int3   
  20e60f:	cc                   	int3   

000000000020e610 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94a3007700c16cf1E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20e610:	48 83 ec 18          	sub    $0x18,%rsp
  20e614:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e619:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20e61e:	48 8b 3f             	mov    (%rdi),%rdi
  20e621:	e8 9a 7a ff ff       	callq  2060c0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h330099725b2bdebbE>
  20e626:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e62a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20e62e:	24 01                	and    $0x1,%al
  20e630:	0f b6 c0             	movzbl %al,%eax
  20e633:	48 83 c4 18          	add    $0x18,%rsp
  20e637:	c3                   	retq   
  20e638:	cc                   	int3   
  20e639:	cc                   	int3   
  20e63a:	cc                   	int3   
  20e63b:	cc                   	int3   
  20e63c:	cc                   	int3   
  20e63d:	cc                   	int3   
  20e63e:	cc                   	int3   
  20e63f:	cc                   	int3   

000000000020e640 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>:
  20e640:	48 83 ec 18          	sub    $0x18,%rsp
  20e644:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e649:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20e64e:	48 8b 3f             	mov    (%rdi),%rdi
  20e651:	e8 8a 66 02 00       	callq  234ce0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>
  20e656:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e65a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20e65e:	24 01                	and    $0x1,%al
  20e660:	0f b6 c0             	movzbl %al,%eax
  20e663:	48 83 c4 18          	add    $0x18,%rsp
  20e667:	c3                   	retq   
  20e668:	cc                   	int3   
  20e669:	cc                   	int3   
  20e66a:	cc                   	int3   
  20e66b:	cc                   	int3   
  20e66c:	cc                   	int3   
  20e66d:	cc                   	int3   
  20e66e:	cc                   	int3   
  20e66f:	cc                   	int3   

000000000020e670 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h3368779d22478805E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20e670:	48 83 ec 28          	sub    $0x28,%rsp
  20e674:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e679:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(*self as *const T), f)
  20e67e:	48 8b 07             	mov    (%rdi),%rax
  20e681:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e686:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20e68b:	e8 e0 09 00 00       	callq  20f070 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E>
  20e690:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e694:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  20e698:	24 01                	and    $0x1,%al
  20e69a:	0f b6 c0             	movzbl %al,%eax
  20e69d:	48 83 c4 28          	add    $0x28,%rsp
  20e6a1:	c3                   	retq   
  20e6a2:	cc                   	int3   
  20e6a3:	cc                   	int3   
  20e6a4:	cc                   	int3   
  20e6a5:	cc                   	int3   
  20e6a6:	cc                   	int3   
  20e6a7:	cc                   	int3   
  20e6a8:	cc                   	int3   
  20e6a9:	cc                   	int3   
  20e6aa:	cc                   	int3   
  20e6ab:	cc                   	int3   
  20e6ac:	cc                   	int3   
  20e6ad:	cc                   	int3   
  20e6ae:	cc                   	int3   
  20e6af:	cc                   	int3   

000000000020e6b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20e6b0:	48 83 ec 28          	sub    $0x28,%rsp
  20e6b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e6b9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(*self as *const T), f)
  20e6be:	48 8b 07             	mov    (%rdi),%rax
  20e6c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e6c6:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20e6cb:	e8 b0 0a 00 00       	callq  20f180 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E>
  20e6d0:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20e6d4:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  20e6d8:	24 01                	and    $0x1,%al
  20e6da:	0f b6 c0             	movzbl %al,%eax
  20e6dd:	48 83 c4 28          	add    $0x28,%rsp
  20e6e1:	c3                   	retq   
  20e6e2:	cc                   	int3   
  20e6e3:	cc                   	int3   
  20e6e4:	cc                   	int3   
  20e6e5:	cc                   	int3   
  20e6e6:	cc                   	int3   
  20e6e7:	cc                   	int3   
  20e6e8:	cc                   	int3   
  20e6e9:	cc                   	int3   
  20e6ea:	cc                   	int3   
  20e6eb:	cc                   	int3   
  20e6ec:	cc                   	int3   
  20e6ed:	cc                   	int3   
  20e6ee:	cc                   	int3   
  20e6ef:	cc                   	int3   

000000000020e6f0 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17h48c3c6680a24267dE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20e6f0:	48 83 ec 18          	sub    $0x18,%rsp
  20e6f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e6f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20e6fe:	48 8b 3f             	mov    (%rdi),%rdi
  20e701:	e8 3a 40 02 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20e706:	88 44 24 07          	mov    %al,0x7(%rsp)
  20e70a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20e70e:	24 01                	and    $0x1,%al
  20e710:	0f b6 c0             	movzbl %al,%eax
  20e713:	48 83 c4 18          	add    $0x18,%rsp
  20e717:	c3                   	retq   
  20e718:	cc                   	int3   
  20e719:	cc                   	int3   
  20e71a:	cc                   	int3   
  20e71b:	cc                   	int3   
  20e71c:	cc                   	int3   
  20e71d:	cc                   	int3   
  20e71e:	cc                   	int3   
  20e71f:	cc                   	int3   

000000000020e720 <_ZN4core3fmt10ArgumentV13new17h2217d787161c4c39E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e720:	48 83 ec 48          	sub    $0x48,%rsp
  20e724:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e729:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e72e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e733:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e738:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e73d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e742:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e747:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e74c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e751:	48 89 04 24          	mov    %rax,(%rsp)
  20e755:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e75a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e75e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e763:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e768:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e76d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e772:	48 83 c4 48          	add    $0x48,%rsp
  20e776:	c3                   	retq   
  20e777:	cc                   	int3   
  20e778:	cc                   	int3   
  20e779:	cc                   	int3   
  20e77a:	cc                   	int3   
  20e77b:	cc                   	int3   
  20e77c:	cc                   	int3   
  20e77d:	cc                   	int3   
  20e77e:	cc                   	int3   
  20e77f:	cc                   	int3   

000000000020e780 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e780:	48 83 ec 48          	sub    $0x48,%rsp
  20e784:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e789:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e78e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e793:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e798:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e79d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e7a2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e7a7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e7ac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e7b1:	48 89 04 24          	mov    %rax,(%rsp)
  20e7b5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e7ba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e7be:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e7c3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e7c8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e7cd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e7d2:	48 83 c4 48          	add    $0x48,%rsp
  20e7d6:	c3                   	retq   
  20e7d7:	cc                   	int3   
  20e7d8:	cc                   	int3   
  20e7d9:	cc                   	int3   
  20e7da:	cc                   	int3   
  20e7db:	cc                   	int3   
  20e7dc:	cc                   	int3   
  20e7dd:	cc                   	int3   
  20e7de:	cc                   	int3   
  20e7df:	cc                   	int3   

000000000020e7e0 <_ZN4core3fmt10ArgumentV13new17h3b537045eb59a5d6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e7e0:	48 83 ec 48          	sub    $0x48,%rsp
  20e7e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e7e9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e7ee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e7f3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e7f8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e7fd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e802:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e807:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e80c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e811:	48 89 04 24          	mov    %rax,(%rsp)
  20e815:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e81a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e81e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e823:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e828:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e82d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e832:	48 83 c4 48          	add    $0x48,%rsp
  20e836:	c3                   	retq   
  20e837:	cc                   	int3   
  20e838:	cc                   	int3   
  20e839:	cc                   	int3   
  20e83a:	cc                   	int3   
  20e83b:	cc                   	int3   
  20e83c:	cc                   	int3   
  20e83d:	cc                   	int3   
  20e83e:	cc                   	int3   
  20e83f:	cc                   	int3   

000000000020e840 <_ZN4core3fmt10ArgumentV13new17h40a1deb68c3db053E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e840:	48 83 ec 48          	sub    $0x48,%rsp
  20e844:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e849:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e84e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e853:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e858:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e85d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e862:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e867:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e86c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e871:	48 89 04 24          	mov    %rax,(%rsp)
  20e875:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e87a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e87e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e883:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e888:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e88d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e892:	48 83 c4 48          	add    $0x48,%rsp
  20e896:	c3                   	retq   
  20e897:	cc                   	int3   
  20e898:	cc                   	int3   
  20e899:	cc                   	int3   
  20e89a:	cc                   	int3   
  20e89b:	cc                   	int3   
  20e89c:	cc                   	int3   
  20e89d:	cc                   	int3   
  20e89e:	cc                   	int3   
  20e89f:	cc                   	int3   

000000000020e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e8a0:	48 83 ec 48          	sub    $0x48,%rsp
  20e8a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e8a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e8ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e8b3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e8b8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e8bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e8c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e8c7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e8cc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e8d1:	48 89 04 24          	mov    %rax,(%rsp)
  20e8d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e8da:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e8de:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e8e3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e8e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e8ed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e8f2:	48 83 c4 48          	add    $0x48,%rsp
  20e8f6:	c3                   	retq   
  20e8f7:	cc                   	int3   
  20e8f8:	cc                   	int3   
  20e8f9:	cc                   	int3   
  20e8fa:	cc                   	int3   
  20e8fb:	cc                   	int3   
  20e8fc:	cc                   	int3   
  20e8fd:	cc                   	int3   
  20e8fe:	cc                   	int3   
  20e8ff:	cc                   	int3   

000000000020e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e900:	48 83 ec 48          	sub    $0x48,%rsp
  20e904:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e909:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e90e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e913:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e918:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e91d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e922:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e927:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e92c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e931:	48 89 04 24          	mov    %rax,(%rsp)
  20e935:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e93a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e93e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e943:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e948:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e94d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e952:	48 83 c4 48          	add    $0x48,%rsp
  20e956:	c3                   	retq   
  20e957:	cc                   	int3   
  20e958:	cc                   	int3   
  20e959:	cc                   	int3   
  20e95a:	cc                   	int3   
  20e95b:	cc                   	int3   
  20e95c:	cc                   	int3   
  20e95d:	cc                   	int3   
  20e95e:	cc                   	int3   
  20e95f:	cc                   	int3   

000000000020e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e960:	48 83 ec 48          	sub    $0x48,%rsp
  20e964:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e969:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e96e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e973:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e978:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e97d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e982:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e987:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e98c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e991:	48 89 04 24          	mov    %rax,(%rsp)
  20e995:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e99a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e99e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20e9a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20e9a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20e9ad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20e9b2:	48 83 c4 48          	add    $0x48,%rsp
  20e9b6:	c3                   	retq   
  20e9b7:	cc                   	int3   
  20e9b8:	cc                   	int3   
  20e9b9:	cc                   	int3   
  20e9ba:	cc                   	int3   
  20e9bb:	cc                   	int3   
  20e9bc:	cc                   	int3   
  20e9bd:	cc                   	int3   
  20e9be:	cc                   	int3   
  20e9bf:	cc                   	int3   

000000000020e9c0 <_ZN4core3fmt10ArgumentV13new17h645304c68732e54fE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20e9c0:	48 83 ec 48          	sub    $0x48,%rsp
  20e9c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e9c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20e9ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20e9d3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20e9d8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20e9dd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20e9e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e9e7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e9ec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20e9f1:	48 89 04 24          	mov    %rax,(%rsp)
  20e9f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20e9fa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20e9fe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ea03:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ea08:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ea0d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ea12:	48 83 c4 48          	add    $0x48,%rsp
  20ea16:	c3                   	retq   
  20ea17:	cc                   	int3   
  20ea18:	cc                   	int3   
  20ea19:	cc                   	int3   
  20ea1a:	cc                   	int3   
  20ea1b:	cc                   	int3   
  20ea1c:	cc                   	int3   
  20ea1d:	cc                   	int3   
  20ea1e:	cc                   	int3   
  20ea1f:	cc                   	int3   

000000000020ea20 <_ZN4core3fmt10ArgumentV13new17h6761285cd85d6144E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ea20:	48 83 ec 48          	sub    $0x48,%rsp
  20ea24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ea29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ea2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ea33:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ea38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ea3d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ea42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ea47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ea4c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ea51:	48 89 04 24          	mov    %rax,(%rsp)
  20ea55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ea5a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ea5e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ea63:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ea68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ea6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ea72:	48 83 c4 48          	add    $0x48,%rsp
  20ea76:	c3                   	retq   
  20ea77:	cc                   	int3   
  20ea78:	cc                   	int3   
  20ea79:	cc                   	int3   
  20ea7a:	cc                   	int3   
  20ea7b:	cc                   	int3   
  20ea7c:	cc                   	int3   
  20ea7d:	cc                   	int3   
  20ea7e:	cc                   	int3   
  20ea7f:	cc                   	int3   

000000000020ea80 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ea80:	48 83 ec 48          	sub    $0x48,%rsp
  20ea84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ea89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ea8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ea93:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ea98:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ea9d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eaa2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20eaa7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20eaac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20eab1:	48 89 04 24          	mov    %rax,(%rsp)
  20eab5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20eaba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20eabe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20eac3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20eac8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eacd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ead2:	48 83 c4 48          	add    $0x48,%rsp
  20ead6:	c3                   	retq   
  20ead7:	cc                   	int3   
  20ead8:	cc                   	int3   
  20ead9:	cc                   	int3   
  20eada:	cc                   	int3   
  20eadb:	cc                   	int3   
  20eadc:	cc                   	int3   
  20eadd:	cc                   	int3   
  20eade:	cc                   	int3   
  20eadf:	cc                   	int3   

000000000020eae0 <_ZN4core3fmt10ArgumentV13new17h6eb9a36efcd2d487E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20eae0:	48 83 ec 48          	sub    $0x48,%rsp
  20eae4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eae9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20eaee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20eaf3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20eaf8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20eafd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eb02:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20eb07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20eb0c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20eb11:	48 89 04 24          	mov    %rax,(%rsp)
  20eb15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20eb1a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20eb1e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20eb23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20eb28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eb2d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20eb32:	48 83 c4 48          	add    $0x48,%rsp
  20eb36:	c3                   	retq   
  20eb37:	cc                   	int3   
  20eb38:	cc                   	int3   
  20eb39:	cc                   	int3   
  20eb3a:	cc                   	int3   
  20eb3b:	cc                   	int3   
  20eb3c:	cc                   	int3   
  20eb3d:	cc                   	int3   
  20eb3e:	cc                   	int3   
  20eb3f:	cc                   	int3   

000000000020eb40 <_ZN4core3fmt10ArgumentV13new17h731e686b89db936cE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20eb40:	48 83 ec 48          	sub    $0x48,%rsp
  20eb44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eb49:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20eb4e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20eb53:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20eb58:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20eb5d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eb62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20eb67:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20eb6c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20eb71:	48 89 04 24          	mov    %rax,(%rsp)
  20eb75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20eb7a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20eb7e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20eb83:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20eb88:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eb8d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20eb92:	48 83 c4 48          	add    $0x48,%rsp
  20eb96:	c3                   	retq   
  20eb97:	cc                   	int3   
  20eb98:	cc                   	int3   
  20eb99:	cc                   	int3   
  20eb9a:	cc                   	int3   
  20eb9b:	cc                   	int3   
  20eb9c:	cc                   	int3   
  20eb9d:	cc                   	int3   
  20eb9e:	cc                   	int3   
  20eb9f:	cc                   	int3   

000000000020eba0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20eba0:	48 83 ec 48          	sub    $0x48,%rsp
  20eba4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eba9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ebae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ebb3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ebb8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ebbd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ebc2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ebc7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ebcc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ebd1:	48 89 04 24          	mov    %rax,(%rsp)
  20ebd5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ebda:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ebde:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ebe3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ebe8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ebed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ebf2:	48 83 c4 48          	add    $0x48,%rsp
  20ebf6:	c3                   	retq   
  20ebf7:	cc                   	int3   
  20ebf8:	cc                   	int3   
  20ebf9:	cc                   	int3   
  20ebfa:	cc                   	int3   
  20ebfb:	cc                   	int3   
  20ebfc:	cc                   	int3   
  20ebfd:	cc                   	int3   
  20ebfe:	cc                   	int3   
  20ebff:	cc                   	int3   

000000000020ec00 <_ZN4core3fmt10ArgumentV13new17h8dab2205c245e810E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ec00:	48 83 ec 48          	sub    $0x48,%rsp
  20ec04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ec09:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ec0e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ec13:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ec18:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ec1d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ec22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ec27:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ec2c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ec31:	48 89 04 24          	mov    %rax,(%rsp)
  20ec35:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ec3a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ec3e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ec43:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ec48:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ec4d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ec52:	48 83 c4 48          	add    $0x48,%rsp
  20ec56:	c3                   	retq   
  20ec57:	cc                   	int3   
  20ec58:	cc                   	int3   
  20ec59:	cc                   	int3   
  20ec5a:	cc                   	int3   
  20ec5b:	cc                   	int3   
  20ec5c:	cc                   	int3   
  20ec5d:	cc                   	int3   
  20ec5e:	cc                   	int3   
  20ec5f:	cc                   	int3   

000000000020ec60 <_ZN4core3fmt10ArgumentV13new17ha12a9edfec13e26aE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ec60:	48 83 ec 48          	sub    $0x48,%rsp
  20ec64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ec69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ec6e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ec73:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ec78:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ec7d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ec82:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ec87:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ec8c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ec91:	48 89 04 24          	mov    %rax,(%rsp)
  20ec95:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ec9a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ec9e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20eca3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20eca8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ecad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ecb2:	48 83 c4 48          	add    $0x48,%rsp
  20ecb6:	c3                   	retq   
  20ecb7:	cc                   	int3   
  20ecb8:	cc                   	int3   
  20ecb9:	cc                   	int3   
  20ecba:	cc                   	int3   
  20ecbb:	cc                   	int3   
  20ecbc:	cc                   	int3   
  20ecbd:	cc                   	int3   
  20ecbe:	cc                   	int3   
  20ecbf:	cc                   	int3   

000000000020ecc0 <_ZN4core3fmt10ArgumentV13new17ha27f7629ef6a1995E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ecc0:	48 83 ec 48          	sub    $0x48,%rsp
  20ecc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ecc9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ecce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ecd3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ecd8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ecdd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ece2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ece7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ecec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ecf1:	48 89 04 24          	mov    %rax,(%rsp)
  20ecf5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ecfa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ecfe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ed03:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ed08:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ed0d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ed12:	48 83 c4 48          	add    $0x48,%rsp
  20ed16:	c3                   	retq   
  20ed17:	cc                   	int3   
  20ed18:	cc                   	int3   
  20ed19:	cc                   	int3   
  20ed1a:	cc                   	int3   
  20ed1b:	cc                   	int3   
  20ed1c:	cc                   	int3   
  20ed1d:	cc                   	int3   
  20ed1e:	cc                   	int3   
  20ed1f:	cc                   	int3   

000000000020ed20 <_ZN4core3fmt10ArgumentV13new17haa5e6f547645fb6cE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ed20:	48 83 ec 48          	sub    $0x48,%rsp
  20ed24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ed29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ed2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ed33:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ed38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ed3d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ed42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ed47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ed4c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ed51:	48 89 04 24          	mov    %rax,(%rsp)
  20ed55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ed5a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ed5e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ed63:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ed68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ed6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ed72:	48 83 c4 48          	add    $0x48,%rsp
  20ed76:	c3                   	retq   
  20ed77:	cc                   	int3   
  20ed78:	cc                   	int3   
  20ed79:	cc                   	int3   
  20ed7a:	cc                   	int3   
  20ed7b:	cc                   	int3   
  20ed7c:	cc                   	int3   
  20ed7d:	cc                   	int3   
  20ed7e:	cc                   	int3   
  20ed7f:	cc                   	int3   

000000000020ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ed80:	48 83 ec 48          	sub    $0x48,%rsp
  20ed84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ed89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ed8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ed93:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ed98:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ed9d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eda2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20eda7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20edac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20edb1:	48 89 04 24          	mov    %rax,(%rsp)
  20edb5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20edba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20edbe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20edc3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20edc8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20edcd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20edd2:	48 83 c4 48          	add    $0x48,%rsp
  20edd6:	c3                   	retq   
  20edd7:	cc                   	int3   
  20edd8:	cc                   	int3   
  20edd9:	cc                   	int3   
  20edda:	cc                   	int3   
  20eddb:	cc                   	int3   
  20eddc:	cc                   	int3   
  20eddd:	cc                   	int3   
  20edde:	cc                   	int3   
  20eddf:	cc                   	int3   

000000000020ede0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ede0:	48 83 ec 48          	sub    $0x48,%rsp
  20ede4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ede9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20edee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20edf3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20edf8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20edfd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ee02:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ee07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ee0c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ee11:	48 89 04 24          	mov    %rax,(%rsp)
  20ee15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ee1a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ee1e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ee23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ee28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ee2d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ee32:	48 83 c4 48          	add    $0x48,%rsp
  20ee36:	c3                   	retq   
  20ee37:	cc                   	int3   
  20ee38:	cc                   	int3   
  20ee39:	cc                   	int3   
  20ee3a:	cc                   	int3   
  20ee3b:	cc                   	int3   
  20ee3c:	cc                   	int3   
  20ee3d:	cc                   	int3   
  20ee3e:	cc                   	int3   
  20ee3f:	cc                   	int3   

000000000020ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ee40:	48 83 ec 48          	sub    $0x48,%rsp
  20ee44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ee49:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ee4e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ee53:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ee58:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ee5d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ee62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ee67:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ee6c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ee71:	48 89 04 24          	mov    %rax,(%rsp)
  20ee75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ee7a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ee7e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ee83:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ee88:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ee8d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ee92:	48 83 c4 48          	add    $0x48,%rsp
  20ee96:	c3                   	retq   
  20ee97:	cc                   	int3   
  20ee98:	cc                   	int3   
  20ee99:	cc                   	int3   
  20ee9a:	cc                   	int3   
  20ee9b:	cc                   	int3   
  20ee9c:	cc                   	int3   
  20ee9d:	cc                   	int3   
  20ee9e:	cc                   	int3   
  20ee9f:	cc                   	int3   

000000000020eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20eea0:	48 83 ec 48          	sub    $0x48,%rsp
  20eea4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eea9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20eeae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20eeb3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20eeb8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20eebd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eec2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20eec7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20eecc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20eed1:	48 89 04 24          	mov    %rax,(%rsp)
  20eed5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20eeda:	48 8b 0c 24          	mov    (%rsp),%rcx
  20eede:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20eee3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20eee8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20eeed:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20eef2:	48 83 c4 48          	add    $0x48,%rsp
  20eef6:	c3                   	retq   
  20eef7:	cc                   	int3   
  20eef8:	cc                   	int3   
  20eef9:	cc                   	int3   
  20eefa:	cc                   	int3   
  20eefb:	cc                   	int3   
  20eefc:	cc                   	int3   
  20eefd:	cc                   	int3   
  20eefe:	cc                   	int3   
  20eeff:	cc                   	int3   

000000000020ef00 <_ZN4core3fmt10ArgumentV13new17hedb1e574926a384eE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ef00:	48 83 ec 48          	sub    $0x48,%rsp
  20ef04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ef09:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ef0e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ef13:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ef18:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ef1d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ef22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ef27:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ef2c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ef31:	48 89 04 24          	mov    %rax,(%rsp)
  20ef35:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ef3a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ef3e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ef43:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ef48:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ef4d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ef52:	48 83 c4 48          	add    $0x48,%rsp
  20ef56:	c3                   	retq   
  20ef57:	cc                   	int3   
  20ef58:	cc                   	int3   
  20ef59:	cc                   	int3   
  20ef5a:	cc                   	int3   
  20ef5b:	cc                   	int3   
  20ef5c:	cc                   	int3   
  20ef5d:	cc                   	int3   
  20ef5e:	cc                   	int3   
  20ef5f:	cc                   	int3   

000000000020ef60 <_ZN4core3fmt10ArgumentV13new17hf1f1870160aa1ab8E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ef60:	48 83 ec 48          	sub    $0x48,%rsp
  20ef64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ef69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ef6e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ef73:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ef78:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ef7d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ef82:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ef87:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ef8c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ef91:	48 89 04 24          	mov    %rax,(%rsp)
  20ef95:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ef9a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ef9e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20efa3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20efa8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20efad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20efb2:	48 83 c4 48          	add    $0x48,%rsp
  20efb6:	c3                   	retq   
  20efb7:	cc                   	int3   
  20efb8:	cc                   	int3   
  20efb9:	cc                   	int3   
  20efba:	cc                   	int3   
  20efbb:	cc                   	int3   
  20efbc:	cc                   	int3   
  20efbd:	cc                   	int3   
  20efbe:	cc                   	int3   
  20efbf:	cc                   	int3   

000000000020efc0 <_ZN4core3fmt10ArgumentV13new17hf674b26383cf8570E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20efc0:	48 83 ec 48          	sub    $0x48,%rsp
  20efc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20efc9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20efce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20efd3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20efd8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20efdd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20efe2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20efe7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20efec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20eff1:	48 89 04 24          	mov    %rax,(%rsp)
  20eff5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20effa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20effe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20f003:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20f008:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f00d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20f012:	48 83 c4 48          	add    $0x48,%rsp
  20f016:	c3                   	retq   
  20f017:	cc                   	int3   
  20f018:	cc                   	int3   
  20f019:	cc                   	int3   
  20f01a:	cc                   	int3   
  20f01b:	cc                   	int3   
  20f01c:	cc                   	int3   
  20f01d:	cc                   	int3   
  20f01e:	cc                   	int3   
  20f01f:	cc                   	int3   

000000000020f020 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h818e9191d55a10c0E>:

// From (and thus Into) is reflexive
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_convert", issue = "88674")]
impl<T> const From<T> for T {
    fn from(t: T) -> T {
  20f020:	50                   	push   %rax
        t
    }
  20f021:	58                   	pop    %rax
  20f022:	c3                   	retq   
  20f023:	cc                   	int3   
  20f024:	cc                   	int3   
  20f025:	cc                   	int3   
  20f026:	cc                   	int3   
  20f027:	cc                   	int3   
  20f028:	cc                   	int3   
  20f029:	cc                   	int3   
  20f02a:	cc                   	int3   
  20f02b:	cc                   	int3   
  20f02c:	cc                   	int3   
  20f02d:	cc                   	int3   
  20f02e:	cc                   	int3   
  20f02f:	cc                   	int3   

000000000020f030 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h358b726a10840d4fE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f030:	48 83 ec 28          	sub    $0x28,%rsp
  20f034:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20f039:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(&**self as *const T), f)
  20f03e:	48 8b 0f             	mov    (%rdi),%rcx
  20f041:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f045:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20f04a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f04f:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20f054:	e8 37 02 00 00       	callq  20f290 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E>
  20f059:	88 44 24 07          	mov    %al,0x7(%rsp)
  20f05d:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20f061:	24 01                	and    $0x1,%al
  20f063:	0f b6 c0             	movzbl %al,%eax
  20f066:	48 83 c4 28          	add    $0x28,%rsp
  20f06a:	c3                   	retq   
  20f06b:	cc                   	int3   
  20f06c:	cc                   	int3   
  20f06d:	cc                   	int3   
  20f06e:	cc                   	int3   
  20f06f:	cc                   	int3   

000000000020f070 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f070:	48 83 ec 78          	sub    $0x78,%rsp
  20f074:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f079:	48 89 f8             	mov    %rdi,%rax
  20f07c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20f081:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f086:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f08b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20f090:	48 8b 0f             	mov    (%rdi),%rcx
  20f093:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20f098:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f09c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20f0a1:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20f0a6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20f0ab:	8b 47 30             	mov    0x30(%rdi),%eax
  20f0ae:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20f0b2:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20f0b6:	e8 85 66 02 00       	callq  235740 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20f0bb:	88 44 24 37          	mov    %al,0x37(%rsp)
  20f0bf:	8a 44 24 37          	mov    0x37(%rsp),%al
  20f0c3:	a8 01                	test   $0x1,%al
  20f0c5:	75 33                	jne    20f0fa <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x8a>
  20f0c7:	eb 00                	jmp    20f0c9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x59>
  20f0c9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f0ce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20f0d3:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20f0d6:	83 c9 04             	or     $0x4,%ecx
  20f0d9:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20f0dc:	48 8b 00             	mov    (%rax),%rax
  20f0df:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f0e4:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20f0e9:	e8 52 36 02 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20f0ee:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f0f2:	24 01                	and    $0x1,%al
  20f0f4:	88 44 24 77          	mov    %al,0x77(%rsp)
  20f0f8:	eb 4d                	jmp    20f147 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xd7>
  20f0fa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20f0ff:	8b 47 30             	mov    0x30(%rdi),%eax
  20f102:	83 c8 08             	or     $0x8,%eax
  20f105:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20f108:	e8 c3 2d 02 00       	callq  231ed0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20f10d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f111:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f115:	a8 01                	test   $0x1,%al
  20f117:	75 04                	jne    20f11d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xad>
  20f119:	eb 00                	jmp    20f11b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xab>
        if f.alternate() {
  20f11b:	eb ac                	jmp    20f0c9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0x59>
  20f11d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20f122:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20f129:	00 00 
  20f12b:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20f132:	00 00 
  20f134:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20f139:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20f13e:	48 89 10             	mov    %rdx,(%rax)
  20f141:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20f145:	eb d4                	jmp    20f11b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h101a5dd742e945e2E+0xab>
  20f147:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f14b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f150:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20f154:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20f159:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20f15e:	48 89 39             	mov    %rdi,(%rcx)
  20f161:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20f165:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20f168:	24 01                	and    $0x1,%al
  20f16a:	0f b6 c0             	movzbl %al,%eax
  20f16d:	48 83 c4 78          	add    $0x78,%rsp
  20f171:	c3                   	retq   
  20f172:	cc                   	int3   
  20f173:	cc                   	int3   
  20f174:	cc                   	int3   
  20f175:	cc                   	int3   
  20f176:	cc                   	int3   
  20f177:	cc                   	int3   
  20f178:	cc                   	int3   
  20f179:	cc                   	int3   
  20f17a:	cc                   	int3   
  20f17b:	cc                   	int3   
  20f17c:	cc                   	int3   
  20f17d:	cc                   	int3   
  20f17e:	cc                   	int3   
  20f17f:	cc                   	int3   

000000000020f180 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f180:	48 83 ec 78          	sub    $0x78,%rsp
  20f184:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f189:	48 89 f8             	mov    %rdi,%rax
  20f18c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20f191:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f196:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f19b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20f1a0:	48 8b 0f             	mov    (%rdi),%rcx
  20f1a3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20f1a8:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f1ac:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20f1b1:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20f1b6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20f1bb:	8b 47 30             	mov    0x30(%rdi),%eax
  20f1be:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20f1c2:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20f1c6:	e8 75 65 02 00       	callq  235740 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20f1cb:	88 44 24 37          	mov    %al,0x37(%rsp)
  20f1cf:	8a 44 24 37          	mov    0x37(%rsp),%al
  20f1d3:	a8 01                	test   $0x1,%al
  20f1d5:	75 33                	jne    20f20a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x8a>
  20f1d7:	eb 00                	jmp    20f1d9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x59>
  20f1d9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f1de:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20f1e3:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20f1e6:	83 c9 04             	or     $0x4,%ecx
  20f1e9:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20f1ec:	48 8b 00             	mov    (%rax),%rax
  20f1ef:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f1f4:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20f1f9:	e8 42 35 02 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20f1fe:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f202:	24 01                	and    $0x1,%al
  20f204:	88 44 24 77          	mov    %al,0x77(%rsp)
  20f208:	eb 4d                	jmp    20f257 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xd7>
  20f20a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20f20f:	8b 47 30             	mov    0x30(%rdi),%eax
  20f212:	83 c8 08             	or     $0x8,%eax
  20f215:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20f218:	e8 b3 2c 02 00       	callq  231ed0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20f21d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f221:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f225:	a8 01                	test   $0x1,%al
  20f227:	75 04                	jne    20f22d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xad>
  20f229:	eb 00                	jmp    20f22b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xab>
        if f.alternate() {
  20f22b:	eb ac                	jmp    20f1d9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0x59>
  20f22d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20f232:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20f239:	00 00 
  20f23b:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20f242:	00 00 
  20f244:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20f249:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20f24e:	48 89 10             	mov    %rdx,(%rax)
  20f251:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20f255:	eb d4                	jmp    20f22b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h1d5f7b1918f10ef9E+0xab>
  20f257:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f25b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f260:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20f264:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20f269:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20f26e:	48 89 39             	mov    %rdi,(%rcx)
  20f271:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20f275:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20f278:	24 01                	and    $0x1,%al
  20f27a:	0f b6 c0             	movzbl %al,%eax
  20f27d:	48 83 c4 78          	add    $0x78,%rsp
  20f281:	c3                   	retq   
  20f282:	cc                   	int3   
  20f283:	cc                   	int3   
  20f284:	cc                   	int3   
  20f285:	cc                   	int3   
  20f286:	cc                   	int3   
  20f287:	cc                   	int3   
  20f288:	cc                   	int3   
  20f289:	cc                   	int3   
  20f28a:	cc                   	int3   
  20f28b:	cc                   	int3   
  20f28c:	cc                   	int3   
  20f28d:	cc                   	int3   
  20f28e:	cc                   	int3   
  20f28f:	cc                   	int3   

000000000020f290 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  20f290:	48 83 ec 78          	sub    $0x78,%rsp
  20f294:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f299:	48 89 f8             	mov    %rdi,%rax
  20f29c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20f2a1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f2a6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f2ab:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  20f2b0:	48 8b 0f             	mov    (%rdi),%rcx
  20f2b3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20f2b8:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20f2bc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20f2c1:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20f2c6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  20f2cb:	8b 47 30             	mov    0x30(%rdi),%eax
  20f2ce:	89 44 24 30          	mov    %eax,0x30(%rsp)
  20f2d2:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  20f2d6:	e8 65 64 02 00       	callq  235740 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  20f2db:	88 44 24 37          	mov    %al,0x37(%rsp)
  20f2df:	8a 44 24 37          	mov    0x37(%rsp),%al
  20f2e3:	a8 01                	test   $0x1,%al
  20f2e5:	75 33                	jne    20f31a <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x8a>
  20f2e7:	eb 00                	jmp    20f2e9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x59>
  20f2e9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f2ee:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  20f2f3:	8b 4e 30             	mov    0x30(%rsi),%ecx
  20f2f6:	83 c9 04             	or     $0x4,%ecx
  20f2f9:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  20f2fc:	48 8b 00             	mov    (%rax),%rax
  20f2ff:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f304:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20f309:	e8 32 34 02 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20f30e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f312:	24 01                	and    $0x1,%al
  20f314:	88 44 24 77          	mov    %al,0x77(%rsp)
  20f318:	eb 4d                	jmp    20f367 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xd7>
  20f31a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  20f31f:	8b 47 30             	mov    0x30(%rdi),%eax
  20f322:	83 c8 08             	or     $0x8,%eax
  20f325:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  20f328:	e8 a3 2b 02 00       	callq  231ed0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  20f32d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f331:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f335:	a8 01                	test   $0x1,%al
  20f337:	75 04                	jne    20f33d <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xad>
  20f339:	eb 00                	jmp    20f33b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xab>
        if f.alternate() {
  20f33b:	eb ac                	jmp    20f2e9 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0x59>
  20f33d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  20f342:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  20f349:	00 00 
  20f34b:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20f352:	00 00 
  20f354:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20f359:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20f35e:	48 89 10             	mov    %rdx,(%rax)
  20f361:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  20f365:	eb d4                	jmp    20f33b <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17hfa2ac39c93de79e5E+0xab>
  20f367:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f36b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f370:	8b 54 24 30          	mov    0x30(%rsp),%edx
  20f374:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20f379:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  20f37e:	48 89 39             	mov    %rdi,(%rcx)
  20f381:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  20f385:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  20f388:	24 01                	and    $0x1,%al
  20f38a:	0f b6 c0             	movzbl %al,%eax
  20f38d:	48 83 c4 78          	add    $0x78,%rsp
  20f391:	c3                   	retq   
  20f392:	cc                   	int3   
  20f393:	cc                   	int3   
  20f394:	cc                   	int3   
  20f395:	cc                   	int3   
  20f396:	cc                   	int3   
  20f397:	cc                   	int3   
  20f398:	cc                   	int3   
  20f399:	cc                   	int3   
  20f39a:	cc                   	int3   
  20f39b:	cc                   	int3   
  20f39c:	cc                   	int3   
  20f39d:	cc                   	int3   
  20f39e:	cc                   	int3   
  20f39f:	cc                   	int3   

000000000020f3a0 <_ZN9r3_kernel3cpu18disable_interrupts17hfd635ca60ca5bd45E>:
    }
}

pub fn disable_interrupts() {
    unsafe {
        asm!("cli", options(nomem, nostack));
  20f3a0:	fa                   	cli    
    }
}
  20f3a1:	c3                   	retq   
  20f3a2:	cc                   	int3   
  20f3a3:	cc                   	int3   
  20f3a4:	cc                   	int3   
  20f3a5:	cc                   	int3   
  20f3a6:	cc                   	int3   
  20f3a7:	cc                   	int3   
  20f3a8:	cc                   	int3   
  20f3a9:	cc                   	int3   
  20f3aa:	cc                   	int3   
  20f3ab:	cc                   	int3   
  20f3ac:	cc                   	int3   
  20f3ad:	cc                   	int3   
  20f3ae:	cc                   	int3   
  20f3af:	cc                   	int3   

000000000020f3b0 <_ZN9r3_kernel3cpu17create_breakpoint17hba9b2e782d41c415E>:
    rflags::RFlags::is_set(rflags::RFlagsStruct::INTERRUPT_FLAG)
}

pub fn create_breakpoint() {
    unsafe {
        asm!("int3", options(nomem, nostack));
  20f3b0:	cc                   	int3   
    }
}
  20f3b1:	c3                   	retq   
  20f3b2:	cc                   	int3   
  20f3b3:	cc                   	int3   
  20f3b4:	cc                   	int3   
  20f3b5:	cc                   	int3   
  20f3b6:	cc                   	int3   
  20f3b7:	cc                   	int3   
  20f3b8:	cc                   	int3   
  20f3b9:	cc                   	int3   
  20f3ba:	cc                   	int3   
  20f3bb:	cc                   	int3   
  20f3bc:	cc                   	int3   
  20f3bd:	cc                   	int3   
  20f3be:	cc                   	int3   
  20f3bf:	cc                   	int3   

000000000020f3c0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>:
            asm!("hlt", options(nomem, nostack));
        }
    }
}

pub fn halt_no_interrupts() -> ! {
  20f3c0:	50                   	push   %rax
    disable_interrupts();
  20f3c1:	e8 da ff ff ff       	callq  20f3a0 <_ZN9r3_kernel3cpu18disable_interrupts17hfd635ca60ca5bd45E>
    unsafe {
        loop {
            asm!("hlt", options(nomem, nostack));
  20f3c6:	f4                   	hlt    
  20f3c7:	eb fd                	jmp    20f3c6 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E+0x6>
  20f3c9:	cc                   	int3   
  20f3ca:	cc                   	int3   
  20f3cb:	cc                   	int3   
  20f3cc:	cc                   	int3   
  20f3cd:	cc                   	int3   
  20f3ce:	cc                   	int3   
  20f3cf:	cc                   	int3   

000000000020f3d0 <_ZN9r3_kernel3cpu26init_base_processor_tables17he70b2cdd0f8622b9E>:
        }
    }
}

pub fn init_base_processor_tables() {
  20f3d0:	50                   	push   %rax
    segments::init_gdt();
  20f3d1:	e8 fa c0 00 00       	callq  21b4d0 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E>
    exceptions::init_exceptions();
  20f3d6:	e8 d5 a5 01 00       	callq  2299b0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E>
}
  20f3db:	58                   	pop    %rax
  20f3dc:	c3                   	retq   
  20f3dd:	cc                   	int3   
  20f3de:	cc                   	int3   
  20f3df:	cc                   	int3   

000000000020f3e0 <_ZN9r3_kernel3cpu23init_features_detection17he58408ebd0f89f65E>:

pub fn init_features_detection() {
  20f3e0:	50                   	push   %rax
    // this will call the lazy static to initialize
    cpuid::display_features();
  20f3e1:	e8 ea 0d 01 00       	callq  2201d0 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E>
    cpuid::assert_min_levels();
  20f3e6:	e8 65 0b 01 00       	callq  21ff50 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E>
}
  20f3eb:	58                   	pop    %rax
  20f3ec:	c3                   	retq   
  20f3ed:	cc                   	int3   
  20f3ee:	cc                   	int3   
  20f3ef:	cc                   	int3   

000000000020f3f0 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE>:

pub fn run_test_breakpoint_recovery() {
  20f3f0:	48 83 ec 68          	sub    $0x68,%rsp
    create_breakpoint();
  20f3f4:	e8 b7 ff ff ff       	callq  20f3b0 <_ZN9r3_kernel3cpu17create_breakpoint17hba9b2e782d41c415E>
    log::info!("Recovered from breakpoint, interrupts properly working.");
  20f3f9:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  20f400:	00 00 
  20f402:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20f407:	48 8d 35 2a 12 ff ff 	lea    -0xedd6(%rip),%rsi        # 200638 <str.0+0x118>
  20f40e:	e8 dd 26 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20f413:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f417:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f41b:	a8 01                	test   $0x1,%al
  20f41d:	75 09                	jne    20f428 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x38>
  20f41f:	eb 00                	jmp    20f421 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x31>
  20f421:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  20f426:	eb 42                	jmp    20f46a <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x7a>
  20f428:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  20f42d:	48 8b 3d dc bc 02 00 	mov    0x2bcdc(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20f434:	0f b6 74 24 5f       	movzbl 0x5f(%rsp),%esi
  20f439:	e8 82 98 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20f43e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20f443:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20f448:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f44d:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20f452:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20f457:	e8 94 26 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20f45c:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f460:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f464:	24 01                	and    $0x1,%al
  20f466:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20f46a:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  20f46f:	75 05                	jne    20f476 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x86>
}
  20f471:	48 83 c4 68          	add    $0x68,%rsp
  20f475:	c3                   	retq   
    log::info!("Recovered from breakpoint, interrupts properly working.");
  20f476:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20f47b:	48 8d 35 86 87 02 00 	lea    0x28786(%rip),%rsi        # 237c08 <memcmp+0x1658>
  20f482:	ba 01 00 00 00       	mov    $0x1,%edx
  20f487:	48 8d 0d 42 15 ff ff 	lea    -0xeabe(%rip),%rcx        # 2009d0 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x3a>
  20f48e:	31 c0                	xor    %eax,%eax
  20f490:	41 89 c0             	mov    %eax,%r8d
  20f493:	e8 28 6e ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20f498:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f49d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20f4a2:	48 8d 15 6f 87 02 00 	lea    0x2876f(%rip),%rdx        # 237c18 <memcmp+0x1668>
  20f4a9:	e8 42 11 02 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20f4ae:	eb c1                	jmp    20f471 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE+0x81>

000000000020f4b0 <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E>:

pub fn init_core_hardware() {
  20f4b0:	48 83 ec 68          	sub    $0x68,%rsp
    pic::setup_pics();
  20f4b4:	e8 57 bc 01 00       	callq  22b110 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E>
    hw_interrupts::setup_hw_interrupts();
  20f4b9:	e8 52 6f ff ff       	callq  206410 <_ZN9r3_kernel3cpu13hw_interrupts19setup_hw_interrupts17ha6aa69e3fa23ad1eE>

    // enable legacy interrupts:
    pic::enable_legacy_interrupts();
  20f4be:	e8 cd bb 01 00       	callq  22b090 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE>
    log::info!("Enabled legacy PIC chip.");
  20f4c3:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  20f4ca:	00 00 
  20f4cc:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20f4d1:	48 8d 35 60 11 ff ff 	lea    -0xeea0(%rip),%rsi        # 200638 <str.0+0x118>
  20f4d8:	e8 13 26 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20f4dd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20f4e1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20f4e5:	a8 01                	test   $0x1,%al
  20f4e7:	75 09                	jne    20f4f2 <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0x42>
  20f4e9:	eb 00                	jmp    20f4eb <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0x3b>
  20f4eb:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  20f4f0:	eb 42                	jmp    20f534 <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0x84>
  20f4f2:	c6 44 24 5f 00       	movb   $0x0,0x5f(%rsp)
  20f4f7:	48 8b 3d 12 bc 02 00 	mov    0x2bc12(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20f4fe:	0f b6 74 24 5f       	movzbl 0x5f(%rsp),%esi
  20f503:	e8 b8 97 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  20f508:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20f50d:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20f512:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f517:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20f51c:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20f521:	e8 ca 25 00 00       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  20f526:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20f52a:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20f52e:	24 01                	and    $0x1,%al
  20f530:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20f534:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  20f539:	75 07                	jne    20f542 <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0x92>
    tsc::init_timer();
  20f53b:	e8 d0 a9 00 00       	callq  219f10 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E>
  20f540:	eb 3a                	jmp    20f57c <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0xcc>
    log::info!("Enabled legacy PIC chip.");
  20f542:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20f547:	48 8d 35 02 87 02 00 	lea    0x28702(%rip),%rsi        # 237c50 <memcmp+0x16a0>
  20f54e:	ba 01 00 00 00       	mov    $0x1,%edx
  20f553:	48 8d 0d 76 14 ff ff 	lea    -0xeb8a(%rip),%rcx        # 2009d0 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x3a>
  20f55a:	31 c0                	xor    %eax,%eax
  20f55c:	41 89 c0             	mov    %eax,%r8d
  20f55f:	e8 5c 6d ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  20f564:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20f569:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20f56e:	48 8d 15 eb 86 02 00 	lea    0x286eb(%rip),%rdx        # 237c60 <memcmp+0x16b0>
  20f575:	e8 76 10 02 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20f57a:	eb bf                	jmp    20f53b <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E+0x8b>
}
  20f57c:	48 83 c4 68          	add    $0x68,%rsp
  20f580:	c3                   	retq   
  20f581:	cc                   	int3   
  20f582:	cc                   	int3   
  20f583:	cc                   	int3   
  20f584:	cc                   	int3   
  20f585:	cc                   	int3   
  20f586:	cc                   	int3   
  20f587:	cc                   	int3   
  20f588:	cc                   	int3   
  20f589:	cc                   	int3   
  20f58a:	cc                   	int3   
  20f58b:	cc                   	int3   
  20f58c:	cc                   	int3   
  20f58d:	cc                   	int3   
  20f58e:	cc                   	int3   
  20f58f:	cc                   	int3   

000000000020f590 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h43a7e9e40985a180E>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
  20f590:	48 83 ec 78          	sub    $0x78,%rsp
  20f594:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20f599:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  20f59e:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20f5a3:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        unsafe { mem::transmute(self) }
  20f5a8:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20f5ad:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  20f5b2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20f5b7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20f5bc:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20f5c1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f5c6:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20f5cb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        Bytes(self.as_bytes().iter().copied())
  20f5d0:	e8 7b 16 02 00       	callq  230c50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  20f5d5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f5da:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20f5df:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20f5e4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20f5e9:	e8 22 14 02 00       	callq  230a10 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>
  20f5ee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f5f3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20f5f8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f5fd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20f602:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20f607:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  20f60c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20f611:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20f616:	48 83 c4 78          	add    $0x78,%rsp
  20f61a:	c3                   	retq   
  20f61b:	cc                   	int3   
  20f61c:	cc                   	int3   
  20f61d:	cc                   	int3   
  20f61e:	cc                   	int3   
  20f61f:	cc                   	int3   

000000000020f620 <_ZN4core5slice3raw14from_raw_parts17h0ef61f3524b7899cE>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  20f620:	48 83 ec 28          	sub    $0x28,%rsp
  20f624:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20f629:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  20f62e:	e8 ad ff 00 00       	callq  21f5e0 <_ZN4core3ptr20slice_from_raw_parts17h7a7af0f1530c382dE>
  20f633:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f638:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20f63d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20f642:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  20f647:	48 83 c4 28          	add    $0x28,%rsp
  20f64b:	c3                   	retq   
  20f64c:	cc                   	int3   
  20f64d:	cc                   	int3   
  20f64e:	cc                   	int3   
  20f64f:	cc                   	int3   

000000000020f650 <_ZN4core5slice3raw14from_raw_parts17h756c0bd16b5a8f40E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  20f650:	48 83 ec 28          	sub    $0x28,%rsp
  20f654:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20f659:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  20f65e:	e8 2d ff 00 00       	callq  21f590 <_ZN4core3ptr20slice_from_raw_parts17h006612fc5f972f0cE>
  20f663:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f668:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20f66d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20f672:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  20f677:	48 83 c4 28          	add    $0x28,%rsp
  20f67b:	c3                   	retq   
  20f67c:	cc                   	int3   
  20f67d:	cc                   	int3   
  20f67e:	cc                   	int3   
  20f67f:	cc                   	int3   

000000000020f680 <_ZN4core3mem11size_of_val17h492ca49025244003E>:
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
  20f680:	48 83 ec 20          	sub    $0x20,%rsp
  20f684:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f689:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    // SAFETY: `val` is a reference, so it's a valid raw pointer
    unsafe { intrinsics::size_of_val(val) }
  20f68e:	48 c1 e6 00          	shl    $0x0,%rsi
  20f692:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f697:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f69c:	48 89 04 24          	mov    %rax,(%rsp)
  20f6a0:	48 8b 04 24          	mov    (%rsp),%rax
}
  20f6a4:	48 83 c4 20          	add    $0x20,%rsp
  20f6a8:	c3                   	retq   
  20f6a9:	cc                   	int3   
  20f6aa:	cc                   	int3   
  20f6ab:	cc                   	int3   
  20f6ac:	cc                   	int3   
  20f6ad:	cc                   	int3   
  20f6ae:	cc                   	int3   
  20f6af:	cc                   	int3   

000000000020f6b0 <_ZN4core3mem4drop17hf04176b36ca2e197E>:
///
/// [`RefCell`]: crate::cell::RefCell
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
pub fn drop<T>(_x: T) {}
  20f6b0:	50                   	push   %rax
  20f6b1:	e8 8a c2 ff ff       	callq  20b940 <_ZN4core3ptr47drop_in_place$LT$alloc..vec..Vec$LT$u64$GT$$GT$17h366995e978bb6b5fE>
  20f6b6:	58                   	pop    %rax
  20f6b7:	c3                   	retq   
  20f6b8:	cc                   	int3   
  20f6b9:	cc                   	int3   
  20f6ba:	cc                   	int3   
  20f6bb:	cc                   	int3   
  20f6bc:	cc                   	int3   
  20f6bd:	cc                   	int3   
  20f6be:	cc                   	int3   
  20f6bf:	cc                   	int3   

000000000020f6c0 <_ZN4core3mem7replace17h71040b40dccb5c97E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  20f6c0:	48 83 ec 38          	sub    $0x38,%rsp
  20f6c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20f6c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f6ce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f6d3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let result = ptr::read(dest);
  20f6d8:	e8 43 00 01 00       	callq  21f720 <_ZN4core3ptr4read17ha982fcfdc18f6787E>
  20f6dd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f6e2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f6e7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20f6ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  20f6f1:	e8 ca 00 01 00       	callq  21f7c0 <_ZN4core3ptr5write17ha68771186095c4e2E>
  20f6f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  20f6fb:	48 83 c4 38          	add    $0x38,%rsp
  20f6ff:	c3                   	retq   

000000000020f700 <_ZN4core3ptr8metadata14from_raw_parts17h4b6be9df4538dfecE>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
  20f700:	48 83 ec 30          	sub    $0x30,%rsp
  20f704:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f709:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  20f70e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f713:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f718:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f71d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f722:	48 89 0c 24          	mov    %rcx,(%rsp)
  20f726:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f72b:	48 8b 04 24          	mov    (%rsp),%rax
  20f72f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20f734:	48 83 c4 30          	add    $0x30,%rsp
  20f738:	c3                   	retq   
  20f739:	cc                   	int3   
  20f73a:	cc                   	int3   
  20f73b:	cc                   	int3   
  20f73c:	cc                   	int3   
  20f73d:	cc                   	int3   
  20f73e:	cc                   	int3   
  20f73f:	cc                   	int3   

000000000020f740 <_ZN4core3ptr8metadata14from_raw_parts17h9179a140a682e91aE>:
pub const fn from_raw_parts<T: ?Sized>(
  20f740:	48 83 ec 30          	sub    $0x30,%rsp
  20f744:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f749:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  20f74e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f753:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f758:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f75d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f762:	48 89 0c 24          	mov    %rcx,(%rsp)
  20f766:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f76b:	48 8b 04 24          	mov    (%rsp),%rax
  20f76f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20f774:	48 83 c4 30          	add    $0x30,%rsp
  20f778:	c3                   	retq   
  20f779:	cc                   	int3   
  20f77a:	cc                   	int3   
  20f77b:	cc                   	int3   
  20f77c:	cc                   	int3   
  20f77d:	cc                   	int3   
  20f77e:	cc                   	int3   
  20f77f:	cc                   	int3   

000000000020f780 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2c270490821ca612E>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
  20f780:	48 83 ec 30          	sub    $0x30,%rsp
  20f784:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f789:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  20f78e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f793:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f798:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f79d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f7a2:	48 89 0c 24          	mov    %rcx,(%rsp)
  20f7a6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f7ab:	48 8b 04 24          	mov    (%rsp),%rax
  20f7af:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20f7b4:	48 83 c4 30          	add    $0x30,%rsp
  20f7b8:	c3                   	retq   
  20f7b9:	cc                   	int3   
  20f7ba:	cc                   	int3   
  20f7bb:	cc                   	int3   
  20f7bc:	cc                   	int3   
  20f7bd:	cc                   	int3   
  20f7be:	cc                   	int3   
  20f7bf:	cc                   	int3   

000000000020f7c0 <_ZN4core3ptr8metadata18from_raw_parts_mut17hb0ed2208ea82b504E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  20f7c0:	48 83 ec 30          	sub    $0x30,%rsp
  20f7c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f7c9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  20f7ce:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f7d3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f7d8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f7dd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f7e2:	48 89 0c 24          	mov    %rcx,(%rsp)
  20f7e6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f7eb:	48 8b 04 24          	mov    (%rsp),%rax
  20f7ef:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20f7f4:	48 83 c4 30          	add    $0x30,%rsp
  20f7f8:	c3                   	retq   
  20f7f9:	cc                   	int3   
  20f7fa:	cc                   	int3   
  20f7fb:	cc                   	int3   
  20f7fc:	cc                   	int3   
  20f7fd:	cc                   	int3   
  20f7fe:	cc                   	int3   
  20f7ff:	cc                   	int3   

000000000020f800 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd84bf2ccf7ccd3a2E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  20f800:	48 83 ec 30          	sub    $0x30,%rsp
  20f804:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20f809:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  20f80e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f813:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20f818:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20f81d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f822:	48 89 0c 24          	mov    %rcx,(%rsp)
  20f826:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f82b:	48 8b 04 24          	mov    (%rsp),%rax
  20f82f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20f834:	48 83 c4 30          	add    $0x30,%rsp
  20f838:	c3                   	retq   
  20f839:	cc                   	int3   
  20f83a:	cc                   	int3   
  20f83b:	cc                   	int3   
  20f83c:	cc                   	int3   
  20f83d:	cc                   	int3   
  20f83e:	cc                   	int3   
  20f83f:	cc                   	int3   

000000000020f840 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
  20f840:	48 83 ec 20          	sub    $0x20,%rsp
  20f844:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f849:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
  20f84e:	48 89 3c 24          	mov    %rdi,(%rsp)
  20f852:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20f857:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  20f85c:	48 83 c4 20          	add    $0x20,%rsp
  20f860:	c3                   	retq   
  20f861:	cc                   	int3   
  20f862:	cc                   	int3   
  20f863:	cc                   	int3   
  20f864:	cc                   	int3   
  20f865:	cc                   	int3   
  20f866:	cc                   	int3   
  20f867:	cc                   	int3   
  20f868:	cc                   	int3   
  20f869:	cc                   	int3   
  20f86a:	cc                   	int3   
  20f86b:	cc                   	int3   
  20f86c:	cc                   	int3   
  20f86d:	cc                   	int3   
  20f86e:	cc                   	int3   
  20f86f:	cc                   	int3   

000000000020f870 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E>:
        }
    }
}

impl<T> From<Optional<T>> for Option<T> {
    fn from(optional: Optional<T>) -> Option<T> {
  20f870:	48 83 ec 28          	sub    $0x28,%rsp
  20f874:	89 3c 24             	mov    %edi,(%rsp)
  20f877:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match optional {
  20f87c:	8b 04 24             	mov    (%rsp),%eax
  20f87f:	48 85 c0             	test   %rax,%rax
  20f882:	74 06                	je     20f88a <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x1a>
  20f884:	eb 00                	jmp    20f886 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x16>
  20f886:	eb 1c                	jmp    20f8a4 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x34>
  20f888:	0f 0b                	ud2    
            Optional::Some(v) => Some(v),
  20f88a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f88f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f894:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f899:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  20f8a0:	00 00 
            Optional::None => None,
        }
    }
  20f8a2:	eb 09                	jmp    20f8ad <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E+0x3d>
            Optional::None => None,
  20f8a4:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20f8ab:	00 00 
    }
  20f8ad:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f8b2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20f8b7:	48 83 c4 28          	add    $0x28,%rsp
  20f8bb:	c3                   	retq   
  20f8bc:	cc                   	int3   
  20f8bd:	cc                   	int3   
  20f8be:	cc                   	int3   
  20f8bf:	cc                   	int3   

000000000020f8c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>:
    /// let x: Option<&str> = None;
    /// assert_eq!(x.ok_or(0), Err(0));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  20f8c0:	48 83 ec 28          	sub    $0x28,%rsp
  20f8c4:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  20f8c8:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  20f8cd:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
  20f8d2:	48 8b 04 24          	mov    (%rsp),%rax
  20f8d6:	48 85 c0             	test   %rax,%rax
  20f8d9:	0f 95 c0             	setne  %al
  20f8dc:	0f b6 c0             	movzbl %al,%eax
  20f8df:	74 06                	je     20f8e7 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x27>
  20f8e1:	eb 00                	jmp    20f8e3 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x23>
  20f8e3:	eb 12                	jmp    20f8f7 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x37>
  20f8e5:	0f 0b                	ud2    
            Some(v) => Ok(v),
            None => Err(err),
  20f8e7:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  20f8ec:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20f8f3:	00 00 
  20f8f5:	eb 0e                	jmp    20f905 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x45>
            Some(v) => Ok(v),
  20f8f7:	48 8b 04 24          	mov    (%rsp),%rax
  20f8fb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f900:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        }
    }
  20f905:	f6 44 24 17 01       	testb  $0x1,0x17(%rsp)
  20f90a:	75 0a                	jne    20f916 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x56>
  20f90c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f911:	48 83 c4 28          	add    $0x28,%rsp
  20f915:	c3                   	retq   
  20f916:	eb f4                	jmp    20f90c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE+0x4c>
  20f918:	cc                   	int3   
  20f919:	cc                   	int3   
  20f91a:	cc                   	int3   
  20f91b:	cc                   	int3   
  20f91c:	cc                   	int3   
  20f91d:	cc                   	int3   
  20f91e:	cc                   	int3   
  20f91f:	cc                   	int3   

000000000020f920 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  20f920:	48 83 ec 50          	sub    $0x50,%rsp
  20f924:	4c 89 04 24          	mov    %r8,(%rsp)
  20f928:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20f92d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20f932:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20f937:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20f93c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20f941:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20f946:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
        match self {
  20f94b:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20f950:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20f955:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20f95a:	48 85 c0             	test   %rax,%rax
  20f95d:	74 06                	je     20f965 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x45>
  20f95f:	eb 00                	jmp    20f961 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x41>
  20f961:	eb 26                	jmp    20f989 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x69>
  20f963:	0f 0b                	ud2    
  20f965:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20f96a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20f96e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => Err(err),
  20f973:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  20f978:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20f97c:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20f980:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  20f987:	eb 1a                	jmp    20f9a3 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x83>
  20f989:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Some(v) => Ok(v),
  20f98e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20f993:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  20f998:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20f99c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  20f9a3:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20f9a8:	75 0a                	jne    20f9b4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x94>
  20f9aa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20f9af:	48 83 c4 50          	add    $0x50,%rsp
  20f9b3:	c3                   	retq   
  20f9b4:	eb f4                	jmp    20f9aa <_ZN4core6option15Option$LT$T$GT$5ok_or17h7384bd840948c75fE+0x8a>
  20f9b6:	cc                   	int3   
  20f9b7:	cc                   	int3   
  20f9b8:	cc                   	int3   
  20f9b9:	cc                   	int3   
  20f9ba:	cc                   	int3   
  20f9bb:	cc                   	int3   
  20f9bc:	cc                   	int3   
  20f9bd:	cc                   	int3   
  20f9be:	cc                   	int3   
  20f9bf:	cc                   	int3   

000000000020f9c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
  20f9c0:	48 83 ec 38          	sub    $0x38,%rsp
  20f9c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20f9c8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match self {
  20f9cd:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  20f9d2:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  20f9d7:	48 8b 04 24          	mov    (%rsp),%rax
  20f9db:	48 85 c0             	test   %rax,%rax
  20f9de:	74 06                	je     20f9e6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x26>
  20f9e0:	eb 00                	jmp    20f9e2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x22>
  20f9e2:	eb 12                	jmp    20f9f6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x36>
  20f9e4:	0f 0b                	ud2    
            None => Err(err),
  20f9e6:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  20f9eb:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  20f9f2:	00 00 
  20f9f4:	eb 18                	jmp    20fa0e <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x4e>
            Some(v) => Ok(v),
  20f9f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20f9fb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20fa00:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fa05:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20fa0c:	00 00 
    }
  20fa0e:	f6 44 24 27 01       	testb  $0x1,0x27(%rsp)
  20fa13:	75 0f                	jne    20fa24 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x64>
  20fa15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20fa1a:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20fa1f:	48 83 c4 38          	add    $0x38,%rsp
  20fa23:	c3                   	retq   
  20fa24:	eb ef                	jmp    20fa15 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE+0x55>
  20fa26:	cc                   	int3   
  20fa27:	cc                   	int3   
  20fa28:	cc                   	int3   
  20fa29:	cc                   	int3   
  20fa2a:	cc                   	int3   
  20fa2b:	cc                   	int3   
  20fa2c:	cc                   	int3   
  20fa2d:	cc                   	int3   
  20fa2e:	cc                   	int3   
  20fa2f:	cc                   	int3   

000000000020fa30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fa30:	48 83 ec 20          	sub    $0x20,%rsp
  20fa34:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fa38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fa3d:	48 8b 07             	mov    (%rdi),%rax
  20fa40:	48 85 c0             	test   %rax,%rax
  20fa43:	74 06                	je     20fa4b <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x1b>
  20fa45:	eb 00                	jmp    20fa47 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x17>
  20fa47:	eb 0d                	jmp    20fa56 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x26>
  20fa49:	0f 0b                	ud2    
            None => None,
  20fa4b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fa52:	00 00 
  20fa54:	eb 12                	jmp    20fa68 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0ee8ba7bcc28de10E+0x38>
  20fa56:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fa5a:	48 83 c0 08          	add    $0x8,%rax
  20fa5e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fa63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fa68:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fa6d:	48 83 c4 20          	add    $0x20,%rsp
  20fa71:	c3                   	retq   
  20fa72:	cc                   	int3   
  20fa73:	cc                   	int3   
  20fa74:	cc                   	int3   
  20fa75:	cc                   	int3   
  20fa76:	cc                   	int3   
  20fa77:	cc                   	int3   
  20fa78:	cc                   	int3   
  20fa79:	cc                   	int3   
  20fa7a:	cc                   	int3   
  20fa7b:	cc                   	int3   
  20fa7c:	cc                   	int3   
  20fa7d:	cc                   	int3   
  20fa7e:	cc                   	int3   
  20fa7f:	cc                   	int3   

000000000020fa80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fa80:	48 83 ec 20          	sub    $0x20,%rsp
  20fa84:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fa88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fa8d:	48 8b 07             	mov    (%rdi),%rax
  20fa90:	48 85 c0             	test   %rax,%rax
  20fa93:	74 06                	je     20fa9b <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x1b>
  20fa95:	eb 00                	jmp    20fa97 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x17>
  20fa97:	eb 0d                	jmp    20faa6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x26>
  20fa99:	0f 0b                	ud2    
            None => None,
  20fa9b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20faa2:	00 00 
  20faa4:	eb 12                	jmp    20fab8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h17cf49e35d0fd400E+0x38>
  20faa6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20faaa:	48 83 c0 08          	add    $0x8,%rax
  20faae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fab3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fab8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fabd:	48 83 c4 20          	add    $0x20,%rsp
  20fac1:	c3                   	retq   
  20fac2:	cc                   	int3   
  20fac3:	cc                   	int3   
  20fac4:	cc                   	int3   
  20fac5:	cc                   	int3   
  20fac6:	cc                   	int3   
  20fac7:	cc                   	int3   
  20fac8:	cc                   	int3   
  20fac9:	cc                   	int3   
  20faca:	cc                   	int3   
  20facb:	cc                   	int3   
  20facc:	cc                   	int3   
  20facd:	cc                   	int3   
  20face:	cc                   	int3   
  20facf:	cc                   	int3   

000000000020fad0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fad0:	48 83 ec 20          	sub    $0x20,%rsp
  20fad4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fad8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fadd:	48 8b 07             	mov    (%rdi),%rax
  20fae0:	48 85 c0             	test   %rax,%rax
  20fae3:	74 06                	je     20faeb <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x1b>
  20fae5:	eb 00                	jmp    20fae7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x17>
  20fae7:	eb 0d                	jmp    20faf6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x26>
  20fae9:	0f 0b                	ud2    
            None => None,
  20faeb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20faf2:	00 00 
  20faf4:	eb 12                	jmp    20fb08 <_ZN4core6option15Option$LT$T$GT$6as_ref17h24acb832fca4f424E+0x38>
  20faf6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fafa:	48 83 c0 08          	add    $0x8,%rax
  20fafe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fb03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fb08:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fb0d:	48 83 c4 20          	add    $0x20,%rsp
  20fb11:	c3                   	retq   
  20fb12:	cc                   	int3   
  20fb13:	cc                   	int3   
  20fb14:	cc                   	int3   
  20fb15:	cc                   	int3   
  20fb16:	cc                   	int3   
  20fb17:	cc                   	int3   
  20fb18:	cc                   	int3   
  20fb19:	cc                   	int3   
  20fb1a:	cc                   	int3   
  20fb1b:	cc                   	int3   
  20fb1c:	cc                   	int3   
  20fb1d:	cc                   	int3   
  20fb1e:	cc                   	int3   
  20fb1f:	cc                   	int3   

000000000020fb20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fb20:	48 83 ec 20          	sub    $0x20,%rsp
  20fb24:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fb28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fb2d:	48 8b 07             	mov    (%rdi),%rax
  20fb30:	48 85 c0             	test   %rax,%rax
  20fb33:	74 06                	je     20fb3b <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x1b>
  20fb35:	eb 00                	jmp    20fb37 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x17>
  20fb37:	eb 0d                	jmp    20fb46 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x26>
  20fb39:	0f 0b                	ud2    
            None => None,
  20fb3b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fb42:	00 00 
  20fb44:	eb 12                	jmp    20fb58 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E+0x38>
  20fb46:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fb4a:	48 83 c0 08          	add    $0x8,%rax
  20fb4e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fb53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fb58:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fb5d:	48 83 c4 20          	add    $0x20,%rsp
  20fb61:	c3                   	retq   
  20fb62:	cc                   	int3   
  20fb63:	cc                   	int3   
  20fb64:	cc                   	int3   
  20fb65:	cc                   	int3   
  20fb66:	cc                   	int3   
  20fb67:	cc                   	int3   
  20fb68:	cc                   	int3   
  20fb69:	cc                   	int3   
  20fb6a:	cc                   	int3   
  20fb6b:	cc                   	int3   
  20fb6c:	cc                   	int3   
  20fb6d:	cc                   	int3   
  20fb6e:	cc                   	int3   
  20fb6f:	cc                   	int3   

000000000020fb70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fb70:	48 83 ec 20          	sub    $0x20,%rsp
  20fb74:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fb78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fb7d:	48 8b 07             	mov    (%rdi),%rax
  20fb80:	48 85 c0             	test   %rax,%rax
  20fb83:	74 06                	je     20fb8b <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x1b>
  20fb85:	eb 00                	jmp    20fb87 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x17>
  20fb87:	eb 0d                	jmp    20fb96 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x26>
  20fb89:	0f 0b                	ud2    
            None => None,
  20fb8b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fb92:	00 00 
  20fb94:	eb 12                	jmp    20fba8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h54bf836e16b7bec2E+0x38>
  20fb96:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fb9a:	48 83 c0 08          	add    $0x8,%rax
  20fb9e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fba3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fba8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fbad:	48 83 c4 20          	add    $0x20,%rsp
  20fbb1:	c3                   	retq   
  20fbb2:	cc                   	int3   
  20fbb3:	cc                   	int3   
  20fbb4:	cc                   	int3   
  20fbb5:	cc                   	int3   
  20fbb6:	cc                   	int3   
  20fbb7:	cc                   	int3   
  20fbb8:	cc                   	int3   
  20fbb9:	cc                   	int3   
  20fbba:	cc                   	int3   
  20fbbb:	cc                   	int3   
  20fbbc:	cc                   	int3   
  20fbbd:	cc                   	int3   
  20fbbe:	cc                   	int3   
  20fbbf:	cc                   	int3   

000000000020fbc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fbc0:	48 83 ec 20          	sub    $0x20,%rsp
  20fbc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fbc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fbcd:	48 8b 07             	mov    (%rdi),%rax
  20fbd0:	48 85 c0             	test   %rax,%rax
  20fbd3:	74 06                	je     20fbdb <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x1b>
  20fbd5:	eb 00                	jmp    20fbd7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x17>
  20fbd7:	eb 0d                	jmp    20fbe6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x26>
  20fbd9:	0f 0b                	ud2    
            None => None,
  20fbdb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fbe2:	00 00 
  20fbe4:	eb 12                	jmp    20fbf8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c653500a3fd0aa0E+0x38>
  20fbe6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fbea:	48 83 c0 08          	add    $0x8,%rax
  20fbee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fbf3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fbf8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fbfd:	48 83 c4 20          	add    $0x20,%rsp
  20fc01:	c3                   	retq   
  20fc02:	cc                   	int3   
  20fc03:	cc                   	int3   
  20fc04:	cc                   	int3   
  20fc05:	cc                   	int3   
  20fc06:	cc                   	int3   
  20fc07:	cc                   	int3   
  20fc08:	cc                   	int3   
  20fc09:	cc                   	int3   
  20fc0a:	cc                   	int3   
  20fc0b:	cc                   	int3   
  20fc0c:	cc                   	int3   
  20fc0d:	cc                   	int3   
  20fc0e:	cc                   	int3   
  20fc0f:	cc                   	int3   

000000000020fc10 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fc10:	48 83 ec 20          	sub    $0x20,%rsp
  20fc14:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fc18:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fc1d:	48 8b 07             	mov    (%rdi),%rax
  20fc20:	48 85 c0             	test   %rax,%rax
  20fc23:	74 06                	je     20fc2b <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x1b>
  20fc25:	eb 00                	jmp    20fc27 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x17>
  20fc27:	eb 0d                	jmp    20fc36 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x26>
  20fc29:	0f 0b                	ud2    
            None => None,
  20fc2b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fc32:	00 00 
  20fc34:	eb 12                	jmp    20fc48 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6bbc2bc8695b447bE+0x38>
  20fc36:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fc3a:	48 83 c0 08          	add    $0x8,%rax
  20fc3e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fc43:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fc48:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fc4d:	48 83 c4 20          	add    $0x20,%rsp
  20fc51:	c3                   	retq   
  20fc52:	cc                   	int3   
  20fc53:	cc                   	int3   
  20fc54:	cc                   	int3   
  20fc55:	cc                   	int3   
  20fc56:	cc                   	int3   
  20fc57:	cc                   	int3   
  20fc58:	cc                   	int3   
  20fc59:	cc                   	int3   
  20fc5a:	cc                   	int3   
  20fc5b:	cc                   	int3   
  20fc5c:	cc                   	int3   
  20fc5d:	cc                   	int3   
  20fc5e:	cc                   	int3   
  20fc5f:	cc                   	int3   

000000000020fc60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fc60:	48 83 ec 20          	sub    $0x20,%rsp
  20fc64:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fc68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fc6d:	48 8b 07             	mov    (%rdi),%rax
  20fc70:	48 85 c0             	test   %rax,%rax
  20fc73:	74 06                	je     20fc7b <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x1b>
  20fc75:	eb 00                	jmp    20fc77 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x17>
  20fc77:	eb 0d                	jmp    20fc86 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x26>
  20fc79:	0f 0b                	ud2    
            None => None,
  20fc7b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fc82:	00 00 
  20fc84:	eb 12                	jmp    20fc98 <_ZN4core6option15Option$LT$T$GT$6as_ref17h744e427231c2c993E+0x38>
  20fc86:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fc8a:	48 83 c0 08          	add    $0x8,%rax
  20fc8e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fc93:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fc98:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fc9d:	48 83 c4 20          	add    $0x20,%rsp
  20fca1:	c3                   	retq   
  20fca2:	cc                   	int3   
  20fca3:	cc                   	int3   
  20fca4:	cc                   	int3   
  20fca5:	cc                   	int3   
  20fca6:	cc                   	int3   
  20fca7:	cc                   	int3   
  20fca8:	cc                   	int3   
  20fca9:	cc                   	int3   
  20fcaa:	cc                   	int3   
  20fcab:	cc                   	int3   
  20fcac:	cc                   	int3   
  20fcad:	cc                   	int3   
  20fcae:	cc                   	int3   
  20fcaf:	cc                   	int3   

000000000020fcb0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fcb0:	48 83 ec 20          	sub    $0x20,%rsp
  20fcb4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fcb8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fcbd:	0f b6 07             	movzbl (%rdi),%eax
  20fcc0:	a8 01                	test   $0x1,%al
  20fcc2:	74 06                	je     20fcca <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE+0x1a>
  20fcc4:	eb 00                	jmp    20fcc6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE+0x16>
  20fcc6:	eb 0d                	jmp    20fcd5 <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE+0x25>
  20fcc8:	0f 0b                	ud2    
            None => None,
  20fcca:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fcd1:	00 00 
  20fcd3:	eb 12                	jmp    20fce7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h7c383406a1b7ad2fE+0x37>
  20fcd5:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fcd9:	48 83 c0 10          	add    $0x10,%rax
  20fcdd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fce2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fce7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fcec:	48 83 c4 20          	add    $0x20,%rsp
  20fcf0:	c3                   	retq   
  20fcf1:	cc                   	int3   
  20fcf2:	cc                   	int3   
  20fcf3:	cc                   	int3   
  20fcf4:	cc                   	int3   
  20fcf5:	cc                   	int3   
  20fcf6:	cc                   	int3   
  20fcf7:	cc                   	int3   
  20fcf8:	cc                   	int3   
  20fcf9:	cc                   	int3   
  20fcfa:	cc                   	int3   
  20fcfb:	cc                   	int3   
  20fcfc:	cc                   	int3   
  20fcfd:	cc                   	int3   
  20fcfe:	cc                   	int3   
  20fcff:	cc                   	int3   

000000000020fd00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fd00:	48 83 ec 20          	sub    $0x20,%rsp
  20fd04:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fd08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fd0d:	48 8b 07             	mov    (%rdi),%rax
  20fd10:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20fd14:	0f 95 c0             	setne  %al
  20fd17:	0f b6 c0             	movzbl %al,%eax
  20fd1a:	74 06                	je     20fd22 <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x22>
  20fd1c:	eb 00                	jmp    20fd1e <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x1e>
  20fd1e:	eb 0d                	jmp    20fd2d <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x2d>
  20fd20:	0f 0b                	ud2    
            None => None,
  20fd22:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fd29:	00 00 
  20fd2b:	eb 0e                	jmp    20fd3b <_ZN4core6option15Option$LT$T$GT$6as_ref17h869a201502673139E+0x3b>
  20fd2d:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fd31:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fd36:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fd3b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fd40:	48 83 c4 20          	add    $0x20,%rsp
  20fd44:	c3                   	retq   
  20fd45:	cc                   	int3   
  20fd46:	cc                   	int3   
  20fd47:	cc                   	int3   
  20fd48:	cc                   	int3   
  20fd49:	cc                   	int3   
  20fd4a:	cc                   	int3   
  20fd4b:	cc                   	int3   
  20fd4c:	cc                   	int3   
  20fd4d:	cc                   	int3   
  20fd4e:	cc                   	int3   
  20fd4f:	cc                   	int3   

000000000020fd50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fd50:	48 83 ec 20          	sub    $0x20,%rsp
  20fd54:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fd58:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fd5d:	8a 87 88 01 00 00    	mov    0x188(%rdi),%al
  20fd63:	04 fe                	add    $0xfe,%al
  20fd65:	0f 95 c0             	setne  %al
  20fd68:	0f b6 c0             	movzbl %al,%eax
  20fd6b:	74 06                	je     20fd73 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x23>
  20fd6d:	eb 00                	jmp    20fd6f <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x1f>
  20fd6f:	eb 0d                	jmp    20fd7e <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x2e>
  20fd71:	0f 0b                	ud2    
            None => None,
  20fd73:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fd7a:	00 00 
  20fd7c:	eb 0e                	jmp    20fd8c <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE+0x3c>
  20fd7e:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fd82:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fd87:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fd8c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fd91:	48 83 c4 20          	add    $0x20,%rsp
  20fd95:	c3                   	retq   
  20fd96:	cc                   	int3   
  20fd97:	cc                   	int3   
  20fd98:	cc                   	int3   
  20fd99:	cc                   	int3   
  20fd9a:	cc                   	int3   
  20fd9b:	cc                   	int3   
  20fd9c:	cc                   	int3   
  20fd9d:	cc                   	int3   
  20fd9e:	cc                   	int3   
  20fd9f:	cc                   	int3   

000000000020fda0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fda0:	48 83 ec 20          	sub    $0x20,%rsp
  20fda4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fda8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fdad:	8b 07                	mov    (%rdi),%eax
  20fdaf:	48 85 c0             	test   %rax,%rax
  20fdb2:	74 06                	je     20fdba <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x1a>
  20fdb4:	eb 00                	jmp    20fdb6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x16>
  20fdb6:	eb 0d                	jmp    20fdc5 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x25>
  20fdb8:	0f 0b                	ud2    
            None => None,
  20fdba:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fdc1:	00 00 
  20fdc3:	eb 12                	jmp    20fdd7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h956cd7b527caff4aE+0x37>
  20fdc5:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fdc9:	48 83 c0 04          	add    $0x4,%rax
  20fdcd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fdd2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fdd7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fddc:	48 83 c4 20          	add    $0x20,%rsp
  20fde0:	c3                   	retq   
  20fde1:	cc                   	int3   
  20fde2:	cc                   	int3   
  20fde3:	cc                   	int3   
  20fde4:	cc                   	int3   
  20fde5:	cc                   	int3   
  20fde6:	cc                   	int3   
  20fde7:	cc                   	int3   
  20fde8:	cc                   	int3   
  20fde9:	cc                   	int3   
  20fdea:	cc                   	int3   
  20fdeb:	cc                   	int3   
  20fdec:	cc                   	int3   
  20fded:	cc                   	int3   
  20fdee:	cc                   	int3   
  20fdef:	cc                   	int3   

000000000020fdf0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fdf0:	48 83 ec 20          	sub    $0x20,%rsp
  20fdf4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fdf8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fdfd:	48 8b 07             	mov    (%rdi),%rax
  20fe00:	48 85 c0             	test   %rax,%rax
  20fe03:	74 06                	je     20fe0b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x1b>
  20fe05:	eb 00                	jmp    20fe07 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x17>
  20fe07:	eb 0d                	jmp    20fe16 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x26>
  20fe09:	0f 0b                	ud2    
            None => None,
  20fe0b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fe12:	00 00 
  20fe14:	eb 12                	jmp    20fe28 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E+0x38>
  20fe16:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fe1a:	48 83 c0 08          	add    $0x8,%rax
  20fe1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fe23:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fe28:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fe2d:	48 83 c4 20          	add    $0x20,%rsp
  20fe31:	c3                   	retq   
  20fe32:	cc                   	int3   
  20fe33:	cc                   	int3   
  20fe34:	cc                   	int3   
  20fe35:	cc                   	int3   
  20fe36:	cc                   	int3   
  20fe37:	cc                   	int3   
  20fe38:	cc                   	int3   
  20fe39:	cc                   	int3   
  20fe3a:	cc                   	int3   
  20fe3b:	cc                   	int3   
  20fe3c:	cc                   	int3   
  20fe3d:	cc                   	int3   
  20fe3e:	cc                   	int3   
  20fe3f:	cc                   	int3   

000000000020fe40 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fe40:	48 83 ec 20          	sub    $0x20,%rsp
  20fe44:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fe48:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fe4d:	48 8b 07             	mov    (%rdi),%rax
  20fe50:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20fe54:	0f 95 c0             	setne  %al
  20fe57:	0f b6 c0             	movzbl %al,%eax
  20fe5a:	74 06                	je     20fe62 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x22>
  20fe5c:	eb 00                	jmp    20fe5e <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x1e>
  20fe5e:	eb 0d                	jmp    20fe6d <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x2d>
  20fe60:	0f 0b                	ud2    
            None => None,
  20fe62:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20fe69:	00 00 
  20fe6b:	eb 0e                	jmp    20fe7b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb35bb97eeb56c777E+0x3b>
  20fe6d:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20fe71:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fe76:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fe7b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fe80:	48 83 c4 20          	add    $0x20,%rsp
  20fe84:	c3                   	retq   
  20fe85:	cc                   	int3   
  20fe86:	cc                   	int3   
  20fe87:	cc                   	int3   
  20fe88:	cc                   	int3   
  20fe89:	cc                   	int3   
  20fe8a:	cc                   	int3   
  20fe8b:	cc                   	int3   
  20fe8c:	cc                   	int3   
  20fe8d:	cc                   	int3   
  20fe8e:	cc                   	int3   
  20fe8f:	cc                   	int3   

000000000020fe90 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fe90:	48 83 ec 20          	sub    $0x20,%rsp
  20fe94:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fe98:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20fe9d:	48 8b 07             	mov    (%rdi),%rax
  20fea0:	48 85 c0             	test   %rax,%rax
  20fea3:	74 06                	je     20feab <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x1b>
  20fea5:	eb 00                	jmp    20fea7 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x17>
  20fea7:	eb 0d                	jmp    20feb6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x26>
  20fea9:	0f 0b                	ud2    
            None => None,
  20feab:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20feb2:	00 00 
  20feb4:	eb 12                	jmp    20fec8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hbe28c6a2829d4cdcE+0x38>
  20feb6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20feba:	48 83 c0 08          	add    $0x8,%rax
  20febe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20fec3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20fec8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20fecd:	48 83 c4 20          	add    $0x20,%rsp
  20fed1:	c3                   	retq   
  20fed2:	cc                   	int3   
  20fed3:	cc                   	int3   
  20fed4:	cc                   	int3   
  20fed5:	cc                   	int3   
  20fed6:	cc                   	int3   
  20fed7:	cc                   	int3   
  20fed8:	cc                   	int3   
  20fed9:	cc                   	int3   
  20feda:	cc                   	int3   
  20fedb:	cc                   	int3   
  20fedc:	cc                   	int3   
  20fedd:	cc                   	int3   
  20fede:	cc                   	int3   
  20fedf:	cc                   	int3   

000000000020fee0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20fee0:	48 83 ec 20          	sub    $0x20,%rsp
  20fee4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20fee8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20feed:	0f b6 07             	movzbl (%rdi),%eax
  20fef0:	a8 01                	test   $0x1,%al
  20fef2:	74 06                	je     20fefa <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x1a>
  20fef4:	eb 00                	jmp    20fef6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x16>
  20fef6:	eb 0d                	jmp    20ff05 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x25>
  20fef8:	0f 0b                	ud2    
            None => None,
  20fefa:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20ff01:	00 00 
  20ff03:	eb 12                	jmp    20ff17 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc92747ec39937958E+0x37>
  20ff05:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20ff09:	48 83 c0 01          	add    $0x1,%rax
  20ff0d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ff12:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20ff17:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ff1c:	48 83 c4 20          	add    $0x20,%rsp
  20ff20:	c3                   	retq   
  20ff21:	cc                   	int3   
  20ff22:	cc                   	int3   
  20ff23:	cc                   	int3   
  20ff24:	cc                   	int3   
  20ff25:	cc                   	int3   
  20ff26:	cc                   	int3   
  20ff27:	cc                   	int3   
  20ff28:	cc                   	int3   
  20ff29:	cc                   	int3   
  20ff2a:	cc                   	int3   
  20ff2b:	cc                   	int3   
  20ff2c:	cc                   	int3   
  20ff2d:	cc                   	int3   
  20ff2e:	cc                   	int3   
  20ff2f:	cc                   	int3   

000000000020ff30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E>:
    pub const fn as_ref(&self) -> Option<&T> {
  20ff30:	48 83 ec 20          	sub    $0x20,%rsp
  20ff34:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ff38:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20ff3d:	48 8b 07             	mov    (%rdi),%rax
  20ff40:	48 85 c0             	test   %rax,%rax
  20ff43:	74 06                	je     20ff4b <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x1b>
  20ff45:	eb 00                	jmp    20ff47 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x17>
  20ff47:	eb 0d                	jmp    20ff56 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x26>
  20ff49:	0f 0b                	ud2    
            None => None,
  20ff4b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20ff52:	00 00 
  20ff54:	eb 12                	jmp    20ff68 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc3ddfbb88038435E+0x38>
  20ff56:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20ff5a:	48 83 c0 08          	add    $0x8,%rax
  20ff5e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ff63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20ff68:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ff6d:	48 83 c4 20          	add    $0x20,%rsp
  20ff71:	c3                   	retq   
  20ff72:	cc                   	int3   
  20ff73:	cc                   	int3   
  20ff74:	cc                   	int3   
  20ff75:	cc                   	int3   
  20ff76:	cc                   	int3   
  20ff77:	cc                   	int3   
  20ff78:	cc                   	int3   
  20ff79:	cc                   	int3   
  20ff7a:	cc                   	int3   
  20ff7b:	cc                   	int3   
  20ff7c:	cc                   	int3   
  20ff7d:	cc                   	int3   
  20ff7e:	cc                   	int3   
  20ff7f:	cc                   	int3   

000000000020ff80 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE>:
    pub const fn as_ref(&self) -> Option<&T> {
  20ff80:	48 83 ec 20          	sub    $0x20,%rsp
  20ff84:	48 89 3c 24          	mov    %rdi,(%rsp)
  20ff88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20ff8d:	48 8b 07             	mov    (%rdi),%rax
  20ff90:	48 85 c0             	test   %rax,%rax
  20ff93:	74 06                	je     20ff9b <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x1b>
  20ff95:	eb 00                	jmp    20ff97 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x17>
  20ff97:	eb 0d                	jmp    20ffa6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x26>
  20ff99:	0f 0b                	ud2    
            None => None,
  20ff9b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  20ffa2:	00 00 
  20ffa4:	eb 12                	jmp    20ffb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hee3bba84a1ade49eE+0x38>
  20ffa6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20ffaa:	48 83 c0 08          	add    $0x8,%rax
  20ffae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ffb3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  20ffb8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ffbd:	48 83 c4 20          	add    $0x20,%rsp
  20ffc1:	c3                   	retq   
  20ffc2:	cc                   	int3   
  20ffc3:	cc                   	int3   
  20ffc4:	cc                   	int3   
  20ffc5:	cc                   	int3   
  20ffc6:	cc                   	int3   
  20ffc7:	cc                   	int3   
  20ffc8:	cc                   	int3   
  20ffc9:	cc                   	int3   
  20ffca:	cc                   	int3   
  20ffcb:	cc                   	int3   
  20ffcc:	cc                   	int3   
  20ffcd:	cc                   	int3   
  20ffce:	cc                   	int3   
  20ffcf:	cc                   	int3   

000000000020ffd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>:
    pub const fn unwrap(self) -> T {
  20ffd0:	48 83 ec 18          	sub    $0x18,%rsp
  20ffd4:	48 89 34 24          	mov    %rsi,(%rsp)
  20ffd8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20ffdd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ffe2:	48 85 c0             	test   %rax,%rax
  20ffe5:	0f 95 c0             	setne  %al
  20ffe8:	0f b6 c0             	movzbl %al,%eax
  20ffeb:	74 06                	je     20fff3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x23>
  20ffed:	eb 00                	jmp    20ffef <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x1f>
  20ffef:	eb 19                	jmp    21000a <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E+0x3a>
  20fff1:	0f 0b                	ud2    
  20fff3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  20fff7:	48 8d 3d 06 0a ff ff 	lea    -0xf5fa(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  20fffe:	be 2b 00 00 00       	mov    $0x2b,%esi
  210003:	e8 58 34 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210008:	0f 0b                	ud2    
            Some(val) => val,
  21000a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21000f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  210014:	48 83 c4 18          	add    $0x18,%rsp
  210018:	c3                   	retq   
  210019:	cc                   	int3   
  21001a:	cc                   	int3   
  21001b:	cc                   	int3   
  21001c:	cc                   	int3   
  21001d:	cc                   	int3   
  21001e:	cc                   	int3   
  21001f:	cc                   	int3   

0000000000210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>:
    pub const fn unwrap(self) -> T {
  210020:	48 83 ec 28          	sub    $0x28,%rsp
  210024:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210029:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21002e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  210033:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210038:	48 85 c0             	test   %rax,%rax
  21003b:	74 06                	je     210043 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x23>
  21003d:	eb 00                	jmp    21003f <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x1f>
  21003f:	eb 1a                	jmp    21005b <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE+0x3b>
  210041:	0f 0b                	ud2    
  210043:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210048:	48 8d 3d b5 09 ff ff 	lea    -0xf64b(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21004f:	be 2b 00 00 00       	mov    $0x2b,%esi
  210054:	e8 07 34 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210059:	0f 0b                	ud2    
            Some(val) => val,
  21005b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210060:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  210065:	48 83 c4 28          	add    $0x28,%rsp
  210069:	c3                   	retq   
  21006a:	cc                   	int3   
  21006b:	cc                   	int3   
  21006c:	cc                   	int3   
  21006d:	cc                   	int3   
  21006e:	cc                   	int3   
  21006f:	cc                   	int3   

0000000000210070 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E>:
    pub const fn unwrap(self) -> T {
  210070:	48 83 ec 18          	sub    $0x18,%rsp
  210074:	48 89 34 24          	mov    %rsi,(%rsp)
  210078:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  21007d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210082:	48 85 c0             	test   %rax,%rax
  210085:	0f 95 c0             	setne  %al
  210088:	0f b6 c0             	movzbl %al,%eax
  21008b:	74 06                	je     210093 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x23>
  21008d:	eb 00                	jmp    21008f <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x1f>
  21008f:	eb 19                	jmp    2100aa <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E+0x3a>
  210091:	0f 0b                	ud2    
  210093:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210097:	48 8d 3d 66 09 ff ff 	lea    -0xf69a(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21009e:	be 2b 00 00 00       	mov    $0x2b,%esi
  2100a3:	e8 b8 33 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2100a8:	0f 0b                	ud2    
            Some(val) => val,
  2100aa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2100af:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2100b4:	48 83 c4 18          	add    $0x18,%rsp
  2100b8:	c3                   	retq   
  2100b9:	cc                   	int3   
  2100ba:	cc                   	int3   
  2100bb:	cc                   	int3   
  2100bc:	cc                   	int3   
  2100bd:	cc                   	int3   
  2100be:	cc                   	int3   
  2100bf:	cc                   	int3   

00000000002100c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E>:
    pub const fn unwrap(self) -> T {
  2100c0:	48 83 ec 18          	sub    $0x18,%rsp
  2100c4:	48 89 34 24          	mov    %rsi,(%rsp)
  2100c8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2100cd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2100d2:	48 85 c0             	test   %rax,%rax
  2100d5:	0f 95 c0             	setne  %al
  2100d8:	0f b6 c0             	movzbl %al,%eax
  2100db:	74 06                	je     2100e3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x23>
  2100dd:	eb 00                	jmp    2100df <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x1f>
  2100df:	eb 19                	jmp    2100fa <_ZN4core6option15Option$LT$T$GT$6unwrap17h351fea3b048cbc86E+0x3a>
  2100e1:	0f 0b                	ud2    
  2100e3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2100e7:	48 8d 3d 16 09 ff ff 	lea    -0xf6ea(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  2100ee:	be 2b 00 00 00       	mov    $0x2b,%esi
  2100f3:	e8 68 33 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2100f8:	0f 0b                	ud2    
            Some(val) => val,
  2100fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2100ff:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  210104:	48 83 c4 18          	add    $0x18,%rsp
  210108:	c3                   	retq   
  210109:	cc                   	int3   
  21010a:	cc                   	int3   
  21010b:	cc                   	int3   
  21010c:	cc                   	int3   
  21010d:	cc                   	int3   
  21010e:	cc                   	int3   
  21010f:	cc                   	int3   

0000000000210110 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE>:
    pub const fn unwrap(self) -> T {
  210110:	48 83 ec 38          	sub    $0x38,%rsp
  210114:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210119:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21011e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  210123:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210128:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21012d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  210132:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match self {
  210137:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21013c:	48 85 c0             	test   %rax,%rax
  21013f:	74 06                	je     210147 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x37>
  210141:	eb 00                	jmp    210143 <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x33>
  210143:	eb 1a                	jmp    21015f <_ZN4core6option15Option$LT$T$GT$6unwrap17h3c3a6a3475270b7dE+0x4f>
  210145:	0f 0b                	ud2    
  210147:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  21014c:	48 8d 3d b1 08 ff ff 	lea    -0xf74f(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  210153:	be 2b 00 00 00       	mov    $0x2b,%esi
  210158:	e8 03 33 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21015d:	0f 0b                	ud2    
            Some(val) => val,
  21015f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210164:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  210169:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21016e:	48 83 c4 38          	add    $0x38,%rsp
  210172:	c3                   	retq   
  210173:	cc                   	int3   
  210174:	cc                   	int3   
  210175:	cc                   	int3   
  210176:	cc                   	int3   
  210177:	cc                   	int3   
  210178:	cc                   	int3   
  210179:	cc                   	int3   
  21017a:	cc                   	int3   
  21017b:	cc                   	int3   
  21017c:	cc                   	int3   
  21017d:	cc                   	int3   
  21017e:	cc                   	int3   
  21017f:	cc                   	int3   

0000000000210180 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E>:
    pub const fn unwrap(self) -> T {
  210180:	48 83 ec 28          	sub    $0x28,%rsp
  210184:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210189:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21018e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210193:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match self {
  210198:	8b 46 18             	mov    0x18(%rsi),%eax
  21019b:	83 c0 fd             	add    $0xfffffffd,%eax
  21019e:	0f 95 c0             	setne  %al
  2101a1:	0f b6 c0             	movzbl %al,%eax
  2101a4:	74 06                	je     2101ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x2c>
  2101a6:	eb 00                	jmp    2101a8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x28>
  2101a8:	eb 1a                	jmp    2101c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E+0x44>
  2101aa:	0f 0b                	ud2    
  2101ac:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2101b1:	48 8d 3d 4c 08 ff ff 	lea    -0xf7b4(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  2101b8:	be 2b 00 00 00       	mov    $0x2b,%esi
  2101bd:	e8 9e 32 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2101c2:	0f 0b                	ud2    
  2101c4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2101c9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
            Some(val) => val,
  2101ce:	ba 30 00 00 00       	mov    $0x30,%edx
  2101d3:	e8 88 63 02 00       	callq  236560 <memcpy>
  2101d8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  2101dd:	48 83 c4 28          	add    $0x28,%rsp
  2101e1:	c3                   	retq   
  2101e2:	cc                   	int3   
  2101e3:	cc                   	int3   
  2101e4:	cc                   	int3   
  2101e5:	cc                   	int3   
  2101e6:	cc                   	int3   
  2101e7:	cc                   	int3   
  2101e8:	cc                   	int3   
  2101e9:	cc                   	int3   
  2101ea:	cc                   	int3   
  2101eb:	cc                   	int3   
  2101ec:	cc                   	int3   
  2101ed:	cc                   	int3   
  2101ee:	cc                   	int3   
  2101ef:	cc                   	int3   

00000000002101f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE>:
    pub const fn unwrap(self) -> T {
  2101f0:	48 83 ec 18          	sub    $0x18,%rsp
  2101f4:	48 89 34 24          	mov    %rsi,(%rsp)
  2101f8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2101fd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210202:	48 85 c0             	test   %rax,%rax
  210205:	0f 95 c0             	setne  %al
  210208:	0f b6 c0             	movzbl %al,%eax
  21020b:	74 06                	je     210213 <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x23>
  21020d:	eb 00                	jmp    21020f <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x1f>
  21020f:	eb 19                	jmp    21022a <_ZN4core6option15Option$LT$T$GT$6unwrap17h7f6b22b9050bfb5dE+0x3a>
  210211:	0f 0b                	ud2    
  210213:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210217:	48 8d 3d e6 07 ff ff 	lea    -0xf81a(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21021e:	be 2b 00 00 00       	mov    $0x2b,%esi
  210223:	e8 38 32 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210228:	0f 0b                	ud2    
            Some(val) => val,
  21022a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21022f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  210234:	48 83 c4 18          	add    $0x18,%rsp
  210238:	c3                   	retq   
  210239:	cc                   	int3   
  21023a:	cc                   	int3   
  21023b:	cc                   	int3   
  21023c:	cc                   	int3   
  21023d:	cc                   	int3   
  21023e:	cc                   	int3   
  21023f:	cc                   	int3   

0000000000210240 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E>:
    pub const fn unwrap(self) -> T {
  210240:	48 83 ec 28          	sub    $0x28,%rsp
  210244:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210249:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21024e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  210253:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210258:	48 85 c0             	test   %rax,%rax
  21025b:	74 06                	je     210263 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x23>
  21025d:	eb 00                	jmp    21025f <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x1f>
  21025f:	eb 1a                	jmp    21027b <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E+0x3b>
  210261:	0f 0b                	ud2    
  210263:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210268:	48 8d 3d 95 07 ff ff 	lea    -0xf86b(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21026f:	be 2b 00 00 00       	mov    $0x2b,%esi
  210274:	e8 e7 31 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210279:	0f 0b                	ud2    
            Some(val) => val,
  21027b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  210280:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  210285:	48 83 c4 28          	add    $0x28,%rsp
  210289:	c3                   	retq   
  21028a:	cc                   	int3   
  21028b:	cc                   	int3   
  21028c:	cc                   	int3   
  21028d:	cc                   	int3   
  21028e:	cc                   	int3   
  21028f:	cc                   	int3   

0000000000210290 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E>:
    pub const fn unwrap(self) -> T {
  210290:	48 83 ec 28          	sub    $0x28,%rsp
  210294:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210299:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21029e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  2102a3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2102a8:	48 85 c0             	test   %rax,%rax
  2102ab:	74 06                	je     2102b3 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x23>
  2102ad:	eb 00                	jmp    2102af <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x1f>
  2102af:	eb 1a                	jmp    2102cb <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E+0x3b>
  2102b1:	0f 0b                	ud2    
  2102b3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2102b8:	48 8d 3d 45 07 ff ff 	lea    -0xf8bb(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  2102bf:	be 2b 00 00 00       	mov    $0x2b,%esi
  2102c4:	e8 97 31 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2102c9:	0f 0b                	ud2    
            Some(val) => val,
  2102cb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2102d0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2102d5:	48 83 c4 28          	add    $0x28,%rsp
  2102d9:	c3                   	retq   
  2102da:	cc                   	int3   
  2102db:	cc                   	int3   
  2102dc:	cc                   	int3   
  2102dd:	cc                   	int3   
  2102de:	cc                   	int3   
  2102df:	cc                   	int3   

00000000002102e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E>:
    pub const fn unwrap(self) -> T {
  2102e0:	48 83 ec 18          	sub    $0x18,%rsp
  2102e4:	48 89 34 24          	mov    %rsi,(%rsp)
  2102e8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2102ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2102f2:	48 85 c0             	test   %rax,%rax
  2102f5:	0f 95 c0             	setne  %al
  2102f8:	0f b6 c0             	movzbl %al,%eax
  2102fb:	74 06                	je     210303 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x23>
  2102fd:	eb 00                	jmp    2102ff <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x1f>
  2102ff:	eb 19                	jmp    21031a <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E+0x3a>
  210301:	0f 0b                	ud2    
  210303:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210307:	48 8d 3d f6 06 ff ff 	lea    -0xf90a(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21030e:	be 2b 00 00 00       	mov    $0x2b,%esi
  210313:	e8 48 31 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210318:	0f 0b                	ud2    
            Some(val) => val,
  21031a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21031f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  210324:	48 83 c4 18          	add    $0x18,%rsp
  210328:	c3                   	retq   
  210329:	cc                   	int3   
  21032a:	cc                   	int3   
  21032b:	cc                   	int3   
  21032c:	cc                   	int3   
  21032d:	cc                   	int3   
  21032e:	cc                   	int3   
  21032f:	cc                   	int3   

0000000000210330 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE>:
    pub const fn unwrap(self) -> T {
  210330:	48 83 ec 28          	sub    $0x28,%rsp
  210334:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210339:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21033e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210343:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match self {
  210348:	48 8b 06             	mov    (%rsi),%rax
  21034b:	48 85 c0             	test   %rax,%rax
  21034e:	0f 95 c0             	setne  %al
  210351:	0f b6 c0             	movzbl %al,%eax
  210354:	74 06                	je     21035c <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x2c>
  210356:	eb 00                	jmp    210358 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x28>
  210358:	eb 1a                	jmp    210374 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE+0x44>
  21035a:	0f 0b                	ud2    
  21035c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210361:	48 8d 3d 9c 06 ff ff 	lea    -0xf964(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  210368:	be 2b 00 00 00       	mov    $0x2b,%esi
  21036d:	e8 ee 30 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210372:	0f 0b                	ud2    
  210374:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  210379:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
            Some(val) => val,
  21037e:	ba 28 00 00 00       	mov    $0x28,%edx
  210383:	e8 d8 61 02 00       	callq  236560 <memcpy>
  210388:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  21038d:	48 83 c4 28          	add    $0x28,%rsp
  210391:	c3                   	retq   
  210392:	cc                   	int3   
  210393:	cc                   	int3   
  210394:	cc                   	int3   
  210395:	cc                   	int3   
  210396:	cc                   	int3   
  210397:	cc                   	int3   
  210398:	cc                   	int3   
  210399:	cc                   	int3   
  21039a:	cc                   	int3   
  21039b:	cc                   	int3   
  21039c:	cc                   	int3   
  21039d:	cc                   	int3   
  21039e:	cc                   	int3   
  21039f:	cc                   	int3   

00000000002103a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE>:
    pub const fn unwrap(self) -> T {
  2103a0:	48 83 ec 18          	sub    $0x18,%rsp
  2103a4:	48 89 34 24          	mov    %rsi,(%rsp)
  2103a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2103ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2103b2:	48 85 c0             	test   %rax,%rax
  2103b5:	0f 95 c0             	setne  %al
  2103b8:	0f b6 c0             	movzbl %al,%eax
  2103bb:	74 06                	je     2103c3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x23>
  2103bd:	eb 00                	jmp    2103bf <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x1f>
  2103bf:	eb 19                	jmp    2103da <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE+0x3a>
  2103c1:	0f 0b                	ud2    
  2103c3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  2103c7:	48 8d 3d 36 06 ff ff 	lea    -0xf9ca(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  2103ce:	be 2b 00 00 00       	mov    $0x2b,%esi
  2103d3:	e8 88 30 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2103d8:	0f 0b                	ud2    
            Some(val) => val,
  2103da:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2103df:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  2103e4:	48 83 c4 18          	add    $0x18,%rsp
  2103e8:	c3                   	retq   
  2103e9:	cc                   	int3   
  2103ea:	cc                   	int3   
  2103eb:	cc                   	int3   
  2103ec:	cc                   	int3   
  2103ed:	cc                   	int3   
  2103ee:	cc                   	int3   
  2103ef:	cc                   	int3   

00000000002103f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>:
    pub const fn unwrap(self) -> T {
  2103f0:	48 83 ec 18          	sub    $0x18,%rsp
  2103f4:	48 89 34 24          	mov    %rsi,(%rsp)
  2103f8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  2103fd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210402:	48 85 c0             	test   %rax,%rax
  210405:	0f 95 c0             	setne  %al
  210408:	0f b6 c0             	movzbl %al,%eax
  21040b:	74 06                	je     210413 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x23>
  21040d:	eb 00                	jmp    21040f <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x1f>
  21040f:	eb 19                	jmp    21042a <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E+0x3a>
  210411:	0f 0b                	ud2    
  210413:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  210417:	48 8d 3d e6 05 ff ff 	lea    -0xfa1a(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  21041e:	be 2b 00 00 00       	mov    $0x2b,%esi
  210423:	e8 38 30 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  210428:	0f 0b                	ud2    
            Some(val) => val,
  21042a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21042f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  210434:	48 83 c4 18          	add    $0x18,%rsp
  210438:	c3                   	retq   
  210439:	cc                   	int3   
  21043a:	cc                   	int3   
  21043b:	cc                   	int3   
  21043c:	cc                   	int3   
  21043d:	cc                   	int3   
  21043e:	cc                   	int3   
  21043f:	cc                   	int3   

0000000000210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>:
    pub const fn unwrap(self) -> T {
  210440:	48 83 ec 28          	sub    $0x28,%rsp
  210444:	48 89 14 24          	mov    %rdx,(%rsp)
  210448:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21044d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        match self {
  210452:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210457:	48 85 c0             	test   %rax,%rax
  21045a:	0f 95 c0             	setne  %al
  21045d:	0f b6 c0             	movzbl %al,%eax
  210460:	74 06                	je     210468 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x28>
  210462:	eb 00                	jmp    210464 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x24>
  210464:	eb 19                	jmp    21047f <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E+0x3f>
  210466:	0f 0b                	ud2    
  210468:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  21046c:	48 8d 3d 91 05 ff ff 	lea    -0xfa6f(%rip),%rdi        # 200a04 <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x6e>
  210473:	be 2b 00 00 00       	mov    $0x2b,%esi
  210478:	e8 e3 2f 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21047d:	0f 0b                	ud2    
            Some(val) => val,
  21047f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210484:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210489:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21048e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    }
  210493:	48 83 c4 28          	add    $0x28,%rsp
  210497:	c3                   	retq   
  210498:	cc                   	int3   
  210499:	cc                   	int3   
  21049a:	cc                   	int3   
  21049b:	cc                   	int3   
  21049c:	cc                   	int3   
  21049d:	cc                   	int3   
  21049e:	cc                   	int3   
  21049f:	cc                   	int3   

00000000002104a0 <_ZN4core6option15Option$LT$T$GT$7is_none17h045de8a7800cb02cE>:
    pub const fn is_none(&self) -> bool {
  2104a0:	48 83 ec 18          	sub    $0x18,%rsp
  2104a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2104a9:	e8 62 02 00 00       	callq  210710 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E>
  2104ae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2104b2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2104b6:	34 ff                	xor    $0xff,%al
    }
  2104b8:	24 01                	and    $0x1,%al
  2104ba:	0f b6 c0             	movzbl %al,%eax
  2104bd:	48 83 c4 18          	add    $0x18,%rsp
  2104c1:	c3                   	retq   
  2104c2:	cc                   	int3   
  2104c3:	cc                   	int3   
  2104c4:	cc                   	int3   
  2104c5:	cc                   	int3   
  2104c6:	cc                   	int3   
  2104c7:	cc                   	int3   
  2104c8:	cc                   	int3   
  2104c9:	cc                   	int3   
  2104ca:	cc                   	int3   
  2104cb:	cc                   	int3   
  2104cc:	cc                   	int3   
  2104cd:	cc                   	int3   
  2104ce:	cc                   	int3   
  2104cf:	cc                   	int3   

00000000002104d0 <_ZN4core6option15Option$LT$T$GT$7is_none17h236d626cd53a5136E>:
    pub const fn is_none(&self) -> bool {
  2104d0:	48 83 ec 18          	sub    $0x18,%rsp
  2104d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2104d9:	e8 a2 04 00 00       	callq  210980 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E>
  2104de:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2104e2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2104e6:	34 ff                	xor    $0xff,%al
    }
  2104e8:	24 01                	and    $0x1,%al
  2104ea:	0f b6 c0             	movzbl %al,%eax
  2104ed:	48 83 c4 18          	add    $0x18,%rsp
  2104f1:	c3                   	retq   
  2104f2:	cc                   	int3   
  2104f3:	cc                   	int3   
  2104f4:	cc                   	int3   
  2104f5:	cc                   	int3   
  2104f6:	cc                   	int3   
  2104f7:	cc                   	int3   
  2104f8:	cc                   	int3   
  2104f9:	cc                   	int3   
  2104fa:	cc                   	int3   
  2104fb:	cc                   	int3   
  2104fc:	cc                   	int3   
  2104fd:	cc                   	int3   
  2104fe:	cc                   	int3   
  2104ff:	cc                   	int3   

0000000000210500 <_ZN4core6option15Option$LT$T$GT$7is_none17h2db87b08cdf3ef67E>:
    pub const fn is_none(&self) -> bool {
  210500:	48 83 ec 18          	sub    $0x18,%rsp
  210504:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210509:	e8 62 03 00 00       	callq  210870 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE>
  21050e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210512:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210516:	34 ff                	xor    $0xff,%al
    }
  210518:	24 01                	and    $0x1,%al
  21051a:	0f b6 c0             	movzbl %al,%eax
  21051d:	48 83 c4 18          	add    $0x18,%rsp
  210521:	c3                   	retq   
  210522:	cc                   	int3   
  210523:	cc                   	int3   
  210524:	cc                   	int3   
  210525:	cc                   	int3   
  210526:	cc                   	int3   
  210527:	cc                   	int3   
  210528:	cc                   	int3   
  210529:	cc                   	int3   
  21052a:	cc                   	int3   
  21052b:	cc                   	int3   
  21052c:	cc                   	int3   
  21052d:	cc                   	int3   
  21052e:	cc                   	int3   
  21052f:	cc                   	int3   

0000000000210530 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>:
    pub const fn is_none(&self) -> bool {
  210530:	48 83 ec 18          	sub    $0x18,%rsp
  210534:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210539:	e8 92 03 00 00       	callq  2108d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE>
  21053e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210542:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210546:	34 ff                	xor    $0xff,%al
    }
  210548:	24 01                	and    $0x1,%al
  21054a:	0f b6 c0             	movzbl %al,%eax
  21054d:	48 83 c4 18          	add    $0x18,%rsp
  210551:	c3                   	retq   
  210552:	cc                   	int3   
  210553:	cc                   	int3   
  210554:	cc                   	int3   
  210555:	cc                   	int3   
  210556:	cc                   	int3   
  210557:	cc                   	int3   
  210558:	cc                   	int3   
  210559:	cc                   	int3   
  21055a:	cc                   	int3   
  21055b:	cc                   	int3   
  21055c:	cc                   	int3   
  21055d:	cc                   	int3   
  21055e:	cc                   	int3   
  21055f:	cc                   	int3   

0000000000210560 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>:
    pub const fn is_none(&self) -> bool {
  210560:	48 83 ec 18          	sub    $0x18,%rsp
  210564:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210569:	e8 d2 02 00 00       	callq  210840 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>
  21056e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210572:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210576:	34 ff                	xor    $0xff,%al
    }
  210578:	24 01                	and    $0x1,%al
  21057a:	0f b6 c0             	movzbl %al,%eax
  21057d:	48 83 c4 18          	add    $0x18,%rsp
  210581:	c3                   	retq   
  210582:	cc                   	int3   
  210583:	cc                   	int3   
  210584:	cc                   	int3   
  210585:	cc                   	int3   
  210586:	cc                   	int3   
  210587:	cc                   	int3   
  210588:	cc                   	int3   
  210589:	cc                   	int3   
  21058a:	cc                   	int3   
  21058b:	cc                   	int3   
  21058c:	cc                   	int3   
  21058d:	cc                   	int3   
  21058e:	cc                   	int3   
  21058f:	cc                   	int3   

0000000000210590 <_ZN4core6option15Option$LT$T$GT$7is_none17h6d69479f60fd2274E>:
    pub const fn is_none(&self) -> bool {
  210590:	48 83 ec 18          	sub    $0x18,%rsp
  210594:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210599:	e8 a2 03 00 00       	callq  210940 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>
  21059e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2105a2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2105a6:	34 ff                	xor    $0xff,%al
    }
  2105a8:	24 01                	and    $0x1,%al
  2105aa:	0f b6 c0             	movzbl %al,%eax
  2105ad:	48 83 c4 18          	add    $0x18,%rsp
  2105b1:	c3                   	retq   
  2105b2:	cc                   	int3   
  2105b3:	cc                   	int3   
  2105b4:	cc                   	int3   
  2105b5:	cc                   	int3   
  2105b6:	cc                   	int3   
  2105b7:	cc                   	int3   
  2105b8:	cc                   	int3   
  2105b9:	cc                   	int3   
  2105ba:	cc                   	int3   
  2105bb:	cc                   	int3   
  2105bc:	cc                   	int3   
  2105bd:	cc                   	int3   
  2105be:	cc                   	int3   
  2105bf:	cc                   	int3   

00000000002105c0 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>:
    pub const fn is_none(&self) -> bool {
  2105c0:	48 83 ec 18          	sub    $0x18,%rsp
  2105c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2105c9:	e8 f2 01 00 00       	callq  2107c0 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E>
  2105ce:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2105d2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2105d6:	34 ff                	xor    $0xff,%al
    }
  2105d8:	24 01                	and    $0x1,%al
  2105da:	0f b6 c0             	movzbl %al,%eax
  2105dd:	48 83 c4 18          	add    $0x18,%rsp
  2105e1:	c3                   	retq   
  2105e2:	cc                   	int3   
  2105e3:	cc                   	int3   
  2105e4:	cc                   	int3   
  2105e5:	cc                   	int3   
  2105e6:	cc                   	int3   
  2105e7:	cc                   	int3   
  2105e8:	cc                   	int3   
  2105e9:	cc                   	int3   
  2105ea:	cc                   	int3   
  2105eb:	cc                   	int3   
  2105ec:	cc                   	int3   
  2105ed:	cc                   	int3   
  2105ee:	cc                   	int3   
  2105ef:	cc                   	int3   

00000000002105f0 <_ZN4core6option15Option$LT$T$GT$7is_none17h983ee3186b1daf53E>:
    pub const fn is_none(&self) -> bool {
  2105f0:	48 83 ec 18          	sub    $0x18,%rsp
  2105f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2105f9:	e8 e2 00 00 00       	callq  2106e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE>
  2105fe:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210602:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210606:	34 ff                	xor    $0xff,%al
    }
  210608:	24 01                	and    $0x1,%al
  21060a:	0f b6 c0             	movzbl %al,%eax
  21060d:	48 83 c4 18          	add    $0x18,%rsp
  210611:	c3                   	retq   
  210612:	cc                   	int3   
  210613:	cc                   	int3   
  210614:	cc                   	int3   
  210615:	cc                   	int3   
  210616:	cc                   	int3   
  210617:	cc                   	int3   
  210618:	cc                   	int3   
  210619:	cc                   	int3   
  21061a:	cc                   	int3   
  21061b:	cc                   	int3   
  21061c:	cc                   	int3   
  21061d:	cc                   	int3   
  21061e:	cc                   	int3   
  21061f:	cc                   	int3   

0000000000210620 <_ZN4core6option15Option$LT$T$GT$7is_none17ha4bca2175564180aE>:
    pub const fn is_none(&self) -> bool {
  210620:	48 83 ec 18          	sub    $0x18,%rsp
  210624:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210629:	e8 d2 01 00 00       	callq  210800 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE>
  21062e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210632:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210636:	34 ff                	xor    $0xff,%al
    }
  210638:	24 01                	and    $0x1,%al
  21063a:	0f b6 c0             	movzbl %al,%eax
  21063d:	48 83 c4 18          	add    $0x18,%rsp
  210641:	c3                   	retq   
  210642:	cc                   	int3   
  210643:	cc                   	int3   
  210644:	cc                   	int3   
  210645:	cc                   	int3   
  210646:	cc                   	int3   
  210647:	cc                   	int3   
  210648:	cc                   	int3   
  210649:	cc                   	int3   
  21064a:	cc                   	int3   
  21064b:	cc                   	int3   
  21064c:	cc                   	int3   
  21064d:	cc                   	int3   
  21064e:	cc                   	int3   
  21064f:	cc                   	int3   

0000000000210650 <_ZN4core6option15Option$LT$T$GT$7is_none17hb3d124720ea273cbE>:
    pub const fn is_none(&self) -> bool {
  210650:	48 83 ec 18          	sub    $0x18,%rsp
  210654:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210659:	e8 a2 02 00 00       	callq  210900 <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE>
  21065e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210662:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210666:	34 ff                	xor    $0xff,%al
    }
  210668:	24 01                	and    $0x1,%al
  21066a:	0f b6 c0             	movzbl %al,%eax
  21066d:	48 83 c4 18          	add    $0x18,%rsp
  210671:	c3                   	retq   
  210672:	cc                   	int3   
  210673:	cc                   	int3   
  210674:	cc                   	int3   
  210675:	cc                   	int3   
  210676:	cc                   	int3   
  210677:	cc                   	int3   
  210678:	cc                   	int3   
  210679:	cc                   	int3   
  21067a:	cc                   	int3   
  21067b:	cc                   	int3   
  21067c:	cc                   	int3   
  21067d:	cc                   	int3   
  21067e:	cc                   	int3   
  21067f:	cc                   	int3   

0000000000210680 <_ZN4core6option15Option$LT$T$GT$7is_none17hb5d79c86d77403d8E>:
    pub const fn is_none(&self) -> bool {
  210680:	48 83 ec 18          	sub    $0x18,%rsp
  210684:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  210689:	e8 f2 00 00 00       	callq  210780 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E>
  21068e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210692:	8a 44 24 0f          	mov    0xf(%rsp),%al
  210696:	34 ff                	xor    $0xff,%al
    }
  210698:	24 01                	and    $0x1,%al
  21069a:	0f b6 c0             	movzbl %al,%eax
  21069d:	48 83 c4 18          	add    $0x18,%rsp
  2106a1:	c3                   	retq   
  2106a2:	cc                   	int3   
  2106a3:	cc                   	int3   
  2106a4:	cc                   	int3   
  2106a5:	cc                   	int3   
  2106a6:	cc                   	int3   
  2106a7:	cc                   	int3   
  2106a8:	cc                   	int3   
  2106a9:	cc                   	int3   
  2106aa:	cc                   	int3   
  2106ab:	cc                   	int3   
  2106ac:	cc                   	int3   
  2106ad:	cc                   	int3   
  2106ae:	cc                   	int3   
  2106af:	cc                   	int3   

00000000002106b0 <_ZN4core6option15Option$LT$T$GT$7is_none17hbe8b97c331f96930E>:
    pub const fn is_none(&self) -> bool {
  2106b0:	48 83 ec 18          	sub    $0x18,%rsp
  2106b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  2106b9:	e8 92 00 00 00       	callq  210750 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE>
  2106be:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2106c2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2106c6:	34 ff                	xor    $0xff,%al
    }
  2106c8:	24 01                	and    $0x1,%al
  2106ca:	0f b6 c0             	movzbl %al,%eax
  2106cd:	48 83 c4 18          	add    $0x18,%rsp
  2106d1:	c3                   	retq   
  2106d2:	cc                   	int3   
  2106d3:	cc                   	int3   
  2106d4:	cc                   	int3   
  2106d5:	cc                   	int3   
  2106d6:	cc                   	int3   
  2106d7:	cc                   	int3   
  2106d8:	cc                   	int3   
  2106d9:	cc                   	int3   
  2106da:	cc                   	int3   
  2106db:	cc                   	int3   
  2106dc:	cc                   	int3   
  2106dd:	cc                   	int3   
  2106de:	cc                   	int3   
  2106df:	cc                   	int3   

00000000002106e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE>:
    pub const fn is_some(&self) -> bool {
  2106e0:	48 83 ec 10          	sub    $0x10,%rsp
  2106e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  2106e9:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  2106ed:	75 07                	jne    2106f6 <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE+0x16>
  2106ef:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2106f4:	eb 05                	jmp    2106fb <_ZN4core6option15Option$LT$T$GT$7is_some17h18021125421df51aE+0x1b>
  2106f6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2106fb:	8a 44 24 07          	mov    0x7(%rsp),%al
  2106ff:	24 01                	and    $0x1,%al
  210701:	0f b6 c0             	movzbl %al,%eax
  210704:	48 83 c4 10          	add    $0x10,%rsp
  210708:	c3                   	retq   
  210709:	cc                   	int3   
  21070a:	cc                   	int3   
  21070b:	cc                   	int3   
  21070c:	cc                   	int3   
  21070d:	cc                   	int3   
  21070e:	cc                   	int3   
  21070f:	cc                   	int3   

0000000000210710 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E>:
    pub const fn is_some(&self) -> bool {
  210710:	48 83 ec 10          	sub    $0x10,%rsp
  210714:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210719:	b8 01 00 00 00       	mov    $0x1,%eax
  21071e:	31 c9                	xor    %ecx,%ecx
  210720:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  210724:	48 0f 44 c1          	cmove  %rcx,%rax
  210728:	48 83 f8 01          	cmp    $0x1,%rax
  21072c:	75 07                	jne    210735 <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E+0x25>
  21072e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210733:	eb 05                	jmp    21073a <_ZN4core6option15Option$LT$T$GT$7is_some17h20a70f240ffb5dd7E+0x2a>
  210735:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21073a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21073e:	24 01                	and    $0x1,%al
  210740:	0f b6 c0             	movzbl %al,%eax
  210743:	48 83 c4 10          	add    $0x10,%rsp
  210747:	c3                   	retq   
  210748:	cc                   	int3   
  210749:	cc                   	int3   
  21074a:	cc                   	int3   
  21074b:	cc                   	int3   
  21074c:	cc                   	int3   
  21074d:	cc                   	int3   
  21074e:	cc                   	int3   
  21074f:	cc                   	int3   

0000000000210750 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE>:
    pub const fn is_some(&self) -> bool {
  210750:	48 83 ec 10          	sub    $0x10,%rsp
  210754:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210759:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  21075d:	75 07                	jne    210766 <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE+0x16>
  21075f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210764:	eb 05                	jmp    21076b <_ZN4core6option15Option$LT$T$GT$7is_some17h24a396b6f9810f1dE+0x1b>
  210766:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21076b:	8a 44 24 07          	mov    0x7(%rsp),%al
  21076f:	24 01                	and    $0x1,%al
  210771:	0f b6 c0             	movzbl %al,%eax
  210774:	48 83 c4 10          	add    $0x10,%rsp
  210778:	c3                   	retq   
  210779:	cc                   	int3   
  21077a:	cc                   	int3   
  21077b:	cc                   	int3   
  21077c:	cc                   	int3   
  21077d:	cc                   	int3   
  21077e:	cc                   	int3   
  21077f:	cc                   	int3   

0000000000210780 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E>:
    pub const fn is_some(&self) -> bool {
  210780:	48 83 ec 10          	sub    $0x10,%rsp
  210784:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210789:	b8 01 00 00 00       	mov    $0x1,%eax
  21078e:	31 c9                	xor    %ecx,%ecx
  210790:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  210794:	48 0f 44 c1          	cmove  %rcx,%rax
  210798:	48 83 f8 01          	cmp    $0x1,%rax
  21079c:	75 07                	jne    2107a5 <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E+0x25>
  21079e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2107a3:	eb 05                	jmp    2107aa <_ZN4core6option15Option$LT$T$GT$7is_some17h38b005f6c4b8b536E+0x2a>
  2107a5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2107aa:	8a 44 24 07          	mov    0x7(%rsp),%al
  2107ae:	24 01                	and    $0x1,%al
  2107b0:	0f b6 c0             	movzbl %al,%eax
  2107b3:	48 83 c4 10          	add    $0x10,%rsp
  2107b7:	c3                   	retq   
  2107b8:	cc                   	int3   
  2107b9:	cc                   	int3   
  2107ba:	cc                   	int3   
  2107bb:	cc                   	int3   
  2107bc:	cc                   	int3   
  2107bd:	cc                   	int3   
  2107be:	cc                   	int3   
  2107bf:	cc                   	int3   

00000000002107c0 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E>:
    pub const fn is_some(&self) -> bool {
  2107c0:	48 83 ec 10          	sub    $0x10,%rsp
  2107c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  2107c9:	b8 01 00 00 00       	mov    $0x1,%eax
  2107ce:	31 c9                	xor    %ecx,%ecx
  2107d0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  2107d4:	48 0f 44 c1          	cmove  %rcx,%rax
  2107d8:	48 83 f8 01          	cmp    $0x1,%rax
  2107dc:	75 07                	jne    2107e5 <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E+0x25>
  2107de:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2107e3:	eb 05                	jmp    2107ea <_ZN4core6option15Option$LT$T$GT$7is_some17h5379fe4ba1e52f64E+0x2a>
  2107e5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2107ea:	8a 44 24 07          	mov    0x7(%rsp),%al
  2107ee:	24 01                	and    $0x1,%al
  2107f0:	0f b6 c0             	movzbl %al,%eax
  2107f3:	48 83 c4 10          	add    $0x10,%rsp
  2107f7:	c3                   	retq   
  2107f8:	cc                   	int3   
  2107f9:	cc                   	int3   
  2107fa:	cc                   	int3   
  2107fb:	cc                   	int3   
  2107fc:	cc                   	int3   
  2107fd:	cc                   	int3   
  2107fe:	cc                   	int3   
  2107ff:	cc                   	int3   

0000000000210800 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE>:
    pub const fn is_some(&self) -> bool {
  210800:	48 83 ec 10          	sub    $0x10,%rsp
  210804:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210809:	b8 01 00 00 00       	mov    $0x1,%eax
  21080e:	31 c9                	xor    %ecx,%ecx
  210810:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  210814:	48 0f 44 c1          	cmove  %rcx,%rax
  210818:	48 83 f8 01          	cmp    $0x1,%rax
  21081c:	75 07                	jne    210825 <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE+0x25>
  21081e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210823:	eb 05                	jmp    21082a <_ZN4core6option15Option$LT$T$GT$7is_some17h8cbdcfaf508e157fE+0x2a>
  210825:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21082a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21082e:	24 01                	and    $0x1,%al
  210830:	0f b6 c0             	movzbl %al,%eax
  210833:	48 83 c4 10          	add    $0x10,%rsp
  210837:	c3                   	retq   
  210838:	cc                   	int3   
  210839:	cc                   	int3   
  21083a:	cc                   	int3   
  21083b:	cc                   	int3   
  21083c:	cc                   	int3   
  21083d:	cc                   	int3   
  21083e:	cc                   	int3   
  21083f:	cc                   	int3   

0000000000210840 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>:
    pub const fn is_some(&self) -> bool {
  210840:	48 83 ec 10          	sub    $0x10,%rsp
  210844:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210849:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  21084d:	75 07                	jne    210856 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E+0x16>
  21084f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210854:	eb 05                	jmp    21085b <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E+0x1b>
  210856:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21085b:	8a 44 24 07          	mov    0x7(%rsp),%al
  21085f:	24 01                	and    $0x1,%al
  210861:	0f b6 c0             	movzbl %al,%eax
  210864:	48 83 c4 10          	add    $0x10,%rsp
  210868:	c3                   	retq   
  210869:	cc                   	int3   
  21086a:	cc                   	int3   
  21086b:	cc                   	int3   
  21086c:	cc                   	int3   
  21086d:	cc                   	int3   
  21086e:	cc                   	int3   
  21086f:	cc                   	int3   

0000000000210870 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE>:
    pub const fn is_some(&self) -> bool {
  210870:	48 83 ec 10          	sub    $0x10,%rsp
  210874:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210879:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  21087d:	75 07                	jne    210886 <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE+0x16>
  21087f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210884:	eb 05                	jmp    21088b <_ZN4core6option15Option$LT$T$GT$7is_some17h910b8475a573d11cE+0x1b>
  210886:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21088b:	8a 44 24 07          	mov    0x7(%rsp),%al
  21088f:	24 01                	and    $0x1,%al
  210891:	0f b6 c0             	movzbl %al,%eax
  210894:	48 83 c4 10          	add    $0x10,%rsp
  210898:	c3                   	retq   
  210899:	cc                   	int3   
  21089a:	cc                   	int3   
  21089b:	cc                   	int3   
  21089c:	cc                   	int3   
  21089d:	cc                   	int3   
  21089e:	cc                   	int3   
  21089f:	cc                   	int3   

00000000002108a0 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E>:
    pub const fn is_some(&self) -> bool {
  2108a0:	48 83 ec 10          	sub    $0x10,%rsp
  2108a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  2108a9:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  2108ad:	75 07                	jne    2108b6 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E+0x16>
  2108af:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2108b4:	eb 05                	jmp    2108bb <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E+0x1b>
  2108b6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2108bb:	8a 44 24 07          	mov    0x7(%rsp),%al
  2108bf:	24 01                	and    $0x1,%al
  2108c1:	0f b6 c0             	movzbl %al,%eax
  2108c4:	48 83 c4 10          	add    $0x10,%rsp
  2108c8:	c3                   	retq   
  2108c9:	cc                   	int3   
  2108ca:	cc                   	int3   
  2108cb:	cc                   	int3   
  2108cc:	cc                   	int3   
  2108cd:	cc                   	int3   
  2108ce:	cc                   	int3   
  2108cf:	cc                   	int3   

00000000002108d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE>:
    pub const fn is_some(&self) -> bool {
  2108d0:	48 83 ec 10          	sub    $0x10,%rsp
  2108d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  2108d9:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  2108dd:	75 07                	jne    2108e6 <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE+0x16>
  2108df:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2108e4:	eb 05                	jmp    2108eb <_ZN4core6option15Option$LT$T$GT$7is_some17hb0b547f33d1e952bE+0x1b>
  2108e6:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2108eb:	8a 44 24 07          	mov    0x7(%rsp),%al
  2108ef:	24 01                	and    $0x1,%al
  2108f1:	0f b6 c0             	movzbl %al,%eax
  2108f4:	48 83 c4 10          	add    $0x10,%rsp
  2108f8:	c3                   	retq   
  2108f9:	cc                   	int3   
  2108fa:	cc                   	int3   
  2108fb:	cc                   	int3   
  2108fc:	cc                   	int3   
  2108fd:	cc                   	int3   
  2108fe:	cc                   	int3   
  2108ff:	cc                   	int3   

0000000000210900 <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE>:
    pub const fn is_some(&self) -> bool {
  210900:	48 83 ec 10          	sub    $0x10,%rsp
  210904:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210909:	8b 57 18             	mov    0x18(%rdi),%edx
  21090c:	83 ea 03             	sub    $0x3,%edx
  21090f:	b8 01 00 00 00       	mov    $0x1,%eax
  210914:	31 c9                	xor    %ecx,%ecx
  210916:	83 fa 00             	cmp    $0x0,%edx
  210919:	48 0f 44 c1          	cmove  %rcx,%rax
  21091d:	48 83 f8 01          	cmp    $0x1,%rax
  210921:	75 07                	jne    21092a <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE+0x2a>
  210923:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  210928:	eb 05                	jmp    21092f <_ZN4core6option15Option$LT$T$GT$7is_some17hcef305c3c7ba6e5dE+0x2f>
  21092a:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21092f:	8a 44 24 07          	mov    0x7(%rsp),%al
  210933:	24 01                	and    $0x1,%al
  210935:	0f b6 c0             	movzbl %al,%eax
  210938:	48 83 c4 10          	add    $0x10,%rsp
  21093c:	c3                   	retq   
  21093d:	cc                   	int3   
  21093e:	cc                   	int3   
  21093f:	cc                   	int3   

0000000000210940 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>:
    pub const fn is_some(&self) -> bool {
  210940:	48 83 ec 10          	sub    $0x10,%rsp
  210944:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210949:	8a 97 88 01 00 00    	mov    0x188(%rdi),%dl
  21094f:	80 ea 02             	sub    $0x2,%dl
  210952:	b8 01 00 00 00       	mov    $0x1,%eax
  210957:	31 c9                	xor    %ecx,%ecx
  210959:	80 fa 00             	cmp    $0x0,%dl
  21095c:	48 0f 44 c1          	cmove  %rcx,%rax
  210960:	48 83 f8 01          	cmp    $0x1,%rax
  210964:	75 07                	jne    21096d <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE+0x2d>
  210966:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  21096b:	eb 05                	jmp    210972 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE+0x32>
  21096d:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  210972:	8a 44 24 07          	mov    0x7(%rsp),%al
  210976:	24 01                	and    $0x1,%al
  210978:	0f b6 c0             	movzbl %al,%eax
  21097b:	48 83 c4 10          	add    $0x10,%rsp
  21097f:	c3                   	retq   

0000000000210980 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E>:
    pub const fn is_some(&self) -> bool {
  210980:	48 83 ec 10          	sub    $0x10,%rsp
  210984:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  210989:	b8 01 00 00 00       	mov    $0x1,%eax
  21098e:	31 c9                	xor    %ecx,%ecx
  210990:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  210994:	48 0f 44 c1          	cmove  %rcx,%rax
  210998:	48 83 f8 01          	cmp    $0x1,%rax
  21099c:	75 07                	jne    2109a5 <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E+0x25>
  21099e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  2109a3:	eb 05                	jmp    2109aa <_ZN4core6option15Option$LT$T$GT$7is_some17he876d55ab0a01cc3E+0x2a>
  2109a5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  2109aa:	8a 44 24 07          	mov    0x7(%rsp),%al
  2109ae:	24 01                	and    $0x1,%al
  2109b0:	0f b6 c0             	movzbl %al,%eax
  2109b3:	48 83 c4 10          	add    $0x10,%rsp
  2109b7:	c3                   	retq   
  2109b8:	cc                   	int3   
  2109b9:	cc                   	int3   
  2109ba:	cc                   	int3   
  2109bb:	cc                   	int3   
  2109bc:	cc                   	int3   
  2109bd:	cc                   	int3   
  2109be:	cc                   	int3   
  2109bf:	cc                   	int3   

00000000002109c0 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE>:
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn copied(self) -> Option<T> {
  2109c0:	48 83 ec 10          	sub    $0x10,%rsp
  2109c4:	48 89 3c 24          	mov    %rdi,(%rsp)
        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        // ready yet, should be reverted when possible to avoid code repetition
        match self {
  2109c8:	48 8b 04 24          	mov    (%rsp),%rax
  2109cc:	48 85 c0             	test   %rax,%rax
  2109cf:	0f 95 c0             	setne  %al
  2109d2:	0f b6 c0             	movzbl %al,%eax
  2109d5:	74 06                	je     2109dd <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x1d>
  2109d7:	eb 00                	jmp    2109d9 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x19>
  2109d9:	eb 09                	jmp    2109e4 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x24>
  2109db:	0f 0b                	ud2    
            Some(&v) => Some(v),
            None => None,
  2109dd:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
  2109e2:	eb 13                	jmp    2109f7 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE+0x37>
            Some(&v) => Some(v),
  2109e4:	48 8b 04 24          	mov    (%rsp),%rax
  2109e8:	8a 00                	mov    (%rax),%al
  2109ea:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2109ee:	88 44 24 09          	mov    %al,0x9(%rsp)
  2109f2:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
        }
    }
  2109f7:	8a 44 24 08          	mov    0x8(%rsp),%al
  2109fb:	8a 54 24 09          	mov    0x9(%rsp),%dl
  2109ff:	48 83 c4 10          	add    $0x10,%rsp
  210a03:	c3                   	retq   
  210a04:	cc                   	int3   
  210a05:	cc                   	int3   
  210a06:	cc                   	int3   
  210a07:	cc                   	int3   
  210a08:	cc                   	int3   
  210a09:	cc                   	int3   
  210a0a:	cc                   	int3   
  210a0b:	cc                   	int3   
  210a0c:	cc                   	int3   
  210a0d:	cc                   	int3   
  210a0e:	cc                   	int3   
  210a0f:	cc                   	int3   

0000000000210a10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9cd07eb2aa0d9c46E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  210a10:	48 83 ec 18          	sub    $0x18,%rsp
  210a14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210a19:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  210a1e:	48 8b 3f             	mov    (%rdi),%rdi
  210a21:	e8 2a 51 01 00       	callq  225b50 <_ZN77_$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$u20$as$u20$core..fmt..Debug$GT$3fmt17hd4b2e02536c1f22aE>
  210a26:	88 44 24 07          	mov    %al,0x7(%rsp)
  210a2a:	8a 44 24 07          	mov    0x7(%rsp),%al
  210a2e:	24 01                	and    $0x1,%al
  210a30:	0f b6 c0             	movzbl %al,%eax
  210a33:	48 83 c4 18          	add    $0x18,%rsp
  210a37:	c3                   	retq   
  210a38:	cc                   	int3   
  210a39:	cc                   	int3   
  210a3a:	cc                   	int3   
  210a3b:	cc                   	int3   
  210a3c:	cc                   	int3   
  210a3d:	cc                   	int3   
  210a3e:	cc                   	int3   
  210a3f:	cc                   	int3   

0000000000210a40 <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17hcd787f1212a7fd9fE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  210a40:	48 83 ec 78          	sub    $0x78,%rsp
  210a44:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  210a49:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  210a4e:	48 89 f8             	mov    %rdi,%rax
  210a51:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  210a56:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  210a5b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  210a60:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  210a65:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        f.debug_list().entries(self.iter()).finish()
  210a6a:	e8 61 4d 02 00       	callq  2357d0 <_ZN4core3fmt9Formatter10debug_list17h63f19364d11dcc32E>
  210a6f:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  210a74:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  210a79:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  210a7e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  210a83:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  210a88:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  210a8d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210a92:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  210a97:	e8 b4 00 00 00       	callq  210b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>
  210a9c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210aa1:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  210aa6:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  210aab:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  210ab0:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  210ab5:	e8 26 03 00 00       	callq  210de0 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE>
  210aba:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210abf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210ac4:	e8 87 25 02 00       	callq  233050 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E>
  210ac9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  210acd:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  210ad1:	24 01                	and    $0x1,%al
  210ad3:	0f b6 c0             	movzbl %al,%eax
  210ad6:	48 83 c4 78          	add    $0x78,%rsp
  210ada:	c3                   	retq   
  210adb:	cc                   	int3   
  210adc:	cc                   	int3   
  210add:	cc                   	int3   
  210ade:	cc                   	int3   
  210adf:	cc                   	int3   

0000000000210ae0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>:
    /// assert!(!ptr.is_null());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
    #[inline]
    pub const fn is_null(self) -> bool {
  210ae0:	48 83 ec 18          	sub    $0x18,%rsp
  210ae4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210ae9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210aee:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        // Compare via a cast to a thin pointer, so fat pointers are only
        // considering their "data" part for null-ness.
        (self as *mut u8).guaranteed_eq(null_mut())
  210af3:	31 c0                	xor    %eax,%eax
  210af5:	89 c6                	mov    %eax,%esi
  210af7:	e8 94 0c 02 00       	callq  231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  210afc:	88 44 24 07          	mov    %al,0x7(%rsp)
  210b00:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  210b04:	24 01                	and    $0x1,%al
  210b06:	0f b6 c0             	movzbl %al,%eax
  210b09:	48 83 c4 18          	add    $0x18,%rsp
  210b0d:	c3                   	retq   
  210b0e:	cc                   	int3   
  210b0f:	cc                   	int3   

0000000000210b10 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb9afce9db5d0b565E>:

    /// Casts to a pointer of another type.
    #[stable(feature = "ptr_cast", since = "1.38.0")]
    #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
    #[inline]
    pub const fn cast<U>(self) -> *const U {
  210b10:	50                   	push   %rax
  210b11:	48 89 f8             	mov    %rdi,%rax
  210b14:	48 89 04 24          	mov    %rax,(%rsp)
        self as _
    }
  210b18:	59                   	pop    %rcx
  210b19:	c3                   	retq   
  210b1a:	cc                   	int3   
  210b1b:	cc                   	int3   
  210b1c:	cc                   	int3   
  210b1d:	cc                   	int3   
  210b1e:	cc                   	int3   
  210b1f:	cc                   	int3   

0000000000210b20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>:
    pub const fn is_null(self) -> bool {
  210b20:	48 83 ec 18          	sub    $0x18,%rsp
  210b24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210b29:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210b2e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  210b33:	31 c0                	xor    %eax,%eax
  210b35:	89 c6                	mov    %eax,%esi
  210b37:	e8 04 0d 02 00       	callq  231840 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  210b3c:	88 44 24 07          	mov    %al,0x7(%rsp)
  210b40:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  210b44:	24 01                	and    $0x1,%al
  210b46:	0f b6 c0             	movzbl %al,%eax
  210b49:	48 83 c4 18          	add    $0x18,%rsp
  210b4d:	c3                   	retq   
  210b4e:	cc                   	int3   
  210b4f:	cc                   	int3   

0000000000210b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
  210b50:	48 83 ec 28          	sub    $0x28,%rsp
  210b54:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  210b59:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  210b5e:	e8 ad 85 00 00       	callq  219110 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E>
  210b63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210b68:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  210b6d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210b72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  210b77:	48 83 c4 28          	add    $0x28,%rsp
  210b7b:	c3                   	retq   
  210b7c:	cc                   	int3   
  210b7d:	cc                   	int3   
  210b7e:	cc                   	int3   
  210b7f:	cc                   	int3   

0000000000210b80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h17e65275eff91432E>:
    pub const fn as_ptr(&self) -> *const T {
  210b80:	48 83 ec 10          	sub    $0x10,%rsp
  210b84:	48 89 f8             	mov    %rdi,%rax
  210b87:	48 89 04 24          	mov    %rax,(%rsp)
  210b8b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  210b90:	48 83 c4 10          	add    $0x10,%rsp
  210b94:	c3                   	retq   
  210b95:	cc                   	int3   
  210b96:	cc                   	int3   
  210b97:	cc                   	int3   
  210b98:	cc                   	int3   
  210b99:	cc                   	int3   
  210b9a:	cc                   	int3   
  210b9b:	cc                   	int3   
  210b9c:	cc                   	int3   
  210b9d:	cc                   	int3   
  210b9e:	cc                   	int3   
  210b9f:	cc                   	int3   

0000000000210ba0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc18e36f70da5f5c7E>:
        R: Try<Output = Acc>,
    {
        self.iter.try_fold(init, map_try_fold(&mut self.f, g))
    }

    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
  210ba0:	48 83 ec 48          	sub    $0x48,%rsp
  210ba4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  210ba9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210bae:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210bb3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  210bb8:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  210bbd:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
    where
        G: FnMut(Acc, Self::Item) -> Acc,
    {
        self.iter.fold(init, map_fold(self.f, g))
  210bc2:	e8 19 01 00 00       	callq  210ce0 <_ZN4core4iter8adapters3map8map_fold17hb50d230422ac5205E>
  210bc7:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210bcc:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  210bd1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  210bd6:	e8 15 84 00 00       	callq  218ff0 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE>
  210bdb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210be0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  210be5:	48 83 c4 48          	add    $0x48,%rsp
  210be9:	c3                   	retq   
  210bea:	cc                   	int3   
  210beb:	cc                   	int3   
  210bec:	cc                   	int3   
  210bed:	cc                   	int3   
  210bee:	cc                   	int3   
  210bef:	cc                   	int3   

0000000000210bf0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hd5e1626c4c81dd16E>:
    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
  210bf0:	48 83 ec 48          	sub    $0x48,%rsp
  210bf4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  210bf9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210bfe:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  210c03:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  210c08:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  210c0d:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
        self.iter.fold(init, map_fold(self.f, g))
  210c12:	e8 d9 00 00 00       	callq  210cf0 <_ZN4core4iter8adapters3map8map_fold17hc9048eddb7122dc0E>
  210c17:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  210c1c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  210c21:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  210c26:	e8 55 84 00 00       	callq  219080 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE>
  210c2b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210c30:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  210c35:	48 83 c4 48          	add    $0x48,%rsp
  210c39:	c3                   	retq   
  210c3a:	cc                   	int3   
  210c3b:	cc                   	int3   
  210c3c:	cc                   	int3   
  210c3d:	cc                   	int3   
  210c3e:	cc                   	int3   
  210c3f:	cc                   	int3   

0000000000210c40 <_ZN4core4iter6traits8iterator8Iterator3sum17h000ba1b36b9ccc77E>:
    /// let sum: i32 = a.iter().sum();
    ///
    /// assert_eq!(sum, 6);
    /// ```
    #[stable(feature = "iter_arith", since = "1.11.0")]
    fn sum<S>(self) -> S
  210c40:	48 83 ec 18          	sub    $0x18,%rsp
  210c44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210c49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        Self: Sized,
        S: Sum<Self::Item>,
    {
        Sum::sum(self)
  210c4e:	e8 6d c0 01 00       	callq  22ccc0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h94087771308e1a59E>
  210c53:	48 89 04 24          	mov    %rax,(%rsp)
  210c57:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210c5b:	48 83 c4 18          	add    $0x18,%rsp
  210c5f:	c3                   	retq   

0000000000210c60 <_ZN4core4iter6traits8iterator8Iterator3sum17hfd8a934b45b619cfE>:
    fn sum<S>(self) -> S
  210c60:	48 83 ec 18          	sub    $0x18,%rsp
  210c64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210c69:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        Sum::sum(self)
  210c6e:	e8 1d c0 01 00       	callq  22cc90 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h8428de84206d5ca3E>
  210c73:	48 89 04 24          	mov    %rax,(%rsp)
  210c77:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210c7b:	48 83 c4 18          	add    $0x18,%rsp
  210c7f:	c3                   	retq   

0000000000210c80 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h12ca5be8f998c4eaE>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  210c80:	48 83 ec 28          	sub    $0x28,%rsp
  210c84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210c89:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  210c8e:	48 89 3c 24          	mov    %rdi,(%rsp)
  210c92:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  210c97:	48 8b 04 24          	mov    (%rsp),%rax
  210c9b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210ca0:	48 83 c4 28          	add    $0x28,%rsp
  210ca4:	c3                   	retq   
  210ca5:	cc                   	int3   
  210ca6:	cc                   	int3   
  210ca7:	cc                   	int3   
  210ca8:	cc                   	int3   
  210ca9:	cc                   	int3   
  210caa:	cc                   	int3   
  210cab:	cc                   	int3   
  210cac:	cc                   	int3   
  210cad:	cc                   	int3   
  210cae:	cc                   	int3   
  210caf:	cc                   	int3   

0000000000210cb0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h6cb0038798678fbaE>:
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
  210cb0:	48 83 ec 28          	sub    $0x28,%rsp
  210cb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210cb9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map { iter, f }
  210cbe:	48 89 3c 24          	mov    %rdi,(%rsp)
  210cc2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  210cc7:	48 8b 04 24          	mov    (%rsp),%rax
  210ccb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  210cd0:	48 83 c4 28          	add    $0x28,%rsp
  210cd4:	c3                   	retq   
  210cd5:	cc                   	int3   
  210cd6:	cc                   	int3   
  210cd7:	cc                   	int3   
  210cd8:	cc                   	int3   
  210cd9:	cc                   	int3   
  210cda:	cc                   	int3   
  210cdb:	cc                   	int3   
  210cdc:	cc                   	int3   
  210cdd:	cc                   	int3   
  210cde:	cc                   	int3   
  210cdf:	cc                   	int3   

0000000000210ce0 <_ZN4core4iter8adapters3map8map_fold17hb50d230422ac5205E>:
}
  210ce0:	c3                   	retq   
  210ce1:	cc                   	int3   
  210ce2:	cc                   	int3   
  210ce3:	cc                   	int3   
  210ce4:	cc                   	int3   
  210ce5:	cc                   	int3   
  210ce6:	cc                   	int3   
  210ce7:	cc                   	int3   
  210ce8:	cc                   	int3   
  210ce9:	cc                   	int3   
  210cea:	cc                   	int3   
  210ceb:	cc                   	int3   
  210cec:	cc                   	int3   
  210ced:	cc                   	int3   
  210cee:	cc                   	int3   
  210cef:	cc                   	int3   

0000000000210cf0 <_ZN4core4iter8adapters3map8map_fold17hc9048eddb7122dc0E>:
  210cf0:	c3                   	retq   
  210cf1:	cc                   	int3   
  210cf2:	cc                   	int3   
  210cf3:	cc                   	int3   
  210cf4:	cc                   	int3   
  210cf5:	cc                   	int3   
  210cf6:	cc                   	int3   
  210cf7:	cc                   	int3   
  210cf8:	cc                   	int3   
  210cf9:	cc                   	int3   
  210cfa:	cc                   	int3   
  210cfb:	cc                   	int3   
  210cfc:	cc                   	int3   
  210cfd:	cc                   	int3   
  210cfe:	cc                   	int3   
  210cff:	cc                   	int3   

0000000000210d00 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h062e9aab7d422d50E>:
    move |acc, elt| g(acc, f(elt))
  210d00:	48 83 ec 58          	sub    $0x58,%rsp
  210d04:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  210d09:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  210d0e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  210d13:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  210d18:	48 89 f8             	mov    %rdi,%rax
  210d1b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210d20:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  210d25:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  210d2a:	e8 61 75 01 00       	callq  228290 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17ha90416735f970b6fE>
  210d2f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210d34:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  210d39:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210d3e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210d43:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  210d48:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210d4d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210d52:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  210d57:	e8 94 bf 01 00       	callq  22ccf0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E>
  210d5c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210d61:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210d66:	48 83 c4 58          	add    $0x58,%rsp
  210d6a:	c3                   	retq   
  210d6b:	cc                   	int3   
  210d6c:	cc                   	int3   
  210d6d:	cc                   	int3   
  210d6e:	cc                   	int3   
  210d6f:	cc                   	int3   

0000000000210d70 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17hce0c6cf362607ce0E>:
  210d70:	48 83 ec 58          	sub    $0x58,%rsp
  210d74:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  210d79:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  210d7e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  210d83:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  210d88:	48 89 f8             	mov    %rdi,%rax
  210d8b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210d90:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  210d95:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  210d9a:	e8 d1 74 01 00       	callq  228270 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17hced56ca8bff65c61E>
  210d9f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210da4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  210da9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  210dae:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  210db3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  210db8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210dbd:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  210dc2:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  210dc7:	e8 74 bf 01 00       	callq  22cd40 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E>
  210dcc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210dd1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  210dd6:	48 83 c4 58          	add    $0x58,%rsp
  210dda:	c3                   	retq   
  210ddb:	cc                   	int3   
  210ddc:	cc                   	int3   
  210ddd:	cc                   	int3   
  210dde:	cc                   	int3   
  210ddf:	cc                   	int3   

0000000000210de0 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE>:
    ///     format!("{:?}", Foo(vec![10, 11], vec![12, 13])),
    ///     "[10, 11, 12, 13]",
    /// );
    /// ```
    #[stable(feature = "debug_builders", since = "1.2.0")]
    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self
  210de0:	48 83 ec 78          	sub    $0x78,%rsp
  210de4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  210de9:	48 89 f0             	mov    %rsi,%rax
  210dec:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  210df1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210df6:	48 89 f8             	mov    %rdi,%rax
  210df9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  210dfe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210e03:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  210e08:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  210e0d:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
    where
        D: fmt::Debug,
        I: IntoIterator<Item = D>,
    {
        for entry in entries {
  210e12:	e8 29 86 00 00       	callq  219440 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h39afff3affafd620E>
  210e17:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210e1c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  210e21:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210e26:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  210e2b:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  210e30:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  210e35:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  210e3a:	e8 61 86 00 00       	callq  2194a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>
  210e3f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  210e44:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  210e49:	48 85 c0             	test   %rax,%rax
  210e4c:	0f 95 c0             	setne  %al
  210e4f:	0f b6 c0             	movzbl %al,%eax
  210e52:	74 06                	je     210e5a <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x7a>
  210e54:	eb 00                	jmp    210e56 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x76>
  210e56:	eb 04                	jmp    210e5c <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x7c>
  210e58:	0f 0b                	ud2    
            self.entry(&entry);
        }
  210e5a:	eb 2e                	jmp    210e8a <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0xaa>
  210e5c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        for entry in entries {
  210e61:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  210e66:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  210e6b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210e70:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            self.entry(&entry);
  210e75:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  210e7a:	48 8d 15 17 6e 02 00 	lea    0x26e17(%rip),%rdx        # 237c98 <memcmp+0x16e8>
  210e81:	e8 ba 21 02 00       	callq  233040 <_ZN4core3fmt8builders8DebugSet5entry17ha462e373088cbeaaE>
        }
  210e86:	eb 00                	jmp    210e88 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0xa8>
        for entry in entries {
  210e88:	eb ab                	jmp    210e35 <_ZN4core3fmt8builders9DebugList7entries17h117bf522a3df371eE+0x55>
  210e8a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        self
    }
  210e8f:	48 83 c4 78          	add    $0x78,%rsp
  210e93:	c3                   	retq   
  210e94:	cc                   	int3   
  210e95:	cc                   	int3   
  210e96:	cc                   	int3   
  210e97:	cc                   	int3   
  210e98:	cc                   	int3   
  210e99:	cc                   	int3   
  210e9a:	cc                   	int3   
  210e9b:	cc                   	int3   
  210e9c:	cc                   	int3   
  210e9d:	cc                   	int3   
  210e9e:	cc                   	int3   
  210e9f:	cc                   	int3   

0000000000210ea0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he903c6faddf346e6E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  210ea0:	48 83 ec 18          	sub    $0x18,%rsp
  210ea4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  210ea9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  210eae:	48 8b 3f             	mov    (%rdi),%rdi
  210eb1:	e8 4a 05 00 00       	callq  211400 <_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h54f7276e96e0decdE>
  210eb6:	88 44 24 07          	mov    %al,0x7(%rsp)
  210eba:	8a 44 24 07          	mov    0x7(%rsp),%al
  210ebe:	24 01                	and    $0x1,%al
  210ec0:	0f b6 c0             	movzbl %al,%eax
  210ec3:	48 83 c4 18          	add    $0x18,%rsp
  210ec7:	c3                   	retq   
  210ec8:	cc                   	int3   
  210ec9:	cc                   	int3   
  210eca:	cc                   	int3   
  210ecb:	cc                   	int3   
  210ecc:	cc                   	int3   
  210ecd:	cc                   	int3   
  210ece:	cc                   	int3   
  210ecf:	cc                   	int3   

0000000000210ed0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h683916163281641eE>:
    pub const fn new() -> Self {
  210ed0:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  210ed3:	48 8b 15 ee f7 fe ff 	mov    -0x10812(%rip),%rdx        # 2006c8 <str.0+0x1a8>
  210eda:	48 8b 0d ef f7 fe ff 	mov    -0x10811(%rip),%rcx        # 2006d0 <str.0+0x1b0>
  210ee1:	48 89 17             	mov    %rdx,(%rdi)
  210ee4:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  210ee8:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  210eef:	00 
    }
  210ef0:	c3                   	retq   
  210ef1:	cc                   	int3   
  210ef2:	cc                   	int3   
  210ef3:	cc                   	int3   
  210ef4:	cc                   	int3   
  210ef5:	cc                   	int3   
  210ef6:	cc                   	int3   
  210ef7:	cc                   	int3   
  210ef8:	cc                   	int3   
  210ef9:	cc                   	int3   
  210efa:	cc                   	int3   
  210efb:	cc                   	int3   
  210efc:	cc                   	int3   
  210efd:	cc                   	int3   
  210efe:	cc                   	int3   
  210eff:	cc                   	int3   

0000000000210f00 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc024dbab028df719E>:
    pub const fn new() -> Self {
  210f00:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  210f03:	48 8b 15 9e f7 fe ff 	mov    -0x10862(%rip),%rdx        # 2006a8 <str.0+0x188>
  210f0a:	48 8b 0d 9f f7 fe ff 	mov    -0x10861(%rip),%rcx        # 2006b0 <str.0+0x190>
  210f11:	48 89 17             	mov    %rdx,(%rdi)
  210f14:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  210f18:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  210f1f:	00 
    }
  210f20:	c3                   	retq   
  210f21:	cc                   	int3   
  210f22:	cc                   	int3   
  210f23:	cc                   	int3   
  210f24:	cc                   	int3   
  210f25:	cc                   	int3   
  210f26:	cc                   	int3   
  210f27:	cc                   	int3   
  210f28:	cc                   	int3   
  210f29:	cc                   	int3   
  210f2a:	cc                   	int3   
  210f2b:	cc                   	int3   
  210f2c:	cc                   	int3   
  210f2d:	cc                   	int3   
  210f2e:	cc                   	int3   
  210f2f:	cc                   	int3   

0000000000210f30 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdf791d5e5fd80031E>:
    pub const fn new() -> Self {
  210f30:	48 89 f8             	mov    %rdi,%rax
        Vec { buf: RawVec::NEW, len: 0 }
  210f33:	48 8b 15 9e f7 fe ff 	mov    -0x10862(%rip),%rdx        # 2006d8 <str.0+0x1b8>
  210f3a:	48 8b 0d 9f f7 fe ff 	mov    -0x10861(%rip),%rcx        # 2006e0 <str.0+0x1c0>
  210f41:	48 89 17             	mov    %rdx,(%rdi)
  210f44:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  210f48:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  210f4f:	00 
    }
  210f50:	c3                   	retq   
  210f51:	cc                   	int3   
  210f52:	cc                   	int3   
  210f53:	cc                   	int3   
  210f54:	cc                   	int3   
  210f55:	cc                   	int3   
  210f56:	cc                   	int3   
  210f57:	cc                   	int3   
  210f58:	cc                   	int3   
  210f59:	cc                   	int3   
  210f5a:	cc                   	int3   
  210f5b:	cc                   	int3   
  210f5c:	cc                   	int3   
  210f5d:	cc                   	int3   
  210f5e:	cc                   	int3   
  210f5f:	cc                   	int3   

0000000000210f60 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  210f60:	48 83 ec 18          	sub    $0x18,%rsp
  210f64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  210f69:	e8 d2 6a ff ff       	callq  207a40 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h878b30743715fdd5E>
  210f6e:	48 89 04 24          	mov    %rax,(%rsp)
  210f72:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210f77:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  210f7b:	e8 e0 96 00 00       	callq  21a660 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7fce53aeb6f9a2ccE>
  210f80:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210f84:	48 83 c4 18          	add    $0x18,%rsp
  210f88:	c3                   	retq   
  210f89:	cc                   	int3   
  210f8a:	cc                   	int3   
  210f8b:	cc                   	int3   
  210f8c:	cc                   	int3   
  210f8d:	cc                   	int3   
  210f8e:	cc                   	int3   
  210f8f:	cc                   	int3   

0000000000210f90 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  210f90:	48 83 ec 18          	sub    $0x18,%rsp
  210f94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  210f99:	e8 62 6a ff ff       	callq  207a00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>
  210f9e:	48 89 04 24          	mov    %rax,(%rsp)
  210fa2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210fa7:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  210fab:	e8 30 fb ff ff       	callq  210ae0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
  210fb0:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210fb4:	48 83 c4 18          	add    $0x18,%rsp
  210fb8:	c3                   	retq   
  210fb9:	cc                   	int3   
  210fba:	cc                   	int3   
  210fbb:	cc                   	int3   
  210fbc:	cc                   	int3   
  210fbd:	cc                   	int3   
  210fbe:	cc                   	int3   
  210fbf:	cc                   	int3   

0000000000210fc0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
  210fc0:	48 83 ec 18          	sub    $0x18,%rsp
  210fc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  210fc9:	e8 52 6a ff ff       	callq  207a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>
  210fce:	48 89 04 24          	mov    %rax,(%rsp)
  210fd2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  210fd7:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  210fdb:	e8 30 0a 00 00       	callq  211a10 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>
  210fe0:	48 8b 04 24          	mov    (%rsp),%rax
    }
  210fe4:	48 83 c4 18          	add    $0x18,%rsp
  210fe8:	c3                   	retq   
  210fe9:	cc                   	int3   
  210fea:	cc                   	int3   
  210feb:	cc                   	int3   
  210fec:	cc                   	int3   
  210fed:	cc                   	int3   
  210fee:	cc                   	int3   
  210fef:	cc                   	int3   

0000000000210ff0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h5323d9ea74175e6cE>:
    pub fn len(&self) -> usize {
  210ff0:	50                   	push   %rax
  210ff1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.len
  210ff5:	48 8b 47 10          	mov    0x10(%rdi),%rax
    }
  210ff9:	59                   	pop    %rcx
  210ffa:	c3                   	retq   
  210ffb:	cc                   	int3   
  210ffc:	cc                   	int3   
  210ffd:	cc                   	int3   
  210ffe:	cc                   	int3   
  210fff:	cc                   	int3   

0000000000211000 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h86fcf6085494c979E>:
    pub fn len(&self) -> usize {
  211000:	50                   	push   %rax
  211001:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.len
  211005:	48 8b 47 10          	mov    0x10(%rdi),%rax
    }
  211009:	59                   	pop    %rcx
  21100a:	c3                   	retq   
  21100b:	cc                   	int3   
  21100c:	cc                   	int3   
  21100d:	cc                   	int3   
  21100e:	cc                   	int3   
  21100f:	cc                   	int3   

0000000000211010 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>:
    pub fn push(&mut self, value: T) {
  211010:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  211017:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21101c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  211021:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  211026:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        if self.len == self.buf.capacity() {
  21102b:	48 8b 47 10          	mov    0x10(%rdi),%rax
  21102f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  211034:	48 89 f8             	mov    %rdi,%rax
  211037:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21103e:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  21103f:	48 8b 47 08          	mov    0x8(%rdi),%rax
  211043:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    }
  211048:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21104d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  211052:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  211057:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21105c:	48 39 c8             	cmp    %rcx,%rax
  21105f:	74 11                	je     211072 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x62>
  211061:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  211066:	e8 55 ff ff ff       	callq  210fc0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7caf5d19b64183bdE>
  21106b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211070:	eb 11                	jmp    211083 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x73>
  211072:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            self.reserve(1);
  211077:	be 01 00 00 00       	mov    $0x1,%esi
  21107c:	e8 4f 03 00 00       	callq  2113d0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h889d26193bda6811E>
        if self.len == self.buf.capacity() {
  211081:	eb de                	jmp    211061 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E+0x51>
  211083:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211088:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  21108d:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  211091:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  211096:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21109b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2110a0:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // The obtained pointer is valid for writes since the caller must
        // guarantee that it points to the same allocated object as `self`.
        unsafe { intrinsics::offset(self, count) as *mut T }
  2110a5:	48 c1 e1 03          	shl    $0x3,%rcx
  2110a9:	48 01 c8             	add    %rcx,%rax
  2110ac:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2110b1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2110b6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2110bb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2110c0:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2110c5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            ptr::write(end, value);
  2110ca:	e8 d1 e6 00 00       	callq  21f7a0 <_ZN4core3ptr5write17h869cc00e30cd30f8E>
  2110cf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            self.len += 1;
  2110d4:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2110d8:	48 83 c1 01          	add    $0x1,%rcx
  2110dc:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  2110e0:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2110e7:	c3                   	retq   
  2110e8:	cc                   	int3   
  2110e9:	cc                   	int3   
  2110ea:	cc                   	int3   
  2110eb:	cc                   	int3   
  2110ec:	cc                   	int3   
  2110ed:	cc                   	int3   
  2110ee:	cc                   	int3   
  2110ef:	cc                   	int3   

00000000002110f0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E>:
    pub fn push(&mut self, value: T) {
  2110f0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  2110f7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2110fc:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  211101:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if self.len == self.buf.capacity() {
  211106:	48 8b 47 10          	mov    0x10(%rdi),%rax
  21110a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21110f:	48 89 f8             	mov    %rdi,%rax
  211112:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  211119:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  21111a:	48 8b 47 08          	mov    0x8(%rdi),%rax
  21111e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  211125:	00 
    }
  211126:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21112d:	00 
  21112e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  211133:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  211138:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21113d:	48 39 c8             	cmp    %rcx,%rax
  211140:	74 11                	je     211153 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x63>
  211142:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  211147:	e8 14 fe ff ff       	callq  210f60 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h576293daac08bc37E>
  21114c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211151:	eb 11                	jmp    211164 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x74>
  211153:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            self.reserve(1);
  211158:	be 01 00 00 00       	mov    $0x1,%esi
  21115d:	e8 3e 02 00 00       	callq  2113a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h611d7870e33ffd1fE>
        if self.len == self.buf.capacity() {
  211162:	eb de                	jmp    211142 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E+0x52>
  211164:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211169:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  21116e:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  211172:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  211177:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  21117c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  211181:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  211186:	48 c1 e1 05          	shl    $0x5,%rcx
  21118a:	48 01 c8             	add    %rcx,%rax
  21118d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  211194:	00 
  211195:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21119c:	00 
  21119d:	48 89 04 24          	mov    %rax,(%rsp)
  2111a1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2111a6:	48 8b 3c 24          	mov    (%rsp),%rdi
  2111aa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            ptr::write(end, value);
  2111af:	48 8b 08             	mov    (%rax),%rcx
  2111b2:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2111b7:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2111bb:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2111c0:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2111c4:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2111c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  2111cd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2111d2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  2111d7:	e8 94 e5 00 00       	callq  21f770 <_ZN4core3ptr5write17h04e3884830525521E>
  2111dc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            self.len += 1;
  2111e1:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2111e5:	48 83 c1 01          	add    $0x1,%rcx
  2111e9:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  2111ed:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2111f4:	c3                   	retq   
  2111f5:	cc                   	int3   
  2111f6:	cc                   	int3   
  2111f7:	cc                   	int3   
  2111f8:	cc                   	int3   
  2111f9:	cc                   	int3   
  2111fa:	cc                   	int3   
  2111fb:	cc                   	int3   
  2111fc:	cc                   	int3   
  2111fd:	cc                   	int3   
  2111fe:	cc                   	int3   
  2111ff:	cc                   	int3   

0000000000211200 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E>:
    pub fn push(&mut self, value: T) {
  211200:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  211207:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21120c:	89 f0                	mov    %esi,%eax
  21120e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  211212:	48 c1 ee 20          	shr    $0x20,%rsi
  211216:	66 89 f0             	mov    %si,%ax
  211219:	66 89 44 24 34       	mov    %ax,0x34(%rsp)
  21121e:	8b 44 24 30          	mov    0x30(%rsp),%eax
  211222:	89 44 24 28          	mov    %eax,0x28(%rsp)
  211226:	66 8b 44 24 34       	mov    0x34(%rsp),%ax
  21122b:	66 89 44 24 2c       	mov    %ax,0x2c(%rsp)
  211230:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        if self.len == self.buf.capacity() {
  211235:	48 8b 47 10          	mov    0x10(%rdi),%rax
  211239:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21123e:	48 89 f8             	mov    %rdi,%rax
  211241:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  211248:	00 
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
  211249:	48 8b 47 08          	mov    0x8(%rdi),%rax
  21124d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    }
  211252:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  211257:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21125c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  211261:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  211266:	48 39 c8             	cmp    %rcx,%rax
  211269:	74 11                	je     21127c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x7c>
  21126b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            let end = self.as_mut_ptr().add(self.len);
  211270:	e8 1b fd ff ff       	callq  210f90 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h7b057611815d345eE>
  211275:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21127a:	eb 11                	jmp    21128d <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x8d>
  21127c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            self.reserve(1);
  211281:	be 01 00 00 00       	mov    $0x1,%esi
  211286:	e8 e5 00 00 00       	callq  211370 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h15149a1eb7a60bceE>
        if self.len == self.buf.capacity() {
  21128b:	eb de                	jmp    21126b <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E+0x6b>
  21128d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211292:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
            let end = self.as_mut_ptr().add(self.len);
  211297:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  21129b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2112a0:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2112a5:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2112aa:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2112af:	48 6b c9 06          	imul   $0x6,%rcx,%rcx
  2112b3:	48 01 c8             	add    %rcx,%rax
  2112b6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2112bb:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2112c0:	48 89 04 24          	mov    %rax,(%rsp)
  2112c4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2112c9:	48 8b 3c 24          	mov    (%rsp),%rdi
            ptr::write(end, value);
  2112cd:	66 8b 44 24 2c       	mov    0x2c(%rsp),%ax
  2112d2:	66 89 44 24 3c       	mov    %ax,0x3c(%rsp)
  2112d7:	8b 44 24 28          	mov    0x28(%rsp),%eax
  2112db:	89 44 24 38          	mov    %eax,0x38(%rsp)
  2112df:	8b 44 24 38          	mov    0x38(%rsp),%eax
  2112e3:	89 c6                	mov    %eax,%esi
  2112e5:	0f b7 44 24 3c       	movzwl 0x3c(%rsp),%eax
  2112ea:	48 c1 e0 20          	shl    $0x20,%rax
  2112ee:	48 09 c6             	or     %rax,%rsi
  2112f1:	e8 ea e4 00 00       	callq  21f7e0 <_ZN4core3ptr5write17hc73781c1f294320dE>
  2112f6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            self.len += 1;
  2112fb:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2112ff:	48 83 c1 01          	add    $0x1,%rcx
  211303:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  211307:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21130e:	c3                   	retq   
  21130f:	cc                   	int3   

0000000000211310 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hcea6d2ce5f1d181eE>:
    pub fn as_ptr(&self) -> *const T {
  211310:	48 83 ec 18          	sub    $0x18,%rsp
  211314:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  211319:	e8 02 67 ff ff       	callq  207a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h631fa7d0ffa53725E>
  21131e:	48 89 04 24          	mov    %rax,(%rsp)
  211322:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211327:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21132b:	e8 e0 06 00 00       	callq  211a10 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>
  211330:	48 8b 04 24          	mov    (%rsp),%rax
    }
  211334:	48 83 c4 18          	add    $0x18,%rsp
  211338:	c3                   	retq   
  211339:	cc                   	int3   
  21133a:	cc                   	int3   
  21133b:	cc                   	int3   
  21133c:	cc                   	int3   
  21133d:	cc                   	int3   
  21133e:	cc                   	int3   
  21133f:	cc                   	int3   

0000000000211340 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hdea908836609253bE>:
    pub fn as_ptr(&self) -> *const T {
  211340:	48 83 ec 18          	sub    $0x18,%rsp
  211344:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let ptr = self.buf.ptr();
  211349:	e8 b2 66 ff ff       	callq  207a00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h428f7f7a9851b041E>
  21134e:	48 89 04 24          	mov    %rax,(%rsp)
  211352:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211357:	48 8b 3c 24          	mov    (%rsp),%rdi
            assume(!ptr.is_null());
  21135b:	e8 80 f7 ff ff       	callq  210ae0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
  211360:	48 8b 04 24          	mov    (%rsp),%rax
    }
  211364:	48 83 c4 18          	add    $0x18,%rsp
  211368:	c3                   	retq   
  211369:	cc                   	int3   
  21136a:	cc                   	int3   
  21136b:	cc                   	int3   
  21136c:	cc                   	int3   
  21136d:	cc                   	int3   
  21136e:	cc                   	int3   
  21136f:	cc                   	int3   

0000000000211370 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h15149a1eb7a60bceE>:
    pub fn reserve(&mut self, additional: usize) {
  211370:	48 83 ec 18          	sub    $0x18,%rsp
  211374:	48 89 f2             	mov    %rsi,%rdx
  211377:	48 89 f8             	mov    %rdi,%rax
  21137a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21137f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  211384:	48 89 c7             	mov    %rax,%rdi
  211387:	48 8b 70 10          	mov    0x10(%rax),%rsi
  21138b:	e8 20 67 ff ff       	callq  207ab0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4957b1869eeac1b4E>
    }
  211390:	48 83 c4 18          	add    $0x18,%rsp
  211394:	c3                   	retq   
  211395:	cc                   	int3   
  211396:	cc                   	int3   
  211397:	cc                   	int3   
  211398:	cc                   	int3   
  211399:	cc                   	int3   
  21139a:	cc                   	int3   
  21139b:	cc                   	int3   
  21139c:	cc                   	int3   
  21139d:	cc                   	int3   
  21139e:	cc                   	int3   
  21139f:	cc                   	int3   

00000000002113a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h611d7870e33ffd1fE>:
    pub fn reserve(&mut self, additional: usize) {
  2113a0:	48 83 ec 18          	sub    $0x18,%rsp
  2113a4:	48 89 f2             	mov    %rsi,%rdx
  2113a7:	48 89 f8             	mov    %rdi,%rax
  2113aa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2113af:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  2113b4:	48 89 c7             	mov    %rax,%rdi
  2113b7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  2113bb:	e8 a0 66 ff ff       	callq  207a60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h3a28918768a56235E>
    }
  2113c0:	48 83 c4 18          	add    $0x18,%rsp
  2113c4:	c3                   	retq   
  2113c5:	cc                   	int3   
  2113c6:	cc                   	int3   
  2113c7:	cc                   	int3   
  2113c8:	cc                   	int3   
  2113c9:	cc                   	int3   
  2113ca:	cc                   	int3   
  2113cb:	cc                   	int3   
  2113cc:	cc                   	int3   
  2113cd:	cc                   	int3   
  2113ce:	cc                   	int3   
  2113cf:	cc                   	int3   

00000000002113d0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h889d26193bda6811E>:
    pub fn reserve(&mut self, additional: usize) {
  2113d0:	48 83 ec 18          	sub    $0x18,%rsp
  2113d4:	48 89 f2             	mov    %rsi,%rdx
  2113d7:	48 89 f8             	mov    %rdi,%rax
  2113da:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2113df:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.buf.reserve(self.len, additional);
  2113e4:	48 89 c7             	mov    %rax,%rdi
  2113e7:	48 8b 70 10          	mov    0x10(%rax),%rsi
  2113eb:	e8 10 67 ff ff       	callq  207b00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h4ba9ba7825b0a934E>
    }
  2113f0:	48 83 c4 18          	add    $0x18,%rsp
  2113f4:	c3                   	retq   
  2113f5:	cc                   	int3   
  2113f6:	cc                   	int3   
  2113f7:	cc                   	int3   
  2113f8:	cc                   	int3   
  2113f9:	cc                   	int3   
  2113fa:	cc                   	int3   
  2113fb:	cc                   	int3   
  2113fc:	cc                   	int3   
  2113fd:	cc                   	int3   
  2113fe:	cc                   	int3   
  2113ff:	cc                   	int3   

0000000000211400 <_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h54f7276e96e0decdE>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: fmt::Debug, A: Allocator> fmt::Debug for Vec<T, A> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  211400:	48 83 ec 38          	sub    $0x38,%rsp
  211404:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  211409:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21140e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt::Debug::fmt(&**self, f)
  211413:	e8 38 00 00 00       	callq  211450 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>
  211418:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21141d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  211422:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211427:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21142c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  211431:	e8 0a f6 ff ff       	callq  210a40 <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17hcd787f1212a7fd9fE>
  211436:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21143a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  21143e:	24 01                	and    $0x1,%al
  211440:	0f b6 c0             	movzbl %al,%eax
  211443:	48 83 c4 38          	add    $0x38,%rsp
  211447:	c3                   	retq   
  211448:	cc                   	int3   
  211449:	cc                   	int3   
  21144a:	cc                   	int3   
  21144b:	cc                   	int3   
  21144c:	cc                   	int3   
  21144d:	cc                   	int3   
  21144e:	cc                   	int3   
  21144f:	cc                   	int3   

0000000000211450 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>:
    fn deref(&self) -> &[T] {
  211450:	48 83 ec 28          	sub    $0x28,%rsp
  211454:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211459:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
  21145e:	e8 dd fe ff ff       	callq  211340 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hdea908836609253bE>
  211463:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211468:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21146d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211472:	48 8b 70 10          	mov    0x10(%rax),%rsi
  211476:	e8 d5 e1 ff ff       	callq  20f650 <_ZN4core5slice3raw14from_raw_parts17h756c0bd16b5a8f40E>
  21147b:	48 89 04 24          	mov    %rax,(%rsp)
  21147f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  211484:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211489:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21148d:	48 83 c4 28          	add    $0x28,%rsp
  211491:	c3                   	retq   
  211492:	cc                   	int3   
  211493:	cc                   	int3   
  211494:	cc                   	int3   
  211495:	cc                   	int3   
  211496:	cc                   	int3   
  211497:	cc                   	int3   
  211498:	cc                   	int3   
  211499:	cc                   	int3   
  21149a:	cc                   	int3   
  21149b:	cc                   	int3   
  21149c:	cc                   	int3   
  21149d:	cc                   	int3   
  21149e:	cc                   	int3   
  21149f:	cc                   	int3   

00000000002114a0 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbecd21e546c3f9bdE>:
    fn deref(&self) -> &[T] {
  2114a0:	48 83 ec 28          	sub    $0x28,%rsp
  2114a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2114a9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
  2114ae:	e8 5d fe ff ff       	callq  211310 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hcea6d2ce5f1d181eE>
  2114b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2114b8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2114bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2114c2:	48 8b 70 10          	mov    0x10(%rax),%rsi
  2114c6:	e8 55 e1 ff ff       	callq  20f620 <_ZN4core5slice3raw14from_raw_parts17h0ef61f3524b7899cE>
  2114cb:	48 89 04 24          	mov    %rax,(%rsp)
  2114cf:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2114d4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2114d9:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2114dd:	48 83 c4 28          	add    $0x28,%rsp
  2114e1:	c3                   	retq   
  2114e2:	cc                   	int3   
  2114e3:	cc                   	int3   
  2114e4:	cc                   	int3   
  2114e5:	cc                   	int3   
  2114e6:	cc                   	int3   
  2114e7:	cc                   	int3   
  2114e8:	cc                   	int3   
  2114e9:	cc                   	int3   
  2114ea:	cc                   	int3   
  2114eb:	cc                   	int3   
  2114ec:	cc                   	int3   
  2114ed:	cc                   	int3   
  2114ee:	cc                   	int3   
  2114ef:	cc                   	int3   

00000000002114f0 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb9a8b3d4d7d4adebE>:
    fn index(&self, index: I) -> &Self::Output {
  2114f0:	48 83 ec 38          	sub    $0x38,%rsp
  2114f4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2114f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2114fe:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  211503:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        Index::index(&**self, index)
  211508:	e8 93 ff ff ff       	callq  2114a0 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbecd21e546c3f9bdE>
  21150d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  211512:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  211517:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21151c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  211521:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  211526:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21152b:	e8 e0 6d 01 00       	callq  228310 <_ZN4core5slice5index74_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$5index17h0b3526a5757c1304E>
  211530:	48 89 04 24          	mov    %rax,(%rsp)
  211534:	48 8b 04 24          	mov    (%rsp),%rax
    }
  211538:	48 83 c4 38          	add    $0x38,%rsp
  21153c:	c3                   	retq   
  21153d:	cc                   	int3   
  21153e:	cc                   	int3   
  21153f:	cc                   	int3   

0000000000211540 <_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9f38b1c324b07e96E>:
    fn into_iter(self) -> slice::Iter<'a, T> {
  211540:	48 83 ec 28          	sub    $0x28,%rsp
  211544:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        self.iter()
  211549:	e8 02 ff ff ff       	callq  211450 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h39d8398607ce871cE>
  21154e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  211553:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  211558:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21155d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  211562:	e8 e9 f5 ff ff       	callq  210b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h24ddb1a71b3b251fE>
  211567:	48 89 04 24          	mov    %rax,(%rsp)
  21156b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  211570:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211575:	48 8b 04 24          	mov    (%rsp),%rax
    }
  211579:	48 83 c4 28          	add    $0x28,%rsp
  21157d:	c3                   	retq   
  21157e:	cc                   	int3   
  21157f:	cc                   	int3   

0000000000211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>:
    }
}

impl<T> InterruptDescriptorEntry<T> {
    #[inline]
    pub fn empty() -> Self {
  211580:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  211584:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21158a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  211591:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  211598:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21159f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  2115a6:	00 
  2115a7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  2115ae:	00 
            options: DEFAULT_INTERRUPT_OPTION_BITS,
            gdt_selector: 0,
            reserved: 0,
            handler_type: PhantomData,
        }
    }
  2115af:	48 8b 04 24          	mov    (%rsp),%rax
  2115b3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2115b8:	48 83 c4 10          	add    $0x10,%rsp
  2115bc:	c3                   	retq   
  2115bd:	cc                   	int3   
  2115be:	cc                   	int3   
  2115bf:	cc                   	int3   

00000000002115c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>:
    pub fn empty() -> Self {
  2115c0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  2115c4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  2115ca:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  2115d1:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  2115d8:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  2115df:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  2115e6:	00 
  2115e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  2115ee:	00 
    }
  2115ef:	48 8b 04 24          	mov    (%rsp),%rax
  2115f3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2115f8:	48 83 c4 10          	add    $0x10,%rsp
  2115fc:	c3                   	retq   
  2115fd:	cc                   	int3   
  2115fe:	cc                   	int3   
  2115ff:	cc                   	int3   

0000000000211600 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hac5a2b431e8a6007E>:
    pub fn empty() -> Self {
  211600:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  211604:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21160a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  211611:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  211618:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21161f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  211626:	00 
  211627:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  21162e:	00 
    }
  21162f:	48 8b 04 24          	mov    (%rsp),%rax
  211633:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211638:	48 83 c4 10          	add    $0x10,%rsp
  21163c:	c3                   	retq   
  21163d:	cc                   	int3   
  21163e:	cc                   	int3   
  21163f:	cc                   	int3   

0000000000211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>:
    pub fn empty() -> Self {
  211640:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  211644:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21164a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  211651:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  211658:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21165f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  211666:	00 
  211667:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  21166e:	00 
    }
  21166f:	48 8b 04 24          	mov    (%rsp),%rax
  211673:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211678:	48 83 c4 10          	add    $0x10,%rsp
  21167c:	c3                   	retq   
  21167d:	cc                   	int3   
  21167e:	cc                   	int3   
  21167f:	cc                   	int3   

0000000000211680 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>:
    pub fn empty() -> Self {
  211680:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  211684:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  21168a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  211691:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  211698:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  21169f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  2116a6:	00 
  2116a7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  2116ae:	00 
    }
  2116af:	48 8b 04 24          	mov    (%rsp),%rax
  2116b3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2116b8:	48 83 c4 10          	add    $0x10,%rsp
  2116bc:	c3                   	retq   
  2116bd:	cc                   	int3   
  2116be:	cc                   	int3   
  2116bf:	cc                   	int3   

00000000002116c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hcc15ebcda2d58b3aE>:

    #[inline]
    fn read_cs(&self) -> u16 {
  2116c0:	48 83 ec 18          	sub    $0x18,%rsp
  2116c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  2116c9:	48 8d 3d 5f f3 fe ff 	lea    -0x10ca1(%rip),%rdi        # 200a2f <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x99>
  2116d0:	e8 3b 91 00 00       	callq  21a810 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  2116d5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2116da:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  2116df:	48 83 c4 18          	add    $0x18,%rsp
  2116e3:	c3                   	retq   
  2116e4:	cc                   	int3   
  2116e5:	cc                   	int3   
  2116e6:	cc                   	int3   
  2116e7:	cc                   	int3   
  2116e8:	cc                   	int3   
  2116e9:	cc                   	int3   
  2116ea:	cc                   	int3   
  2116eb:	cc                   	int3   
  2116ec:	cc                   	int3   
  2116ed:	cc                   	int3   
  2116ee:	cc                   	int3   
  2116ef:	cc                   	int3   

00000000002116f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17he76b61bcb18d04e3E>:
    fn read_cs(&self) -> u16 {
  2116f0:	48 83 ec 18          	sub    $0x18,%rsp
  2116f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  2116f9:	48 8d 3d 2f f3 fe ff 	lea    -0x10cd1(%rip),%rdi        # 200a2f <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x99>
  211700:	e8 0b 91 00 00       	callq  21a810 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  211705:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21170a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  21170f:	48 83 c4 18          	add    $0x18,%rsp
  211713:	c3                   	retq   
  211714:	cc                   	int3   
  211715:	cc                   	int3   
  211716:	cc                   	int3   
  211717:	cc                   	int3   
  211718:	cc                   	int3   
  211719:	cc                   	int3   
  21171a:	cc                   	int3   
  21171b:	cc                   	int3   
  21171c:	cc                   	int3   
  21171d:	cc                   	int3   
  21171e:	cc                   	int3   
  21171f:	cc                   	int3   

0000000000211720 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hed034d7671a9e6d1E>:
    fn read_cs(&self) -> u16 {
  211720:	48 83 ec 18          	sub    $0x18,%rsp
  211724:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  211729:	48 8d 3d ff f2 fe ff 	lea    -0x10d01(%rip),%rdi        # 200a2f <_ZN9r3_kernel2mm6paging13KERNEL_PAGING17hdebe68e08aaa748eE+0x99>
  211730:	e8 db 90 00 00       	callq  21a810 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  211735:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21173a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  21173f:	48 83 c4 18          	add    $0x18,%rsp
  211743:	c3                   	retq   
  211744:	cc                   	int3   
  211745:	cc                   	int3   
  211746:	cc                   	int3   
  211747:	cc                   	int3   
  211748:	cc                   	int3   
  211749:	cc                   	int3   
  21174a:	cc                   	int3   
  21174b:	cc                   	int3   
  21174c:	cc                   	int3   
  21174d:	cc                   	int3   
  21174e:	cc                   	int3   
  21174f:	cc                   	int3   

0000000000211750 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h52ea135a040c928dE>:

    #[inline]
    fn set_pointers(&mut self, addr: u64) {
  211750:	48 83 ec 30          	sub    $0x30,%rsp
  211754:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  211759:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21175e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  211763:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  211768:	48 89 f0             	mov    %rsi,%rax
  21176b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  211771:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  211774:	48 c1 ee 10          	shr    $0x10,%rsi
  211778:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21177d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211782:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  211787:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21178c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  211793:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  211797:	48 c1 e8 20          	shr    $0x20,%rax
  21179b:	48 89 04 24          	mov    %rax,(%rsp)
  21179f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2117a4:	48 8b 0c 24          	mov    (%rsp),%rcx
  2117a8:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  2117af:	00 00 00 
  2117b2:	48 21 d1             	and    %rdx,%rcx
  2117b5:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  2117b8:	48 83 c4 30          	add    $0x30,%rsp
  2117bc:	c3                   	retq   
  2117bd:	cc                   	int3   
  2117be:	cc                   	int3   
  2117bf:	cc                   	int3   

00000000002117c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h6bdb624b9dce4562E>:
    fn set_pointers(&mut self, addr: u64) {
  2117c0:	48 83 ec 30          	sub    $0x30,%rsp
  2117c4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2117c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2117ce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2117d3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  2117d8:	48 89 f0             	mov    %rsi,%rax
  2117db:	48 25 ff ff 00 00    	and    $0xffff,%rax
  2117e1:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  2117e4:	48 c1 ee 10          	shr    $0x10,%rsi
  2117e8:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2117ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2117f2:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2117f7:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2117fc:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  211803:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  211807:	48 c1 e8 20          	shr    $0x20,%rax
  21180b:	48 89 04 24          	mov    %rax,(%rsp)
  21180f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211814:	48 8b 0c 24          	mov    (%rsp),%rcx
  211818:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  21181f:	00 00 00 
  211822:	48 21 d1             	and    %rdx,%rcx
  211825:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  211828:	48 83 c4 30          	add    $0x30,%rsp
  21182c:	c3                   	retq   
  21182d:	cc                   	int3   
  21182e:	cc                   	int3   
  21182f:	cc                   	int3   

0000000000211830 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h9080365b9cc36586E>:
    fn set_pointers(&mut self, addr: u64) {
  211830:	48 83 ec 30          	sub    $0x30,%rsp
  211834:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  211839:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21183e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  211843:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  211848:	48 89 f0             	mov    %rsi,%rax
  21184b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  211851:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  211854:	48 c1 ee 10          	shr    $0x10,%rsi
  211858:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21185d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  211862:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  211867:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21186c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  211873:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  211877:	48 c1 e8 20          	shr    $0x20,%rax
  21187b:	48 89 04 24          	mov    %rax,(%rsp)
  21187f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  211884:	48 8b 0c 24          	mov    (%rsp),%rcx
  211888:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  21188f:	00 00 00 
  211892:	48 21 d1             	and    %rdx,%rcx
  211895:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  211898:	48 83 c4 30          	add    $0x30,%rsp
  21189c:	c3                   	retq   
  21189d:	cc                   	int3   
  21189e:	cc                   	int3   
  21189f:	cc                   	int3   

00000000002118a0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h45b4c043149096bbE>:

        low | high | middle
    }

    #[inline]
    pub fn set_handler(&mut self, handler_address: u64) {
  2118a0:	48 83 ec 28          	sub    $0x28,%rsp
  2118a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2118a9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2118ae:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        // set high, low and middle pointers
        self.set_pointers(handler_address);
  2118b3:	e8 98 fe ff ff       	callq  211750 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h52ea135a040c928dE>
  2118b8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi

        // get the cs register:
        self.gdt_selector = self.read_cs();
  2118bd:	e8 2e fe ff ff       	callq  2116f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17he76b61bcb18d04e3E>
  2118c2:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2118c7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2118cc:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  2118d1:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  2118d5:	48 83 c7 04          	add    $0x4,%rdi
  2118d9:	be 0f 00 00 00       	mov    $0xf,%esi
  2118de:	ba 01 00 00 00       	mov    $0x1,%edx
  2118e3:	e8 88 db 00 00       	callq  21f470 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  2118e8:	48 83 c4 28          	add    $0x28,%rsp
  2118ec:	c3                   	retq   
  2118ed:	cc                   	int3   
  2118ee:	cc                   	int3   
  2118ef:	cc                   	int3   

00000000002118f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hc36dc393644916b4E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  2118f0:	48 83 ec 28          	sub    $0x28,%rsp
  2118f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2118f9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2118fe:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  211903:	e8 b8 fe ff ff       	callq  2117c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h6bdb624b9dce4562E>
  211908:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  21190d:	e8 0e fe ff ff       	callq  211720 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hed034d7671a9e6d1E>
  211912:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  211917:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21191c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  211921:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  211925:	48 83 c7 04          	add    $0x4,%rdi
  211929:	be 0f 00 00 00       	mov    $0xf,%esi
  21192e:	ba 01 00 00 00       	mov    $0x1,%edx
  211933:	e8 38 db 00 00       	callq  21f470 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  211938:	48 83 c4 28          	add    $0x28,%rsp
  21193c:	c3                   	retq   
  21193d:	cc                   	int3   
  21193e:	cc                   	int3   
  21193f:	cc                   	int3   

0000000000211940 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf6fc0362a19ebe78E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  211940:	48 83 ec 28          	sub    $0x28,%rsp
  211944:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211949:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21194e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  211953:	e8 d8 fe ff ff       	callq  211830 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h9080365b9cc36586E>
  211958:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  21195d:	e8 5e fd ff ff       	callq  2116c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hcc15ebcda2d58b3aE>
  211962:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  211967:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21196c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  211971:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  211975:	48 83 c7 04          	add    $0x4,%rdi
  211979:	be 0f 00 00 00       	mov    $0xf,%esi
  21197e:	ba 01 00 00 00       	mov    $0x1,%edx
  211983:	e8 e8 da 00 00       	callq  21f470 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>
    }
  211988:	48 83 c4 28          	add    $0x28,%rsp
  21198c:	c3                   	retq   
  21198d:	cc                   	int3   
  21198e:	cc                   	int3   
  21198f:	cc                   	int3   

0000000000211990 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E>:

    #[inline]
    pub fn set_stack_index(&mut self, stack_index: u16) {
  211990:	48 83 ec 38          	sub    $0x38,%rsp
  211994:	66 89 f0             	mov    %si,%ax
  211997:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21199c:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
        self.options.set_bits(0..3, stack_index + 1);
  2119a1:	48 83 c7 04          	add    $0x4,%rdi
  2119a5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2119aa:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  2119b1:	00 00 
  2119b3:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  2119ba:	00 00 
  2119bc:	66 83 c0 01          	add    $0x1,%ax
  2119c0:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  2119c5:	0f 92 c0             	setb   %al
  2119c8:	a8 01                	test   $0x1,%al
  2119ca:	75 1e                	jne    2119ea <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E+0x5a>
  2119cc:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
  2119d1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2119d6:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2119db:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2119e0:	0f b7 c8             	movzwl %ax,%ecx
  2119e3:	e8 78 c1 00 00       	callq  21db60 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E>
  2119e8:	eb 1a                	jmp    211a04 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E+0x74>
  2119ea:	48 8d 3d 5f f0 fe ff 	lea    -0x10fa1(%rip),%rdi        # 200a50 <str.0>
  2119f1:	48 8d 15 c0 62 02 00 	lea    0x262c0(%rip),%rdx        # 237cb8 <memcmp+0x1708>
  2119f8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2119fd:	e8 5e 1a 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  211a02:	0f 0b                	ud2    
    }
  211a04:	48 83 c4 38          	add    $0x38,%rsp
  211a08:	c3                   	retq   
  211a09:	cc                   	int3   
  211a0a:	cc                   	int3   
  211a0b:	cc                   	int3   
  211a0c:	cc                   	int3   
  211a0d:	cc                   	int3   
  211a0e:	cc                   	int3   
  211a0f:	cc                   	int3   

0000000000211a10 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7cdd9a0ab6c85644E>:
    pub const fn is_null(self) -> bool {
  211a10:	48 83 ec 18          	sub    $0x18,%rsp
  211a14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  211a19:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  211a1e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  211a23:	31 c0                	xor    %eax,%eax
  211a25:	89 c6                	mov    %eax,%esi
  211a27:	e8 64 fd 01 00       	callq  231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  211a2c:	88 44 24 07          	mov    %al,0x7(%rsp)
  211a30:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  211a34:	24 01                	and    $0x1,%al
  211a36:	0f b6 c0             	movzbl %al,%eax
  211a39:	48 83 c4 18          	add    $0x18,%rsp
  211a3d:	c3                   	retq   
  211a3e:	cc                   	int3   
  211a3f:	cc                   	int3   

0000000000211a40 <_ZN3log13set_max_level17ha683ad6dd9a2a3f2E>:
pub fn set_max_level(level: LevelFilter) {
  211a40:	48 83 ec 18          	sub    $0x18,%rsp
  211a44:	48 89 fe             	mov    %rdi,%rsi
  211a47:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    MAX_LOG_LEVEL_FILTER.store(level as usize, Ordering::SeqCst)
  211a4c:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  211a51:	48 8b 3d b8 96 02 00 	mov    0x296b8(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  211a58:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  211a5d:	e8 9e 72 01 00       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>
}
  211a62:	48 83 c4 18          	add    $0x18,%rsp
  211a66:	c3                   	retq   
  211a67:	cc                   	int3   
  211a68:	cc                   	int3   
  211a69:	cc                   	int3   
  211a6a:	cc                   	int3   
  211a6b:	cc                   	int3   
  211a6c:	cc                   	int3   
  211a6d:	cc                   	int3   
  211a6e:	cc                   	int3   
  211a6f:	cc                   	int3   

0000000000211a70 <_ZN3log6Record4args17h9dae30359519c3ecE>:
    pub fn args(&self) -> &fmt::Arguments<'a> {
  211a70:	50                   	push   %rax
  211a71:	48 89 f8             	mov    %rdi,%rax
  211a74:	48 89 04 24          	mov    %rax,(%rsp)
        &self.args
  211a78:	48 83 c0 18          	add    $0x18,%rax
    }
  211a7c:	59                   	pop    %rcx
  211a7d:	c3                   	retq   
  211a7e:	cc                   	int3   
  211a7f:	cc                   	int3   

0000000000211a80 <_ZN3log6Record5level17h1be5adb9d5eedc77E>:
    pub fn level(&self) -> Level {
  211a80:	48 83 ec 18          	sub    $0x18,%rsp
  211a84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.level()
  211a89:	e8 42 00 00 00       	callq  211ad0 <_ZN3log8Metadata5level17h2d915eac1d5db22aE>
  211a8e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211a93:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  211a98:	48 83 c4 18          	add    $0x18,%rsp
  211a9c:	c3                   	retq   
  211a9d:	cc                   	int3   
  211a9e:	cc                   	int3   
  211a9f:	cc                   	int3   

0000000000211aa0 <_ZN3log6Record6target17h757367dd169b837eE>:
    pub fn target(&self) -> &'a str {
  211aa0:	48 83 ec 18          	sub    $0x18,%rsp
  211aa4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.target()
  211aa9:	e8 32 00 00 00       	callq  211ae0 <_ZN3log8Metadata6target17hbe8e82ffab88ce5dE>
  211aae:	48 89 04 24          	mov    %rax,(%rsp)
  211ab2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  211ab7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  211abc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  211ac0:	48 83 c4 18          	add    $0x18,%rsp
  211ac4:	c3                   	retq   
  211ac5:	cc                   	int3   
  211ac6:	cc                   	int3   
  211ac7:	cc                   	int3   
  211ac8:	cc                   	int3   
  211ac9:	cc                   	int3   
  211aca:	cc                   	int3   
  211acb:	cc                   	int3   
  211acc:	cc                   	int3   
  211acd:	cc                   	int3   
  211ace:	cc                   	int3   
  211acf:	cc                   	int3   

0000000000211ad0 <_ZN3log8Metadata5level17h2d915eac1d5db22aE>:
    pub fn level(&self) -> Level {
  211ad0:	50                   	push   %rax
  211ad1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.level
  211ad5:	48 8b 07             	mov    (%rdi),%rax
    }
  211ad8:	59                   	pop    %rcx
  211ad9:	c3                   	retq   
  211ada:	cc                   	int3   
  211adb:	cc                   	int3   
  211adc:	cc                   	int3   
  211add:	cc                   	int3   
  211ade:	cc                   	int3   
  211adf:	cc                   	int3   

0000000000211ae0 <_ZN3log8Metadata6target17hbe8e82ffab88ce5dE>:
    pub fn target(&self) -> &'a str {
  211ae0:	50                   	push   %rax
  211ae1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.target
  211ae5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  211ae9:	48 8b 57 10          	mov    0x10(%rdi),%rdx
    }
  211aed:	59                   	pop    %rcx
  211aee:	c3                   	retq   
  211aef:	cc                   	int3   

0000000000211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>:
    fn le(&self, other: &LevelFilter) -> bool {
  211af0:	48 83 ec 10          	sub    $0x10,%rsp
  211af4:	48 89 3c 24          	mov    %rdi,(%rsp)
  211af8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        *self as usize <= *other as usize
  211afd:	48 8b 07             	mov    (%rdi),%rax
  211b00:	48 8b 0e             	mov    (%rsi),%rcx
  211b03:	48 39 c8             	cmp    %rcx,%rax
  211b06:	0f 96 c0             	setbe  %al
    }
  211b09:	24 01                	and    $0x1,%al
  211b0b:	0f b6 c0             	movzbl %al,%eax
  211b0e:	48 83 c4 10          	add    $0x10,%rsp
  211b12:	c3                   	retq   
  211b13:	cc                   	int3   
  211b14:	cc                   	int3   
  211b15:	cc                   	int3   
  211b16:	cc                   	int3   
  211b17:	cc                   	int3   
  211b18:	cc                   	int3   
  211b19:	cc                   	int3   
  211b1a:	cc                   	int3   
  211b1b:	cc                   	int3   
  211b1c:	cc                   	int3   
  211b1d:	cc                   	int3   
  211b1e:	cc                   	int3   
  211b1f:	cc                   	int3   

0000000000211b20 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9893b0f9eccf63e0E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
  211b20:	48 83 ec 18          	sub    $0x18,%rsp
  211b24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.it.next().copied()
  211b29:	e8 72 7a 00 00       	callq  2195a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  211b2e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  211b33:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  211b38:	e8 83 ee ff ff       	callq  2109c0 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5874a7634d4b925aE>
  211b3d:	88 44 24 06          	mov    %al,0x6(%rsp)
  211b41:	88 54 24 07          	mov    %dl,0x7(%rsp)
  211b45:	8a 54 24 07          	mov    0x7(%rsp),%dl
  211b49:	8a 44 24 06          	mov    0x6(%rsp),%al
    }
  211b4d:	24 01                	and    $0x1,%al
  211b4f:	48 83 c4 18          	add    $0x18,%rsp
  211b53:	c3                   	retq   
  211b54:	cc                   	int3   
  211b55:	cc                   	int3   
  211b56:	cc                   	int3   
  211b57:	cc                   	int3   
  211b58:	cc                   	int3   
  211b59:	cc                   	int3   
  211b5a:	cc                   	int3   
  211b5b:	cc                   	int3   
  211b5c:	cc                   	int3   
  211b5d:	cc                   	int3   
  211b5e:	cc                   	int3   
  211b5f:	cc                   	int3   

0000000000211b60 <_ZN9r3_kernel4acpi4rsdt16is_extended_rsdp17h6343edd57b7b4b03E>:
pub fn is_extended_rsdp(rsdp: &RSDPDescriptor) -> bool {
  211b60:	50                   	push   %rax
  211b61:	48 89 3c 24          	mov    %rdi,(%rsp)
    rsdp.revision == 2
  211b65:	80 7f 0f 02          	cmpb   $0x2,0xf(%rdi)
  211b69:	0f 94 c0             	sete   %al
}
  211b6c:	24 01                	and    $0x1,%al
  211b6e:	0f b6 c0             	movzbl %al,%eax
  211b71:	59                   	pop    %rcx
  211b72:	c3                   	retq   
  211b73:	cc                   	int3   
  211b74:	cc                   	int3   
  211b75:	cc                   	int3   
  211b76:	cc                   	int3   
  211b77:	cc                   	int3   
  211b78:	cc                   	int3   
  211b79:	cc                   	int3   
  211b7a:	cc                   	int3   
  211b7b:	cc                   	int3   
  211b7c:	cc                   	int3   
  211b7d:	cc                   	int3   
  211b7e:	cc                   	int3   
  211b7f:	cc                   	int3   

0000000000211b80 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E>:
    pub fn parse_from_bootinfo() -> Result<AcpiRootTableKind, AcpiRootTableError> {
  211b80:	48 81 ec b8 02 00 00 	sub    $0x2b8,%rsp
  211b87:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  211b8e:	00 
  211b8f:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  211b96:	00 
        let boot_info = BootProtocol::get_boot_proto();
  211b97:	e8 64 62 00 00       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  211b9c:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  211ba3:	00 
  211ba4:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  211bab:	00 
  211bac:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  211bb3:	00 
        let rsdp_opt = boot_info.unwrap().rsdp_addr;
  211bb4:	48 8d 35 15 61 02 00 	lea    0x26115(%rip),%rsi        # 237cd0 <memcmp+0x1720>
  211bbb:	e8 20 e7 ff ff       	callq  2102e0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h907ee5ade5f04154E>
  211bc0:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  211bc7:	00 
  211bc8:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  211bcf:	00 
  211bd0:	8b 78 78             	mov    0x78(%rax),%edi
  211bd3:	89 bc 24 d4 00 00 00 	mov    %edi,0xd4(%rsp)
  211bda:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
  211be1:	48 89 b4 24 d8 00 00 	mov    %rsi,0xd8(%rsp)
  211be8:	00 
  211be9:	89 bc 24 40 02 00 00 	mov    %edi,0x240(%rsp)
  211bf0:	48 89 b4 24 48 02 00 	mov    %rsi,0x248(%rsp)
  211bf7:	00 
        if rsdp_opt.into_option().is_none() {
  211bf8:	e8 a3 7c 00 00       	callq  2198a0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  211bfd:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  211c04:	00 
  211c05:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  211c0c:	00 
  211c0d:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  211c14:	00 
  211c15:	e8 16 e9 ff ff       	callq  210530 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  211c1a:	88 84 24 d3 00 00 00 	mov    %al,0xd3(%rsp)
  211c21:	8a 84 24 d3 00 00 00 	mov    0xd3(%rsp),%al
  211c28:	a8 01                	test   $0x1,%al
  211c2a:	75 28                	jne    211c54 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xd4>
  211c2c:	eb 00                	jmp    211c2e <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xae>
  211c2e:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  211c35:	00 
  211c36:	8b bc 24 d4 00 00 00 	mov    0xd4(%rsp),%edi
        let rsdp_addr = p_to_v(PhysicalAddress::from_u64(rsdp_opt.into_option().unwrap()));
  211c3d:	e8 5e 7c 00 00       	callq  2198a0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  211c42:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  211c49:	00 
  211c4a:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  211c51:	00 
  211c52:	eb 1f                	jmp    211c73 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xf3>
  211c54:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  211c5b:	00 
            return Err(AcpiRootTableError::NotFound);
  211c5c:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  211c60:	c6 00 01             	movb   $0x1,(%rax)
  211c63:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  211c6a:	00 
    }
  211c6b:	48 81 c4 b8 02 00 00 	add    $0x2b8,%rsp
  211c72:	c3                   	retq   
  211c73:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  211c7a:	00 
  211c7b:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  211c82:	00 
        let rsdp_addr = p_to_v(PhysicalAddress::from_u64(rsdp_opt.into_option().unwrap()));
  211c83:	48 8d 15 5e 60 02 00 	lea    0x2605e(%rip),%rdx        # 237ce8 <memcmp+0x1738>
  211c8a:	e8 91 e3 ff ff       	callq  210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  211c8f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  211c96:	00 
  211c97:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  211c9e:	00 
  211c9f:	e8 2c 44 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  211ca4:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  211cab:	00 
  211cac:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  211cb3:	00 
  211cb4:	e8 b7 44 01 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  211cb9:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  211cc0:	00 
  211cc1:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  211cc8:	00 
  211cc9:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  211cd0:	00 
        let bytes_slice: &[u8; 20] = unsafe { &*rsdp_addr.get_ptr() };
  211cd1:	e8 4a 5f 00 00       	callq  217c20 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17he019b606acc39f32E>
  211cd6:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  211cdd:	00 
  211cde:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  211ce5:	00 
  211ce6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  211ced:	00 
  211cee:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  211cf5:	00 
        let rsdp_struct: &RSDPDescriptor = unsafe { &*rsdp_addr.get_ptr() };
  211cf6:	e8 05 5e 00 00       	callq  217b00 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h495d47d78e1748e7E>
  211cfb:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  211d02:	00 
  211d03:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  211d0a:	00 
  211d0b:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  211d12:	00 
            if str::from_utf8_unchecked(&rsdp_struct.signature) != RSDT_SIG {
  211d13:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  211d1a:	00 
  211d1b:	be 08 00 00 00       	mov    $0x8,%esi
  211d20:	e8 8b 65 01 00       	callq  2282b0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  211d25:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  211d2c:	00 
  211d2d:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  211d34:	00 
  211d35:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  211d3c:	00 
  211d3d:	48 8d 35 bc 5f 02 00 	lea    0x25fbc(%rip),%rsi        # 237d00 <memcmp+0x1750>
  211d44:	e8 b7 71 01 00       	callq  228f00 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>
  211d49:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  211d50:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  211d57:	a8 01                	test   $0x1,%al
  211d59:	75 29                	jne    211d84 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x204>
  211d5b:	eb 00                	jmp    211d5d <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x1dd>
  211d5d:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  211d64:	00 
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  211d65:	be 14 00 00 00       	mov    $0x14,%esi
  211d6a:	e8 e1 ee 01 00       	callq  230c50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  211d6f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  211d76:	00 
  211d77:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  211d7e:	00 
  211d7f:	e9 45 01 00 00       	jmpq   211ec9 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x349>
                log::error!("Invalid rsdp signature, expected={}", RSDT_SIG);
  211d84:	48 c7 84 24 28 01 00 	movq   $0x1,0x128(%rsp)
  211d8b:	00 01 00 00 00 
  211d90:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  211d97:	00 
  211d98:	48 8d 35 99 e8 fe ff 	lea    -0x11767(%rip),%rsi        # 200638 <str.0+0x118>
  211d9f:	e8 4c fd ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  211da4:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  211da8:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  211dac:	a8 01                	test   $0x1,%al
  211dae:	75 0c                	jne    211dbc <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x23c>
  211db0:	eb 00                	jmp    211db2 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x232>
  211db2:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  211db9:	00 
  211dba:	eb 5a                	jmp    211e16 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x296>
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  211dbc:	c6 84 24 af 02 00 00 	movb   $0x0,0x2af(%rsp)
  211dc3:	00 
  211dc4:	48 8b 3d 45 93 02 00 	mov    0x29345(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  211dcb:	0f b6 b4 24 af 02 00 	movzbl 0x2af(%rsp),%esi
  211dd2:	00 
  211dd3:	e8 e8 6e 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  211dd8:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  211ddf:	00 
  211de0:	48 8b 84 24 b0 02 00 	mov    0x2b0(%rsp),%rax
  211de7:	00 
  211de8:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  211def:	00 
  211df0:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  211df7:	00 
  211df8:	48 8d b4 24 38 01 00 	lea    0x138(%rsp),%rsi
  211dff:	00 
  211e00:	e8 eb fc ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  211e05:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  211e09:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  211e0d:	24 01                	and    $0x1,%al
  211e0f:	88 84 24 37 01 00 00 	mov    %al,0x137(%rsp)
  211e16:	f6 84 24 37 01 00 00 	testb  $0x1,0x137(%rsp)
  211e1d:	01 
  211e1e:	75 14                	jne    211e34 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x2b4>
  211e20:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  211e27:	00 
                return Err(AcpiRootTableError::InvalidSignature);
  211e28:	c6 40 01 01          	movb   $0x1,0x1(%rax)
  211e2c:	c6 00 01             	movb   $0x1,(%rax)
  211e2f:	e9 2f fe ff ff       	jmpq   211c63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid rsdp signature, expected={}", RSDT_SIG);
  211e34:	48 8d 05 c5 5e 02 00 	lea    0x25ec5(%rip),%rax        # 237d00 <memcmp+0x1750>
  211e3b:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  211e42:	00 
  211e43:	48 8b bc 24 80 01 00 	mov    0x180(%rsp),%rdi
  211e4a:	00 
  211e4b:	48 89 bc 24 60 02 00 	mov    %rdi,0x260(%rsp)
  211e52:	00 
  211e53:	48 8b 35 c6 92 02 00 	mov    0x292c6(%rip),%rsi        # 23b120 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  211e5a:	e8 b1 f6 01 00       	callq  231510 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  211e5f:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  211e64:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  211e69:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  211e6e:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  211e73:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  211e7a:	00 
  211e7b:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  211e82:	00 
  211e83:	48 8d 8c 24 70 01 00 	lea    0x170(%rsp),%rcx
  211e8a:	00 
  211e8b:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  211e92:	00 
  211e93:	48 8d 35 76 5e 02 00 	lea    0x25e76(%rip),%rsi        # 237d10 <memcmp+0x1760>
  211e9a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  211ea0:	4c 89 c2             	mov    %r8,%rdx
  211ea3:	e8 18 44 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  211ea8:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  211eaf:	00 
  211eb0:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  211eb7:	00 
  211eb8:	48 8d 15 61 5e 02 00 	lea    0x25e61(%rip),%rdx        # 237d20 <memcmp+0x1770>
  211ebf:	e8 2c e7 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  211ec4:	e9 57 ff ff ff       	jmpq   211e20 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x2a0>
  211ec9:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  211ed0:	00 
  211ed1:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  211ed8:	00 
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  211ed9:	e8 b2 70 00 00       	callq  218f90 <_ZN4core4iter6traits8iterator8Iterator3map17h249dee666523cc13E>
  211ede:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  211ee3:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  211ee8:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  211eed:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  211ef2:	e8 69 ed ff ff       	callq  210c60 <_ZN4core4iter6traits8iterator8Iterator3sum17hfd8a934b45b619cfE>
  211ef7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  211efc:	48 89 84 24 68 02 00 	mov    %rax,0x268(%rsp)
  211f03:	00 
  211f04:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        if legacy_checksum & 0xff != 0 {
  211f09:	48 25 ff 00 00 00    	and    $0xff,%rax
  211f0f:	48 83 f8 00          	cmp    $0x0,%rax
  211f13:	75 16                	jne    211f2b <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3ab>
        if is_extended_rsdp(&rsdp_struct) {
  211f15:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  211f1c:	00 
  211f1d:	e8 3e fc ff ff       	callq  211b60 <_ZN9r3_kernel4acpi4rsdt16is_extended_rsdp17h6343edd57b7b4b03E>
  211f22:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  211f26:	e9 f3 00 00 00       	jmpq   21201e <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x49e>
            log::error!("Invalid legacy rsdt checksum");
  211f2b:	48 c7 84 24 88 01 00 	movq   $0x1,0x188(%rsp)
  211f32:	00 01 00 00 00 
  211f37:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  211f3e:	00 
  211f3f:	48 8d 35 f2 e6 fe ff 	lea    -0x1190e(%rip),%rsi        # 200638 <str.0+0x118>
  211f46:	e8 a5 fb ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  211f4b:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  211f4f:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  211f53:	a8 01                	test   $0x1,%al
  211f55:	75 0c                	jne    211f63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3e3>
  211f57:	eb 00                	jmp    211f59 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x3d9>
  211f59:	c6 84 24 97 01 00 00 	movb   $0x0,0x197(%rsp)
  211f60:	00 
  211f61:	eb 5a                	jmp    211fbd <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x43d>
  211f63:	c6 84 24 9f 02 00 00 	movb   $0x0,0x29f(%rsp)
  211f6a:	00 
  211f6b:	48 8b 3d 9e 91 02 00 	mov    0x2919e(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  211f72:	0f b6 b4 24 9f 02 00 	movzbl 0x29f(%rsp),%esi
  211f79:	00 
  211f7a:	e8 41 6d 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  211f7f:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  211f86:	00 
  211f87:	48 8b 84 24 a0 02 00 	mov    0x2a0(%rsp),%rax
  211f8e:	00 
  211f8f:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  211f96:	00 
  211f97:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  211f9e:	00 
  211f9f:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  211fa6:	00 
  211fa7:	e8 44 fb ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  211fac:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  211fb0:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  211fb4:	24 01                	and    $0x1,%al
  211fb6:	88 84 24 97 01 00 00 	mov    %al,0x197(%rsp)
  211fbd:	f6 84 24 97 01 00 00 	testb  $0x1,0x197(%rsp)
  211fc4:	01 
  211fc5:	75 14                	jne    211fdb <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x45b>
  211fc7:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  211fce:	00 
            return Err(AcpiRootTableError::InvalidChecksum);
  211fcf:	c6 40 01 02          	movb   $0x2,0x1(%rax)
  211fd3:	c6 00 01             	movb   $0x1,(%rax)
  211fd6:	e9 88 fc ff ff       	jmpq   211c63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
            log::error!("Invalid legacy rsdt checksum");
  211fdb:	48 8d bc 24 a0 01 00 	lea    0x1a0(%rsp),%rdi
  211fe2:	00 
  211fe3:	48 8d 35 6e 5d 02 00 	lea    0x25d6e(%rip),%rsi        # 237d58 <memcmp+0x17a8>
  211fea:	ba 01 00 00 00       	mov    $0x1,%edx
  211fef:	48 8d 0d da ea fe ff 	lea    -0x11526(%rip),%rcx        # 200ad0 <str.0+0x80>
  211ff6:	31 c0                	xor    %eax,%eax
  211ff8:	41 89 c0             	mov    %eax,%r8d
  211ffb:	e8 c0 42 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212000:	48 8b b4 24 88 01 00 	mov    0x188(%rsp),%rsi
  212007:	00 
  212008:	48 8d bc 24 a0 01 00 	lea    0x1a0(%rsp),%rdi
  21200f:	00 
  212010:	48 8d 15 51 5d 02 00 	lea    0x25d51(%rip),%rdx        # 237d68 <memcmp+0x17b8>
  212017:	e8 d4 e5 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21201c:	eb a9                	jmp    211fc7 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x447>
  21201e:	8a 44 24 4f          	mov    0x4f(%rsp),%al
        if is_extended_rsdp(&rsdp_struct) {
  212022:	a8 01                	test   $0x1,%al
  212024:	75 47                	jne    21206d <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x4ed>
  212026:	eb 00                	jmp    212028 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x4a8>
  212028:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  21202f:	00 
        return Ok(AcpiRootTableKind::RSDT(rsdp_struct.rsdt_address));
  212030:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  212037:	00 
  212038:	8b 49 10             	mov    0x10(%rcx),%ecx
  21203b:	89 8c 24 2c 02 00 00 	mov    %ecx,0x22c(%rsp)
  212042:	c7 84 24 28 02 00 00 	movl   $0x0,0x228(%rsp)
  212049:	00 00 00 00 
  21204d:	48 8b 8c 24 28 02 00 	mov    0x228(%rsp),%rcx
  212054:	00 
  212055:	48 89 48 08          	mov    %rcx,0x8(%rax)
  212059:	48 8b 8c 24 30 02 00 	mov    0x230(%rsp),%rcx
  212060:	00 
  212061:	48 89 48 10          	mov    %rcx,0x10(%rax)
  212065:	c6 00 00             	movb   $0x0,(%rax)
  212068:	e9 f6 fb ff ff       	jmpq   211c63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
  21206d:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  212074:	00 
            let ext_bytes_slice: &[u8; 64] = unsafe { &*rsdp_addr.get_ptr() };
  212075:	e8 56 5a 00 00       	callq  217ad0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h1701dfd31619c5daE>
  21207a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21207f:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  212086:	00 
  212087:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21208c:	48 89 84 24 70 02 00 	mov    %rax,0x270(%rsp)
  212093:	00 
            let ext_rsdp_struct: &RSDPDescriptor2x = unsafe { &*rsdp_addr.get_ptr() };
  212094:	e8 07 5a 00 00       	callq  217aa0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h02d01444721cb389E>
  212099:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21209e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2120a3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2120a8:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  2120af:	00 
            let ext_checksum: usize = ext_bytes_slice.iter().map(|val| *val as usize).sum();
  2120b0:	be 40 00 00 00       	mov    $0x40,%esi
  2120b5:	e8 96 eb 01 00       	callq  230c50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  2120ba:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2120bf:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2120c4:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  2120c9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2120ce:	e8 ed 6e 00 00       	callq  218fc0 <_ZN4core4iter6traits8iterator8Iterator3map17hbd9539eb03a80085E>
  2120d3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2120d8:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2120dd:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2120e2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2120e7:	e8 54 eb ff ff       	callq  210c40 <_ZN4core4iter6traits8iterator8Iterator3sum17h000ba1b36b9ccc77E>
  2120ec:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2120f1:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  2120f8:	00 
  2120f9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            if ext_checksum & 0xff != 0 {
  2120fe:	48 25 ff 00 00 00    	and    $0xff,%rax
  212104:	48 83 f8 00          	cmp    $0x0,%rax
  212108:	75 44                	jne    21214e <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x5ce>
  21210a:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  212111:	00 
  212112:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
            return Ok(AcpiRootTableKind::XSDT(ext_rsdp_struct.xsdt_address));
  212117:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  21211b:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  212122:	00 
  212123:	c7 84 24 18 02 00 00 	movl   $0x1,0x218(%rsp)
  21212a:	01 00 00 00 
  21212e:	48 8b 8c 24 18 02 00 	mov    0x218(%rsp),%rcx
  212135:	00 
  212136:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21213a:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  212141:	00 
  212142:	48 89 48 10          	mov    %rcx,0x10(%rax)
  212146:	c6 00 00             	movb   $0x0,(%rax)
  212149:	e9 15 fb ff ff       	jmpq   211c63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid ACPI 2.0 checksum.");
  21214e:	48 c7 84 24 d0 01 00 	movq   $0x1,0x1d0(%rsp)
  212155:	00 01 00 00 00 
  21215a:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  212161:	00 
  212162:	48 8d 35 cf e4 fe ff 	lea    -0x11b31(%rip),%rsi        # 200638 <str.0+0x118>
  212169:	e8 82 f9 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21216e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212172:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212176:	a8 01                	test   $0x1,%al
  212178:	75 0c                	jne    212186 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x606>
  21217a:	eb 00                	jmp    21217c <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x5fc>
  21217c:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  212183:	00 
  212184:	eb 5a                	jmp    2121e0 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x660>
  212186:	c6 84 24 8f 02 00 00 	movb   $0x0,0x28f(%rsp)
  21218d:	00 
  21218e:	48 8b 3d 7b 8f 02 00 	mov    0x28f7b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  212195:	0f b6 b4 24 8f 02 00 	movzbl 0x28f(%rsp),%esi
  21219c:	00 
  21219d:	e8 1e 6b 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2121a2:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
  2121a9:	00 
  2121aa:	48 8b 84 24 90 02 00 	mov    0x290(%rsp),%rax
  2121b1:	00 
  2121b2:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  2121b9:	00 
  2121ba:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  2121c1:	00 
  2121c2:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
  2121c9:	00 
  2121ca:	e8 21 f9 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2121cf:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2121d3:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2121d7:	24 01                	and    $0x1,%al
  2121d9:	88 84 24 df 01 00 00 	mov    %al,0x1df(%rsp)
  2121e0:	f6 84 24 df 01 00 00 	testb  $0x1,0x1df(%rsp)
  2121e7:	01 
  2121e8:	75 14                	jne    2121fe <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x67e>
  2121ea:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  2121f1:	00 
                return Err(AcpiRootTableError::InvalidChecksum2x);
  2121f2:	c6 40 01 03          	movb   $0x3,0x1(%rax)
  2121f6:	c6 00 01             	movb   $0x1,(%rax)
  2121f9:	e9 65 fa ff ff       	jmpq   211c63 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0xe3>
                log::error!("Invalid ACPI 2.0 checksum.");
  2121fe:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  212205:	00 
  212206:	48 8d 35 93 5b 02 00 	lea    0x25b93(%rip),%rsi        # 237da0 <memcmp+0x17f0>
  21220d:	ba 01 00 00 00       	mov    $0x1,%edx
  212212:	48 8d 0d b7 e8 fe ff 	lea    -0x11749(%rip),%rcx        # 200ad0 <str.0+0x80>
  212219:	31 c0                	xor    %eax,%eax
  21221b:	41 89 c0             	mov    %eax,%r8d
  21221e:	e8 9d 40 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212223:	48 8b b4 24 d0 01 00 	mov    0x1d0(%rsp),%rsi
  21222a:	00 
  21222b:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  212232:	00 
  212233:	48 8d 15 76 5b 02 00 	lea    0x25b76(%rip),%rdx        # 237db0 <memcmp+0x1800>
  21223a:	e8 b1 e3 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21223f:	eb a9                	jmp    2121ea <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E+0x66a>
  212241:	cc                   	int3   
  212242:	cc                   	int3   
  212243:	cc                   	int3   
  212244:	cc                   	int3   
  212245:	cc                   	int3   
  212246:	cc                   	int3   
  212247:	cc                   	int3   
  212248:	cc                   	int3   
  212249:	cc                   	int3   
  21224a:	cc                   	int3   
  21224b:	cc                   	int3   
  21224c:	cc                   	int3   
  21224d:	cc                   	int3   
  21224e:	cc                   	int3   
  21224f:	cc                   	int3   

0000000000212250 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E>:
pub fn init_acpi() -> Option<Acpi> {
  212250:	48 81 ec d8 08 00 00 	sub    $0x8d8,%rsp
  212257:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  21225e:	00 
  21225f:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  212266:	00 
    let root_table_result = AcpiRootTableKind::parse_from_bootinfo();
  212267:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21226e:	00 
  21226f:	e8 0c f9 ff ff       	callq  211b80 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo17hab16d8d579145f50E>
    if root_table_result.is_err() {
  212274:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21227b:	00 
  21227c:	e8 af 89 ff ff       	callq  20ac30 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17haa604f8299c01af4E>
  212281:	88 84 24 3f 01 00 00 	mov    %al,0x13f(%rsp)
  212288:	8a 84 24 3f 01 00 00 	mov    0x13f(%rsp),%al
  21228f:	a8 01                	test   $0x1,%al
  212291:	75 2e                	jne    2122c1 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x71>
  212293:	eb 00                	jmp    212295 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x45>
    log::info!("Initializing ACPI tables.");
  212295:	48 c7 84 24 e8 01 00 	movq   $0x3,0x1e8(%rsp)
  21229c:	00 03 00 00 00 
  2122a1:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  2122a8:	00 
  2122a9:	48 8d 35 88 e3 fe ff 	lea    -0x11c78(%rip),%rsi        # 200638 <str.0+0x118>
  2122b0:	e8 3b f8 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2122b5:	88 84 24 3e 01 00 00 	mov    %al,0x13e(%rsp)
  2122bc:	e9 b9 01 00 00       	jmpq   21247a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x22a>
        log::error!("ACPI Init Error: {:?}", root_table_result.unwrap_err());
  2122c1:	48 c7 84 24 68 01 00 	movq   $0x1,0x168(%rsp)
  2122c8:	00 01 00 00 00 
  2122cd:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  2122d4:	00 
  2122d5:	48 8d 35 5c e3 fe ff 	lea    -0x11ca4(%rip),%rsi        # 200638 <str.0+0x118>
  2122dc:	e8 0f f8 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2122e1:	88 84 24 3d 01 00 00 	mov    %al,0x13d(%rsp)
  2122e8:	8a 84 24 3d 01 00 00 	mov    0x13d(%rsp),%al
  2122ef:	a8 01                	test   $0x1,%al
  2122f1:	75 0c                	jne    2122ff <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xaf>
  2122f3:	eb 00                	jmp    2122f5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa5>
  2122f5:	c6 84 24 77 01 00 00 	movb   $0x0,0x177(%rsp)
  2122fc:	00 
  2122fd:	eb 60                	jmp    21235f <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x10f>
  2122ff:	c6 84 24 cf 08 00 00 	movb   $0x0,0x8cf(%rsp)
  212306:	00 
  212307:	48 8b 3d 02 8e 02 00 	mov    0x28e02(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21230e:	0f b6 b4 24 cf 08 00 	movzbl 0x8cf(%rsp),%esi
  212315:	00 
  212316:	e8 a5 69 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21231b:	48 89 84 24 d0 08 00 	mov    %rax,0x8d0(%rsp)
  212322:	00 
  212323:	48 8b 84 24 d0 08 00 	mov    0x8d0(%rsp),%rax
  21232a:	00 
  21232b:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  212332:	00 
  212333:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  21233a:	00 
  21233b:	48 8d b4 24 78 01 00 	lea    0x178(%rsp),%rsi
  212342:	00 
  212343:	e8 a8 f7 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  212348:	88 84 24 3c 01 00 00 	mov    %al,0x13c(%rsp)
  21234f:	8a 84 24 3c 01 00 00 	mov    0x13c(%rsp),%al
  212356:	24 01                	and    $0x1,%al
  212358:	88 84 24 77 01 00 00 	mov    %al,0x177(%rsp)
  21235f:	f6 84 24 77 01 00 00 	testb  $0x1,0x177(%rsp)
  212366:	01 
  212367:	75 14                	jne    21237d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x12d>
  212369:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  212370:	00 
        return None;
  212371:	c6 80 88 01 00 00 02 	movb   $0x2,0x188(%rax)
  212378:	e9 ed 00 00 00       	jmpq   21246a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
        log::error!("ACPI Init Error: {:?}", root_table_result.unwrap_err());
  21237d:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  212384:	00 
  212385:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  21238c:	00 
  21238d:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  212394:	00 
  212395:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  21239c:	00 
  21239d:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  2123a4:	00 
  2123a5:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  2123ac:	00 
  2123ad:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  2123b4:	00 
  2123b5:	48 8d 35 3c 5a 02 00 	lea    0x25a3c(%rip),%rsi        # 237df8 <memcmp+0x1848>
  2123bc:	e8 df 84 ff ff       	callq  20a8a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h706092ca722d4ca9E>
  2123c1:	88 84 24 cf 01 00 00 	mov    %al,0x1cf(%rsp)
  2123c8:	48 8d 84 24 cf 01 00 	lea    0x1cf(%rsp),%rax
  2123cf:	00 
  2123d0:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  2123d7:	00 
  2123d8:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
  2123df:	00 
  2123e0:	48 89 bc 24 18 08 00 	mov    %rdi,0x818(%rsp)
  2123e7:	00 
  2123e8:	48 8d 35 31 0f 00 00 	lea    0xf31(%rip),%rsi        # 213320 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E>
  2123ef:	e8 4c c4 ff ff       	callq  20e840 <_ZN4core3fmt10ArgumentV13new17h40a1deb68c3db053E>
  2123f4:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2123fb:	00 
  2123fc:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  212403:	00 
  212404:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  21240b:	00 
  21240c:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  212413:	00 
  212414:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  21241b:	00 
  21241c:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  212423:	00 
  212424:	48 8d 8c 24 b0 01 00 	lea    0x1b0(%rsp),%rcx
  21242b:	00 
  21242c:	48 8d bc 24 80 01 00 	lea    0x180(%rsp),%rdi
  212433:	00 
  212434:	48 8d 35 ad 59 02 00 	lea    0x259ad(%rip),%rsi        # 237de8 <memcmp+0x1838>
  21243b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  212441:	4c 89 c2             	mov    %r8,%rdx
  212444:	e8 77 3e ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212449:	48 8b b4 24 68 01 00 	mov    0x168(%rsp),%rsi
  212450:	00 
  212451:	48 8d bc 24 80 01 00 	lea    0x180(%rsp),%rdi
  212458:	00 
  212459:	48 8d 15 b0 59 02 00 	lea    0x259b0(%rip),%rdx        # 237e10 <memcmp+0x1860>
  212460:	e8 8b e1 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  212465:	e9 ff fe ff ff       	jmpq   212369 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x119>
  21246a:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  212471:	00 
}
  212472:	48 81 c4 d8 08 00 00 	add    $0x8d8,%rsp
  212479:	c3                   	retq   
  21247a:	8a 84 24 3e 01 00 00 	mov    0x13e(%rsp),%al
    log::info!("Initializing ACPI tables.");
  212481:	a8 01                	test   $0x1,%al
  212483:	75 0c                	jne    212491 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x241>
  212485:	eb 00                	jmp    212487 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x237>
  212487:	c6 84 24 f7 01 00 00 	movb   $0x0,0x1f7(%rsp)
  21248e:	00 
  21248f:	eb 60                	jmp    2124f1 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x2a1>
  212491:	c6 84 24 bf 08 00 00 	movb   $0x0,0x8bf(%rsp)
  212498:	00 
  212499:	48 8b 3d 70 8c 02 00 	mov    0x28c70(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2124a0:	0f b6 b4 24 bf 08 00 	movzbl 0x8bf(%rsp),%esi
  2124a7:	00 
  2124a8:	e8 13 68 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2124ad:	48 89 84 24 c0 08 00 	mov    %rax,0x8c0(%rsp)
  2124b4:	00 
  2124b5:	48 8b 84 24 c0 08 00 	mov    0x8c0(%rsp),%rax
  2124bc:	00 
  2124bd:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2124c4:	00 
  2124c5:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  2124cc:	00 
  2124cd:	48 8d b4 24 f8 01 00 	lea    0x1f8(%rsp),%rsi
  2124d4:	00 
  2124d5:	e8 16 f6 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2124da:	88 84 24 27 01 00 00 	mov    %al,0x127(%rsp)
  2124e1:	8a 84 24 27 01 00 00 	mov    0x127(%rsp),%al
  2124e8:	24 01                	and    $0x1,%al
  2124ea:	88 84 24 f7 01 00 00 	mov    %al,0x1f7(%rsp)
  2124f1:	f6 84 24 f7 01 00 00 	testb  $0x1,0x1f7(%rsp)
  2124f8:	01 
  2124f9:	75 76                	jne    212571 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x321>
    let root_table = root_table_result.unwrap();
  2124fb:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  212502:	00 
  212503:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  21250a:	00 
  21250b:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  212512:	00 
  212513:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  21251a:	00 
  21251b:	48 89 8c 24 48 02 00 	mov    %rcx,0x248(%rsp)
  212522:	00 
  212523:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  21252a:	00 
  21252b:	48 8d 35 5e 59 02 00 	lea    0x2595e(%rip),%rsi        # 237e90 <memcmp+0x18e0>
  212532:	48 8d bc 24 40 02 00 	lea    0x240(%rsp),%rdi
  212539:	00 
  21253a:	e8 51 88 ff ff       	callq  20ad90 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h9d939701445ddf6cE>
  21253f:	48 89 94 24 28 08 00 	mov    %rdx,0x828(%rsp)
  212546:	00 
  212547:	48 89 84 24 20 08 00 	mov    %rax,0x820(%rsp)
  21254e:	00 
  21254f:	48 8b 84 24 20 08 00 	mov    0x820(%rsp),%rax
  212556:	00 
  212557:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  21255e:	00 
  21255f:	48 8b 84 24 28 08 00 	mov    0x828(%rsp),%rax
  212566:	00 
  212567:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  21256e:	00 
  21256f:	eb 46                	jmp    2125b7 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x367>
    log::info!("Initializing ACPI tables.");
  212571:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  212578:	00 
  212579:	48 8d 35 c8 58 02 00 	lea    0x258c8(%rip),%rsi        # 237e48 <memcmp+0x1898>
  212580:	ba 01 00 00 00       	mov    $0x1,%edx
  212585:	48 8d 0d 44 e5 fe ff 	lea    -0x11abc(%rip),%rcx        # 200ad0 <str.0+0x80>
  21258c:	31 c0                	xor    %eax,%eax
  21258e:	41 89 c0             	mov    %eax,%r8d
  212591:	e8 2a 3d ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212596:	48 8b b4 24 e8 01 00 	mov    0x1e8(%rsp),%rsi
  21259d:	00 
  21259e:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  2125a5:	00 
  2125a6:	48 8d 15 ab 58 02 00 	lea    0x258ab(%rip),%rdx        # 237e58 <memcmp+0x18a8>
  2125ad:	e8 3e e0 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2125b2:	e9 44 ff ff ff       	jmpq   2124fb <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x2ab>
    let (head_addr, ptr_size, supports_2x) = match root_table {
  2125b7:	8b 84 24 30 02 00 00 	mov    0x230(%rsp),%eax
  2125be:	48 85 c0             	test   %rax,%rax
  2125c1:	74 06                	je     2125c9 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x379>
  2125c3:	eb 00                	jmp    2125c5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x375>
  2125c5:	eb 26                	jmp    2125ed <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x39d>
  2125c7:	0f 0b                	ud2    
        AcpiRootTableKind::RSDT(addr) => (
  2125c9:	8b 84 24 34 02 00 00 	mov    0x234(%rsp),%eax
  2125d0:	89 84 24 3c 08 00 00 	mov    %eax,0x83c(%rsp)
            PhysicalAddress::from_u64(addr as u64),
  2125d7:	89 c0                	mov    %eax,%eax
  2125d9:	89 c7                	mov    %eax,%edi
  2125db:	e8 f0 3a 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  2125e0:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  2125e7:	00 
  2125e8:	e9 a1 00 00 00       	jmpq   21268e <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x43e>
        AcpiRootTableKind::XSDT(addr) => {
  2125ed:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
  2125f4:	00 
  2125f5:	48 89 bc 24 30 08 00 	mov    %rdi,0x830(%rsp)
  2125fc:	00 
            (PhysicalAddress::from_u64(addr), mem::size_of::<u64>(), true)
  2125fd:	e8 ce 3a 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  212602:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  212609:	00 
  21260a:	eb 00                	jmp    21260c <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x3bc>
  21260c:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  212613:	00 
  212614:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  21261b:	00 
  21261c:	48 c7 84 24 68 02 00 	movq   $0x8,0x268(%rsp)
  212623:	00 08 00 00 00 
  212628:	c6 84 24 70 02 00 00 	movb   $0x1,0x270(%rsp)
  21262f:	01 
    let (head_addr, ptr_size, supports_2x) = match root_table {
  212630:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  212637:	00 
  212638:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  21263f:	00 
  212640:	48 8b 84 24 68 02 00 	mov    0x268(%rsp),%rax
  212647:	00 
  212648:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21264f:	00 
  212650:	48 89 84 24 40 08 00 	mov    %rax,0x840(%rsp)
  212657:	00 
  212658:	8a 84 24 70 02 00 00 	mov    0x270(%rsp),%al
  21265f:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  212666:	24 01                	and    $0x1,%al
  212668:	88 84 24 4f 08 00 00 	mov    %al,0x84f(%rsp)
    let head_v_addr = p_to_v(head_addr);
  21266f:	48 8b bc 24 58 02 00 	mov    0x258(%rsp),%rdi
  212676:	00 
  212677:	e8 f4 3a 01 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  21267c:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  212683:	00 
  212684:	48 89 84 24 50 08 00 	mov    %rax,0x850(%rsp)
  21268b:	00 
  21268c:	eb 2b                	jmp    2126b9 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x469>
            mem::size_of::<u32>(),
  21268e:	eb 00                	jmp    212690 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x440>
  212690:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  212697:	00 
        AcpiRootTableKind::RSDT(addr) => (
  212698:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  21269f:	00 
  2126a0:	48 c7 84 24 68 02 00 	movq   $0x4,0x268(%rsp)
  2126a7:	00 04 00 00 00 
  2126ac:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  2126b3:	00 
        ),
  2126b4:	e9 77 ff ff ff       	jmpq   212630 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x3e0>
  2126b9:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  2126c0:	00 
    let root_header: &SDTHeader = unsafe { &*head_v_addr.get_ptr() };
  2126c1:	e8 2a 55 00 00       	callq  217bf0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>
  2126c6:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2126cd:	00 
  2126ce:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  2126d5:	00 
  2126d6:	48 89 bc 24 58 08 00 	mov    %rdi,0x858(%rsp)
  2126dd:	00 
  2126de:	be 04 00 00 00       	mov    $0x4,%esi
        if str::from_utf8_unchecked(&root_header.signature) != "RSDT" {
  2126e3:	e8 c8 5b 01 00       	callq  2282b0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  2126e8:	48 89 94 24 80 02 00 	mov    %rdx,0x280(%rsp)
  2126ef:	00 
  2126f0:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  2126f7:	00 
  2126f8:	48 8d bc 24 78 02 00 	lea    0x278(%rsp),%rdi
  2126ff:	00 
  212700:	48 8d 35 a1 57 02 00 	lea    0x257a1(%rip),%rsi        # 237ea8 <memcmp+0x18f8>
  212707:	e8 f4 67 01 00       	callq  228f00 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>
  21270c:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  212713:	8a 84 24 ef 00 00 00 	mov    0xef(%rsp),%al
  21271a:	a8 01                	test   $0x1,%al
  21271c:	75 1a                	jne    212738 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x4e8>
  21271e:	eb 00                	jmp    212720 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x4d0>
  212720:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  212727:	00 
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  212728:	8b 40 04             	mov    0x4(%rax),%eax
  21272b:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  212732:	00 
  212733:	e9 ff 00 00 00       	jmpq   212837 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x5e7>
            log::error!("Invalid root table header, expected RSDT.");
  212738:	48 c7 84 24 88 02 00 	movq   $0x1,0x288(%rsp)
  21273f:	00 01 00 00 00 
  212744:	48 8d bc 24 88 02 00 	lea    0x288(%rsp),%rdi
  21274b:	00 
  21274c:	48 8d 35 e5 de fe ff 	lea    -0x1211b(%rip),%rsi        # 200638 <str.0+0x118>
  212753:	e8 98 f3 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  212758:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  21275f:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  212766:	a8 01                	test   $0x1,%al
  212768:	75 0c                	jne    212776 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x526>
  21276a:	eb 00                	jmp    21276c <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x51c>
  21276c:	c6 84 24 97 02 00 00 	movb   $0x0,0x297(%rsp)
  212773:	00 
  212774:	eb 60                	jmp    2127d6 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x586>
  212776:	c6 84 24 af 08 00 00 	movb   $0x0,0x8af(%rsp)
  21277d:	00 
  21277e:	48 8b 3d 8b 89 02 00 	mov    0x2898b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  212785:	0f b6 b4 24 af 08 00 	movzbl 0x8af(%rsp),%esi
  21278c:	00 
  21278d:	e8 2e 65 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  212792:	48 89 84 24 b0 08 00 	mov    %rax,0x8b0(%rsp)
  212799:	00 
  21279a:	48 8b 84 24 b0 08 00 	mov    0x8b0(%rsp),%rax
  2127a1:	00 
  2127a2:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
  2127a9:	00 
  2127aa:	48 8d bc 24 88 02 00 	lea    0x288(%rsp),%rdi
  2127b1:	00 
  2127b2:	48 8d b4 24 98 02 00 	lea    0x298(%rsp),%rsi
  2127b9:	00 
  2127ba:	e8 31 f3 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2127bf:	88 84 24 de 00 00 00 	mov    %al,0xde(%rsp)
  2127c6:	8a 84 24 de 00 00 00 	mov    0xde(%rsp),%al
  2127cd:	24 01                	and    $0x1,%al
  2127cf:	88 84 24 97 02 00 00 	mov    %al,0x297(%rsp)
  2127d6:	f6 84 24 97 02 00 00 	testb  $0x1,0x297(%rsp)
  2127dd:	01 
  2127de:	75 14                	jne    2127f4 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x5a4>
  2127e0:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  2127e7:	00 
            return None;
  2127e8:	c6 80 88 01 00 00 02 	movb   $0x2,0x188(%rax)
  2127ef:	e9 76 fc ff ff       	jmpq   21246a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
            log::error!("Invalid root table header, expected RSDT.");
  2127f4:	48 8d bc 24 a0 02 00 	lea    0x2a0(%rsp),%rdi
  2127fb:	00 
  2127fc:	48 8d 35 b5 56 02 00 	lea    0x256b5(%rip),%rsi        # 237eb8 <memcmp+0x1908>
  212803:	ba 01 00 00 00       	mov    $0x1,%edx
  212808:	48 8d 0d c1 e2 fe ff 	lea    -0x11d3f(%rip),%rcx        # 200ad0 <str.0+0x80>
  21280f:	31 c0                	xor    %eax,%eax
  212811:	41 89 c0             	mov    %eax,%r8d
  212814:	e8 a7 3a ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212819:	48 8b b4 24 88 02 00 	mov    0x288(%rsp),%rsi
  212820:	00 
  212821:	48 8d bc 24 a0 02 00 	lea    0x2a0(%rsp),%rdi
  212828:	00 
  212829:	48 8d 15 98 56 02 00 	lea    0x25698(%rip),%rdx        # 237ec8 <memcmp+0x1918>
  212830:	e8 bb dd 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  212835:	eb a9                	jmp    2127e0 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x590>
  212837:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  21283e:	00 
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  21283f:	48 83 e8 24          	sub    $0x24,%rax
  212843:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21284a:	00 
  21284b:	0f 92 c0             	setb   %al
  21284e:	a8 01                	test   $0x1,%al
  212850:	75 15                	jne    212867 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x617>
  212852:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  212859:	00 
  21285a:	48 83 f8 00          	cmp    $0x0,%rax
  21285e:	0f 94 c0             	sete   %al
  212861:	a8 01                	test   $0x1,%al
  212863:	75 46                	jne    2128ab <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x65b>
  212865:	eb 1a                	jmp    212881 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x631>
  212867:	48 8d 3d d2 e2 fe ff 	lea    -0x11d2e(%rip),%rdi        # 200b40 <str.0>
  21286e:	48 8d 15 8b 56 02 00 	lea    0x2568b(%rip),%rdx        # 237f00 <memcmp+0x1950>
  212875:	be 21 00 00 00       	mov    $0x21,%esi
  21287a:	e8 e1 0b 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21287f:	0f 0b                	ud2    
  212881:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  212888:	00 
  212889:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  212890:	00 
  212891:	31 d2                	xor    %edx,%edx
  212893:	48 f7 f1             	div    %rcx
  212896:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  21289d:	00 
    if n_tables > MAX_ACPI_TABLES {
  21289e:	48 83 bc 24 d0 02 00 	cmpq   $0x30,0x2d0(%rsp)
  2128a5:	00 30 
  2128a7:	77 32                	ja     2128db <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x68b>
  2128a9:	eb 1a                	jmp    2128c5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x675>
    let mut n_tables = (root_header.length as usize - mem::size_of::<SDTHeader>()) / ptr_size;
  2128ab:	48 8d 3d be e2 fe ff 	lea    -0x11d42(%rip),%rdi        # 200b70 <str.1>
  2128b2:	48 8d 15 47 56 02 00 	lea    0x25647(%rip),%rdx        # 237f00 <memcmp+0x1950>
  2128b9:	be 19 00 00 00       	mov    $0x19,%esi
  2128be:	e8 9d 0b 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2128c3:	0f 0b                	ud2    
    let mut acpi_tables = [VirtualAddress::from_u64(0); MAX_ACPI_TABLES];
  2128c5:	31 c0                	xor    %eax,%eax
  2128c7:	89 c7                	mov    %eax,%edi
  2128c9:	e8 42 36 01 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  2128ce:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2128d5:	00 
  2128d6:	e9 c8 01 00 00       	jmpq   212aa3 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x853>
        log::warn!(
  2128db:	48 c7 84 24 d8 02 00 	movq   $0x2,0x2d8(%rsp)
  2128e2:	00 02 00 00 00 
  2128e7:	48 8d bc 24 d8 02 00 	lea    0x2d8(%rsp),%rdi
  2128ee:	00 
  2128ef:	48 8d 35 42 dd fe ff 	lea    -0x122be(%rip),%rsi        # 200638 <str.0+0x118>
  2128f6:	e8 f5 f1 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2128fb:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  212902:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
  212909:	a8 01                	test   $0x1,%al
  21290b:	75 0c                	jne    212919 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x6c9>
  21290d:	eb 00                	jmp    21290f <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x6bf>
  21290f:	c6 84 24 e7 02 00 00 	movb   $0x0,0x2e7(%rsp)
  212916:	00 
  212917:	eb 60                	jmp    212979 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x729>
  212919:	c6 84 24 9f 08 00 00 	movb   $0x0,0x89f(%rsp)
  212920:	00 
  212921:	48 8b 3d e8 87 02 00 	mov    0x287e8(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  212928:	0f b6 b4 24 9f 08 00 	movzbl 0x89f(%rsp),%esi
  21292f:	00 
  212930:	e8 8b 63 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  212935:	48 89 84 24 a0 08 00 	mov    %rax,0x8a0(%rsp)
  21293c:	00 
  21293d:	48 8b 84 24 a0 08 00 	mov    0x8a0(%rsp),%rax
  212944:	00 
  212945:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  21294c:	00 
  21294d:	48 8d bc 24 d8 02 00 	lea    0x2d8(%rsp),%rdi
  212954:	00 
  212955:	48 8d b4 24 e8 02 00 	lea    0x2e8(%rsp),%rsi
  21295c:	00 
  21295d:	e8 8e f1 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  212962:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  212969:	8a 84 24 c6 00 00 00 	mov    0xc6(%rsp),%al
  212970:	24 01                	and    $0x1,%al
  212972:	88 84 24 e7 02 00 00 	mov    %al,0x2e7(%rsp)
  212979:	f6 84 24 e7 02 00 00 	testb  $0x1,0x2e7(%rsp)
  212980:	01 
  212981:	75 11                	jne    212994 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x744>
        n_tables = MAX_ACPI_TABLES;
  212983:	48 c7 84 24 d0 02 00 	movq   $0x30,0x2d0(%rsp)
  21298a:	00 30 00 00 00 
    if n_tables > MAX_ACPI_TABLES {
  21298f:	e9 31 ff ff ff       	jmpq   2128c5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x675>
        log::warn!(
  212994:	48 8d 84 24 d0 02 00 	lea    0x2d0(%rsp),%rax
  21299b:	00 
  21299c:	48 89 84 24 40 03 00 	mov    %rax,0x340(%rsp)
  2129a3:	00 
  2129a4:	48 8d 05 ad dc fe ff 	lea    -0x12353(%rip),%rax        # 200658 <str.0+0x138>
  2129ab:	48 89 84 24 48 03 00 	mov    %rax,0x348(%rsp)
  2129b2:	00 
  2129b3:	48 8b bc 24 40 03 00 	mov    0x340(%rsp),%rdi
  2129ba:	00 
  2129bb:	48 89 bc 24 60 08 00 	mov    %rdi,0x860(%rsp)
  2129c2:	00 
  2129c3:	48 8b 84 24 48 03 00 	mov    0x348(%rsp),%rax
  2129ca:	00 
  2129cb:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2129d2:	00 
  2129d3:	48 89 84 24 68 08 00 	mov    %rax,0x868(%rsp)
  2129da:	00 
  2129db:	48 8b 35 46 87 02 00 	mov    0x28746(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2129e2:	e8 99 c3 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  2129e7:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2129ee:	00 
  2129ef:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  2129f6:	00 
  2129f7:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  2129fe:	00 
  2129ff:	48 8b 35 22 87 02 00 	mov    0x28722(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  212a06:	e8 75 c3 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  212a0b:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  212a12:	00 
  212a13:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  212a1a:	00 
  212a1b:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  212a22:	00 
  212a23:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  212a2a:	00 
  212a2b:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  212a32:	00 
  212a33:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  212a3a:	00 
  212a3b:	48 89 b4 24 20 03 00 	mov    %rsi,0x320(%rsp)
  212a42:	00 
  212a43:	48 89 94 24 28 03 00 	mov    %rdx,0x328(%rsp)
  212a4a:	00 
  212a4b:	48 89 8c 24 30 03 00 	mov    %rcx,0x330(%rsp)
  212a52:	00 
  212a53:	48 89 84 24 38 03 00 	mov    %rax,0x338(%rsp)
  212a5a:	00 
  212a5b:	48 8d 8c 24 20 03 00 	lea    0x320(%rsp),%rcx
  212a62:	00 
  212a63:	48 8d bc 24 f0 02 00 	lea    0x2f0(%rsp),%rdi
  212a6a:	00 
  212a6b:	48 8d 35 a6 54 02 00 	lea    0x254a6(%rip),%rsi        # 237f18 <memcmp+0x1968>
  212a72:	ba 03 00 00 00       	mov    $0x3,%edx
  212a77:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  212a7d:	e8 3e 38 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  212a82:	48 8b b4 24 d8 02 00 	mov    0x2d8(%rsp),%rsi
  212a89:	00 
  212a8a:	48 8d bc 24 f0 02 00 	lea    0x2f0(%rsp),%rdi
  212a91:	00 
  212a92:	48 8d 15 af 54 02 00 	lea    0x254af(%rip),%rdx        # 237f48 <memcmp+0x1998>
  212a99:	e8 52 db 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  212a9e:	e9 e0 fe ff ff       	jmpq   212983 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x733>
    let mut acpi_tables = [VirtualAddress::from_u64(0); MAX_ACPI_TABLES];
  212aa3:	48 8d 84 24 50 03 00 	lea    0x350(%rsp),%rax
  212aaa:	00 
  212aab:	48 8d 8c 24 50 03 00 	lea    0x350(%rsp),%rcx
  212ab2:	00 
  212ab3:	48 81 c1 80 01 00 00 	add    $0x180,%rcx
  212aba:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  212ac1:	00 
  212ac2:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  212ac9:	00 
  212aca:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  212ad1:	00 
  212ad2:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  212ad9:	00 
  212ada:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  212ae1:	00 
  212ae2:	48 39 c8             	cmp    %rcx,%rax
  212ae5:	74 21                	je     212b08 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x8b8>
  212ae7:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  212aee:	00 
  212aef:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  212af6:	00 
  212af7:	48 89 08             	mov    %rcx,(%rax)
  212afa:	48 83 c0 08          	add    $0x8,%rax
  212afe:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  212b05:	00 
  212b06:	eb c2                	jmp    212aca <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x87a>
    for idx in 0..n_tables {
  212b08:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  212b0f:	00 
  212b10:	48 c7 84 24 d0 04 00 	movq   $0x0,0x4d0(%rsp)
  212b17:	00 00 00 00 00 
  212b1c:	48 89 84 24 d8 04 00 	mov    %rax,0x4d8(%rsp)
  212b23:	00 
  212b24:	48 8b bc 24 d0 04 00 	mov    0x4d0(%rsp),%rdi
  212b2b:	00 
  212b2c:	48 8b b4 24 d8 04 00 	mov    0x4d8(%rsp),%rsi
  212b33:	00 
  212b34:	e8 37 9f 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  212b39:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  212b3e:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  212b43:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  212b48:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  212b4d:	48 89 8c 24 e0 04 00 	mov    %rcx,0x4e0(%rsp)
  212b54:	00 
  212b55:	48 89 84 24 e8 04 00 	mov    %rax,0x4e8(%rsp)
  212b5c:	00 
  212b5d:	48 8d bc 24 e0 04 00 	lea    0x4e0(%rsp),%rdi
  212b64:	00 
  212b65:	e8 d6 9e 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  212b6a:	48 89 94 24 f8 04 00 	mov    %rdx,0x4f8(%rsp)
  212b71:	00 
  212b72:	48 89 84 24 f0 04 00 	mov    %rax,0x4f0(%rsp)
  212b79:	00 
  212b7a:	48 8b 84 24 f0 04 00 	mov    0x4f0(%rsp),%rax
  212b81:	00 
  212b82:	48 85 c0             	test   %rax,%rax
  212b85:	74 06                	je     212b8d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x93d>
  212b87:	eb 00                	jmp    212b89 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x939>
  212b89:	eb 7f                	jmp    212c0a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x9ba>
  212b8b:	0f 0b                	ud2    
        tables: acpi_tables,
  212b8d:	48 8d bc 24 98 06 00 	lea    0x698(%rsp),%rdi
  212b94:	00 
  212b95:	48 8d b4 24 50 03 00 	lea    0x350(%rsp),%rsi
  212b9c:	00 
  212b9d:	ba 80 01 00 00       	mov    $0x180,%edx
  212ba2:	e8 b9 39 02 00       	callq  236560 <memcpy>
        n_entries: n_tables,
  212ba7:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  212bae:	00 
  212baf:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    Some(Acpi {
  212bb4:	48 8d bc 24 08 05 00 	lea    0x508(%rsp),%rdi
  212bbb:	00 
  212bbc:	48 8d b4 24 98 06 00 	lea    0x698(%rsp),%rsi
  212bc3:	00 
  212bc4:	ba 80 01 00 00       	mov    $0x180,%edx
  212bc9:	e8 92 39 02 00       	callq  236560 <memcpy>
  212bce:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  212bd3:	8a 84 24 07 01 00 00 	mov    0x107(%rsp),%al
  212bda:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  212be1:	00 
  212be2:	48 89 8c 24 88 06 00 	mov    %rcx,0x688(%rsp)
  212be9:	00 
  212bea:	24 01                	and    $0x1,%al
  212bec:	88 84 24 90 06 00 00 	mov    %al,0x690(%rsp)
  212bf3:	48 8d b4 24 08 05 00 	lea    0x508(%rsp),%rsi
  212bfa:	00 
  212bfb:	ba 90 01 00 00       	mov    $0x190,%edx
  212c00:	e8 5b 39 02 00       	callq  236560 <memcpy>
}
  212c05:	e9 60 f8 ff ff       	jmpq   21246a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x21a>
    for idx in 0..n_tables {
  212c0a:	48 8b 84 24 f8 04 00 	mov    0x4f8(%rsp),%rax
  212c11:	00 
  212c12:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  212c17:	48 89 84 24 70 08 00 	mov    %rax,0x870(%rsp)
  212c1e:	00 
  212c1f:	48 89 84 24 78 08 00 	mov    %rax,0x878(%rsp)
  212c26:	00 
  212c27:	48 89 84 24 80 08 00 	mov    %rax,0x880(%rsp)
  212c2e:	00 
            head_addr.as_u64() + (mem::size_of::<SDTHeader>() + idx * ptr_size) as u64,
  212c2f:	48 8d bc 24 58 02 00 	lea    0x258(%rsp),%rdi
  212c36:	00 
  212c37:	e8 84 34 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  212c3c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212c41:	eb 00                	jmp    212c43 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x9f3>
  212c43:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  212c4a:	00 
  212c4b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  212c50:	48 f7 e1             	mul    %rcx
  212c53:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  212c58:	0f 90 c0             	seto   %al
  212c5b:	a8 01                	test   $0x1,%al
  212c5d:	75 17                	jne    212c76 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa26>
  212c5f:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  212c64:	48 83 c0 24          	add    $0x24,%rax
  212c68:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  212c6d:	0f 92 c0             	setb   %al
  212c70:	a8 01                	test   $0x1,%al
  212c72:	75 37                	jne    212cab <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa5b>
  212c74:	eb 1a                	jmp    212c90 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa40>
  212c76:	48 8d 3d 53 df fe ff 	lea    -0x120ad(%rip),%rdi        # 200bd0 <str.2>
  212c7d:	48 8d 15 fc 52 02 00 	lea    0x252fc(%rip),%rdx        # 237f80 <memcmp+0x19d0>
  212c84:	be 21 00 00 00       	mov    $0x21,%esi
  212c89:	e8 d2 07 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  212c8e:	0f 0b                	ud2    
  212c90:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  212c95:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  212c9a:	48 01 c8             	add    %rcx,%rax
  212c9d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  212ca2:	0f 92 c0             	setb   %al
  212ca5:	a8 01                	test   $0x1,%al
  212ca7:	75 2d                	jne    212cd6 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa86>
  212ca9:	eb 1a                	jmp    212cc5 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xa75>
  212cab:	48 8d 3d 4e df fe ff 	lea    -0x120b2(%rip),%rdi        # 200c00 <str.3>
  212cb2:	48 8d 15 df 52 02 00 	lea    0x252df(%rip),%rdx        # 237f98 <memcmp+0x19e8>
  212cb9:	be 1c 00 00 00       	mov    $0x1c,%esi
  212cbe:	e8 9d 07 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  212cc3:	0f 0b                	ud2    
  212cc5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let address = p_to_v(PhysicalAddress::from_u64(
  212cca:	e8 01 34 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  212ccf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  212cd4:	eb 1a                	jmp    212cf0 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xaa0>
            head_addr.as_u64() + (mem::size_of::<SDTHeader>() + idx * ptr_size) as u64,
  212cd6:	48 8d 3d 23 df fe ff 	lea    -0x120dd(%rip),%rdi        # 200c00 <str.3>
  212cdd:	48 8d 15 cc 52 02 00 	lea    0x252cc(%rip),%rdx        # 237fb0 <memcmp+0x1a00>
  212ce4:	be 1c 00 00 00       	mov    $0x1c,%esi
  212ce9:	e8 72 07 02 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  212cee:	0f 0b                	ud2    
  212cf0:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        let address = p_to_v(PhysicalAddress::from_u64(
  212cf5:	e8 76 34 01 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  212cfa:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  212cff:	48 89 84 24 88 08 00 	mov    %rax,0x888(%rsp)
  212d06:	00 
        let table_address = match root_table {
  212d07:	8b 84 24 30 02 00 00 	mov    0x230(%rsp),%eax
  212d0e:	48 85 c0             	test   %rax,%rax
  212d11:	74 06                	je     212d19 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xac9>
  212d13:	eb 00                	jmp    212d15 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xac5>
  212d15:	eb 13                	jmp    212d2a <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xada>
  212d17:	0f 0b                	ud2    
  212d19:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                let ptr: u32 = unsafe { *address.get_ptr() };
  212d1e:	e8 6d 4e 00 00       	callq  217b90 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8a329c0bfc3028c0E>
  212d23:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212d28:	eb 5a                	jmp    212d84 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb34>
  212d2a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                let ptr: u64 = unsafe { *address.get_ptr() };
  212d2f:	e8 2c 4e 00 00       	callq  217b60 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8922eeaa7ea1b07fE>
  212d34:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  212d39:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212d3e:	48 8b 38             	mov    (%rax),%rdi
  212d41:	48 89 bc 24 90 08 00 	mov    %rdi,0x890(%rsp)
  212d48:	00 
                p_to_v(PhysicalAddress::from_u64(ptr))
  212d49:	e8 82 33 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  212d4e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  212d53:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  212d58:	e8 13 34 01 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  212d5d:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  212d64:	00 
  212d65:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
        acpi_tables[idx] = table_address;
  212d6a:	48 8b 8c 24 00 05 00 	mov    0x500(%rsp),%rcx
  212d71:	00 
  212d72:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  212d77:	48 83 f8 30          	cmp    $0x30,%rax
  212d7b:	0f 92 c0             	setb   %al
  212d7e:	a8 01                	test   $0x1,%al
  212d80:	75 32                	jne    212db4 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb64>
  212d82:	eb 47                	jmp    212dcb <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb7b>
  212d84:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                let ptr: u32 = unsafe { *address.get_ptr() };
  212d89:	8b 00                	mov    (%rax),%eax
  212d8b:	89 84 24 98 08 00 00 	mov    %eax,0x898(%rsp)
                p_to_v(PhysicalAddress::from_u64(ptr as u64))
  212d92:	89 c0                	mov    %eax,%eax
  212d94:	89 c7                	mov    %eax,%edi
  212d96:	e8 35 33 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  212d9b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212da0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  212da5:	e8 c6 33 01 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  212daa:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  212db1:	00 
  212db2:	eb b1                	jmp    212d65 <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0xb15>
  212db4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  212db9:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        acpi_tables[idx] = table_address;
  212dbe:	48 89 8c c4 50 03 00 	mov    %rcx,0x350(%rsp,%rax,8)
  212dc5:	00 
    for idx in 0..n_tables {
  212dc6:	e9 92 fd ff ff       	jmpq   212b5d <_ZN9r3_kernel4acpi4rsdt9init_acpi17habe6f40d565791f6E+0x90d>
  212dcb:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        acpi_tables[idx] = table_address;
  212dd0:	48 8d 15 f1 51 02 00 	lea    0x251f1(%rip),%rdx        # 237fc8 <memcmp+0x1a18>
  212dd7:	be 30 00 00 00       	mov    $0x30,%esi
  212ddc:	e8 cf 06 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  212de1:	0f 0b                	ud2    
  212de3:	cc                   	int3   
  212de4:	cc                   	int3   
  212de5:	cc                   	int3   
  212de6:	cc                   	int3   
  212de7:	cc                   	int3   
  212de8:	cc                   	int3   
  212de9:	cc                   	int3   
  212dea:	cc                   	int3   
  212deb:	cc                   	int3   
  212dec:	cc                   	int3   
  212ded:	cc                   	int3   
  212dee:	cc                   	int3   
  212def:	cc                   	int3   

0000000000212df0 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E>:
    fn has_signature(&self, idx: usize, signature: &str) -> bool {
  212df0:	48 83 ec 58          	sub    $0x58,%rsp
  212df4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  212df9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  212dfe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  212e03:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  212e08:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  212e0d:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
            let sdt_header: &SDTHeader = &*self.tables[idx].get_ptr();
  212e12:	48 83 fe 30          	cmp    $0x30,%rsi
  212e16:	0f 92 c0             	setb   %al
  212e19:	a8 01                	test   $0x1,%al
  212e1b:	75 02                	jne    212e1f <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x2f>
  212e1d:	eb 1a                	jmp    212e39 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x49>
  212e1f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  212e24:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212e29:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
  212e2d:	e8 be 4d 00 00       	callq  217bf0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>
  212e32:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  212e37:	eb 18                	jmp    212e51 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E+0x61>
  212e39:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  212e3e:	48 8d 15 9b 51 02 00 	lea    0x2519b(%rip),%rdx        # 237fe0 <memcmp+0x1a30>
  212e45:	be 30 00 00 00       	mov    $0x30,%esi
  212e4a:	e8 61 06 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  212e4f:	0f 0b                	ud2    
  212e51:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  212e56:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  212e5b:	be 04 00 00 00       	mov    $0x4,%esi
            let st = str::from_utf8_unchecked(&sdt_header.signature);
  212e60:	e8 4b 54 01 00       	callq  2282b0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>
  212e65:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  212e6a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
            st == signature
  212e6f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  212e74:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  212e79:	e8 42 60 01 00       	callq  228ec0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17hc4e39ee727fe4555E>
  212e7e:	88 44 24 07          	mov    %al,0x7(%rsp)
  212e82:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  212e86:	24 01                	and    $0x1,%al
  212e88:	0f b6 c0             	movzbl %al,%eax
  212e8b:	48 83 c4 58          	add    $0x58,%rsp
  212e8f:	c3                   	retq   

0000000000212e90 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E>:
    pub fn get_table(&self, signature: &str) -> Option<VirtualAddress> {
  212e90:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  212e97:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  212e9c:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  212ea1:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  212ea6:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  212eab:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  212eb2:	00 
  212eb3:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  212eba:	00 
        for idx in 0..self.n_entries {
  212ebb:	48 8b 87 80 01 00 00 	mov    0x180(%rdi),%rax
  212ec2:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  212ec9:	00 00 
  212ecb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  212ed0:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  212ed5:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  212eda:	e8 91 9b 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  212edf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  212ee4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  212ee9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  212eee:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  212ef3:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  212ef8:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212efd:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  212f02:	e8 39 9b 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  212f07:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  212f0c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  212f11:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  212f16:	48 85 c0             	test   %rax,%rax
  212f19:	74 06                	je     212f21 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x91>
  212f1b:	eb 00                	jmp    212f1d <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x8d>
  212f1d:	eb 10                	jmp    212f2f <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x9f>
  212f1f:	0f 0b                	ud2    
        None
  212f21:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  212f28:	00 00 
    }
  212f2a:	e9 88 00 00 00       	jmpq   212fb7 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x127>
  212f2f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  212f34:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  212f39:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        for idx in 0..self.n_entries {
  212f3e:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  212f43:	48 89 34 24          	mov    %rsi,(%rsp)
  212f47:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  212f4e:	00 
  212f4f:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  212f56:	00 
  212f57:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  212f5e:	00 
            if self.has_signature(idx, signature) {
  212f5f:	e8 8c fe ff ff       	callq  212df0 <_ZN9r3_kernel4acpi4rsdt4Acpi13has_signature17h0db40e07401a3176E>
  212f64:	88 44 24 0f          	mov    %al,0xf(%rsp)
  212f68:	8a 44 24 0f          	mov    0xf(%rsp),%al
  212f6c:	a8 01                	test   $0x1,%al
  212f6e:	75 02                	jne    212f72 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0xe2>
  212f70:	eb 8b                	jmp    212efd <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x6d>
  212f72:	48 8b 04 24          	mov    (%rsp),%rax
                return Some(self.tables[idx]);
  212f76:	48 83 f8 30          	cmp    $0x30,%rax
  212f7a:	0f 92 c0             	setb   %al
  212f7d:	a8 01                	test   $0x1,%al
  212f7f:	75 02                	jne    212f83 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0xf3>
  212f81:	eb 1d                	jmp    212fa0 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x110>
  212f83:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  212f88:	48 8b 0c 24          	mov    (%rsp),%rcx
  212f8c:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
  212f90:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  212f95:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  212f9c:	00 00 
    }
  212f9e:	eb 17                	jmp    212fb7 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E+0x127>
  212fa0:	48 8b 3c 24          	mov    (%rsp),%rdi
                return Some(self.tables[idx]);
  212fa4:	48 8d 15 4d 50 02 00 	lea    0x2504d(%rip),%rdx        # 237ff8 <memcmp+0x1a48>
  212fab:	be 30 00 00 00       	mov    $0x30,%esi
  212fb0:	e8 fb 04 02 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  212fb5:	0f 0b                	ud2    
    }
  212fb7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  212fbc:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  212fc1:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  212fc8:	c3                   	retq   
  212fc9:	cc                   	int3   
  212fca:	cc                   	int3   
  212fcb:	cc                   	int3   
  212fcc:	cc                   	int3   
  212fcd:	cc                   	int3   
  212fce:	cc                   	int3   
  212fcf:	cc                   	int3   

0000000000212fd0 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E>:
}

pub fn setup_acpi() {
  212fd0:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    let acpi_opt = ACPI.lock();
  212fd7:	48 8d 3d 8c dc fe ff 	lea    -0x12374(%rip),%rdi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  212fde:	e8 fd 03 00 00       	callq  2133e0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>
  212fe3:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  212fe8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  212fed:	e8 6e 91 01 00       	callq  22c160 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>
  212ff2:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  212ff7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    if acpi_opt.is_some() {
  212ffc:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  213001:	e8 3a 95 01 00       	callq  22c540 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  213006:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21300b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  213010:	e8 2b d9 ff ff       	callq  210940 <_ZN4core6option15Option$LT$T$GT$7is_some17hd001bcaf2d82b9cbE>
  213015:	88 44 24 57          	mov    %al,0x57(%rsp)
  213019:	8a 44 24 57          	mov    0x57(%rsp),%al
  21301d:	a8 01                	test   $0x1,%al
  21301f:	75 11                	jne    213032 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x62>
  213021:	eb 00                	jmp    213023 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
            "ACPI initialized, n_entries={}, supports_acpi_2={}",
            acpi.n_entries,
            acpi.supports_2x
        );
    }
}
  213023:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  213028:	e8 b3 87 ff ff       	callq  20b7e0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  21302d:	e9 c5 01 00 00       	jmpq   2131f7 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x227>
        let acpi = acpi_opt.as_ref().unwrap();
  213032:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  213037:	e8 04 95 01 00       	callq  22c540 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  21303c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  213041:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  213046:	e8 05 cd ff ff       	callq  20fd50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>
  21304b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  213050:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213055:	48 8d 35 b4 4f 02 00 	lea    0x24fb4(%rip),%rsi        # 238010 <memcmp+0x1a60>
  21305c:	e8 6f cf ff ff       	callq  20ffd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>
  213061:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  213066:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21306d:	00 
        log::info!(
  21306e:	48 c7 44 24 78 03 00 	movq   $0x3,0x78(%rsp)
  213075:	00 00 
  213077:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  21307c:	48 8d 35 b5 d5 fe ff 	lea    -0x12a4b(%rip),%rsi        # 200638 <str.0+0x118>
  213083:	e8 68 ea ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  213088:	88 44 24 37          	mov    %al,0x37(%rsp)
  21308c:	8a 44 24 37          	mov    0x37(%rsp),%al
  213090:	a8 01                	test   $0x1,%al
  213092:	75 0c                	jne    2130a0 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0xd0>
  213094:	eb 00                	jmp    213096 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0xc6>
  213096:	c6 84 24 87 00 00 00 	movb   $0x0,0x87(%rsp)
  21309d:	00 
  21309e:	eb 57                	jmp    2130f7 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x127>
  2130a0:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  2130a7:	00 
  2130a8:	48 8b 3d 61 80 02 00 	mov    0x28061(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2130af:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  2130b6:	00 
  2130b7:	e8 04 5c 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2130bc:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  2130c3:	00 
  2130c4:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2130cb:	00 
  2130cc:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2130d3:	00 
  2130d4:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2130d9:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  2130e0:	00 
  2130e1:	e8 0a ea ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2130e6:	88 44 24 36          	mov    %al,0x36(%rsp)
  2130ea:	8a 44 24 36          	mov    0x36(%rsp),%al
  2130ee:	24 01                	and    $0x1,%al
  2130f0:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  2130f7:	f6 84 24 87 00 00 00 	testb  $0x1,0x87(%rsp)
  2130fe:	01 
  2130ff:	0f 84 1e ff ff ff    	je     213023 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
  213105:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            acpi.n_entries,
  21310a:	48 89 c1             	mov    %rax,%rcx
  21310d:	48 81 c1 80 01 00 00 	add    $0x180,%rcx
            acpi.supports_2x
  213114:	48 05 88 01 00 00    	add    $0x188,%rax
        log::info!(
  21311a:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  213121:	00 
  213122:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  213129:	00 
  21312a:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  213131:	00 
  213132:	48 89 bc 24 f8 00 00 	mov    %rdi,0xf8(%rsp)
  213139:	00 
  21313a:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  213141:	00 
  213142:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213147:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21314e:	00 
  21314f:	48 8b 35 d2 7f 02 00 	mov    0x27fd2(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  213156:	e8 25 bc ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21315b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  213160:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  213165:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21316a:	48 8b 35 bf 7f 02 00 	mov    0x27fbf(%rip),%rsi        # 23b130 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x80>
  213171:	e8 6a b9 ff ff       	callq  20eae0 <_ZN4core3fmt10ArgumentV13new17h6eb9a36efcd2d487E>
  213176:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21317b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213180:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213185:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21318a:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21318f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  213194:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  21319b:	00 
  21319c:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  2131a3:	00 
  2131a4:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  2131ab:	00 
  2131ac:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2131b3:	00 
  2131b4:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  2131bb:	00 
  2131bc:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2131c3:	00 
  2131c4:	48 8d 35 5d 4e 02 00 	lea    0x24e5d(%rip),%rsi        # 238028 <memcmp+0x1a78>
  2131cb:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2131d1:	4c 89 c2             	mov    %r8,%rdx
  2131d4:	e8 e7 30 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2131d9:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  2131de:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  2131e5:	00 
  2131e6:	48 8d 15 5b 4e 02 00 	lea    0x24e5b(%rip),%rdx        # 238048 <memcmp+0x1a98>
  2131ed:	e8 fe d3 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2131f2:	e9 2c fe ff ff       	jmpq   213023 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E+0x53>
}
  2131f7:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  2131fe:	c3                   	retq   
  2131ff:	cc                   	int3   

0000000000213200 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE>:
#[derive(Debug)]
  213200:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  213207:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21320c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  213211:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  213216:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21321b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  213220:	8b 00                	mov    (%rax),%eax
  213222:	48 85 c0             	test   %rax,%rax
  213225:	74 06                	je     21322d <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x2d>
  213227:	eb 00                	jmp    213229 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x29>
  213229:	eb 35                	jmp    213260 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0x60>
  21322b:	0f 0b                	ud2    
  21322d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    RSDT(u32),
  213232:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  213237:	48 83 c0 04          	add    $0x4,%rax
  21323b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213240:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  213247:	00 
#[derive(Debug)]
  213248:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21324d:	48 8d 15 ec d6 fe ff 	lea    -0x12914(%rip),%rdx        # 200940 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x8>
  213254:	b9 04 00 00 00       	mov    $0x4,%ecx
  213259:	e8 32 25 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21325e:	eb 7a                	jmp    2132da <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0xda>
  213260:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    XSDT(u64),
  213265:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21326a:	48 83 c0 08          	add    $0x8,%rax
  21326e:	48 89 04 24          	mov    %rax,(%rsp)
  213272:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug)]
  213277:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21327c:	48 8d 15 c5 d6 fe ff 	lea    -0x1293b(%rip),%rdx        # 200948 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x10>
  213283:	b9 04 00 00 00       	mov    $0x4,%ecx
  213288:	e8 03 25 02 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21328d:	48 8b 04 24          	mov    (%rsp),%rax
  213291:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  213296:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21329d:	00 
    XSDT(u64),
  21329e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2132a3:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
#[derive(Debug)]
  2132a8:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2132ad:	48 8d 15 cc 4d 02 00 	lea    0x24dcc(%rip),%rdx        # 238080 <memcmp+0x1ad0>
  2132b4:	e8 57 fa 01 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  2132b9:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2132be:	e8 bd fb 01 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  2132c3:	24 01                	and    $0x1,%al
  2132c5:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2132c9:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2132cd:	24 01                	and    $0x1,%al
  2132cf:	0f b6 c0             	movzbl %al,%eax
  2132d2:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  2132d9:	c3                   	retq   
  2132da:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2132df:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  2132e4:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  2132eb:	00 
    RSDT(u32),
  2132ec:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2132f1:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug)]
  2132f6:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2132fb:	48 8d 15 9e 4d 02 00 	lea    0x24d9e(%rip),%rdx        # 2380a0 <memcmp+0x1af0>
  213302:	e8 09 fa 01 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  213307:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21330c:	e8 6f fb 01 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  213311:	24 01                	and    $0x1,%al
  213313:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  213317:	eb b0                	jmp    2132c9 <_ZN77_$LT$r3_kernel..acpi..rsdt..AcpiRootTableKind$u20$as$u20$core..fmt..Debug$GT$3fmt17hdaecde7dff96f34bE+0xc9>
  213319:	cc                   	int3   
  21331a:	cc                   	int3   
  21331b:	cc                   	int3   
  21331c:	cc                   	int3   
  21331d:	cc                   	int3   
  21331e:	cc                   	int3   
  21331f:	cc                   	int3   

0000000000213320 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E>:
#[derive(Debug)]
  213320:	48 83 ec 38          	sub    $0x38,%rsp
  213324:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  213329:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21332e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  213333:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  213338:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21333d:	0f b6 00             	movzbl (%rax),%eax
  213340:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213345:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21334a:	48 8d 0d 1b d7 fe ff 	lea    -0x128e5(%rip),%rcx        # 200a6c <str.0+0x1c>
  213351:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  213355:	48 01 c8             	add    %rcx,%rax
  213358:	ff e0                	jmpq   *%rax
  21335a:	0f 0b                	ud2    
  21335c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  213361:	48 8d 35 98 d2 fe ff 	lea    -0x12d68(%rip),%rsi        # 200600 <str.0+0xe0>
  213368:	ba 08 00 00 00       	mov    $0x8,%edx
  21336d:	e8 ae 23 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213372:	24 01                	and    $0x1,%al
  213374:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  213378:	eb 58                	jmp    2133d2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  21337a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21337f:	48 8d 35 f2 d2 fe ff 	lea    -0x12d0e(%rip),%rsi        # 200678 <str.0+0x158>
  213386:	ba 10 00 00 00       	mov    $0x10,%edx
  21338b:	e8 90 23 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213390:	24 01                	and    $0x1,%al
  213392:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  213396:	eb 3a                	jmp    2133d2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  213398:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21339d:	48 8d 35 b7 d8 fe ff 	lea    -0x12749(%rip),%rsi        # 200c5b <str.3+0x5b>
  2133a4:	ba 0f 00 00 00       	mov    $0xf,%edx
  2133a9:	e8 72 23 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2133ae:	24 01                	and    $0x1,%al
  2133b0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2133b4:	eb 1c                	jmp    2133d2 <_ZN78_$LT$r3_kernel..acpi..rsdt..AcpiRootTableError$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bd4de3089da96b1E+0xb2>
  2133b6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2133bb:	48 8d 35 88 d8 fe ff 	lea    -0x12778(%rip),%rsi        # 200c4a <str.3+0x4a>
  2133c2:	ba 11 00 00 00       	mov    $0x11,%edx
  2133c7:	e8 54 23 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2133cc:	24 01                	and    $0x1,%al
  2133ce:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2133d2:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2133d6:	24 01                	and    $0x1,%al
  2133d8:	0f b6 c0             	movzbl %al,%eax
  2133db:	48 83 c4 38          	add    $0x38,%rsp
  2133df:	c3                   	retq   

00000000002133e0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>:
            fn deref(&self) -> &$T {
  2133e0:	48 83 ec 18          	sub    $0x18,%rsp
  2133e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2133e9:	48 8d 05 80 8e 02 00 	lea    0x28e80(%rip),%rax        # 23c270 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb6aa66892d79afddE>
  2133f0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2133f5:	48 8d 3d 74 8e 02 00 	lea    0x28e74(%rip),%rdi        # 23c270 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb6aa66892d79afddE>
  2133fc:	e8 df 68 ff ff       	callq  209ce0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd2f887304644bf7fE>
  213401:	48 89 04 24          	mov    %rax,(%rsp)
  213405:	48 8b 04 24          	mov    (%rsp),%rax
            }
  213409:	48 83 c4 18          	add    $0x18,%rsp
  21340d:	c3                   	retq   
  21340e:	cc                   	int3   
  21340f:	cc                   	int3   

0000000000213410 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h477bb3e9a00069c1E>:
  213410:	48 83 ec 18          	sub    $0x18,%rsp
  213414:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213419:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21341e:	48 8b 3f             	mov    (%rdi),%rdi
  213421:	e8 8a af ff ff       	callq  20e3b0 <_ZN69_$LT$r3_kernel..mm..paging..PageRange$u20$as$u20$core..fmt..Debug$GT$3fmt17h063c54f93d0e7a84E>
  213426:	88 44 24 07          	mov    %al,0x7(%rsp)
  21342a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21342e:	24 01                	and    $0x1,%al
  213430:	0f b6 c0             	movzbl %al,%eax
  213433:	48 83 c4 18          	add    $0x18,%rsp
  213437:	c3                   	retq   
  213438:	cc                   	int3   
  213439:	cc                   	int3   
  21343a:	cc                   	int3   
  21343b:	cc                   	int3   
  21343c:	cc                   	int3   
  21343d:	cc                   	int3   
  21343e:	cc                   	int3   
  21343f:	cc                   	int3   

0000000000213440 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hddb2de07a8fbd8d2E>:
  213440:	48 83 ec 18          	sub    $0x18,%rsp
  213444:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213449:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21344e:	48 8b 3f             	mov    (%rdi),%rdi
  213451:	e8 2a ad ff ff       	callq  20e180 <_ZN68_$LT$r3_kernel..mm..paging..PageSize$u20$as$u20$core..fmt..Debug$GT$3fmt17h26cfd954438d892cE>
  213456:	88 44 24 07          	mov    %al,0x7(%rsp)
  21345a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21345e:	24 01                	and    $0x1,%al
  213460:	0f b6 c0             	movzbl %al,%eax
  213463:	48 83 c4 18          	add    $0x18,%rsp
  213467:	c3                   	retq   
  213468:	cc                   	int3   
  213469:	cc                   	int3   
  21346a:	cc                   	int3   
  21346b:	cc                   	int3   
  21346c:	cc                   	int3   
  21346d:	cc                   	int3   
  21346e:	cc                   	int3   
  21346f:	cc                   	int3   

0000000000213470 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>:
    pub const fn is_null(self) -> bool {
  213470:	48 83 ec 18          	sub    $0x18,%rsp
  213474:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  213479:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21347e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  213483:	31 c0                	xor    %eax,%eax
  213485:	89 c6                	mov    %eax,%esi
  213487:	e8 04 e3 01 00       	callq  231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21348c:	88 44 24 07          	mov    %al,0x7(%rsp)
  213490:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  213494:	24 01                	and    $0x1,%al
  213496:	0f b6 c0             	movzbl %al,%eax
  213499:	48 83 c4 18          	add    $0x18,%rsp
  21349d:	c3                   	retq   
  21349e:	cc                   	int3   
  21349f:	cc                   	int3   

00000000002134a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h77ff0a5df0613473E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
  2134a0:	48 83 ec 10          	sub    $0x10,%rsp
  2134a4:	48 89 f8             	mov    %rdi,%rax
  2134a7:	48 89 04 24          	mov    %rax,(%rsp)
  2134ab:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  2134b0:	48 83 c4 10          	add    $0x10,%rsp
  2134b4:	c3                   	retq   
  2134b5:	cc                   	int3   
  2134b6:	cc                   	int3   
  2134b7:	cc                   	int3   
  2134b8:	cc                   	int3   
  2134b9:	cc                   	int3   
  2134ba:	cc                   	int3   
  2134bb:	cc                   	int3   
  2134bc:	cc                   	int3   
  2134bd:	cc                   	int3   
  2134be:	cc                   	int3   
  2134bf:	cc                   	int3   

00000000002134c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h21f431eaaa4aac60E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
  2134c0:	48 83 ec 28          	sub    $0x28,%rsp
  2134c4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2134c9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        IterMut::new(self)
  2134ce:	e8 3d 5e 00 00       	callq  219310 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE>
  2134d3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2134d8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2134dd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2134e2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2134e7:	48 83 c4 28          	add    $0x28,%rsp
  2134eb:	c3                   	retq   
  2134ec:	cc                   	int3   
  2134ed:	cc                   	int3   
  2134ee:	cc                   	int3   
  2134ef:	cc                   	int3   

00000000002134f0 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h50650571f0c00760E>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  2134f0:	48 83 ec 28          	sub    $0x28,%rsp
  2134f4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2134f9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Pointer::fmt(&(&**self as *const T), f)
  2134fe:	48 8b 07             	mov    (%rdi),%rax
  213501:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213506:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21350b:	e8 20 00 00 00       	callq  213530 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE>
  213510:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213514:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213518:	24 01                	and    $0x1,%al
  21351a:	0f b6 c0             	movzbl %al,%eax
  21351d:	48 83 c4 28          	add    $0x28,%rsp
  213521:	c3                   	retq   
  213522:	cc                   	int3   
  213523:	cc                   	int3   
  213524:	cc                   	int3   
  213525:	cc                   	int3   
  213526:	cc                   	int3   
  213527:	cc                   	int3   
  213528:	cc                   	int3   
  213529:	cc                   	int3   
  21352a:	cc                   	int3   
  21352b:	cc                   	int3   
  21352c:	cc                   	int3   
  21352d:	cc                   	int3   
  21352e:	cc                   	int3   
  21352f:	cc                   	int3   

0000000000213530 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  213530:	48 83 ec 78          	sub    $0x78,%rsp
  213534:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  213539:	48 89 f8             	mov    %rdi,%rax
  21353c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  213541:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  213546:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21354b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
        let old_width = f.width;
  213550:	48 8b 0f             	mov    (%rdi),%rcx
  213553:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  213558:	48 8b 47 08          	mov    0x8(%rdi),%rax
  21355c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  213561:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  213566:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        let old_flags = f.flags;
  21356b:	8b 47 30             	mov    0x30(%rdi),%eax
  21356e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  213572:	89 44 24 70          	mov    %eax,0x70(%rsp)
        if f.alternate() {
  213576:	e8 c5 21 02 00       	callq  235740 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>
  21357b:	88 44 24 37          	mov    %al,0x37(%rsp)
  21357f:	8a 44 24 37          	mov    0x37(%rsp),%al
  213583:	a8 01                	test   $0x1,%al
  213585:	75 33                	jne    2135ba <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x8a>
  213587:	eb 00                	jmp    213589 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x59>
  213589:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21358e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        f.flags |= 1 << (FlagV1::Alternate as u32);
  213593:	8b 4e 30             	mov    0x30(%rsi),%ecx
  213596:	83 c9 04             	or     $0x4,%ecx
  213599:	89 4e 30             	mov    %ecx,0x30(%rsi)
        let ret = LowerHex::fmt(&(*self as *const () as usize), f);
  21359c:	48 8b 00             	mov    (%rax),%rax
  21359f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2135a4:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2135a9:	e8 92 f1 01 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  2135ae:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2135b2:	24 01                	and    $0x1,%al
  2135b4:	88 44 24 77          	mov    %al,0x77(%rsp)
  2135b8:	eb 4d                	jmp    213607 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xd7>
  2135ba:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
  2135bf:	8b 47 30             	mov    0x30(%rdi),%eax
  2135c2:	83 c8 08             	or     $0x8,%eax
  2135c5:	89 47 30             	mov    %eax,0x30(%rdi)
            if f.width.is_none() {
  2135c8:	e8 03 e9 01 00       	callq  231ed0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>
  2135cd:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2135d1:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2135d5:	a8 01                	test   $0x1,%al
  2135d7:	75 04                	jne    2135dd <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xad>
  2135d9:	eb 00                	jmp    2135db <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xab>
        if f.alternate() {
  2135db:	eb ac                	jmp    213589 <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0x59>
  2135dd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                f.width = Some((usize::BITS / 4) as usize + 2);
  2135e2:	48 c7 44 24 40 12 00 	movq   $0x12,0x40(%rsp)
  2135e9:	00 00 
  2135eb:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2135f2:	00 00 
  2135f4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  2135f9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2135fe:	48 89 10             	mov    %rdx,(%rax)
  213601:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if f.width.is_none() {
  213605:	eb d4                	jmp    2135db <_ZN54_$LT$$BP$const$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h6436fd1ca66cabbbE+0xab>
  213607:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21360b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  213610:	8b 54 24 30          	mov    0x30(%rsp),%edx
  213614:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  213619:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        f.width = old_width;
  21361e:	48 89 39             	mov    %rdi,(%rcx)
  213621:	48 89 71 08          	mov    %rsi,0x8(%rcx)
        f.flags = old_flags;
  213625:	89 51 30             	mov    %edx,0x30(%rcx)
    }
  213628:	24 01                	and    $0x1,%al
  21362a:	0f b6 c0             	movzbl %al,%eax
  21362d:	48 83 c4 78          	add    $0x78,%rsp
  213631:	c3                   	retq   
  213632:	cc                   	int3   
  213633:	cc                   	int3   
  213634:	cc                   	int3   
  213635:	cc                   	int3   
  213636:	cc                   	int3   
  213637:	cc                   	int3   
  213638:	cc                   	int3   
  213639:	cc                   	int3   
  21363a:	cc                   	int3   
  21363b:	cc                   	int3   
  21363c:	cc                   	int3   
  21363d:	cc                   	int3   
  21363e:	cc                   	int3   
  21363f:	cc                   	int3   

0000000000213640 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4c4b5ea2e2ac9d28E>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
  213640:	48 89 f8             	mov    %rdi,%rax
        self
  213643:	48 8b 0e             	mov    (%rsi),%rcx
  213646:	48 89 0f             	mov    %rcx,(%rdi)
  213649:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  21364d:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  213651:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  213655:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  213659:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
  21365d:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    }
  213661:	c3                   	retq   
  213662:	cc                   	int3   
  213663:	cc                   	int3   
  213664:	cc                   	int3   
  213665:	cc                   	int3   
  213666:	cc                   	int3   
  213667:	cc                   	int3   
  213668:	cc                   	int3   
  213669:	cc                   	int3   
  21366a:	cc                   	int3   
  21366b:	cc                   	int3   
  21366c:	cc                   	int3   
  21366d:	cc                   	int3   
  21366e:	cc                   	int3   
  21366f:	cc                   	int3   

0000000000213670 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE>:
// could be inlined, the previous attempts to do so made rustc
// slower:
//
// * https://github.com/rust-lang/rust/pull/72189
// * https://github.com/rust-lang/rust/pull/79827
const fn size_align<T>() -> (usize, usize) {
  213670:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  213674:	eb 00                	jmp    213676 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE+0x6>
  213676:	48 c7 04 24 20 00 00 	movq   $0x20,(%rsp)
  21367d:	00 
  21367e:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  213685:	00 00 
}
  213687:	48 8b 04 24          	mov    (%rsp),%rax
  21368b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  213690:	48 83 c4 10          	add    $0x10,%rsp
  213694:	c3                   	retq   
  213695:	cc                   	int3   
  213696:	cc                   	int3   
  213697:	cc                   	int3   
  213698:	cc                   	int3   
  213699:	cc                   	int3   
  21369a:	cc                   	int3   
  21369b:	cc                   	int3   
  21369c:	cc                   	int3   
  21369d:	cc                   	int3   
  21369e:	cc                   	int3   
  21369f:	cc                   	int3   

00000000002136a0 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE>:
const fn size_align<T>() -> (usize, usize) {
  2136a0:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  2136a4:	eb 00                	jmp    2136a6 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE+0x6>
  2136a6:	48 c7 04 24 06 00 00 	movq   $0x6,(%rsp)
  2136ad:	00 
  2136ae:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  2136b5:	00 00 
}
  2136b7:	48 8b 04 24          	mov    (%rsp),%rax
  2136bb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2136c0:	48 83 c4 10          	add    $0x10,%rsp
  2136c4:	c3                   	retq   
  2136c5:	cc                   	int3   
  2136c6:	cc                   	int3   
  2136c7:	cc                   	int3   
  2136c8:	cc                   	int3   
  2136c9:	cc                   	int3   
  2136ca:	cc                   	int3   
  2136cb:	cc                   	int3   
  2136cc:	cc                   	int3   
  2136cd:	cc                   	int3   
  2136ce:	cc                   	int3   
  2136cf:	cc                   	int3   

00000000002136d0 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E>:
const fn size_align<T>() -> (usize, usize) {
  2136d0:	48 83 ec 10          	sub    $0x10,%rsp
    (mem::size_of::<T>(), mem::align_of::<T>())
  2136d4:	eb 00                	jmp    2136d6 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E+0x6>
  2136d6:	48 c7 04 24 08 00 00 	movq   $0x8,(%rsp)
  2136dd:	00 
  2136de:	48 c7 44 24 08 08 00 	movq   $0x8,0x8(%rsp)
  2136e5:	00 00 
}
  2136e7:	48 8b 04 24          	mov    (%rsp),%rax
  2136eb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2136f0:	48 83 c4 10          	add    $0x10,%rsp
  2136f4:	c3                   	retq   
  2136f5:	cc                   	int3   
  2136f6:	cc                   	int3   
  2136f7:	cc                   	int3   
  2136f8:	cc                   	int3   
  2136f9:	cc                   	int3   
  2136fa:	cc                   	int3   
  2136fb:	cc                   	int3   
  2136fc:	cc                   	int3   
  2136fd:	cc                   	int3   
  2136fe:	cc                   	int3   
  2136ff:	cc                   	int3   

0000000000213700 <_ZN4core5alloc6layout6Layout3new17h14e49274c2912963E>:
    /// Constructs a `Layout` suitable for holding a value of type `T`.
    #[stable(feature = "alloc_layout", since = "1.28.0")]
    #[rustc_const_stable(feature = "alloc_layout_const_new", since = "1.42.0")]
    #[must_use]
    #[inline]
    pub const fn new<T>() -> Self {
  213700:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  213704:	e8 67 ff ff ff       	callq  213670 <_ZN4core5alloc6layout10size_align17h3e2e833506d02c2eE>
  213709:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21370e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  213713:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  213718:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21371d:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  213722:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        // SAFETY: the align is guaranteed by Rust to be a power of two and
        // the size+align combo is guaranteed to fit in our address space. As a
        // result use the unchecked constructor here to avoid inserting code
        // that panics if it isn't optimized well enough.
        unsafe { Layout::from_size_align_unchecked(size, align) }
  213727:	e8 d4 6c 00 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21372c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213731:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213736:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21373b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213740:	48 83 c4 38          	add    $0x38,%rsp
  213744:	c3                   	retq   
  213745:	cc                   	int3   
  213746:	cc                   	int3   
  213747:	cc                   	int3   
  213748:	cc                   	int3   
  213749:	cc                   	int3   
  21374a:	cc                   	int3   
  21374b:	cc                   	int3   
  21374c:	cc                   	int3   
  21374d:	cc                   	int3   
  21374e:	cc                   	int3   
  21374f:	cc                   	int3   

0000000000213750 <_ZN4core5alloc6layout6Layout3new17h5ba2216a2bb47243E>:
    pub const fn new<T>() -> Self {
  213750:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  213754:	e8 77 ff ff ff       	callq  2136d0 <_ZN4core5alloc6layout10size_align17hce573e2c1b28c2f8E>
  213759:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21375e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  213763:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  213768:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21376d:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  213772:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
  213777:	e8 84 6c 00 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21377c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213781:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213786:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21378b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  213790:	48 83 c4 38          	add    $0x38,%rsp
  213794:	c3                   	retq   
  213795:	cc                   	int3   
  213796:	cc                   	int3   
  213797:	cc                   	int3   
  213798:	cc                   	int3   
  213799:	cc                   	int3   
  21379a:	cc                   	int3   
  21379b:	cc                   	int3   
  21379c:	cc                   	int3   
  21379d:	cc                   	int3   
  21379e:	cc                   	int3   
  21379f:	cc                   	int3   

00000000002137a0 <_ZN4core5alloc6layout6Layout3new17hba5f1941af14a5a4E>:
    pub const fn new<T>() -> Self {
  2137a0:	48 83 ec 38          	sub    $0x38,%rsp
        let (size, align) = size_align::<T>();
  2137a4:	e8 f7 fe ff ff       	callq  2136a0 <_ZN4core5alloc6layout10size_align17hcd667b92862456dcE>
  2137a9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2137ae:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2137b3:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2137b8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2137bd:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2137c2:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
  2137c7:	e8 34 6c 00 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  2137cc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2137d1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2137d6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2137db:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2137e0:	48 83 c4 38          	add    $0x38,%rsp
  2137e4:	c3                   	retq   
  2137e5:	cc                   	int3   
  2137e6:	cc                   	int3   
  2137e7:	cc                   	int3   
  2137e8:	cc                   	int3   
  2137e9:	cc                   	int3   
  2137ea:	cc                   	int3   
  2137eb:	cc                   	int3   
  2137ec:	cc                   	int3   
  2137ed:	cc                   	int3   
  2137ee:	cc                   	int3   
  2137ef:	cc                   	int3   

00000000002137f0 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E>:
    /// Creates a layout describing the record for a `[T; n]`.
    ///
    /// On arithmetic overflow, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[inline]
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  2137f0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  2137f7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2137fc:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  213803:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  213804:	e8 47 ff ff ff       	callq  213750 <_ZN4core5alloc6layout6Layout3new17h5ba2216a2bb47243E>
  213809:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  213810:	00 
  213811:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  213818:	00 
  213819:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21381e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  213823:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  21382a:	00 
  21382b:	e8 60 6c 00 00       	callq  21a490 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  213830:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  213835:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  21383a:	e8 91 78 ff ff       	callq  20b0d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  21383f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  213844:	48 85 c0             	test   %rax,%rax
  213847:	0f 94 c0             	sete   %al
  21384a:	0f b6 c0             	movzbl %al,%eax
  21384d:	75 09                	jne    213858 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x68>
  21384f:	eb 00                	jmp    213851 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x61>
  213851:	e9 87 00 00 00       	jmpq   2138dd <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xed>
  213856:	0f 0b                	ud2    
  213858:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21385d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  213864:	00 
  213865:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21386a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  213871:	00 
  213872:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  213877:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21387e:	00 
  21387f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  213886:	00 
  213887:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21388c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  213893:	00 
  213894:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  213899:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2138a0:	00 
  2138a1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2138a6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2138ab:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2138b0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2138b5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2138ba:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2138bf:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2138c6:	00 
        debug_assert_eq!(offset, mem::size_of::<T>());
        Ok(layout.pad_to_align())
  2138c7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2138cc:	e8 af 68 00 00       	callq  21a180 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  2138d1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2138d6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2138db:	eb 23                	jmp    213900 <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  2138dd:	e8 7e 6c ff ff       	callq  20a560 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  2138e2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2138e7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2138ec:	eb 00                	jmp    2138ee <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xfe>
  2138ee:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2138f3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2138f8:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  2138ff:	c3                   	retq   
  213900:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213905:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  21390a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21390f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  213914:	eb d8                	jmp    2138ee <_ZN4core5alloc6layout6Layout5array17h1eddb6d5bbbf5a11E+0xfe>
  213916:	cc                   	int3   
  213917:	cc                   	int3   
  213918:	cc                   	int3   
  213919:	cc                   	int3   
  21391a:	cc                   	int3   
  21391b:	cc                   	int3   
  21391c:	cc                   	int3   
  21391d:	cc                   	int3   
  21391e:	cc                   	int3   
  21391f:	cc                   	int3   

0000000000213920 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E>:
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  213920:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  213927:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21392c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  213933:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  213934:	e8 c7 fd ff ff       	callq  213700 <_ZN4core5alloc6layout6Layout3new17h14e49274c2912963E>
  213939:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  213940:	00 
  213941:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  213948:	00 
  213949:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21394e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  213953:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  21395a:	00 
  21395b:	e8 30 6b 00 00       	callq  21a490 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  213960:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  213965:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  21396a:	e8 61 77 ff ff       	callq  20b0d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  21396f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  213974:	48 85 c0             	test   %rax,%rax
  213977:	0f 94 c0             	sete   %al
  21397a:	0f b6 c0             	movzbl %al,%eax
  21397d:	75 09                	jne    213988 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x68>
  21397f:	eb 00                	jmp    213981 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x61>
  213981:	e9 87 00 00 00       	jmpq   213a0d <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xed>
  213986:	0f 0b                	ud2    
  213988:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21398d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  213994:	00 
  213995:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21399a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2139a1:	00 
  2139a2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2139a7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2139ae:	00 
  2139af:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2139b6:	00 
  2139b7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2139bc:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2139c3:	00 
  2139c4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2139c9:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2139d0:	00 
  2139d1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2139d6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2139db:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2139e0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2139e5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2139ea:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2139ef:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2139f6:	00 
        Ok(layout.pad_to_align())
  2139f7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2139fc:	e8 7f 67 00 00       	callq  21a180 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  213a01:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213a06:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213a0b:	eb 23                	jmp    213a30 <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  213a0d:	e8 4e 6b ff ff       	callq  20a560 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  213a12:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  213a17:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213a1c:	eb 00                	jmp    213a1e <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xfe>
  213a1e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  213a23:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  213a28:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  213a2f:	c3                   	retq   
  213a30:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213a35:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  213a3a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  213a3f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  213a44:	eb d8                	jmp    213a1e <_ZN4core5alloc6layout6Layout5array17h3b81f5d269d51831E+0xfe>
  213a46:	cc                   	int3   
  213a47:	cc                   	int3   
  213a48:	cc                   	int3   
  213a49:	cc                   	int3   
  213a4a:	cc                   	int3   
  213a4b:	cc                   	int3   
  213a4c:	cc                   	int3   
  213a4d:	cc                   	int3   
  213a4e:	cc                   	int3   
  213a4f:	cc                   	int3   

0000000000213a50 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE>:
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
  213a50:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  213a57:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  213a5c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  213a63:	00 
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  213a64:	e8 37 fd ff ff       	callq  2137a0 <_ZN4core5alloc6layout6Layout3new17hba5f1941af14a5a4E>
  213a69:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  213a70:	00 
  213a71:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  213a78:	00 
  213a79:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  213a7e:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  213a83:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  213a8a:	00 
  213a8b:	e8 00 6a 00 00       	callq  21a490 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>
  213a90:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  213a95:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  213a9a:	e8 31 76 ff ff       	callq  20b0d0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h24db4671f4e83a89E>
  213a9f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  213aa4:	48 85 c0             	test   %rax,%rax
  213aa7:	0f 94 c0             	sete   %al
  213aaa:	0f b6 c0             	movzbl %al,%eax
  213aad:	75 09                	jne    213ab8 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x68>
  213aaf:	eb 00                	jmp    213ab1 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x61>
  213ab1:	e9 87 00 00 00       	jmpq   213b3d <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xed>
  213ab6:	0f 0b                	ud2    
  213ab8:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  213abd:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  213ac4:	00 
  213ac5:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  213aca:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  213ad1:	00 
  213ad2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  213ad7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  213ade:	00 
  213adf:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  213ae6:	00 
  213ae7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  213aec:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  213af3:	00 
  213af4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  213af9:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  213b00:	00 
  213b01:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  213b06:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  213b0b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  213b10:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  213b15:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  213b1a:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  213b1f:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  213b26:	00 
        Ok(layout.pad_to_align())
  213b27:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  213b2c:	e8 4f 66 00 00       	callq  21a180 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>
  213b31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213b36:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  213b3b:	eb 23                	jmp    213b60 <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0x110>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
  213b3d:	e8 1e 6a ff ff       	callq  20a560 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h315bc6fd3161aaccE>
  213b42:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  213b47:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  213b4c:	eb 00                	jmp    213b4e <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xfe>
  213b4e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  213b53:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  213b58:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  213b5f:	c3                   	retq   
  213b60:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  213b65:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Ok(layout.pad_to_align())
  213b6a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  213b6f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  213b74:	eb d8                	jmp    213b4e <_ZN4core5alloc6layout6Layout5array17h91dc734d0e1d914bE+0xfe>
  213b76:	cc                   	int3   
  213b77:	cc                   	int3   
  213b78:	cc                   	int3   
  213b79:	cc                   	int3   
  213b7a:	cc                   	int3   
  213b7b:	cc                   	int3   
  213b7c:	cc                   	int3   
  213b7d:	cc                   	int3   
  213b7e:	cc                   	int3   
  213b7f:	cc                   	int3   

0000000000213b80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h27cd80e521a8f3afE>:
    fn from(t: T) -> T {
  213b80:	50                   	push   %rax
    }
  213b81:	58                   	pop    %rax
  213b82:	c3                   	retq   
  213b83:	cc                   	int3   
  213b84:	cc                   	int3   
  213b85:	cc                   	int3   
  213b86:	cc                   	int3   
  213b87:	cc                   	int3   
  213b88:	cc                   	int3   
  213b89:	cc                   	int3   
  213b8a:	cc                   	int3   
  213b8b:	cc                   	int3   
  213b8c:	cc                   	int3   
  213b8d:	cc                   	int3   
  213b8e:	cc                   	int3   
  213b8f:	cc                   	int3   

0000000000213b90 <_ZN4core3fmt5Write10write_char17ha396e41c707486b5E>:
    fn write_char(&mut self, c: char) -> Result {
  213b90:	48 83 ec 48          	sub    $0x48,%rsp
  213b94:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  213b98:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  213b9d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  213ba2:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  213ba6:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  213bab:	31 f6                	xor    %esi,%esi
  213bad:	ba 04 00 00 00       	mov    $0x4,%edx
  213bb2:	e8 c9 29 02 00       	callq  236580 <memset>
  213bb7:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  213bbb:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  213bc0:	ba 04 00 00 00       	mov    $0x4,%edx
  213bc5:	e8 96 22 00 00       	callq  215e60 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>
  213bca:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  213bcf:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  213bd4:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  213bd9:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  213bde:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  213be3:	e8 08 2d ff ff       	callq  2068f0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>
  213be8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213bec:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213bf0:	24 01                	and    $0x1,%al
  213bf2:	0f b6 c0             	movzbl %al,%eax
  213bf5:	48 83 c4 48          	add    $0x48,%rsp
  213bf9:	c3                   	retq   
  213bfa:	cc                   	int3   
  213bfb:	cc                   	int3   
  213bfc:	cc                   	int3   
  213bfd:	cc                   	int3   
  213bfe:	cc                   	int3   
  213bff:	cc                   	int3   

0000000000213c00 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  213c00:	48 83 ec 48          	sub    $0x48,%rsp
  213c04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  213c09:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  213c0e:	48 89 04 24          	mov    %rax,(%rsp)
  213c12:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  213c17:	ba 30 00 00 00       	mov    $0x30,%edx
  213c1c:	e8 3f 29 02 00       	callq  236560 <memcpy>
  213c21:	48 8b 3c 24          	mov    (%rsp),%rdi
  213c25:	48 8d 35 94 44 02 00 	lea    0x24494(%rip),%rsi        # 2380c0 <memcmp+0x1b10>
  213c2c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  213c31:	e8 0a 11 02 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  213c36:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213c3a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213c3e:	24 01                	and    $0x1,%al
  213c40:	0f b6 c0             	movzbl %al,%eax
  213c43:	48 83 c4 48          	add    $0x48,%rsp
  213c47:	c3                   	retq   
  213c48:	cc                   	int3   
  213c49:	cc                   	int3   
  213c4a:	cc                   	int3   
  213c4b:	cc                   	int3   
  213c4c:	cc                   	int3   
  213c4d:	cc                   	int3   
  213c4e:	cc                   	int3   
  213c4f:	cc                   	int3   

0000000000213c50 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h5d79f033f2b7bc07E>:
    fn write_char(&mut self, c: char) -> Result {
  213c50:	48 83 ec 18          	sub    $0x18,%rsp
  213c54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  213c59:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  213c5d:	48 8b 3f             	mov    (%rdi),%rdi
  213c60:	e8 2b ff ff ff       	callq  213b90 <_ZN4core3fmt5Write10write_char17ha396e41c707486b5E>
  213c65:	88 44 24 07          	mov    %al,0x7(%rsp)
  213c69:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  213c6d:	24 01                	and    $0x1,%al
  213c6f:	0f b6 c0             	movzbl %al,%eax
  213c72:	48 83 c4 18          	add    $0x18,%rsp
  213c76:	c3                   	retq   
  213c77:	cc                   	int3   
  213c78:	cc                   	int3   
  213c79:	cc                   	int3   
  213c7a:	cc                   	int3   
  213c7b:	cc                   	int3   
  213c7c:	cc                   	int3   
  213c7d:	cc                   	int3   
  213c7e:	cc                   	int3   
  213c7f:	cc                   	int3   

0000000000213c80 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h20c7314e44ff1427E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  213c80:	48 83 ec 48          	sub    $0x48,%rsp
  213c84:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  213c89:	48 8b 07             	mov    (%rdi),%rax
  213c8c:	48 89 04 24          	mov    %rax,(%rsp)
  213c90:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  213c95:	ba 30 00 00 00       	mov    $0x30,%edx
  213c9a:	e8 c1 28 02 00       	callq  236560 <memcpy>
  213c9f:	48 8b 3c 24          	mov    (%rsp),%rdi
  213ca3:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  213ca8:	e8 53 ff ff ff       	callq  213c00 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>
  213cad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213cb1:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213cb5:	24 01                	and    $0x1,%al
  213cb7:	0f b6 c0             	movzbl %al,%eax
  213cba:	48 83 c4 48          	add    $0x48,%rsp
  213cbe:	c3                   	retq   
  213cbf:	cc                   	int3   

0000000000213cc0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h496f3945fad8b724E>:
    fn write_str(&mut self, s: &str) -> Result {
  213cc0:	48 83 ec 28          	sub    $0x28,%rsp
  213cc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  213cc9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  213cce:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  213cd3:	48 8b 3f             	mov    (%rdi),%rdi
  213cd6:	e8 15 2c ff ff       	callq  2068f0 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17hed6fc29d6c2b05eaE>
  213cdb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  213cdf:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  213ce3:	24 01                	and    $0x1,%al
  213ce5:	0f b6 c0             	movzbl %al,%eax
  213ce8:	48 83 c4 28          	add    $0x28,%rsp
  213cec:	c3                   	retq   
  213ced:	cc                   	int3   
  213cee:	cc                   	int3   
  213cef:	cc                   	int3   

0000000000213cf0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>:
        const SGX = 1 << 15;
        const RMP = 1 << 31;
    }
}

pub fn read_cr3() -> u64 {
  213cf0:	50                   	push   %rax
    let cr3_val: u64;
    unsafe {
        asm!(
  213cf1:	0f 20 d8             	mov    %cr3,%rax
  213cf4:	48 89 04 24          	mov    %rax,(%rsp)
            options(nomem, nostack, preserves_flags)
        );
    }

    cr3_val
}
  213cf8:	48 8b 04 24          	mov    (%rsp),%rax
  213cfc:	59                   	pop    %rcx
  213cfd:	c3                   	retq   
  213cfe:	cc                   	int3   
  213cff:	cc                   	int3   

0000000000213d00 <_ZN9r3_kernel3cpu3mmu22get_page_table_address17h99c814258e74bc8aE>:

pub fn get_page_table_address() -> PhysicalAddress {
  213d00:	48 83 ec 18          	sub    $0x18,%rsp
    let cr3_val = read_cr3();
  213d04:	e8 e7 ff ff ff       	callq  213cf0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>
  213d09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213d0e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213d13:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    PhysicalAddress::from_u64(cr3_val & CR3_PHY_ADDR_MASK)
  213d18:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
  213d1f:	ff 0f 00 
  213d22:	48 21 c7             	and    %rax,%rdi
  213d25:	e8 a6 23 01 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  213d2a:	48 89 04 24          	mov    %rax,(%rsp)
  213d2e:	48 8b 04 24          	mov    (%rsp),%rax
}
  213d32:	48 83 c4 18          	add    $0x18,%rsp
  213d36:	c3                   	retq   
  213d37:	cc                   	int3   
  213d38:	cc                   	int3   
  213d39:	cc                   	int3   
  213d3a:	cc                   	int3   
  213d3b:	cc                   	int3   
  213d3c:	cc                   	int3   
  213d3d:	cc                   	int3   
  213d3e:	cc                   	int3   
  213d3f:	cc                   	int3   

0000000000213d40 <_ZN9r3_kernel3cpu3mmu9write_cr317he315686a68ce45f2E>:
pub fn get_page_table_flags() -> u16 {
    let cr3_val = read_cr3();
    (cr3_val & 0xfff) as u16
}

pub fn write_cr3(value: u64) {
  213d40:	50                   	push   %rax
  213d41:	48 89 3c 24          	mov    %rdi,(%rsp)
    unsafe {
        asm!(
  213d45:	0f 22 df             	mov    %rdi,%cr3
            "mov cr3, {}",
            in(reg) value,
            options(nostack, preserves_flags)
        );
    }
}
  213d48:	58                   	pop    %rax
  213d49:	c3                   	retq   
  213d4a:	cc                   	int3   
  213d4b:	cc                   	int3   
  213d4c:	cc                   	int3   
  213d4d:	cc                   	int3   
  213d4e:	cc                   	int3   
  213d4f:	cc                   	int3   

0000000000213d50 <_ZN9r3_kernel3cpu3mmu8read_cr217hb14237c00b02fb42E>:

pub fn read_cr2() -> u64 {
  213d50:	50                   	push   %rax
    let cr2_val: u64;
    unsafe {
        asm!(
  213d51:	0f 20 d0             	mov    %cr2,%rax
  213d54:	48 89 04 24          	mov    %rax,(%rsp)
            options(nostack, nomem, preserves_flags)
        )
    }

    cr2_val
}
  213d58:	48 8b 04 24          	mov    (%rsp),%rax
  213d5c:	59                   	pop    %rcx
  213d5d:	c3                   	retq   
  213d5e:	cc                   	int3   
  213d5f:	cc                   	int3   

0000000000213d60 <_ZN9r3_kernel3cpu3mmu12reload_flush17h48fccea8084e3d3cE>:

pub fn reload_flush() {
  213d60:	48 83 ec 18          	sub    $0x18,%rsp
    // reloading the CR3 register will cause TLB to flush automatically.
    let cr3_val = read_cr3();
  213d64:	e8 87 ff ff ff       	callq  213cf0 <_ZN9r3_kernel3cpu3mmu8read_cr317hee7379ee5d134159E>
  213d69:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  213d6e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  213d73:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    write_cr3(cr3_val);
  213d78:	e8 c3 ff ff ff       	callq  213d40 <_ZN9r3_kernel3cpu3mmu9write_cr317he315686a68ce45f2E>
}
  213d7d:	48 83 c4 18          	add    $0x18,%rsp
  213d81:	c3                   	retq   
  213d82:	cc                   	int3   
  213d83:	cc                   	int3   
  213d84:	cc                   	int3   
  213d85:	cc                   	int3   
  213d86:	cc                   	int3   
  213d87:	cc                   	int3   
  213d88:	cc                   	int3   
  213d89:	cc                   	int3   
  213d8a:	cc                   	int3   
  213d8b:	cc                   	int3   
  213d8c:	cc                   	int3   
  213d8d:	cc                   	int3   
  213d8e:	cc                   	int3   
  213d8f:	cc                   	int3   

0000000000213d90 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  213d90:	48 81 ec e8 01 00 00 	sub    $0x1e8,%rsp
  213d97:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  213d9c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  213da1:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  213da6:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  213dad:	00 
                let mut first = true;
  213dae:	c6 44 24 4d 01       	movb   $0x1,0x4d(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  213db3:	e8 08 09 00 00       	callq  2146c0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E>
  213db8:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  213dbc:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  213dc0:	a8 01                	test   $0x1,%al
  213dc2:	75 15                	jne    213dd9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x49>
  213dc4:	eb 00                	jmp    213dc6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36>
  213dc6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213dcb:	e8 30 09 00 00       	callq  214700 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE>
  213dd0:	88 44 24 37          	mov    %al,0x37(%rsp)
  213dd4:	e9 ba 00 00 00       	jmpq   213e93 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x103>
                        if !first {
  213dd9:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  213ddd:	34 ff                	xor    $0xff,%al
  213ddf:	a8 01                	test   $0x1,%al
  213de1:	75 21                	jne    213e04 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x74>
  213de3:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  213de8:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  213ded:	48 8d 35 79 ce fe ff 	lea    -0x13187(%rip),%rsi        # 200c6d <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x3>
  213df4:	ba 14 00 00 00       	mov    $0x14,%edx
  213df9:	e8 22 19 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213dfe:	88 44 24 36          	mov    %al,0x36(%rsp)
  213e02:	eb 5a                	jmp    213e5e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xce>
  213e04:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  213e09:	48 8d 35 5a ce fe ff 	lea    -0x131a6(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  213e10:	ba 03 00 00 00       	mov    $0x3,%edx
  213e15:	e8 06 19 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213e1a:	88 44 24 35          	mov    %al,0x35(%rsp)
  213e1e:	8a 44 24 35          	mov    0x35(%rsp),%al
  213e22:	0f b6 f8             	movzbl %al,%edi
  213e25:	83 e7 01             	and    $0x1,%edi
  213e28:	e8 23 76 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  213e2d:	24 01                	and    $0x1,%al
  213e2f:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  213e33:	0f b6 44 24 4e       	movzbl 0x4e(%rsp),%eax
  213e38:	a8 01                	test   $0x1,%al
  213e3a:	74 a7                	je     213de3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x53>
  213e3c:	eb 00                	jmp    213e3e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xae>
  213e3e:	eb 02                	jmp    213e42 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xb2>
  213e40:	0f 0b                	ud2    
  213e42:	e8 49 67 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  213e47:	24 01                	and    $0x1,%al
  213e49:	88 44 24 4c          	mov    %al,0x4c(%rsp)
            }
  213e4d:	8a 44 24 4c          	mov    0x4c(%rsp),%al
  213e51:	24 01                	and    $0x1,%al
  213e53:	0f b6 c0             	movzbl %al,%eax
  213e56:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  213e5d:	c3                   	retq   
  213e5e:	8a 44 24 36          	mov    0x36(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  213e62:	0f b6 f8             	movzbl %al,%edi
  213e65:	83 e7 01             	and    $0x1,%edi
  213e68:	e8 e3 75 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  213e6d:	24 01                	and    $0x1,%al
  213e6f:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  213e73:	0f b6 44 24 4f       	movzbl 0x4f(%rsp),%eax
  213e78:	a8 01                	test   $0x1,%al
  213e7a:	0f 84 46 ff ff ff    	je     213dc6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36>
  213e80:	eb 00                	jmp    213e82 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xf2>
  213e82:	eb 02                	jmp    213e86 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xf6>
  213e84:	0f 0b                	ud2    
  213e86:	e8 05 67 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  213e8b:	24 01                	and    $0x1,%al
  213e8d:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  213e91:	eb ba                	jmp    213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  213e93:	8a 44 24 37          	mov    0x37(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  213e97:	a8 01                	test   $0x1,%al
  213e99:	75 15                	jne    213eb0 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x120>
  213e9b:	eb 00                	jmp    213e9d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x10d>
  213e9d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213ea2:	e8 99 08 00 00       	callq  214740 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E>
  213ea7:	88 44 24 34          	mov    %al,0x34(%rsp)
  213eab:	e9 b1 00 00 00       	jmpq   213f61 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1d1>
                        if !first {
  213eb0:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  213eb4:	34 ff                	xor    $0xff,%al
  213eb6:	a8 01                	test   $0x1,%al
  213eb8:	75 21                	jne    213edb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x14b>
  213eba:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  213ebf:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  213ec4:	48 8d 35 b6 cd fe ff 	lea    -0x1324a(%rip),%rsi        # 200c81 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x17>
  213ecb:	ba 0f 00 00 00       	mov    $0xf,%edx
  213ed0:	e8 4b 18 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213ed5:	88 44 24 33          	mov    %al,0x33(%rsp)
  213ed9:	eb 4e                	jmp    213f29 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x199>
  213edb:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  213ee0:	48 8d 35 83 cd fe ff 	lea    -0x1327d(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  213ee7:	ba 03 00 00 00       	mov    $0x3,%edx
  213eec:	e8 2f 18 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213ef1:	88 44 24 32          	mov    %al,0x32(%rsp)
  213ef5:	8a 44 24 32          	mov    0x32(%rsp),%al
  213ef9:	0f b6 f8             	movzbl %al,%edi
  213efc:	83 e7 01             	and    $0x1,%edi
  213eff:	e8 4c 75 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  213f04:	24 01                	and    $0x1,%al
  213f06:	88 44 24 50          	mov    %al,0x50(%rsp)
  213f0a:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  213f0f:	a8 01                	test   $0x1,%al
  213f11:	74 a7                	je     213eba <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x12a>
  213f13:	eb 00                	jmp    213f15 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x185>
  213f15:	eb 02                	jmp    213f19 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x189>
  213f17:	0f 0b                	ud2    
  213f19:	e8 72 66 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  213f1e:	24 01                	and    $0x1,%al
  213f20:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  213f24:	e9 24 ff ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  213f29:	8a 44 24 33          	mov    0x33(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  213f2d:	0f b6 f8             	movzbl %al,%edi
  213f30:	83 e7 01             	and    $0x1,%edi
  213f33:	e8 18 75 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  213f38:	24 01                	and    $0x1,%al
  213f3a:	88 44 24 51          	mov    %al,0x51(%rsp)
  213f3e:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  213f43:	a8 01                	test   $0x1,%al
  213f45:	0f 84 52 ff ff ff    	je     213e9d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x10d>
  213f4b:	eb 00                	jmp    213f4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1bd>
  213f4d:	eb 02                	jmp    213f51 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1c1>
  213f4f:	0f 0b                	ud2    
  213f51:	e8 3a 66 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  213f56:	24 01                	and    $0x1,%al
  213f58:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  213f5c:	e9 ec fe ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  213f61:	8a 44 24 34          	mov    0x34(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  213f65:	a8 01                	test   $0x1,%al
  213f67:	75 15                	jne    213f7e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1ee>
  213f69:	eb 00                	jmp    213f6b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1db>
  213f6b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  213f70:	e8 0b 08 00 00       	callq  214780 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E>
  213f75:	88 44 24 31          	mov    %al,0x31(%rsp)
  213f79:	e9 b1 00 00 00       	jmpq   21402f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x29f>
                        if !first {
  213f7e:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  213f82:	34 ff                	xor    $0xff,%al
  213f84:	a8 01                	test   $0x1,%al
  213f86:	75 21                	jne    213fa9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x219>
  213f88:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  213f8d:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  213f92:	48 8d 35 f7 cc fe ff 	lea    -0x13309(%rip),%rsi        # 200c90 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x26>
  213f99:	ba 09 00 00 00       	mov    $0x9,%edx
  213f9e:	e8 7d 17 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213fa3:	88 44 24 30          	mov    %al,0x30(%rsp)
  213fa7:	eb 4e                	jmp    213ff7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x267>
  213fa9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  213fae:	48 8d 35 b5 cc fe ff 	lea    -0x1334b(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  213fb5:	ba 03 00 00 00       	mov    $0x3,%edx
  213fba:	e8 61 17 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  213fbf:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  213fc3:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  213fc7:	0f b6 f8             	movzbl %al,%edi
  213fca:	83 e7 01             	and    $0x1,%edi
  213fcd:	e8 7e 74 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  213fd2:	24 01                	and    $0x1,%al
  213fd4:	88 44 24 52          	mov    %al,0x52(%rsp)
  213fd8:	0f b6 44 24 52       	movzbl 0x52(%rsp),%eax
  213fdd:	a8 01                	test   $0x1,%al
  213fdf:	74 a7                	je     213f88 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1f8>
  213fe1:	eb 00                	jmp    213fe3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x253>
  213fe3:	eb 02                	jmp    213fe7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x257>
  213fe5:	0f 0b                	ud2    
  213fe7:	e8 a4 65 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  213fec:	24 01                	and    $0x1,%al
  213fee:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  213ff2:	e9 56 fe ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  213ff7:	8a 44 24 30          	mov    0x30(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  213ffb:	0f b6 f8             	movzbl %al,%edi
  213ffe:	83 e7 01             	and    $0x1,%edi
  214001:	e8 4a 74 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  214006:	24 01                	and    $0x1,%al
  214008:	88 44 24 53          	mov    %al,0x53(%rsp)
  21400c:	0f b6 44 24 53       	movzbl 0x53(%rsp),%eax
  214011:	a8 01                	test   $0x1,%al
  214013:	0f 84 52 ff ff ff    	je     213f6b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x1db>
  214019:	eb 00                	jmp    21401b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x28b>
  21401b:	eb 02                	jmp    21401f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x28f>
  21401d:	0f 0b                	ud2    
  21401f:	e8 6c 65 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214024:	24 01                	and    $0x1,%al
  214026:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21402a:	e9 1e fe ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21402f:	8a 44 24 31          	mov    0x31(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  214033:	a8 01                	test   $0x1,%al
  214035:	75 15                	jne    21404c <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2bc>
  214037:	eb 00                	jmp    214039 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2a9>
  214039:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21403e:	e8 7d 07 00 00       	callq  2147c0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E>
  214043:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  214047:	e9 b1 00 00 00       	jmpq   2140fd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x36d>
                        if !first {
  21404c:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  214050:	34 ff                	xor    $0xff,%al
  214052:	a8 01                	test   $0x1,%al
  214054:	75 21                	jne    214077 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2e7>
  214056:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21405b:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  214060:	48 8d 35 32 cc fe ff 	lea    -0x133ce(%rip),%rsi        # 200c99 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x2f>
  214067:	ba 0f 00 00 00       	mov    $0xf,%edx
  21406c:	e8 af 16 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214071:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  214075:	eb 4e                	jmp    2140c5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x335>
  214077:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21407c:	48 8d 35 e7 cb fe ff 	lea    -0x13419(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  214083:	ba 03 00 00 00       	mov    $0x3,%edx
  214088:	e8 93 16 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21408d:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  214091:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  214095:	0f b6 f8             	movzbl %al,%edi
  214098:	83 e7 01             	and    $0x1,%edi
  21409b:	e8 b0 73 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2140a0:	24 01                	and    $0x1,%al
  2140a2:	88 44 24 54          	mov    %al,0x54(%rsp)
  2140a6:	0f b6 44 24 54       	movzbl 0x54(%rsp),%eax
  2140ab:	a8 01                	test   $0x1,%al
  2140ad:	74 a7                	je     214056 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2c6>
  2140af:	eb 00                	jmp    2140b1 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x321>
  2140b1:	eb 02                	jmp    2140b5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x325>
  2140b3:	0f 0b                	ud2    
  2140b5:	e8 d6 64 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2140ba:	24 01                	and    $0x1,%al
  2140bc:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2140c0:	e9 88 fd ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2140c5:	8a 44 24 2d          	mov    0x2d(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2140c9:	0f b6 f8             	movzbl %al,%edi
  2140cc:	83 e7 01             	and    $0x1,%edi
  2140cf:	e8 7c 73 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2140d4:	24 01                	and    $0x1,%al
  2140d6:	88 44 24 55          	mov    %al,0x55(%rsp)
  2140da:	0f b6 44 24 55       	movzbl 0x55(%rsp),%eax
  2140df:	a8 01                	test   $0x1,%al
  2140e1:	0f 84 52 ff ff ff    	je     214039 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x2a9>
  2140e7:	eb 00                	jmp    2140e9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x359>
  2140e9:	eb 02                	jmp    2140ed <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x35d>
  2140eb:	0f 0b                	ud2    
  2140ed:	e8 9e 64 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2140f2:	24 01                	and    $0x1,%al
  2140f4:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2140f8:	e9 50 fd ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2140fd:	8a 44 24 2e          	mov    0x2e(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  214101:	a8 01                	test   $0x1,%al
  214103:	75 15                	jne    21411a <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x38a>
  214105:	eb 00                	jmp    214107 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x377>
  214107:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21410c:	e8 ef 06 00 00       	callq  214800 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E>
  214111:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  214115:	e9 b1 00 00 00       	jmpq   2141cb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x43b>
                        if !first {
  21411a:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  21411e:	34 ff                	xor    $0xff,%al
  214120:	a8 01                	test   $0x1,%al
  214122:	75 21                	jne    214145 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3b5>
  214124:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  214129:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  21412e:	48 8d 35 73 cb fe ff 	lea    -0x1348d(%rip),%rsi        # 200ca8 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x3e>
  214135:	ba 11 00 00 00       	mov    $0x11,%edx
  21413a:	e8 e1 15 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21413f:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  214143:	eb 4e                	jmp    214193 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x403>
  214145:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21414a:	48 8d 35 19 cb fe ff 	lea    -0x134e7(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  214151:	ba 03 00 00 00       	mov    $0x3,%edx
  214156:	e8 c5 15 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21415b:	88 44 24 29          	mov    %al,0x29(%rsp)
  21415f:	8a 44 24 29          	mov    0x29(%rsp),%al
  214163:	0f b6 f8             	movzbl %al,%edi
  214166:	83 e7 01             	and    $0x1,%edi
  214169:	e8 e2 72 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21416e:	24 01                	and    $0x1,%al
  214170:	88 44 24 56          	mov    %al,0x56(%rsp)
  214174:	0f b6 44 24 56       	movzbl 0x56(%rsp),%eax
  214179:	a8 01                	test   $0x1,%al
  21417b:	74 a7                	je     214124 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x394>
  21417d:	eb 00                	jmp    21417f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3ef>
  21417f:	eb 02                	jmp    214183 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x3f3>
  214181:	0f 0b                	ud2    
  214183:	e8 08 64 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214188:	24 01                	and    $0x1,%al
  21418a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21418e:	e9 ba fc ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  214193:	8a 44 24 2a          	mov    0x2a(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  214197:	0f b6 f8             	movzbl %al,%edi
  21419a:	83 e7 01             	and    $0x1,%edi
  21419d:	e8 ae 72 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2141a2:	24 01                	and    $0x1,%al
  2141a4:	88 44 24 57          	mov    %al,0x57(%rsp)
  2141a8:	0f b6 44 24 57       	movzbl 0x57(%rsp),%eax
  2141ad:	a8 01                	test   $0x1,%al
  2141af:	0f 84 52 ff ff ff    	je     214107 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x377>
  2141b5:	eb 00                	jmp    2141b7 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x427>
  2141b7:	eb 02                	jmp    2141bb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x42b>
  2141b9:	0f 0b                	ud2    
  2141bb:	e8 d0 63 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2141c0:	24 01                	and    $0x1,%al
  2141c2:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2141c6:	e9 82 fc ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2141cb:	8a 44 24 2b          	mov    0x2b(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2141cf:	a8 01                	test   $0x1,%al
  2141d1:	75 15                	jne    2141e8 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x458>
  2141d3:	eb 00                	jmp    2141d5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x445>
  2141d5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2141da:	e8 61 06 00 00       	callq  214840 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E>
  2141df:	88 44 24 28          	mov    %al,0x28(%rsp)
  2141e3:	e9 b1 00 00 00       	jmpq   214299 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x509>
                        if !first {
  2141e8:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2141ec:	34 ff                	xor    $0xff,%al
  2141ee:	a8 01                	test   $0x1,%al
  2141f0:	75 21                	jne    214213 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x483>
  2141f2:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  2141f7:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2141fc:	48 8d 35 b6 ca fe ff 	lea    -0x1354a(%rip),%rsi        # 200cb9 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x4f>
  214203:	ba 0e 00 00 00       	mov    $0xe,%edx
  214208:	e8 13 15 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21420d:	88 44 24 27          	mov    %al,0x27(%rsp)
  214211:	eb 4e                	jmp    214261 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4d1>
  214213:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  214218:	48 8d 35 4b ca fe ff 	lea    -0x135b5(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  21421f:	ba 03 00 00 00       	mov    $0x3,%edx
  214224:	e8 f7 14 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214229:	88 44 24 26          	mov    %al,0x26(%rsp)
  21422d:	8a 44 24 26          	mov    0x26(%rsp),%al
  214231:	0f b6 f8             	movzbl %al,%edi
  214234:	83 e7 01             	and    $0x1,%edi
  214237:	e8 14 72 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21423c:	24 01                	and    $0x1,%al
  21423e:	88 44 24 58          	mov    %al,0x58(%rsp)
  214242:	0f b6 44 24 58       	movzbl 0x58(%rsp),%eax
  214247:	a8 01                	test   $0x1,%al
  214249:	74 a7                	je     2141f2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x462>
  21424b:	eb 00                	jmp    21424d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4bd>
  21424d:	eb 02                	jmp    214251 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4c1>
  21424f:	0f 0b                	ud2    
  214251:	e8 3a 63 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214256:	24 01                	and    $0x1,%al
  214258:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21425c:	e9 ec fb ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  214261:	8a 44 24 27          	mov    0x27(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  214265:	0f b6 f8             	movzbl %al,%edi
  214268:	83 e7 01             	and    $0x1,%edi
  21426b:	e8 e0 71 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  214270:	24 01                	and    $0x1,%al
  214272:	88 44 24 59          	mov    %al,0x59(%rsp)
  214276:	0f b6 44 24 59       	movzbl 0x59(%rsp),%eax
  21427b:	a8 01                	test   $0x1,%al
  21427d:	0f 84 52 ff ff ff    	je     2141d5 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x445>
  214283:	eb 00                	jmp    214285 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4f5>
  214285:	eb 02                	jmp    214289 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x4f9>
  214287:	0f 0b                	ud2    
  214289:	e8 02 63 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21428e:	24 01                	and    $0x1,%al
  214290:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214294:	e9 b4 fb ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  214299:	8a 44 24 28          	mov    0x28(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  21429d:	a8 01                	test   $0x1,%al
  21429f:	75 15                	jne    2142b6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x526>
  2142a1:	eb 00                	jmp    2142a3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x513>
  2142a3:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2142a8:	e8 d3 05 00 00       	callq  214880 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E>
  2142ad:	88 44 24 25          	mov    %al,0x25(%rsp)
  2142b1:	e9 b1 00 00 00       	jmpq   214367 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5d7>
                        if !first {
  2142b6:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  2142ba:	34 ff                	xor    $0xff,%al
  2142bc:	a8 01                	test   $0x1,%al
  2142be:	75 21                	jne    2142e1 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x551>
  2142c0:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  2142c5:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2142ca:	48 8d 35 f6 c9 fe ff 	lea    -0x1360a(%rip),%rsi        # 200cc7 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x5d>
  2142d1:	ba 0c 00 00 00       	mov    $0xc,%edx
  2142d6:	e8 45 14 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2142db:	88 44 24 24          	mov    %al,0x24(%rsp)
  2142df:	eb 4e                	jmp    21432f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x59f>
  2142e1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2142e6:	48 8d 35 7d c9 fe ff 	lea    -0x13683(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2142ed:	ba 03 00 00 00       	mov    $0x3,%edx
  2142f2:	e8 29 14 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2142f7:	88 44 24 23          	mov    %al,0x23(%rsp)
  2142fb:	8a 44 24 23          	mov    0x23(%rsp),%al
  2142ff:	0f b6 f8             	movzbl %al,%edi
  214302:	83 e7 01             	and    $0x1,%edi
  214305:	e8 46 71 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21430a:	24 01                	and    $0x1,%al
  21430c:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  214310:	0f b6 44 24 5a       	movzbl 0x5a(%rsp),%eax
  214315:	a8 01                	test   $0x1,%al
  214317:	74 a7                	je     2142c0 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x530>
  214319:	eb 00                	jmp    21431b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x58b>
  21431b:	eb 02                	jmp    21431f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x58f>
  21431d:	0f 0b                	ud2    
  21431f:	e8 6c 62 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214324:	24 01                	and    $0x1,%al
  214326:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21432a:	e9 1e fb ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21432f:	8a 44 24 24          	mov    0x24(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  214333:	0f b6 f8             	movzbl %al,%edi
  214336:	83 e7 01             	and    $0x1,%edi
  214339:	e8 12 71 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21433e:	24 01                	and    $0x1,%al
  214340:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  214344:	0f b6 44 24 5b       	movzbl 0x5b(%rsp),%eax
  214349:	a8 01                	test   $0x1,%al
  21434b:	0f 84 52 ff ff ff    	je     2142a3 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x513>
  214351:	eb 00                	jmp    214353 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5c3>
  214353:	eb 02                	jmp    214357 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5c7>
  214355:	0f 0b                	ud2    
  214357:	e8 34 62 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21435c:	24 01                	and    $0x1,%al
  21435e:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214362:	e9 e6 fa ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  214367:	8a 44 24 25          	mov    0x25(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  21436b:	a8 01                	test   $0x1,%al
  21436d:	75 15                	jne    214384 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5f4>
  21436f:	eb 00                	jmp    214371 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5e1>
  214371:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  214376:	e8 55 05 00 00       	callq  2148d0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E>
  21437b:	88 44 24 22          	mov    %al,0x22(%rsp)
  21437f:	e9 b1 00 00 00       	jmpq   214435 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6a5>
                        if !first {
  214384:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  214388:	34 ff                	xor    $0xff,%al
  21438a:	a8 01                	test   $0x1,%al
  21438c:	75 21                	jne    2143af <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x61f>
  21438e:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  214393:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  214398:	48 8d 35 34 c9 fe ff 	lea    -0x136cc(%rip),%rsi        # 200cd3 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x69>
  21439f:	ba 03 00 00 00       	mov    $0x3,%edx
  2143a4:	e8 77 13 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2143a9:	88 44 24 21          	mov    %al,0x21(%rsp)
  2143ad:	eb 4e                	jmp    2143fd <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x66d>
  2143af:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  2143b4:	48 8d 35 af c8 fe ff 	lea    -0x13751(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  2143bb:	ba 03 00 00 00       	mov    $0x3,%edx
  2143c0:	e8 5b 13 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2143c5:	88 44 24 20          	mov    %al,0x20(%rsp)
  2143c9:	8a 44 24 20          	mov    0x20(%rsp),%al
  2143cd:	0f b6 f8             	movzbl %al,%edi
  2143d0:	83 e7 01             	and    $0x1,%edi
  2143d3:	e8 78 70 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2143d8:	24 01                	and    $0x1,%al
  2143da:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  2143de:	0f b6 44 24 5c       	movzbl 0x5c(%rsp),%eax
  2143e3:	a8 01                	test   $0x1,%al
  2143e5:	74 a7                	je     21438e <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5fe>
  2143e7:	eb 00                	jmp    2143e9 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x659>
  2143e9:	eb 02                	jmp    2143ed <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x65d>
  2143eb:	0f 0b                	ud2    
  2143ed:	e8 9e 61 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2143f2:	24 01                	and    $0x1,%al
  2143f4:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2143f8:	e9 50 fa ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2143fd:	8a 44 24 21          	mov    0x21(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  214401:	0f b6 f8             	movzbl %al,%edi
  214404:	83 e7 01             	and    $0x1,%edi
  214407:	e8 44 70 ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21440c:	24 01                	and    $0x1,%al
  21440e:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  214412:	0f b6 44 24 5d       	movzbl 0x5d(%rsp),%eax
  214417:	a8 01                	test   $0x1,%al
  214419:	0f 84 52 ff ff ff    	je     214371 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x5e1>
  21441f:	eb 00                	jmp    214421 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x691>
  214421:	eb 02                	jmp    214425 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x695>
  214423:	0f 0b                	ud2    
  214425:	e8 66 61 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  21442a:	24 01                	and    $0x1,%al
  21442c:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214430:	e9 18 fa ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  214435:	8a 44 24 22          	mov    0x22(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  214439:	a8 01                	test   $0x1,%al
  21443b:	75 1e                	jne    21445b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6cb>
  21443d:	eb 00                	jmp    21443f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6af>
  21443f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  214444:	48 8b 00             	mov    (%rax),%rax
  214447:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21444c:	e8 4f 02 00 00       	callq  2146a0 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes3all17h682a3871c1948bd0E>
  214451:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  214456:	e9 b1 00 00 00       	jmpq   21450c <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x77c>
                        if !first {
  21445b:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  21445f:	34 ff                	xor    $0xff,%al
  214461:	a8 01                	test   $0x1,%al
  214463:	75 21                	jne    214486 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6f6>
  214465:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        first = false;
  21446a:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  21446f:	48 8d 35 60 c8 fe ff 	lea    -0x137a0(%rip),%rsi        # 200cd6 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x6c>
  214476:	ba 03 00 00 00       	mov    $0x3,%edx
  21447b:	e8 a0 12 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214480:	88 44 24 17          	mov    %al,0x17(%rsp)
  214484:	eb 4e                	jmp    2144d4 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x744>
  214486:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                            f.write_str(" | ")?;
  21448b:	48 8d 35 d8 c7 fe ff 	lea    -0x13828(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  214492:	ba 03 00 00 00       	mov    $0x3,%edx
  214497:	e8 84 12 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21449c:	88 44 24 16          	mov    %al,0x16(%rsp)
  2144a0:	8a 44 24 16          	mov    0x16(%rsp),%al
  2144a4:	0f b6 f8             	movzbl %al,%edi
  2144a7:	83 e7 01             	and    $0x1,%edi
  2144aa:	e8 a1 6f ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2144af:	24 01                	and    $0x1,%al
  2144b1:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  2144b5:	0f b6 44 24 5e       	movzbl 0x5e(%rsp),%eax
  2144ba:	a8 01                	test   $0x1,%al
  2144bc:	74 a7                	je     214465 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6d5>
  2144be:	eb 00                	jmp    2144c0 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x730>
  2144c0:	eb 02                	jmp    2144c4 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x734>
  2144c2:	0f 0b                	ud2    
  2144c4:	e8 c7 60 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2144c9:	24 01                	and    $0x1,%al
  2144cb:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2144cf:	e9 79 f9 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2144d4:	8a 44 24 17          	mov    0x17(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2144d8:	0f b6 f8             	movzbl %al,%edi
  2144db:	83 e7 01             	and    $0x1,%edi
  2144de:	e8 6d 6f ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2144e3:	24 01                	and    $0x1,%al
  2144e5:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  2144e9:	0f b6 44 24 5f       	movzbl 0x5f(%rsp),%eax
  2144ee:	a8 01                	test   $0x1,%al
  2144f0:	0f 84 49 ff ff ff    	je     21443f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x6af>
  2144f6:	eb 00                	jmp    2144f8 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x768>
  2144f8:	eb 02                	jmp    2144fc <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x76c>
  2144fa:	0f 0b                	ud2    
  2144fc:	e8 8f 60 ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214501:	24 01                	and    $0x1,%al
  214503:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214507:	e9 41 f9 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
                let extra_bits = self.bits & !Self::all().bits();
  21450c:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  214511:	e8 9a 01 00 00       	callq  2146b0 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes4bits17h07bfc0a325134ecdE>
  214516:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21451b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  214520:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  214525:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  214529:	48 21 c8             	and    %rcx,%rax
  21452c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
                if extra_bits != 0 {
  214531:	48 83 7c 24 60 00    	cmpq   $0x0,0x60(%rsp)
  214537:	75 10                	jne    214549 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7b9>
                if first {
  214539:	f6 44 24 4d 01       	testb  $0x1,0x4d(%rsp)
  21453e:	0f 85 09 01 00 00    	jne    21464d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8bd>
  214544:	e9 fa 00 00 00       	jmpq   214643 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8b3>
                    if !first {
  214549:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  21454d:	34 ff                	xor    $0xff,%al
  21454f:	a8 01                	test   $0x1,%al
  214551:	75 21                	jne    214574 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7e4>
  214553:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    first = false;
  214558:	c6 44 24 4d 00       	movb   $0x0,0x4d(%rsp)
                    f.write_str("0x")?;
  21455d:	48 8d 35 75 c7 fe ff 	lea    -0x1388b(%rip),%rsi        # 200cd9 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x6f>
  214564:	ba 02 00 00 00       	mov    $0x2,%edx
  214569:	e8 b2 11 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21456e:	88 44 24 07          	mov    %al,0x7(%rsp)
  214572:	eb 4e                	jmp    2145c2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x832>
  214574:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        f.write_str(" | ")?;
  214579:	48 8d 35 ea c6 fe ff 	lea    -0x13916(%rip),%rsi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  214580:	ba 03 00 00 00       	mov    $0x3,%edx
  214585:	e8 96 11 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  21458a:	88 44 24 06          	mov    %al,0x6(%rsp)
  21458e:	8a 44 24 06          	mov    0x6(%rsp),%al
  214592:	0f b6 f8             	movzbl %al,%edi
  214595:	83 e7 01             	and    $0x1,%edi
  214598:	e8 b3 6e ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21459d:	24 01                	and    $0x1,%al
  21459f:	88 44 24 74          	mov    %al,0x74(%rsp)
  2145a3:	0f b6 44 24 74       	movzbl 0x74(%rsp),%eax
  2145a8:	a8 01                	test   $0x1,%al
  2145aa:	74 a7                	je     214553 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7c3>
  2145ac:	eb 00                	jmp    2145ae <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x81e>
  2145ae:	eb 02                	jmp    2145b2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x822>
  2145b0:	0f 0b                	ud2    
  2145b2:	e8 d9 5f ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2145b7:	24 01                	and    $0x1,%al
  2145b9:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  2145bd:	e9 8b f8 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  2145c2:	8a 44 24 07          	mov    0x7(%rsp),%al
                    f.write_str("0x")?;
  2145c6:	0f b6 f8             	movzbl %al,%edi
  2145c9:	83 e7 01             	and    $0x1,%edi
  2145cc:	e8 7f 6e ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2145d1:	24 01                	and    $0x1,%al
  2145d3:	88 44 24 75          	mov    %al,0x75(%rsp)
  2145d7:	0f b6 44 24 75       	movzbl 0x75(%rsp),%eax
  2145dc:	a8 01                	test   $0x1,%al
  2145de:	74 06                	je     2145e6 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x856>
  2145e0:	eb 00                	jmp    2145e2 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x852>
  2145e2:	eb 17                	jmp    2145fb <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x86b>
  2145e4:	0f 0b                	ud2    
  2145e6:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  2145eb:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2145f0:	e8 4b e1 01 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  2145f5:	88 44 24 05          	mov    %al,0x5(%rsp)
  2145f9:	eb 10                	jmp    21460b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x87b>
                    f.write_str("0x")?;
  2145fb:	e8 90 5f ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214600:	24 01                	and    $0x1,%al
  214602:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214606:	e9 42 f8 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21460b:	8a 44 24 05          	mov    0x5(%rsp),%al
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  21460f:	0f b6 f8             	movzbl %al,%edi
  214612:	83 e7 01             	and    $0x1,%edi
  214615:	e8 36 6e ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  21461a:	24 01                	and    $0x1,%al
  21461c:	88 44 24 76          	mov    %al,0x76(%rsp)
  214620:	0f b6 44 24 76       	movzbl 0x76(%rsp),%eax
  214625:	a8 01                	test   $0x1,%al
  214627:	0f 84 0c ff ff ff    	je     214539 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x7a9>
  21462d:	eb 00                	jmp    21462f <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x89f>
  21462f:	eb 02                	jmp    214633 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8a3>
  214631:	0f 0b                	ud2    
  214633:	e8 58 5f ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214638:	24 01                	and    $0x1,%al
  21463a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  21463e:	e9 0a f8 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
                Ok(())
  214643:	c6 44 24 4c 00       	movb   $0x0,0x4c(%rsp)
            }
  214648:	e9 00 f8 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21464d:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    f.write_str("(empty)")?;
  214652:	48 8d 35 82 c6 fe ff 	lea    -0x1397e(%rip),%rsi        # 200cdb <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0x71>
  214659:	ba 07 00 00 00       	mov    $0x7,%edx
  21465e:	e8 bd 10 02 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  214663:	88 44 24 04          	mov    %al,0x4(%rsp)
  214667:	8a 44 24 04          	mov    0x4(%rsp),%al
  21466b:	0f b6 f8             	movzbl %al,%edi
  21466e:	83 e7 01             	and    $0x1,%edi
  214671:	e8 da 6d ff ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  214676:	24 01                	and    $0x1,%al
  214678:	88 44 24 77          	mov    %al,0x77(%rsp)
  21467c:	0f b6 44 24 77       	movzbl 0x77(%rsp),%eax
  214681:	a8 01                	test   $0x1,%al
  214683:	74 be                	je     214643 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8b3>
  214685:	eb 00                	jmp    214687 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8f7>
  214687:	eb 02                	jmp    21468b <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0x8fb>
  214689:	0f 0b                	ud2    
  21468b:	e8 00 5f ff ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  214690:	24 01                	and    $0x1,%al
  214692:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  214696:	e9 b2 f7 ff ff       	jmpq   213e4d <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E+0xbd>
  21469b:	cc                   	int3   
  21469c:	cc                   	int3   
  21469d:	cc                   	int3   
  21469e:	cc                   	int3   
  21469f:	cc                   	int3   

00000000002146a0 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes3all17h682a3871c1948bd0E>:
            pub const fn all() -> Self {
  2146a0:	50                   	push   %rax
                __impl_all_bitflags! {
  2146a1:	b8 7f 80 00 80       	mov    $0x8000807f,%eax
  2146a6:	48 89 04 24          	mov    %rax,(%rsp)
            }
  2146aa:	48 8b 04 24          	mov    (%rsp),%rax
  2146ae:	59                   	pop    %rcx
  2146af:	c3                   	retq   

00000000002146b0 <_ZN9r3_kernel3cpu3mmu23PageFaultExceptionTypes4bits17h07bfc0a325134ecdE>:
            pub const fn bits(&self) -> $T {
  2146b0:	50                   	push   %rax
  2146b1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  2146b5:	48 8b 07             	mov    (%rdi),%rax
            }
  2146b8:	59                   	pop    %rcx
  2146b9:	c3                   	retq   
  2146ba:	cc                   	int3   
  2146bb:	cc                   	int3   
  2146bc:	cc                   	int3   
  2146bd:	cc                   	int3   
  2146be:	cc                   	int3   
  2146bf:	cc                   	int3   

00000000002146c0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E>:
                            fn $Flag(&self) -> bool {
  2146c0:	48 83 ec 18          	sub    $0x18,%rsp
  2146c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2146c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
bitflags! {
  2146cd:	31 c0                	xor    %eax,%eax
  2146cf:	a8 01                	test   $0x1,%al
  2146d1:	75 1a                	jne    2146ed <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E+0x2d>
  2146d3:	48 8b 04 24          	mov    (%rsp),%rax
  2146d7:	48 8b 00             	mov    (%rax),%rax
  2146da:	48 83 e0 01          	and    $0x1,%rax
  2146de:	48 83 f8 01          	cmp    $0x1,%rax
  2146e2:	0f 94 c0             	sete   %al
  2146e5:	24 01                	and    $0x1,%al
  2146e7:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2146eb:	eb 05                	jmp    2146f2 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$20PROTECTION_VIOLATION17h88fbff175359d948E+0x32>
  2146ed:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    (
        $(#[$filtered:meta])*
        fn $($item:tt)*
    ) => {
        $(#[$filtered])*
        fn $($item)*
  2146f2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2146f6:	24 01                	and    $0x1,%al
  2146f8:	0f b6 c0             	movzbl %al,%eax
  2146fb:	48 83 c4 18          	add    $0x18,%rsp
  2146ff:	c3                   	retq   

0000000000214700 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE>:
                            fn $Flag(&self) -> bool {
  214700:	48 83 ec 18          	sub    $0x18,%rsp
  214704:	48 89 3c 24          	mov    %rdi,(%rsp)
  214708:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21470d:	31 c0                	xor    %eax,%eax
  21470f:	a8 01                	test   $0x1,%al
  214711:	75 1a                	jne    21472d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE+0x2d>
  214713:	48 8b 04 24          	mov    (%rsp),%rax
  214717:	48 8b 00             	mov    (%rax),%rax
  21471a:	48 83 e0 02          	and    $0x2,%rax
  21471e:	48 83 f8 02          	cmp    $0x2,%rax
  214722:	0f 94 c0             	sete   %al
  214725:	24 01                	and    $0x1,%al
  214727:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21472b:	eb 05                	jmp    214732 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15CAUSED_BY_WRITE17h843f050d4f16124aE+0x32>
  21472d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  214732:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214736:	24 01                	and    $0x1,%al
  214738:	0f b6 c0             	movzbl %al,%eax
  21473b:	48 83 c4 18          	add    $0x18,%rsp
  21473f:	c3                   	retq   

0000000000214740 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E>:
                            fn $Flag(&self) -> bool {
  214740:	48 83 ec 18          	sub    $0x18,%rsp
  214744:	48 89 3c 24          	mov    %rdi,(%rsp)
  214748:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21474d:	31 c0                	xor    %eax,%eax
  21474f:	a8 01                	test   $0x1,%al
  214751:	75 1a                	jne    21476d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E+0x2d>
  214753:	48 8b 04 24          	mov    (%rsp),%rax
  214757:	48 8b 00             	mov    (%rax),%rax
  21475a:	48 83 e0 04          	and    $0x4,%rax
  21475e:	48 83 f8 04          	cmp    $0x4,%rax
  214762:	0f 94 c0             	sete   %al
  214765:	24 01                	and    $0x1,%al
  214767:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21476b:	eb 05                	jmp    214772 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9USER_MODE17h0c05226a76f7db10E+0x32>
  21476d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  214772:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214776:	24 01                	and    $0x1,%al
  214778:	0f b6 c0             	movzbl %al,%eax
  21477b:	48 83 c4 18          	add    $0x18,%rsp
  21477f:	c3                   	retq   

0000000000214780 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E>:
                            fn $Flag(&self) -> bool {
  214780:	48 83 ec 18          	sub    $0x18,%rsp
  214784:	48 89 3c 24          	mov    %rdi,(%rsp)
  214788:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21478d:	31 c0                	xor    %eax,%eax
  21478f:	a8 01                	test   $0x1,%al
  214791:	75 1a                	jne    2147ad <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E+0x2d>
  214793:	48 8b 04 24          	mov    (%rsp),%rax
  214797:	48 8b 00             	mov    (%rax),%rax
  21479a:	48 83 e0 08          	and    $0x8,%rax
  21479e:	48 83 f8 08          	cmp    $0x8,%rax
  2147a2:	0f 94 c0             	sete   %al
  2147a5:	24 01                	and    $0x1,%al
  2147a7:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2147ab:	eb 05                	jmp    2147b2 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15MALFORMED_TABLE17he174f0bf35af0bd7E+0x32>
  2147ad:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2147b2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2147b6:	24 01                	and    $0x1,%al
  2147b8:	0f b6 c0             	movzbl %al,%eax
  2147bb:	48 83 c4 18          	add    $0x18,%rsp
  2147bf:	c3                   	retq   

00000000002147c0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E>:
                            fn $Flag(&self) -> bool {
  2147c0:	48 83 ec 18          	sub    $0x18,%rsp
  2147c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2147c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2147cd:	31 c0                	xor    %eax,%eax
  2147cf:	a8 01                	test   $0x1,%al
  2147d1:	75 1a                	jne    2147ed <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E+0x2d>
  2147d3:	48 8b 04 24          	mov    (%rsp),%rax
  2147d7:	48 8b 00             	mov    (%rax),%rax
  2147da:	48 83 e0 10          	and    $0x10,%rax
  2147de:	48 83 f8 10          	cmp    $0x10,%rax
  2147e2:	0f 94 c0             	sete   %al
  2147e5:	24 01                	and    $0x1,%al
  2147e7:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2147eb:	eb 05                	jmp    2147f2 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17INSTRUCTION_FETCH17hefca9de2bf887e40E+0x32>
  2147ed:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2147f2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2147f6:	24 01                	and    $0x1,%al
  2147f8:	0f b6 c0             	movzbl %al,%eax
  2147fb:	48 83 c4 18          	add    $0x18,%rsp
  2147ff:	c3                   	retq   

0000000000214800 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E>:
                            fn $Flag(&self) -> bool {
  214800:	48 83 ec 18          	sub    $0x18,%rsp
  214804:	48 89 3c 24          	mov    %rdi,(%rsp)
  214808:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21480d:	31 c0                	xor    %eax,%eax
  21480f:	a8 01                	test   $0x1,%al
  214811:	75 1a                	jne    21482d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E+0x2d>
  214813:	48 8b 04 24          	mov    (%rsp),%rax
  214817:	48 8b 00             	mov    (%rax),%rax
  21481a:	48 83 e0 20          	and    $0x20,%rax
  21481e:	48 83 f8 20          	cmp    $0x20,%rax
  214822:	0f 94 c0             	sete   %al
  214825:	24 01                	and    $0x1,%al
  214827:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21482b:	eb 05                	jmp    214832 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14PROTECTION_KEY17h60f1807bde082408E+0x32>
  21482d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  214832:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214836:	24 01                	and    $0x1,%al
  214838:	0f b6 c0             	movzbl %al,%eax
  21483b:	48 83 c4 18          	add    $0x18,%rsp
  21483f:	c3                   	retq   

0000000000214840 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E>:
                            fn $Flag(&self) -> bool {
  214840:	48 83 ec 18          	sub    $0x18,%rsp
  214844:	48 89 3c 24          	mov    %rdi,(%rsp)
  214848:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21484d:	31 c0                	xor    %eax,%eax
  21484f:	a8 01                	test   $0x1,%al
  214851:	75 1a                	jne    21486d <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E+0x2d>
  214853:	48 8b 04 24          	mov    (%rsp),%rax
  214857:	48 8b 00             	mov    (%rax),%rax
  21485a:	48 83 e0 40          	and    $0x40,%rax
  21485e:	48 83 f8 40          	cmp    $0x40,%rax
  214862:	0f 94 c0             	sete   %al
  214865:	24 01                	and    $0x1,%al
  214867:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21486b:	eb 05                	jmp    214872 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12SHADOW_STACK17h840e714af82b4d50E+0x32>
  21486d:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  214872:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214876:	24 01                	and    $0x1,%al
  214878:	0f b6 c0             	movzbl %al,%eax
  21487b:	48 83 c4 18          	add    $0x18,%rsp
  21487f:	c3                   	retq   

0000000000214880 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E>:
                            fn $Flag(&self) -> bool {
  214880:	48 83 ec 18          	sub    $0x18,%rsp
  214884:	48 89 3c 24          	mov    %rdi,(%rsp)
  214888:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21488d:	31 c0                	xor    %eax,%eax
  21488f:	a8 01                	test   $0x1,%al
  214891:	75 1e                	jne    2148b1 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E+0x31>
  214893:	48 8b 04 24          	mov    (%rsp),%rax
  214897:	48 8b 00             	mov    (%rax),%rax
  21489a:	48 25 00 80 00 00    	and    $0x8000,%rax
  2148a0:	48 3d 00 80 00 00    	cmp    $0x8000,%rax
  2148a6:	0f 94 c0             	sete   %al
  2148a9:	24 01                	and    $0x1,%al
  2148ab:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2148af:	eb 05                	jmp    2148b6 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SGX17h3497ec4a1ca628a6E+0x36>
  2148b1:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2148b6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2148ba:	24 01                	and    $0x1,%al
  2148bc:	0f b6 c0             	movzbl %al,%eax
  2148bf:	48 83 c4 18          	add    $0x18,%rsp
  2148c3:	c3                   	retq   
  2148c4:	cc                   	int3   
  2148c5:	cc                   	int3   
  2148c6:	cc                   	int3   
  2148c7:	cc                   	int3   
  2148c8:	cc                   	int3   
  2148c9:	cc                   	int3   
  2148ca:	cc                   	int3   
  2148cb:	cc                   	int3   
  2148cc:	cc                   	int3   
  2148cd:	cc                   	int3   
  2148ce:	cc                   	int3   
  2148cf:	cc                   	int3   

00000000002148d0 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E>:
                            fn $Flag(&self) -> bool {
  2148d0:	48 83 ec 18          	sub    $0x18,%rsp
  2148d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2148d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2148dd:	31 c0                	xor    %eax,%eax
  2148df:	a8 01                	test   $0x1,%al
  2148e1:	75 24                	jne    214907 <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E+0x37>
  2148e3:	48 8b 0c 24          	mov    (%rsp),%rcx
  2148e7:	48 b8 00 00 00 80 00 	movabs $0x80000000,%rax
  2148ee:	00 00 00 
  2148f1:	48 23 01             	and    (%rcx),%rax
  2148f4:	b9 00 00 00 80       	mov    $0x80000000,%ecx
  2148f9:	48 39 c8             	cmp    %rcx,%rax
  2148fc:	0f 94 c0             	sete   %al
  2148ff:	24 01                	and    $0x1,%al
  214901:	88 44 24 0f          	mov    %al,0xf(%rsp)
  214905:	eb 05                	jmp    21490c <_ZN162_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3RMP17hff626648f9ae5786E+0x3c>
  214907:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  21490c:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214910:	24 01                	and    $0x1,%al
  214912:	0f b6 c0             	movzbl %al,%eax
  214915:	48 83 c4 18          	add    $0x18,%rsp
  214919:	c3                   	retq   
  21491a:	cc                   	int3   
  21491b:	cc                   	int3   
  21491c:	cc                   	int3   
  21491d:	cc                   	int3   
  21491e:	cc                   	int3   
  21491f:	cc                   	int3   

0000000000214920 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE>:
pub mod font;
pub mod framebuffer;

use framebuffer::{setup_framebuffer, Framebuffer, Pixel};

pub fn init() {
  214920:	48 83 ec 48          	sub    $0x48,%rsp
    setup_framebuffer();
  214924:	e8 b7 0c 00 00       	callq  2155e0 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E>

    let fb_locked_opt = Framebuffer::get_buffer_lock();
  214929:	e8 e2 05 00 00       	callq  214f10 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>
  21492e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214933:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  214938:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    if fb_locked_opt.is_some() {
  21493d:	e8 fe be ff ff       	callq  210840 <_ZN4core6option15Option$LT$T$GT$7is_some17h8e910f64660b8a42E>
  214942:	88 44 24 17          	mov    %al,0x17(%rsp)
  214946:	8a 44 24 17          	mov    0x17(%rsp),%al
  21494a:	a8 01                	test   $0x1,%al
  21494c:	75 07                	jne    214955 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x35>
  21494e:	eb 00                	jmp    214950 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x30>
        };

        let mut fb_lock = fb_locked_opt.as_ref().unwrap().lock();
        Framebuffer::fill(&mut fb_lock, black);
    }
}
  214950:	48 83 c4 48          	add    $0x48,%rsp
  214954:	c3                   	retq   
  214955:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        let black = Pixel {
  21495a:	c6 44 24 20 00       	movb   $0x0,0x20(%rsp)
  21495f:	c6 44 24 21 00       	movb   $0x0,0x21(%rsp)
  214964:	c6 44 24 22 00       	movb   $0x0,0x22(%rsp)
  214969:	c6 44 24 23 00       	movb   $0x0,0x23(%rsp)
        let mut fb_lock = fb_locked_opt.as_ref().unwrap().lock();
  21496e:	e8 ad b1 ff ff       	callq  20fb20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  214973:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214978:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21497d:	48 8d 35 6c 37 02 00 	lea    0x2376c(%rip),%rsi        # 2380f0 <memcmp+0x1b40>
  214984:	e8 67 ba ff ff       	callq  2103f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  214989:	48 89 04 24          	mov    %rax,(%rsp)
  21498d:	48 8b 3c 24          	mov    (%rsp),%rdi
  214991:	e8 ba 78 01 00       	callq  22c250 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  214996:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21499b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        Framebuffer::fill(&mut fb_lock, black);
  2149a0:	8b 44 24 20          	mov    0x20(%rsp),%eax
  2149a4:	89 44 24 38          	mov    %eax,0x38(%rsp)
  2149a8:	8b 74 24 38          	mov    0x38(%rsp),%esi
  2149ac:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2149b1:	e8 2a 09 00 00       	callq  2152e0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer4fill17h1dc0516c32df6ad3E>
    }
  2149b6:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2149bb:	e8 90 6e ff ff       	callq  20b850 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  2149c0:	eb 8e                	jmp    214950 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE+0x30>
  2149c2:	cc                   	int3   
  2149c3:	cc                   	int3   
  2149c4:	cc                   	int3   
  2149c5:	cc                   	int3   
  2149c6:	cc                   	int3   
  2149c7:	cc                   	int3   
  2149c8:	cc                   	int3   
  2149c9:	cc                   	int3   
  2149ca:	cc                   	int3   
  2149cb:	cc                   	int3   
  2149cc:	cc                   	int3   
  2149cd:	cc                   	int3   
  2149ce:	cc                   	int3   
  2149cf:	cc                   	int3   

00000000002149d0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE>:
    pub fn new() -> Option<Self> {
  2149d0:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  2149d7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2149dc:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  2149e1:	e8 1a 36 00 00       	callq  218000 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  2149e6:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2149eb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if fb_slice_opt.is_none() {
  2149f0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2149f5:	e8 c6 bb ff ff       	callq  2105c0 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  2149fa:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2149fe:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  214a02:	a8 01                	test   $0x1,%al
  214a04:	75 14                	jne    214a1a <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x4a>
  214a06:	eb 00                	jmp    214a08 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x38>
        let fb_info_opt = BootProtocol::get_framebuffer_info();
  214a08:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  214a0f:	00 
  214a10:	e8 3b 35 00 00       	callq  217f50 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>
  214a15:	e9 d9 00 00 00       	jmpq   214af3 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x123>
            log::error!(
  214a1a:	48 c7 44 24 40 01 00 	movq   $0x1,0x40(%rsp)
  214a21:	00 00 
  214a23:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  214a28:	48 8d 35 09 bc fe ff 	lea    -0x143f7(%rip),%rsi        # 200638 <str.0+0x118>
  214a2f:	e8 bc d0 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  214a34:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  214a38:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  214a3c:	a8 01                	test   $0x1,%al
  214a3e:	75 09                	jne    214a49 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x79>
  214a40:	eb 00                	jmp    214a42 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x72>
  214a42:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  214a47:	eb 4e                	jmp    214a97 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xc7>
  214a49:	c6 84 24 9f 01 00 00 	movb   $0x0,0x19f(%rsp)
  214a50:	00 
  214a51:	48 8b 3d b8 66 02 00 	mov    0x266b8(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214a58:	0f b6 b4 24 9f 01 00 	movzbl 0x19f(%rsp),%esi
  214a5f:	00 
  214a60:	e8 5b 42 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  214a65:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  214a6c:	00 
  214a6d:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  214a74:	00 
  214a75:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  214a7a:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  214a7f:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  214a84:	e8 67 d0 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  214a89:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  214a8d:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  214a91:	24 01                	and    $0x1,%al
  214a93:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  214a97:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  214a9c:	75 0e                	jne    214aac <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xdc>
  214a9e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            return None;
  214aa3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  214aaa:	eb 3a                	jmp    214ae6 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
            log::error!(
  214aac:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214ab1:	48 8d 35 50 36 02 00 	lea    0x23650(%rip),%rsi        # 238108 <memcmp+0x1b58>
  214ab8:	ba 01 00 00 00       	mov    $0x1,%edx
  214abd:	48 8d 0d a4 c2 fe ff 	lea    -0x13d5c(%rip),%rcx        # 200d68 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0xfe>
  214ac4:	31 c0                	xor    %eax,%eax
  214ac6:	41 89 c0             	mov    %eax,%r8d
  214ac9:	e8 f2 17 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  214ace:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  214ad3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  214ad8:	48 8d 15 39 36 02 00 	lea    0x23639(%rip),%rdx        # 238118 <memcmp+0x1b68>
  214adf:	e8 0c bb 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  214ae4:	eb b8                	jmp    214a9e <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0xce>
  214ae6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    }
  214aeb:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  214af2:	c3                   	retq   
        if fb_info_opt.is_none() {
  214af3:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  214afa:	00 
  214afb:	e8 50 bb ff ff       	callq  210650 <_ZN4core6option15Option$LT$T$GT$7is_none17hb3d124720ea273cbE>
  214b00:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  214b04:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  214b08:	a8 01                	test   $0x1,%al
  214b0a:	75 3d                	jne    214b49 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x179>
  214b0c:	eb 00                	jmp    214b0e <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x13e>
        let fb_info = fb_info_opt.unwrap();
  214b0e:	48 8d bc 24 30 01 00 	lea    0x130(%rsp),%rdi
  214b15:	00 
  214b16:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  214b1d:	00 
  214b1e:	ba 30 00 00 00       	mov    $0x30,%edx
  214b23:	e8 38 1a 02 00       	callq  236560 <memcpy>
  214b28:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  214b2f:	00 
  214b30:	48 8d b4 24 30 01 00 	lea    0x130(%rsp),%rsi
  214b37:	00 
  214b38:	48 8d 15 59 36 02 00 	lea    0x23659(%rip),%rdx        # 238198 <memcmp+0x1be8>
  214b3f:	e8 3c b6 ff ff       	callq  210180 <_ZN4core6option15Option$LT$T$GT$6unwrap17h6be4d40645204978E>
  214b44:	e9 f0 00 00 00       	jmpq   214c39 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x269>
            log::error!(
  214b49:	48 c7 84 24 b8 00 00 	movq   $0x1,0xb8(%rsp)
  214b50:	00 01 00 00 00 
  214b55:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  214b5c:	00 
  214b5d:	48 8d 35 d4 ba fe ff 	lea    -0x1452c(%rip),%rsi        # 200638 <str.0+0x118>
  214b64:	e8 87 cf ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  214b69:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  214b6d:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  214b71:	a8 01                	test   $0x1,%al
  214b73:	75 0c                	jne    214b81 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x1b1>
  214b75:	eb 00                	jmp    214b77 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x1a7>
  214b77:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  214b7e:	00 
  214b7f:	eb 5a                	jmp    214bdb <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x20b>
  214b81:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  214b88:	00 
  214b89:	48 8b 3d 80 65 02 00 	mov    0x26580(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  214b90:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  214b97:	00 
  214b98:	e8 23 41 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  214b9d:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  214ba4:	00 
  214ba5:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  214bac:	00 
  214bad:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  214bb4:	00 
  214bb5:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  214bbc:	00 
  214bbd:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  214bc4:	00 
  214bc5:	e8 26 cf ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  214bca:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  214bce:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  214bd2:	24 01                	and    $0x1,%al
  214bd4:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  214bdb:	f6 84 24 c7 00 00 00 	testb  $0x1,0xc7(%rsp)
  214be2:	01 
  214be3:	75 11                	jne    214bf6 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x226>
  214be5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            return None;
  214bea:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  214bf1:	e9 f0 fe ff ff       	jmpq   214ae6 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
            log::error!(
  214bf6:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  214bfd:	00 
  214bfe:	48 8d 35 4b 35 02 00 	lea    0x2354b(%rip),%rsi        # 238150 <memcmp+0x1ba0>
  214c05:	ba 01 00 00 00       	mov    $0x1,%edx
  214c0a:	48 8d 0d 57 c1 fe ff 	lea    -0x13ea9(%rip),%rcx        # 200d68 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0xfe>
  214c11:	31 c0                	xor    %eax,%eax
  214c13:	41 89 c0             	mov    %eax,%r8d
  214c16:	e8 a5 16 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  214c1b:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  214c22:	00 
  214c23:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  214c2a:	00 
  214c2b:	48 8d 15 2e 35 02 00 	lea    0x2352e(%rip),%rdx        # 238160 <memcmp+0x1bb0>
  214c32:	e8 b9 b9 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  214c37:	eb ac                	jmp    214be5 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x215>
            buffer: fb_slice_opt.unwrap(),
  214c39:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  214c3e:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  214c43:	48 8d 15 66 35 02 00 	lea    0x23566(%rip),%rdx        # 2381b0 <memcmp+0x1c00>
  214c4a:	e8 f1 b7 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  214c4f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214c54:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214c59:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  214c5e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  214c63:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            width: fb_info.horizontal_resolution,
  214c68:	48 8b 94 24 08 01 00 	mov    0x108(%rsp),%rdx
  214c6f:	00 
            height: fb_info.vertical_resolution,
  214c70:	48 8b 8c 24 10 01 00 	mov    0x110(%rsp),%rcx
  214c77:	00 
            bytes_per_pixel: fb_info.bytes_per_pixel,
  214c78:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  214c7f:	00 
        Some(FramebufferMemory {
  214c80:	4c 89 84 24 60 01 00 	mov    %r8,0x160(%rsp)
  214c87:	00 
  214c88:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
  214c8f:	00 
  214c90:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  214c97:	00 
  214c98:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  214c9f:	00 
  214ca0:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  214ca7:	00 
  214ca8:	48 8d b4 24 60 01 00 	lea    0x160(%rsp),%rsi
  214caf:	00 
  214cb0:	ba 28 00 00 00       	mov    $0x28,%edx
  214cb5:	e8 a6 18 02 00       	callq  236560 <memcpy>
    }
  214cba:	e9 27 fe ff ff       	jmpq   214ae6 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE+0x116>
  214cbf:	cc                   	int3   

0000000000214cc0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE>:
    pub fn get_slice_bounded(start: usize, end: usize) -> Option<&'static mut [u8]> {
  214cc0:	48 83 ec 78          	sub    $0x78,%rsp
  214cc4:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  214cc9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  214cce:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  214cd3:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  214cd8:	e8 23 33 00 00       	callq  218000 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  214cdd:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  214ce2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if fb_slice_opt.is_none() {
  214ce7:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  214cec:	e8 cf b8 ff ff       	callq  2105c0 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  214cf1:	88 44 24 27          	mov    %al,0x27(%rsp)
  214cf5:	8a 44 24 27          	mov    0x27(%rsp),%al
  214cf9:	a8 01                	test   $0x1,%al
  214cfb:	75 24                	jne    214d21 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x61>
  214cfd:	eb 00                	jmp    214cff <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x3f>
        Some(&mut fb_slice_opt.unwrap()[start..end])
  214cff:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  214d04:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  214d09:	48 8d 15 b8 34 02 00 	lea    0x234b8(%rip),%rdx        # 2381c8 <memcmp+0x1c18>
  214d10:	e8 2b b7 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  214d15:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214d1a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  214d1f:	eb 18                	jmp    214d39 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x79>
            return None;
  214d21:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  214d28:	00 00 
    }
  214d2a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  214d2f:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  214d34:	48 83 c4 78          	add    $0x78,%rsp
  214d38:	c3                   	retq   
  214d39:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  214d3e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214d43:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  214d48:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
        Some(&mut fb_slice_opt.unwrap()[start..end])
  214d4d:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  214d52:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  214d57:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  214d5c:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  214d61:	4c 8d 05 78 34 02 00 	lea    0x23478(%rip),%r8        # 2381e0 <memcmp+0x1c30>
  214d68:	e8 e3 35 01 00       	callq  228350 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h3575024572685ae9E>
  214d6d:	48 89 04 24          	mov    %rax,(%rsp)
  214d71:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  214d76:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  214d7b:	48 8b 0c 24          	mov    (%rsp),%rcx
  214d7f:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  214d84:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  214d89:	eb 9f                	jmp    214d2a <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE+0x6a>
  214d8b:	cc                   	int3   
  214d8c:	cc                   	int3   
  214d8d:	cc                   	int3   
  214d8e:	cc                   	int3   
  214d8f:	cc                   	int3   

0000000000214d90 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>:
    pub fn get_slice_from(start: usize) -> Option<&'static mut [u8]> {
  214d90:	48 83 ec 68          	sub    $0x68,%rsp
  214d94:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  214d99:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let fb_slice_opt = BootProtocol::get_framebuffer_slice();
  214d9e:	e8 5d 32 00 00       	callq  218000 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  214da3:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  214da8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if fb_slice_opt.is_none() {
  214dad:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  214db2:	e8 09 b8 ff ff       	callq  2105c0 <_ZN4core6option15Option$LT$T$GT$7is_none17h773eaab39585a9edE>
  214db7:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  214dbb:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  214dbf:	a8 01                	test   $0x1,%al
  214dc1:	75 24                	jne    214de7 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x57>
  214dc3:	eb 00                	jmp    214dc5 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x35>
        Some(&mut fb_slice_opt.unwrap()[start..])
  214dc5:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  214dca:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  214dcf:	48 8d 15 22 34 02 00 	lea    0x23422(%rip),%rdx        # 2381f8 <memcmp+0x1c48>
  214dd6:	e8 65 b6 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  214ddb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  214de0:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  214de5:	eb 18                	jmp    214dff <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x6f>
            return None;
  214de7:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  214dee:	00 00 
    }
  214df0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  214df5:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  214dfa:	48 83 c4 68          	add    $0x68,%rsp
  214dfe:	c3                   	retq   
  214dff:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  214e04:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  214e09:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        Some(&mut fb_slice_opt.unwrap()[start..])
  214e0e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  214e13:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  214e18:	48 8d 0d f1 33 02 00 	lea    0x233f1(%rip),%rcx        # 238210 <memcmp+0x1c60>
  214e1f:	e8 cc 35 01 00       	callq  2283f0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h9f6d6ff661f6775eE>
  214e24:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214e29:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  214e2e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214e33:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  214e38:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  214e3d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  214e42:	eb ac                	jmp    214df0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E+0x60>
  214e44:	cc                   	int3   
  214e45:	cc                   	int3   
  214e46:	cc                   	int3   
  214e47:	cc                   	int3   
  214e48:	cc                   	int3   
  214e49:	cc                   	int3   
  214e4a:	cc                   	int3   
  214e4b:	cc                   	int3   
  214e4c:	cc                   	int3   
  214e4d:	cc                   	int3   
  214e4e:	cc                   	int3   
  214e4f:	cc                   	int3   

0000000000214e50 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE>:
fn init_framebuffer() -> Option<Mutex<FramebufferMemory>> {
  214e50:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  214e57:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  214e5c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    let fb_opt = FramebufferMemory::new();
  214e61:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  214e66:	e8 65 fb ff ff       	callq  2149d0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory3new17hc66e3b694f51fa8cE>
    if fb_opt.is_none() {
  214e6b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  214e70:	e8 ab b7 ff ff       	callq  210620 <_ZN4core6option15Option$LT$T$GT$7is_none17ha4bca2175564180aE>
  214e75:	88 44 24 0f          	mov    %al,0xf(%rsp)
  214e79:	8a 44 24 0f          	mov    0xf(%rsp),%al
  214e7d:	a8 01                	test   $0x1,%al
  214e7f:	75 34                	jne    214eb5 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x65>
  214e81:	eb 00                	jmp    214e83 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x33>
    Some(Mutex::new(fb_opt.unwrap()))
  214e83:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  214e8a:	00 
  214e8b:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  214e90:	ba 28 00 00 00       	mov    $0x28,%edx
  214e95:	e8 c6 16 02 00       	callq  236560 <memcpy>
  214e9a:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  214e9f:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  214ea6:	00 
  214ea7:	48 8d 15 7a 33 02 00 	lea    0x2337a(%rip),%rdx        # 238228 <memcmp+0x1c78>
  214eae:	e8 7d b4 ff ff       	callq  210330 <_ZN4core6option15Option$LT$T$GT$6unwrap17ha380c9b1f55870ceE>
  214eb3:	eb 19                	jmp    214ece <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x7e>
  214eb5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        return None;
  214eba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  214ec1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  214ec6:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  214ecd:	c3                   	retq   
    Some(Mutex::new(fb_opt.unwrap()))
  214ece:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  214ed3:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  214ed8:	e8 63 6d 01 00       	callq  22bc40 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h65fa35b167151302E>
  214edd:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  214ee2:	48 83 c7 08          	add    $0x8,%rdi
  214ee6:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  214eeb:	ba 30 00 00 00       	mov    $0x30,%edx
  214ef0:	e8 6b 16 02 00       	callq  236560 <memcpy>
  214ef5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214efa:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  214f01:	eb be                	jmp    214ec1 <_ZN9r3_kernel7drivers7display11framebuffer16init_framebuffer17hf996f2543f8ec3aaE+0x71>
  214f03:	cc                   	int3   
  214f04:	cc                   	int3   
  214f05:	cc                   	int3   
  214f06:	cc                   	int3   
  214f07:	cc                   	int3   
  214f08:	cc                   	int3   
  214f09:	cc                   	int3   
  214f0a:	cc                   	int3   
  214f0b:	cc                   	int3   
  214f0c:	cc                   	int3   
  214f0d:	cc                   	int3   
  214f0e:	cc                   	int3   
  214f0f:	cc                   	int3   

0000000000214f10 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>:
/// Set of control functions used for writing pixels to frame buffer
pub struct Framebuffer;

impl Framebuffer {
    #[inline]
    pub fn get_buffer_lock() -> &'static Option<LockedFramebuffer> {
  214f10:	50                   	push   %rax
        &FRAMEBUFFER
  214f11:	48 8d 3d f3 bf fe ff 	lea    -0x1400d(%rip),%rdi        # 200f0b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  214f18:	e8 d3 0a 00 00       	callq  2159f0 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  214f1d:	48 89 04 24          	mov    %rax,(%rsp)
  214f21:	48 8b 04 24          	mov    (%rsp),%rax
    }
  214f25:	59                   	pop    %rcx
  214f26:	c3                   	retq   
  214f27:	cc                   	int3   
  214f28:	cc                   	int3   
  214f29:	cc                   	int3   
  214f2a:	cc                   	int3   
  214f2b:	cc                   	int3   
  214f2c:	cc                   	int3   
  214f2d:	cc                   	int3   
  214f2e:	cc                   	int3   
  214f2f:	cc                   	int3   

0000000000214f30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>:

    #[inline]
    pub fn index_in_bounds(fb: &FramebufferMemory, index: &FramebufferIndex) -> bool {
  214f30:	48 83 ec 28          	sub    $0x28,%rsp
  214f34:	48 89 34 24          	mov    %rsi,(%rsp)
  214f38:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  214f3d:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  214f42:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        index.x < fb.width && index.y < fb.height
  214f47:	48 8b 06             	mov    (%rsi),%rax
  214f4a:	48 3b 47 10          	cmp    0x10(%rdi),%rax
  214f4e:	72 07                	jb     214f57 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E+0x27>
  214f50:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  214f55:	eb 1a                	jmp    214f71 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E+0x41>
  214f57:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  214f5c:	48 8b 04 24          	mov    (%rsp),%rax
  214f60:	48 8b 40 08          	mov    0x8(%rax),%rax
  214f64:	48 3b 41 18          	cmp    0x18(%rcx),%rax
  214f68:	0f 92 c0             	setb   %al
  214f6b:	24 01                	and    $0x1,%al
  214f6d:	88 44 24 17          	mov    %al,0x17(%rsp)
    }
  214f71:	8a 44 24 17          	mov    0x17(%rsp),%al
  214f75:	24 01                	and    $0x1,%al
  214f77:	0f b6 c0             	movzbl %al,%eax
  214f7a:	48 83 c4 28          	add    $0x28,%rsp
  214f7e:	c3                   	retq   
  214f7f:	cc                   	int3   

0000000000214f80 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E>:

    #[inline]
    fn index_to_offset(fb: &FramebufferMemory, index: FramebufferIndex) -> Option<usize> {
  214f80:	48 83 ec 48          	sub    $0x48,%rsp
  214f84:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  214f89:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  214f8e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        if Framebuffer::index_in_bounds(&fb, &index) {
  214f93:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  214f98:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  214f9d:	e8 8e ff ff ff       	callq  214f30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>
  214fa2:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  214fa6:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  214faa:	a8 01                	test   $0x1,%al
  214fac:	75 10                	jne    214fbe <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x3e>
  214fae:	eb 00                	jmp    214fb0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x30>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
        } else {
            None
  214fb0:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  214fb7:	00 00 
        if Framebuffer::index_in_bounds(&fb, &index) {
  214fb9:	e9 af 00 00 00       	jmpq   21506d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xed>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
  214fbe:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  214fc3:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  214fc8:	48 f7 61 10          	mulq   0x10(%rcx)
  214fcc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  214fd1:	0f 90 c0             	seto   %al
  214fd4:	a8 01                	test   $0x1,%al
  214fd6:	75 18                	jne    214ff0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x70>
  214fd8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  214fdd:	48 03 44 24 28       	add    0x28(%rsp),%rax
  214fe2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  214fe7:	0f 92 c0             	setb   %al
  214fea:	a8 01                	test   $0x1,%al
  214fec:	75 37                	jne    215025 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xa5>
  214fee:	eb 1a                	jmp    21500a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0x8a>
  214ff0:	48 8d 3d 29 be fe ff 	lea    -0x141d7(%rip),%rdi        # 200e20 <str.0>
  214ff7:	48 8d 15 42 32 02 00 	lea    0x23242(%rip),%rdx        # 238240 <memcmp+0x1c90>
  214ffe:	be 21 00 00 00       	mov    $0x21,%esi
  215003:	e8 58 e4 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215008:	0f 0b                	ud2    
  21500a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21500f:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  215014:	48 f7 61 20          	mulq   0x20(%rcx)
  215018:	48 89 04 24          	mov    %rax,(%rsp)
  21501c:	0f 90 c0             	seto   %al
  21501f:	a8 01                	test   $0x1,%al
  215021:	75 30                	jne    215053 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xd3>
  215023:	eb 1a                	jmp    21503f <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xbf>
  215025:	48 8d 3d 24 be fe ff 	lea    -0x141dc(%rip),%rdi        # 200e50 <str.1>
  21502c:	48 8d 15 25 32 02 00 	lea    0x23225(%rip),%rdx        # 238258 <memcmp+0x1ca8>
  215033:	be 1c 00 00 00       	mov    $0x1c,%esi
  215038:	e8 23 e4 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21503d:	0f 0b                	ud2    
  21503f:	48 8b 04 24          	mov    (%rsp),%rax
  215043:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  215048:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  21504f:	00 00 
        if Framebuffer::index_in_bounds(&fb, &index) {
  215051:	eb 1a                	jmp    21506d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E+0xed>
            Some((index.y * fb.width + index.x) * fb.bytes_per_pixel)
  215053:	48 8d 3d c6 bd fe ff 	lea    -0x1423a(%rip),%rdi        # 200e20 <str.0>
  21505a:	48 8d 15 f7 31 02 00 	lea    0x231f7(%rip),%rdx        # 238258 <memcmp+0x1ca8>
  215061:	be 21 00 00 00       	mov    $0x21,%esi
  215066:	e8 f5 e3 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21506b:	0f 0b                	ud2    
        }
    }
  21506d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  215072:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  215077:	48 83 c4 48          	add    $0x48,%rsp
  21507b:	c3                   	retq   
  21507c:	cc                   	int3   
  21507d:	cc                   	int3   
  21507e:	cc                   	int3   
  21507f:	cc                   	int3   

0000000000215080 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE>:

    #[inline]
    pub fn set_pixel(fb: &mut FramebufferMemory, pixel: Pixel, index: FramebufferIndex) {
  215080:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  215087:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  21508c:	48 89 d0             	mov    %rdx,%rax
  21508f:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  215094:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  215099:	89 f0                	mov    %esi,%eax
  21509b:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  2150a0:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  2150a5:	89 44 24 7c          	mov    %eax,0x7c(%rsp)
  2150a9:	8b 44 24 7c          	mov    0x7c(%rsp),%eax
  2150ad:	89 44 24 78          	mov    %eax,0x78(%rsp)
  2150b1:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  2150b8:	00 
  2150b9:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  2150c0:	00 
        if let Some(offset) = Framebuffer::index_to_offset(&fb, index) {
  2150c1:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  2150c6:	e8 b5 fe ff ff       	callq  214f80 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_to_offset17hfe7dd671fdef6a07E>
  2150cb:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2150d2:	00 
  2150d3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2150da:	00 
  2150db:	48 83 bc 24 80 00 00 	cmpq   $0x1,0x80(%rsp)
  2150e2:	00 01 
  2150e4:	75 37                	jne    21511d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x9d>
  2150e6:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2150ed:	00 
  2150ee:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2150f3:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2150fa:	00 
            fb.buffer[offset] = pixel.b;
  2150fb:	8a 4c 24 78          	mov    0x78(%rsp),%cl
  2150ff:	88 4c 24 57          	mov    %cl,0x57(%rsp)
  215103:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  215108:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  21510c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  215111:	48 39 c8             	cmp    %rcx,%rax
  215114:	0f 92 c0             	setb   %al
  215117:	a8 01                	test   $0x1,%al
  215119:	75 0a                	jne    215125 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xa5>
  21511b:	eb 36                	jmp    215153 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xd3>
            fb.buffer[offset + 1] = pixel.g;
            fb.buffer[offset + 2] = pixel.r;
            fb.buffer[offset + 3] = pixel.channel;
        }
    }
  21511d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  215124:	c3                   	retq   
  215125:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21512a:	8a 54 24 57          	mov    0x57(%rsp),%dl
            fb.buffer[offset] = pixel.b;
  21512e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  215133:	48 8b 09             	mov    (%rcx),%rcx
  215136:	88 14 01             	mov    %dl,(%rcx,%rax,1)
            fb.buffer[offset + 1] = pixel.g;
  215139:	8a 4c 24 79          	mov    0x79(%rsp),%cl
  21513d:	88 4c 24 3f          	mov    %cl,0x3f(%rsp)
  215141:	48 83 c0 01          	add    $0x1,%rax
  215145:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21514a:	0f 92 c0             	setb   %al
  21514d:	a8 01                	test   $0x1,%al
  21514f:	75 39                	jne    21518a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x10a>
  215151:	eb 18                	jmp    21516b <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0xeb>
  215153:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  215158:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
            fb.buffer[offset] = pixel.b;
  21515d:	48 8d 15 0c 31 02 00 	lea    0x2310c(%rip),%rdx        # 238270 <memcmp+0x1cc0>
  215164:	e8 47 e3 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  215169:	0f 0b                	ud2    
  21516b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
            fb.buffer[offset + 1] = pixel.g;
  215170:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  215175:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  215179:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21517e:	48 39 c8             	cmp    %rcx,%rax
  215181:	0f 92 c0             	setb   %al
  215184:	a8 01                	test   $0x1,%al
  215186:	75 1c                	jne    2151a4 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x124>
  215188:	eb 4f                	jmp    2151d9 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x159>
  21518a:	48 8d 3d bf bc fe ff 	lea    -0x14341(%rip),%rdi        # 200e50 <str.1>
  215191:	48 8d 15 f0 30 02 00 	lea    0x230f0(%rip),%rdx        # 238288 <memcmp+0x1cd8>
  215198:	be 1c 00 00 00       	mov    $0x1c,%esi
  21519d:	e8 be e2 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2151a2:	0f 0b                	ud2    
  2151a4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2151a9:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  2151ae:	40 8a 74 24 3f       	mov    0x3f(%rsp),%sil
  2151b3:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  2151b8:	48 8b 09             	mov    (%rcx),%rcx
  2151bb:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            fb.buffer[offset + 2] = pixel.r;
  2151bf:	8a 4c 24 7a          	mov    0x7a(%rsp),%cl
  2151c3:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  2151c7:	48 83 c0 02          	add    $0x2,%rax
  2151cb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2151d0:	0f 92 c0             	setb   %al
  2151d3:	a8 01                	test   $0x1,%al
  2151d5:	75 39                	jne    215210 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x190>
  2151d7:	eb 18                	jmp    2151f1 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x171>
  2151d9:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  2151de:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            fb.buffer[offset + 1] = pixel.g;
  2151e3:	48 8d 15 b6 30 02 00 	lea    0x230b6(%rip),%rdx        # 2382a0 <memcmp+0x1cf0>
  2151ea:	e8 c1 e2 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2151ef:	0f 0b                	ud2    
  2151f1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            fb.buffer[offset + 2] = pixel.r;
  2151f6:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  2151fb:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  2151ff:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  215204:	48 39 c8             	cmp    %rcx,%rax
  215207:	0f 92 c0             	setb   %al
  21520a:	a8 01                	test   $0x1,%al
  21520c:	75 1c                	jne    21522a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1aa>
  21520e:	eb 4f                	jmp    21525f <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1df>
  215210:	48 8d 3d 39 bc fe ff 	lea    -0x143c7(%rip),%rdi        # 200e50 <str.1>
  215217:	48 8d 15 9a 30 02 00 	lea    0x2309a(%rip),%rdx        # 2382b8 <memcmp+0x1d08>
  21521e:	be 1c 00 00 00       	mov    $0x1c,%esi
  215223:	e8 38 e2 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215228:	0f 0b                	ud2    
  21522a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21522f:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  215234:	40 8a 74 24 27       	mov    0x27(%rsp),%sil
  215239:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21523e:	48 8b 09             	mov    (%rcx),%rcx
  215241:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            fb.buffer[offset + 3] = pixel.channel;
  215245:	8a 4c 24 7b          	mov    0x7b(%rsp),%cl
  215249:	88 4c 24 0f          	mov    %cl,0xf(%rsp)
  21524d:	48 83 c0 03          	add    $0x3,%rax
  215251:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215256:	0f 92 c0             	setb   %al
  215259:	a8 01                	test   $0x1,%al
  21525b:	75 38                	jne    215295 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x215>
  21525d:	eb 18                	jmp    215277 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x1f7>
  21525f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  215264:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            fb.buffer[offset + 2] = pixel.r;
  215269:	48 8d 15 60 30 02 00 	lea    0x23060(%rip),%rdx        # 2382d0 <memcmp+0x1d20>
  215270:	e8 3b e2 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  215275:	0f 0b                	ud2    
  215277:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            fb.buffer[offset + 3] = pixel.channel;
  21527c:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  215281:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  215285:	48 89 0c 24          	mov    %rcx,(%rsp)
  215289:	48 39 c8             	cmp    %rcx,%rax
  21528c:	0f 92 c0             	setb   %al
  21528f:	a8 01                	test   $0x1,%al
  215291:	75 1c                	jne    2152af <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x22f>
  215293:	eb 33                	jmp    2152c8 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x248>
  215295:	48 8d 3d b4 bb fe ff 	lea    -0x1444c(%rip),%rdi        # 200e50 <str.1>
  21529c:	48 8d 15 45 30 02 00 	lea    0x23045(%rip),%rdx        # 2382e8 <memcmp+0x1d38>
  2152a3:	be 1c 00 00 00       	mov    $0x1c,%esi
  2152a8:	e8 b3 e1 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2152ad:	0f 0b                	ud2    
  2152af:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2152b4:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  2152b8:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2152bd:	48 8b 00             	mov    (%rax),%rax
  2152c0:	88 14 08             	mov    %dl,(%rax,%rcx,1)
        if let Some(offset) = Framebuffer::index_to_offset(&fb, index) {
  2152c3:	e9 55 fe ff ff       	jmpq   21511d <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE+0x9d>
  2152c8:	48 8b 34 24          	mov    (%rsp),%rsi
  2152cc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            fb.buffer[offset + 3] = pixel.channel;
  2152d1:	48 8d 15 28 30 02 00 	lea    0x23028(%rip),%rdx        # 238300 <memcmp+0x1d50>
  2152d8:	e8 d3 e1 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2152dd:	0f 0b                	ud2    
  2152df:	cc                   	int3   

00000000002152e0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer4fill17h1dc0516c32df6ad3E>:
        }

        None
    }

    pub fn fill(fb: &mut MutexGuard<FramebufferMemory>, pixel: Pixel) {
  2152e0:	48 83 ec 48          	sub    $0x48,%rsp
  2152e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2152e9:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
  2152ed:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  2152f1:	89 44 24 28          	mov    %eax,0x28(%rsp)
  2152f5:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        let bps = fb.bytes_per_pixel;
  2152fa:	e8 f1 71 01 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  2152ff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215304:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  215309:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21530e:	48 8b 40 20          	mov    0x20(%rax),%rax
  215312:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  215317:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        Framebuffer::fill_region(fb.buffer, pixel, bps);
  21531c:	e8 6f 72 01 00       	callq  22c590 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>
  215321:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215326:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21532b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215330:	48 8b 38             	mov    (%rax),%rdi
  215333:	48 8b 70 08          	mov    0x8(%rax),%rsi
  215337:	8b 44 24 28          	mov    0x28(%rsp),%eax
  21533b:	89 44 24 30          	mov    %eax,0x30(%rsp)
  21533f:	8b 54 24 30          	mov    0x30(%rsp),%edx
  215343:	e8 08 00 00 00       	callq  215350 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>
    }
  215348:	48 83 c4 48          	add    $0x48,%rsp
  21534c:	c3                   	retq   
  21534d:	cc                   	int3   
  21534e:	cc                   	int3   
  21534f:	cc                   	int3   

0000000000215350 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>:

    pub fn fill_region(fb_region_slice: &mut [u8], pixel: Pixel, bps: usize) {
  215350:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  215357:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21535c:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  215361:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  215366:	89 54 24 64          	mov    %edx,0x64(%rsp)
  21536a:	8b 44 24 64          	mov    0x64(%rsp),%eax
  21536e:	89 44 24 60          	mov    %eax,0x60(%rsp)
  215372:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  215377:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  21537c:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  215383:	00 
        if fb_region_slice.len() % bps != 0 {
  215384:	48 83 f9 00          	cmp    $0x0,%rcx
  215388:	0f 94 c0             	sete   %al
  21538b:	a8 01                	test   $0x1,%al
  21538d:	75 17                	jne    2153a6 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x56>
  21538f:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  215394:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  215399:	31 d2                	xor    %edx,%edx
  21539b:	48 f7 f1             	div    %rcx
  21539e:	48 83 fa 00          	cmp    $0x0,%rdx
  2153a2:	74 1c                	je     2153c0 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x70>
  2153a4:	eb 25                	jmp    2153cb <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x7b>
  2153a6:	48 8d 3d c3 ba fe ff 	lea    -0x1453d(%rip),%rdi        # 200e70 <str.2>
  2153ad:	48 8d 15 64 2f 02 00 	lea    0x22f64(%rip),%rdx        # 238318 <memcmp+0x1d68>
  2153b4:	be 39 00 00 00       	mov    $0x39,%esi
  2153b9:	e8 a2 e0 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2153be:	0f 0b                	ud2    
            return;
        }

        let mut offset = 0;
  2153c0:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  2153c7:	00 00 
        while offset < fb_region_slice.len() {
  2153c9:	eb 08                	jmp    2153d3 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x83>
            fb_region_slice[offset + 1] = pixel.g;
            fb_region_slice[offset + 2] = pixel.r;
            fb_region_slice[offset + 3] = pixel.channel;
            offset += bps;
        }
    }
  2153cb:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2153d2:	c3                   	retq   
  2153d3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        while offset < fb_region_slice.len() {
  2153d8:	48 39 44 24 68       	cmp    %rax,0x68(%rsp)
  2153dd:	73 ec                	jae    2153cb <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x7b>
  2153df:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset] = pixel.b;
  2153e4:	8a 44 24 60          	mov    0x60(%rsp),%al
  2153e8:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2153ec:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2153f1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2153f6:	48 39 c8             	cmp    %rcx,%rax
  2153f9:	0f 92 c0             	setb   %al
  2153fc:	a8 01                	test   $0x1,%al
  2153fe:	75 02                	jne    215402 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xb2>
  215400:	eb 30                	jmp    215432 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xe2>
  215402:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  215407:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21540c:	8a 54 24 3f          	mov    0x3f(%rsp),%dl
  215410:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 1] = pixel.g;
  215413:	8a 44 24 61          	mov    0x61(%rsp),%al
  215417:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21541b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  215420:	48 83 c0 01          	add    $0x1,%rax
  215424:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215429:	0f 92 c0             	setb   %al
  21542c:	a8 01                	test   $0x1,%al
  21542e:	75 30                	jne    215460 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x110>
  215430:	eb 18                	jmp    21544a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0xfa>
  215432:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  215437:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            fb_region_slice[offset] = pixel.b;
  21543c:	48 8d 15 ed 2e 02 00 	lea    0x22eed(%rip),%rdx        # 238330 <memcmp+0x1d80>
  215443:	e8 68 e0 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  215448:	0f 0b                	ud2    
  21544a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21544f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 1] = pixel.g;
  215454:	48 39 c8             	cmp    %rcx,%rax
  215457:	0f 92 c0             	setb   %al
  21545a:	a8 01                	test   $0x1,%al
  21545c:	75 1c                	jne    21547a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x12a>
  21545e:	eb 4a                	jmp    2154aa <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x15a>
  215460:	48 8d 3d e9 b9 fe ff 	lea    -0x14617(%rip),%rdi        # 200e50 <str.1>
  215467:	48 8d 15 da 2e 02 00 	lea    0x22eda(%rip),%rdx        # 238348 <memcmp+0x1d98>
  21546e:	be 1c 00 00 00       	mov    $0x1c,%esi
  215473:	e8 e8 df 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215478:	0f 0b                	ud2    
  21547a:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21547f:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  215484:	8a 54 24 2f          	mov    0x2f(%rsp),%dl
  215488:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 2] = pixel.r;
  21548b:	8a 44 24 62          	mov    0x62(%rsp),%al
  21548f:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  215493:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  215498:	48 83 c0 02          	add    $0x2,%rax
  21549c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2154a1:	0f 92 c0             	setb   %al
  2154a4:	a8 01                	test   $0x1,%al
  2154a6:	75 30                	jne    2154d8 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x188>
  2154a8:	eb 18                	jmp    2154c2 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x172>
  2154aa:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2154af:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            fb_region_slice[offset + 1] = pixel.g;
  2154b4:	48 8d 15 a5 2e 02 00 	lea    0x22ea5(%rip),%rdx        # 238360 <memcmp+0x1db0>
  2154bb:	e8 f0 df 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2154c0:	0f 0b                	ud2    
  2154c2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2154c7:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 2] = pixel.r;
  2154cc:	48 39 c8             	cmp    %rcx,%rax
  2154cf:	0f 92 c0             	setb   %al
  2154d2:	a8 01                	test   $0x1,%al
  2154d4:	75 1c                	jne    2154f2 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1a2>
  2154d6:	eb 4a                	jmp    215522 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1d2>
  2154d8:	48 8d 3d 71 b9 fe ff 	lea    -0x1468f(%rip),%rdi        # 200e50 <str.1>
  2154df:	48 8d 15 92 2e 02 00 	lea    0x22e92(%rip),%rdx        # 238378 <memcmp+0x1dc8>
  2154e6:	be 1c 00 00 00       	mov    $0x1c,%esi
  2154eb:	e8 70 df 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2154f0:	0f 0b                	ud2    
  2154f2:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2154f7:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2154fc:	8a 54 24 1f          	mov    0x1f(%rsp),%dl
  215500:	88 14 08             	mov    %dl,(%rax,%rcx,1)
            fb_region_slice[offset + 3] = pixel.channel;
  215503:	8a 44 24 63          	mov    0x63(%rsp),%al
  215507:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21550b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  215510:	48 83 c0 03          	add    $0x3,%rax
  215514:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215519:	0f 92 c0             	setb   %al
  21551c:	a8 01                	test   $0x1,%al
  21551e:	75 30                	jne    215550 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x200>
  215520:	eb 18                	jmp    21553a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x1ea>
  215522:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  215527:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            fb_region_slice[offset + 2] = pixel.r;
  21552c:	48 8d 15 5d 2e 02 00 	lea    0x22e5d(%rip),%rdx        # 238390 <memcmp+0x1de0>
  215533:	e8 78 df 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  215538:	0f 0b                	ud2    
  21553a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21553f:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
            fb_region_slice[offset + 3] = pixel.channel;
  215544:	48 39 c8             	cmp    %rcx,%rax
  215547:	0f 92 c0             	setb   %al
  21554a:	a8 01                	test   $0x1,%al
  21554c:	75 1c                	jne    21556a <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x21a>
  21554e:	eb 44                	jmp    215594 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x244>
  215550:	48 8d 3d f9 b8 fe ff 	lea    -0x14707(%rip),%rdi        # 200e50 <str.1>
  215557:	48 8d 15 4a 2e 02 00 	lea    0x22e4a(%rip),%rdx        # 2383a8 <memcmp+0x1df8>
  21555e:	be 1c 00 00 00       	mov    $0x1c,%esi
  215563:	e8 f8 de 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  215568:	0f 0b                	ud2    
  21556a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21556f:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  215574:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  215579:	40 8a 74 24 0f       	mov    0xf(%rsp),%sil
  21557e:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
            offset += bps;
  215582:	48 03 44 24 68       	add    0x68(%rsp),%rax
  215587:	48 89 04 24          	mov    %rax,(%rsp)
  21558b:	0f 92 c0             	setb   %al
  21558e:	a8 01                	test   $0x1,%al
  215590:	75 28                	jne    2155ba <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x26a>
  215592:	eb 18                	jmp    2155ac <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x25c>
  215594:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  215599:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            fb_region_slice[offset + 3] = pixel.channel;
  21559e:	48 8d 15 1b 2e 02 00 	lea    0x22e1b(%rip),%rdx        # 2383c0 <memcmp+0x1e10>
  2155a5:	e8 06 df 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2155aa:	0f 0b                	ud2    
  2155ac:	48 8b 04 24          	mov    (%rsp),%rax
            offset += bps;
  2155b0:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        while offset < fb_region_slice.len() {
  2155b5:	e9 19 fe ff ff       	jmpq   2153d3 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE+0x83>
            offset += bps;
  2155ba:	48 8d 3d 8f b8 fe ff 	lea    -0x14771(%rip),%rdi        # 200e50 <str.1>
  2155c1:	48 8d 15 10 2e 02 00 	lea    0x22e10(%rip),%rdx        # 2383d8 <memcmp+0x1e28>
  2155c8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2155cd:	e8 8e de 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2155d2:	0f 0b                	ud2    
  2155d4:	cc                   	int3   
  2155d5:	cc                   	int3   
  2155d6:	cc                   	int3   
  2155d7:	cc                   	int3   
  2155d8:	cc                   	int3   
  2155d9:	cc                   	int3   
  2155da:	cc                   	int3   
  2155db:	cc                   	int3   
  2155dc:	cc                   	int3   
  2155dd:	cc                   	int3   
  2155de:	cc                   	int3   
  2155df:	cc                   	int3   

00000000002155e0 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E>:
}

/// this method initializes the framebuffer, in other words
/// it dereferences the framebuffer memory region which cases
/// the lazy_static struct to initialize.
pub fn setup_framebuffer() {
  2155e0:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    if FRAMEBUFFER.is_none() {
  2155e7:	48 8d 3d 1d b9 fe ff 	lea    -0x146e3(%rip),%rdi        # 200f0b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  2155ee:	e8 fd 03 00 00       	callq  2159f0 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  2155f3:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2155fa:	00 
  2155fb:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  215602:	00 
  215603:	e8 58 af ff ff       	callq  210560 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>
  215608:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21560f:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  215616:	a8 01                	test   $0x1,%al
  215618:	75 1b                	jne    215635 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x55>
  21561a:	eb 00                	jmp    21561c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
        log::error!("Fraebuffer set-up failed, system display will not work.");
    }

    let fb_ref = FRAMEBUFFER.as_ref().unwrap().lock();
  21561c:	48 8d 3d e8 b8 fe ff 	lea    -0x14718(%rip),%rdi        # 200f0b <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE>
  215623:	e8 c8 03 00 00       	callq  2159f0 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>
  215628:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21562f:	00 
  215630:	e9 f2 00 00 00       	jmpq   215727 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x147>
        log::error!("Fraebuffer set-up failed, system display will not work.");
  215635:	48 c7 84 24 a0 00 00 	movq   $0x1,0xa0(%rsp)
  21563c:	00 01 00 00 00 
  215641:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  215648:	00 
  215649:	48 8d 35 e8 af fe ff 	lea    -0x15018(%rip),%rsi        # 200638 <str.0+0x118>
  215650:	e8 9b c4 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  215655:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  21565c:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  215663:	a8 01                	test   $0x1,%al
  215665:	75 0c                	jne    215673 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x93>
  215667:	eb 00                	jmp    215669 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x89>
  215669:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  215670:	00 
  215671:	eb 60                	jmp    2156d3 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0xf3>
  215673:	c6 84 24 bf 01 00 00 	movb   $0x0,0x1bf(%rsp)
  21567a:	00 
  21567b:	48 8b 3d 8e 5a 02 00 	mov    0x25a8e(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  215682:	0f b6 b4 24 bf 01 00 	movzbl 0x1bf(%rsp),%esi
  215689:	00 
  21568a:	e8 31 36 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21568f:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  215696:	00 
  215697:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  21569e:	00 
  21569f:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2156a6:	00 
  2156a7:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2156ae:	00 
  2156af:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  2156b6:	00 
  2156b7:	e8 34 c4 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2156bc:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  2156c3:	8a 84 24 86 00 00 00 	mov    0x86(%rsp),%al
  2156ca:	24 01                	and    $0x1,%al
  2156cc:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  2156d3:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  2156da:	01 
  2156db:	0f 84 3b ff ff ff    	je     21561c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
  2156e1:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2156e8:	00 
  2156e9:	48 8d 35 00 2d 02 00 	lea    0x22d00(%rip),%rsi        # 2383f0 <memcmp+0x1e40>
  2156f0:	ba 01 00 00 00       	mov    $0x1,%edx
  2156f5:	48 8d 0d 6c b6 fe ff 	lea    -0x14994(%rip),%rcx        # 200d68 <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE+0xfe>
  2156fc:	31 c0                	xor    %eax,%eax
  2156fe:	41 89 c0             	mov    %eax,%r8d
  215701:	e8 ba 0b ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  215706:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  21570d:	00 
  21570e:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  215715:	00 
  215716:	48 8d 15 e3 2c 02 00 	lea    0x22ce3(%rip),%rdx        # 238400 <memcmp+0x1e50>
  21571d:	e8 ce ae 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  215722:	e9 f5 fe ff ff       	jmpq   21561c <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x3c>
  215727:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21572e:	00 
    let fb_ref = FRAMEBUFFER.as_ref().unwrap().lock();
  21572f:	e8 ec a3 ff ff       	callq  20fb20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  215734:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  215739:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  21573e:	48 8d 35 f3 2c 02 00 	lea    0x22cf3(%rip),%rsi        # 238438 <memcmp+0x1e88>
  215745:	e8 a6 ac ff ff       	callq  2103f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  21574a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21574f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  215754:	e8 f7 6a 01 00       	callq  22c250 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  215759:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  215760:	00 
  215761:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  215768:	00 

    log::info!(
  215769:	48 c7 84 24 f8 00 00 	movq   $0x3,0xf8(%rsp)
  215770:	00 03 00 00 00 
  215775:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21577c:	00 
  21577d:	48 8d 35 b4 ae fe ff 	lea    -0x1514c(%rip),%rsi        # 200638 <str.0+0x118>
  215784:	e8 67 c3 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  215789:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  21578d:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  215791:	a8 01                	test   $0x1,%al
  215793:	75 0c                	jne    2157a1 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x1c1>
  215795:	eb 00                	jmp    215797 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x1b7>
  215797:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  21579e:	00 
  21579f:	eb 5a                	jmp    2157fb <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x21b>
  2157a1:	c6 84 24 af 01 00 00 	movb   $0x0,0x1af(%rsp)
  2157a8:	00 
  2157a9:	48 8b 3d 60 59 02 00 	mov    0x25960(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2157b0:	0f b6 b4 24 af 01 00 	movzbl 0x1af(%rsp),%esi
  2157b7:	00 
  2157b8:	e8 03 35 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2157bd:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  2157c4:	00 
  2157c5:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  2157cc:	00 
  2157cd:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  2157d4:	00 
  2157d5:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2157dc:	00 
  2157dd:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  2157e4:	00 
  2157e5:	e8 06 c3 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2157ea:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  2157ee:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  2157f2:	24 01                	and    $0x1,%al
  2157f4:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  2157fb:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  215802:	01 
  215803:	75 12                	jne    215817 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x237>
        "Framebuffer initialized, address={:p}, width={}, height={}.",
        &fb_ref.buffer[0],
        fb_ref.width,
        fb_ref.height
    );
}
  215805:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21580c:	00 
  21580d:	e8 3e 60 ff ff       	callq  20b850 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  215812:	e9 d1 01 00 00       	jmpq   2159e8 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x408>
        &fb_ref.buffer[0],
  215817:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21581e:	00 
  21581f:	e8 cc 6c 01 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  215824:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  215829:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21582e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  215832:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  215837:	31 c0                	xor    %eax,%eax
  215839:	48 39 c8             	cmp    %rcx,%rax
  21583c:	0f 92 c0             	setb   %al
  21583f:	a8 01                	test   $0x1,%al
  215841:	75 02                	jne    215845 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x265>
  215843:	eb 24                	jmp    215869 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x289>
  215845:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21584a:	48 8b 00             	mov    (%rax),%rax
  21584d:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  215854:	00 
        fb_ref.width,
  215855:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21585c:	00 
  21585d:	e8 8e 6c 01 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  215862:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  215867:	eb 17                	jmp    215880 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x2a0>
  215869:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
        &fb_ref.buffer[0],
  21586e:	48 8d 15 1b 2c 02 00 	lea    0x22c1b(%rip),%rdx        # 238490 <memcmp+0x1ee0>
  215875:	31 c0                	xor    %eax,%eax
  215877:	89 c7                	mov    %eax,%edi
  215879:	e8 32 dc 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21587e:	0f 0b                	ud2    
  215880:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        fb_ref.width,
  215885:	48 83 c0 10          	add    $0x10,%rax
  215889:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        fb_ref.height
  21588e:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  215895:	00 
  215896:	e8 55 6c 01 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21589b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2158a0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2158a5:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2158aa:	48 83 c0 18          	add    $0x18,%rax
    log::info!(
  2158ae:	48 8d 94 24 88 01 00 	lea    0x188(%rsp),%rdx
  2158b5:	00 
  2158b6:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  2158bd:	00 
  2158be:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  2158c5:	00 
  2158c6:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2158cd:	00 
  2158ce:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  2158d5:	00 
  2158d6:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  2158dd:	00 
  2158de:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  2158e5:	00 
  2158e6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2158eb:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  2158f2:	00 
  2158f3:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  2158fa:	00 
  2158fb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  215900:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  215907:	00 
  215908:	48 8d 35 61 8d ff ff 	lea    -0x729f(%rip),%rsi        # 20e670 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h3368779d22478805E>
  21590f:	e8 ec 92 ff ff       	callq  20ec00 <_ZN4core3fmt10ArgumentV13new17h8dab2205c245e810E>
  215914:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215919:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21591e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  215923:	48 8b 35 fe 57 02 00 	mov    0x257fe(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21592a:	e8 51 94 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21592f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215934:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  215939:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21593e:	48 8b 35 e3 57 02 00 	mov    0x257e3(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  215945:	e8 36 94 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21594a:	48 89 04 24          	mov    %rax,(%rsp)
  21594e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  215953:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215958:	48 8b 0c 24          	mov    (%rsp),%rcx
  21595c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  215961:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  215966:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21596b:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
  215970:	4c 89 84 24 40 01 00 	mov    %r8,0x140(%rsp)
  215977:	00 
  215978:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21597f:	00 
  215980:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  215987:	00 
  215988:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  21598f:	00 
  215990:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  215997:	00 
  215998:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21599f:	00 
  2159a0:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  2159a7:	00 
  2159a8:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  2159af:	00 
  2159b0:	48 8d 35 99 2a 02 00 	lea    0x22a99(%rip),%rsi        # 238450 <memcmp+0x1ea0>
  2159b7:	ba 04 00 00 00       	mov    $0x4,%edx
  2159bc:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  2159c2:	e8 f9 08 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2159c7:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  2159ce:	00 
  2159cf:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  2159d6:	00 
  2159d7:	48 8d 15 ca 2a 02 00 	lea    0x22aca(%rip),%rdx        # 2384a8 <memcmp+0x1ef8>
  2159de:	e8 0d ac 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2159e3:	e9 1d fe ff ff       	jmpq   215805 <_ZN9r3_kernel7drivers7display11framebuffer17setup_framebuffer17h13fe4909fcf722b0E+0x225>
}
  2159e8:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  2159ef:	c3                   	retq   

00000000002159f0 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4a70627822f5b36cE>:
            fn deref(&self) -> &$T {
  2159f0:	48 83 ec 18          	sub    $0x18,%rsp
  2159f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2159f9:	48 8d 05 e8 67 02 00 	lea    0x267e8(%rip),%rax        # 23c1e8 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2451f33113c0a27aE>
  215a00:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215a05:	48 8d 3d dc 67 02 00 	lea    0x267dc(%rip),%rdi        # 23c1e8 <_ZN97_$LT$r3_kernel..drivers..display..framebuffer..FRAMEBUFFER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2451f33113c0a27aE>
  215a0c:	e8 7f 3a ff ff       	callq  209490 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9aeb61bc244497efE>
  215a11:	48 89 04 24          	mov    %rax,(%rsp)
  215a15:	48 8b 04 24          	mov    (%rsp),%rax
            }
  215a19:	48 83 c4 18          	add    $0x18,%rsp
  215a1d:	c3                   	retq   
  215a1e:	cc                   	int3   
  215a1f:	cc                   	int3   

0000000000215a20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb90b90fa70029186E>:
    pub const fn cast<U>(self) -> *const U {
  215a20:	50                   	push   %rax
  215a21:	48 89 f8             	mov    %rdi,%rax
  215a24:	48 89 04 24          	mov    %rax,(%rsp)
    }
  215a28:	59                   	pop    %rcx
  215a29:	c3                   	retq   
  215a2a:	cc                   	int3   
  215a2b:	cc                   	int3   
  215a2c:	cc                   	int3   
  215a2d:	cc                   	int3   
  215a2e:	cc                   	int3   
  215a2f:	cc                   	int3   

0000000000215a30 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
  215a30:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  215a37:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  215a3c:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  215a41:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
  215a48:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  215a4f:	00 
  215a50:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  215a57:	00 
    let len = len_utf8(code);
  215a58:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  215a5f:	e8 4c 04 00 00       	callq  215eb0 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE>
  215a64:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  215a6b:	00 
  215a6c:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  215a71:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
    match (len, &mut dst[..]) {
  215a76:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  215a7d:	00 
  215a7e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  215a83:	48 8d 15 56 2a 02 00 	lea    0x22a56(%rip),%rdx        # 2384e0 <memcmp+0x1f30>
  215a8a:	e8 b1 29 01 00       	callq  228440 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hf68e6a005a44d53cE>
  215a8f:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  215a94:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  215a99:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  215a9e:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  215aa3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  215aa8:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  215aaf:	00 
  215ab0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  215ab7:	00 
  215ab8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  215abf:	00 
  215ac0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  215ac7:	00 
  215ac8:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  215acc:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  215ad1:	48 83 e8 03          	sub    $0x3,%rax
  215ad5:	77 15                	ja     215aec <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
  215ad7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  215adc:	48 8d 0d 29 b4 fe ff 	lea    -0x14bd7(%rip),%rcx        # 200f0c <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0x1>
  215ae3:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  215ae7:	48 01 c8             	add    %rcx,%rax
  215aea:	ff e0                	jmpq   *%rax
  215aec:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
  215af1:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  215af8:	00 
        _ => panic!(
  215af9:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  215b00:	00 
  215b01:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  215b08:	00 
  215b09:	48 8d 84 24 84 00 00 	lea    0x84(%rsp),%rax
  215b10:	00 
  215b11:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  215b18:	00 
  215b19:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  215b20:	00 
  215b21:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  215b28:	00 
  215b29:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  215b30:	00 
  215b31:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  215b38:	00 
  215b39:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  215b40:	00 
  215b41:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215b46:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  215b4d:	00 
  215b4e:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  215b55:	00 
  215b56:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  215b5b:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  215b62:	00 
  215b63:	48 8b 35 be 55 02 00 	mov    0x255be(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  215b6a:	e8 11 92 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  215b6f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  215b74:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  215b79:	e9 21 02 00 00       	jmpq   215d9f <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x36f>
        (1, [a, ..]) => {
  215b7e:	48 83 bc 24 a0 00 00 	cmpq   $0x1,0xa0(%rsp)
  215b85:	00 01 
  215b87:	0f 83 e2 01 00 00    	jae    215d6f <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x33f>
  215b8d:	e9 5a ff ff ff       	jmpq   215aec <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (2, [a, b, ..]) => {
  215b92:	48 83 bc 24 a0 00 00 	cmpq   $0x2,0xa0(%rsp)
  215b99:	00 02 
  215b9b:	0f 83 80 01 00 00    	jae    215d21 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x2f1>
  215ba1:	e9 46 ff ff ff       	jmpq   215aec <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (3, [a, b, c, ..]) => {
  215ba6:	48 83 bc 24 a0 00 00 	cmpq   $0x3,0xa0(%rsp)
  215bad:	00 03 
  215baf:	0f 83 f2 00 00 00    	jae    215ca7 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x277>
  215bb5:	e9 32 ff ff ff       	jmpq   215aec <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
        (4, [a, b, c, d, ..]) => {
  215bba:	48 83 bc 24 a0 00 00 	cmpq   $0x4,0xa0(%rsp)
  215bc1:	00 04 
  215bc3:	0f 82 23 ff ff ff    	jb     215aec <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0xbc>
  215bc9:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  215bd0:	00 
  215bd1:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  215bd8:	00 
  215bd9:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  215be0:	00 
  215be1:	48 89 d0             	mov    %rdx,%rax
  215be4:	48 83 c0 01          	add    $0x1,%rax
  215be8:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  215bef:	00 
  215bf0:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  215bf7:	00 
  215bf8:	48 89 c8             	mov    %rcx,%rax
  215bfb:	48 83 c0 02          	add    $0x2,%rax
  215bff:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  215c06:	00 
  215c07:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  215c0e:	00 
  215c0f:	48 89 c7             	mov    %rax,%rdi
  215c12:	48 83 c7 03          	add    $0x3,%rdi
  215c16:	48 89 bc 24 58 01 00 	mov    %rdi,0x158(%rsp)
  215c1d:	00 
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
  215c1e:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  215c25:	c1 ef 12             	shr    $0x12,%edi
  215c28:	83 e7 07             	and    $0x7,%edi
  215c2b:	40 80 cf f0          	or     $0xf0,%dil
  215c2f:	40 88 3e             	mov    %dil,(%rsi)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
  215c32:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  215c39:	c1 ee 0c             	shr    $0xc,%esi
  215c3c:	83 e6 3f             	and    $0x3f,%esi
  215c3f:	40 80 ce 80          	or     $0x80,%sil
  215c43:	40 88 72 01          	mov    %sil,0x1(%rdx)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  215c47:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  215c4e:	c1 ea 06             	shr    $0x6,%edx
  215c51:	83 e2 3f             	and    $0x3f,%edx
  215c54:	80 ca 80             	or     $0x80,%dl
  215c57:	88 51 02             	mov    %dl,0x2(%rcx)
            *d = (code & 0x3F) as u8 | TAG_CONT;
  215c5a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  215c61:	83 e1 3f             	and    $0x3f,%ecx
  215c64:	80 c9 80             	or     $0x80,%cl
  215c67:	88 48 03             	mov    %cl,0x3(%rax)
  215c6a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  215c6f:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
        ),
    };
    &mut dst[..len]
  215c74:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  215c7b:	00 
  215c7c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  215c83:	00 
  215c84:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  215c8b:	00 
  215c8c:	48 8d 0d 65 28 02 00 	lea    0x22865(%rip),%rcx        # 2384f8 <memcmp+0x1f48>
  215c93:	e8 08 27 01 00       	callq  2283a0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h5d3ec839ca9d3a69E>
  215c98:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215c9d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  215ca2:	e9 e6 00 00 00       	jmpq   215d8d <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x35d>
        (3, [a, b, c, ..]) => {
  215ca7:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  215cae:	00 
  215caf:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  215cb6:	00 
  215cb7:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  215cbe:	00 
  215cbf:	48 89 c8             	mov    %rcx,%rax
  215cc2:	48 83 c0 01          	add    $0x1,%rax
  215cc6:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  215ccd:	00 
  215cce:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  215cd5:	00 
  215cd6:	48 89 c6             	mov    %rax,%rsi
  215cd9:	48 83 c6 02          	add    $0x2,%rsi
  215cdd:	48 89 b4 24 70 01 00 	mov    %rsi,0x170(%rsp)
  215ce4:	00 
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
  215ce5:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  215cec:	c1 ee 0c             	shr    $0xc,%esi
  215cef:	83 e6 0f             	and    $0xf,%esi
  215cf2:	40 80 ce e0          	or     $0xe0,%sil
  215cf6:	40 88 32             	mov    %sil,(%rdx)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  215cf9:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  215d00:	c1 ea 06             	shr    $0x6,%edx
  215d03:	83 e2 3f             	and    $0x3f,%edx
  215d06:	80 ca 80             	or     $0x80,%dl
  215d09:	88 51 01             	mov    %dl,0x1(%rcx)
            *c = (code & 0x3F) as u8 | TAG_CONT;
  215d0c:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  215d13:	83 e1 3f             	and    $0x3f,%ecx
  215d16:	80 c9 80             	or     $0x80,%cl
  215d19:	88 48 02             	mov    %cl,0x2(%rax)
        }
  215d1c:	e9 49 ff ff ff       	jmpq   215c6a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
        (2, [a, b, ..]) => {
  215d21:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  215d28:	00 
  215d29:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  215d30:	00 
  215d31:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  215d38:	00 
  215d39:	48 89 c2             	mov    %rax,%rdx
  215d3c:	48 83 c2 01          	add    $0x1,%rdx
  215d40:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  215d47:	00 
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
  215d48:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  215d4f:	c1 ea 06             	shr    $0x6,%edx
  215d52:	83 e2 1f             	and    $0x1f,%edx
  215d55:	80 ca c0             	or     $0xc0,%dl
  215d58:	88 11                	mov    %dl,(%rcx)
            *b = (code & 0x3F) as u8 | TAG_CONT;
  215d5a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  215d61:	83 e1 3f             	and    $0x3f,%ecx
  215d64:	80 c9 80             	or     $0x80,%cl
  215d67:	88 48 01             	mov    %cl,0x1(%rax)
        }
  215d6a:	e9 fb fe ff ff       	jmpq   215c6a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
        (1, [a, ..]) => {
  215d6f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  215d76:	00 
  215d77:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  215d7e:	00 
            *a = code as u8;
  215d7f:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  215d86:	88 08                	mov    %cl,(%rax)
        }
  215d88:	e9 dd fe ff ff       	jmpq   215c6a <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE+0x23a>
  215d8d:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  215d92:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  215d97:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  215d9e:	c3                   	retq   
  215d9f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        _ => panic!(
  215da4:	48 8b 35 8d 53 02 00 	mov    0x2538d(%rip),%rsi        # 23b138 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x88>
  215dab:	e8 f0 8a ff ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  215db0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215db5:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  215dba:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  215dbf:	48 8b 35 62 53 02 00 	mov    0x25362(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  215dc6:	e8 b5 8f ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  215dcb:	48 89 04 24          	mov    %rax,(%rsp)
  215dcf:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  215dd4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215dd9:	48 8b 0c 24          	mov    (%rsp),%rcx
  215ddd:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  215de2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  215de7:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  215dec:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  215df1:	4c 89 84 24 d8 00 00 	mov    %r8,0xd8(%rsp)
  215df8:	00 
  215df9:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  215e00:	00 
  215e01:	48 89 b4 24 e8 00 00 	mov    %rsi,0xe8(%rsp)
  215e08:	00 
  215e09:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  215e10:	00 
  215e11:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  215e18:	00 
  215e19:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  215e20:	00 
  215e21:	48 8d 8c 24 d8 00 00 	lea    0xd8(%rsp),%rcx
  215e28:	00 
  215e29:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  215e30:	00 
  215e31:	48 8d 35 d8 26 02 00 	lea    0x226d8(%rip),%rsi        # 238510 <memcmp+0x1f60>
  215e38:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  215e3e:	4c 89 c2             	mov    %r8,%rdx
  215e41:	e8 7a 04 ff ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  215e46:	48 8d 35 f3 26 02 00 	lea    0x226f3(%rip),%rsi        # 238540 <memcmp+0x1f90>
  215e4d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  215e54:	00 
  215e55:	e8 d6 d6 01 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  215e5a:	0f 0b                	ud2    
  215e5c:	cc                   	int3   
  215e5d:	cc                   	int3   
  215e5e:	cc                   	int3   
  215e5f:	cc                   	int3   

0000000000215e60 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
  215e60:	48 83 ec 38          	sub    $0x38,%rsp
  215e64:	89 7c 24 24          	mov    %edi,0x24(%rsp)
  215e68:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  215e6d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
  215e72:	e8 b9 fb ff ff       	callq  215a30 <_ZN4core4char7methods15encode_utf8_raw17he42d9f946d927f0aE>
  215e77:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  215e7c:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  215e81:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  215e86:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  215e8b:	e8 60 24 01 00       	callq  2282f0 <_ZN4core3str8converts23from_utf8_unchecked_mut17he64a89b0752a7eafE>
  215e90:	48 89 04 24          	mov    %rax,(%rsp)
  215e94:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  215e99:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  215e9e:	48 8b 04 24          	mov    (%rsp),%rax
    }
  215ea2:	48 83 c4 38          	add    $0x38,%rsp
  215ea6:	c3                   	retq   
  215ea7:	cc                   	int3   
  215ea8:	cc                   	int3   
  215ea9:	cc                   	int3   
  215eaa:	cc                   	int3   
  215eab:	cc                   	int3   
  215eac:	cc                   	int3   
  215ead:	cc                   	int3   
  215eae:	cc                   	int3   
  215eaf:	cc                   	int3   

0000000000215eb0 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE>:
const fn len_utf8(code: u32) -> usize {
  215eb0:	48 83 ec 18          	sub    $0x18,%rsp
  215eb4:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  215eb8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
    if code < MAX_ONE_B {
  215ebc:	81 ff 80 00 00 00    	cmp    $0x80,%edi
  215ec2:	72 0d                	jb     215ed1 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x21>
  215ec4:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_TWO_B {
  215ec8:	3d 00 08 00 00       	cmp    $0x800,%eax
  215ecd:	72 22                	jb     215ef1 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x41>
  215ecf:	eb 13                	jmp    215ee4 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x34>
        1
  215ed1:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  215ed8:	00 00 
}
  215eda:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215edf:	48 83 c4 18          	add    $0x18,%rsp
  215ee3:	c3                   	retq   
  215ee4:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_THREE_B {
  215ee8:	3d 00 00 01 00       	cmp    $0x10000,%eax
  215eed:	72 18                	jb     215f07 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x57>
  215eef:	eb 0b                	jmp    215efc <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x4c>
        2
  215ef1:	48 c7 44 24 08 02 00 	movq   $0x2,0x8(%rsp)
  215ef8:	00 00 
    if code < MAX_ONE_B {
  215efa:	eb de                	jmp    215eda <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x2a>
        4
  215efc:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  215f03:	00 00 
    } else if code < MAX_THREE_B {
  215f05:	eb 09                	jmp    215f10 <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x60>
        3
  215f07:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
  215f0e:	00 00 
    } else if code < MAX_TWO_B {
  215f10:	eb e8                	jmp    215efa <_ZN4core4char7methods8len_utf817hca14d9ee17813d5bE+0x4a>
  215f12:	cc                   	int3   
  215f13:	cc                   	int3   
  215f14:	cc                   	int3   
  215f15:	cc                   	int3   
  215f16:	cc                   	int3   
  215f17:	cc                   	int3   
  215f18:	cc                   	int3   
  215f19:	cc                   	int3   
  215f1a:	cc                   	int3   
  215f1b:	cc                   	int3   
  215f1c:	cc                   	int3   
  215f1d:	cc                   	int3   
  215f1e:	cc                   	int3   
  215f1f:	cc                   	int3   

0000000000215f20 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E>:
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.

#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
  215f20:	48 83 ec 38          	sub    $0x38,%rsp
  215f24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  215f29:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  215f2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
  215f33:	31 c0                	xor    %eax,%eax
  215f35:	a8 01                	test   $0x1,%al
  215f37:	75 0e                	jne    215f47 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E+0x27>
  215f39:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        Err(CapacityOverflow.into())
    } else {
        Ok(())
  215f3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
  215f45:	eb 3e                	jmp    215f85 <_ZN5alloc7raw_vec11alloc_guard17he9d2ff3ae0902a05E+0x65>
        Err(CapacityOverflow.into())
  215f47:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  215f4e:	00 00 
  215f50:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  215f55:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  215f5a:	e8 f1 41 00 00       	callq  21a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>
  215f5f:	48 89 04 24          	mov    %rax,(%rsp)
  215f63:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  215f68:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  215f6d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  215f72:	48 8b 14 24          	mov    (%rsp),%rdx
  215f76:	48 89 50 08          	mov    %rdx,0x8(%rax)
  215f7a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  215f7e:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  215f85:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
}
  215f8a:	48 83 c4 38          	add    $0x38,%rsp
  215f8e:	c3                   	retq   
  215f8f:	cc                   	int3   

0000000000215f90 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE>:
fn handle_reserve(result: Result<(), TryReserveError>) {
  215f90:	48 83 ec 48          	sub    $0x48,%rsp
    match result.map_err(|e| e.kind()) {
  215f94:	48 8b 07             	mov    (%rdi),%rax
  215f97:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  215f9c:	48 8b 47 08          	mov    0x8(%rdi),%rax
  215fa0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  215fa5:	48 8b 47 10          	mov    0x10(%rdi),%rax
  215fa9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  215fae:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  215fb3:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  215fb8:	e8 93 4e ff ff       	callq  20ae50 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h028408ded796cf08E>
  215fbd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  215fc2:	48 85 c0             	test   %rax,%rax
  215fc5:	74 06                	je     215fcd <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x3d>
  215fc7:	eb 00                	jmp    215fc9 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x39>
  215fc9:	eb 07                	jmp    215fd2 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x42>
  215fcb:	0f 0b                	ud2    
}
  215fcd:	48 83 c4 48          	add    $0x48,%rsp
  215fd1:	c3                   	retq   
    match result.map_err(|e| e.kind()) {
  215fd2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  215fd7:	48 85 c0             	test   %rax,%rax
  215fda:	0f 95 c0             	setne  %al
  215fdd:	0f b6 c0             	movzbl %al,%eax
  215fe0:	74 04                	je     215fe6 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x56>
  215fe2:	eb 00                	jmp    215fe4 <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x54>
  215fe4:	eb 07                	jmp    215fed <_ZN5alloc7raw_vec14handle_reserve17h07f5f719759ede2eE+0x5d>
        Err(CapacityOverflow) => capacity_overflow(),
  215fe6:	e8 15 9e 01 00       	callq  22fe00 <_ZN5alloc7raw_vec17capacity_overflow17h99a87b7ff45619d7E>
  215feb:	0f 0b                	ud2    
        Err(AllocError { layout, .. }) => handle_alloc_error(layout),
  215fed:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  215ff2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  215ff7:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  215ffc:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  216001:	e8 2a 9e 01 00       	callq  22fe30 <_ZN5alloc5alloc18handle_alloc_error17hd9bd3602b1600516E>
  216006:	0f 0b                	ud2    
  216008:	cc                   	int3   
  216009:	cc                   	int3   
  21600a:	cc                   	int3   
  21600b:	cc                   	int3   
  21600c:	cc                   	int3   
  21600d:	cc                   	int3   
  21600e:	cc                   	int3   
  21600f:	cc                   	int3   

0000000000216010 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E>:
    pub fn from_aligned_address(addr: mm::PhysicalAddress) -> Result<Self, PagingError> {
  216010:	48 83 ec 48          	sub    $0x48,%rsp
  216014:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  216019:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21601e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        if !addr.is_aligned_at(PageSize::Page4KiB.size()) {
  216023:	48 8d 3d a5 af fe ff 	lea    -0x1505b(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  21602a:	e8 31 5f ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  21602f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  216034:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  216039:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21603e:	e8 ad 00 01 00       	callq  2260f0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>
  216043:	88 44 24 0f          	mov    %al,0xf(%rsp)
  216047:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21604b:	34 ff                	xor    $0xff,%al
  21604d:	a8 01                	test   $0x1,%al
  21604f:	75 21                	jne    216072 <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E+0x62>
  216051:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        Ok(Frame(addr))
  216056:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21605b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  216060:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  216065:	48 89 48 08          	mov    %rcx,0x8(%rax)
  216069:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  216070:	eb 3c                	jmp    2160ae <_ZN9r3_kernel2mm3phy5Frame20from_aligned_address17hc4886c6d7576efe6E+0x9e>
            return Err(PagingError::UnalignedAddress(addr.as_u64()));
  216072:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  216077:	e8 44 00 01 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  21607c:	48 89 04 24          	mov    %rax,(%rsp)
  216080:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216085:	48 8b 0c 24          	mov    (%rsp),%rcx
  216089:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21608e:	66 c7 44 24 30 03 00 	movw   $0x3,0x30(%rsp)
  216095:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21609a:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21609e:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2160a3:	48 89 48 10          	mov    %rcx,0x10(%rax)
  2160a7:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  2160ae:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  2160b3:	48 83 c4 48          	add    $0x48,%rsp
  2160b7:	c3                   	retq   
  2160b8:	cc                   	int3   
  2160b9:	cc                   	int3   
  2160ba:	cc                   	int3   
  2160bb:	cc                   	int3   
  2160bc:	cc                   	int3   
  2160bd:	cc                   	int3   
  2160be:	cc                   	int3   
  2160bf:	cc                   	int3   

00000000002160c0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>:
    pub fn from_address(addr: mm::PhysicalAddress) -> Self {
  2160c0:	48 83 ec 28          	sub    $0x28,%rsp
  2160c4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        Frame(addr.new_align_down(PageSize::Page4KiB.size()))
  2160c9:	48 8d 3d ff ae fe ff 	lea    -0x15101(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2160d0:	e8 8b 5e ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2160d5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2160da:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2160df:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2160e4:	e8 47 00 01 00       	callq  226130 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h6792f5d42c0b6e10E>
  2160e9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2160ee:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2160f3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  2160f8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2160fd:	48 83 c4 28          	add    $0x28,%rsp
  216101:	c3                   	retq   
  216102:	cc                   	int3   
  216103:	cc                   	int3   
  216104:	cc                   	int3   
  216105:	cc                   	int3   
  216106:	cc                   	int3   
  216107:	cc                   	int3   
  216108:	cc                   	int3   
  216109:	cc                   	int3   
  21610a:	cc                   	int3   
  21610b:	cc                   	int3   
  21610c:	cc                   	int3   
  21610d:	cc                   	int3   
  21610e:	cc                   	int3   
  21610f:	cc                   	int3   

0000000000216110 <_ZN9r3_kernel2mm3phy5Frame4addr17h1a4e3a91f04f8e02E>:
    pub fn addr(&self) -> mm::PhysicalAddress {
  216110:	50                   	push   %rax
  216111:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  216115:	48 8b 07             	mov    (%rdi),%rax
    }
  216118:	59                   	pop    %rcx
  216119:	c3                   	retq   
  21611a:	cc                   	int3   
  21611b:	cc                   	int3   
  21611c:	cc                   	int3   
  21611d:	cc                   	int3   
  21611e:	cc                   	int3   
  21611f:	cc                   	int3   

0000000000216120 <_ZN9r3_kernel2mm3phy5Frame6as_u6417he466120c6e44aaa7E>:
    pub fn as_u64(&self) -> u64 {
  216120:	48 83 ec 18          	sub    $0x18,%rsp
  216124:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.as_u64()
  216129:	e8 92 ff 00 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  21612e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216133:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  216138:	48 83 c4 18          	add    $0x18,%rsp
  21613c:	c3                   	retq   
  21613d:	cc                   	int3   
  21613e:	cc                   	int3   
  21613f:	cc                   	int3   

0000000000216140 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E>:
    pub fn new(start: u64, end: u64) -> Self {
  216140:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  216147:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21614c:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  216151:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  216156:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  21615b:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  216160:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
        let aligned_start = mm::Alignment::align_up(start, PageSize::Page4KiB.size());
  216165:	48 8d 3d 63 ae fe ff 	lea    -0x1519d(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  21616c:	e8 ef 5d ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  216171:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  216176:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21617b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  216180:	e8 cb fc 00 00       	callq  225e50 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  216185:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21618a:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
        let aligned_end = mm::Alignment::align_down(end, PageSize::Page4KiB.size());
  21618f:	48 8d 3d 39 ae fe ff 	lea    -0x151c7(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  216196:	e8 c5 5d ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  21619b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2161a0:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  2161a5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2161aa:	e8 41 fc 00 00       	callq  225df0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  2161af:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2161b4:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2161bb:	00 
  2161bc:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2161c1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        let size = (aligned_end - aligned_start) as usize;
  2161c6:	48 29 c8             	sub    %rcx,%rax
  2161c9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2161ce:	0f 92 c0             	setb   %al
  2161d1:	a8 01                	test   $0x1,%al
  2161d3:	75 20                	jne    2161f5 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0xb5>
  2161d5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2161da:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2161e1:	00 
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  2161e2:	48 8d 3d e6 ad fe ff 	lea    -0x1521a(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2161e9:	e8 72 5d ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2161ee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2161f3:	eb 1a                	jmp    21620f <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0xcf>
        let size = (aligned_end - aligned_start) as usize;
  2161f5:	48 8d 3d e4 ad fe ff 	lea    -0x1521c(%rip),%rdi        # 200fe0 <str.0>
  2161fc:	48 8d 15 55 23 02 00 	lea    0x22355(%rip),%rdx        # 238558 <memcmp+0x1fa8>
  216203:	be 21 00 00 00       	mov    $0x21,%esi
  216208:	e8 53 d2 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21620d:	0f 0b                	ud2    
  21620f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  216214:	48 83 f8 00          	cmp    $0x0,%rax
  216218:	0f 94 c0             	sete   %al
  21621b:	a8 01                	test   $0x1,%al
  21621d:	75 2d                	jne    21624c <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0x10c>
  21621f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  216224:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  216229:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21622e:	31 d2                	xor    %edx,%edx
  216230:	48 f7 f1             	div    %rcx
  216233:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216238:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21623f:	00 
            start: mm::PhysicalAddress::from_u64(aligned_start),
  216240:	e8 8b fe 00 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  216245:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21624a:	eb 1a                	jmp    216266 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E+0x126>
        let n_frames = size / PageSize::Page4KiB.size() as usize;
  21624c:	48 8d 3d bd ad fe ff 	lea    -0x15243(%rip),%rdi        # 201010 <str.1>
  216253:	48 8d 15 16 23 02 00 	lea    0x22316(%rip),%rdx        # 238570 <memcmp+0x1fc0>
  21625a:	be 19 00 00 00       	mov    $0x19,%esi
  21625f:	e8 fc d1 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216264:	0f 0b                	ud2    
  216266:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21626b:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  216270:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  216275:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21627a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        MemoryRegion {
  21627f:	48 89 39             	mov    %rdi,(%rcx)
  216282:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  216286:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  21628a:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  216291:	00 
    }
  216292:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  216299:	c3                   	retq   
  21629a:	cc                   	int3   
  21629b:	cc                   	int3   
  21629c:	cc                   	int3   
  21629d:	cc                   	int3   
  21629e:	cc                   	int3   
  21629f:	cc                   	int3   

00000000002162a0 <_ZN9r3_kernel2mm3phy12MemoryRegion5empty17hd30c8ed48360a7fcE>:
    pub fn empty() -> Self {
  2162a0:	48 83 ec 18          	sub    $0x18,%rsp
  2162a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2162a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
            start: mm::PhysicalAddress::from_u64(0),
  2162ad:	31 c0                	xor    %eax,%eax
  2162af:	89 c7                	mov    %eax,%edi
  2162b1:	e8 1a fe 00 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  2162b6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2162bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2162c0:	48 8b 0c 24          	mov    (%rsp),%rcx
  2162c4:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        MemoryRegion {
  2162c9:	48 89 11             	mov    %rdx,(%rcx)
  2162cc:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  2162d3:	00 
  2162d4:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  2162db:	00 
  2162dc:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  2162e3:	00 
    }
  2162e4:	48 83 c4 18          	add    $0x18,%rsp
  2162e8:	c3                   	retq   
  2162e9:	cc                   	int3   
  2162ea:	cc                   	int3   
  2162eb:	cc                   	int3   
  2162ec:	cc                   	int3   
  2162ed:	cc                   	int3   
  2162ee:	cc                   	int3   
  2162ef:	cc                   	int3   

00000000002162f0 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>:
    pub fn can_allocate(&self, n: usize) -> bool {
  2162f0:	48 83 ec 28          	sub    $0x28,%rsp
  2162f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2162f9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2162fe:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.current + n < self.n_frames
  216303:	48 03 77 18          	add    0x18(%rdi),%rsi
  216307:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21630c:	0f 92 c0             	setb   %al
  21630f:	a8 01                	test   $0x1,%al
  216311:	75 1b                	jne    21632e <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E+0x3e>
  216313:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  216318:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21631d:	48 3b 41 10          	cmp    0x10(%rcx),%rax
  216321:	0f 92 c0             	setb   %al
    }
  216324:	24 01                	and    $0x1,%al
  216326:	0f b6 c0             	movzbl %al,%eax
  216329:	48 83 c4 28          	add    $0x28,%rsp
  21632d:	c3                   	retq   
        self.current + n < self.n_frames
  21632e:	48 8d 3d fb ac fe ff 	lea    -0x15305(%rip),%rdi        # 201030 <str.2>
  216335:	48 8d 15 4c 22 02 00 	lea    0x2224c(%rip),%rdx        # 238588 <memcmp+0x1fd8>
  21633c:	be 1c 00 00 00       	mov    $0x1c,%esi
  216341:	e8 1a d1 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216346:	0f 0b                	ud2    
  216348:	cc                   	int3   
  216349:	cc                   	int3   
  21634a:	cc                   	int3   
  21634b:	cc                   	int3   
  21634c:	cc                   	int3   
  21634d:	cc                   	int3   
  21634e:	cc                   	int3   
  21634f:	cc                   	int3   

0000000000216350 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>:
    pub fn can_allocate_aligned(&self, n: usize) -> bool {
  216350:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  216357:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  21635c:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  216361:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  216366:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  21636b:	e8 50 fd 00 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  216370:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  216375:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21637a:	48 8b 40 18          	mov    0x18(%rax),%rax
  21637e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  216383:	48 8d 3d 45 ac fe ff 	lea    -0x153bb(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  21638a:	e8 d1 5b ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  21638f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  216394:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  216399:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21639e:	48 f7 e1             	mul    %rcx
  2163a1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2163a6:	0f 90 c0             	seto   %al
  2163a9:	a8 01                	test   $0x1,%al
  2163ab:	75 1b                	jne    2163c8 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x78>
  2163ad:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2163b2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2163b7:	48 01 c8             	add    %rcx,%rax
  2163ba:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2163bf:	0f 92 c0             	setb   %al
  2163c2:	a8 01                	test   $0x1,%al
  2163c4:	75 3c                	jne    216402 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0xb2>
  2163c6:	eb 1a                	jmp    2163e2 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x92>
  2163c8:	48 8d 3d 81 ac fe ff 	lea    -0x1537f(%rip),%rdi        # 201050 <str.3>
  2163cf:	48 8d 15 ca 21 02 00 	lea    0x221ca(%rip),%rdx        # 2385a0 <memcmp+0x1ff0>
  2163d6:	be 21 00 00 00       	mov    $0x21,%esi
  2163db:	e8 80 d0 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2163e0:	0f 0b                	ud2    
  2163e2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2163e7:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2163ee:	00 
            let alignd_addr = mm::Alignment::align_up(current_address, PageSize::Page2MiB.size());
  2163ef:	48 8d 3d 7b ac fe ff 	lea    -0x15385(%rip),%rdi        # 201071 <str.3+0x21>
  2163f6:	e8 65 5b ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2163fb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216400:	eb 1a                	jmp    21641c <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0xcc>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  216402:	48 8d 3d 27 ac fe ff 	lea    -0x153d9(%rip),%rdi        # 201030 <str.2>
  216409:	48 8d 15 a8 21 02 00 	lea    0x221a8(%rip),%rdx        # 2385b8 <memcmp+0x2008>
  216410:	be 1c 00 00 00       	mov    $0x1c,%esi
  216415:	e8 46 d0 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21641a:	0f 0b                	ud2    
  21641c:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  216421:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
            let alignd_addr = mm::Alignment::align_up(current_address, PageSize::Page2MiB.size());
  216426:	e8 25 fa 00 00       	callq  225e50 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  21642b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  216430:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  216437:	00 
  216438:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21643d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            ((alignd_addr - current_address) / PageSize::Page4KiB.size()) as usize
  216442:	48 29 c8             	sub    %rcx,%rax
  216445:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21644a:	0f 92 c0             	setb   %al
  21644d:	a8 01                	test   $0x1,%al
  21644f:	75 13                	jne    216464 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x114>
  216451:	48 8d 3d 77 ab fe ff 	lea    -0x15489(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  216458:	e8 03 5b ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  21645d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216462:	eb 1a                	jmp    21647e <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x12e>
  216464:	48 8d 3d 75 ab fe ff 	lea    -0x1548b(%rip),%rdi        # 200fe0 <str.0>
  21646b:	48 8d 15 5e 21 02 00 	lea    0x2215e(%rip),%rdx        # 2385d0 <memcmp+0x2020>
  216472:	be 21 00 00 00       	mov    $0x21,%esi
  216477:	e8 e4 cf 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21647c:	0f 0b                	ud2    
  21647e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216483:	48 83 f8 00          	cmp    $0x0,%rax
  216487:	0f 94 c0             	sete   %al
  21648a:	a8 01                	test   $0x1,%al
  21648c:	75 2e                	jne    2164bc <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x16c>
  21648e:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  216493:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  216498:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21649d:	31 d2                	xor    %edx,%edx
  21649f:	48 f7 f6             	div    %rsi
  2164a2:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2164a9:	00 
        self.current + offset + n < self.n_frames
  2164aa:	48 03 41 18          	add    0x18(%rcx),%rax
  2164ae:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2164b3:	0f 92 c0             	setb   %al
  2164b6:	a8 01                	test   $0x1,%al
  2164b8:	75 37                	jne    2164f1 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1a1>
  2164ba:	eb 1a                	jmp    2164d6 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x186>
            ((alignd_addr - current_address) / PageSize::Page4KiB.size()) as usize
  2164bc:	48 8d 3d 4d ab fe ff 	lea    -0x154b3(%rip),%rdi        # 201010 <str.1>
  2164c3:	48 8d 15 1e 21 02 00 	lea    0x2211e(%rip),%rdx        # 2385e8 <memcmp+0x2038>
  2164ca:	be 19 00 00 00       	mov    $0x19,%esi
  2164cf:	e8 8c cf 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2164d4:	0f 0b                	ud2    
  2164d6:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  2164db:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        self.current + offset + n < self.n_frames
  2164e0:	48 01 c8             	add    %rcx,%rax
  2164e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2164e8:	0f 92 c0             	setb   %al
  2164eb:	a8 01                	test   $0x1,%al
  2164ed:	75 3a                	jne    216529 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1d9>
  2164ef:	eb 1a                	jmp    21650b <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E+0x1bb>
  2164f1:	48 8d 3d 38 ab fe ff 	lea    -0x154c8(%rip),%rdi        # 201030 <str.2>
  2164f8:	48 8d 15 01 21 02 00 	lea    0x22101(%rip),%rdx        # 238600 <memcmp+0x2050>
  2164ff:	be 1c 00 00 00       	mov    $0x1c,%esi
  216504:	e8 57 cf 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216509:	0f 0b                	ud2    
  21650b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  216510:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  216515:	48 3b 41 10          	cmp    0x10(%rcx),%rax
  216519:	0f 92 c0             	setb   %al
    }
  21651c:	24 01                	and    $0x1,%al
  21651e:	0f b6 c0             	movzbl %al,%eax
  216521:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  216528:	c3                   	retq   
        self.current + offset + n < self.n_frames
  216529:	48 8d 3d 00 ab fe ff 	lea    -0x15500(%rip),%rdi        # 201030 <str.2>
  216530:	48 8d 15 c9 20 02 00 	lea    0x220c9(%rip),%rdx        # 238600 <memcmp+0x2050>
  216537:	be 1c 00 00 00       	mov    $0x1c,%esi
  21653c:	e8 1f cf 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216541:	0f 0b                	ud2    
  216543:	cc                   	int3   
  216544:	cc                   	int3   
  216545:	cc                   	int3   
  216546:	cc                   	int3   
  216547:	cc                   	int3   
  216548:	cc                   	int3   
  216549:	cc                   	int3   
  21654a:	cc                   	int3   
  21654b:	cc                   	int3   
  21654c:	cc                   	int3   
  21654d:	cc                   	int3   
  21654e:	cc                   	int3   
  21654f:	cc                   	int3   

0000000000216550 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>:
    pub fn allocate_n(&mut self, n: usize, align_huge_page: bool) -> Option<Frame> {
  216550:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  216557:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  21655e:	00 
  21655f:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  216566:	00 
  216567:	88 d0                	mov    %dl,%al
  216569:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  216570:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  216577:	00 
  216578:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  21657f:	00 
  216580:	88 c1                	mov    %al,%cl
  216582:	80 e1 01             	and    $0x1,%cl
  216585:	88 8c 24 ff 00 00 00 	mov    %cl,0xff(%rsp)
        if !align_huge_page && !self.can_allocate(n) {
  21658c:	34 ff                	xor    $0xff,%al
  21658e:	a8 01                	test   $0x1,%al
  216590:	75 0a                	jne    21659c <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x4c>
  216592:	c6 84 24 d6 00 00 00 	movb   $0x0,0xd6(%rsp)
  216599:	00 
  21659a:	eb 2e                	jmp    2165ca <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x7a>
  21659c:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  2165a3:	00 
  2165a4:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  2165ab:	00 
  2165ac:	e8 3f fd ff ff       	callq  2162f0 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  2165b1:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  2165b8:	8a 84 24 a7 00 00 00 	mov    0xa7(%rsp),%al
  2165bf:	34 ff                	xor    $0xff,%al
  2165c1:	24 01                	and    $0x1,%al
  2165c3:	88 84 24 d6 00 00 00 	mov    %al,0xd6(%rsp)
  2165ca:	f6 84 24 d6 00 00 00 	testb  $0x1,0xd6(%rsp)
  2165d1:	01 
  2165d2:	75 0d                	jne    2165e1 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x91>
  2165d4:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
        if align_huge_page && !self.can_allocate_aligned(n) {
  2165db:	a8 01                	test   $0x1,%al
  2165dd:	75 30                	jne    21660f <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xbf>
  2165df:	eb 24                	jmp    216605 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xb5>
            return None;
  2165e1:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  2165e8:	00 00 00 00 00 
    }
  2165ed:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2165f4:	00 
  2165f5:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  2165fc:	00 
  2165fd:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  216604:	c3                   	retq   
        if align_huge_page && !self.can_allocate_aligned(n) {
  216605:	c6 84 24 d7 00 00 00 	movb   $0x0,0xd7(%rsp)
  21660c:	00 
  21660d:	eb 2e                	jmp    21663d <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0xed>
  21660f:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  216616:	00 
  216617:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  21661e:	00 
  21661f:	e8 2c fd ff ff       	callq  216350 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>
  216624:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  21662b:	8a 84 24 a6 00 00 00 	mov    0xa6(%rsp),%al
  216632:	34 ff                	xor    $0xff,%al
  216634:	24 01                	and    $0x1,%al
  216636:	88 84 24 d7 00 00 00 	mov    %al,0xd7(%rsp)
  21663d:	f6 84 24 d7 00 00 00 	testb  $0x1,0xd7(%rsp)
  216644:	01 
  216645:	75 0d                	jne    216654 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x104>
  216647:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
        if align_huge_page {
  21664e:	a8 01                	test   $0x1,%al
  216650:	75 2a                	jne    21667c <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x12c>
  216652:	eb 0e                	jmp    216662 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x112>
            return None;
  216654:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21665b:	00 00 00 00 00 
  216660:	eb 8b                	jmp    2165ed <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  216662:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  216669:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  21666a:	e8 51 fa 00 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  21666f:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  216676:	00 
  216677:	e9 5c 02 00 00       	jmpq   2168d8 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x388>
  21667c:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  216683:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  216684:	e8 37 fa 00 00       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  216689:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  216690:	00 
  216691:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  216698:	00 
  216699:	48 8b 40 18          	mov    0x18(%rax),%rax
  21669d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2166a4:	00 
  2166a5:	48 8d 3d 23 a9 fe ff 	lea    -0x156dd(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2166ac:	e8 af 58 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2166b1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2166b8:	00 
  2166b9:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2166c0:	00 
  2166c1:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2166c8:	00 
  2166c9:	48 f7 e1             	mul    %rcx
  2166cc:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2166d1:	0f 90 c0             	seto   %al
  2166d4:	a8 01                	test   $0x1,%al
  2166d6:	75 1e                	jne    2166f6 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1a6>
  2166d8:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  2166dd:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2166e4:	00 
  2166e5:	48 01 c8             	add    %rcx,%rax
  2166e8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2166ed:	0f 92 c0             	setb   %al
  2166f0:	a8 01                	test   $0x1,%al
  2166f2:	75 3c                	jne    216730 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1e0>
  2166f4:	eb 1a                	jmp    216710 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1c0>
  2166f6:	48 8d 3d 53 a9 fe ff 	lea    -0x156ad(%rip),%rdi        # 201050 <str.3>
  2166fd:	48 8d 15 14 1f 02 00 	lea    0x21f14(%rip),%rdx        # 238618 <memcmp+0x2068>
  216704:	be 21 00 00 00       	mov    $0x21,%esi
  216709:	e8 52 cd 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21670e:	0f 0b                	ud2    
  216710:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  216715:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21671c:	00 
            let aligned_addr = mm::Alignment::align_up(current_addr, PageSize::Page2MiB.size());
  21671d:	48 8d 3d 4d a9 fe ff 	lea    -0x156b3(%rip),%rdi        # 201071 <str.3+0x21>
  216724:	e8 37 58 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  216729:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21672e:	eb 1a                	jmp    21674a <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x1fa>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size());
  216730:	48 8d 3d f9 a8 fe ff 	lea    -0x15707(%rip),%rdi        # 201030 <str.2>
  216737:	48 8d 15 f2 1e 02 00 	lea    0x21ef2(%rip),%rdx        # 238630 <memcmp+0x2080>
  21673e:	be 1c 00 00 00       	mov    $0x1c,%esi
  216743:	e8 18 cd 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216748:	0f 0b                	ud2    
  21674a:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  21674f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
            let aligned_addr = mm::Alignment::align_up(current_addr, PageSize::Page2MiB.size());
  216754:	e8 f7 f6 00 00       	callq  225e50 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>
  216759:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21675e:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  216765:	00 
  216766:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21676b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            let diff_addr = aligned_addr - current_addr;
  216770:	48 29 c8             	sub    %rcx,%rax
  216773:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  216778:	0f 92 c0             	setb   %al
  21677b:	a8 01                	test   $0x1,%al
  21677d:	75 20                	jne    21679f <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x24f>
  21677f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  216784:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  21678b:	00 
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  21678c:	48 8d 3d 3c a8 fe ff 	lea    -0x157c4(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  216793:	e8 c8 57 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  216798:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21679d:	eb 1a                	jmp    2167b9 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x269>
            let diff_addr = aligned_addr - current_addr;
  21679f:	48 8d 3d 3a a8 fe ff 	lea    -0x157c6(%rip),%rdi        # 200fe0 <str.0>
  2167a6:	48 8d 15 9b 1e 02 00 	lea    0x21e9b(%rip),%rdx        # 238648 <memcmp+0x2098>
  2167ad:	be 21 00 00 00       	mov    $0x21,%esi
  2167b2:	e8 a9 cc 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2167b7:	0f 0b                	ud2    
  2167b9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  2167be:	48 83 f8 00          	cmp    $0x0,%rax
  2167c2:	0f 94 c0             	sete   %al
  2167c5:	a8 01                	test   $0x1,%al
  2167c7:	75 41                	jne    21680a <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2ba>
  2167c9:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  2167d0:	00 
  2167d1:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2167d6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2167db:	31 d2                	xor    %edx,%edx
  2167dd:	48 f7 f6             	div    %rsi
  2167e0:	48 89 c2             	mov    %rax,%rdx
  2167e3:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  2167ea:	00 
  2167eb:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2167f0:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  2167f7:	00 
            self.current = self.current + n + offset_frames;
  2167f8:	48 03 41 18          	add    0x18(%rcx),%rax
  2167fc:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  216801:	0f 92 c0             	setb   %al
  216804:	a8 01                	test   $0x1,%al
  216806:	75 37                	jne    21683f <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2ef>
  216808:	eb 1a                	jmp    216824 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x2d4>
            let offset_frames = (diff_addr / PageSize::Page4KiB.size()) as usize;
  21680a:	48 8d 3d ff a7 fe ff 	lea    -0x15801(%rip),%rdi        # 201010 <str.1>
  216811:	48 8d 15 48 1e 02 00 	lea    0x21e48(%rip),%rdx        # 238660 <memcmp+0x20b0>
  216818:	be 19 00 00 00       	mov    $0x19,%esi
  21681d:	e8 3e cc 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216822:	0f 0b                	ud2    
  216824:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  216829:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
            self.current = self.current + n + offset_frames;
  21682e:	48 01 c8             	add    %rcx,%rax
  216831:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216836:	0f 92 c0             	setb   %al
  216839:	a8 01                	test   $0x1,%al
  21683b:	75 3e                	jne    21687b <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x32b>
  21683d:	eb 1a                	jmp    216859 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x309>
  21683f:	48 8d 3d ea a7 fe ff 	lea    -0x15816(%rip),%rdi        # 201030 <str.2>
  216846:	48 8d 15 2b 1e 02 00 	lea    0x21e2b(%rip),%rdx        # 238678 <memcmp+0x20c8>
  21684d:	be 1c 00 00 00       	mov    $0x1c,%esi
  216852:	e8 09 cc 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216857:	0f 0b                	ud2    
  216859:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21685e:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  216865:	00 
  216866:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21686b:	48 89 48 18          	mov    %rcx,0x18(%rax)
            return Some(Frame::from_address(mm::PhysicalAddress::from_u64(
  21686f:	e8 5c f8 00 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  216874:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216879:	eb 1a                	jmp    216895 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x345>
            self.current = self.current + n + offset_frames;
  21687b:	48 8d 3d ae a7 fe ff 	lea    -0x15852(%rip),%rdi        # 201030 <str.2>
  216882:	48 8d 15 ef 1d 02 00 	lea    0x21def(%rip),%rdx        # 238678 <memcmp+0x20c8>
  216889:	be 1c 00 00 00       	mov    $0x1c,%esi
  21688e:	e8 cd cb 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216893:	0f 0b                	ud2    
  216895:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            return Some(Frame::from_address(mm::PhysicalAddress::from_u64(
  21689a:	e8 21 f8 ff ff       	callq  2160c0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>
  21689f:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  2168a6:	00 
  2168a7:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  2168ae:	00 
  2168af:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2168b6:	00 
  2168b7:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  2168be:	00 
  2168bf:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2168c6:	00 
  2168c7:	48 c7 84 24 c0 00 00 	movq   $0x1,0xc0(%rsp)
  2168ce:	00 01 00 00 00 
  2168d3:	e9 15 fd ff ff       	jmpq   2165ed <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  2168d8:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2168df:	00 
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  2168e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  2168e4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2168e9:	48 8d 3d df a6 fe ff 	lea    -0x15921(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  2168f0:	e8 6b 56 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  2168f5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2168fa:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2168ff:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  216904:	48 f7 e1             	mul    %rcx
  216907:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21690c:	0f 90 c0             	seto   %al
  21690f:	a8 01                	test   $0x1,%al
  216911:	75 1e                	jne    216931 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x3e1>
  216913:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  216918:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21691f:	00 
  216920:	48 01 c8             	add    %rcx,%rax
  216923:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  216928:	0f 92 c0             	setb   %al
  21692b:	a8 01                	test   $0x1,%al
  21692d:	75 35                	jne    216964 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x414>
  21692f:	eb 1a                	jmp    21694b <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x3fb>
  216931:	48 8d 3d 18 a7 fe ff 	lea    -0x158e8(%rip),%rdi        # 201050 <str.3>
  216938:	48 8d 15 51 1d 02 00 	lea    0x21d51(%rip),%rdx        # 238690 <memcmp+0x20e0>
  21693f:	be 21 00 00 00       	mov    $0x21,%esi
  216944:	e8 17 cb 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216949:	0f 0b                	ud2    
  21694b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            let current_address = mm::PhysicalAddress::from_u64(
  216950:	e8 7b f7 00 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  216955:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21695a:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  216961:	00 
  216962:	eb 1a                	jmp    21697e <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x42e>
                self.start.as_u64() + (self.current as u64 * PageSize::Page4KiB.size()),
  216964:	48 8d 3d c5 a6 fe ff 	lea    -0x1593b(%rip),%rdi        # 201030 <str.2>
  21696b:	48 8d 15 36 1d 02 00 	lea    0x21d36(%rip),%rdx        # 2386a8 <memcmp+0x20f8>
  216972:	be 1c 00 00 00       	mov    $0x1c,%esi
  216977:	e8 e4 ca 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21697c:	0f 0b                	ud2    
  21697e:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  216985:	00 
  216986:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21698d:	00 
            self.current = self.current + n;
  21698e:	48 03 41 18          	add    0x18(%rcx),%rax
  216992:	48 89 04 24          	mov    %rax,(%rsp)
  216996:	0f 92 c0             	setb   %al
  216999:	a8 01                	test   $0x1,%al
  21699b:	75 34                	jne    2169d1 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x481>
  21699d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2169a2:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2169a9:	00 
  2169aa:	48 8b 0c 24          	mov    (%rsp),%rcx
  2169ae:	48 89 48 18          	mov    %rcx,0x18(%rax)
            return Some(Frame::from_address(current_address));
  2169b2:	e8 09 f7 ff ff       	callq  2160c0 <_ZN9r3_kernel2mm3phy5Frame12from_address17hbdceafb6fb581fc2E>
  2169b7:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2169be:	00 
  2169bf:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  2169c6:	00 
  2169c7:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2169ce:	00 
  2169cf:	eb 1a                	jmp    2169eb <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x49b>
            self.current = self.current + n;
  2169d1:	48 8d 3d 58 a6 fe ff 	lea    -0x159a8(%rip),%rdi        # 201030 <str.2>
  2169d8:	48 8d 15 e1 1c 02 00 	lea    0x21ce1(%rip),%rdx        # 2386c0 <memcmp+0x2110>
  2169df:	be 1c 00 00 00       	mov    $0x1c,%esi
  2169e4:	e8 77 ca 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2169e9:	0f 0b                	ud2    
            return Some(Frame::from_address(current_address));
  2169eb:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  2169f2:	00 
  2169f3:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2169fa:	00 
  2169fb:	48 c7 84 24 c0 00 00 	movq   $0x1,0xc0(%rsp)
  216a02:	00 01 00 00 00 
  216a07:	e9 e1 fb ff ff       	jmpq   2165ed <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E+0x9d>
  216a0c:	cc                   	int3   
  216a0d:	cc                   	int3   
  216a0e:	cc                   	int3   
  216a0f:	cc                   	int3   

0000000000216a10 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E>:
    pub fn init() -> Self {
  216a10:	48 81 ec 88 12 00 00 	sub    $0x1288,%rsp
  216a17:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  216a1e:	00 
  216a1f:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  216a26:	00 
        let memory_map_opt = BootProtocol::get_memory_regions();
  216a27:	e8 d4 14 00 00       	callq  217f00 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>
  216a2c:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  216a33:	00 
        if memory_map_opt.is_none() {
  216a34:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  216a3b:	00 
  216a3c:	e8 3f 9c ff ff       	callq  210680 <_ZN4core6option15Option$LT$T$GT$7is_none17hb5d79c86d77403d8E>
  216a41:	88 84 24 d7 00 00 00 	mov    %al,0xd7(%rsp)
  216a48:	8a 84 24 d7 00 00 00 	mov    0xd7(%rsp),%al
  216a4f:	a8 01                	test   $0x1,%al
  216a51:	75 28                	jne    216a7b <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x6b>
  216a53:	eb 00                	jmp    216a55 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x45>
        let memory_map = memory_map_opt.unwrap();
  216a55:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  216a5c:	00 
  216a5d:	48 8d 35 8c 1c 02 00 	lea    0x21c8c(%rip),%rsi        # 2386f0 <memcmp+0x2140>
  216a64:	e8 07 96 ff ff       	callq  210070 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2cc93ecab046d878E>
  216a69:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  216a70:	00 
  216a71:	48 89 84 24 30 12 00 	mov    %rax,0x1230(%rsp)
  216a78:	00 
  216a79:	eb 1a                	jmp    216a95 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x85>
            panic!("Bootloader did not provide memory map.");
  216a7b:	48 8d 3d f0 a5 fe ff 	lea    -0x15a10(%rip),%rdi        # 201072 <str.3+0x22>
  216a82:	48 8d 15 4f 1c 02 00 	lea    0x21c4f(%rip),%rdx        # 2386d8 <memcmp+0x2128>
  216a89:	be 26 00 00 00       	mov    $0x26,%esi
  216a8e:	e8 cd c9 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216a93:	0f 0b                	ud2    
        let mut index = 0;
  216a95:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  216a9c:	00 00 00 00 00 
        let mut memory_regions = [MemoryRegion::empty(); MAX_FREE_REGIONS];
  216aa1:	48 8d bc 24 f8 08 00 	lea    0x8f8(%rsp),%rdi
  216aa8:	00 
  216aa9:	e8 f2 f7 ff ff       	callq  2162a0 <_ZN9r3_kernel2mm3phy12MemoryRegion5empty17hd30c8ed48360a7fcE>
  216aae:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  216ab5:	00 
  216ab6:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  216abd:	00 
  216abe:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
  216ac5:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  216acc:	00 
  216acd:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  216ad4:	00 
  216ad5:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  216adc:	00 
  216add:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  216ae4:	00 
  216ae5:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  216aec:	00 
  216aed:	48 39 c8             	cmp    %rcx,%rax
  216af0:	74 45                	je     216b37 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x127>
  216af2:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  216af9:	00 
  216afa:	48 8b 8c 24 f8 08 00 	mov    0x8f8(%rsp),%rcx
  216b01:	00 
  216b02:	48 89 08             	mov    %rcx,(%rax)
  216b05:	48 8b 8c 24 00 09 00 	mov    0x900(%rsp),%rcx
  216b0c:	00 
  216b0d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  216b11:	48 8b 8c 24 08 09 00 	mov    0x908(%rsp),%rcx
  216b18:	00 
  216b19:	48 89 48 10          	mov    %rcx,0x10(%rax)
  216b1d:	48 8b 8c 24 10 09 00 	mov    0x910(%rsp),%rcx
  216b24:	00 
  216b25:	48 89 48 18          	mov    %rcx,0x18(%rax)
  216b29:	48 83 c0 20          	add    $0x20,%rax
  216b2d:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  216b34:	00 
  216b35:	eb 9e                	jmp    216ad5 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0xc5>
  216b37:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  216b3e:	00 
        for region in memory_map.iter() {
  216b3f:	e8 ec b3 01 00       	callq  231f30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  216b44:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  216b4b:	00 
  216b4c:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  216b53:	00 
  216b54:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  216b5b:	00 
  216b5c:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  216b63:	00 
  216b64:	e8 67 2e 00 00       	callq  2199d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0f913f2fa7a5903cE>
  216b69:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  216b70:	00 
  216b71:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  216b78:	00 
  216b79:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  216b80:	00 
  216b81:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  216b88:	00 
  216b89:	e8 f2 28 00 00       	callq  219480 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h878ea9e8fd23aa8cE>
  216b8e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  216b95:	00 
  216b96:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  216b9d:	00 
  216b9e:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  216ba5:	00 
  216ba6:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  216bad:	00 
  216bae:	48 89 8c 24 18 09 00 	mov    %rcx,0x918(%rsp)
  216bb5:	00 
  216bb6:	48 89 84 24 20 09 00 	mov    %rax,0x920(%rsp)
  216bbd:	00 
  216bbe:	48 8d bc 24 18 09 00 	lea    0x918(%rsp),%rdi
  216bc5:	00 
  216bc6:	e8 d5 2a 00 00       	callq  2196a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E>
  216bcb:	48 89 84 24 28 09 00 	mov    %rax,0x928(%rsp)
  216bd2:	00 
  216bd3:	48 8b 84 24 28 09 00 	mov    0x928(%rsp),%rax
  216bda:	00 
  216bdb:	48 85 c0             	test   %rax,%rax
  216bde:	0f 95 c0             	setne  %al
  216be1:	0f b6 c0             	movzbl %al,%eax
  216be4:	74 06                	je     216bec <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1dc>
  216be6:	eb 00                	jmp    216be8 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1d8>
  216be8:	eb 2b                	jmp    216c15 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x205>
  216bea:	0f 0b                	ud2    
        log::info!("Found {} memory regions as usable.", index + 1);
  216bec:	48 c7 84 24 c8 09 00 	movq   $0x3,0x9c8(%rsp)
  216bf3:	00 03 00 00 00 
  216bf8:	48 8d bc 24 c8 09 00 	lea    0x9c8(%rsp),%rdi
  216bff:	00 
  216c00:	48 8d 35 31 9a fe ff 	lea    -0x165cf(%rip),%rsi        # 200638 <str.0+0x118>
  216c07:	e8 e4 ae ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216c0c:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  216c10:	e9 a9 02 00 00       	jmpq   216ebe <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4ae>
        for region in memory_map.iter() {
  216c15:	48 8b bc 24 28 09 00 	mov    0x928(%rsp),%rdi
  216c1c:	00 
  216c1d:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  216c22:	48 89 bc 24 38 12 00 	mov    %rdi,0x1238(%rsp)
  216c29:	00 
  216c2a:	48 89 bc 24 40 12 00 	mov    %rdi,0x1240(%rsp)
  216c31:	00 
  216c32:	48 89 bc 24 48 12 00 	mov    %rdi,0x1248(%rsp)
  216c39:	00 
            if region.kind == MemoryRegionKind::Usable {
  216c3a:	48 83 c7 10          	add    $0x10,%rdi
  216c3e:	48 8d 35 db 99 fe ff 	lea    -0x16625(%rip),%rsi        # 200620 <str.0+0x100>
  216c45:	e8 56 10 00 00       	callq  217ca0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E>
  216c4a:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  216c4e:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  216c52:	a8 01                	test   $0x1,%al
  216c54:	75 05                	jne    216c5b <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x24b>
  216c56:	e9 63 ff ff ff       	jmpq   216bbe <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1ae>
                log::debug!(
  216c5b:	48 c7 84 24 30 09 00 	movq   $0x4,0x930(%rsp)
  216c62:	00 04 00 00 00 
  216c67:	48 8d bc 24 30 09 00 	lea    0x930(%rsp),%rdi
  216c6e:	00 
  216c6f:	48 8d 35 c2 99 fe ff 	lea    -0x1663e(%rip),%rsi        # 200638 <str.0+0x118>
  216c76:	e8 75 ae ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216c7b:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  216c7f:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  216c83:	a8 01                	test   $0x1,%al
  216c85:	75 0c                	jne    216c93 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x283>
  216c87:	eb 00                	jmp    216c89 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x279>
  216c89:	c6 84 24 3f 09 00 00 	movb   $0x0,0x93f(%rsp)
  216c90:	00 
  216c91:	eb 5a                	jmp    216ced <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x2dd>
  216c93:	c6 84 24 7f 12 00 00 	movb   $0x0,0x127f(%rsp)
  216c9a:	00 
  216c9b:	48 8b 3d 6e 44 02 00 	mov    0x2446e(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216ca2:	0f b6 b4 24 7f 12 00 	movzbl 0x127f(%rsp),%esi
  216ca9:	00 
  216caa:	e8 11 20 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  216caf:	48 89 84 24 80 12 00 	mov    %rax,0x1280(%rsp)
  216cb6:	00 
  216cb7:	48 8b 84 24 80 12 00 	mov    0x1280(%rsp),%rax
  216cbe:	00 
  216cbf:	48 89 84 24 40 09 00 	mov    %rax,0x940(%rsp)
  216cc6:	00 
  216cc7:	48 8d bc 24 30 09 00 	lea    0x930(%rsp),%rdi
  216cce:	00 
  216ccf:	48 8d b4 24 40 09 00 	lea    0x940(%rsp),%rsi
  216cd6:	00 
  216cd7:	e8 14 ae ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216cdc:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  216ce0:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  216ce4:	24 01                	and    $0x1,%al
  216ce6:	88 84 24 3f 09 00 00 	mov    %al,0x93f(%rsp)
  216ced:	f6 84 24 3f 09 00 00 	testb  $0x1,0x93f(%rsp)
  216cf4:	01 
  216cf5:	75 1e                	jne    216d15 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x305>
  216cf7:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  216cfc:	48 8b 30             	mov    (%rax),%rsi
  216cff:	48 8b 50 08          	mov    0x8(%rax),%rdx
  216d03:	48 8d bc 24 a8 09 00 	lea    0x9a8(%rsp),%rdi
  216d0a:	00 
  216d0b:	e8 30 f4 ff ff       	callq  216140 <_ZN9r3_kernel2mm3phy12MemoryRegion3new17h645bfb75c5a46233E>
  216d10:	e9 ee 00 00 00       	jmpq   216e03 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x3f3>
  216d15:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                    region.start,
  216d1a:	48 89 c1             	mov    %rax,%rcx
                    region.end
  216d1d:	48 83 c0 08          	add    $0x8,%rax
                log::debug!(
  216d21:	48 89 8c 24 98 09 00 	mov    %rcx,0x998(%rsp)
  216d28:	00 
  216d29:	48 89 84 24 a0 09 00 	mov    %rax,0x9a0(%rsp)
  216d30:	00 
  216d31:	48 8b bc 24 98 09 00 	mov    0x998(%rsp),%rdi
  216d38:	00 
  216d39:	48 89 bc 24 50 12 00 	mov    %rdi,0x1250(%rsp)
  216d40:	00 
  216d41:	48 8b 84 24 a0 09 00 	mov    0x9a0(%rsp),%rax
  216d48:	00 
  216d49:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  216d4e:	48 89 84 24 58 12 00 	mov    %rax,0x1258(%rsp)
  216d55:	00 
  216d56:	48 8b 35 bb 43 02 00 	mov    0x243bb(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  216d5d:	e8 de 80 ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  216d62:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  216d67:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  216d6c:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  216d71:	48 8b 35 a0 43 02 00 	mov    0x243a0(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  216d78:	e8 c3 80 ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  216d7d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  216d82:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  216d87:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  216d8c:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  216d91:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  216d96:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  216d9b:	48 89 b4 24 78 09 00 	mov    %rsi,0x978(%rsp)
  216da2:	00 
  216da3:	48 89 94 24 80 09 00 	mov    %rdx,0x980(%rsp)
  216daa:	00 
  216dab:	48 89 8c 24 88 09 00 	mov    %rcx,0x988(%rsp)
  216db2:	00 
  216db3:	48 89 84 24 90 09 00 	mov    %rax,0x990(%rsp)
  216dba:	00 
  216dbb:	48 8d 8c 24 78 09 00 	lea    0x978(%rsp),%rcx
  216dc2:	00 
  216dc3:	48 8d bc 24 48 09 00 	lea    0x948(%rsp),%rdi
  216dca:	00 
  216dcb:	48 8d 35 36 19 02 00 	lea    0x21936(%rip),%rsi        # 238708 <memcmp+0x2158>
  216dd2:	ba 03 00 00 00       	mov    $0x3,%edx
  216dd7:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  216ddd:	e8 de f4 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  216de2:	48 8b b4 24 30 09 00 	mov    0x930(%rsp),%rsi
  216de9:	00 
  216dea:	48 8d bc 24 48 09 00 	lea    0x948(%rsp),%rdi
  216df1:	00 
  216df2:	48 8d 15 3f 19 02 00 	lea    0x2193f(%rip),%rdx        # 238738 <memcmp+0x2188>
  216df9:	e8 f2 97 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  216dfe:	e9 f4 fe ff ff       	jmpq   216cf7 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x2e7>
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  216e03:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  216e0a:	00 
  216e0b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  216e10:	48 83 f8 40          	cmp    $0x40,%rax
  216e14:	0f 92 c0             	setb   %al
  216e17:	a8 01                	test   $0x1,%al
  216e19:	75 02                	jne    216e1d <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x40d>
  216e1b:	eb 5d                	jmp    216e7a <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x46a>
  216e1d:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  216e22:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  216e29:	00 
  216e2a:	48 c1 e1 05          	shl    $0x5,%rcx
  216e2e:	48 01 c8             	add    %rcx,%rax
  216e31:	48 8b 8c 24 a8 09 00 	mov    0x9a8(%rsp),%rcx
  216e38:	00 
  216e39:	48 89 08             	mov    %rcx,(%rax)
  216e3c:	48 8b 8c 24 b0 09 00 	mov    0x9b0(%rsp),%rcx
  216e43:	00 
  216e44:	48 89 48 08          	mov    %rcx,0x8(%rax)
  216e48:	48 8b 8c 24 b8 09 00 	mov    0x9b8(%rsp),%rcx
  216e4f:	00 
  216e50:	48 89 48 10          	mov    %rcx,0x10(%rax)
  216e54:	48 8b 8c 24 c0 09 00 	mov    0x9c0(%rsp),%rcx
  216e5b:	00 
  216e5c:	48 89 48 18          	mov    %rcx,0x18(%rax)
                index = index + 1;
  216e60:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  216e67:	00 
  216e68:	48 83 c0 01          	add    $0x1,%rax
  216e6c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  216e71:	0f 92 c0             	setb   %al
  216e74:	a8 01                	test   $0x1,%al
  216e76:	75 2c                	jne    216ea4 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x494>
  216e78:	eb 18                	jmp    216e92 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x482>
  216e7a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                memory_regions[index] = MemoryRegion::new(region.start, region.end);
  216e7f:	48 8d 15 ea 18 02 00 	lea    0x218ea(%rip),%rdx        # 238770 <memcmp+0x21c0>
  216e86:	be 40 00 00 00       	mov    $0x40,%esi
  216e8b:	e8 20 c6 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  216e90:	0f 0b                	ud2    
  216e92:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                index = index + 1;
  216e97:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  216e9e:	00 
            if region.kind == MemoryRegionKind::Usable {
  216e9f:	e9 1a fd ff ff       	jmpq   216bbe <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x1ae>
                index = index + 1;
  216ea4:	48 8d 3d 85 a1 fe ff 	lea    -0x15e7b(%rip),%rdi        # 201030 <str.2>
  216eab:	48 8d 15 d6 18 02 00 	lea    0x218d6(%rip),%rdx        # 238788 <memcmp+0x21d8>
  216eb2:	be 1c 00 00 00       	mov    $0x1c,%esi
  216eb7:	e8 a4 c5 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  216ebc:	0f 0b                	ud2    
  216ebe:	8a 44 24 7f          	mov    0x7f(%rsp),%al
        log::info!("Found {} memory regions as usable.", index + 1);
  216ec2:	a8 01                	test   $0x1,%al
  216ec4:	75 0c                	jne    216ed2 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4c2>
  216ec6:	eb 00                	jmp    216ec8 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x4b8>
  216ec8:	c6 84 24 d7 09 00 00 	movb   $0x0,0x9d7(%rsp)
  216ecf:	00 
  216ed0:	eb 5a                	jmp    216f2c <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x51c>
  216ed2:	c6 84 24 6f 12 00 00 	movb   $0x0,0x126f(%rsp)
  216ed9:	00 
  216eda:	48 8b 3d 2f 42 02 00 	mov    0x2422f(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  216ee1:	0f b6 b4 24 6f 12 00 	movzbl 0x126f(%rsp),%esi
  216ee8:	00 
  216ee9:	e8 d2 1d 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  216eee:	48 89 84 24 70 12 00 	mov    %rax,0x1270(%rsp)
  216ef5:	00 
  216ef6:	48 8b 84 24 70 12 00 	mov    0x1270(%rsp),%rax
  216efd:	00 
  216efe:	48 89 84 24 d8 09 00 	mov    %rax,0x9d8(%rsp)
  216f05:	00 
  216f06:	48 8d bc 24 c8 09 00 	lea    0x9c8(%rsp),%rdi
  216f0d:	00 
  216f0e:	48 8d b4 24 d8 09 00 	lea    0x9d8(%rsp),%rsi
  216f15:	00 
  216f16:	e8 d5 ab ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  216f1b:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  216f1f:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  216f23:	24 01                	and    $0x1,%al
  216f25:	88 84 24 d7 09 00 00 	mov    %al,0x9d7(%rsp)
  216f2c:	f6 84 24 d7 09 00 00 	testb  $0x1,0x9d7(%rsp)
  216f33:	01 
  216f34:	75 65                	jne    216f9b <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x58b>
            memory_regions,
  216f36:	48 8d bc 24 30 0a 00 	lea    0xa30(%rsp),%rdi
  216f3d:	00 
  216f3e:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
  216f45:	00 
  216f46:	ba 00 08 00 00       	mov    $0x800,%edx
  216f4b:	e8 10 f6 01 00       	callq  236560 <memcpy>
  216f50:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  216f57:	00 
            regions: index,
  216f58:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  216f5f:	00 
  216f60:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        LinearFrameAllocator {
  216f65:	48 8d b4 24 30 0a 00 	lea    0xa30(%rsp),%rsi
  216f6c:	00 
  216f6d:	ba 00 08 00 00       	mov    $0x800,%edx
  216f72:	e8 e9 f5 01 00       	callq  236560 <memcpy>
  216f77:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  216f7c:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  216f83:	00 
  216f84:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  216f8b:	00 
  216f8c:	48 89 91 00 08 00 00 	mov    %rdx,0x800(%rcx)
    }
  216f93:	48 81 c4 88 12 00 00 	add    $0x1288,%rsp
  216f9a:	c3                   	retq   
        log::info!("Found {} memory regions as usable.", index + 1);
  216f9b:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  216fa2:	00 
  216fa3:	48 83 c0 01          	add    $0x1,%rax
  216fa7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  216fac:	0f 92 c0             	setb   %al
  216faf:	a8 01                	test   $0x1,%al
  216fb1:	75 45                	jne    216ff8 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x5e8>
  216fb3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  216fb8:	48 89 84 24 28 0a 00 	mov    %rax,0xa28(%rsp)
  216fbf:	00 
  216fc0:	48 8d 84 24 28 0a 00 	lea    0xa28(%rsp),%rax
  216fc7:	00 
  216fc8:	48 89 84 24 20 0a 00 	mov    %rax,0xa20(%rsp)
  216fcf:	00 
  216fd0:	48 8b bc 24 20 0a 00 	mov    0xa20(%rsp),%rdi
  216fd7:	00 
  216fd8:	48 89 bc 24 60 12 00 	mov    %rdi,0x1260(%rsp)
  216fdf:	00 
  216fe0:	48 8b 35 41 41 02 00 	mov    0x24141(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  216fe7:	e8 94 7d ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  216fec:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  216ff1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  216ff6:	eb 1a                	jmp    217012 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x602>
  216ff8:	48 8d 3d 31 a0 fe ff 	lea    -0x15fcf(%rip),%rdi        # 201030 <str.2>
  216fff:	48 8d 15 ba 17 02 00 	lea    0x217ba(%rip),%rdx        # 2387c0 <memcmp+0x2210>
  217006:	be 1c 00 00 00       	mov    $0x1c,%esi
  21700b:	e8 50 c4 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217010:	0f 0b                	ud2    
  217012:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217017:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21701c:	48 89 8c 24 10 0a 00 	mov    %rcx,0xa10(%rsp)
  217023:	00 
  217024:	48 89 84 24 18 0a 00 	mov    %rax,0xa18(%rsp)
  21702b:	00 
  21702c:	48 8d 8c 24 10 0a 00 	lea    0xa10(%rsp),%rcx
  217033:	00 
  217034:	48 8d bc 24 e0 09 00 	lea    0x9e0(%rsp),%rdi
  21703b:	00 
  21703c:	48 8d 35 5d 17 02 00 	lea    0x2175d(%rip),%rsi        # 2387a0 <memcmp+0x21f0>
  217043:	ba 02 00 00 00       	mov    $0x2,%edx
  217048:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21704e:	e8 6d f2 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  217053:	48 8b b4 24 c8 09 00 	mov    0x9c8(%rsp),%rsi
  21705a:	00 
  21705b:	48 8d bc 24 e0 09 00 	lea    0x9e0(%rsp),%rdi
  217062:	00 
  217063:	48 8d 15 6e 17 02 00 	lea    0x2176e(%rip),%rdx        # 2387d8 <memcmp+0x2228>
  21706a:	e8 81 95 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21706f:	e9 c2 fe ff ff       	jmpq   216f36 <_ZN9r3_kernel2mm3phy20LinearFrameAllocator4init17h6ba61608780df0c8E+0x526>
  217074:	cc                   	int3   
  217075:	cc                   	int3   
  217076:	cc                   	int3   
  217077:	cc                   	int3   
  217078:	cc                   	int3   
  217079:	cc                   	int3   
  21707a:	cc                   	int3   
  21707b:	cc                   	int3   
  21707c:	cc                   	int3   
  21707d:	cc                   	int3   
  21707e:	cc                   	int3   
  21707f:	cc                   	int3   

0000000000217080 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE>:
    fn frame_alloc(&mut self) -> Option<Frame> {
  217080:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  217087:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21708c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
        for region_idx in 0..self.regions {
  217091:	48 8b 87 00 08 00 00 	mov    0x800(%rdi),%rax
  217098:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21709f:	00 00 
  2170a1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2170a6:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2170ab:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2170b0:	e8 bb 59 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  2170b5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2170ba:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2170bf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2170c4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2170c9:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2170ce:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2170d3:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2170d8:	e8 63 59 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  2170dd:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  2170e2:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2170e7:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2170ec:	48 85 c0             	test   %rax,%rax
  2170ef:	74 06                	je     2170f7 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x77>
  2170f1:	eb 00                	jmp    2170f3 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x73>
  2170f3:	eb 10                	jmp    217105 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x85>
  2170f5:	0f 0b                	ud2    
        None
  2170f7:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  2170fe:	00 00 
    }
  217100:	e9 fc 00 00 00       	jmpq   217201 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x181>
        for region_idx in 0..self.regions {
  217105:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21710a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21710f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  217116:	00 
  217117:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21711e:	00 
  21711f:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  217126:	00 
            if self.memory_regions[region_idx].can_allocate(1) {
  217127:	48 83 f8 40          	cmp    $0x40,%rax
  21712b:	0f 92 c0             	setb   %al
  21712e:	a8 01                	test   $0x1,%al
  217130:	75 02                	jne    217134 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xb4>
  217132:	eb 21                	jmp    217155 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xd5>
  217134:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217139:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21713e:	48 c1 e0 05          	shl    $0x5,%rax
  217142:	48 01 c7             	add    %rax,%rdi
  217145:	be 01 00 00 00       	mov    $0x1,%esi
  21714a:	e8 a1 f1 ff ff       	callq  2162f0 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  21714f:	88 44 24 07          	mov    %al,0x7(%rsp)
  217153:	eb 18                	jmp    21716d <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xed>
  217155:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21715a:	48 8d 15 af 16 02 00 	lea    0x216af(%rip),%rdx        # 238810 <memcmp+0x2260>
  217161:	be 40 00 00 00       	mov    $0x40,%esi
  217166:	e8 45 c3 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21716b:	0f 0b                	ud2    
  21716d:	8a 44 24 07          	mov    0x7(%rsp),%al
  217171:	a8 01                	test   $0x1,%al
  217173:	75 05                	jne    21717a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0xfa>
  217175:	e9 59 ff ff ff       	jmpq   2170d3 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x53>
  21717a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                let frame_opt = self.memory_regions[region_idx].allocate_n(1, false);
  21717f:	48 83 f8 40          	cmp    $0x40,%rax
  217183:	0f 92 c0             	setb   %al
  217186:	a8 01                	test   $0x1,%al
  217188:	75 02                	jne    21718c <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x10c>
  21718a:	eb 49                	jmp    2171d5 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x155>
  21718c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  217191:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217196:	48 c1 e0 05          	shl    $0x5,%rax
  21719a:	48 01 c7             	add    %rax,%rdi
  21719d:	be 01 00 00 00       	mov    $0x1,%esi
  2171a2:	31 d2                	xor    %edx,%edx
  2171a4:	e8 a7 f3 ff ff       	callq  216550 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>
  2171a9:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  2171b0:	00 
  2171b1:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2171b8:	00 
  2171b9:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2171c0:	00 
  2171c1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2171c6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2171cd:	00 
  2171ce:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2171d3:	eb 18                	jmp    2171ed <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE+0x16d>
  2171d5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2171da:	48 8d 15 47 16 02 00 	lea    0x21647(%rip),%rdx        # 238828 <memcmp+0x2278>
  2171e1:	be 40 00 00 00       	mov    $0x40,%esi
  2171e6:	e8 c5 c2 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2171eb:	0f 0b                	ud2    
                return frame_opt;
  2171ed:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2171f2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2171f7:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2171fc:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  217201:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217206:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21720b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  217212:	c3                   	retq   
  217213:	cc                   	int3   
  217214:	cc                   	int3   
  217215:	cc                   	int3   
  217216:	cc                   	int3   
  217217:	cc                   	int3   
  217218:	cc                   	int3   
  217219:	cc                   	int3   
  21721a:	cc                   	int3   
  21721b:	cc                   	int3   
  21721c:	cc                   	int3   
  21721d:	cc                   	int3   
  21721e:	cc                   	int3   
  21721f:	cc                   	int3   

0000000000217220 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE>:
    fn frame_alloc_n(&mut self, n: usize, align_huge_page: bool) -> Option<Frame> {
  217220:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  217227:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21722c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217231:	88 d0                	mov    %dl,%al
  217233:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  217237:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  21723e:	00 
  21723f:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  217246:	00 
  217247:	24 01                	and    $0x1,%al
  217249:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
        for region_idx in 0..self.regions {
  217250:	48 8b 87 00 08 00 00 	mov    0x800(%rdi),%rax
  217257:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  21725e:	00 00 
  217260:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  217265:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21726a:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21726f:	e8 fc 57 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  217274:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217279:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21727e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217283:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  217288:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21728d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  217292:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  217297:	e8 a4 57 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21729c:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2172a1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2172a6:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2172ab:	48 85 c0             	test   %rax,%rax
  2172ae:	74 06                	je     2172b6 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x96>
  2172b0:	eb 00                	jmp    2172b2 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x92>
  2172b2:	eb 10                	jmp    2172c4 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xa4>
  2172b4:	0f 0b                	ud2    
        None
  2172b6:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  2172bd:	00 00 
    }
  2172bf:	e9 5d 01 00 00       	jmpq   217421 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x201>
  2172c4:	8a 44 24 1f          	mov    0x1f(%rsp),%al
        for region_idx in 0..self.regions {
  2172c8:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2172cd:	48 89 0c 24          	mov    %rcx,(%rsp)
  2172d1:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  2172d8:	00 
  2172d9:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  2172e0:	00 
  2172e1:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  2172e8:	00 
            let can_allocate = if !align_huge_page {
  2172e9:	34 ff                	xor    $0xff,%al
  2172eb:	a8 01                	test   $0x1,%al
  2172ed:	75 11                	jne    217300 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xe0>
  2172ef:	48 8b 04 24          	mov    (%rsp),%rax
                self.memory_regions[region_idx].can_allocate_aligned(n)
  2172f3:	48 83 f8 40          	cmp    $0x40,%rax
  2172f7:	0f 92 c0             	setb   %al
  2172fa:	a8 01                	test   $0x1,%al
  2172fc:	75 58                	jne    217356 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x136>
  2172fe:	eb 78                	jmp    217378 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x158>
  217300:	48 8b 04 24          	mov    (%rsp),%rax
                self.memory_regions[region_idx].can_allocate(n)
  217304:	48 83 f8 40          	cmp    $0x40,%rax
  217308:	0f 92 c0             	setb   %al
  21730b:	a8 01                	test   $0x1,%al
  21730d:	75 02                	jne    217311 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0xf1>
  21730f:	eb 22                	jmp    217333 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x113>
  217311:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  217316:	48 8b 04 24          	mov    (%rsp),%rax
  21731a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21731f:	48 c1 e0 05          	shl    $0x5,%rax
  217323:	48 01 c7             	add    %rax,%rdi
  217326:	e8 c5 ef ff ff       	callq  2162f0 <_ZN9r3_kernel2mm3phy12MemoryRegion12can_allocate17hf0989d3648fef334E>
  21732b:	24 01                	and    $0x1,%al
  21732d:	88 44 24 77          	mov    %al,0x77(%rsp)
  217331:	eb 17                	jmp    21734a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x12a>
  217333:	48 8b 3c 24          	mov    (%rsp),%rdi
  217337:	48 8d 15 02 15 02 00 	lea    0x21502(%rip),%rdx        # 238840 <memcmp+0x2290>
  21733e:	be 40 00 00 00       	mov    $0x40,%esi
  217343:	e8 68 c1 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  217348:	0f 0b                	ud2    
            if can_allocate {
  21734a:	f6 44 24 77 01       	testb  $0x1,0x77(%rsp)
  21734f:	75 3e                	jne    21738f <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x16f>
  217351:	e9 3c ff ff ff       	jmpq   217292 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x72>
  217356:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21735b:	48 8b 04 24          	mov    (%rsp),%rax
  21735f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                self.memory_regions[region_idx].can_allocate_aligned(n)
  217364:	48 c1 e0 05          	shl    $0x5,%rax
  217368:	48 01 c7             	add    %rax,%rdi
  21736b:	e8 e0 ef ff ff       	callq  216350 <_ZN9r3_kernel2mm3phy12MemoryRegion20can_allocate_aligned17h0a23c2c21ce9fb92E>
  217370:	24 01                	and    $0x1,%al
  217372:	88 44 24 77          	mov    %al,0x77(%rsp)
  217376:	eb d2                	jmp    21734a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x12a>
  217378:	48 8b 3c 24          	mov    (%rsp),%rdi
  21737c:	48 8d 15 d5 14 02 00 	lea    0x214d5(%rip),%rdx        # 238858 <memcmp+0x22a8>
  217383:	be 40 00 00 00       	mov    $0x40,%esi
  217388:	e8 23 c1 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21738d:	0f 0b                	ud2    
  21738f:	48 8b 04 24          	mov    (%rsp),%rax
                let frame_opt = self.memory_regions[region_idx].allocate_n(n, align_huge_page);
  217393:	48 83 f8 40          	cmp    $0x40,%rax
  217397:	0f 92 c0             	setb   %al
  21739a:	a8 01                	test   $0x1,%al
  21739c:	75 02                	jne    2173a0 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x180>
  21739e:	eb 53                	jmp    2173f3 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x1d3>
  2173a0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2173a5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2173a9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2173ae:	48 8b 0c 24          	mov    (%rsp),%rcx
  2173b2:	48 c1 e1 05          	shl    $0x5,%rcx
  2173b6:	48 01 cf             	add    %rcx,%rdi
  2173b9:	0f b6 d0             	movzbl %al,%edx
  2173bc:	83 e2 01             	and    $0x1,%edx
  2173bf:	e8 8c f1 ff ff       	callq  216550 <_ZN9r3_kernel2mm3phy12MemoryRegion10allocate_n17hc1d052bc7acc9e34E>
  2173c4:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  2173cb:	00 
  2173cc:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  2173d3:	00 
  2173d4:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  2173db:	00 
  2173dc:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2173e1:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2173e8:	00 
  2173e9:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2173f0:	00 
  2173f1:	eb 17                	jmp    21740a <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE+0x1ea>
  2173f3:	48 8b 3c 24          	mov    (%rsp),%rdi
  2173f7:	48 8d 15 72 14 02 00 	lea    0x21472(%rip),%rdx        # 238870 <memcmp+0x22c0>
  2173fe:	be 40 00 00 00       	mov    $0x40,%esi
  217403:	e8 a8 c0 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  217408:	0f 0b                	ud2    
                return frame_opt;
  21740a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21740f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  217414:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21741b:	00 
  21741c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  217421:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  217426:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21742b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  217432:	c3                   	retq   
  217433:	cc                   	int3   
  217434:	cc                   	int3   
  217435:	cc                   	int3   
  217436:	cc                   	int3   
  217437:	cc                   	int3   
  217438:	cc                   	int3   
  217439:	cc                   	int3   
  21743a:	cc                   	int3   
  21743b:	cc                   	int3   
  21743c:	cc                   	int3   
  21743d:	cc                   	int3   
  21743e:	cc                   	int3   
  21743f:	cc                   	int3   

0000000000217440 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE>:
}

/// a function that lazy initializes LIEAR_ALLOCATOR
pub fn setup_physical_memory() {
  217440:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  217447:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  21744e:	00 00 
  217450:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  217455:	48 8d 35 dc 91 fe ff 	lea    -0x16e24(%rip),%rsi        # 200638 <str.0+0x118>
  21745c:	e8 8f a6 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  217461:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  217465:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  217469:	a8 01                	test   $0x1,%al
  21746b:	75 09                	jne    217476 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x36>
  21746d:	eb 00                	jmp    21746f <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x2f>
  21746f:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  217474:	eb 4e                	jmp    2174c4 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x84>
  217476:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  21747d:	00 
  21747e:	48 8b 3d 8b 3c 02 00 	mov    0x23c8b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  217485:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  21748c:	00 
  21748d:	e8 2e 18 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  217492:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  217499:	00 
  21749a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  2174a1:	00 
  2174a2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2174a7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2174ac:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  2174b1:	e8 3a a6 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2174b6:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  2174ba:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  2174be:	24 01                	and    $0x1,%al
  2174c0:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2174c4:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  2174c9:	75 08                	jne    2174d3 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x93>
        "Set-up Linear memory allocator for Physical memory successfull, regions={}",
        LINEAR_ALLOCATOR.lock().regions
    );
}
  2174cb:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  2174d2:	c3                   	retq   
        LINEAR_ALLOCATOR.lock().regions
  2174d3:	48 8d 3d 5f 9c fe ff 	lea    -0x163a1(%rip),%rdi        # 201139 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  2174da:	e8 31 02 00 00       	callq  217710 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  2174df:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2174e4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2174e9:	e8 a2 4e 01 00       	callq  22c390 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  2174ee:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  2174f5:	00 
  2174f6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2174fd:	00 
  2174fe:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  217505:	00 
  217506:	e8 d5 4f 01 00       	callq  22c4e0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3348492b3ac9aa02E>
  21750b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217510:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  217515:	48 05 00 08 00 00    	add    $0x800,%rax
    log::info!(
  21751b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  217522:	00 
  217523:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21752a:	00 
  21752b:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  217532:	00 
  217533:	48 8b 35 ee 3b 02 00 	mov    0x23bee(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  21753a:	e8 41 78 ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  21753f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217544:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  217549:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21754e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  217553:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  217558:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21755f:	00 
  217560:	48 8d 4c 24 78       	lea    0x78(%rsp),%rcx
  217565:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21756a:	48 8d 35 17 13 02 00 	lea    0x21317(%rip),%rsi        # 238888 <memcmp+0x22d8>
  217571:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  217577:	4c 89 c2             	mov    %r8,%rdx
  21757a:	e8 41 ed fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21757f:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  217584:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  217589:	48 8d 15 08 13 02 00 	lea    0x21308(%rip),%rdx        # 238898 <memcmp+0x22e8>
  217590:	e8 5b 90 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  217595:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21759c:	00 
  21759d:	e8 9e 45 ff ff       	callq  20bb40 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  2175a2:	e9 24 ff ff ff       	jmpq   2174cb <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE+0x8b>
  2175a7:	cc                   	int3   
  2175a8:	cc                   	int3   
  2175a9:	cc                   	int3   
  2175aa:	cc                   	int3   
  2175ab:	cc                   	int3   
  2175ac:	cc                   	int3   
  2175ad:	cc                   	int3   
  2175ae:	cc                   	int3   
  2175af:	cc                   	int3   

00000000002175b0 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager5alloc17hc6e626f75c02576bE>:

pub struct PhysicalMemoryManager;

impl PhysicalMemoryManager {
    pub fn alloc() -> Option<Frame> {
  2175b0:	48 83 ec 48          	sub    $0x48,%rsp
        LINEAR_ALLOCATOR.lock().frame_alloc()
  2175b4:	48 8d 3d 7e 9b fe ff 	lea    -0x16482(%rip),%rdi        # 201139 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  2175bb:	e8 50 01 00 00       	callq  217710 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  2175c0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2175c5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2175ca:	e8 c1 4d 01 00       	callq  22c390 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  2175cf:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2175d4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2175d9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2175de:	e8 7d 4f 01 00       	callq  22c560 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>
  2175e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2175e8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2175ed:	e8 8e fa ff ff       	callq  217080 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$11frame_alloc17h30fa2f29adfee4fbE>
  2175f2:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2175f7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2175fc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  217601:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217606:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21760b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  217610:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  217615:	e8 26 45 ff ff       	callq  20bb40 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  21761a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21761f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  217624:	48 83 c4 48          	add    $0x48,%rsp
  217628:	c3                   	retq   
  217629:	cc                   	int3   
  21762a:	cc                   	int3   
  21762b:	cc                   	int3   
  21762c:	cc                   	int3   
  21762d:	cc                   	int3   
  21762e:	cc                   	int3   
  21762f:	cc                   	int3   

0000000000217630 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE>:

    pub fn alloc_huge_page() -> Option<Frame> {
  217630:	48 83 ec 58          	sub    $0x58,%rsp
        let n_frames = (2 * mm::MemorySizes::OneMib as usize) / PageSize::Page4KiB.size() as usize;
  217634:	48 8d 3d 94 99 fe ff 	lea    -0x1666c(%rip),%rdi        # 200fcf <_ZN9r3_kernel7drivers7display11framebuffer11FRAMEBUFFER17hc215695e22c3801bE+0xc4>
  21763b:	e8 20 49 ff ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  217640:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217645:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21764a:	48 83 f8 00          	cmp    $0x0,%rax
  21764e:	0f 94 c0             	sete   %al
  217651:	a8 01                	test   $0x1,%al
  217653:	75 2c                	jne    217681 <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE+0x51>
  217655:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21765a:	b8 00 00 20 00       	mov    $0x200000,%eax
  21765f:	31 d2                	xor    %edx,%edx
  217661:	48 f7 f1             	div    %rcx
  217664:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217669:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        LINEAR_ALLOCATOR.lock().frame_alloc_n(n_frames, true)
  21766e:	48 8d 3d c4 9a fe ff 	lea    -0x1653c(%rip),%rdi        # 201139 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE>
  217675:	e8 96 00 00 00       	callq  217710 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>
  21767a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21767f:	eb 1a                	jmp    21769b <_ZN9r3_kernel2mm3phy21PhysicalMemoryManager15alloc_huge_page17h41b40741a29dfacaE+0x6b>
        let n_frames = (2 * mm::MemorySizes::OneMib as usize) / PageSize::Page4KiB.size() as usize;
  217681:	48 8d 3d 88 99 fe ff 	lea    -0x16678(%rip),%rdi        # 201010 <str.1>
  217688:	48 8d 15 41 12 02 00 	lea    0x21241(%rip),%rdx        # 2388d0 <memcmp+0x2320>
  21768f:	be 19 00 00 00       	mov    $0x19,%esi
  217694:	e8 c7 bd 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  217699:	0f 0b                	ud2    
  21769b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        LINEAR_ALLOCATOR.lock().frame_alloc_n(n_frames, true)
  2176a0:	e8 eb 4c 01 00       	callq  22c390 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>
  2176a5:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2176aa:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2176af:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2176b4:	e8 a7 4e 01 00       	callq  22c560 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>
  2176b9:	48 89 04 24          	mov    %rax,(%rsp)
  2176bd:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2176c2:	48 8b 3c 24          	mov    (%rsp),%rdi
  2176c6:	ba 01 00 00 00       	mov    $0x1,%edx
  2176cb:	e8 50 fb ff ff       	callq  217220 <_ZN98_$LT$r3_kernel..mm..phy..LinearFrameAllocator$u20$as$u20$r3_kernel..mm..phy..PhyFrameAllocator$GT$13frame_alloc_n17h57d9a89519b3cc7fE>
  2176d0:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  2176d5:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2176da:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2176df:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2176e4:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2176e9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    }
  2176ee:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2176f3:	e8 48 44 ff ff       	callq  20bb40 <_ZN4core3ptr92drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..mm..phy..LinearFrameAllocator$GT$$GT$17hcd1932d74be21665E>
  2176f8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2176fd:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  217702:	48 83 c4 58          	add    $0x58,%rsp
  217706:	c3                   	retq   
  217707:	cc                   	int3   
  217708:	cc                   	int3   
  217709:	cc                   	int3   
  21770a:	cc                   	int3   
  21770b:	cc                   	int3   
  21770c:	cc                   	int3   
  21770d:	cc                   	int3   
  21770e:	cc                   	int3   
  21770f:	cc                   	int3   

0000000000217710 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfb1a9a9665f6d9c4E>:
            fn deref(&self) -> &$T {
  217710:	48 83 ec 18          	sub    $0x18,%rsp
  217714:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217719:	48 8d 05 f8 4c 02 00 	lea    0x24cf8(%rip),%rax        # 23c418 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h16851c2199cf9ce6E>
  217720:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217725:	48 8d 3d ec 4c 02 00 	lea    0x24cec(%rip),%rdi        # 23c418 <_ZN80_$LT$r3_kernel..mm..phy..LINEAR_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h16851c2199cf9ce6E>
  21772c:	e8 3f 17 ff ff       	callq  208e70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8748ef93490369bcE>
  217731:	48 89 04 24          	mov    %rax,(%rsp)
  217735:	48 8b 04 24          	mov    (%rsp),%rax
            }
  217739:	48 83 c4 18          	add    $0x18,%rsp
  21773d:	c3                   	retq   
  21773e:	cc                   	int3   
  21773f:	cc                   	int3   

0000000000217740 <_ZN4core4hint21unreachable_unchecked17h3d568e9cb7ce9039E>:
#[stable(feature = "unreachable", since = "1.27.0")]
#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
pub const unsafe fn unreachable_unchecked() -> ! {
    // SAFETY: the safety contract for `intrinsics::unreachable` must
    // be upheld by the caller.
    unsafe { intrinsics::unreachable() }
  217740:	0f 0b                	ud2    
  217742:	cc                   	int3   
  217743:	cc                   	int3   
  217744:	cc                   	int3   
  217745:	cc                   	int3   
  217746:	cc                   	int3   
  217747:	cc                   	int3   
  217748:	cc                   	int3   
  217749:	cc                   	int3   
  21774a:	cc                   	int3   
  21774b:	cc                   	int3   
  21774c:	cc                   	int3   
  21774d:	cc                   	int3   
  21774e:	cc                   	int3   
  21774f:	cc                   	int3   

0000000000217750 <_ZN4core4hint9spin_loop17h4ac7c45e53932ad1E>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
  217750:	c3                   	retq   
  217751:	cc                   	int3   
  217752:	cc                   	int3   
  217753:	cc                   	int3   
  217754:	cc                   	int3   
  217755:	cc                   	int3   
  217756:	cc                   	int3   
  217757:	cc                   	int3   
  217758:	cc                   	int3   
  217759:	cc                   	int3   
  21775a:	cc                   	int3   
  21775b:	cc                   	int3   
  21775c:	cc                   	int3   
  21775d:	cc                   	int3   
  21775e:	cc                   	int3   
  21775f:	cc                   	int3   

0000000000217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>:
    pub port_no: usize,
    pub read_only: bool,
}

impl Port {
    pub fn new(port_no: usize, read_only: bool) -> Self {
  217760:	48 83 ec 20          	sub    $0x20,%rsp
  217764:	40 88 f0             	mov    %sil,%al
  217767:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21776c:	24 01                	and    $0x1,%al
  21776e:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        Port { port_no, read_only }
  217772:	48 89 3c 24          	mov    %rdi,(%rsp)
  217776:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  21777a:	48 8b 04 24          	mov    (%rsp),%rax
  21777e:	8a 54 24 08          	mov    0x8(%rsp),%dl
  217782:	48 83 c4 20          	add    $0x20,%rsp
  217786:	c3                   	retq   
  217787:	cc                   	int3   
  217788:	cc                   	int3   
  217789:	cc                   	int3   
  21778a:	cc                   	int3   
  21778b:	cc                   	int3   
  21778c:	cc                   	int3   
  21778d:	cc                   	int3   
  21778e:	cc                   	int3   
  21778f:	cc                   	int3   

0000000000217790 <_ZN9r3_kernel3cpu2io4Port7read_u817ha970c6568e2a057eE>:

    pub fn read_u8(&self) -> u8 {
  217790:	48 83 ec 10          	sub    $0x10,%rsp
  217794:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // assembly is unsafe
        let value: u8;
        unsafe {
            asm!(
                "in al, dx", out("al") value, in("dx") self.port_no,
  217799:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  21779c:	ec                   	in     (%dx),%al
  21779d:	88 44 24 07          	mov    %al,0x7(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  2177a1:	8a 44 24 07          	mov    0x7(%rsp),%al
  2177a5:	48 83 c4 10          	add    $0x10,%rsp
  2177a9:	c3                   	retq   
  2177aa:	cc                   	int3   
  2177ab:	cc                   	int3   
  2177ac:	cc                   	int3   
  2177ad:	cc                   	int3   
  2177ae:	cc                   	int3   
  2177af:	cc                   	int3   

00000000002177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>:

    pub fn write_u8(&self, value: u8) {
  2177b0:	48 83 ec 20          	sub    $0x20,%rsp
  2177b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2177b8:	40 88 f0             	mov    %sil,%al
  2177bb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2177bf:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2177c4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        if !self.read_only {
  2177c8:	8a 47 08             	mov    0x8(%rdi),%al
  2177cb:	34 ff                	xor    $0xff,%al
  2177cd:	a8 01                	test   $0x1,%al
  2177cf:	75 05                	jne    2177d6 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E+0x26>
                    "out dx, al", in("dx") self.port_no, in("al") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  2177d1:	48 83 c4 20          	add    $0x20,%rsp
  2177d5:	c3                   	retq   
  2177d6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2177da:	48 8b 0c 24          	mov    (%rsp),%rcx
                    "out dx, al", in("dx") self.port_no, in("al") value,
  2177de:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  2177e1:	ee                   	out    %al,(%dx)
  2177e2:	eb ed                	jmp    2177d1 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E+0x21>
  2177e4:	cc                   	int3   
  2177e5:	cc                   	int3   
  2177e6:	cc                   	int3   
  2177e7:	cc                   	int3   
  2177e8:	cc                   	int3   
  2177e9:	cc                   	int3   
  2177ea:	cc                   	int3   
  2177eb:	cc                   	int3   
  2177ec:	cc                   	int3   
  2177ed:	cc                   	int3   
  2177ee:	cc                   	int3   
  2177ef:	cc                   	int3   

00000000002177f0 <_ZN9r3_kernel3cpu2io4Port8read_u3217h345e6a832a366919E>:
                );
            }
        }
    }

    pub fn read_u32(&self) -> u32 {
  2177f0:	48 83 ec 10          	sub    $0x10,%rsp
  2177f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let value: u32;
        unsafe {
            asm!(
                "in eax, dx", out("eax") value, in("dx") self.port_no,
  2177f9:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  2177fc:	ed                   	in     (%dx),%eax
  2177fd:	89 44 24 04          	mov    %eax,0x4(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  217801:	8b 44 24 04          	mov    0x4(%rsp),%eax
  217805:	48 83 c4 10          	add    $0x10,%rsp
  217809:	c3                   	retq   
  21780a:	cc                   	int3   
  21780b:	cc                   	int3   
  21780c:	cc                   	int3   
  21780d:	cc                   	int3   
  21780e:	cc                   	int3   
  21780f:	cc                   	int3   

0000000000217810 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E>:

    pub fn write_u32(&self, value: u32) {
  217810:	48 83 ec 20          	sub    $0x20,%rsp
  217814:	89 74 24 04          	mov    %esi,0x4(%rsp)
  217818:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21781d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217822:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
        if !self.read_only {
  217826:	8a 47 08             	mov    0x8(%rdi),%al
  217829:	34 ff                	xor    $0xff,%al
  21782b:	a8 01                	test   $0x1,%al
  21782d:	75 05                	jne    217834 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E+0x24>
                    "out dx, eax", in("dx") self.port_no, in("eax") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  21782f:	48 83 c4 20          	add    $0x20,%rsp
  217833:	c3                   	retq   
  217834:	8b 44 24 04          	mov    0x4(%rsp),%eax
  217838:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    "out dx, eax", in("dx") self.port_no, in("eax") value,
  21783d:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  217840:	ef                   	out    %eax,(%dx)
  217841:	eb ec                	jmp    21782f <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E+0x1f>
  217843:	cc                   	int3   
  217844:	cc                   	int3   
  217845:	cc                   	int3   
  217846:	cc                   	int3   
  217847:	cc                   	int3   
  217848:	cc                   	int3   
  217849:	cc                   	int3   
  21784a:	cc                   	int3   
  21784b:	cc                   	int3   
  21784c:	cc                   	int3   
  21784d:	cc                   	int3   
  21784e:	cc                   	int3   
  21784f:	cc                   	int3   

0000000000217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>:
}

/// Wait until the time that is required to perform n port write cycles.
pub fn wait(cycles: usize) {
  217850:	48 83 ec 78          	sub    $0x78,%rsp
  217854:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  217859:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21785e:	bf 80 00 00 00       	mov    $0x80,%edi
  217863:	31 f6                	xor    %esi,%esi
    let port = Port::new(IO_WAIT_PORT, false);
  217865:	e8 f6 fe ff ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21786a:	88 54 24 28          	mov    %dl,0x28(%rsp)
  21786e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217873:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    for _ in 0..cycles {
  217878:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21787f:	00 00 
  217881:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  217886:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21788b:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  217890:	e8 db 51 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  217895:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21789a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21789f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2178a4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2178a9:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2178ae:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2178b3:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2178b8:	e8 83 51 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  2178bd:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  2178c2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2178c7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2178cc:	48 85 c0             	test   %rax,%rax
  2178cf:	74 06                	je     2178d7 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x87>
  2178d1:	eb 00                	jmp    2178d3 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x83>
  2178d3:	eb 07                	jmp    2178dc <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x8c>
  2178d5:	0f 0b                	ud2    
        // write some garbage value.
        // this is a very rudimentary way of making CPU wait for some port I/O cycles.
        // this will be used prior to any timer initialization.
        port.write_u8(0xff);
    }
}
  2178d7:	48 83 c4 78          	add    $0x78,%rsp
  2178db:	c3                   	retq   
    for _ in 0..cycles {
  2178dc:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2178e1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2178e6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        port.write_u8(0xff);
  2178eb:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2178f0:	be ff 00 00 00       	mov    $0xff,%esi
  2178f5:	e8 b6 fe ff ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  2178fa:	eb b7                	jmp    2178b3 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE+0x63>
  2178fc:	cc                   	int3   
  2178fd:	cc                   	int3   
  2178fe:	cc                   	int3   
  2178ff:	cc                   	int3   

0000000000217900 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h26d845bbebccc84cE>:
    ///
    /// # Safety
    ///
    /// `ptr` must be non-null.
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  217900:	48 83 ec 10          	sub    $0x10,%rsp
  217904:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  217909:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21790d:	48 8b 04 24          	mov    (%rsp),%rax
  217911:	48 83 c4 10          	add    $0x10,%rsp
  217915:	c3                   	retq   
  217916:	cc                   	int3   
  217917:	cc                   	int3   
  217918:	cc                   	int3   
  217919:	cc                   	int3   
  21791a:	cc                   	int3   
  21791b:	cc                   	int3   
  21791c:	cc                   	int3   
  21791d:	cc                   	int3   
  21791e:	cc                   	int3   
  21791f:	cc                   	int3   

0000000000217920 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h490cf4a7df51fc38E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  217920:	48 83 ec 10          	sub    $0x10,%rsp
  217924:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  217929:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21792d:	48 8b 04 24          	mov    (%rsp),%rax
  217931:	48 83 c4 10          	add    $0x10,%rsp
  217935:	c3                   	retq   
  217936:	cc                   	int3   
  217937:	cc                   	int3   
  217938:	cc                   	int3   
  217939:	cc                   	int3   
  21793a:	cc                   	int3   
  21793b:	cc                   	int3   
  21793c:	cc                   	int3   
  21793d:	cc                   	int3   
  21793e:	cc                   	int3   
  21793f:	cc                   	int3   

0000000000217940 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h6c462c971cf16ae0E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  217940:	48 83 ec 10          	sub    $0x10,%rsp
  217944:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  217949:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21794d:	48 8b 04 24          	mov    (%rsp),%rax
  217951:	48 83 c4 10          	add    $0x10,%rsp
  217955:	c3                   	retq   
  217956:	cc                   	int3   
  217957:	cc                   	int3   
  217958:	cc                   	int3   
  217959:	cc                   	int3   
  21795a:	cc                   	int3   
  21795b:	cc                   	int3   
  21795c:	cc                   	int3   
  21795d:	cc                   	int3   
  21795e:	cc                   	int3   
  21795f:	cc                   	int3   

0000000000217960 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  217960:	48 83 ec 10          	sub    $0x10,%rsp
  217964:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  217969:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  21796d:	48 8b 04 24          	mov    (%rsp),%rax
  217971:	48 83 c4 10          	add    $0x10,%rsp
  217975:	c3                   	retq   
  217976:	cc                   	int3   
  217977:	cc                   	int3   
  217978:	cc                   	int3   
  217979:	cc                   	int3   
  21797a:	cc                   	int3   
  21797b:	cc                   	int3   
  21797c:	cc                   	int3   
  21797d:	cc                   	int3   
  21797e:	cc                   	int3   
  21797f:	cc                   	int3   

0000000000217980 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h2891587fd6e47c2cE>:
    }

    /// Casts to a pointer of another type.
    #[must_use = "`self` will be dropped if the result is not used"]
    #[inline]
    pub const fn cast<U>(self) -> Unique<U> {
  217980:	48 83 ec 18          	sub    $0x18,%rsp
  217984:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // SAFETY: Unique::new_unchecked() creates a new unique and needs
        // the given pointer to not be null.
        // Since we are passing self as a pointer, it cannot be null.
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  217989:	e8 82 00 00 00       	callq  217a10 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>
  21798e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217993:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  217998:	e8 c3 ff ff ff       	callq  217960 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  21799d:	48 89 04 24          	mov    %rax,(%rsp)
  2179a1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2179a5:	48 83 c4 18          	add    $0x18,%rsp
  2179a9:	c3                   	retq   
  2179aa:	cc                   	int3   
  2179ab:	cc                   	int3   
  2179ac:	cc                   	int3   
  2179ad:	cc                   	int3   
  2179ae:	cc                   	int3   
  2179af:	cc                   	int3   

00000000002179b0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h4b66210a99f50f58E>:
    pub const fn cast<U>(self) -> Unique<U> {
  2179b0:	48 83 ec 18          	sub    $0x18,%rsp
  2179b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  2179b9:	e8 82 00 00 00       	callq  217a40 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>
  2179be:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2179c3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2179c8:	e8 93 ff ff ff       	callq  217960 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  2179cd:	48 89 04 24          	mov    %rax,(%rsp)
  2179d1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2179d5:	48 83 c4 18          	add    $0x18,%rsp
  2179d9:	c3                   	retq   
  2179da:	cc                   	int3   
  2179db:	cc                   	int3   
  2179dc:	cc                   	int3   
  2179dd:	cc                   	int3   
  2179de:	cc                   	int3   
  2179df:	cc                   	int3   

00000000002179e0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hf2b47319a3fe8fdcE>:
    pub const fn cast<U>(self) -> Unique<U> {
  2179e0:	48 83 ec 18          	sub    $0x18,%rsp
  2179e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  2179e9:	e8 42 00 00 00       	callq  217a30 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>
  2179ee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2179f3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2179f8:	e8 63 ff ff ff       	callq  217960 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hc1f4192b94205f24E>
  2179fd:	48 89 04 24          	mov    %rax,(%rsp)
  217a01:	48 8b 04 24          	mov    (%rsp),%rax
    }
  217a05:	48 83 c4 18          	add    $0x18,%rsp
  217a09:	c3                   	retq   
  217a0a:	cc                   	int3   
  217a0b:	cc                   	int3   
  217a0c:	cc                   	int3   
  217a0d:	cc                   	int3   
  217a0e:	cc                   	int3   
  217a0f:	cc                   	int3   

0000000000217a10 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h262b037f16d42654E>:
    pub const fn as_ptr(self) -> *mut T {
  217a10:	50                   	push   %rax
  217a11:	48 89 f8             	mov    %rdi,%rax
  217a14:	48 89 04 24          	mov    %rax,(%rsp)
    }
  217a18:	59                   	pop    %rcx
  217a19:	c3                   	retq   
  217a1a:	cc                   	int3   
  217a1b:	cc                   	int3   
  217a1c:	cc                   	int3   
  217a1d:	cc                   	int3   
  217a1e:	cc                   	int3   
  217a1f:	cc                   	int3   

0000000000217a20 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h42bf14ac60cef2f4E>:
    pub const fn as_ptr(self) -> *mut T {
  217a20:	50                   	push   %rax
  217a21:	48 89 f8             	mov    %rdi,%rax
  217a24:	48 89 04 24          	mov    %rax,(%rsp)
    }
  217a28:	59                   	pop    %rcx
  217a29:	c3                   	retq   
  217a2a:	cc                   	int3   
  217a2b:	cc                   	int3   
  217a2c:	cc                   	int3   
  217a2d:	cc                   	int3   
  217a2e:	cc                   	int3   
  217a2f:	cc                   	int3   

0000000000217a30 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h554526b874e1e7a1E>:
    pub const fn as_ptr(self) -> *mut T {
  217a30:	50                   	push   %rax
  217a31:	48 89 f8             	mov    %rdi,%rax
  217a34:	48 89 04 24          	mov    %rax,(%rsp)
    }
  217a38:	59                   	pop    %rcx
  217a39:	c3                   	retq   
  217a3a:	cc                   	int3   
  217a3b:	cc                   	int3   
  217a3c:	cc                   	int3   
  217a3d:	cc                   	int3   
  217a3e:	cc                   	int3   
  217a3f:	cc                   	int3   

0000000000217a40 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17he127c22801db95d8E>:
    pub const fn as_ptr(self) -> *mut T {
  217a40:	50                   	push   %rax
  217a41:	48 89 f8             	mov    %rdi,%rax
  217a44:	48 89 04 24          	mov    %rax,(%rsp)
    }
  217a48:	59                   	pop    %rcx
  217a49:	c3                   	retq   
  217a4a:	cc                   	int3   
  217a4b:	cc                   	int3   
  217a4c:	cc                   	int3   
  217a4d:	cc                   	int3   
  217a4e:	cc                   	int3   
  217a4f:	cc                   	int3   

0000000000217a50 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0611c87f4d271f69E>:
    fn into(self) -> U {
  217a50:	48 83 ec 18          	sub    $0x18,%rsp
  217a54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        U::from(self)
  217a59:	e8 a2 04 01 00       	callq  227f00 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hf65b60d894c651b0E>
  217a5e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217a63:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217a68:	48 83 c4 18          	add    $0x18,%rsp
  217a6c:	c3                   	retq   
  217a6d:	cc                   	int3   
  217a6e:	cc                   	int3   
  217a6f:	cc                   	int3   

0000000000217a70 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9dbe3a34ba7485bE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  217a70:	48 83 ec 18          	sub    $0x18,%rsp
  217a74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217a79:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  217a7e:	48 8b 3f             	mov    (%rdi),%rdi
  217a81:	e8 9a f0 00 00       	callq  226b20 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17he76486db047b42f9E>
  217a86:	88 44 24 07          	mov    %al,0x7(%rsp)
  217a8a:	8a 44 24 07          	mov    0x7(%rsp),%al
  217a8e:	24 01                	and    $0x1,%al
  217a90:	0f b6 c0             	movzbl %al,%eax
  217a93:	48 83 c4 18          	add    $0x18,%rsp
  217a97:	c3                   	retq   
  217a98:	cc                   	int3   
  217a99:	cc                   	int3   
  217a9a:	cc                   	int3   
  217a9b:	cc                   	int3   
  217a9c:	cc                   	int3   
  217a9d:	cc                   	int3   
  217a9e:	cc                   	int3   
  217a9f:	cc                   	int3   

0000000000217aa0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h02d01444721cb389E>:
    pub fn new_align_up(&self, size: u64) -> VirtualAddress {
        VirtualAddress::from_u64(Alignment::align_up(self.0, size))
    }

    #[inline]
    pub fn get_ptr<T>(self) -> *const T {
  217aa0:	48 83 ec 18          	sub    $0x18,%rsp
  217aa4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217aa9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217aae:	e8 4d e4 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217ab3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217ab8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217abd:	48 83 c4 18          	add    $0x18,%rsp
  217ac1:	c3                   	retq   
  217ac2:	cc                   	int3   
  217ac3:	cc                   	int3   
  217ac4:	cc                   	int3   
  217ac5:	cc                   	int3   
  217ac6:	cc                   	int3   
  217ac7:	cc                   	int3   
  217ac8:	cc                   	int3   
  217ac9:	cc                   	int3   
  217aca:	cc                   	int3   
  217acb:	cc                   	int3   
  217acc:	cc                   	int3   
  217acd:	cc                   	int3   
  217ace:	cc                   	int3   
  217acf:	cc                   	int3   

0000000000217ad0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h1701dfd31619c5daE>:
    pub fn get_ptr<T>(self) -> *const T {
  217ad0:	48 83 ec 18          	sub    $0x18,%rsp
  217ad4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217ad9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217ade:	e8 1d e4 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217ae3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217ae8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217aed:	48 83 c4 18          	add    $0x18,%rsp
  217af1:	c3                   	retq   
  217af2:	cc                   	int3   
  217af3:	cc                   	int3   
  217af4:	cc                   	int3   
  217af5:	cc                   	int3   
  217af6:	cc                   	int3   
  217af7:	cc                   	int3   
  217af8:	cc                   	int3   
  217af9:	cc                   	int3   
  217afa:	cc                   	int3   
  217afb:	cc                   	int3   
  217afc:	cc                   	int3   
  217afd:	cc                   	int3   
  217afe:	cc                   	int3   
  217aff:	cc                   	int3   

0000000000217b00 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h495d47d78e1748e7E>:
    pub fn get_ptr<T>(self) -> *const T {
  217b00:	48 83 ec 18          	sub    $0x18,%rsp
  217b04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217b09:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217b0e:	e8 ed e3 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217b13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217b18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217b1d:	48 83 c4 18          	add    $0x18,%rsp
  217b21:	c3                   	retq   
  217b22:	cc                   	int3   
  217b23:	cc                   	int3   
  217b24:	cc                   	int3   
  217b25:	cc                   	int3   
  217b26:	cc                   	int3   
  217b27:	cc                   	int3   
  217b28:	cc                   	int3   
  217b29:	cc                   	int3   
  217b2a:	cc                   	int3   
  217b2b:	cc                   	int3   
  217b2c:	cc                   	int3   
  217b2d:	cc                   	int3   
  217b2e:	cc                   	int3   
  217b2f:	cc                   	int3   

0000000000217b30 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8281fca1aa85ca7aE>:
    pub fn get_ptr<T>(self) -> *const T {
  217b30:	48 83 ec 18          	sub    $0x18,%rsp
  217b34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217b39:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217b3e:	e8 bd e3 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217b43:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217b48:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217b4d:	48 83 c4 18          	add    $0x18,%rsp
  217b51:	c3                   	retq   
  217b52:	cc                   	int3   
  217b53:	cc                   	int3   
  217b54:	cc                   	int3   
  217b55:	cc                   	int3   
  217b56:	cc                   	int3   
  217b57:	cc                   	int3   
  217b58:	cc                   	int3   
  217b59:	cc                   	int3   
  217b5a:	cc                   	int3   
  217b5b:	cc                   	int3   
  217b5c:	cc                   	int3   
  217b5d:	cc                   	int3   
  217b5e:	cc                   	int3   
  217b5f:	cc                   	int3   

0000000000217b60 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8922eeaa7ea1b07fE>:
    pub fn get_ptr<T>(self) -> *const T {
  217b60:	48 83 ec 18          	sub    $0x18,%rsp
  217b64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217b69:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217b6e:	e8 8d e3 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217b73:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217b78:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217b7d:	48 83 c4 18          	add    $0x18,%rsp
  217b81:	c3                   	retq   
  217b82:	cc                   	int3   
  217b83:	cc                   	int3   
  217b84:	cc                   	int3   
  217b85:	cc                   	int3   
  217b86:	cc                   	int3   
  217b87:	cc                   	int3   
  217b88:	cc                   	int3   
  217b89:	cc                   	int3   
  217b8a:	cc                   	int3   
  217b8b:	cc                   	int3   
  217b8c:	cc                   	int3   
  217b8d:	cc                   	int3   
  217b8e:	cc                   	int3   
  217b8f:	cc                   	int3   

0000000000217b90 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8a329c0bfc3028c0E>:
    pub fn get_ptr<T>(self) -> *const T {
  217b90:	48 83 ec 18          	sub    $0x18,%rsp
  217b94:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217b99:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217b9e:	e8 5d e3 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217ba3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217ba8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217bad:	48 83 c4 18          	add    $0x18,%rsp
  217bb1:	c3                   	retq   
  217bb2:	cc                   	int3   
  217bb3:	cc                   	int3   
  217bb4:	cc                   	int3   
  217bb5:	cc                   	int3   
  217bb6:	cc                   	int3   
  217bb7:	cc                   	int3   
  217bb8:	cc                   	int3   
  217bb9:	cc                   	int3   
  217bba:	cc                   	int3   
  217bbb:	cc                   	int3   
  217bbc:	cc                   	int3   
  217bbd:	cc                   	int3   
  217bbe:	cc                   	int3   
  217bbf:	cc                   	int3   

0000000000217bc0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8cc50a1d58229d14E>:
    pub fn get_ptr<T>(self) -> *const T {
  217bc0:	48 83 ec 18          	sub    $0x18,%rsp
  217bc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217bc9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217bce:	e8 2d e3 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217bd3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217bd8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217bdd:	48 83 c4 18          	add    $0x18,%rsp
  217be1:	c3                   	retq   
  217be2:	cc                   	int3   
  217be3:	cc                   	int3   
  217be4:	cc                   	int3   
  217be5:	cc                   	int3   
  217be6:	cc                   	int3   
  217be7:	cc                   	int3   
  217be8:	cc                   	int3   
  217be9:	cc                   	int3   
  217bea:	cc                   	int3   
  217beb:	cc                   	int3   
  217bec:	cc                   	int3   
  217bed:	cc                   	int3   
  217bee:	cc                   	int3   
  217bef:	cc                   	int3   

0000000000217bf0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17hc69a7efac3a65308E>:
    pub fn get_ptr<T>(self) -> *const T {
  217bf0:	48 83 ec 18          	sub    $0x18,%rsp
  217bf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217bf9:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217bfe:	e8 fd e2 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217c03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c08:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217c0d:	48 83 c4 18          	add    $0x18,%rsp
  217c11:	c3                   	retq   
  217c12:	cc                   	int3   
  217c13:	cc                   	int3   
  217c14:	cc                   	int3   
  217c15:	cc                   	int3   
  217c16:	cc                   	int3   
  217c17:	cc                   	int3   
  217c18:	cc                   	int3   
  217c19:	cc                   	int3   
  217c1a:	cc                   	int3   
  217c1b:	cc                   	int3   
  217c1c:	cc                   	int3   
  217c1d:	cc                   	int3   
  217c1e:	cc                   	int3   
  217c1f:	cc                   	int3   

0000000000217c20 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17he019b606acc39f32E>:
    pub fn get_ptr<T>(self) -> *const T {
  217c20:	48 83 ec 18          	sub    $0x18,%rsp
  217c24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *const T
  217c29:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217c2e:	e8 cd e2 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217c33:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c38:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217c3d:	48 83 c4 18          	add    $0x18,%rsp
  217c41:	c3                   	retq   
  217c42:	cc                   	int3   
  217c43:	cc                   	int3   
  217c44:	cc                   	int3   
  217c45:	cc                   	int3   
  217c46:	cc                   	int3   
  217c47:	cc                   	int3   
  217c48:	cc                   	int3   
  217c49:	cc                   	int3   
  217c4a:	cc                   	int3   
  217c4b:	cc                   	int3   
  217c4c:	cc                   	int3   
  217c4d:	cc                   	int3   
  217c4e:	cc                   	int3   
  217c4f:	cc                   	int3   

0000000000217c50 <_ZN9r3_kernel2mm14VirtualAddress11get_mut_ptr17hbf0b9ff8ebde94b6E>:

    #[inline]
    pub fn get_mut_ptr<T>(self) -> *mut T {
  217c50:	48 83 ec 18          	sub    $0x18,%rsp
  217c54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.as_u64() as *mut T
  217c59:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  217c5e:	e8 9d e2 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  217c63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c68:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217c6d:	48 83 c4 18          	add    $0x18,%rsp
  217c71:	c3                   	retq   
  217c72:	cc                   	int3   
  217c73:	cc                   	int3   
  217c74:	cc                   	int3   
  217c75:	cc                   	int3   
  217c76:	cc                   	int3   
  217c77:	cc                   	int3   
  217c78:	cc                   	int3   
  217c79:	cc                   	int3   
  217c7a:	cc                   	int3   
  217c7b:	cc                   	int3   
  217c7c:	cc                   	int3   
  217c7d:	cc                   	int3   
  217c7e:	cc                   	int3   
  217c7f:	cc                   	int3   

0000000000217c80 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17he3472abb9986f617E>:
    pub fn get_page_offset(&self) -> u16 {
        self.0 as u16 % (1 << 12)
    }

    #[inline]
    pub fn from_ptr<T>(ptr: *const T) -> Self {
  217c80:	48 83 ec 18          	sub    $0x18,%rsp
  217c84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        VirtualAddress::from_u64(ptr as u64)
  217c89:	e8 82 e2 00 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  217c8e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217c93:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  217c98:	48 83 c4 18          	add    $0x18,%rsp
  217c9c:	c3                   	retq   
  217c9d:	cc                   	int3   
  217c9e:	cc                   	int3   
  217c9f:	cc                   	int3   

0000000000217ca0 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  217ca0:	48 83 ec 70          	sub    $0x70,%rsp
  217ca4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  217ca9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217cae:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  217cb3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  217cb8:	8b 07                	mov    (%rdi),%eax
  217cba:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  217cbf:	8b 0e                	mov    (%rsi),%ecx
  217cc1:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  217cc6:	48 39 c8             	cmp    %rcx,%rax
  217cc9:	74 0a                	je     217cd5 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x35>
  217ccb:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  217cd0:	e9 87 00 00 00       	jmpq   217d5c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  217cd5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217cda:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  217cdf:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  217ce4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  217ce9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217cee:	8b 00                	mov    (%rax),%eax
  217cf0:	48 89 04 24          	mov    %rax,(%rsp)
  217cf4:	48 83 e8 02          	sub    $0x2,%rax
  217cf8:	74 15                	je     217d0f <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x6f>
  217cfa:	eb 00                	jmp    217cfc <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x5c>
  217cfc:	48 8b 04 24          	mov    (%rsp),%rax
  217d00:	48 83 e8 03          	sub    $0x3,%rax
  217d04:	74 18                	je     217d1e <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x7e>
  217d06:	eb 00                	jmp    217d08 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
  217d08:	c6 44 24 1f 01       	movb   $0x1,0x1f(%rsp)
  217d0d:	eb 4d                	jmp    217d5c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  217d0f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217d14:	8b 00                	mov    (%rax),%eax
  217d16:	48 83 f8 02          	cmp    $0x2,%rax
  217d1a:	74 4e                	je     217d6a <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xca>
  217d1c:	eb ea                	jmp    217d08 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
  217d1e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  217d23:	8b 00                	mov    (%rax),%eax
  217d25:	48 83 f8 03          	cmp    $0x3,%rax
  217d29:	75 dd                	jne    217d08 <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0x68>
    UnknownBios(u32),
  217d2b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217d30:	48 89 c1             	mov    %rax,%rcx
  217d33:	48 83 c1 04          	add    $0x4,%rcx
  217d37:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  217d3c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  217d41:	48 89 ca             	mov    %rcx,%rdx
  217d44:	48 83 c2 04          	add    $0x4,%rdx
  217d48:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  217d4d:	8b 40 04             	mov    0x4(%rax),%eax
  217d50:	3b 41 04             	cmp    0x4(%rcx),%eax
  217d53:	0f 94 c0             	sete   %al
  217d56:	24 01                	and    $0x1,%al
  217d58:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  217d5c:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  217d60:	24 01                	and    $0x1,%al
  217d62:	0f b6 c0             	movzbl %al,%eax
  217d65:	48 83 c4 70          	add    $0x70,%rsp
  217d69:	c3                   	retq   
    UnknownUefi(u32),
  217d6a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  217d6f:	48 89 c1             	mov    %rax,%rcx
  217d72:	48 83 c1 04          	add    $0x4,%rcx
  217d76:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  217d7b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  217d80:	48 89 ca             	mov    %rcx,%rdx
  217d83:	48 83 c2 04          	add    $0x4,%rdx
  217d87:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  217d8c:	8b 40 04             	mov    0x4(%rax),%eax
  217d8f:	3b 41 04             	cmp    0x4(%rcx),%eax
  217d92:	0f 94 c0             	sete   %al
  217d95:	24 01                	and    $0x1,%al
  217d97:	88 44 24 1f          	mov    %al,0x1f(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  217d9b:	eb bf                	jmp    217d5c <_ZN80_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7b10f4ce3e5c97f1E+0xbc>
  217d9d:	cc                   	int3   
  217d9e:	cc                   	int3   
  217d9f:	cc                   	int3   

0000000000217da0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h18c47f5fed896c76E>:
    pub fn empty() -> Self {
  217da0:	48 83 ec 20          	sub    $0x20,%rsp
        BootProtoContainer { boot_info: None }
  217da4:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  217dab:	00 00 
  217dad:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  217db2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  217db7:	48 89 0c 24          	mov    %rcx,(%rsp)
  217dbb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  217dc0:	48 8b 04 24          	mov    (%rsp),%rax
  217dc4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  217dc9:	48 83 c4 20          	add    $0x20,%rsp
  217dcd:	c3                   	retq   
  217dce:	cc                   	int3   
  217dcf:	cc                   	int3   

0000000000217dd0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hb5e396e1e7814119E>:
    pub fn save(&mut self, b_proto: u64) {
  217dd0:	48 83 ec 20          	sub    $0x20,%rsp
  217dd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  217dd9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        self.boot_info = Some(b_proto);
  217dde:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  217de3:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  217dea:	00 
  217deb:	48 8b 0c 24          	mov    (%rsp),%rcx
  217def:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217df4:	48 89 0f             	mov    %rcx,(%rdi)
  217df7:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  217dfb:	48 83 c4 20          	add    $0x20,%rsp
  217dff:	c3                   	retq   

0000000000217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>:
// this implementation than the whole codebase.
pub struct BootProtocol {}

impl BootProtocol {
    #[inline]
    pub fn get_boot_proto() -> Option<&'static mut BootInfo> {
  217e00:	48 83 ec 38          	sub    $0x38,%rsp
        if let Some(boot_info_addr) = BOOT_INFO.lock().boot_info {
  217e04:	48 8d 3d 2f 94 fe ff 	lea    -0x16bd1(%rip),%rdi        # 20123a <_ZN9r3_kernel10boot_proto9BOOT_INFO17hbc1cd924f724c6f3E>
  217e0b:	e8 50 11 00 00       	callq  218f60 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>
  217e10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217e15:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  217e1a:	e8 e1 43 01 00       	callq  22c200 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>
  217e1f:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  217e24:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217e29:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217e2e:	e8 ed 46 01 00       	callq  22c520 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb39a6dc4401dd1b9E>
  217e33:	48 89 04 24          	mov    %rax,(%rsp)
  217e37:	48 8b 04 24          	mov    (%rsp),%rax
  217e3b:	48 83 38 01          	cmpq   $0x1,(%rax)
  217e3f:	75 23                	jne    217e64 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E+0x64>
  217e41:	48 8b 04 24          	mov    (%rsp),%rax
  217e45:	48 8b 40 08          	mov    0x8(%rax),%rax
  217e49:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            let boot_info: &mut BootInfo = unsafe { &mut *(boot_info_addr as *mut BootInfo) };
  217e4e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)

            return Some(boot_info);
  217e53:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        }
  217e58:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217e5d:	e8 ee 3c ff ff       	callq  20bb50 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>
  217e62:	eb 13                	jmp    217e77 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E+0x77>
  217e64:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217e69:	e8 e2 3c ff ff       	callq  20bb50 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>

        None
  217e6e:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  217e75:	00 00 
    }
  217e77:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  217e7c:	48 83 c4 38          	add    $0x38,%rsp
  217e80:	c3                   	retq   
  217e81:	cc                   	int3   
  217e82:	cc                   	int3   
  217e83:	cc                   	int3   
  217e84:	cc                   	int3   
  217e85:	cc                   	int3   
  217e86:	cc                   	int3   
  217e87:	cc                   	int3   
  217e88:	cc                   	int3   
  217e89:	cc                   	int3   
  217e8a:	cc                   	int3   
  217e8b:	cc                   	int3   
  217e8c:	cc                   	int3   
  217e8d:	cc                   	int3   
  217e8e:	cc                   	int3   
  217e8f:	cc                   	int3   

0000000000217e90 <_ZN9r3_kernel10boot_proto12BootProtocol6create17h63a7ef6bf2bc3967E>:

    pub fn create(info: &'static BootInfo) {
  217e90:	48 83 ec 38          	sub    $0x38,%rsp
  217e94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217e99:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        // translate boot info to boot_proto:
        let boot_struct_addr = (info as *const BootInfo) as u64;
  217e9e:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        BOOT_INFO.lock().save(boot_struct_addr);
  217ea3:	48 8d 3d 90 93 fe ff 	lea    -0x16c70(%rip),%rdi        # 20123a <_ZN9r3_kernel10boot_proto9BOOT_INFO17hbc1cd924f724c6f3E>
  217eaa:	e8 b1 10 00 00       	callq  218f60 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>
  217eaf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  217eb4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  217eb9:	e8 42 43 01 00       	callq  22c200 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>
  217ebe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  217ec3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217ec8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217ecd:	e8 7e 46 01 00       	callq  22c550 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h002f604e3334e323E>
  217ed2:	48 89 04 24          	mov    %rax,(%rsp)
  217ed6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  217edb:	48 8b 3c 24          	mov    (%rsp),%rdi
  217edf:	e8 ec fe ff ff       	callq  217dd0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hb5e396e1e7814119E>
  217ee4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  217ee9:	e8 62 3c ff ff       	callq  20bb50 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17hb9dbe3d5a7d30e1cE>
    }
  217eee:	48 83 c4 38          	add    $0x38,%rsp
  217ef2:	c3                   	retq   
  217ef3:	cc                   	int3   
  217ef4:	cc                   	int3   
  217ef5:	cc                   	int3   
  217ef6:	cc                   	int3   
  217ef7:	cc                   	int3   
  217ef8:	cc                   	int3   
  217ef9:	cc                   	int3   
  217efa:	cc                   	int3   
  217efb:	cc                   	int3   
  217efc:	cc                   	int3   
  217efd:	cc                   	int3   
  217efe:	cc                   	int3   
  217eff:	cc                   	int3   

0000000000217f00 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>:

    pub fn get_memory_regions() -> Option<&'static MemoryRegions> {
  217f00:	48 83 ec 18          	sub    $0x18,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  217f04:	e8 f7 fe ff ff       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  217f09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  217f0e:	b8 01 00 00 00       	mov    $0x1,%eax
  217f13:	31 c9                	xor    %ecx,%ecx
  217f15:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  217f1b:	48 0f 44 c1          	cmove  %rcx,%rax
  217f1f:	48 83 f8 01          	cmp    $0x1,%rax
  217f23:	75 14                	jne    217f39 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E+0x39>
  217f25:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  217f2a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            return Some(&bi.memory_regions);
  217f2f:	48 83 c0 08          	add    $0x8,%rax
  217f33:	48 89 04 24          	mov    %rax,(%rsp)
        }

        None
    }
  217f37:	eb 08                	jmp    217f41 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E+0x41>
        None
  217f39:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  217f40:	00 
    }
  217f41:	48 8b 04 24          	mov    (%rsp),%rax
  217f45:	48 83 c4 18          	add    $0x18,%rsp
  217f49:	c3                   	retq   
  217f4a:	cc                   	int3   
  217f4b:	cc                   	int3   
  217f4c:	cc                   	int3   
  217f4d:	cc                   	int3   
  217f4e:	cc                   	int3   
  217f4f:	cc                   	int3   

0000000000217f50 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>:

    pub fn get_framebuffer_info() -> Option<FrameBufferInfo> {
  217f50:	48 83 ec 68          	sub    $0x68,%rsp
  217f54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  217f59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if let Some(bi) = BootProtocol::get_boot_proto() {
  217f5e:	e8 9d fe ff ff       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  217f63:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  217f68:	b8 01 00 00 00       	mov    $0x1,%eax
  217f6d:	31 c9                	xor    %ecx,%ecx
  217f6f:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  217f75:	48 0f 44 c1          	cmove  %rcx,%rax
  217f79:	48 83 f8 01          	cmp    $0x1,%rax
  217f7d:	75 1a                	jne    217f99 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x49>
  217f7f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  217f84:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  217f89:	48 83 c7 18          	add    $0x18,%rdi
  217f8d:	e8 8e 19 00 00       	callq  219920 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E>
  217f92:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  217f97:	eb 16                	jmp    217faf <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x5f>
  217f99:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }

            return None;
        }

        None
  217f9e:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  217fa5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  217faa:	48 83 c4 68          	add    $0x68,%rsp
  217fae:	c3                   	retq   
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  217faf:	b8 01 00 00 00       	mov    $0x1,%eax
  217fb4:	31 c9                	xor    %ecx,%ecx
  217fb6:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
  217fbc:	48 0f 44 c1          	cmove  %rcx,%rax
  217fc0:	48 83 f8 01          	cmp    $0x1,%rax
  217fc4:	75 16                	jne    217fdc <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x8c>
  217fc6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  217fcb:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
                return Some(fb_struct.info());
  217fd0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  217fd5:	e8 e6 9f 01 00       	callq  231fc0 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>
  217fda:	eb 0e                	jmp    217fea <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x9a>
  217fdc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            return None;
  217fe1:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  217fe8:	eb bb                	jmp    217fa5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x55>
  217fea:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                return Some(fb_struct.info());
  217fef:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  217ff4:	ba 30 00 00 00       	mov    $0x30,%edx
  217ff9:	e8 62 e5 01 00       	callq  236560 <memcpy>
  217ffe:	eb a5                	jmp    217fa5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E+0x55>

0000000000218000 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>:

    pub fn get_framebuffer_slice() -> Option<&'static mut [u8]> {
  218000:	48 83 ec 48          	sub    $0x48,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  218004:	e8 f7 fd ff ff       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  218009:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21800e:	b8 01 00 00 00       	mov    $0x1,%eax
  218013:	31 c9                	xor    %ecx,%ecx
  218015:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  21801b:	48 0f 44 c1          	cmove  %rcx,%rax
  21801f:	48 83 f8 01          	cmp    $0x1,%rax
  218023:	75 1a                	jne    21803f <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x3f>
  218025:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21802a:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
            if let Some(fb_info) = bi.framebuffer.as_mut() {
  21802f:	48 83 c7 18          	add    $0x18,%rdi
  218033:	e8 98 18 00 00       	callq  2198d0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE>
  218038:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21803d:	eb 18                	jmp    218057 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x57>
            }

            return None;
        }

        None
  21803f:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  218046:	00 00 
    }
  218048:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21804d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  218052:	48 83 c4 48          	add    $0x48,%rsp
  218056:	c3                   	retq   
            if let Some(fb_info) = bi.framebuffer.as_mut() {
  218057:	b8 01 00 00 00       	mov    $0x1,%eax
  21805c:	31 c9                	xor    %ecx,%ecx
  21805e:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  218064:	48 0f 44 c1          	cmove  %rcx,%rax
  218068:	48 83 f8 01          	cmp    $0x1,%rax
  21806c:	75 1b                	jne    218089 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x89>
  21806e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  218073:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
                return Some(fb_info.buffer_mut());
  218078:	e8 e3 9e 01 00       	callq  231f60 <_ZN10bootloader9boot_info11FrameBuffer10buffer_mut17h3ebde5336f9f1ed1E>
  21807d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218082:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218087:	eb 0b                	jmp    218094 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x94>
            return None;
  218089:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  218090:	00 00 
  218092:	eb b4                	jmp    218048 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x48>
  218094:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218099:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                return Some(fb_info.buffer_mut());
  21809e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2180a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2180a8:	eb 9e                	jmp    218048 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE+0x48>
  2180aa:	cc                   	int3   
  2180ab:	cc                   	int3   
  2180ac:	cc                   	int3   
  2180ad:	cc                   	int3   
  2180ae:	cc                   	int3   
  2180af:	cc                   	int3   

00000000002180b0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>:

    pub fn get_phy_offset() -> Option<u64> {
  2180b0:	48 83 ec 28          	sub    $0x28,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  2180b4:	e8 47 fd ff ff       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  2180b9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2180be:	b8 01 00 00 00       	mov    $0x1,%eax
  2180c3:	31 c9                	xor    %ecx,%ecx
  2180c5:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  2180cb:	48 0f 44 c1          	cmove  %rcx,%rax
  2180cf:	48 83 f8 01          	cmp    $0x1,%rax
  2180d3:	75 22                	jne    2180f7 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E+0x47>
  2180d5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2180da:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            return bi.physical_memory_offset.into_option();
  2180df:	8b 78 60             	mov    0x60(%rax),%edi
  2180e2:	48 8b 70 68          	mov    0x68(%rax),%rsi
  2180e6:	e8 b5 17 00 00       	callq  2198a0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  2180eb:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2180f0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2180f5:	eb 09                	jmp    218100 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E+0x50>
        }

        None
  2180f7:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2180fe:	00 00 
    }
  218100:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  218105:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21810a:	48 83 c4 28          	add    $0x28,%rsp
  21810e:	c3                   	retq   
  21810f:	cc                   	int3   

0000000000218110 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E>:

    pub fn print_boot_info() {
  218110:	48 81 ec 98 06 00 00 	sub    $0x698,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  218117:	e8 e4 fc ff ff       	callq  217e00 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17h9726ff3062d30f94E>
  21811c:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  218123:	00 
  218124:	b8 01 00 00 00       	mov    $0x1,%eax
  218129:	31 c9                	xor    %ecx,%ecx
  21812b:	48 83 bc 24 70 01 00 	cmpq   $0x0,0x170(%rsp)
  218132:	00 00 
  218134:	48 0f 44 c1          	cmove  %rcx,%rax
  218138:	48 83 f8 01          	cmp    $0x1,%rax
  21813c:	75 41                	jne    21817f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  21813e:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  218145:	00 
  218146:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21814d:	00 
  21814e:	48 89 84 24 98 05 00 	mov    %rax,0x598(%rsp)
  218155:	00 
            // display version:
            log::info!(
  218156:	48 c7 84 24 78 01 00 	movq   $0x3,0x178(%rsp)
  21815d:	00 03 00 00 00 
  218162:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  218169:	00 
  21816a:	48 8d 35 c7 84 fe ff 	lea    -0x17b39(%rip),%rsi        # 200638 <str.0+0x118>
  218171:	e8 7a 99 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218176:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  21817d:	eb 08                	jmp    218187 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x77>
                );
            } else {
                log::warn!("Boot info doesn't contain framebuffer information.");
            }
        }
    }
  21817f:	48 81 c4 98 06 00 00 	add    $0x698,%rsp
  218186:	c3                   	retq   
  218187:	8a 84 24 6f 01 00 00 	mov    0x16f(%rsp),%al
            log::info!(
  21818e:	a8 01                	test   $0x1,%al
  218190:	75 0c                	jne    21819e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x8e>
  218192:	eb 00                	jmp    218194 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x84>
  218194:	c6 84 24 87 01 00 00 	movb   $0x0,0x187(%rsp)
  21819b:	00 
  21819c:	eb 60                	jmp    2181fe <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xee>
  21819e:	c6 84 24 8f 06 00 00 	movb   $0x0,0x68f(%rsp)
  2181a5:	00 
  2181a6:	48 8b 3d 63 2f 02 00 	mov    0x22f63(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2181ad:	0f b6 b4 24 8f 06 00 	movzbl 0x68f(%rsp),%esi
  2181b4:	00 
  2181b5:	e8 06 0b 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2181ba:	48 89 84 24 90 06 00 	mov    %rax,0x690(%rsp)
  2181c1:	00 
  2181c2:	48 8b 84 24 90 06 00 	mov    0x690(%rsp),%rax
  2181c9:	00 
  2181ca:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  2181d1:	00 
  2181d2:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  2181d9:	00 
  2181da:	48 8d b4 24 88 01 00 	lea    0x188(%rsp),%rsi
  2181e1:	00 
  2181e2:	e8 09 99 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2181e7:	88 84 24 5f 01 00 00 	mov    %al,0x15f(%rsp)
  2181ee:	8a 84 24 5f 01 00 00 	mov    0x15f(%rsp),%al
  2181f5:	24 01                	and    $0x1,%al
  2181f7:	88 84 24 87 01 00 00 	mov    %al,0x187(%rsp)
  2181fe:	f6 84 24 87 01 00 00 	testb  $0x1,0x187(%rsp)
  218205:	01 
  218206:	75 2c                	jne    218234 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x124>
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  218208:	48 c7 84 24 08 02 00 	movq   $0x3,0x208(%rsp)
  21820f:	00 03 00 00 00 
  218214:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  21821b:	00 
  21821c:	48 8d 35 15 84 fe ff 	lea    -0x17beb(%rip),%rsi        # 200638 <str.0+0x118>
  218223:	e8 c8 98 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218228:	88 84 24 5e 01 00 00 	mov    %al,0x15e(%rsp)
  21822f:	e9 78 01 00 00       	jmpq   2183ac <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x29c>
  218234:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21823b:	00 
                bi.version_major,
  21823c:	48 89 c2             	mov    %rax,%rdx
                bi.version_minor,
  21823f:	48 89 c1             	mov    %rax,%rcx
  218242:	48 83 c1 02          	add    $0x2,%rcx
                bi.version_patch
  218246:	48 83 c0 04          	add    $0x4,%rax
            log::info!(
  21824a:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  218251:	00 
  218252:	48 89 8c 24 f8 01 00 	mov    %rcx,0x1f8(%rsp)
  218259:	00 
  21825a:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  218261:	00 
  218262:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  218269:	00 
  21826a:	48 89 bc 24 a0 05 00 	mov    %rdi,0x5a0(%rsp)
  218271:	00 
  218272:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  218279:	00 
  21827a:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  218281:	00 
  218282:	48 89 84 24 a8 05 00 	mov    %rax,0x5a8(%rsp)
  218289:	00 
  21828a:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  218291:	00 
  218292:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  218299:	00 
  21829a:	48 89 84 24 b0 05 00 	mov    %rax,0x5b0(%rsp)
  2182a1:	00 
  2182a2:	48 8b 35 97 2e 02 00 	mov    0x22e97(%rip),%rsi        # 23b140 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2182a9:	e8 52 66 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  2182ae:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  2182b5:	00 
  2182b6:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
  2182bd:	00 
  2182be:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  2182c5:	00 
  2182c6:	48 8b 35 73 2e 02 00 	mov    0x22e73(%rip),%rsi        # 23b140 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2182cd:	e8 2e 66 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  2182d2:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2182d9:	00 
  2182da:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  2182e1:	00 
  2182e2:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  2182e9:	00 
  2182ea:	48 8b 35 4f 2e 02 00 	mov    0x22e4f(%rip),%rsi        # 23b140 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2182f1:	e8 0a 66 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  2182f6:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  2182fd:	00 
  2182fe:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  218305:	00 
  218306:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  21830d:	00 
  21830e:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  218315:	00 
  218316:	48 8b 94 24 30 01 00 	mov    0x130(%rsp),%rdx
  21831d:	00 
  21831e:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  218325:	00 
  218326:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  21832d:	00 
  21832e:	4c 8b 84 24 48 01 00 	mov    0x148(%rsp),%r8
  218335:	00 
  218336:	4c 89 84 24 c0 01 00 	mov    %r8,0x1c0(%rsp)
  21833d:	00 
  21833e:	48 89 bc 24 c8 01 00 	mov    %rdi,0x1c8(%rsp)
  218345:	00 
  218346:	48 89 b4 24 d0 01 00 	mov    %rsi,0x1d0(%rsp)
  21834d:	00 
  21834e:	48 89 94 24 d8 01 00 	mov    %rdx,0x1d8(%rsp)
  218355:	00 
  218356:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  21835d:	00 
  21835e:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  218365:	00 
  218366:	48 8d 8c 24 c0 01 00 	lea    0x1c0(%rsp),%rcx
  21836d:	00 
  21836e:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  218375:	00 
  218376:	48 8d 35 6b 05 02 00 	lea    0x2056b(%rip),%rsi        # 2388e8 <memcmp+0x2338>
  21837d:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  218383:	4c 89 c2             	mov    %r8,%rdx
  218386:	e8 35 df fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21838b:	48 8b b4 24 78 01 00 	mov    0x178(%rsp),%rsi
  218392:	00 
  218393:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  21839a:	00 
  21839b:	48 8d 15 76 05 02 00 	lea    0x20576(%rip),%rdx        # 238918 <memcmp+0x2368>
  2183a2:	e8 49 82 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2183a7:	e9 5c fe ff ff       	jmpq   218208 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xf8>
  2183ac:	8a 84 24 5e 01 00 00 	mov    0x15e(%rsp),%al
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  2183b3:	a8 01                	test   $0x1,%al
  2183b5:	75 0c                	jne    2183c3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x2b3>
  2183b7:	eb 00                	jmp    2183b9 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x2a9>
  2183b9:	c6 84 24 17 02 00 00 	movb   $0x0,0x217(%rsp)
  2183c0:	00 
  2183c1:	eb 60                	jmp    218423 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x313>
  2183c3:	c6 84 24 7f 06 00 00 	movb   $0x0,0x67f(%rsp)
  2183ca:	00 
  2183cb:	48 8b 3d 3e 2d 02 00 	mov    0x22d3e(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2183d2:	0f b6 b4 24 7f 06 00 	movzbl 0x67f(%rsp),%esi
  2183d9:	00 
  2183da:	e8 e1 08 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2183df:	48 89 84 24 80 06 00 	mov    %rax,0x680(%rsp)
  2183e6:	00 
  2183e7:	48 8b 84 24 80 06 00 	mov    0x680(%rsp),%rax
  2183ee:	00 
  2183ef:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  2183f6:	00 
  2183f7:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  2183fe:	00 
  2183ff:	48 8d b4 24 18 02 00 	lea    0x218(%rsp),%rsi
  218406:	00 
  218407:	e8 e4 96 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21840c:	88 84 24 17 01 00 00 	mov    %al,0x117(%rsp)
  218413:	8a 84 24 17 01 00 00 	mov    0x117(%rsp),%al
  21841a:	24 01                	and    $0x1,%al
  21841c:	88 84 24 17 02 00 00 	mov    %al,0x217(%rsp)
  218423:	f6 84 24 17 02 00 00 	testb  $0x1,0x217(%rsp)
  21842a:	01 
  21842b:	75 2c                	jne    218459 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x349>
            log::info!(
  21842d:	48 c7 84 24 68 02 00 	movq   $0x3,0x268(%rsp)
  218434:	00 03 00 00 00 
  218439:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  218440:	00 
  218441:	48 8d 35 f0 81 fe ff 	lea    -0x17e10(%rip),%rsi        # 200638 <str.0+0x118>
  218448:	e8 a3 96 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21844d:	88 84 24 16 01 00 00 	mov    %al,0x116(%rsp)
  218454:	e9 a6 00 00 00       	jmpq   2184ff <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x3ef>
  218459:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  218460:	00 
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  218461:	48 83 c0 78          	add    $0x78,%rax
  218465:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  21846c:	00 
  21846d:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  218474:	00 
  218475:	48 89 bc 24 b8 05 00 	mov    %rdi,0x5b8(%rsp)
  21847c:	00 
  21847d:	48 8b 35 c4 2c 02 00 	mov    0x22cc4(%rip),%rsi        # 23b148 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x98>
  218484:	e8 77 6a ff ff       	callq  20ef00 <_ZN4core3fmt10ArgumentV13new17hedb1e574926a384eE>
  218489:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  218490:	00 
  218491:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  218498:	00 
  218499:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2184a0:	00 
  2184a1:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  2184a8:	00 
  2184a9:	48 89 8c 24 50 02 00 	mov    %rcx,0x250(%rsp)
  2184b0:	00 
  2184b1:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  2184b8:	00 
  2184b9:	48 8d 8c 24 50 02 00 	lea    0x250(%rsp),%rcx
  2184c0:	00 
  2184c1:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  2184c8:	00 
  2184c9:	48 8d 35 80 04 02 00 	lea    0x20480(%rip),%rsi        # 238950 <memcmp+0x23a0>
  2184d0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2184d6:	4c 89 c2             	mov    %r8,%rdx
  2184d9:	e8 e2 dd fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2184de:	48 8b b4 24 08 02 00 	mov    0x208(%rsp),%rsi
  2184e5:	00 
  2184e6:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  2184ed:	00 
  2184ee:	48 8d 15 6b 04 02 00 	lea    0x2046b(%rip),%rdx        # 238960 <memcmp+0x23b0>
  2184f5:	e8 f6 80 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2184fa:	e9 2e ff ff ff       	jmpq   21842d <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x31d>
  2184ff:	8a 84 24 16 01 00 00 	mov    0x116(%rsp),%al
            log::info!(
  218506:	a8 01                	test   $0x1,%al
  218508:	75 0c                	jne    218516 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x406>
  21850a:	eb 00                	jmp    21850c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x3fc>
  21850c:	c6 84 24 77 02 00 00 	movb   $0x0,0x277(%rsp)
  218513:	00 
  218514:	eb 60                	jmp    218576 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x466>
  218516:	c6 84 24 6f 06 00 00 	movb   $0x0,0x66f(%rsp)
  21851d:	00 
  21851e:	48 8b 3d eb 2b 02 00 	mov    0x22beb(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218525:	0f b6 b4 24 6f 06 00 	movzbl 0x66f(%rsp),%esi
  21852c:	00 
  21852d:	e8 8e 07 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218532:	48 89 84 24 70 06 00 	mov    %rax,0x670(%rsp)
  218539:	00 
  21853a:	48 8b 84 24 70 06 00 	mov    0x670(%rsp),%rax
  218541:	00 
  218542:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  218549:	00 
  21854a:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  218551:	00 
  218552:	48 8d b4 24 78 02 00 	lea    0x278(%rsp),%rsi
  218559:	00 
  21855a:	e8 91 95 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21855f:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  218566:	8a 84 24 ff 00 00 00 	mov    0xff(%rsp),%al
  21856d:	24 01                	and    $0x1,%al
  21856f:	88 84 24 77 02 00 00 	mov    %al,0x277(%rsp)
  218576:	f6 84 24 77 02 00 00 	testb  $0x1,0x277(%rsp)
  21857d:	01 
  21857e:	75 12                	jne    218592 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x482>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  218580:	e8 7b f9 ff ff       	callq  217f00 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hbc5b3dad28f8c3d4E>
  218585:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  21858c:	00 
  21858d:	e9 ea 00 00 00       	jmpq   21867c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x56c>
  218592:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  218599:	00 
                bi.physical_memory_offset.into_option().unwrap()
  21859a:	8b 78 60             	mov    0x60(%rax),%edi
  21859d:	48 8b 70 68          	mov    0x68(%rax),%rsi
  2185a1:	e8 fa 12 00 00       	callq  2198a0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>
  2185a6:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2185ad:	00 
  2185ae:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  2185b5:	00 
  2185b6:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  2185bd:	00 
  2185be:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  2185c5:	00 
  2185c6:	48 8d 15 db 03 02 00 	lea    0x203db(%rip),%rdx        # 2389a8 <memcmp+0x23f8>
  2185cd:	e8 4e 7a ff ff       	callq  210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  2185d2:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  2185d9:	00 
            log::info!(
  2185da:	48 8d 84 24 c8 02 00 	lea    0x2c8(%rsp),%rax
  2185e1:	00 
  2185e2:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
  2185e9:	00 
  2185ea:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  2185f1:	00 
  2185f2:	48 89 bc 24 c0 05 00 	mov    %rdi,0x5c0(%rsp)
  2185f9:	00 
  2185fa:	48 8b 35 17 2b 02 00 	mov    0x22b17(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  218601:	e8 3a 68 ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  218606:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21860d:	00 
  21860e:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  218615:	00 
  218616:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  21861d:	00 
  21861e:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  218625:	00 
  218626:	48 89 8c 24 b0 02 00 	mov    %rcx,0x2b0(%rsp)
  21862d:	00 
  21862e:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  218635:	00 
  218636:	48 8d 8c 24 b0 02 00 	lea    0x2b0(%rsp),%rcx
  21863d:	00 
  21863e:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
  218645:	00 
  218646:	48 8d 35 4b 03 02 00 	lea    0x2034b(%rip),%rsi        # 238998 <memcmp+0x23e8>
  21864d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  218653:	4c 89 c2             	mov    %r8,%rdx
  218656:	e8 65 dc fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21865b:	48 8b b4 24 68 02 00 	mov    0x268(%rsp),%rsi
  218662:	00 
  218663:	48 8d bc 24 80 02 00 	lea    0x280(%rsp),%rdi
  21866a:	00 
  21866b:	48 8d 15 4e 03 02 00 	lea    0x2034e(%rip),%rdx        # 2389c0 <memcmp+0x2410>
  218672:	e8 79 7f 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218677:	e9 04 ff ff ff       	jmpq   218580 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x470>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  21867c:	b8 01 00 00 00       	mov    $0x1,%eax
  218681:	31 c9                	xor    %ecx,%ecx
  218683:	48 83 bc 24 d0 02 00 	cmpq   $0x0,0x2d0(%rsp)
  21868a:	00 00 
  21868c:	48 0f 44 c1          	cmove  %rcx,%rax
  218690:	48 83 f8 01          	cmp    $0x1,%rax
  218694:	75 2a                	jne    2186c0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5b0>
  218696:	48 8b bc 24 d0 02 00 	mov    0x2d0(%rsp),%rdi
  21869d:	00 
  21869e:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  2186a5:	00 
  2186a6:	48 89 bc 24 c8 05 00 	mov    %rdi,0x5c8(%rsp)
  2186ad:	00 
                for region_idx in 0..memory_regions.len() {
  2186ae:	e8 7d 98 01 00       	callq  231f30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  2186b3:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  2186ba:	00 
  2186bb:	e9 05 01 00 00       	jmpq   2187c5 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6b5>
                log::warn!("Boot info doesn't contain memory map information.");
  2186c0:	48 c7 84 24 80 03 00 	movq   $0x2,0x380(%rsp)
  2186c7:	00 02 00 00 00 
  2186cc:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  2186d3:	00 
  2186d4:	48 8d 35 5d 7f fe ff 	lea    -0x180a3(%rip),%rsi        # 200638 <str.0+0x118>
  2186db:	e8 10 94 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2186e0:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  2186e7:	8a 84 24 c7 00 00 00 	mov    0xc7(%rsp),%al
  2186ee:	a8 01                	test   $0x1,%al
  2186f0:	75 0c                	jne    2186fe <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5ee>
  2186f2:	eb 00                	jmp    2186f4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x5e4>
  2186f4:	c6 84 24 8f 03 00 00 	movb   $0x0,0x38f(%rsp)
  2186fb:	00 
  2186fc:	eb 60                	jmp    21875e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x64e>
  2186fe:	c6 84 24 5f 06 00 00 	movb   $0x0,0x65f(%rsp)
  218705:	00 
  218706:	48 8b 3d 03 2a 02 00 	mov    0x22a03(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21870d:	0f b6 b4 24 5f 06 00 	movzbl 0x65f(%rsp),%esi
  218714:	00 
  218715:	e8 a6 05 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21871a:	48 89 84 24 60 06 00 	mov    %rax,0x660(%rsp)
  218721:	00 
  218722:	48 8b 84 24 60 06 00 	mov    0x660(%rsp),%rax
  218729:	00 
  21872a:	48 89 84 24 90 03 00 	mov    %rax,0x390(%rsp)
  218731:	00 
  218732:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  218739:	00 
  21873a:	48 8d b4 24 90 03 00 	lea    0x390(%rsp),%rsi
  218741:	00 
  218742:	e8 a9 93 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218747:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  21874e:	8a 84 24 c6 00 00 00 	mov    0xc6(%rsp),%al
  218755:	24 01                	and    $0x1,%al
  218757:	88 84 24 8f 03 00 00 	mov    %al,0x38f(%rsp)
  21875e:	f6 84 24 8f 03 00 00 	testb  $0x1,0x38f(%rsp)
  218765:	01 
  218766:	75 1a                	jne    218782 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x672>
            if let Some(fb_slice) = BootProtocol::get_framebuffer_slice() {
  218768:	e8 93 f8 ff ff       	callq  218000 <_ZN9r3_kernel10boot_proto12BootProtocol21get_framebuffer_slice17h10c627b81eadbc8bE>
  21876d:	48 89 94 24 d0 03 00 	mov    %rdx,0x3d0(%rsp)
  218774:	00 
  218775:	48 89 84 24 c8 03 00 	mov    %rax,0x3c8(%rsp)
  21877c:	00 
  21877d:	e9 e1 02 00 00       	jmpq   218a63 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x953>
                log::warn!("Boot info doesn't contain memory map information.");
  218782:	48 8d bc 24 98 03 00 	lea    0x398(%rsp),%rdi
  218789:	00 
  21878a:	48 8d 35 67 02 02 00 	lea    0x20267(%rip),%rsi        # 2389f8 <memcmp+0x2448>
  218791:	ba 01 00 00 00       	mov    $0x1,%edx
  218796:	48 8d 0d 2b 8a fe ff 	lea    -0x175d5(%rip),%rcx        # 2011c8 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE+0x8f>
  21879d:	31 c0                	xor    %eax,%eax
  21879f:	41 89 c0             	mov    %eax,%r8d
  2187a2:	e8 19 db fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2187a7:	48 8b b4 24 80 03 00 	mov    0x380(%rsp),%rsi
  2187ae:	00 
  2187af:	48 8d bc 24 98 03 00 	lea    0x398(%rsp),%rdi
  2187b6:	00 
  2187b7:	48 8d 15 4a 02 02 00 	lea    0x2024a(%rip),%rdx        # 238a08 <memcmp+0x2458>
  2187be:	e8 2d 7e 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2187c3:	eb a3                	jmp    218768 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x658>
  2187c5:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  2187cc:	00 
                for region_idx in 0..memory_regions.len() {
  2187cd:	48 c7 84 24 d8 02 00 	movq   $0x0,0x2d8(%rsp)
  2187d4:	00 00 00 00 00 
  2187d9:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  2187e0:	00 
  2187e1:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  2187e8:	00 
  2187e9:	48 8b b4 24 e0 02 00 	mov    0x2e0(%rsp),%rsi
  2187f0:	00 
  2187f1:	e8 7a 42 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  2187f6:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  2187fd:	00 
  2187fe:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  218805:	00 
  218806:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21880d:	00 
  21880e:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  218815:	00 
  218816:	48 89 8c 24 e8 02 00 	mov    %rcx,0x2e8(%rsp)
  21881d:	00 
  21881e:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  218825:	00 
  218826:	48 8d bc 24 e8 02 00 	lea    0x2e8(%rsp),%rdi
  21882d:	00 
  21882e:	e8 0d 42 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  218833:	48 89 94 24 00 03 00 	mov    %rdx,0x300(%rsp)
  21883a:	00 
  21883b:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
  218842:	00 
  218843:	48 8b 84 24 f8 02 00 	mov    0x2f8(%rsp),%rax
  21884a:	00 
  21884b:	48 85 c0             	test   %rax,%rax
  21884e:	0f 84 14 ff ff ff    	je     218768 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x658>
  218854:	eb 00                	jmp    218856 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x746>
  218856:	eb 02                	jmp    21885a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x74a>
  218858:	0f 0b                	ud2    
  21885a:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  218861:	00 
  218862:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  218869:	00 
  21886a:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  218871:	00 
  218872:	48 89 84 24 d0 05 00 	mov    %rax,0x5d0(%rsp)
  218879:	00 
  21887a:	48 89 84 24 d8 05 00 	mov    %rax,0x5d8(%rsp)
  218881:	00 
  218882:	48 89 84 24 e0 05 00 	mov    %rax,0x5e0(%rsp)
  218889:	00 
                    let region = memory_regions[region_idx];
  21888a:	e8 a1 96 01 00       	callq  231f30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  21888f:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  218896:	00 
  218897:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  21889e:	00 
  21889f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2188a6:	00 
  2188a7:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  2188ae:	00 
  2188af:	48 39 c8             	cmp    %rcx,%rax
  2188b2:	0f 92 c0             	setb   %al
  2188b5:	a8 01                	test   $0x1,%al
  2188b7:	75 02                	jne    2188bb <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x7ab>
  2188b9:	eb 63                	jmp    21891e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x80e>
  2188bb:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2188c2:	00 
  2188c3:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2188ca:	00 
  2188cb:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  2188cf:	48 01 c8             	add    %rcx,%rax
  2188d2:	48 8b 08             	mov    (%rax),%rcx
  2188d5:	48 89 8c 24 08 03 00 	mov    %rcx,0x308(%rsp)
  2188dc:	00 
  2188dd:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2188e1:	48 89 8c 24 10 03 00 	mov    %rcx,0x310(%rsp)
  2188e8:	00 
  2188e9:	48 8b 40 10          	mov    0x10(%rax),%rax
  2188ed:	48 89 84 24 18 03 00 	mov    %rax,0x318(%rsp)
  2188f4:	00 
                    log::info!("{:?}", region);
  2188f5:	48 c7 84 24 20 03 00 	movq   $0x3,0x320(%rsp)
  2188fc:	00 03 00 00 00 
  218901:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  218908:	00 
  218909:	48 8d 35 28 7d fe ff 	lea    -0x182d8(%rip),%rsi        # 200638 <str.0+0x118>
  218910:	e8 db 91 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218915:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21891c:	eb 1e                	jmp    21893c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x82c>
  21891e:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  218925:	00 
  218926:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  21892d:	00 
                    let region = memory_regions[region_idx];
  21892e:	48 8d 15 0b 01 02 00 	lea    0x2010b(%rip),%rdx        # 238a40 <memcmp+0x2490>
  218935:	e8 76 ab 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21893a:	0f 0b                	ud2    
  21893c:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
                    log::info!("{:?}", region);
  218943:	a8 01                	test   $0x1,%al
  218945:	75 0c                	jne    218953 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x843>
  218947:	eb 00                	jmp    218949 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x839>
  218949:	c6 84 24 2f 03 00 00 	movb   $0x0,0x32f(%rsp)
  218950:	00 
  218951:	eb 60                	jmp    2189b3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x8a3>
  218953:	c6 84 24 4f 06 00 00 	movb   $0x0,0x64f(%rsp)
  21895a:	00 
  21895b:	48 8b 3d ae 27 02 00 	mov    0x227ae(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218962:	0f b6 b4 24 4f 06 00 	movzbl 0x64f(%rsp),%esi
  218969:	00 
  21896a:	e8 51 03 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21896f:	48 89 84 24 50 06 00 	mov    %rax,0x650(%rsp)
  218976:	00 
  218977:	48 8b 84 24 50 06 00 	mov    0x650(%rsp),%rax
  21897e:	00 
  21897f:	48 89 84 24 30 03 00 	mov    %rax,0x330(%rsp)
  218986:	00 
  218987:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  21898e:	00 
  21898f:	48 8d b4 24 30 03 00 	lea    0x330(%rsp),%rsi
  218996:	00 
  218997:	e8 54 91 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21899c:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  2189a3:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  2189aa:	24 01                	and    $0x1,%al
  2189ac:	88 84 24 2f 03 00 00 	mov    %al,0x32f(%rsp)
  2189b3:	f6 84 24 2f 03 00 00 	testb  $0x1,0x32f(%rsp)
  2189ba:	01 
  2189bb:	0f 84 65 fe ff ff    	je     218826 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x716>
  2189c1:	48 8d 84 24 08 03 00 	lea    0x308(%rsp),%rax
  2189c8:	00 
  2189c9:	48 89 84 24 78 03 00 	mov    %rax,0x378(%rsp)
  2189d0:	00 
  2189d1:	48 8b bc 24 78 03 00 	mov    0x378(%rsp),%rdi
  2189d8:	00 
  2189d9:	48 89 bc 24 e8 05 00 	mov    %rdi,0x5e8(%rsp)
  2189e0:	00 
  2189e1:	48 8b 35 68 27 02 00 	mov    0x22768(%rip),%rsi        # 23b150 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  2189e8:	e8 33 60 ff ff       	callq  20ea20 <_ZN4core3fmt10ArgumentV13new17h6761285cd85d6144E>
  2189ed:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  2189f4:	00 
  2189f5:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  2189fc:	00 
  2189fd:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  218a04:	00 
  218a05:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  218a0c:	00 
  218a0d:	48 89 8c 24 68 03 00 	mov    %rcx,0x368(%rsp)
  218a14:	00 
  218a15:	48 89 84 24 70 03 00 	mov    %rax,0x370(%rsp)
  218a1c:	00 
  218a1d:	48 8d 8c 24 68 03 00 	lea    0x368(%rsp),%rcx
  218a24:	00 
  218a25:	48 8d bc 24 38 03 00 	lea    0x338(%rsp),%rdi
  218a2c:	00 
  218a2d:	48 8d 35 24 00 02 00 	lea    0x20024(%rip),%rsi        # 238a58 <memcmp+0x24a8>
  218a34:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  218a3a:	4c 89 c2             	mov    %r8,%rdx
  218a3d:	e8 7e d8 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218a42:	48 8b b4 24 20 03 00 	mov    0x320(%rsp),%rsi
  218a49:	00 
  218a4a:	48 8d bc 24 38 03 00 	lea    0x338(%rsp),%rdi
  218a51:	00 
  218a52:	48 8d 15 0f 00 02 00 	lea    0x2000f(%rip),%rdx        # 238a68 <memcmp+0x24b8>
  218a59:	e8 92 7b 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218a5e:	e9 c3 fd ff ff       	jmpq   218826 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x716>
            if let Some(fb_slice) = BootProtocol::get_framebuffer_slice() {
  218a63:	b8 01 00 00 00       	mov    $0x1,%eax
  218a68:	31 c9                	xor    %ecx,%ecx
  218a6a:	48 83 bc 24 c8 03 00 	cmpq   $0x0,0x3c8(%rsp)
  218a71:	00 00 
  218a73:	48 0f 44 c1          	cmove  %rcx,%rax
  218a77:	48 83 f8 01          	cmp    $0x1,%rax
  218a7b:	75 46                	jne    218ac3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
  218a7d:	48 8b 8c 24 c8 03 00 	mov    0x3c8(%rsp),%rcx
  218a84:	00 
  218a85:	48 8b 84 24 d0 03 00 	mov    0x3d0(%rsp),%rax
  218a8c:	00 
  218a8d:	48 89 8c 24 d8 03 00 	mov    %rcx,0x3d8(%rsp)
  218a94:	00 
  218a95:	48 89 84 24 e0 03 00 	mov    %rax,0x3e0(%rsp)
  218a9c:	00 
                log::info!("Framebuffer address: {:p}", fb_slice);
  218a9d:	48 c7 84 24 e8 03 00 	movq   $0x3,0x3e8(%rsp)
  218aa4:	00 03 00 00 00 
  218aa9:	48 8d bc 24 e8 03 00 	lea    0x3e8(%rsp),%rdi
  218ab0:	00 
  218ab1:	48 8d 35 80 7b fe ff 	lea    -0x18480(%rip),%rsi        # 200638 <str.0+0x118>
  218ab8:	e8 33 90 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218abd:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  218ac1:	eb 12                	jmp    218ad5 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9c5>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  218ac3:	48 8d bc 24 48 04 00 	lea    0x448(%rsp),%rdi
  218aca:	00 
  218acb:	e8 80 f4 ff ff       	callq  217f50 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17hd4881cbf52e38ad6E>
  218ad0:	e9 12 01 00 00       	jmpq   218be7 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xad7>
  218ad5:	8a 44 24 7f          	mov    0x7f(%rsp),%al
                log::info!("Framebuffer address: {:p}", fb_slice);
  218ad9:	a8 01                	test   $0x1,%al
  218adb:	75 0c                	jne    218ae9 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9d9>
  218add:	eb 00                	jmp    218adf <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9cf>
  218adf:	c6 84 24 f7 03 00 00 	movb   $0x0,0x3f7(%rsp)
  218ae6:	00 
  218ae7:	eb 5a                	jmp    218b43 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xa33>
  218ae9:	c6 84 24 3f 06 00 00 	movb   $0x0,0x63f(%rsp)
  218af0:	00 
  218af1:	48 8b 3d 18 26 02 00 	mov    0x22618(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218af8:	0f b6 b4 24 3f 06 00 	movzbl 0x63f(%rsp),%esi
  218aff:	00 
  218b00:	e8 bb 01 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218b05:	48 89 84 24 40 06 00 	mov    %rax,0x640(%rsp)
  218b0c:	00 
  218b0d:	48 8b 84 24 40 06 00 	mov    0x640(%rsp),%rax
  218b14:	00 
  218b15:	48 89 84 24 f8 03 00 	mov    %rax,0x3f8(%rsp)
  218b1c:	00 
  218b1d:	48 8d bc 24 e8 03 00 	lea    0x3e8(%rsp),%rdi
  218b24:	00 
  218b25:	48 8d b4 24 f8 03 00 	lea    0x3f8(%rsp),%rsi
  218b2c:	00 
  218b2d:	e8 be 8f ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218b32:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  218b36:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  218b3a:	24 01                	and    $0x1,%al
  218b3c:	88 84 24 f7 03 00 00 	mov    %al,0x3f7(%rsp)
  218b43:	f6 84 24 f7 03 00 00 	testb  $0x1,0x3f7(%rsp)
  218b4a:	01 
  218b4b:	0f 84 72 ff ff ff    	je     218ac3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
  218b51:	48 8d 84 24 d8 03 00 	lea    0x3d8(%rsp),%rax
  218b58:	00 
  218b59:	48 89 84 24 40 04 00 	mov    %rax,0x440(%rsp)
  218b60:	00 
  218b61:	48 8b bc 24 40 04 00 	mov    0x440(%rsp),%rdi
  218b68:	00 
  218b69:	48 89 bc 24 f0 05 00 	mov    %rdi,0x5f0(%rsp)
  218b70:	00 
  218b71:	48 8d 35 b8 64 ff ff 	lea    -0x9b48(%rip),%rsi        # 20f030 <_ZN52_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h358b726a10840d4fE>
  218b78:	e8 63 5c ff ff       	callq  20e7e0 <_ZN4core3fmt10ArgumentV13new17h3b537045eb59a5d6E>
  218b7d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  218b82:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  218b87:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  218b8c:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  218b91:	48 89 8c 24 30 04 00 	mov    %rcx,0x430(%rsp)
  218b98:	00 
  218b99:	48 89 84 24 38 04 00 	mov    %rax,0x438(%rsp)
  218ba0:	00 
  218ba1:	48 8d 8c 24 30 04 00 	lea    0x430(%rsp),%rcx
  218ba8:	00 
  218ba9:	48 8d bc 24 00 04 00 	lea    0x400(%rsp),%rdi
  218bb0:	00 
  218bb1:	48 8d 35 e8 fe 01 00 	lea    0x1fee8(%rip),%rsi        # 238aa0 <memcmp+0x24f0>
  218bb8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  218bbe:	4c 89 c2             	mov    %r8,%rdx
  218bc1:	e8 fa d6 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218bc6:	48 8b b4 24 e8 03 00 	mov    0x3e8(%rsp),%rsi
  218bcd:	00 
  218bce:	48 8d bc 24 00 04 00 	lea    0x400(%rsp),%rdi
  218bd5:	00 
  218bd6:	48 8d 15 d3 fe 01 00 	lea    0x1fed3(%rip),%rdx        # 238ab0 <memcmp+0x2500>
  218bdd:	e8 0e 7a 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218be2:	e9 dc fe ff ff       	jmpq   218ac3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x9b3>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  218be7:	8b 94 24 60 04 00 00 	mov    0x460(%rsp),%edx
  218bee:	83 ea 03             	sub    $0x3,%edx
  218bf1:	b8 01 00 00 00       	mov    $0x1,%eax
  218bf6:	31 c9                	xor    %ecx,%ecx
  218bf8:	83 fa 00             	cmp    $0x0,%edx
  218bfb:	48 0f 44 c1          	cmove  %rcx,%rax
  218bff:	48 83 f8 01          	cmp    $0x1,%rax
  218c03:	75 43                	jne    218c48 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb38>
  218c05:	48 8d b4 24 48 04 00 	lea    0x448(%rsp),%rsi
  218c0c:	00 
  218c0d:	48 8d bc 24 78 04 00 	lea    0x478(%rsp),%rdi
  218c14:	00 
  218c15:	ba 30 00 00 00       	mov    $0x30,%edx
  218c1a:	e8 41 d9 01 00       	callq  236560 <memcpy>
                log::debug!(
  218c1f:	48 c7 84 24 a8 04 00 	movq   $0x4,0x4a8(%rsp)
  218c26:	00 04 00 00 00 
  218c2b:	48 8d bc 24 a8 04 00 	lea    0x4a8(%rsp),%rdi
  218c32:	00 
  218c33:	48 8d 35 fe 79 fe ff 	lea    -0x18602(%rip),%rsi        # 200638 <str.0+0x118>
  218c3a:	e8 b1 8e ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218c3f:	88 44 24 67          	mov    %al,0x67(%rsp)
  218c43:	e9 e6 00 00 00       	jmpq   218d2e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc1e>
                log::warn!("Boot info doesn't contain framebuffer information.");
  218c48:	48 c7 84 24 50 05 00 	movq   $0x2,0x550(%rsp)
  218c4f:	00 02 00 00 00 
  218c54:	48 8d bc 24 50 05 00 	lea    0x550(%rsp),%rdi
  218c5b:	00 
  218c5c:	48 8d 35 d5 79 fe ff 	lea    -0x1862b(%rip),%rsi        # 200638 <str.0+0x118>
  218c63:	e8 88 8e ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218c68:	88 44 24 66          	mov    %al,0x66(%rsp)
  218c6c:	8a 44 24 66          	mov    0x66(%rsp),%al
  218c70:	a8 01                	test   $0x1,%al
  218c72:	75 0c                	jne    218c80 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb70>
  218c74:	eb 00                	jmp    218c76 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xb66>
  218c76:	c6 84 24 5f 05 00 00 	movb   $0x0,0x55f(%rsp)
  218c7d:	00 
  218c7e:	eb 5a                	jmp    218cda <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xbca>
  218c80:	c6 84 24 2f 06 00 00 	movb   $0x0,0x62f(%rsp)
  218c87:	00 
  218c88:	48 8b 3d 81 24 02 00 	mov    0x22481(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218c8f:	0f b6 b4 24 2f 06 00 	movzbl 0x62f(%rsp),%esi
  218c96:	00 
  218c97:	e8 24 00 01 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218c9c:	48 89 84 24 30 06 00 	mov    %rax,0x630(%rsp)
  218ca3:	00 
  218ca4:	48 8b 84 24 30 06 00 	mov    0x630(%rsp),%rax
  218cab:	00 
  218cac:	48 89 84 24 60 05 00 	mov    %rax,0x560(%rsp)
  218cb3:	00 
  218cb4:	48 8d bc 24 50 05 00 	lea    0x550(%rsp),%rdi
  218cbb:	00 
  218cbc:	48 8d b4 24 60 05 00 	lea    0x560(%rsp),%rsi
  218cc3:	00 
  218cc4:	e8 27 8e ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218cc9:	88 44 24 65          	mov    %al,0x65(%rsp)
  218ccd:	8a 44 24 65          	mov    0x65(%rsp),%al
  218cd1:	24 01                	and    $0x1,%al
  218cd3:	88 84 24 5f 05 00 00 	mov    %al,0x55f(%rsp)
  218cda:	f6 84 24 5f 05 00 00 	testb  $0x1,0x55f(%rsp)
  218ce1:	01 
  218ce2:	0f 84 97 f4 ff ff    	je     21817f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  218ce8:	48 8d bc 24 68 05 00 	lea    0x568(%rsp),%rdi
  218cef:	00 
  218cf0:	48 8d 35 f1 fd 01 00 	lea    0x1fdf1(%rip),%rsi        # 238ae8 <memcmp+0x2538>
  218cf7:	ba 01 00 00 00       	mov    $0x1,%edx
  218cfc:	48 8d 0d c5 84 fe ff 	lea    -0x17b3b(%rip),%rcx        # 2011c8 <_ZN9r3_kernel2mm3phy16LINEAR_ALLOCATOR17hfb408389b35f1b7bE+0x8f>
  218d03:	31 c0                	xor    %eax,%eax
  218d05:	41 89 c0             	mov    %eax,%r8d
  218d08:	e8 b3 d5 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218d0d:	48 8b b4 24 50 05 00 	mov    0x550(%rsp),%rsi
  218d14:	00 
  218d15:	48 8d bc 24 68 05 00 	lea    0x568(%rsp),%rdi
  218d1c:	00 
  218d1d:	48 8d 15 d4 fd 01 00 	lea    0x1fdd4(%rip),%rdx        # 238af8 <memcmp+0x2548>
  218d24:	e8 c7 78 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218d29:	e9 51 f4 ff ff       	jmpq   21817f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  218d2e:	8a 44 24 67          	mov    0x67(%rsp),%al
                log::debug!(
  218d32:	a8 01                	test   $0x1,%al
  218d34:	75 0c                	jne    218d42 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc32>
  218d36:	eb 00                	jmp    218d38 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc28>
  218d38:	c6 84 24 b7 04 00 00 	movb   $0x0,0x4b7(%rsp)
  218d3f:	00 
  218d40:	eb 5a                	jmp    218d9c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0xc8c>
  218d42:	c6 84 24 1f 06 00 00 	movb   $0x0,0x61f(%rsp)
  218d49:	00 
  218d4a:	48 8b 3d bf 23 02 00 	mov    0x223bf(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  218d51:	0f b6 b4 24 1f 06 00 	movzbl 0x61f(%rsp),%esi
  218d58:	00 
  218d59:	e8 62 ff 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  218d5e:	48 89 84 24 20 06 00 	mov    %rax,0x620(%rsp)
  218d65:	00 
  218d66:	48 8b 84 24 20 06 00 	mov    0x620(%rsp),%rax
  218d6d:	00 
  218d6e:	48 89 84 24 b8 04 00 	mov    %rax,0x4b8(%rsp)
  218d75:	00 
  218d76:	48 8d bc 24 a8 04 00 	lea    0x4a8(%rsp),%rdi
  218d7d:	00 
  218d7e:	48 8d b4 24 b8 04 00 	lea    0x4b8(%rsp),%rsi
  218d85:	00 
  218d86:	e8 65 8d ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  218d8b:	88 44 24 64          	mov    %al,0x64(%rsp)
  218d8f:	8a 44 24 64          	mov    0x64(%rsp),%al
  218d93:	24 01                	and    $0x1,%al
  218d95:	88 84 24 b7 04 00 00 	mov    %al,0x4b7(%rsp)
  218d9c:	f6 84 24 b7 04 00 00 	testb  $0x1,0x4b7(%rsp)
  218da3:	01 
  218da4:	0f 84 d5 f3 ff ff    	je     21817f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
                    fb_info.horizontal_resolution,
  218daa:	48 8d b4 24 78 04 00 	lea    0x478(%rsp),%rsi
  218db1:	00 
  218db2:	48 83 c6 08          	add    $0x8,%rsi
                    fb_info.vertical_resolution,
  218db6:	48 8d 94 24 78 04 00 	lea    0x478(%rsp),%rdx
  218dbd:	00 
  218dbe:	48 83 c2 10          	add    $0x10,%rdx
                    fb_info.bytes_per_pixel,
  218dc2:	48 8d 8c 24 78 04 00 	lea    0x478(%rsp),%rcx
  218dc9:	00 
  218dca:	48 83 c1 20          	add    $0x20,%rcx
                    fb_info.pixel_format
  218dce:	48 8d 84 24 78 04 00 	lea    0x478(%rsp),%rax
  218dd5:	00 
  218dd6:	48 83 c0 18          	add    $0x18,%rax
                log::debug!(
  218dda:	48 89 b4 24 30 05 00 	mov    %rsi,0x530(%rsp)
  218de1:	00 
  218de2:	48 89 94 24 38 05 00 	mov    %rdx,0x538(%rsp)
  218de9:	00 
  218dea:	48 89 8c 24 40 05 00 	mov    %rcx,0x540(%rsp)
  218df1:	00 
  218df2:	48 89 84 24 48 05 00 	mov    %rax,0x548(%rsp)
  218df9:	00 
  218dfa:	48 8b bc 24 30 05 00 	mov    0x530(%rsp),%rdi
  218e01:	00 
  218e02:	48 89 bc 24 f8 05 00 	mov    %rdi,0x5f8(%rsp)
  218e09:	00 
  218e0a:	48 8b 84 24 38 05 00 	mov    0x538(%rsp),%rax
  218e11:	00 
  218e12:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  218e17:	48 89 84 24 00 06 00 	mov    %rax,0x600(%rsp)
  218e1e:	00 
  218e1f:	48 8b 84 24 40 05 00 	mov    0x540(%rsp),%rax
  218e26:	00 
  218e27:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  218e2c:	48 89 84 24 08 06 00 	mov    %rax,0x608(%rsp)
  218e33:	00 
  218e34:	48 8b 84 24 48 05 00 	mov    0x548(%rsp),%rax
  218e3b:	00 
  218e3c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  218e41:	48 89 84 24 10 06 00 	mov    %rax,0x610(%rsp)
  218e48:	00 
  218e49:	48 8b 35 d8 22 02 00 	mov    0x222d8(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  218e50:	e8 2b 5f ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  218e55:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  218e5a:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  218e5f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  218e64:	48 8b 35 bd 22 02 00 	mov    0x222bd(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  218e6b:	e8 10 5f ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  218e70:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  218e75:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  218e7a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  218e7f:	48 8b 35 a2 22 02 00 	mov    0x222a2(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  218e86:	e8 f5 5e ff ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  218e8b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  218e90:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  218e95:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  218e9a:	48 8b 35 b7 22 02 00 	mov    0x222b7(%rip),%rsi        # 23b158 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  218ea1:	e8 7a 5e ff ff       	callq  20ed20 <_ZN4core3fmt10ArgumentV13new17haa5e6f547645fb6cE>
  218ea6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  218eab:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  218eb0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  218eb5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  218eba:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  218ebf:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  218ec4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  218ec9:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  218ece:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
  218ed3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
  218ed8:	4c 89 94 24 f0 04 00 	mov    %r10,0x4f0(%rsp)
  218edf:	00 
  218ee0:	4c 89 8c 24 f8 04 00 	mov    %r9,0x4f8(%rsp)
  218ee7:	00 
  218ee8:	4c 89 84 24 00 05 00 	mov    %r8,0x500(%rsp)
  218eef:	00 
  218ef0:	48 89 bc 24 08 05 00 	mov    %rdi,0x508(%rsp)
  218ef7:	00 
  218ef8:	48 89 b4 24 10 05 00 	mov    %rsi,0x510(%rsp)
  218eff:	00 
  218f00:	48 89 94 24 18 05 00 	mov    %rdx,0x518(%rsp)
  218f07:	00 
  218f08:	48 89 8c 24 20 05 00 	mov    %rcx,0x520(%rsp)
  218f0f:	00 
  218f10:	48 89 84 24 28 05 00 	mov    %rax,0x528(%rsp)
  218f17:	00 
  218f18:	48 8d 8c 24 f0 04 00 	lea    0x4f0(%rsp),%rcx
  218f1f:	00 
  218f20:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  218f27:	00 
  218f28:	48 8d 35 01 fc 01 00 	lea    0x1fc01(%rip),%rsi        # 238b30 <memcmp+0x2580>
  218f2f:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  218f35:	4c 89 c2             	mov    %r8,%rdx
  218f38:	e8 83 d3 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  218f3d:	48 8b b4 24 a8 04 00 	mov    0x4a8(%rsp),%rsi
  218f44:	00 
  218f45:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  218f4c:	00 
  218f4d:	48 8d 15 1c fc 01 00 	lea    0x1fc1c(%rip),%rdx        # 238b70 <memcmp+0x25c0>
  218f54:	e8 97 76 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  218f59:	e9 21 f2 ff ff       	jmpq   21817f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E+0x6f>
  218f5e:	cc                   	int3   
  218f5f:	cc                   	int3   

0000000000218f60 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a07b0083d885b34E>:
            fn deref(&self) -> &$T {
  218f60:	48 83 ec 18          	sub    $0x18,%rsp
  218f64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  218f69:	48 8d 05 c8 3c 02 00 	lea    0x23cc8(%rip),%rax        # 23cc38 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8b2ef1907b796913E>
  218f70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  218f75:	48 8d 3d bc 3c 02 00 	lea    0x23cbc(%rip),%rdi        # 23cc38 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8b2ef1907b796913E>
  218f7c:	e8 4f f4 fe ff       	callq  2083d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h16d26598992f5b82E>
  218f81:	48 89 04 24          	mov    %rax,(%rsp)
  218f85:	48 8b 04 24          	mov    (%rsp),%rax
            }
  218f89:	48 83 c4 18          	add    $0x18,%rsp
  218f8d:	c3                   	retq   
  218f8e:	cc                   	int3   
  218f8f:	cc                   	int3   

0000000000218f90 <_ZN4core4iter6traits8iterator8Iterator3map17h249dee666523cc13E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  218f90:	48 83 ec 28          	sub    $0x28,%rsp
  218f94:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218f99:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map::new(self, f)
  218f9e:	e8 0d 7d ff ff       	callq  210cb0 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h6cb0038798678fbaE>
  218fa3:	48 89 04 24          	mov    %rax,(%rsp)
  218fa7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  218fac:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  218fb1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  218fb5:	48 83 c4 28          	add    $0x28,%rsp
  218fb9:	c3                   	retq   
  218fba:	cc                   	int3   
  218fbb:	cc                   	int3   
  218fbc:	cc                   	int3   
  218fbd:	cc                   	int3   
  218fbe:	cc                   	int3   
  218fbf:	cc                   	int3   

0000000000218fc0 <_ZN4core4iter6traits8iterator8Iterator3map17hbd9539eb03a80085E>:
    fn map<B, F>(self, f: F) -> Map<Self, F>
  218fc0:	48 83 ec 28          	sub    $0x28,%rsp
  218fc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218fc9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Map::new(self, f)
  218fce:	e8 ad 7c ff ff       	callq  210c80 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h12ca5be8f998c4eaE>
  218fd3:	48 89 04 24          	mov    %rax,(%rsp)
  218fd7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  218fdc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  218fe1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  218fe5:	48 83 c4 28          	add    $0x28,%rsp
  218fe9:	c3                   	retq   
  218fea:	cc                   	int3   
  218feb:	cc                   	int3   
  218fec:	cc                   	int3   
  218fed:	cc                   	int3   
  218fee:	cc                   	int3   
  218fef:	cc                   	int3   

0000000000218ff0 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE>:
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
  218ff0:	48 83 ec 58          	sub    $0x58,%rsp
  218ff4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  218ff9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  218ffe:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
        let mut accum = init;
  219003:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        while let Some(x) = self.next() {
  219008:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21900d:	e8 8e 05 00 00       	callq  2195a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  219012:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219017:	b8 01 00 00 00       	mov    $0x1,%eax
  21901c:	31 c9                	xor    %ecx,%ecx
  21901e:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  219024:	48 0f 44 c1          	cmove  %rcx,%rax
  219028:	48 83 f8 01          	cmp    $0x1,%rax
  21902c:	75 34                	jne    219062 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x72>
  21902e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  219033:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            accum = f(accum, x);
  219038:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21903d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  219042:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  219047:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21904c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  219051:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  219056:	e8 15 7d ff ff       	callq  210d70 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17hce0c6cf362607ce0E>
  21905b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219060:	eb 10                	jmp    219072 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x82>
        while let Some(x) = self.next() {
  219062:	eb 00                	jmp    219064 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x74>
    }
  219064:	eb 00                	jmp    219066 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x76>
  219066:	eb 00                	jmp    219068 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x78>
  219068:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21906d:	48 83 c4 58          	add    $0x58,%rsp
  219071:	c3                   	retq   
  219072:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            accum = f(accum, x);
  219077:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        while let Some(x) = self.next() {
  21907c:	eb 8a                	jmp    219008 <_ZN4core4iter6traits8iterator8Iterator4fold17h3d03959adc2ede5fE+0x18>
  21907e:	cc                   	int3   
  21907f:	cc                   	int3   

0000000000219080 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE>:
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
  219080:	48 83 ec 58          	sub    $0x58,%rsp
  219084:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  219089:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21908e:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
        let mut accum = init;
  219093:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        while let Some(x) = self.next() {
  219098:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  21909d:	e8 fe 04 00 00       	callq  2195a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  2190a2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2190a7:	b8 01 00 00 00       	mov    $0x1,%eax
  2190ac:	31 c9                	xor    %ecx,%ecx
  2190ae:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
  2190b4:	48 0f 44 c1          	cmove  %rcx,%rax
  2190b8:	48 83 f8 01          	cmp    $0x1,%rax
  2190bc:	75 34                	jne    2190f2 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x72>
  2190be:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2190c3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            accum = f(accum, x);
  2190c8:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2190cd:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2190d2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2190d7:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2190dc:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  2190e1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2190e6:	e8 15 7c ff ff       	callq  210d00 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h062e9aab7d422d50E>
  2190eb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2190f0:	eb 10                	jmp    219102 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x82>
        while let Some(x) = self.next() {
  2190f2:	eb 00                	jmp    2190f4 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x74>
    }
  2190f4:	eb 00                	jmp    2190f6 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x76>
  2190f6:	eb 00                	jmp    2190f8 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x78>
  2190f8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2190fd:	48 83 c4 58          	add    $0x58,%rsp
  219101:	c3                   	retq   
  219102:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            accum = f(accum, x);
  219107:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        while let Some(x) = self.next() {
  21910c:	eb 8a                	jmp    219098 <_ZN4core4iter6traits8iterator8Iterator4fold17h6530ecb0cf95683bE+0x18>
  21910e:	cc                   	int3   
  21910f:	cc                   	int3   

0000000000219110 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
  219110:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  219117:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21911c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  219121:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  219126:	e8 55 7a ff ff       	callq  210b80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h17e65275eff91432E>
  21912b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219130:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  219135:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
  21913a:	e8 e1 79 ff ff       	callq  210b20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>

            let end = if mem::size_of::<T>() == 0 {
  21913f:	eb 00                	jmp    219141 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0x31>
  219141:	b8 06 00 00 00       	mov    $0x6,%eax
  219146:	48 83 f8 00          	cmp    $0x0,%rax
  21914a:	75 32                	jne    21917e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0x6e>
  21914c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219151:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219156:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21915b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219160:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  219165:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) }
  21916a:	48 01 c8             	add    %rcx,%rax
  21916d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  219172:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  219177:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21917c:	eb 59                	jmp    2191d7 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xc7>
  21917e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219183:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219188:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21918f:	00 
  219190:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  219197:	00 
  219198:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21919f:	00 
  2191a0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2191a7:	00 
        unsafe { intrinsics::offset(self, count) }
  2191a8:	48 6b c9 06          	imul   $0x6,%rcx,%rcx
  2191ac:	48 01 c8             	add    %rcx,%rax
  2191af:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2191b6:	00 
  2191b7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2191be:	00 
            } else {
                ptr.add(slice.len())
  2191bf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2191c4:	eb 00                	jmp    2191c6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xb6>
  2191c6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  2191cb:	e8 d0 ed 00 00       	callq  227fa0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  2191d0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2191d5:	eb 0c                	jmp    2191e3 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xd3>
  2191d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  2191dc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2191e1:	eb e3                	jmp    2191c6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h4371da28476aa5a5E+0xb6>
  2191e3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  2191e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2191ed:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2191f2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  2191f7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2191fc:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219201:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  219208:	c3                   	retq   
  219209:	cc                   	int3   
  21920a:	cc                   	int3   
  21920b:	cc                   	int3   
  21920c:	cc                   	int3   
  21920d:	cc                   	int3   
  21920e:	cc                   	int3   
  21920f:	cc                   	int3   

0000000000219210 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
  219210:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  219217:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21921c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  219221:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  219226:	e8 d5 07 00 00       	callq  219a00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he76bc40226449d5aE>
  21922b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219230:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  219235:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            assume(!ptr.is_null());
  21923a:	e8 61 07 00 00       	callq  2199a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>
            let end = if mem::size_of::<T>() == 0 {
  21923f:	eb 00                	jmp    219241 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0x31>
  219241:	b8 18 00 00 00       	mov    $0x18,%eax
  219246:	48 83 f8 00          	cmp    $0x0,%rax
  21924a:	75 32                	jne    21927e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0x6e>
  21924c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219251:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219256:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21925b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219260:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  219265:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        unsafe { intrinsics::arith_offset(self, count) }
  21926a:	48 01 c8             	add    %rcx,%rax
  21926d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  219272:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  219277:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  21927c:	eb 59                	jmp    2192d7 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xc7>
  21927e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219283:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219288:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21928f:	00 
  219290:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  219297:	00 
  219298:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21929f:	00 
  2192a0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2192a7:	00 
        unsafe { intrinsics::offset(self, count) }
  2192a8:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  2192ac:	48 01 c8             	add    %rcx,%rax
  2192af:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2192b6:	00 
  2192b7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2192be:	00 
                ptr.add(slice.len())
  2192bf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2192c4:	eb 00                	jmp    2192c6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xb6>
  2192c6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  2192cb:	e8 80 ec 00 00       	callq  227f50 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>
  2192d0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2192d5:	eb 0c                	jmp    2192e3 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xd3>
  2192d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  2192dc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2192e1:	eb e3                	jmp    2192c6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E+0xb6>
  2192e3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  2192e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2192ed:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2192f2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  2192f7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2192fc:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219301:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  219308:	c3                   	retq   
  219309:	cc                   	int3   
  21930a:	cc                   	int3   
  21930b:	cc                   	int3   
  21930c:	cc                   	int3   
  21930d:	cc                   	int3   
  21930e:	cc                   	int3   
  21930f:	cc                   	int3   

0000000000219310 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
  219310:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  219317:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21931c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  219321:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_mut_ptr();
  219326:	e8 75 a1 ff ff       	callq  2134a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h77ff0a5df0613473E>
  21932b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219330:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  219335:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // the length, to also allows for the fast `ptr == end` check.
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more informations.
        unsafe {
            assume(!ptr.is_null());
  21933a:	e8 31 a1 ff ff       	callq  213470 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>

            let end = if mem::size_of::<T>() == 0 {
  21933f:	eb 00                	jmp    219341 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0x31>
  219341:	b8 08 00 00 00       	mov    $0x8,%eax
  219346:	48 83 f8 00          	cmp    $0x0,%rax
  21934a:	75 32                	jne    21937e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0x6e>
  21934c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219351:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219356:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21935b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  219360:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  219365:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *mut T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
  21936a:	48 01 c8             	add    %rcx,%rax
  21936d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  219372:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  219377:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
  21937c:	eb 59                	jmp    2193d7 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xc7>
  21937e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219383:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219388:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21938f:	00 
  219390:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  219397:	00 
  219398:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21939f:	00 
  2193a0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2193a7:	00 
        unsafe { intrinsics::offset(self, count) as *mut T }
  2193a8:	48 c1 e1 03          	shl    $0x3,%rcx
  2193ac:	48 01 c8             	add    %rcx,%rax
  2193af:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2193b6:	00 
  2193b7:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2193be:	00 
            } else {
                ptr.add(slice.len())
  2193bf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2193c4:	eb 00                	jmp    2193c6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xb6>
  2193c6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
  2193cb:	e8 f0 eb 00 00       	callq  227fc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>
  2193d0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2193d5:	eb 0c                	jmp    2193e3 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xd3>
  2193d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
  2193dc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  2193e1:	eb e3                	jmp    2193c6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17he12892fd72c280ecE+0xb6>
  2193e3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
  2193e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2193ed:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2193f2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  2193f7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2193fc:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  219401:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  219408:	c3                   	retq   
  219409:	cc                   	int3   
  21940a:	cc                   	int3   
  21940b:	cc                   	int3   
  21940c:	cc                   	int3   
  21940d:	cc                   	int3   
  21940e:	cc                   	int3   
  21940f:	cc                   	int3   

0000000000219410 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h67d170e4f81cc63cE>:
    fn into_iter(self) -> Iter<'a, T> {
  219410:	48 83 ec 28          	sub    $0x28,%rsp
  219414:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  219419:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.iter()
  21941e:	e8 2d 78 01 00       	callq  230c50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  219423:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219428:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21942d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  219432:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  219437:	48 83 c4 28          	add    $0x28,%rsp
  21943b:	c3                   	retq   
  21943c:	cc                   	int3   
  21943d:	cc                   	int3   
  21943e:	cc                   	int3   
  21943f:	cc                   	int3   

0000000000219440 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h39afff3affafd620E>:
    fn into_iter(self) -> I {
  219440:	48 83 ec 10          	sub    $0x10,%rsp
  219444:	48 89 f2             	mov    %rsi,%rdx
  219447:	48 89 f8             	mov    %rdi,%rax
  21944a:	48 89 04 24          	mov    %rax,(%rsp)
  21944e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  219453:	48 83 c4 10          	add    $0x10,%rsp
  219457:	c3                   	retq   
  219458:	cc                   	int3   
  219459:	cc                   	int3   
  21945a:	cc                   	int3   
  21945b:	cc                   	int3   
  21945c:	cc                   	int3   
  21945d:	cc                   	int3   
  21945e:	cc                   	int3   
  21945f:	cc                   	int3   

0000000000219460 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h47923d31c017090eE>:
    fn into_iter(self) -> I {
  219460:	48 83 ec 10          	sub    $0x10,%rsp
  219464:	48 89 f2             	mov    %rsi,%rdx
  219467:	48 89 f8             	mov    %rdi,%rax
  21946a:	48 89 04 24          	mov    %rax,(%rsp)
  21946e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  219473:	48 83 c4 10          	add    $0x10,%rsp
  219477:	c3                   	retq   
  219478:	cc                   	int3   
  219479:	cc                   	int3   
  21947a:	cc                   	int3   
  21947b:	cc                   	int3   
  21947c:	cc                   	int3   
  21947d:	cc                   	int3   
  21947e:	cc                   	int3   
  21947f:	cc                   	int3   

0000000000219480 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h878ea9e8fd23aa8cE>:
    fn into_iter(self) -> I {
  219480:	48 83 ec 10          	sub    $0x10,%rsp
  219484:	48 89 f2             	mov    %rsi,%rdx
  219487:	48 89 f8             	mov    %rdi,%rax
  21948a:	48 89 04 24          	mov    %rax,(%rsp)
  21948e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  219493:	48 83 c4 10          	add    $0x10,%rsp
  219497:	c3                   	retq   
  219498:	cc                   	int3   
  219499:	cc                   	int3   
  21949a:	cc                   	int3   
  21949b:	cc                   	int3   
  21949c:	cc                   	int3   
  21949d:	cc                   	int3   
  21949e:	cc                   	int3   
  21949f:	cc                   	int3   

00000000002194a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
  2194a0:	48 83 ec 78          	sub    $0x78,%rsp
  2194a4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2194a9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                // SAFETY: `assume` calls are safe since a slice's start pointer
                // must be non-null, and slices over non-ZSTs must also have a
                // non-null end pointer. The call to `next_unchecked!` is safe
                // since we check if the iterator is empty first.
                unsafe {
                    assume(!self.ptr.as_ptr().is_null());
  2194ae:	48 8b 3f             	mov    (%rdi),%rdi
  2194b1:	e8 6a ec 00 00       	callq  228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  2194b6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2194bb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2194c0:	e8 1b 76 ff ff       	callq  210ae0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h08c48a467a5f196fE>
                    if mem::size_of::<T>() != 0 {
  2194c5:	eb 00                	jmp    2194c7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x27>
  2194c7:	b8 06 00 00 00       	mov    $0x6,%eax
  2194cc:	48 83 f8 00          	cmp    $0x0,%rax
  2194d0:	75 02                	jne    2194d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x34>
  2194d2:	eb 10                	jmp    2194e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x44>
  2194d4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  2194d9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2194dd:	e8 3e 76 ff ff       	callq  210b20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hf952fae73f37d99bE>
                    if mem::size_of::<T>() != 0 {
  2194e2:	eb 00                	jmp    2194e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0x44>
  2194e4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    }
                    if is_empty!(self) {
  2194e9:	48 8b 38             	mov    (%rax),%rdi
  2194ec:	e8 2f ec 00 00       	callq  228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  2194f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2194f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2194fb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219500:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  219504:	74 77                	je     21957d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xdd>
  219506:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21950b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219510:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  219517:	00 00 
                    let old = self.ptr.as_ptr();
  219519:	48 8b 38             	mov    (%rax),%rdi
  21951c:	e8 ff eb 00 00       	callq  228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  219521:	48 89 c1             	mov    %rax,%rcx
  219524:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219529:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21952e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  219533:	48 8b 38             	mov    (%rax),%rdi
  219536:	e8 e5 eb 00 00       	callq  228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>
  21953b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  219540:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  219547:	00 00 
  219549:	48 83 c0 06          	add    $0x6,%rax
  21954d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  219552:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  219557:	e8 44 ea 00 00       	callq  227fa0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  21955c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219561:	48 89 c2             	mov    %rax,%rdx
  219564:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219569:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21956c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  219571:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  219576:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        None
                    } else {
                        Some(next_unchecked!(self))
  21957b:	eb 13                	jmp    219590 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xf0>
                        None
  21957d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  219584:	00 00 
                    }
                }
            }
  219586:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21958b:	48 83 c4 78          	add    $0x78,%rsp
  21958f:	c3                   	retq   
  219590:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  219595:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21959a:	eb ea                	jmp    219586 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E+0xe6>
  21959c:	cc                   	int3   
  21959d:	cc                   	int3   
  21959e:	cc                   	int3   
  21959f:	cc                   	int3   

00000000002195a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>:
            fn next(&mut self) -> Option<$elem> {
  2195a0:	48 83 ec 78          	sub    $0x78,%rsp
  2195a4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2195a9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  2195ae:	48 8b 3f             	mov    (%rdi),%rdi
  2195b1:	e8 0a 77 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  2195b6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2195bb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2195c0:	e8 fb 5d 01 00       	callq  22f3c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
                    if mem::size_of::<T>() != 0 {
  2195c5:	eb 00                	jmp    2195c7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x27>
  2195c7:	b8 01 00 00 00       	mov    $0x1,%eax
  2195cc:	48 83 f8 00          	cmp    $0x0,%rax
  2195d0:	75 02                	jne    2195d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x34>
  2195d2:	eb 10                	jmp    2195e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x44>
  2195d4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  2195d9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2195dd:	e8 8e 82 01 00       	callq  231870 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
                    if mem::size_of::<T>() != 0 {
  2195e2:	eb 00                	jmp    2195e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0x44>
  2195e4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  2195e9:	48 8b 38             	mov    (%rax),%rdi
  2195ec:	e8 cf 76 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  2195f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2195f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2195fb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219600:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  219604:	74 77                	je     21967d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xdd>
  219606:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21960b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219610:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  219617:	00 00 
                    let old = self.ptr.as_ptr();
  219619:	48 8b 38             	mov    (%rax),%rdi
  21961c:	e8 9f 76 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  219621:	48 89 c1             	mov    %rax,%rcx
  219624:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219629:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21962e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  219633:	48 8b 38             	mov    (%rax),%rdi
  219636:	e8 85 76 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21963b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  219640:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  219647:	00 00 
  219649:	48 83 c0 01          	add    $0x1,%rax
  21964d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  219652:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  219657:	e8 44 76 01 00       	callq  230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  21965c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219661:	48 89 c2             	mov    %rax,%rdx
  219664:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219669:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21966c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  219671:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  219676:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21967b:	eb 13                	jmp    219690 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xf0>
                        None
  21967d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  219684:	00 00 
            }
  219686:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21968b:	48 83 c4 78          	add    $0x78,%rsp
  21968f:	c3                   	retq   
  219690:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  219695:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21969a:	eb ea                	jmp    219686 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E+0xe6>
  21969c:	cc                   	int3   
  21969d:	cc                   	int3   
  21969e:	cc                   	int3   
  21969f:	cc                   	int3   

00000000002196a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E>:
            fn next(&mut self) -> Option<$elem> {
  2196a0:	48 83 ec 78          	sub    $0x78,%rsp
  2196a4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2196a9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  2196ae:	48 8b 3f             	mov    (%rdi),%rdi
  2196b1:	e8 5a ea 00 00       	callq  228110 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  2196b6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2196bb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2196c0:	e8 ab 02 00 00       	callq  219970 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h60fea0f2c1683ef6E>
                    if mem::size_of::<T>() != 0 {
  2196c5:	eb 00                	jmp    2196c7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x27>
  2196c7:	b8 18 00 00 00       	mov    $0x18,%eax
  2196cc:	48 83 f8 00          	cmp    $0x0,%rax
  2196d0:	75 02                	jne    2196d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x34>
  2196d2:	eb 10                	jmp    2196e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x44>
  2196d4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  2196d9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2196dd:	e8 be 02 00 00       	callq  2199a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>
                    if mem::size_of::<T>() != 0 {
  2196e2:	eb 00                	jmp    2196e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0x44>
  2196e4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  2196e9:	48 8b 38             	mov    (%rax),%rdi
  2196ec:	e8 1f ea 00 00       	callq  228110 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  2196f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2196f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2196fb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219700:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  219704:	74 77                	je     21977d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xdd>
  219706:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21970b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219710:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  219717:	00 00 
                    let old = self.ptr.as_ptr();
  219719:	48 8b 38             	mov    (%rax),%rdi
  21971c:	e8 ef e9 00 00       	callq  228110 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  219721:	48 89 c1             	mov    %rax,%rcx
  219724:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219729:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21972e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  219733:	48 8b 38             	mov    (%rax),%rdi
  219736:	e8 d5 e9 00 00       	callq  228110 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>
  21973b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  219740:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  219747:	00 00 
  219749:	48 83 c0 18          	add    $0x18,%rax
  21974d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  219752:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  219757:	e8 f4 e7 00 00       	callq  227f50 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>
  21975c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219761:	48 89 c2             	mov    %rax,%rdx
  219764:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219769:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21976c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  219771:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  219776:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21977b:	eb 13                	jmp    219790 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xf0>
                        None
  21977d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  219784:	00 00 
            }
  219786:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21978b:	48 83 c4 78          	add    $0x78,%rsp
  21978f:	c3                   	retq   
  219790:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  219795:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21979a:	eb ea                	jmp    219786 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h41b60a30cbb93023E+0xe6>
  21979c:	cc                   	int3   
  21979d:	cc                   	int3   
  21979e:	cc                   	int3   
  21979f:	cc                   	int3   

00000000002197a0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE>:
            fn next(&mut self) -> Option<$elem> {
  2197a0:	48 83 ec 78          	sub    $0x78,%rsp
  2197a4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2197a9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                    assume(!self.ptr.as_ptr().is_null());
  2197ae:	48 8b 3f             	mov    (%rdi),%rdi
  2197b1:	e8 2a e9 00 00       	callq  2280e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  2197b6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2197bb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  2197c0:	e8 ab 9c ff ff       	callq  213470 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>
                    if mem::size_of::<T>() != 0 {
  2197c5:	eb 00                	jmp    2197c7 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x27>
  2197c7:	b8 08 00 00 00       	mov    $0x8,%eax
  2197cc:	48 83 f8 00          	cmp    $0x0,%rax
  2197d0:	75 02                	jne    2197d4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x34>
  2197d2:	eb 10                	jmp    2197e4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x44>
  2197d4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  2197d9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  2197dd:	e8 8e 9c ff ff       	callq  213470 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0c4721990ee26bd6E>
                    if mem::size_of::<T>() != 0 {
  2197e2:	eb 00                	jmp    2197e4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0x44>
  2197e4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    if is_empty!(self) {
  2197e9:	48 8b 38             	mov    (%rax),%rdi
  2197ec:	e8 ef e8 00 00       	callq  2280e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  2197f1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2197f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2197fb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219800:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  219804:	74 77                	je     21987d <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xdd>
  219806:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21980b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219810:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  219817:	00 00 
                    let old = self.ptr.as_ptr();
  219819:	48 8b 38             	mov    (%rax),%rdi
  21981c:	e8 bf e8 00 00       	callq  2280e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  219821:	48 89 c1             	mov    %rax,%rcx
  219824:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  219829:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21982e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  219833:	48 8b 38             	mov    (%rax),%rdi
  219836:	e8 a5 e8 00 00       	callq  2280e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>
  21983b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  219840:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  219847:	00 00 
  219849:	48 83 c0 08          	add    $0x8,%rax
  21984d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  219852:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  219857:	e8 64 e7 00 00       	callq  227fc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>
  21985c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219861:	48 89 c2             	mov    %rax,%rdx
  219864:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219869:	48 89 11             	mov    %rdx,(%rcx)
                    old
  21986c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  219871:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  219876:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        Some(next_unchecked!(self))
  21987b:	eb 13                	jmp    219890 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xf0>
                        None
  21987d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  219884:	00 00 
            }
  219886:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21988b:	48 83 c4 78          	add    $0x78,%rsp
  21988f:	c3                   	retq   
  219890:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  219895:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  21989a:	eb ea                	jmp    219886 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4db234a06312339aE+0xe6>
  21989c:	cc                   	int3   
  21989d:	cc                   	int3   
  21989e:	cc                   	int3   
  21989f:	cc                   	int3   

00000000002198a0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17hc3f539d28e583c05E>:
    pub fn into_option(self) -> Option<T> {
  2198a0:	48 83 ec 28          	sub    $0x28,%rsp
  2198a4:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  2198a8:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.into()
  2198ad:	e8 6e 01 00 00       	callq  219a20 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h16ba7f27b05eae2aE>
  2198b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2198b7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2198bc:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2198c1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2198c6:	48 83 c4 28          	add    $0x28,%rsp
  2198ca:	c3                   	retq   
  2198cb:	cc                   	int3   
  2198cc:	cc                   	int3   
  2198cd:	cc                   	int3   
  2198ce:	cc                   	int3   
  2198cf:	cc                   	int3   

00000000002198d0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
  2198d0:	48 83 ec 20          	sub    $0x20,%rsp
  2198d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2198d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  2198dd:	8b 07                	mov    (%rdi),%eax
  2198df:	48 85 c0             	test   %rax,%rax
  2198e2:	74 06                	je     2198ea <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x1a>
  2198e4:	eb 00                	jmp    2198e6 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x16>
  2198e6:	eb 16                	jmp    2198fe <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x2e>
  2198e8:	0f 0b                	ud2    
  2198ea:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  2198ee:	48 83 c0 08          	add    $0x8,%rax
  2198f2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2198f7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2198fc:	eb 09                	jmp    219907 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_mut17h10799d3997a4140cE+0x37>
            Self::None => None,
  2198fe:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  219905:	00 00 
    }
  219907:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21990c:	48 83 c4 20          	add    $0x20,%rsp
  219910:	c3                   	retq   
  219911:	cc                   	int3   
  219912:	cc                   	int3   
  219913:	cc                   	int3   
  219914:	cc                   	int3   
  219915:	cc                   	int3   
  219916:	cc                   	int3   
  219917:	cc                   	int3   
  219918:	cc                   	int3   
  219919:	cc                   	int3   
  21991a:	cc                   	int3   
  21991b:	cc                   	int3   
  21991c:	cc                   	int3   
  21991d:	cc                   	int3   
  21991e:	cc                   	int3   
  21991f:	cc                   	int3   

0000000000219920 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E>:
    pub const fn as_ref(&self) -> Option<&T> {
  219920:	48 83 ec 20          	sub    $0x20,%rsp
  219924:	48 89 3c 24          	mov    %rdi,(%rsp)
  219928:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  21992d:	8b 07                	mov    (%rdi),%eax
  21992f:	48 85 c0             	test   %rax,%rax
  219932:	74 06                	je     21993a <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x1a>
  219934:	eb 00                	jmp    219936 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x16>
  219936:	eb 16                	jmp    21994e <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x2e>
  219938:	0f 0b                	ud2    
  21993a:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  21993e:	48 83 c0 08          	add    $0x8,%rax
  219942:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219947:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21994c:	eb 09                	jmp    219957 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h83ef60315e6e0523E+0x37>
            Self::None => None,
  21994e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  219955:	00 00 
    }
  219957:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21995c:	48 83 c4 20          	add    $0x20,%rsp
  219960:	c3                   	retq   
  219961:	cc                   	int3   
  219962:	cc                   	int3   
  219963:	cc                   	int3   
  219964:	cc                   	int3   
  219965:	cc                   	int3   
  219966:	cc                   	int3   
  219967:	cc                   	int3   
  219968:	cc                   	int3   
  219969:	cc                   	int3   
  21996a:	cc                   	int3   
  21996b:	cc                   	int3   
  21996c:	cc                   	int3   
  21996d:	cc                   	int3   
  21996e:	cc                   	int3   
  21996f:	cc                   	int3   

0000000000219970 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h60fea0f2c1683ef6E>:
    pub const fn is_null(self) -> bool {
  219970:	48 83 ec 18          	sub    $0x18,%rsp
  219974:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  219979:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21997e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  219983:	31 c0                	xor    %eax,%eax
  219985:	89 c6                	mov    %eax,%esi
  219987:	e8 04 7e 01 00       	callq  231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21998c:	88 44 24 07          	mov    %al,0x7(%rsp)
  219990:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  219994:	24 01                	and    $0x1,%al
  219996:	0f b6 c0             	movzbl %al,%eax
  219999:	48 83 c4 18          	add    $0x18,%rsp
  21999d:	c3                   	retq   
  21999e:	cc                   	int3   
  21999f:	cc                   	int3   

00000000002199a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb989deaa83decdd3E>:
    pub const fn is_null(self) -> bool {
  2199a0:	48 83 ec 18          	sub    $0x18,%rsp
  2199a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2199a9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2199ae:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  2199b3:	31 c0                	xor    %eax,%eax
  2199b5:	89 c6                	mov    %eax,%esi
  2199b7:	e8 84 7e 01 00       	callq  231840 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  2199bc:	88 44 24 07          	mov    %al,0x7(%rsp)
  2199c0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  2199c4:	24 01                	and    $0x1,%al
  2199c6:	0f b6 c0             	movzbl %al,%eax
  2199c9:	48 83 c4 18          	add    $0x18,%rsp
  2199cd:	c3                   	retq   
  2199ce:	cc                   	int3   
  2199cf:	cc                   	int3   

00000000002199d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0f913f2fa7a5903cE>:
    pub fn iter(&self) -> Iter<'_, T> {
  2199d0:	48 83 ec 28          	sub    $0x28,%rsp
  2199d4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2199d9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  2199de:	e8 2d f8 ff ff       	callq  219210 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h93af3ce75d235069E>
  2199e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2199e8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2199ed:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2199f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2199f7:	48 83 c4 28          	add    $0x28,%rsp
  2199fb:	c3                   	retq   
  2199fc:	cc                   	int3   
  2199fd:	cc                   	int3   
  2199fe:	cc                   	int3   
  2199ff:	cc                   	int3   

0000000000219a00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he76bc40226449d5aE>:
    pub const fn as_ptr(&self) -> *const T {
  219a00:	48 83 ec 10          	sub    $0x10,%rsp
  219a04:	48 89 f8             	mov    %rdi,%rax
  219a07:	48 89 04 24          	mov    %rax,(%rsp)
  219a0b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  219a10:	48 83 c4 10          	add    $0x10,%rsp
  219a14:	c3                   	retq   
  219a15:	cc                   	int3   
  219a16:	cc                   	int3   
  219a17:	cc                   	int3   
  219a18:	cc                   	int3   
  219a19:	cc                   	int3   
  219a1a:	cc                   	int3   
  219a1b:	cc                   	int3   
  219a1c:	cc                   	int3   
  219a1d:	cc                   	int3   
  219a1e:	cc                   	int3   
  219a1f:	cc                   	int3   

0000000000219a20 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h16ba7f27b05eae2aE>:
    fn into(self) -> U {
  219a20:	48 83 ec 28          	sub    $0x28,%rsp
  219a24:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  219a28:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  219a2d:	e8 3e 5e ff ff       	callq  20f870 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17h16006d1a69fa1d57E>
  219a32:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219a37:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  219a3c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  219a41:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  219a46:	48 83 c4 28          	add    $0x28,%rsp
  219a4a:	c3                   	retq   
  219a4b:	cc                   	int3   
  219a4c:	cc                   	int3   
  219a4d:	cc                   	int3   
  219a4e:	cc                   	int3   
  219a4f:	cc                   	int3   

0000000000219a50 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE>:
    MicroSeconds = 1000,
}

impl SleepTimeRange {
    #[inline]
    pub fn get_range(ns: u64) -> Self {
  219a50:	48 83 ec 18          	sub    $0x18,%rsp
  219a54:	48 89 3c 24          	mov    %rdi,(%rsp)
  219a58:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if ns > (Self::Seconds as u64) {
  219a5d:	48 81 ff 00 ca 9a 3b 	cmp    $0x3b9aca00,%rdi
  219a64:	77 0e                	ja     219a74 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x24>
  219a66:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Seconds
        } else if ns > (Self::MilliSeconds as u64) {
  219a6a:	48 3d 40 42 0f 00    	cmp    $0xf4240,%rax
  219a70:	77 1d                	ja     219a8f <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x3f>
  219a72:	eb 11                	jmp    219a85 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x35>
            Self::Seconds
  219a74:	c7 44 24 0c 00 ca 9a 	movl   $0x3b9aca00,0xc(%rsp)
  219a7b:	3b 
            Self::MilliSeconds
        } else {
            Self::MicroSeconds
        }
    }
  219a7c:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  219a80:	48 83 c4 18          	add    $0x18,%rsp
  219a84:	c3                   	retq   
            Self::MicroSeconds
  219a85:	c7 44 24 0c e8 03 00 	movl   $0x3e8,0xc(%rsp)
  219a8c:	00 
        } else if ns > (Self::MilliSeconds as u64) {
  219a8d:	eb ed                	jmp    219a7c <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x2c>
            Self::MilliSeconds
  219a8f:	c7 44 24 0c 40 42 0f 	movl   $0xf4240,0xc(%rsp)
  219a96:	00 
        } else if ns > (Self::MilliSeconds as u64) {
  219a97:	eb e3                	jmp    219a7c <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE+0x2c>
  219a99:	cc                   	int3   
  219a9a:	cc                   	int3   
  219a9b:	cc                   	int3   
  219a9c:	cc                   	int3   
  219a9d:	cc                   	int3   
  219a9e:	cc                   	int3   
  219a9f:	cc                   	int3   

0000000000219aa0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E>:
}

// some helpers
pub fn safe_ticks_from_ns(ns: u64) -> TSCTicks {
  219aa0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  219aa7:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  219aac:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    let range = SleepTimeRange::get_range(ns);
  219ab1:	e8 9a ff ff ff       	callq  219a50 <_ZN9r3_kernel3cpu3tsc14SleepTimeRange9get_range17h3eb3f4fa2a427c9fE>
  219ab6:	89 44 24 64          	mov    %eax,0x64(%rsp)
    match range {
  219aba:	8b 44 24 64          	mov    0x64(%rsp),%eax
  219abe:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  219ac3:	48 2d e8 03 00 00    	sub    $0x3e8,%rax
  219ac9:	74 78                	je     219b43 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0xa3>
  219acb:	eb 00                	jmp    219acd <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x2d>
  219acd:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  219ad2:	48 2d 40 42 0f 00    	sub    $0xf4240,%rax
  219ad8:	74 39                	je     219b13 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x73>
  219ada:	eb 00                	jmp    219adc <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x3c>
  219adc:	eb 02                	jmp    219ae0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x40>
  219ade:	0f 0b                	ud2    
  219ae0:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
        SleepTimeRange::Seconds => {
            let ms = ns / 1000000;
  219ae5:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
  219aea:	31 d2                	xor    %edx,%edx
  219aec:	48 f7 f1             	div    %rcx
  219aef:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  219af4:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  219afb:	00 
            let frequency = TSC::read_cpu_frequency();
  219afc:	e8 6f 01 00 00       	callq  219c70 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  219b01:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  219b06:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  219b0d:	00 
  219b0e:	e9 09 01 00 00       	jmpq   219c1c <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x17c>
  219b13:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            TSCTicks((ms * frequency) / 1000)
        }
        SleepTimeRange::MilliSeconds => {
            let us = ns / 1000;
  219b18:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  219b1d:	31 d2                	xor    %edx,%edx
  219b1f:	48 f7 f1             	div    %rcx
  219b22:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  219b27:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
            let frequency = TSC::read_cpu_frequency();
  219b2c:	e8 3f 01 00 00       	callq  219c70 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  219b31:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219b36:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  219b3d:	00 
  219b3e:	e9 90 00 00 00       	jmpq   219bd3 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x133>
            TSCTicks((us * frequency) / 1000000)
        }
        SleepTimeRange::MicroSeconds => {
            let frequency = TSC::read_cpu_frequency();
  219b43:	e8 28 01 00 00       	callq  219c70 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  219b48:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  219b4d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  219b52:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  219b57:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            TSCTicks((ns * frequency) * 1000000000)
  219b5c:	48 f7 e1             	mul    %rcx
  219b5f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219b64:	0f 90 c0             	seto   %al
  219b67:	a8 01                	test   $0x1,%al
  219b69:	75 1b                	jne    219b86 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0xe6>
  219b6b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219b70:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
  219b75:	48 f7 e1             	mul    %rcx
  219b78:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219b7d:	0f 90 c0             	seto   %al
  219b80:	a8 01                	test   $0x1,%al
  219b82:	75 28                	jne    219bac <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x10c>
  219b84:	eb 1a                	jmp    219ba0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x100>
  219b86:	48 8d 3d c3 76 fe ff 	lea    -0x1893d(%rip),%rdi        # 201250 <str.0>
  219b8d:	48 8d 15 14 f0 01 00 	lea    0x1f014(%rip),%rdx        # 238ba8 <memcmp+0x25f8>
  219b94:	be 21 00 00 00       	mov    $0x21,%esi
  219b99:	e8 c2 98 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219b9e:	0f 0b                	ud2    
  219ba0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  219ba5:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  219baa:	eb 1a                	jmp    219bc6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((ns * frequency) * 1000000000)
  219bac:	48 8d 3d 9d 76 fe ff 	lea    -0x18963(%rip),%rdi        # 201250 <str.0>
  219bb3:	48 8d 15 ee ef 01 00 	lea    0x1efee(%rip),%rdx        # 238ba8 <memcmp+0x25f8>
  219bba:	be 21 00 00 00       	mov    $0x21,%esi
  219bbf:	e8 9c 98 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219bc4:	0f 0b                	ud2    
    }
}
  219bc6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  219bcb:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  219bd2:	c3                   	retq   
  219bd3:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  219bd8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            TSCTicks((us * frequency) / 1000000)
  219bdd:	48 f7 e1             	mul    %rcx
  219be0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219be5:	0f 90 c0             	seto   %al
  219be8:	a8 01                	test   $0x1,%al
  219bea:	75 16                	jne    219c02 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x162>
  219bec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219bf1:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
  219bf6:	31 d2                	xor    %edx,%edx
  219bf8:	48 f7 f1             	div    %rcx
  219bfb:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  219c00:	eb c4                	jmp    219bc6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((us * frequency) / 1000000)
  219c02:	48 8d 3d 47 76 fe ff 	lea    -0x189b9(%rip),%rdi        # 201250 <str.0>
  219c09:	48 8d 15 b0 ef 01 00 	lea    0x1efb0(%rip),%rdx        # 238bc0 <memcmp+0x2610>
  219c10:	be 21 00 00 00       	mov    $0x21,%esi
  219c15:	e8 46 98 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219c1a:	0f 0b                	ud2    
  219c1c:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  219c21:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            TSCTicks((ms * frequency) / 1000)
  219c26:	48 f7 e1             	mul    %rcx
  219c29:	48 89 04 24          	mov    %rax,(%rsp)
  219c2d:	0f 90 c0             	seto   %al
  219c30:	a8 01                	test   $0x1,%al
  219c32:	75 18                	jne    219c4c <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x1ac>
  219c34:	48 8b 04 24          	mov    (%rsp),%rax
  219c38:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  219c3d:	31 d2                	xor    %edx,%edx
  219c3f:	48 f7 f1             	div    %rcx
  219c42:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        }
  219c47:	e9 7a ff ff ff       	jmpq   219bc6 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E+0x126>
            TSCTicks((ms * frequency) / 1000)
  219c4c:	48 8d 3d fd 75 fe ff 	lea    -0x18a03(%rip),%rdi        # 201250 <str.0>
  219c53:	48 8d 15 7e ef 01 00 	lea    0x1ef7e(%rip),%rdx        # 238bd8 <memcmp+0x2628>
  219c5a:	be 21 00 00 00       	mov    $0x21,%esi
  219c5f:	e8 fc 97 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219c64:	0f 0b                	ud2    
  219c66:	cc                   	int3   
  219c67:	cc                   	int3   
  219c68:	cc                   	int3   
  219c69:	cc                   	int3   
  219c6a:	cc                   	int3   
  219c6b:	cc                   	int3   
  219c6c:	cc                   	int3   
  219c6d:	cc                   	int3   
  219c6e:	cc                   	int3   
  219c6f:	cc                   	int3   

0000000000219c70 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>:

pub struct TSC;

impl TSC {
    #[inline]
    pub fn read_cpu_frequency() -> u64 {
  219c70:	48 83 ec 18          	sub    $0x18,%rsp
        let value = CPU_FREQUENCY.load(Ordering::SeqCst);
  219c74:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  219c79:	48 8d 3d e0 2f 02 00 	lea    0x22fe0(%rip),%rdi        # 23cc60 <_ZN9r3_kernel3cpu3tsc13CPU_FREQUENCY17h82e4bd433f9ea1bfE>
  219c80:	0f b6 74 24 0f       	movzbl 0xf(%rsp),%esi
  219c85:	e8 76 f1 00 00       	callq  228e00 <_ZN4core4sync6atomic9AtomicU644load17h8406c945683f8232E>
  219c8a:	48 89 04 24          	mov    %rax,(%rsp)
  219c8e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219c93:	48 8b 04 24          	mov    (%rsp),%rax
        value
    }
  219c97:	48 83 c4 18          	add    $0x18,%rsp
  219c9b:	c3                   	retq   
  219c9c:	cc                   	int3   
  219c9d:	cc                   	int3   
  219c9e:	cc                   	int3   
  219c9f:	cc                   	int3   

0000000000219ca0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>:

    #[inline]
    pub fn read_tsc() -> TSCTicks {
  219ca0:	48 83 ec 20          	sub    $0x20,%rsp
        let rax: u64;
        let rdx: u64;

        unsafe {
            asm!(
  219ca4:	0f 01 f9             	rdtscp 
  219ca7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  219cac:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                out("rcx") _,
                options(nostack, nomem)
            )
        }

        TSCTicks(rdx << 32 | (rax & 0xffffffff))
  219cb1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219cb6:	48 c1 e0 20          	shl    $0x20,%rax
  219cba:	48 89 04 24          	mov    %rax,(%rsp)
  219cbe:	48 8b 04 24          	mov    (%rsp),%rax
  219cc2:	48 b9 ff ff ff ff 00 	movabs $0xffffffff,%rcx
  219cc9:	00 00 00 
  219ccc:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
  219cd1:	48 09 c8             	or     %rcx,%rax
  219cd4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  219cd9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219cde:	48 83 c4 20          	add    $0x20,%rsp
  219ce2:	c3                   	retq   
  219ce3:	cc                   	int3   
  219ce4:	cc                   	int3   
  219ce5:	cc                   	int3   
  219ce6:	cc                   	int3   
  219ce7:	cc                   	int3   
  219ce8:	cc                   	int3   
  219ce9:	cc                   	int3   
  219cea:	cc                   	int3   
  219ceb:	cc                   	int3   
  219cec:	cc                   	int3   
  219ced:	cc                   	int3   
  219cee:	cc                   	int3   
  219cef:	cc                   	int3   

0000000000219cf0 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE>:
                options(nomem, nostack)
            )
        }
    }

    pub fn detect_cpu_speed() {
  219cf0:	48 83 ec 38          	sub    $0x38,%rsp
        let t1 = TSC::read_tsc();
  219cf4:	e8 a7 ff ff ff       	callq  219ca0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  219cf9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219cfe:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        pit::sleep_ns(10000000);
  219d03:	bf 80 96 98 00       	mov    $0x989680,%edi
  219d08:	e8 73 2c 01 00       	callq  22c980 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E>
        let t2 = TSC::read_tsc();
  219d0d:	e8 8e ff ff ff       	callq  219ca0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  219d12:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219d17:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219d1c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  219d21:	48 8b 44 24 10       	mov    0x10(%rsp),%rax

        CPU_FREQUENCY.store(100 * (t2.0 - t1.0), Ordering::SeqCst);
  219d26:	48 29 c8             	sub    %rcx,%rax
  219d29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219d2e:	0f 92 c0             	setb   %al
  219d31:	a8 01                	test   $0x1,%al
  219d33:	75 1a                	jne    219d4f <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x5f>
  219d35:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219d3a:	b9 64 00 00 00       	mov    $0x64,%ecx
  219d3f:	48 f7 e1             	mul    %rcx
  219d42:	48 89 04 24          	mov    %rax,(%rsp)
  219d46:	0f 90 c0             	seto   %al
  219d49:	a8 01                	test   $0x1,%al
  219d4b:	75 38                	jne    219d85 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x95>
  219d4d:	eb 1a                	jmp    219d69 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0x79>
  219d4f:	48 8d 3d 2a 75 fe ff 	lea    -0x18ad6(%rip),%rdi        # 201280 <str.1>
  219d56:	48 8d 15 93 ee 01 00 	lea    0x1ee93(%rip),%rdx        # 238bf0 <memcmp+0x2640>
  219d5d:	be 21 00 00 00       	mov    $0x21,%esi
  219d62:	e8 f9 96 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219d67:	0f 0b                	ud2    
  219d69:	48 8b 34 24          	mov    (%rsp),%rsi
  219d6d:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  219d72:	48 8d 3d e7 2e 02 00 	lea    0x22ee7(%rip),%rdi        # 23cc60 <_ZN9r3_kernel3cpu3tsc13CPU_FREQUENCY17h82e4bd433f9ea1bfE>
  219d79:	0f b6 54 24 27       	movzbl 0x27(%rsp),%edx
  219d7e:	e8 bd f0 00 00       	callq  228e40 <_ZN4core4sync6atomic9AtomicU645store17h5dabdcca03d941feE>
  219d83:	eb 1a                	jmp    219d9f <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE+0xaf>
  219d85:	48 8d 3d c4 74 fe ff 	lea    -0x18b3c(%rip),%rdi        # 201250 <str.0>
  219d8c:	48 8d 15 75 ee 01 00 	lea    0x1ee75(%rip),%rdx        # 238c08 <memcmp+0x2658>
  219d93:	be 21 00 00 00       	mov    $0x21,%esi
  219d98:	e8 c3 96 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219d9d:	0f 0b                	ud2    
    }
  219d9f:	48 83 c4 38          	add    $0x38,%rsp
  219da3:	c3                   	retq   
  219da4:	cc                   	int3   
  219da5:	cc                   	int3   
  219da6:	cc                   	int3   
  219da7:	cc                   	int3   
  219da8:	cc                   	int3   
  219da9:	cc                   	int3   
  219daa:	cc                   	int3   
  219dab:	cc                   	int3   
  219dac:	cc                   	int3   
  219dad:	cc                   	int3   
  219dae:	cc                   	int3   
  219daf:	cc                   	int3   

0000000000219db0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot11set_shot_at17haa166075b04f2944E>:
}

pub struct TSCTimerShot;

impl TSCTimerShot {
    pub fn set_shot_at(tick: TSCTicks) {
  219db0:	48 83 ec 20          	sub    $0x20,%rsp
  219db4:	48 89 3c 24          	mov    %rdi,(%rsp)
  219db8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let tick_high = (tick.0 >> 32) as u32;
  219dbd:	48 c1 ef 20          	shr    $0x20,%rdi
  219dc1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  219dc6:	48 8b 04 24          	mov    (%rsp),%rax
  219dca:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  219dcf:	89 ca                	mov    %ecx,%edx
  219dd1:	89 54 24 18          	mov    %edx,0x18(%rsp)
        let tick_low = tick.0 as u32;
  219dd5:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  219dd9:	b9 e0 06 00 00       	mov    $0x6e0,%ecx
        unsafe {
            asm!(
  219dde:	0f 30                	wrmsr  
                in("edx") tick_high,
                in("eax") tick_low,
                options(nomem, nostack)
            )
        }
    }
  219de0:	48 83 c4 20          	add    $0x20,%rsp
  219de4:	c3                   	retq   
  219de5:	cc                   	int3   
  219de6:	cc                   	int3   
  219de7:	cc                   	int3   
  219de8:	cc                   	int3   
  219de9:	cc                   	int3   
  219dea:	cc                   	int3   
  219deb:	cc                   	int3   
  219dec:	cc                   	int3   
  219ded:	cc                   	int3   
  219dee:	cc                   	int3   
  219def:	cc                   	int3   

0000000000219df0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot18reset_current_shot17h823569756d8e1e88E>:

    pub fn reset_current_shot() {
  219df0:	b9 e0 06 00 00       	mov    $0x6e0,%ecx
  219df5:	31 c0                	xor    %eax,%eax
        unsafe {
            asm!(
  219df7:	89 c2                	mov    %eax,%edx
  219df9:	0f 30                	wrmsr  
                in("edx") 0 as u32,
                in("eax") 0 as u32,
                options(nomem, nostack)
            )
        }
    }
  219dfb:	c3                   	retq   
  219dfc:	cc                   	int3   
  219dfd:	cc                   	int3   
  219dfe:	cc                   	int3   
  219dff:	cc                   	int3   

0000000000219e00 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE>:

    pub fn wait_for_shot_at(ticks: TSCTicks) {
  219e00:	48 83 ec 18          	sub    $0x18,%rsp
  219e04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // reset any shot if pending
        Self::reset_current_shot();
  219e09:	e8 e2 ff ff ff       	callq  219df0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot18reset_current_shot17h823569756d8e1e88E>
        Self::set_shot_at(ticks.clone());
  219e0e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  219e13:	e8 f8 02 00 00       	callq  21a110 <_ZN68_$LT$r3_kernel..cpu..tsc..TSCTicks$u20$as$u20$core..clone..Clone$GT$5clone17h8a1586d3bdd983c7E>
  219e18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219e1d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  219e22:	e8 89 ff ff ff       	callq  219db0 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot11set_shot_at17haa166075b04f2944E>

        unsafe {
            while TSC::read_tsc().0 < ticks.0 {
  219e27:	e8 74 fe ff ff       	callq  219ca0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  219e2c:	48 89 04 24          	mov    %rax,(%rsp)
  219e30:	48 8b 04 24          	mov    (%rsp),%rax
  219e34:	48 3b 44 24 10       	cmp    0x10(%rsp),%rax
  219e39:	72 03                	jb     219e3e <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x3e>
                asm!("sti; hlt;");
            }
            asm!("cli");
  219e3b:	fa                   	cli    
  219e3c:	eb 04                	jmp    219e42 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x42>
                asm!("sti; hlt;");
  219e3e:	fb                   	sti    
  219e3f:	f4                   	hlt    
  219e40:	eb e5                	jmp    219e27 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE+0x27>
        }
    }
  219e42:	48 83 c4 18          	add    $0x18,%rsp
  219e46:	c3                   	retq   
  219e47:	cc                   	int3   
  219e48:	cc                   	int3   
  219e49:	cc                   	int3   
  219e4a:	cc                   	int3   
  219e4b:	cc                   	int3   
  219e4c:	cc                   	int3   
  219e4d:	cc                   	int3   
  219e4e:	cc                   	int3   
  219e4f:	cc                   	int3   

0000000000219e50 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE>:
    pub fn sleep_ticks(ticks: u64) {
        let total_ticks = TSCTicks(TSC::read_tsc().0 + ticks);
        TSCTimerShot::wait_for_shot_at(total_ticks);
    }

    pub fn sleep_ns(ns: u64) {
  219e50:	48 83 ec 38          	sub    $0x38,%rsp
  219e54:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        let ticks = safe_ticks_from_ns(ns);
  219e59:	e8 42 fc ff ff       	callq  219aa0 <_ZN9r3_kernel3cpu3tsc18safe_ticks_from_ns17h621280c614562e43E>
  219e5e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  219e63:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        let total_ticks = TSCTicks(ticks.0 + TSC::read_tsc().0);
  219e68:	e8 33 fe ff ff       	callq  219ca0 <_ZN9r3_kernel3cpu3tsc3TSC8read_tsc17h2b155122b10c41edE>
  219e6d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  219e72:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  219e77:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  219e7c:	48 01 c8             	add    %rcx,%rax
  219e7f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  219e84:	0f 92 c0             	setb   %al
  219e87:	a8 01                	test   $0x1,%al
  219e89:	75 16                	jne    219ea1 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE+0x51>
  219e8b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  219e90:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        TSCTimerShot::wait_for_shot_at(total_ticks);
  219e95:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  219e9a:	e8 61 ff ff ff       	callq  219e00 <_ZN9r3_kernel3cpu3tsc12TSCTimerShot16wait_for_shot_at17hb4c1711055b4d9fcE>
  219e9f:	eb 1a                	jmp    219ebb <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE+0x6b>
        let total_ticks = TSCTicks(ticks.0 + TSC::read_tsc().0);
  219ea1:	48 8d 3d 08 74 fe ff 	lea    -0x18bf8(%rip),%rdi        # 2012b0 <str.2>
  219ea8:	48 8d 15 71 ed 01 00 	lea    0x1ed71(%rip),%rdx        # 238c20 <memcmp+0x2670>
  219eaf:	be 1c 00 00 00       	mov    $0x1c,%esi
  219eb4:	e8 a7 95 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219eb9:	0f 0b                	ud2    
    }
  219ebb:	48 83 c4 38          	add    $0x38,%rsp
  219ebf:	c3                   	retq   

0000000000219ec0 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE>:
    pub fn sleep_ms(ms: u64) {
        let ns = ms * 1000000;
        Self::sleep_ns(ns);
    }

    pub fn sleep_sec(sec: u64) {
  219ec0:	48 83 ec 18          	sub    $0x18,%rsp
  219ec4:	48 89 f8             	mov    %rdi,%rax
  219ec7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        let ns = sec * 1000000000;
  219ecc:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
  219ed1:	48 f7 e1             	mul    %rcx
  219ed4:	48 89 04 24          	mov    %rax,(%rsp)
  219ed8:	0f 90 c0             	seto   %al
  219edb:	a8 01                	test   $0x1,%al
  219edd:	75 10                	jne    219eef <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE+0x2f>
  219edf:	48 8b 3c 24          	mov    (%rsp),%rdi
  219ee3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Self::sleep_ns(ns);
  219ee8:	e8 63 ff ff ff       	callq  219e50 <_ZN9r3_kernel3cpu3tsc10TSCSleeper8sleep_ns17hd7ab507104d910afE>
  219eed:	eb 1a                	jmp    219f09 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE+0x49>
        let ns = sec * 1000000000;
  219eef:	48 8d 3d 5a 73 fe ff 	lea    -0x18ca6(%rip),%rdi        # 201250 <str.0>
  219ef6:	48 8d 15 3b ed 01 00 	lea    0x1ed3b(%rip),%rdx        # 238c38 <memcmp+0x2688>
  219efd:	be 21 00 00 00       	mov    $0x21,%esi
  219f02:	e8 59 95 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  219f07:	0f 0b                	ud2    
    }
  219f09:	48 83 c4 18          	add    $0x18,%rsp
  219f0d:	c3                   	retq   
  219f0e:	cc                   	int3   
  219f0f:	cc                   	int3   

0000000000219f10 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E>:
}

pub fn init_timer() {
  219f10:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    log::info!("Enabling CPU timestamp counter..");
  219f17:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  219f1e:	00 00 
  219f20:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  219f25:	48 8d 35 0c 67 fe ff 	lea    -0x198f4(%rip),%rsi        # 200638 <str.0+0x118>
  219f2c:	e8 bf 7b ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219f31:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  219f35:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  219f39:	a8 01                	test   $0x1,%al
  219f3b:	75 09                	jne    219f46 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x36>
  219f3d:	eb 00                	jmp    219f3f <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x2f>
  219f3f:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  219f44:	eb 4e                	jmp    219f94 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x84>
  219f46:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  219f4d:	00 
  219f4e:	48 8b 3d bb 11 02 00 	mov    0x211bb(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  219f55:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  219f5c:	00 
  219f5d:	e8 5e ed 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  219f62:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  219f69:	00 
  219f6a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  219f71:	00 
  219f72:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  219f77:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  219f7c:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  219f81:	e8 6a 7b ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  219f86:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  219f8a:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  219f8e:	24 01                	and    $0x1,%al
  219f90:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  219f94:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  219f99:	75 07                	jne    219fa2 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x92>
    TSC::detect_cpu_speed();
  219f9b:	e8 50 fd ff ff       	callq  219cf0 <_ZN9r3_kernel3cpu3tsc3TSC16detect_cpu_speed17h2bc059db28c6cc4fE>
  219fa0:	eb 3a                	jmp    219fdc <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0xcc>
    log::info!("Enabling CPU timestamp counter..");
  219fa2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  219fa7:	48 8d 35 a2 ec 01 00 	lea    0x1eca2(%rip),%rsi        # 238c50 <memcmp+0x26a0>
  219fae:	ba 01 00 00 00       	mov    $0x1,%edx
  219fb3:	48 8d 0d 56 73 fe ff 	lea    -0x18caa(%rip),%rcx        # 201310 <str.2+0x60>
  219fba:	31 c0                	xor    %eax,%eax
  219fbc:	41 89 c0             	mov    %eax,%r8d
  219fbf:	e8 fc c2 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  219fc4:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  219fc9:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  219fce:	48 8d 15 8b ec 01 00 	lea    0x1ec8b(%rip),%rdx        # 238c60 <memcmp+0x26b0>
  219fd5:	e8 16 66 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  219fda:	eb bf                	jmp    219f9b <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x8b>
    let cpu_frequency = TSC::read_cpu_frequency();
  219fdc:	e8 8f fc ff ff       	callq  219c70 <_ZN9r3_kernel3cpu3tsc3TSC18read_cpu_frequency17h88e338976d70fccdE>
  219fe1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    log::info!("Enabled CPU TSC, cpu_frequency={}", cpu_frequency);
  219fe6:	48 c7 44 24 70 03 00 	movq   $0x3,0x70(%rsp)
  219fed:	00 00 
  219fef:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  219ff4:	48 8d 35 3d 66 fe ff 	lea    -0x199c3(%rip),%rsi        # 200638 <str.0+0x118>
  219ffb:	e8 f0 7a ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a000:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  21a004:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  21a008:	a8 01                	test   $0x1,%al
  21a00a:	75 09                	jne    21a015 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x105>
  21a00c:	eb 00                	jmp    21a00e <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0xfe>
  21a00e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  21a013:	eb 54                	jmp    21a069 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x159>
  21a015:	c6 84 24 df 00 00 00 	movb   $0x0,0xdf(%rsp)
  21a01c:	00 
  21a01d:	48 8b 3d ec 10 02 00 	mov    0x210ec(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21a024:	0f b6 b4 24 df 00 00 	movzbl 0xdf(%rsp),%esi
  21a02b:	00 
  21a02c:	e8 8f ec 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21a031:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  21a038:	00 
  21a039:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  21a040:	00 
  21a041:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21a048:	00 
  21a049:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  21a04e:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  21a055:	00 
  21a056:	e8 95 7a ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21a05b:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  21a05f:	8a 44 24 1c          	mov    0x1c(%rsp),%al
  21a063:	24 01                	and    $0x1,%al
  21a065:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  21a069:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  21a06e:	75 08                	jne    21a078 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x168>
}
  21a070:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  21a077:	c3                   	retq   
    log::info!("Enabled CPU TSC, cpu_frequency={}", cpu_frequency);
  21a078:	48 8d 44 24 68       	lea    0x68(%rsp),%rax
  21a07d:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21a084:	00 
  21a085:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  21a08c:	00 
  21a08d:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  21a094:	00 
  21a095:	48 8b 35 c4 10 02 00 	mov    0x210c4(%rip),%rsi        # 23b160 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  21a09c:	e8 9f 4d ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21a0a1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a0a6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21a0ab:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a0b0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21a0b5:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  21a0bc:	00 
  21a0bd:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21a0c4:	00 
  21a0c5:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
  21a0cc:	00 
  21a0cd:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21a0d4:	00 
  21a0d5:	48 8d 35 bc eb 01 00 	lea    0x1ebbc(%rip),%rsi        # 238c98 <memcmp+0x26e8>
  21a0dc:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21a0e2:	4c 89 c2             	mov    %r8,%rdx
  21a0e5:	e8 d6 c1 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21a0ea:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21a0ef:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  21a0f6:	00 
  21a0f7:	48 8d 15 aa eb 01 00 	lea    0x1ebaa(%rip),%rdx        # 238ca8 <memcmp+0x26f8>
  21a0fe:	e8 ed 64 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21a103:	e9 68 ff ff ff       	jmpq   21a070 <_ZN9r3_kernel3cpu3tsc10init_timer17he78b424d6c173598E+0x160>
  21a108:	cc                   	int3   
  21a109:	cc                   	int3   
  21a10a:	cc                   	int3   
  21a10b:	cc                   	int3   
  21a10c:	cc                   	int3   
  21a10d:	cc                   	int3   
  21a10e:	cc                   	int3   
  21a10f:	cc                   	int3   

000000000021a110 <_ZN68_$LT$r3_kernel..cpu..tsc..TSCTicks$u20$as$u20$core..clone..Clone$GT$5clone17h8a1586d3bdd983c7E>:
#[derive(Clone, Copy)]
  21a110:	50                   	push   %rax
  21a111:	48 89 3c 24          	mov    %rdi,(%rsp)
  21a115:	48 8b 07             	mov    (%rdi),%rax
  21a118:	59                   	pop    %rcx
  21a119:	c3                   	retq   
  21a11a:	cc                   	int3   
  21a11b:	cc                   	int3   
  21a11c:	cc                   	int3   
  21a11d:	cc                   	int3   
  21a11e:	cc                   	int3   
  21a11f:	cc                   	int3   

000000000021a120 <_ZN9r3_kernel4acpi4init17haae37bb483bcdc2bE>:
pub mod rsdt;
pub mod madt;

pub fn init() {
  21a120:	50                   	push   %rax
    rsdt::setup_acpi();
  21a121:	e8 aa 8e ff ff       	callq  212fd0 <_ZN9r3_kernel4acpi4rsdt10setup_acpi17hb7365816d46348b9E>
    madt::setup_madt();
  21a126:	e8 b5 b5 00 00       	callq  2256e0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E>
  21a12b:	58                   	pop    %rax
  21a12c:	c3                   	retq   
  21a12d:	cc                   	int3   
  21a12e:	cc                   	int3   
  21a12f:	cc                   	int3   

000000000021a130 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2f9303b4e7cbcf37E>:
    fn from(t: T) -> T {
  21a130:	48 83 ec 10          	sub    $0x10,%rsp
  21a134:	48 89 f2             	mov    %rsi,%rdx
  21a137:	48 89 f8             	mov    %rdi,%rax
  21a13a:	48 89 04 24          	mov    %rax,(%rsp)
  21a13e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21a143:	48 83 c4 10          	add    $0x10,%rsp
  21a147:	c3                   	retq   
  21a148:	cc                   	int3   
  21a149:	cc                   	int3   
  21a14a:	cc                   	int3   
  21a14b:	cc                   	int3   
  21a14c:	cc                   	int3   
  21a14d:	cc                   	int3   
  21a14e:	cc                   	int3   
  21a14f:	cc                   	int3   

000000000021a150 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h87bcaabb79263057E>:
    fn into(self) -> U {
  21a150:	48 83 ec 28          	sub    $0x28,%rsp
  21a154:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21a159:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  21a15e:	e8 4d 2a 00 00       	callq  21cbb0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>
  21a163:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a168:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21a16d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21a172:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21a177:	48 83 c4 28          	add    $0x28,%rsp
  21a17b:	c3                   	retq   
  21a17c:	cc                   	int3   
  21a17d:	cc                   	int3   
  21a17e:	cc                   	int3   
  21a17f:	cc                   	int3   

000000000021a180 <_ZN4core5alloc6layout6Layout12pad_to_align17h0fb25528d6826c40E>:
    pub fn pad_to_align(&self) -> Layout {
  21a180:	48 83 ec 68          	sub    $0x68,%rsp
  21a184:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21a189:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        let pad = self.padding_needed_for(self.align());
  21a18e:	e8 cd 02 00 00       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21a193:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21a198:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21a19d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21a1a2:	e8 99 01 00 00       	callq  21a340 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>
  21a1a7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21a1ac:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21a1b1:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let new_size = self.size() + pad;
  21a1b6:	e8 95 02 00 00       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21a1bb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21a1c0:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21a1c5:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21a1ca:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21a1cf:	48 01 c8             	add    %rcx,%rax
  21a1d2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21a1d7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        Layout::from_size_align(new_size, self.align()).unwrap()
  21a1dc:	e8 7f 02 00 00       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21a1e1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21a1e6:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21a1eb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21a1f0:	e8 3b 00 00 00       	callq  21a230 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E>
  21a1f5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a1fa:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21a1ff:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21a204:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21a209:	48 8d 15 d0 ea 01 00 	lea    0x1ead0(%rip),%rdx        # 238ce0 <memcmp+0x2730>
  21a210:	e8 eb 2c 01 00       	callq  22cf00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>
  21a215:	48 89 04 24          	mov    %rax,(%rsp)
  21a219:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21a21e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21a223:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21a227:	48 83 c4 68          	add    $0x68,%rsp
  21a22b:	c3                   	retq   
  21a22c:	cc                   	int3   
  21a22d:	cc                   	int3   
  21a22e:	cc                   	int3   
  21a22f:	cc                   	int3   

000000000021a230 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
  21a230:	48 83 ec 68          	sub    $0x68,%rsp
  21a234:	48 89 f1             	mov    %rsi,%rcx
  21a237:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21a23c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21a241:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21a246:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21a24b:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21a250:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  21a255:	48 89 c8             	mov    %rcx,%rax
  21a258:	48 d1 e8             	shr    %rax
  21a25b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  21a262:	55 55 55 
  21a265:	48 21 d0             	and    %rdx,%rax
  21a268:	48 29 c1             	sub    %rax,%rcx
  21a26b:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  21a272:	33 33 33 
  21a275:	48 89 c8             	mov    %rcx,%rax
  21a278:	48 21 d0             	and    %rdx,%rax
  21a27b:	48 c1 e9 02          	shr    $0x2,%rcx
  21a27f:	48 21 d1             	and    %rdx,%rcx
  21a282:	48 01 c8             	add    %rcx,%rax
  21a285:	48 89 c1             	mov    %rax,%rcx
  21a288:	48 c1 e9 04          	shr    $0x4,%rcx
  21a28c:	48 01 c8             	add    %rcx,%rax
  21a28f:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  21a296:	0f 0f 0f 
  21a299:	48 21 c8             	and    %rcx,%rax
  21a29c:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  21a2a3:	01 01 01 
  21a2a6:	48 0f af c1          	imul   %rcx,%rax
  21a2aa:	48 c1 e8 38          	shr    $0x38,%rax
  21a2ae:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21a2b3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
        #[must_use]
        #[stable(feature = "rust1", since = "1.0.0")]
        #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        #[inline(always)]
        pub const fn is_power_of_two(self) -> bool {
            self.count_ones() == 1
  21a2b8:	83 f8 01             	cmp    $0x1,%eax
  21a2bb:	0f 94 c0             	sete   %al
  21a2be:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21a2c2:	8a 44 24 2f          	mov    0x2f(%rsp),%al
        if !align.is_power_of_two() {
  21a2c6:	34 ff                	xor    $0xff,%al
  21a2c8:	a8 01                	test   $0x1,%al
  21a2ca:	75 1f                	jne    21a2eb <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xbb>
  21a2cc:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21a2d1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        if size > usize::MAX - (align - 1) {
  21a2d6:	48 83 ea 01          	sub    $0x1,%rdx
  21a2da:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  21a2e1:	48 29 d1             	sub    %rdx,%rcx
  21a2e4:	48 39 c8             	cmp    %rcx,%rax
  21a2e7:	77 35                	ja     21a31e <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xee>
  21a2e9:	eb 18                	jmp    21a303 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xd3>
            return Err(LayoutError);
  21a2eb:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21a2f2:	00 00 
    }
  21a2f4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21a2f9:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21a2fe:	48 83 c4 68          	add    $0x68,%rsp
  21a302:	c3                   	retq   
  21a303:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21a308:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  21a30d:	e8 ee 00 00 00       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21a312:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a317:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21a31c:	eb 0b                	jmp    21a329 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xf9>
            return Err(LayoutError);
  21a31e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  21a325:	00 00 
  21a327:	eb cb                	jmp    21a2f4 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xc4>
  21a329:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a32e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  21a333:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21a338:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  21a33d:	eb b5                	jmp    21a2f4 <_ZN4core5alloc6layout6Layout15from_size_align17hf990c2ff03f74e45E+0xc4>
  21a33f:	cc                   	int3   

000000000021a340 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>:
    pub const fn padding_needed_for(&self, align: usize) -> usize {
  21a340:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  21a347:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21a34c:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21a351:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        let len = self.size();
  21a356:	e8 f5 00 00 00       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21a35b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21a360:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21a365:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21a36a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21a36f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21a374:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
            intrinsics::wrapping_add(self, rhs)
  21a379:	48 01 c8             	add    %rcx,%rax
  21a37c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21a381:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21a386:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21a38d:	00 
  21a38e:	48 c7 84 24 90 00 00 	movq   $0x1,0x90(%rsp)
  21a395:	00 01 00 00 00 
            intrinsics::wrapping_sub(self, rhs)
  21a39a:	48 83 e8 01          	sub    $0x1,%rax
  21a39e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21a3a3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21a3a8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21a3ad:	48 c7 84 24 80 00 00 	movq   $0x1,0x80(%rsp)
  21a3b4:	00 01 00 00 00 
  21a3b9:	48 83 e8 01          	sub    $0x1,%rax
  21a3bd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a3c2:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21a3c7:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21a3cc:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
  21a3d1:	48 83 f2 ff          	xor    $0xffffffffffffffff,%rdx
  21a3d5:	48 21 d0             	and    %rdx,%rax
  21a3d8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21a3dd:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21a3e2:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21a3e7:	48 29 c8             	sub    %rcx,%rax
  21a3ea:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a3ef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21a3f4:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  21a3fb:	c3                   	retq   
  21a3fc:	cc                   	int3   
  21a3fd:	cc                   	int3   
  21a3fe:	cc                   	int3   
  21a3ff:	cc                   	int3   

000000000021a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
  21a400:	48 83 ec 38          	sub    $0x38,%rsp
  21a404:	48 89 34 24          	mov    %rsi,(%rsp)
  21a408:	48 89 f8             	mov    %rdi,%rax
  21a40b:	48 8b 3c 24          	mov    (%rsp),%rdi
  21a40f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a414:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21a419:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
  21a41e:	e8 4d 29 00 00       	callq  21cd70 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h5c6e94fe23e826b3E>
  21a423:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a428:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a42d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21a432:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21a437:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  21a43c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21a441:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21a446:	48 83 c4 38          	add    $0x38,%rsp
  21a44a:	c3                   	retq   
  21a44b:	cc                   	int3   
  21a44c:	cc                   	int3   
  21a44d:	cc                   	int3   
  21a44e:	cc                   	int3   
  21a44f:	cc                   	int3   

000000000021a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>:
    pub const fn size(&self) -> usize {
  21a450:	50                   	push   %rax
  21a451:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.size_
  21a455:	48 8b 07             	mov    (%rdi),%rax
    }
  21a458:	59                   	pop    %rcx
  21a459:	c3                   	retq   
  21a45a:	cc                   	int3   
  21a45b:	cc                   	int3   
  21a45c:	cc                   	int3   
  21a45d:	cc                   	int3   
  21a45e:	cc                   	int3   
  21a45f:	cc                   	int3   

000000000021a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>:
    pub const fn align(&self) -> usize {
  21a460:	48 83 ec 18          	sub    $0x18,%rsp
  21a464:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.align_.get()
  21a469:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  21a46d:	e8 1e 29 00 00       	callq  21cd90 <_ZN4core3num7nonzero12NonZeroUsize3get17h423dfcaad4de4b60E>
  21a472:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a477:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21a47c:	48 83 c4 18          	add    $0x18,%rsp
  21a480:	c3                   	retq   
  21a481:	cc                   	int3   
  21a482:	cc                   	int3   
  21a483:	cc                   	int3   
  21a484:	cc                   	int3   
  21a485:	cc                   	int3   
  21a486:	cc                   	int3   
  21a487:	cc                   	int3   
  21a488:	cc                   	int3   
  21a489:	cc                   	int3   
  21a48a:	cc                   	int3   
  21a48b:	cc                   	int3   
  21a48c:	cc                   	int3   
  21a48d:	cc                   	int3   
  21a48e:	cc                   	int3   
  21a48f:	cc                   	int3   

000000000021a490 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E>:
    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {
  21a490:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  21a497:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21a49c:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  21a4a1:	48 89 f8             	mov    %rdi,%rax
  21a4a4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21a4a9:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21a4ae:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21a4b3:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  21a4ba:	00 
  21a4bb:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  21a4c2:	00 
        let padded_size = self.size() + self.padding_needed_for(self.align());
  21a4c3:	e8 88 ff ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21a4c8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21a4cd:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21a4d2:	e8 89 ff ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21a4d7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21a4dc:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21a4e1:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21a4e6:	e8 55 fe ff ff       	callq  21a340 <_ZN4core5alloc6layout6Layout18padding_needed_for17h1de40d2d5aeb9740E>
  21a4eb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21a4f0:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  21a4f5:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21a4fa:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  21a4ff:	48 01 c7             	add    %rax,%rdi
  21a502:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21a507:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  21a50e:	00 
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;
  21a50f:	e8 7c e0 00 00       	callq  228590 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E>
  21a514:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21a519:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21a51e:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  21a523:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21a528:	e8 93 54 ff ff       	callq  20f9c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h83b0e88a21fdfb4cE>
  21a52d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21a532:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21a537:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21a53c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21a541:	e8 aa 0c ff ff       	callq  20b1f0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h50de180c61c426ebE>
  21a546:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21a54d:	00 
  21a54e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21a555:	00 
  21a556:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21a55d:	00 
  21a55e:	48 85 c0             	test   %rax,%rax
  21a561:	74 06                	je     21a569 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0xd9>
  21a563:	eb 00                	jmp    21a565 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0xd5>
  21a565:	eb 30                	jmp    21a597 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x107>
  21a567:	0f 0b                	ud2    
  21a569:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21a56e:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21a575:	00 
  21a576:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a57b:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  21a582:	00 
  21a583:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21a58a:	00 
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
  21a58b:	e8 d0 fe ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21a590:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21a595:	eb 19                	jmp    21a5b0 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x120>
  21a597:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;
  21a59c:	e8 5f 01 ff ff       	callq  20a700 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h9b93c8b5a9bc9b46E>
    }
  21a5a1:	eb 00                	jmp    21a5a3 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x113>
  21a5a3:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21a5a8:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  21a5af:	c3                   	retq   
  21a5b0:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21a5b5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
  21a5ba:	e8 41 fe ff ff       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  21a5bf:	48 89 04 24          	mov    %rax,(%rsp)
  21a5c3:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21a5c8:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21a5cd:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21a5d2:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21a5d7:	48 8b 34 24          	mov    (%rsp),%rsi
  21a5db:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  21a5e2:	00 
  21a5e3:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  21a5ea:	00 
  21a5eb:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  21a5f2:	00 
  21a5f3:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  21a5fa:	00 
  21a5fb:	48 89 08             	mov    %rcx,(%rax)
  21a5fe:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21a605:	00 
  21a606:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21a60a:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  21a611:	00 
  21a612:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  21a616:	eb 8b                	jmp    21a5a3 <_ZN4core5alloc6layout6Layout6repeat17hbbe875360dd38815E+0x113>
  21a618:	cc                   	int3   
  21a619:	cc                   	int3   
  21a61a:	cc                   	int3   
  21a61b:	cc                   	int3   
  21a61c:	cc                   	int3   
  21a61d:	cc                   	int3   
  21a61e:	cc                   	int3   
  21a61f:	cc                   	int3   

000000000021a620 <_ZN4core5alloc6layout6Layout8dangling17he0ad074fb5415605E>:
    pub const fn dangling(&self) -> NonNull<u8> {
  21a620:	48 83 ec 18          	sub    $0x18,%rsp
  21a624:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
  21a629:	e8 32 fe ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21a62e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a633:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21a638:	e8 63 66 01 00       	callq  230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  21a63d:	48 89 04 24          	mov    %rax,(%rsp)
  21a641:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21a645:	48 83 c4 18          	add    $0x18,%rsp
  21a649:	c3                   	retq   
  21a64a:	cc                   	int3   
  21a64b:	cc                   	int3   
  21a64c:	cc                   	int3   
  21a64d:	cc                   	int3   
  21a64e:	cc                   	int3   
  21a64f:	cc                   	int3   

000000000021a650 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17hcf873c6950f0943fE>:
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
  21a650:	50                   	push   %rax
  21a651:	48 89 3c 24          	mov    %rdi,(%rsp)
  21a655:	48 8b 07             	mov    (%rdi),%rax
  21a658:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  21a65c:	59                   	pop    %rcx
  21a65d:	c3                   	retq   
  21a65e:	cc                   	int3   
  21a65f:	cc                   	int3   

000000000021a660 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7fce53aeb6f9a2ccE>:
    pub const fn is_null(self) -> bool {
  21a660:	48 83 ec 18          	sub    $0x18,%rsp
  21a664:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21a669:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21a66e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  21a673:	31 c0                	xor    %eax,%eax
  21a675:	89 c6                	mov    %eax,%esi
  21a677:	e8 14 71 01 00       	callq  231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  21a67c:	88 44 24 07          	mov    %al,0x7(%rsp)
  21a680:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21a684:	24 01                	and    $0x1,%al
  21a686:	0f b6 c0             	movzbl %al,%eax
  21a689:	48 83 c4 18          	add    $0x18,%rsp
  21a68d:	c3                   	retq   
  21a68e:	cc                   	int3   
  21a68f:	cc                   	int3   

000000000021a690 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E>:
        0x00,
    ],
];

#[inline]
pub fn get_bit_for_char(ch: u8, pos: usize) -> u8 {
  21a690:	48 83 ec 18          	sub    $0x18,%rsp
  21a694:	40 88 f8             	mov    %dil,%al
  21a697:	88 44 24 0d          	mov    %al,0xd(%rsp)
  21a69b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21a69f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    ch & (0x80 >> pos)
  21a6a4:	48 89 f0             	mov    %rsi,%rax
  21a6a7:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  21a6ab:	48 83 f8 00          	cmp    $0x0,%rax
  21a6af:	0f 95 c0             	setne  %al
  21a6b2:	40 88 f1             	mov    %sil,%cl
  21a6b5:	80 e1 07             	and    $0x7,%cl
  21a6b8:	b2 80                	mov    $0x80,%dl
  21a6ba:	d2 ea                	shr    %cl,%dl
  21a6bc:	88 54 24 0e          	mov    %dl,0xe(%rsp)
  21a6c0:	a8 01                	test   $0x1,%al
  21a6c2:	75 0f                	jne    21a6d3 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E+0x43>
  21a6c4:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21a6c8:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21a6cc:	20 c8                	and    %cl,%al
}
  21a6ce:	48 83 c4 18          	add    $0x18,%rsp
  21a6d2:	c3                   	retq   
    ch & (0x80 >> pos)
  21a6d3:	48 8d 3d 06 7d fe ff 	lea    -0x182fa(%rip),%rdi        # 2023e0 <str.0>
  21a6da:	48 8d 15 17 e6 01 00 	lea    0x1e617(%rip),%rdx        # 238cf8 <memcmp+0x2748>
  21a6e1:	be 24 00 00 00       	mov    $0x24,%esi
  21a6e6:	e8 75 8d 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21a6eb:	0f 0b                	ud2    
  21a6ed:	cc                   	int3   
  21a6ee:	cc                   	int3   
  21a6ef:	cc                   	int3   

000000000021a6f0 <_ZN9r3_kernel3cpu8segments4lgdt17h8d27df65dbd42b21E>:
fn lgdt(ptr: &GDTPointer) {
  21a6f0:	50                   	push   %rax
  21a6f1:	48 89 3c 24          	mov    %rdi,(%rsp)
        asm!(
  21a6f5:	0f 01 17             	lgdt   (%rdi)
}
  21a6f8:	58                   	pop    %rax
  21a6f9:	c3                   	retq   
  21a6fa:	cc                   	int3   
  21a6fb:	cc                   	int3   
  21a6fc:	cc                   	int3   
  21a6fd:	cc                   	int3   
  21a6fe:	cc                   	int3   
  21a6ff:	cc                   	int3   

000000000021a700 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE>:
fn special_set_cs(value: u16) {
  21a700:	48 83 ec 18          	sub    $0x18,%rsp
  21a704:	66 89 f8             	mov    %di,%ax
  21a707:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
            sel = in(reg) u64::from(value),
  21a70c:	0f b7 f8             	movzwl %ax,%edi
  21a70f:	e8 ac bd fe ff       	callq  2064c0 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h6e8530f8c2c6f51bE>
  21a714:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21a719:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        asm!(
  21a71e:	50                   	push   %rax
  21a71f:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # 21a729 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE+0x29>
  21a726:	50                   	push   %rax
  21a727:	48 cb                	lretq  
}
  21a729:	48 83 c4 18          	add    $0x18,%rsp
  21a72d:	c3                   	retq   
  21a72e:	cc                   	int3   
  21a72f:	cc                   	int3   

000000000021a730 <_ZN9r3_kernel3cpu8segments8load_tss17ha24a70cff6842c90E>:
fn load_tss(value: u16) {
  21a730:	48 83 ec 02          	sub    $0x2,%rsp
  21a734:	66 89 f8             	mov    %di,%ax
  21a737:	66 89 04 24          	mov    %ax,(%rsp)
        asm! (
  21a73b:	0f 00 d8             	ltr    %ax
}
  21a73e:	48 83 c4 02          	add    $0x2,%rsp
  21a742:	c3                   	retq   
  21a743:	cc                   	int3   
  21a744:	cc                   	int3   
  21a745:	cc                   	int3   
  21a746:	cc                   	int3   
  21a747:	cc                   	int3   
  21a748:	cc                   	int3   
  21a749:	cc                   	int3   
  21a74a:	cc                   	int3   
  21a74b:	cc                   	int3   
  21a74c:	cc                   	int3   
  21a74d:	cc                   	int3   
  21a74e:	cc                   	int3   
  21a74f:	cc                   	int3   

000000000021a750 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>:
    pub fn new(index: u16, ring: PrivilegeLevel) -> SegmentSelector {
  21a750:	48 83 ec 0a          	sub    $0xa,%rsp
  21a754:	40 88 f1             	mov    %sil,%cl
  21a757:	88 4c 24 01          	mov    %cl,0x1(%rsp)
  21a75b:	66 89 f8             	mov    %di,%ax
  21a75e:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
  21a763:	88 4c 24 09          	mov    %cl,0x9(%rsp)
        SegmentSelector(index << 3 | (ring as u16))
  21a767:	66 c1 e0 03          	shl    $0x3,%ax
  21a76b:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  21a770:	66 8b 44 24 02       	mov    0x2(%rsp),%ax
  21a775:	8a 4c 24 01          	mov    0x1(%rsp),%cl
  21a779:	0f b6 c9             	movzbl %cl,%ecx
  21a77c:	66 09 c8             	or     %cx,%ax
  21a77f:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
    }
  21a784:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  21a789:	48 83 c4 0a          	add    $0xa,%rsp
  21a78d:	c3                   	retq   
  21a78e:	cc                   	int3   
  21a78f:	cc                   	int3   

000000000021a790 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>:
    pub fn set(&self, value: u16) {
  21a790:	48 83 ec 28          	sub    $0x28,%rsp
  21a794:	66 89 f0             	mov    %si,%ax
  21a797:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a79c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21a7a1:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
        match self {
  21a7a6:	0f b6 07             	movzbl (%rdi),%eax
  21a7a9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21a7ae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a7b3:	48 8d 0d 4a 7c fe ff 	lea    -0x183b6(%rip),%rcx        # 202404 <str.0+0x24>
  21a7ba:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21a7be:	48 01 c8             	add    %rcx,%rax
  21a7c1:	ff e0                	jmpq   *%rax
  21a7c3:	0f 0b                	ud2    
  21a7c5:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
            SegmentRegister::CS => special_set_cs(value),
  21a7ca:	0f b7 f8             	movzwl %ax,%edi
  21a7cd:	e8 2e ff ff ff       	callq  21a700 <_ZN9r3_kernel3cpu8segments14special_set_cs17h762a18a1083d8eacE>
  21a7d2:	eb 30                	jmp    21a804 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21a7d4:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21a7d9:	66 8e d0             	mov    %ax,%ss
  21a7dc:	eb 26                	jmp    21a804 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21a7de:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21a7e3:	66 8e d8             	mov    %ax,%ds
  21a7e6:	eb 1c                	jmp    21a804 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21a7e8:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21a7ed:	66 8e c0             	mov    %ax,%es
  21a7f0:	eb 12                	jmp    21a804 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21a7f2:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21a7f7:	66 8e e0             	mov    %ax,%fs
  21a7fa:	eb 08                	jmp    21a804 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E+0x74>
  21a7fc:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  21a801:	66 8e e8             	mov    %ax,%gs
    }
  21a804:	48 83 c4 28          	add    $0x28,%rsp
  21a808:	c3                   	retq   
  21a809:	cc                   	int3   
  21a80a:	cc                   	int3   
  21a80b:	cc                   	int3   
  21a80c:	cc                   	int3   
  21a80d:	cc                   	int3   
  21a80e:	cc                   	int3   
  21a80f:	cc                   	int3   

000000000021a810 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>:
    pub fn get(&self) -> u16 {
  21a810:	48 83 ec 18          	sub    $0x18,%rsp
  21a814:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  21a819:	0f b6 07             	movzbl (%rdi),%eax
  21a81c:	48 89 04 24          	mov    %rax,(%rsp)
  21a820:	48 8b 04 24          	mov    (%rsp),%rax
  21a824:	48 8d 0d f1 7b fe ff 	lea    -0x1840f(%rip),%rcx        # 20241c <str.0+0x3c>
  21a82b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21a82f:	48 01 c8             	add    %rcx,%rax
  21a832:	ff e0                	jmpq   *%rax
  21a834:	0f 0b                	ud2    
                asm!(
  21a836:	8c c8                	mov    %cs,%eax
  21a838:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a83d:	eb 2b                	jmp    21a86a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21a83f:	8c d0                	mov    %ss,%eax
  21a841:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a846:	eb 22                	jmp    21a86a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21a848:	8c d8                	mov    %ds,%eax
  21a84a:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a84f:	eb 19                	jmp    21a86a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21a851:	8c c0                	mov    %es,%eax
  21a853:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a858:	eb 10                	jmp    21a86a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21a85a:	8c e0                	mov    %fs,%eax
  21a85c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21a861:	eb 07                	jmp    21a86a <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E+0x5a>
                asm!(
  21a863:	8c e8                	mov    %gs,%eax
  21a865:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    }
  21a86a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  21a86f:	48 83 c4 18          	add    $0x18,%rsp
  21a873:	c3                   	retq   
  21a874:	cc                   	int3   
  21a875:	cc                   	int3   
  21a876:	cc                   	int3   
  21a877:	cc                   	int3   
  21a878:	cc                   	int3   
  21a879:	cc                   	int3   
  21a87a:	cc                   	int3   
  21a87b:	cc                   	int3   
  21a87c:	cc                   	int3   
  21a87d:	cc                   	int3   
  21a87e:	cc                   	int3   
  21a87f:	cc                   	int3   

000000000021a880 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E>:
    pub fn assert_reg(&self, value: u16) {
  21a880:	48 83 ec 78          	sub    $0x78,%rsp
  21a884:	66 89 f0             	mov    %si,%ax
  21a887:	66 89 44 24 14       	mov    %ax,0x14(%rsp)
  21a88c:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let read_value = self.get();
  21a891:	e8 7a ff ff ff       	callq  21a810 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17hb5b1127f2ecb25a3E>
  21a896:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
        assert_eq!(read_value, value);
  21a89b:	48 8d 44 24 16       	lea    0x16(%rsp),%rax
  21a8a0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21a8a5:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  21a8aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21a8af:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21a8b4:	48 89 04 24          	mov    %rax,(%rsp)
  21a8b8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21a8bd:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21a8c2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21a8c7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21a8cc:	66 8b 00             	mov    (%rax),%ax
  21a8cf:	66 3b 01             	cmp    (%rcx),%ax
  21a8d2:	0f 94 c0             	sete   %al
  21a8d5:	34 ff                	xor    $0xff,%al
  21a8d7:	a8 01                	test   $0x1,%al
  21a8d9:	75 05                	jne    21a8e0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E+0x60>
    }
  21a8db:	48 83 c4 78          	add    $0x78,%rsp
  21a8df:	c3                   	retq   
  21a8e0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21a8e5:	48 8b 34 24          	mov    (%rsp),%rsi
        assert_eq!(read_value, value);
  21a8e9:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  21a8ee:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  21a8f5:	00 00 
  21a8f7:	4c 8d 05 12 e4 01 00 	lea    0x1e412(%rip),%r8        # 238d10 <memcmp+0x2760>
  21a8fe:	31 ff                	xor    %edi,%edi
  21a900:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  21a905:	e8 46 41 00 00       	callq  21ea50 <_ZN4core9panicking13assert_failed17h3edc834fd7d50ce8E>
  21a90a:	0f 0b                	ud2    
  21a90c:	cc                   	int3   
  21a90d:	cc                   	int3   
  21a90e:	cc                   	int3   
  21a90f:	cc                   	int3   

000000000021a910 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17h9900b46609a50aa1E>:
    pub fn empty() -> Self {
  21a910:	48 83 ec 68          	sub    $0x68,%rsp
  21a914:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21a919:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            privilege_stack_table: [0; 3],
  21a91e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21a923:	31 f6                	xor    %esi,%esi
  21a925:	ba 18 00 00 00       	mov    $0x18,%edx
  21a92a:	e8 51 bc 01 00       	callq  236580 <memset>
            interrupt_stack_table: [0; 7],
  21a92f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  21a934:	31 f6                	xor    %esi,%esi
  21a936:	ba 38 00 00 00       	mov    $0x38,%edx
  21a93b:	e8 40 bc 01 00       	callq  236580 <memset>
  21a940:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        TaskStateSegment {
  21a945:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  21a94b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21a950:	48 89 47 04          	mov    %rax,0x4(%rdi)
  21a954:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21a959:	48 89 47 0c          	mov    %rax,0xc(%rdi)
  21a95d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21a962:	48 89 47 14          	mov    %rax,0x14(%rdi)
  21a966:	48 c7 47 1c 00 00 00 	movq   $0x0,0x1c(%rdi)
  21a96d:	00 
  21a96e:	48 83 c7 24          	add    $0x24,%rdi
  21a972:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  21a977:	ba 38 00 00 00       	mov    $0x38,%edx
  21a97c:	e8 df bb 01 00       	callq  236560 <memcpy>
  21a981:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21a986:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21a98b:	48 c7 47 5c 00 00 00 	movq   $0x0,0x5c(%rdi)
  21a992:	00 
  21a993:	66 c7 47 64 00 00    	movw   $0x0,0x64(%rdi)
  21a999:	66 c7 47 66 00 00    	movw   $0x0,0x66(%rdi)
    }
  21a99f:	48 83 c4 68          	add    $0x68,%rsp
  21a9a3:	c3                   	retq   
  21a9a4:	cc                   	int3   
  21a9a5:	cc                   	int3   
  21a9a6:	cc                   	int3   
  21a9a7:	cc                   	int3   
  21a9a8:	cc                   	int3   
  21a9a9:	cc                   	int3   
  21a9aa:	cc                   	int3   
  21a9ab:	cc                   	int3   
  21a9ac:	cc                   	int3   
  21a9ad:	cc                   	int3   
  21a9ae:	cc                   	int3   
  21a9af:	cc                   	int3   

000000000021a9b0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE>:
    pub fn new(tss: &'static TaskStateSegment) -> Self {
  21a9b0:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  21a9b7:	48 89 bc 24 70 01 00 	mov    %rdi,0x170(%rsp)
  21a9be:	00 
        let mut low: u64 = SEGMENT_PRESENT;
  21a9bf:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
  21a9c6:	80 00 00 
  21a9c9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        let tss_addr = (tss as *const _) as u64;
  21a9ce:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
        low.set_bits(16..40, tss_addr.get_bits(0..24));
  21a9d3:	48 c7 44 24 70 10 00 	movq   $0x10,0x70(%rsp)
  21a9da:	00 00 
  21a9dc:	48 c7 44 24 78 28 00 	movq   $0x28,0x78(%rsp)
  21a9e3:	00 00 
  21a9e5:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  21a9ec:	00 00 00 00 00 
  21a9f1:	48 c7 84 24 88 00 00 	movq   $0x18,0x88(%rsp)
  21a9f8:	00 18 00 00 00 
  21a9fd:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  21aa04:	00 
  21aa05:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  21aa0c:	00 
  21aa0d:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21aa12:	e8 d9 37 00 00       	callq  21e1f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21aa17:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21aa1c:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  21aa21:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21aa26:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  21aa2b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21aa30:	e8 db 39 00 00       	callq  21e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        low.set_bits(56..64, tss_addr.get_bits(24..32));
  21aa35:	48 c7 84 24 90 00 00 	movq   $0x38,0x90(%rsp)
  21aa3c:	00 38 00 00 00 
  21aa41:	48 c7 84 24 98 00 00 	movq   $0x40,0x98(%rsp)
  21aa48:	00 40 00 00 00 
  21aa4d:	48 c7 84 24 a0 00 00 	movq   $0x18,0xa0(%rsp)
  21aa54:	00 18 00 00 00 
  21aa59:	48 c7 84 24 a8 00 00 	movq   $0x20,0xa8(%rsp)
  21aa60:	00 20 00 00 00 
  21aa65:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  21aa6c:	00 
  21aa6d:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  21aa74:	00 
  21aa75:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21aa7a:	e8 71 37 00 00       	callq  21e1f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21aa7f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21aa84:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21aa89:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  21aa90:	00 
  21aa91:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  21aa98:	00 
  21aa99:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21aa9e:	e8 6d 39 00 00       	callq  21e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        low.set_bits(0..16, (mem::size_of::<TaskStateSegment>() - 1) as u64);
  21aaa3:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  21aaaa:	00 00 00 00 00 
  21aaaf:	48 c7 84 24 b8 00 00 	movq   $0x10,0xb8(%rsp)
  21aab6:	00 10 00 00 00 
  21aabb:	b8 68 00 00 00       	mov    $0x68,%eax
  21aac0:	48 83 e8 01          	sub    $0x1,%rax
  21aac4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21aac9:	0f 92 c0             	setb   %al
  21aacc:	a8 01                	test   $0x1,%al
  21aace:	75 21                	jne    21aaf1 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x141>
  21aad0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21aad5:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  21aadc:	00 
  21aadd:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  21aae4:	00 
  21aae5:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21aaea:	e8 21 39 00 00       	callq  21e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
  21aaef:	eb 1a                	jmp    21ab0b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x15b>
  21aaf1:	48 8d 3d 58 79 fe ff 	lea    -0x186a8(%rip),%rdi        # 202450 <str.0>
  21aaf8:	48 8d 15 29 e2 01 00 	lea    0x1e229(%rip),%rdx        # 238d28 <memcmp+0x2778>
  21aaff:	be 21 00 00 00       	mov    $0x21,%esi
  21ab04:	e8 57 89 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ab09:	0f 0b                	ud2    
        low.set_bits(40..44, 0b1001);
  21ab0b:	48 c7 84 24 c0 00 00 	movq   $0x28,0xc0(%rsp)
  21ab12:	00 28 00 00 00 
  21ab17:	48 c7 84 24 c8 00 00 	movq   $0x2c,0xc8(%rsp)
  21ab1e:	00 2c 00 00 00 
  21ab23:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  21ab2a:	00 
  21ab2b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21ab32:	00 
  21ab33:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21ab38:	b9 09 00 00 00       	mov    $0x9,%ecx
  21ab3d:	e8 ce 38 00 00       	callq  21e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        let mut high = 0;
  21ab42:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  21ab49:	00 00 00 00 00 
        high.set_bits(0..32, tss_addr.get_bits(32..64));
  21ab4e:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  21ab55:	00 00 00 00 00 
  21ab5a:	48 c7 84 24 e0 00 00 	movq   $0x20,0xe0(%rsp)
  21ab61:	00 20 00 00 00 
  21ab66:	48 c7 84 24 e8 00 00 	movq   $0x20,0xe8(%rsp)
  21ab6d:	00 20 00 00 00 
  21ab72:	48 c7 84 24 f0 00 00 	movq   $0x40,0xf0(%rsp)
  21ab79:	00 40 00 00 00 
  21ab7e:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  21ab85:	00 
  21ab86:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  21ab8d:	00 
  21ab8e:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  21ab93:	e8 58 36 00 00       	callq  21e1f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>
  21ab98:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ab9d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21aba2:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  21aba9:	00 
  21abaa:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  21abb1:	00 
  21abb2:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  21abb9:	00 
  21abba:	e8 51 38 00 00       	callq  21e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  21abbf:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  21abc6:	00 04 00 00 00 
  21abcb:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21abd2:	00 
  21abd3:	48 8d 35 5e 5a fe ff 	lea    -0x1a5a2(%rip),%rsi        # 200638 <str.0+0x118>
  21abda:	e8 11 6f ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21abdf:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21abe3:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21abe7:	a8 01                	test   $0x1,%al
  21abe9:	75 0c                	jne    21abf7 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x247>
  21abeb:	eb 00                	jmp    21abed <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x23d>
  21abed:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  21abf4:	00 
  21abf5:	eb 5a                	jmp    21ac51 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2a1>
  21abf7:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  21abfe:	00 
  21abff:	48 8b 3d 0a 05 02 00 	mov    0x2050a(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21ac06:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  21ac0d:	00 
  21ac0e:	e8 ad e0 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21ac13:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  21ac1a:	00 
  21ac1b:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  21ac22:	00 
  21ac23:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  21ac2a:	00 
  21ac2b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  21ac32:	00 
  21ac33:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  21ac3a:	00 
  21ac3b:	e8 b0 6e ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21ac40:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  21ac44:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  21ac48:	24 01                	and    $0x1,%al
  21ac4a:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  21ac51:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  21ac58:	01 
  21ac59:	75 29                	jne    21ac84 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2d4>
        TaskStateDescriptor { high, low }
  21ac5b:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  21ac62:	00 
  21ac63:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21ac68:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21ac6d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    }
  21ac72:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21ac77:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21ac7c:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  21ac83:	c3                   	retq   
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  21ac84:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  21ac8b:	00 
  21ac8c:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21ac93:	00 
  21ac94:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  21ac99:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21aca0:	00 
  21aca1:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  21aca8:	00 
  21aca9:	48 89 bc 24 78 01 00 	mov    %rdi,0x178(%rsp)
  21acb0:	00 
  21acb1:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  21acb8:	00 
  21acb9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21acbe:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21acc5:	00 
  21acc6:	48 8b 35 4b 04 02 00 	mov    0x2044b(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21accd:	e8 6e 41 ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21acd2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21acd7:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21acdc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21ace1:	48 8b 35 30 04 02 00 	mov    0x20430(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21ace8:	e8 53 41 ff ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21aced:	48 89 04 24          	mov    %rax,(%rsp)
  21acf1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21acf6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21acfb:	48 8b 0c 24          	mov    (%rsp),%rcx
  21acff:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21ad04:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21ad09:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  21ad10:	00 
  21ad11:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
  21ad18:	00 
  21ad19:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  21ad20:	00 
  21ad21:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21ad28:	00 
  21ad29:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  21ad30:	00 
  21ad31:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  21ad38:	00 
  21ad39:	48 8d 35 00 e0 01 00 	lea    0x1e000(%rip),%rsi        # 238d40 <memcmp+0x2790>
  21ad40:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  21ad46:	4c 89 c2             	mov    %r8,%rdx
  21ad49:	e8 72 b5 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21ad4e:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  21ad55:	00 
  21ad56:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  21ad5d:	00 
  21ad5e:	48 8d 15 fb df 01 00 	lea    0x1dffb(%rip),%rdx        # 238d60 <memcmp+0x27b0>
  21ad65:	e8 86 58 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21ad6a:	e9 ec fe ff ff       	jmpq   21ac5b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE+0x2ab>
  21ad6f:	cc                   	int3   

000000000021ad70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17h3d3710681a360ac2E>:
    pub fn empty() -> GlobalDescritorTable {
  21ad70:	48 83 ec 58          	sub    $0x58,%rsp
  21ad74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21ad79:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            entries: [0; 8],
  21ad7e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21ad83:	31 f6                	xor    %esi,%esi
  21ad85:	ba 40 00 00 00       	mov    $0x40,%edx
  21ad8a:	e8 f1 b7 01 00       	callq  236580 <memset>
  21ad8f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        GlobalDescritorTable {
  21ad94:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  21ad99:	ba 40 00 00 00       	mov    $0x40,%edx
  21ad9e:	e8 bd b7 01 00       	callq  236560 <memcpy>
  21ada3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21ada8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21adad:	48 c7 47 40 01 00 00 	movq   $0x1,0x40(%rdi)
  21adb4:	00 
    }
  21adb5:	48 83 c4 58          	add    $0x58,%rsp
  21adb9:	c3                   	retq   
  21adba:	cc                   	int3   
  21adbb:	cc                   	int3   
  21adbc:	cc                   	int3   
  21adbd:	cc                   	int3   
  21adbe:	cc                   	int3   
  21adbf:	cc                   	int3   

000000000021adc0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE>:
    pub fn as_pointer(&self) -> GDTPointer {
  21adc0:	48 83 ec 48          	sub    $0x48,%rsp
  21adc4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21adc9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
            base_addr: self.entries.as_ptr() as u64,
  21adce:	be 08 00 00 00       	mov    $0x8,%esi
  21add3:	e8 78 1f 00 00       	callq  21cd50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd1f0389311dd9dccE>
  21add8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21addd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  21ade2:	48 8b 40 40          	mov    0x40(%rax),%rax
  21ade6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21adeb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21adf0:	b9 08 00 00 00       	mov    $0x8,%ecx
  21adf5:	48 f7 e1             	mul    %rcx
  21adf8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21adfd:	0f 90 c0             	seto   %al
  21ae00:	a8 01                	test   $0x1,%al
  21ae02:	75 17                	jne    21ae1b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x5b>
  21ae04:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21ae09:	48 83 e8 01          	sub    $0x1,%rax
  21ae0d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ae12:	0f 92 c0             	setb   %al
  21ae15:	a8 01                	test   $0x1,%al
  21ae17:	75 41                	jne    21ae5a <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x9a>
  21ae19:	eb 1a                	jmp    21ae35 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE+0x75>
  21ae1b:	48 8d 3d 7e 76 fe ff 	lea    -0x18982(%rip),%rdi        # 2024a0 <str.1>
  21ae22:	48 8d 15 6f df 01 00 	lea    0x1df6f(%rip),%rdx        # 238d98 <memcmp+0x27e8>
  21ae29:	be 21 00 00 00       	mov    $0x21,%esi
  21ae2e:	e8 2d 86 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ae33:	0f 0b                	ud2    
  21ae35:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21ae3a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        GDTPointer {
  21ae3f:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
  21ae44:	48 89 44 24 32       	mov    %rax,0x32(%rsp)
    }
  21ae49:	0f b7 44 24 38       	movzwl 0x38(%rsp),%eax
  21ae4e:	89 c2                	mov    %eax,%edx
  21ae50:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21ae55:	48 83 c4 48          	add    $0x48,%rsp
  21ae59:	c3                   	retq   
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  21ae5a:	48 8d 3d ef 75 fe ff 	lea    -0x18a11(%rip),%rdi        # 202450 <str.0>
  21ae61:	48 8d 15 48 df 01 00 	lea    0x1df48(%rip),%rdx        # 238db0 <memcmp+0x2800>
  21ae68:	be 21 00 00 00       	mov    $0x21,%esi
  21ae6d:	e8 ee 85 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ae72:	0f 0b                	ud2    
  21ae74:	cc                   	int3   
  21ae75:	cc                   	int3   
  21ae76:	cc                   	int3   
  21ae77:	cc                   	int3   
  21ae78:	cc                   	int3   
  21ae79:	cc                   	int3   
  21ae7a:	cc                   	int3   
  21ae7b:	cc                   	int3   
  21ae7c:	cc                   	int3   
  21ae7d:	cc                   	int3   
  21ae7e:	cc                   	int3   
  21ae7f:	cc                   	int3   

000000000021ae80 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h73dda5e8a94f4a43E>:
    pub fn load_into_cpu(&'static self) {
  21ae80:	48 83 ec 28          	sub    $0x28,%rsp
  21ae84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let gdt_pointer = self.as_pointer();
  21ae89:	e8 32 ff ff ff       	callq  21adc0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hac216adde1be6e9fE>
  21ae8e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21ae93:	66 89 d0             	mov    %dx,%ax
  21ae96:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  21ae9b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21aea0:	48 89 04 24          	mov    %rax,(%rsp)
  21aea4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  21aea9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
        lgdt(&gdt_pointer);
  21aeae:	48 89 e7             	mov    %rsp,%rdi
  21aeb1:	e8 3a f8 ff ff       	callq  21a6f0 <_ZN9r3_kernel3cpu8segments4lgdt17h8d27df65dbd42b21E>
    }
  21aeb6:	48 83 c4 28          	add    $0x28,%rsp
  21aeba:	c3                   	retq   
  21aebb:	cc                   	int3   
  21aebc:	cc                   	int3   
  21aebd:	cc                   	int3   
  21aebe:	cc                   	int3   
  21aebf:	cc                   	int3   

000000000021aec0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE>:
    fn get_user_seg_ring(entry: u64) -> PrivilegeLevel {
  21aec0:	48 83 ec 10          	sub    $0x10,%rsp
  21aec4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        if entry & RING_3_DPL_FLAG == RING_3_DPL_FLAG {
  21aec9:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  21aed0:	60 00 00 
  21aed3:	48 21 c7             	and    %rax,%rdi
  21aed6:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  21aedd:	60 00 00 
  21aee0:	48 39 c7             	cmp    %rax,%rdi
  21aee3:	74 07                	je     21aeec <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE+0x2c>
        PrivilegeLevel::Ring0
  21aee5:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  21aeea:	eb 05                	jmp    21aef1 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE+0x31>
            return PrivilegeLevel::Ring3;
  21aeec:	c6 44 24 07 03       	movb   $0x3,0x7(%rsp)
    }
  21aef1:	8a 44 24 07          	mov    0x7(%rsp),%al
  21aef5:	48 83 c4 10          	add    $0x10,%rsp
  21aef9:	c3                   	retq   
  21aefa:	cc                   	int3   
  21aefb:	cc                   	int3   
  21aefc:	cc                   	int3   
  21aefd:	cc                   	int3   
  21aefe:	cc                   	int3   
  21aeff:	cc                   	int3   

000000000021af00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E>:
    pub fn set_user_segment(&mut self, entry: u64) -> Result<SegmentSelector, &'static str> {
  21af00:	48 83 ec 68          	sub    $0x68,%rsp
  21af04:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21af09:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  21af0e:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21af13:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21af18:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21af1d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  21af22:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  21af27:	73 1b                	jae    21af44 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x44>
  21af29:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        self.entries[self.filled] = entry;
  21af2e:	48 8b 40 40          	mov    0x40(%rax),%rax
  21af32:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21af37:	48 83 f8 08          	cmp    $0x8,%rax
  21af3b:	0f 92 c0             	setb   %al
  21af3e:	a8 01                	test   $0x1,%al
  21af40:	75 29                	jne    21af6b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x6b>
  21af42:	eb 5e                	jmp    21afa2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xa2>
  21af44:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  21af49:	48 8d 0d 71 75 fe ff 	lea    -0x18a8f(%rip),%rcx        # 2024c1 <str.1+0x21>
  21af50:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21af54:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  21af5b:	00 
  21af5c:	66 c7 00 01 00       	movw   $0x1,(%rax)
  21af61:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    }
  21af66:	48 83 c4 68          	add    $0x68,%rsp
  21af6a:	c3                   	retq   
  21af6b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21af70:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21af75:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
        self.entries[self.filled] = entry;
  21af7a:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        let current_index = self.filled;
  21af7e:	48 8b 48 40          	mov    0x40(%rax),%rcx
  21af82:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21af87:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
        self.filled += 1;
  21af8c:	48 8b 40 40          	mov    0x40(%rax),%rax
  21af90:	48 83 c0 01          	add    $0x1,%rax
  21af94:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21af99:	0f 92 c0             	setb   %al
  21af9c:	a8 01                	test   $0x1,%al
  21af9e:	75 3c                	jne    21afdc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xdc>
  21afa0:	eb 18                	jmp    21afba <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xba>
  21afa2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        self.entries[self.filled] = entry;
  21afa7:	48 8d 15 1a de 01 00 	lea    0x1de1a(%rip),%rdx        # 238dc8 <memcmp+0x2818>
  21afae:	be 08 00 00 00       	mov    $0x8,%esi
  21afb3:	e8 f8 84 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21afb8:	0f 0b                	ud2    
  21afba:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21afbf:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21afc4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        self.filled += 1;
  21afc9:	48 89 48 40          	mov    %rcx,0x40(%rax)
        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
  21afcd:	e8 ee fe ff ff       	callq  21aec0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17hc5f72b3f5760bfcaE>
  21afd2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21afd6:	88 44 24 67          	mov    %al,0x67(%rsp)
  21afda:	eb 1a                	jmp    21aff6 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0xf6>
        self.filled += 1;
  21afdc:	48 8d 3d 0d 75 fe ff 	lea    -0x18af3(%rip),%rdi        # 2024f0 <str.2>
  21afe3:	48 8d 15 f6 dd 01 00 	lea    0x1ddf6(%rip),%rdx        # 238de0 <memcmp+0x2830>
  21afea:	be 1c 00 00 00       	mov    $0x1c,%esi
  21afef:	e8 6c 84 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21aff4:	0f 0b                	ud2    
  21aff6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21affa:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Ok(SegmentSelector::new(current_index as u16, ring))
  21afff:	0f b7 f9             	movzwl %cx,%edi
  21b002:	0f b6 f0             	movzbl %al,%esi
  21b005:	e8 46 f7 ff ff       	callq  21a750 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>
  21b00a:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  21b00f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21b014:	66 8b 4c 24 0c       	mov    0xc(%rsp),%cx
  21b019:	66 89 48 02          	mov    %cx,0x2(%rax)
  21b01d:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  21b022:	e9 3a ff ff ff       	jmpq   21af61 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E+0x61>
  21b027:	cc                   	int3   
  21b028:	cc                   	int3   
  21b029:	cc                   	int3   
  21b02a:	cc                   	int3   
  21b02b:	cc                   	int3   
  21b02c:	cc                   	int3   
  21b02d:	cc                   	int3   
  21b02e:	cc                   	int3   
  21b02f:	cc                   	int3   

000000000021b030 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E>:
    pub fn set_system_segment(
  21b030:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21b037:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21b03c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21b041:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21b046:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21b04b:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  21b050:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  21b055:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21b05a:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  21b05f:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  21b064:	73 2c                	jae    21b092 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x62>
  21b066:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
        let current_index = self.filled;
  21b06b:	48 8b 48 40          	mov    0x40(%rax),%rcx
  21b06f:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21b074:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21b07b:	00 
        self.entries[self.filled] = low;
  21b07c:	48 8b 40 40          	mov    0x40(%rax),%rax
  21b080:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b085:	48 83 f8 08          	cmp    $0x8,%rax
  21b089:	0f 92 c0             	setb   %al
  21b08c:	a8 01                	test   $0x1,%al
  21b08e:	75 2c                	jne    21b0bc <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x8c>
  21b090:	eb 53                	jmp    21b0e5 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xb5>
  21b092:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  21b097:	48 8d 0d 23 74 fe ff 	lea    -0x18bdd(%rip),%rcx        # 2024c1 <str.1+0x21>
  21b09e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  21b0a2:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  21b0a9:	00 
  21b0aa:	66 c7 00 01 00       	movw   $0x1,(%rax)
  21b0af:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    }
  21b0b4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21b0bb:	c3                   	retq   
  21b0bc:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21b0c1:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21b0c6:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
        self.entries[self.filled] = low;
  21b0cb:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  21b0cf:	48 8b 40 40          	mov    0x40(%rax),%rax
  21b0d3:	48 83 c0 01          	add    $0x1,%rax
  21b0d7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21b0dc:	0f 92 c0             	setb   %al
  21b0df:	a8 01                	test   $0x1,%al
  21b0e1:	75 3e                	jne    21b121 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xf1>
  21b0e3:	eb 18                	jmp    21b0fd <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0xcd>
  21b0e5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        self.entries[self.filled] = low;
  21b0ea:	48 8d 15 07 dd 01 00 	lea    0x1dd07(%rip),%rdx        # 238df8 <memcmp+0x2848>
  21b0f1:	be 08 00 00 00       	mov    $0x8,%esi
  21b0f6:	e8 b5 83 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21b0fb:	0f 0b                	ud2    
  21b0fd:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21b102:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        self.filled += 1;
  21b107:	48 89 48 40          	mov    %rcx,0x40(%rax)
        self.entries[self.filled] = high;
  21b10b:	48 8b 40 40          	mov    0x40(%rax),%rax
  21b10f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b114:	48 83 f8 08          	cmp    $0x8,%rax
  21b118:	0f 92 c0             	setb   %al
  21b11b:	a8 01                	test   $0x1,%al
  21b11d:	75 1c                	jne    21b13b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x10b>
  21b11f:	eb 43                	jmp    21b164 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x134>
        self.filled += 1;
  21b121:	48 8d 3d c8 73 fe ff 	lea    -0x18c38(%rip),%rdi        # 2024f0 <str.2>
  21b128:	48 8d 15 e1 dc 01 00 	lea    0x1dce1(%rip),%rdx        # 238e10 <memcmp+0x2860>
  21b12f:	be 1c 00 00 00       	mov    $0x1c,%esi
  21b134:	e8 27 83 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b139:	0f 0b                	ud2    
  21b13b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21b140:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21b145:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
        self.entries[self.filled] = high;
  21b14a:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  21b14e:	48 8b 40 40          	mov    0x40(%rax),%rax
  21b152:	48 83 c0 01          	add    $0x1,%rax
  21b156:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b15b:	0f 92 c0             	setb   %al
  21b15e:	a8 01                	test   $0x1,%al
  21b160:	75 46                	jne    21b1a8 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x178>
  21b162:	eb 18                	jmp    21b17c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x14c>
  21b164:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        self.entries[self.filled] = high;
  21b169:	48 8d 15 b8 dc 01 00 	lea    0x1dcb8(%rip),%rdx        # 238e28 <memcmp+0x2878>
  21b170:	be 08 00 00 00       	mov    $0x8,%esi
  21b175:	e8 36 83 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21b17a:	0f 0b                	ud2    
  21b17c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21b181:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  21b186:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        self.filled += 1;
  21b18b:	48 89 51 40          	mov    %rdx,0x40(%rcx)
            PrivilegeLevel::Ring0,
  21b18f:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
        Ok(SegmentSelector::new(
  21b194:	0f b7 f8             	movzwl %ax,%edi
  21b197:	0f b6 74 24 67       	movzbl 0x67(%rsp),%esi
  21b19c:	e8 af f5 ff ff       	callq  21a750 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h2219b71f0d640a4cE>
  21b1a1:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21b1a6:	eb 1a                	jmp    21b1c2 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x192>
        self.filled += 1;
  21b1a8:	48 8d 3d 41 73 fe ff 	lea    -0x18cbf(%rip),%rdi        # 2024f0 <str.2>
  21b1af:	48 8d 15 8a dc 01 00 	lea    0x1dc8a(%rip),%rdx        # 238e40 <memcmp+0x2890>
  21b1b6:	be 1c 00 00 00       	mov    $0x1c,%esi
  21b1bb:	e8 a0 82 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b1c0:	0f 0b                	ud2    
  21b1c2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21b1c7:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
        Ok(SegmentSelector::new(
  21b1cc:	66 89 48 02          	mov    %cx,0x2(%rax)
  21b1d0:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  21b1d5:	e9 d5 fe ff ff       	jmpq   21b0af <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E+0x7f>
  21b1da:	cc                   	int3   
  21b1db:	cc                   	int3   
  21b1dc:	cc                   	int3   
  21b1dd:	cc                   	int3   
  21b1de:	cc                   	int3   
  21b1df:	cc                   	int3   

000000000021b1e0 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E>:
pub fn create_tss_for_bp() -> TaskStateSegment {
  21b1e0:	48 83 ec 28          	sub    $0x28,%rsp
  21b1e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21b1e9:	48 89 f8             	mov    %rdi,%rax
  21b1ec:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut tss = TaskStateSegment::empty();
  21b1f1:	e8 1a f7 ff ff       	callq  21a910 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17h9900b46609a50aa1E>
        let k_stack_start = (unsafe { &TSS_STACK } as *const _) as u64;
  21b1f6:	48 8d 05 6b 1a 02 00 	lea    0x21a6b(%rip),%rax        # 23cc68 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h2dba4d5abddfc02bE>
  21b1fd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        k_stack_start + STACK_SIZE as u64
  21b202:	48 8d 05 5f 1a 02 00 	lea    0x21a5f(%rip),%rax        # 23cc68 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h2dba4d5abddfc02bE>
  21b209:	48 05 00 50 00 00    	add    $0x5000,%rax
  21b20f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b214:	0f 92 c0             	setb   %al
  21b217:	a8 01                	test   $0x1,%al
  21b219:	75 18                	jne    21b233 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h0bfd2d27ace99112E+0x53>
  21b21b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21b220:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21b225:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    tss.interrupt_stack_table[0] = {
  21b22a:	48 89 51 24          	mov    %rdx,0x24(%rcx)
}
  21b22e:	48 83 c4 28          	add    $0x28,%rsp
  21b232:	c3                   	retq   
        k_stack_start + STACK_SIZE as u64
  21b233:	48 8d 3d b6 72 fe ff 	lea    -0x18d4a(%rip),%rdi        # 2024f0 <str.2>
  21b23a:	48 8d 15 17 dc 01 00 	lea    0x1dc17(%rip),%rdx        # 238e58 <memcmp+0x28a8>
  21b241:	be 1c 00 00 00       	mov    $0x1c,%esi
  21b246:	e8 15 82 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21b24b:	0f 0b                	ud2    
  21b24d:	cc                   	int3   
  21b24e:	cc                   	int3   
  21b24f:	cc                   	int3   

000000000021b250 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE>:
pub fn create_gdt_for_bp() -> GDTContainer {
  21b250:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  21b257:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21b25c:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    let mut gdt = GlobalDescritorTable::empty();
  21b261:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21b266:	e8 05 fb ff ff       	callq  21ad70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17h3d3710681a360ac2E>
    let k_code_segment_res = gdt.set_user_segment(LinuxKernelSegments::KernelCode as u64);
  21b26b:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21b272:	00 
  21b273:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21b278:	48 ba ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rdx
  21b27f:	9b af 00 
  21b282:	e8 79 fc ff ff       	callq  21af00 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h163479c483bd69a6E>
    if k_code_segment_res.is_err() {
  21b287:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21b28e:	00 
  21b28f:	e8 0c f9 fe ff       	callq  20aba0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>
  21b294:	88 44 24 27          	mov    %al,0x27(%rsp)
  21b298:	8a 44 24 27          	mov    0x27(%rsp),%al
  21b29c:	a8 01                	test   $0x1,%al
  21b29e:	75 15                	jne    21b2b5 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x65>
  21b2a0:	eb 00                	jmp    21b2a2 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x52>
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  21b2a2:	48 8d 3d 9e 72 fe ff 	lea    -0x18d62(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21b2a9:	e8 32 06 00 00       	callq  21b8e0 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13b397ff8302ea1dE>
  21b2ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b2b3:	eb 6a                	jmp    21b31f <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0xcf>
        panic!("{}", k_code_segment_res.unwrap_err());
  21b2b5:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21b2bc:	00 
  21b2bd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21b2c4:	00 
  21b2c5:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21b2cc:	00 
  21b2cd:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21b2d4:	00 
  21b2d5:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  21b2dc:	00 
  21b2dd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21b2e4:	00 
  21b2e5:	48 8d 35 84 db 01 00 	lea    0x1db84(%rip),%rsi        # 238e70 <memcmp+0x28c0>
  21b2ec:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21b2f3:	00 
  21b2f4:	e8 a7 f4 fe ff       	callq  20a7a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>
  21b2f9:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  21b300:	00 
  21b301:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21b308:	00 
  21b309:	48 8d 35 78 db 01 00 	lea    0x1db78(%rip),%rsi        # 238e88 <memcmp+0x28d8>
  21b310:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  21b317:	00 
  21b318:	e8 b3 38 00 00       	callq  21ebd0 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>
  21b31d:	0f 0b                	ud2    
  21b31f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  21b324:	e8 87 f6 ff ff       	callq  21a9b0 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17h3eeea0f460ccbdaeE>
  21b329:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b32e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21b333:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  21b33a:	00 
  21b33b:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  21b342:	00 
  21b343:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21b348:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    let k_tss_segment_result = gdt.set_system_segment(tss_descriptor.high, tss_descriptor.low);
  21b34d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21b354:	00 
  21b355:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21b35a:	e8 d1 fc ff ff       	callq  21b030 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17h22aaf405b984a3f1E>
    if k_tss_segment_result.is_err() {
  21b35f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21b366:	00 
  21b367:	e8 34 f8 fe ff       	callq  20aba0 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h2a7c6b1bb84490ecE>
  21b36c:	88 44 24 07          	mov    %al,0x7(%rsp)
  21b370:	8a 44 24 07          	mov    0x7(%rsp),%al
  21b374:	a8 01                	test   $0x1,%al
  21b376:	75 64                	jne    21b3dc <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x18c>
  21b378:	eb 00                	jmp    21b37a <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x12a>
        gdt_table: gdt,
  21b37a:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  21b381:	00 
  21b382:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  21b387:	ba 48 00 00 00       	mov    $0x48,%edx
  21b38c:	e8 cf b1 01 00       	callq  236560 <memcpy>
        kernel_code_selector: k_code_segment_res.unwrap(),
  21b391:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21b398:	00 
  21b399:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21b3a0:	00 
  21b3a1:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21b3a8:	00 
  21b3a9:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  21b3b0:	00 
  21b3b1:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21b3b8:	00 
  21b3b9:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  21b3c0:	00 
  21b3c1:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  21b3c8:	00 
  21b3c9:	48 8d 35 00 db 01 00 	lea    0x1db00(%rip),%rsi        # 238ed0 <memcmp+0x2920>
  21b3d0:	e8 bb f8 fe ff       	callq  20ac90 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>
  21b3d5:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  21b3da:	eb 6a                	jmp    21b446 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17hc83e073d72fcc24eE+0x1f6>
        panic!("{}", k_tss_segment_result.unwrap_err());
  21b3dc:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21b3e3:	00 
  21b3e4:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21b3eb:	00 
  21b3ec:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21b3f3:	00 
  21b3f4:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  21b3fb:	00 
  21b3fc:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  21b403:	00 
  21b404:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21b40b:	00 
  21b40c:	48 8d 35 8d da 01 00 	lea    0x1da8d(%rip),%rsi        # 238ea0 <memcmp+0x28f0>
  21b413:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  21b41a:	00 
  21b41b:	e8 80 f3 fe ff       	callq  20a7a0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h06b40efd31137229E>
  21b420:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21b427:	00 
  21b428:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21b42f:	00 
  21b430:	48 8d 35 81 da 01 00 	lea    0x1da81(%rip),%rsi        # 238eb8 <memcmp+0x2908>
  21b437:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  21b43e:	00 
  21b43f:	e8 8c 37 00 00       	callq  21ebd0 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>
  21b444:	0f 0b                	ud2    
        kernel_tss_selector: k_tss_segment_result.unwrap(),
  21b446:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21b44d:	00 
  21b44e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21b455:	00 
  21b456:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  21b45d:	00 
  21b45e:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21b465:	00 
  21b466:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21b46d:	00 
  21b46e:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21b475:	00 
  21b476:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  21b47d:	00 
  21b47e:	48 8d 35 63 da 01 00 	lea    0x1da63(%rip),%rsi        # 238ee8 <memcmp+0x2938>
  21b485:	e8 06 f8 fe ff       	callq  20ac90 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h5e720e4f24024ac3E>
  21b48a:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  21b48f:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    GDTContainer {
  21b494:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  21b49b:	00 
  21b49c:	ba 48 00 00 00       	mov    $0x48,%edx
  21b4a1:	e8 ba b0 01 00       	callq  236560 <memcpy>
  21b4a6:	66 8b 74 24 04       	mov    0x4(%rsp),%si
  21b4ab:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  21b4b0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21b4b5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21b4ba:	66 89 71 48          	mov    %si,0x48(%rcx)
  21b4be:	66 89 51 4a          	mov    %dx,0x4a(%rcx)
}
  21b4c2:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  21b4c9:	c3                   	retq   
  21b4ca:	cc                   	int3   
  21b4cb:	cc                   	int3   
  21b4cc:	cc                   	int3   
  21b4cd:	cc                   	int3   
  21b4ce:	cc                   	int3   
  21b4cf:	cc                   	int3   

000000000021b4d0 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E>:
}

// create the GDT
pub fn init_gdt() {
  21b4d0:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
    // set ss to zero:

    // Not setting SS to 0 will make iretq throw double fault
    // because iretq expects SS to be 0 or needs a valid data-segment to be set-up.
    SegmentRegister::SS.set(0);
  21b4d7:	48 8d 3d 2e 70 fe ff 	lea    -0x18fd2(%rip),%rdi        # 20250c <str.2+0x1c>
  21b4de:	31 f6                	xor    %esi,%esi
  21b4e0:	e8 ab f2 ff ff       	callq  21a790 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>

    let gdt_table = &KERNEL_BASE_GDT.gdt_table;
  21b4e5:	48 8d 3d 5b 70 fe ff 	lea    -0x18fa5(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21b4ec:	e8 1f 04 00 00       	callq  21b910 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21b4f1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21b4f6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21b4fb:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  21b502:	00 
    gdt_table.load_into_cpu();
  21b503:	e8 78 f9 ff ff       	callq  21ae80 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h73dda5e8a94f4a43E>

    // set the code segment register
    let kernel_cs = &KERNEL_BASE_GDT.kernel_code_selector;
  21b508:	48 8d 3d 38 70 fe ff 	lea    -0x18fc8(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21b50f:	e8 fc 03 00 00       	callq  21b910 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21b514:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21b519:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21b51e:	48 89 c1             	mov    %rax,%rcx
  21b521:	48 83 c1 48          	add    $0x48,%rcx
  21b525:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21b52a:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  21b531:	00 
    SegmentRegister::CS.set(kernel_cs.0);
  21b532:	48 8d 3d d4 6f fe ff 	lea    -0x1902c(%rip),%rdi        # 20250d <str.2+0x1d>
  21b539:	0f b7 70 48          	movzwl 0x48(%rax),%esi
  21b53d:	e8 4e f2 ff ff       	callq  21a790 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hb5b94b193f411049E>
  21b542:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

    // assert the register value:
    SegmentRegister::CS.assert_reg(kernel_cs.0);
  21b547:	48 8d 3d bf 6f fe ff 	lea    -0x19041(%rip),%rdi        # 20250d <str.2+0x1d>
  21b54e:	0f b7 30             	movzwl (%rax),%esi
  21b551:	e8 2a f3 ff ff       	callq  21a880 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h99f80facfb7c8834E>
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  21b556:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  21b55d:	00 00 
  21b55f:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21b564:	48 8d 35 cd 50 fe ff 	lea    -0x1af33(%rip),%rsi        # 200638 <str.0+0x118>
  21b56b:	e8 80 65 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b570:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21b574:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21b578:	a8 01                	test   $0x1,%al
  21b57a:	75 09                	jne    21b585 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0xb5>
  21b57c:	eb 00                	jmp    21b57e <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0xae>
  21b57e:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  21b583:	eb 4e                	jmp    21b5d3 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x103>
  21b585:	c6 84 24 7f 01 00 00 	movb   $0x0,0x17f(%rsp)
  21b58c:	00 
  21b58d:	48 8b 3d 7c fb 01 00 	mov    0x1fb7c(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21b594:	0f b6 b4 24 7f 01 00 	movzbl 0x17f(%rsp),%esi
  21b59b:	00 
  21b59c:	e8 1f d7 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21b5a1:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21b5a8:	00 
  21b5a9:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  21b5b0:	00 
  21b5b1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21b5b6:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21b5bb:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  21b5c0:	e8 2b 65 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b5c5:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  21b5c9:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  21b5cd:	24 01                	and    $0x1,%al
  21b5cf:	88 44 24 57          	mov    %al,0x57(%rsp)
  21b5d3:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  21b5d8:	75 29                	jne    21b603 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x133>
    log::info!("Initialized GDT.");
  21b5da:	48 c7 84 24 a8 00 00 	movq   $0x3,0xa8(%rsp)
  21b5e1:	00 03 00 00 00 
  21b5e6:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21b5ed:	00 
  21b5ee:	48 8d 35 43 50 fe ff 	lea    -0x1afbd(%rip),%rsi        # 200638 <str.0+0x118>
  21b5f5:	e8 f6 64 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b5fa:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  21b5fe:	e9 8a 00 00 00       	jmpq   21b68d <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1bd>
  21b603:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  21b608:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21b60f:	00 
  21b610:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  21b617:	00 
  21b618:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21b61f:	00 
  21b620:	48 8b 35 41 fb 01 00 	mov    0x1fb41(%rip),%rsi        # 23b168 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21b627:	e8 d4 32 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21b62c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21b631:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21b636:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21b63b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21b640:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  21b647:	00 
  21b648:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21b64f:	00 
  21b650:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  21b657:	00 
  21b658:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21b65d:	48 8d 35 9c d8 01 00 	lea    0x1d89c(%rip),%rsi        # 238f00 <memcmp+0x2950>
  21b664:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21b66a:	4c 89 c2             	mov    %r8,%rdx
  21b66d:	e8 4e ac fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21b672:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21b677:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21b67c:	48 8d 15 8d d8 01 00 	lea    0x1d88d(%rip),%rdx        # 238f10 <memcmp+0x2960>
  21b683:	e8 68 4f 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21b688:	e9 4d ff ff ff       	jmpq   21b5da <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x10a>
  21b68d:	8a 44 24 2d          	mov    0x2d(%rsp),%al
    log::info!("Initialized GDT.");
  21b691:	a8 01                	test   $0x1,%al
  21b693:	75 0c                	jne    21b6a1 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1d1>
  21b695:	eb 00                	jmp    21b697 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x1c7>
  21b697:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  21b69e:	00 
  21b69f:	eb 5a                	jmp    21b6fb <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x22b>
  21b6a1:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  21b6a8:	00 
  21b6a9:	48 8b 3d 60 fa 01 00 	mov    0x1fa60(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21b6b0:	0f b6 b4 24 6f 01 00 	movzbl 0x16f(%rsp),%esi
  21b6b7:	00 
  21b6b8:	e8 03 d6 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21b6bd:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21b6c4:	00 
  21b6c5:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  21b6cc:	00 
  21b6cd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21b6d4:	00 
  21b6d5:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  21b6dc:	00 
  21b6dd:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  21b6e4:	00 
  21b6e5:	e8 06 64 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b6ea:	88 44 24 17          	mov    %al,0x17(%rsp)
  21b6ee:	8a 44 24 17          	mov    0x17(%rsp),%al
  21b6f2:	24 01                	and    $0x1,%al
  21b6f4:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  21b6fb:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  21b702:	01 
  21b703:	75 13                	jne    21b718 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x248>

    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  21b705:	48 8d 3d 3b 6e fe ff 	lea    -0x191c5(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21b70c:	e8 ff 01 00 00       	callq  21b910 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>
  21b711:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21b716:	eb 43                	jmp    21b75b <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x28b>
    log::info!("Initialized GDT.");
  21b718:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21b71f:	00 
  21b720:	48 8d 35 21 d8 01 00 	lea    0x1d821(%rip),%rsi        # 238f48 <memcmp+0x2998>
  21b727:	ba 01 00 00 00       	mov    $0x1,%edx
  21b72c:	48 8d 0d 05 6e fe ff 	lea    -0x191fb(%rip),%rcx        # 202538 <str.2+0x48>
  21b733:	31 c0                	xor    %eax,%eax
  21b735:	41 89 c0             	mov    %eax,%r8d
  21b738:	e8 83 ab fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21b73d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  21b744:	00 
  21b745:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  21b74c:	00 
  21b74d:	48 8d 15 04 d8 01 00 	lea    0x1d804(%rip),%rdx        # 238f58 <memcmp+0x29a8>
  21b754:	e8 97 4e 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21b759:	eb aa                	jmp    21b705 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x235>
  21b75b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  21b760:	48 89 c1             	mov    %rax,%rcx
  21b763:	48 83 c1 4a          	add    $0x4a,%rcx
  21b767:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  21b76e:	00 
    load_tss(tss_sel.0);
  21b76f:	0f b7 78 4a          	movzwl 0x4a(%rax),%edi
  21b773:	e8 b8 ef ff ff       	callq  21a730 <_ZN9r3_kernel3cpu8segments8load_tss17ha24a70cff6842c90E>
    log::info!("Initialized TSS.");
  21b778:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  21b77f:	00 03 00 00 00 
  21b784:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21b78b:	00 
  21b78c:	48 8d 35 a5 4e fe ff 	lea    -0x1b15b(%rip),%rsi        # 200638 <str.0+0x118>
  21b793:	e8 58 63 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b798:	88 44 24 07          	mov    %al,0x7(%rsp)
  21b79c:	8a 44 24 07          	mov    0x7(%rsp),%al
  21b7a0:	a8 01                	test   $0x1,%al
  21b7a2:	75 0c                	jne    21b7b0 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x2e0>
  21b7a4:	eb 00                	jmp    21b7a6 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x2d6>
  21b7a6:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  21b7ad:	00 
  21b7ae:	eb 5a                	jmp    21b80a <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x33a>
  21b7b0:	c6 84 24 5f 01 00 00 	movb   $0x0,0x15f(%rsp)
  21b7b7:	00 
  21b7b8:	48 8b 3d 51 f9 01 00 	mov    0x1f951(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21b7bf:	0f b6 b4 24 5f 01 00 	movzbl 0x15f(%rsp),%esi
  21b7c6:	00 
  21b7c7:	e8 f4 d4 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21b7cc:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  21b7d3:	00 
  21b7d4:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21b7db:	00 
  21b7dc:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21b7e3:	00 
  21b7e4:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21b7eb:	00 
  21b7ec:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  21b7f3:	00 
  21b7f4:	e8 f7 62 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21b7f9:	88 44 24 06          	mov    %al,0x6(%rsp)
  21b7fd:	8a 44 24 06          	mov    0x6(%rsp),%al
  21b801:	24 01                	and    $0x1,%al
  21b803:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  21b80a:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  21b811:	01 
  21b812:	75 08                	jne    21b81c <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x34c>
}
  21b814:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  21b81b:	c3                   	retq   
    log::info!("Initialized TSS.");
  21b81c:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21b823:	00 
  21b824:	48 8d 35 65 d7 01 00 	lea    0x1d765(%rip),%rsi        # 238f90 <memcmp+0x29e0>
  21b82b:	ba 01 00 00 00       	mov    $0x1,%edx
  21b830:	48 8d 0d 01 6d fe ff 	lea    -0x192ff(%rip),%rcx        # 202538 <str.2+0x48>
  21b837:	31 c0                	xor    %eax,%eax
  21b839:	41 89 c0             	mov    %eax,%r8d
  21b83c:	e8 7f aa fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21b841:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  21b848:	00 
  21b849:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21b850:	00 
  21b851:	48 8d 15 48 d7 01 00 	lea    0x1d748(%rip),%rdx        # 238fa0 <memcmp+0x29f0>
  21b858:	e8 93 4d 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21b85d:	eb b5                	jmp    21b814 <_ZN9r3_kernel3cpu8segments8init_gdt17h12a5a0eb21a98dc9E+0x344>
  21b85f:	cc                   	int3   

000000000021b860 <_ZN78_$LT$r3_kernel..cpu..segments..SegmentSelector$u20$as$u20$core..fmt..Debug$GT$3fmt17hb564fdb2222ce426E>:
#[derive(Debug)]
  21b860:	48 83 ec 58          	sub    $0x58,%rsp
  21b864:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21b869:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21b86e:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct SegmentSelector(pub u16);
  21b873:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug)]
  21b878:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21b87d:	48 8d 15 b4 6c fe ff 	lea    -0x1934c(%rip),%rdx        # 202538 <str.2+0x48>
  21b884:	b9 0f 00 00 00       	mov    $0xf,%ecx
  21b889:	e8 02 9f 01 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  21b88e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21b893:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  21b898:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct SegmentSelector(pub u16);
  21b89d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21b8a2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug)]
  21b8a7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21b8ac:	48 8d 15 25 d7 01 00 	lea    0x1d725(%rip),%rdx        # 238fd8 <memcmp+0x2a28>
  21b8b3:	e8 58 74 01 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  21b8b8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21b8bd:	e8 be 75 01 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  21b8c2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21b8c6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21b8ca:	24 01                	and    $0x1,%al
  21b8cc:	0f b6 c0             	movzbl %al,%eax
  21b8cf:	48 83 c4 58          	add    $0x58,%rsp
  21b8d3:	c3                   	retq   
  21b8d4:	cc                   	int3   
  21b8d5:	cc                   	int3   
  21b8d6:	cc                   	int3   
  21b8d7:	cc                   	int3   
  21b8d8:	cc                   	int3   
  21b8d9:	cc                   	int3   
  21b8da:	cc                   	int3   
  21b8db:	cc                   	int3   
  21b8dc:	cc                   	int3   
  21b8dd:	cc                   	int3   
  21b8de:	cc                   	int3   
  21b8df:	cc                   	int3   

000000000021b8e0 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13b397ff8302ea1dE>:
            fn deref(&self) -> &$T {
  21b8e0:	48 83 ec 18          	sub    $0x18,%rsp
  21b8e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b8e9:	48 8d 05 78 63 02 00 	lea    0x26378(%rip),%rax        # 241c68 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h59165af470a5700dE>
  21b8f0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b8f5:	48 8d 3d 6c 63 02 00 	lea    0x2636c(%rip),%rdi        # 241c68 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h59165af470a5700dE>
  21b8fc:	e8 5f d3 fe ff       	callq  208c60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h6f32702f4bd4a450E>
  21b901:	48 89 04 24          	mov    %rax,(%rsp)
  21b905:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21b909:	48 83 c4 18          	add    $0x18,%rsp
  21b90d:	c3                   	retq   
  21b90e:	cc                   	int3   
  21b90f:	cc                   	int3   

000000000021b910 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h69d112796d09980eE>:
            fn deref(&self) -> &$T {
  21b910:	48 83 ec 18          	sub    $0x18,%rsp
  21b914:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21b919:	48 8d 05 c0 63 02 00 	lea    0x263c0(%rip),%rax        # 241ce0 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17he46a77ecbb384a84E>
  21b920:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21b925:	48 8d 3d b4 63 02 00 	lea    0x263b4(%rip),%rdi        # 241ce0 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17he46a77ecbb384a84E>
  21b92c:	e8 6f df fe ff       	callq  2098a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb8b90b753d0bfe00E>
  21b931:	48 89 04 24          	mov    %rax,(%rsp)
  21b935:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21b939:	48 83 c4 18          	add    $0x18,%rsp
  21b93d:	c3                   	retq   
  21b93e:	cc                   	int3   
  21b93f:	cc                   	int3   

000000000021b940 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11get_address17hefce162a947024fdE>:
    fn get_address(bus: u8, dev: u8, func: u8, offset: u8) -> u32 {
  21b940:	48 83 ec 1c          	sub    $0x1c,%rsp
  21b944:	88 4c 24 11          	mov    %cl,0x11(%rsp)
  21b948:	88 54 24 12          	mov    %dl,0x12(%rsp)
  21b94c:	40 88 74 24 13       	mov    %sil,0x13(%rsp)
  21b951:	40 88 f8             	mov    %dil,%al
  21b954:	88 44 24 18          	mov    %al,0x18(%rsp)
  21b958:	40 88 74 24 19       	mov    %sil,0x19(%rsp)
  21b95d:	88 54 24 1a          	mov    %dl,0x1a(%rsp)
  21b961:	88 4c 24 1b          	mov    %cl,0x1b(%rsp)
            | ((bus as u32) << 16)
  21b965:	0f b6 c0             	movzbl %al,%eax
  21b968:	c1 e0 10             	shl    $0x10,%eax
  21b96b:	89 44 24 14          	mov    %eax,0x14(%rsp)
  21b96f:	8a 44 24 13          	mov    0x13(%rsp),%al
  21b973:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
        PCI_BASE_ADDR as u32
  21b977:	81 c9 00 00 00 80    	or     $0x80000000,%ecx
  21b97d:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
            | ((dev as u32) << 11 as u32)
  21b981:	0f b6 c0             	movzbl %al,%eax
  21b984:	c1 e0 0b             	shl    $0xb,%eax
  21b987:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21b98b:	8a 44 24 12          	mov    0x12(%rsp),%al
  21b98f:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  21b993:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
        PCI_BASE_ADDR as u32
  21b997:	09 d1                	or     %edx,%ecx
  21b999:	89 0c 24             	mov    %ecx,(%rsp)
            | ((func as u32) << 8 as u32)
  21b99c:	0f b6 c0             	movzbl %al,%eax
  21b99f:	c1 e0 08             	shl    $0x8,%eax
  21b9a2:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21b9a6:	8a 4c 24 11          	mov    0x11(%rsp),%cl
  21b9aa:	8b 54 24 04          	mov    0x4(%rsp),%edx
  21b9ae:	8b 04 24             	mov    (%rsp),%eax
        PCI_BASE_ADDR as u32
  21b9b1:	09 d0                	or     %edx,%eax
            | ((offset as u32) & 0xFC)
  21b9b3:	0f b6 c9             	movzbl %cl,%ecx
  21b9b6:	81 e1 fc 00 00 00    	and    $0xfc,%ecx
        PCI_BASE_ADDR as u32
  21b9bc:	09 c8                	or     %ecx,%eax
    }
  21b9be:	48 83 c4 1c          	add    $0x1c,%rsp
  21b9c2:	c3                   	retq   
  21b9c3:	cc                   	int3   
  21b9c4:	cc                   	int3   
  21b9c5:	cc                   	int3   
  21b9c6:	cc                   	int3   
  21b9c7:	cc                   	int3   
  21b9c8:	cc                   	int3   
  21b9c9:	cc                   	int3   
  21b9ca:	cc                   	int3   
  21b9cb:	cc                   	int3   
  21b9cc:	cc                   	int3   
  21b9cd:	cc                   	int3   
  21b9ce:	cc                   	int3   
  21b9cf:	cc                   	int3   

000000000021b9d0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>:
    pub fn new(bus: u8, dev: u8, func: u8, offset: u8) -> Self {
  21b9d0:	48 83 ec 48          	sub    $0x48,%rsp
  21b9d4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21b9d9:	44 88 c0             	mov    %r8b,%al
  21b9dc:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  21b9e0:	88 4c 24 2d          	mov    %cl,0x2d(%rsp)
  21b9e4:	88 54 24 2e          	mov    %dl,0x2e(%rsp)
  21b9e8:	40 88 74 24 2f       	mov    %sil,0x2f(%rsp)
  21b9ed:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21b9f2:	40 88 74 24 44       	mov    %sil,0x44(%rsp)
  21b9f7:	88 54 24 45          	mov    %dl,0x45(%rsp)
  21b9fb:	88 4c 24 46          	mov    %cl,0x46(%rsp)
  21b9ff:	88 44 24 47          	mov    %al,0x47(%rsp)
            address_line: Port::new(PCI_ADDRESS_PORT, false),
  21ba03:	bf f8 0c 00 00       	mov    $0xcf8,%edi
  21ba08:	31 f6                	xor    %esi,%esi
  21ba0a:	e8 51 bd ff ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21ba0f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21ba14:	88 54 24 43          	mov    %dl,0x43(%rsp)
            data_line: Port::new(PCI_DATA_PORT, false),
  21ba18:	bf fc 0c 00 00       	mov    $0xcfc,%edi
  21ba1d:	31 f6                	xor    %esi,%esi
  21ba1f:	e8 3c bd ff ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  21ba24:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ba29:	88 54 24 1f          	mov    %dl,0x1f(%rsp)
  21ba2d:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  21ba31:	8a 4c 24 2d          	mov    0x2d(%rsp),%cl
  21ba35:	8a 54 24 2e          	mov    0x2e(%rsp),%dl
  21ba39:	40 8a 74 24 2f       	mov    0x2f(%rsp),%sil
            dev_addr: Self::get_address(bus, dev, func, offset),
  21ba3e:	40 0f b6 fe          	movzbl %sil,%edi
  21ba42:	0f b6 f2             	movzbl %dl,%esi
  21ba45:	0f b6 d1             	movzbl %cl,%edx
  21ba48:	0f b6 c8             	movzbl %al,%ecx
  21ba4b:	e8 f0 fe ff ff       	callq  21b940 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11get_address17hefce162a947024fdE>
  21ba50:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21ba54:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21ba59:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21ba5e:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  21ba62:	40 8a 74 24 1f       	mov    0x1f(%rsp),%sil
  21ba67:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21ba6c:	44 8a 44 24 43       	mov    0x43(%rsp),%r8b
  21ba71:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
        PCIConfigRegister {
  21ba76:	4c 89 09             	mov    %r9,(%rcx)
  21ba79:	41 80 e0 01          	and    $0x1,%r8b
  21ba7d:	44 88 41 08          	mov    %r8b,0x8(%rcx)
  21ba81:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  21ba85:	40 80 e6 01          	and    $0x1,%sil
  21ba89:	40 88 71 18          	mov    %sil,0x18(%rcx)
  21ba8d:	89 51 20             	mov    %edx,0x20(%rcx)
    }
  21ba90:	48 83 c4 48          	add    $0x48,%rsp
  21ba94:	c3                   	retq   
  21ba95:	cc                   	int3   
  21ba96:	cc                   	int3   
  21ba97:	cc                   	int3   
  21ba98:	cc                   	int3   
  21ba99:	cc                   	int3   
  21ba9a:	cc                   	int3   
  21ba9b:	cc                   	int3   
  21ba9c:	cc                   	int3   
  21ba9d:	cc                   	int3   
  21ba9e:	cc                   	int3   
  21ba9f:	cc                   	int3   

000000000021baa0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>:
    pub fn read_config(&self) -> u32 {
  21baa0:	48 83 ec 18          	sub    $0x18,%rsp
  21baa4:	48 89 f8             	mov    %rdi,%rax
  21baa7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21baac:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        self.address_line.write_u32(self.dev_addr);
  21bab1:	48 89 c7             	mov    %rax,%rdi
  21bab4:	8b 70 20             	mov    0x20(%rax),%esi
  21bab7:	e8 54 bd ff ff       	callq  217810 <_ZN9r3_kernel3cpu2io4Port9write_u3217ha661e0b35d97e282E>
  21babc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.data_line.read_u32()
  21bac1:	48 83 c7 10          	add    $0x10,%rdi
  21bac5:	e8 26 bd ff ff       	callq  2177f0 <_ZN9r3_kernel3cpu2io4Port8read_u3217h345e6a832a366919E>
  21baca:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21bace:	8b 44 24 04          	mov    0x4(%rsp),%eax
    }
  21bad2:	48 83 c4 18          	add    $0x18,%rsp
  21bad6:	c3                   	retq   
  21bad7:	cc                   	int3   
  21bad8:	cc                   	int3   
  21bad9:	cc                   	int3   
  21bada:	cc                   	int3   
  21badb:	cc                   	int3   
  21badc:	cc                   	int3   
  21badd:	cc                   	int3   
  21bade:	cc                   	int3   
  21badf:	cc                   	int3   

000000000021bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>:
    pub fn query(&self, bus: u8, dev: u8, func: u8) -> u16 {
  21bae0:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  21bae7:	88 c8                	mov    %cl,%al
  21bae9:	88 44 24 0d          	mov    %al,0xd(%rsp)
  21baed:	88 d1                	mov    %dl,%cl
  21baef:	88 4c 24 0e          	mov    %cl,0xe(%rsp)
  21baf3:	40 88 f2             	mov    %sil,%dl
  21baf6:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  21bafa:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  21bb01:	00 
  21bb02:	88 94 24 e5 00 00 00 	mov    %dl,0xe5(%rsp)
  21bb09:	88 8c 24 e6 00 00 00 	mov    %cl,0xe6(%rsp)
  21bb10:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
        match self {
  21bb17:	0f b6 07             	movzbl (%rdi),%eax
  21bb1a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21bb1f:	48 85 c0             	test   %rax,%rax
  21bb22:	74 13                	je     21bb37 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x57>
  21bb24:	eb 00                	jmp    21bb26 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x46>
  21bb26:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21bb2b:	48 83 e8 01          	sub    $0x1,%rax
  21bb2f:	74 2d                	je     21bb5e <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x7e>
  21bb31:	eb 00                	jmp    21bb33 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x53>
  21bb33:	eb 50                	jmp    21bb85 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0xa5>
  21bb35:	0f 0b                	ud2    
  21bb37:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21bb3b:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21bb3f:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bb43:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21bb48:	45 31 c0             	xor    %r8d,%r8d
  21bb4b:	0f b6 f2             	movzbl %dl,%esi
  21bb4e:	0f b6 d1             	movzbl %cl,%edx
  21bb51:	0f b6 c8             	movzbl %al,%ecx
  21bb54:	e8 77 fe ff ff       	callq  21b9d0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21bb59:	e9 01 01 00 00       	jmpq   21bc5f <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x17f>
  21bb5e:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21bb62:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21bb66:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bb6a:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21bb6f:	45 31 c0             	xor    %r8d,%r8d
  21bb72:	0f b6 f2             	movzbl %dl,%esi
  21bb75:	0f b6 d1             	movzbl %cl,%edx
  21bb78:	0f b6 c8             	movzbl %al,%ecx
  21bb7b:	e8 50 fe ff ff       	callq  21b9d0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21bb80:	e9 8b 00 00 00       	jmpq   21bc10 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x130>
  21bb85:	8a 44 24 0d          	mov    0xd(%rsp),%al
  21bb89:	8a 4c 24 0e          	mov    0xe(%rsp),%cl
  21bb8d:	8a 54 24 0f          	mov    0xf(%rsp),%dl
            Self::HeaderType => PCIConfigRegister::new(bus, dev, func, 0x0C)
  21bb91:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21bb98:	00 
  21bb99:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
  21bb9f:	0f b6 f2             	movzbl %dl,%esi
  21bba2:	0f b6 d1             	movzbl %cl,%edx
  21bba5:	0f b6 c8             	movzbl %al,%ecx
  21bba8:	e8 23 fe ff ff       	callq  21b9d0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21bbad:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21bbb4:	00 
  21bbb5:	e8 e6 fe ff ff       	callq  21baa0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21bbba:	89 84 24 9c 00 00 00 	mov    %eax,0x9c(%rsp)
                .get_bits(16..24) as u16,
  21bbc1:	48 c7 84 24 c8 00 00 	movq   $0x10,0xc8(%rsp)
  21bbc8:	00 10 00 00 00 
  21bbcd:	48 c7 84 24 d0 00 00 	movq   $0x18,0xd0(%rsp)
  21bbd4:	00 18 00 00 00 
            Self::HeaderType => PCIConfigRegister::new(bus, dev, func, 0x0C)
  21bbd9:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  21bbe0:	00 
  21bbe1:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21bbe8:	00 
  21bbe9:	48 8d bc 24 9c 00 00 	lea    0x9c(%rsp),%rdi
  21bbf0:	00 
  21bbf1:	e8 ea 23 00 00       	callq  21dfe0 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21bbf6:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21bbfa:	8b 44 24 08          	mov    0x8(%rsp),%eax
  21bbfe:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
    }
  21bc03:	66 8b 44 24 1a       	mov    0x1a(%rsp),%ax
  21bc08:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  21bc0f:	c3                   	retq   
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bc10:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  21bc15:	e8 86 fe ff ff       	callq  21baa0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21bc1a:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
                .get_bits(16..32) as u16,
  21bc1e:	48 c7 84 24 88 00 00 	movq   $0x10,0x88(%rsp)
  21bc25:	00 10 00 00 00 
  21bc2a:	48 c7 84 24 90 00 00 	movq   $0x20,0x90(%rsp)
  21bc31:	00 20 00 00 00 
            Self::VendorID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bc36:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  21bc3d:	00 
  21bc3e:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  21bc45:	00 
  21bc46:	48 8d 7c 24 5c       	lea    0x5c(%rsp),%rdi
  21bc4b:	e8 90 23 00 00       	callq  21dfe0 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21bc50:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21bc54:	8b 44 24 04          	mov    0x4(%rsp),%eax
  21bc58:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
                .get_bits(16..32) as u16,
  21bc5d:	eb a4                	jmp    21bc03 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x123>
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bc5f:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21bc64:	e8 37 fe ff ff       	callq  21baa0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21bc69:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
                .get_bits(0..16) as u16,
  21bc6d:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21bc74:	00 00 
  21bc76:	48 c7 44 24 50 10 00 	movq   $0x10,0x50(%rsp)
  21bc7d:	00 00 
            Self::DeviceID => PCIConfigRegister::new(bus, dev, func, 0x00)
  21bc7f:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21bc84:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  21bc89:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
  21bc8e:	e8 4d 23 00 00       	callq  21dfe0 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>
  21bc93:	89 04 24             	mov    %eax,(%rsp)
  21bc96:	8b 04 24             	mov    (%rsp),%eax
  21bc99:	66 89 44 24 1a       	mov    %ax,0x1a(%rsp)
                .get_bits(0..16) as u16,
  21bc9e:	e9 60 ff ff ff       	jmpq   21bc03 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E+0x123>
  21bca3:	cc                   	int3   
  21bca4:	cc                   	int3   
  21bca5:	cc                   	int3   
  21bca6:	cc                   	int3   
  21bca7:	cc                   	int3   
  21bca8:	cc                   	int3   
  21bca9:	cc                   	int3   
  21bcaa:	cc                   	int3   
  21bcab:	cc                   	int3   
  21bcac:	cc                   	int3   
  21bcad:	cc                   	int3   
  21bcae:	cc                   	int3   
  21bcaf:	cc                   	int3   

000000000021bcb0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>:
    fn is_empty(config_word: u16) -> bool {
  21bcb0:	48 83 ec 02          	sub    $0x2,%rsp
  21bcb4:	66 89 f8             	mov    %di,%ax
  21bcb7:	66 89 04 24          	mov    %ax,(%rsp)
        config_word == 0xFFFF
  21bcbb:	66 83 f8 ff          	cmp    $0xffff,%ax
  21bcbf:	0f 94 c0             	sete   %al
    }
  21bcc2:	24 01                	and    $0x1,%al
  21bcc4:	0f b6 c0             	movzbl %al,%eax
  21bcc7:	48 83 c4 02          	add    $0x2,%rsp
  21bccb:	c3                   	retq   
  21bccc:	cc                   	int3   
  21bccd:	cc                   	int3   
  21bcce:	cc                   	int3   
  21bccf:	cc                   	int3   

000000000021bcd0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber17is_multi_function17h9d37fbf3c9e2f0aaE>:
    fn is_multi_function(config_word: u16) -> bool {
  21bcd0:	48 83 ec 02          	sub    $0x2,%rsp
  21bcd4:	66 89 f8             	mov    %di,%ax
  21bcd7:	66 89 04 24          	mov    %ax,(%rsp)
        config_word & FLAG_MULTIFUNCTION_DEVICE as u16 != 0
  21bcdb:	66 83 e0 50          	and    $0x50,%ax
  21bcdf:	66 83 f8 00          	cmp    $0x0,%ax
  21bce3:	0f 95 c0             	setne  %al
    }
  21bce6:	24 01                	and    $0x1,%al
  21bce8:	0f b6 c0             	movzbl %al,%eax
  21bceb:	48 83 c4 02          	add    $0x2,%rsp
  21bcef:	c3                   	retq   

000000000021bcf0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE>:
    pub fn probe_device(bus: u8, dev: u8, callback: OnEntryCallback) {
  21bcf0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21bcf7:	48 89 d1             	mov    %rdx,%rcx
  21bcfa:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21bcff:	40 88 f0             	mov    %sil,%al
  21bd02:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  21bd06:	40 88 fa             	mov    %dil,%dl
  21bd09:	88 54 24 3d          	mov    %dl,0x3d(%rsp)
  21bd0d:	88 54 24 76          	mov    %dl,0x76(%rsp)
  21bd11:	88 44 24 77          	mov    %al,0x77(%rsp)
  21bd15:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, 0);
  21bd1a:	48 8d 3d 26 68 fe ff 	lea    -0x197da(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21bd21:	31 c9                	xor    %ecx,%ecx
  21bd23:	0f b6 f2             	movzbl %dl,%esi
  21bd26:	0f b6 d0             	movzbl %al,%edx
  21bd29:	e8 b2 fd ff ff       	callq  21bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21bd2e:	66 89 44 24 3e       	mov    %ax,0x3e(%rsp)
  21bd33:	66 89 84 24 84 00 00 	mov    %ax,0x84(%rsp)
  21bd3a:	00 
  21bd3b:	66 8b 44 24 3e       	mov    0x3e(%rsp),%ax
        if Self::is_empty(vendor_id) {
  21bd40:	0f b7 f8             	movzwl %ax,%edi
  21bd43:	e8 68 ff ff ff       	callq  21bcb0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>
  21bd48:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21bd4c:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21bd50:	a8 01                	test   $0x1,%al
  21bd52:	75 1d                	jne    21bd71 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
  21bd54:	eb 00                	jmp    21bd56 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x66>
  21bd56:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21bd5b:	8a 4c 24 3c          	mov    0x3c(%rsp),%cl
  21bd5f:	40 8a 74 24 3d       	mov    0x3d(%rsp),%sil
        callback(bus, dev, 0);
  21bd64:	31 d2                	xor    %edx,%edx
  21bd66:	40 0f b6 fe          	movzbl %sil,%edi
  21bd6a:	0f b6 f1             	movzbl %cl,%esi
  21bd6d:	ff d0                	callq  *%rax
  21bd6f:	eb 08                	jmp    21bd79 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x89>
    }
  21bd71:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21bd78:	c3                   	retq   
  21bd79:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  21bd7d:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
        let header_type = PCIDeviceQuery::HeaderType.query(bus, dev, 0);
  21bd81:	48 8d 3d c0 67 fe ff 	lea    -0x19840(%rip),%rdi        # 202548 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E+0x1>
  21bd88:	31 c9                	xor    %ecx,%ecx
  21bd8a:	0f b6 f2             	movzbl %dl,%esi
  21bd8d:	0f b6 d0             	movzbl %al,%edx
  21bd90:	e8 4b fd ff ff       	callq  21bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21bd95:	66 89 44 24 2c       	mov    %ax,0x2c(%rsp)
  21bd9a:	66 89 84 24 86 00 00 	mov    %ax,0x86(%rsp)
  21bda1:	00 
  21bda2:	66 8b 44 24 2c       	mov    0x2c(%rsp),%ax
        if Self::is_multi_function(header_type) {
  21bda7:	0f b7 f8             	movzwl %ax,%edi
  21bdaa:	e8 21 ff ff ff       	callq  21bcd0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber17is_multi_function17h9d37fbf3c9e2f0aaE>
  21bdaf:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  21bdb3:	8a 44 24 2b          	mov    0x2b(%rsp),%al
  21bdb7:	a8 01                	test   $0x1,%al
  21bdb9:	75 02                	jne    21bdbd <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0xcd>
  21bdbb:	eb b4                	jmp    21bd71 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
            for func in 0..MAX_FUNCTIONS_PER_DEVICE {
  21bdbd:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  21bdc4:	00 00 
  21bdc6:	48 c7 44 24 48 08 00 	movq   $0x8,0x48(%rsp)
  21bdcd:	00 00 
  21bdcf:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  21bdd4:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  21bdd9:	e8 92 0c 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21bdde:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21bde3:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21bde8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21bded:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21bdf2:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21bdf7:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21bdfc:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21be01:	e8 3a 0c 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21be06:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  21be0b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21be10:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21be15:	48 85 c0             	test   %rax,%rax
  21be18:	0f 84 53 ff ff ff    	je     21bd71 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x81>
  21be1e:	eb 00                	jmp    21be20 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x130>
  21be20:	eb 02                	jmp    21be24 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x134>
  21be22:	0f 0b                	ud2    
  21be24:	8a 4c 24 3c          	mov    0x3c(%rsp),%cl
  21be28:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
  21be2c:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21be31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21be36:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21be3d:	00 
  21be3e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21be45:	00 
  21be46:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21be4d:	00 
                let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, func as u8);
  21be4e:	48 8d 3d f2 66 fe ff 	lea    -0x1990e(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21be55:	0f b6 f2             	movzbl %dl,%esi
  21be58:	0f b6 d1             	movzbl %cl,%edx
  21be5b:	0f b6 c8             	movzbl %al,%ecx
  21be5e:	e8 7d fc ff ff       	callq  21bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21be63:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  21be68:	66 89 84 24 a6 00 00 	mov    %ax,0xa6(%rsp)
  21be6f:	00 
  21be70:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
                if !Self::is_empty(vendor_id) {
  21be75:	0f b7 f8             	movzwl %ax,%edi
  21be78:	e8 33 fe ff ff       	callq  21bcb0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber8is_empty17hb575c923ed78a45bE>
  21be7d:	88 44 24 07          	mov    %al,0x7(%rsp)
  21be81:	8a 44 24 07          	mov    0x7(%rsp),%al
  21be85:	34 ff                	xor    $0xff,%al
  21be87:	a8 01                	test   $0x1,%al
  21be89:	75 05                	jne    21be90 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x1a0>
  21be8b:	e9 6c ff ff ff       	jmpq   21bdfc <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x10c>
  21be90:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21be95:	8a 54 24 3c          	mov    0x3c(%rsp),%dl
  21be99:	40 8a 74 24 3d       	mov    0x3d(%rsp),%sil
  21be9e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    callback(bus, dev, func as u8);
  21bea3:	40 0f b6 fe          	movzbl %sil,%edi
  21bea7:	0f b6 f2             	movzbl %dl,%esi
  21beaa:	0f b6 d1             	movzbl %cl,%edx
  21bead:	ff d0                	callq  *%rax
  21beaf:	e9 48 ff ff ff       	jmpq   21bdfc <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE+0x10c>
  21beb4:	cc                   	int3   
  21beb5:	cc                   	int3   
  21beb6:	cc                   	int3   
  21beb7:	cc                   	int3   
  21beb8:	cc                   	int3   
  21beb9:	cc                   	int3   
  21beba:	cc                   	int3   
  21bebb:	cc                   	int3   
  21bebc:	cc                   	int3   
  21bebd:	cc                   	int3   
  21bebe:	cc                   	int3   
  21bebf:	cc                   	int3   

000000000021bec0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E>:
    pub fn probe_bus(bus: u8, callback: OnEntryCallback) {
  21bec0:	48 83 ec 78          	sub    $0x78,%rsp
  21bec4:	48 89 34 24          	mov    %rsi,(%rsp)
  21bec8:	40 88 f8             	mov    %dil,%al
  21becb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21becf:	88 44 24 57          	mov    %al,0x57(%rsp)
  21bed3:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
        for dev in 0..MAX_DEVICES_PER_BUS {
  21bed8:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21bedf:	00 00 
  21bee1:	48 c7 44 24 28 20 00 	movq   $0x20,0x28(%rsp)
  21bee8:	00 00 
  21beea:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21beef:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21bef4:	e8 77 0b 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21bef9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21befe:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21bf03:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21bf08:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21bf0d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21bf12:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21bf17:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  21bf1c:	e8 1f 0b 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21bf21:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21bf26:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21bf2b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21bf30:	48 85 c0             	test   %rax,%rax
  21bf33:	74 06                	je     21bf3b <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x7b>
  21bf35:	eb 00                	jmp    21bf37 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x77>
  21bf37:	eb 07                	jmp    21bf40 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x80>
  21bf39:	0f 0b                	ud2    
    }
  21bf3b:	48 83 c4 78          	add    $0x78,%rsp
  21bf3f:	c3                   	retq   
  21bf40:	48 8b 14 24          	mov    (%rsp),%rdx
  21bf44:	8a 4c 24 0f          	mov    0xf(%rsp),%cl
        for dev in 0..MAX_DEVICES_PER_BUS {
  21bf48:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21bf4d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21bf52:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21bf57:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            Self::probe_device(bus, dev as u8, callback);
  21bf5c:	0f b6 f9             	movzbl %cl,%edi
  21bf5f:	0f b6 f0             	movzbl %al,%esi
  21bf62:	e8 89 fd ff ff       	callq  21bcf0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber12probe_device17h639ab34cc799411bE>
  21bf67:	eb ae                	jmp    21bf17 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E+0x57>
  21bf69:	cc                   	int3   
  21bf6a:	cc                   	int3   
  21bf6b:	cc                   	int3   
  21bf6c:	cc                   	int3   
  21bf6d:	cc                   	int3   
  21bf6e:	cc                   	int3   
  21bf6f:	cc                   	int3   

000000000021bf70 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE>:
    pub fn probe(callback: OnEntryCallback) {
  21bf70:	48 83 ec 68          	sub    $0x68,%rsp
  21bf74:	48 89 3c 24          	mov    %rdi,(%rsp)
  21bf78:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
        for bus in 0..MAX_BUS {
  21bf7d:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  21bf84:	00 00 
  21bf86:	48 c7 44 24 20 00 01 	movq   $0x100,0x20(%rsp)
  21bf8d:	00 00 
  21bf8f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21bf94:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21bf99:	e8 d2 0a 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21bf9e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21bfa3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21bfa8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21bfad:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21bfb2:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21bfb7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21bfbc:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21bfc1:	e8 7a 0a 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21bfc6:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21bfcb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21bfd0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21bfd5:	48 85 c0             	test   %rax,%rax
  21bfd8:	74 06                	je     21bfe0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x70>
  21bfda:	eb 00                	jmp    21bfdc <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x6c>
  21bfdc:	eb 07                	jmp    21bfe5 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x75>
  21bfde:	0f 0b                	ud2    
    }
  21bfe0:	48 83 c4 68          	add    $0x68,%rsp
  21bfe4:	c3                   	retq   
  21bfe5:	48 8b 34 24          	mov    (%rsp),%rsi
        for bus in 0..MAX_BUS {
  21bfe9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21bfee:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21bff3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21bff8:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            Self::probe_bus(bus as u8, callback);
  21bffd:	0f b6 f8             	movzbl %al,%edi
  21c000:	e8 bb fe ff ff       	callq  21bec0 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber9probe_bus17h3e71abadb3b411c2E>
  21c005:	eb b5                	jmp    21bfbc <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE+0x4c>
  21c007:	cc                   	int3   
  21c008:	cc                   	int3   
  21c009:	cc                   	int3   
  21c00a:	cc                   	int3   
  21c00b:	cc                   	int3   
  21c00c:	cc                   	int3   
  21c00d:	cc                   	int3   
  21c00e:	cc                   	int3   
  21c00f:	cc                   	int3   

000000000021c010 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E>:
    pub fn new(bus: u8, dev: u8, func: u8) -> PCIDevice {
  21c010:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  21c017:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21c01c:	88 c8                	mov    %cl,%al
  21c01e:	88 44 24 45          	mov    %al,0x45(%rsp)
  21c022:	88 d1                	mov    %dl,%cl
  21c024:	88 4c 24 46          	mov    %cl,0x46(%rsp)
  21c028:	40 88 f2             	mov    %sil,%dl
  21c02b:	88 54 24 47          	mov    %dl,0x47(%rsp)
  21c02f:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  21c034:	88 94 24 e1 00 00 00 	mov    %dl,0xe1(%rsp)
  21c03b:	88 8c 24 e2 00 00 00 	mov    %cl,0xe2(%rsp)
  21c042:	88 84 24 e3 00 00 00 	mov    %al,0xe3(%rsp)
        let vendor_id = PCIDeviceQuery::VendorID.query(bus, dev, func);
  21c049:	48 8d 3d f7 64 fe ff 	lea    -0x19b09(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21c050:	0f b6 f2             	movzbl %dl,%esi
  21c053:	0f b6 d1             	movzbl %cl,%edx
  21c056:	0f b6 c8             	movzbl %al,%ecx
  21c059:	e8 82 fa ff ff       	callq  21bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21c05e:	66 89 44 24 56       	mov    %ax,0x56(%rsp)
  21c063:	66 89 84 24 e4 00 00 	mov    %ax,0xe4(%rsp)
  21c06a:	00 
  21c06b:	8a 44 24 45          	mov    0x45(%rsp),%al
  21c06f:	8a 4c 24 46          	mov    0x46(%rsp),%cl
  21c073:	8a 54 24 47          	mov    0x47(%rsp),%dl
        let device_id = PCIDeviceQuery::VendorID.query(bus, dev, func);
  21c077:	48 8d 3d c9 64 fe ff 	lea    -0x19b37(%rip),%rdi        # 202547 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hd138a5d3a226b4d1E>
  21c07e:	0f b6 f2             	movzbl %dl,%esi
  21c081:	0f b6 d1             	movzbl %cl,%edx
  21c084:	0f b6 c8             	movzbl %al,%ecx
  21c087:	e8 54 fa ff ff       	callq  21bae0 <_ZN9r3_kernel7drivers3pci14PCIDeviceQuery5query17hf48b72b8dbfa10a3E>
  21c08c:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
  21c091:	66 89 84 24 e6 00 00 	mov    %ax,0xe6(%rsp)
  21c098:	00 
        let mut bars: [u32; 6] = [0; 6];
  21c099:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  21c09e:	31 f6                	xor    %esi,%esi
  21c0a0:	ba 18 00 00 00       	mov    $0x18,%edx
  21c0a5:	e8 d6 a4 01 00       	callq  236580 <memset>
        for idx in 0..6 {
  21c0aa:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  21c0b1:	00 00 
  21c0b3:	48 c7 44 24 78 06 00 	movq   $0x6,0x78(%rsp)
  21c0ba:	00 00 
  21c0bc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21c0c1:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  21c0c6:	e8 a5 09 00 00       	callq  21ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>
  21c0cb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c0d0:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21c0d5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c0da:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c0df:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21c0e6:	00 
  21c0e7:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21c0ee:	00 
  21c0ef:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21c0f6:	00 
  21c0f7:	e8 44 09 00 00       	callq  21ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>
  21c0fc:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  21c103:	00 
  21c104:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21c10b:	00 
  21c10c:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21c113:	00 
  21c114:	48 85 c0             	test   %rax,%rax
  21c117:	74 09                	je     21c122 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x112>
  21c119:	eb 00                	jmp    21c11b <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x10b>
  21c11b:	e9 8b 00 00 00       	jmpq   21c1ab <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x19b>
  21c120:	0f 0b                	ud2    
  21c122:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21c127:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21c12c:	66 8b 54 24 36       	mov    0x36(%rsp),%dx
  21c131:	66 8b 74 24 56       	mov    0x56(%rsp),%si
  21c136:	40 8a 7c 24 45       	mov    0x45(%rsp),%dil
  21c13b:	44 8a 44 24 46       	mov    0x46(%rsp),%r8b
  21c140:	44 8a 4c 24 47       	mov    0x47(%rsp),%r9b
            bars,
  21c145:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  21c14a:	4c 89 94 24 c8 00 00 	mov    %r10,0xc8(%rsp)
  21c151:	00 
  21c152:	4c 8b 54 24 60       	mov    0x60(%rsp),%r10
  21c157:	4c 89 94 24 d0 00 00 	mov    %r10,0xd0(%rsp)
  21c15e:	00 
  21c15f:	4c 8b 54 24 68       	mov    0x68(%rsp),%r10
  21c164:	4c 89 94 24 d8 00 00 	mov    %r10,0xd8(%rsp)
  21c16b:	00 
        PCIDevice {
  21c16c:	44 88 49 1c          	mov    %r9b,0x1c(%rcx)
  21c170:	44 88 41 1d          	mov    %r8b,0x1d(%rcx)
  21c174:	40 88 79 1e          	mov    %dil,0x1e(%rcx)
  21c178:	66 89 71 18          	mov    %si,0x18(%rcx)
  21c17c:	66 89 51 1a          	mov    %dx,0x1a(%rcx)
  21c180:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21c187:	00 
  21c188:	48 89 11             	mov    %rdx,(%rcx)
  21c18b:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21c192:	00 
  21c193:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  21c197:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  21c19e:	00 
  21c19f:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  21c1a3:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  21c1aa:	c3                   	retq   
        for idx in 0..6 {
  21c1ab:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21c1b2:	00 
  21c1b3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c1b8:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21c1bf:	00 
  21c1c0:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21c1c7:	00 
  21c1c8:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21c1cf:	00 
            let offset = 0x10 + ((idx as u8) << 2);
  21c1d0:	c0 e0 02             	shl    $0x2,%al
  21c1d3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21c1d7:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  21c1db:	04 10                	add    $0x10,%al
  21c1dd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  21c1e1:	0f 92 c0             	setb   %al
  21c1e4:	a8 01                	test   $0x1,%al
  21c1e6:	75 35                	jne    21c21d <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x20d>
  21c1e8:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21c1ec:	8a 4c 24 45          	mov    0x45(%rsp),%cl
  21c1f0:	8a 54 24 46          	mov    0x46(%rsp),%dl
  21c1f4:	40 8a 74 24 47       	mov    0x47(%rsp),%sil
  21c1f9:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
            let config_reg = PCIConfigRegister::new(bus, dev, func, offset);
  21c200:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21c207:	00 
  21c208:	40 0f b6 f6          	movzbl %sil,%esi
  21c20c:	0f b6 d2             	movzbl %dl,%edx
  21c20f:	0f b6 c9             	movzbl %cl,%ecx
  21c212:	44 0f b6 c0          	movzbl %al,%r8d
  21c216:	e8 b5 f7 ff ff       	callq  21b9d0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister3new17h22214b8dd70e451eE>
  21c21b:	eb 1a                	jmp    21c237 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x227>
            let offset = 0x10 + ((idx as u8) << 2);
  21c21d:	48 8d 3d 3c 63 fe ff 	lea    -0x19cc4(%rip),%rdi        # 202560 <str.0>
  21c224:	48 8d 15 cd cd 01 00 	lea    0x1cdcd(%rip),%rdx        # 238ff8 <memcmp+0x2a48>
  21c22b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21c230:	e8 2b 72 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21c235:	0f 0b                	ud2    
            bars[idx] = config_reg.read_config();
  21c237:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  21c23e:	00 
  21c23f:	e8 5c f8 ff ff       	callq  21baa0 <_ZN9r3_kernel7drivers3pci17PCIConfigRegister11read_config17hfcc2eed0d1bad43cE>
  21c244:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21c248:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c24d:	48 83 f8 06          	cmp    $0x6,%rax
  21c251:	0f 92 c0             	setb   %al
  21c254:	a8 01                	test   $0x1,%al
  21c256:	75 02                	jne    21c25a <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x24a>
  21c258:	eb 12                	jmp    21c26c <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0x25c>
  21c25a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21c25f:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
  21c263:	89 4c 84 58          	mov    %ecx,0x58(%rsp,%rax,4)
        for idx in 0..6 {
  21c267:	e9 83 fe ff ff       	jmpq   21c0ef <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E+0xdf>
  21c26c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            bars[idx] = config_reg.read_config();
  21c271:	48 8d 15 98 cd 01 00 	lea    0x1cd98(%rip),%rdx        # 239010 <memcmp+0x2a60>
  21c278:	be 06 00 00 00       	mov    $0x6,%esi
  21c27d:	e8 2e 72 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21c282:	0f 0b                	ud2    
  21c284:	cc                   	int3   
  21c285:	cc                   	int3   
  21c286:	cc                   	int3   
  21c287:	cc                   	int3   
  21c288:	cc                   	int3   
  21c289:	cc                   	int3   
  21c28a:	cc                   	int3   
  21c28b:	cc                   	int3   
  21c28c:	cc                   	int3   
  21c28d:	cc                   	int3   
  21c28e:	cc                   	int3   
  21c28f:	cc                   	int3   

000000000021c290 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE>:
}

fn on_device_callback(bus: u8, dev: u8, func: u8) {
  21c290:	53                   	push   %rbx
  21c291:	48 81 ec e0 01 00 00 	sub    $0x1e0,%rsp
  21c298:	88 d0                	mov    %dl,%al
  21c29a:	40 88 f1             	mov    %sil,%cl
  21c29d:	40 88 fa             	mov    %dil,%dl
  21c2a0:	88 94 24 a5 01 00 00 	mov    %dl,0x1a5(%rsp)
  21c2a7:	88 8c 24 a6 01 00 00 	mov    %cl,0x1a6(%rsp)
  21c2ae:	88 84 24 a7 01 00 00 	mov    %al,0x1a7(%rsp)
    let pci_device = PCIDevice::new(bus, dev, func);
  21c2b5:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21c2bc:	00 
  21c2bd:	0f b6 f2             	movzbl %dl,%esi
  21c2c0:	0f b6 d1             	movzbl %cl,%edx
  21c2c3:	0f b6 c8             	movzbl %al,%ecx
  21c2c6:	e8 45 fd ff ff       	callq  21c010 <_ZN9r3_kernel7drivers3pci9PCIDevice3new17h04dad1922c646193E>

    log::info!(
  21c2cb:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  21c2d2:	00 03 00 00 00 
  21c2d7:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  21c2de:	00 
  21c2df:	48 8d 35 52 43 fe ff 	lea    -0x1bcae(%rip),%rsi        # 200638 <str.0+0x118>
  21c2e6:	e8 05 58 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21c2eb:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  21c2f2:	8a 84 24 8f 00 00 00 	mov    0x8f(%rsp),%al
  21c2f9:	a8 01                	test   $0x1,%al
  21c2fb:	75 0c                	jne    21c309 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x79>
  21c2fd:	eb 00                	jmp    21c2ff <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x6f>
  21c2ff:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  21c306:	00 
  21c307:	eb 60                	jmp    21c369 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xd9>
  21c309:	c6 84 24 d7 01 00 00 	movb   $0x0,0x1d7(%rsp)
  21c310:	00 
  21c311:	48 8b 3d f8 ed 01 00 	mov    0x1edf8(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21c318:	0f b6 b4 24 d7 01 00 	movzbl 0x1d7(%rsp),%esi
  21c31f:	00 
  21c320:	e8 9b c9 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21c325:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  21c32c:	00 
  21c32d:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  21c334:	00 
  21c335:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21c33c:	00 
  21c33d:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  21c344:	00 
  21c345:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  21c34c:	00 
  21c34d:	e8 9e 57 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21c352:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  21c359:	8a 84 24 8e 00 00 00 	mov    0x8e(%rsp),%al
  21c360:	24 01                	and    $0x1,%al
  21c362:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  21c369:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  21c370:	01 
  21c371:	75 19                	jne    21c38c <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xfc>
        pci_device.func,
        pci_device.vendor_id,
        pci_device.device_id
    );

    PCI_DEVICES.lock().push(pci_device);
  21c373:	48 8d 3d 60 62 fe ff 	lea    -0x19da0(%rip),%rdi        # 2025da <_ZN9r3_kernel7drivers3pci11PCI_DEVICES17hedd14ab3ecdeee63E>
  21c37a:	e8 d1 02 00 00       	callq  21c650 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1680ab5b43fd2a39E>
  21c37f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21c386:	00 
  21c387:	e9 12 02 00 00       	jmpq   21c59e <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0x30e>
        pci_device.bus,
  21c38c:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21c393:	00 
  21c394:	48 83 c7 1c          	add    $0x1c,%rdi
        pci_device.dev,
  21c398:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  21c39f:	00 
  21c3a0:	48 83 c6 1d          	add    $0x1d,%rsi
        pci_device.func,
  21c3a4:	48 8d 94 24 90 00 00 	lea    0x90(%rsp),%rdx
  21c3ab:	00 
  21c3ac:	48 83 c2 1e          	add    $0x1e,%rdx
        pci_device.vendor_id,
  21c3b0:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  21c3b7:	00 
  21c3b8:	48 83 c1 18          	add    $0x18,%rcx
        pci_device.device_id
  21c3bc:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
  21c3c3:	00 
  21c3c4:	48 83 c0 1a          	add    $0x1a,%rax
    log::info!(
  21c3c8:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  21c3cf:	00 
  21c3d0:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  21c3d7:	00 
  21c3d8:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  21c3df:	00 
  21c3e0:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  21c3e7:	00 
  21c3e8:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  21c3ef:	00 
  21c3f0:	48 8b bc 24 48 01 00 	mov    0x148(%rsp),%rdi
  21c3f7:	00 
  21c3f8:	48 89 bc 24 a8 01 00 	mov    %rdi,0x1a8(%rsp)
  21c3ff:	00 
  21c400:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  21c407:	00 
  21c408:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c40d:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  21c414:	00 
  21c415:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  21c41c:	00 
  21c41d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21c422:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  21c429:	00 
  21c42a:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  21c431:	00 
  21c432:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21c437:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  21c43e:	00 
  21c43f:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  21c446:	00 
  21c447:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21c44c:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  21c453:	00 
  21c454:	48 8b 35 15 ed 01 00 	mov    0x1ed15(%rip),%rsi        # 23b170 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21c45b:	e8 40 2a ff ff       	callq  20eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21c460:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c465:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21c46a:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  21c46f:	48 8b 35 fa ec 01 00 	mov    0x1ecfa(%rip),%rsi        # 23b170 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21c476:	e8 25 2a ff ff       	callq  20eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21c47b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21c480:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21c485:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  21c48a:	48 8b 35 df ec 01 00 	mov    0x1ecdf(%rip),%rsi        # 23b170 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  21c491:	e8 0a 2a ff ff       	callq  20eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  21c496:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21c49b:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21c4a0:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21c4a5:	48 8b 35 bc ec 01 00 	mov    0x1ecbc(%rip),%rsi        # 23b168 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21c4ac:	e8 4f 24 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21c4b1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c4b6:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21c4bb:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  21c4c0:	48 8b 35 a1 ec 01 00 	mov    0x1eca1(%rip),%rsi        # 23b168 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  21c4c7:	e8 34 24 ff ff       	callq  20e900 <_ZN4core3fmt10ArgumentV13new17h4ef73364d47b8ea0E>
  21c4cc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c4d1:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21c4d6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21c4db:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21c4e0:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21c4e5:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21c4ea:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21c4ef:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
  21c4f4:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
  21c4f9:	4c 8b 54 24 40       	mov    0x40(%rsp),%r10
  21c4fe:	4c 8b 5c 24 78       	mov    0x78(%rsp),%r11
  21c503:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
  21c508:	48 89 9c 24 f8 00 00 	mov    %rbx,0xf8(%rsp)
  21c50f:	00 
  21c510:	4c 89 9c 24 00 01 00 	mov    %r11,0x100(%rsp)
  21c517:	00 
  21c518:	4c 89 94 24 08 01 00 	mov    %r10,0x108(%rsp)
  21c51f:	00 
  21c520:	4c 89 8c 24 10 01 00 	mov    %r9,0x110(%rsp)
  21c527:	00 
  21c528:	4c 89 84 24 18 01 00 	mov    %r8,0x118(%rsp)
  21c52f:	00 
  21c530:	48 89 bc 24 20 01 00 	mov    %rdi,0x120(%rsp)
  21c537:	00 
  21c538:	48 89 b4 24 28 01 00 	mov    %rsi,0x128(%rsp)
  21c53f:	00 
  21c540:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  21c547:	00 
  21c548:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  21c54f:	00 
  21c550:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21c557:	00 
  21c558:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  21c55f:	00 
  21c560:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21c567:	00 
  21c568:	48 8d 35 b9 ca 01 00 	lea    0x1cab9(%rip),%rsi        # 239028 <memcmp+0x2a78>
  21c56f:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  21c575:	4c 89 c2             	mov    %r8,%rdx
  21c578:	e8 43 9d fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21c57d:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  21c584:	00 
  21c585:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21c58c:	00 
  21c58d:	48 8d 15 e4 ca 01 00 	lea    0x1cae4(%rip),%rdx        # 239078 <memcmp+0x2ac8>
  21c594:	e8 57 40 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21c599:	e9 d5 fd ff ff       	jmpq   21c373 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE+0xe3>
  21c59e:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21c5a5:	00 
    PCI_DEVICES.lock().push(pci_device);
  21c5a6:	e8 95 fd 00 00       	callq  22c340 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hb304b52f5116a261E>
  21c5ab:	48 89 94 24 78 01 00 	mov    %rdx,0x178(%rsp)
  21c5b2:	00 
  21c5b3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21c5ba:	00 
  21c5bb:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  21c5c2:	00 
  21c5c3:	e8 a8 ff 00 00       	callq  22c570 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3ae5ac151c21364eE>
  21c5c8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21c5cd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  21c5d2:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21c5d9:	00 
  21c5da:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21c5e1:	00 
  21c5e2:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21c5e9:	00 
  21c5ea:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  21c5f1:	00 
  21c5f2:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21c5f9:	00 
  21c5fa:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  21c601:	00 
  21c602:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21c609:	00 
  21c60a:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  21c611:	00 
  21c612:	48 8d b4 24 80 01 00 	lea    0x180(%rsp),%rsi
  21c619:	00 
  21c61a:	e8 d1 4a ff ff       	callq  2110f0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbc3fd10ae9295b41E>
  21c61f:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  21c626:	00 
  21c627:	e8 14 f2 fe ff       	callq  20b840 <_ZN4core3ptr109drop_in_place$LT$spin..mutex..MutexGuard$LT$alloc..vec..Vec$LT$r3_kernel..drivers..pci..PCIDevice$GT$$GT$$GT$17h8235977f861fb9cdE>
}
  21c62c:	48 81 c4 e0 01 00 00 	add    $0x1e0,%rsp
  21c633:	5b                   	pop    %rbx
  21c634:	c3                   	retq   
  21c635:	cc                   	int3   
  21c636:	cc                   	int3   
  21c637:	cc                   	int3   
  21c638:	cc                   	int3   
  21c639:	cc                   	int3   
  21c63a:	cc                   	int3   
  21c63b:	cc                   	int3   
  21c63c:	cc                   	int3   
  21c63d:	cc                   	int3   
  21c63e:	cc                   	int3   
  21c63f:	cc                   	int3   

000000000021c640 <_ZN9r3_kernel7drivers3pci14detect_devices17hf40cc5a295e67b37E>:

pub fn detect_devices() {
  21c640:	50                   	push   %rax
    PCIDeviceProber::probe(on_device_callback);
  21c641:	48 8d 3d 48 fc ff ff 	lea    -0x3b8(%rip),%rdi        # 21c290 <_ZN9r3_kernel7drivers3pci18on_device_callback17hb1381431a000f8fdE>
  21c648:	e8 23 f9 ff ff       	callq  21bf70 <_ZN9r3_kernel7drivers3pci15PCIDeviceProber5probe17h3a76b4e9756d159aE>
}
  21c64d:	58                   	pop    %rax
  21c64e:	c3                   	retq   
  21c64f:	cc                   	int3   

000000000021c650 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1680ab5b43fd2a39E>:
            fn deref(&self) -> &$T {
  21c650:	48 83 ec 18          	sub    $0x18,%rsp
  21c654:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c659:	48 8d 05 e0 56 02 00 	lea    0x256e0(%rip),%rax        # 241d40 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb4570fa13371976aE>
  21c660:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c665:	48 8d 3d d4 56 02 00 	lea    0x256d4(%rip),%rdi        # 241d40 <_ZN80_$LT$r3_kernel..drivers..pci..PCI_DEVICES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hb4570fa13371976aE>
  21c66c:	e8 8f bf fe ff       	callq  208600 <_ZN4spin4once13Once$LT$T$GT$9call_once17h20238029b864797dE>
  21c671:	48 89 04 24          	mov    %rax,(%rsp)
  21c675:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21c679:	48 83 c4 18          	add    $0x18,%rsp
  21c67d:	c3                   	retq   
  21c67e:	cc                   	int3   
  21c67f:	cc                   	int3   

000000000021c680 <_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h16fc3b88bb1d607fE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A, B> PartialEq<[B]> for [A]
where
    A: PartialEq<B>,
{
    fn eq(&self, other: &[B]) -> bool {
  21c680:	48 83 ec 28          	sub    $0x28,%rsp
  21c684:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c689:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21c68e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21c693:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
        SlicePartialEq::equal(self, other)
  21c698:	e8 13 00 00 00       	callq  21c6b0 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E>
  21c69d:	88 44 24 07          	mov    %al,0x7(%rsp)
  21c6a1:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  21c6a5:	24 01                	and    $0x1,%al
  21c6a7:	0f b6 c0             	movzbl %al,%eax
  21c6aa:	48 83 c4 28          	add    $0x28,%rsp
  21c6ae:	c3                   	retq   
  21c6af:	cc                   	int3   

000000000021c6b0 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E>:
// Use memcmp for bytewise equality when the types allow
impl<A, B> SlicePartialEq<B> for [A]
where
    A: BytewiseEquality<B>,
{
    fn equal(&self, other: &[B]) -> bool {
  21c6b0:	48 83 ec 78          	sub    $0x78,%rsp
  21c6b4:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  21c6b9:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21c6be:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21c6c3:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21c6c8:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  21c6cd:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
  21c6d2:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21c6d7:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        if self.len() != other.len() {
  21c6dc:	48 39 ce             	cmp    %rcx,%rsi
  21c6df:	75 1b                	jne    21c6fc <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x4c>
  21c6e1:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21c6e6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        }

        // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
        // The two slices have been checked to have the same size above.
        unsafe {
            let size = mem::size_of_val(self);
  21c6eb:	e8 90 2f ff ff       	callq  20f680 <_ZN4core3mem11size_of_val17h492ca49025244003E>
  21c6f0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c6f5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c6fa:	eb 13                	jmp    21c70f <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x5f>
            return false;
  21c6fc:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
            memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
        }
    }
  21c701:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  21c705:	24 01                	and    $0x1,%al
  21c707:	0f b6 c0             	movzbl %al,%eax
  21c70a:	48 83 c4 78          	add    $0x78,%rsp
  21c70e:	c3                   	retq   
  21c70f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21c714:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
  21c719:	e8 62 45 01 00       	callq  230c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21c71e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c723:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21c728:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21c72d:	e8 4e 45 01 00       	callq  230c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21c732:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c737:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21c73c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21c741:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21c746:	e8 65 9e 01 00       	callq  2365b0 <memcmp>
  21c74b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  21c74f:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  21c753:	83 f8 00             	cmp    $0x0,%eax
  21c756:	0f 94 c0             	sete   %al
  21c759:	24 01                	and    $0x1,%al
  21c75b:	88 44 24 4f          	mov    %al,0x4f(%rsp)
    }
  21c75f:	eb a0                	jmp    21c701 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h4592f88176d4c022E+0x51>
  21c761:	cc                   	int3   
  21c762:	cc                   	int3   
  21c763:	cc                   	int3   
  21c764:	cc                   	int3   
  21c765:	cc                   	int3   
  21c766:	cc                   	int3   
  21c767:	cc                   	int3   
  21c768:	cc                   	int3   
  21c769:	cc                   	int3   
  21c76a:	cc                   	int3   
  21c76b:	cc                   	int3   
  21c76c:	cc                   	int3   
  21c76d:	cc                   	int3   
  21c76e:	cc                   	int3   
  21c76f:	cc                   	int3   

000000000021c770 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb9bbc8b08964feefE>:
  21c770:	48 83 ec 18          	sub    $0x18,%rsp
  21c774:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21c779:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21c77e:	48 8b 3f             	mov    (%rdi),%rdi
  21c781:	e8 ea 72 01 00       	callq  233a70 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>
  21c786:	88 44 24 07          	mov    %al,0x7(%rsp)
  21c78a:	8a 44 24 07          	mov    0x7(%rsp),%al
  21c78e:	24 01                	and    $0x1,%al
  21c790:	0f b6 c0             	movzbl %al,%eax
  21c793:	48 83 c4 18          	add    $0x18,%rsp
  21c797:	c3                   	retq   
  21c798:	cc                   	int3   
  21c799:	cc                   	int3   
  21c79a:	cc                   	int3   
  21c79b:	cc                   	int3   
  21c79c:	cc                   	int3   
  21c79d:	cc                   	int3   
  21c79e:	cc                   	int3   
  21c79f:	cc                   	int3   

000000000021c7a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  21c7a0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21c7a7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21c7ac:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21c7b1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21c7b6:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21c7bb:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21c7c0:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21c7c5:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21c7ca:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21c7d1:	00 
  21c7d2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21c7d7:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21c7dc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c7e1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21c7e6:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21c7eb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21c7f0:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        unsafe { intrinsics::offset(self, count) as *mut T }
  21c7f5:	48 01 c8             	add    %rcx,%rax
  21c7f8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21c7fd:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21c802:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21c807:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21c80c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21c811:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
  21c816:	48 29 c6             	sub    %rax,%rsi
  21c819:	e8 02 52 01 00       	callq  231a20 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  21c81e:	48 89 04 24          	mov    %rax,(%rsp)
  21c822:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c827:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c82c:	48 8b 04 24          	mov    (%rsp),%rax
        }
    }
  21c830:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21c837:	c3                   	retq   
  21c838:	cc                   	int3   
  21c839:	cc                   	int3   
  21c83a:	cc                   	int3   
  21c83b:	cc                   	int3   
  21c83c:	cc                   	int3   
  21c83d:	cc                   	int3   
  21c83e:	cc                   	int3   
  21c83f:	cc                   	int3   

000000000021c840 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21c840:	48 83 ec 58          	sub    $0x58,%rsp
  21c844:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  21c849:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21c84e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21c853:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21c858:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21c85d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21c862:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  21c867:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21c86c:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        if self.start > self.end {
  21c871:	48 39 f7             	cmp    %rsi,%rdi
  21c874:	77 11                	ja     21c887 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x47>
  21c876:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c87b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
  21c880:	48 39 c8             	cmp    %rcx,%rax
  21c883:	77 3c                	ja     21c8c1 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x81>
  21c885:	eb 16                	jmp    21c89d <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x5d>
  21c887:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21c88c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21c891:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_index_order_fail(self.start, self.end);
  21c896:	e8 c5 6f 01 00       	callq  233860 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  21c89b:	0f 0b                	ud2    
  21c89d:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21c8a2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21c8a7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21c8ac:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  21c8b1:	e8 ea fe ff ff       	callq  21c7a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>
  21c8b6:	48 89 04 24          	mov    %rax,(%rsp)
  21c8ba:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c8bf:	eb 16                	jmp    21c8d7 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E+0x97>
  21c8c1:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21c8c6:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21c8cb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
  21c8d0:	e8 0b 6f 01 00       	callq  2337e0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  21c8d5:	0f 0b                	ud2    
  21c8d7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c8dc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21c8e0:	48 83 c4 58          	add    $0x58,%rsp
  21c8e4:	c3                   	retq   
  21c8e5:	cc                   	int3   
  21c8e6:	cc                   	int3   
  21c8e7:	cc                   	int3   
  21c8e8:	cc                   	int3   
  21c8e9:	cc                   	int3   
  21c8ea:	cc                   	int3   
  21c8eb:	cc                   	int3   
  21c8ec:	cc                   	int3   
  21c8ed:	cc                   	int3   
  21c8ee:	cc                   	int3   
  21c8ef:	cc                   	int3   

000000000021c8f0 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc069e41a2953a9f8E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21c8f0:	48 83 ec 38          	sub    $0x38,%rsp
  21c8f4:	49 89 c8             	mov    %rcx,%r8
  21c8f7:	48 89 d1             	mov    %rdx,%rcx
  21c8fa:	48 89 f2             	mov    %rsi,%rdx
  21c8fd:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21c902:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21c907:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        (0..self.end).index_mut(slice)
  21c90c:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21c913:	00 00 
  21c915:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21c91a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21c91f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21c924:	e8 17 ff ff ff       	callq  21c840 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>
  21c929:	48 89 04 24          	mov    %rax,(%rsp)
  21c92d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c932:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c937:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21c93b:	48 83 c4 38          	add    $0x38,%rsp
  21c93f:	c3                   	retq   

000000000021c940 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h43e174c909a3be07E>:
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..slice.len()).get_unchecked(slice) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  21c940:	48 83 ec 68          	sub    $0x68,%rsp
  21c944:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21c949:	48 89 f0             	mov    %rsi,%rax
  21c94c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21c951:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21c956:	48 89 f8             	mov    %rdi,%rax
  21c959:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21c95e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21c963:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21c968:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  21c96d:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  21c972:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  21c977:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
    /// ```
    #[inline(always)]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
        metadata(self)
  21c97c:	e8 bf 2e ff ff       	callq  20f840 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>
  21c981:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21c986:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21c98b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21c990:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21c995:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
  21c99a:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  21c99f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21c9a4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21c9a9:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21c9ae:	e8 ed fd ff ff       	callq  21c7a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha89cad5b2d78416bE>
  21c9b3:	48 89 04 24          	mov    %rax,(%rsp)
  21c9b7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21c9bc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21c9c1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21c9c5:	48 83 c4 68          	add    $0x68,%rsp
  21c9c9:	c3                   	retq   
  21c9ca:	cc                   	int3   
  21c9cb:	cc                   	int3   
  21c9cc:	cc                   	int3   
  21c9cd:	cc                   	int3   
  21c9ce:	cc                   	int3   
  21c9cf:	cc                   	int3   

000000000021c9d0 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21c9d0:	48 83 ec 48          	sub    $0x48,%rsp
  21c9d4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21c9d9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21c9de:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  21c9e3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21c9e8:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21c9ed:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21c9f2:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
        if self.start > slice.len() {
  21c9f7:	48 39 d7             	cmp    %rdx,%rdi
  21c9fa:	77 1f                	ja     21ca1b <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE+0x4b>
  21c9fc:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21ca01:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21ca06:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  21ca0b:	e8 30 ff ff ff       	callq  21c940 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h43e174c909a3be07E>
  21ca10:	48 89 04 24          	mov    %rax,(%rsp)
  21ca14:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21ca19:	eb 16                	jmp    21ca31 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE+0x61>
  21ca1b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21ca20:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21ca25:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_start_index_len_fail(self.start, slice.len());
  21ca2a:	e8 31 6d 01 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  21ca2f:	0f 0b                	ud2    
  21ca31:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21ca36:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21ca3a:	48 83 c4 48          	add    $0x48,%rsp
  21ca3e:	c3                   	retq   
  21ca3f:	cc                   	int3   

000000000021ca40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h3563331971b07546E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
  21ca40:	48 83 ec 18          	sub    $0x18,%rsp
  21ca44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.spec_next()
  21ca49:	e8 42 00 00 00       	callq  21ca90 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E>
  21ca4e:	48 89 04 24          	mov    %rax,(%rsp)
  21ca52:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21ca57:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21ca5c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21ca60:	48 83 c4 18          	add    $0x18,%rsp
  21ca64:	c3                   	retq   
  21ca65:	cc                   	int3   
  21ca66:	cc                   	int3   
  21ca67:	cc                   	int3   
  21ca68:	cc                   	int3   
  21ca69:	cc                   	int3   
  21ca6a:	cc                   	int3   
  21ca6b:	cc                   	int3   
  21ca6c:	cc                   	int3   
  21ca6d:	cc                   	int3   
  21ca6e:	cc                   	int3   
  21ca6f:	cc                   	int3   

000000000021ca70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf9f4b68fdad260d2E>:
    fn into_iter(self) -> I {
  21ca70:	48 83 ec 10          	sub    $0x10,%rsp
  21ca74:	48 89 f2             	mov    %rsi,%rdx
  21ca77:	48 89 f8             	mov    %rdi,%rax
  21ca7a:	48 89 04 24          	mov    %rax,(%rsp)
  21ca7e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  21ca83:	48 83 c4 10          	add    $0x10,%rsp
  21ca87:	c3                   	retq   
  21ca88:	cc                   	int3   
  21ca89:	cc                   	int3   
  21ca8a:	cc                   	int3   
  21ca8b:	cc                   	int3   
  21ca8c:	cc                   	int3   
  21ca8d:	cc                   	int3   
  21ca8e:	cc                   	int3   
  21ca8f:	cc                   	int3   

000000000021ca90 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E>:
    fn spec_next(&mut self) -> Option<T> {
  21ca90:	48 83 ec 48          	sub    $0x48,%rsp
  21ca94:	48 89 fe             	mov    %rdi,%rsi
  21ca97:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21ca9c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        if self.start < self.end {
  21caa1:	48 89 f7             	mov    %rsi,%rdi
  21caa4:	48 83 c6 08          	add    $0x8,%rsi
  21caa8:	e8 53 a1 00 00       	callq  226c00 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h88ff743f82721c38E>
  21caad:	88 44 24 27          	mov    %al,0x27(%rsp)
  21cab1:	8a 44 24 27          	mov    0x27(%rsp),%al
  21cab5:	a8 01                	test   $0x1,%al
  21cab7:	75 0d                	jne    21cac6 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x36>
  21cab9:	eb 00                	jmp    21cabb <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x2b>
            None
  21cabb:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  21cac2:	00 00 
        if self.start < self.end {
  21cac4:	eb 4d                	jmp    21cb13 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h62662d06a3dcaec2E+0x83>
  21cac6:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
  21cacb:	e8 b0 2a 00 00       	callq  21f580 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>
  21cad0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21cad5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21cada:	be 01 00 00 00       	mov    $0x1,%esi
  21cadf:	e8 0c be 00 00       	callq  2288f0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3f6f4c9db53fef0cE>
  21cae4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21cae9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21caee:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21caf3:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(mem::replace(&mut self.start, n))
  21caf8:	e8 c3 2b ff ff       	callq  20f6c0 <_ZN4core3mem7replace17h71040b40dccb5c97E>
  21cafd:	48 89 04 24          	mov    %rax,(%rsp)
  21cb01:	48 8b 04 24          	mov    (%rsp),%rax
  21cb05:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21cb0a:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  21cb11:	00 00 
    }
  21cb13:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21cb18:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21cb1d:	48 83 c4 48          	add    $0x48,%rsp
  21cb21:	c3                   	retq   
  21cb22:	cc                   	int3   
  21cb23:	cc                   	int3   
  21cb24:	cc                   	int3   
  21cb25:	cc                   	int3   
  21cb26:	cc                   	int3   
  21cb27:	cc                   	int3   
  21cb28:	cc                   	int3   
  21cb29:	cc                   	int3   
  21cb2a:	cc                   	int3   
  21cb2b:	cc                   	int3   
  21cb2c:	cc                   	int3   
  21cb2d:	cc                   	int3   
  21cb2e:	cc                   	int3   
  21cb2f:	cc                   	int3   

000000000021cb30 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h54fdde9cf6df2759E>:
    }
}

#[stable(feature = "collections_range", since = "1.28.0")]
impl<T> RangeBounds<T> for Range<T> {
    fn start_bound(&self) -> Bound<&T> {
  21cb30:	48 83 ec 18          	sub    $0x18,%rsp
  21cb34:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Included(&self.start)
  21cb39:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21cb3e:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  21cb45:	00 
    }
  21cb46:	48 8b 04 24          	mov    (%rsp),%rax
  21cb4a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21cb4f:	48 83 c4 18          	add    $0x18,%rsp
  21cb53:	c3                   	retq   
  21cb54:	cc                   	int3   
  21cb55:	cc                   	int3   
  21cb56:	cc                   	int3   
  21cb57:	cc                   	int3   
  21cb58:	cc                   	int3   
  21cb59:	cc                   	int3   
  21cb5a:	cc                   	int3   
  21cb5b:	cc                   	int3   
  21cb5c:	cc                   	int3   
  21cb5d:	cc                   	int3   
  21cb5e:	cc                   	int3   
  21cb5f:	cc                   	int3   

000000000021cb60 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h0beee5ac9a35870cE>:
    fn end_bound(&self) -> Bound<&T> {
  21cb60:	48 83 ec 18          	sub    $0x18,%rsp
  21cb64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Excluded(&self.end)
  21cb69:	48 83 c7 08          	add    $0x8,%rdi
  21cb6d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21cb72:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  21cb79:	00 
    }
  21cb7a:	48 8b 04 24          	mov    (%rsp),%rax
  21cb7e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21cb83:	48 83 c4 18          	add    $0x18,%rsp
  21cb87:	c3                   	retq   
  21cb88:	cc                   	int3   
  21cb89:	cc                   	int3   
  21cb8a:	cc                   	int3   
  21cb8b:	cc                   	int3   
  21cb8c:	cc                   	int3   
  21cb8d:	cc                   	int3   
  21cb8e:	cc                   	int3   
  21cb8f:	cc                   	int3   

000000000021cb90 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h52318d6ef1667890E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  21cb90:	48 83 ec 18          	sub    $0x18,%rsp
  21cb94:	48 89 f2             	mov    %rsi,%rdx
  21cb97:	48 89 f8             	mov    %rdi,%rax
  21cb9a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21cb9f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        slice
    }
  21cba4:	48 83 c4 18          	add    $0x18,%rsp
  21cba8:	c3                   	retq   
  21cba9:	cc                   	int3   
  21cbaa:	cc                   	int3   
  21cbab:	cc                   	int3   
  21cbac:	cc                   	int3   
  21cbad:	cc                   	int3   
  21cbae:	cc                   	int3   
  21cbaf:	cc                   	int3   

000000000021cbb0 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17ha615725661672da8E>:
    reason = "Uncertain how much info should be exposed",
    issue = "48043"
)]
impl From<TryReserveErrorKind> for TryReserveError {
    #[inline]
    fn from(kind: TryReserveErrorKind) -> Self {
  21cbb0:	48 83 ec 20          	sub    $0x20,%rsp
  21cbb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21cbb9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Self { kind }
  21cbbe:	48 89 3c 24          	mov    %rdi,(%rsp)
  21cbc2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21cbc7:	48 8b 04 24          	mov    (%rsp),%rax
  21cbcb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21cbd0:	48 83 c4 20          	add    $0x20,%rsp
  21cbd4:	c3                   	retq   
  21cbd5:	cc                   	int3   
  21cbd6:	cc                   	int3   
  21cbd7:	cc                   	int3   
  21cbd8:	cc                   	int3   
  21cbd9:	cc                   	int3   
  21cbda:	cc                   	int3   
  21cbdb:	cc                   	int3   
  21cbdc:	cc                   	int3   
  21cbdd:	cc                   	int3   
  21cbde:	cc                   	int3   
  21cbdf:	cc                   	int3   

000000000021cbe0 <_ZN5alloc11collections15TryReserveError4kind17h258eb8c8c0660a86E>:
    pub fn kind(&self) -> TryReserveErrorKind {
  21cbe0:	48 83 ec 18          	sub    $0x18,%rsp
  21cbe4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.kind.clone()
  21cbe9:	e8 22 00 00 00       	callq  21cc10 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE>
  21cbee:	48 89 04 24          	mov    %rax,(%rsp)
  21cbf2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21cbf7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21cbfc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21cc00:	48 83 c4 18          	add    $0x18,%rsp
  21cc04:	c3                   	retq   
  21cc05:	cc                   	int3   
  21cc06:	cc                   	int3   
  21cc07:	cc                   	int3   
  21cc08:	cc                   	int3   
  21cc09:	cc                   	int3   
  21cc0a:	cc                   	int3   
  21cc0b:	cc                   	int3   
  21cc0c:	cc                   	int3   
  21cc0d:	cc                   	int3   
  21cc0e:	cc                   	int3   
  21cc0f:	cc                   	int3   

000000000021cc10 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE>:
#[derive(Clone, PartialEq, Eq, Debug)]
  21cc10:	48 83 ec 48          	sub    $0x48,%rsp
  21cc14:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21cc19:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21cc1e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21cc23:	48 8b 40 08          	mov    0x8(%rax),%rax
  21cc27:	48 85 c0             	test   %rax,%rax
  21cc2a:	0f 95 c0             	setne  %al
  21cc2d:	0f b6 c0             	movzbl %al,%eax
  21cc30:	74 06                	je     21cc38 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x28>
  21cc32:	eb 00                	jmp    21cc34 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x24>
  21cc34:	eb 0d                	jmp    21cc43 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x33>
  21cc36:	0f 0b                	ud2    
  21cc38:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  21cc3f:	00 00 
  21cc41:	eb 44                	jmp    21cc87 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17h8994943a72bdf3eaE+0x77>
        layout: Layout,
  21cc43:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21cc48:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
        non_exhaustive: (),
  21cc4d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21cc52:	48 89 04 24          	mov    %rax,(%rsp)
  21cc56:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        layout: Layout,
  21cc5b:	e8 f0 d9 ff ff       	callq  21a650 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17hcf873c6950f0943fE>
  21cc60:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21cc65:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21cc6a:	48 8b 3c 24          	mov    (%rsp),%rdi
        non_exhaustive: (),
  21cc6e:	e8 ed ee fe ff       	callq  20bb60 <_ZN4core5clone5Clone5clone17h3340d57e31d9f28aE>
  21cc73:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21cc78:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
#[derive(Clone, PartialEq, Eq, Debug)]
  21cc7d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21cc82:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21cc87:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21cc8c:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21cc91:	48 83 c4 48          	add    $0x48,%rsp
  21cc95:	c3                   	retq   
  21cc96:	cc                   	int3   
  21cc97:	cc                   	int3   
  21cc98:	cc                   	int3   
  21cc99:	cc                   	int3   
  21cc9a:	cc                   	int3   
  21cc9b:	cc                   	int3   
  21cc9c:	cc                   	int3   
  21cc9d:	cc                   	int3   
  21cc9e:	cc                   	int3   
  21cc9f:	cc                   	int3   

000000000021cca0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hd22a39966f984ff5E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
  21cca0:	48 83 ec 10          	sub    $0x10,%rsp
  21cca4:	48 89 f8             	mov    %rdi,%rax
  21cca7:	48 89 04 24          	mov    %rax,(%rsp)
  21ccab:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21ccb0:	48 83 c4 10          	add    $0x10,%rsp
  21ccb4:	c3                   	retq   
  21ccb5:	cc                   	int3   
  21ccb6:	cc                   	int3   
  21ccb7:	cc                   	int3   
  21ccb8:	cc                   	int3   
  21ccb9:	cc                   	int3   
  21ccba:	cc                   	int3   
  21ccbb:	cc                   	int3   
  21ccbc:	cc                   	int3   
  21ccbd:	cc                   	int3   
  21ccbe:	cc                   	int3   
  21ccbf:	cc                   	int3   

000000000021ccc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E>:
    ///
    /// [`clone_from_slice`]: slice::clone_from_slice
    /// [`split_at_mut`]: slice::split_at_mut
    #[doc(alias = "memcpy")]
    #[stable(feature = "copy_from_slice", since = "1.9.0")]
    pub fn copy_from_slice(&mut self, src: &[T])
  21ccc0:	48 83 ec 58          	sub    $0x58,%rsp
  21ccc4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21ccc9:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21ccce:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21ccd3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21ccd8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21ccdd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  21cce2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21cce7:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
                "source slice length ({}) does not match destination slice length ({})",
                src_len, dst_len,
            );
        }

        if self.len() != src.len() {
  21ccec:	48 39 ce             	cmp    %rcx,%rsi
  21ccef:	75 16                	jne    21cd07 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E+0x47>
  21ccf1:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21ccf6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi

        // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        // checked to have the same length. The slices cannot overlap because
        // mutable references are exclusive.
        unsafe {
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
  21ccfb:	e8 80 3f 01 00       	callq  230c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  21cd00:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21cd05:	eb 18                	jmp    21cd1f <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E+0x5f>
  21cd07:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21cd0c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            len_mismatch_fail(self.len(), src.len());
  21cd11:	48 8d 15 98 c3 01 00 	lea    0x1c398(%rip),%rdx        # 2390b0 <memcmp+0x2b00>
  21cd18:	e8 c3 6c 01 00       	callq  2339e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h92a18e41e7a79e49E>
  21cd1d:	0f 0b                	ud2    
  21cd1f:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21cd24:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
  21cd29:	e8 72 ff ff ff       	callq  21cca0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hd22a39966f984ff5E>
  21cd2e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21cd33:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21cd38:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21cd3d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21cd42:	e8 99 ba 00 00       	callq  2287e0 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
        }
    }
  21cd47:	48 83 c4 58          	add    $0x58,%rsp
  21cd4b:	c3                   	retq   
  21cd4c:	cc                   	int3   
  21cd4d:	cc                   	int3   
  21cd4e:	cc                   	int3   
  21cd4f:	cc                   	int3   

000000000021cd50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd1f0389311dd9dccE>:
    pub const fn as_ptr(&self) -> *const T {
  21cd50:	48 83 ec 10          	sub    $0x10,%rsp
  21cd54:	48 89 f8             	mov    %rdi,%rax
  21cd57:	48 89 04 24          	mov    %rax,(%rsp)
  21cd5b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  21cd60:	48 83 c4 10          	add    $0x10,%rsp
  21cd64:	c3                   	retq   
  21cd65:	cc                   	int3   
  21cd66:	cc                   	int3   
  21cd67:	cc                   	int3   
  21cd68:	cc                   	int3   
  21cd69:	cc                   	int3   
  21cd6a:	cc                   	int3   
  21cd6b:	cc                   	int3   
  21cd6c:	cc                   	int3   
  21cd6d:	cc                   	int3   
  21cd6e:	cc                   	int3   
  21cd6f:	cc                   	int3   

000000000021cd70 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h5c6e94fe23e826b3E>:
                /// The value must not be zero.
                #[$stability]
                #[$const_new_unchecked_stability]
                #[must_use]
                #[inline]
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
  21cd70:	48 83 ec 10          	sub    $0x10,%rsp
  21cd74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                    // SAFETY: this is guaranteed to be safe by the caller.
                    unsafe { Self(n) }
  21cd79:	48 89 3c 24          	mov    %rdi,(%rsp)
                }
  21cd7d:	48 8b 04 24          	mov    (%rsp),%rax
  21cd81:	48 83 c4 10          	add    $0x10,%rsp
  21cd85:	c3                   	retq   
  21cd86:	cc                   	int3   
  21cd87:	cc                   	int3   
  21cd88:	cc                   	int3   
  21cd89:	cc                   	int3   
  21cd8a:	cc                   	int3   
  21cd8b:	cc                   	int3   
  21cd8c:	cc                   	int3   
  21cd8d:	cc                   	int3   
  21cd8e:	cc                   	int3   
  21cd8f:	cc                   	int3   

000000000021cd90 <_ZN4core3num7nonzero12NonZeroUsize3get17h423dfcaad4de4b60E>:

                /// Returns the value as a primitive type.
                #[$stability]
                #[inline]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                pub const fn get(self) -> $Int {
  21cd90:	50                   	push   %rax
  21cd91:	48 89 f8             	mov    %rdi,%rax
  21cd94:	48 89 04 24          	mov    %rax,(%rsp)
                    self.0
                }
  21cd98:	59                   	pop    %rcx
  21cd99:	c3                   	retq   
  21cd9a:	cc                   	int3   
  21cd9b:	cc                   	int3   
  21cd9c:	cc                   	int3   
  21cd9d:	cc                   	int3   
  21cd9e:	cc                   	int3   
  21cd9f:	cc                   	int3   

000000000021cda0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E>:
    pub fn scroll(fb: &mut MutexGuard<framebuffer::FramebufferMemory>, n_lines: usize) {
  21cda0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  21cda7:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  21cdae:	00 
  21cdaf:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  21cdb6:	00 
  21cdb7:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  21cdbe:	00 
  21cdbf:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  21cdc6:	00 
        let total_bytes = fb.buffer.len();
  21cdc7:	e8 24 f7 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21cdcc:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21cdd3:	00 
  21cdd4:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  21cddb:	00 
  21cddc:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  21cde3:	00 
  21cde4:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  21cde8:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  21cdef:	00 
  21cdf0:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  21cdf7:	00 
        let offset = n_lines * FONT_HEIGHT * fb.width * fb.bytes_per_pixel;
  21cdf8:	b9 10 00 00 00       	mov    $0x10,%ecx
  21cdfd:	48 f7 e1             	mul    %rcx
  21ce00:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  21ce07:	00 
  21ce08:	0f 90 c0             	seto   %al
  21ce0b:	a8 01                	test   $0x1,%al
  21ce0d:	75 17                	jne    21ce26 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x86>
  21ce0f:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21ce16:	00 
  21ce17:	e8 d4 f6 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ce1c:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21ce23:	00 
  21ce24:	eb 1a                	jmp    21ce40 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xa0>
  21ce26:	48 8d 3d 43 58 fe ff 	lea    -0x1a7bd(%rip),%rdi        # 202670 <str.0>
  21ce2d:	48 8d 15 94 c2 01 00 	lea    0x1c294(%rip),%rdx        # 2390c8 <memcmp+0x2b18>
  21ce34:	be 21 00 00 00       	mov    $0x21,%esi
  21ce39:	e8 22 66 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ce3e:	0f 0b                	ud2    
  21ce40:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21ce47:	00 
  21ce48:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21ce4f:	00 
  21ce50:	48 f7 61 10          	mulq   0x10(%rcx)
  21ce54:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21ce5b:	00 
  21ce5c:	0f 90 c0             	seto   %al
  21ce5f:	a8 01                	test   $0x1,%al
  21ce61:	75 17                	jne    21ce7a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xda>
  21ce63:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21ce6a:	00 
  21ce6b:	e8 80 f6 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21ce70:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21ce77:	00 
  21ce78:	eb 1a                	jmp    21ce94 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0xf4>
  21ce7a:	48 8d 3d ef 57 fe ff 	lea    -0x1a811(%rip),%rdi        # 202670 <str.0>
  21ce81:	48 8d 15 40 c2 01 00 	lea    0x1c240(%rip),%rdx        # 2390c8 <memcmp+0x2b18>
  21ce88:	be 21 00 00 00       	mov    $0x21,%esi
  21ce8d:	e8 ce 65 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ce92:	0f 0b                	ud2    
  21ce94:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21ce9b:	00 
  21ce9c:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  21cea3:	00 
  21cea4:	48 f7 61 20          	mulq   0x20(%rcx)
  21cea8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21ceaf:	00 
  21ceb0:	0f 90 c0             	seto   %al
  21ceb3:	a8 01                	test   $0x1,%al
  21ceb5:	75 31                	jne    21cee8 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x148>
  21ceb7:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21cebe:	00 
  21cebf:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  21cec6:	00 
        let offset_slice = framebuffer::FramebufferMemory::get_slice_from(offset);
  21cec7:	e8 c4 7e ff ff       	callq  214d90 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>
  21cecc:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21ced1:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21ced6:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21cedd:	00 
  21cede:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  21cee5:	00 
  21cee6:	eb 1a                	jmp    21cf02 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x162>
        let offset = n_lines * FONT_HEIGHT * fb.width * fb.bytes_per_pixel;
  21cee8:	48 8d 3d 81 57 fe ff 	lea    -0x1a87f(%rip),%rdi        # 202670 <str.0>
  21ceef:	48 8d 15 d2 c1 01 00 	lea    0x1c1d2(%rip),%rdx        # 2390c8 <memcmp+0x2b18>
  21cef6:	be 21 00 00 00       	mov    $0x21,%esi
  21cefb:	e8 60 65 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21cf00:	0f 0b                	ud2    
  21cf02:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21cf09:	00 
  21cf0a:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21cf11:	00 
            framebuffer::FramebufferMemory::get_slice_bounded(0, total_bytes - offset);
  21cf12:	48 29 c8             	sub    %rcx,%rax
  21cf15:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21cf1a:	0f 92 c0             	setb   %al
  21cf1d:	a8 01                	test   $0x1,%al
  21cf1f:	75 2a                	jne    21cf4b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x1ab>
  21cf21:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  21cf26:	31 c0                	xor    %eax,%eax
  21cf28:	89 c7                	mov    %eax,%edi
  21cf2a:	e8 91 7d ff ff       	callq  214cc0 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory17get_slice_bounded17h61905da9efeefdfbE>
  21cf2f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21cf34:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21cf39:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  21cf40:	00 
  21cf41:	48 89 94 24 10 01 00 	mov    %rdx,0x110(%rsp)
  21cf48:	00 
  21cf49:	eb 1a                	jmp    21cf65 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x1c5>
  21cf4b:	48 8d 3d 4e 57 fe ff 	lea    -0x1a8b2(%rip),%rdi        # 2026a0 <str.1>
  21cf52:	48 8d 15 87 c1 01 00 	lea    0x1c187(%rip),%rdx        # 2390e0 <memcmp+0x2b30>
  21cf59:	be 21 00 00 00       	mov    $0x21,%esi
  21cf5e:	e8 fd 64 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21cf63:	0f 0b                	ud2    
  21cf65:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21cf6a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        target_slice.unwrap().copy_from_slice(offset_slice.unwrap());
  21cf6f:	48 8d 15 82 c1 01 00 	lea    0x1c182(%rip),%rdx        # 2390f8 <memcmp+0x2b48>
  21cf76:	e8 c5 34 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21cf7b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21cf80:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21cf85:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  21cf8a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21cf8f:	48 8d 15 7a c1 01 00 	lea    0x1c17a(%rip),%rdx        # 239110 <memcmp+0x2b60>
  21cf96:	e8 a5 34 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21cf9b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21cfa0:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21cfa5:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21cfaa:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21cfaf:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21cfb4:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21cfb9:	e8 02 fd ff ff       	callq  21ccc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hd53624460edcf3f3E>
  21cfbe:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21cfc5:	00 
  21cfc6:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21cfcd:	00 
        let black = framebuffer::Pixel {
  21cfce:	c6 84 24 c8 00 00 00 	movb   $0x0,0xc8(%rsp)
  21cfd5:	00 
  21cfd6:	c6 84 24 c9 00 00 00 	movb   $0x0,0xc9(%rsp)
  21cfdd:	00 
  21cfde:	c6 84 24 ca 00 00 00 	movb   $0x0,0xca(%rsp)
  21cfe5:	00 
  21cfe6:	c6 84 24 cb 00 00 00 	movb   $0x0,0xcb(%rsp)
  21cfed:	00 
        let to_clear_slice = framebuffer::FramebufferMemory::get_slice_from(total_bytes - offset);
  21cfee:	48 29 c8             	sub    %rcx,%rax
  21cff1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21cff6:	0f 92 c0             	setb   %al
  21cff9:	a8 01                	test   $0x1,%al
  21cffb:	75 26                	jne    21d023 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x283>
  21cffd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  21d002:	e8 89 7d ff ff       	callq  214d90 <_ZN9r3_kernel7drivers7display11framebuffer17FramebufferMemory14get_slice_from17h1135a4c5114265d7E>
  21d007:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21d00c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21d011:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  21d018:	00 
  21d019:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  21d020:	00 
  21d021:	eb 1a                	jmp    21d03d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E+0x29d>
  21d023:	48 8d 3d 76 56 fe ff 	lea    -0x1a98a(%rip),%rdi        # 2026a0 <str.1>
  21d02a:	48 8d 15 f7 c0 01 00 	lea    0x1c0f7(%rip),%rdx        # 239128 <memcmp+0x2b78>
  21d031:	be 21 00 00 00       	mov    $0x21,%esi
  21d036:	e8 25 64 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d03b:	0f 0b                	ud2    
  21d03d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  21d042:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        framebuffer::Framebuffer::fill_region(to_clear_slice.unwrap(), black, fb.bytes_per_pixel);
  21d047:	48 8d 15 f2 c0 01 00 	lea    0x1c0f2(%rip),%rdx        # 239140 <memcmp+0x2b90>
  21d04e:	e8 ed 33 ff ff       	callq  210440 <_ZN4core6option15Option$LT$T$GT$6unwrap17he34e106bd79a1dc7E>
  21d053:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d058:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21d05d:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  21d064:	00 
  21d065:	8b 84 24 c8 00 00 00 	mov    0xc8(%rsp),%eax
  21d06c:	89 84 24 d0 00 00 00 	mov    %eax,0xd0(%rsp)
  21d073:	e8 78 f4 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21d078:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21d07d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21d082:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21d087:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21d08c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  21d090:	8b 94 24 d0 00 00 00 	mov    0xd0(%rsp),%edx
  21d097:	e8 b4 82 ff ff       	callq  215350 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer11fill_region17hc4a7b64f1840806cE>
    }
  21d09c:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  21d0a3:	c3                   	retq   
  21d0a4:	cc                   	int3   
  21d0a5:	cc                   	int3   
  21d0a6:	cc                   	int3   
  21d0a7:	cc                   	int3   
  21d0a8:	cc                   	int3   
  21d0a9:	cc                   	int3   
  21d0aa:	cc                   	int3   
  21d0ab:	cc                   	int3   
  21d0ac:	cc                   	int3   
  21d0ad:	cc                   	int3   
  21d0ae:	cc                   	int3   
  21d0af:	cc                   	int3   

000000000021d0b0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE>:
    pub fn print_ascii_char(
  21d0b0:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  21d0b7:	4c 89 4c 24 78       	mov    %r9,0x78(%rsp)
  21d0bc:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
  21d0c3:	00 
  21d0c4:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21d0cb:	00 
  21d0cc:	48 89 f9             	mov    %rdi,%rcx
  21d0cf:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21d0d6:	00 
  21d0d7:	40 88 f0             	mov    %sil,%al
  21d0da:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  21d0e1:	48 8b b4 24 20 01 00 	mov    0x120(%rsp),%rsi
  21d0e8:	00 
  21d0e9:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  21d0f0:	00 
  21d0f1:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  21d0f8:	00 
  21d0f9:	89 94 24 b4 00 00 00 	mov    %edx,0xb4(%rsp)
  21d100:	8b 8c 24 b4 00 00 00 	mov    0xb4(%rsp),%ecx
  21d107:	89 8c 24 b0 00 00 00 	mov    %ecx,0xb0(%rsp)
  21d10e:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  21d115:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  21d11c:	00 
  21d11d:	4c 89 84 24 e8 00 00 	mov    %r8,0xe8(%rsp)
  21d124:	00 
  21d125:	4c 89 8c 24 f0 00 00 	mov    %r9,0xf0(%rsp)
  21d12c:	00 
        let start_y = r_line * FONT_HEIGHT;
  21d12d:	be 10 00 00 00       	mov    $0x10,%esi
  21d132:	e8 99 d3 fe ff       	callq  20a4d0 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>
  21d137:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21d13e:	00 
  21d13f:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21d146:	00 
  21d147:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  21d14e:	00 
        let start_x = c_line * FONT_WIDTH;
  21d14f:	be 09 00 00 00       	mov    $0x9,%esi
  21d154:	e8 77 d3 fe ff       	callq  20a4d0 <_ZN64_$LT$$RF$usize$u20$as$u20$core..ops..arith..Mul$LT$usize$GT$$GT$3mul17h7662de9277506b8eE>
  21d159:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21d15e:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21d165:	00 
        let mut j = 0;
  21d166:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
  21d16d:	00 00 00 00 00 
        let mut i = 0;
  21d172:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21d179:	00 00 00 00 00 
  21d17e:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21d185:	00 
                y: start_y + i,
  21d186:	48 03 84 24 c0 00 00 	add    0xc0(%rsp),%rax
  21d18d:	00 
  21d18e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21d193:	0f 92 c0             	setb   %al
  21d196:	a8 01                	test   $0x1,%al
  21d198:	75 1b                	jne    21d1b5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x105>
  21d19a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                x: start_x + j,
  21d19f:	48 03 84 24 b8 00 00 	add    0xb8(%rsp),%rax
  21d1a6:	00 
  21d1a7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21d1ac:	0f 92 c0             	setb   %al
  21d1af:	a8 01                	test   $0x1,%al
  21d1b1:	75 4a                	jne    21d1fd <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x14d>
  21d1b3:	eb 1a                	jmp    21d1cf <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x11f>
                y: start_y + i,
  21d1b5:	48 8d 3d 14 55 fe ff 	lea    -0x1aaec(%rip),%rdi        # 2026d0 <str.2>
  21d1bc:	48 8d 15 95 bf 01 00 	lea    0x1bf95(%rip),%rdx        # 239158 <memcmp+0x2ba8>
  21d1c3:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d1c8:	e8 93 62 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d1cd:	0f 0b                	ud2    
  21d1cf:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21d1d4:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            let index = framebuffer::FramebufferIndex {
  21d1d9:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  21d1e0:	00 
  21d1e1:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21d1e8:	00 
            if framebuffer::Framebuffer::index_in_bounds(&fb, &index) {
  21d1e9:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21d1f0:	00 
  21d1f1:	e8 fa f2 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21d1f6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21d1fb:	eb 1a                	jmp    21d217 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x167>
                x: start_x + j,
  21d1fd:	48 8d 3d cc 54 fe ff 	lea    -0x1ab34(%rip),%rdi        # 2026d0 <str.2>
  21d204:	48 8d 15 65 bf 01 00 	lea    0x1bf65(%rip),%rdx        # 239170 <memcmp+0x2bc0>
  21d20b:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d210:	e8 4b 62 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d215:	0f 0b                	ud2    
  21d217:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
            if framebuffer::Framebuffer::index_in_bounds(&fb, &index) {
  21d21c:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  21d223:	00 
  21d224:	e8 07 7d ff ff       	callq  214f30 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15index_in_bounds17he1b176c2708c6ab3E>
  21d229:	88 44 24 57          	mov    %al,0x57(%rsp)
  21d22d:	8a 44 24 57          	mov    0x57(%rsp),%al
  21d231:	a8 01                	test   $0x1,%al
  21d233:	75 05                	jne    21d23a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x18a>
  21d235:	e9 44 ff ff ff       	jmpq   21d17e <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
                if j >= 1 {
  21d23a:	48 83 bc 24 b8 00 00 	cmpq   $0x1,0xb8(%rsp)
  21d241:	00 01 
  21d243:	73 21                	jae    21d266 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x1b6>
                j = j + 1;
  21d245:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21d24c:	00 
  21d24d:	48 83 c0 01          	add    $0x1,%rax
  21d251:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21d256:	0f 92 c0             	setb   %al
  21d259:	a8 01                	test   $0x1,%al
  21d25b:	0f 85 4d 01 00 00    	jne    21d3ae <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x2fe>
  21d261:	e9 2e 01 00 00       	jmpq   21d394 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x2e4>
                    let idx = j - 1;
  21d266:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21d26d:	00 
  21d26e:	48 83 e8 01          	sub    $0x1,%rax
  21d272:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21d277:	0f 92 c0             	setb   %al
  21d27a:	a8 01                	test   $0x1,%al
  21d27c:	75 2b                	jne    21d2a9 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x1f9>
  21d27e:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  21d285:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21d28a:	48 89 8c 24 08 01 00 	mov    %rcx,0x108(%rsp)
  21d291:	00 
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21d292:	0f b6 c0             	movzbl %al,%eax
  21d295:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21d29a:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  21d2a0:	0f 92 c0             	setb   %al
  21d2a3:	a8 01                	test   $0x1,%al
  21d2a5:	75 1c                	jne    21d2c3 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x213>
  21d2a7:	eb 34                	jmp    21d2dd <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x22d>
                    let idx = j - 1;
  21d2a9:	48 8d 3d f0 53 fe ff 	lea    -0x1ac10(%rip),%rdi        # 2026a0 <str.1>
  21d2b0:	48 8d 15 d1 be 01 00 	lea    0x1bed1(%rip),%rdx        # 239188 <memcmp+0x2bd8>
  21d2b7:	be 21 00 00 00       	mov    $0x21,%esi
  21d2bc:	e8 9f 61 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d2c1:	0f 0b                	ud2    
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21d2c3:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d2ca:	00 
  21d2cb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21d2d0:	48 83 f8 10          	cmp    $0x10,%rax
  21d2d4:	0f 92 c0             	setb   %al
  21d2d7:	a8 01                	test   $0x1,%al
  21d2d9:	75 1a                	jne    21d2f5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x245>
  21d2db:	eb 4d                	jmp    21d32a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x27a>
  21d2dd:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  21d2e2:	48 8d 15 b7 be 01 00 	lea    0x1beb7(%rip),%rdx        # 2391a0 <memcmp+0x2bf0>
  21d2e9:	be 00 01 00 00       	mov    $0x100,%esi
  21d2ee:	e8 bd 61 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21d2f3:	0f 0b                	ud2    
  21d2f5:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  21d2fa:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21d2ff:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  21d304:	48 8d 05 b0 40 fe ff 	lea    -0x1bf50(%rip),%rax        # 2013bb <_ZN9r3_kernel7drivers7display4font15LINUX_BOOT_FONT17hb53ab4f3a14dab7bE>
  21d30b:	48 c1 e2 04          	shl    $0x4,%rdx
  21d30f:	48 01 d0             	add    %rdx,%rax
  21d312:	8a 04 08             	mov    (%rax,%rcx,1),%al
  21d315:	88 84 24 17 01 00 00 	mov    %al,0x117(%rsp)
                    if get_bit_for_char(char_font, idx) != 0 {
  21d31c:	0f b6 f8             	movzbl %al,%edi
  21d31f:	e8 6c d3 ff ff       	callq  21a690 <_ZN9r3_kernel7drivers7display4font16get_bit_for_char17h8e2ece95e4971860E>
  21d324:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21d328:	eb 18                	jmp    21d342 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x292>
  21d32a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    let char_font = LINUX_BOOT_FONT[ch as usize][i];
  21d32f:	48 8d 15 6a be 01 00 	lea    0x1be6a(%rip),%rdx        # 2391a0 <memcmp+0x2bf0>
  21d336:	be 10 00 00 00       	mov    $0x10,%esi
  21d33b:	e8 70 61 01 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  21d340:	0f 0b                	ud2    
  21d342:	8a 44 24 2f          	mov    0x2f(%rsp),%al
                    if get_bit_for_char(char_font, idx) != 0 {
  21d346:	3c 00                	cmp    $0x0,%al
  21d348:	0f 84 f7 fe ff ff    	je     21d245 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x195>
                        framebuffer::Framebuffer::set_pixel(fb, color, index);
  21d34e:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21d355:	00 
  21d356:	e8 35 f2 00 00       	callq  22c590 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>
  21d35b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21d360:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21d365:	8b 84 24 b0 00 00 00 	mov    0xb0(%rsp),%eax
  21d36c:	89 84 24 d8 00 00 00 	mov    %eax,0xd8(%rsp)
  21d373:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  21d37a:	00 
  21d37b:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  21d382:	00 
  21d383:	8b b4 24 d8 00 00 00 	mov    0xd8(%rsp),%esi
  21d38a:	e8 f1 7c ff ff       	callq  215080 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer9set_pixel17hab0a95cbad4d8dfcE>
  21d38f:	e9 b1 fe ff ff       	jmpq   21d245 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x195>
  21d394:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                j = j + 1;
  21d399:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21d3a0:	00 
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21d3a1:	48 83 bc 24 b8 00 00 	cmpq   $0x9,0xb8(%rsp)
  21d3a8:	00 09 
  21d3aa:	74 37                	je     21d3e3 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x333>
  21d3ac:	eb 1a                	jmp    21d3c8 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x318>
                j = j + 1;
  21d3ae:	48 8d 3d 1b 53 fe ff 	lea    -0x1ace5(%rip),%rdi        # 2026d0 <str.2>
  21d3b5:	48 8d 15 fc bd 01 00 	lea    0x1bdfc(%rip),%rdx        # 2391b8 <memcmp+0x2c08>
  21d3bc:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d3c1:	e8 9a 60 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d3c6:	0f 0b                	ud2    
  21d3c8:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21d3cd:	48 03 84 24 b8 00 00 	add    0xb8(%rsp),%rax
  21d3d4:	00 
  21d3d5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21d3da:	0f 92 c0             	setb   %al
  21d3dd:	a8 01                	test   $0x1,%al
  21d3df:	75 34                	jne    21d415 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x365>
  21d3e1:	eb 17                	jmp    21d3fa <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x34a>
  21d3e3:	c6 84 24 dd 00 00 00 	movb   $0x1,0xdd(%rsp)
  21d3ea:	01 
  21d3eb:	f6 84 24 dd 00 00 00 	testb  $0x1,0xdd(%rsp)
  21d3f2:	01 
  21d3f3:	75 3a                	jne    21d42f <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x37f>
  21d3f5:	e9 84 fd ff ff       	jmpq   21d17e <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
  21d3fa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21d3ff:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  21d404:	48 39 c8             	cmp    %rcx,%rax
  21d407:	0f 94 c0             	sete   %al
  21d40a:	24 01                	and    $0x1,%al
  21d40c:	88 84 24 dd 00 00 00 	mov    %al,0xdd(%rsp)
  21d413:	eb d6                	jmp    21d3eb <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x33b>
  21d415:	48 8d 3d b4 52 fe ff 	lea    -0x1ad4c(%rip),%rdi        # 2026d0 <str.2>
  21d41c:	48 8d 15 ad bd 01 00 	lea    0x1bdad(%rip),%rdx        # 2391d0 <memcmp+0x2c20>
  21d423:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d428:	e8 33 60 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d42d:	0f 0b                	ud2    
                    i = i + 1;
  21d42f:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d436:	00 
  21d437:	48 83 c0 01          	add    $0x1,%rax
  21d43b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d440:	0f 92 c0             	setb   %al
  21d443:	a8 01                	test   $0x1,%al
  21d445:	75 1a                	jne    21d461 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3b1>
  21d447:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d44c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21d453:	00 
                    if i == FONT_HEIGHT || start_y + i == buffer_height {
  21d454:	48 83 bc 24 c0 00 00 	cmpq   $0x10,0xc0(%rsp)
  21d45b:	00 10 
  21d45d:	74 3a                	je     21d499 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3e9>
  21d45f:	eb 1a                	jmp    21d47b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3cb>
                    i = i + 1;
  21d461:	48 8d 3d 68 52 fe ff 	lea    -0x1ad98(%rip),%rdi        # 2026d0 <str.2>
  21d468:	48 8d 15 79 bd 01 00 	lea    0x1bd79(%rip),%rdx        # 2391e8 <memcmp+0x2c38>
  21d46f:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d474:	e8 e7 5f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d479:	0f 0b                	ud2    
  21d47b:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  21d482:	00 
                    if i == FONT_HEIGHT || start_y + i == buffer_height {
  21d483:	48 03 84 24 c0 00 00 	add    0xc0(%rsp),%rax
  21d48a:	00 
  21d48b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21d490:	0f 92 c0             	setb   %al
  21d493:	a8 01                	test   $0x1,%al
  21d495:	75 34                	jne    21d4cb <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x41b>
  21d497:	eb 14                	jmp    21d4ad <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3fd>
  21d499:	c6 84 24 de 00 00 00 	movb   $0x1,0xde(%rsp)
  21d4a0:	01 
  21d4a1:	f6 84 24 de 00 00 00 	testb  $0x1,0xde(%rsp)
  21d4a8:	01 
  21d4a9:	75 4b                	jne    21d4f6 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x446>
  21d4ab:	eb 38                	jmp    21d4e5 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x435>
  21d4ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21d4b2:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  21d4b9:	00 
  21d4ba:	48 39 c8             	cmp    %rcx,%rax
  21d4bd:	0f 94 c0             	sete   %al
  21d4c0:	24 01                	and    $0x1,%al
  21d4c2:	88 84 24 de 00 00 00 	mov    %al,0xde(%rsp)
  21d4c9:	eb d6                	jmp    21d4a1 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0x3f1>
  21d4cb:	48 8d 3d fe 51 fe ff 	lea    -0x1ae02(%rip),%rdi        # 2026d0 <str.2>
  21d4d2:	48 8d 15 27 bd 01 00 	lea    0x1bd27(%rip),%rdx        # 239200 <memcmp+0x2c50>
  21d4d9:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d4de:	e8 7d 5f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d4e3:	0f 0b                	ud2    
                    j = 0;
  21d4e5:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
  21d4ec:	00 00 00 00 00 
                if j == FONT_WIDTH || start_x + j == buffer_width {
  21d4f1:	e9 88 fc ff ff       	jmpq   21d17e <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE+0xce>
    }
  21d4f6:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  21d4fd:	c3                   	retq   
  21d4fe:	cc                   	int3   
  21d4ff:	cc                   	int3   

000000000021d500 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E>:
    pub fn print_string(
  21d500:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  21d507:	4c 89 44 24 78       	mov    %r8,0x78(%rsp)
  21d50c:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  21d513:	00 
  21d514:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  21d51b:	00 
  21d51c:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  21d523:	00 
  21d524:	89 8c 24 a4 00 00 00 	mov    %ecx,0xa4(%rsp)
  21d52b:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
  21d532:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
  21d539:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  21d540:	00 
  21d541:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
  21d548:	00 
  21d549:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  21d550:	00 
  21d551:	4c 89 84 24 08 01 00 	mov    %r8,0x108(%rsp)
  21d558:	00 
        let n_rows = fb.height / FONT_HEIGHT;
  21d559:	e8 92 ef 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21d55e:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21d565:	00 
  21d566:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21d56d:	00 
  21d56e:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21d575:	00 
  21d576:	48 8b 40 18          	mov    0x18(%rax),%rax
  21d57a:	48 c1 e8 04          	shr    $0x4,%rax
  21d57e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21d583:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  21d58a:	00 
        let n_cols = fb.width / FONT_WIDTH;
  21d58b:	e8 60 ef 00 00       	callq  22c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>
  21d590:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21d595:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21d59c:	00 
  21d59d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21d5a2:	48 8b 40 10          	mov    0x10(%rax),%rax
  21d5a6:	48 ba 8f e3 38 8e e3 	movabs $0xe38e38e38e38e38f,%rdx
  21d5ad:	38 8e e3 
  21d5b0:	48 f7 e2             	mul    %rdx
  21d5b3:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21d5ba:	00 
  21d5bb:	48 89 d6             	mov    %rdx,%rsi
  21d5be:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  21d5c3:	48 c1 ee 03          	shr    $0x3,%rsi
  21d5c7:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  21d5cc:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  21d5d3:	00 
        let mut c_row = pos.row_line;
  21d5d4:	48 8b 32             	mov    (%rdx),%rsi
  21d5d7:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
  21d5de:	00 
        let mut c_col = pos.col_line;
  21d5df:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  21d5e3:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  21d5ea:	00 
  21d5eb:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  21d5f2:	00 
  21d5f3:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21d5fa:	00 
        unsafe { mem::transmute(self) }
  21d5fb:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  21d602:	00 
  21d603:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  21d60a:	00 
  21d60b:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  21d612:	00 
  21d613:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21d618:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  21d61f:	00 
  21d620:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21d625:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21d62a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
        for ch in string.as_bytes() {
  21d62f:	e8 dc bd ff ff       	callq  219410 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h67d170e4f81cc63cE>
  21d634:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21d639:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  21d63e:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21d643:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21d648:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  21d64f:	00 
  21d650:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  21d657:	00 
  21d658:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21d65f:	00 
  21d660:	e8 3b bf ff ff       	callq  2195a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h34e5041decbbc678E>
  21d665:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21d66c:	00 
  21d66d:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  21d674:	00 
  21d675:	48 85 c0             	test   %rax,%rax
  21d678:	0f 95 c0             	setne  %al
  21d67b:	0f b6 c0             	movzbl %al,%eax
  21d67e:	74 06                	je     21d686 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x186>
  21d680:	eb 00                	jmp    21d682 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x182>
  21d682:	eb 3a                	jmp    21d6be <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x1be>
  21d684:	0f 0b                	ud2    
            row_line: c_row,
  21d686:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  21d68d:	00 
            col_line: c_col,
  21d68e:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d695:	00 
        FramebufferLines {
  21d696:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  21d69d:	00 
  21d69e:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21d6a5:	00 
    }
  21d6a6:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  21d6ad:	00 
  21d6ae:	48 8b 94 24 b0 00 00 	mov    0xb0(%rsp),%rdx
  21d6b5:	00 
  21d6b6:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  21d6bd:	c3                   	retq   
        for ch in string.as_bytes() {
  21d6be:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  21d6c5:	00 
  21d6c6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21d6cb:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  21d6d2:	00 
  21d6d3:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  21d6da:	00 
  21d6db:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  21d6e2:	00 
            if *ch <= 0x20 && *ch >= 0x7e {
  21d6e3:	80 38 20             	cmpb   $0x20,(%rax)
  21d6e6:	76 0a                	jbe    21d6f2 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x1f2>
  21d6e8:	c6 84 24 e7 00 00 00 	movb   $0x0,0xe7(%rsp)
  21d6ef:	00 
  21d6f0:	eb 14                	jmp    21d706 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x206>
  21d6f2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21d6f7:	80 38 7e             	cmpb   $0x7e,(%rax)
  21d6fa:	0f 93 c0             	setae  %al
  21d6fd:	24 01                	and    $0x1,%al
  21d6ff:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
  21d706:	f6 84 24 e7 00 00 00 	testb  $0x1,0xe7(%rsp)
  21d70d:	01 
  21d70e:	0f 85 44 ff ff ff    	jne    21d658 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
  21d714:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            if *ch == b'\n' {
  21d719:	80 38 0a             	cmpb   $0xa,(%rax)
  21d71c:	75 2d                	jne    21d74b <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x24b>
                c_col = 0;
  21d71e:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21d725:	00 00 00 00 00 
                c_row += 1;
  21d72a:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21d731:	00 
  21d732:	48 83 c0 01          	add    $0x1,%rax
  21d736:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21d73b:	0f 92 c0             	setb   %al
  21d73e:	a8 01                	test   $0x1,%al
  21d740:	0f 85 d3 01 00 00    	jne    21d919 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x419>
  21d746:	e9 bc 01 00 00       	jmpq   21d907 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x407>
  21d74b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            } else if *ch == b'\t' {
  21d750:	80 38 09             	cmpb   $0x9,(%rax)
  21d753:	75 21                	jne    21d776 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x276>
                c_col = c_col + 4;
  21d755:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d75c:	00 
  21d75d:	48 83 c0 04          	add    $0x4,%rax
  21d761:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21d766:	0f 92 c0             	setb   %al
  21d769:	a8 01                	test   $0x1,%al
  21d76b:	0f 85 7c 01 00 00    	jne    21d8ed <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3ed>
  21d771:	e9 65 01 00 00       	jmpq   21d8db <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3db>
  21d776:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
                if c_col >= n_cols {
  21d77b:	48 39 84 24 c0 00 00 	cmp    %rax,0xc0(%rsp)
  21d782:	00 
  21d783:	73 15                	jae    21d79a <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x29a>
  21d785:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
                if c_row >= n_rows {
  21d78a:	48 39 84 24 b8 00 00 	cmp    %rax,0xb8(%rsp)
  21d791:	00 
  21d792:	0f 83 9d 00 00 00    	jae    21d835 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x335>
  21d798:	eb 4d                	jmp    21d7e7 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2e7>
                    c_row = c_row + 1;
  21d79a:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21d7a1:	00 
  21d7a2:	48 83 c0 01          	add    $0x1,%rax
  21d7a6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21d7ab:	0f 92 c0             	setb   %al
  21d7ae:	a8 01                	test   $0x1,%al
  21d7b0:	75 1b                	jne    21d7cd <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2cd>
  21d7b2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21d7b7:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21d7be:	00 
                    c_col = 0;
  21d7bf:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21d7c6:	00 00 00 00 00 
                if c_col >= n_cols {
  21d7cb:	eb b8                	jmp    21d785 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x285>
                    c_row = c_row + 1;
  21d7cd:	48 8d 3d fc 4e fe ff 	lea    -0x1b104(%rip),%rdi        # 2026d0 <str.2>
  21d7d4:	48 8d 15 3d ba 01 00 	lea    0x1ba3d(%rip),%rdx        # 239218 <memcmp+0x2c68>
  21d7db:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d7e0:	e8 7b 5c 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d7e5:	0f 0b                	ud2    
  21d7e7:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21d7ec:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  21d7f1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21d7f8:	00 
  21d7f9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                FramebufferText::print_ascii_char(fb, *ch, color, &c_row, &c_col, n_cols, n_rows);
  21d7fe:	40 8a 31             	mov    (%rcx),%sil
  21d801:	8b 8c 24 a0 00 00 00 	mov    0xa0(%rsp),%ecx
  21d808:	89 8c 24 e8 00 00 00 	mov    %ecx,0xe8(%rsp)
  21d80f:	8b 94 24 e8 00 00 00 	mov    0xe8(%rsp),%edx
  21d816:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
  21d81d:	00 
  21d81e:	4c 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%r8
  21d825:	00 
  21d826:	40 0f b6 f6          	movzbl %sil,%esi
  21d82a:	48 89 04 24          	mov    %rax,(%rsp)
  21d82e:	e8 7d f8 ff ff       	callq  21d0b0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText16print_ascii_char17h19a169e9c6cce86eE>
  21d833:	eb 62                	jmp    21d897 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x397>
  21d835:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21d83c:	00 
                    FramebufferText::scroll(fb, SCROLL_LINES);
  21d83d:	be 0a 00 00 00       	mov    $0xa,%esi
  21d842:	e8 59 f5 ff ff       	callq  21cda0 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText6scroll17h1a24591bbe95b373E>
                    c_row = c_row - SCROLL_LINES;
  21d847:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  21d84e:	00 
  21d84f:	48 83 e8 0a          	sub    $0xa,%rax
  21d853:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21d858:	0f 92 c0             	setb   %al
  21d85b:	a8 01                	test   $0x1,%al
  21d85d:	75 1e                	jne    21d87d <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x37d>
  21d85f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21d864:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21d86b:	00 
                    c_col = 0;
  21d86c:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  21d873:	00 00 00 00 00 
                if c_row >= n_rows {
  21d878:	e9 6a ff ff ff       	jmpq   21d7e7 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x2e7>
                    c_row = c_row - SCROLL_LINES;
  21d87d:	48 8d 3d 1c 4e fe ff 	lea    -0x1b1e4(%rip),%rdi        # 2026a0 <str.1>
  21d884:	48 8d 15 a5 b9 01 00 	lea    0x1b9a5(%rip),%rdx        # 239230 <memcmp+0x2c80>
  21d88b:	be 21 00 00 00       	mov    $0x21,%esi
  21d890:	e8 cb 5b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d895:	0f 0b                	ud2    
                c_col += 1;
  21d897:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21d89e:	00 
  21d89f:	48 83 c0 01          	add    $0x1,%rax
  21d8a3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21d8a8:	0f 92 c0             	setb   %al
  21d8ab:	a8 01                	test   $0x1,%al
  21d8ad:	75 12                	jne    21d8c1 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x3c1>
  21d8af:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21d8b4:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21d8bb:	00 
        for ch in string.as_bytes() {
  21d8bc:	e9 97 fd ff ff       	jmpq   21d658 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
                c_col += 1;
  21d8c1:	48 8d 3d 08 4e fe ff 	lea    -0x1b1f8(%rip),%rdi        # 2026d0 <str.2>
  21d8c8:	48 8d 15 79 b9 01 00 	lea    0x1b979(%rip),%rdx        # 239248 <memcmp+0x2c98>
  21d8cf:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d8d4:	e8 87 5b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d8d9:	0f 0b                	ud2    
  21d8db:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                c_col = c_col + 4;
  21d8e0:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21d8e7:	00 
  21d8e8:	e9 6b fd ff ff       	jmpq   21d658 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
  21d8ed:	48 8d 3d dc 4d fe ff 	lea    -0x1b224(%rip),%rdi        # 2026d0 <str.2>
  21d8f4:	48 8d 15 65 b9 01 00 	lea    0x1b965(%rip),%rdx        # 239260 <memcmp+0x2cb0>
  21d8fb:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d900:	e8 5b 5b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d905:	0f 0b                	ud2    
  21d907:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                c_row += 1;
  21d90c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  21d913:	00 
                continue;
  21d914:	e9 3f fd ff ff       	jmpq   21d658 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E+0x158>
                c_row += 1;
  21d919:	48 8d 3d b0 4d fe ff 	lea    -0x1b250(%rip),%rdi        # 2026d0 <str.2>
  21d920:	48 8d 15 51 b9 01 00 	lea    0x1b951(%rip),%rdx        # 239278 <memcmp+0x2cc8>
  21d927:	be 1c 00 00 00       	mov    $0x1c,%esi
  21d92c:	e8 2f 5b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21d931:	0f 0b                	ud2    
  21d933:	cc                   	int3   
  21d934:	cc                   	int3   
  21d935:	cc                   	int3   
  21d936:	cc                   	int3   
  21d937:	cc                   	int3   
  21d938:	cc                   	int3   
  21d939:	cc                   	int3   
  21d93a:	cc                   	int3   
  21d93b:	cc                   	int3   
  21d93c:	cc                   	int3   
  21d93d:	cc                   	int3   
  21d93e:	cc                   	int3   
  21d93f:	cc                   	int3   

000000000021d940 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger4init17h7fb94ee129555380E>:
    pub fn init(color: framebuffer::Pixel) -> Self {
  21d940:	48 83 ec 20          	sub    $0x20,%rsp
  21d944:	48 89 f8             	mov    %rdi,%rax
  21d947:	89 74 24 04          	mov    %esi,0x4(%rsp)
  21d94b:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  21d94f:	89 0c 24             	mov    %ecx,(%rsp)
            current_lines: FramebufferLines {
  21d952:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  21d959:	00 00 
  21d95b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  21d962:	00 00 
            color,
  21d964:	8b 0c 24             	mov    (%rsp),%ecx
  21d967:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
        FramebufferLogger {
  21d96b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21d970:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21d975:	48 89 17             	mov    %rdx,(%rdi)
  21d978:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  21d97c:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
  21d980:	89 4f 10             	mov    %ecx,0x10(%rdi)
    }
  21d983:	48 83 c4 20          	add    $0x20,%rsp
  21d987:	c3                   	retq   
  21d988:	cc                   	int3   
  21d989:	cc                   	int3   
  21d98a:	cc                   	int3   
  21d98b:	cc                   	int3   
  21d98c:	cc                   	int3   
  21d98d:	cc                   	int3   
  21d98e:	cc                   	int3   
  21d98f:	cc                   	int3   

000000000021d990 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger9set_color17h728bcd9539458d15E>:
    pub fn set_color(&mut self, color: framebuffer::Pixel) {
  21d990:	48 83 ec 18          	sub    $0x18,%rsp
  21d994:	89 74 24 04          	mov    %esi,0x4(%rsp)
  21d998:	8b 44 24 04          	mov    0x4(%rsp),%eax
  21d99c:	89 04 24             	mov    %eax,(%rsp)
  21d99f:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.color = color;
  21d9a4:	8b 04 24             	mov    (%rsp),%eax
  21d9a7:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21d9ab:	8b 44 24 08          	mov    0x8(%rsp),%eax
  21d9af:	89 47 10             	mov    %eax,0x10(%rdi)
    }
  21d9b2:	48 83 c4 18          	add    $0x18,%rsp
  21d9b6:	c3                   	retq   
  21d9b7:	cc                   	int3   
  21d9b8:	cc                   	int3   
  21d9b9:	cc                   	int3   
  21d9ba:	cc                   	int3   
  21d9bb:	cc                   	int3   
  21d9bc:	cc                   	int3   
  21d9bd:	cc                   	int3   
  21d9be:	cc                   	int3   
  21d9bf:	cc                   	int3   

000000000021d9c0 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE>:
    pub fn write(&mut self, string: &str) {
  21d9c0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  21d9c7:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21d9cc:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21d9d1:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  21d9d6:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  21d9db:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  21d9e0:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
        let locked_buffer_opt = framebuffer::Framebuffer::get_buffer_lock();
  21d9e5:	e8 26 75 ff ff       	callq  214f10 <_ZN9r3_kernel7drivers7display11framebuffer11Framebuffer15get_buffer_lock17h5adc1626d295e28dE>
  21d9ea:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21d9ef:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21d9f6:	00 
  21d9f7:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        if locked_buffer_opt.is_none() {
  21d9fc:	e8 5f 2b ff ff       	callq  210560 <_ZN4core6option15Option$LT$T$GT$7is_none17h634c1e6da7325f7dE>
  21da01:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  21da05:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  21da09:	a8 01                	test   $0x1,%al
  21da0b:	75 13                	jne    21da20 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x60>
  21da0d:	eb 00                	jmp    21da0f <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x4f>
  21da0f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
        let mut locked_buffer = locked_buffer_opt.as_ref().unwrap().lock();
  21da14:	e8 07 21 ff ff       	callq  20fb20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h40e10f74082a8908E>
  21da19:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21da1e:	eb 08                	jmp    21da28 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x68>
    }
  21da20:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  21da27:	c3                   	retq   
  21da28:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        let mut locked_buffer = locked_buffer_opt.as_ref().unwrap().lock();
  21da2d:	48 8d 35 5c b8 01 00 	lea    0x1b85c(%rip),%rsi        # 239290 <memcmp+0x2ce0>
  21da34:	e8 b7 29 ff ff       	callq  2103f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcb6a776b747c0cf2E>
  21da39:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21da3e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21da43:	e8 08 e8 00 00       	callq  22c250 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>
  21da48:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21da4d:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21da52:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21da57:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  21da5c:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            self.color,
  21da61:	41 8b 40 10          	mov    0x10(%r8),%eax
  21da65:	89 44 24 60          	mov    %eax,0x60(%rsp)
        self.current_lines = FramebufferText::print_string(
  21da69:	8b 4c 24 60          	mov    0x60(%rsp),%ecx
  21da6d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21da72:	e8 89 fa ff ff       	callq  21d500 <_ZN9r3_kernel7drivers7display7fb_text15FramebufferText12print_string17h1dea523261df42b5E>
  21da77:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21da7c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21da81:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21da86:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21da8b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21da90:	48 89 10             	mov    %rdx,(%rax)
  21da93:	48 89 48 08          	mov    %rcx,0x8(%rax)
    }
  21da97:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21da9c:	e8 af dd fe ff       	callq  20b850 <_ZN4core3ptr111drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..framebuffer..FramebufferMemory$GT$$GT$17hfdb9af597249a18aE>
  21daa1:	e9 7a ff ff ff       	jmpq   21da20 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE+0x60>
  21daa6:	cc                   	int3   
  21daa7:	cc                   	int3   
  21daa8:	cc                   	int3   
  21daa9:	cc                   	int3   
  21daaa:	cc                   	int3   
  21daab:	cc                   	int3   
  21daac:	cc                   	int3   
  21daad:	cc                   	int3   
  21daae:	cc                   	int3   
  21daaf:	cc                   	int3   

000000000021dab0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>:
    fn write_str(&mut self, string: &str) -> fmt::Result {
  21dab0:	48 83 ec 28          	sub    $0x28,%rsp
  21dab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21dab9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21dabe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write(string);
  21dac3:	e8 f8 fe ff ff       	callq  21d9c0 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger5write17h918687a97a7e793fE>
        return Ok(());
  21dac8:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  21dacd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  21dad1:	24 01                	and    $0x1,%al
  21dad3:	0f b6 c0             	movzbl %al,%eax
  21dad6:	48 83 c4 28          	add    $0x28,%rsp
  21dada:	c3                   	retq   
  21dadb:	cc                   	int3   
  21dadc:	cc                   	int3   
  21dadd:	cc                   	int3   
  21dade:	cc                   	int3   
  21dadf:	cc                   	int3   

000000000021dae0 <_ZN9r3_kernel7drivers7display7fb_text17setup_framebuffer17hacd8dd41e1df2539E>:
pub fn setup_framebuffer(color: framebuffer::Pixel) -> Mutex<FramebufferLogger> {
  21dae0:	48 83 ec 38          	sub    $0x38,%rsp
  21dae4:	48 89 3c 24          	mov    %rdi,(%rsp)
  21dae8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21daed:	89 74 24 14          	mov    %esi,0x14(%rsp)
  21daf1:	8b 44 24 14          	mov    0x14(%rsp),%eax
  21daf5:	89 44 24 10          	mov    %eax,0x10(%rsp)
    Mutex::new(FramebufferLogger::init(color))
  21daf9:	8b 44 24 10          	mov    0x10(%rsp),%eax
  21dafd:	89 44 24 30          	mov    %eax,0x30(%rsp)
  21db01:	8b 74 24 30          	mov    0x30(%rsp),%esi
  21db05:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21db0a:	e8 31 fe ff ff       	callq  21d940 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger4init17h7fb94ee129555380E>
  21db0f:	48 8b 3c 24          	mov    (%rsp),%rdi
  21db13:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  21db18:	e8 f3 e2 00 00       	callq  22be10 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb57e111c8bcb0c86E>
  21db1d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  21db22:	48 83 c4 38          	add    $0x38,%rsp
  21db26:	c3                   	retq   
  21db27:	cc                   	int3   
  21db28:	cc                   	int3   
  21db29:	cc                   	int3   
  21db2a:	cc                   	int3   
  21db2b:	cc                   	int3   
  21db2c:	cc                   	int3   
  21db2d:	cc                   	int3   
  21db2e:	cc                   	int3   
  21db2f:	cc                   	int3   

000000000021db30 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7140a24394aa1ffE>:
            fn deref(&self) -> &$T {
  21db30:	48 83 ec 18          	sub    $0x18,%rsp
  21db34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21db39:	48 8d 05 30 42 02 00 	lea    0x24230(%rip),%rax        # 241d70 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hc9a1c376d2ac94f4E>
  21db40:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21db45:	48 8d 3d 24 42 02 00 	lea    0x24224(%rip),%rdi        # 241d70 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hc9a1c376d2ac94f4E>
  21db4c:	e8 1f a4 fe ff       	callq  207f70 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0101f269c9d506daE>
  21db51:	48 89 04 24          	mov    %rax,(%rsp)
  21db55:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21db59:	48 83 c4 18          	add    $0x18,%rsp
  21db5d:	c3                   	retq   
  21db5e:	cc                   	int3   
  21db5f:	cc                   	int3   

000000000021db60 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E>:

                self
            }

            #[inline]
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  21db60:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  21db67:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21db6c:	66 89 c8             	mov    %cx,%ax
  21db6f:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  21db74:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  21db7b:	00 
  21db7c:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21db83:	00 
  21db84:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  21db8b:	00 
  21db8c:	66 89 84 24 9e 00 00 	mov    %ax,0x9e(%rsp)
  21db93:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21db94:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  21db9b:	00 
  21db9c:	be 10 00 00 00       	mov    $0x10,%esi
  21dba1:	e8 1a 0d 00 00       	callq  21e8c0 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21dba6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21dbab:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21dbb0:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21dbb7:	00 
  21dbb8:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  21dbbf:	00 
  21dbc0:	48 8b 44 24 70       	mov    0x70(%rsp),%rax

                assert!(range.start < Self::BIT_LENGTH);
  21dbc5:	48 83 f8 10          	cmp    $0x10,%rax
  21dbc9:	0f 92 c0             	setb   %al
  21dbcc:	34 ff                	xor    $0xff,%al
  21dbce:	a8 01                	test   $0x1,%al
  21dbd0:	75 14                	jne    21dbe6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x86>
  21dbd2:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21dbd7:	48 83 f8 10          	cmp    $0x10,%rax
  21dbdb:	0f 96 c0             	setbe  %al
  21dbde:	34 ff                	xor    $0xff,%al
  21dbe0:	a8 01                	test   $0x1,%al
  21dbe2:	75 34                	jne    21dc18 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xb8>
  21dbe4:	eb 1a                	jmp    21dc00 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xa0>
                assert!(range.start < Self::BIT_LENGTH);
  21dbe6:	48 8d 3d ff 4a fe ff 	lea    -0x1b501(%rip),%rdi        # 2026ec <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21dbed:	48 8d 15 b4 b6 01 00 	lea    0x1b6b4(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dbf4:	be 30 00 00 00       	mov    $0x30,%esi
  21dbf9:	e8 62 58 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dbfe:	0f 0b                	ud2    
  21dc00:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21dc05:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                assert!(range.start < range.end);
  21dc0a:	48 39 c8             	cmp    %rcx,%rax
  21dc0d:	0f 92 c0             	setb   %al
  21dc10:	34 ff                	xor    $0xff,%al
  21dc12:	a8 01                	test   $0x1,%al
  21dc14:	75 37                	jne    21dc4d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xed>
  21dc16:	eb 1a                	jmp    21dc32 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0xd2>
                assert!(range.end <= Self::BIT_LENGTH);
  21dc18:	48 8d 3d 58 4b fe ff 	lea    -0x1b4a8(%rip),%rdi        # 202777 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21dc1f:	48 8d 15 82 b6 01 00 	lea    0x1b682(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dc26:	be 2f 00 00 00       	mov    $0x2f,%esi
  21dc2b:	e8 30 58 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dc30:	0f 0b                	ud2    
  21dc32:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21dc37:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dc3c:	48 29 c8             	sub    %rcx,%rax
  21dc3f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21dc44:	0f 92 c0             	setb   %al
  21dc47:	a8 01                	test   $0x1,%al
  21dc49:	75 37                	jne    21dc82 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x122>
  21dc4b:	eb 1a                	jmp    21dc67 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x107>
                assert!(range.start < range.end);
  21dc4d:	48 8d 3d 52 4b fe ff 	lea    -0x1b4ae(%rip),%rdi        # 2027a6 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21dc54:	48 8d 15 4d b6 01 00 	lea    0x1b64d(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dc5b:	be 29 00 00 00       	mov    $0x29,%esi
  21dc60:	e8 fb 57 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dc65:	0f 0b                	ud2    
  21dc67:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dc6c:	b8 10 00 00 00       	mov    $0x10,%eax
  21dc71:	48 29 c8             	sub    %rcx,%rax
  21dc74:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21dc79:	0f 92 c0             	setb   %al
  21dc7c:	a8 01                	test   $0x1,%al
  21dc7e:	75 46                	jne    21dcc6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x166>
  21dc80:	eb 1a                	jmp    21dc9c <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x13c>
  21dc82:	48 8d 3d 47 4b fe ff 	lea    -0x1b4b9(%rip),%rdi        # 2027d0 <str.0>
  21dc89:	48 8d 15 18 b6 01 00 	lea    0x1b618(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dc90:	be 21 00 00 00       	mov    $0x21,%esi
  21dc95:	e8 c6 57 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dc9a:	0f 0b                	ud2    
  21dc9c:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  21dca1:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  21dca6:	48 89 c8             	mov    %rcx,%rax
  21dca9:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21dcad:	48 83 f8 00          	cmp    $0x0,%rax
  21dcb1:	0f 95 c0             	setne  %al
  21dcb4:	66 83 e1 0f          	and    $0xf,%cx
  21dcb8:	66 d3 e2             	shl    %cl,%dx
  21dcbb:	66 89 54 24 4e       	mov    %dx,0x4e(%rsp)
  21dcc0:	a8 01                	test   $0x1,%al
  21dcc2:	75 37                	jne    21dcfb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x19b>
  21dcc4:	eb 1a                	jmp    21dce0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x180>
  21dcc6:	48 8d 3d 03 4b fe ff 	lea    -0x1b4fd(%rip),%rdi        # 2027d0 <str.0>
  21dccd:	48 8d 15 d4 b5 01 00 	lea    0x1b5d4(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dcd4:	be 21 00 00 00       	mov    $0x21,%esi
  21dcd9:	e8 82 57 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dcde:	0f 0b                	ud2    
  21dce0:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21dce5:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21dcea:	48 29 c8             	sub    %rcx,%rax
  21dced:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21dcf2:	0f 92 c0             	setb   %al
  21dcf5:	a8 01                	test   $0x1,%al
  21dcf7:	75 37                	jne    21dd30 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1d0>
  21dcf9:	eb 1a                	jmp    21dd15 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1b5>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dcfb:	48 8d 3d fe 4a fe ff 	lea    -0x1b502(%rip),%rdi        # 202800 <str.1>
  21dd02:	48 8d 15 9f b5 01 00 	lea    0x1b59f(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dd09:	be 23 00 00 00       	mov    $0x23,%esi
  21dd0e:	e8 4d 57 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dd13:	0f 0b                	ud2    
  21dd15:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21dd1a:	b8 10 00 00 00       	mov    $0x10,%eax
  21dd1f:	48 29 c8             	sub    %rcx,%rax
  21dd22:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21dd27:	0f 92 c0             	setb   %al
  21dd2a:	a8 01                	test   $0x1,%al
  21dd2c:	75 46                	jne    21dd74 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x214>
  21dd2e:	eb 1a                	jmp    21dd4a <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x1ea>
  21dd30:	48 8d 3d 99 4a fe ff 	lea    -0x1b567(%rip),%rdi        # 2027d0 <str.0>
  21dd37:	48 8d 15 6a b5 01 00 	lea    0x1b56a(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dd3e:	be 21 00 00 00       	mov    $0x21,%esi
  21dd43:	e8 18 57 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dd48:	0f 0b                	ud2    
  21dd4a:	66 8b 54 24 4e       	mov    0x4e(%rsp),%dx
  21dd4f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dd54:	48 89 c8             	mov    %rcx,%rax
  21dd57:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21dd5b:	48 83 f8 00          	cmp    $0x0,%rax
  21dd5f:	0f 95 c0             	setne  %al
  21dd62:	66 83 e1 0f          	and    $0xf,%cx
  21dd66:	66 d3 ea             	shr    %cl,%dx
  21dd69:	66 89 54 24 36       	mov    %dx,0x36(%rsp)
  21dd6e:	a8 01                	test   $0x1,%al
  21dd70:	75 34                	jne    21dda6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x246>
  21dd72:	eb 1a                	jmp    21dd8e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x22e>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21dd74:	48 8d 3d 55 4a fe ff 	lea    -0x1b5ab(%rip),%rdi        # 2027d0 <str.0>
  21dd7b:	48 8d 15 26 b5 01 00 	lea    0x1b526(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dd82:	be 21 00 00 00       	mov    $0x21,%esi
  21dd87:	e8 d4 56 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dd8c:	0f 0b                	ud2    
  21dd8e:	66 8b 44 24 36       	mov    0x36(%rsp),%ax
  21dd93:	66 8b 4c 24 6e       	mov    0x6e(%rsp),%cx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dd98:	66 39 c8             	cmp    %cx,%ax
  21dd9b:	0f 94 c0             	sete   %al
  21dd9e:	34 ff                	xor    $0xff,%al
  21dda0:	a8 01                	test   $0x1,%al
  21dda2:	75 37                	jne    21dddb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x27b>
  21dda4:	eb 1a                	jmp    21ddc0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x260>
  21dda6:	48 8d 3d 83 4a fe ff 	lea    -0x1b57d(%rip),%rdi        # 202830 <str.2>
  21ddad:	48 8d 15 f4 b4 01 00 	lea    0x1b4f4(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21ddb4:	be 24 00 00 00       	mov    $0x24,%esi
  21ddb9:	e8 a2 56 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ddbe:	0f 0b                	ud2    
  21ddc0:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                        "value does not fit into bit range");

                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21ddc5:	b8 10 00 00 00       	mov    $0x10,%eax
  21ddca:	48 29 c8             	sub    %rcx,%rax
  21ddcd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ddd2:	0f 92 c0             	setb   %al
  21ddd5:	a8 01                	test   $0x1,%al
  21ddd7:	75 45                	jne    21de1e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2be>
  21ddd9:	eb 1a                	jmp    21ddf5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x295>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21dddb:	48 8d 3d 72 4a fe ff 	lea    -0x1b58e(%rip),%rdi        # 202854 <str.2+0x24>
  21dde2:	48 8d 15 bf b4 01 00 	lea    0x1b4bf(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dde9:	be 21 00 00 00       	mov    $0x21,%esi
  21ddee:	e8 6d 56 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ddf3:	0f 0b                	ud2    
  21ddf5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21ddfa:	48 89 c8             	mov    %rcx,%rax
  21ddfd:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21de01:	48 83 f8 00          	cmp    $0x0,%rax
  21de05:	0f 95 c0             	setne  %al
  21de08:	66 83 e1 0f          	and    $0xf,%cx
  21de0c:	66 ba ff ff          	mov    $0xffff,%dx
  21de10:	66 d3 e2             	shl    %cl,%dx
  21de13:	66 89 54 24 26       	mov    %dx,0x26(%rsp)
  21de18:	a8 01                	test   $0x1,%al
  21de1a:	75 37                	jne    21de53 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2f3>
  21de1c:	eb 1a                	jmp    21de38 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x2d8>
  21de1e:	48 8d 3d ab 49 fe ff 	lea    -0x1b655(%rip),%rdi        # 2027d0 <str.0>
  21de25:	48 8d 15 7c b4 01 00 	lea    0x1b47c(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21de2c:	be 21 00 00 00       	mov    $0x21,%esi
  21de31:	e8 2a 56 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21de36:	0f 0b                	ud2    
  21de38:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                                    (Self::BIT_LENGTH - range.end) >>
  21de3d:	b8 10 00 00 00       	mov    $0x10,%eax
  21de42:	48 29 c8             	sub    %rcx,%rax
  21de45:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21de4a:	0f 92 c0             	setb   %al
  21de4d:	a8 01                	test   $0x1,%al
  21de4f:	75 46                	jne    21de97 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x337>
  21de51:	eb 1a                	jmp    21de6d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x30d>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21de53:	48 8d 3d a6 49 fe ff 	lea    -0x1b65a(%rip),%rdi        # 202800 <str.1>
  21de5a:	48 8d 15 47 b4 01 00 	lea    0x1b447(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21de61:	be 23 00 00 00       	mov    $0x23,%esi
  21de66:	e8 f5 55 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21de6b:	0f 0b                	ud2    
  21de6d:	66 8b 54 24 26       	mov    0x26(%rsp),%dx
  21de72:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  21de77:	48 89 c8             	mov    %rcx,%rax
  21de7a:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21de7e:	48 83 f8 00          	cmp    $0x0,%rax
  21de82:	0f 95 c0             	setne  %al
  21de85:	66 83 e1 0f          	and    $0xf,%cx
  21de89:	66 d3 ea             	shr    %cl,%dx
  21de8c:	66 89 54 24 16       	mov    %dx,0x16(%rsp)
  21de91:	a8 01                	test   $0x1,%al
  21de93:	75 46                	jne    21dedb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x37b>
  21de95:	eb 1a                	jmp    21deb1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x351>
                                    (Self::BIT_LENGTH - range.end) >>
  21de97:	48 8d 3d 32 49 fe ff 	lea    -0x1b6ce(%rip),%rdi        # 2027d0 <str.0>
  21de9e:	48 8d 15 03 b4 01 00 	lea    0x1b403(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dea5:	be 21 00 00 00       	mov    $0x21,%esi
  21deaa:	e8 b1 55 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21deaf:	0f 0b                	ud2    
  21deb1:	66 8b 54 24 16       	mov    0x16(%rsp),%dx
  21deb6:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21debb:	48 89 c8             	mov    %rcx,%rax
  21debe:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21dec2:	48 83 f8 00          	cmp    $0x0,%rax
  21dec6:	0f 95 c0             	setne  %al
  21dec9:	66 83 e1 0f          	and    $0xf,%cx
  21decd:	66 d3 ea             	shr    %cl,%dx
  21ded0:	66 89 54 24 14       	mov    %dx,0x14(%rsp)
  21ded5:	a8 01                	test   $0x1,%al
  21ded7:	75 46                	jne    21df1f <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x3bf>
  21ded9:	eb 1a                	jmp    21def5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x395>
  21dedb:	48 8d 3d 4e 49 fe ff 	lea    -0x1b6b2(%rip),%rdi        # 202830 <str.2>
  21dee2:	48 8d 15 bf b3 01 00 	lea    0x1b3bf(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dee9:	be 24 00 00 00       	mov    $0x24,%esi
  21deee:	e8 6d 55 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21def3:	0f 0b                	ud2    
  21def5:	66 8b 54 24 14       	mov    0x14(%rsp),%dx
  21defa:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21deff:	48 89 c8             	mov    %rcx,%rax
  21df02:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21df06:	48 83 f8 00          	cmp    $0x0,%rax
  21df0a:	0f 95 c0             	setne  %al
  21df0d:	66 83 e1 0f          	and    $0xf,%cx
  21df11:	66 d3 e2             	shl    %cl,%dx
  21df14:	66 89 54 24 12       	mov    %dx,0x12(%rsp)
  21df19:	a8 01                	test   $0x1,%al
  21df1b:	75 64                	jne    21df81 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x421>
  21df1d:	eb 1a                	jmp    21df39 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x3d9>
  21df1f:	48 8d 3d 0a 49 fe ff 	lea    -0x1b6f6(%rip),%rdi        # 202830 <str.2>
  21df26:	48 8d 15 7b b3 01 00 	lea    0x1b37b(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21df2d:	be 24 00 00 00       	mov    $0x24,%esi
  21df32:	e8 29 55 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21df37:	0f 0b                	ud2    
  21df39:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  21df3e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21df43:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  21df48:	66 8b 44 24 12       	mov    0x12(%rsp),%ax
  21df4d:	66 83 f0 ff          	xor    $0xffff,%ax
  21df51:	66 89 84 24 b6 00 00 	mov    %ax,0xb6(%rsp)
  21df58:	00 
                                    range.start << range.start);

                // set bits
                *self = (*self & bitmask) | (value << range.start);
  21df59:	66 23 06             	and    (%rsi),%ax
  21df5c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  21df61:	48 89 c8             	mov    %rcx,%rax
  21df64:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21df68:	48 83 f8 00          	cmp    $0x0,%rax
  21df6c:	0f 95 c0             	setne  %al
  21df6f:	66 83 e1 0f          	and    $0xf,%cx
  21df73:	66 d3 e2             	shl    %cl,%dx
  21df76:	66 89 54 24 10       	mov    %dx,0x10(%rsp)
  21df7b:	a8 01                	test   $0x1,%al
  21df7d:	75 33                	jne    21dfb2 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x452>
  21df7f:	eb 1a                	jmp    21df9b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x43b>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21df81:	48 8d 3d 78 48 fe ff 	lea    -0x1b788(%rip),%rdi        # 202800 <str.1>
  21df88:	48 8d 15 19 b3 01 00 	lea    0x1b319(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21df8f:	be 23 00 00 00       	mov    $0x23,%esi
  21df94:	e8 c7 54 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21df99:	0f 0b                	ud2    
  21df9b:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21dfa0:	66 8b 54 24 10       	mov    0x10(%rsp),%dx
  21dfa5:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
                *self = (*self & bitmask) | (value << range.start);
  21dfaa:	66 09 d1             	or     %dx,%cx
  21dfad:	66 89 08             	mov    %cx,(%rax)

                self
            }
  21dfb0:	eb 1a                	jmp    21dfcc <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17h87999160e1287fa3E+0x46c>
                *self = (*self & bitmask) | (value << range.start);
  21dfb2:	48 8d 3d 47 48 fe ff 	lea    -0x1b7b9(%rip),%rdi        # 202800 <str.1>
  21dfb9:	48 8d 15 e8 b2 01 00 	lea    0x1b2e8(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21dfc0:	be 23 00 00 00       	mov    $0x23,%esi
  21dfc5:	e8 96 54 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21dfca:	0f 0b                	ud2    
  21dfcc:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            }
  21dfd1:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  21dfd8:	c3                   	retq   
  21dfd9:	cc                   	int3   
  21dfda:	cc                   	int3   
  21dfdb:	cc                   	int3   
  21dfdc:	cc                   	int3   
  21dfdd:	cc                   	int3   
  21dfde:	cc                   	int3   
  21dfdf:	cc                   	int3   

000000000021dfe0 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  21dfe0:	48 83 ec 68          	sub    $0x68,%rsp
  21dfe4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21dfe9:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  21dfee:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21dff3:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21dff8:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  21dffd:	be 20 00 00 00       	mov    $0x20,%esi
  21e002:	e8 b9 08 00 00       	callq  21e8c0 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21e007:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21e00c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21e011:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21e016:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21e01b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  21e020:	48 83 f8 20          	cmp    $0x20,%rax
  21e024:	0f 92 c0             	setb   %al
  21e027:	34 ff                	xor    $0xff,%al
  21e029:	a8 01                	test   $0x1,%al
  21e02b:	75 14                	jne    21e041 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x61>
  21e02d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21e032:	48 83 f8 20          	cmp    $0x20,%rax
  21e036:	0f 96 c0             	setbe  %al
  21e039:	34 ff                	xor    $0xff,%al
  21e03b:	a8 01                	test   $0x1,%al
  21e03d:	75 34                	jne    21e073 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x93>
  21e03f:	eb 1a                	jmp    21e05b <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  21e041:	48 8d 3d a4 46 fe ff 	lea    -0x1b95c(%rip),%rdi        # 2026ec <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21e048:	48 8d 15 59 b2 01 00 	lea    0x1b259(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e04f:	be 30 00 00 00       	mov    $0x30,%esi
  21e054:	e8 07 54 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e059:	0f 0b                	ud2    
  21e05b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  21e060:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
                assert!(range.start < range.end);
  21e065:	48 39 c8             	cmp    %rcx,%rax
  21e068:	0f 92 c0             	setb   %al
  21e06b:	34 ff                	xor    $0xff,%al
  21e06d:	a8 01                	test   $0x1,%al
  21e06f:	75 42                	jne    21e0b3 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xd3>
  21e071:	eb 1a                	jmp    21e08d <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  21e073:	48 8d 3d fd 46 fe ff 	lea    -0x1b903(%rip),%rdi        # 202777 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21e07a:	48 8d 15 27 b2 01 00 	lea    0x1b227(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e081:	be 2f 00 00 00       	mov    $0x2f,%esi
  21e086:	e8 d5 53 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e08b:	0f 0b                	ud2    
  21e08d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21e092:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e097:	8b 00                	mov    (%rax),%eax
  21e099:	89 44 24 14          	mov    %eax,0x14(%rsp)
  21e09d:	b8 20 00 00 00       	mov    $0x20,%eax
  21e0a2:	48 29 c8             	sub    %rcx,%rax
  21e0a5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21e0aa:	0f 92 c0             	setb   %al
  21e0ad:	a8 01                	test   $0x1,%al
  21e0af:	75 42                	jne    21e0f3 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x113>
  21e0b1:	eb 1a                	jmp    21e0cd <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0xed>
                assert!(range.start < range.end);
  21e0b3:	48 8d 3d ec 46 fe ff 	lea    -0x1b914(%rip),%rdi        # 2027a6 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21e0ba:	48 8d 15 e7 b1 01 00 	lea    0x1b1e7(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e0c1:	be 29 00 00 00       	mov    $0x29,%esi
  21e0c6:	e8 95 53 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e0cb:	0f 0b                	ud2    
  21e0cd:	8b 54 24 14          	mov    0x14(%rsp),%edx
  21e0d1:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e0d6:	48 89 c8             	mov    %rcx,%rax
  21e0d9:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21e0dd:	48 83 f8 00          	cmp    $0x0,%rax
  21e0e1:	0f 95 c0             	setne  %al
  21e0e4:	83 e1 1f             	and    $0x1f,%ecx
  21e0e7:	d3 e2                	shl    %cl,%edx
  21e0e9:	89 54 24 10          	mov    %edx,0x10(%rsp)
  21e0ed:	a8 01                	test   $0x1,%al
  21e0ef:	75 37                	jne    21e128 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x148>
  21e0f1:	eb 1a                	jmp    21e10d <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x12d>
  21e0f3:	48 8d 3d d6 46 fe ff 	lea    -0x1b92a(%rip),%rdi        # 2027d0 <str.0>
  21e0fa:	48 8d 15 a7 b1 01 00 	lea    0x1b1a7(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e101:	be 21 00 00 00       	mov    $0x21,%esi
  21e106:	e8 55 53 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e10b:	0f 0b                	ud2    
  21e10d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  21e112:	b8 20 00 00 00       	mov    $0x20,%eax
  21e117:	48 29 c8             	sub    %rcx,%rax
  21e11a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e11f:	0f 92 c0             	setb   %al
  21e122:	a8 01                	test   $0x1,%al
  21e124:	75 42                	jne    21e168 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x188>
  21e126:	eb 1a                	jmp    21e142 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x162>
  21e128:	48 8d 3d d1 46 fe ff 	lea    -0x1b92f(%rip),%rdi        # 202800 <str.1>
  21e12f:	48 8d 15 72 b1 01 00 	lea    0x1b172(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e136:	be 23 00 00 00       	mov    $0x23,%esi
  21e13b:	e8 20 53 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e140:	0f 0b                	ud2    
  21e142:	8b 54 24 10          	mov    0x10(%rsp),%edx
  21e146:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21e14b:	48 89 c8             	mov    %rcx,%rax
  21e14e:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21e152:	48 83 f8 00          	cmp    $0x0,%rax
  21e156:	0f 95 c0             	setne  %al
  21e159:	83 e1 1f             	and    $0x1f,%ecx
  21e15c:	d3 ea                	shr    %cl,%edx
  21e15e:	89 54 24 04          	mov    %edx,0x4(%rsp)
  21e162:	a8 01                	test   $0x1,%al
  21e164:	75 45                	jne    21e1ab <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1cb>
  21e166:	eb 1a                	jmp    21e182 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1a2>
  21e168:	48 8d 3d 61 46 fe ff 	lea    -0x1b99f(%rip),%rdi        # 2027d0 <str.0>
  21e16f:	48 8d 15 32 b1 01 00 	lea    0x1b132(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e176:	be 21 00 00 00       	mov    $0x21,%esi
  21e17b:	e8 e0 52 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e180:	0f 0b                	ud2    
  21e182:	8b 54 24 04          	mov    0x4(%rsp),%edx
  21e186:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21e18b:	89 54 24 64          	mov    %edx,0x64(%rsp)
                bits >> range.start
  21e18f:	48 89 c8             	mov    %rcx,%rax
  21e192:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  21e196:	48 83 f8 00          	cmp    $0x0,%rax
  21e19a:	0f 95 c0             	setne  %al
  21e19d:	83 e1 1f             	and    $0x1f,%ecx
  21e1a0:	d3 ea                	shr    %cl,%edx
  21e1a2:	89 14 24             	mov    %edx,(%rsp)
  21e1a5:	a8 01                	test   $0x1,%al
  21e1a7:	75 1e                	jne    21e1c7 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1e7>
  21e1a9:	eb 1a                	jmp    21e1c5 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x1e5>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e1ab:	48 8d 3d 7e 46 fe ff 	lea    -0x1b982(%rip),%rdi        # 202830 <str.2>
  21e1b2:	48 8d 15 ef b0 01 00 	lea    0x1b0ef(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e1b9:	be 24 00 00 00       	mov    $0x24,%esi
  21e1be:	e8 9d 52 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e1c3:	0f 0b                	ud2    
            }
  21e1c5:	eb 1a                	jmp    21e1e1 <_ZN43_$LT$u32$u20$as$u20$bit_field..BitField$GT$8get_bits17h9c1407bc3f2b0334E+0x201>
                bits >> range.start
  21e1c7:	48 8d 3d 62 46 fe ff 	lea    -0x1b99e(%rip),%rdi        # 202830 <str.2>
  21e1ce:	48 8d 15 d3 b0 01 00 	lea    0x1b0d3(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e1d5:	be 24 00 00 00       	mov    $0x24,%esi
  21e1da:	e8 81 52 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e1df:	0f 0b                	ud2    
  21e1e1:	8b 04 24             	mov    (%rsp),%eax
            }
  21e1e4:	48 83 c4 68          	add    $0x68,%rsp
  21e1e8:	c3                   	retq   
  21e1e9:	cc                   	int3   
  21e1ea:	cc                   	int3   
  21e1eb:	cc                   	int3   
  21e1ec:	cc                   	int3   
  21e1ed:	cc                   	int3   
  21e1ee:	cc                   	int3   
  21e1ef:	cc                   	int3   

000000000021e1f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  21e1f0:	48 83 ec 78          	sub    $0x78,%rsp
  21e1f4:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e1f9:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21e1fe:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21e203:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21e208:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21e20d:	be 40 00 00 00       	mov    $0x40,%esi
  21e212:	e8 a9 06 00 00       	callq  21e8c0 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21e217:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21e21c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21e221:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21e226:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  21e22b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  21e230:	48 83 f8 40          	cmp    $0x40,%rax
  21e234:	0f 92 c0             	setb   %al
  21e237:	34 ff                	xor    $0xff,%al
  21e239:	a8 01                	test   $0x1,%al
  21e23b:	75 14                	jne    21e251 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x61>
  21e23d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  21e242:	48 83 f8 40          	cmp    $0x40,%rax
  21e246:	0f 96 c0             	setbe  %al
  21e249:	34 ff                	xor    $0xff,%al
  21e24b:	a8 01                	test   $0x1,%al
  21e24d:	75 34                	jne    21e283 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x93>
  21e24f:	eb 1a                	jmp    21e26b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  21e251:	48 8d 3d 94 44 fe ff 	lea    -0x1bb6c(%rip),%rdi        # 2026ec <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21e258:	48 8d 15 49 b0 01 00 	lea    0x1b049(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e25f:	be 30 00 00 00       	mov    $0x30,%esi
  21e264:	e8 f7 51 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e269:	0f 0b                	ud2    
  21e26b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21e270:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                assert!(range.start < range.end);
  21e275:	48 39 c8             	cmp    %rcx,%rax
  21e278:	0f 92 c0             	setb   %al
  21e27b:	34 ff                	xor    $0xff,%al
  21e27d:	a8 01                	test   $0x1,%al
  21e27f:	75 44                	jne    21e2c5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xd5>
  21e281:	eb 1a                	jmp    21e29d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  21e283:	48 8d 3d ed 44 fe ff 	lea    -0x1bb13(%rip),%rdi        # 202777 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21e28a:	48 8d 15 17 b0 01 00 	lea    0x1b017(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e291:	be 2f 00 00 00       	mov    $0x2f,%esi
  21e296:	e8 c5 51 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e29b:	0f 0b                	ud2    
  21e29d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21e2a2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e2a7:	48 8b 00             	mov    (%rax),%rax
  21e2aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e2af:	b8 40 00 00 00       	mov    $0x40,%eax
  21e2b4:	48 29 c8             	sub    %rcx,%rax
  21e2b7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21e2bc:	0f 92 c0             	setb   %al
  21e2bf:	a8 01                	test   $0x1,%al
  21e2c1:	75 46                	jne    21e309 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x119>
  21e2c3:	eb 1a                	jmp    21e2df <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0xef>
                assert!(range.start < range.end);
  21e2c5:	48 8d 3d da 44 fe ff 	lea    -0x1bb26(%rip),%rdi        # 2027a6 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21e2cc:	48 8d 15 d5 af 01 00 	lea    0x1afd5(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e2d3:	be 29 00 00 00       	mov    $0x29,%esi
  21e2d8:	e8 83 51 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e2dd:	0f 0b                	ud2    
  21e2df:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21e2e4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e2e9:	48 89 c8             	mov    %rcx,%rax
  21e2ec:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e2f0:	48 83 f8 00          	cmp    $0x0,%rax
  21e2f4:	0f 95 c0             	setne  %al
  21e2f7:	48 83 e1 3f          	and    $0x3f,%rcx
  21e2fb:	48 d3 e2             	shl    %cl,%rdx
  21e2fe:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21e303:	a8 01                	test   $0x1,%al
  21e305:	75 37                	jne    21e33e <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x14e>
  21e307:	eb 1a                	jmp    21e323 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x133>
  21e309:	48 8d 3d c0 44 fe ff 	lea    -0x1bb40(%rip),%rdi        # 2027d0 <str.0>
  21e310:	48 8d 15 91 af 01 00 	lea    0x1af91(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e317:	be 21 00 00 00       	mov    $0x21,%esi
  21e31c:	e8 3f 51 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e321:	0f 0b                	ud2    
  21e323:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  21e328:	b8 40 00 00 00       	mov    $0x40,%eax
  21e32d:	48 29 c8             	sub    %rcx,%rax
  21e330:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e335:	0f 92 c0             	setb   %al
  21e338:	a8 01                	test   $0x1,%al
  21e33a:	75 46                	jne    21e382 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x192>
  21e33c:	eb 1a                	jmp    21e358 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x168>
  21e33e:	48 8d 3d bb 44 fe ff 	lea    -0x1bb45(%rip),%rdi        # 202800 <str.1>
  21e345:	48 8d 15 5c af 01 00 	lea    0x1af5c(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e34c:	be 23 00 00 00       	mov    $0x23,%esi
  21e351:	e8 0a 51 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e356:	0f 0b                	ud2    
  21e358:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21e35d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21e362:	48 89 c8             	mov    %rcx,%rax
  21e365:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e369:	48 83 f8 00          	cmp    $0x0,%rax
  21e36d:	0f 95 c0             	setne  %al
  21e370:	48 83 e1 3f          	and    $0x3f,%rcx
  21e374:	48 d3 ea             	shr    %cl,%rdx
  21e377:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e37c:	a8 01                	test   $0x1,%al
  21e37e:	75 4a                	jne    21e3ca <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1da>
  21e380:	eb 1a                	jmp    21e39c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1ac>
  21e382:	48 8d 3d 47 44 fe ff 	lea    -0x1bbb9(%rip),%rdi        # 2027d0 <str.0>
  21e389:	48 8d 15 18 af 01 00 	lea    0x1af18(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e390:	be 21 00 00 00       	mov    $0x21,%esi
  21e395:	e8 c6 50 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e39a:	0f 0b                	ud2    
  21e39c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e3a1:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21e3a6:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
                bits >> range.start
  21e3ab:	48 89 c8             	mov    %rcx,%rax
  21e3ae:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e3b2:	48 83 f8 00          	cmp    $0x0,%rax
  21e3b6:	0f 95 c0             	setne  %al
  21e3b9:	48 83 e1 3f          	and    $0x3f,%rcx
  21e3bd:	48 d3 ea             	shr    %cl,%rdx
  21e3c0:	48 89 14 24          	mov    %rdx,(%rsp)
  21e3c4:	a8 01                	test   $0x1,%al
  21e3c6:	75 1e                	jne    21e3e6 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1f6>
  21e3c8:	eb 1a                	jmp    21e3e4 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x1f4>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  21e3ca:	48 8d 3d 5f 44 fe ff 	lea    -0x1bba1(%rip),%rdi        # 202830 <str.2>
  21e3d1:	48 8d 15 d0 ae 01 00 	lea    0x1aed0(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e3d8:	be 24 00 00 00       	mov    $0x24,%esi
  21e3dd:	e8 7e 50 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e3e2:	0f 0b                	ud2    
            }
  21e3e4:	eb 1a                	jmp    21e400 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h57bb752523119243E+0x210>
                bits >> range.start
  21e3e6:	48 8d 3d 43 44 fe ff 	lea    -0x1bbbd(%rip),%rdi        # 202830 <str.2>
  21e3ed:	48 8d 15 b4 ae 01 00 	lea    0x1aeb4(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e3f4:	be 24 00 00 00       	mov    $0x24,%esi
  21e3f9:	e8 62 50 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e3fe:	0f 0b                	ud2    
  21e400:	48 8b 04 24          	mov    (%rsp),%rax
            }
  21e404:	48 83 c4 78          	add    $0x78,%rsp
  21e408:	c3                   	retq   
  21e409:	cc                   	int3   
  21e40a:	cc                   	int3   
  21e40b:	cc                   	int3   
  21e40c:	cc                   	int3   
  21e40d:	cc                   	int3   
  21e40e:	cc                   	int3   
  21e40f:	cc                   	int3   

000000000021e410 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E>:
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  21e410:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  21e417:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  21e41c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  21e421:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  21e428:	00 
  21e429:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  21e430:	00 
  21e431:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  21e438:	00 
  21e439:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  21e440:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  21e441:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  21e448:	00 
  21e449:	be 40 00 00 00       	mov    $0x40,%esi
  21e44e:	e8 6d 04 00 00       	callq  21e8c0 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>
  21e453:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21e45a:	00 
  21e45b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21e462:	00 
  21e463:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  21e46a:	00 
  21e46b:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  21e472:	00 
  21e473:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21e47a:	00 
                assert!(range.start < Self::BIT_LENGTH);
  21e47b:	48 83 f8 40          	cmp    $0x40,%rax
  21e47f:	0f 92 c0             	setb   %al
  21e482:	34 ff                	xor    $0xff,%al
  21e484:	a8 01                	test   $0x1,%al
  21e486:	75 17                	jne    21e49f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x8f>
  21e488:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21e48f:	00 
                assert!(range.end <= Self::BIT_LENGTH);
  21e490:	48 83 f8 40          	cmp    $0x40,%rax
  21e494:	0f 96 c0             	setbe  %al
  21e497:	34 ff                	xor    $0xff,%al
  21e499:	a8 01                	test   $0x1,%al
  21e49b:	75 3a                	jne    21e4d7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xc7>
  21e49d:	eb 1a                	jmp    21e4b9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xa9>
                assert!(range.start < Self::BIT_LENGTH);
  21e49f:	48 8d 3d 46 42 fe ff 	lea    -0x1bdba(%rip),%rdi        # 2026ec <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  21e4a6:	48 8d 15 fb ad 01 00 	lea    0x1adfb(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e4ad:	be 30 00 00 00       	mov    $0x30,%esi
  21e4b2:	e8 a9 4f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e4b7:	0f 0b                	ud2    
  21e4b9:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  21e4c0:	00 
  21e4c1:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21e4c8:	00 
                assert!(range.start < range.end);
  21e4c9:	48 39 c8             	cmp    %rcx,%rax
  21e4cc:	0f 92 c0             	setb   %al
  21e4cf:	34 ff                	xor    $0xff,%al
  21e4d1:	a8 01                	test   $0x1,%al
  21e4d3:	75 3d                	jne    21e512 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x102>
  21e4d5:	eb 1a                	jmp    21e4f1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0xe1>
                assert!(range.end <= Self::BIT_LENGTH);
  21e4d7:	48 8d 3d 99 42 fe ff 	lea    -0x1bd67(%rip),%rdi        # 202777 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0x8b>
  21e4de:	48 8d 15 c3 ad 01 00 	lea    0x1adc3(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e4e5:	be 2f 00 00 00       	mov    $0x2f,%esi
  21e4ea:	e8 71 4f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e4ef:	0f 0b                	ud2    
  21e4f1:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21e4f8:	00 
  21e4f9:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21e500:	00 
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e501:	48 29 c8             	sub    %rcx,%rax
  21e504:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21e509:	0f 92 c0             	setb   %al
  21e50c:	a8 01                	test   $0x1,%al
  21e50e:	75 37                	jne    21e547 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x137>
  21e510:	eb 1a                	jmp    21e52c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x11c>
                assert!(range.start < range.end);
  21e512:	48 8d 3d 8d 42 fe ff 	lea    -0x1bd73(%rip),%rdi        # 2027a6 <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE+0xba>
  21e519:	48 8d 15 88 ad 01 00 	lea    0x1ad88(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e520:	be 29 00 00 00       	mov    $0x29,%esi
  21e525:	e8 36 4f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e52a:	0f 0b                	ud2    
  21e52c:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e531:	b8 40 00 00 00       	mov    $0x40,%eax
  21e536:	48 29 c8             	sub    %rcx,%rax
  21e539:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21e53e:	0f 92 c0             	setb   %al
  21e541:	a8 01                	test   $0x1,%al
  21e543:	75 46                	jne    21e58b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x17b>
  21e545:	eb 1a                	jmp    21e561 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x151>
  21e547:	48 8d 3d 82 42 fe ff 	lea    -0x1bd7e(%rip),%rdi        # 2027d0 <str.0>
  21e54e:	48 8d 15 53 ad 01 00 	lea    0x1ad53(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e555:	be 21 00 00 00       	mov    $0x21,%esi
  21e55a:	e8 01 4f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e55f:	0f 0b                	ud2    
  21e561:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  21e566:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  21e56b:	48 89 c8             	mov    %rcx,%rax
  21e56e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e572:	48 83 f8 00          	cmp    $0x0,%rax
  21e576:	0f 95 c0             	setne  %al
  21e579:	48 83 e1 3f          	and    $0x3f,%rcx
  21e57d:	48 d3 e2             	shl    %cl,%rdx
  21e580:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21e585:	a8 01                	test   $0x1,%al
  21e587:	75 3d                	jne    21e5c6 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1b6>
  21e589:	eb 1a                	jmp    21e5a5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x195>
  21e58b:	48 8d 3d 3e 42 fe ff 	lea    -0x1bdc2(%rip),%rdi        # 2027d0 <str.0>
  21e592:	48 8d 15 0f ad 01 00 	lea    0x1ad0f(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e599:	be 21 00 00 00       	mov    $0x21,%esi
  21e59e:	e8 bd 4e 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e5a3:	0f 0b                	ud2    
  21e5a5:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21e5ac:	00 
  21e5ad:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  21e5b4:	00 
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21e5b5:	48 29 c8             	sub    %rcx,%rax
  21e5b8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21e5bd:	0f 92 c0             	setb   %al
  21e5c0:	a8 01                	test   $0x1,%al
  21e5c2:	75 37                	jne    21e5fb <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1eb>
  21e5c4:	eb 1a                	jmp    21e5e0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x1d0>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e5c6:	48 8d 3d 33 42 fe ff 	lea    -0x1bdcd(%rip),%rdi        # 202800 <str.1>
  21e5cd:	48 8d 15 d4 ac 01 00 	lea    0x1acd4(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e5d4:	be 23 00 00 00       	mov    $0x23,%esi
  21e5d9:	e8 82 4e 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e5de:	0f 0b                	ud2    
  21e5e0:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21e5e5:	b8 40 00 00 00       	mov    $0x40,%eax
  21e5ea:	48 29 c8             	sub    %rcx,%rax
  21e5ed:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21e5f2:	0f 92 c0             	setb   %al
  21e5f5:	a8 01                	test   $0x1,%al
  21e5f7:	75 46                	jne    21e63f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x22f>
  21e5f9:	eb 1a                	jmp    21e615 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x205>
  21e5fb:	48 8d 3d ce 41 fe ff 	lea    -0x1be32(%rip),%rdi        # 2027d0 <str.0>
  21e602:	48 8d 15 9f ac 01 00 	lea    0x1ac9f(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e609:	be 21 00 00 00       	mov    $0x21,%esi
  21e60e:	e8 4d 4e 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e613:	0f 0b                	ud2    
  21e615:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21e61a:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e61f:	48 89 c8             	mov    %rcx,%rax
  21e622:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e626:	48 83 f8 00          	cmp    $0x0,%rax
  21e62a:	0f 95 c0             	setne  %al
  21e62d:	48 83 e1 3f          	and    $0x3f,%rcx
  21e631:	48 d3 ea             	shr    %cl,%rdx
  21e634:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21e639:	a8 01                	test   $0x1,%al
  21e63b:	75 34                	jne    21e671 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x261>
  21e63d:	eb 1a                	jmp    21e659 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x249>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  21e63f:	48 8d 3d 8a 41 fe ff 	lea    -0x1be76(%rip),%rdi        # 2027d0 <str.0>
  21e646:	48 8d 15 5b ac 01 00 	lea    0x1ac5b(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e64d:	be 21 00 00 00       	mov    $0x21,%esi
  21e652:	e8 09 4e 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e657:	0f 0b                	ud2    
  21e659:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21e65e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e663:	48 39 c8             	cmp    %rcx,%rax
  21e666:	0f 94 c0             	sete   %al
  21e669:	34 ff                	xor    $0xff,%al
  21e66b:	a8 01                	test   $0x1,%al
  21e66d:	75 3a                	jne    21e6a9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x299>
  21e66f:	eb 1a                	jmp    21e68b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x27b>
  21e671:	48 8d 3d b8 41 fe ff 	lea    -0x1be48(%rip),%rdi        # 202830 <str.2>
  21e678:	48 8d 15 29 ac 01 00 	lea    0x1ac29(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e67f:	be 24 00 00 00       	mov    $0x24,%esi
  21e684:	e8 d7 4d 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e689:	0f 0b                	ud2    
  21e68b:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21e692:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21e693:	b8 40 00 00 00       	mov    $0x40,%eax
  21e698:	48 29 c8             	sub    %rcx,%rax
  21e69b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21e6a0:	0f 92 c0             	setb   %al
  21e6a3:	a8 01                	test   $0x1,%al
  21e6a5:	75 48                	jne    21e6ef <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2df>
  21e6a7:	eb 1a                	jmp    21e6c3 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2b3>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  21e6a9:	48 8d 3d a4 41 fe ff 	lea    -0x1be5c(%rip),%rdi        # 202854 <str.2+0x24>
  21e6b0:	48 8d 15 f1 ab 01 00 	lea    0x1abf1(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e6b7:	be 21 00 00 00       	mov    $0x21,%esi
  21e6bc:	e8 9f 4d 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e6c1:	0f 0b                	ud2    
  21e6c3:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21e6c8:	48 89 c8             	mov    %rcx,%rax
  21e6cb:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e6cf:	48 83 f8 00          	cmp    $0x0,%rax
  21e6d3:	0f 95 c0             	setne  %al
  21e6d6:	48 83 e1 3f          	and    $0x3f,%rcx
  21e6da:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  21e6e1:	48 d3 e2             	shl    %cl,%rdx
  21e6e4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21e6e9:	a8 01                	test   $0x1,%al
  21e6eb:	75 3a                	jne    21e727 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x317>
  21e6ed:	eb 1a                	jmp    21e709 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x2f9>
  21e6ef:	48 8d 3d da 40 fe ff 	lea    -0x1bf26(%rip),%rdi        # 2027d0 <str.0>
  21e6f6:	48 8d 15 ab ab 01 00 	lea    0x1abab(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e6fd:	be 21 00 00 00       	mov    $0x21,%esi
  21e702:	e8 59 4d 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e707:	0f 0b                	ud2    
  21e709:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  21e710:	00 
                                    (Self::BIT_LENGTH - range.end) >>
  21e711:	b8 40 00 00 00       	mov    $0x40,%eax
  21e716:	48 29 c8             	sub    %rcx,%rax
  21e719:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21e71e:	0f 92 c0             	setb   %al
  21e721:	a8 01                	test   $0x1,%al
  21e723:	75 46                	jne    21e76b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x35b>
  21e725:	eb 1a                	jmp    21e741 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x331>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21e727:	48 8d 3d d2 40 fe ff 	lea    -0x1bf2e(%rip),%rdi        # 202800 <str.1>
  21e72e:	48 8d 15 73 ab 01 00 	lea    0x1ab73(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e735:	be 23 00 00 00       	mov    $0x23,%esi
  21e73a:	e8 21 4d 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e73f:	0f 0b                	ud2    
  21e741:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  21e746:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21e74b:	48 89 c8             	mov    %rcx,%rax
  21e74e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e752:	48 83 f8 00          	cmp    $0x0,%rax
  21e756:	0f 95 c0             	setne  %al
  21e759:	48 83 e1 3f          	and    $0x3f,%rcx
  21e75d:	48 d3 ea             	shr    %cl,%rdx
  21e760:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  21e765:	a8 01                	test   $0x1,%al
  21e767:	75 49                	jne    21e7b2 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3a2>
  21e769:	eb 1a                	jmp    21e785 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x375>
                                    (Self::BIT_LENGTH - range.end) >>
  21e76b:	48 8d 3d 5e 40 fe ff 	lea    -0x1bfa2(%rip),%rdi        # 2027d0 <str.0>
  21e772:	48 8d 15 2f ab 01 00 	lea    0x1ab2f(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e779:	be 21 00 00 00       	mov    $0x21,%esi
  21e77e:	e8 dd 4c 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e783:	0f 0b                	ud2    
  21e785:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21e78a:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21e791:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21e792:	48 89 c8             	mov    %rcx,%rax
  21e795:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e799:	48 83 f8 00          	cmp    $0x0,%rax
  21e79d:	0f 95 c0             	setne  %al
  21e7a0:	48 83 e1 3f          	and    $0x3f,%rcx
  21e7a4:	48 d3 ea             	shr    %cl,%rdx
  21e7a7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21e7ac:	a8 01                	test   $0x1,%al
  21e7ae:	75 49                	jne    21e7f9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3e9>
  21e7b0:	eb 1a                	jmp    21e7cc <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x3bc>
  21e7b2:	48 8d 3d 77 40 fe ff 	lea    -0x1bf89(%rip),%rdi        # 202830 <str.2>
  21e7b9:	48 8d 15 e8 aa 01 00 	lea    0x1aae8(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e7c0:	be 24 00 00 00       	mov    $0x24,%esi
  21e7c5:	e8 96 4c 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e7ca:	0f 0b                	ud2    
  21e7cc:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  21e7d1:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21e7d8:	00 
  21e7d9:	48 89 c8             	mov    %rcx,%rax
  21e7dc:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e7e0:	48 83 f8 00          	cmp    $0x0,%rax
  21e7e4:	0f 95 c0             	setne  %al
  21e7e7:	48 83 e1 3f          	and    $0x3f,%rcx
  21e7eb:	48 d3 e2             	shl    %cl,%rdx
  21e7ee:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21e7f3:	a8 01                	test   $0x1,%al
  21e7f5:	75 66                	jne    21e85d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x44d>
  21e7f7:	eb 1a                	jmp    21e813 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x403>
  21e7f9:	48 8d 3d 30 40 fe ff 	lea    -0x1bfd0(%rip),%rdi        # 202830 <str.2>
  21e800:	48 8d 15 a1 aa 01 00 	lea    0x1aaa1(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e807:	be 24 00 00 00       	mov    $0x24,%esi
  21e80c:	e8 4f 4c 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e811:	0f 0b                	ud2    
  21e813:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  21e818:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  21e81f:	00 
  21e820:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  21e825:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21e82a:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
  21e82e:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  21e835:	00 
                *self = (*self & bitmask) | (value << range.start);
  21e836:	48 23 06             	and    (%rsi),%rax
  21e839:	48 89 04 24          	mov    %rax,(%rsp)
  21e83d:	48 89 c8             	mov    %rcx,%rax
  21e840:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  21e844:	48 83 f8 00          	cmp    $0x0,%rax
  21e848:	0f 95 c0             	setne  %al
  21e84b:	48 83 e1 3f          	and    $0x3f,%rcx
  21e84f:	48 d3 e2             	shl    %cl,%rdx
  21e852:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21e857:	a8 01                	test   $0x1,%al
  21e859:	75 32                	jne    21e88d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x47d>
  21e85b:	eb 1a                	jmp    21e877 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x467>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  21e85d:	48 8d 3d 9c 3f fe ff 	lea    -0x1c064(%rip),%rdi        # 202800 <str.1>
  21e864:	48 8d 15 3d aa 01 00 	lea    0x1aa3d(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e86b:	be 23 00 00 00       	mov    $0x23,%esi
  21e870:	e8 eb 4b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e875:	0f 0b                	ud2    
  21e877:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21e87c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21e881:	48 8b 0c 24          	mov    (%rsp),%rcx
                *self = (*self & bitmask) | (value << range.start);
  21e885:	48 09 d1             	or     %rdx,%rcx
  21e888:	48 89 08             	mov    %rcx,(%rax)
            }
  21e88b:	eb 1a                	jmp    21e8a7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h15dffb5764b73e67E+0x497>
                *self = (*self & bitmask) | (value << range.start);
  21e88d:	48 8d 3d 6c 3f fe ff 	lea    -0x1c094(%rip),%rdi        # 202800 <str.1>
  21e894:	48 8d 15 0d aa 01 00 	lea    0x1aa0d(%rip),%rdx        # 2392a8 <memcmp+0x2cf8>
  21e89b:	be 23 00 00 00       	mov    $0x23,%esi
  21e8a0:	e8 bb 4b 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e8a5:	0f 0b                	ud2    
  21e8a7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
            }
  21e8ac:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  21e8b3:	c3                   	retq   
  21e8b4:	cc                   	int3   
  21e8b5:	cc                   	int3   
  21e8b6:	cc                   	int3   
  21e8b7:	cc                   	int3   
  21e8b8:	cc                   	int3   
  21e8b9:	cc                   	int3   
  21e8ba:	cc                   	int3   
  21e8bb:	cc                   	int3   
  21e8bc:	cc                   	int3   
  21e8bd:	cc                   	int3   
  21e8be:	cc                   	int3   
  21e8bf:	cc                   	int3   

000000000021e8c0 <_ZN9bit_field16to_regular_range17he48635dc863318e4E>:
            );
        }
    }
}

fn to_regular_range<T: RangeBounds<usize>>(generic_rage: &T, bit_length: usize) -> Range<usize> {
  21e8c0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21e8c7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21e8cc:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21e8d1:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  21e8d6:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  21e8dd:	00 
    let start = match generic_rage.start_bound() {
  21e8de:	e8 4d e2 ff ff       	callq  21cb30 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h54fdde9cf6df2759E>
  21e8e3:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21e8e8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21e8ed:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21e8f2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21e8f7:	48 85 c0             	test   %rax,%rax
  21e8fa:	74 13                	je     21e90f <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x4f>
  21e8fc:	eb 00                	jmp    21e8fe <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x3e>
  21e8fe:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  21e903:	48 83 e8 01          	sub    $0x1,%rax
  21e907:	74 1d                	je     21e926 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x66>
  21e909:	eb 00                	jmp    21e90b <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x4b>
  21e90b:	eb 3b                	jmp    21e948 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x88>
  21e90d:	0f 0b                	ud2    
        Bound::Excluded(&value) => value + 1,
        Bound::Included(&value) => value,
  21e90f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21e914:	48 8b 00             	mov    (%rax),%rax
  21e917:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21e91e:	00 
  21e91f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21e924:	eb 2b                	jmp    21e951 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x91>
        Bound::Excluded(&value) => value + 1,
  21e926:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21e92b:	48 8b 00             	mov    (%rax),%rax
  21e92e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21e935:	00 
  21e936:	48 83 c0 01          	add    $0x1,%rax
  21e93a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21e93f:	0f 92 c0             	setb   %al
  21e942:	a8 01                	test   $0x1,%al
  21e944:	75 2d                	jne    21e973 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xb3>
  21e946:	eb 1f                	jmp    21e967 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xa7>
        Bound::Unbounded => 0,
  21e948:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  21e94f:	00 00 
  21e951:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    };
    let end = match generic_rage.end_bound() {
  21e956:	e8 05 e2 ff ff       	callq  21cb60 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h0beee5ac9a35870cE>
  21e95b:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  21e960:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21e965:	eb 26                	jmp    21e98d <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xcd>
  21e967:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Bound::Excluded(&value) => value + 1,
  21e96c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21e971:	eb de                	jmp    21e951 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x91>
  21e973:	48 8d 3d 06 3f fe ff 	lea    -0x1c0fa(%rip),%rdi        # 202880 <str.3>
  21e97a:	48 8d 15 3f a9 01 00 	lea    0x1a93f(%rip),%rdx        # 2392c0 <memcmp+0x2d10>
  21e981:	be 1c 00 00 00       	mov    $0x1c,%esi
  21e986:	e8 d5 4a 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21e98b:	0f 0b                	ud2    
    let end = match generic_rage.end_bound() {
  21e98d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21e992:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21e997:	48 85 c0             	test   %rax,%rax
  21e99a:	74 13                	je     21e9af <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xef>
  21e99c:	eb 00                	jmp    21e99e <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xde>
  21e99e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21e9a3:	48 83 e8 01          	sub    $0x1,%rax
  21e9a7:	74 28                	je     21e9d1 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x111>
  21e9a9:	eb 00                	jmp    21e9ab <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0xeb>
  21e9ab:	eb 3b                	jmp    21e9e8 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x128>
  21e9ad:	0f 0b                	ud2    
        Bound::Excluded(&value) => value,
        Bound::Included(&value) => value + 1,
  21e9af:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21e9b4:	48 8b 00             	mov    (%rax),%rax
  21e9b7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21e9be:	00 
  21e9bf:	48 83 c0 01          	add    $0x1,%rax
  21e9c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21e9c8:	0f 92 c0             	setb   %al
  21e9cb:	a8 01                	test   $0x1,%al
  21e9cd:	75 55                	jne    21ea24 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x164>
  21e9cf:	eb 47                	jmp    21ea18 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x158>
        Bound::Excluded(&value) => value,
  21e9d1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21e9d6:	48 8b 00             	mov    (%rax),%rax
  21e9d9:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21e9e0:	00 
  21e9e1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21e9e6:	eb 0a                	jmp    21e9f2 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x132>
  21e9e8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Bound::Unbounded => bit_length,
  21e9ed:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };

    start..end
  21e9f2:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  21e9f7:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  21e9fc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21ea01:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
}
  21ea06:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21ea0b:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21ea10:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21ea17:	c3                   	retq   
  21ea18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        Bound::Included(&value) => value + 1,
  21ea1d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21ea22:	eb ce                	jmp    21e9f2 <_ZN9bit_field16to_regular_range17he48635dc863318e4E+0x132>
  21ea24:	48 8d 3d 55 3e fe ff 	lea    -0x1c1ab(%rip),%rdi        # 202880 <str.3>
  21ea2b:	48 8d 15 a6 a8 01 00 	lea    0x1a8a6(%rip),%rdx        # 2392d8 <memcmp+0x2d28>
  21ea32:	be 1c 00 00 00       	mov    $0x1c,%esi
  21ea37:	e8 24 4a 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21ea3c:	0f 0b                	ud2    
  21ea3e:	cc                   	int3   
  21ea3f:	cc                   	int3   

000000000021ea40 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17habc6910e9567a3dbE>:
    fn from(t: T) -> T {
  21ea40:	50                   	push   %rax
    }
  21ea41:	58                   	pop    %rax
  21ea42:	c3                   	retq   
  21ea43:	cc                   	int3   
  21ea44:	cc                   	int3   
  21ea45:	cc                   	int3   
  21ea46:	cc                   	int3   
  21ea47:	cc                   	int3   
  21ea48:	cc                   	int3   
  21ea49:	cc                   	int3   
  21ea4a:	cc                   	int3   
  21ea4b:	cc                   	int3   
  21ea4c:	cc                   	int3   
  21ea4d:	cc                   	int3   
  21ea4e:	cc                   	int3   
  21ea4f:	cc                   	int3   

000000000021ea50 <_ZN4core9panicking13assert_failed17h3edc834fd7d50ce8E>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
  21ea50:	48 83 ec 58          	sub    $0x58,%rsp
  21ea54:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21ea59:	48 89 d1             	mov    %rdx,%rcx
  21ea5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21ea61:	40 88 f8             	mov    %dil,%al
  21ea64:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21ea69:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21ea6e:	88 44 24 57          	mov    %al,0x57(%rsp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
  21ea72:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  21ea76:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21ea7b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  21ea7f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  21ea84:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  21ea88:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21ea8d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  21ea91:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21ea96:	48 8b 0a             	mov    (%rdx),%rcx
  21ea99:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  21ea9d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21eaa2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21eaa7:	48 89 e1             	mov    %rsp,%rcx
  21eaaa:	4c 89 01             	mov    %r8,(%rcx)
  21eaad:	0f b6 f8             	movzbl %al,%edi
  21eab0:	4c 8d 05 39 a8 01 00 	lea    0x1a839(%rip),%r8        # 2392f0 <memcmp+0x2d40>
  21eab7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  21eabc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  21eac1:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  21eac6:	4c 89 c2             	mov    %r8,%rdx
  21eac9:	e8 a2 4a 01 00       	callq  233570 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  21eace:	0f 0b                	ud2    

000000000021ead0 <_ZN4core9panicking13assert_failed17hf21d4688260afdf9E>:
pub fn assert_failed<T, U>(
  21ead0:	48 83 ec 58          	sub    $0x58,%rsp
  21ead4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21ead9:	48 89 d1             	mov    %rdx,%rcx
  21eadc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21eae1:	40 88 f8             	mov    %dil,%al
  21eae4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21eae9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21eaee:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  21eaf2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  21eaf6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21eafb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  21eaff:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  21eb04:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  21eb08:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21eb0d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  21eb11:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21eb16:	48 8b 0a             	mov    (%rdx),%rcx
  21eb19:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  21eb1d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21eb22:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21eb27:	48 89 e1             	mov    %rsp,%rcx
  21eb2a:	4c 89 01             	mov    %r8,(%rcx)
  21eb2d:	0f b6 f8             	movzbl %al,%edi
  21eb30:	4c 8d 05 d9 a7 01 00 	lea    0x1a7d9(%rip),%r8        # 239310 <memcmp+0x2d60>
  21eb37:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  21eb3c:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  21eb41:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  21eb46:	4c 89 c2             	mov    %r8,%rdx
  21eb49:	e8 22 4a 01 00       	callq  233570 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  21eb4e:	0f 0b                	ud2    

000000000021eb50 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>:
pub fn assert_failed<T, U>(
  21eb50:	48 83 ec 58          	sub    $0x58,%rsp
  21eb54:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  21eb59:	48 89 d1             	mov    %rdx,%rcx
  21eb5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21eb61:	40 88 f8             	mov    %dil,%al
  21eb64:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21eb69:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  21eb6e:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  21eb72:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  21eb76:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  21eb7b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  21eb7f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  21eb84:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  21eb88:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  21eb8d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  21eb91:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21eb96:	48 8b 0a             	mov    (%rdx),%rcx
  21eb99:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  21eb9d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21eba2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21eba7:	48 89 e1             	mov    %rsp,%rcx
  21ebaa:	4c 89 01             	mov    %r8,(%rcx)
  21ebad:	0f b6 f8             	movzbl %al,%edi
  21ebb0:	4c 8d 05 79 a7 01 00 	lea    0x1a779(%rip),%r8        # 239330 <memcmp+0x2d80>
  21ebb7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  21ebbc:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  21ebc1:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  21ebc6:	4c 89 c2             	mov    %r8,%rdx
  21ebc9:	e8 a2 49 01 00       	callq  233570 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  21ebce:	0f 0b                	ud2    

000000000021ebd0 <_ZN4core9panicking13panic_display17h3ec953e451efd01bE>:
pub fn panic_display<T: fmt::Display>(x: &T) -> ! {
  21ebd0:	48 83 ec 78          	sub    $0x78,%rsp
  21ebd4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21ebd9:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    panic_fmt(format_args!("{}", *x));
  21ebde:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  21ebe3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21ebe8:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  21ebed:	48 8b 35 2c c5 01 00 	mov    0x1c52c(%rip),%rsi        # 23b120 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  21ebf4:	e8 17 29 01 00       	callq  231510 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  21ebf9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ebfe:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21ec03:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21ec08:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21ec0d:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  21ec12:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21ec17:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
  21ec1c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21ec21:	48 8d 35 28 a7 01 00 	lea    0x1a728(%rip),%rsi        # 239350 <memcmp+0x2da0>
  21ec28:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  21ec2e:	4c 89 c2             	mov    %r8,%rdx
  21ec31:	e8 8a 76 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21ec36:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21ec3b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21ec40:	e8 eb 48 01 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21ec45:	0f 0b                	ud2    
  21ec47:	cc                   	int3   
  21ec48:	cc                   	int3   
  21ec49:	cc                   	int3   
  21ec4a:	cc                   	int3   
  21ec4b:	cc                   	int3   
  21ec4c:	cc                   	int3   
  21ec4d:	cc                   	int3   
  21ec4e:	cc                   	int3   
  21ec4f:	cc                   	int3   

000000000021ec50 <_ZN5alloc5alloc12alloc_zeroed17h36791df9e7ead9a4E>:
///     dealloc(ptr, layout);
/// }
/// ```
#[stable(feature = "global_alloc", since = "1.28.0")]
#[inline]
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
  21ec50:	48 83 ec 28          	sub    $0x28,%rsp
  21ec54:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21ec59:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
  21ec5e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21ec63:	e8 e8 b7 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21ec68:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ec6d:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21ec72:	e8 e9 b7 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21ec77:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21ec7c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21ec81:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21ec86:	e8 35 e1 00 00       	callq  22cdc0 <__rust_alloc_zeroed>
  21ec8b:	48 89 04 24          	mov    %rax,(%rsp)
  21ec8f:	48 8b 04 24          	mov    (%rsp),%rax
}
  21ec93:	48 83 c4 28          	add    $0x28,%rsp
  21ec97:	c3                   	retq   
  21ec98:	cc                   	int3   
  21ec99:	cc                   	int3   
  21ec9a:	cc                   	int3   
  21ec9b:	cc                   	int3   
  21ec9c:	cc                   	int3   
  21ec9d:	cc                   	int3   
  21ec9e:	cc                   	int3   
  21ec9f:	cc                   	int3   

000000000021eca0 <_ZN5alloc5alloc5alloc17h7eb3f054a1687752E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
  21eca0:	48 83 ec 28          	sub    $0x28,%rsp
  21eca4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21eca9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { __rust_alloc(layout.size(), layout.align()) }
  21ecae:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21ecb3:	e8 98 b7 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21ecb8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21ecbd:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21ecc2:	e8 99 b7 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21ecc7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21eccc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21ecd1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21ecd6:	e8 b5 e0 00 00       	callq  22cd90 <__rust_alloc>
  21ecdb:	48 89 04 24          	mov    %rax,(%rsp)
  21ecdf:	48 8b 04 24          	mov    (%rsp),%rax
}
  21ece3:	48 83 c4 28          	add    $0x28,%rsp
  21ece7:	c3                   	retq   
  21ece8:	cc                   	int3   
  21ece9:	cc                   	int3   
  21ecea:	cc                   	int3   
  21eceb:	cc                   	int3   
  21ecec:	cc                   	int3   
  21eced:	cc                   	int3   
  21ecee:	cc                   	int3   
  21ecef:	cc                   	int3   

000000000021ecf0 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>:

#[cfg(not(test))]
impl Global {
    #[inline]
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
  21ecf0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  21ecf7:	88 c8                	mov    %cl,%al
  21ecf9:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  21ecfd:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  21ed02:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  21ed07:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  21ed0c:	24 01                	and    $0x1,%al
  21ed0e:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
        match layout.size() {
  21ed15:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21ed1a:	e8 31 b7 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21ed1f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21ed24:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21ed29:	48 83 f8 00          	cmp    $0x0,%rax
  21ed2d:	75 14                	jne    21ed43 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x53>
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
  21ed2f:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  21ed34:	e8 e7 b8 ff ff       	callq  21a620 <_ZN4core5alloc6layout6Layout8dangling17he0ad074fb5415605E>
  21ed39:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21ed3e:	e9 ec 00 00 00       	jmpq   21ee2f <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x13f>
  21ed43:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  21ed47:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
            // SAFETY: `layout` is non-zero in size,
            size => unsafe {
  21ed4c:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  21ed53:	00 
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
  21ed54:	a8 01                	test   $0x1,%al
  21ed56:	75 16                	jne    21ed6e <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x7e>
  21ed58:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21ed5d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21ed62:	e8 39 ff ff ff       	callq  21eca0 <_ZN5alloc5alloc5alloc17h7eb3f054a1687752E>
  21ed67:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21ed6c:	eb 27                	jmp    21ed95 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xa5>
  21ed6e:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21ed73:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21ed78:	e8 d3 fe ff ff       	callq  21ec50 <_ZN5alloc5alloc12alloc_zeroed17h36791df9e7ead9a4E>
  21ed7d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21ed82:	eb 00                	jmp    21ed84 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x94>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  21ed84:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  21ed89:	e8 f2 01 01 00       	callq  22ef80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  21ed8e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ed93:	eb 02                	jmp    21ed97 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xa7>
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
  21ed95:	eb ed                	jmp    21ed84 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x94>
  21ed97:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  21ed9c:	e8 1f 0b ff ff       	callq  20f8c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>
  21eda1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21eda6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21edab:	e8 30 c5 fe ff       	callq  20b2e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>
  21edb0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21edb5:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  21edba:	48 85 c0             	test   %rax,%rax
  21edbd:	0f 94 c0             	sete   %al
  21edc0:	0f b6 c0             	movzbl %al,%eax
  21edc3:	75 06                	jne    21edcb <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xdb>
  21edc5:	eb 00                	jmp    21edc7 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0xd7>
  21edc7:	eb 2d                	jmp    21edf6 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x106>
  21edc9:	0f 0b                	ud2    
  21edcb:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  21edd0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  21edd5:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  21eddc:	00 
  21eddd:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  21ede4:	00 
                Ok(NonNull::slice_from_raw_parts(ptr, size))
  21ede5:	e8 d6 93 00 00       	callq  2281c0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  21edea:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21edef:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21edf4:	eb 23                	jmp    21ee19 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x129>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  21edf6:	e8 35 b7 fe ff       	callq  20a530 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  21edfb:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  21ee00:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
            },
        }
    }
  21ee05:	eb 00                	jmp    21ee07 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x117>
  21ee07:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21ee0c:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  21ee11:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  21ee18:	c3                   	retq   
  21ee19:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21ee1e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
                Ok(NonNull::slice_from_raw_parts(ptr, size))
  21ee23:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21ee28:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  21ee2d:	eb d8                	jmp    21ee07 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x117>
  21ee2f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
  21ee34:	31 c0                	xor    %eax,%eax
  21ee36:	89 c6                	mov    %eax,%esi
  21ee38:	e8 83 93 00 00       	callq  2281c0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  21ee3d:	48 89 04 24          	mov    %rax,(%rsp)
  21ee41:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21ee46:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21ee4b:	48 8b 0c 24          	mov    (%rsp),%rcx
  21ee4f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21ee54:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21ee59:	eb d2                	jmp    21ee2d <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE+0x13d>
  21ee5b:	cc                   	int3   
  21ee5c:	cc                   	int3   
  21ee5d:	cc                   	int3   
  21ee5e:	cc                   	int3   
  21ee5f:	cc                   	int3   

000000000021ee60 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E>:

    // SAFETY: Same as `Allocator::grow`
    #[inline]
    unsafe fn grow_impl(
  21ee60:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  21ee67:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  21ee6e:	00 
  21ee6f:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  21ee76:	00 
  21ee77:	8a 84 24 d0 01 00 00 	mov    0x1d0(%rsp),%al
  21ee7e:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  21ee85:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  21ee8c:	00 
  21ee8d:	48 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%rsp)
  21ee94:	00 
  21ee95:	4c 89 84 24 c8 00 00 	mov    %r8,0xc8(%rsp)
  21ee9c:	00 
  21ee9d:	4c 89 8c 24 d0 00 00 	mov    %r9,0xd0(%rsp)
  21eea4:	00 
  21eea5:	48 89 bc 24 08 01 00 	mov    %rdi,0x108(%rsp)
  21eeac:	00 
  21eead:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
  21eeb4:	00 
  21eeb5:	24 01                	and    $0x1,%al
  21eeb7:	88 84 24 1f 01 00 00 	mov    %al,0x11f(%rsp)
        debug_assert!(
            new_layout.size() >= old_layout.size(),
            "`new_layout.size()` must be greater than or equal to `old_layout.size()`"
        );

        match old_layout.size() {
  21eebe:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  21eec5:	00 
  21eec6:	e8 85 b5 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21eecb:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21eed2:	00 
  21eed3:	48 83 bc 24 e8 00 00 	cmpq   $0x0,0xe8(%rsp)
  21eeda:	00 00 
  21eedc:	75 3f                	jne    21ef1d <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0xbd>
  21eede:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21eee5:	00 
  21eee6:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
            0 => self.alloc_impl(new_layout, zeroed),
  21eeed:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  21eef4:	00 
  21eef5:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21eefc:	00 
  21eefd:	0f b6 c8             	movzbl %al,%ecx
  21ef00:	83 e1 01             	and    $0x1,%ecx
  21ef03:	e8 e8 fd ff ff       	callq  21ecf0 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  21ef08:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21ef0f:	00 
  21ef10:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21ef17:	00 
  21ef18:	e9 88 03 00 00       	jmpq   21f2a5 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x445>

            // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`
            // as required by safety conditions. Other conditions must be upheld by the caller
            old_size if old_layout.align() == new_layout.align() => unsafe {
  21ef1d:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  21ef24:	00 
  21ef25:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  21ef2c:	00 
  21ef2d:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  21ef34:	00 
  21ef35:	e8 26 b5 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21ef3a:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21ef41:	00 
  21ef42:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21ef49:	00 
  21ef4a:	e8 11 b5 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21ef4f:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21ef56:	00 
  21ef57:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  21ef5e:	00 
  21ef5f:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  21ef66:	00 
  21ef67:	48 39 c8             	cmp    %rcx,%rax
  21ef6a:	74 54                	je     21efc0 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x160>
  21ef6c:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21ef73:	00 
  21ef74:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
            // SAFETY: because `new_layout.size()` must be greater than or equal to `old_size`,
            // both the old and new memory allocation are valid for reads and writes for `old_size`
            // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap
            // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract
            // for `dealloc` must be upheld by the caller.
            old_size => unsafe {
  21ef7b:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  21ef82:	00 
  21ef83:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  21ef88:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  21ef8f:	00 
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  21ef90:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
  21ef97:	00 
  21ef98:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
  21ef9f:	00 
  21efa0:	0f b6 c8             	movzbl %al,%ecx
  21efa3:	83 e1 01             	and    $0x1,%ecx
  21efa6:	e8 45 fd ff ff       	callq  21ecf0 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  21efab:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  21efb2:	00 
  21efb3:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21efba:	00 
  21efbb:	e9 bb 01 00 00       	jmpq   21f17b <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x31b>
            old_size if old_layout.align() == new_layout.align() => unsafe {
  21efc0:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  21efc7:	00 
  21efc8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21efcd:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  21efd4:	00 
                let new_size = new_layout.size();
  21efd5:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  21efdc:	00 
  21efdd:	e8 6e b4 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21efe2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21efe7:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  21efee:	00 
                intrinsics::assume(new_size >= old_layout.size());
  21efef:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  21eff6:	00 
  21eff7:	e8 54 b4 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21effc:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  21f003:	00 
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
  21f004:	e8 b7 1c 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21f009:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21f00e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21f013:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  21f018:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  21f01f:	00 
  21f020:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
  21f027:	00 
  21f028:	e8 d3 02 00 00       	callq  21f300 <_ZN5alloc5alloc7realloc17hc1e628514810d65aE>
  21f02d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21f032:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21f039:	00 
  21f03a:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  21f03f:	e8 3c ff 00 00       	callq  22ef80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  21f044:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21f049:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  21f04e:	e8 6d 08 ff ff       	callq  20f8c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6fed424c83bc443bE>
  21f053:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21f058:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21f05d:	e8 7e c2 fe ff       	callq  20b2e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h86155bcdd2d7466aE>
  21f062:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  21f069:	00 
  21f06a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  21f071:	00 
  21f072:	48 85 c0             	test   %rax,%rax
  21f075:	0f 94 c0             	sete   %al
  21f078:	0f b6 c0             	movzbl %al,%eax
  21f07b:	75 06                	jne    21f083 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x223>
  21f07d:	eb 00                	jmp    21f07f <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x21f>
  21f07f:	eb 2c                	jmp    21f0ad <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x24d>
  21f081:	0f 0b                	ud2    
  21f083:	8a 84 24 b7 00 00 00 	mov    0xb7(%rsp),%al
  21f08a:	48 8b 8c 24 f0 00 00 	mov    0xf0(%rsp),%rcx
  21f091:	00 
  21f092:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  21f097:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  21f09e:	00 
  21f09f:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
  21f0a6:	00 
                if zeroed {
  21f0a7:	a8 01                	test   $0x1,%al
  21f0a9:	75 39                	jne    21f0e4 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x284>
  21f0ab:	eb 1c                	jmp    21f0c9 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x269>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  21f0ad:	e8 7e b4 fe ff       	callq  20a530 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  21f0b2:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21f0b9:	00 
  21f0ba:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21f0c1:	00 
  21f0c2:	eb 00                	jmp    21f0c4 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x264>
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
                self.deallocate(ptr, old_layout);
                Ok(new_ptr)
            },
        }
    }
  21f0c4:	e9 58 01 00 00       	jmpq   21f221 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3c1>
  21f0c9:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  21f0ce:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
  21f0d3:	e8 e8 90 00 00       	callq  2281c0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>
  21f0d8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  21f0dd:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  21f0e2:	eb 78                	jmp    21f15c <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x2fc>
  21f0e4:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  21f0e9:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  21f0ee:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  21f0f5:	00 
  21f0f6:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  21f0fd:	00 
  21f0fe:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  21f105:	00 
  21f106:	48 89 8c 24 b8 01 00 	mov    %rcx,0x1b8(%rsp)
  21f10d:	00 
        unsafe { intrinsics::offset(self, count) as *mut T }
  21f10e:	48 01 c8             	add    %rcx,%rax
  21f111:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  21f118:	00 
  21f119:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  21f120:	00 
  21f121:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21f126:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  21f12b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  21f130:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
  21f135:	48 29 c2             	sub    %rax,%rdx
  21f138:	48 89 bc 24 88 01 00 	mov    %rdi,0x188(%rsp)
  21f13f:	00 
  21f140:	c6 84 24 97 01 00 00 	movb   $0x0,0x197(%rsp)
  21f147:	00 
  21f148:	48 89 94 24 98 01 00 	mov    %rdx,0x198(%rsp)
  21f14f:	00 
        unsafe { write_bytes(self, val, count) }
  21f150:	31 f6                	xor    %esi,%esi
  21f152:	e8 59 96 00 00       	callq  2287b0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>
                if zeroed {
  21f157:	e9 6d ff ff ff       	jmpq   21f0c9 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x269>
  21f15c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21f161:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
  21f166:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  21f16d:	00 
  21f16e:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  21f175:	00 
    }
  21f176:	e9 a6 00 00 00       	jmpq   21f221 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3c1>
  21f17b:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  21f182:	00 
  21f183:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  21f18a:	00 
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  21f18b:	e8 e0 be fe ff       	callq  20b070 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h20ccf74d0e849636E>
  21f190:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  21f197:	00 
  21f198:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  21f19f:	00 
  21f1a0:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  21f1a7:	00 
  21f1a8:	48 85 c0             	test   %rax,%rax
  21f1ab:	0f 94 c0             	sete   %al
  21f1ae:	0f b6 c0             	movzbl %al,%eax
  21f1b1:	75 06                	jne    21f1b9 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x359>
  21f1b3:	eb 00                	jmp    21f1b5 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x355>
  21f1b5:	eb 50                	jmp    21f207 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3a7>
  21f1b7:	0f 0b                	ud2    
  21f1b9:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  21f1c0:	00 
  21f1c1:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
  21f1c8:	00 
  21f1c9:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21f1ce:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  21f1d5:	00 
  21f1d6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21f1db:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  21f1e2:	00 
  21f1e3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  21f1ea:	00 
  21f1eb:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  21f1f2:	00 
  21f1f3:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  21f1fa:	00 
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
  21f1fb:	e8 c0 1a 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21f200:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f205:	eb 32                	jmp    21f239 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x3d9>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
  21f207:	e8 24 b3 fe ff       	callq  20a530 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h08b0d7f2c83749eaE>
  21f20c:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  21f213:	00 
  21f214:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  21f21b:	00 
  21f21c:	e9 a3 fe ff ff       	jmpq   21f0c4 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x264>
    }
  21f221:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  21f228:	00 
  21f229:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  21f230:	00 
  21f231:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  21f238:	c3                   	retq   
  21f239:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21f23e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
  21f243:	e8 e8 8e 00 00       	callq  228130 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h23db806e8169f4dcE>
  21f248:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f24d:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  21f252:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  21f257:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21f25c:	e8 7f 95 00 00       	callq  2287e0 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>
  21f261:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  21f268:	00 
  21f269:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21f270:	00 
                self.deallocate(ptr, old_layout);
  21f271:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  21f278:	00 
  21f279:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  21f280:	00 
  21f281:	e8 ea 00 00 00       	callq  21f370 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>
  21f286:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  21f28b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
                Ok(new_ptr)
  21f290:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  21f297:	00 
  21f298:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  21f29f:	00 
            },
  21f2a0:	e9 d1 fe ff ff       	jmpq   21f176 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x316>
            0 => self.alloc_impl(new_layout, zeroed),
  21f2a5:	e9 cc fe ff ff       	jmpq   21f176 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E+0x316>
  21f2aa:	cc                   	int3   
  21f2ab:	cc                   	int3   
  21f2ac:	cc                   	int3   
  21f2ad:	cc                   	int3   
  21f2ae:	cc                   	int3   
  21f2af:	cc                   	int3   

000000000021f2b0 <_ZN5alloc5alloc7dealloc17hb22ba6544648527fE>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
  21f2b0:	48 83 ec 38          	sub    $0x38,%rsp
  21f2b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21f2b9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  21f2be:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21f2c3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
  21f2c8:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21f2cd:	e8 7e b1 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21f2d2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21f2d7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  21f2dc:	e8 7f b1 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21f2e1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f2e6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f2eb:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21f2f0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21f2f5:	e8 a6 da 00 00       	callq  22cda0 <__rust_dealloc>
}
  21f2fa:	48 83 c4 38          	add    $0x38,%rsp
  21f2fe:	c3                   	retq   
  21f2ff:	cc                   	int3   

000000000021f300 <_ZN5alloc5alloc7realloc17hc1e628514810d65aE>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  21f300:	48 83 ec 48          	sub    $0x48,%rsp
  21f304:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21f309:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21f30e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21f313:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21f318:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  21f31d:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
  21f322:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21f327:	e8 24 b1 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21f32c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f331:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  21f336:	e8 25 b1 ff ff       	callq  21a460 <_ZN4core5alloc6layout6Layout5align17heb2acf6278ea7048E>
  21f33b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f340:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  21f345:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f34a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21f34f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21f354:	e8 57 da 00 00       	callq  22cdb0 <__rust_realloc>
  21f359:	48 89 04 24          	mov    %rax,(%rsp)
  21f35d:	48 8b 04 24          	mov    (%rsp),%rax
}
  21f361:	48 83 c4 48          	add    $0x48,%rsp
  21f365:	c3                   	retq   
  21f366:	cc                   	int3   
  21f367:	cc                   	int3   
  21f368:	cc                   	int3   
  21f369:	cc                   	int3   
  21f36a:	cc                   	int3   
  21f36b:	cc                   	int3   
  21f36c:	cc                   	int3   
  21f36d:	cc                   	int3   
  21f36e:	cc                   	int3   
  21f36f:	cc                   	int3   

000000000021f370 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
        self.alloc_impl(layout, true)
    }

    #[inline]
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
  21f370:	48 83 ec 38          	sub    $0x38,%rsp
  21f374:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21f379:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  21f37e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21f383:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21f388:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        if layout.size() != 0 {
  21f38d:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21f392:	e8 b9 b0 ff ff       	callq  21a450 <_ZN4core5alloc6layout6Layout4size17h891a57d4c337bf81E>
  21f397:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21f39c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f3a1:	48 83 f8 00          	cmp    $0x0,%rax
  21f3a5:	75 02                	jne    21f3a9 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x39>
  21f3a7:	eb 23                	jmp    21f3cc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x5c>
  21f3a9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            // SAFETY: `layout` is non-zero in size,
            // other conditions must be upheld by the caller
            unsafe { dealloc(ptr.as_ptr(), layout) }
  21f3ae:	e8 0d 19 01 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  21f3b3:	48 89 04 24          	mov    %rax,(%rsp)
  21f3b7:	48 8b 3c 24          	mov    (%rsp),%rdi
  21f3bb:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21f3c0:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  21f3c5:	e8 e6 fe ff ff       	callq  21f2b0 <_ZN5alloc5alloc7dealloc17hb22ba6544648527fE>
        if layout.size() != 0 {
  21f3ca:	eb 00                	jmp    21f3cc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4f76d61d18232ba1E+0x5c>
        }
    }
  21f3cc:	48 83 c4 38          	add    $0x38,%rsp
  21f3d0:	c3                   	retq   
  21f3d1:	cc                   	int3   
  21f3d2:	cc                   	int3   
  21f3d3:	cc                   	int3   
  21f3d4:	cc                   	int3   
  21f3d5:	cc                   	int3   
  21f3d6:	cc                   	int3   
  21f3d7:	cc                   	int3   
  21f3d8:	cc                   	int3   
  21f3d9:	cc                   	int3   
  21f3da:	cc                   	int3   
  21f3db:	cc                   	int3   
  21f3dc:	cc                   	int3   
  21f3dd:	cc                   	int3   
  21f3de:	cc                   	int3   
  21f3df:	cc                   	int3   

000000000021f3e0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf6a7d38fd3e79973E>:

    #[inline]
    unsafe fn grow(
  21f3e0:	48 83 ec 48          	sub    $0x48,%rsp
  21f3e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21f3e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  21f3ee:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21f3f3:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  21f3f8:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  21f3fd:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
        ptr: NonNull<u8>,
        old_layout: Layout,
        new_layout: Layout,
    ) -> Result<NonNull<[u8]>, AllocError> {
        // SAFETY: all conditions must be upheld by the caller
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
  21f402:	31 c0                	xor    %eax,%eax
  21f404:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  21f40b:	e8 50 fa ff ff       	callq  21ee60 <_ZN5alloc5alloc6Global9grow_impl17hebebaecd3b7b41a0E>
  21f410:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f415:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21f41a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21f41f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  21f424:	48 83 c4 48          	add    $0x48,%rsp
  21f428:	c3                   	retq   
  21f429:	cc                   	int3   
  21f42a:	cc                   	int3   
  21f42b:	cc                   	int3   
  21f42c:	cc                   	int3   
  21f42d:	cc                   	int3   
  21f42e:	cc                   	int3   
  21f42f:	cc                   	int3   

000000000021f430 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h02f8801b0183b761E>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
  21f430:	48 83 ec 28          	sub    $0x28,%rsp
  21f434:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21f439:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21f43e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.alloc_impl(layout, false)
  21f443:	31 c9                	xor    %ecx,%ecx
  21f445:	e8 a6 f8 ff ff       	callq  21ecf0 <_ZN5alloc5alloc6Global10alloc_impl17hbe970f6d049ea4dcE>
  21f44a:	48 89 04 24          	mov    %rax,(%rsp)
  21f44e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21f453:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f458:	48 8b 04 24          	mov    (%rsp),%rax
    }
  21f45c:	48 83 c4 28          	add    $0x28,%rsp
  21f460:	c3                   	retq   
  21f461:	cc                   	int3   
  21f462:	cc                   	int3   
  21f463:	cc                   	int3   
  21f464:	cc                   	int3   
  21f465:	cc                   	int3   
  21f466:	cc                   	int3   
  21f467:	cc                   	int3   
  21f468:	cc                   	int3   
  21f469:	cc                   	int3   
  21f46a:	cc                   	int3   
  21f46b:	cc                   	int3   
  21f46c:	cc                   	int3   
  21f46d:	cc                   	int3   
  21f46e:	cc                   	int3   
  21f46f:	cc                   	int3   

000000000021f470 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
  21f470:	48 83 ec 38          	sub    $0x38,%rsp
  21f474:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  21f479:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  21f47e:	88 d0                	mov    %dl,%al
  21f480:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  21f484:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21f489:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21f48e:	24 01                	and    $0x1,%al
  21f490:	88 44 24 37          	mov    %al,0x37(%rsp)
                assert!(bit < Self::BIT_LENGTH);
  21f494:	48 83 fe 10          	cmp    $0x10,%rsi
  21f498:	0f 92 c0             	setb   %al
  21f49b:	34 ff                	xor    $0xff,%al
  21f49d:	a8 01                	test   $0x1,%al
  21f49f:	75 0a                	jne    21f4ab <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x3b>
  21f4a1:	8a 44 24 1f          	mov    0x1f(%rsp),%al
                if value {
  21f4a5:	a8 01                	test   $0x1,%al
  21f4a7:	75 45                	jne    21f4ee <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x7e>
  21f4a9:	eb 1a                	jmp    21f4c5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0x55>
                assert!(bit < Self::BIT_LENGTH);
  21f4ab:	48 8d 3d ea 33 fe ff 	lea    -0x1cc16(%rip),%rdi        # 20289c <str.3+0x1c>
  21f4b2:	48 8d 15 a7 9e 01 00 	lea    0x19ea7(%rip),%rdx        # 239360 <memcmp+0x2db0>
  21f4b9:	be 28 00 00 00       	mov    $0x28,%esi
  21f4be:	e8 9d 3f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f4c3:	0f 0b                	ud2    
  21f4c5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self &= !(1 << bit);
  21f4ca:	48 89 c8             	mov    %rcx,%rax
  21f4cd:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21f4d1:	48 83 f8 00          	cmp    $0x0,%rax
  21f4d5:	0f 95 c0             	setne  %al
  21f4d8:	66 83 e1 0f          	and    $0xf,%cx
  21f4dc:	66 ba 01 00          	mov    $0x1,%dx
  21f4e0:	66 d3 e2             	shl    %cl,%dx
  21f4e3:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
  21f4e8:	a8 01                	test   $0x1,%al
  21f4ea:	75 75                	jne    21f561 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xf1>
  21f4ec:	eb 5d                	jmp    21f54b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xdb>
  21f4ee:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
  21f4f3:	48 89 c8             	mov    %rcx,%rax
  21f4f6:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  21f4fa:	48 83 f8 00          	cmp    $0x0,%rax
  21f4fe:	0f 95 c0             	setne  %al
  21f501:	66 83 e1 0f          	and    $0xf,%cx
  21f505:	66 ba 01 00          	mov    $0x1,%dx
  21f509:	66 d3 e2             	shl    %cl,%dx
  21f50c:	66 89 54 24 04       	mov    %dx,0x4(%rsp)
  21f511:	a8 01                	test   $0x1,%al
  21f513:	75 12                	jne    21f527 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xb7>
  21f515:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f51a:	66 8b 4c 24 04       	mov    0x4(%rsp),%cx
  21f51f:	66 0b 08             	or     (%rax),%cx
  21f522:	66 89 08             	mov    %cx,(%rax)
                if value {
  21f525:	eb 1a                	jmp    21f541 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xd1>
                    *self |= 1 << bit;
  21f527:	48 8d 3d f2 33 fe ff 	lea    -0x1cc0e(%rip),%rdi        # 202920 <str.0>
  21f52e:	48 8d 15 2b 9e 01 00 	lea    0x19e2b(%rip),%rdx        # 239360 <memcmp+0x2db0>
  21f535:	be 23 00 00 00       	mov    $0x23,%esi
  21f53a:	e8 21 3f 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f53f:	0f 0b                	ud2    
  21f541:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            }
  21f546:	48 83 c4 38          	add    $0x38,%rsp
  21f54a:	c3                   	retq   
  21f54b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f550:	66 8b 4c 24 06       	mov    0x6(%rsp),%cx
                    *self &= !(1 << bit);
  21f555:	66 83 f1 ff          	xor    $0xffff,%cx
  21f559:	66 23 08             	and    (%rax),%cx
  21f55c:	66 89 08             	mov    %cx,(%rax)
                if value {
  21f55f:	eb e0                	jmp    21f541 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4829f398d4a661d1E+0xd1>
                    *self &= !(1 << bit);
  21f561:	48 8d 3d b8 33 fe ff 	lea    -0x1cc48(%rip),%rdi        # 202920 <str.0>
  21f568:	48 8d 15 f1 9d 01 00 	lea    0x19df1(%rip),%rdx        # 239360 <memcmp+0x2db0>
  21f56f:	be 23 00 00 00       	mov    $0x23,%esi
  21f574:	e8 e7 3e 01 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21f579:	0f 0b                	ud2    
  21f57b:	cc                   	int3   
  21f57c:	cc                   	int3   
  21f57d:	cc                   	int3   
  21f57e:	cc                   	int3   
  21f57f:	cc                   	int3   

000000000021f580 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h05ed9995804b505cE>:
        ($($t:ty)*) => {
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline]
                    fn clone(&self) -> Self {
  21f580:	50                   	push   %rax
  21f581:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  21f585:	48 8b 07             	mov    (%rdi),%rax
                    }
  21f588:	59                   	pop    %rcx
  21f589:	c3                   	retq   
  21f58a:	cc                   	int3   
  21f58b:	cc                   	int3   
  21f58c:	cc                   	int3   
  21f58d:	cc                   	int3   
  21f58e:	cc                   	int3   
  21f58f:	cc                   	int3   

000000000021f590 <_ZN4core3ptr20slice_from_raw_parts17h006612fc5f972f0cE>:
/// assert_eq!(unsafe { &*slice }[2], 7);
/// ```
#[inline]
#[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
#[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  21f590:	48 83 ec 38          	sub    $0x38,%rsp
  21f594:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21f599:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21f59e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  21f5a3:	e8 68 15 ff ff       	callq  210b10 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb9afce9db5d0b565E>
  21f5a8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f5ad:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21f5b2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21f5b7:	e8 44 01 ff ff       	callq  20f700 <_ZN4core3ptr8metadata14from_raw_parts17h4b6be9df4538dfecE>
  21f5bc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f5c1:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21f5c6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21f5cb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  21f5d0:	48 83 c4 38          	add    $0x38,%rsp
  21f5d4:	c3                   	retq   
  21f5d5:	cc                   	int3   
  21f5d6:	cc                   	int3   
  21f5d7:	cc                   	int3   
  21f5d8:	cc                   	int3   
  21f5d9:	cc                   	int3   
  21f5da:	cc                   	int3   
  21f5db:	cc                   	int3   
  21f5dc:	cc                   	int3   
  21f5dd:	cc                   	int3   
  21f5de:	cc                   	int3   
  21f5df:	cc                   	int3   

000000000021f5e0 <_ZN4core3ptr20slice_from_raw_parts17h7a7af0f1530c382dE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  21f5e0:	48 83 ec 38          	sub    $0x38,%rsp
  21f5e4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  21f5e9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  21f5ee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  21f5f3:	e8 28 64 ff ff       	callq  215a20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17hb90b90fa70029186E>
  21f5f8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f5fd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  21f602:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21f607:	e8 34 01 ff ff       	callq  20f740 <_ZN4core3ptr8metadata14from_raw_parts17h9179a140a682e91aE>
  21f60c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21f611:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21f616:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  21f61b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  21f620:	48 83 c4 38          	add    $0x38,%rsp
  21f624:	c3                   	retq   
  21f625:	cc                   	int3   
  21f626:	cc                   	int3   
  21f627:	cc                   	int3   
  21f628:	cc                   	int3   
  21f629:	cc                   	int3   
  21f62a:	cc                   	int3   
  21f62b:	cc                   	int3   
  21f62c:	cc                   	int3   
  21f62d:	cc                   	int3   
  21f62e:	cc                   	int3   
  21f62f:	cc                   	int3   

000000000021f630 <_ZN4core3ptr24slice_from_raw_parts_mut17h4baadfda013033adE>:
/// assert_eq!(unsafe { &*slice }[2], 99);
/// ```
#[inline]
#[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
#[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  21f630:	48 83 ec 38          	sub    $0x38,%rsp
  21f634:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21f639:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21f63e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21f643:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21f648:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21f64d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21f652:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  21f657:	e8 a4 01 ff ff       	callq  20f800 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd84bf2ccf7ccd3a2E>
  21f65c:	48 89 04 24          	mov    %rax,(%rsp)
  21f660:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21f665:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f66a:	48 8b 04 24          	mov    (%rsp),%rax
}
  21f66e:	48 83 c4 38          	add    $0x38,%rsp
  21f672:	c3                   	retq   
  21f673:	cc                   	int3   
  21f674:	cc                   	int3   
  21f675:	cc                   	int3   
  21f676:	cc                   	int3   
  21f677:	cc                   	int3   
  21f678:	cc                   	int3   
  21f679:	cc                   	int3   
  21f67a:	cc                   	int3   
  21f67b:	cc                   	int3   
  21f67c:	cc                   	int3   
  21f67d:	cc                   	int3   
  21f67e:	cc                   	int3   
  21f67f:	cc                   	int3   

000000000021f680 <_ZN4core3ptr24slice_from_raw_parts_mut17hc788c569ab4f87efE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  21f680:	48 83 ec 38          	sub    $0x38,%rsp
  21f684:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21f689:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21f68e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21f693:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21f698:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21f69d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21f6a2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  21f6a7:	e8 d4 00 ff ff       	callq  20f780 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2c270490821ca612E>
  21f6ac:	48 89 04 24          	mov    %rax,(%rsp)
  21f6b0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21f6b5:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f6ba:	48 8b 04 24          	mov    (%rsp),%rax
}
  21f6be:	48 83 c4 38          	add    $0x38,%rsp
  21f6c2:	c3                   	retq   
  21f6c3:	cc                   	int3   
  21f6c4:	cc                   	int3   
  21f6c5:	cc                   	int3   
  21f6c6:	cc                   	int3   
  21f6c7:	cc                   	int3   
  21f6c8:	cc                   	int3   
  21f6c9:	cc                   	int3   
  21f6ca:	cc                   	int3   
  21f6cb:	cc                   	int3   
  21f6cc:	cc                   	int3   
  21f6cd:	cc                   	int3   
  21f6ce:	cc                   	int3   
  21f6cf:	cc                   	int3   

000000000021f6d0 <_ZN4core3ptr24slice_from_raw_parts_mut17hccce3149d2f44078E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  21f6d0:	48 83 ec 38          	sub    $0x38,%rsp
  21f6d4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  21f6d9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21f6de:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  21f6e3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  21f6e8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  21f6ed:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  21f6f2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  21f6f7:	e8 c4 00 ff ff       	callq  20f7c0 <_ZN4core3ptr8metadata18from_raw_parts_mut17hb0ed2208ea82b504E>
  21f6fc:	48 89 04 24          	mov    %rax,(%rsp)
  21f700:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  21f705:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21f70a:	48 8b 04 24          	mov    (%rsp),%rax
}
  21f70e:	48 83 c4 38          	add    $0x38,%rsp
  21f712:	c3                   	retq   
  21f713:	cc                   	int3   
  21f714:	cc                   	int3   
  21f715:	cc                   	int3   
  21f716:	cc                   	int3   
  21f717:	cc                   	int3   
  21f718:	cc                   	int3   
  21f719:	cc                   	int3   
  21f71a:	cc                   	int3   
  21f71b:	cc                   	int3   
  21f71c:	cc                   	int3   
  21f71d:	cc                   	int3   
  21f71e:	cc                   	int3   
  21f71f:	cc                   	int3   

000000000021f720 <_ZN4core3ptr4read17ha982fcfdc18f6787E>:
///
/// [valid]: self#safety
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
pub const unsafe fn read<T>(src: *const T) -> T {
  21f720:	48 83 ec 40          	sub    $0x40,%rsp
  21f724:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  21f729:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    #[must_use]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
  21f72e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    extern "rust-intrinsic" {
        #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
    }

    let mut tmp = MaybeUninit::<T>::uninit();
  21f733:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21f738:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  21f73d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21f742:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    // the stack as a separate allocated object.
    //
    // Also, since we just wrote a valid value into `tmp`, it is guaranteed
    // to be properly initialized.
    unsafe {
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  21f747:	48 8b 00             	mov    (%rax),%rax
  21f74a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        tmp.assume_init()
  21f74f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21f754:	48 89 04 24          	mov    %rax,(%rsp)
  21f758:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21f75d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21f762:	48 8b 04 24          	mov    (%rsp),%rax
    }
}
  21f766:	48 83 c4 40          	add    $0x40,%rsp
  21f76a:	c3                   	retq   
  21f76b:	cc                   	int3   
  21f76c:	cc                   	int3   
  21f76d:	cc                   	int3   
  21f76e:	cc                   	int3   
  21f76f:	cc                   	int3   

000000000021f770 <_ZN4core3ptr5write17h04e3884830525521E>:
/// assert_eq!(bar, "foo");
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  21f770:	50                   	push   %rax
  21f771:	48 89 3c 24          	mov    %rdi,(%rsp)

    // SAFETY: the caller must guarantee that `dst` is valid for writes.
    // `dst` cannot overlap `src` because the caller has mutable access
    // to `dst` while `src` is owned by this function.
    unsafe {
        copy_nonoverlapping(&src as *const T, dst, 1);
  21f775:	48 8b 06             	mov    (%rsi),%rax
  21f778:	48 89 07             	mov    %rax,(%rdi)
  21f77b:	48 8b 46 08          	mov    0x8(%rsi),%rax
  21f77f:	48 89 47 08          	mov    %rax,0x8(%rdi)
  21f783:	48 8b 46 10          	mov    0x10(%rsi),%rax
  21f787:	48 89 47 10          	mov    %rax,0x10(%rdi)
  21f78b:	48 8b 46 18          	mov    0x18(%rsi),%rax
  21f78f:	48 89 47 18          	mov    %rax,0x18(%rdi)
        intrinsics::forget(src);
    }
}
  21f793:	58                   	pop    %rax
  21f794:	c3                   	retq   
  21f795:	cc                   	int3   
  21f796:	cc                   	int3   
  21f797:	cc                   	int3   
  21f798:	cc                   	int3   
  21f799:	cc                   	int3   
  21f79a:	cc                   	int3   
  21f79b:	cc                   	int3   
  21f79c:	cc                   	int3   
  21f79d:	cc                   	int3   
  21f79e:	cc                   	int3   
  21f79f:	cc                   	int3   

000000000021f7a0 <_ZN4core3ptr5write17h869cc00e30cd30f8E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  21f7a0:	48 83 ec 10          	sub    $0x10,%rsp
  21f7a4:	48 89 34 24          	mov    %rsi,(%rsp)
  21f7a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  21f7ad:	48 8b 04 24          	mov    (%rsp),%rax
  21f7b1:	48 89 07             	mov    %rax,(%rdi)
}
  21f7b4:	48 83 c4 10          	add    $0x10,%rsp
  21f7b8:	c3                   	retq   
  21f7b9:	cc                   	int3   
  21f7ba:	cc                   	int3   
  21f7bb:	cc                   	int3   
  21f7bc:	cc                   	int3   
  21f7bd:	cc                   	int3   
  21f7be:	cc                   	int3   
  21f7bf:	cc                   	int3   

000000000021f7c0 <_ZN4core3ptr5write17ha68771186095c4e2E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  21f7c0:	48 83 ec 10          	sub    $0x10,%rsp
  21f7c4:	48 89 34 24          	mov    %rsi,(%rsp)
  21f7c8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  21f7cd:	48 8b 04 24          	mov    (%rsp),%rax
  21f7d1:	48 89 07             	mov    %rax,(%rdi)
}
  21f7d4:	48 83 c4 10          	add    $0x10,%rsp
  21f7d8:	c3                   	retq   
  21f7d9:	cc                   	int3   
  21f7da:	cc                   	int3   
  21f7db:	cc                   	int3   
  21f7dc:	cc                   	int3   
  21f7dd:	cc                   	int3   
  21f7de:	cc                   	int3   
  21f7df:	cc                   	int3   

000000000021f7e0 <_ZN4core3ptr5write17hc73781c1f294320dE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  21f7e0:	48 83 ec 18          	sub    $0x18,%rsp
  21f7e4:	89 f0                	mov    %esi,%eax
  21f7e6:	89 44 24 08          	mov    %eax,0x8(%rsp)
  21f7ea:	48 c1 ee 20          	shr    $0x20,%rsi
  21f7ee:	66 89 f0             	mov    %si,%ax
  21f7f1:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  21f7f6:	8b 44 24 08          	mov    0x8(%rsp),%eax
  21f7fa:	89 04 24             	mov    %eax,(%rsp)
  21f7fd:	66 8b 44 24 0c       	mov    0xc(%rsp),%ax
  21f802:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  21f807:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  21f80c:	8b 04 24             	mov    (%rsp),%eax
  21f80f:	89 07                	mov    %eax,(%rdi)
  21f811:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  21f816:	66 89 47 04          	mov    %ax,0x4(%rdi)
}
  21f81a:	48 83 c4 18          	add    $0x18,%rsp
  21f81e:	c3                   	retq   
  21f81f:	cc                   	int3   

000000000021f820 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE>:
fn probe_cpu_features() -> CPUFeatures {
  21f820:	48 81 ec 38 03 00 00 	sub    $0x338,%rsp
    log::info!("Probing CPU Features with cpuid instruction.");
  21f827:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  21f82e:	00 03 00 00 00 
  21f833:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21f83a:	00 
  21f83b:	48 8d 35 f6 0d fe ff 	lea    -0x1f20a(%rip),%rsi        # 200638 <str.0+0x118>
  21f842:	e8 a9 22 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21f847:	88 84 24 cf 00 00 00 	mov    %al,0xcf(%rsp)
  21f84e:	8a 84 24 cf 00 00 00 	mov    0xcf(%rsp),%al
  21f855:	a8 01                	test   $0x1,%al
  21f857:	75 0c                	jne    21f865 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x45>
  21f859:	eb 00                	jmp    21f85b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x3b>
  21f85b:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  21f862:	00 
  21f863:	eb 60                	jmp    21f8c5 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xa5>
  21f865:	c6 84 24 2f 03 00 00 	movb   $0x0,0x32f(%rsp)
  21f86c:	00 
  21f86d:	48 8b 3d 9c b8 01 00 	mov    0x1b89c(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21f874:	0f b6 b4 24 2f 03 00 	movzbl 0x32f(%rsp),%esi
  21f87b:	00 
  21f87c:	e8 3f 94 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21f881:	48 89 84 24 30 03 00 	mov    %rax,0x330(%rsp)
  21f888:	00 
  21f889:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  21f890:	00 
  21f891:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  21f898:	00 
  21f899:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  21f8a0:	00 
  21f8a1:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  21f8a8:	00 
  21f8a9:	e8 42 22 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21f8ae:	88 84 24 ce 00 00 00 	mov    %al,0xce(%rsp)
  21f8b5:	8a 84 24 ce 00 00 00 	mov    0xce(%rsp),%al
  21f8bc:	24 01                	and    $0x1,%al
  21f8be:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  21f8c5:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  21f8cc:	01 
  21f8cd:	75 37                	jne    21f906 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xe6>
  21f8cf:	b8 01 00 00 00       	mov    $0x1,%eax
        asm!(
  21f8d4:	48 87 f3             	xchg   %rsi,%rbx
  21f8d7:	0f a2                	cpuid  
  21f8d9:	48 87 f3             	xchg   %rsi,%rbx
  21f8dc:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  21f8e3:	00 
  21f8e4:	89 c6                	mov    %eax,%esi
  21f8e6:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  21f8ed:	00 
  21f8ee:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  21f8f5:	00 
  21f8f6:	89 8c 24 e0 00 00 00 	mov    %ecx,0xe0(%rsp)
  21f8fd:	89 94 24 e4 00 00 00 	mov    %edx,0xe4(%rsp)
  21f904:	eb 43                	jmp    21f949 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x129>
    log::info!("Probing CPU Features with cpuid instruction.");
  21f906:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21f90d:	00 
  21f90e:	48 8d 35 63 9a 01 00 	lea    0x19a63(%rip),%rsi        # 239378 <memcmp+0x2dc8>
  21f915:	ba 01 00 00 00       	mov    $0x1,%edx
  21f91a:	48 8d 0d 4f 30 fe ff 	lea    -0x1cfb1(%rip),%rcx        # 202970 <str.0+0x50>
  21f921:	31 c0                	xor    %eax,%eax
  21f923:	41 89 c0             	mov    %eax,%r8d
  21f926:	e8 95 69 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21f92b:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  21f932:	00 
  21f933:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  21f93a:	00 
  21f93b:	48 8d 15 46 9a 01 00 	lea    0x19a46(%rip),%rdx        # 239388 <memcmp+0x2dd8>
  21f942:	e8 a9 0c 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21f947:	eb 86                	jmp    21f8cf <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0xaf>
    log::debug!(
  21f949:	48 c7 84 24 38 01 00 	movq   $0x4,0x138(%rsp)
  21f950:	00 04 00 00 00 
  21f955:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  21f95c:	00 
  21f95d:	48 8d 35 d4 0c fe ff 	lea    -0x1f32c(%rip),%rsi        # 200638 <str.0+0x118>
  21f964:	e8 87 21 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21f969:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  21f970:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
  21f977:	a8 01                	test   $0x1,%al
  21f979:	75 0c                	jne    21f987 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x167>
  21f97b:	eb 00                	jmp    21f97d <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x15d>
  21f97d:	c6 84 24 47 01 00 00 	movb   $0x0,0x147(%rsp)
  21f984:	00 
  21f985:	eb 60                	jmp    21f9e7 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x1c7>
  21f987:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  21f98e:	00 
  21f98f:	48 8b 3d 7a b7 01 00 	mov    0x1b77a(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21f996:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  21f99d:	00 
  21f99e:	e8 1d 93 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21f9a3:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  21f9aa:	00 
  21f9ab:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  21f9b2:	00 
  21f9b3:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  21f9ba:	00 
  21f9bb:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  21f9c2:	00 
  21f9c3:	48 8d b4 24 48 01 00 	lea    0x148(%rsp),%rsi
  21f9ca:	00 
  21f9cb:	e8 20 21 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21f9d0:	88 84 24 be 00 00 00 	mov    %al,0xbe(%rsp)
  21f9d7:	8a 84 24 be 00 00 00 	mov    0xbe(%rsp),%al
  21f9de:	24 01                	and    $0x1,%al
  21f9e0:	88 84 24 47 01 00 00 	mov    %al,0x147(%rsp)
  21f9e7:	f6 84 24 47 01 00 00 	testb  $0x1,0x147(%rsp)
  21f9ee:	01 
  21f9ef:	75 30                	jne    21fa21 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x201>
  21f9f1:	31 c0                	xor    %eax,%eax
        asm!(
  21f9f3:	48 87 f3             	xchg   %rsi,%rbx
  21f9f6:	0f a2                	cpuid  
  21f9f8:	48 87 f3             	xchg   %rsi,%rbx
  21f9fb:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  21fa02:	00 
  21fa03:	89 ce                	mov    %ecx,%esi
  21fa05:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  21fa0c:	00 
  21fa0d:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  21fa14:	00 
  21fa15:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%rsp)
  21fa1c:	e9 6e 01 00 00       	jmpq   21fb8f <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x36f>
    log::debug!(
  21fa21:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  21fa28:	00 
  21fa29:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  21fa30:	00 
  21fa31:	48 8d 84 24 e4 00 00 	lea    0xe4(%rsp),%rax
  21fa38:	00 
  21fa39:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  21fa40:	00 
  21fa41:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  21fa48:	00 
  21fa49:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  21fa50:	00 
  21fa51:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  21fa58:	00 
  21fa59:	48 89 bc 24 c0 02 00 	mov    %rdi,0x2c0(%rsp)
  21fa60:	00 
  21fa61:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  21fa68:	00 
  21fa69:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21fa70:	00 
  21fa71:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  21fa78:	00 
  21fa79:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  21fa80:	00 
  21fa81:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  21fa88:	00 
  21fa89:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  21fa90:	00 
  21fa91:	48 8b 35 e0 b6 01 00 	mov    0x1b6e0(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  21fa98:	e8 03 ee fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  21fa9d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  21faa4:	00 
  21faa5:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  21faac:	00 
  21faad:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21fab4:	00 
  21fab5:	48 8b 35 bc b6 01 00 	mov    0x1b6bc(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  21fabc:	e8 df ed fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  21fac1:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21fac8:	00 
  21fac9:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  21fad0:	00 
  21fad1:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  21fad8:	00 
  21fad9:	48 8b 35 38 b6 01 00 	mov    0x1b638(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21fae0:	e8 5b f3 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21fae5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  21faea:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  21faef:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  21faf4:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  21faf9:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  21fb00:	00 
  21fb01:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  21fb08:	00 
  21fb09:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  21fb10:	00 
  21fb11:	4c 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%r8
  21fb18:	00 
  21fb19:	4c 89 84 24 80 01 00 	mov    %r8,0x180(%rsp)
  21fb20:	00 
  21fb21:	48 89 bc 24 88 01 00 	mov    %rdi,0x188(%rsp)
  21fb28:	00 
  21fb29:	48 89 b4 24 90 01 00 	mov    %rsi,0x190(%rsp)
  21fb30:	00 
  21fb31:	48 89 94 24 98 01 00 	mov    %rdx,0x198(%rsp)
  21fb38:	00 
  21fb39:	48 89 8c 24 a0 01 00 	mov    %rcx,0x1a0(%rsp)
  21fb40:	00 
  21fb41:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  21fb48:	00 
  21fb49:	48 8d 8c 24 80 01 00 	lea    0x180(%rsp),%rcx
  21fb50:	00 
  21fb51:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21fb58:	00 
  21fb59:	48 8d 35 60 98 01 00 	lea    0x19860(%rip),%rsi        # 2393c0 <memcmp+0x2e10>
  21fb60:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  21fb66:	4c 89 c2             	mov    %r8,%rdx
  21fb69:	e8 52 67 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21fb6e:	48 8b b4 24 38 01 00 	mov    0x138(%rsp),%rsi
  21fb75:	00 
  21fb76:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  21fb7d:	00 
  21fb7e:	48 8d 15 6b 98 01 00 	lea    0x1986b(%rip),%rdx        # 2393f0 <memcmp+0x2e40>
  21fb85:	e8 66 0a 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21fb8a:	e9 62 fe ff ff       	jmpq   21f9f1 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x1d1>
        log::debug!(
  21fb8f:	48 c7 84 24 d0 01 00 	movq   $0x4,0x1d0(%rsp)
  21fb96:	00 04 00 00 00 
  21fb9b:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  21fba2:	00 
  21fba3:	48 8d 35 8e 0a fe ff 	lea    -0x1f572(%rip),%rsi        # 200638 <str.0+0x118>
  21fbaa:	e8 41 1f ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21fbaf:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  21fbb3:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  21fbb7:	a8 01                	test   $0x1,%al
  21fbb9:	75 0c                	jne    21fbc7 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x3a7>
  21fbbb:	eb 00                	jmp    21fbbd <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x39d>
  21fbbd:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  21fbc4:	00 
  21fbc5:	eb 5a                	jmp    21fc21 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x401>
  21fbc7:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  21fbce:	00 
  21fbcf:	48 8b 3d 3a b5 01 00 	mov    0x1b53a(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21fbd6:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  21fbdd:	00 
  21fbde:	e8 dd 90 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21fbe3:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  21fbea:	00 
  21fbeb:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  21fbf2:	00 
  21fbf3:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  21fbfa:	00 
  21fbfb:	48 8d bc 24 d0 01 00 	lea    0x1d0(%rsp),%rdi
  21fc02:	00 
  21fc03:	48 8d b4 24 e0 01 00 	lea    0x1e0(%rsp),%rsi
  21fc0a:	00 
  21fc0b:	e8 e0 1e ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21fc10:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  21fc14:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  21fc18:	24 01                	and    $0x1,%al
  21fc1a:	88 84 24 df 01 00 00 	mov    %al,0x1df(%rsp)
  21fc21:	f6 84 24 df 01 00 00 	testb  $0x1,0x1df(%rsp)
  21fc28:	01 
  21fc29:	75 2d                	jne    21fc58 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x438>
  21fc2b:	b8 00 00 00 80       	mov    $0x80000000,%eax
        asm!(
  21fc30:	48 87 f3             	xchg   %rsi,%rbx
  21fc33:	0f a2                	cpuid  
  21fc35:	48 87 f3             	xchg   %rsi,%rbx
  21fc38:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  21fc3d:	89 ce                	mov    %ecx,%esi
  21fc3f:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  21fc44:	48 89 8c 24 e8 00 00 	mov    %rcx,0xe8(%rsp)
  21fc4b:	00 
  21fc4c:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%rsp)
  21fc53:	e9 f2 00 00 00       	jmpq   21fd4a <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x52a>
        log::debug!(
  21fc58:	48 8d 84 24 c8 01 00 	lea    0x1c8(%rsp),%rax
  21fc5f:	00 
  21fc60:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  21fc67:	00 
  21fc68:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  21fc6f:	00 
  21fc70:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  21fc77:	00 
  21fc78:	48 8b bc 24 38 02 00 	mov    0x238(%rsp),%rdi
  21fc7f:	00 
  21fc80:	48 89 bc 24 d8 02 00 	mov    %rdi,0x2d8(%rsp)
  21fc87:	00 
  21fc88:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  21fc8f:	00 
  21fc90:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21fc95:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  21fc9c:	00 
  21fc9d:	48 8b 35 d4 b4 01 00 	mov    0x1b4d4(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  21fca4:	e8 f7 eb fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  21fca9:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21fcae:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  21fcb3:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  21fcb8:	48 8b 35 59 b4 01 00 	mov    0x1b459(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21fcbf:	e8 7c f1 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21fcc4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21fcc9:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  21fcce:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  21fcd3:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  21fcd8:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  21fcdd:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  21fce2:	48 89 b4 24 18 02 00 	mov    %rsi,0x218(%rsp)
  21fce9:	00 
  21fcea:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  21fcf1:	00 
  21fcf2:	48 89 8c 24 28 02 00 	mov    %rcx,0x228(%rsp)
  21fcf9:	00 
  21fcfa:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  21fd01:	00 
  21fd02:	48 8d 8c 24 18 02 00 	lea    0x218(%rsp),%rcx
  21fd09:	00 
  21fd0a:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  21fd11:	00 
  21fd12:	48 8d 35 0f 97 01 00 	lea    0x1970f(%rip),%rsi        # 239428 <memcmp+0x2e78>
  21fd19:	ba 03 00 00 00       	mov    $0x3,%edx
  21fd1e:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  21fd24:	e8 97 65 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21fd29:	48 8b b4 24 d0 01 00 	mov    0x1d0(%rsp),%rsi
  21fd30:	00 
  21fd31:	48 8d bc 24 e8 01 00 	lea    0x1e8(%rsp),%rdi
  21fd38:	00 
  21fd39:	48 8d 15 18 97 01 00 	lea    0x19718(%rip),%rdx        # 239458 <memcmp+0x2ea8>
  21fd40:	e8 ab 08 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21fd45:	e9 e1 fe ff ff       	jmpq   21fc2b <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x40b>
        log::debug!(
  21fd4a:	48 c7 84 24 48 02 00 	movq   $0x4,0x248(%rsp)
  21fd51:	00 04 00 00 00 
  21fd56:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  21fd5d:	00 
  21fd5e:	48 8d 35 d3 08 fe ff 	lea    -0x1f72d(%rip),%rsi        # 200638 <str.0+0x118>
  21fd65:	e8 86 1d ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21fd6a:	88 44 24 37          	mov    %al,0x37(%rsp)
  21fd6e:	8a 44 24 37          	mov    0x37(%rsp),%al
  21fd72:	a8 01                	test   $0x1,%al
  21fd74:	75 0c                	jne    21fd82 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x562>
  21fd76:	eb 00                	jmp    21fd78 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x558>
  21fd78:	c6 84 24 57 02 00 00 	movb   $0x0,0x257(%rsp)
  21fd7f:	00 
  21fd80:	eb 5a                	jmp    21fddc <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5bc>
  21fd82:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  21fd89:	00 
  21fd8a:	48 8b 3d 7f b3 01 00 	mov    0x1b37f(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  21fd91:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  21fd98:	00 
  21fd99:	e8 22 8f 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  21fd9e:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  21fda5:	00 
  21fda6:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  21fdad:	00 
  21fdae:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  21fdb5:	00 
  21fdb6:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  21fdbd:	00 
  21fdbe:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  21fdc5:	00 
  21fdc6:	e8 25 1d ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  21fdcb:	88 44 24 36          	mov    %al,0x36(%rsp)
  21fdcf:	8a 44 24 36          	mov    0x36(%rsp),%al
  21fdd3:	24 01                	and    $0x1,%al
  21fdd5:	88 84 24 57 02 00 00 	mov    %al,0x257(%rsp)
  21fddc:	f6 84 24 57 02 00 00 	testb  $0x1,0x257(%rsp)
  21fde3:	01 
  21fde4:	75 15                	jne    21fdfb <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5db>
        ecx: FlagsECX::from_bits_truncate(ecx),
  21fde6:	8b bc 24 e0 00 00 00 	mov    0xe0(%rsp),%edi
  21fded:	e8 fe 21 00 00       	callq  221ff0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17ha9ae7013cc2ab286E>
  21fdf2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  21fdf6:	e9 f2 00 00 00       	jmpq   21feed <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x6cd>
        log::debug!(
  21fdfb:	48 8d 84 24 cc 01 00 	lea    0x1cc(%rsp),%rax
  21fe02:	00 
  21fe03:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  21fe0a:	00 
  21fe0b:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  21fe12:	00 
  21fe13:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  21fe1a:	00 
  21fe1b:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  21fe22:	00 
  21fe23:	48 89 bc 24 e8 02 00 	mov    %rdi,0x2e8(%rsp)
  21fe2a:	00 
  21fe2b:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  21fe32:	00 
  21fe33:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21fe38:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  21fe3f:	00 
  21fe40:	48 8b 35 31 b3 01 00 	mov    0x1b331(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  21fe47:	e8 54 ea fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  21fe4c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  21fe51:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  21fe56:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  21fe5b:	48 8b 35 b6 b2 01 00 	mov    0x1b2b6(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  21fe62:	e8 d9 ef fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  21fe67:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21fe6c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21fe71:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  21fe76:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  21fe7b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  21fe80:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  21fe85:	48 89 b4 24 90 02 00 	mov    %rsi,0x290(%rsp)
  21fe8c:	00 
  21fe8d:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  21fe94:	00 
  21fe95:	48 89 8c 24 a0 02 00 	mov    %rcx,0x2a0(%rsp)
  21fe9c:	00 
  21fe9d:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  21fea4:	00 
  21fea5:	48 8d 8c 24 90 02 00 	lea    0x290(%rsp),%rcx
  21feac:	00 
  21fead:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  21feb4:	00 
  21feb5:	48 8d 35 d4 95 01 00 	lea    0x195d4(%rip),%rsi        # 239490 <memcmp+0x2ee0>
  21febc:	ba 03 00 00 00       	mov    $0x3,%edx
  21fec1:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  21fec7:	e8 f4 63 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  21fecc:	48 8b b4 24 48 02 00 	mov    0x248(%rsp),%rsi
  21fed3:	00 
  21fed4:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  21fedb:	00 
  21fedc:	48 8d 15 dd 95 01 00 	lea    0x195dd(%rip),%rdx        # 2394c0 <memcmp+0x2f10>
  21fee3:	e8 08 07 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  21fee8:	e9 f9 fe ff ff       	jmpq   21fde6 <_ZN9r3_kernel3cpu5cpuid18probe_cpu_features17he09c1eb648bd204cE+0x5c6>
        edx: FlagsEDX::from_bits_truncate(edx),
  21feed:	8b bc 24 e4 00 00 00 	mov    0xe4(%rsp),%edi
  21fef4:	e8 d7 44 00 00       	callq  2243d0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h215956a5355ec929E>
  21fef9:	89 44 24 04          	mov    %eax,0x4(%rsp)
  21fefd:	8b 54 24 04          	mov    0x4(%rsp),%edx
  21ff01:	8b 74 24 30          	mov    0x30(%rsp),%esi
        max_extended_level,
  21ff05:	8b 84 24 cc 01 00 00 	mov    0x1cc(%rsp),%eax
        max_standard_level,
  21ff0c:	8b 8c 24 c8 01 00 00 	mov    0x1c8(%rsp),%ecx
    CPUFeatures {
  21ff13:	89 b4 24 d0 00 00 00 	mov    %esi,0xd0(%rsp)
  21ff1a:	89 94 24 d4 00 00 00 	mov    %edx,0xd4(%rsp)
  21ff21:	89 8c 24 d8 00 00 00 	mov    %ecx,0xd8(%rsp)
  21ff28:	89 84 24 dc 00 00 00 	mov    %eax,0xdc(%rsp)
}
  21ff2f:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  21ff36:	00 
  21ff37:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  21ff3e:	00 
  21ff3f:	48 81 c4 38 03 00 00 	add    $0x338,%rsp
  21ff46:	c3                   	retq   
  21ff47:	cc                   	int3   
  21ff48:	cc                   	int3   
  21ff49:	cc                   	int3   
  21ff4a:	cc                   	int3   
  21ff4b:	cc                   	int3   
  21ff4c:	cc                   	int3   
  21ff4d:	cc                   	int3   
  21ff4e:	cc                   	int3   
  21ff4f:	cc                   	int3   

000000000021ff50 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E>:

pub fn has_extended_feature(flag: FlagsEDX) -> bool {
    CPU_FEATURES.edx.contains(flag)
}

pub fn assert_min_levels() {
  21ff50:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
    assert!(
        CPU_FEATURES.max_standard_level >= 3,
  21ff57:	48 8d 3d f2 2b fe ff 	lea    -0x1d40e(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  21ff5e:	e8 8d 4d 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  21ff63:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  21ff68:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  21ff6d:	83 78 08 03          	cmpl   $0x3,0x8(%rax)
  21ff71:	0f 93 c0             	setae  %al
    assert!(
  21ff74:	34 ff                	xor    $0xff,%al
  21ff76:	a8 01                	test   $0x1,%al
  21ff78:	75 16                	jne    21ff90 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x40>
        "Expected CPU standard level >= 3, got {}.",
        CPU_FEATURES.max_standard_level
    );

    assert!(
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  21ff7a:	48 8d 3d cf 2b fe ff 	lea    -0x1d431(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  21ff81:	e8 6a 4d 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  21ff86:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  21ff8b:	e9 99 00 00 00       	jmpq   220029 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0xd9>
        CPU_FEATURES.max_standard_level
  21ff90:	48 8d 3d b9 2b fe ff 	lea    -0x1d447(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  21ff97:	e8 54 4d 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  21ff9c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21ffa1:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  21ffa6:	48 83 c0 08          	add    $0x8,%rax
    assert!(
  21ffaa:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  21ffb1:	00 
  21ffb2:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  21ffb9:	00 
  21ffba:	48 89 bc 24 28 01 00 	mov    %rdi,0x128(%rsp)
  21ffc1:	00 
  21ffc2:	48 8b 35 b7 b1 01 00 	mov    0x1b1b7(%rip),%rsi        # 23b180 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  21ffc9:	e8 d2 e8 fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  21ffce:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  21ffd3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  21ffd8:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  21ffdd:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  21ffe2:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  21ffe9:	00 
  21ffea:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  21fff1:	00 
  21fff2:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
  21fff9:	00 
  21fffa:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  21ffff:	48 8d 35 f2 94 01 00 	lea    0x194f2(%rip),%rsi        # 2394f8 <memcmp+0x2f48>
  220006:	ba 02 00 00 00       	mov    $0x2,%edx
  22000b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  220011:	e8 aa 62 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  220016:	48 8d 35 fb 94 01 00 	lea    0x194fb(%rip),%rsi        # 239518 <memcmp+0x2f68>
  22001d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  220022:	e8 09 35 01 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  220027:	0f 0b                	ud2    
  220029:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        CPU_FEATURES.max_extended_level >= 0x8000_0007,
  22002e:	81 78 0c 07 00 00 80 	cmpl   $0x80000007,0xc(%rax)
  220035:	0f 93 c0             	setae  %al
    assert!(
  220038:	34 ff                	xor    $0xff,%al
  22003a:	a8 01                	test   $0x1,%al
  22003c:	75 29                	jne    220067 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x117>
        "Expected CPU extended level >= 0x80000007, got 0x{:x}.",
        CPU_FEATURES.max_extended_level
    );

    log::info!("CPU level checks passed.");
  22003e:	48 c7 84 24 e0 00 00 	movq   $0x3,0xe0(%rsp)
  220045:	00 03 00 00 00 
  22004a:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  220051:	00 
  220052:	48 8d 35 df 05 fe ff 	lea    -0x1fa21(%rip),%rsi        # 200638 <str.0+0x118>
  220059:	e8 92 1a ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22005e:	88 44 24 27          	mov    %al,0x27(%rsp)
  220062:	e9 9f 00 00 00       	jmpq   220106 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1b6>
        CPU_FEATURES.max_extended_level
  220067:	48 8d 3d e2 2a fe ff 	lea    -0x1d51e(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22006e:	e8 7d 4c 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  220073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  220078:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22007d:	48 83 c0 0c          	add    $0xc,%rax
    assert!(
  220081:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  220088:	00 
  220089:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  220090:	00 
  220091:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
  220098:	00 
  220099:	48 8b 35 d8 b0 01 00 	mov    0x1b0d8(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  2200a0:	e8 fb e7 fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2200a5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2200aa:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2200af:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2200b4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2200b9:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  2200c0:	00 
  2200c1:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  2200c8:	00 
  2200c9:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  2200d0:	00 
  2200d1:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  2200d8:	00 
  2200d9:	48 8d 35 50 94 01 00 	lea    0x19450(%rip),%rsi        # 239530 <memcmp+0x2f80>
  2200e0:	ba 02 00 00 00       	mov    $0x2,%edx
  2200e5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2200eb:	e8 d0 61 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2200f0:	48 8d 35 59 94 01 00 	lea    0x19459(%rip),%rsi        # 239550 <memcmp+0x2fa0>
  2200f7:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  2200fe:	00 
  2200ff:	e8 2c 34 01 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  220104:	0f 0b                	ud2    
  220106:	8a 44 24 27          	mov    0x27(%rsp),%al
    log::info!("CPU level checks passed.");
  22010a:	a8 01                	test   $0x1,%al
  22010c:	75 0c                	jne    22011a <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1ca>
  22010e:	eb 00                	jmp    220110 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x1c0>
  220110:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  220117:	00 
  220118:	eb 5a                	jmp    220174 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x224>
  22011a:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  220121:	00 
  220122:	48 8b 3d e7 af 01 00 	mov    0x1afe7(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  220129:	0f b6 b4 24 3f 01 00 	movzbl 0x13f(%rsp),%esi
  220130:	00 
  220131:	e8 8a 8b 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  220136:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  22013d:	00 
  22013e:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  220145:	00 
  220146:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22014d:	00 
  22014e:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  220155:	00 
  220156:	48 8d b4 24 f0 00 00 	lea    0xf0(%rsp),%rsi
  22015d:	00 
  22015e:	e8 8d 19 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  220163:	88 44 24 07          	mov    %al,0x7(%rsp)
  220167:	8a 44 24 07          	mov    0x7(%rsp),%al
  22016b:	24 01                	and    $0x1,%al
  22016d:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  220174:	f6 84 24 ef 00 00 00 	testb  $0x1,0xef(%rsp)
  22017b:	01 
  22017c:	75 08                	jne    220186 <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x236>
}
  22017e:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
  220185:	c3                   	retq   
    log::info!("CPU level checks passed.");
  220186:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22018d:	00 
  22018e:	48 8d 35 d3 93 01 00 	lea    0x193d3(%rip),%rsi        # 239568 <memcmp+0x2fb8>
  220195:	ba 01 00 00 00       	mov    $0x1,%edx
  22019a:	48 8d 0d cf 27 fe ff 	lea    -0x1d831(%rip),%rcx        # 202970 <str.0+0x50>
  2201a1:	31 c0                	xor    %eax,%eax
  2201a3:	41 89 c0             	mov    %eax,%r8d
  2201a6:	e8 15 61 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2201ab:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  2201b2:	00 
  2201b3:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2201ba:	00 
  2201bb:	48 8d 15 b6 93 01 00 	lea    0x193b6(%rip),%rdx        # 239578 <memcmp+0x2fc8>
  2201c2:	e8 29 04 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2201c7:	eb b5                	jmp    22017e <_ZN9r3_kernel3cpu5cpuid17assert_min_levels17hb7a3531677a71139E+0x22e>
  2201c9:	cc                   	int3   
  2201ca:	cc                   	int3   
  2201cb:	cc                   	int3   
  2201cc:	cc                   	int3   
  2201cd:	cc                   	int3   
  2201ce:	cc                   	int3   
  2201cf:	cc                   	int3   

00000000002201d0 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E>:
        "CPU does not support critical extended feature {:?}",
        flag
    );
}

pub fn display_features() {
  2201d0:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  2201d7:	48 c7 84 24 88 00 00 	movq   $0x3,0x88(%rsp)
  2201de:	00 03 00 00 00 
  2201e3:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2201ea:	00 
  2201eb:	48 8d 35 46 04 fe ff 	lea    -0x1fbba(%rip),%rsi        # 200638 <str.0+0x118>
  2201f2:	e8 f9 18 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2201f7:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  2201fe:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  220205:	a8 01                	test   $0x1,%al
  220207:	75 0c                	jne    220215 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x45>
  220209:	eb 00                	jmp    22020b <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x3b>
  22020b:	c6 84 24 97 00 00 00 	movb   $0x0,0x97(%rsp)
  220212:	00 
  220213:	eb 60                	jmp    220275 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xa5>
  220215:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  22021c:	00 
  22021d:	48 8b 3d ec ae 01 00 	mov    0x1aeec(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  220224:	0f b6 b4 24 5f 02 00 	movzbl 0x25f(%rsp),%esi
  22022b:	00 
  22022c:	e8 8f 8a 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  220231:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  220238:	00 
  220239:	48 8b 84 24 60 02 00 	mov    0x260(%rsp),%rax
  220240:	00 
  220241:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  220248:	00 
  220249:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  220250:	00 
  220251:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  220258:	00 
  220259:	e8 92 18 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22025e:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  220265:	8a 84 24 86 00 00 00 	mov    0x86(%rsp),%al
  22026c:	24 01                	and    $0x1,%al
  22026e:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  220275:	f6 84 24 97 00 00 00 	testb  $0x1,0x97(%rsp)
  22027c:	01 
  22027d:	75 2c                	jne    2202ab <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xdb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  22027f:	48 c7 84 24 e8 00 00 	movq   $0x3,0xe8(%rsp)
  220286:	00 03 00 00 00 
  22028b:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  220292:	00 
  220293:	48 8d 35 9e 03 fe ff 	lea    -0x1fc62(%rip),%rsi        # 200638 <str.0+0x118>
  22029a:	e8 51 18 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22029f:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  2202a6:	e9 a4 00 00 00       	jmpq   22034f <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x17f>
    log::info!("Feature Register ecx={:?}", CPU_FEATURES.ecx);
  2202ab:	48 8d 3d 9e 28 fe ff 	lea    -0x1d762(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  2202b2:	e8 39 4a 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2202b7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2202bc:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2202c1:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2202c8:	00 
  2202c9:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  2202d0:	00 
  2202d1:	48 89 bc 24 08 02 00 	mov    %rdi,0x208(%rsp)
  2202d8:	00 
  2202d9:	48 8d 35 30 04 00 00 	lea    0x430(%rip),%rsi        # 220710 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E>
  2202e0:	e8 db e6 fe ff       	callq  20e9c0 <_ZN4core3fmt10ArgumentV13new17h645304c68732e54fE>
  2202e5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2202ea:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  2202ef:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2202f4:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2202f9:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  220300:	00 
  220301:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  220308:	00 
  220309:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  220310:	00 
  220311:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  220318:	00 
  220319:	48 8d 35 90 92 01 00 	lea    0x19290(%rip),%rsi        # 2395b0 <memcmp+0x3000>
  220320:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  220326:	4c 89 c2             	mov    %r8,%rdx
  220329:	e8 92 5f fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22032e:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  220335:	00 
  220336:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  22033d:	00 
  22033e:	48 8d 15 7b 92 01 00 	lea    0x1927b(%rip),%rdx        # 2395c0 <memcmp+0x3010>
  220345:	e8 a6 02 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22034a:	e9 30 ff ff ff       	jmpq   22027f <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0xaf>
  22034f:	8a 84 24 85 00 00 00 	mov    0x85(%rsp),%al
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  220356:	a8 01                	test   $0x1,%al
  220358:	75 0c                	jne    220366 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x196>
  22035a:	eb 00                	jmp    22035c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x18c>
  22035c:	c6 84 24 f7 00 00 00 	movb   $0x0,0xf7(%rsp)
  220363:	00 
  220364:	eb 5a                	jmp    2203c0 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x1f0>
  220366:	c6 84 24 4f 02 00 00 	movb   $0x0,0x24f(%rsp)
  22036d:	00 
  22036e:	48 8b 3d 9b ad 01 00 	mov    0x1ad9b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  220375:	0f b6 b4 24 4f 02 00 	movzbl 0x24f(%rsp),%esi
  22037c:	00 
  22037d:	e8 3e 89 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  220382:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  220389:	00 
  22038a:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  220391:	00 
  220392:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  220399:	00 
  22039a:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  2203a1:	00 
  2203a2:	48 8d b4 24 f8 00 00 	lea    0xf8(%rsp),%rsi
  2203a9:	00 
  2203aa:	e8 41 17 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2203af:	88 44 24 67          	mov    %al,0x67(%rsp)
  2203b3:	8a 44 24 67          	mov    0x67(%rsp),%al
  2203b7:	24 01                	and    $0x1,%al
  2203b9:	88 84 24 f7 00 00 00 	mov    %al,0xf7(%rsp)
  2203c0:	f6 84 24 f7 00 00 00 	testb  $0x1,0xf7(%rsp)
  2203c7:	01 
  2203c8:	75 29                	jne    2203f3 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x223>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  2203ca:	48 c7 84 24 48 01 00 	movq   $0x3,0x148(%rsp)
  2203d1:	00 03 00 00 00 
  2203d6:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  2203dd:	00 
  2203de:	48 8d 35 53 02 fe ff 	lea    -0x1fdad(%rip),%rsi        # 200638 <str.0+0x118>
  2203e5:	e8 06 17 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2203ea:	88 44 24 66          	mov    %al,0x66(%rsp)
  2203ee:	e9 a8 00 00 00       	jmpq   22049b <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2cb>
    log::info!("Feature Register edx={:?}", CPU_FEATURES.edx);
  2203f3:	48 8d 3d 56 27 fe ff 	lea    -0x1d8aa(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  2203fa:	e8 f1 48 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  2203ff:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  220404:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  220409:	48 83 c0 04          	add    $0x4,%rax
  22040d:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  220414:	00 
  220415:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
  22041c:	00 
  22041d:	48 89 bc 24 10 02 00 	mov    %rdi,0x210(%rsp)
  220424:	00 
  220425:	48 8d 35 f4 23 00 00 	lea    0x23f4(%rip),%rsi        # 222820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E>
  22042c:	e8 2f eb fe ff       	callq  20ef60 <_ZN4core3fmt10ArgumentV13new17hf1f1870160aa1ab8E>
  220431:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  220436:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  22043b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  220440:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  220445:	48 89 8c 24 30 01 00 	mov    %rcx,0x130(%rsp)
  22044c:	00 
  22044d:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  220454:	00 
  220455:	48 8d 8c 24 30 01 00 	lea    0x130(%rsp),%rcx
  22045c:	00 
  22045d:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  220464:	00 
  220465:	48 8d 35 8c 91 01 00 	lea    0x1918c(%rip),%rsi        # 2395f8 <memcmp+0x3048>
  22046c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  220472:	4c 89 c2             	mov    %r8,%rdx
  220475:	e8 46 5e fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22047a:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  220481:	00 
  220482:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  220489:	00 
  22048a:	48 8d 15 77 91 01 00 	lea    0x19177(%rip),%rdx        # 239608 <memcmp+0x3058>
  220491:	e8 5a 01 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  220496:	e9 2f ff ff ff       	jmpq   2203ca <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x1fa>
  22049b:	8a 44 24 66          	mov    0x66(%rsp),%al
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  22049f:	a8 01                	test   $0x1,%al
  2204a1:	75 0c                	jne    2204af <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2df>
  2204a3:	eb 00                	jmp    2204a5 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x2d5>
  2204a5:	c6 84 24 57 01 00 00 	movb   $0x0,0x157(%rsp)
  2204ac:	00 
  2204ad:	eb 5a                	jmp    220509 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x339>
  2204af:	c6 84 24 3f 02 00 00 	movb   $0x0,0x23f(%rsp)
  2204b6:	00 
  2204b7:	48 8b 3d 52 ac 01 00 	mov    0x1ac52(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2204be:	0f b6 b4 24 3f 02 00 	movzbl 0x23f(%rsp),%esi
  2204c5:	00 
  2204c6:	e8 f5 87 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2204cb:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  2204d2:	00 
  2204d3:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  2204da:	00 
  2204db:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  2204e2:	00 
  2204e3:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  2204ea:	00 
  2204eb:	48 8d b4 24 58 01 00 	lea    0x158(%rsp),%rsi
  2204f2:	00 
  2204f3:	e8 f8 15 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2204f8:	88 44 24 47          	mov    %al,0x47(%rsp)
  2204fc:	8a 44 24 47          	mov    0x47(%rsp),%al
  220500:	24 01                	and    $0x1,%al
  220502:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  220509:	f6 84 24 57 01 00 00 	testb  $0x1,0x157(%rsp)
  220510:	01 
  220511:	75 29                	jne    22053c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x36c>
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  220513:	48 c7 84 24 a8 01 00 	movq   $0x3,0x1a8(%rsp)
  22051a:	00 03 00 00 00 
  22051f:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  220526:	00 
  220527:	48 8d 35 0a 01 fe ff 	lea    -0x1fef6(%rip),%rsi        # 200638 <str.0+0x118>
  22052e:	e8 bd 15 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  220533:	88 44 24 46          	mov    %al,0x46(%rsp)
  220537:	e9 a8 00 00 00       	jmpq   2205e4 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x414>
    log::info!("Max standard level 0x{:x}", CPU_FEATURES.max_standard_level);
  22053c:	48 8d 3d 0d 26 fe ff 	lea    -0x1d9f3(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  220543:	e8 a8 47 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  220548:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22054d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  220552:	48 83 c0 08          	add    $0x8,%rax
  220556:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22055d:	00 
  22055e:	48 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%rdi
  220565:	00 
  220566:	48 89 bc 24 18 02 00 	mov    %rdi,0x218(%rsp)
  22056d:	00 
  22056e:	48 8b 35 03 ac 01 00 	mov    0x1ac03(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  220575:	e8 26 e3 fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  22057a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22057f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  220584:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  220589:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22058e:	48 89 8c 24 90 01 00 	mov    %rcx,0x190(%rsp)
  220595:	00 
  220596:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  22059d:	00 
  22059e:	48 8d 8c 24 90 01 00 	lea    0x190(%rsp),%rcx
  2205a5:	00 
  2205a6:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  2205ad:	00 
  2205ae:	48 8d 35 8b 90 01 00 	lea    0x1908b(%rip),%rsi        # 239640 <memcmp+0x3090>
  2205b5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2205bb:	4c 89 c2             	mov    %r8,%rdx
  2205be:	e8 fd 5c fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2205c3:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  2205ca:	00 
  2205cb:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  2205d2:	00 
  2205d3:	48 8d 15 76 90 01 00 	lea    0x19076(%rip),%rdx        # 239650 <memcmp+0x30a0>
  2205da:	e8 11 00 01 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2205df:	e9 2f ff ff ff       	jmpq   220513 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x343>
  2205e4:	8a 44 24 46          	mov    0x46(%rsp),%al
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  2205e8:	a8 01                	test   $0x1,%al
  2205ea:	75 0c                	jne    2205f8 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x428>
  2205ec:	eb 00                	jmp    2205ee <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x41e>
  2205ee:	c6 84 24 b7 01 00 00 	movb   $0x0,0x1b7(%rsp)
  2205f5:	00 
  2205f6:	eb 5a                	jmp    220652 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x482>
  2205f8:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  2205ff:	00 
  220600:	48 8b 3d 09 ab 01 00 	mov    0x1ab09(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  220607:	0f b6 b4 24 2f 02 00 	movzbl 0x22f(%rsp),%esi
  22060e:	00 
  22060f:	e8 ac 86 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  220614:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  22061b:	00 
  22061c:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  220623:	00 
  220624:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22062b:	00 
  22062c:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  220633:	00 
  220634:	48 8d b4 24 b8 01 00 	lea    0x1b8(%rsp),%rsi
  22063b:	00 
  22063c:	e8 af 14 ff ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  220641:	88 44 24 27          	mov    %al,0x27(%rsp)
  220645:	8a 44 24 27          	mov    0x27(%rsp),%al
  220649:	24 01                	and    $0x1,%al
  22064b:	88 84 24 b7 01 00 00 	mov    %al,0x1b7(%rsp)
  220652:	f6 84 24 b7 01 00 00 	testb  $0x1,0x1b7(%rsp)
  220659:	01 
  22065a:	75 08                	jne    220664 <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x494>
}
  22065c:	48 81 c4 68 02 00 00 	add    $0x268,%rsp
  220663:	c3                   	retq   
    log::info!("Max extended level 0x{:x}", CPU_FEATURES.max_extended_level);
  220664:	48 8d 3d e5 24 fe ff 	lea    -0x1db1b(%rip),%rdi        # 202b50 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE>
  22066b:	e8 80 46 00 00       	callq  224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>
  220670:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  220675:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22067a:	48 83 c0 0c          	add    $0xc,%rax
  22067e:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  220685:	00 
  220686:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  22068d:	00 
  22068e:	48 89 bc 24 20 02 00 	mov    %rdi,0x220(%rsp)
  220695:	00 
  220696:	48 8b 35 db aa 01 00 	mov    0x1aadb(%rip),%rsi        # 23b178 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  22069d:	e8 fe e1 fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  2206a2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2206a7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2206ac:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2206b1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2206b6:	48 89 8c 24 f0 01 00 	mov    %rcx,0x1f0(%rsp)
  2206bd:	00 
  2206be:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2206c5:	00 
  2206c6:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  2206cd:	00 
  2206ce:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  2206d5:	00 
  2206d6:	48 8d 35 ab 8f 01 00 	lea    0x18fab(%rip),%rsi        # 239688 <memcmp+0x30d8>
  2206dd:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2206e3:	4c 89 c2             	mov    %r8,%rdx
  2206e6:	e8 d5 5b fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2206eb:	48 8b b4 24 a8 01 00 	mov    0x1a8(%rsp),%rsi
  2206f2:	00 
  2206f3:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  2206fa:	00 
  2206fb:	48 8d 15 96 8f 01 00 	lea    0x18f96(%rip),%rdx        # 239698 <memcmp+0x30e8>
  220702:	e8 e9 fe 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  220707:	e9 50 ff ff ff       	jmpq   22065c <_ZN9r3_kernel3cpu5cpuid16display_features17hda1d737b08c2a0d3E+0x48c>
  22070c:	cc                   	int3   
  22070d:	cc                   	int3   
  22070e:	cc                   	int3   
  22070f:	cc                   	int3   

0000000000220710 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  220710:	48 81 ec 68 04 00 00 	sub    $0x468,%rsp
  220717:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
  22071c:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  220721:	48 89 bc 24 b8 00 00 	mov    %rdi,0xb8(%rsp)
  220728:	00 
  220729:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  220730:	00 
                let mut first = true;
  220731:	c6 44 24 75 01       	movb   $0x1,0x75(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  220736:	e8 e5 18 00 00       	callq  222020 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E>
  22073b:	88 44 24 73          	mov    %al,0x73(%rsp)
  22073f:	8a 44 24 73          	mov    0x73(%rsp),%al
  220743:	a8 01                	test   $0x1,%al
  220745:	75 15                	jne    22075c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4c>
  220747:	eb 00                	jmp    220749 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x39>
  220749:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  22074e:	e8 0d 19 00 00       	callq  222060 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE>
  220753:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  220757:	e9 ba 00 00 00       	jmpq   220816 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x106>
                        if !first {
  22075c:	8a 44 24 75          	mov    0x75(%rsp),%al
  220760:	34 ff                	xor    $0xff,%al
  220762:	a8 01                	test   $0x1,%al
  220764:	75 21                	jne    220787 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x77>
  220766:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22076b:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220770:	48 8d 35 f1 01 fe ff 	lea    -0x1fe0f(%rip),%rsi        # 200968 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x30>
  220777:	ba 04 00 00 00       	mov    $0x4,%edx
  22077c:	e8 9f 4f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220781:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  220785:	eb 5a                	jmp    2207e1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd1>
  220787:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22078c:	48 8d 35 03 23 fe ff 	lea    -0x1dcfd(%rip),%rsi        # 202a96 <str.0+0x176>
  220793:	ba 03 00 00 00       	mov    $0x3,%edx
  220798:	e8 83 4f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22079d:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  2207a1:	8a 44 24 5d          	mov    0x5d(%rsp),%al
  2207a5:	0f b6 f8             	movzbl %al,%edi
  2207a8:	83 e7 01             	and    $0x1,%edi
  2207ab:	e8 a0 ac fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2207b0:	24 01                	and    $0x1,%al
  2207b2:	88 44 24 76          	mov    %al,0x76(%rsp)
  2207b6:	0f b6 44 24 76       	movzbl 0x76(%rsp),%eax
  2207bb:	a8 01                	test   $0x1,%al
  2207bd:	74 a7                	je     220766 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x56>
  2207bf:	eb 00                	jmp    2207c1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb1>
  2207c1:	eb 02                	jmp    2207c5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb5>
  2207c3:	0f 0b                	ud2    
  2207c5:	e8 c6 9d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2207ca:	24 01                	and    $0x1,%al
  2207cc:	88 44 24 74          	mov    %al,0x74(%rsp)
            }
  2207d0:	8a 44 24 74          	mov    0x74(%rsp),%al
  2207d4:	24 01                	and    $0x1,%al
  2207d6:	0f b6 c0             	movzbl %al,%eax
  2207d9:	48 81 c4 68 04 00 00 	add    $0x468,%rsp
  2207e0:	c3                   	retq   
  2207e1:	8a 44 24 5e          	mov    0x5e(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2207e5:	0f b6 f8             	movzbl %al,%edi
  2207e8:	83 e7 01             	and    $0x1,%edi
  2207eb:	e8 60 ac fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2207f0:	24 01                	and    $0x1,%al
  2207f2:	88 44 24 77          	mov    %al,0x77(%rsp)
  2207f6:	0f b6 44 24 77       	movzbl 0x77(%rsp),%eax
  2207fb:	a8 01                	test   $0x1,%al
  2207fd:	0f 84 46 ff ff ff    	je     220749 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x39>
  220803:	eb 00                	jmp    220805 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5>
  220805:	eb 02                	jmp    220809 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf9>
  220807:	0f 0b                	ud2    
  220809:	e8 82 9d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22080e:	24 01                	and    $0x1,%al
  220810:	88 44 24 74          	mov    %al,0x74(%rsp)
  220814:	eb ba                	jmp    2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220816:	8a 44 24 5f          	mov    0x5f(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22081a:	a8 01                	test   $0x1,%al
  22081c:	75 15                	jne    220833 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x123>
  22081e:	eb 00                	jmp    220820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110>
  220820:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220825:	e8 76 18 00 00       	callq  2220a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E>
  22082a:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  22082e:	e9 b1 00 00 00       	jmpq   2208e4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1d4>
                        if !first {
  220833:	8a 44 24 75          	mov    0x75(%rsp),%al
  220837:	34 ff                	xor    $0xff,%al
  220839:	a8 01                	test   $0x1,%al
  22083b:	75 21                	jne    22085e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14e>
  22083d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220842:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220847:	48 8d 35 4b 22 fe ff 	lea    -0x1ddb5(%rip),%rsi        # 202a99 <str.0+0x179>
  22084e:	ba 06 00 00 00       	mov    $0x6,%edx
  220853:	e8 c8 4e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220858:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  22085c:	eb 4e                	jmp    2208ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x19c>
  22085e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220863:	48 8d 35 2c 22 fe ff 	lea    -0x1ddd4(%rip),%rsi        # 202a96 <str.0+0x176>
  22086a:	ba 03 00 00 00       	mov    $0x3,%edx
  22086f:	e8 ac 4e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220874:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  220878:	8a 44 24 5a          	mov    0x5a(%rsp),%al
  22087c:	0f b6 f8             	movzbl %al,%edi
  22087f:	83 e7 01             	and    $0x1,%edi
  220882:	e8 c9 ab fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220887:	24 01                	and    $0x1,%al
  220889:	88 44 24 78          	mov    %al,0x78(%rsp)
  22088d:	0f b6 44 24 78       	movzbl 0x78(%rsp),%eax
  220892:	a8 01                	test   $0x1,%al
  220894:	74 a7                	je     22083d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12d>
  220896:	eb 00                	jmp    220898 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x188>
  220898:	eb 02                	jmp    22089c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x18c>
  22089a:	0f 0b                	ud2    
  22089c:	e8 ef 9c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2208a1:	24 01                	and    $0x1,%al
  2208a3:	88 44 24 74          	mov    %al,0x74(%rsp)
  2208a7:	e9 24 ff ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2208ac:	8a 44 24 5b          	mov    0x5b(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2208b0:	0f b6 f8             	movzbl %al,%edi
  2208b3:	83 e7 01             	and    $0x1,%edi
  2208b6:	e8 95 ab fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2208bb:	24 01                	and    $0x1,%al
  2208bd:	88 44 24 79          	mov    %al,0x79(%rsp)
  2208c1:	0f b6 44 24 79       	movzbl 0x79(%rsp),%eax
  2208c6:	a8 01                	test   $0x1,%al
  2208c8:	0f 84 52 ff ff ff    	je     220820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110>
  2208ce:	eb 00                	jmp    2208d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1c0>
  2208d0:	eb 02                	jmp    2208d4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1c4>
  2208d2:	0f 0b                	ud2    
  2208d4:	e8 b7 9c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2208d9:	24 01                	and    $0x1,%al
  2208db:	88 44 24 74          	mov    %al,0x74(%rsp)
  2208df:	e9 ec fe ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2208e4:	8a 44 24 5c          	mov    0x5c(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2208e8:	a8 01                	test   $0x1,%al
  2208ea:	75 15                	jne    220901 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1f1>
  2208ec:	eb 00                	jmp    2208ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1de>
  2208ee:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2208f3:	e8 e8 17 00 00       	callq  2220e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE>
  2208f8:	88 44 24 59          	mov    %al,0x59(%rsp)
  2208fc:	e9 b1 00 00 00       	jmpq   2209b2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2a2>
                        if !first {
  220901:	8a 44 24 75          	mov    0x75(%rsp),%al
  220905:	34 ff                	xor    $0xff,%al
  220907:	a8 01                	test   $0x1,%al
  220909:	75 21                	jne    22092c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x21c>
  22090b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220910:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220915:	48 8d 35 83 21 fe ff 	lea    -0x1de7d(%rip),%rsi        # 202a9f <str.0+0x17f>
  22091c:	ba 06 00 00 00       	mov    $0x6,%edx
  220921:	e8 fa 4d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220926:	88 44 24 58          	mov    %al,0x58(%rsp)
  22092a:	eb 4e                	jmp    22097a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x26a>
  22092c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220931:	48 8d 35 5e 21 fe ff 	lea    -0x1dea2(%rip),%rsi        # 202a96 <str.0+0x176>
  220938:	ba 03 00 00 00       	mov    $0x3,%edx
  22093d:	e8 de 4d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220942:	88 44 24 57          	mov    %al,0x57(%rsp)
  220946:	8a 44 24 57          	mov    0x57(%rsp),%al
  22094a:	0f b6 f8             	movzbl %al,%edi
  22094d:	83 e7 01             	and    $0x1,%edi
  220950:	e8 fb aa fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220955:	24 01                	and    $0x1,%al
  220957:	88 44 24 7a          	mov    %al,0x7a(%rsp)
  22095b:	0f b6 44 24 7a       	movzbl 0x7a(%rsp),%eax
  220960:	a8 01                	test   $0x1,%al
  220962:	74 a7                	je     22090b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1fb>
  220964:	eb 00                	jmp    220966 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x256>
  220966:	eb 02                	jmp    22096a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x25a>
  220968:	0f 0b                	ud2    
  22096a:	e8 21 9c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22096f:	24 01                	and    $0x1,%al
  220971:	88 44 24 74          	mov    %al,0x74(%rsp)
  220975:	e9 56 fe ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22097a:	8a 44 24 58          	mov    0x58(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22097e:	0f b6 f8             	movzbl %al,%edi
  220981:	83 e7 01             	and    $0x1,%edi
  220984:	e8 c7 aa fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220989:	24 01                	and    $0x1,%al
  22098b:	88 44 24 7b          	mov    %al,0x7b(%rsp)
  22098f:	0f b6 44 24 7b       	movzbl 0x7b(%rsp),%eax
  220994:	a8 01                	test   $0x1,%al
  220996:	0f 84 52 ff ff ff    	je     2208ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1de>
  22099c:	eb 00                	jmp    22099e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x28e>
  22099e:	eb 02                	jmp    2209a2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x292>
  2209a0:	0f 0b                	ud2    
  2209a2:	e8 e9 9b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2209a7:	24 01                	and    $0x1,%al
  2209a9:	88 44 24 74          	mov    %al,0x74(%rsp)
  2209ad:	e9 1e fe ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2209b2:	8a 44 24 59          	mov    0x59(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2209b6:	a8 01                	test   $0x1,%al
  2209b8:	75 15                	jne    2209cf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2bf>
  2209ba:	eb 00                	jmp    2209bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ac>
  2209bc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2209c1:	e8 5a 17 00 00       	callq  222120 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E>
  2209c6:	88 44 24 56          	mov    %al,0x56(%rsp)
  2209ca:	e9 b1 00 00 00       	jmpq   220a80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x370>
                        if !first {
  2209cf:	8a 44 24 75          	mov    0x75(%rsp),%al
  2209d3:	34 ff                	xor    $0xff,%al
  2209d5:	a8 01                	test   $0x1,%al
  2209d7:	75 21                	jne    2209fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ea>
  2209d9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2209de:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2209e3:	48 8d 35 bb 20 fe ff 	lea    -0x1df45(%rip),%rsi        # 202aa5 <str.0+0x185>
  2209ea:	ba 07 00 00 00       	mov    $0x7,%edx
  2209ef:	e8 2c 4d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2209f4:	88 44 24 55          	mov    %al,0x55(%rsp)
  2209f8:	eb 4e                	jmp    220a48 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x338>
  2209fa:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2209ff:	48 8d 35 90 20 fe ff 	lea    -0x1df70(%rip),%rsi        # 202a96 <str.0+0x176>
  220a06:	ba 03 00 00 00       	mov    $0x3,%edx
  220a0b:	e8 10 4d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220a10:	88 44 24 54          	mov    %al,0x54(%rsp)
  220a14:	8a 44 24 54          	mov    0x54(%rsp),%al
  220a18:	0f b6 f8             	movzbl %al,%edi
  220a1b:	83 e7 01             	and    $0x1,%edi
  220a1e:	e8 2d aa fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220a23:	24 01                	and    $0x1,%al
  220a25:	88 44 24 7c          	mov    %al,0x7c(%rsp)
  220a29:	0f b6 44 24 7c       	movzbl 0x7c(%rsp),%eax
  220a2e:	a8 01                	test   $0x1,%al
  220a30:	74 a7                	je     2209d9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2c9>
  220a32:	eb 00                	jmp    220a34 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x324>
  220a34:	eb 02                	jmp    220a38 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x328>
  220a36:	0f 0b                	ud2    
  220a38:	e8 53 9b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220a3d:	24 01                	and    $0x1,%al
  220a3f:	88 44 24 74          	mov    %al,0x74(%rsp)
  220a43:	e9 88 fd ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220a48:	8a 44 24 55          	mov    0x55(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220a4c:	0f b6 f8             	movzbl %al,%edi
  220a4f:	83 e7 01             	and    $0x1,%edi
  220a52:	e8 f9 a9 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220a57:	24 01                	and    $0x1,%al
  220a59:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  220a5d:	0f b6 44 24 7d       	movzbl 0x7d(%rsp),%eax
  220a62:	a8 01                	test   $0x1,%al
  220a64:	0f 84 52 ff ff ff    	je     2209bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x2ac>
  220a6a:	eb 00                	jmp    220a6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x35c>
  220a6c:	eb 02                	jmp    220a70 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x360>
  220a6e:	0f 0b                	ud2    
  220a70:	e8 1b 9b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220a75:	24 01                	and    $0x1,%al
  220a77:	88 44 24 74          	mov    %al,0x74(%rsp)
  220a7b:	e9 50 fd ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220a80:	8a 44 24 56          	mov    0x56(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220a84:	a8 01                	test   $0x1,%al
  220a86:	75 15                	jne    220a9d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x38d>
  220a88:	eb 00                	jmp    220a8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x37a>
  220a8a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220a8f:	e8 cc 16 00 00       	callq  222160 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E>
  220a94:	88 44 24 53          	mov    %al,0x53(%rsp)
  220a98:	e9 b1 00 00 00       	jmpq   220b4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x43e>
                        if !first {
  220a9d:	8a 44 24 75          	mov    0x75(%rsp),%al
  220aa1:	34 ff                	xor    $0xff,%al
  220aa3:	a8 01                	test   $0x1,%al
  220aa5:	75 21                	jne    220ac8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3b8>
  220aa7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220aac:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220ab1:	48 8d 35 f4 1f fe ff 	lea    -0x1e00c(%rip),%rsi        # 202aac <str.0+0x18c>
  220ab8:	ba 06 00 00 00       	mov    $0x6,%edx
  220abd:	e8 5e 4c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220ac2:	88 44 24 52          	mov    %al,0x52(%rsp)
  220ac6:	eb 4e                	jmp    220b16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x406>
  220ac8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220acd:	48 8d 35 c2 1f fe ff 	lea    -0x1e03e(%rip),%rsi        # 202a96 <str.0+0x176>
  220ad4:	ba 03 00 00 00       	mov    $0x3,%edx
  220ad9:	e8 42 4c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220ade:	88 44 24 51          	mov    %al,0x51(%rsp)
  220ae2:	8a 44 24 51          	mov    0x51(%rsp),%al
  220ae6:	0f b6 f8             	movzbl %al,%edi
  220ae9:	83 e7 01             	and    $0x1,%edi
  220aec:	e8 5f a9 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220af1:	24 01                	and    $0x1,%al
  220af3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  220af7:	0f b6 44 24 7e       	movzbl 0x7e(%rsp),%eax
  220afc:	a8 01                	test   $0x1,%al
  220afe:	74 a7                	je     220aa7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x397>
  220b00:	eb 00                	jmp    220b02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3f2>
  220b02:	eb 02                	jmp    220b06 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x3f6>
  220b04:	0f 0b                	ud2    
  220b06:	e8 85 9a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220b0b:	24 01                	and    $0x1,%al
  220b0d:	88 44 24 74          	mov    %al,0x74(%rsp)
  220b11:	e9 ba fc ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220b16:	8a 44 24 52          	mov    0x52(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220b1a:	0f b6 f8             	movzbl %al,%edi
  220b1d:	83 e7 01             	and    $0x1,%edi
  220b20:	e8 2b a9 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220b25:	24 01                	and    $0x1,%al
  220b27:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  220b2b:	0f b6 44 24 7f       	movzbl 0x7f(%rsp),%eax
  220b30:	a8 01                	test   $0x1,%al
  220b32:	0f 84 52 ff ff ff    	je     220a8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x37a>
  220b38:	eb 00                	jmp    220b3a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x42a>
  220b3a:	eb 02                	jmp    220b3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x42e>
  220b3c:	0f 0b                	ud2    
  220b3e:	e8 4d 9a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220b43:	24 01                	and    $0x1,%al
  220b45:	88 44 24 74          	mov    %al,0x74(%rsp)
  220b49:	e9 82 fc ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220b4e:	8a 44 24 53          	mov    0x53(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220b52:	a8 01                	test   $0x1,%al
  220b54:	75 15                	jne    220b6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x45b>
  220b56:	eb 00                	jmp    220b58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x448>
  220b58:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220b5d:	e8 3e 16 00 00       	callq  2221a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE>
  220b62:	88 44 24 50          	mov    %al,0x50(%rsp)
  220b66:	e9 bd 00 00 00       	jmpq   220c28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x518>
                        if !first {
  220b6b:	8a 44 24 75          	mov    0x75(%rsp),%al
  220b6f:	34 ff                	xor    $0xff,%al
  220b71:	a8 01                	test   $0x1,%al
  220b73:	75 21                	jne    220b96 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x486>
  220b75:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220b7a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220b7f:	48 8d 35 2c 1f fe ff 	lea    -0x1e0d4(%rip),%rsi        # 202ab2 <str.0+0x192>
  220b86:	ba 03 00 00 00       	mov    $0x3,%edx
  220b8b:	e8 90 4b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220b90:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  220b94:	eb 54                	jmp    220bea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4da>
  220b96:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220b9b:	48 8d 35 f4 1e fe ff 	lea    -0x1e10c(%rip),%rsi        # 202a96 <str.0+0x176>
  220ba2:	ba 03 00 00 00       	mov    $0x3,%edx
  220ba7:	e8 74 4b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220bac:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  220bb0:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  220bb4:	0f b6 f8             	movzbl %al,%edi
  220bb7:	83 e7 01             	and    $0x1,%edi
  220bba:	e8 91 a8 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220bbf:	24 01                	and    $0x1,%al
  220bc1:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  220bc8:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  220bcf:	00 
  220bd0:	a8 01                	test   $0x1,%al
  220bd2:	74 a1                	je     220b75 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x465>
  220bd4:	eb 00                	jmp    220bd6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4c6>
  220bd6:	eb 02                	jmp    220bda <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x4ca>
  220bd8:	0f 0b                	ud2    
  220bda:	e8 b1 99 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220bdf:	24 01                	and    $0x1,%al
  220be1:	88 44 24 74          	mov    %al,0x74(%rsp)
  220be5:	e9 e6 fb ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220bea:	8a 44 24 4f          	mov    0x4f(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220bee:	0f b6 f8             	movzbl %al,%edi
  220bf1:	83 e7 01             	and    $0x1,%edi
  220bf4:	e8 57 a8 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220bf9:	24 01                	and    $0x1,%al
  220bfb:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  220c02:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  220c09:	00 
  220c0a:	a8 01                	test   $0x1,%al
  220c0c:	0f 84 46 ff ff ff    	je     220b58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x448>
  220c12:	eb 00                	jmp    220c14 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x504>
  220c14:	eb 02                	jmp    220c18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x508>
  220c16:	0f 0b                	ud2    
  220c18:	e8 73 99 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220c1d:	24 01                	and    $0x1,%al
  220c1f:	88 44 24 74          	mov    %al,0x74(%rsp)
  220c23:	e9 a8 fb ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220c28:	8a 44 24 50          	mov    0x50(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220c2c:	a8 01                	test   $0x1,%al
  220c2e:	75 15                	jne    220c45 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x535>
  220c30:	eb 00                	jmp    220c32 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x522>
  220c32:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220c37:	e8 a4 15 00 00       	callq  2221e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E>
  220c3c:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  220c40:	e9 bd 00 00 00       	jmpq   220d02 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5f2>
                        if !first {
  220c45:	8a 44 24 75          	mov    0x75(%rsp),%al
  220c49:	34 ff                	xor    $0xff,%al
  220c4b:	a8 01                	test   $0x1,%al
  220c4d:	75 21                	jne    220c70 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x560>
  220c4f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220c54:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220c59:	48 8d 35 55 1e fe ff 	lea    -0x1e1ab(%rip),%rsi        # 202ab5 <str.0+0x195>
  220c60:	ba 03 00 00 00       	mov    $0x3,%edx
  220c65:	e8 b6 4a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220c6a:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  220c6e:	eb 54                	jmp    220cc4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5b4>
  220c70:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220c75:	48 8d 35 1a 1e fe ff 	lea    -0x1e1e6(%rip),%rsi        # 202a96 <str.0+0x176>
  220c7c:	ba 03 00 00 00       	mov    $0x3,%edx
  220c81:	e8 9a 4a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220c86:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  220c8a:	8a 44 24 4b          	mov    0x4b(%rsp),%al
  220c8e:	0f b6 f8             	movzbl %al,%edi
  220c91:	83 e7 01             	and    $0x1,%edi
  220c94:	e8 b7 a7 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220c99:	24 01                	and    $0x1,%al
  220c9b:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  220ca2:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  220ca9:	00 
  220caa:	a8 01                	test   $0x1,%al
  220cac:	74 a1                	je     220c4f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x53f>
  220cae:	eb 00                	jmp    220cb0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5a0>
  220cb0:	eb 02                	jmp    220cb4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5a4>
  220cb2:	0f 0b                	ud2    
  220cb4:	e8 d7 98 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220cb9:	24 01                	and    $0x1,%al
  220cbb:	88 44 24 74          	mov    %al,0x74(%rsp)
  220cbf:	e9 0c fb ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220cc4:	8a 44 24 4c          	mov    0x4c(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220cc8:	0f b6 f8             	movzbl %al,%edi
  220ccb:	83 e7 01             	and    $0x1,%edi
  220cce:	e8 7d a7 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220cd3:	24 01                	and    $0x1,%al
  220cd5:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  220cdc:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  220ce3:	00 
  220ce4:	a8 01                	test   $0x1,%al
  220ce6:	0f 84 46 ff ff ff    	je     220c32 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x522>
  220cec:	eb 00                	jmp    220cee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5de>
  220cee:	eb 02                	jmp    220cf2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5e2>
  220cf0:	0f 0b                	ud2    
  220cf2:	e8 99 98 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220cf7:	24 01                	and    $0x1,%al
  220cf9:	88 44 24 74          	mov    %al,0x74(%rsp)
  220cfd:	e9 ce fa ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220d02:	8a 44 24 4d          	mov    0x4d(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220d06:	a8 01                	test   $0x1,%al
  220d08:	75 15                	jne    220d1f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x60f>
  220d0a:	eb 00                	jmp    220d0c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5fc>
  220d0c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220d11:	e8 1a 15 00 00       	callq  222230 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E>
  220d16:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  220d1a:	e9 bd 00 00 00       	jmpq   220ddc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6cc>
                        if !first {
  220d1f:	8a 44 24 75          	mov    0x75(%rsp),%al
  220d23:	34 ff                	xor    $0xff,%al
  220d25:	a8 01                	test   $0x1,%al
  220d27:	75 21                	jne    220d4a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x63a>
  220d29:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220d2e:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220d33:	48 8d 35 7e 1d fe ff 	lea    -0x1e282(%rip),%rsi        # 202ab8 <str.0+0x198>
  220d3a:	ba 03 00 00 00       	mov    $0x3,%edx
  220d3f:	e8 dc 49 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220d44:	88 44 24 49          	mov    %al,0x49(%rsp)
  220d48:	eb 54                	jmp    220d9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x68e>
  220d4a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220d4f:	48 8d 35 40 1d fe ff 	lea    -0x1e2c0(%rip),%rsi        # 202a96 <str.0+0x176>
  220d56:	ba 03 00 00 00       	mov    $0x3,%edx
  220d5b:	e8 c0 49 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220d60:	88 44 24 48          	mov    %al,0x48(%rsp)
  220d64:	8a 44 24 48          	mov    0x48(%rsp),%al
  220d68:	0f b6 f8             	movzbl %al,%edi
  220d6b:	83 e7 01             	and    $0x1,%edi
  220d6e:	e8 dd a6 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220d73:	24 01                	and    $0x1,%al
  220d75:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  220d7c:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  220d83:	00 
  220d84:	a8 01                	test   $0x1,%al
  220d86:	74 a1                	je     220d29 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x619>
  220d88:	eb 00                	jmp    220d8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x67a>
  220d8a:	eb 02                	jmp    220d8e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x67e>
  220d8c:	0f 0b                	ud2    
  220d8e:	e8 fd 97 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220d93:	24 01                	and    $0x1,%al
  220d95:	88 44 24 74          	mov    %al,0x74(%rsp)
  220d99:	e9 32 fa ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220d9e:	8a 44 24 49          	mov    0x49(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220da2:	0f b6 f8             	movzbl %al,%edi
  220da5:	83 e7 01             	and    $0x1,%edi
  220da8:	e8 a3 a6 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220dad:	24 01                	and    $0x1,%al
  220daf:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  220db6:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  220dbd:	00 
  220dbe:	a8 01                	test   $0x1,%al
  220dc0:	0f 84 46 ff ff ff    	je     220d0c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x5fc>
  220dc6:	eb 00                	jmp    220dc8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6b8>
  220dc8:	eb 02                	jmp    220dcc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6bc>
  220dca:	0f 0b                	ud2    
  220dcc:	e8 bf 97 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220dd1:	24 01                	and    $0x1,%al
  220dd3:	88 44 24 74          	mov    %al,0x74(%rsp)
  220dd7:	e9 f4 f9 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220ddc:	8a 44 24 4a          	mov    0x4a(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220de0:	a8 01                	test   $0x1,%al
  220de2:	75 15                	jne    220df9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6e9>
  220de4:	eb 00                	jmp    220de6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6d6>
  220de6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220deb:	e8 90 14 00 00       	callq  222280 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE>
  220df0:	88 44 24 47          	mov    %al,0x47(%rsp)
  220df4:	e9 bd 00 00 00       	jmpq   220eb6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7a6>
                        if !first {
  220df9:	8a 44 24 75          	mov    0x75(%rsp),%al
  220dfd:	34 ff                	xor    $0xff,%al
  220dff:	a8 01                	test   $0x1,%al
  220e01:	75 21                	jne    220e24 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x714>
  220e03:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220e08:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220e0d:	48 8d 35 a7 1c fe ff 	lea    -0x1e359(%rip),%rsi        # 202abb <str.0+0x19b>
  220e14:	ba 03 00 00 00       	mov    $0x3,%edx
  220e19:	e8 02 49 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220e1e:	88 44 24 46          	mov    %al,0x46(%rsp)
  220e22:	eb 54                	jmp    220e78 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x768>
  220e24:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220e29:	48 8d 35 66 1c fe ff 	lea    -0x1e39a(%rip),%rsi        # 202a96 <str.0+0x176>
  220e30:	ba 03 00 00 00       	mov    $0x3,%edx
  220e35:	e8 e6 48 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220e3a:	88 44 24 45          	mov    %al,0x45(%rsp)
  220e3e:	8a 44 24 45          	mov    0x45(%rsp),%al
  220e42:	0f b6 f8             	movzbl %al,%edi
  220e45:	83 e7 01             	and    $0x1,%edi
  220e48:	e8 03 a6 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220e4d:	24 01                	and    $0x1,%al
  220e4f:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  220e56:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  220e5d:	00 
  220e5e:	a8 01                	test   $0x1,%al
  220e60:	74 a1                	je     220e03 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6f3>
  220e62:	eb 00                	jmp    220e64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x754>
  220e64:	eb 02                	jmp    220e68 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x758>
  220e66:	0f 0b                	ud2    
  220e68:	e8 23 97 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220e6d:	24 01                	and    $0x1,%al
  220e6f:	88 44 24 74          	mov    %al,0x74(%rsp)
  220e73:	e9 58 f9 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220e78:	8a 44 24 46          	mov    0x46(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220e7c:	0f b6 f8             	movzbl %al,%edi
  220e7f:	83 e7 01             	and    $0x1,%edi
  220e82:	e8 c9 a5 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220e87:	24 01                	and    $0x1,%al
  220e89:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  220e90:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  220e97:	00 
  220e98:	a8 01                	test   $0x1,%al
  220e9a:	0f 84 46 ff ff ff    	je     220de6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x6d6>
  220ea0:	eb 00                	jmp    220ea2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x792>
  220ea2:	eb 02                	jmp    220ea6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x796>
  220ea4:	0f 0b                	ud2    
  220ea6:	e8 e5 96 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220eab:	24 01                	and    $0x1,%al
  220ead:	88 44 24 74          	mov    %al,0x74(%rsp)
  220eb1:	e9 1a f9 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220eb6:	8a 44 24 47          	mov    0x47(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220eba:	a8 01                	test   $0x1,%al
  220ebc:	75 15                	jne    220ed3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7c3>
  220ebe:	eb 00                	jmp    220ec0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7b0>
  220ec0:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220ec5:	e8 06 14 00 00       	callq  2222d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE>
  220eca:	88 44 24 44          	mov    %al,0x44(%rsp)
  220ece:	e9 bd 00 00 00       	jmpq   220f90 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x880>
                        if !first {
  220ed3:	8a 44 24 75          	mov    0x75(%rsp),%al
  220ed7:	34 ff                	xor    $0xff,%al
  220ed9:	a8 01                	test   $0x1,%al
  220edb:	75 21                	jne    220efe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7ee>
  220edd:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220ee2:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220ee7:	48 8d 35 d0 1b fe ff 	lea    -0x1e430(%rip),%rsi        # 202abe <str.0+0x19e>
  220eee:	ba 05 00 00 00       	mov    $0x5,%edx
  220ef3:	e8 28 48 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220ef8:	88 44 24 43          	mov    %al,0x43(%rsp)
  220efc:	eb 54                	jmp    220f52 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x842>
  220efe:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220f03:	48 8d 35 8c 1b fe ff 	lea    -0x1e474(%rip),%rsi        # 202a96 <str.0+0x176>
  220f0a:	ba 03 00 00 00       	mov    $0x3,%edx
  220f0f:	e8 0c 48 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220f14:	88 44 24 42          	mov    %al,0x42(%rsp)
  220f18:	8a 44 24 42          	mov    0x42(%rsp),%al
  220f1c:	0f b6 f8             	movzbl %al,%edi
  220f1f:	83 e7 01             	and    $0x1,%edi
  220f22:	e8 29 a5 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220f27:	24 01                	and    $0x1,%al
  220f29:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  220f30:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  220f37:	00 
  220f38:	a8 01                	test   $0x1,%al
  220f3a:	74 a1                	je     220edd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7cd>
  220f3c:	eb 00                	jmp    220f3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x82e>
  220f3e:	eb 02                	jmp    220f42 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x832>
  220f40:	0f 0b                	ud2    
  220f42:	e8 49 96 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220f47:	24 01                	and    $0x1,%al
  220f49:	88 44 24 74          	mov    %al,0x74(%rsp)
  220f4d:	e9 7e f8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220f52:	8a 44 24 43          	mov    0x43(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  220f56:	0f b6 f8             	movzbl %al,%edi
  220f59:	83 e7 01             	and    $0x1,%edi
  220f5c:	e8 ef a4 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  220f61:	24 01                	and    $0x1,%al
  220f63:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  220f6a:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  220f71:	00 
  220f72:	a8 01                	test   $0x1,%al
  220f74:	0f 84 46 ff ff ff    	je     220ec0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x7b0>
  220f7a:	eb 00                	jmp    220f7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x86c>
  220f7c:	eb 02                	jmp    220f80 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x870>
  220f7e:	0f 0b                	ud2    
  220f80:	e8 0b 96 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  220f85:	24 01                	and    $0x1,%al
  220f87:	88 44 24 74          	mov    %al,0x74(%rsp)
  220f8b:	e9 40 f8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  220f90:	8a 44 24 44          	mov    0x44(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  220f94:	a8 01                	test   $0x1,%al
  220f96:	75 15                	jne    220fad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x89d>
  220f98:	eb 00                	jmp    220f9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x88a>
  220f9a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  220f9f:	e8 7c 13 00 00       	callq  222320 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE>
  220fa4:	88 44 24 41          	mov    %al,0x41(%rsp)
  220fa8:	e9 bd 00 00 00       	jmpq   22106a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x95a>
                        if !first {
  220fad:	8a 44 24 75          	mov    0x75(%rsp),%al
  220fb1:	34 ff                	xor    $0xff,%al
  220fb3:	a8 01                	test   $0x1,%al
  220fb5:	75 21                	jne    220fd8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x8c8>
  220fb7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  220fbc:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  220fc1:	48 8d 35 fb 1a fe ff 	lea    -0x1e505(%rip),%rsi        # 202ac3 <str.0+0x1a3>
  220fc8:	ba 03 00 00 00       	mov    $0x3,%edx
  220fcd:	e8 4e 47 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220fd2:	88 44 24 40          	mov    %al,0x40(%rsp)
  220fd6:	eb 54                	jmp    22102c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x91c>
  220fd8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  220fdd:	48 8d 35 b2 1a fe ff 	lea    -0x1e54e(%rip),%rsi        # 202a96 <str.0+0x176>
  220fe4:	ba 03 00 00 00       	mov    $0x3,%edx
  220fe9:	e8 32 47 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  220fee:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  220ff2:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  220ff6:	0f b6 f8             	movzbl %al,%edi
  220ff9:	83 e7 01             	and    $0x1,%edi
  220ffc:	e8 4f a4 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221001:	24 01                	and    $0x1,%al
  221003:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  22100a:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  221011:	00 
  221012:	a8 01                	test   $0x1,%al
  221014:	74 a1                	je     220fb7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x8a7>
  221016:	eb 00                	jmp    221018 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x908>
  221018:	eb 02                	jmp    22101c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x90c>
  22101a:	0f 0b                	ud2    
  22101c:	e8 6f 95 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221021:	24 01                	and    $0x1,%al
  221023:	88 44 24 74          	mov    %al,0x74(%rsp)
  221027:	e9 a4 f7 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22102c:	8a 44 24 40          	mov    0x40(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221030:	0f b6 f8             	movzbl %al,%edi
  221033:	83 e7 01             	and    $0x1,%edi
  221036:	e8 15 a4 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22103b:	24 01                	and    $0x1,%al
  22103d:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  221044:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  22104b:	00 
  22104c:	a8 01                	test   $0x1,%al
  22104e:	0f 84 46 ff ff ff    	je     220f9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x88a>
  221054:	eb 00                	jmp    221056 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x946>
  221056:	eb 02                	jmp    22105a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x94a>
  221058:	0f 0b                	ud2    
  22105a:	e8 31 95 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22105f:	24 01                	and    $0x1,%al
  221061:	88 44 24 74          	mov    %al,0x74(%rsp)
  221065:	e9 66 f7 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22106a:	8a 44 24 41          	mov    0x41(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22106e:	a8 01                	test   $0x1,%al
  221070:	75 15                	jne    221087 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x977>
  221072:	eb 00                	jmp    221074 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x964>
  221074:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221079:	e8 f2 12 00 00       	callq  222370 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE>
  22107e:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  221082:	e9 bd 00 00 00       	jmpq   221144 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa34>
                        if !first {
  221087:	8a 44 24 75          	mov    0x75(%rsp),%al
  22108b:	34 ff                	xor    $0xff,%al
  22108d:	a8 01                	test   $0x1,%al
  22108f:	75 21                	jne    2210b2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9a2>
  221091:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221096:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22109b:	48 8d 35 24 1a fe ff 	lea    -0x1e5dc(%rip),%rsi        # 202ac6 <str.0+0x1a6>
  2210a2:	ba 03 00 00 00       	mov    $0x3,%edx
  2210a7:	e8 74 46 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2210ac:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  2210b0:	eb 54                	jmp    221106 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9f6>
  2210b2:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2210b7:	48 8d 35 d8 19 fe ff 	lea    -0x1e628(%rip),%rsi        # 202a96 <str.0+0x176>
  2210be:	ba 03 00 00 00       	mov    $0x3,%edx
  2210c3:	e8 58 46 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2210c8:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  2210cc:	8a 44 24 3c          	mov    0x3c(%rsp),%al
  2210d0:	0f b6 f8             	movzbl %al,%edi
  2210d3:	83 e7 01             	and    $0x1,%edi
  2210d6:	e8 75 a3 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2210db:	24 01                	and    $0x1,%al
  2210dd:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  2210e4:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  2210eb:	00 
  2210ec:	a8 01                	test   $0x1,%al
  2210ee:	74 a1                	je     221091 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x981>
  2210f0:	eb 00                	jmp    2210f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9e2>
  2210f2:	eb 02                	jmp    2210f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x9e6>
  2210f4:	0f 0b                	ud2    
  2210f6:	e8 95 94 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2210fb:	24 01                	and    $0x1,%al
  2210fd:	88 44 24 74          	mov    %al,0x74(%rsp)
  221101:	e9 ca f6 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221106:	8a 44 24 3d          	mov    0x3d(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22110a:	0f b6 f8             	movzbl %al,%edi
  22110d:	83 e7 01             	and    $0x1,%edi
  221110:	e8 3b a3 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221115:	24 01                	and    $0x1,%al
  221117:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  22111e:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  221125:	00 
  221126:	a8 01                	test   $0x1,%al
  221128:	0f 84 46 ff ff ff    	je     221074 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x964>
  22112e:	eb 00                	jmp    221130 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa20>
  221130:	eb 02                	jmp    221134 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa24>
  221132:	0f 0b                	ud2    
  221134:	e8 57 94 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221139:	24 01                	and    $0x1,%al
  22113b:	88 44 24 74          	mov    %al,0x74(%rsp)
  22113f:	e9 8c f6 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221144:	8a 44 24 3e          	mov    0x3e(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221148:	a8 01                	test   $0x1,%al
  22114a:	75 15                	jne    221161 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa51>
  22114c:	eb 00                	jmp    22114e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa3e>
  22114e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221153:	e8 68 12 00 00       	callq  2223c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E>
  221158:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  22115c:	e9 bd 00 00 00       	jmpq   22121e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb0e>
                        if !first {
  221161:	8a 44 24 75          	mov    0x75(%rsp),%al
  221165:	34 ff                	xor    $0xff,%al
  221167:	a8 01                	test   $0x1,%al
  221169:	75 21                	jne    22118c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa7c>
  22116b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221170:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221175:	48 8d 35 e8 f7 fd ff 	lea    -0x20818(%rip),%rsi        # 200964 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x2c>
  22117c:	ba 04 00 00 00       	mov    $0x4,%edx
  221181:	e8 9a 45 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221186:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  22118a:	eb 54                	jmp    2211e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xad0>
  22118c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221191:	48 8d 35 fe 18 fe ff 	lea    -0x1e702(%rip),%rsi        # 202a96 <str.0+0x176>
  221198:	ba 03 00 00 00       	mov    $0x3,%edx
  22119d:	e8 7e 45 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2211a2:	88 44 24 39          	mov    %al,0x39(%rsp)
  2211a6:	8a 44 24 39          	mov    0x39(%rsp),%al
  2211aa:	0f b6 f8             	movzbl %al,%edi
  2211ad:	83 e7 01             	and    $0x1,%edi
  2211b0:	e8 9b a2 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2211b5:	24 01                	and    $0x1,%al
  2211b7:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  2211be:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  2211c5:	00 
  2211c6:	a8 01                	test   $0x1,%al
  2211c8:	74 a1                	je     22116b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa5b>
  2211ca:	eb 00                	jmp    2211cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xabc>
  2211cc:	eb 02                	jmp    2211d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xac0>
  2211ce:	0f 0b                	ud2    
  2211d0:	e8 bb 93 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2211d5:	24 01                	and    $0x1,%al
  2211d7:	88 44 24 74          	mov    %al,0x74(%rsp)
  2211db:	e9 f0 f5 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2211e0:	8a 44 24 3a          	mov    0x3a(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2211e4:	0f b6 f8             	movzbl %al,%edi
  2211e7:	83 e7 01             	and    $0x1,%edi
  2211ea:	e8 61 a2 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2211ef:	24 01                	and    $0x1,%al
  2211f1:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  2211f8:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  2211ff:	00 
  221200:	a8 01                	test   $0x1,%al
  221202:	0f 84 46 ff ff ff    	je     22114e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xa3e>
  221208:	eb 00                	jmp    22120a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xafa>
  22120a:	eb 02                	jmp    22120e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xafe>
  22120c:	0f 0b                	ud2    
  22120e:	e8 7d 93 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221213:	24 01                	and    $0x1,%al
  221215:	88 44 24 74          	mov    %al,0x74(%rsp)
  221219:	e9 b2 f5 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22121e:	8a 44 24 3b          	mov    0x3b(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221222:	a8 01                	test   $0x1,%al
  221224:	75 15                	jne    22123b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb2b>
  221226:	eb 00                	jmp    221228 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb18>
  221228:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  22122d:	e8 de 11 00 00       	callq  222410 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE>
  221232:	88 44 24 38          	mov    %al,0x38(%rsp)
  221236:	e9 bd 00 00 00       	jmpq   2212f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbe8>
                        if !first {
  22123b:	8a 44 24 75          	mov    0x75(%rsp),%al
  22123f:	34 ff                	xor    $0xff,%al
  221241:	a8 01                	test   $0x1,%al
  221243:	75 21                	jne    221266 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb56>
  221245:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22124a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22124f:	48 8d 35 73 18 fe ff 	lea    -0x1e78d(%rip),%rsi        # 202ac9 <str.0+0x1a9>
  221256:	ba 05 00 00 00       	mov    $0x5,%edx
  22125b:	e8 c0 44 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221260:	88 44 24 37          	mov    %al,0x37(%rsp)
  221264:	eb 54                	jmp    2212ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbaa>
  221266:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22126b:	48 8d 35 24 18 fe ff 	lea    -0x1e7dc(%rip),%rsi        # 202a96 <str.0+0x176>
  221272:	ba 03 00 00 00       	mov    $0x3,%edx
  221277:	e8 a4 44 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22127c:	88 44 24 36          	mov    %al,0x36(%rsp)
  221280:	8a 44 24 36          	mov    0x36(%rsp),%al
  221284:	0f b6 f8             	movzbl %al,%edi
  221287:	83 e7 01             	and    $0x1,%edi
  22128a:	e8 c1 a1 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22128f:	24 01                	and    $0x1,%al
  221291:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  221298:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  22129f:	00 
  2212a0:	a8 01                	test   $0x1,%al
  2212a2:	74 a1                	je     221245 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb35>
  2212a4:	eb 00                	jmp    2212a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb96>
  2212a6:	eb 02                	jmp    2212aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb9a>
  2212a8:	0f 0b                	ud2    
  2212aa:	e8 e1 92 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2212af:	24 01                	and    $0x1,%al
  2212b1:	88 44 24 74          	mov    %al,0x74(%rsp)
  2212b5:	e9 16 f5 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2212ba:	8a 44 24 37          	mov    0x37(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2212be:	0f b6 f8             	movzbl %al,%edi
  2212c1:	83 e7 01             	and    $0x1,%edi
  2212c4:	e8 87 a1 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2212c9:	24 01                	and    $0x1,%al
  2212cb:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  2212d2:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  2212d9:	00 
  2212da:	a8 01                	test   $0x1,%al
  2212dc:	0f 84 46 ff ff ff    	je     221228 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xb18>
  2212e2:	eb 00                	jmp    2212e4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbd4>
  2212e4:	eb 02                	jmp    2212e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbd8>
  2212e6:	0f 0b                	ud2    
  2212e8:	e8 a3 92 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2212ed:	24 01                	and    $0x1,%al
  2212ef:	88 44 24 74          	mov    %al,0x74(%rsp)
  2212f3:	e9 d8 f4 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2212f8:	8a 44 24 38          	mov    0x38(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2212fc:	a8 01                	test   $0x1,%al
  2212fe:	75 15                	jne    221315 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc05>
  221300:	eb 00                	jmp    221302 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbf2>
  221302:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221307:	e8 54 11 00 00       	callq  222460 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E>
  22130c:	88 44 24 35          	mov    %al,0x35(%rsp)
  221310:	e9 bd 00 00 00       	jmpq   2213d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcc2>
                        if !first {
  221315:	8a 44 24 75          	mov    0x75(%rsp),%al
  221319:	34 ff                	xor    $0xff,%al
  22131b:	a8 01                	test   $0x1,%al
  22131d:	75 21                	jne    221340 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc30>
  22131f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221324:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221329:	48 8d 35 e0 f5 fd ff 	lea    -0x20a20(%rip),%rsi        # 200910 <str.2+0xd0>
  221330:	ba 04 00 00 00       	mov    $0x4,%edx
  221335:	e8 e6 43 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22133a:	88 44 24 34          	mov    %al,0x34(%rsp)
  22133e:	eb 54                	jmp    221394 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc84>
  221340:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221345:	48 8d 35 4a 17 fe ff 	lea    -0x1e8b6(%rip),%rsi        # 202a96 <str.0+0x176>
  22134c:	ba 03 00 00 00       	mov    $0x3,%edx
  221351:	e8 ca 43 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221356:	88 44 24 33          	mov    %al,0x33(%rsp)
  22135a:	8a 44 24 33          	mov    0x33(%rsp),%al
  22135e:	0f b6 f8             	movzbl %al,%edi
  221361:	83 e7 01             	and    $0x1,%edi
  221364:	e8 e7 a0 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221369:	24 01                	and    $0x1,%al
  22136b:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  221372:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  221379:	00 
  22137a:	a8 01                	test   $0x1,%al
  22137c:	74 a1                	je     22131f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0f>
  22137e:	eb 00                	jmp    221380 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc70>
  221380:	eb 02                	jmp    221384 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc74>
  221382:	0f 0b                	ud2    
  221384:	e8 07 92 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221389:	24 01                	and    $0x1,%al
  22138b:	88 44 24 74          	mov    %al,0x74(%rsp)
  22138f:	e9 3c f4 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221394:	8a 44 24 34          	mov    0x34(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221398:	0f b6 f8             	movzbl %al,%edi
  22139b:	83 e7 01             	and    $0x1,%edi
  22139e:	e8 ad a0 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2213a3:	24 01                	and    $0x1,%al
  2213a5:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  2213ac:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  2213b3:	00 
  2213b4:	a8 01                	test   $0x1,%al
  2213b6:	0f 84 46 ff ff ff    	je     221302 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xbf2>
  2213bc:	eb 00                	jmp    2213be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcae>
  2213be:	eb 02                	jmp    2213c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcb2>
  2213c0:	0f 0b                	ud2    
  2213c2:	e8 c9 91 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2213c7:	24 01                	and    $0x1,%al
  2213c9:	88 44 24 74          	mov    %al,0x74(%rsp)
  2213cd:	e9 fe f3 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2213d2:	8a 44 24 35          	mov    0x35(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2213d6:	a8 01                	test   $0x1,%al
  2213d8:	75 15                	jne    2213ef <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xcdf>
  2213da:	eb 00                	jmp    2213dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xccc>
  2213dc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2213e1:	e8 ca 10 00 00       	callq  2224b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE>
  2213e6:	88 44 24 32          	mov    %al,0x32(%rsp)
  2213ea:	e9 bd 00 00 00       	jmpq   2214ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd9c>
                        if !first {
  2213ef:	8a 44 24 75          	mov    0x75(%rsp),%al
  2213f3:	34 ff                	xor    $0xff,%al
  2213f5:	a8 01                	test   $0x1,%al
  2213f7:	75 21                	jne    22141a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd0a>
  2213f9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2213fe:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221403:	48 8d 35 c4 16 fe ff 	lea    -0x1e93c(%rip),%rsi        # 202ace <str.0+0x1ae>
  22140a:	ba 05 00 00 00       	mov    $0x5,%edx
  22140f:	e8 0c 43 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221414:	88 44 24 31          	mov    %al,0x31(%rsp)
  221418:	eb 54                	jmp    22146e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd5e>
  22141a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22141f:	48 8d 35 70 16 fe ff 	lea    -0x1e990(%rip),%rsi        # 202a96 <str.0+0x176>
  221426:	ba 03 00 00 00       	mov    $0x3,%edx
  22142b:	e8 f0 42 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221430:	88 44 24 30          	mov    %al,0x30(%rsp)
  221434:	8a 44 24 30          	mov    0x30(%rsp),%al
  221438:	0f b6 f8             	movzbl %al,%edi
  22143b:	83 e7 01             	and    $0x1,%edi
  22143e:	e8 0d a0 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221443:	24 01                	and    $0x1,%al
  221445:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  22144c:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  221453:	00 
  221454:	a8 01                	test   $0x1,%al
  221456:	74 a1                	je     2213f9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xce9>
  221458:	eb 00                	jmp    22145a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd4a>
  22145a:	eb 02                	jmp    22145e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd4e>
  22145c:	0f 0b                	ud2    
  22145e:	e8 2d 91 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221463:	24 01                	and    $0x1,%al
  221465:	88 44 24 74          	mov    %al,0x74(%rsp)
  221469:	e9 62 f3 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22146e:	8a 44 24 31          	mov    0x31(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221472:	0f b6 f8             	movzbl %al,%edi
  221475:	83 e7 01             	and    $0x1,%edi
  221478:	e8 d3 9f fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22147d:	24 01                	and    $0x1,%al
  22147f:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  221486:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  22148d:	00 
  22148e:	a8 01                	test   $0x1,%al
  221490:	0f 84 46 ff ff ff    	je     2213dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xccc>
  221496:	eb 00                	jmp    221498 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd88>
  221498:	eb 02                	jmp    22149c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xd8c>
  22149a:	0f 0b                	ud2    
  22149c:	e8 ef 90 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2214a1:	24 01                	and    $0x1,%al
  2214a3:	88 44 24 74          	mov    %al,0x74(%rsp)
  2214a7:	e9 24 f3 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2214ac:	8a 44 24 32          	mov    0x32(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2214b0:	a8 01                	test   $0x1,%al
  2214b2:	75 15                	jne    2214c9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xdb9>
  2214b4:	eb 00                	jmp    2214b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xda6>
  2214b6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2214bb:	e8 40 10 00 00       	callq  222500 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE>
  2214c0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2214c4:	e9 bd 00 00 00       	jmpq   221586 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe76>
                        if !first {
  2214c9:	8a 44 24 75          	mov    0x75(%rsp),%al
  2214cd:	34 ff                	xor    $0xff,%al
  2214cf:	a8 01                	test   $0x1,%al
  2214d1:	75 21                	jne    2214f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xde4>
  2214d3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2214d8:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2214dd:	48 8d 35 ef 15 fe ff 	lea    -0x1ea11(%rip),%rsi        # 202ad3 <str.0+0x1b3>
  2214e4:	ba 03 00 00 00       	mov    $0x3,%edx
  2214e9:	e8 32 42 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2214ee:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  2214f2:	eb 54                	jmp    221548 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe38>
  2214f4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2214f9:	48 8d 35 96 15 fe ff 	lea    -0x1ea6a(%rip),%rsi        # 202a96 <str.0+0x176>
  221500:	ba 03 00 00 00       	mov    $0x3,%edx
  221505:	e8 16 42 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22150a:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  22150e:	8a 44 24 2d          	mov    0x2d(%rsp),%al
  221512:	0f b6 f8             	movzbl %al,%edi
  221515:	83 e7 01             	and    $0x1,%edi
  221518:	e8 33 9f fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22151d:	24 01                	and    $0x1,%al
  22151f:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  221526:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  22152d:	00 
  22152e:	a8 01                	test   $0x1,%al
  221530:	74 a1                	je     2214d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xdc3>
  221532:	eb 00                	jmp    221534 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe24>
  221534:	eb 02                	jmp    221538 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe28>
  221536:	0f 0b                	ud2    
  221538:	e8 53 90 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22153d:	24 01                	and    $0x1,%al
  22153f:	88 44 24 74          	mov    %al,0x74(%rsp)
  221543:	e9 88 f2 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221548:	8a 44 24 2e          	mov    0x2e(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22154c:	0f b6 f8             	movzbl %al,%edi
  22154f:	83 e7 01             	and    $0x1,%edi
  221552:	e8 f9 9e fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221557:	24 01                	and    $0x1,%al
  221559:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  221560:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  221567:	00 
  221568:	a8 01                	test   $0x1,%al
  22156a:	0f 84 46 ff ff ff    	je     2214b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xda6>
  221570:	eb 00                	jmp    221572 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe62>
  221572:	eb 02                	jmp    221576 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe66>
  221574:	0f 0b                	ud2    
  221576:	e8 15 90 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22157b:	24 01                	and    $0x1,%al
  22157d:	88 44 24 74          	mov    %al,0x74(%rsp)
  221581:	e9 4a f2 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221586:	8a 44 24 2f          	mov    0x2f(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22158a:	a8 01                	test   $0x1,%al
  22158c:	75 15                	jne    2215a3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe93>
  22158e:	eb 00                	jmp    221590 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe80>
  221590:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221595:	e8 b6 0f 00 00       	callq  222550 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE>
  22159a:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  22159e:	e9 bd 00 00 00       	jmpq   221660 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf50>
                        if !first {
  2215a3:	8a 44 24 75          	mov    0x75(%rsp),%al
  2215a7:	34 ff                	xor    $0xff,%al
  2215a9:	a8 01                	test   $0x1,%al
  2215ab:	75 21                	jne    2215ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xebe>
  2215ad:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2215b2:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2215b7:	48 8d 35 18 15 fe ff 	lea    -0x1eae8(%rip),%rsi        # 202ad6 <str.0+0x1b6>
  2215be:	ba 06 00 00 00       	mov    $0x6,%edx
  2215c3:	e8 58 41 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2215c8:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  2215cc:	eb 54                	jmp    221622 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf12>
  2215ce:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2215d3:	48 8d 35 bc 14 fe ff 	lea    -0x1eb44(%rip),%rsi        # 202a96 <str.0+0x176>
  2215da:	ba 03 00 00 00       	mov    $0x3,%edx
  2215df:	e8 3c 41 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2215e4:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  2215e8:	8a 44 24 2a          	mov    0x2a(%rsp),%al
  2215ec:	0f b6 f8             	movzbl %al,%edi
  2215ef:	83 e7 01             	and    $0x1,%edi
  2215f2:	e8 59 9e fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2215f7:	24 01                	and    $0x1,%al
  2215f9:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  221600:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  221607:	00 
  221608:	a8 01                	test   $0x1,%al
  22160a:	74 a1                	je     2215ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe9d>
  22160c:	eb 00                	jmp    22160e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xefe>
  22160e:	eb 02                	jmp    221612 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf02>
  221610:	0f 0b                	ud2    
  221612:	e8 79 8f fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221617:	24 01                	and    $0x1,%al
  221619:	88 44 24 74          	mov    %al,0x74(%rsp)
  22161d:	e9 ae f1 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221622:	8a 44 24 2b          	mov    0x2b(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221626:	0f b6 f8             	movzbl %al,%edi
  221629:	83 e7 01             	and    $0x1,%edi
  22162c:	e8 1f 9e fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221631:	24 01                	and    $0x1,%al
  221633:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  22163a:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  221641:	00 
  221642:	a8 01                	test   $0x1,%al
  221644:	0f 84 46 ff ff ff    	je     221590 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xe80>
  22164a:	eb 00                	jmp    22164c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf3c>
  22164c:	eb 02                	jmp    221650 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf40>
  22164e:	0f 0b                	ud2    
  221650:	e8 3b 8f fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221655:	24 01                	and    $0x1,%al
  221657:	88 44 24 74          	mov    %al,0x74(%rsp)
  22165b:	e9 70 f1 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221660:	8a 44 24 2c          	mov    0x2c(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221664:	a8 01                	test   $0x1,%al
  221666:	75 15                	jne    22167d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf6d>
  221668:	eb 00                	jmp    22166a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5a>
  22166a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  22166f:	e8 2c 0f 00 00       	callq  2225a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E>
  221674:	88 44 24 29          	mov    %al,0x29(%rsp)
  221678:	e9 bd 00 00 00       	jmpq   22173a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x102a>
                        if !first {
  22167d:	8a 44 24 75          	mov    0x75(%rsp),%al
  221681:	34 ff                	xor    $0xff,%al
  221683:	a8 01                	test   $0x1,%al
  221685:	75 21                	jne    2216a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf98>
  221687:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22168c:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221691:	48 8d 35 44 14 fe ff 	lea    -0x1ebbc(%rip),%rsi        # 202adc <str.0+0x1bc>
  221698:	ba 06 00 00 00       	mov    $0x6,%edx
  22169d:	e8 7e 40 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2216a2:	88 44 24 28          	mov    %al,0x28(%rsp)
  2216a6:	eb 54                	jmp    2216fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfec>
  2216a8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  2216ad:	48 8d 35 e2 13 fe ff 	lea    -0x1ec1e(%rip),%rsi        # 202a96 <str.0+0x176>
  2216b4:	ba 03 00 00 00       	mov    $0x3,%edx
  2216b9:	e8 62 40 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2216be:	88 44 24 27          	mov    %al,0x27(%rsp)
  2216c2:	8a 44 24 27          	mov    0x27(%rsp),%al
  2216c6:	0f b6 f8             	movzbl %al,%edi
  2216c9:	83 e7 01             	and    $0x1,%edi
  2216cc:	e8 7f 9d fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2216d1:	24 01                	and    $0x1,%al
  2216d3:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  2216da:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  2216e1:	00 
  2216e2:	a8 01                	test   $0x1,%al
  2216e4:	74 a1                	je     221687 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf77>
  2216e6:	eb 00                	jmp    2216e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfd8>
  2216e8:	eb 02                	jmp    2216ec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xfdc>
  2216ea:	0f 0b                	ud2    
  2216ec:	e8 9f 8e fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2216f1:	24 01                	and    $0x1,%al
  2216f3:	88 44 24 74          	mov    %al,0x74(%rsp)
  2216f7:	e9 d4 f0 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2216fc:	8a 44 24 28          	mov    0x28(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221700:	0f b6 f8             	movzbl %al,%edi
  221703:	83 e7 01             	and    $0x1,%edi
  221706:	e8 45 9d fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22170b:	24 01                	and    $0x1,%al
  22170d:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  221714:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  22171b:	00 
  22171c:	a8 01                	test   $0x1,%al
  22171e:	0f 84 46 ff ff ff    	je     22166a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xf5a>
  221724:	eb 00                	jmp    221726 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1016>
  221726:	eb 02                	jmp    22172a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x101a>
  221728:	0f 0b                	ud2    
  22172a:	e8 61 8e fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22172f:	24 01                	and    $0x1,%al
  221731:	88 44 24 74          	mov    %al,0x74(%rsp)
  221735:	e9 96 f0 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22173a:	8a 44 24 29          	mov    0x29(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22173e:	a8 01                	test   $0x1,%al
  221740:	75 15                	jne    221757 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1047>
  221742:	eb 00                	jmp    221744 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1034>
  221744:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221749:	e8 a2 0e 00 00       	callq  2225f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E>
  22174e:	88 44 24 26          	mov    %al,0x26(%rsp)
  221752:	e9 bd 00 00 00       	jmpq   221814 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1104>
                        if !first {
  221757:	8a 44 24 75          	mov    0x75(%rsp),%al
  22175b:	34 ff                	xor    $0xff,%al
  22175d:	a8 01                	test   $0x1,%al
  22175f:	75 21                	jne    221782 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1072>
  221761:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221766:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22176b:	48 8d 35 70 13 fe ff 	lea    -0x1ec90(%rip),%rsi        # 202ae2 <str.0+0x1c2>
  221772:	ba 06 00 00 00       	mov    $0x6,%edx
  221777:	e8 a4 3f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22177c:	88 44 24 25          	mov    %al,0x25(%rsp)
  221780:	eb 54                	jmp    2217d6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10c6>
  221782:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221787:	48 8d 35 08 13 fe ff 	lea    -0x1ecf8(%rip),%rsi        # 202a96 <str.0+0x176>
  22178e:	ba 03 00 00 00       	mov    $0x3,%edx
  221793:	e8 88 3f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221798:	88 44 24 24          	mov    %al,0x24(%rsp)
  22179c:	8a 44 24 24          	mov    0x24(%rsp),%al
  2217a0:	0f b6 f8             	movzbl %al,%edi
  2217a3:	83 e7 01             	and    $0x1,%edi
  2217a6:	e8 a5 9c fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2217ab:	24 01                	and    $0x1,%al
  2217ad:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  2217b4:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  2217bb:	00 
  2217bc:	a8 01                	test   $0x1,%al
  2217be:	74 a1                	je     221761 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1051>
  2217c0:	eb 00                	jmp    2217c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10b2>
  2217c2:	eb 02                	jmp    2217c6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10b6>
  2217c4:	0f 0b                	ud2    
  2217c6:	e8 c5 8d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2217cb:	24 01                	and    $0x1,%al
  2217cd:	88 44 24 74          	mov    %al,0x74(%rsp)
  2217d1:	e9 fa ef ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2217d6:	8a 44 24 25          	mov    0x25(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2217da:	0f b6 f8             	movzbl %al,%edi
  2217dd:	83 e7 01             	and    $0x1,%edi
  2217e0:	e8 6b 9c fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2217e5:	24 01                	and    $0x1,%al
  2217e7:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  2217ee:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  2217f5:	00 
  2217f6:	a8 01                	test   $0x1,%al
  2217f8:	0f 84 46 ff ff ff    	je     221744 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1034>
  2217fe:	eb 00                	jmp    221800 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10f0>
  221800:	eb 02                	jmp    221804 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x10f4>
  221802:	0f 0b                	ud2    
  221804:	e8 87 8d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221809:	24 01                	and    $0x1,%al
  22180b:	88 44 24 74          	mov    %al,0x74(%rsp)
  22180f:	e9 bc ef ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221814:	8a 44 24 26          	mov    0x26(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221818:	a8 01                	test   $0x1,%al
  22181a:	75 15                	jne    221831 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1121>
  22181c:	eb 00                	jmp    22181e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110e>
  22181e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221823:	e8 18 0e 00 00       	callq  222640 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E>
  221828:	88 44 24 23          	mov    %al,0x23(%rsp)
  22182c:	e9 bd 00 00 00       	jmpq   2218ee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11de>
                        if !first {
  221831:	8a 44 24 75          	mov    0x75(%rsp),%al
  221835:	34 ff                	xor    $0xff,%al
  221837:	a8 01                	test   $0x1,%al
  221839:	75 21                	jne    22185c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x114c>
  22183b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221840:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221845:	48 8d 35 9c 12 fe ff 	lea    -0x1ed64(%rip),%rsi        # 202ae8 <str.0+0x1c8>
  22184c:	ba 05 00 00 00       	mov    $0x5,%edx
  221851:	e8 ca 3e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221856:	88 44 24 22          	mov    %al,0x22(%rsp)
  22185a:	eb 54                	jmp    2218b0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11a0>
  22185c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221861:	48 8d 35 2e 12 fe ff 	lea    -0x1edd2(%rip),%rsi        # 202a96 <str.0+0x176>
  221868:	ba 03 00 00 00       	mov    $0x3,%edx
  22186d:	e8 ae 3e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221872:	88 44 24 21          	mov    %al,0x21(%rsp)
  221876:	8a 44 24 21          	mov    0x21(%rsp),%al
  22187a:	0f b6 f8             	movzbl %al,%edi
  22187d:	83 e7 01             	and    $0x1,%edi
  221880:	e8 cb 9b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221885:	24 01                	and    $0x1,%al
  221887:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  22188e:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  221895:	00 
  221896:	a8 01                	test   $0x1,%al
  221898:	74 a1                	je     22183b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x112b>
  22189a:	eb 00                	jmp    22189c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x118c>
  22189c:	eb 02                	jmp    2218a0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1190>
  22189e:	0f 0b                	ud2    
  2218a0:	e8 eb 8c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2218a5:	24 01                	and    $0x1,%al
  2218a7:	88 44 24 74          	mov    %al,0x74(%rsp)
  2218ab:	e9 20 ef ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2218b0:	8a 44 24 22          	mov    0x22(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2218b4:	0f b6 f8             	movzbl %al,%edi
  2218b7:	83 e7 01             	and    $0x1,%edi
  2218ba:	e8 91 9b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2218bf:	24 01                	and    $0x1,%al
  2218c1:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  2218c8:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  2218cf:	00 
  2218d0:	a8 01                	test   $0x1,%al
  2218d2:	0f 84 46 ff ff ff    	je     22181e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x110e>
  2218d8:	eb 00                	jmp    2218da <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11ca>
  2218da:	eb 02                	jmp    2218de <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11ce>
  2218dc:	0f 0b                	ud2    
  2218de:	e8 ad 8c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2218e3:	24 01                	and    $0x1,%al
  2218e5:	88 44 24 74          	mov    %al,0x74(%rsp)
  2218e9:	e9 e2 ee ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2218ee:	8a 44 24 23          	mov    0x23(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2218f2:	a8 01                	test   $0x1,%al
  2218f4:	75 15                	jne    22190b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11fb>
  2218f6:	eb 00                	jmp    2218f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11e8>
  2218f8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2218fd:	e8 8e 0d 00 00       	callq  222690 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E>
  221902:	88 44 24 20          	mov    %al,0x20(%rsp)
  221906:	e9 bd 00 00 00       	jmpq   2219c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12b8>
                        if !first {
  22190b:	8a 44 24 75          	mov    0x75(%rsp),%al
  22190f:	34 ff                	xor    $0xff,%al
  221911:	a8 01                	test   $0x1,%al
  221913:	75 21                	jne    221936 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1226>
  221915:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  22191a:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22191f:	48 8d 35 c7 11 fe ff 	lea    -0x1ee39(%rip),%rsi        # 202aed <str.0+0x1cd>
  221926:	ba 06 00 00 00       	mov    $0x6,%edx
  22192b:	e8 f0 3d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221930:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  221934:	eb 54                	jmp    22198a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x127a>
  221936:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  22193b:	48 8d 35 54 11 fe ff 	lea    -0x1eeac(%rip),%rsi        # 202a96 <str.0+0x176>
  221942:	ba 03 00 00 00       	mov    $0x3,%edx
  221947:	e8 d4 3d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22194c:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  221950:	8a 44 24 1e          	mov    0x1e(%rsp),%al
  221954:	0f b6 f8             	movzbl %al,%edi
  221957:	83 e7 01             	and    $0x1,%edi
  22195a:	e8 f1 9a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22195f:	24 01                	and    $0x1,%al
  221961:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  221968:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  22196f:	00 
  221970:	a8 01                	test   $0x1,%al
  221972:	74 a1                	je     221915 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1205>
  221974:	eb 00                	jmp    221976 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1266>
  221976:	eb 02                	jmp    22197a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x126a>
  221978:	0f 0b                	ud2    
  22197a:	e8 11 8c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22197f:	24 01                	and    $0x1,%al
  221981:	88 44 24 74          	mov    %al,0x74(%rsp)
  221985:	e9 46 ee ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  22198a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22198e:	0f b6 f8             	movzbl %al,%edi
  221991:	83 e7 01             	and    $0x1,%edi
  221994:	e8 b7 9a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221999:	24 01                	and    $0x1,%al
  22199b:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  2219a2:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  2219a9:	00 
  2219aa:	a8 01                	test   $0x1,%al
  2219ac:	0f 84 46 ff ff ff    	je     2218f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x11e8>
  2219b2:	eb 00                	jmp    2219b4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12a4>
  2219b4:	eb 02                	jmp    2219b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12a8>
  2219b6:	0f 0b                	ud2    
  2219b8:	e8 d3 8b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2219bd:	24 01                	and    $0x1,%al
  2219bf:	88 44 24 74          	mov    %al,0x74(%rsp)
  2219c3:	e9 08 ee ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  2219c8:	8a 44 24 20          	mov    0x20(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2219cc:	a8 01                	test   $0x1,%al
  2219ce:	75 15                	jne    2219e5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12d5>
  2219d0:	eb 00                	jmp    2219d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12c2>
  2219d2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  2219d7:	e8 04 0d 00 00       	callq  2226e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE>
  2219dc:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  2219e0:	e9 bd 00 00 00       	jmpq   221aa2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1392>
                        if !first {
  2219e5:	8a 44 24 75          	mov    0x75(%rsp),%al
  2219e9:	34 ff                	xor    $0xff,%al
  2219eb:	a8 01                	test   $0x1,%al
  2219ed:	75 21                	jne    221a10 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1300>
  2219ef:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  2219f4:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2219f9:	48 8d 35 4c ef fd ff 	lea    -0x210b4(%rip),%rsi        # 20094c <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x14>
  221a00:	ba 04 00 00 00       	mov    $0x4,%edx
  221a05:	e8 16 3d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221a0a:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  221a0e:	eb 54                	jmp    221a64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1354>
  221a10:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221a15:	48 8d 35 7a 10 fe ff 	lea    -0x1ef86(%rip),%rsi        # 202a96 <str.0+0x176>
  221a1c:	ba 03 00 00 00       	mov    $0x3,%edx
  221a21:	e8 fa 3c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221a26:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  221a2a:	8a 44 24 1b          	mov    0x1b(%rsp),%al
  221a2e:	0f b6 f8             	movzbl %al,%edi
  221a31:	83 e7 01             	and    $0x1,%edi
  221a34:	e8 17 9a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221a39:	24 01                	and    $0x1,%al
  221a3b:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  221a42:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  221a49:	00 
  221a4a:	a8 01                	test   $0x1,%al
  221a4c:	74 a1                	je     2219ef <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12df>
  221a4e:	eb 00                	jmp    221a50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1340>
  221a50:	eb 02                	jmp    221a54 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1344>
  221a52:	0f 0b                	ud2    
  221a54:	e8 37 8b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221a59:	24 01                	and    $0x1,%al
  221a5b:	88 44 24 74          	mov    %al,0x74(%rsp)
  221a5f:	e9 6c ed ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221a64:	8a 44 24 1c          	mov    0x1c(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221a68:	0f b6 f8             	movzbl %al,%edi
  221a6b:	83 e7 01             	and    $0x1,%edi
  221a6e:	e8 dd 99 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221a73:	24 01                	and    $0x1,%al
  221a75:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  221a7c:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  221a83:	00 
  221a84:	a8 01                	test   $0x1,%al
  221a86:	0f 84 46 ff ff ff    	je     2219d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x12c2>
  221a8c:	eb 00                	jmp    221a8e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x137e>
  221a8e:	eb 02                	jmp    221a92 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1382>
  221a90:	0f 0b                	ud2    
  221a92:	e8 f9 8a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221a97:	24 01                	and    $0x1,%al
  221a99:	88 44 24 74          	mov    %al,0x74(%rsp)
  221a9d:	e9 2e ed ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221aa2:	8a 44 24 1d          	mov    0x1d(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221aa6:	a8 01                	test   $0x1,%al
  221aa8:	75 15                	jne    221abf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13af>
  221aaa:	eb 00                	jmp    221aac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x139c>
  221aac:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221ab1:	e8 7a 0c 00 00       	callq  222730 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE>
  221ab6:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  221aba:	e9 bd 00 00 00       	jmpq   221b7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x146c>
                        if !first {
  221abf:	8a 44 24 75          	mov    0x75(%rsp),%al
  221ac3:	34 ff                	xor    $0xff,%al
  221ac5:	a8 01                	test   $0x1,%al
  221ac7:	75 21                	jne    221aea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13da>
  221ac9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221ace:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221ad3:	48 8d 35 19 10 fe ff 	lea    -0x1efe7(%rip),%rsi        # 202af3 <str.0+0x1d3>
  221ada:	ba 03 00 00 00       	mov    $0x3,%edx
  221adf:	e8 3c 3c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221ae4:	88 44 24 19          	mov    %al,0x19(%rsp)
  221ae8:	eb 54                	jmp    221b3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x142e>
  221aea:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221aef:	48 8d 35 a0 0f fe ff 	lea    -0x1f060(%rip),%rsi        # 202a96 <str.0+0x176>
  221af6:	ba 03 00 00 00       	mov    $0x3,%edx
  221afb:	e8 20 3c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221b00:	88 44 24 18          	mov    %al,0x18(%rsp)
  221b04:	8a 44 24 18          	mov    0x18(%rsp),%al
  221b08:	0f b6 f8             	movzbl %al,%edi
  221b0b:	83 e7 01             	and    $0x1,%edi
  221b0e:	e8 3d 99 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221b13:	24 01                	and    $0x1,%al
  221b15:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  221b1c:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  221b23:	00 
  221b24:	a8 01                	test   $0x1,%al
  221b26:	74 a1                	je     221ac9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x13b9>
  221b28:	eb 00                	jmp    221b2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x141a>
  221b2a:	eb 02                	jmp    221b2e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x141e>
  221b2c:	0f 0b                	ud2    
  221b2e:	e8 5d 8a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221b33:	24 01                	and    $0x1,%al
  221b35:	88 44 24 74          	mov    %al,0x74(%rsp)
  221b39:	e9 92 ec ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221b3e:	8a 44 24 19          	mov    0x19(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221b42:	0f b6 f8             	movzbl %al,%edi
  221b45:	83 e7 01             	and    $0x1,%edi
  221b48:	e8 03 99 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221b4d:	24 01                	and    $0x1,%al
  221b4f:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  221b56:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  221b5d:	00 
  221b5e:	a8 01                	test   $0x1,%al
  221b60:	0f 84 46 ff ff ff    	je     221aac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x139c>
  221b66:	eb 00                	jmp    221b68 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1458>
  221b68:	eb 02                	jmp    221b6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x145c>
  221b6a:	0f 0b                	ud2    
  221b6c:	e8 1f 8a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221b71:	24 01                	and    $0x1,%al
  221b73:	88 44 24 74          	mov    %al,0x74(%rsp)
  221b77:	e9 54 ec ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221b7c:	8a 44 24 1a          	mov    0x1a(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221b80:	a8 01                	test   $0x1,%al
  221b82:	75 15                	jne    221b99 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1489>
  221b84:	eb 00                	jmp    221b86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1476>
  221b86:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221b8b:	e8 f0 0b 00 00       	callq  222780 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE>
  221b90:	88 44 24 17          	mov    %al,0x17(%rsp)
  221b94:	e9 bd 00 00 00       	jmpq   221c56 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1546>
                        if !first {
  221b99:	8a 44 24 75          	mov    0x75(%rsp),%al
  221b9d:	34 ff                	xor    $0xff,%al
  221b9f:	a8 01                	test   $0x1,%al
  221ba1:	75 21                	jne    221bc4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14b4>
  221ba3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221ba8:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221bad:	48 8d 35 42 0f fe ff 	lea    -0x1f0be(%rip),%rsi        # 202af6 <str.0+0x1d6>
  221bb4:	ba 05 00 00 00       	mov    $0x5,%edx
  221bb9:	e8 62 3b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221bbe:	88 44 24 16          	mov    %al,0x16(%rsp)
  221bc2:	eb 54                	jmp    221c18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1508>
  221bc4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221bc9:	48 8d 35 c6 0e fe ff 	lea    -0x1f13a(%rip),%rsi        # 202a96 <str.0+0x176>
  221bd0:	ba 03 00 00 00       	mov    $0x3,%edx
  221bd5:	e8 46 3b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221bda:	88 44 24 15          	mov    %al,0x15(%rsp)
  221bde:	8a 44 24 15          	mov    0x15(%rsp),%al
  221be2:	0f b6 f8             	movzbl %al,%edi
  221be5:	83 e7 01             	and    $0x1,%edi
  221be8:	e8 63 98 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221bed:	24 01                	and    $0x1,%al
  221bef:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  221bf6:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  221bfd:	00 
  221bfe:	a8 01                	test   $0x1,%al
  221c00:	74 a1                	je     221ba3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1493>
  221c02:	eb 00                	jmp    221c04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14f4>
  221c04:	eb 02                	jmp    221c08 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x14f8>
  221c06:	0f 0b                	ud2    
  221c08:	e8 83 89 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221c0d:	24 01                	and    $0x1,%al
  221c0f:	88 44 24 74          	mov    %al,0x74(%rsp)
  221c13:	e9 b8 eb ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221c18:	8a 44 24 16          	mov    0x16(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221c1c:	0f b6 f8             	movzbl %al,%edi
  221c1f:	83 e7 01             	and    $0x1,%edi
  221c22:	e8 29 98 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221c27:	24 01                	and    $0x1,%al
  221c29:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  221c30:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  221c37:	00 
  221c38:	a8 01                	test   $0x1,%al
  221c3a:	0f 84 46 ff ff ff    	je     221b86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1476>
  221c40:	eb 00                	jmp    221c42 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1532>
  221c42:	eb 02                	jmp    221c46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1536>
  221c44:	0f 0b                	ud2    
  221c46:	e8 45 89 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221c4b:	24 01                	and    $0x1,%al
  221c4d:	88 44 24 74          	mov    %al,0x74(%rsp)
  221c51:	e9 7a eb ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221c56:	8a 44 24 17          	mov    0x17(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221c5a:	a8 01                	test   $0x1,%al
  221c5c:	75 15                	jne    221c73 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1563>
  221c5e:	eb 00                	jmp    221c60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1550>
  221c60:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  221c65:	e8 66 0b 00 00       	callq  2227d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E>
  221c6a:	88 44 24 14          	mov    %al,0x14(%rsp)
  221c6e:	e9 bd 00 00 00       	jmpq   221d30 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1620>
                        if !first {
  221c73:	8a 44 24 75          	mov    0x75(%rsp),%al
  221c77:	34 ff                	xor    $0xff,%al
  221c79:	a8 01                	test   $0x1,%al
  221c7b:	75 21                	jne    221c9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x158e>
  221c7d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221c82:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221c87:	48 8d 35 6d 0e fe ff 	lea    -0x1f193(%rip),%rsi        # 202afb <str.0+0x1db>
  221c8e:	ba 07 00 00 00       	mov    $0x7,%edx
  221c93:	e8 88 3a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221c98:	88 44 24 13          	mov    %al,0x13(%rsp)
  221c9c:	eb 54                	jmp    221cf2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15e2>
  221c9e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221ca3:	48 8d 35 ec 0d fe ff 	lea    -0x1f214(%rip),%rsi        # 202a96 <str.0+0x176>
  221caa:	ba 03 00 00 00       	mov    $0x3,%edx
  221caf:	e8 6c 3a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221cb4:	88 44 24 12          	mov    %al,0x12(%rsp)
  221cb8:	8a 44 24 12          	mov    0x12(%rsp),%al
  221cbc:	0f b6 f8             	movzbl %al,%edi
  221cbf:	83 e7 01             	and    $0x1,%edi
  221cc2:	e8 89 97 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221cc7:	24 01                	and    $0x1,%al
  221cc9:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  221cd0:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  221cd7:	00 
  221cd8:	a8 01                	test   $0x1,%al
  221cda:	74 a1                	je     221c7d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x156d>
  221cdc:	eb 00                	jmp    221cde <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15ce>
  221cde:	eb 02                	jmp    221ce2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x15d2>
  221ce0:	0f 0b                	ud2    
  221ce2:	e8 a9 88 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221ce7:	24 01                	and    $0x1,%al
  221ce9:	88 44 24 74          	mov    %al,0x74(%rsp)
  221ced:	e9 de ea ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221cf2:	8a 44 24 13          	mov    0x13(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221cf6:	0f b6 f8             	movzbl %al,%edi
  221cf9:	83 e7 01             	and    $0x1,%edi
  221cfc:	e8 4f 97 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221d01:	24 01                	and    $0x1,%al
  221d03:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  221d0a:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  221d11:	00 
  221d12:	a8 01                	test   $0x1,%al
  221d14:	0f 84 46 ff ff ff    	je     221c60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1550>
  221d1a:	eb 00                	jmp    221d1c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x160c>
  221d1c:	eb 02                	jmp    221d20 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1610>
  221d1e:	0f 0b                	ud2    
  221d20:	e8 6b 88 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221d25:	24 01                	and    $0x1,%al
  221d27:	88 44 24 74          	mov    %al,0x74(%rsp)
  221d2b:	e9 a0 ea ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221d30:	8a 44 24 14          	mov    0x14(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  221d34:	a8 01                	test   $0x1,%al
  221d36:	75 1e                	jne    221d56 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1646>
  221d38:	eb 00                	jmp    221d3a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x162a>
  221d3a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  221d3f:	8b 00                	mov    (%rax),%eax
  221d41:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  221d45:	e8 76 02 00 00       	callq  221fc0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>
  221d4a:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
  221d51:	e9 bd 00 00 00       	jmpq   221e13 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1703>
                        if !first {
  221d56:	8a 44 24 75          	mov    0x75(%rsp),%al
  221d5a:	34 ff                	xor    $0xff,%al
  221d5c:	a8 01                	test   $0x1,%al
  221d5e:	75 21                	jne    221d81 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1671>
  221d60:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        first = false;
  221d65:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  221d6a:	48 8d 35 91 0d fe ff 	lea    -0x1f26f(%rip),%rsi        # 202b02 <str.0+0x1e2>
  221d71:	ba 03 00 00 00       	mov    $0x3,%edx
  221d76:	e8 a5 39 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221d7b:	88 44 24 0b          	mov    %al,0xb(%rsp)
  221d7f:	eb 54                	jmp    221dd5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16c5>
  221d81:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                            f.write_str(" | ")?;
  221d86:	48 8d 35 09 0d fe ff 	lea    -0x1f2f7(%rip),%rsi        # 202a96 <str.0+0x176>
  221d8d:	ba 03 00 00 00       	mov    $0x3,%edx
  221d92:	e8 89 39 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221d97:	88 44 24 0a          	mov    %al,0xa(%rsp)
  221d9b:	8a 44 24 0a          	mov    0xa(%rsp),%al
  221d9f:	0f b6 f8             	movzbl %al,%edi
  221da2:	83 e7 01             	and    $0x1,%edi
  221da5:	e8 a6 96 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221daa:	24 01                	and    $0x1,%al
  221dac:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  221db3:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  221dba:	00 
  221dbb:	a8 01                	test   $0x1,%al
  221dbd:	74 a1                	je     221d60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1650>
  221dbf:	eb 00                	jmp    221dc1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16b1>
  221dc1:	eb 02                	jmp    221dc5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16b5>
  221dc3:	0f 0b                	ud2    
  221dc5:	e8 c6 87 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221dca:	24 01                	and    $0x1,%al
  221dcc:	88 44 24 74          	mov    %al,0x74(%rsp)
  221dd0:	e9 fb e9 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221dd5:	8a 44 24 0b          	mov    0xb(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  221dd9:	0f b6 f8             	movzbl %al,%edi
  221ddc:	83 e7 01             	and    $0x1,%edi
  221ddf:	e8 6c 96 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221de4:	24 01                	and    $0x1,%al
  221de6:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  221ded:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  221df4:	00 
  221df5:	a8 01                	test   $0x1,%al
  221df7:	0f 84 3d ff ff ff    	je     221d3a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x162a>
  221dfd:	eb 00                	jmp    221dff <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16ef>
  221dff:	eb 02                	jmp    221e03 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x16f3>
  221e01:	0f 0b                	ud2    
  221e03:	e8 88 87 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221e08:	24 01                	and    $0x1,%al
  221e0a:	88 44 24 74          	mov    %al,0x74(%rsp)
  221e0e:	e9 bd e9 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
                let extra_bits = self.bits & !Self::all().bits();
  221e13:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  221e1a:	00 
  221e1b:	e8 c0 01 00 00       	callq  221fe0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17hf63ca3493b8e64b1E>
  221e20:	89 44 24 04          	mov    %eax,0x4(%rsp)
  221e24:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  221e28:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  221e2c:	83 f1 ff             	xor    $0xffffffff,%ecx
  221e2f:	21 c8                	and    %ecx,%eax
  221e31:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
                if extra_bits != 0 {
  221e38:	83 bc 24 ac 00 00 00 	cmpl   $0x0,0xac(%rsp)
  221e3f:	00 
  221e40:	75 10                	jne    221e52 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1742>
                if first {
  221e42:	f6 44 24 75 01       	testb  $0x1,0x75(%rsp)
  221e47:	0f 85 1e 01 00 00    	jne    221f6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x185b>
  221e4d:	e9 0f 01 00 00       	jmpq   221f61 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1851>
                    if !first {
  221e52:	8a 44 24 75          	mov    0x75(%rsp),%al
  221e56:	34 ff                	xor    $0xff,%al
  221e58:	a8 01                	test   $0x1,%al
  221e5a:	75 21                	jne    221e7d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x176d>
  221e5c:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    first = false;
  221e61:	c6 44 24 75 00       	movb   $0x0,0x75(%rsp)
                    f.write_str("0x")?;
  221e66:	48 8d 35 98 0c fe ff 	lea    -0x1f368(%rip),%rsi        # 202b05 <str.0+0x1e5>
  221e6d:	ba 02 00 00 00       	mov    $0x2,%edx
  221e72:	e8 a9 38 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221e77:	88 44 24 03          	mov    %al,0x3(%rsp)
  221e7b:	eb 54                	jmp    221ed1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17c1>
  221e7d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                        f.write_str(" | ")?;
  221e82:	48 8d 35 0d 0c fe ff 	lea    -0x1f3f3(%rip),%rsi        # 202a96 <str.0+0x176>
  221e89:	ba 03 00 00 00       	mov    $0x3,%edx
  221e8e:	e8 8d 38 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221e93:	88 44 24 02          	mov    %al,0x2(%rsp)
  221e97:	8a 44 24 02          	mov    0x2(%rsp),%al
  221e9b:	0f b6 f8             	movzbl %al,%edi
  221e9e:	83 e7 01             	and    $0x1,%edi
  221ea1:	e8 aa 95 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221ea6:	24 01                	and    $0x1,%al
  221ea8:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  221eaf:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  221eb6:	00 
  221eb7:	a8 01                	test   $0x1,%al
  221eb9:	74 a1                	je     221e5c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x174c>
  221ebb:	eb 00                	jmp    221ebd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17ad>
  221ebd:	eb 02                	jmp    221ec1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17b1>
  221ebf:	0f 0b                	ud2    
  221ec1:	e8 ca 86 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221ec6:	24 01                	and    $0x1,%al
  221ec8:	88 44 24 74          	mov    %al,0x74(%rsp)
  221ecc:	e9 ff e8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221ed1:	8a 44 24 03          	mov    0x3(%rsp),%al
                    f.write_str("0x")?;
  221ed5:	0f b6 f8             	movzbl %al,%edi
  221ed8:	83 e7 01             	and    $0x1,%edi
  221edb:	e8 70 95 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221ee0:	24 01                	and    $0x1,%al
  221ee2:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  221ee9:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  221ef0:	00 
  221ef1:	a8 01                	test   $0x1,%al
  221ef3:	74 06                	je     221efb <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17eb>
  221ef5:	eb 00                	jmp    221ef7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x17e7>
  221ef7:	eb 1a                	jmp    221f13 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1803>
  221ef9:	0f 0b                	ud2    
  221efb:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  221f00:	48 8d bc 24 ac 00 00 	lea    0xac(%rsp),%rdi
  221f07:	00 
  221f08:	e8 13 07 01 00       	callq  232620 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  221f0d:	88 44 24 01          	mov    %al,0x1(%rsp)
  221f11:	eb 10                	jmp    221f23 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1813>
                    f.write_str("0x")?;
  221f13:	e8 78 86 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221f18:	24 01                	and    $0x1,%al
  221f1a:	88 44 24 74          	mov    %al,0x74(%rsp)
  221f1e:	e9 ad e8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221f23:	8a 44 24 01          	mov    0x1(%rsp),%al
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  221f27:	0f b6 f8             	movzbl %al,%edi
  221f2a:	83 e7 01             	and    $0x1,%edi
  221f2d:	e8 1e 95 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221f32:	24 01                	and    $0x1,%al
  221f34:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  221f3b:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  221f42:	00 
  221f43:	a8 01                	test   $0x1,%al
  221f45:	0f 84 f7 fe ff ff    	je     221e42 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1732>
  221f4b:	eb 00                	jmp    221f4d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x183d>
  221f4d:	eb 02                	jmp    221f51 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1841>
  221f4f:	0f 0b                	ud2    
  221f51:	e8 3a 86 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221f56:	24 01                	and    $0x1,%al
  221f58:	88 44 24 74          	mov    %al,0x74(%rsp)
  221f5c:	e9 6f e8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
                Ok(())
  221f61:	c6 44 24 74 00       	movb   $0x0,0x74(%rsp)
            }
  221f66:	e9 65 e8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221f6b:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                    f.write_str("(empty)")?;
  221f70:	48 8d 35 90 0b fe ff 	lea    -0x1f470(%rip),%rsi        # 202b07 <str.0+0x1e7>
  221f77:	ba 07 00 00 00       	mov    $0x7,%edx
  221f7c:	e8 9f 37 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  221f81:	88 04 24             	mov    %al,(%rsp)
  221f84:	8a 04 24             	mov    (%rsp),%al
  221f87:	0f b6 f8             	movzbl %al,%edi
  221f8a:	83 e7 01             	and    $0x1,%edi
  221f8d:	e8 be 94 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  221f92:	24 01                	and    $0x1,%al
  221f94:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  221f9b:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  221fa2:	00 
  221fa3:	a8 01                	test   $0x1,%al
  221fa5:	74 ba                	je     221f61 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1851>
  221fa7:	eb 00                	jmp    221fa9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x1899>
  221fa9:	eb 02                	jmp    221fad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0x189d>
  221fab:	0f 0b                	ud2    
  221fad:	e8 de 85 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  221fb2:	24 01                	and    $0x1,%al
  221fb4:	88 44 24 74          	mov    %al,0x74(%rsp)
  221fb8:	e9 13 e8 ff ff       	jmpq   2207d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$3fmt17h86d84f92659635e2E+0xc0>
  221fbd:	cc                   	int3   
  221fbe:	cc                   	int3   
  221fbf:	cc                   	int3   

0000000000221fc0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>:
            pub const fn all() -> Self {
  221fc0:	48 83 ec 04          	sub    $0x4,%rsp
                __impl_all_bitflags! {
  221fc4:	c7 04 24 ff f7 fe 1f 	movl   $0x1ffef7ff,(%rsp)
            }
  221fcb:	8b 04 24             	mov    (%rsp),%eax
  221fce:	48 83 c4 04          	add    $0x4,%rsp
  221fd2:	c3                   	retq   
  221fd3:	cc                   	int3   
  221fd4:	cc                   	int3   
  221fd5:	cc                   	int3   
  221fd6:	cc                   	int3   
  221fd7:	cc                   	int3   
  221fd8:	cc                   	int3   
  221fd9:	cc                   	int3   
  221fda:	cc                   	int3   
  221fdb:	cc                   	int3   
  221fdc:	cc                   	int3   
  221fdd:	cc                   	int3   
  221fde:	cc                   	int3   
  221fdf:	cc                   	int3   

0000000000221fe0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX4bits17hf63ca3493b8e64b1E>:
            pub const fn bits(&self) -> $T {
  221fe0:	50                   	push   %rax
  221fe1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  221fe5:	8b 07                	mov    (%rdi),%eax
            }
  221fe7:	59                   	pop    %rcx
  221fe8:	c3                   	retq   
  221fe9:	cc                   	int3   
  221fea:	cc                   	int3   
  221feb:	cc                   	int3   
  221fec:	cc                   	int3   
  221fed:	cc                   	int3   
  221fee:	cc                   	int3   
  221fef:	cc                   	int3   

0000000000221ff0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX18from_bits_truncate17ha9ae7013cc2ab286E>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  221ff0:	48 83 ec 18          	sub    $0x18,%rsp
  221ff4:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  221ff8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  221ffc:	e8 bf ff ff ff       	callq  221fc0 <_ZN9r3_kernel3cpu5cpuid8FlagsECX3all17h0bafa788e8055ab7E>
  222001:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  222005:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  222009:	8b 44 24 08          	mov    0x8(%rsp),%eax
  22200d:	21 c8                	and    %ecx,%eax
  22200f:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  222013:	8b 44 24 10          	mov    0x10(%rsp),%eax
  222017:	48 83 c4 18          	add    $0x18,%rsp
  22201b:	c3                   	retq   
  22201c:	cc                   	int3   
  22201d:	cc                   	int3   
  22201e:	cc                   	int3   
  22201f:	cc                   	int3   

0000000000222020 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E>:
                            fn $Flag(&self) -> bool {
  222020:	48 83 ec 18          	sub    $0x18,%rsp
  222024:	48 89 3c 24          	mov    %rdi,(%rsp)
  222028:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
bitflags! {
  22202d:	31 c0                	xor    %eax,%eax
  22202f:	a8 01                	test   $0x1,%al
  222031:	75 17                	jne    22204a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E+0x2a>
  222033:	48 8b 04 24          	mov    (%rsp),%rax
  222037:	8b 00                	mov    (%rax),%eax
  222039:	83 e0 01             	and    $0x1,%eax
  22203c:	83 f8 01             	cmp    $0x1,%eax
  22203f:	0f 94 c0             	sete   %al
  222042:	24 01                	and    $0x1,%al
  222044:	88 44 24 0f          	mov    %al,0xf(%rsp)
  222048:	eb 05                	jmp    22204f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE317hf4a2653ff8b0a412E+0x2f>
  22204a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22204f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222053:	24 01                	and    $0x1,%al
  222055:	0f b6 c0             	movzbl %al,%eax
  222058:	48 83 c4 18          	add    $0x18,%rsp
  22205c:	c3                   	retq   
  22205d:	cc                   	int3   
  22205e:	cc                   	int3   
  22205f:	cc                   	int3   

0000000000222060 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE>:
                            fn $Flag(&self) -> bool {
  222060:	48 83 ec 18          	sub    $0x18,%rsp
  222064:	48 89 3c 24          	mov    %rdi,(%rsp)
  222068:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22206d:	31 c0                	xor    %eax,%eax
  22206f:	a8 01                	test   $0x1,%al
  222071:	75 17                	jne    22208a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE+0x2a>
  222073:	48 8b 04 24          	mov    (%rsp),%rax
  222077:	8b 00                	mov    (%rax),%eax
  222079:	83 e0 02             	and    $0x2,%eax
  22207c:	83 f8 02             	cmp    $0x2,%eax
  22207f:	0f 94 c0             	sete   %al
  222082:	24 01                	and    $0x1,%al
  222084:	88 44 24 0f          	mov    %al,0xf(%rsp)
  222088:	eb 05                	jmp    22208f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6PCLMUL17h50a39aaf1cfd791fE+0x2f>
  22208a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22208f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222093:	24 01                	and    $0x1,%al
  222095:	0f b6 c0             	movzbl %al,%eax
  222098:	48 83 c4 18          	add    $0x18,%rsp
  22209c:	c3                   	retq   
  22209d:	cc                   	int3   
  22209e:	cc                   	int3   
  22209f:	cc                   	int3   

00000000002220a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E>:
                            fn $Flag(&self) -> bool {
  2220a0:	48 83 ec 18          	sub    $0x18,%rsp
  2220a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2220a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2220ad:	31 c0                	xor    %eax,%eax
  2220af:	a8 01                	test   $0x1,%al
  2220b1:	75 17                	jne    2220ca <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E+0x2a>
  2220b3:	48 8b 04 24          	mov    (%rsp),%rax
  2220b7:	8b 00                	mov    (%rax),%eax
  2220b9:	83 e0 04             	and    $0x4,%eax
  2220bc:	83 f8 04             	cmp    $0x4,%eax
  2220bf:	0f 94 c0             	sete   %al
  2220c2:	24 01                	and    $0x1,%al
  2220c4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2220c8:	eb 05                	jmp    2220cf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DTES6417h2dc74173f20b37d7E+0x2f>
  2220ca:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2220cf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2220d3:	24 01                	and    $0x1,%al
  2220d5:	0f b6 c0             	movzbl %al,%eax
  2220d8:	48 83 c4 18          	add    $0x18,%rsp
  2220dc:	c3                   	retq   
  2220dd:	cc                   	int3   
  2220de:	cc                   	int3   
  2220df:	cc                   	int3   

00000000002220e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE>:
                            fn $Flag(&self) -> bool {
  2220e0:	48 83 ec 18          	sub    $0x18,%rsp
  2220e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2220e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2220ed:	31 c0                	xor    %eax,%eax
  2220ef:	a8 01                	test   $0x1,%al
  2220f1:	75 17                	jne    22210a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE+0x2a>
  2220f3:	48 8b 04 24          	mov    (%rsp),%rax
  2220f7:	8b 00                	mov    (%rax),%eax
  2220f9:	83 e0 08             	and    $0x8,%eax
  2220fc:	83 f8 08             	cmp    $0x8,%eax
  2220ff:	0f 94 c0             	sete   %al
  222102:	24 01                	and    $0x1,%al
  222104:	88 44 24 0f          	mov    %al,0xf(%rsp)
  222108:	eb 05                	jmp    22210f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7MONITOR17hdcfb19f7657b858bE+0x2f>
  22210a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22210f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222113:	24 01                	and    $0x1,%al
  222115:	0f b6 c0             	movzbl %al,%eax
  222118:	48 83 c4 18          	add    $0x18,%rsp
  22211c:	c3                   	retq   
  22211d:	cc                   	int3   
  22211e:	cc                   	int3   
  22211f:	cc                   	int3   

0000000000222120 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E>:
                            fn $Flag(&self) -> bool {
  222120:	48 83 ec 18          	sub    $0x18,%rsp
  222124:	48 89 3c 24          	mov    %rdi,(%rsp)
  222128:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22212d:	31 c0                	xor    %eax,%eax
  22212f:	a8 01                	test   $0x1,%al
  222131:	75 17                	jne    22214a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E+0x2a>
  222133:	48 8b 04 24          	mov    (%rsp),%rax
  222137:	8b 00                	mov    (%rax),%eax
  222139:	83 e0 10             	and    $0x10,%eax
  22213c:	83 f8 10             	cmp    $0x10,%eax
  22213f:	0f 94 c0             	sete   %al
  222142:	24 01                	and    $0x1,%al
  222144:	88 44 24 0f          	mov    %al,0xf(%rsp)
  222148:	eb 05                	jmp    22214f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6DS_CPL17h10ec625ce2d81ae5E+0x2f>
  22214a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22214f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222153:	24 01                	and    $0x1,%al
  222155:	0f b6 c0             	movzbl %al,%eax
  222158:	48 83 c4 18          	add    $0x18,%rsp
  22215c:	c3                   	retq   
  22215d:	cc                   	int3   
  22215e:	cc                   	int3   
  22215f:	cc                   	int3   

0000000000222160 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E>:
                            fn $Flag(&self) -> bool {
  222160:	48 83 ec 18          	sub    $0x18,%rsp
  222164:	48 89 3c 24          	mov    %rdi,(%rsp)
  222168:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22216d:	31 c0                	xor    %eax,%eax
  22216f:	a8 01                	test   $0x1,%al
  222171:	75 17                	jne    22218a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E+0x2a>
  222173:	48 8b 04 24          	mov    (%rsp),%rax
  222177:	8b 00                	mov    (%rax),%eax
  222179:	83 e0 20             	and    $0x20,%eax
  22217c:	83 f8 20             	cmp    $0x20,%eax
  22217f:	0f 94 c0             	sete   %al
  222182:	24 01                	and    $0x1,%al
  222184:	88 44 24 0f          	mov    %al,0xf(%rsp)
  222188:	eb 05                	jmp    22218f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VMX17h040a1efc82286623E+0x2f>
  22218a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22218f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222193:	24 01                	and    $0x1,%al
  222195:	0f b6 c0             	movzbl %al,%eax
  222198:	48 83 c4 18          	add    $0x18,%rsp
  22219c:	c3                   	retq   
  22219d:	cc                   	int3   
  22219e:	cc                   	int3   
  22219f:	cc                   	int3   

00000000002221a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE>:
                            fn $Flag(&self) -> bool {
  2221a0:	48 83 ec 18          	sub    $0x18,%rsp
  2221a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2221a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2221ad:	31 c0                	xor    %eax,%eax
  2221af:	a8 01                	test   $0x1,%al
  2221b1:	75 17                	jne    2221ca <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE+0x2a>
  2221b3:	48 8b 04 24          	mov    (%rsp),%rax
  2221b7:	8b 00                	mov    (%rax),%eax
  2221b9:	83 e0 40             	and    $0x40,%eax
  2221bc:	83 f8 40             	cmp    $0x40,%eax
  2221bf:	0f 94 c0             	sete   %al
  2221c2:	24 01                	and    $0x1,%al
  2221c4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2221c8:	eb 05                	jmp    2221cf <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SMX17hcffb3e6e86f9a0adE+0x2f>
  2221ca:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2221cf:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2221d3:	24 01                	and    $0x1,%al
  2221d5:	0f b6 c0             	movzbl %al,%eax
  2221d8:	48 83 c4 18          	add    $0x18,%rsp
  2221dc:	c3                   	retq   
  2221dd:	cc                   	int3   
  2221de:	cc                   	int3   
  2221df:	cc                   	int3   

00000000002221e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E>:
                            fn $Flag(&self) -> bool {
  2221e0:	48 83 ec 18          	sub    $0x18,%rsp
  2221e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2221e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2221ed:	31 c0                	xor    %eax,%eax
  2221ef:	a8 01                	test   $0x1,%al
  2221f1:	75 1b                	jne    22220e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E+0x2e>
  2221f3:	48 8b 04 24          	mov    (%rsp),%rax
  2221f7:	8b 00                	mov    (%rax),%eax
  2221f9:	25 80 00 00 00       	and    $0x80,%eax
  2221fe:	3d 80 00 00 00       	cmp    $0x80,%eax
  222203:	0f 94 c0             	sete   %al
  222206:	24 01                	and    $0x1,%al
  222208:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22220c:	eb 05                	jmp    222213 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3EST17hed4c4ac091137133E+0x33>
  22220e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222213:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222217:	24 01                	and    $0x1,%al
  222219:	0f b6 c0             	movzbl %al,%eax
  22221c:	48 83 c4 18          	add    $0x18,%rsp
  222220:	c3                   	retq   
  222221:	cc                   	int3   
  222222:	cc                   	int3   
  222223:	cc                   	int3   
  222224:	cc                   	int3   
  222225:	cc                   	int3   
  222226:	cc                   	int3   
  222227:	cc                   	int3   
  222228:	cc                   	int3   
  222229:	cc                   	int3   
  22222a:	cc                   	int3   
  22222b:	cc                   	int3   
  22222c:	cc                   	int3   
  22222d:	cc                   	int3   
  22222e:	cc                   	int3   
  22222f:	cc                   	int3   

0000000000222230 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E>:
                            fn $Flag(&self) -> bool {
  222230:	48 83 ec 18          	sub    $0x18,%rsp
  222234:	48 89 3c 24          	mov    %rdi,(%rsp)
  222238:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22223d:	31 c0                	xor    %eax,%eax
  22223f:	a8 01                	test   $0x1,%al
  222241:	75 1b                	jne    22225e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E+0x2e>
  222243:	48 8b 04 24          	mov    (%rsp),%rax
  222247:	8b 00                	mov    (%rax),%eax
  222249:	25 00 01 00 00       	and    $0x100,%eax
  22224e:	3d 00 01 00 00       	cmp    $0x100,%eax
  222253:	0f 94 c0             	sete   %al
  222256:	24 01                	and    $0x1,%al
  222258:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22225c:	eb 05                	jmp    222263 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM217hf5070c1656931df3E+0x33>
  22225e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222263:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222267:	24 01                	and    $0x1,%al
  222269:	0f b6 c0             	movzbl %al,%eax
  22226c:	48 83 c4 18          	add    $0x18,%rsp
  222270:	c3                   	retq   
  222271:	cc                   	int3   
  222272:	cc                   	int3   
  222273:	cc                   	int3   
  222274:	cc                   	int3   
  222275:	cc                   	int3   
  222276:	cc                   	int3   
  222277:	cc                   	int3   
  222278:	cc                   	int3   
  222279:	cc                   	int3   
  22227a:	cc                   	int3   
  22227b:	cc                   	int3   
  22227c:	cc                   	int3   
  22227d:	cc                   	int3   
  22227e:	cc                   	int3   
  22227f:	cc                   	int3   

0000000000222280 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE>:
                            fn $Flag(&self) -> bool {
  222280:	48 83 ec 18          	sub    $0x18,%rsp
  222284:	48 89 3c 24          	mov    %rdi,(%rsp)
  222288:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22228d:	31 c0                	xor    %eax,%eax
  22228f:	a8 01                	test   $0x1,%al
  222291:	75 1b                	jne    2222ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE+0x2e>
  222293:	48 8b 04 24          	mov    (%rsp),%rax
  222297:	8b 00                	mov    (%rax),%eax
  222299:	25 00 02 00 00       	and    $0x200,%eax
  22229e:	3d 00 02 00 00       	cmp    $0x200,%eax
  2222a3:	0f 94 c0             	sete   %al
  2222a6:	24 01                	and    $0x1,%al
  2222a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2222ac:	eb 05                	jmp    2222b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5SSSE317h4875c0b3db70b6bdE+0x33>
  2222ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2222b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2222b7:	24 01                	and    $0x1,%al
  2222b9:	0f b6 c0             	movzbl %al,%eax
  2222bc:	48 83 c4 18          	add    $0x18,%rsp
  2222c0:	c3                   	retq   
  2222c1:	cc                   	int3   
  2222c2:	cc                   	int3   
  2222c3:	cc                   	int3   
  2222c4:	cc                   	int3   
  2222c5:	cc                   	int3   
  2222c6:	cc                   	int3   
  2222c7:	cc                   	int3   
  2222c8:	cc                   	int3   
  2222c9:	cc                   	int3   
  2222ca:	cc                   	int3   
  2222cb:	cc                   	int3   
  2222cc:	cc                   	int3   
  2222cd:	cc                   	int3   
  2222ce:	cc                   	int3   
  2222cf:	cc                   	int3   

00000000002222d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE>:
                            fn $Flag(&self) -> bool {
  2222d0:	48 83 ec 18          	sub    $0x18,%rsp
  2222d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2222d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2222dd:	31 c0                	xor    %eax,%eax
  2222df:	a8 01                	test   $0x1,%al
  2222e1:	75 1b                	jne    2222fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE+0x2e>
  2222e3:	48 8b 04 24          	mov    (%rsp),%rax
  2222e7:	8b 00                	mov    (%rax),%eax
  2222e9:	25 00 04 00 00       	and    $0x400,%eax
  2222ee:	3d 00 04 00 00       	cmp    $0x400,%eax
  2222f3:	0f 94 c0             	sete   %al
  2222f6:	24 01                	and    $0x1,%al
  2222f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2222fc:	eb 05                	jmp    222303 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CID17h552ddb45fbf3999cE+0x33>
  2222fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222303:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222307:	24 01                	and    $0x1,%al
  222309:	0f b6 c0             	movzbl %al,%eax
  22230c:	48 83 c4 18          	add    $0x18,%rsp
  222310:	c3                   	retq   
  222311:	cc                   	int3   
  222312:	cc                   	int3   
  222313:	cc                   	int3   
  222314:	cc                   	int3   
  222315:	cc                   	int3   
  222316:	cc                   	int3   
  222317:	cc                   	int3   
  222318:	cc                   	int3   
  222319:	cc                   	int3   
  22231a:	cc                   	int3   
  22231b:	cc                   	int3   
  22231c:	cc                   	int3   
  22231d:	cc                   	int3   
  22231e:	cc                   	int3   
  22231f:	cc                   	int3   

0000000000222320 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE>:
                            fn $Flag(&self) -> bool {
  222320:	48 83 ec 18          	sub    $0x18,%rsp
  222324:	48 89 3c 24          	mov    %rdi,(%rsp)
  222328:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22232d:	31 c0                	xor    %eax,%eax
  22232f:	a8 01                	test   $0x1,%al
  222331:	75 1b                	jne    22234e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE+0x2e>
  222333:	48 8b 04 24          	mov    (%rsp),%rax
  222337:	8b 00                	mov    (%rax),%eax
  222339:	25 00 10 00 00       	and    $0x1000,%eax
  22233e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  222343:	0f 94 c0             	sete   %al
  222346:	24 01                	and    $0x1,%al
  222348:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22234c:	eb 05                	jmp    222353 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FMA17hcc0142cc5b07baeeE+0x33>
  22234e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222353:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222357:	24 01                	and    $0x1,%al
  222359:	0f b6 c0             	movzbl %al,%eax
  22235c:	48 83 c4 18          	add    $0x18,%rsp
  222360:	c3                   	retq   
  222361:	cc                   	int3   
  222362:	cc                   	int3   
  222363:	cc                   	int3   
  222364:	cc                   	int3   
  222365:	cc                   	int3   
  222366:	cc                   	int3   
  222367:	cc                   	int3   
  222368:	cc                   	int3   
  222369:	cc                   	int3   
  22236a:	cc                   	int3   
  22236b:	cc                   	int3   
  22236c:	cc                   	int3   
  22236d:	cc                   	int3   
  22236e:	cc                   	int3   
  22236f:	cc                   	int3   

0000000000222370 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE>:
                            fn $Flag(&self) -> bool {
  222370:	48 83 ec 18          	sub    $0x18,%rsp
  222374:	48 89 3c 24          	mov    %rdi,(%rsp)
  222378:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22237d:	31 c0                	xor    %eax,%eax
  22237f:	a8 01                	test   $0x1,%al
  222381:	75 1b                	jne    22239e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE+0x2e>
  222383:	48 8b 04 24          	mov    (%rsp),%rax
  222387:	8b 00                	mov    (%rax),%eax
  222389:	25 00 20 00 00       	and    $0x2000,%eax
  22238e:	3d 00 20 00 00       	cmp    $0x2000,%eax
  222393:	0f 94 c0             	sete   %al
  222396:	24 01                	and    $0x1,%al
  222398:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22239c:	eb 05                	jmp    2223a3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CX1617h4a97a4fefad4919cE+0x33>
  22239e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2223a3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2223a7:	24 01                	and    $0x1,%al
  2223a9:	0f b6 c0             	movzbl %al,%eax
  2223ac:	48 83 c4 18          	add    $0x18,%rsp
  2223b0:	c3                   	retq   
  2223b1:	cc                   	int3   
  2223b2:	cc                   	int3   
  2223b3:	cc                   	int3   
  2223b4:	cc                   	int3   
  2223b5:	cc                   	int3   
  2223b6:	cc                   	int3   
  2223b7:	cc                   	int3   
  2223b8:	cc                   	int3   
  2223b9:	cc                   	int3   
  2223ba:	cc                   	int3   
  2223bb:	cc                   	int3   
  2223bc:	cc                   	int3   
  2223bd:	cc                   	int3   
  2223be:	cc                   	int3   
  2223bf:	cc                   	int3   

00000000002223c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E>:
                            fn $Flag(&self) -> bool {
  2223c0:	48 83 ec 18          	sub    $0x18,%rsp
  2223c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2223c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2223cd:	31 c0                	xor    %eax,%eax
  2223cf:	a8 01                	test   $0x1,%al
  2223d1:	75 1b                	jne    2223ee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E+0x2e>
  2223d3:	48 8b 04 24          	mov    (%rsp),%rax
  2223d7:	8b 00                	mov    (%rax),%eax
  2223d9:	25 00 40 00 00       	and    $0x4000,%eax
  2223de:	3d 00 40 00 00       	cmp    $0x4000,%eax
  2223e3:	0f 94 c0             	sete   %al
  2223e6:	24 01                	and    $0x1,%al
  2223e8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2223ec:	eb 05                	jmp    2223f3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5ETPRD17hdcb28d520db3c008E+0x33>
  2223ee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2223f3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2223f7:	24 01                	and    $0x1,%al
  2223f9:	0f b6 c0             	movzbl %al,%eax
  2223fc:	48 83 c4 18          	add    $0x18,%rsp
  222400:	c3                   	retq   
  222401:	cc                   	int3   
  222402:	cc                   	int3   
  222403:	cc                   	int3   
  222404:	cc                   	int3   
  222405:	cc                   	int3   
  222406:	cc                   	int3   
  222407:	cc                   	int3   
  222408:	cc                   	int3   
  222409:	cc                   	int3   
  22240a:	cc                   	int3   
  22240b:	cc                   	int3   
  22240c:	cc                   	int3   
  22240d:	cc                   	int3   
  22240e:	cc                   	int3   
  22240f:	cc                   	int3   

0000000000222410 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE>:
                            fn $Flag(&self) -> bool {
  222410:	48 83 ec 18          	sub    $0x18,%rsp
  222414:	48 89 3c 24          	mov    %rdi,(%rsp)
  222418:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22241d:	31 c0                	xor    %eax,%eax
  22241f:	a8 01                	test   $0x1,%al
  222421:	75 1b                	jne    22243e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE+0x2e>
  222423:	48 8b 04 24          	mov    (%rsp),%rax
  222427:	8b 00                	mov    (%rax),%eax
  222429:	25 00 80 00 00       	and    $0x8000,%eax
  22242e:	3d 00 80 00 00       	cmp    $0x8000,%eax
  222433:	0f 94 c0             	sete   %al
  222436:	24 01                	and    $0x1,%al
  222438:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22243c:	eb 05                	jmp    222443 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4PDCM17h29bbfc37ccbd11eaE+0x33>
  22243e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222443:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222447:	24 01                	and    $0x1,%al
  222449:	0f b6 c0             	movzbl %al,%eax
  22244c:	48 83 c4 18          	add    $0x18,%rsp
  222450:	c3                   	retq   
  222451:	cc                   	int3   
  222452:	cc                   	int3   
  222453:	cc                   	int3   
  222454:	cc                   	int3   
  222455:	cc                   	int3   
  222456:	cc                   	int3   
  222457:	cc                   	int3   
  222458:	cc                   	int3   
  222459:	cc                   	int3   
  22245a:	cc                   	int3   
  22245b:	cc                   	int3   
  22245c:	cc                   	int3   
  22245d:	cc                   	int3   
  22245e:	cc                   	int3   
  22245f:	cc                   	int3   

0000000000222460 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E>:
                            fn $Flag(&self) -> bool {
  222460:	48 83 ec 18          	sub    $0x18,%rsp
  222464:	48 89 3c 24          	mov    %rdi,(%rsp)
  222468:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22246d:	31 c0                	xor    %eax,%eax
  22246f:	a8 01                	test   $0x1,%al
  222471:	75 1b                	jne    22248e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E+0x2e>
  222473:	48 8b 04 24          	mov    (%rsp),%rax
  222477:	8b 00                	mov    (%rax),%eax
  222479:	25 00 00 02 00       	and    $0x20000,%eax
  22247e:	3d 00 00 02 00       	cmp    $0x20000,%eax
  222483:	0f 94 c0             	sete   %al
  222486:	24 01                	and    $0x1,%al
  222488:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22248c:	eb 05                	jmp    222493 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PCIDE17h2c6b7f8c51e69fe9E+0x33>
  22248e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222493:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222497:	24 01                	and    $0x1,%al
  222499:	0f b6 c0             	movzbl %al,%eax
  22249c:	48 83 c4 18          	add    $0x18,%rsp
  2224a0:	c3                   	retq   
  2224a1:	cc                   	int3   
  2224a2:	cc                   	int3   
  2224a3:	cc                   	int3   
  2224a4:	cc                   	int3   
  2224a5:	cc                   	int3   
  2224a6:	cc                   	int3   
  2224a7:	cc                   	int3   
  2224a8:	cc                   	int3   
  2224a9:	cc                   	int3   
  2224aa:	cc                   	int3   
  2224ab:	cc                   	int3   
  2224ac:	cc                   	int3   
  2224ad:	cc                   	int3   
  2224ae:	cc                   	int3   
  2224af:	cc                   	int3   

00000000002224b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE>:
                            fn $Flag(&self) -> bool {
  2224b0:	48 83 ec 18          	sub    $0x18,%rsp
  2224b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2224b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2224bd:	31 c0                	xor    %eax,%eax
  2224bf:	a8 01                	test   $0x1,%al
  2224c1:	75 1b                	jne    2224de <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE+0x2e>
  2224c3:	48 8b 04 24          	mov    (%rsp),%rax
  2224c7:	8b 00                	mov    (%rax),%eax
  2224c9:	25 00 00 04 00       	and    $0x40000,%eax
  2224ce:	3d 00 00 04 00       	cmp    $0x40000,%eax
  2224d3:	0f 94 c0             	sete   %al
  2224d6:	24 01                	and    $0x1,%al
  2224d8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2224dc:	eb 05                	jmp    2224e3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3DCA17hb3c9c610dffffeffE+0x33>
  2224de:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2224e3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2224e7:	24 01                	and    $0x1,%al
  2224e9:	0f b6 c0             	movzbl %al,%eax
  2224ec:	48 83 c4 18          	add    $0x18,%rsp
  2224f0:	c3                   	retq   
  2224f1:	cc                   	int3   
  2224f2:	cc                   	int3   
  2224f3:	cc                   	int3   
  2224f4:	cc                   	int3   
  2224f5:	cc                   	int3   
  2224f6:	cc                   	int3   
  2224f7:	cc                   	int3   
  2224f8:	cc                   	int3   
  2224f9:	cc                   	int3   
  2224fa:	cc                   	int3   
  2224fb:	cc                   	int3   
  2224fc:	cc                   	int3   
  2224fd:	cc                   	int3   
  2224fe:	cc                   	int3   
  2224ff:	cc                   	int3   

0000000000222500 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE>:
                            fn $Flag(&self) -> bool {
  222500:	48 83 ec 18          	sub    $0x18,%rsp
  222504:	48 89 3c 24          	mov    %rdi,(%rsp)
  222508:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22250d:	31 c0                	xor    %eax,%eax
  22250f:	a8 01                	test   $0x1,%al
  222511:	75 1b                	jne    22252e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE+0x2e>
  222513:	48 8b 04 24          	mov    (%rsp),%rax
  222517:	8b 00                	mov    (%rax),%eax
  222519:	25 00 00 08 00       	and    $0x80000,%eax
  22251e:	3d 00 00 08 00       	cmp    $0x80000,%eax
  222523:	0f 94 c0             	sete   %al
  222526:	24 01                	and    $0x1,%al
  222528:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22252c:	eb 05                	jmp    222533 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_117h45e354939267dc1bE+0x33>
  22252e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222533:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222537:	24 01                	and    $0x1,%al
  222539:	0f b6 c0             	movzbl %al,%eax
  22253c:	48 83 c4 18          	add    $0x18,%rsp
  222540:	c3                   	retq   
  222541:	cc                   	int3   
  222542:	cc                   	int3   
  222543:	cc                   	int3   
  222544:	cc                   	int3   
  222545:	cc                   	int3   
  222546:	cc                   	int3   
  222547:	cc                   	int3   
  222548:	cc                   	int3   
  222549:	cc                   	int3   
  22254a:	cc                   	int3   
  22254b:	cc                   	int3   
  22254c:	cc                   	int3   
  22254d:	cc                   	int3   
  22254e:	cc                   	int3   
  22254f:	cc                   	int3   

0000000000222550 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE>:
                            fn $Flag(&self) -> bool {
  222550:	48 83 ec 18          	sub    $0x18,%rsp
  222554:	48 89 3c 24          	mov    %rdi,(%rsp)
  222558:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22255d:	31 c0                	xor    %eax,%eax
  22255f:	a8 01                	test   $0x1,%al
  222561:	75 1b                	jne    22257e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE+0x2e>
  222563:	48 8b 04 24          	mov    (%rsp),%rax
  222567:	8b 00                	mov    (%rax),%eax
  222569:	25 00 00 10 00       	and    $0x100000,%eax
  22256e:	3d 00 00 10 00       	cmp    $0x100000,%eax
  222573:	0f 94 c0             	sete   %al
  222576:	24 01                	and    $0x1,%al
  222578:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22257c:	eb 05                	jmp    222583 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SSE4_217h06636e9da57f65edE+0x33>
  22257e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222583:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222587:	24 01                	and    $0x1,%al
  222589:	0f b6 c0             	movzbl %al,%eax
  22258c:	48 83 c4 18          	add    $0x18,%rsp
  222590:	c3                   	retq   
  222591:	cc                   	int3   
  222592:	cc                   	int3   
  222593:	cc                   	int3   
  222594:	cc                   	int3   
  222595:	cc                   	int3   
  222596:	cc                   	int3   
  222597:	cc                   	int3   
  222598:	cc                   	int3   
  222599:	cc                   	int3   
  22259a:	cc                   	int3   
  22259b:	cc                   	int3   
  22259c:	cc                   	int3   
  22259d:	cc                   	int3   
  22259e:	cc                   	int3   
  22259f:	cc                   	int3   

00000000002225a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E>:
                            fn $Flag(&self) -> bool {
  2225a0:	48 83 ec 18          	sub    $0x18,%rsp
  2225a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2225a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2225ad:	31 c0                	xor    %eax,%eax
  2225af:	a8 01                	test   $0x1,%al
  2225b1:	75 1b                	jne    2225ce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E+0x2e>
  2225b3:	48 8b 04 24          	mov    (%rsp),%rax
  2225b7:	8b 00                	mov    (%rax),%eax
  2225b9:	25 00 00 20 00       	and    $0x200000,%eax
  2225be:	3d 00 00 20 00       	cmp    $0x200000,%eax
  2225c3:	0f 94 c0             	sete   %al
  2225c6:	24 01                	and    $0x1,%al
  2225c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2225cc:	eb 05                	jmp    2225d3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6X2APIC17ha6caf6c55b403947E+0x33>
  2225ce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2225d3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2225d7:	24 01                	and    $0x1,%al
  2225d9:	0f b6 c0             	movzbl %al,%eax
  2225dc:	48 83 c4 18          	add    $0x18,%rsp
  2225e0:	c3                   	retq   
  2225e1:	cc                   	int3   
  2225e2:	cc                   	int3   
  2225e3:	cc                   	int3   
  2225e4:	cc                   	int3   
  2225e5:	cc                   	int3   
  2225e6:	cc                   	int3   
  2225e7:	cc                   	int3   
  2225e8:	cc                   	int3   
  2225e9:	cc                   	int3   
  2225ea:	cc                   	int3   
  2225eb:	cc                   	int3   
  2225ec:	cc                   	int3   
  2225ed:	cc                   	int3   
  2225ee:	cc                   	int3   
  2225ef:	cc                   	int3   

00000000002225f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E>:
                            fn $Flag(&self) -> bool {
  2225f0:	48 83 ec 18          	sub    $0x18,%rsp
  2225f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2225f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2225fd:	31 c0                	xor    %eax,%eax
  2225ff:	a8 01                	test   $0x1,%al
  222601:	75 1b                	jne    22261e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E+0x2e>
  222603:	48 8b 04 24          	mov    (%rsp),%rax
  222607:	8b 00                	mov    (%rax),%eax
  222609:	25 00 00 40 00       	and    $0x400000,%eax
  22260e:	3d 00 00 40 00       	cmp    $0x400000,%eax
  222613:	0f 94 c0             	sete   %al
  222616:	24 01                	and    $0x1,%al
  222618:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22261c:	eb 05                	jmp    222623 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5MOVBE17ha9eb4692abd7feb1E+0x33>
  22261e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222623:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222627:	24 01                	and    $0x1,%al
  222629:	0f b6 c0             	movzbl %al,%eax
  22262c:	48 83 c4 18          	add    $0x18,%rsp
  222630:	c3                   	retq   
  222631:	cc                   	int3   
  222632:	cc                   	int3   
  222633:	cc                   	int3   
  222634:	cc                   	int3   
  222635:	cc                   	int3   
  222636:	cc                   	int3   
  222637:	cc                   	int3   
  222638:	cc                   	int3   
  222639:	cc                   	int3   
  22263a:	cc                   	int3   
  22263b:	cc                   	int3   
  22263c:	cc                   	int3   
  22263d:	cc                   	int3   
  22263e:	cc                   	int3   
  22263f:	cc                   	int3   

0000000000222640 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E>:
                            fn $Flag(&self) -> bool {
  222640:	48 83 ec 18          	sub    $0x18,%rsp
  222644:	48 89 3c 24          	mov    %rdi,(%rsp)
  222648:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22264d:	31 c0                	xor    %eax,%eax
  22264f:	a8 01                	test   $0x1,%al
  222651:	75 1b                	jne    22266e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E+0x2e>
  222653:	48 8b 04 24          	mov    (%rsp),%rax
  222657:	8b 00                	mov    (%rax),%eax
  222659:	25 00 00 80 00       	and    $0x800000,%eax
  22265e:	3d 00 00 80 00       	cmp    $0x800000,%eax
  222663:	0f 94 c0             	sete   %al
  222666:	24 01                	and    $0x1,%al
  222668:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22266c:	eb 05                	jmp    222673 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6POPCNT17hc921dd2d4d685003E+0x33>
  22266e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222673:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222677:	24 01                	and    $0x1,%al
  222679:	0f b6 c0             	movzbl %al,%eax
  22267c:	48 83 c4 18          	add    $0x18,%rsp
  222680:	c3                   	retq   
  222681:	cc                   	int3   
  222682:	cc                   	int3   
  222683:	cc                   	int3   
  222684:	cc                   	int3   
  222685:	cc                   	int3   
  222686:	cc                   	int3   
  222687:	cc                   	int3   
  222688:	cc                   	int3   
  222689:	cc                   	int3   
  22268a:	cc                   	int3   
  22268b:	cc                   	int3   
  22268c:	cc                   	int3   
  22268d:	cc                   	int3   
  22268e:	cc                   	int3   
  22268f:	cc                   	int3   

0000000000222690 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E>:
                            fn $Flag(&self) -> bool {
  222690:	48 83 ec 18          	sub    $0x18,%rsp
  222694:	48 89 3c 24          	mov    %rdi,(%rsp)
  222698:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22269d:	31 c0                	xor    %eax,%eax
  22269f:	a8 01                	test   $0x1,%al
  2226a1:	75 1b                	jne    2226be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E+0x2e>
  2226a3:	48 8b 04 24          	mov    (%rsp),%rax
  2226a7:	8b 00                	mov    (%rax),%eax
  2226a9:	25 00 00 00 01       	and    $0x1000000,%eax
  2226ae:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  2226b3:	0f 94 c0             	sete   %al
  2226b6:	24 01                	and    $0x1,%al
  2226b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2226bc:	eb 05                	jmp    2226c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4TSCD17hbac3742cc449d191E+0x33>
  2226be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2226c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2226c7:	24 01                	and    $0x1,%al
  2226c9:	0f b6 c0             	movzbl %al,%eax
  2226cc:	48 83 c4 18          	add    $0x18,%rsp
  2226d0:	c3                   	retq   
  2226d1:	cc                   	int3   
  2226d2:	cc                   	int3   
  2226d3:	cc                   	int3   
  2226d4:	cc                   	int3   
  2226d5:	cc                   	int3   
  2226d6:	cc                   	int3   
  2226d7:	cc                   	int3   
  2226d8:	cc                   	int3   
  2226d9:	cc                   	int3   
  2226da:	cc                   	int3   
  2226db:	cc                   	int3   
  2226dc:	cc                   	int3   
  2226dd:	cc                   	int3   
  2226de:	cc                   	int3   
  2226df:	cc                   	int3   

00000000002226e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE>:
                            fn $Flag(&self) -> bool {
  2226e0:	48 83 ec 18          	sub    $0x18,%rsp
  2226e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2226e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2226ed:	31 c0                	xor    %eax,%eax
  2226ef:	a8 01                	test   $0x1,%al
  2226f1:	75 1b                	jne    22270e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE+0x2e>
  2226f3:	48 8b 04 24          	mov    (%rsp),%rax
  2226f7:	8b 00                	mov    (%rax),%eax
  2226f9:	25 00 00 00 02       	and    $0x2000000,%eax
  2226fe:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  222703:	0f 94 c0             	sete   %al
  222706:	24 01                	and    $0x1,%al
  222708:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22270c:	eb 05                	jmp    222713 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AES17h59e81da5804d2acbE+0x33>
  22270e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222713:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222717:	24 01                	and    $0x1,%al
  222719:	0f b6 c0             	movzbl %al,%eax
  22271c:	48 83 c4 18          	add    $0x18,%rsp
  222720:	c3                   	retq   
  222721:	cc                   	int3   
  222722:	cc                   	int3   
  222723:	cc                   	int3   
  222724:	cc                   	int3   
  222725:	cc                   	int3   
  222726:	cc                   	int3   
  222727:	cc                   	int3   
  222728:	cc                   	int3   
  222729:	cc                   	int3   
  22272a:	cc                   	int3   
  22272b:	cc                   	int3   
  22272c:	cc                   	int3   
  22272d:	cc                   	int3   
  22272e:	cc                   	int3   
  22272f:	cc                   	int3   

0000000000222730 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE>:
                            fn $Flag(&self) -> bool {
  222730:	48 83 ec 18          	sub    $0x18,%rsp
  222734:	48 89 3c 24          	mov    %rdi,(%rsp)
  222738:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22273d:	31 c0                	xor    %eax,%eax
  22273f:	a8 01                	test   $0x1,%al
  222741:	75 1b                	jne    22275e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE+0x2e>
  222743:	48 8b 04 24          	mov    (%rsp),%rax
  222747:	8b 00                	mov    (%rax),%eax
  222749:	25 00 00 00 04       	and    $0x4000000,%eax
  22274e:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  222753:	0f 94 c0             	sete   %al
  222756:	24 01                	and    $0x1,%al
  222758:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22275c:	eb 05                	jmp    222763 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5XSAVE17h845257a0b37dec1cE+0x33>
  22275e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222763:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222767:	24 01                	and    $0x1,%al
  222769:	0f b6 c0             	movzbl %al,%eax
  22276c:	48 83 c4 18          	add    $0x18,%rsp
  222770:	c3                   	retq   
  222771:	cc                   	int3   
  222772:	cc                   	int3   
  222773:	cc                   	int3   
  222774:	cc                   	int3   
  222775:	cc                   	int3   
  222776:	cc                   	int3   
  222777:	cc                   	int3   
  222778:	cc                   	int3   
  222779:	cc                   	int3   
  22277a:	cc                   	int3   
  22277b:	cc                   	int3   
  22277c:	cc                   	int3   
  22277d:	cc                   	int3   
  22277e:	cc                   	int3   
  22277f:	cc                   	int3   

0000000000222780 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE>:
                            fn $Flag(&self) -> bool {
  222780:	48 83 ec 18          	sub    $0x18,%rsp
  222784:	48 89 3c 24          	mov    %rdi,(%rsp)
  222788:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22278d:	31 c0                	xor    %eax,%eax
  22278f:	a8 01                	test   $0x1,%al
  222791:	75 1b                	jne    2227ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE+0x2e>
  222793:	48 8b 04 24          	mov    (%rsp),%rax
  222797:	8b 00                	mov    (%rax),%eax
  222799:	25 00 00 00 08       	and    $0x8000000,%eax
  22279e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  2227a3:	0f 94 c0             	sete   %al
  2227a6:	24 01                	and    $0x1,%al
  2227a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2227ac:	eb 05                	jmp    2227b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7OSXSAVE17h3e361ad5eea7c6beE+0x33>
  2227ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2227b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2227b7:	24 01                	and    $0x1,%al
  2227b9:	0f b6 c0             	movzbl %al,%eax
  2227bc:	48 83 c4 18          	add    $0x18,%rsp
  2227c0:	c3                   	retq   
  2227c1:	cc                   	int3   
  2227c2:	cc                   	int3   
  2227c3:	cc                   	int3   
  2227c4:	cc                   	int3   
  2227c5:	cc                   	int3   
  2227c6:	cc                   	int3   
  2227c7:	cc                   	int3   
  2227c8:	cc                   	int3   
  2227c9:	cc                   	int3   
  2227ca:	cc                   	int3   
  2227cb:	cc                   	int3   
  2227cc:	cc                   	int3   
  2227cd:	cc                   	int3   
  2227ce:	cc                   	int3   
  2227cf:	cc                   	int3   

00000000002227d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E>:
                            fn $Flag(&self) -> bool {
  2227d0:	48 83 ec 18          	sub    $0x18,%rsp
  2227d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2227d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2227dd:	31 c0                	xor    %eax,%eax
  2227df:	a8 01                	test   $0x1,%al
  2227e1:	75 1b                	jne    2227fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E+0x2e>
  2227e3:	48 8b 04 24          	mov    (%rsp),%rax
  2227e7:	8b 00                	mov    (%rax),%eax
  2227e9:	25 00 00 00 10       	and    $0x10000000,%eax
  2227ee:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  2227f3:	0f 94 c0             	sete   %al
  2227f6:	24 01                	and    $0x1,%al
  2227f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2227fc:	eb 05                	jmp    222803 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsECX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3AVX17h22c320ee8ff380f9E+0x33>
  2227fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  222803:	8a 44 24 0f          	mov    0xf(%rsp),%al
  222807:	24 01                	and    $0x1,%al
  222809:	0f b6 c0             	movzbl %al,%eax
  22280c:	48 83 c4 18          	add    $0x18,%rsp
  222810:	c3                   	retq   
  222811:	cc                   	int3   
  222812:	cc                   	int3   
  222813:	cc                   	int3   
  222814:	cc                   	int3   
  222815:	cc                   	int3   
  222816:	cc                   	int3   
  222817:	cc                   	int3   
  222818:	cc                   	int3   
  222819:	cc                   	int3   
  22281a:	cc                   	int3   
  22281b:	cc                   	int3   
  22281c:	cc                   	int3   
  22281d:	cc                   	int3   
  22281e:	cc                   	int3   
  22281f:	cc                   	int3   

0000000000222820 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E>:
            fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
  222820:	48 81 ec d8 04 00 00 	sub    $0x4d8,%rsp
  222827:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  22282c:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  222831:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  222838:	00 
  222839:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  222840:	00 
                let mut first = true;
  222841:	c6 44 24 7f 01       	movb   $0x1,0x7f(%rsp)
                    if <Self as __BitFlags>::$Flag(self) {
  222846:	e8 b5 1b 00 00       	callq  224400 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E>
  22284b:	88 44 24 7d          	mov    %al,0x7d(%rsp)
  22284f:	8a 44 24 7d          	mov    0x7d(%rsp),%al
  222853:	a8 01                	test   $0x1,%al
  222855:	75 15                	jne    22286c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4c>
  222857:	eb 00                	jmp    222859 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x39>
  222859:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22285e:	e8 dd 1b 00 00       	callq  224440 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E>
  222863:	88 44 24 67          	mov    %al,0x67(%rsp)
  222867:	e9 c6 00 00 00       	jmpq   222932 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x112>
                        if !first {
  22286c:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222870:	34 ff                	xor    $0xff,%al
  222872:	a8 01                	test   $0x1,%al
  222874:	75 21                	jne    222897 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x77>
  222876:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22287b:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222880:	48 8d 35 87 02 fe ff 	lea    -0x1fd79(%rip),%rsi        # 202b0e <str.0+0x1ee>
  222887:	ba 03 00 00 00       	mov    $0x3,%edx
  22288c:	e8 8f 2e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222891:	88 44 24 66          	mov    %al,0x66(%rsp)
  222895:	eb 60                	jmp    2228f7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd7>
  222897:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22289c:	48 8d 35 f3 01 fe ff 	lea    -0x1fe0d(%rip),%rsi        # 202a96 <str.0+0x176>
  2228a3:	ba 03 00 00 00       	mov    $0x3,%edx
  2228a8:	e8 73 2e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2228ad:	88 44 24 65          	mov    %al,0x65(%rsp)
  2228b1:	8a 44 24 65          	mov    0x65(%rsp),%al
  2228b5:	0f b6 f8             	movzbl %al,%edi
  2228b8:	83 e7 01             	and    $0x1,%edi
  2228bb:	e8 90 8b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2228c0:	24 01                	and    $0x1,%al
  2228c2:	88 84 24 80 00 00 00 	mov    %al,0x80(%rsp)
  2228c9:	0f b6 84 24 80 00 00 	movzbl 0x80(%rsp),%eax
  2228d0:	00 
  2228d1:	a8 01                	test   $0x1,%al
  2228d3:	74 a1                	je     222876 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x56>
  2228d5:	eb 00                	jmp    2228d7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb7>
  2228d7:	eb 02                	jmp    2228db <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbb>
  2228d9:	0f 0b                	ud2    
  2228db:	e8 b0 7c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2228e0:	24 01                	and    $0x1,%al
  2228e2:	88 44 24 7e          	mov    %al,0x7e(%rsp)
            }
  2228e6:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  2228ea:	24 01                	and    $0x1,%al
  2228ec:	0f b6 c0             	movzbl %al,%eax
  2228ef:	48 81 c4 d8 04 00 00 	add    $0x4d8,%rsp
  2228f6:	c3                   	retq   
  2228f7:	8a 44 24 66          	mov    0x66(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2228fb:	0f b6 f8             	movzbl %al,%edi
  2228fe:	83 e7 01             	and    $0x1,%edi
  222901:	e8 4a 8b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222906:	24 01                	and    $0x1,%al
  222908:	88 84 24 81 00 00 00 	mov    %al,0x81(%rsp)
  22290f:	0f b6 84 24 81 00 00 	movzbl 0x81(%rsp),%eax
  222916:	00 
  222917:	a8 01                	test   $0x1,%al
  222919:	0f 84 3a ff ff ff    	je     222859 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x39>
  22291f:	eb 00                	jmp    222921 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x101>
  222921:	eb 02                	jmp    222925 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x105>
  222923:	0f 0b                	ud2    
  222925:	e8 66 7c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22292a:	24 01                	and    $0x1,%al
  22292c:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222930:	eb b4                	jmp    2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222932:	8a 44 24 67          	mov    0x67(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222936:	a8 01                	test   $0x1,%al
  222938:	75 15                	jne    22294f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12f>
  22293a:	eb 00                	jmp    22293c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c>
  22293c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222941:	e8 3a 1b 00 00       	callq  224480 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE>
  222946:	88 44 24 64          	mov    %al,0x64(%rsp)
  22294a:	e9 bd 00 00 00       	jmpq   222a0c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ec>
                        if !first {
  22294f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222953:	34 ff                	xor    $0xff,%al
  222955:	a8 01                	test   $0x1,%al
  222957:	75 21                	jne    22297a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15a>
  222959:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22295e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222963:	48 8d 35 a7 01 fe ff 	lea    -0x1fe59(%rip),%rsi        # 202b11 <str.0+0x1f1>
  22296a:	ba 03 00 00 00       	mov    $0x3,%edx
  22296f:	e8 ac 2d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222974:	88 44 24 63          	mov    %al,0x63(%rsp)
  222978:	eb 54                	jmp    2229ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ae>
  22297a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22297f:	48 8d 35 10 01 fe ff 	lea    -0x1fef0(%rip),%rsi        # 202a96 <str.0+0x176>
  222986:	ba 03 00 00 00       	mov    $0x3,%edx
  22298b:	e8 90 2d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222990:	88 44 24 62          	mov    %al,0x62(%rsp)
  222994:	8a 44 24 62          	mov    0x62(%rsp),%al
  222998:	0f b6 f8             	movzbl %al,%edi
  22299b:	83 e7 01             	and    $0x1,%edi
  22299e:	e8 ad 8a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2229a3:	24 01                	and    $0x1,%al
  2229a5:	88 84 24 82 00 00 00 	mov    %al,0x82(%rsp)
  2229ac:	0f b6 84 24 82 00 00 	movzbl 0x82(%rsp),%eax
  2229b3:	00 
  2229b4:	a8 01                	test   $0x1,%al
  2229b6:	74 a1                	je     222959 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x139>
  2229b8:	eb 00                	jmp    2229ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19a>
  2229ba:	eb 02                	jmp    2229be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19e>
  2229bc:	0f 0b                	ud2    
  2229be:	e8 cd 7b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2229c3:	24 01                	and    $0x1,%al
  2229c5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2229c9:	e9 18 ff ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2229ce:	8a 44 24 63          	mov    0x63(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2229d2:	0f b6 f8             	movzbl %al,%edi
  2229d5:	83 e7 01             	and    $0x1,%edi
  2229d8:	e8 73 8a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2229dd:	24 01                	and    $0x1,%al
  2229df:	88 84 24 83 00 00 00 	mov    %al,0x83(%rsp)
  2229e6:	0f b6 84 24 83 00 00 	movzbl 0x83(%rsp),%eax
  2229ed:	00 
  2229ee:	a8 01                	test   $0x1,%al
  2229f0:	0f 84 46 ff ff ff    	je     22293c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c>
  2229f6:	eb 00                	jmp    2229f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1d8>
  2229f8:	eb 02                	jmp    2229fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1dc>
  2229fa:	0f 0b                	ud2    
  2229fc:	e8 8f 7b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222a01:	24 01                	and    $0x1,%al
  222a03:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222a07:	e9 da fe ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222a0c:	8a 44 24 64          	mov    0x64(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222a10:	a8 01                	test   $0x1,%al
  222a12:	75 15                	jne    222a29 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x209>
  222a14:	eb 00                	jmp    222a16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1f6>
  222a16:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222a1b:	e8 a0 1a 00 00       	callq  2244c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E>
  222a20:	88 44 24 61          	mov    %al,0x61(%rsp)
  222a24:	e9 bd 00 00 00       	jmpq   222ae6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2c6>
                        if !first {
  222a29:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222a2d:	34 ff                	xor    $0xff,%al
  222a2f:	a8 01                	test   $0x1,%al
  222a31:	75 21                	jne    222a54 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x234>
  222a33:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222a38:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222a3d:	48 8d 35 d0 00 fe ff 	lea    -0x1ff30(%rip),%rsi        # 202b14 <str.0+0x1f4>
  222a44:	ba 02 00 00 00       	mov    $0x2,%edx
  222a49:	e8 d2 2c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222a4e:	88 44 24 60          	mov    %al,0x60(%rsp)
  222a52:	eb 54                	jmp    222aa8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x288>
  222a54:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222a59:	48 8d 35 36 00 fe ff 	lea    -0x1ffca(%rip),%rsi        # 202a96 <str.0+0x176>
  222a60:	ba 03 00 00 00       	mov    $0x3,%edx
  222a65:	e8 b6 2c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222a6a:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  222a6e:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  222a72:	0f b6 f8             	movzbl %al,%edi
  222a75:	83 e7 01             	and    $0x1,%edi
  222a78:	e8 d3 89 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222a7d:	24 01                	and    $0x1,%al
  222a7f:	88 84 24 84 00 00 00 	mov    %al,0x84(%rsp)
  222a86:	0f b6 84 24 84 00 00 	movzbl 0x84(%rsp),%eax
  222a8d:	00 
  222a8e:	a8 01                	test   $0x1,%al
  222a90:	74 a1                	je     222a33 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x213>
  222a92:	eb 00                	jmp    222a94 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x274>
  222a94:	eb 02                	jmp    222a98 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x278>
  222a96:	0f 0b                	ud2    
  222a98:	e8 f3 7a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222a9d:	24 01                	and    $0x1,%al
  222a9f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222aa3:	e9 3e fe ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222aa8:	8a 44 24 60          	mov    0x60(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222aac:	0f b6 f8             	movzbl %al,%edi
  222aaf:	83 e7 01             	and    $0x1,%edi
  222ab2:	e8 99 89 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222ab7:	24 01                	and    $0x1,%al
  222ab9:	88 84 24 85 00 00 00 	mov    %al,0x85(%rsp)
  222ac0:	0f b6 84 24 85 00 00 	movzbl 0x85(%rsp),%eax
  222ac7:	00 
  222ac8:	a8 01                	test   $0x1,%al
  222aca:	0f 84 46 ff ff ff    	je     222a16 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1f6>
  222ad0:	eb 00                	jmp    222ad2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2b2>
  222ad2:	eb 02                	jmp    222ad6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2b6>
  222ad4:	0f 0b                	ud2    
  222ad6:	e8 b5 7a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222adb:	24 01                	and    $0x1,%al
  222add:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222ae1:	e9 00 fe ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222ae6:	8a 44 24 61          	mov    0x61(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222aea:	a8 01                	test   $0x1,%al
  222aec:	75 15                	jne    222b03 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2e3>
  222aee:	eb 00                	jmp    222af0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2d0>
  222af0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222af5:	e8 06 1a 00 00       	callq  224500 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E>
  222afa:	88 44 24 5e          	mov    %al,0x5e(%rsp)
  222afe:	e9 bd 00 00 00       	jmpq   222bc0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3a0>
                        if !first {
  222b03:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222b07:	34 ff                	xor    $0xff,%al
  222b09:	a8 01                	test   $0x1,%al
  222b0b:	75 21                	jne    222b2e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x30e>
  222b0d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222b12:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222b17:	48 8d 35 f8 ff fd ff 	lea    -0x20008(%rip),%rsi        # 202b16 <str.0+0x1f6>
  222b1e:	ba 03 00 00 00       	mov    $0x3,%edx
  222b23:	e8 f8 2b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222b28:	88 44 24 5d          	mov    %al,0x5d(%rsp)
  222b2c:	eb 54                	jmp    222b82 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x362>
  222b2e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222b33:	48 8d 35 5c ff fd ff 	lea    -0x200a4(%rip),%rsi        # 202a96 <str.0+0x176>
  222b3a:	ba 03 00 00 00       	mov    $0x3,%edx
  222b3f:	e8 dc 2b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222b44:	88 44 24 5c          	mov    %al,0x5c(%rsp)
  222b48:	8a 44 24 5c          	mov    0x5c(%rsp),%al
  222b4c:	0f b6 f8             	movzbl %al,%edi
  222b4f:	83 e7 01             	and    $0x1,%edi
  222b52:	e8 f9 88 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222b57:	24 01                	and    $0x1,%al
  222b59:	88 84 24 86 00 00 00 	mov    %al,0x86(%rsp)
  222b60:	0f b6 84 24 86 00 00 	movzbl 0x86(%rsp),%eax
  222b67:	00 
  222b68:	a8 01                	test   $0x1,%al
  222b6a:	74 a1                	je     222b0d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2ed>
  222b6c:	eb 00                	jmp    222b6e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x34e>
  222b6e:	eb 02                	jmp    222b72 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x352>
  222b70:	0f 0b                	ud2    
  222b72:	e8 19 7a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222b77:	24 01                	and    $0x1,%al
  222b79:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222b7d:	e9 64 fd ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222b82:	8a 44 24 5d          	mov    0x5d(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222b86:	0f b6 f8             	movzbl %al,%edi
  222b89:	83 e7 01             	and    $0x1,%edi
  222b8c:	e8 bf 88 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222b91:	24 01                	and    $0x1,%al
  222b93:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  222b9a:	0f b6 84 24 87 00 00 	movzbl 0x87(%rsp),%eax
  222ba1:	00 
  222ba2:	a8 01                	test   $0x1,%al
  222ba4:	0f 84 46 ff ff ff    	je     222af0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x2d0>
  222baa:	eb 00                	jmp    222bac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x38c>
  222bac:	eb 02                	jmp    222bb0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x390>
  222bae:	0f 0b                	ud2    
  222bb0:	e8 db 79 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222bb5:	24 01                	and    $0x1,%al
  222bb7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222bbb:	e9 26 fd ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222bc0:	8a 44 24 5e          	mov    0x5e(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222bc4:	a8 01                	test   $0x1,%al
  222bc6:	75 15                	jne    222bdd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3bd>
  222bc8:	eb 00                	jmp    222bca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3aa>
  222bca:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222bcf:	e8 6c 19 00 00       	callq  224540 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE>
  222bd4:	88 44 24 5b          	mov    %al,0x5b(%rsp)
  222bd8:	e9 bd 00 00 00       	jmpq   222c9a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x47a>
                        if !first {
  222bdd:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222be1:	34 ff                	xor    $0xff,%al
  222be3:	a8 01                	test   $0x1,%al
  222be5:	75 21                	jne    222c08 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3e8>
  222be7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222bec:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222bf1:	48 8d 35 21 ff fd ff 	lea    -0x200df(%rip),%rsi        # 202b19 <str.0+0x1f9>
  222bf8:	ba 03 00 00 00       	mov    $0x3,%edx
  222bfd:	e8 1e 2b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222c02:	88 44 24 5a          	mov    %al,0x5a(%rsp)
  222c06:	eb 54                	jmp    222c5c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x43c>
  222c08:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222c0d:	48 8d 35 82 fe fd ff 	lea    -0x2017e(%rip),%rsi        # 202a96 <str.0+0x176>
  222c14:	ba 03 00 00 00       	mov    $0x3,%edx
  222c19:	e8 02 2b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222c1e:	88 44 24 59          	mov    %al,0x59(%rsp)
  222c22:	8a 44 24 59          	mov    0x59(%rsp),%al
  222c26:	0f b6 f8             	movzbl %al,%edi
  222c29:	83 e7 01             	and    $0x1,%edi
  222c2c:	e8 1f 88 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222c31:	24 01                	and    $0x1,%al
  222c33:	88 84 24 88 00 00 00 	mov    %al,0x88(%rsp)
  222c3a:	0f b6 84 24 88 00 00 	movzbl 0x88(%rsp),%eax
  222c41:	00 
  222c42:	a8 01                	test   $0x1,%al
  222c44:	74 a1                	je     222be7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3c7>
  222c46:	eb 00                	jmp    222c48 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x428>
  222c48:	eb 02                	jmp    222c4c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x42c>
  222c4a:	0f 0b                	ud2    
  222c4c:	e8 3f 79 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222c51:	24 01                	and    $0x1,%al
  222c53:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222c57:	e9 8a fc ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222c5c:	8a 44 24 5a          	mov    0x5a(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222c60:	0f b6 f8             	movzbl %al,%edi
  222c63:	83 e7 01             	and    $0x1,%edi
  222c66:	e8 e5 87 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222c6b:	24 01                	and    $0x1,%al
  222c6d:	88 84 24 89 00 00 00 	mov    %al,0x89(%rsp)
  222c74:	0f b6 84 24 89 00 00 	movzbl 0x89(%rsp),%eax
  222c7b:	00 
  222c7c:	a8 01                	test   $0x1,%al
  222c7e:	0f 84 46 ff ff ff    	je     222bca <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x3aa>
  222c84:	eb 00                	jmp    222c86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x466>
  222c86:	eb 02                	jmp    222c8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x46a>
  222c88:	0f 0b                	ud2    
  222c8a:	e8 01 79 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222c8f:	24 01                	and    $0x1,%al
  222c91:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222c95:	e9 4c fc ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222c9a:	8a 44 24 5b          	mov    0x5b(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222c9e:	a8 01                	test   $0x1,%al
  222ca0:	75 15                	jne    222cb7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x497>
  222ca2:	eb 00                	jmp    222ca4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x484>
  222ca4:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222ca9:	e8 d2 18 00 00       	callq  224580 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E>
  222cae:	88 44 24 58          	mov    %al,0x58(%rsp)
  222cb2:	e9 bd 00 00 00       	jmpq   222d74 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x554>
                        if !first {
  222cb7:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222cbb:	34 ff                	xor    $0xff,%al
  222cbd:	a8 01                	test   $0x1,%al
  222cbf:	75 21                	jne    222ce2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4c2>
  222cc1:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222cc6:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222ccb:	48 8d 35 4a fe fd ff 	lea    -0x201b6(%rip),%rsi        # 202b1c <str.0+0x1fc>
  222cd2:	ba 03 00 00 00       	mov    $0x3,%edx
  222cd7:	e8 44 2a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222cdc:	88 44 24 57          	mov    %al,0x57(%rsp)
  222ce0:	eb 54                	jmp    222d36 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x516>
  222ce2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222ce7:	48 8d 35 a8 fd fd ff 	lea    -0x20258(%rip),%rsi        # 202a96 <str.0+0x176>
  222cee:	ba 03 00 00 00       	mov    $0x3,%edx
  222cf3:	e8 28 2a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222cf8:	88 44 24 56          	mov    %al,0x56(%rsp)
  222cfc:	8a 44 24 56          	mov    0x56(%rsp),%al
  222d00:	0f b6 f8             	movzbl %al,%edi
  222d03:	83 e7 01             	and    $0x1,%edi
  222d06:	e8 45 87 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222d0b:	24 01                	and    $0x1,%al
  222d0d:	88 84 24 8a 00 00 00 	mov    %al,0x8a(%rsp)
  222d14:	0f b6 84 24 8a 00 00 	movzbl 0x8a(%rsp),%eax
  222d1b:	00 
  222d1c:	a8 01                	test   $0x1,%al
  222d1e:	74 a1                	je     222cc1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x4a1>
  222d20:	eb 00                	jmp    222d22 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x502>
  222d22:	eb 02                	jmp    222d26 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x506>
  222d24:	0f 0b                	ud2    
  222d26:	e8 65 78 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222d2b:	24 01                	and    $0x1,%al
  222d2d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222d31:	e9 b0 fb ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222d36:	8a 44 24 57          	mov    0x57(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222d3a:	0f b6 f8             	movzbl %al,%edi
  222d3d:	83 e7 01             	and    $0x1,%edi
  222d40:	e8 0b 87 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222d45:	24 01                	and    $0x1,%al
  222d47:	88 84 24 8b 00 00 00 	mov    %al,0x8b(%rsp)
  222d4e:	0f b6 84 24 8b 00 00 	movzbl 0x8b(%rsp),%eax
  222d55:	00 
  222d56:	a8 01                	test   $0x1,%al
  222d58:	0f 84 46 ff ff ff    	je     222ca4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x484>
  222d5e:	eb 00                	jmp    222d60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x540>
  222d60:	eb 02                	jmp    222d64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x544>
  222d62:	0f 0b                	ud2    
  222d64:	e8 27 78 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222d69:	24 01                	and    $0x1,%al
  222d6b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222d6f:	e9 72 fb ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222d74:	8a 44 24 58          	mov    0x58(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222d78:	a8 01                	test   $0x1,%al
  222d7a:	75 15                	jne    222d91 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x571>
  222d7c:	eb 00                	jmp    222d7e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x55e>
  222d7e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222d83:	e8 38 18 00 00       	callq  2245c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E>
  222d88:	88 44 24 55          	mov    %al,0x55(%rsp)
  222d8c:	e9 bd 00 00 00       	jmpq   222e4e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x62e>
                        if !first {
  222d91:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222d95:	34 ff                	xor    $0xff,%al
  222d97:	a8 01                	test   $0x1,%al
  222d99:	75 21                	jne    222dbc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x59c>
  222d9b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222da0:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222da5:	48 8d 35 73 fd fd ff 	lea    -0x2028d(%rip),%rsi        # 202b1f <str.0+0x1ff>
  222dac:	ba 03 00 00 00       	mov    $0x3,%edx
  222db1:	e8 6a 29 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222db6:	88 44 24 54          	mov    %al,0x54(%rsp)
  222dba:	eb 54                	jmp    222e10 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5f0>
  222dbc:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222dc1:	48 8d 35 ce fc fd ff 	lea    -0x20332(%rip),%rsi        # 202a96 <str.0+0x176>
  222dc8:	ba 03 00 00 00       	mov    $0x3,%edx
  222dcd:	e8 4e 29 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222dd2:	88 44 24 53          	mov    %al,0x53(%rsp)
  222dd6:	8a 44 24 53          	mov    0x53(%rsp),%al
  222dda:	0f b6 f8             	movzbl %al,%edi
  222ddd:	83 e7 01             	and    $0x1,%edi
  222de0:	e8 6b 86 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222de5:	24 01                	and    $0x1,%al
  222de7:	88 84 24 8c 00 00 00 	mov    %al,0x8c(%rsp)
  222dee:	0f b6 84 24 8c 00 00 	movzbl 0x8c(%rsp),%eax
  222df5:	00 
  222df6:	a8 01                	test   $0x1,%al
  222df8:	74 a1                	je     222d9b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x57b>
  222dfa:	eb 00                	jmp    222dfc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5dc>
  222dfc:	eb 02                	jmp    222e00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x5e0>
  222dfe:	0f 0b                	ud2    
  222e00:	e8 8b 77 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222e05:	24 01                	and    $0x1,%al
  222e07:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222e0b:	e9 d6 fa ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222e10:	8a 44 24 54          	mov    0x54(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222e14:	0f b6 f8             	movzbl %al,%edi
  222e17:	83 e7 01             	and    $0x1,%edi
  222e1a:	e8 31 86 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222e1f:	24 01                	and    $0x1,%al
  222e21:	88 84 24 8d 00 00 00 	mov    %al,0x8d(%rsp)
  222e28:	0f b6 84 24 8d 00 00 	movzbl 0x8d(%rsp),%eax
  222e2f:	00 
  222e30:	a8 01                	test   $0x1,%al
  222e32:	0f 84 46 ff ff ff    	je     222d7e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x55e>
  222e38:	eb 00                	jmp    222e3a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x61a>
  222e3a:	eb 02                	jmp    222e3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x61e>
  222e3c:	0f 0b                	ud2    
  222e3e:	e8 4d 77 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222e43:	24 01                	and    $0x1,%al
  222e45:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222e49:	e9 98 fa ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222e4e:	8a 44 24 55          	mov    0x55(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222e52:	a8 01                	test   $0x1,%al
  222e54:	75 15                	jne    222e6b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x64b>
  222e56:	eb 00                	jmp    222e58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x638>
  222e58:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222e5d:	e8 ae 17 00 00       	callq  224610 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E>
  222e62:	88 44 24 52          	mov    %al,0x52(%rsp)
  222e66:	e9 bd 00 00 00       	jmpq   222f28 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x708>
                        if !first {
  222e6b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222e6f:	34 ff                	xor    $0xff,%al
  222e71:	a8 01                	test   $0x1,%al
  222e73:	75 21                	jne    222e96 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x676>
  222e75:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222e7a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222e7f:	48 8d 35 9c fc fd ff 	lea    -0x20364(%rip),%rsi        # 202b22 <str.0+0x202>
  222e86:	ba 03 00 00 00       	mov    $0x3,%edx
  222e8b:	e8 90 28 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222e90:	88 44 24 51          	mov    %al,0x51(%rsp)
  222e94:	eb 54                	jmp    222eea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6ca>
  222e96:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222e9b:	48 8d 35 f4 fb fd ff 	lea    -0x2040c(%rip),%rsi        # 202a96 <str.0+0x176>
  222ea2:	ba 03 00 00 00       	mov    $0x3,%edx
  222ea7:	e8 74 28 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222eac:	88 44 24 50          	mov    %al,0x50(%rsp)
  222eb0:	8a 44 24 50          	mov    0x50(%rsp),%al
  222eb4:	0f b6 f8             	movzbl %al,%edi
  222eb7:	83 e7 01             	and    $0x1,%edi
  222eba:	e8 91 85 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222ebf:	24 01                	and    $0x1,%al
  222ec1:	88 84 24 8e 00 00 00 	mov    %al,0x8e(%rsp)
  222ec8:	0f b6 84 24 8e 00 00 	movzbl 0x8e(%rsp),%eax
  222ecf:	00 
  222ed0:	a8 01                	test   $0x1,%al
  222ed2:	74 a1                	je     222e75 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x655>
  222ed4:	eb 00                	jmp    222ed6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6b6>
  222ed6:	eb 02                	jmp    222eda <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6ba>
  222ed8:	0f 0b                	ud2    
  222eda:	e8 b1 76 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222edf:	24 01                	and    $0x1,%al
  222ee1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222ee5:	e9 fc f9 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222eea:	8a 44 24 51          	mov    0x51(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222eee:	0f b6 f8             	movzbl %al,%edi
  222ef1:	83 e7 01             	and    $0x1,%edi
  222ef4:	e8 57 85 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222ef9:	24 01                	and    $0x1,%al
  222efb:	88 84 24 8f 00 00 00 	mov    %al,0x8f(%rsp)
  222f02:	0f b6 84 24 8f 00 00 	movzbl 0x8f(%rsp),%eax
  222f09:	00 
  222f0a:	a8 01                	test   $0x1,%al
  222f0c:	0f 84 46 ff ff ff    	je     222e58 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x638>
  222f12:	eb 00                	jmp    222f14 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6f4>
  222f14:	eb 02                	jmp    222f18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x6f8>
  222f16:	0f 0b                	ud2    
  222f18:	e8 73 76 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222f1d:	24 01                	and    $0x1,%al
  222f1f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222f23:	e9 be f9 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222f28:	8a 44 24 52          	mov    0x52(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  222f2c:	a8 01                	test   $0x1,%al
  222f2e:	75 15                	jne    222f45 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x725>
  222f30:	eb 00                	jmp    222f32 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x712>
  222f32:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  222f37:	e8 24 17 00 00       	callq  224660 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E>
  222f3c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  222f40:	e9 bd 00 00 00       	jmpq   223002 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7e2>
                        if !first {
  222f45:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  222f49:	34 ff                	xor    $0xff,%al
  222f4b:	a8 01                	test   $0x1,%al
  222f4d:	75 21                	jne    222f70 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x750>
  222f4f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  222f54:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  222f59:	48 8d 35 c5 fb fd ff 	lea    -0x2043b(%rip),%rsi        # 202b25 <str.0+0x205>
  222f60:	ba 03 00 00 00       	mov    $0x3,%edx
  222f65:	e8 b6 27 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222f6a:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  222f6e:	eb 54                	jmp    222fc4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7a4>
  222f70:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  222f75:	48 8d 35 1a fb fd ff 	lea    -0x204e6(%rip),%rsi        # 202a96 <str.0+0x176>
  222f7c:	ba 03 00 00 00       	mov    $0x3,%edx
  222f81:	e8 9a 27 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  222f86:	88 44 24 4d          	mov    %al,0x4d(%rsp)
  222f8a:	8a 44 24 4d          	mov    0x4d(%rsp),%al
  222f8e:	0f b6 f8             	movzbl %al,%edi
  222f91:	83 e7 01             	and    $0x1,%edi
  222f94:	e8 b7 84 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222f99:	24 01                	and    $0x1,%al
  222f9b:	88 84 24 90 00 00 00 	mov    %al,0x90(%rsp)
  222fa2:	0f b6 84 24 90 00 00 	movzbl 0x90(%rsp),%eax
  222fa9:	00 
  222faa:	a8 01                	test   $0x1,%al
  222fac:	74 a1                	je     222f4f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x72f>
  222fae:	eb 00                	jmp    222fb0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x790>
  222fb0:	eb 02                	jmp    222fb4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x794>
  222fb2:	0f 0b                	ud2    
  222fb4:	e8 d7 75 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222fb9:	24 01                	and    $0x1,%al
  222fbb:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222fbf:	e9 22 f9 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  222fc4:	8a 44 24 4e          	mov    0x4e(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  222fc8:	0f b6 f8             	movzbl %al,%edi
  222fcb:	83 e7 01             	and    $0x1,%edi
  222fce:	e8 7d 84 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  222fd3:	24 01                	and    $0x1,%al
  222fd5:	88 84 24 91 00 00 00 	mov    %al,0x91(%rsp)
  222fdc:	0f b6 84 24 91 00 00 	movzbl 0x91(%rsp),%eax
  222fe3:	00 
  222fe4:	a8 01                	test   $0x1,%al
  222fe6:	0f 84 46 ff ff ff    	je     222f32 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x712>
  222fec:	eb 00                	jmp    222fee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ce>
  222fee:	eb 02                	jmp    222ff2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7d2>
  222ff0:	0f 0b                	ud2    
  222ff2:	e8 99 75 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  222ff7:	24 01                	and    $0x1,%al
  222ff9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  222ffd:	e9 e4 f8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223002:	8a 44 24 4f          	mov    0x4f(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223006:	a8 01                	test   $0x1,%al
  223008:	75 15                	jne    22301f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ff>
  22300a:	eb 00                	jmp    22300c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ec>
  22300c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223011:	e8 9a 16 00 00       	callq  2246b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE>
  223016:	88 44 24 4c          	mov    %al,0x4c(%rsp)
  22301a:	e9 bd 00 00 00       	jmpq   2230dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8bc>
                        if !first {
  22301f:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223023:	34 ff                	xor    $0xff,%al
  223025:	a8 01                	test   $0x1,%al
  223027:	75 21                	jne    22304a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x82a>
  223029:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22302e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223033:	48 8d 35 f6 d8 fd ff 	lea    -0x2270a(%rip),%rsi        # 200930 <str.2+0xf0>
  22303a:	ba 04 00 00 00       	mov    $0x4,%edx
  22303f:	e8 dc 26 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223044:	88 44 24 4b          	mov    %al,0x4b(%rsp)
  223048:	eb 54                	jmp    22309e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x87e>
  22304a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22304f:	48 8d 35 40 fa fd ff 	lea    -0x205c0(%rip),%rsi        # 202a96 <str.0+0x176>
  223056:	ba 03 00 00 00       	mov    $0x3,%edx
  22305b:	e8 c0 26 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223060:	88 44 24 4a          	mov    %al,0x4a(%rsp)
  223064:	8a 44 24 4a          	mov    0x4a(%rsp),%al
  223068:	0f b6 f8             	movzbl %al,%edi
  22306b:	83 e7 01             	and    $0x1,%edi
  22306e:	e8 dd 83 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223073:	24 01                	and    $0x1,%al
  223075:	88 84 24 92 00 00 00 	mov    %al,0x92(%rsp)
  22307c:	0f b6 84 24 92 00 00 	movzbl 0x92(%rsp),%eax
  223083:	00 
  223084:	a8 01                	test   $0x1,%al
  223086:	74 a1                	je     223029 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x809>
  223088:	eb 00                	jmp    22308a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x86a>
  22308a:	eb 02                	jmp    22308e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x86e>
  22308c:	0f 0b                	ud2    
  22308e:	e8 fd 74 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223093:	24 01                	and    $0x1,%al
  223095:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223099:	e9 48 f8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22309e:	8a 44 24 4b          	mov    0x4b(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2230a2:	0f b6 f8             	movzbl %al,%edi
  2230a5:	83 e7 01             	and    $0x1,%edi
  2230a8:	e8 a3 83 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2230ad:	24 01                	and    $0x1,%al
  2230af:	88 84 24 93 00 00 00 	mov    %al,0x93(%rsp)
  2230b6:	0f b6 84 24 93 00 00 	movzbl 0x93(%rsp),%eax
  2230bd:	00 
  2230be:	a8 01                	test   $0x1,%al
  2230c0:	0f 84 46 ff ff ff    	je     22300c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x7ec>
  2230c6:	eb 00                	jmp    2230c8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8a8>
  2230c8:	eb 02                	jmp    2230cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8ac>
  2230ca:	0f 0b                	ud2    
  2230cc:	e8 bf 74 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2230d1:	24 01                	and    $0x1,%al
  2230d3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2230d7:	e9 0a f8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2230dc:	8a 44 24 4c          	mov    0x4c(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2230e0:	a8 01                	test   $0x1,%al
  2230e2:	75 15                	jne    2230f9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8d9>
  2230e4:	eb 00                	jmp    2230e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8c6>
  2230e6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  2230eb:	e8 10 16 00 00       	callq  224700 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E>
  2230f0:	88 44 24 49          	mov    %al,0x49(%rsp)
  2230f4:	e9 bd 00 00 00       	jmpq   2231b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x996>
                        if !first {
  2230f9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2230fd:	34 ff                	xor    $0xff,%al
  2230ff:	a8 01                	test   $0x1,%al
  223101:	75 21                	jne    223124 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x904>
  223103:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223108:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22310d:	48 8d 35 14 fa fd ff 	lea    -0x205ec(%rip),%rsi        # 202b28 <str.0+0x208>
  223114:	ba 03 00 00 00       	mov    $0x3,%edx
  223119:	e8 02 26 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22311e:	88 44 24 48          	mov    %al,0x48(%rsp)
  223122:	eb 54                	jmp    223178 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x958>
  223124:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223129:	48 8d 35 66 f9 fd ff 	lea    -0x2069a(%rip),%rsi        # 202a96 <str.0+0x176>
  223130:	ba 03 00 00 00       	mov    $0x3,%edx
  223135:	e8 e6 25 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22313a:	88 44 24 47          	mov    %al,0x47(%rsp)
  22313e:	8a 44 24 47          	mov    0x47(%rsp),%al
  223142:	0f b6 f8             	movzbl %al,%edi
  223145:	83 e7 01             	and    $0x1,%edi
  223148:	e8 03 83 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22314d:	24 01                	and    $0x1,%al
  22314f:	88 84 24 94 00 00 00 	mov    %al,0x94(%rsp)
  223156:	0f b6 84 24 94 00 00 	movzbl 0x94(%rsp),%eax
  22315d:	00 
  22315e:	a8 01                	test   $0x1,%al
  223160:	74 a1                	je     223103 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8e3>
  223162:	eb 00                	jmp    223164 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x944>
  223164:	eb 02                	jmp    223168 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x948>
  223166:	0f 0b                	ud2    
  223168:	e8 23 74 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22316d:	24 01                	and    $0x1,%al
  22316f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223173:	e9 6e f7 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223178:	8a 44 24 48          	mov    0x48(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22317c:	0f b6 f8             	movzbl %al,%edi
  22317f:	83 e7 01             	and    $0x1,%edi
  223182:	e8 c9 82 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223187:	24 01                	and    $0x1,%al
  223189:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  223190:	0f b6 84 24 95 00 00 	movzbl 0x95(%rsp),%eax
  223197:	00 
  223198:	a8 01                	test   $0x1,%al
  22319a:	0f 84 46 ff ff ff    	je     2230e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x8c6>
  2231a0:	eb 00                	jmp    2231a2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x982>
  2231a2:	eb 02                	jmp    2231a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x986>
  2231a4:	0f 0b                	ud2    
  2231a6:	e8 e5 73 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2231ab:	24 01                	and    $0x1,%al
  2231ad:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2231b1:	e9 30 f7 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2231b6:	8a 44 24 49          	mov    0x49(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2231ba:	a8 01                	test   $0x1,%al
  2231bc:	75 15                	jne    2231d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9b3>
  2231be:	eb 00                	jmp    2231c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9a0>
  2231c0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  2231c5:	e8 86 15 00 00       	callq  224750 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E>
  2231ca:	88 44 24 46          	mov    %al,0x46(%rsp)
  2231ce:	e9 bd 00 00 00       	jmpq   223290 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa70>
                        if !first {
  2231d3:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2231d7:	34 ff                	xor    $0xff,%al
  2231d9:	a8 01                	test   $0x1,%al
  2231db:	75 21                	jne    2231fe <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9de>
  2231dd:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2231e2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2231e7:	48 8d 35 82 d7 fd ff 	lea    -0x2287e(%rip),%rsi        # 200970 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x38>
  2231ee:	ba 04 00 00 00       	mov    $0x4,%edx
  2231f3:	e8 28 25 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2231f8:	88 44 24 45          	mov    %al,0x45(%rsp)
  2231fc:	eb 54                	jmp    223252 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa32>
  2231fe:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223203:	48 8d 35 8c f8 fd ff 	lea    -0x20774(%rip),%rsi        # 202a96 <str.0+0x176>
  22320a:	ba 03 00 00 00       	mov    $0x3,%edx
  22320f:	e8 0c 25 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223214:	88 44 24 44          	mov    %al,0x44(%rsp)
  223218:	8a 44 24 44          	mov    0x44(%rsp),%al
  22321c:	0f b6 f8             	movzbl %al,%edi
  22321f:	83 e7 01             	and    $0x1,%edi
  223222:	e8 29 82 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223227:	24 01                	and    $0x1,%al
  223229:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  223230:	0f b6 84 24 96 00 00 	movzbl 0x96(%rsp),%eax
  223237:	00 
  223238:	a8 01                	test   $0x1,%al
  22323a:	74 a1                	je     2231dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9bd>
  22323c:	eb 00                	jmp    22323e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa1e>
  22323e:	eb 02                	jmp    223242 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa22>
  223240:	0f 0b                	ud2    
  223242:	e8 49 73 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223247:	24 01                	and    $0x1,%al
  223249:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22324d:	e9 94 f6 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223252:	8a 44 24 45          	mov    0x45(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223256:	0f b6 f8             	movzbl %al,%edi
  223259:	83 e7 01             	and    $0x1,%edi
  22325c:	e8 ef 81 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223261:	24 01                	and    $0x1,%al
  223263:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  22326a:	0f b6 84 24 97 00 00 	movzbl 0x97(%rsp),%eax
  223271:	00 
  223272:	a8 01                	test   $0x1,%al
  223274:	0f 84 46 ff ff ff    	je     2231c0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x9a0>
  22327a:	eb 00                	jmp    22327c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa5c>
  22327c:	eb 02                	jmp    223280 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa60>
  22327e:	0f 0b                	ud2    
  223280:	e8 0b 73 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223285:	24 01                	and    $0x1,%al
  223287:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22328b:	e9 56 f6 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223290:	8a 44 24 46          	mov    0x46(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223294:	a8 01                	test   $0x1,%al
  223296:	75 15                	jne    2232ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa8d>
  223298:	eb 00                	jmp    22329a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa7a>
  22329a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22329f:	e8 fc 14 00 00       	callq  2247a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E>
  2232a4:	88 44 24 43          	mov    %al,0x43(%rsp)
  2232a8:	e9 bd 00 00 00       	jmpq   22336a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb4a>
                        if !first {
  2232ad:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2232b1:	34 ff                	xor    $0xff,%al
  2232b3:	a8 01                	test   $0x1,%al
  2232b5:	75 21                	jne    2232d8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xab8>
  2232b7:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2232bc:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2232c1:	48 8d 35 63 f8 fd ff 	lea    -0x2079d(%rip),%rsi        # 202b2b <str.0+0x20b>
  2232c8:	ba 03 00 00 00       	mov    $0x3,%edx
  2232cd:	e8 4e 24 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2232d2:	88 44 24 42          	mov    %al,0x42(%rsp)
  2232d6:	eb 54                	jmp    22332c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb0c>
  2232d8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2232dd:	48 8d 35 b2 f7 fd ff 	lea    -0x2084e(%rip),%rsi        # 202a96 <str.0+0x176>
  2232e4:	ba 03 00 00 00       	mov    $0x3,%edx
  2232e9:	e8 32 24 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2232ee:	88 44 24 41          	mov    %al,0x41(%rsp)
  2232f2:	8a 44 24 41          	mov    0x41(%rsp),%al
  2232f6:	0f b6 f8             	movzbl %al,%edi
  2232f9:	83 e7 01             	and    $0x1,%edi
  2232fc:	e8 4f 81 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223301:	24 01                	and    $0x1,%al
  223303:	88 84 24 98 00 00 00 	mov    %al,0x98(%rsp)
  22330a:	0f b6 84 24 98 00 00 	movzbl 0x98(%rsp),%eax
  223311:	00 
  223312:	a8 01                	test   $0x1,%al
  223314:	74 a1                	je     2232b7 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa97>
  223316:	eb 00                	jmp    223318 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xaf8>
  223318:	eb 02                	jmp    22331c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xafc>
  22331a:	0f 0b                	ud2    
  22331c:	e8 6f 72 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223321:	24 01                	and    $0x1,%al
  223323:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223327:	e9 ba f5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22332c:	8a 44 24 42          	mov    0x42(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223330:	0f b6 f8             	movzbl %al,%edi
  223333:	83 e7 01             	and    $0x1,%edi
  223336:	e8 15 81 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22333b:	24 01                	and    $0x1,%al
  22333d:	88 84 24 99 00 00 00 	mov    %al,0x99(%rsp)
  223344:	0f b6 84 24 99 00 00 	movzbl 0x99(%rsp),%eax
  22334b:	00 
  22334c:	a8 01                	test   $0x1,%al
  22334e:	0f 84 46 ff ff ff    	je     22329a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xa7a>
  223354:	eb 00                	jmp    223356 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb36>
  223356:	eb 02                	jmp    22335a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb3a>
  223358:	0f 0b                	ud2    
  22335a:	e8 31 72 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22335f:	24 01                	and    $0x1,%al
  223361:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223365:	e9 7c f5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22336a:	8a 44 24 43          	mov    0x43(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22336e:	a8 01                	test   $0x1,%al
  223370:	75 15                	jne    223387 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb67>
  223372:	eb 00                	jmp    223374 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb54>
  223374:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223379:	e8 72 14 00 00       	callq  2247f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE>
  22337e:	88 44 24 40          	mov    %al,0x40(%rsp)
  223382:	e9 bd 00 00 00       	jmpq   223444 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc24>
                        if !first {
  223387:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22338b:	34 ff                	xor    $0xff,%al
  22338d:	a8 01                	test   $0x1,%al
  22338f:	75 21                	jne    2233b2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb92>
  223391:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223396:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22339b:	48 8d 35 8c f7 fd ff 	lea    -0x20874(%rip),%rsi        # 202b2e <str.0+0x20e>
  2233a2:	ba 03 00 00 00       	mov    $0x3,%edx
  2233a7:	e8 74 23 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2233ac:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  2233b0:	eb 54                	jmp    223406 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbe6>
  2233b2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2233b7:	48 8d 35 d8 f6 fd ff 	lea    -0x20928(%rip),%rsi        # 202a96 <str.0+0x176>
  2233be:	ba 03 00 00 00       	mov    $0x3,%edx
  2233c3:	e8 58 23 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2233c8:	88 44 24 3e          	mov    %al,0x3e(%rsp)
  2233cc:	8a 44 24 3e          	mov    0x3e(%rsp),%al
  2233d0:	0f b6 f8             	movzbl %al,%edi
  2233d3:	83 e7 01             	and    $0x1,%edi
  2233d6:	e8 75 80 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2233db:	24 01                	and    $0x1,%al
  2233dd:	88 84 24 9a 00 00 00 	mov    %al,0x9a(%rsp)
  2233e4:	0f b6 84 24 9a 00 00 	movzbl 0x9a(%rsp),%eax
  2233eb:	00 
  2233ec:	a8 01                	test   $0x1,%al
  2233ee:	74 a1                	je     223391 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb71>
  2233f0:	eb 00                	jmp    2233f2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbd2>
  2233f2:	eb 02                	jmp    2233f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xbd6>
  2233f4:	0f 0b                	ud2    
  2233f6:	e8 95 71 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2233fb:	24 01                	and    $0x1,%al
  2233fd:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223401:	e9 e0 f4 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223406:	8a 44 24 3f          	mov    0x3f(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22340a:	0f b6 f8             	movzbl %al,%edi
  22340d:	83 e7 01             	and    $0x1,%edi
  223410:	e8 3b 80 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223415:	24 01                	and    $0x1,%al
  223417:	88 84 24 9b 00 00 00 	mov    %al,0x9b(%rsp)
  22341e:	0f b6 84 24 9b 00 00 	movzbl 0x9b(%rsp),%eax
  223425:	00 
  223426:	a8 01                	test   $0x1,%al
  223428:	0f 84 46 ff ff ff    	je     223374 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xb54>
  22342e:	eb 00                	jmp    223430 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc10>
  223430:	eb 02                	jmp    223434 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc14>
  223432:	0f 0b                	ud2    
  223434:	e8 57 71 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223439:	24 01                	and    $0x1,%al
  22343b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22343f:	e9 a2 f4 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223444:	8a 44 24 40          	mov    0x40(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223448:	a8 01                	test   $0x1,%al
  22344a:	75 15                	jne    223461 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc41>
  22344c:	eb 00                	jmp    22344e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc2e>
  22344e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223453:	e8 e8 13 00 00       	callq  224840 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E>
  223458:	88 44 24 3d          	mov    %al,0x3d(%rsp)
  22345c:	e9 bd 00 00 00       	jmpq   22351e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcfe>
                        if !first {
  223461:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223465:	34 ff                	xor    $0xff,%al
  223467:	a8 01                	test   $0x1,%al
  223469:	75 21                	jne    22348c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6c>
  22346b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223470:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223475:	48 8d 35 98 d4 fd ff 	lea    -0x22b68(%rip),%rsi        # 200914 <str.2+0xd4>
  22347c:	ba 04 00 00 00       	mov    $0x4,%edx
  223481:	e8 9a 22 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223486:	88 44 24 3c          	mov    %al,0x3c(%rsp)
  22348a:	eb 54                	jmp    2234e0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcc0>
  22348c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223491:	48 8d 35 fe f5 fd ff 	lea    -0x20a02(%rip),%rsi        # 202a96 <str.0+0x176>
  223498:	ba 03 00 00 00       	mov    $0x3,%edx
  22349d:	e8 7e 22 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2234a2:	88 44 24 3b          	mov    %al,0x3b(%rsp)
  2234a6:	8a 44 24 3b          	mov    0x3b(%rsp),%al
  2234aa:	0f b6 f8             	movzbl %al,%edi
  2234ad:	83 e7 01             	and    $0x1,%edi
  2234b0:	e8 9b 7f fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2234b5:	24 01                	and    $0x1,%al
  2234b7:	88 84 24 9c 00 00 00 	mov    %al,0x9c(%rsp)
  2234be:	0f b6 84 24 9c 00 00 	movzbl 0x9c(%rsp),%eax
  2234c5:	00 
  2234c6:	a8 01                	test   $0x1,%al
  2234c8:	74 a1                	je     22346b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc4b>
  2234ca:	eb 00                	jmp    2234cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcac>
  2234cc:	eb 02                	jmp    2234d0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcb0>
  2234ce:	0f 0b                	ud2    
  2234d0:	e8 bb 70 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2234d5:	24 01                	and    $0x1,%al
  2234d7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2234db:	e9 06 f4 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2234e0:	8a 44 24 3c          	mov    0x3c(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2234e4:	0f b6 f8             	movzbl %al,%edi
  2234e7:	83 e7 01             	and    $0x1,%edi
  2234ea:	e8 61 7f fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2234ef:	24 01                	and    $0x1,%al
  2234f1:	88 84 24 9d 00 00 00 	mov    %al,0x9d(%rsp)
  2234f8:	0f b6 84 24 9d 00 00 	movzbl 0x9d(%rsp),%eax
  2234ff:	00 
  223500:	a8 01                	test   $0x1,%al
  223502:	0f 84 46 ff ff ff    	je     22344e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc2e>
  223508:	eb 00                	jmp    22350a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcea>
  22350a:	eb 02                	jmp    22350e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xcee>
  22350c:	0f 0b                	ud2    
  22350e:	e8 7d 70 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223513:	24 01                	and    $0x1,%al
  223515:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223519:	e9 c8 f3 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22351e:	8a 44 24 3d          	mov    0x3d(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223522:	a8 01                	test   $0x1,%al
  223524:	75 15                	jne    22353b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd1b>
  223526:	eb 00                	jmp    223528 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd08>
  223528:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22352d:	e8 5e 13 00 00       	callq  224890 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E>
  223532:	88 44 24 3a          	mov    %al,0x3a(%rsp)
  223536:	e9 bd 00 00 00       	jmpq   2235f8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdd8>
                        if !first {
  22353b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22353f:	34 ff                	xor    $0xff,%al
  223541:	a8 01                	test   $0x1,%al
  223543:	75 21                	jne    223566 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd46>
  223545:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22354a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  22354f:	48 8d 35 db f5 fd ff 	lea    -0x20a25(%rip),%rsi        # 202b31 <str.0+0x211>
  223556:	ba 03 00 00 00       	mov    $0x3,%edx
  22355b:	e8 c0 21 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223560:	88 44 24 39          	mov    %al,0x39(%rsp)
  223564:	eb 54                	jmp    2235ba <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd9a>
  223566:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22356b:	48 8d 35 24 f5 fd ff 	lea    -0x20adc(%rip),%rsi        # 202a96 <str.0+0x176>
  223572:	ba 03 00 00 00       	mov    $0x3,%edx
  223577:	e8 a4 21 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22357c:	88 44 24 38          	mov    %al,0x38(%rsp)
  223580:	8a 44 24 38          	mov    0x38(%rsp),%al
  223584:	0f b6 f8             	movzbl %al,%edi
  223587:	83 e7 01             	and    $0x1,%edi
  22358a:	e8 c1 7e fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22358f:	24 01                	and    $0x1,%al
  223591:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  223598:	0f b6 84 24 9e 00 00 	movzbl 0x9e(%rsp),%eax
  22359f:	00 
  2235a0:	a8 01                	test   $0x1,%al
  2235a2:	74 a1                	je     223545 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd25>
  2235a4:	eb 00                	jmp    2235a6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd86>
  2235a6:	eb 02                	jmp    2235aa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd8a>
  2235a8:	0f 0b                	ud2    
  2235aa:	e8 e1 6f fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2235af:	24 01                	and    $0x1,%al
  2235b1:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2235b5:	e9 2c f3 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2235ba:	8a 44 24 39          	mov    0x39(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2235be:	0f b6 f8             	movzbl %al,%edi
  2235c1:	83 e7 01             	and    $0x1,%edi
  2235c4:	e8 87 7e fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2235c9:	24 01                	and    $0x1,%al
  2235cb:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  2235d2:	0f b6 84 24 9f 00 00 	movzbl 0x9f(%rsp),%eax
  2235d9:	00 
  2235da:	a8 01                	test   $0x1,%al
  2235dc:	0f 84 46 ff ff ff    	je     223528 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xd08>
  2235e2:	eb 00                	jmp    2235e4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdc4>
  2235e4:	eb 02                	jmp    2235e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdc8>
  2235e6:	0f 0b                	ud2    
  2235e8:	e8 a3 6f fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2235ed:	24 01                	and    $0x1,%al
  2235ef:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2235f3:	e9 ee f2 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2235f8:	8a 44 24 3a          	mov    0x3a(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2235fc:	a8 01                	test   $0x1,%al
  2235fe:	75 15                	jne    223615 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdf5>
  223600:	eb 00                	jmp    223602 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xde2>
  223602:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223607:	e8 d4 12 00 00       	callq  2248e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E>
  22360c:	88 44 24 37          	mov    %al,0x37(%rsp)
  223610:	e9 bd 00 00 00       	jmpq   2236d2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xeb2>
                        if !first {
  223615:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223619:	34 ff                	xor    $0xff,%al
  22361b:	a8 01                	test   $0x1,%al
  22361d:	75 21                	jne    223640 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe20>
  22361f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223624:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223629:	48 8d 35 04 f5 fd ff 	lea    -0x20afc(%rip),%rsi        # 202b34 <str.0+0x214>
  223630:	ba 05 00 00 00       	mov    $0x5,%edx
  223635:	e8 e6 20 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22363a:	88 44 24 36          	mov    %al,0x36(%rsp)
  22363e:	eb 54                	jmp    223694 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe74>
  223640:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223645:	48 8d 35 4a f4 fd ff 	lea    -0x20bb6(%rip),%rsi        # 202a96 <str.0+0x176>
  22364c:	ba 03 00 00 00       	mov    $0x3,%edx
  223651:	e8 ca 20 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223656:	88 44 24 35          	mov    %al,0x35(%rsp)
  22365a:	8a 44 24 35          	mov    0x35(%rsp),%al
  22365e:	0f b6 f8             	movzbl %al,%edi
  223661:	83 e7 01             	and    $0x1,%edi
  223664:	e8 e7 7d fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223669:	24 01                	and    $0x1,%al
  22366b:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  223672:	0f b6 84 24 a0 00 00 	movzbl 0xa0(%rsp),%eax
  223679:	00 
  22367a:	a8 01                	test   $0x1,%al
  22367c:	74 a1                	je     22361f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xdff>
  22367e:	eb 00                	jmp    223680 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe60>
  223680:	eb 02                	jmp    223684 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe64>
  223682:	0f 0b                	ud2    
  223684:	e8 07 6f fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223689:	24 01                	and    $0x1,%al
  22368b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22368f:	e9 52 f2 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223694:	8a 44 24 36          	mov    0x36(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223698:	0f b6 f8             	movzbl %al,%edi
  22369b:	83 e7 01             	and    $0x1,%edi
  22369e:	e8 ad 7d fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2236a3:	24 01                	and    $0x1,%al
  2236a5:	88 84 24 a1 00 00 00 	mov    %al,0xa1(%rsp)
  2236ac:	0f b6 84 24 a1 00 00 	movzbl 0xa1(%rsp),%eax
  2236b3:	00 
  2236b4:	a8 01                	test   $0x1,%al
  2236b6:	0f 84 46 ff ff ff    	je     223602 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xde2>
  2236bc:	eb 00                	jmp    2236be <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xe9e>
  2236be:	eb 02                	jmp    2236c2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xea2>
  2236c0:	0f 0b                	ud2    
  2236c2:	e8 c9 6e fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2236c7:	24 01                	and    $0x1,%al
  2236c9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2236cd:	e9 14 f2 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2236d2:	8a 44 24 37          	mov    0x37(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2236d6:	a8 01                	test   $0x1,%al
  2236d8:	75 15                	jne    2236ef <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xecf>
  2236da:	eb 00                	jmp    2236dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xebc>
  2236dc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  2236e1:	e8 4a 12 00 00       	callq  224930 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE>
  2236e6:	88 44 24 34          	mov    %al,0x34(%rsp)
  2236ea:	e9 bd 00 00 00       	jmpq   2237ac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf8c>
                        if !first {
  2236ef:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2236f3:	34 ff                	xor    $0xff,%al
  2236f5:	a8 01                	test   $0x1,%al
  2236f7:	75 21                	jne    22371a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xefa>
  2236f9:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2236fe:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223703:	48 8d 35 2f f4 fd ff 	lea    -0x20bd1(%rip),%rsi        # 202b39 <str.0+0x219>
  22370a:	ba 03 00 00 00       	mov    $0x3,%edx
  22370f:	e8 0c 20 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223714:	88 44 24 33          	mov    %al,0x33(%rsp)
  223718:	eb 54                	jmp    22376e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf4e>
  22371a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22371f:	48 8d 35 70 f3 fd ff 	lea    -0x20c90(%rip),%rsi        # 202a96 <str.0+0x176>
  223726:	ba 03 00 00 00       	mov    $0x3,%edx
  22372b:	e8 f0 1f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223730:	88 44 24 32          	mov    %al,0x32(%rsp)
  223734:	8a 44 24 32          	mov    0x32(%rsp),%al
  223738:	0f b6 f8             	movzbl %al,%edi
  22373b:	83 e7 01             	and    $0x1,%edi
  22373e:	e8 0d 7d fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223743:	24 01                	and    $0x1,%al
  223745:	88 84 24 a2 00 00 00 	mov    %al,0xa2(%rsp)
  22374c:	0f b6 84 24 a2 00 00 	movzbl 0xa2(%rsp),%eax
  223753:	00 
  223754:	a8 01                	test   $0x1,%al
  223756:	74 a1                	je     2236f9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xed9>
  223758:	eb 00                	jmp    22375a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf3a>
  22375a:	eb 02                	jmp    22375e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf3e>
  22375c:	0f 0b                	ud2    
  22375e:	e8 2d 6e fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223763:	24 01                	and    $0x1,%al
  223765:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223769:	e9 78 f1 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22376e:	8a 44 24 33          	mov    0x33(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223772:	0f b6 f8             	movzbl %al,%edi
  223775:	83 e7 01             	and    $0x1,%edi
  223778:	e8 d3 7c fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22377d:	24 01                	and    $0x1,%al
  22377f:	88 84 24 a3 00 00 00 	mov    %al,0xa3(%rsp)
  223786:	0f b6 84 24 a3 00 00 	movzbl 0xa3(%rsp),%eax
  22378d:	00 
  22378e:	a8 01                	test   $0x1,%al
  223790:	0f 84 46 ff ff ff    	je     2236dc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xebc>
  223796:	eb 00                	jmp    223798 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf78>
  223798:	eb 02                	jmp    22379c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf7c>
  22379a:	0f 0b                	ud2    
  22379c:	e8 ef 6d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2237a1:	24 01                	and    $0x1,%al
  2237a3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2237a7:	e9 3a f1 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2237ac:	8a 44 24 34          	mov    0x34(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  2237b0:	a8 01                	test   $0x1,%al
  2237b2:	75 15                	jne    2237c9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfa9>
  2237b4:	eb 00                	jmp    2237b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf96>
  2237b6:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  2237bb:	e8 c0 11 00 00       	callq  224980 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E>
  2237c0:	88 44 24 31          	mov    %al,0x31(%rsp)
  2237c4:	e9 bd 00 00 00       	jmpq   223886 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1066>
                        if !first {
  2237c9:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2237cd:	34 ff                	xor    $0xff,%al
  2237cf:	a8 01                	test   $0x1,%al
  2237d1:	75 21                	jne    2237f4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfd4>
  2237d3:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2237d8:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2237dd:	48 8d 35 58 f3 fd ff 	lea    -0x20ca8(%rip),%rsi        # 202b3c <str.0+0x21c>
  2237e4:	ba 03 00 00 00       	mov    $0x3,%edx
  2237e9:	e8 32 1f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2237ee:	88 44 24 30          	mov    %al,0x30(%rsp)
  2237f2:	eb 54                	jmp    223848 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1028>
  2237f4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2237f9:	48 8d 35 96 f2 fd ff 	lea    -0x20d6a(%rip),%rsi        # 202a96 <str.0+0x176>
  223800:	ba 03 00 00 00       	mov    $0x3,%edx
  223805:	e8 16 1f 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22380a:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22380e:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  223812:	0f b6 f8             	movzbl %al,%edi
  223815:	83 e7 01             	and    $0x1,%edi
  223818:	e8 33 7c fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22381d:	24 01                	and    $0x1,%al
  22381f:	88 84 24 a4 00 00 00 	mov    %al,0xa4(%rsp)
  223826:	0f b6 84 24 a4 00 00 	movzbl 0xa4(%rsp),%eax
  22382d:	00 
  22382e:	a8 01                	test   $0x1,%al
  223830:	74 a1                	je     2237d3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xfb3>
  223832:	eb 00                	jmp    223834 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1014>
  223834:	eb 02                	jmp    223838 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1018>
  223836:	0f 0b                	ud2    
  223838:	e8 53 6d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22383d:	24 01                	and    $0x1,%al
  22383f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223843:	e9 9e f0 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223848:	8a 44 24 30          	mov    0x30(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  22384c:	0f b6 f8             	movzbl %al,%edi
  22384f:	83 e7 01             	and    $0x1,%edi
  223852:	e8 f9 7b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223857:	24 01                	and    $0x1,%al
  223859:	88 84 24 a5 00 00 00 	mov    %al,0xa5(%rsp)
  223860:	0f b6 84 24 a5 00 00 	movzbl 0xa5(%rsp),%eax
  223867:	00 
  223868:	a8 01                	test   $0x1,%al
  22386a:	0f 84 46 ff ff ff    	je     2237b6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xf96>
  223870:	eb 00                	jmp    223872 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1052>
  223872:	eb 02                	jmp    223876 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1056>
  223874:	0f 0b                	ud2    
  223876:	e8 15 6d fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22387b:	24 01                	and    $0x1,%al
  22387d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223881:	e9 60 f0 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223886:	8a 44 24 31          	mov    0x31(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22388a:	a8 01                	test   $0x1,%al
  22388c:	75 15                	jne    2238a3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1083>
  22388e:	eb 00                	jmp    223890 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1070>
  223890:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223895:	e8 36 11 00 00       	callq  2249d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE>
  22389a:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22389e:	e9 bd 00 00 00       	jmpq   223960 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1140>
                        if !first {
  2238a3:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  2238a7:	34 ff                	xor    $0xff,%al
  2238a9:	a8 01                	test   $0x1,%al
  2238ab:	75 21                	jne    2238ce <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10ae>
  2238ad:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  2238b2:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  2238b7:	48 8d 35 7e d0 fd ff 	lea    -0x22f82(%rip),%rsi        # 20093c <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x4>
  2238be:	ba 04 00 00 00       	mov    $0x4,%edx
  2238c3:	e8 58 1e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2238c8:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  2238cc:	eb 54                	jmp    223922 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1102>
  2238ce:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2238d3:	48 8d 35 bc f1 fd ff 	lea    -0x20e44(%rip),%rsi        # 202a96 <str.0+0x176>
  2238da:	ba 03 00 00 00       	mov    $0x3,%edx
  2238df:	e8 3c 1e 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2238e4:	88 44 24 2c          	mov    %al,0x2c(%rsp)
  2238e8:	8a 44 24 2c          	mov    0x2c(%rsp),%al
  2238ec:	0f b6 f8             	movzbl %al,%edi
  2238ef:	83 e7 01             	and    $0x1,%edi
  2238f2:	e8 59 7b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2238f7:	24 01                	and    $0x1,%al
  2238f9:	88 84 24 a6 00 00 00 	mov    %al,0xa6(%rsp)
  223900:	0f b6 84 24 a6 00 00 	movzbl 0xa6(%rsp),%eax
  223907:	00 
  223908:	a8 01                	test   $0x1,%al
  22390a:	74 a1                	je     2238ad <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x108d>
  22390c:	eb 00                	jmp    22390e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10ee>
  22390e:	eb 02                	jmp    223912 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x10f2>
  223910:	0f 0b                	ud2    
  223912:	e8 79 6c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223917:	24 01                	and    $0x1,%al
  223919:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22391d:	e9 c4 ef ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223922:	8a 44 24 2d          	mov    0x2d(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223926:	0f b6 f8             	movzbl %al,%edi
  223929:	83 e7 01             	and    $0x1,%edi
  22392c:	e8 1f 7b fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223931:	24 01                	and    $0x1,%al
  223933:	88 84 24 a7 00 00 00 	mov    %al,0xa7(%rsp)
  22393a:	0f b6 84 24 a7 00 00 	movzbl 0xa7(%rsp),%eax
  223941:	00 
  223942:	a8 01                	test   $0x1,%al
  223944:	0f 84 46 ff ff ff    	je     223890 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1070>
  22394a:	eb 00                	jmp    22394c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x112c>
  22394c:	eb 02                	jmp    223950 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1130>
  22394e:	0f 0b                	ud2    
  223950:	e8 3b 6c fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223955:	24 01                	and    $0x1,%al
  223957:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22395b:	e9 86 ef ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223960:	8a 44 24 2e          	mov    0x2e(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223964:	a8 01                	test   $0x1,%al
  223966:	75 15                	jne    22397d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x115d>
  223968:	eb 00                	jmp    22396a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x114a>
  22396a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22396f:	e8 ac 10 00 00       	callq  224a20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E>
  223974:	88 44 24 2b          	mov    %al,0x2b(%rsp)
  223978:	e9 bd 00 00 00       	jmpq   223a3a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x121a>
                        if !first {
  22397d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223981:	34 ff                	xor    $0xff,%al
  223983:	a8 01                	test   $0x1,%al
  223985:	75 21                	jne    2239a8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1188>
  223987:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22398c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223991:	48 8d 35 88 cf fd ff 	lea    -0x23078(%rip),%rsi        # 200920 <str.2+0xe0>
  223998:	ba 04 00 00 00       	mov    $0x4,%edx
  22399d:	e8 7e 1d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2239a2:	88 44 24 2a          	mov    %al,0x2a(%rsp)
  2239a6:	eb 54                	jmp    2239fc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11dc>
  2239a8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  2239ad:	48 8d 35 e2 f0 fd ff 	lea    -0x20f1e(%rip),%rsi        # 202a96 <str.0+0x176>
  2239b4:	ba 03 00 00 00       	mov    $0x3,%edx
  2239b9:	e8 62 1d 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2239be:	88 44 24 29          	mov    %al,0x29(%rsp)
  2239c2:	8a 44 24 29          	mov    0x29(%rsp),%al
  2239c6:	0f b6 f8             	movzbl %al,%edi
  2239c9:	83 e7 01             	and    $0x1,%edi
  2239cc:	e8 7f 7a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2239d1:	24 01                	and    $0x1,%al
  2239d3:	88 84 24 a8 00 00 00 	mov    %al,0xa8(%rsp)
  2239da:	0f b6 84 24 a8 00 00 	movzbl 0xa8(%rsp),%eax
  2239e1:	00 
  2239e2:	a8 01                	test   $0x1,%al
  2239e4:	74 a1                	je     223987 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1167>
  2239e6:	eb 00                	jmp    2239e8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11c8>
  2239e8:	eb 02                	jmp    2239ec <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x11cc>
  2239ea:	0f 0b                	ud2    
  2239ec:	e8 9f 6b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2239f1:	24 01                	and    $0x1,%al
  2239f3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2239f7:	e9 ea ee ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2239fc:	8a 44 24 2a          	mov    0x2a(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223a00:	0f b6 f8             	movzbl %al,%edi
  223a03:	83 e7 01             	and    $0x1,%edi
  223a06:	e8 45 7a fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223a0b:	24 01                	and    $0x1,%al
  223a0d:	88 84 24 a9 00 00 00 	mov    %al,0xa9(%rsp)
  223a14:	0f b6 84 24 a9 00 00 	movzbl 0xa9(%rsp),%eax
  223a1b:	00 
  223a1c:	a8 01                	test   $0x1,%al
  223a1e:	0f 84 46 ff ff ff    	je     22396a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x114a>
  223a24:	eb 00                	jmp    223a26 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1206>
  223a26:	eb 02                	jmp    223a2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x120a>
  223a28:	0f 0b                	ud2    
  223a2a:	e8 61 6b fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223a2f:	24 01                	and    $0x1,%al
  223a31:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223a35:	e9 ac ee ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223a3a:	8a 44 24 2b          	mov    0x2b(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223a3e:	a8 01                	test   $0x1,%al
  223a40:	75 15                	jne    223a57 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1237>
  223a42:	eb 00                	jmp    223a44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1224>
  223a44:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223a49:	e8 22 10 00 00       	callq  224a70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E>
  223a4e:	88 44 24 28          	mov    %al,0x28(%rsp)
  223a52:	e9 bd 00 00 00       	jmpq   223b14 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12f4>
                        if !first {
  223a57:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223a5b:	34 ff                	xor    $0xff,%al
  223a5d:	a8 01                	test   $0x1,%al
  223a5f:	75 21                	jne    223a82 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1262>
  223a61:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223a66:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223a6b:	48 8d 35 cd f0 fd ff 	lea    -0x20f33(%rip),%rsi        # 202b3f <str.0+0x21f>
  223a72:	ba 03 00 00 00       	mov    $0x3,%edx
  223a77:	e8 a4 1c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223a7c:	88 44 24 27          	mov    %al,0x27(%rsp)
  223a80:	eb 54                	jmp    223ad6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12b6>
  223a82:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223a87:	48 8d 35 08 f0 fd ff 	lea    -0x20ff8(%rip),%rsi        # 202a96 <str.0+0x176>
  223a8e:	ba 03 00 00 00       	mov    $0x3,%edx
  223a93:	e8 88 1c 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223a98:	88 44 24 26          	mov    %al,0x26(%rsp)
  223a9c:	8a 44 24 26          	mov    0x26(%rsp),%al
  223aa0:	0f b6 f8             	movzbl %al,%edi
  223aa3:	83 e7 01             	and    $0x1,%edi
  223aa6:	e8 a5 79 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223aab:	24 01                	and    $0x1,%al
  223aad:	88 84 24 aa 00 00 00 	mov    %al,0xaa(%rsp)
  223ab4:	0f b6 84 24 aa 00 00 	movzbl 0xaa(%rsp),%eax
  223abb:	00 
  223abc:	a8 01                	test   $0x1,%al
  223abe:	74 a1                	je     223a61 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1241>
  223ac0:	eb 00                	jmp    223ac2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12a2>
  223ac2:	eb 02                	jmp    223ac6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12a6>
  223ac4:	0f 0b                	ud2    
  223ac6:	e8 c5 6a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223acb:	24 01                	and    $0x1,%al
  223acd:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223ad1:	e9 10 ee ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223ad6:	8a 44 24 27          	mov    0x27(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223ada:	0f b6 f8             	movzbl %al,%edi
  223add:	83 e7 01             	and    $0x1,%edi
  223ae0:	e8 6b 79 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223ae5:	24 01                	and    $0x1,%al
  223ae7:	88 84 24 ab 00 00 00 	mov    %al,0xab(%rsp)
  223aee:	0f b6 84 24 ab 00 00 	movzbl 0xab(%rsp),%eax
  223af5:	00 
  223af6:	a8 01                	test   $0x1,%al
  223af8:	0f 84 46 ff ff ff    	je     223a44 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1224>
  223afe:	eb 00                	jmp    223b00 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12e0>
  223b00:	eb 02                	jmp    223b04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12e4>
  223b02:	0f 0b                	ud2    
  223b04:	e8 87 6a fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223b09:	24 01                	and    $0x1,%al
  223b0b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223b0f:	e9 d2 ed ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223b14:	8a 44 24 28          	mov    0x28(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223b18:	a8 01                	test   $0x1,%al
  223b1a:	75 15                	jne    223b31 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1311>
  223b1c:	eb 00                	jmp    223b1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12fe>
  223b1e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223b23:	e8 98 0f 00 00       	callq  224ac0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE>
  223b28:	88 44 24 25          	mov    %al,0x25(%rsp)
  223b2c:	e9 bd 00 00 00       	jmpq   223bee <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13ce>
                        if !first {
  223b31:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223b35:	34 ff                	xor    $0xff,%al
  223b37:	a8 01                	test   $0x1,%al
  223b39:	75 21                	jne    223b5c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x133c>
  223b3b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223b40:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223b45:	48 8d 35 08 ce fd ff 	lea    -0x231f8(%rip),%rsi        # 200954 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x1c>
  223b4c:	ba 04 00 00 00       	mov    $0x4,%edx
  223b51:	e8 ca 1b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223b56:	88 44 24 24          	mov    %al,0x24(%rsp)
  223b5a:	eb 54                	jmp    223bb0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1390>
  223b5c:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223b61:	48 8d 35 2e ef fd ff 	lea    -0x210d2(%rip),%rsi        # 202a96 <str.0+0x176>
  223b68:	ba 03 00 00 00       	mov    $0x3,%edx
  223b6d:	e8 ae 1b 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223b72:	88 44 24 23          	mov    %al,0x23(%rsp)
  223b76:	8a 44 24 23          	mov    0x23(%rsp),%al
  223b7a:	0f b6 f8             	movzbl %al,%edi
  223b7d:	83 e7 01             	and    $0x1,%edi
  223b80:	e8 cb 78 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223b85:	24 01                	and    $0x1,%al
  223b87:	88 84 24 ac 00 00 00 	mov    %al,0xac(%rsp)
  223b8e:	0f b6 84 24 ac 00 00 	movzbl 0xac(%rsp),%eax
  223b95:	00 
  223b96:	a8 01                	test   $0x1,%al
  223b98:	74 a1                	je     223b3b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x131b>
  223b9a:	eb 00                	jmp    223b9c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x137c>
  223b9c:	eb 02                	jmp    223ba0 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1380>
  223b9e:	0f 0b                	ud2    
  223ba0:	e8 eb 69 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223ba5:	24 01                	and    $0x1,%al
  223ba7:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223bab:	e9 36 ed ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223bb0:	8a 44 24 24          	mov    0x24(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223bb4:	0f b6 f8             	movzbl %al,%edi
  223bb7:	83 e7 01             	and    $0x1,%edi
  223bba:	e8 91 78 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223bbf:	24 01                	and    $0x1,%al
  223bc1:	88 84 24 ad 00 00 00 	mov    %al,0xad(%rsp)
  223bc8:	0f b6 84 24 ad 00 00 	movzbl 0xad(%rsp),%eax
  223bcf:	00 
  223bd0:	a8 01                	test   $0x1,%al
  223bd2:	0f 84 46 ff ff ff    	je     223b1e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x12fe>
  223bd8:	eb 00                	jmp    223bda <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13ba>
  223bda:	eb 02                	jmp    223bde <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13be>
  223bdc:	0f 0b                	ud2    
  223bde:	e8 ad 69 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223be3:	24 01                	and    $0x1,%al
  223be5:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223be9:	e9 f8 ec ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223bee:	8a 44 24 25          	mov    0x25(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223bf2:	a8 01                	test   $0x1,%al
  223bf4:	75 15                	jne    223c0b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13eb>
  223bf6:	eb 00                	jmp    223bf8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13d8>
  223bf8:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223bfd:	e8 0e 0f 00 00       	callq  224b10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE>
  223c02:	88 44 24 22          	mov    %al,0x22(%rsp)
  223c06:	e9 bd 00 00 00       	jmpq   223cc8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14a8>
                        if !first {
  223c0b:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223c0f:	34 ff                	xor    $0xff,%al
  223c11:	a8 01                	test   $0x1,%al
  223c13:	75 21                	jne    223c36 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1416>
  223c15:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223c1a:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223c1f:	48 8d 35 1c ef fd ff 	lea    -0x210e4(%rip),%rsi        # 202b42 <str.0+0x222>
  223c26:	ba 03 00 00 00       	mov    $0x3,%edx
  223c2b:	e8 f0 1a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223c30:	88 44 24 21          	mov    %al,0x21(%rsp)
  223c34:	eb 54                	jmp    223c8a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x146a>
  223c36:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223c3b:	48 8d 35 54 ee fd ff 	lea    -0x211ac(%rip),%rsi        # 202a96 <str.0+0x176>
  223c42:	ba 03 00 00 00       	mov    $0x3,%edx
  223c47:	e8 d4 1a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223c4c:	88 44 24 20          	mov    %al,0x20(%rsp)
  223c50:	8a 44 24 20          	mov    0x20(%rsp),%al
  223c54:	0f b6 f8             	movzbl %al,%edi
  223c57:	83 e7 01             	and    $0x1,%edi
  223c5a:	e8 f1 77 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223c5f:	24 01                	and    $0x1,%al
  223c61:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  223c68:	0f b6 84 24 ae 00 00 	movzbl 0xae(%rsp),%eax
  223c6f:	00 
  223c70:	a8 01                	test   $0x1,%al
  223c72:	74 a1                	je     223c15 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13f5>
  223c74:	eb 00                	jmp    223c76 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1456>
  223c76:	eb 02                	jmp    223c7a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x145a>
  223c78:	0f 0b                	ud2    
  223c7a:	e8 11 69 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223c7f:	24 01                	and    $0x1,%al
  223c81:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223c85:	e9 5c ec ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223c8a:	8a 44 24 21          	mov    0x21(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223c8e:	0f b6 f8             	movzbl %al,%edi
  223c91:	83 e7 01             	and    $0x1,%edi
  223c94:	e8 b7 77 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223c99:	24 01                	and    $0x1,%al
  223c9b:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  223ca2:	0f b6 84 24 af 00 00 	movzbl 0xaf(%rsp),%eax
  223ca9:	00 
  223caa:	a8 01                	test   $0x1,%al
  223cac:	0f 84 46 ff ff ff    	je     223bf8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x13d8>
  223cb2:	eb 00                	jmp    223cb4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1494>
  223cb4:	eb 02                	jmp    223cb8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1498>
  223cb6:	0f 0b                	ud2    
  223cb8:	e8 d3 68 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223cbd:	24 01                	and    $0x1,%al
  223cbf:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223cc3:	e9 1e ec ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223cc8:	8a 44 24 22          	mov    0x22(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223ccc:	a8 01                	test   $0x1,%al
  223cce:	75 15                	jne    223ce5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14c5>
  223cd0:	eb 00                	jmp    223cd2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14b2>
  223cd2:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223cd7:	e8 84 0e 00 00       	callq  224b60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE>
  223cdc:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  223ce0:	e9 bd 00 00 00       	jmpq   223da2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1582>
                        if !first {
  223ce5:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223ce9:	34 ff                	xor    $0xff,%al
  223ceb:	a8 01                	test   $0x1,%al
  223ced:	75 21                	jne    223d10 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14f0>
  223cef:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223cf4:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223cf9:	48 8d 35 24 cc fd ff 	lea    -0x233dc(%rip),%rsi        # 200924 <str.2+0xe4>
  223d00:	ba 04 00 00 00       	mov    $0x4,%edx
  223d05:	e8 16 1a 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223d0a:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  223d0e:	eb 54                	jmp    223d64 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1544>
  223d10:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223d15:	48 8d 35 7a ed fd ff 	lea    -0x21286(%rip),%rsi        # 202a96 <str.0+0x176>
  223d1c:	ba 03 00 00 00       	mov    $0x3,%edx
  223d21:	e8 fa 19 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223d26:	88 44 24 1d          	mov    %al,0x1d(%rsp)
  223d2a:	8a 44 24 1d          	mov    0x1d(%rsp),%al
  223d2e:	0f b6 f8             	movzbl %al,%edi
  223d31:	83 e7 01             	and    $0x1,%edi
  223d34:	e8 17 77 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223d39:	24 01                	and    $0x1,%al
  223d3b:	88 84 24 b0 00 00 00 	mov    %al,0xb0(%rsp)
  223d42:	0f b6 84 24 b0 00 00 	movzbl 0xb0(%rsp),%eax
  223d49:	00 
  223d4a:	a8 01                	test   $0x1,%al
  223d4c:	74 a1                	je     223cef <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14cf>
  223d4e:	eb 00                	jmp    223d50 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1530>
  223d50:	eb 02                	jmp    223d54 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1534>
  223d52:	0f 0b                	ud2    
  223d54:	e8 37 68 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223d59:	24 01                	and    $0x1,%al
  223d5b:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223d5f:	e9 82 eb ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223d64:	8a 44 24 1e          	mov    0x1e(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223d68:	0f b6 f8             	movzbl %al,%edi
  223d6b:	83 e7 01             	and    $0x1,%edi
  223d6e:	e8 dd 76 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223d73:	24 01                	and    $0x1,%al
  223d75:	88 84 24 b1 00 00 00 	mov    %al,0xb1(%rsp)
  223d7c:	0f b6 84 24 b1 00 00 	movzbl 0xb1(%rsp),%eax
  223d83:	00 
  223d84:	a8 01                	test   $0x1,%al
  223d86:	0f 84 46 ff ff ff    	je     223cd2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x14b2>
  223d8c:	eb 00                	jmp    223d8e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x156e>
  223d8e:	eb 02                	jmp    223d92 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1572>
  223d90:	0f 0b                	ud2    
  223d92:	e8 f9 67 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223d97:	24 01                	and    $0x1,%al
  223d99:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223d9d:	e9 44 eb ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223da2:	8a 44 24 1f          	mov    0x1f(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223da6:	a8 01                	test   $0x1,%al
  223da8:	75 15                	jne    223dbf <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x159f>
  223daa:	eb 00                	jmp    223dac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x158c>
  223dac:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223db1:	e8 fa 0d 00 00       	callq  224bb0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE>
  223db6:	88 44 24 1c          	mov    %al,0x1c(%rsp)
  223dba:	e9 bd 00 00 00       	jmpq   223e7c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x165c>
                        if !first {
  223dbf:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223dc3:	34 ff                	xor    $0xff,%al
  223dc5:	a8 01                	test   $0x1,%al
  223dc7:	75 21                	jne    223dea <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15ca>
  223dc9:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223dce:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223dd3:	48 8d 35 6b ed fd ff 	lea    -0x21295(%rip),%rsi        # 202b45 <str.0+0x225>
  223dda:	ba 02 00 00 00       	mov    $0x2,%edx
  223ddf:	e8 3c 19 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223de4:	88 44 24 1b          	mov    %al,0x1b(%rsp)
  223de8:	eb 54                	jmp    223e3e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x161e>
  223dea:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223def:	48 8d 35 a0 ec fd ff 	lea    -0x21360(%rip),%rsi        # 202a96 <str.0+0x176>
  223df6:	ba 03 00 00 00       	mov    $0x3,%edx
  223dfb:	e8 20 19 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223e00:	88 44 24 1a          	mov    %al,0x1a(%rsp)
  223e04:	8a 44 24 1a          	mov    0x1a(%rsp),%al
  223e08:	0f b6 f8             	movzbl %al,%edi
  223e0b:	83 e7 01             	and    $0x1,%edi
  223e0e:	e8 3d 76 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223e13:	24 01                	and    $0x1,%al
  223e15:	88 84 24 b2 00 00 00 	mov    %al,0xb2(%rsp)
  223e1c:	0f b6 84 24 b2 00 00 	movzbl 0xb2(%rsp),%eax
  223e23:	00 
  223e24:	a8 01                	test   $0x1,%al
  223e26:	74 a1                	je     223dc9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x15a9>
  223e28:	eb 00                	jmp    223e2a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x160a>
  223e2a:	eb 02                	jmp    223e2e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x160e>
  223e2c:	0f 0b                	ud2    
  223e2e:	e8 5d 67 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223e33:	24 01                	and    $0x1,%al
  223e35:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223e39:	e9 a8 ea ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223e3e:	8a 44 24 1b          	mov    0x1b(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223e42:	0f b6 f8             	movzbl %al,%edi
  223e45:	83 e7 01             	and    $0x1,%edi
  223e48:	e8 03 76 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223e4d:	24 01                	and    $0x1,%al
  223e4f:	88 84 24 b3 00 00 00 	mov    %al,0xb3(%rsp)
  223e56:	0f b6 84 24 b3 00 00 	movzbl 0xb3(%rsp),%eax
  223e5d:	00 
  223e5e:	a8 01                	test   $0x1,%al
  223e60:	0f 84 46 ff ff ff    	je     223dac <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x158c>
  223e66:	eb 00                	jmp    223e68 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1648>
  223e68:	eb 02                	jmp    223e6c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x164c>
  223e6a:	0f 0b                	ud2    
  223e6c:	e8 1f 67 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223e71:	24 01                	and    $0x1,%al
  223e73:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223e77:	e9 6a ea ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223e7c:	8a 44 24 1c          	mov    0x1c(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223e80:	a8 01                	test   $0x1,%al
  223e82:	75 15                	jne    223e99 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1679>
  223e84:	eb 00                	jmp    223e86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1666>
  223e86:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223e8b:	e8 70 0d 00 00       	callq  224c00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E>
  223e90:	88 44 24 19          	mov    %al,0x19(%rsp)
  223e94:	e9 bd 00 00 00       	jmpq   223f56 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1736>
                        if !first {
  223e99:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223e9d:	34 ff                	xor    $0xff,%al
  223e9f:	a8 01                	test   $0x1,%al
  223ea1:	75 21                	jne    223ec4 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16a4>
  223ea3:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223ea8:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223ead:	48 8d 35 93 ec fd ff 	lea    -0x2136d(%rip),%rsi        # 202b47 <str.0+0x227>
  223eb4:	ba 03 00 00 00       	mov    $0x3,%edx
  223eb9:	e8 62 18 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223ebe:	88 44 24 18          	mov    %al,0x18(%rsp)
  223ec2:	eb 54                	jmp    223f18 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16f8>
  223ec4:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223ec9:	48 8d 35 c6 eb fd ff 	lea    -0x2143a(%rip),%rsi        # 202a96 <str.0+0x176>
  223ed0:	ba 03 00 00 00       	mov    $0x3,%edx
  223ed5:	e8 46 18 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223eda:	88 44 24 17          	mov    %al,0x17(%rsp)
  223ede:	8a 44 24 17          	mov    0x17(%rsp),%al
  223ee2:	0f b6 f8             	movzbl %al,%edi
  223ee5:	83 e7 01             	and    $0x1,%edi
  223ee8:	e8 63 75 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223eed:	24 01                	and    $0x1,%al
  223eef:	88 84 24 b4 00 00 00 	mov    %al,0xb4(%rsp)
  223ef6:	0f b6 84 24 b4 00 00 	movzbl 0xb4(%rsp),%eax
  223efd:	00 
  223efe:	a8 01                	test   $0x1,%al
  223f00:	74 a1                	je     223ea3 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1683>
  223f02:	eb 00                	jmp    223f04 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16e4>
  223f04:	eb 02                	jmp    223f08 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x16e8>
  223f06:	0f 0b                	ud2    
  223f08:	e8 83 66 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223f0d:	24 01                	and    $0x1,%al
  223f0f:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223f13:	e9 ce e9 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223f18:	8a 44 24 18          	mov    0x18(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223f1c:	0f b6 f8             	movzbl %al,%edi
  223f1f:	83 e7 01             	and    $0x1,%edi
  223f22:	e8 29 75 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223f27:	24 01                	and    $0x1,%al
  223f29:	88 84 24 b5 00 00 00 	mov    %al,0xb5(%rsp)
  223f30:	0f b6 84 24 b5 00 00 	movzbl 0xb5(%rsp),%eax
  223f37:	00 
  223f38:	a8 01                	test   $0x1,%al
  223f3a:	0f 84 46 ff ff ff    	je     223e86 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1666>
  223f40:	eb 00                	jmp    223f42 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1722>
  223f42:	eb 02                	jmp    223f46 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1726>
  223f44:	0f 0b                	ud2    
  223f46:	e8 45 66 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223f4b:	24 01                	and    $0x1,%al
  223f4d:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223f51:	e9 90 e9 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223f56:	8a 44 24 19          	mov    0x19(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  223f5a:	a8 01                	test   $0x1,%al
  223f5c:	75 15                	jne    223f73 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1753>
  223f5e:	eb 00                	jmp    223f60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1740>
  223f60:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  223f65:	e8 e6 0c 00 00       	callq  224c50 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E>
  223f6a:	88 44 24 16          	mov    %al,0x16(%rsp)
  223f6e:	e9 bd 00 00 00       	jmpq   224030 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1810>
                        if !first {
  223f73:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  223f77:	34 ff                	xor    $0xff,%al
  223f79:	a8 01                	test   $0x1,%al
  223f7b:	75 21                	jne    223f9e <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x177e>
  223f7d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  223f82:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  223f87:	48 8d 35 bc eb fd ff 	lea    -0x21444(%rip),%rsi        # 202b4a <str.0+0x22a>
  223f8e:	ba 03 00 00 00       	mov    $0x3,%edx
  223f93:	e8 88 17 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223f98:	88 44 24 15          	mov    %al,0x15(%rsp)
  223f9c:	eb 54                	jmp    223ff2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17d2>
  223f9e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  223fa3:	48 8d 35 ec ea fd ff 	lea    -0x21514(%rip),%rsi        # 202a96 <str.0+0x176>
  223faa:	ba 03 00 00 00       	mov    $0x3,%edx
  223faf:	e8 6c 17 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  223fb4:	88 44 24 14          	mov    %al,0x14(%rsp)
  223fb8:	8a 44 24 14          	mov    0x14(%rsp),%al
  223fbc:	0f b6 f8             	movzbl %al,%edi
  223fbf:	83 e7 01             	and    $0x1,%edi
  223fc2:	e8 89 74 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  223fc7:	24 01                	and    $0x1,%al
  223fc9:	88 84 24 b6 00 00 00 	mov    %al,0xb6(%rsp)
  223fd0:	0f b6 84 24 b6 00 00 	movzbl 0xb6(%rsp),%eax
  223fd7:	00 
  223fd8:	a8 01                	test   $0x1,%al
  223fda:	74 a1                	je     223f7d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x175d>
  223fdc:	eb 00                	jmp    223fde <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17be>
  223fde:	eb 02                	jmp    223fe2 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17c2>
  223fe0:	0f 0b                	ud2    
  223fe2:	e8 a9 65 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  223fe7:	24 01                	and    $0x1,%al
  223fe9:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  223fed:	e9 f4 e8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  223ff2:	8a 44 24 15          	mov    0x15(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  223ff6:	0f b6 f8             	movzbl %al,%edi
  223ff9:	83 e7 01             	and    $0x1,%edi
  223ffc:	e8 4f 74 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224001:	24 01                	and    $0x1,%al
  224003:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  22400a:	0f b6 84 24 b7 00 00 	movzbl 0xb7(%rsp),%eax
  224011:	00 
  224012:	a8 01                	test   $0x1,%al
  224014:	0f 84 46 ff ff ff    	je     223f60 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1740>
  22401a:	eb 00                	jmp    22401c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x17fc>
  22401c:	eb 02                	jmp    224020 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1800>
  22401e:	0f 0b                	ud2    
  224020:	e8 6b 65 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224025:	24 01                	and    $0x1,%al
  224027:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  22402b:	e9 b6 e8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224030:	8a 44 24 16          	mov    0x16(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  224034:	a8 01                	test   $0x1,%al
  224036:	75 15                	jne    22404d <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x182d>
  224038:	eb 00                	jmp    22403a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x181a>
  22403a:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22403f:	e8 5c 0c 00 00       	callq  224ca0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE>
  224044:	88 44 24 13          	mov    %al,0x13(%rsp)
  224048:	e9 bd 00 00 00       	jmpq   22410a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18ea>
                        if !first {
  22404d:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224051:	34 ff                	xor    $0xff,%al
  224053:	a8 01                	test   $0x1,%al
  224055:	75 21                	jne    224078 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1858>
  224057:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22405c:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224061:	48 8d 35 e8 c8 fd ff 	lea    -0x23718(%rip),%rsi        # 200950 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x18>
  224068:	ba 04 00 00 00       	mov    $0x4,%edx
  22406d:	e8 ae 16 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224072:	88 44 24 12          	mov    %al,0x12(%rsp)
  224076:	eb 54                	jmp    2240cc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18ac>
  224078:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  22407d:	48 8d 35 12 ea fd ff 	lea    -0x215ee(%rip),%rsi        # 202a96 <str.0+0x176>
  224084:	ba 03 00 00 00       	mov    $0x3,%edx
  224089:	e8 92 16 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22408e:	88 44 24 11          	mov    %al,0x11(%rsp)
  224092:	8a 44 24 11          	mov    0x11(%rsp),%al
  224096:	0f b6 f8             	movzbl %al,%edi
  224099:	83 e7 01             	and    $0x1,%edi
  22409c:	e8 af 73 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2240a1:	24 01                	and    $0x1,%al
  2240a3:	88 84 24 b8 00 00 00 	mov    %al,0xb8(%rsp)
  2240aa:	0f b6 84 24 b8 00 00 	movzbl 0xb8(%rsp),%eax
  2240b1:	00 
  2240b2:	a8 01                	test   $0x1,%al
  2240b4:	74 a1                	je     224057 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1837>
  2240b6:	eb 00                	jmp    2240b8 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1898>
  2240b8:	eb 02                	jmp    2240bc <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x189c>
  2240ba:	0f 0b                	ud2    
  2240bc:	e8 cf 64 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2240c1:	24 01                	and    $0x1,%al
  2240c3:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2240c7:	e9 1a e8 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2240cc:	8a 44 24 12          	mov    0x12(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2240d0:	0f b6 f8             	movzbl %al,%edi
  2240d3:	83 e7 01             	and    $0x1,%edi
  2240d6:	e8 75 73 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2240db:	24 01                	and    $0x1,%al
  2240dd:	88 84 24 b9 00 00 00 	mov    %al,0xb9(%rsp)
  2240e4:	0f b6 84 24 b9 00 00 	movzbl 0xb9(%rsp),%eax
  2240eb:	00 
  2240ec:	a8 01                	test   $0x1,%al
  2240ee:	0f 84 46 ff ff ff    	je     22403a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x181a>
  2240f4:	eb 00                	jmp    2240f6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18d6>
  2240f6:	eb 02                	jmp    2240fa <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18da>
  2240f8:	0f 0b                	ud2    
  2240fa:	e8 91 64 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2240ff:	24 01                	and    $0x1,%al
  224101:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224105:	e9 dc e7 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  22410a:	8a 44 24 13          	mov    0x13(%rsp),%al
                    if <Self as __BitFlags>::$Flag(self) {
  22410e:	a8 01                	test   $0x1,%al
  224110:	75 1e                	jne    224130 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1910>
  224112:	eb 00                	jmp    224114 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18f4>
  224114:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
                let extra_bits = self.bits & !Self::all().bits();
  224119:	8b 00                	mov    (%rax),%eax
  22411b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  22411f:	e8 7c 02 00 00       	callq  2243a0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>
  224124:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
  22412b:	e9 bd 00 00 00       	jmpq   2241ed <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19cd>
                        if !first {
  224130:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224134:	34 ff                	xor    $0xff,%al
  224136:	a8 01                	test   $0x1,%al
  224138:	75 21                	jne    22415b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x193b>
  22413a:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        first = false;
  22413f:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                        f.write_str($crate::_core::stringify!($Flag))?;
  224144:	48 8d 35 02 ea fd ff 	lea    -0x215fe(%rip),%rsi        # 202b4d <str.0+0x22d>
  22414b:	ba 03 00 00 00       	mov    $0x3,%edx
  224150:	e8 cb 15 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224155:	88 44 24 0b          	mov    %al,0xb(%rsp)
  224159:	eb 54                	jmp    2241af <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x198f>
  22415b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                            f.write_str(" | ")?;
  224160:	48 8d 35 2f e9 fd ff 	lea    -0x216d1(%rip),%rsi        # 202a96 <str.0+0x176>
  224167:	ba 03 00 00 00       	mov    $0x3,%edx
  22416c:	e8 af 15 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224171:	88 44 24 0a          	mov    %al,0xa(%rsp)
  224175:	8a 44 24 0a          	mov    0xa(%rsp),%al
  224179:	0f b6 f8             	movzbl %al,%edi
  22417c:	83 e7 01             	and    $0x1,%edi
  22417f:	e8 cc 72 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224184:	24 01                	and    $0x1,%al
  224186:	88 84 24 ba 00 00 00 	mov    %al,0xba(%rsp)
  22418d:	0f b6 84 24 ba 00 00 	movzbl 0xba(%rsp),%eax
  224194:	00 
  224195:	a8 01                	test   $0x1,%al
  224197:	74 a1                	je     22413a <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x191a>
  224199:	eb 00                	jmp    22419b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x197b>
  22419b:	eb 02                	jmp    22419f <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x197f>
  22419d:	0f 0b                	ud2    
  22419f:	e8 ec 63 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2241a4:	24 01                	and    $0x1,%al
  2241a6:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2241aa:	e9 37 e7 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2241af:	8a 44 24 0b          	mov    0xb(%rsp),%al
                        f.write_str($crate::_core::stringify!($Flag))?;
  2241b3:	0f b6 f8             	movzbl %al,%edi
  2241b6:	83 e7 01             	and    $0x1,%edi
  2241b9:	e8 92 72 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2241be:	24 01                	and    $0x1,%al
  2241c0:	88 84 24 bb 00 00 00 	mov    %al,0xbb(%rsp)
  2241c7:	0f b6 84 24 bb 00 00 	movzbl 0xbb(%rsp),%eax
  2241ce:	00 
  2241cf:	a8 01                	test   $0x1,%al
  2241d1:	0f 84 3d ff ff ff    	je     224114 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x18f4>
  2241d7:	eb 00                	jmp    2241d9 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19b9>
  2241d9:	eb 02                	jmp    2241dd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19bd>
  2241db:	0f 0b                	ud2    
  2241dd:	e8 ae 63 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2241e2:	24 01                	and    $0x1,%al
  2241e4:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2241e8:	e9 f9 e6 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
                let extra_bits = self.bits & !Self::all().bits();
  2241ed:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2241f4:	00 
  2241f5:	e8 c6 01 00 00       	callq  2243c0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h52ed3e22441bd153E>
  2241fa:	89 44 24 04          	mov    %eax,0x4(%rsp)
  2241fe:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  224202:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  224206:	83 f1 ff             	xor    $0xffffffff,%ecx
  224209:	21 c8                	and    %ecx,%eax
  22420b:	89 84 24 bc 00 00 00 	mov    %eax,0xbc(%rsp)
                if extra_bits != 0 {
  224212:	83 bc 24 bc 00 00 00 	cmpl   $0x0,0xbc(%rsp)
  224219:	00 
  22421a:	75 10                	jne    22422c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a0c>
                if first {
  22421c:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  224221:	0f 85 1e 01 00 00    	jne    224345 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b25>
  224227:	e9 0f 01 00 00       	jmpq   22433b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b1b>
                    if !first {
  22422c:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  224230:	34 ff                	xor    $0xff,%al
  224232:	a8 01                	test   $0x1,%al
  224234:	75 21                	jne    224257 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a37>
  224236:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    first = false;
  22423b:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
                    f.write_str("0x")?;
  224240:	48 8d 35 be e8 fd ff 	lea    -0x21742(%rip),%rsi        # 202b05 <str.0+0x1e5>
  224247:	ba 02 00 00 00       	mov    $0x2,%edx
  22424c:	e8 cf 14 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  224251:	88 44 24 03          	mov    %al,0x3(%rsp)
  224255:	eb 54                	jmp    2242ab <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a8b>
  224257:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                        f.write_str(" | ")?;
  22425c:	48 8d 35 33 e8 fd ff 	lea    -0x217cd(%rip),%rsi        # 202a96 <str.0+0x176>
  224263:	ba 03 00 00 00       	mov    $0x3,%edx
  224268:	e8 b3 14 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22426d:	88 44 24 02          	mov    %al,0x2(%rsp)
  224271:	8a 44 24 02          	mov    0x2(%rsp),%al
  224275:	0f b6 f8             	movzbl %al,%edi
  224278:	83 e7 01             	and    $0x1,%edi
  22427b:	e8 d0 71 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  224280:	24 01                	and    $0x1,%al
  224282:	88 84 24 c4 00 00 00 	mov    %al,0xc4(%rsp)
  224289:	0f b6 84 24 c4 00 00 	movzbl 0xc4(%rsp),%eax
  224290:	00 
  224291:	a8 01                	test   $0x1,%al
  224293:	74 a1                	je     224236 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a16>
  224295:	eb 00                	jmp    224297 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a77>
  224297:	eb 02                	jmp    22429b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1a7b>
  224299:	0f 0b                	ud2    
  22429b:	e8 f0 62 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2242a0:	24 01                	and    $0x1,%al
  2242a2:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2242a6:	e9 3b e6 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2242ab:	8a 44 24 03          	mov    0x3(%rsp),%al
                    f.write_str("0x")?;
  2242af:	0f b6 f8             	movzbl %al,%edi
  2242b2:	83 e7 01             	and    $0x1,%edi
  2242b5:	e8 96 71 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  2242ba:	24 01                	and    $0x1,%al
  2242bc:	88 84 24 c5 00 00 00 	mov    %al,0xc5(%rsp)
  2242c3:	0f b6 84 24 c5 00 00 	movzbl 0xc5(%rsp),%eax
  2242ca:	00 
  2242cb:	a8 01                	test   $0x1,%al
  2242cd:	74 06                	je     2242d5 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ab5>
  2242cf:	eb 00                	jmp    2242d1 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1ab1>
  2242d1:	eb 1a                	jmp    2242ed <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1acd>
  2242d3:	0f 0b                	ud2    
  2242d5:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  2242da:	48 8d bc 24 bc 00 00 	lea    0xbc(%rsp),%rdi
  2242e1:	00 
  2242e2:	e8 39 e3 00 00       	callq  232620 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  2242e7:	88 44 24 01          	mov    %al,0x1(%rsp)
  2242eb:	eb 10                	jmp    2242fd <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1add>
                    f.write_str("0x")?;
  2242ed:	e8 9e 62 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  2242f2:	24 01                	and    $0x1,%al
  2242f4:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2242f8:	e9 e9 e5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  2242fd:	8a 44 24 01          	mov    0x1(%rsp),%al
                    $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
  224301:	0f b6 f8             	movzbl %al,%edi
  224304:	83 e7 01             	and    $0x1,%edi
  224307:	e8 44 71 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22430c:	24 01                	and    $0x1,%al
  22430e:	88 84 24 c6 00 00 00 	mov    %al,0xc6(%rsp)
  224315:	0f b6 84 24 c6 00 00 	movzbl 0xc6(%rsp),%eax
  22431c:	00 
  22431d:	a8 01                	test   $0x1,%al
  22431f:	0f 84 f7 fe ff ff    	je     22421c <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x19fc>
  224325:	eb 00                	jmp    224327 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b07>
  224327:	eb 02                	jmp    22432b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b0b>
  224329:	0f 0b                	ud2    
  22432b:	e8 60 62 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  224330:	24 01                	and    $0x1,%al
  224332:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224336:	e9 ab e5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
                Ok(())
  22433b:	c6 44 24 7e 00       	movb   $0x0,0x7e(%rsp)
            }
  224340:	e9 a1 e5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224345:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
                    f.write_str("(empty)")?;
  22434a:	48 8d 35 b6 e7 fd ff 	lea    -0x2184a(%rip),%rsi        # 202b07 <str.0+0x1e7>
  224351:	ba 07 00 00 00       	mov    $0x7,%edx
  224356:	e8 c5 13 01 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  22435b:	88 04 24             	mov    %al,(%rsp)
  22435e:	8a 04 24             	mov    (%rsp),%al
  224361:	0f b6 f8             	movzbl %al,%edi
  224364:	83 e7 01             	and    $0x1,%edi
  224367:	e8 e4 70 fe ff       	callq  20b450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc1ebacb671032240E>
  22436c:	24 01                	and    $0x1,%al
  22436e:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  224375:	0f b6 84 24 c7 00 00 	movzbl 0xc7(%rsp),%eax
  22437c:	00 
  22437d:	a8 01                	test   $0x1,%al
  22437f:	74 ba                	je     22433b <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b1b>
  224381:	eb 00                	jmp    224383 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b63>
  224383:	eb 02                	jmp    224387 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0x1b67>
  224385:	0f 0b                	ud2    
  224387:	e8 04 62 fe ff       	callq  20a590 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h36d9318d511b9875E>
  22438c:	24 01                	and    $0x1,%al
  22438e:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  224392:	e9 4f e5 ff ff       	jmpq   2228e6 <_ZN68_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$3fmt17h8de9558a07cd1331E+0xc6>
  224397:	cc                   	int3   
  224398:	cc                   	int3   
  224399:	cc                   	int3   
  22439a:	cc                   	int3   
  22439b:	cc                   	int3   
  22439c:	cc                   	int3   
  22439d:	cc                   	int3   
  22439e:	cc                   	int3   
  22439f:	cc                   	int3   

00000000002243a0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>:
            pub const fn all() -> Self {
  2243a0:	48 83 ec 04          	sub    $0x4,%rsp
                __impl_all_bitflags! {
  2243a4:	c7 04 24 ff fb ef ff 	movl   $0xffeffbff,(%rsp)
            }
  2243ab:	8b 04 24             	mov    (%rsp),%eax
  2243ae:	48 83 c4 04          	add    $0x4,%rsp
  2243b2:	c3                   	retq   
  2243b3:	cc                   	int3   
  2243b4:	cc                   	int3   
  2243b5:	cc                   	int3   
  2243b6:	cc                   	int3   
  2243b7:	cc                   	int3   
  2243b8:	cc                   	int3   
  2243b9:	cc                   	int3   
  2243ba:	cc                   	int3   
  2243bb:	cc                   	int3   
  2243bc:	cc                   	int3   
  2243bd:	cc                   	int3   
  2243be:	cc                   	int3   
  2243bf:	cc                   	int3   

00000000002243c0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX4bits17h52ed3e22441bd153E>:
            pub const fn bits(&self) -> $T {
  2243c0:	50                   	push   %rax
  2243c1:	48 89 3c 24          	mov    %rdi,(%rsp)
                self.bits
  2243c5:	8b 07                	mov    (%rdi),%eax
            }
  2243c7:	59                   	pop    %rcx
  2243c8:	c3                   	retq   
  2243c9:	cc                   	int3   
  2243ca:	cc                   	int3   
  2243cb:	cc                   	int3   
  2243cc:	cc                   	int3   
  2243cd:	cc                   	int3   
  2243ce:	cc                   	int3   
  2243cf:	cc                   	int3   

00000000002243d0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX18from_bits_truncate17h215956a5355ec929E>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
  2243d0:	48 83 ec 18          	sub    $0x18,%rsp
  2243d4:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  2243d8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
                Self { bits: bits & Self::all().bits }
  2243dc:	e8 bf ff ff ff       	callq  2243a0 <_ZN9r3_kernel3cpu5cpuid8FlagsEDX3all17haadf2f0b6adcc7ddE>
  2243e1:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  2243e5:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  2243e9:	8b 44 24 08          	mov    0x8(%rsp),%eax
  2243ed:	21 c8                	and    %ecx,%eax
  2243ef:	89 44 24 10          	mov    %eax,0x10(%rsp)
            }
  2243f3:	8b 44 24 10          	mov    0x10(%rsp),%eax
  2243f7:	48 83 c4 18          	add    $0x18,%rsp
  2243fb:	c3                   	retq   
  2243fc:	cc                   	int3   
  2243fd:	cc                   	int3   
  2243fe:	cc                   	int3   
  2243ff:	cc                   	int3   

0000000000224400 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E>:
                            fn $Flag(&self) -> bool {
  224400:	48 83 ec 18          	sub    $0x18,%rsp
  224404:	48 89 3c 24          	mov    %rdi,(%rsp)
  224408:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
bitflags! {
  22440d:	31 c0                	xor    %eax,%eax
  22440f:	a8 01                	test   $0x1,%al
  224411:	75 17                	jne    22442a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E+0x2a>
  224413:	48 8b 04 24          	mov    (%rsp),%rax
  224417:	8b 00                	mov    (%rax),%eax
  224419:	83 e0 01             	and    $0x1,%eax
  22441c:	83 f8 01             	cmp    $0x1,%eax
  22441f:	0f 94 c0             	sete   %al
  224422:	24 01                	and    $0x1,%al
  224424:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224428:	eb 05                	jmp    22442f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3FPU17heb45f3a97f8d8b27E+0x2f>
  22442a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22442f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224433:	24 01                	and    $0x1,%al
  224435:	0f b6 c0             	movzbl %al,%eax
  224438:	48 83 c4 18          	add    $0x18,%rsp
  22443c:	c3                   	retq   
  22443d:	cc                   	int3   
  22443e:	cc                   	int3   
  22443f:	cc                   	int3   

0000000000224440 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E>:
                            fn $Flag(&self) -> bool {
  224440:	48 83 ec 18          	sub    $0x18,%rsp
  224444:	48 89 3c 24          	mov    %rdi,(%rsp)
  224448:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22444d:	31 c0                	xor    %eax,%eax
  22444f:	a8 01                	test   $0x1,%al
  224451:	75 17                	jne    22446a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E+0x2a>
  224453:	48 8b 04 24          	mov    (%rsp),%rax
  224457:	8b 00                	mov    (%rax),%eax
  224459:	83 e0 02             	and    $0x2,%eax
  22445c:	83 f8 02             	cmp    $0x2,%eax
  22445f:	0f 94 c0             	sete   %al
  224462:	24 01                	and    $0x1,%al
  224464:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224468:	eb 05                	jmp    22446f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3VME17hbd018da891bdf8d8E+0x2f>
  22446a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22446f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224473:	24 01                	and    $0x1,%al
  224475:	0f b6 c0             	movzbl %al,%eax
  224478:	48 83 c4 18          	add    $0x18,%rsp
  22447c:	c3                   	retq   
  22447d:	cc                   	int3   
  22447e:	cc                   	int3   
  22447f:	cc                   	int3   

0000000000224480 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE>:
                            fn $Flag(&self) -> bool {
  224480:	48 83 ec 18          	sub    $0x18,%rsp
  224484:	48 89 3c 24          	mov    %rdi,(%rsp)
  224488:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22448d:	31 c0                	xor    %eax,%eax
  22448f:	a8 01                	test   $0x1,%al
  224491:	75 17                	jne    2244aa <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE+0x2a>
  224493:	48 8b 04 24          	mov    (%rsp),%rax
  224497:	8b 00                	mov    (%rax),%eax
  224499:	83 e0 04             	and    $0x4,%eax
  22449c:	83 f8 04             	cmp    $0x4,%eax
  22449f:	0f 94 c0             	sete   %al
  2244a2:	24 01                	and    $0x1,%al
  2244a4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2244a8:	eb 05                	jmp    2244af <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2DE17hc1586935a58d6b2bE+0x2f>
  2244aa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2244af:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2244b3:	24 01                	and    $0x1,%al
  2244b5:	0f b6 c0             	movzbl %al,%eax
  2244b8:	48 83 c4 18          	add    $0x18,%rsp
  2244bc:	c3                   	retq   
  2244bd:	cc                   	int3   
  2244be:	cc                   	int3   
  2244bf:	cc                   	int3   

00000000002244c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E>:
                            fn $Flag(&self) -> bool {
  2244c0:	48 83 ec 18          	sub    $0x18,%rsp
  2244c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2244c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2244cd:	31 c0                	xor    %eax,%eax
  2244cf:	a8 01                	test   $0x1,%al
  2244d1:	75 17                	jne    2244ea <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E+0x2a>
  2244d3:	48 8b 04 24          	mov    (%rsp),%rax
  2244d7:	8b 00                	mov    (%rax),%eax
  2244d9:	83 e0 08             	and    $0x8,%eax
  2244dc:	83 f8 08             	cmp    $0x8,%eax
  2244df:	0f 94 c0             	sete   %al
  2244e2:	24 01                	and    $0x1,%al
  2244e4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2244e8:	eb 05                	jmp    2244ef <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSE17h60995bb3d2c71948E+0x2f>
  2244ea:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2244ef:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2244f3:	24 01                	and    $0x1,%al
  2244f5:	0f b6 c0             	movzbl %al,%eax
  2244f8:	48 83 c4 18          	add    $0x18,%rsp
  2244fc:	c3                   	retq   
  2244fd:	cc                   	int3   
  2244fe:	cc                   	int3   
  2244ff:	cc                   	int3   

0000000000224500 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E>:
                            fn $Flag(&self) -> bool {
  224500:	48 83 ec 18          	sub    $0x18,%rsp
  224504:	48 89 3c 24          	mov    %rdi,(%rsp)
  224508:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22450d:	31 c0                	xor    %eax,%eax
  22450f:	a8 01                	test   $0x1,%al
  224511:	75 17                	jne    22452a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E+0x2a>
  224513:	48 8b 04 24          	mov    (%rsp),%rax
  224517:	8b 00                	mov    (%rax),%eax
  224519:	83 e0 10             	and    $0x10,%eax
  22451c:	83 f8 10             	cmp    $0x10,%eax
  22451f:	0f 94 c0             	sete   %al
  224522:	24 01                	and    $0x1,%al
  224524:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224528:	eb 05                	jmp    22452f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TSC17h8322100d6756ad85E+0x2f>
  22452a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22452f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224533:	24 01                	and    $0x1,%al
  224535:	0f b6 c0             	movzbl %al,%eax
  224538:	48 83 c4 18          	add    $0x18,%rsp
  22453c:	c3                   	retq   
  22453d:	cc                   	int3   
  22453e:	cc                   	int3   
  22453f:	cc                   	int3   

0000000000224540 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE>:
                            fn $Flag(&self) -> bool {
  224540:	48 83 ec 18          	sub    $0x18,%rsp
  224544:	48 89 3c 24          	mov    %rdi,(%rsp)
  224548:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22454d:	31 c0                	xor    %eax,%eax
  22454f:	a8 01                	test   $0x1,%al
  224551:	75 17                	jne    22456a <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE+0x2a>
  224553:	48 8b 04 24          	mov    (%rsp),%rax
  224557:	8b 00                	mov    (%rax),%eax
  224559:	83 e0 20             	and    $0x20,%eax
  22455c:	83 f8 20             	cmp    $0x20,%eax
  22455f:	0f 94 c0             	sete   %al
  224562:	24 01                	and    $0x1,%al
  224564:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224568:	eb 05                	jmp    22456f <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MSR17h60b744250bbb531cE+0x2f>
  22456a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  22456f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224573:	24 01                	and    $0x1,%al
  224575:	0f b6 c0             	movzbl %al,%eax
  224578:	48 83 c4 18          	add    $0x18,%rsp
  22457c:	c3                   	retq   
  22457d:	cc                   	int3   
  22457e:	cc                   	int3   
  22457f:	cc                   	int3   

0000000000224580 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E>:
                            fn $Flag(&self) -> bool {
  224580:	48 83 ec 18          	sub    $0x18,%rsp
  224584:	48 89 3c 24          	mov    %rdi,(%rsp)
  224588:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22458d:	31 c0                	xor    %eax,%eax
  22458f:	a8 01                	test   $0x1,%al
  224591:	75 17                	jne    2245aa <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E+0x2a>
  224593:	48 8b 04 24          	mov    (%rsp),%rax
  224597:	8b 00                	mov    (%rax),%eax
  224599:	83 e0 40             	and    $0x40,%eax
  22459c:	83 f8 40             	cmp    $0x40,%eax
  22459f:	0f 94 c0             	sete   %al
  2245a2:	24 01                	and    $0x1,%al
  2245a4:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2245a8:	eb 05                	jmp    2245af <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAE17h01cd06d59dfe47f5E+0x2f>
  2245aa:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2245af:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2245b3:	24 01                	and    $0x1,%al
  2245b5:	0f b6 c0             	movzbl %al,%eax
  2245b8:	48 83 c4 18          	add    $0x18,%rsp
  2245bc:	c3                   	retq   
  2245bd:	cc                   	int3   
  2245be:	cc                   	int3   
  2245bf:	cc                   	int3   

00000000002245c0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E>:
                            fn $Flag(&self) -> bool {
  2245c0:	48 83 ec 18          	sub    $0x18,%rsp
  2245c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2245c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2245cd:	31 c0                	xor    %eax,%eax
  2245cf:	a8 01                	test   $0x1,%al
  2245d1:	75 1b                	jne    2245ee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E+0x2e>
  2245d3:	48 8b 04 24          	mov    (%rsp),%rax
  2245d7:	8b 00                	mov    (%rax),%eax
  2245d9:	25 80 00 00 00       	and    $0x80,%eax
  2245de:	3d 80 00 00 00       	cmp    $0x80,%eax
  2245e3:	0f 94 c0             	sete   %al
  2245e6:	24 01                	and    $0x1,%al
  2245e8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2245ec:	eb 05                	jmp    2245f3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCE17h936fbae0578990c2E+0x33>
  2245ee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2245f3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2245f7:	24 01                	and    $0x1,%al
  2245f9:	0f b6 c0             	movzbl %al,%eax
  2245fc:	48 83 c4 18          	add    $0x18,%rsp
  224600:	c3                   	retq   
  224601:	cc                   	int3   
  224602:	cc                   	int3   
  224603:	cc                   	int3   
  224604:	cc                   	int3   
  224605:	cc                   	int3   
  224606:	cc                   	int3   
  224607:	cc                   	int3   
  224608:	cc                   	int3   
  224609:	cc                   	int3   
  22460a:	cc                   	int3   
  22460b:	cc                   	int3   
  22460c:	cc                   	int3   
  22460d:	cc                   	int3   
  22460e:	cc                   	int3   
  22460f:	cc                   	int3   

0000000000224610 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E>:
                            fn $Flag(&self) -> bool {
  224610:	48 83 ec 18          	sub    $0x18,%rsp
  224614:	48 89 3c 24          	mov    %rdi,(%rsp)
  224618:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22461d:	31 c0                	xor    %eax,%eax
  22461f:	a8 01                	test   $0x1,%al
  224621:	75 1b                	jne    22463e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E+0x2e>
  224623:	48 8b 04 24          	mov    (%rsp),%rax
  224627:	8b 00                	mov    (%rax),%eax
  224629:	25 00 01 00 00       	and    $0x100,%eax
  22462e:	3d 00 01 00 00       	cmp    $0x100,%eax
  224633:	0f 94 c0             	sete   %al
  224636:	24 01                	and    $0x1,%al
  224638:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22463c:	eb 05                	jmp    224643 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CX817h85b7b3eec4af5c20E+0x33>
  22463e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224643:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224647:	24 01                	and    $0x1,%al
  224649:	0f b6 c0             	movzbl %al,%eax
  22464c:	48 83 c4 18          	add    $0x18,%rsp
  224650:	c3                   	retq   
  224651:	cc                   	int3   
  224652:	cc                   	int3   
  224653:	cc                   	int3   
  224654:	cc                   	int3   
  224655:	cc                   	int3   
  224656:	cc                   	int3   
  224657:	cc                   	int3   
  224658:	cc                   	int3   
  224659:	cc                   	int3   
  22465a:	cc                   	int3   
  22465b:	cc                   	int3   
  22465c:	cc                   	int3   
  22465d:	cc                   	int3   
  22465e:	cc                   	int3   
  22465f:	cc                   	int3   

0000000000224660 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E>:
                            fn $Flag(&self) -> bool {
  224660:	48 83 ec 18          	sub    $0x18,%rsp
  224664:	48 89 3c 24          	mov    %rdi,(%rsp)
  224668:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22466d:	31 c0                	xor    %eax,%eax
  22466f:	a8 01                	test   $0x1,%al
  224671:	75 1b                	jne    22468e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E+0x2e>
  224673:	48 8b 04 24          	mov    (%rsp),%rax
  224677:	8b 00                	mov    (%rax),%eax
  224679:	25 00 02 00 00       	and    $0x200,%eax
  22467e:	3d 00 02 00 00       	cmp    $0x200,%eax
  224683:	0f 94 c0             	sete   %al
  224686:	24 01                	and    $0x1,%al
  224688:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22468c:	eb 05                	jmp    224693 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4APIC17h94e3c8148af9c947E+0x33>
  22468e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224693:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224697:	24 01                	and    $0x1,%al
  224699:	0f b6 c0             	movzbl %al,%eax
  22469c:	48 83 c4 18          	add    $0x18,%rsp
  2246a0:	c3                   	retq   
  2246a1:	cc                   	int3   
  2246a2:	cc                   	int3   
  2246a3:	cc                   	int3   
  2246a4:	cc                   	int3   
  2246a5:	cc                   	int3   
  2246a6:	cc                   	int3   
  2246a7:	cc                   	int3   
  2246a8:	cc                   	int3   
  2246a9:	cc                   	int3   
  2246aa:	cc                   	int3   
  2246ab:	cc                   	int3   
  2246ac:	cc                   	int3   
  2246ad:	cc                   	int3   
  2246ae:	cc                   	int3   
  2246af:	cc                   	int3   

00000000002246b0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE>:
                            fn $Flag(&self) -> bool {
  2246b0:	48 83 ec 18          	sub    $0x18,%rsp
  2246b4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2246b8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2246bd:	31 c0                	xor    %eax,%eax
  2246bf:	a8 01                	test   $0x1,%al
  2246c1:	75 1b                	jne    2246de <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE+0x2e>
  2246c3:	48 8b 04 24          	mov    (%rsp),%rax
  2246c7:	8b 00                	mov    (%rax),%eax
  2246c9:	25 00 08 00 00       	and    $0x800,%eax
  2246ce:	3d 00 08 00 00       	cmp    $0x800,%eax
  2246d3:	0f 94 c0             	sete   %al
  2246d6:	24 01                	and    $0x1,%al
  2246d8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2246dc:	eb 05                	jmp    2246e3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SEP17h165eed28abac0c9bE+0x33>
  2246de:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2246e3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2246e7:	24 01                	and    $0x1,%al
  2246e9:	0f b6 c0             	movzbl %al,%eax
  2246ec:	48 83 c4 18          	add    $0x18,%rsp
  2246f0:	c3                   	retq   
  2246f1:	cc                   	int3   
  2246f2:	cc                   	int3   
  2246f3:	cc                   	int3   
  2246f4:	cc                   	int3   
  2246f5:	cc                   	int3   
  2246f6:	cc                   	int3   
  2246f7:	cc                   	int3   
  2246f8:	cc                   	int3   
  2246f9:	cc                   	int3   
  2246fa:	cc                   	int3   
  2246fb:	cc                   	int3   
  2246fc:	cc                   	int3   
  2246fd:	cc                   	int3   
  2246fe:	cc                   	int3   
  2246ff:	cc                   	int3   

0000000000224700 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E>:
                            fn $Flag(&self) -> bool {
  224700:	48 83 ec 18          	sub    $0x18,%rsp
  224704:	48 89 3c 24          	mov    %rdi,(%rsp)
  224708:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22470d:	31 c0                	xor    %eax,%eax
  22470f:	a8 01                	test   $0x1,%al
  224711:	75 1b                	jne    22472e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E+0x2e>
  224713:	48 8b 04 24          	mov    (%rsp),%rax
  224717:	8b 00                	mov    (%rax),%eax
  224719:	25 00 10 00 00       	and    $0x1000,%eax
  22471e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  224723:	0f 94 c0             	sete   %al
  224726:	24 01                	and    $0x1,%al
  224728:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22472c:	eb 05                	jmp    224733 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4MTRR17hf05f37ce3fbe2173E+0x33>
  22472e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224733:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224737:	24 01                	and    $0x1,%al
  224739:	0f b6 c0             	movzbl %al,%eax
  22473c:	48 83 c4 18          	add    $0x18,%rsp
  224740:	c3                   	retq   
  224741:	cc                   	int3   
  224742:	cc                   	int3   
  224743:	cc                   	int3   
  224744:	cc                   	int3   
  224745:	cc                   	int3   
  224746:	cc                   	int3   
  224747:	cc                   	int3   
  224748:	cc                   	int3   
  224749:	cc                   	int3   
  22474a:	cc                   	int3   
  22474b:	cc                   	int3   
  22474c:	cc                   	int3   
  22474d:	cc                   	int3   
  22474e:	cc                   	int3   
  22474f:	cc                   	int3   

0000000000224750 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E>:
                            fn $Flag(&self) -> bool {
  224750:	48 83 ec 18          	sub    $0x18,%rsp
  224754:	48 89 3c 24          	mov    %rdi,(%rsp)
  224758:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22475d:	31 c0                	xor    %eax,%eax
  22475f:	a8 01                	test   $0x1,%al
  224761:	75 1b                	jne    22477e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E+0x2e>
  224763:	48 8b 04 24          	mov    (%rsp),%rax
  224767:	8b 00                	mov    (%rax),%eax
  224769:	25 00 20 00 00       	and    $0x2000,%eax
  22476e:	3d 00 20 00 00       	cmp    $0x2000,%eax
  224773:	0f 94 c0             	sete   %al
  224776:	24 01                	and    $0x1,%al
  224778:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22477c:	eb 05                	jmp    224783 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PGE17h469f796a79659a74E+0x33>
  22477e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224783:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224787:	24 01                	and    $0x1,%al
  224789:	0f b6 c0             	movzbl %al,%eax
  22478c:	48 83 c4 18          	add    $0x18,%rsp
  224790:	c3                   	retq   
  224791:	cc                   	int3   
  224792:	cc                   	int3   
  224793:	cc                   	int3   
  224794:	cc                   	int3   
  224795:	cc                   	int3   
  224796:	cc                   	int3   
  224797:	cc                   	int3   
  224798:	cc                   	int3   
  224799:	cc                   	int3   
  22479a:	cc                   	int3   
  22479b:	cc                   	int3   
  22479c:	cc                   	int3   
  22479d:	cc                   	int3   
  22479e:	cc                   	int3   
  22479f:	cc                   	int3   

00000000002247a0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E>:
                            fn $Flag(&self) -> bool {
  2247a0:	48 83 ec 18          	sub    $0x18,%rsp
  2247a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2247a8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2247ad:	31 c0                	xor    %eax,%eax
  2247af:	a8 01                	test   $0x1,%al
  2247b1:	75 1b                	jne    2247ce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E+0x2e>
  2247b3:	48 8b 04 24          	mov    (%rsp),%rax
  2247b7:	8b 00                	mov    (%rax),%eax
  2247b9:	25 00 40 00 00       	and    $0x4000,%eax
  2247be:	3d 00 40 00 00       	cmp    $0x4000,%eax
  2247c3:	0f 94 c0             	sete   %al
  2247c6:	24 01                	and    $0x1,%al
  2247c8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2247cc:	eb 05                	jmp    2247d3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MCA17h6878a31acd03fa05E+0x33>
  2247ce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2247d3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2247d7:	24 01                	and    $0x1,%al
  2247d9:	0f b6 c0             	movzbl %al,%eax
  2247dc:	48 83 c4 18          	add    $0x18,%rsp
  2247e0:	c3                   	retq   
  2247e1:	cc                   	int3   
  2247e2:	cc                   	int3   
  2247e3:	cc                   	int3   
  2247e4:	cc                   	int3   
  2247e5:	cc                   	int3   
  2247e6:	cc                   	int3   
  2247e7:	cc                   	int3   
  2247e8:	cc                   	int3   
  2247e9:	cc                   	int3   
  2247ea:	cc                   	int3   
  2247eb:	cc                   	int3   
  2247ec:	cc                   	int3   
  2247ed:	cc                   	int3   
  2247ee:	cc                   	int3   
  2247ef:	cc                   	int3   

00000000002247f0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE>:
                            fn $Flag(&self) -> bool {
  2247f0:	48 83 ec 18          	sub    $0x18,%rsp
  2247f4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2247f8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2247fd:	31 c0                	xor    %eax,%eax
  2247ff:	a8 01                	test   $0x1,%al
  224801:	75 1b                	jne    22481e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE+0x2e>
  224803:	48 8b 04 24          	mov    (%rsp),%rax
  224807:	8b 00                	mov    (%rax),%eax
  224809:	25 00 80 00 00       	and    $0x8000,%eax
  22480e:	3d 00 80 00 00       	cmp    $0x8000,%eax
  224813:	0f 94 c0             	sete   %al
  224816:	24 01                	and    $0x1,%al
  224818:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22481c:	eb 05                	jmp    224823 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4CMOV17hd5d35ef5d0ab644eE+0x33>
  22481e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224823:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224827:	24 01                	and    $0x1,%al
  224829:	0f b6 c0             	movzbl %al,%eax
  22482c:	48 83 c4 18          	add    $0x18,%rsp
  224830:	c3                   	retq   
  224831:	cc                   	int3   
  224832:	cc                   	int3   
  224833:	cc                   	int3   
  224834:	cc                   	int3   
  224835:	cc                   	int3   
  224836:	cc                   	int3   
  224837:	cc                   	int3   
  224838:	cc                   	int3   
  224839:	cc                   	int3   
  22483a:	cc                   	int3   
  22483b:	cc                   	int3   
  22483c:	cc                   	int3   
  22483d:	cc                   	int3   
  22483e:	cc                   	int3   
  22483f:	cc                   	int3   

0000000000224840 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E>:
                            fn $Flag(&self) -> bool {
  224840:	48 83 ec 18          	sub    $0x18,%rsp
  224844:	48 89 3c 24          	mov    %rdi,(%rsp)
  224848:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22484d:	31 c0                	xor    %eax,%eax
  22484f:	a8 01                	test   $0x1,%al
  224851:	75 1b                	jne    22486e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E+0x2e>
  224853:	48 8b 04 24          	mov    (%rsp),%rax
  224857:	8b 00                	mov    (%rax),%eax
  224859:	25 00 00 01 00       	and    $0x10000,%eax
  22485e:	3d 00 00 01 00       	cmp    $0x10000,%eax
  224863:	0f 94 c0             	sete   %al
  224866:	24 01                	and    $0x1,%al
  224868:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22486c:	eb 05                	jmp    224873 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PAT17hf9847a39a716d210E+0x33>
  22486e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224873:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224877:	24 01                	and    $0x1,%al
  224879:	0f b6 c0             	movzbl %al,%eax
  22487c:	48 83 c4 18          	add    $0x18,%rsp
  224880:	c3                   	retq   
  224881:	cc                   	int3   
  224882:	cc                   	int3   
  224883:	cc                   	int3   
  224884:	cc                   	int3   
  224885:	cc                   	int3   
  224886:	cc                   	int3   
  224887:	cc                   	int3   
  224888:	cc                   	int3   
  224889:	cc                   	int3   
  22488a:	cc                   	int3   
  22488b:	cc                   	int3   
  22488c:	cc                   	int3   
  22488d:	cc                   	int3   
  22488e:	cc                   	int3   
  22488f:	cc                   	int3   

0000000000224890 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E>:
                            fn $Flag(&self) -> bool {
  224890:	48 83 ec 18          	sub    $0x18,%rsp
  224894:	48 89 3c 24          	mov    %rdi,(%rsp)
  224898:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22489d:	31 c0                	xor    %eax,%eax
  22489f:	a8 01                	test   $0x1,%al
  2248a1:	75 1b                	jne    2248be <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E+0x2e>
  2248a3:	48 8b 04 24          	mov    (%rsp),%rax
  2248a7:	8b 00                	mov    (%rax),%eax
  2248a9:	25 00 00 02 00       	and    $0x20000,%eax
  2248ae:	3d 00 00 02 00       	cmp    $0x20000,%eax
  2248b3:	0f 94 c0             	sete   %al
  2248b6:	24 01                	and    $0x1,%al
  2248b8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2248bc:	eb 05                	jmp    2248c3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5PSE3617hd317cc1da7e2fd83E+0x33>
  2248be:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2248c3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2248c7:	24 01                	and    $0x1,%al
  2248c9:	0f b6 c0             	movzbl %al,%eax
  2248cc:	48 83 c4 18          	add    $0x18,%rsp
  2248d0:	c3                   	retq   
  2248d1:	cc                   	int3   
  2248d2:	cc                   	int3   
  2248d3:	cc                   	int3   
  2248d4:	cc                   	int3   
  2248d5:	cc                   	int3   
  2248d6:	cc                   	int3   
  2248d7:	cc                   	int3   
  2248d8:	cc                   	int3   
  2248d9:	cc                   	int3   
  2248da:	cc                   	int3   
  2248db:	cc                   	int3   
  2248dc:	cc                   	int3   
  2248dd:	cc                   	int3   
  2248de:	cc                   	int3   
  2248df:	cc                   	int3   

00000000002248e0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E>:
                            fn $Flag(&self) -> bool {
  2248e0:	48 83 ec 18          	sub    $0x18,%rsp
  2248e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2248e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2248ed:	31 c0                	xor    %eax,%eax
  2248ef:	a8 01                	test   $0x1,%al
  2248f1:	75 1b                	jne    22490e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E+0x2e>
  2248f3:	48 8b 04 24          	mov    (%rsp),%rax
  2248f7:	8b 00                	mov    (%rax),%eax
  2248f9:	25 00 00 04 00       	and    $0x40000,%eax
  2248fe:	3d 00 00 04 00       	cmp    $0x40000,%eax
  224903:	0f 94 c0             	sete   %al
  224906:	24 01                	and    $0x1,%al
  224908:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22490c:	eb 05                	jmp    224913 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PSN17h60577a5c82a8a730E+0x33>
  22490e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224913:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224917:	24 01                	and    $0x1,%al
  224919:	0f b6 c0             	movzbl %al,%eax
  22491c:	48 83 c4 18          	add    $0x18,%rsp
  224920:	c3                   	retq   
  224921:	cc                   	int3   
  224922:	cc                   	int3   
  224923:	cc                   	int3   
  224924:	cc                   	int3   
  224925:	cc                   	int3   
  224926:	cc                   	int3   
  224927:	cc                   	int3   
  224928:	cc                   	int3   
  224929:	cc                   	int3   
  22492a:	cc                   	int3   
  22492b:	cc                   	int3   
  22492c:	cc                   	int3   
  22492d:	cc                   	int3   
  22492e:	cc                   	int3   
  22492f:	cc                   	int3   

0000000000224930 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE>:
                            fn $Flag(&self) -> bool {
  224930:	48 83 ec 18          	sub    $0x18,%rsp
  224934:	48 89 3c 24          	mov    %rdi,(%rsp)
  224938:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22493d:	31 c0                	xor    %eax,%eax
  22493f:	a8 01                	test   $0x1,%al
  224941:	75 1b                	jne    22495e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE+0x2e>
  224943:	48 8b 04 24          	mov    (%rsp),%rax
  224947:	8b 00                	mov    (%rax),%eax
  224949:	25 00 00 08 00       	and    $0x80000,%eax
  22494e:	3d 00 00 08 00       	cmp    $0x80000,%eax
  224953:	0f 94 c0             	sete   %al
  224956:	24 01                	and    $0x1,%al
  224958:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22495c:	eb 05                	jmp    224963 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3CLF17h44d3ff3051150ffbE+0x33>
  22495e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224963:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224967:	24 01                	and    $0x1,%al
  224969:	0f b6 c0             	movzbl %al,%eax
  22496c:	48 83 c4 18          	add    $0x18,%rsp
  224970:	c3                   	retq   
  224971:	cc                   	int3   
  224972:	cc                   	int3   
  224973:	cc                   	int3   
  224974:	cc                   	int3   
  224975:	cc                   	int3   
  224976:	cc                   	int3   
  224977:	cc                   	int3   
  224978:	cc                   	int3   
  224979:	cc                   	int3   
  22497a:	cc                   	int3   
  22497b:	cc                   	int3   
  22497c:	cc                   	int3   
  22497d:	cc                   	int3   
  22497e:	cc                   	int3   
  22497f:	cc                   	int3   

0000000000224980 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E>:
                            fn $Flag(&self) -> bool {
  224980:	48 83 ec 18          	sub    $0x18,%rsp
  224984:	48 89 3c 24          	mov    %rdi,(%rsp)
  224988:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22498d:	31 c0                	xor    %eax,%eax
  22498f:	a8 01                	test   $0x1,%al
  224991:	75 1b                	jne    2249ae <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E+0x2e>
  224993:	48 8b 04 24          	mov    (%rsp),%rax
  224997:	8b 00                	mov    (%rax),%eax
  224999:	25 00 00 20 00       	and    $0x200000,%eax
  22499e:	3d 00 00 20 00       	cmp    $0x200000,%eax
  2249a3:	0f 94 c0             	sete   %al
  2249a6:	24 01                	and    $0x1,%al
  2249a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2249ac:	eb 05                	jmp    2249b3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4DTES17hff3c539260a1d7c2E+0x33>
  2249ae:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  2249b3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2249b7:	24 01                	and    $0x1,%al
  2249b9:	0f b6 c0             	movzbl %al,%eax
  2249bc:	48 83 c4 18          	add    $0x18,%rsp
  2249c0:	c3                   	retq   
  2249c1:	cc                   	int3   
  2249c2:	cc                   	int3   
  2249c3:	cc                   	int3   
  2249c4:	cc                   	int3   
  2249c5:	cc                   	int3   
  2249c6:	cc                   	int3   
  2249c7:	cc                   	int3   
  2249c8:	cc                   	int3   
  2249c9:	cc                   	int3   
  2249ca:	cc                   	int3   
  2249cb:	cc                   	int3   
  2249cc:	cc                   	int3   
  2249cd:	cc                   	int3   
  2249ce:	cc                   	int3   
  2249cf:	cc                   	int3   

00000000002249d0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE>:
                            fn $Flag(&self) -> bool {
  2249d0:	48 83 ec 18          	sub    $0x18,%rsp
  2249d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2249d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2249dd:	31 c0                	xor    %eax,%eax
  2249df:	a8 01                	test   $0x1,%al
  2249e1:	75 1b                	jne    2249fe <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE+0x2e>
  2249e3:	48 8b 04 24          	mov    (%rsp),%rax
  2249e7:	8b 00                	mov    (%rax),%eax
  2249e9:	25 00 00 40 00       	and    $0x400000,%eax
  2249ee:	3d 00 00 40 00       	cmp    $0x400000,%eax
  2249f3:	0f 94 c0             	sete   %al
  2249f6:	24 01                	and    $0x1,%al
  2249f8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2249fc:	eb 05                	jmp    224a03 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4ACPI17hc37e62878923772fE+0x33>
  2249fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224a03:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224a07:	24 01                	and    $0x1,%al
  224a09:	0f b6 c0             	movzbl %al,%eax
  224a0c:	48 83 c4 18          	add    $0x18,%rsp
  224a10:	c3                   	retq   
  224a11:	cc                   	int3   
  224a12:	cc                   	int3   
  224a13:	cc                   	int3   
  224a14:	cc                   	int3   
  224a15:	cc                   	int3   
  224a16:	cc                   	int3   
  224a17:	cc                   	int3   
  224a18:	cc                   	int3   
  224a19:	cc                   	int3   
  224a1a:	cc                   	int3   
  224a1b:	cc                   	int3   
  224a1c:	cc                   	int3   
  224a1d:	cc                   	int3   
  224a1e:	cc                   	int3   
  224a1f:	cc                   	int3   

0000000000224a20 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E>:
                            fn $Flag(&self) -> bool {
  224a20:	48 83 ec 18          	sub    $0x18,%rsp
  224a24:	48 89 3c 24          	mov    %rdi,(%rsp)
  224a28:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224a2d:	31 c0                	xor    %eax,%eax
  224a2f:	a8 01                	test   $0x1,%al
  224a31:	75 1b                	jne    224a4e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E+0x2e>
  224a33:	48 8b 04 24          	mov    (%rsp),%rax
  224a37:	8b 00                	mov    (%rax),%eax
  224a39:	25 00 00 80 00       	and    $0x800000,%eax
  224a3e:	3d 00 00 80 00       	cmp    $0x800000,%eax
  224a43:	0f 94 c0             	sete   %al
  224a46:	24 01                	and    $0x1,%al
  224a48:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224a4c:	eb 05                	jmp    224a53 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3MMX17hbb97e34e3c372d65E+0x33>
  224a4e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224a53:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224a57:	24 01                	and    $0x1,%al
  224a59:	0f b6 c0             	movzbl %al,%eax
  224a5c:	48 83 c4 18          	add    $0x18,%rsp
  224a60:	c3                   	retq   
  224a61:	cc                   	int3   
  224a62:	cc                   	int3   
  224a63:	cc                   	int3   
  224a64:	cc                   	int3   
  224a65:	cc                   	int3   
  224a66:	cc                   	int3   
  224a67:	cc                   	int3   
  224a68:	cc                   	int3   
  224a69:	cc                   	int3   
  224a6a:	cc                   	int3   
  224a6b:	cc                   	int3   
  224a6c:	cc                   	int3   
  224a6d:	cc                   	int3   
  224a6e:	cc                   	int3   
  224a6f:	cc                   	int3   

0000000000224a70 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E>:
                            fn $Flag(&self) -> bool {
  224a70:	48 83 ec 18          	sub    $0x18,%rsp
  224a74:	48 89 3c 24          	mov    %rdi,(%rsp)
  224a78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224a7d:	31 c0                	xor    %eax,%eax
  224a7f:	a8 01                	test   $0x1,%al
  224a81:	75 1b                	jne    224a9e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E+0x2e>
  224a83:	48 8b 04 24          	mov    (%rsp),%rax
  224a87:	8b 00                	mov    (%rax),%eax
  224a89:	25 00 00 00 01       	and    $0x1000000,%eax
  224a8e:	3d 00 00 00 01       	cmp    $0x1000000,%eax
  224a93:	0f 94 c0             	sete   %al
  224a96:	24 01                	and    $0x1,%al
  224a98:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224a9c:	eb 05                	jmp    224aa3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4FXSR17hbf73084f6c84ba29E+0x33>
  224a9e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224aa3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224aa7:	24 01                	and    $0x1,%al
  224aa9:	0f b6 c0             	movzbl %al,%eax
  224aac:	48 83 c4 18          	add    $0x18,%rsp
  224ab0:	c3                   	retq   
  224ab1:	cc                   	int3   
  224ab2:	cc                   	int3   
  224ab3:	cc                   	int3   
  224ab4:	cc                   	int3   
  224ab5:	cc                   	int3   
  224ab6:	cc                   	int3   
  224ab7:	cc                   	int3   
  224ab8:	cc                   	int3   
  224ab9:	cc                   	int3   
  224aba:	cc                   	int3   
  224abb:	cc                   	int3   
  224abc:	cc                   	int3   
  224abd:	cc                   	int3   
  224abe:	cc                   	int3   
  224abf:	cc                   	int3   

0000000000224ac0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE>:
                            fn $Flag(&self) -> bool {
  224ac0:	48 83 ec 18          	sub    $0x18,%rsp
  224ac4:	48 89 3c 24          	mov    %rdi,(%rsp)
  224ac8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224acd:	31 c0                	xor    %eax,%eax
  224acf:	a8 01                	test   $0x1,%al
  224ad1:	75 1b                	jne    224aee <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE+0x2e>
  224ad3:	48 8b 04 24          	mov    (%rsp),%rax
  224ad7:	8b 00                	mov    (%rax),%eax
  224ad9:	25 00 00 00 02       	and    $0x2000000,%eax
  224ade:	3d 00 00 00 02       	cmp    $0x2000000,%eax
  224ae3:	0f 94 c0             	sete   %al
  224ae6:	24 01                	and    $0x1,%al
  224ae8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224aec:	eb 05                	jmp    224af3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3SSE17h39b674e3cd8b874fE+0x33>
  224aee:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224af3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224af7:	24 01                	and    $0x1,%al
  224af9:	0f b6 c0             	movzbl %al,%eax
  224afc:	48 83 c4 18          	add    $0x18,%rsp
  224b00:	c3                   	retq   
  224b01:	cc                   	int3   
  224b02:	cc                   	int3   
  224b03:	cc                   	int3   
  224b04:	cc                   	int3   
  224b05:	cc                   	int3   
  224b06:	cc                   	int3   
  224b07:	cc                   	int3   
  224b08:	cc                   	int3   
  224b09:	cc                   	int3   
  224b0a:	cc                   	int3   
  224b0b:	cc                   	int3   
  224b0c:	cc                   	int3   
  224b0d:	cc                   	int3   
  224b0e:	cc                   	int3   
  224b0f:	cc                   	int3   

0000000000224b10 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE>:
                            fn $Flag(&self) -> bool {
  224b10:	48 83 ec 18          	sub    $0x18,%rsp
  224b14:	48 89 3c 24          	mov    %rdi,(%rsp)
  224b18:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224b1d:	31 c0                	xor    %eax,%eax
  224b1f:	a8 01                	test   $0x1,%al
  224b21:	75 1b                	jne    224b3e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE+0x2e>
  224b23:	48 8b 04 24          	mov    (%rsp),%rax
  224b27:	8b 00                	mov    (%rax),%eax
  224b29:	25 00 00 00 04       	and    $0x4000000,%eax
  224b2e:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  224b33:	0f 94 c0             	sete   %al
  224b36:	24 01                	and    $0x1,%al
  224b38:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224b3c:	eb 05                	jmp    224b43 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SSE217h65271c939668ca3fE+0x33>
  224b3e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224b43:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224b47:	24 01                	and    $0x1,%al
  224b49:	0f b6 c0             	movzbl %al,%eax
  224b4c:	48 83 c4 18          	add    $0x18,%rsp
  224b50:	c3                   	retq   
  224b51:	cc                   	int3   
  224b52:	cc                   	int3   
  224b53:	cc                   	int3   
  224b54:	cc                   	int3   
  224b55:	cc                   	int3   
  224b56:	cc                   	int3   
  224b57:	cc                   	int3   
  224b58:	cc                   	int3   
  224b59:	cc                   	int3   
  224b5a:	cc                   	int3   
  224b5b:	cc                   	int3   
  224b5c:	cc                   	int3   
  224b5d:	cc                   	int3   
  224b5e:	cc                   	int3   
  224b5f:	cc                   	int3   

0000000000224b60 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE>:
                            fn $Flag(&self) -> bool {
  224b60:	48 83 ec 18          	sub    $0x18,%rsp
  224b64:	48 89 3c 24          	mov    %rdi,(%rsp)
  224b68:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224b6d:	31 c0                	xor    %eax,%eax
  224b6f:	a8 01                	test   $0x1,%al
  224b71:	75 1b                	jne    224b8e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE+0x2e>
  224b73:	48 8b 04 24          	mov    (%rsp),%rax
  224b77:	8b 00                	mov    (%rax),%eax
  224b79:	25 00 00 00 08       	and    $0x8000000,%eax
  224b7e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  224b83:	0f 94 c0             	sete   %al
  224b86:	24 01                	and    $0x1,%al
  224b88:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224b8c:	eb 05                	jmp    224b93 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2SS17hdc6d8dd1dfd354adE+0x33>
  224b8e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224b93:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224b97:	24 01                	and    $0x1,%al
  224b99:	0f b6 c0             	movzbl %al,%eax
  224b9c:	48 83 c4 18          	add    $0x18,%rsp
  224ba0:	c3                   	retq   
  224ba1:	cc                   	int3   
  224ba2:	cc                   	int3   
  224ba3:	cc                   	int3   
  224ba4:	cc                   	int3   
  224ba5:	cc                   	int3   
  224ba6:	cc                   	int3   
  224ba7:	cc                   	int3   
  224ba8:	cc                   	int3   
  224ba9:	cc                   	int3   
  224baa:	cc                   	int3   
  224bab:	cc                   	int3   
  224bac:	cc                   	int3   
  224bad:	cc                   	int3   
  224bae:	cc                   	int3   
  224baf:	cc                   	int3   

0000000000224bb0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE>:
                            fn $Flag(&self) -> bool {
  224bb0:	48 83 ec 18          	sub    $0x18,%rsp
  224bb4:	48 89 3c 24          	mov    %rdi,(%rsp)
  224bb8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224bbd:	31 c0                	xor    %eax,%eax
  224bbf:	a8 01                	test   $0x1,%al
  224bc1:	75 1b                	jne    224bde <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE+0x2e>
  224bc3:	48 8b 04 24          	mov    (%rsp),%rax
  224bc7:	8b 00                	mov    (%rax),%eax
  224bc9:	25 00 00 00 10       	and    $0x10000000,%eax
  224bce:	3d 00 00 00 10       	cmp    $0x10000000,%eax
  224bd3:	0f 94 c0             	sete   %al
  224bd6:	24 01                	and    $0x1,%al
  224bd8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224bdc:	eb 05                	jmp    224be3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3HTT17h5d448ccbbdbe06feE+0x33>
  224bde:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224be3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224be7:	24 01                	and    $0x1,%al
  224be9:	0f b6 c0             	movzbl %al,%eax
  224bec:	48 83 c4 18          	add    $0x18,%rsp
  224bf0:	c3                   	retq   
  224bf1:	cc                   	int3   
  224bf2:	cc                   	int3   
  224bf3:	cc                   	int3   
  224bf4:	cc                   	int3   
  224bf5:	cc                   	int3   
  224bf6:	cc                   	int3   
  224bf7:	cc                   	int3   
  224bf8:	cc                   	int3   
  224bf9:	cc                   	int3   
  224bfa:	cc                   	int3   
  224bfb:	cc                   	int3   
  224bfc:	cc                   	int3   
  224bfd:	cc                   	int3   
  224bfe:	cc                   	int3   
  224bff:	cc                   	int3   

0000000000224c00 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E>:
                            fn $Flag(&self) -> bool {
  224c00:	48 83 ec 18          	sub    $0x18,%rsp
  224c04:	48 89 3c 24          	mov    %rdi,(%rsp)
  224c08:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224c0d:	31 c0                	xor    %eax,%eax
  224c0f:	a8 01                	test   $0x1,%al
  224c11:	75 1b                	jne    224c2e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E+0x2e>
  224c13:	48 8b 04 24          	mov    (%rsp),%rax
  224c17:	8b 00                	mov    (%rax),%eax
  224c19:	25 00 00 00 20       	and    $0x20000000,%eax
  224c1e:	3d 00 00 00 20       	cmp    $0x20000000,%eax
  224c23:	0f 94 c0             	sete   %al
  224c26:	24 01                	and    $0x1,%al
  224c28:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224c2c:	eb 05                	jmp    224c33 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3TM117h7cebe2a02b687921E+0x33>
  224c2e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224c33:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224c37:	24 01                	and    $0x1,%al
  224c39:	0f b6 c0             	movzbl %al,%eax
  224c3c:	48 83 c4 18          	add    $0x18,%rsp
  224c40:	c3                   	retq   
  224c41:	cc                   	int3   
  224c42:	cc                   	int3   
  224c43:	cc                   	int3   
  224c44:	cc                   	int3   
  224c45:	cc                   	int3   
  224c46:	cc                   	int3   
  224c47:	cc                   	int3   
  224c48:	cc                   	int3   
  224c49:	cc                   	int3   
  224c4a:	cc                   	int3   
  224c4b:	cc                   	int3   
  224c4c:	cc                   	int3   
  224c4d:	cc                   	int3   
  224c4e:	cc                   	int3   
  224c4f:	cc                   	int3   

0000000000224c50 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E>:
                            fn $Flag(&self) -> bool {
  224c50:	48 83 ec 18          	sub    $0x18,%rsp
  224c54:	48 89 3c 24          	mov    %rdi,(%rsp)
  224c58:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224c5d:	31 c0                	xor    %eax,%eax
  224c5f:	a8 01                	test   $0x1,%al
  224c61:	75 1b                	jne    224c7e <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E+0x2e>
  224c63:	48 8b 04 24          	mov    (%rsp),%rax
  224c67:	8b 00                	mov    (%rax),%eax
  224c69:	25 00 00 00 40       	and    $0x40000000,%eax
  224c6e:	3d 00 00 00 40       	cmp    $0x40000000,%eax
  224c73:	0f 94 c0             	sete   %al
  224c76:	24 01                	and    $0x1,%al
  224c78:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224c7c:	eb 05                	jmp    224c83 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4IA6417h1c56caf4a3080304E+0x33>
  224c7e:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224c83:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224c87:	24 01                	and    $0x1,%al
  224c89:	0f b6 c0             	movzbl %al,%eax
  224c8c:	48 83 c4 18          	add    $0x18,%rsp
  224c90:	c3                   	retq   
  224c91:	cc                   	int3   
  224c92:	cc                   	int3   
  224c93:	cc                   	int3   
  224c94:	cc                   	int3   
  224c95:	cc                   	int3   
  224c96:	cc                   	int3   
  224c97:	cc                   	int3   
  224c98:	cc                   	int3   
  224c99:	cc                   	int3   
  224c9a:	cc                   	int3   
  224c9b:	cc                   	int3   
  224c9c:	cc                   	int3   
  224c9d:	cc                   	int3   
  224c9e:	cc                   	int3   
  224c9f:	cc                   	int3   

0000000000224ca0 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE>:
                            fn $Flag(&self) -> bool {
  224ca0:	48 83 ec 18          	sub    $0x18,%rsp
  224ca4:	48 89 3c 24          	mov    %rdi,(%rsp)
  224ca8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  224cad:	31 c0                	xor    %eax,%eax
  224caf:	a8 01                	test   $0x1,%al
  224cb1:	75 1b                	jne    224cce <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE+0x2e>
  224cb3:	48 8b 04 24          	mov    (%rsp),%rax
  224cb7:	8b 00                	mov    (%rax),%eax
  224cb9:	25 00 00 00 80       	and    $0x80000000,%eax
  224cbe:	3d 00 00 00 80       	cmp    $0x80000000,%eax
  224cc3:	0f 94 c0             	sete   %al
  224cc6:	24 01                	and    $0x1,%al
  224cc8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  224ccc:	eb 05                	jmp    224cd3 <_ZN136_$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$$LT$r3_kernel..cpu..cpuid..FlagsEDX$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$3PBE17hb4e700b254a29dcdE+0x33>
  224cce:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        fn $($item)*
  224cd3:	8a 44 24 0f          	mov    0xf(%rsp),%al
  224cd7:	24 01                	and    $0x1,%al
  224cd9:	0f b6 c0             	movzbl %al,%eax
  224cdc:	48 83 c4 18          	add    $0x18,%rsp
  224ce0:	c3                   	retq   
  224ce1:	cc                   	int3   
  224ce2:	cc                   	int3   
  224ce3:	cc                   	int3   
  224ce4:	cc                   	int3   
  224ce5:	cc                   	int3   
  224ce6:	cc                   	int3   
  224ce7:	cc                   	int3   
  224ce8:	cc                   	int3   
  224ce9:	cc                   	int3   
  224cea:	cc                   	int3   
  224ceb:	cc                   	int3   
  224cec:	cc                   	int3   
  224ced:	cc                   	int3   
  224cee:	cc                   	int3   
  224cef:	cc                   	int3   

0000000000224cf0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfdf406d9eb83fdceE>:
            fn deref(&self) -> &$T {
  224cf0:	48 83 ec 18          	sub    $0x18,%rsp
  224cf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  224cf9:	48 8d 05 a0 d0 01 00 	lea    0x1d0a0(%rip),%rax        # 241da0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6d02b75ade5afdfcE>
  224d00:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  224d05:	48 8d 3d 94 d0 01 00 	lea    0x1d094(%rip),%rdi        # 241da0 <_ZN79_$LT$r3_kernel..cpu..cpuid..CPU_FEATURES$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h6d02b75ade5afdfcE>
  224d0c:	e8 9f 4d fe ff       	callq  209ab0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbac96a306c764545E>
  224d11:	48 89 04 24          	mov    %rax,(%rsp)
  224d15:	48 8b 04 24          	mov    (%rsp),%rax
            }
  224d19:	48 83 c4 18          	add    $0x18,%rsp
  224d1d:	c3                   	retq   
  224d1e:	cc                   	int3   
  224d1f:	cc                   	int3   

0000000000224d20 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E>:
    pub fn probe_cpu_cores() -> Result<Processors, MADTError> {
  224d20:	48 81 ec 28 03 00 00 	sub    $0x328,%rsp
  224d27:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  224d2e:	00 
  224d2f:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  224d36:	00 
        let acpi_lock = ACPI.lock();
  224d37:	48 8d 3d 2c bf fd ff 	lea    -0x240d4(%rip),%rdi        # 200c6a <_ZN9r3_kernel4acpi4rsdt4ACPI17h62c3874d522fb76eE>
  224d3e:	e8 9d e6 fe ff       	callq  2133e0 <_ZN71_$LT$r3_kernel..acpi..rsdt..ACPI$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1ceb4dff75302745E>
  224d43:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  224d4a:	00 
  224d4b:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  224d52:	00 
  224d53:	e8 08 74 00 00       	callq  22c160 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>
  224d58:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  224d5f:	00 
  224d60:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  224d67:	00 
        if acpi_lock.is_none() {
  224d68:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  224d6f:	00 
  224d70:	e8 cb 77 00 00       	callq  22c540 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  224d75:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  224d7c:	00 
  224d7d:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  224d84:	00 
  224d85:	e8 06 b8 fe ff       	callq  210590 <_ZN4core6option15Option$LT$T$GT$7is_none17h6d69479f60fd2274E>
  224d8a:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  224d91:	8a 84 24 bf 00 00 00 	mov    0xbf(%rsp),%al
  224d98:	a8 01                	test   $0x1,%al
  224d9a:	75 1c                	jne    224db8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x98>
  224d9c:	eb 00                	jmp    224d9e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x7e>
        let madt_entry_opt = acpi_lock.as_ref().unwrap().get_table("APIC");
  224d9e:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  224da5:	00 
  224da6:	e8 95 77 00 00       	callq  22c540 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>
  224dab:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  224db2:	00 
  224db3:	e9 0e 01 00 00       	jmpq   224ec6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x1a6>
            log::error!("ACPI not initialized");
  224db8:	48 c7 84 24 f0 00 00 	movq   $0x1,0xf0(%rsp)
  224dbf:	00 01 00 00 00 
  224dc4:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  224dcb:	00 
  224dcc:	48 8d 35 65 b8 fd ff 	lea    -0x2479b(%rip),%rsi        # 200638 <str.0+0x118>
  224dd3:	e8 18 cd fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  224dd8:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  224ddf:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  224de6:	a8 01                	test   $0x1,%al
  224de8:	75 0c                	jne    224df6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0xd6>
  224dea:	eb 00                	jmp    224dec <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0xcc>
  224dec:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  224df3:	00 
  224df4:	eb 60                	jmp    224e56 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x136>
  224df6:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  224dfd:	00 
  224dfe:	48 8b 3d 0b 63 01 00 	mov    0x1630b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  224e05:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  224e0c:	00 
  224e0d:	e8 ae 3e 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  224e12:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  224e19:	00 
  224e1a:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  224e21:	00 
  224e22:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  224e29:	00 
  224e2a:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  224e31:	00 
  224e32:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  224e39:	00 
  224e3a:	e8 b1 cc fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  224e3f:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  224e46:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  224e4d:	24 01                	and    $0x1,%al
  224e4f:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  224e56:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  224e5d:	01 
  224e5e:	75 11                	jne    224e71 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x151>
  224e60:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  224e67:	00 
            return Err(MADTError::NoTable);
  224e68:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  224e6c:	c6 00 01             	movb   $0x1,(%rax)
  224e6f:	eb 43                	jmp    224eb4 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x194>
            log::error!("ACPI not initialized");
  224e71:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  224e78:	00 
  224e79:	48 8d 35 50 48 01 00 	lea    0x14850(%rip),%rsi        # 2396d0 <memcmp+0x3120>
  224e80:	ba 01 00 00 00       	mov    $0x1,%edx
  224e85:	48 8d 0d dc dc fd ff 	lea    -0x22324(%rip),%rcx        # 202b68 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x18>
  224e8c:	31 c0                	xor    %eax,%eax
  224e8e:	41 89 c0             	mov    %eax,%r8d
  224e91:	e8 2a 14 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  224e96:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  224e9d:	00 
  224e9e:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  224ea5:	00 
  224ea6:	48 8d 15 33 48 01 00 	lea    0x14833(%rip),%rdx        # 2396e0 <memcmp+0x3130>
  224ead:	e8 3e b7 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  224eb2:	eb ac                	jmp    224e60 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x140>
    }
  224eb4:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  224ebb:	00 
  224ebc:	e8 1f 69 fe ff       	callq  20b7e0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  224ec1:	e9 a3 01 00 00       	jmpq   225069 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x349>
  224ec6:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  224ecd:	00 
        let madt_entry_opt = acpi_lock.as_ref().unwrap().get_table("APIC");
  224ece:	e8 7d ae fe ff       	callq  20fd50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h90414c2124ff25dcE>
  224ed3:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  224eda:	00 
  224edb:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  224ee2:	00 
  224ee3:	48 8d 35 2e 48 01 00 	lea    0x1482e(%rip),%rsi        # 239718 <memcmp+0x3168>
  224eea:	e8 e1 b0 fe ff       	callq  20ffd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h05f4a4cd91d753b7E>
  224eef:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  224ef6:	00 
  224ef7:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  224efe:	00 
  224eff:	48 8d 35 2a ba fd ff 	lea    -0x245d6(%rip),%rsi        # 200930 <str.2+0xf0>
  224f06:	ba 04 00 00 00       	mov    $0x4,%edx
  224f0b:	e8 80 df fe ff       	callq  212e90 <_ZN9r3_kernel4acpi4rsdt4Acpi9get_table17h66b4c4d932b5dd80E>
  224f10:	48 89 94 24 40 01 00 	mov    %rdx,0x140(%rsp)
  224f17:	00 
  224f18:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  224f1f:	00 
        if madt_entry_opt.is_none() {
  224f20:	48 8d bc 24 38 01 00 	lea    0x138(%rsp),%rdi
  224f27:	00 
  224f28:	e8 d3 b5 fe ff       	callq  210500 <_ZN4core6option15Option$LT$T$GT$7is_none17h2db87b08cdf3ef67E>
  224f2d:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  224f34:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
  224f3b:	a8 01                	test   $0x1,%al
  224f3d:	75 2b                	jne    224f6a <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x24a>
  224f3f:	eb 00                	jmp    224f41 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x221>
        let madt_address = madt_entry_opt.unwrap();
  224f41:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  224f48:	00 
  224f49:	48 8b b4 24 40 01 00 	mov    0x140(%rsp),%rsi
  224f50:	00 
  224f51:	48 8d 15 20 48 01 00 	lea    0x14820(%rip),%rdx        # 239778 <memcmp+0x31c8>
  224f58:	e8 33 b3 fe ff       	callq  210290 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8ab499557c8ae386E>
  224f5d:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  224f64:	00 
  224f65:	e9 0f 01 00 00       	jmpq   225079 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x359>
            log::error!("APIC MADT not found");
  224f6a:	48 c7 84 24 48 01 00 	movq   $0x1,0x148(%rsp)
  224f71:	00 01 00 00 00 
  224f76:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  224f7d:	00 
  224f7e:	48 8d 35 b3 b6 fd ff 	lea    -0x2494d(%rip),%rsi        # 200638 <str.0+0x118>
  224f85:	e8 66 cb fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  224f8a:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  224f91:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  224f98:	a8 01                	test   $0x1,%al
  224f9a:	75 0c                	jne    224fa8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x288>
  224f9c:	eb 00                	jmp    224f9e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x27e>
  224f9e:	c6 84 24 57 01 00 00 	movb   $0x0,0x157(%rsp)
  224fa5:	00 
  224fa6:	eb 60                	jmp    225008 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x2e8>
  224fa8:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  224faf:	00 
  224fb0:	48 8b 3d 59 61 01 00 	mov    0x16159(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  224fb7:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  224fbe:	00 
  224fbf:	e8 fc 3c 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  224fc4:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  224fcb:	00 
  224fcc:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  224fd3:	00 
  224fd4:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  224fdb:	00 
  224fdc:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  224fe3:	00 
  224fe4:	48 8d b4 24 58 01 00 	lea    0x158(%rsp),%rsi
  224feb:	00 
  224fec:	e8 ff ca fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  224ff1:	88 84 24 95 00 00 00 	mov    %al,0x95(%rsp)
  224ff8:	8a 84 24 95 00 00 00 	mov    0x95(%rsp),%al
  224fff:	24 01                	and    $0x1,%al
  225001:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  225008:	f6 84 24 57 01 00 00 	testb  $0x1,0x157(%rsp)
  22500f:	01 
  225010:	75 14                	jne    225026 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x306>
  225012:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  225019:	00 
            return Err(MADTError::NoTable);
  22501a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  22501e:	c6 00 01             	movb   $0x1,(%rax)
  225021:	e9 8e fe ff ff       	jmpq   224eb4 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x194>
            log::error!("APIC MADT not found");
  225026:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  22502d:	00 
  22502e:	48 8d 35 fb 46 01 00 	lea    0x146fb(%rip),%rsi        # 239730 <memcmp+0x3180>
  225035:	ba 01 00 00 00       	mov    $0x1,%edx
  22503a:	48 8d 0d 27 db fd ff 	lea    -0x224d9(%rip),%rcx        # 202b68 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x18>
  225041:	31 c0                	xor    %eax,%eax
  225043:	41 89 c0             	mov    %eax,%r8d
  225046:	e8 75 12 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22504b:	48 8b b4 24 48 01 00 	mov    0x148(%rsp),%rsi
  225052:	00 
  225053:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  22505a:	00 
  22505b:	48 8d 15 de 46 01 00 	lea    0x146de(%rip),%rdx        # 239740 <memcmp+0x3190>
  225062:	e8 89 b5 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  225067:	eb a9                	jmp    225012 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x2f2>
  225069:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  225070:	00 
    }
  225071:	48 81 c4 28 03 00 00 	add    $0x328,%rsp
  225078:	c3                   	retq   
        let lapic_root: &LAPICRootHeader = unsafe { &*madt_address.get_ptr() };
  225079:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  225080:	00 
  225081:	e8 aa 2a ff ff       	callq  217b30 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8281fca1aa85ca7aE>
  225086:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22508d:	00 
  22508e:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  225095:	00 
  225096:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  22509d:	00 
        assert_eq!(lapic_root.header.length > 8, true);
  22509e:	8b 40 04             	mov    0x4(%rax),%eax
  2250a1:	83 e8 09             	sub    $0x9,%eax
  2250a4:	0f 93 84 24 ae 01 00 	setae  0x1ae(%rsp)
  2250ab:	00 
  2250ac:	48 8d 84 24 ae 01 00 	lea    0x1ae(%rsp),%rax
  2250b3:	00 
  2250b4:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  2250bb:	00 
  2250bc:	48 8d 05 cd da fd ff 	lea    -0x22533(%rip),%rax        # 202b90 <_ZN9r3_kernel3cpu5cpuid12CPU_FEATURES17hba46dead8c2f8e4cE+0x40>
  2250c3:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  2250ca:	00 
  2250cb:	48 8b 84 24 98 01 00 	mov    0x198(%rsp),%rax
  2250d2:	00 
  2250d3:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2250d8:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  2250df:	00 
  2250e0:	48 8b 8c 24 a0 01 00 	mov    0x1a0(%rsp),%rcx
  2250e7:	00 
  2250e8:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  2250ef:	00 
  2250f0:	48 89 8c 24 c0 02 00 	mov    %rcx,0x2c0(%rsp)
  2250f7:	00 
  2250f8:	8a 00                	mov    (%rax),%al
  2250fa:	34 ff                	xor    $0xff,%al
  2250fc:	a8 01                	test   $0x1,%al
  2250fe:	75 0f                	jne    22510f <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x3ef>
        let mut cpu_cores: Vec<PerProcessorLAPIC> = Vec::new();
  225100:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  225107:	00 
  225108:	e8 23 be fe ff       	callq  210f30 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdf791d5e5fd80031E>
  22510d:	eb 39                	jmp    225148 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x428>
  22510f:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  225116:	00 
  225117:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
        assert_eq!(lapic_root.header.length > 8, true);
  22511c:	c6 84 24 af 01 00 00 	movb   $0x0,0x1af(%rsp)
  225123:	00 
  225124:	48 c7 84 24 b0 01 00 	movq   $0x0,0x1b0(%rsp)
  22512b:	00 00 00 00 00 
  225130:	4c 8d 05 59 46 01 00 	lea    0x14659(%rip),%r8        # 239790 <memcmp+0x31e0>
  225137:	31 ff                	xor    %edi,%edi
  225139:	48 8d 8c 24 b0 01 00 	lea    0x1b0(%rsp),%rcx
  225140:	00 
  225141:	e8 0a 9a ff ff       	callq  21eb50 <_ZN4core9panicking13assert_failed17hf2af0f10cc8c402bE>
  225146:	0f 0b                	ud2    
        let table_end = madt_address.as_u64() + lapic_root.header.length as u64;
  225148:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22514f:	00 
  225150:	e8 ab 0d 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  225155:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22515a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22515f:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  225166:	00 
  225167:	8b 49 04             	mov    0x4(%rcx),%ecx
  22516a:	48 01 c8             	add    %rcx,%rax
  22516d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  225172:	0f 92 c0             	setb   %al
  225175:	a8 01                	test   $0x1,%al
  225177:	75 21                	jne    22519a <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x47a>
  225179:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22517e:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  225185:	00 
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  225186:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22518d:	00 
  22518e:	e8 6d 0d 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  225193:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  225198:	eb 1a                	jmp    2251b4 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x494>
        let table_end = madt_address.as_u64() + lapic_root.header.length as u64;
  22519a:	48 8d 3d ff d9 fd ff 	lea    -0x22601(%rip),%rdi        # 202ba0 <str.0>
  2251a1:	48 8d 15 00 46 01 00 	lea    0x14600(%rip),%rdx        # 2397a8 <memcmp+0x31f8>
  2251a8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2251ad:	e8 ae e2 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2251b2:	0f 0b                	ud2    
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  2251b4:	eb 00                	jmp    2251b6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x496>
  2251b6:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2251bb:	48 83 c0 2c          	add    $0x2c,%rax
  2251bf:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2251c4:	0f 92 c0             	setb   %al
  2251c7:	a8 01                	test   $0x1,%al
  2251c9:	75 33                	jne    2251fe <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x4de>
  2251cb:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2251d0:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2251d7:	00 
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  2251d8:	48 c7 84 24 00 02 00 	movq   $0x4,0x200(%rsp)
  2251df:	00 04 00 00 00 
  2251e4:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  2251eb:	00 
  2251ec:	48 8d 35 45 b4 fd ff 	lea    -0x24bbb(%rip),%rsi        # 200638 <str.0+0x118>
  2251f3:	e8 f8 c8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2251f8:	88 44 24 57          	mov    %al,0x57(%rsp)
  2251fc:	eb 1a                	jmp    225218 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x4f8>
        let mut entries_start = madt_address.as_u64() + mem::size_of::<LAPICRootHeader>() as u64;
  2251fe:	48 8d 3d 9b d9 fd ff 	lea    -0x22665(%rip),%rdi        # 202ba0 <str.0>
  225205:	48 8d 15 b4 45 01 00 	lea    0x145b4(%rip),%rdx        # 2397c0 <memcmp+0x3210>
  22520c:	be 1c 00 00 00       	mov    $0x1c,%esi
  225211:	e8 4a e2 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  225216:	0f 0b                	ud2    
  225218:	8a 44 24 57          	mov    0x57(%rsp),%al
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  22521c:	a8 01                	test   $0x1,%al
  22521e:	75 0c                	jne    22522c <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x50c>
  225220:	eb 00                	jmp    225222 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x502>
  225222:	c6 84 24 0f 02 00 00 	movb   $0x0,0x20f(%rsp)
  225229:	00 
  22522a:	eb 5a                	jmp    225286 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x566>
  22522c:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  225233:	00 
  225234:	48 8b 3d d5 5e 01 00 	mov    0x15ed5(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22523b:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  225242:	00 
  225243:	e8 78 3a 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  225248:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  22524f:	00 
  225250:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  225257:	00 
  225258:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  22525f:	00 
  225260:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  225267:	00 
  225268:	48 8d b4 24 10 02 00 	lea    0x210(%rsp),%rsi
  22526f:	00 
  225270:	e8 7b c8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  225275:	88 44 24 56          	mov    %al,0x56(%rsp)
  225279:	8a 44 24 56          	mov    0x56(%rsp),%al
  22527d:	24 01                	and    $0x1,%al
  22527f:	88 84 24 0f 02 00 00 	mov    %al,0x20f(%rsp)
  225286:	f6 84 24 0f 02 00 00 	testb  $0x1,0x20f(%rsp)
  22528d:	01 
  22528e:	75 18                	jne    2252a8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x588>
  225290:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
        while entries_start < table_end {
  225295:	48 39 84 24 f8 01 00 	cmp    %rax,0x1f8(%rsp)
  22529c:	00 
  22529d:	0f 82 f9 00 00 00    	jb     22539c <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x67c>
  2252a3:	e9 d8 00 00 00       	jmpq   225380 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x660>
  2252a8:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
        log::debug!("APIC Tables size: {}", table_end - entries_start);
  2252ad:	48 2b 84 24 f8 01 00 	sub    0x1f8(%rsp),%rax
  2252b4:	00 
  2252b5:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2252ba:	0f 92 c0             	setb   %al
  2252bd:	a8 01                	test   $0x1,%al
  2252bf:	75 45                	jne    225306 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x5e6>
  2252c1:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2252c6:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  2252cd:	00 
  2252ce:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  2252d5:	00 
  2252d6:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  2252dd:	00 
  2252de:	48 8b bc 24 58 02 00 	mov    0x258(%rsp),%rdi
  2252e5:	00 
  2252e6:	48 89 bc 24 d0 02 00 	mov    %rdi,0x2d0(%rsp)
  2252ed:	00 
  2252ee:	48 8b 35 6b 5e 01 00 	mov    0x15e6b(%rip),%rsi        # 23b160 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  2252f5:	e8 46 9b fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  2252fa:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2252ff:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  225304:	eb 1a                	jmp    225320 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x600>
  225306:	48 8d 3d c3 d8 fd ff 	lea    -0x2273d(%rip),%rdi        # 202bd0 <str.1>
  22530d:	48 8d 15 d4 44 01 00 	lea    0x144d4(%rip),%rdx        # 2397e8 <memcmp+0x3238>
  225314:	be 21 00 00 00       	mov    $0x21,%esi
  225319:	e8 42 e1 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22531e:	0f 0b                	ud2    
  225320:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  225325:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22532a:	48 89 8c 24 48 02 00 	mov    %rcx,0x248(%rsp)
  225331:	00 
  225332:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  225339:	00 
  22533a:	48 8d 8c 24 48 02 00 	lea    0x248(%rsp),%rcx
  225341:	00 
  225342:	48 8d bc 24 18 02 00 	lea    0x218(%rsp),%rdi
  225349:	00 
  22534a:	48 8d 35 87 44 01 00 	lea    0x14487(%rip),%rsi        # 2397d8 <memcmp+0x3228>
  225351:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  225357:	4c 89 c2             	mov    %r8,%rdx
  22535a:	e8 61 0f fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22535f:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
  225366:	00 
  225367:	48 8d bc 24 18 02 00 	lea    0x218(%rsp),%rdi
  22536e:	00 
  22536f:	48 8d 15 8a 44 01 00 	lea    0x1448a(%rip),%rdx        # 239800 <memcmp+0x3250>
  225376:	e8 75 b2 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22537b:	e9 10 ff ff ff       	jmpq   225290 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x570>
  225380:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  225387:	00 
        let lapic_address = p_to_v(PhysicalAddress::from_u64(lapic_root.lapic_phy_addr as u64));
  225388:	8b 40 24             	mov    0x24(%rax),%eax
  22538b:	89 c7                	mov    %eax,%edi
  22538d:	e8 3e 0d 00 00       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  225392:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  225397:	e9 38 01 00 00       	jmpq   2254d4 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x7b4>
            let lapic_entry_addr = VirtualAddress::from_u64(entries_start);
  22539c:	48 8b bc 24 f8 01 00 	mov    0x1f8(%rsp),%rdi
  2253a3:	00 
  2253a4:	e8 67 0b 00 00       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  2253a9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2253ae:	48 89 84 24 d8 02 00 	mov    %rax,0x2d8(%rsp)
  2253b5:	00 
  2253b6:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            let lapic_entry: &LAPICEntry = unsafe { &*lapic_entry_addr.get_ptr() };
  2253bb:	e8 00 28 ff ff       	callq  217bc0 <_ZN9r3_kernel2mm14VirtualAddress7get_ptr17h8cc50a1d58229d14E>
  2253c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2253c5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2253ca:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  2253d1:	00 
            if lapic_entry.entry_type == 0 {
  2253d2:	80 38 00             	cmpb   $0x0,(%rax)
  2253d5:	75 0f                	jne    2253e6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6c6>
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  2253d7:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  2253de:	00 
  2253df:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2253e4:	eb 29                	jmp    22540f <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6ef>
  2253e6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
            entries_start = entries_start + lapic_entry.entry_size as u64;
  2253eb:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
  2253f2:	00 
  2253f3:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
  2253f7:	48 01 c8             	add    %rcx,%rax
  2253fa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2253ff:	0f 92 c0             	setb   %al
  225402:	a8 01                	test   $0x1,%al
  225404:	0f 85 b0 00 00 00    	jne    2254ba <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x79a>
  22540a:	e9 99 00 00 00       	jmpq   2254a8 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x788>
  22540f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  225414:	48 83 c0 02          	add    $0x2,%rax
  225418:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22541d:	0f 92 c0             	setb   %al
  225420:	a8 01                	test   $0x1,%al
  225422:	75 6a                	jne    22548e <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x76e>
  225424:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  225429:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  225430:	00 
                let proc_entry: PerProcessorLAPIC = unsafe { *(body_addr as *const _) };
  225431:	66 8b 48 04          	mov    0x4(%rax),%cx
  225435:	66 89 8c 24 6c 02 00 	mov    %cx,0x26c(%rsp)
  22543c:	00 
  22543d:	8b 00                	mov    (%rax),%eax
  22543f:	89 84 24 68 02 00 00 	mov    %eax,0x268(%rsp)
                cpu_cores.push(proc_entry);
  225446:	66 8b 84 24 6c 02 00 	mov    0x26c(%rsp),%ax
  22544d:	00 
  22544e:	66 89 84 24 74 02 00 	mov    %ax,0x274(%rsp)
  225455:	00 
  225456:	8b 84 24 68 02 00 00 	mov    0x268(%rsp),%eax
  22545d:	89 84 24 70 02 00 00 	mov    %eax,0x270(%rsp)
  225464:	8b 84 24 70 02 00 00 	mov    0x270(%rsp),%eax
  22546b:	89 c6                	mov    %eax,%esi
  22546d:	0f b7 84 24 74 02 00 	movzwl 0x274(%rsp),%eax
  225474:	00 
  225475:	48 c1 e0 20          	shl    $0x20,%rax
  225479:	48 09 c6             	or     %rax,%rsi
  22547c:	48 8d bc 24 e0 01 00 	lea    0x1e0(%rsp),%rdi
  225483:	00 
  225484:	e8 77 bd fe ff       	callq  211200 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hbfbc57bcf85b3291E>
  225489:	e9 58 ff ff ff       	jmpq   2253e6 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x6c6>
                let body_addr = entries_start + mem::size_of::<LAPICEntry>() as u64;
  22548e:	48 8d 3d 0b d7 fd ff 	lea    -0x228f5(%rip),%rdi        # 202ba0 <str.0>
  225495:	48 8d 15 9c 43 01 00 	lea    0x1439c(%rip),%rdx        # 239838 <memcmp+0x3288>
  22549c:	be 1c 00 00 00       	mov    $0x1c,%esi
  2254a1:	e8 ba df 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2254a6:	0f 0b                	ud2    
  2254a8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            entries_start = entries_start + lapic_entry.entry_size as u64;
  2254ad:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  2254b4:	00 
        while entries_start < table_end {
  2254b5:	e9 d6 fd ff ff       	jmpq   225290 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x570>
            entries_start = entries_start + lapic_entry.entry_size as u64;
  2254ba:	48 8d 3d df d6 fd ff 	lea    -0x22921(%rip),%rdi        # 202ba0 <str.0>
  2254c1:	48 8d 15 88 43 01 00 	lea    0x14388(%rip),%rdx        # 239850 <memcmp+0x32a0>
  2254c8:	be 1c 00 00 00       	mov    $0x1c,%esi
  2254cd:	e8 8e df 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2254d2:	0f 0b                	ud2    
  2254d4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        let lapic_address = p_to_v(PhysicalAddress::from_u64(lapic_root.lapic_phy_addr as u64));
  2254d9:	e8 92 0c 00 00       	callq  226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>
  2254de:	48 89 04 24          	mov    %rax,(%rsp)
  2254e2:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  2254e9:	00 
  2254ea:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2254f1:	00 
  2254f2:	48 8b 0c 24          	mov    (%rsp),%rcx
            cores: cpu_cores,
  2254f6:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  2254fd:	00 
  2254fe:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  225505:	00 
  225506:	48 8b 94 24 e8 01 00 	mov    0x1e8(%rsp),%rdx
  22550d:	00 
  22550e:	48 89 94 24 a0 02 00 	mov    %rdx,0x2a0(%rsp)
  225515:	00 
  225516:	48 8b 94 24 f0 01 00 	mov    0x1f0(%rsp),%rdx
  22551d:	00 
  22551e:	48 89 94 24 a8 02 00 	mov    %rdx,0x2a8(%rsp)
  225525:	00 
        Ok(Processors {
  225526:	48 8b 94 24 98 02 00 	mov    0x298(%rsp),%rdx
  22552d:	00 
  22552e:	48 89 94 24 78 02 00 	mov    %rdx,0x278(%rsp)
  225535:	00 
  225536:	48 8b 94 24 a0 02 00 	mov    0x2a0(%rsp),%rdx
  22553d:	00 
  22553e:	48 89 94 24 80 02 00 	mov    %rdx,0x280(%rsp)
  225545:	00 
  225546:	48 8b 94 24 a8 02 00 	mov    0x2a8(%rsp),%rdx
  22554d:	00 
  22554e:	48 89 94 24 88 02 00 	mov    %rdx,0x288(%rsp)
  225555:	00 
  225556:	48 89 8c 24 90 02 00 	mov    %rcx,0x290(%rsp)
  22555d:	00 
  22555e:	48 8b 8c 24 78 02 00 	mov    0x278(%rsp),%rcx
  225565:	00 
  225566:	48 89 48 08          	mov    %rcx,0x8(%rax)
  22556a:	48 8b 8c 24 80 02 00 	mov    0x280(%rsp),%rcx
  225571:	00 
  225572:	48 89 48 10          	mov    %rcx,0x10(%rax)
  225576:	48 8b 8c 24 88 02 00 	mov    0x288(%rsp),%rcx
  22557d:	00 
  22557e:	48 89 48 18          	mov    %rcx,0x18(%rax)
  225582:	48 8b 8c 24 90 02 00 	mov    0x290(%rsp),%rcx
  225589:	00 
  22558a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  22558e:	c6 00 00             	movb   $0x0,(%rax)
    }
  225591:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  225598:	00 
  225599:	e8 42 62 fe ff       	callq  20b7e0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$core..option..Option$LT$r3_kernel..acpi..rsdt..Acpi$GT$$GT$$GT$17h6388fdcd0aa693b4E>
  22559e:	e9 c6 fa ff ff       	jmpq   225069 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E+0x349>
  2255a3:	cc                   	int3   
  2255a4:	cc                   	int3   
  2255a5:	cc                   	int3   
  2255a6:	cc                   	int3   
  2255a7:	cc                   	int3   
  2255a8:	cc                   	int3   
  2255a9:	cc                   	int3   
  2255aa:	cc                   	int3   
  2255ab:	cc                   	int3   
  2255ac:	cc                   	int3   
  2255ad:	cc                   	int3   
  2255ae:	cc                   	int3   
  2255af:	cc                   	int3   

00000000002255b0 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E>:
pub fn probe_cpus() -> Processors {
  2255b0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  2255b7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2255bc:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let probe_res = MADT::probe_cpu_cores();
  2255c1:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2255c6:	e8 55 f7 ff ff       	callq  224d20 <_ZN9r3_kernel4acpi4madt4MADT15probe_cpu_cores17h3ee477c37394ef07E>
    if probe_res.is_err() {
  2255cb:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2255d0:	e8 2b 56 fe ff       	callq  20ac00 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h82bd04722172da00E>
  2255d5:	88 44 24 17          	mov    %al,0x17(%rsp)
  2255d9:	8a 44 24 17          	mov    0x17(%rsp),%al
  2255dd:	a8 01                	test   $0x1,%al
  2255df:	75 37                	jne    225618 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x68>
  2255e1:	eb 00                	jmp    2255e3 <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x33>
    probe_res.unwrap()
  2255e3:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2255ea:	00 
  2255eb:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  2255f0:	ba 28 00 00 00       	mov    $0x28,%edx
  2255f5:	e8 66 0f 01 00       	callq  236560 <memcpy>
  2255fa:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2255ff:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  225606:	00 
  225607:	48 8d 15 9a 42 01 00 	lea    0x1429a(%rip),%rdx        # 2398a8 <memcmp+0x32f8>
  22560e:	e8 ed 56 fe ff       	callq  20ad00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6ba275a6df9be673E>
  225613:	e9 b7 00 00 00       	jmpq   2256cf <_ZN9r3_kernel4acpi4madt10probe_cpus17ha4fa3aad03ff7833E+0x11f>
        panic!("Failed to detect CPUs. {:?}", probe_res.unwrap_err());
  225618:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  22561f:	00 
  225620:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  225625:	ba 28 00 00 00       	mov    $0x28,%edx
  22562a:	e8 31 0f 01 00       	callq  236560 <memcpy>
  22562f:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  225636:	00 
  225637:	48 8d 35 3a 42 01 00 	lea    0x1423a(%rip),%rsi        # 239878 <memcmp+0x32c8>
  22563e:	e8 cd 52 fe ff       	callq  20a910 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hb121b34d59a8adcfE>
  225643:	24 01                	and    $0x1,%al
  225645:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  22564c:	48 8d 84 24 9f 00 00 	lea    0x9f(%rsp),%rax
  225653:	00 
  225654:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22565b:	00 
  22565c:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  225663:	00 
  225664:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  22566b:	00 
  22566c:	48 8d 35 dd 06 00 00 	lea    0x6dd(%rip),%rsi        # 225d50 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE>
  225673:	e8 a8 90 fe ff       	callq  20e720 <_ZN4core3fmt10ArgumentV13new17h2217d787161c4c39E>
  225678:	48 89 04 24          	mov    %rax,(%rsp)
  22567c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  225681:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  225686:	48 8b 0c 24          	mov    (%rsp),%rcx
  22568a:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  225691:	00 
  225692:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  225699:	00 
  22569a:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
  2256a1:	00 
  2256a2:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2256a7:	48 8d 35 ba 41 01 00 	lea    0x141ba(%rip),%rsi        # 239868 <memcmp+0x32b8>
  2256ae:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2256b4:	4c 89 c2             	mov    %r8,%rdx
  2256b7:	e8 04 0c fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2256bc:	48 8d 35 cd 41 01 00 	lea    0x141cd(%rip),%rsi        # 239890 <memcmp+0x32e0>
  2256c3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2256c8:	e8 63 de 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2256cd:	0f 0b                	ud2    
  2256cf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  2256d4:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  2256db:	c3                   	retq   
  2256dc:	cc                   	int3   
  2256dd:	cc                   	int3   
  2256de:	cc                   	int3   
  2256df:	cc                   	int3   

00000000002256e0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E>:
}

pub fn setup_madt() {
  2256e0:	48 81 ec 28 02 00 00 	sub    $0x228,%rsp
    let proc_lock = PROCESSORS.lock();
  2256e7:	48 8d 3d 8c d5 fd ff 	lea    -0x22a74(%rip),%rdi        # 202c7a <_ZN9r3_kernel4acpi4madt10PROCESSORS17h735ab6db5847e5b6E>
  2256ee:	e8 cd 06 00 00       	callq  225dc0 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0dc1ee704a09c03E>
  2256f3:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2256fa:	00 
  2256fb:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  225702:	00 
  225703:	e8 a8 6a 00 00       	callq  22c1b0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h31f10766e1811e6aE>
  225708:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  22570f:	00 
  225710:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  225717:	00 
    log::info!(
  225718:	48 c7 84 24 b8 00 00 	movq   $0x3,0xb8(%rsp)
  22571f:	00 03 00 00 00 
  225724:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  22572b:	00 
  22572c:	48 8d 35 05 af fd ff 	lea    -0x250fb(%rip),%rsi        # 200638 <str.0+0x118>
  225733:	e8 b8 c3 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  225738:	88 84 24 9f 00 00 00 	mov    %al,0x9f(%rsp)
  22573f:	8a 84 24 9f 00 00 00 	mov    0x9f(%rsp),%al
  225746:	a8 01                	test   $0x1,%al
  225748:	75 0c                	jne    225756 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x76>
  22574a:	eb 00                	jmp    22574c <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x6c>
  22574c:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  225753:	00 
  225754:	eb 60                	jmp    2257b6 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xd6>
  225756:	c6 84 24 1f 02 00 00 	movb   $0x0,0x21f(%rsp)
  22575d:	00 
  22575e:	48 8b 3d ab 59 01 00 	mov    0x159ab(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  225765:	0f b6 b4 24 1f 02 00 	movzbl 0x21f(%rsp),%esi
  22576c:	00 
  22576d:	e8 4e 35 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  225772:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  225779:	00 
  22577a:	48 8b 84 24 20 02 00 	mov    0x220(%rsp),%rax
  225781:	00 
  225782:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  225789:	00 
  22578a:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  225791:	00 
  225792:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  225799:	00 
  22579a:	e8 51 c3 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22579f:	88 84 24 9e 00 00 00 	mov    %al,0x9e(%rsp)
  2257a6:	8a 84 24 9e 00 00 00 	mov    0x9e(%rsp),%al
  2257ad:	24 01                	and    $0x1,%al
  2257af:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
  2257b6:	f6 84 24 c7 00 00 00 	testb  $0x1,0xc7(%rsp)
  2257bd:	01 
  2257be:	75 1a                	jne    2257da <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xfa>
        "Number of CPU cores: {}, Local APIC Address: 0x{:x}",
        proc_lock.cores.len(),
        proc_lock.lapic_address.as_u64()
    );

    for proc in &proc_lock.cores {
  2257c0:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  2257c7:	00 
  2257c8:	e8 03 6d 00 00       	callq  22c4d0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  2257cd:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2257d4:	00 
  2257d5:	e9 48 01 00 00       	jmpq   225922 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x242>
        proc_lock.cores.len(),
  2257da:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  2257e1:	00 
  2257e2:	e8 e9 6c 00 00       	callq  22c4d0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  2257e7:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2257ee:	00 
  2257ef:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  2257f6:	00 
  2257f7:	e8 f4 b7 fe ff       	callq  210ff0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h5323d9ea74175e6cE>
  2257fc:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  225803:	00 
        proc_lock.lapic_address.as_u64()
  225804:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  22580b:	00 
  22580c:	e8 bf 6c 00 00       	callq  22c4d0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>
  225811:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  225818:	00 
  225819:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  225820:	00 
  225821:	48 83 c7 18          	add    $0x18,%rdi
  225825:	e8 d6 06 00 00       	callq  225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>
  22582a:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  225831:	00 
    log::info!(
  225832:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  225839:	00 
  22583a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  225841:	00 
  225842:	48 8d 84 24 38 01 00 	lea    0x138(%rsp),%rax
  225849:	00 
  22584a:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  225851:	00 
  225852:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  225859:	00 
  22585a:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  225861:	00 
  225862:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  225869:	00 
  22586a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22586f:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  225876:	00 
  225877:	48 8b 35 aa 58 01 00 	mov    0x158aa(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22587e:	e8 fd 94 fe ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  225883:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  225888:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  22588d:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  225892:	48 8b 35 7f 58 01 00 	mov    0x1587f(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  225899:	e8 a2 95 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22589e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2258a3:	48 89 54 24 60       	mov    %rdx,0x60(%rsp)
  2258a8:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2258ad:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  2258b2:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  2258b7:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  2258bc:	48 89 b4 24 00 01 00 	mov    %rsi,0x100(%rsp)
  2258c3:	00 
  2258c4:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  2258cb:	00 
  2258cc:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
  2258d3:	00 
  2258d4:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  2258db:	00 
  2258dc:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  2258e3:	00 
  2258e4:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  2258eb:	00 
  2258ec:	48 8d 35 cd 3f 01 00 	lea    0x13fcd(%rip),%rsi        # 2398c0 <memcmp+0x3310>
  2258f3:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2258f9:	4c 89 c2             	mov    %r8,%rdx
  2258fc:	e8 bf 09 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  225901:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
  225908:	00 
  225909:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  225910:	00 
  225911:	48 8d 15 c8 3f 01 00 	lea    0x13fc8(%rip),%rdx        # 2398e0 <memcmp+0x3330>
  225918:	e8 d3 ac 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22591d:	e9 9e fe ff ff       	jmpq   2257c0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0xe0>
  225922:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  225929:	00 
    for proc in &proc_lock.cores {
  22592a:	e8 11 bc fe ff       	callq  211540 <_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9f38b1c324b07e96E>
  22592f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  225934:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  225939:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22593e:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  225943:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  22594a:	00 
  22594b:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  225952:	00 
  225953:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  22595a:	00 
  22595b:	e8 40 3b ff ff       	callq  2194a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2b07eb54db4217c8E>
  225960:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  225967:	00 
  225968:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  22596f:	00 
  225970:	48 85 c0             	test   %rax,%rax
  225973:	0f 95 c0             	setne  %al
  225976:	0f b6 c0             	movzbl %al,%eax
  225979:	74 06                	je     225981 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x2a1>
  22597b:	eb 00                	jmp    22597d <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x29d>
  22597d:	eb 14                	jmp    225993 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x2b3>
  22597f:	0f 0b                	ud2    
        log::info!("CPU-{} - {}", proc.id, proc.apic_id);
    }
}
  225981:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  225988:	00 
  225989:	e8 72 61 fe ff       	callq  20bb00 <_ZN4core3ptr85drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..acpi..madt..Processors$GT$$GT$17ha6c6c78d0d7b5940E>
  22598e:	e9 b1 01 00 00       	jmpq   225b44 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x464>
    for proc in &proc_lock.cores {
  225993:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  22599a:	00 
  22599b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2259a0:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  2259a7:	00 
  2259a8:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  2259af:	00 
  2259b0:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  2259b7:	00 
        log::info!("CPU-{} - {}", proc.id, proc.apic_id);
  2259b8:	48 c7 84 24 58 01 00 	movq   $0x3,0x158(%rsp)
  2259bf:	00 03 00 00 00 
  2259c4:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  2259cb:	00 
  2259cc:	48 8d 35 65 ac fd ff 	lea    -0x2539b(%rip),%rsi        # 200638 <str.0+0x118>
  2259d3:	e8 18 c1 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2259d8:	88 44 24 47          	mov    %al,0x47(%rsp)
  2259dc:	8a 44 24 47          	mov    0x47(%rsp),%al
  2259e0:	a8 01                	test   $0x1,%al
  2259e2:	75 0c                	jne    2259f0 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x310>
  2259e4:	eb 00                	jmp    2259e6 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x306>
  2259e6:	c6 84 24 67 01 00 00 	movb   $0x0,0x167(%rsp)
  2259ed:	00 
  2259ee:	eb 5a                	jmp    225a4a <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x36a>
  2259f0:	c6 84 24 0f 02 00 00 	movb   $0x0,0x20f(%rsp)
  2259f7:	00 
  2259f8:	48 8b 3d 11 57 01 00 	mov    0x15711(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2259ff:	0f b6 b4 24 0f 02 00 	movzbl 0x20f(%rsp),%esi
  225a06:	00 
  225a07:	e8 b4 32 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  225a0c:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  225a13:	00 
  225a14:	48 8b 84 24 10 02 00 	mov    0x210(%rsp),%rax
  225a1b:	00 
  225a1c:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  225a23:	00 
  225a24:	48 8d bc 24 58 01 00 	lea    0x158(%rsp),%rdi
  225a2b:	00 
  225a2c:	48 8d b4 24 68 01 00 	lea    0x168(%rsp),%rsi
  225a33:	00 
  225a34:	e8 b7 c0 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  225a39:	88 44 24 37          	mov    %al,0x37(%rsp)
  225a3d:	8a 44 24 37          	mov    0x37(%rsp),%al
  225a41:	24 01                	and    $0x1,%al
  225a43:	88 84 24 67 01 00 00 	mov    %al,0x167(%rsp)
  225a4a:	f6 84 24 67 01 00 00 	testb  $0x1,0x167(%rsp)
  225a51:	01 
  225a52:	0f 84 fb fe ff ff    	je     225953 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x273>
  225a58:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  225a5d:	48 89 c1             	mov    %rax,%rcx
  225a60:	48 83 c0 01          	add    $0x1,%rax
  225a64:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  225a6b:	00 
  225a6c:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  225a73:	00 
  225a74:	48 8b bc 24 c0 01 00 	mov    0x1c0(%rsp),%rdi
  225a7b:	00 
  225a7c:	48 89 bc 24 f8 01 00 	mov    %rdi,0x1f8(%rsp)
  225a83:	00 
  225a84:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  225a8b:	00 
  225a8c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  225a91:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  225a98:	00 
  225a99:	48 8b 35 e8 56 01 00 	mov    0x156e8(%rip),%rsi        # 23b188 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd8>
  225aa0:	e8 fb 93 fe ff       	callq  20eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  225aa5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  225aaa:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  225aaf:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  225ab4:	48 8b 35 cd 56 01 00 	mov    0x156cd(%rip),%rsi        # 23b188 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd8>
  225abb:	e8 e0 93 fe ff       	callq  20eea0 <_ZN4core3fmt10ArgumentV13new17hd2865fd7e12c8eb2E>
  225ac0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  225ac5:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  225aca:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  225acf:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  225ad4:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  225ad9:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  225ade:	48 89 b4 24 a0 01 00 	mov    %rsi,0x1a0(%rsp)
  225ae5:	00 
  225ae6:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  225aed:	00 
  225aee:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  225af5:	00 
  225af6:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  225afd:	00 
  225afe:	48 8d 8c 24 a0 01 00 	lea    0x1a0(%rsp),%rcx
  225b05:	00 
  225b06:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  225b0d:	00 
  225b0e:	48 8d 35 03 3e 01 00 	lea    0x13e03(%rip),%rsi        # 239918 <memcmp+0x3368>
  225b15:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  225b1b:	4c 89 c2             	mov    %r8,%rdx
  225b1e:	e8 9d 07 fe ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  225b23:	48 8b b4 24 58 01 00 	mov    0x158(%rsp),%rsi
  225b2a:	00 
  225b2b:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  225b32:	00 
  225b33:	48 8d 15 fe 3d 01 00 	lea    0x13dfe(%rip),%rdx        # 239938 <memcmp+0x3388>
  225b3a:	e8 b1 aa 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  225b3f:	e9 0f fe ff ff       	jmpq   225953 <_ZN9r3_kernel4acpi4madt10setup_madt17hb9e66c74166ffa17E+0x273>
}
  225b44:	48 81 c4 28 02 00 00 	add    $0x228,%rsp
  225b4b:	c3                   	retq   
  225b4c:	cc                   	int3   
  225b4d:	cc                   	int3   
  225b4e:	cc                   	int3   
  225b4f:	cc                   	int3   

0000000000225b50 <_ZN77_$LT$r3_kernel..acpi..madt..PerProcessorLAPIC$u20$as$u20$core..fmt..Debug$GT$3fmt17hd4b2e02536c1f22aE>:
#[derive(Debug, Copy, Clone)]
  225b50:	48 83 ec 68          	sub    $0x68,%rsp
  225b54:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  225b59:	48 89 f8             	mov    %rdi,%rax
  225b5c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  225b61:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  225b66:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub id: u8,
  225b6b:	8a 08                	mov    (%rax),%cl
  225b6d:	88 4c 24 12          	mov    %cl,0x12(%rsp)
    pub apic_id: u8,
  225b71:	8a 48 01             	mov    0x1(%rax),%cl
  225b74:	88 4c 24 13          	mov    %cl,0x13(%rsp)
    flags: u32,
  225b78:	8b 40 02             	mov    0x2(%rax),%eax
  225b7b:	89 44 24 14          	mov    %eax,0x14(%rsp)
#[derive(Debug, Copy, Clone)]
  225b7f:	48 8d 35 b2 d0 fd ff 	lea    -0x22f4e(%rip),%rsi        # 202c38 <str.1+0x68>
  225b86:	ba 11 00 00 00       	mov    $0x11,%edx
  225b8b:	e8 e0 fb 00 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  225b90:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  225b95:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  225b9a:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  225b9f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  225ba4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  225ba9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  225bae:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  225bb3:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    pub id: u8,
  225bb8:	48 8d 44 24 12       	lea    0x12(%rsp),%rax
  225bbd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  225bc2:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  225bc7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  225bcc:	48 8d 35 76 d0 fd ff 	lea    -0x22f8a(%rip),%rsi        # 202c49 <str.1+0x79>
  225bd3:	ba 02 00 00 00       	mov    $0x2,%edx
  225bd8:	4c 8d 05 91 3d 01 00 	lea    0x13d91(%rip),%r8        # 239970 <memcmp+0x33c0>
  225bdf:	e8 1c cf 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
    pub apic_id: u8,
  225be4:	48 8d 44 24 13       	lea    0x13(%rsp),%rax
  225be9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  225bee:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  225bf3:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  225bf8:	48 8d 35 4c d0 fd ff 	lea    -0x22fb4(%rip),%rsi        # 202c4b <str.1+0x7b>
  225bff:	ba 07 00 00 00       	mov    $0x7,%edx
  225c04:	4c 8d 05 65 3d 01 00 	lea    0x13d65(%rip),%r8        # 239970 <memcmp+0x33c0>
  225c0b:	e8 f0 ce 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
    flags: u32,
  225c10:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  225c15:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  225c1a:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug, Copy, Clone)]
  225c1f:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  225c24:	48 8d 35 27 d0 fd ff 	lea    -0x22fd9(%rip),%rsi        # 202c52 <str.1+0x82>
  225c2b:	ba 05 00 00 00       	mov    $0x5,%edx
  225c30:	4c 8d 05 59 3d 01 00 	lea    0x13d59(%rip),%r8        # 239990 <memcmp+0x33e0>
  225c37:	e8 c4 ce 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  225c3c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  225c41:	e8 7a d0 00 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  225c46:	88 44 24 07          	mov    %al,0x7(%rsp)
  225c4a:	8a 44 24 07          	mov    0x7(%rsp),%al
  225c4e:	24 01                	and    $0x1,%al
  225c50:	0f b6 c0             	movzbl %al,%eax
  225c53:	48 83 c4 68          	add    $0x68,%rsp
  225c57:	c3                   	retq   
  225c58:	cc                   	int3   
  225c59:	cc                   	int3   
  225c5a:	cc                   	int3   
  225c5b:	cc                   	int3   
  225c5c:	cc                   	int3   
  225c5d:	cc                   	int3   
  225c5e:	cc                   	int3   
  225c5f:	cc                   	int3   

0000000000225c60 <_ZN70_$LT$r3_kernel..acpi..madt..Processors$u20$as$u20$core..fmt..Debug$GT$3fmt17h6e288c8cb15b570aE>:
#[derive(Debug)]
  225c60:	48 83 ec 78          	sub    $0x78,%rsp
  225c64:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  225c69:	48 89 f8             	mov    %rdi,%rax
  225c6c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  225c71:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  225c76:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    pub cores: Vec<PerProcessorLAPIC>,
  225c7b:	48 89 c1             	mov    %rax,%rcx
  225c7e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  225c83:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    pub lapic_address: VirtualAddress,
  225c88:	48 83 c0 18          	add    $0x18,%rax
  225c8c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  225c91:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug)]
  225c96:	48 8d 35 ba cf fd ff 	lea    -0x23046(%rip),%rsi        # 202c57 <str.1+0x87>
  225c9d:	ba 0a 00 00 00       	mov    $0xa,%edx
  225ca2:	e8 c9 fa 00 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  225ca7:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  225cac:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  225cb1:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  225cb6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  225cbb:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  225cc0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  225cc5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  225cca:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
  225ccf:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub cores: Vec<PerProcessorLAPIC>,
  225cd4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  225cd9:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
#[derive(Debug)]
  225cde:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  225ce3:	48 8d 35 77 cf fd ff 	lea    -0x23089(%rip),%rsi        # 202c61 <str.1+0x91>
  225cea:	ba 05 00 00 00       	mov    $0x5,%edx
  225cef:	4c 8d 05 ba 3c 01 00 	lea    0x13cba(%rip),%r8        # 2399b0 <memcmp+0x3400>
  225cf6:	e8 05 ce 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  225cfb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    pub lapic_address: VirtualAddress,
  225d00:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  225d05:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
#[derive(Debug)]
  225d0a:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  225d0f:	48 8d 35 50 cf fd ff 	lea    -0x230b0(%rip),%rsi        # 202c66 <str.1+0x96>
  225d16:	ba 0d 00 00 00       	mov    $0xd,%edx
  225d1b:	4c 8d 05 ae 3c 01 00 	lea    0x13cae(%rip),%r8        # 2399d0 <memcmp+0x3420>
  225d22:	e8 d9 cd 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  225d27:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  225d2c:	e8 8f cf 00 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  225d31:	88 44 24 07          	mov    %al,0x7(%rsp)
  225d35:	8a 44 24 07          	mov    0x7(%rsp),%al
  225d39:	24 01                	and    $0x1,%al
  225d3b:	0f b6 c0             	movzbl %al,%eax
  225d3e:	48 83 c4 78          	add    $0x78,%rsp
  225d42:	c3                   	retq   
  225d43:	cc                   	int3   
  225d44:	cc                   	int3   
  225d45:	cc                   	int3   
  225d46:	cc                   	int3   
  225d47:	cc                   	int3   
  225d48:	cc                   	int3   
  225d49:	cc                   	int3   
  225d4a:	cc                   	int3   
  225d4b:	cc                   	int3   
  225d4c:	cc                   	int3   
  225d4d:	cc                   	int3   
  225d4e:	cc                   	int3   
  225d4f:	cc                   	int3   

0000000000225d50 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE>:
#[derive(Debug)]
  225d50:	48 83 ec 28          	sub    $0x28,%rsp
  225d54:	48 89 34 24          	mov    %rsi,(%rsp)
  225d58:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  225d5d:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  225d62:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  225d67:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  225d6c:	0f b6 00             	movzbl (%rax),%eax
  225d6f:	a8 01                	test   $0x1,%al
  225d71:	74 06                	je     225d79 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x29>
  225d73:	eb 00                	jmp    225d75 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x25>
  225d75:	eb 1f                	jmp    225d96 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x46>
  225d77:	0f 0b                	ud2    
  225d79:	48 8b 3c 24          	mov    (%rsp),%rdi
  225d7d:	48 8d 35 ef ce fd ff 	lea    -0x23111(%rip),%rsi        # 202c73 <str.1+0xa3>
  225d84:	ba 07 00 00 00       	mov    $0x7,%edx
  225d89:	e8 92 f9 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225d8e:	24 01                	and    $0x1,%al
  225d90:	88 44 24 0f          	mov    %al,0xf(%rsp)
  225d94:	eb 1b                	jmp    225db1 <_ZN69_$LT$r3_kernel..acpi..madt..MADTError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33615d476add27aaE+0x61>
  225d96:	48 8b 3c 24          	mov    (%rsp),%rdi
  225d9a:	48 8d 35 47 a9 fd ff 	lea    -0x256b9(%rip),%rsi        # 2006e8 <str.0+0x1c8>
  225da1:	ba 10 00 00 00       	mov    $0x10,%edx
  225da6:	e8 75 f9 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  225dab:	24 01                	and    $0x1,%al
  225dad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  225db1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  225db5:	24 01                	and    $0x1,%al
  225db7:	0f b6 c0             	movzbl %al,%eax
  225dba:	48 83 c4 28          	add    $0x28,%rsp
  225dbe:	c3                   	retq   
  225dbf:	cc                   	int3   

0000000000225dc0 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0dc1ee704a09c03E>:
            fn deref(&self) -> &$T {
  225dc0:	48 83 ec 18          	sub    $0x18,%rsp
  225dc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  225dc9:	48 8d 05 f0 bf 01 00 	lea    0x1bff0(%rip),%rax        # 241dc0 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8f6f3d0950d740c4E>
  225dd0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  225dd5:	48 8d 3d e4 bf 01 00 	lea    0x1bfe4(%rip),%rdi        # 241dc0 <_ZN77_$LT$r3_kernel..acpi..madt..PROCESSORS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h8f6f3d0950d740c4E>
  225ddc:	e8 4f 2a fe ff       	callq  208830 <_ZN4spin4once13Once$LT$T$GT$9call_once17h4008a3be402ff095E>
  225de1:	48 89 04 24          	mov    %rax,(%rsp)
  225de5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  225de9:	48 83 c4 18          	add    $0x18,%rsp
  225ded:	c3                   	retq   
  225dee:	cc                   	int3   
  225def:	cc                   	int3   

0000000000225df0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>:
    pub fn align_down(addr: u64, size: u64) -> u64 {
  225df0:	48 83 ec 28          	sub    $0x28,%rsp
  225df4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  225df9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  225dfe:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        addr & !(size - 1)
  225e03:	48 83 ee 01          	sub    $0x1,%rsi
  225e07:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  225e0c:	0f 92 c0             	setb   %al
  225e0f:	a8 01                	test   $0x1,%al
  225e11:	75 16                	jne    225e29 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E+0x39>
  225e13:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  225e18:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  225e1d:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  225e21:	48 21 c8             	and    %rcx,%rax
    }
  225e24:	48 83 c4 28          	add    $0x28,%rsp
  225e28:	c3                   	retq   
        addr & !(size - 1)
  225e29:	48 8d 3d 70 ce fd ff 	lea    -0x23190(%rip),%rdi        # 202ca0 <str.0>
  225e30:	48 8d 15 b9 3b 01 00 	lea    0x13bb9(%rip),%rdx        # 2399f0 <memcmp+0x3440>
  225e37:	be 21 00 00 00       	mov    $0x21,%esi
  225e3c:	e8 1f d6 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  225e41:	0f 0b                	ud2    
  225e43:	cc                   	int3   
  225e44:	cc                   	int3   
  225e45:	cc                   	int3   
  225e46:	cc                   	int3   
  225e47:	cc                   	int3   
  225e48:	cc                   	int3   
  225e49:	cc                   	int3   
  225e4a:	cc                   	int3   
  225e4b:	cc                   	int3   
  225e4c:	cc                   	int3   
  225e4d:	cc                   	int3   
  225e4e:	cc                   	int3   
  225e4f:	cc                   	int3   

0000000000225e50 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E>:
    pub fn align_up(addr: u64, size: u64) -> u64 {
  225e50:	48 83 ec 38          	sub    $0x38,%rsp
  225e54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  225e59:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  225e5e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let mask = size - 1;
  225e63:	48 83 ee 01          	sub    $0x1,%rsi
  225e67:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  225e6c:	0f 92 c0             	setb   %al
  225e6f:	a8 01                	test   $0x1,%al
  225e71:	75 1a                	jne    225e8d <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x3d>
  225e73:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  225e78:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  225e7d:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        if addr & mask == 0 {
  225e82:	48 21 c8             	and    %rcx,%rax
  225e85:	48 83 f8 00          	cmp    $0x0,%rax
  225e89:	74 1c                	je     225ea7 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x57>
  225e8b:	eb 26                	jmp    225eb3 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x63>
        let mask = size - 1;
  225e8d:	48 8d 3d 0c ce fd ff 	lea    -0x231f4(%rip),%rdi        # 202ca0 <str.0>
  225e94:	48 8d 15 6d 3b 01 00 	lea    0x13b6d(%rip),%rdx        # 239a08 <memcmp+0x3458>
  225e9b:	be 21 00 00 00       	mov    $0x21,%esi
  225ea0:	e8 bb d5 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  225ea5:	0f 0b                	ud2    
  225ea7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            addr
  225eac:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        if addr & mask == 0 {
  225eb1:	eb 41                	jmp    225ef4 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0xa4>
  225eb3:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  225eb8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            (addr | mask) + 1
  225ebd:	48 09 c8             	or     %rcx,%rax
  225ec0:	48 83 c0 01          	add    $0x1,%rax
  225ec4:	48 89 04 24          	mov    %rax,(%rsp)
  225ec8:	0f 92 c0             	setb   %al
  225ecb:	a8 01                	test   $0x1,%al
  225ecd:	75 0b                	jne    225eda <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0x8a>
  225ecf:	48 8b 04 24          	mov    (%rsp),%rax
  225ed3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        if addr & mask == 0 {
  225ed8:	eb 1a                	jmp    225ef4 <_ZN9r3_kernel2mm9Alignment8align_up17h12d103659cc87f51E+0xa4>
            (addr | mask) + 1
  225eda:	48 8d 3d ef cd fd ff 	lea    -0x23211(%rip),%rdi        # 202cd0 <str.1>
  225ee1:	48 8d 15 38 3b 01 00 	lea    0x13b38(%rip),%rdx        # 239a20 <memcmp+0x3470>
  225ee8:	be 1c 00 00 00       	mov    $0x1c,%esi
  225eed:	e8 6e d5 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  225ef2:	0f 0b                	ud2    
    }
  225ef4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  225ef9:	48 83 c4 38          	add    $0x38,%rsp
  225efd:	c3                   	retq   
  225efe:	cc                   	int3   
  225eff:	cc                   	int3   

0000000000225f00 <_ZN9r3_kernel2mm14VirtualAddress6as_u6417hfe286b92b970b525E>:
    pub fn as_u64(&self) -> u64 {
  225f00:	50                   	push   %rax
  225f01:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  225f05:	48 8b 07             	mov    (%rdi),%rax
    }
  225f08:	59                   	pop    %rcx
  225f09:	c3                   	retq   
  225f0a:	cc                   	int3   
  225f0b:	cc                   	int3   
  225f0c:	cc                   	int3   
  225f0d:	cc                   	int3   
  225f0e:	cc                   	int3   
  225f0f:	cc                   	int3   

0000000000225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>:
    pub fn from_u64(addr: u64) -> Self {
  225f10:	48 83 ec 10          	sub    $0x10,%rsp
  225f14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        VirtualAddress(addr)
  225f19:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  225f1d:	48 8b 04 24          	mov    (%rsp),%rax
  225f21:	48 83 c4 10          	add    $0x10,%rsp
  225f25:	c3                   	retq   
  225f26:	cc                   	int3   
  225f27:	cc                   	int3   
  225f28:	cc                   	int3   
  225f29:	cc                   	int3   
  225f2a:	cc                   	int3   
  225f2b:	cc                   	int3   
  225f2c:	cc                   	int3   
  225f2d:	cc                   	int3   
  225f2e:	cc                   	int3   
  225f2f:	cc                   	int3   

0000000000225f30 <_ZN9r3_kernel2mm14VirtualAddress14new_align_down17hf7ff72a768299b95E>:
    pub fn new_align_down(&self, size: u64) -> VirtualAddress {
  225f30:	48 83 ec 28          	sub    $0x28,%rsp
  225f34:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  225f39:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        VirtualAddress::from_u64(Alignment::align_down(self.0, size))
  225f3e:	48 8b 3f             	mov    (%rdi),%rdi
  225f41:	e8 aa fe ff ff       	callq  225df0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  225f46:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  225f4b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  225f50:	e8 bb ff ff ff       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  225f55:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  225f5a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  225f5f:	48 83 c4 28          	add    $0x28,%rsp
  225f63:	c3                   	retq   
  225f64:	cc                   	int3   
  225f65:	cc                   	int3   
  225f66:	cc                   	int3   
  225f67:	cc                   	int3   
  225f68:	cc                   	int3   
  225f69:	cc                   	int3   
  225f6a:	cc                   	int3   
  225f6b:	cc                   	int3   
  225f6c:	cc                   	int3   
  225f6d:	cc                   	int3   
  225f6e:	cc                   	int3   
  225f6f:	cc                   	int3   

0000000000225f70 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E>:
    pub fn get_level_index(&self, level: PageTableLevel) -> paging::PageTableIndex {
  225f70:	48 83 ec 78          	sub    $0x78,%rsp
  225f74:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  225f79:	40 88 f0             	mov    %sil,%al
  225f7c:	88 44 24 6d          	mov    %al,0x6d(%rsp)
  225f80:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
        match level {
  225f85:	0f b6 44 24 6d       	movzbl 0x6d(%rsp),%eax
  225f8a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  225f8f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  225f94:	48 8d 0d e1 cc fd ff 	lea    -0x2331f(%rip),%rcx        # 202c7c <_ZN9r3_kernel4acpi4madt10PROCESSORS17h735ab6db5847e5b6E+0x2>
  225f9b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  225f9f:	48 01 c8             	add    %rcx,%rax
  225fa2:	ff e0                	jmpq   *%rax
  225fa4:	0f 0b                	ud2    
  225fa6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  225fab:	48 8b 00             	mov    (%rax),%rax
  225fae:	48 c1 e8 0c          	shr    $0xc,%rax
  225fb2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  225fb7:	e9 a5 00 00 00       	jmpq   226061 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0xf1>
  225fbc:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  225fc1:	48 8b 00             	mov    (%rax),%rax
  225fc4:	48 c1 e8 0c          	shr    $0xc,%rax
  225fc8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  225fcd:	eb 62                	jmp    226031 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0xc1>
  225fcf:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  225fd4:	48 8b 00             	mov    (%rax),%rax
  225fd7:	48 c1 e8 0c          	shr    $0xc,%rax
  225fdb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  225fe0:	eb 2d                	jmp    22600f <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x9f>
  225fe2:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12) as u16);
  225fe7:	48 8b 00             	mov    (%rax),%rax
  225fea:	48 c1 e8 0c          	shr    $0xc,%rax
  225fee:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  225ff3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  225ff8:	0f b7 f8             	movzwl %ax,%edi
  225ffb:	e8 b0 5f fe ff       	callq  20bfb0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  226000:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
    }
  226005:	66 8b 44 24 6e       	mov    0x6e(%rsp),%ax
  22600a:	48 83 c4 78          	add    $0x78,%rsp
  22600e:	c3                   	retq   
  22600f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9) as u16);
  226014:	48 c1 e8 09          	shr    $0x9,%rax
  226018:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22601d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  226022:	0f b7 f8             	movzwl %ax,%edi
  226025:	e8 86 5f fe ff       	callq  20bfb0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  22602a:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  22602f:	eb d4                	jmp    226005 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  226031:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9) as u16);
  226036:	48 c1 e8 09          	shr    $0x9,%rax
  22603a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22603f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  226044:	48 c1 e8 09          	shr    $0x9,%rax
  226048:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22604d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  226052:	0f b7 f8             	movzwl %ax,%edi
  226055:	e8 56 5f fe ff       	callq  20bfb0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  22605a:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  22605f:	eb a4                	jmp    226005 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  226061:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
                return paging::PageTableIndex::new((self.0 >> 12 >> 9 >> 9 >> 9) as u16);
  226066:	48 c1 e8 09          	shr    $0x9,%rax
  22606a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22606f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  226074:	48 c1 e8 09          	shr    $0x9,%rax
  226078:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22607d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  226082:	48 c1 e8 09          	shr    $0x9,%rax
  226086:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22608b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  226090:	0f b7 f8             	movzwl %ax,%edi
  226093:	e8 18 5f fe ff       	callq  20bfb0 <_ZN9r3_kernel2mm6paging14PageTableIndex3new17h8d5421b7cd78ee9fE>
  226098:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  22609d:	e9 63 ff ff ff       	jmpq   226005 <_ZN9r3_kernel2mm14VirtualAddress15get_level_index17hd06f30699f8be0b2E+0x95>
  2260a2:	cc                   	int3   
  2260a3:	cc                   	int3   
  2260a4:	cc                   	int3   
  2260a5:	cc                   	int3   
  2260a6:	cc                   	int3   
  2260a7:	cc                   	int3   
  2260a8:	cc                   	int3   
  2260a9:	cc                   	int3   
  2260aa:	cc                   	int3   
  2260ab:	cc                   	int3   
  2260ac:	cc                   	int3   
  2260ad:	cc                   	int3   
  2260ae:	cc                   	int3   
  2260af:	cc                   	int3   

00000000002260b0 <_ZN9r3_kernel2mm14VirtualAddress15get_page_offset17ha2e641ae4c72d812E>:
    pub fn get_page_offset(&self) -> u16 {
  2260b0:	50                   	push   %rax
  2260b1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0 as u16 % (1 << 12)
  2260b5:	48 8b 07             	mov    (%rdi),%rax
  2260b8:	66 25 ff 0f          	and    $0xfff,%ax
    }
  2260bc:	59                   	pop    %rcx
  2260bd:	c3                   	retq   
  2260be:	cc                   	int3   
  2260bf:	cc                   	int3   

00000000002260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>:
}

impl PhysicalAddress {
    #[inline]
    pub fn as_u64(&self) -> u64 {
  2260c0:	50                   	push   %rax
  2260c1:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.0
  2260c5:	48 8b 07             	mov    (%rdi),%rax
    }
  2260c8:	59                   	pop    %rcx
  2260c9:	c3                   	retq   
  2260ca:	cc                   	int3   
  2260cb:	cc                   	int3   
  2260cc:	cc                   	int3   
  2260cd:	cc                   	int3   
  2260ce:	cc                   	int3   
  2260cf:	cc                   	int3   

00000000002260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>:

    #[inline]
    pub fn from_u64(addr: u64) -> Self {
  2260d0:	48 83 ec 10          	sub    $0x10,%rsp
  2260d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        PhysicalAddress(addr)
  2260d9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  2260dd:	48 8b 04 24          	mov    (%rsp),%rax
  2260e1:	48 83 c4 10          	add    $0x10,%rsp
  2260e5:	c3                   	retq   
  2260e6:	cc                   	int3   
  2260e7:	cc                   	int3   
  2260e8:	cc                   	int3   
  2260e9:	cc                   	int3   
  2260ea:	cc                   	int3   
  2260eb:	cc                   	int3   
  2260ec:	cc                   	int3   
  2260ed:	cc                   	int3   
  2260ee:	cc                   	int3   
  2260ef:	cc                   	int3   

00000000002260f0 <_ZN9r3_kernel2mm15PhysicalAddress13is_aligned_at17hae24dddd3985eb10E>:

    #[inline]
    pub fn is_aligned_at(&self, size: u64) -> bool {
  2260f0:	48 83 ec 28          	sub    $0x28,%rsp
  2260f4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2260f9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.0 == Alignment::align_down(self.0, size)
  2260fe:	48 8b 07             	mov    (%rdi),%rax
  226101:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  226106:	48 8b 3f             	mov    (%rdi),%rdi
  226109:	e8 e2 fc ff ff       	callq  225df0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  22610e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  226113:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  226118:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22611d:	48 39 c8             	cmp    %rcx,%rax
  226120:	0f 94 c0             	sete   %al
    }
  226123:	24 01                	and    $0x1,%al
  226125:	0f b6 c0             	movzbl %al,%eax
  226128:	48 83 c4 28          	add    $0x28,%rsp
  22612c:	c3                   	retq   
  22612d:	cc                   	int3   
  22612e:	cc                   	int3   
  22612f:	cc                   	int3   

0000000000226130 <_ZN9r3_kernel2mm15PhysicalAddress14new_align_down17h6792f5d42c0b6e10E>:
    pub fn align_up(&mut self, size: u64) {
        self.0 = Alignment::align_up(self.0, size);
    }

    #[inline]
    pub fn new_align_down(&self, size: u64) -> Self {
  226130:	48 83 ec 28          	sub    $0x28,%rsp
  226134:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  226139:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        PhysicalAddress::from_u64(Alignment::align_down(self.0, size))
  22613e:	48 8b 3f             	mov    (%rdi),%rdi
  226141:	e8 aa fc ff ff       	callq  225df0 <_ZN9r3_kernel2mm9Alignment10align_down17h90bbb0f909621231E>
  226146:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22614b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  226150:	e8 7b ff ff ff       	callq  2260d0 <_ZN9r3_kernel2mm15PhysicalAddress8from_u6417h403025f5a509c30eE>
  226155:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22615a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22615f:	48 83 c4 28          	add    $0x28,%rsp
  226163:	c3                   	retq   
  226164:	cc                   	int3   
  226165:	cc                   	int3   
  226166:	cc                   	int3   
  226167:	cc                   	int3   
  226168:	cc                   	int3   
  226169:	cc                   	int3   
  22616a:	cc                   	int3   
  22616b:	cc                   	int3   
  22616c:	cc                   	int3   
  22616d:	cc                   	int3   
  22616e:	cc                   	int3   
  22616f:	cc                   	int3   

0000000000226170 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E>:
    pub fn new_align_up(&self, size: u64) -> Self {
        PhysicalAddress::from_u64(Alignment::align_up(self.0, size))
    }
}

pub fn p_to_v(addr: PhysicalAddress) -> VirtualAddress {
  226170:	48 83 ec 48          	sub    $0x48,%rsp
  226174:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    let phy_offset = BootProtocol::get_phy_offset();
  226179:	e8 32 1f ff ff       	callq  2180b0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  22617e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  226183:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    if phy_offset.is_none() {
  226188:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22618d:	e8 9e a3 fe ff       	callq  210530 <_ZN4core6option15Option$LT$T$GT$7is_none17h5a615be8b8b77bbdE>
  226192:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  226196:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  22619a:	a8 01                	test   $0x1,%al
  22619c:	75 13                	jne    2261b1 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x41>
  22619e:	eb 00                	jmp    2261a0 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x30>
        panic!("Unable to convert physical address to virtual address.");
    }

    return VirtualAddress::from_u64(addr.as_u64() + phy_offset.unwrap());
  2261a0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2261a5:	e8 16 ff ff ff       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  2261aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2261af:	eb 1a                	jmp    2261cb <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0x5b>
        panic!("Unable to convert physical address to virtual address.");
  2261b1:	48 8d 3d 34 cb fd ff 	lea    -0x234cc(%rip),%rdi        # 202cec <str.1+0x1c>
  2261b8:	48 8d 15 79 38 01 00 	lea    0x13879(%rip),%rdx        # 239a38 <memcmp+0x3488>
  2261bf:	be 36 00 00 00       	mov    $0x36,%esi
  2261c4:	e8 97 d2 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2261c9:	0f 0b                	ud2    
    return VirtualAddress::from_u64(addr.as_u64() + phy_offset.unwrap());
  2261cb:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2261d0:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2261d5:	48 8d 15 74 38 01 00 	lea    0x13874(%rip),%rdx        # 239a50 <memcmp+0x34a0>
  2261dc:	e8 3f 9e fe ff       	callq  210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  2261e1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2261e6:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2261eb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2261f0:	48 01 c8             	add    %rcx,%rax
  2261f3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2261f8:	0f 92 c0             	setb   %al
  2261fb:	a8 01                	test   $0x1,%al
  2261fd:	75 11                	jne    226210 <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0xa0>
  2261ff:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  226204:	e8 07 fd ff ff       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  226209:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22620e:	eb 1a                	jmp    22622a <_ZN9r3_kernel2mm6p_to_v17h813737a943ece4f4E+0xba>
  226210:	48 8d 3d b9 ca fd ff 	lea    -0x23547(%rip),%rdi        # 202cd0 <str.1>
  226217:	48 8d 15 4a 38 01 00 	lea    0x1384a(%rip),%rdx        # 239a68 <memcmp+0x34b8>
  22621e:	be 1c 00 00 00       	mov    $0x1c,%esi
  226223:	e8 38 d2 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  226228:	0f 0b                	ud2    
  22622a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  22622f:	48 83 c4 48          	add    $0x48,%rsp
  226233:	c3                   	retq   
  226234:	cc                   	int3   
  226235:	cc                   	int3   
  226236:	cc                   	int3   
  226237:	cc                   	int3   
  226238:	cc                   	int3   
  226239:	cc                   	int3   
  22623a:	cc                   	int3   
  22623b:	cc                   	int3   
  22623c:	cc                   	int3   
  22623d:	cc                   	int3   
  22623e:	cc                   	int3   
  22623f:	cc                   	int3   

0000000000226240 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE>:

pub fn init() {
  226240:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    log::info!("Enabling frame allocator...");
  226247:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  22624e:	00 00 
  226250:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  226255:	48 8d 35 dc a3 fd ff 	lea    -0x25c24(%rip),%rsi        # 200638 <str.0+0x118>
  22625c:	e8 8f b8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226261:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226265:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226269:	a8 01                	test   $0x1,%al
  22626b:	75 09                	jne    226276 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x36>
  22626d:	eb 00                	jmp    22626f <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x2f>
  22626f:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  226274:	eb 4e                	jmp    2262c4 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x84>
  226276:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22627d:	00 
  22627e:	48 8b 3d 8b 4e 01 00 	mov    0x14e8b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  226285:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  22628c:	00 
  22628d:	e8 2e 2a 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  226292:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  226299:	00 
  22629a:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2262a1:	00 
  2262a2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2262a7:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2262ac:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  2262b1:	e8 3a b8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2262b6:	88 44 24 0e          	mov    %al,0xe(%rsp)
  2262ba:	8a 44 24 0e          	mov    0xe(%rsp),%al
  2262be:	24 01                	and    $0x1,%al
  2262c0:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2262c4:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  2262c9:	75 07                	jne    2262d2 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x92>
    phy::setup_physical_memory();
  2262cb:	e8 70 11 ff ff       	callq  217440 <_ZN9r3_kernel2mm3phy21setup_physical_memory17h39f7389618d2886dE>
  2262d0:	eb 3a                	jmp    22630c <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xcc>
    log::info!("Enabling frame allocator...");
  2262d2:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2262d7:	48 8d 35 a2 37 01 00 	lea    0x137a2(%rip),%rsi        # 239a80 <memcmp+0x34d0>
  2262de:	ba 01 00 00 00       	mov    $0x1,%edx
  2262e3:	48 8d 0d 56 ca fd ff 	lea    -0x235aa(%rip),%rcx        # 202d40 <str.1+0x70>
  2262ea:	31 c0                	xor    %eax,%eax
  2262ec:	41 89 c0             	mov    %eax,%r8d
  2262ef:	e8 cc ff fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2262f4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2262f9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2262fe:	48 8d 15 8b 37 01 00 	lea    0x1378b(%rip),%rdx        # 239a90 <memcmp+0x34e0>
  226305:	e8 e6 a2 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22630a:	eb bf                	jmp    2262cb <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x8b>
    log::info!("Enabling kernel paging...");
  22630c:	48 c7 44 24 58 03 00 	movq   $0x3,0x58(%rsp)
  226313:	00 00 
  226315:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22631a:	48 8d 35 17 a3 fd ff 	lea    -0x25ce9(%rip),%rsi        # 200638 <str.0+0x118>
  226321:	e8 ca b7 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226326:	88 44 24 0d          	mov    %al,0xd(%rsp)
  22632a:	8a 44 24 0d          	mov    0xd(%rsp),%al
  22632e:	a8 01                	test   $0x1,%al
  226330:	75 09                	jne    22633b <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xfb>
  226332:	eb 00                	jmp    226334 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0xf4>
  226334:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  226339:	eb 4e                	jmp    226389 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x149>
  22633b:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  226342:	00 
  226343:	48 8b 3d c6 4d 01 00 	mov    0x14dc6(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22634a:	0f b6 b4 24 ff 00 00 	movzbl 0xff(%rsp),%esi
  226351:	00 
  226352:	e8 69 29 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  226357:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  22635e:	00 
  22635f:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  226366:	00 
  226367:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22636c:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  226371:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  226376:	e8 75 b7 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22637b:	88 44 24 0c          	mov    %al,0xc(%rsp)
  22637f:	8a 44 24 0c          	mov    0xc(%rsp),%al
  226383:	24 01                	and    $0x1,%al
  226385:	88 44 24 67          	mov    %al,0x67(%rsp)
  226389:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  22638e:	75 07                	jne    226397 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x157>
    paging::setup_paging();
  226390:	e8 8b 75 fe ff       	callq  20d920 <_ZN9r3_kernel2mm6paging12setup_paging17h60babcb6d409da6cE>
  226395:	eb 3a                	jmp    2263d1 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x191>
    log::info!("Enabling kernel paging...");
  226397:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22639c:	48 8d 35 25 37 01 00 	lea    0x13725(%rip),%rsi        # 239ac8 <memcmp+0x3518>
  2263a3:	ba 01 00 00 00       	mov    $0x1,%edx
  2263a8:	48 8d 0d 91 c9 fd ff 	lea    -0x2366f(%rip),%rcx        # 202d40 <str.1+0x70>
  2263af:	31 c0                	xor    %eax,%eax
  2263b1:	41 89 c0             	mov    %eax,%r8d
  2263b4:	e8 07 ff fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2263b9:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  2263be:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  2263c3:	48 8d 15 0e 37 01 00 	lea    0x1370e(%rip),%rdx        # 239ad8 <memcmp+0x3528>
  2263ca:	e8 21 a2 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2263cf:	eb bf                	jmp    226390 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x150>

    run_initial_paging_test();
  2263d1:	e8 fa 00 00 00       	callq  2264d0 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E>
    // init kenel heap
    log::info!("Enabling kernel heap...");
  2263d6:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  2263dd:	00 03 00 00 00 
  2263e2:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2263e9:	00 
  2263ea:	48 8d 35 47 a2 fd ff 	lea    -0x25db9(%rip),%rsi        # 200638 <str.0+0x118>
  2263f1:	e8 fa b6 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2263f6:	88 44 24 0b          	mov    %al,0xb(%rsp)
  2263fa:	8a 44 24 0b          	mov    0xb(%rsp),%al
  2263fe:	a8 01                	test   $0x1,%al
  226400:	75 0c                	jne    22640e <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x1ce>
  226402:	eb 00                	jmp    226404 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x1c4>
  226404:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  22640b:	00 
  22640c:	eb 5a                	jmp    226468 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x228>
  22640e:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  226415:	00 
  226416:	48 8b 3d f3 4c 01 00 	mov    0x14cf3(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22641d:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  226424:	00 
  226425:	e8 96 28 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22642a:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  226431:	00 
  226432:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  226439:	00 
  22643a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  226441:	00 
  226442:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  226449:	00 
  22644a:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  226451:	00 
  226452:	e8 99 b6 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226457:	88 44 24 0a          	mov    %al,0xa(%rsp)
  22645b:	8a 44 24 0a          	mov    0xa(%rsp),%al
  22645f:	24 01                	and    $0x1,%al
  226461:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  226468:	f6 84 24 af 00 00 00 	testb  $0x1,0xaf(%rsp)
  22646f:	01 
  226470:	75 07                	jne    226479 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x239>
    heap::init_heap();
  226472:	e8 99 3f 00 00       	callq  22a410 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE>
  226477:	eb 43                	jmp    2264bc <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x27c>
    log::info!("Enabling kernel heap...");
  226479:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  226480:	00 
  226481:	48 8d 35 88 36 01 00 	lea    0x13688(%rip),%rsi        # 239b10 <memcmp+0x3560>
  226488:	ba 01 00 00 00       	mov    $0x1,%edx
  22648d:	48 8d 0d ac c8 fd ff 	lea    -0x23754(%rip),%rcx        # 202d40 <str.1+0x70>
  226494:	31 c0                	xor    %eax,%eax
  226496:	41 89 c0             	mov    %eax,%r8d
  226499:	e8 22 fe fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22649e:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  2264a5:	00 
  2264a6:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  2264ad:	00 
  2264ae:	48 8d 15 6b 36 01 00 	lea    0x1366b(%rip),%rdx        # 239b20 <memcmp+0x3570>
  2264b5:	e8 36 a1 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2264ba:	eb b6                	jmp    226472 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE+0x232>
}
  2264bc:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  2264c3:	c3                   	retq   
  2264c4:	cc                   	int3   
  2264c5:	cc                   	int3   
  2264c6:	cc                   	int3   
  2264c7:	cc                   	int3   
  2264c8:	cc                   	int3   
  2264c9:	cc                   	int3   
  2264ca:	cc                   	int3   
  2264cb:	cc                   	int3   
  2264cc:	cc                   	int3   
  2264cd:	cc                   	int3   
  2264ce:	cc                   	int3   
  2264cf:	cc                   	int3   

00000000002264d0 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E>:

#[inline]
pub fn run_initial_paging_test() {
  2264d0:	48 81 ec 18 03 00 00 	sub    $0x318,%rsp
    log::info!("Running simple paging test....");
  2264d7:	48 c7 84 24 b0 00 00 	movq   $0x3,0xb0(%rsp)
  2264de:	00 03 00 00 00 
  2264e3:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  2264ea:	00 
  2264eb:	48 8d 35 46 a1 fd ff 	lea    -0x25eba(%rip),%rsi        # 200638 <str.0+0x118>
  2264f2:	e8 f9 b5 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2264f7:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  2264fe:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  226505:	a8 01                	test   $0x1,%al
  226507:	75 0c                	jne    226515 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x45>
  226509:	eb 00                	jmp    22650b <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x3b>
  22650b:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  226512:	00 
  226513:	eb 60                	jmp    226575 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xa5>
  226515:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  22651c:	00 
  22651d:	48 8b 3d ec 4b 01 00 	mov    0x14bec(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  226524:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  22652b:	00 
  22652c:	e8 8f 27 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  226531:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  226538:	00 
  226539:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  226540:	00 
  226541:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  226548:	00 
  226549:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  226550:	00 
  226551:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  226558:	00 
  226559:	e8 92 b5 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22655e:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  226565:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  22656c:	24 01                	and    $0x1,%al
  22656e:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  226575:	f6 84 24 bf 00 00 00 	testb  $0x1,0xbf(%rsp)
  22657c:	01 
  22657d:	75 35                	jne    2265b4 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xe4>

    // some dummy value:
    let expected_value: u64 = 0x34445544;
  22657f:	48 c7 84 24 f8 00 00 	movq   $0x34445544,0xf8(%rsp)
  226586:	00 44 55 44 34 

    log::debug!(
  22658b:	48 c7 84 24 00 01 00 	movq   $0x4,0x100(%rsp)
  226592:	00 04 00 00 00 
  226597:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  22659e:	00 
  22659f:	48 8d 35 92 a0 fd ff 	lea    -0x25f6e(%rip),%rsi        # 200638 <str.0+0x118>
  2265a6:	e8 45 b5 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2265ab:	88 84 24 ad 00 00 00 	mov    %al,0xad(%rsp)
  2265b2:	eb 43                	jmp    2265f7 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x127>
    log::info!("Running simple paging test....");
  2265b4:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2265bb:	00 
  2265bc:	48 8d 35 95 35 01 00 	lea    0x13595(%rip),%rsi        # 239b58 <memcmp+0x35a8>
  2265c3:	ba 01 00 00 00       	mov    $0x1,%edx
  2265c8:	48 8d 0d 71 c7 fd ff 	lea    -0x2388f(%rip),%rcx        # 202d40 <str.1+0x70>
  2265cf:	31 c0                	xor    %eax,%eax
  2265d1:	41 89 c0             	mov    %eax,%r8d
  2265d4:	e8 e7 fc fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  2265d9:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  2265e0:	00 
  2265e1:	48 8d bc 24 c8 00 00 	lea    0xc8(%rsp),%rdi
  2265e8:	00 
  2265e9:	48 8d 15 78 35 01 00 	lea    0x13578(%rip),%rdx        # 239b68 <memcmp+0x35b8>
  2265f0:	e8 fb 9f 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2265f5:	eb 88                	jmp    22657f <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0xaf>
  2265f7:	8a 84 24 ad 00 00 00 	mov    0xad(%rsp),%al
    log::debug!(
  2265fe:	a8 01                	test   $0x1,%al
  226600:	75 0c                	jne    22660e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x13e>
  226602:	eb 00                	jmp    226604 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x134>
  226604:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22660b:	00 
  22660c:	eb 60                	jmp    22666e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x19e>
  22660e:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  226615:	00 
  226616:	48 8b 3d f3 4a 01 00 	mov    0x14af3(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22661d:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  226624:	00 
  226625:	e8 96 26 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22662a:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  226631:	00 
  226632:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  226639:	00 
  22663a:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  226641:	00 
  226642:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  226649:	00 
  22664a:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
  226651:	00 
  226652:	e8 99 b4 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226657:	88 84 24 ac 00 00 00 	mov    %al,0xac(%rsp)
  22665e:	8a 84 24 ac 00 00 00 	mov    0xac(%rsp),%al
  226665:	24 01                	and    $0x1,%al
  226667:	88 84 24 0f 01 00 00 	mov    %al,0x10f(%rsp)
  22666e:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  226675:	01 
  226676:	75 1a                	jne    226692 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x1c2>
        "The expected value is at virtual address={:p}",
        &expected_value
    );

    let k_table = paging::get_kernel_table();
  226678:	e8 e3 73 fe ff       	callq  20da60 <_ZN9r3_kernel2mm6paging16get_kernel_table17h7f76f9d3055d33d3E>
  22667d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  226684:	00 
  226685:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  22668c:	00 
  22668d:	e9 b2 00 00 00       	jmpq   226744 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x274>
        &expected_value
  226692:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  226699:	00 
  22669a:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  2266a1:	00 
    log::debug!(
  2266a2:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  2266a9:	00 
  2266aa:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  2266b1:	00 
  2266b2:	48 8b bc 24 58 01 00 	mov    0x158(%rsp),%rdi
  2266b9:	00 
  2266ba:	48 89 bc 24 98 02 00 	mov    %rdi,0x298(%rsp)
  2266c1:	00 
  2266c2:	48 8d 35 e7 7f fe ff 	lea    -0x18019(%rip),%rsi        # 20e6b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  2266c9:	e8 12 87 fe ff       	callq  20ede0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  2266ce:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2266d5:	00 
  2266d6:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  2266dd:	00 
  2266de:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2266e5:	00 
  2266e6:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2266ed:	00 
  2266ee:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  2266f5:	00 
  2266f6:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  2266fd:	00 
  2266fe:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  226705:	00 
  226706:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  22670d:	00 
  22670e:	48 8d 35 8b 34 01 00 	lea    0x1348b(%rip),%rsi        # 239ba0 <memcmp+0x35f0>
  226715:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22671b:	4c 89 c2             	mov    %r8,%rdx
  22671e:	e8 9d fb fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  226723:	48 8b b4 24 00 01 00 	mov    0x100(%rsp),%rsi
  22672a:	00 
  22672b:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  226732:	00 
  226733:	48 8d 15 76 34 01 00 	lea    0x13476(%rip),%rdx        # 239bb0 <memcmp+0x3600>
  22673a:	e8 b1 9e 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22673f:	e9 34 ff ff ff       	jmpq   226678 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x1a8>
    let phy_addr = k_table.translate(VirtualAddress::from_ptr(&expected_value));
  226744:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22674b:	00 
  22674c:	e8 2f 15 ff ff       	callq  217c80 <_ZN9r3_kernel2mm14VirtualAddress8from_ptr17he3472abb9986f617E>
  226751:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  226758:	00 
  226759:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  226760:	00 
  226761:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  226768:	00 
  226769:	e8 a2 6a fe ff       	callq  20d210 <_ZN9r3_kernel2mm6paging20VirtualMemoryManager9translate17h7093cdbb73290b19E>
  22676e:	48 89 94 24 70 01 00 	mov    %rdx,0x170(%rsp)
  226775:	00 
  226776:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  22677d:	00 

    if phy_addr.is_none() {
  22677e:	48 8d bc 24 68 01 00 	lea    0x168(%rsp),%rdi
  226785:	00 
  226786:	e8 25 9f fe ff       	callq  2106b0 <_ZN4core6option15Option$LT$T$GT$7is_none17hbe8b97c331f96930E>
  22678b:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
  226792:	8a 84 24 87 00 00 00 	mov    0x87(%rsp),%al
  226799:	a8 01                	test   $0x1,%al
  22679b:	75 26                	jne    2267c3 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x2f3>
  22679d:	eb 00                	jmp    22679f <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x2cf>
            &expected_value
        );
    }

    // check if the difference between physical address and virtual address == phy_offset
    let phy_offset = BootProtocol::get_phy_offset();
  22679f:	e8 0c 19 ff ff       	callq  2180b0 <_ZN9r3_kernel10boot_proto12BootProtocol14get_phy_offset17h3c6fb047c1d5c622E>
  2267a4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2267a9:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  2267ae:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  2267b5:	00 
  2267b6:	48 89 94 24 b8 02 00 	mov    %rdx,0x2b8(%rsp)
  2267bd:	00 
  2267be:	e9 9b 00 00 00       	jmpq   22685e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x38e>
            &expected_value
  2267c3:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  2267ca:	00 
  2267cb:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  2267d2:	00 
        panic!(
  2267d3:	48 8d 84 24 c0 01 00 	lea    0x1c0(%rsp),%rax
  2267da:	00 
  2267db:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  2267e2:	00 
  2267e3:	48 8b bc 24 b8 01 00 	mov    0x1b8(%rsp),%rdi
  2267ea:	00 
  2267eb:	48 89 bc 24 a8 02 00 	mov    %rdi,0x2a8(%rsp)
  2267f2:	00 
  2267f3:	48 8d 35 b6 7e fe ff 	lea    -0x1814a(%rip),%rsi        # 20e6b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  2267fa:	e8 e1 85 fe ff       	callq  20ede0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  2267ff:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  226804:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  226809:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22680e:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  226813:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  22681a:	00 
  22681b:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  226822:	00 
  226823:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  22682a:	00 
  22682b:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  226832:	00 
  226833:	48 8d 35 ae 33 01 00 	lea    0x133ae(%rip),%rsi        # 239be8 <memcmp+0x3638>
  22683a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  226840:	4c 89 c2             	mov    %r8,%rdx
  226843:	e8 78 fa fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  226848:	48 8d 35 a9 33 01 00 	lea    0x133a9(%rip),%rsi        # 239bf8 <memcmp+0x3648>
  22684f:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  226856:	00 
  226857:	e8 d4 cc 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22685c:	0f 0b                	ud2    
  22685e:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  226863:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  226868:	48 8d 15 a1 33 01 00 	lea    0x133a1(%rip),%rdx        # 239c10 <memcmp+0x3660>
  22686f:	e8 ac 97 fe ff       	callq  210020 <_ZN4core6option15Option$LT$T$GT$6unwrap17h06807f43c3a29dbbE>
  226874:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  226879:	48 8b bc 24 68 01 00 	mov    0x168(%rsp),%rdi
  226880:	00 
  226881:	48 8b b4 24 70 01 00 	mov    0x170(%rsp),%rsi
  226888:	00 
  226889:	48 8d 15 98 33 01 00 	lea    0x13398(%rip),%rdx        # 239c28 <memcmp+0x3678>
  226890:	e8 ab 99 fe ff       	callq  210240 <_ZN4core6option15Option$LT$T$GT$6unwrap17h801de2eee5e0bae0E>
  226895:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  22689c:	00 
  22689d:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  2268a4:	00 
  2268a5:	e8 16 f8 ff ff       	callq  2260c0 <_ZN9r3_kernel2mm15PhysicalAddress6as_u6417h6bbb78589fdfd24bE>
  2268aa:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2268af:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  2268b4:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2268b9:	48 01 c8             	add    %rcx,%rax
  2268bc:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2268c1:	0f 92 c0             	setb   %al
  2268c4:	a8 01                	test   $0x1,%al
  2268c6:	75 70                	jne    226938 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x468>
  2268c8:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2268cd:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
  2268d4:	00 
    let value: &u64 = unsafe { &*(v_result_addr as *const u64) };
  2268d5:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  2268dc:	00 

    assert_eq!(expected_value, *value);
  2268dd:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  2268e4:	00 
  2268e5:	48 8d 8c 24 f8 00 00 	lea    0xf8(%rsp),%rcx
  2268ec:	00 
  2268ed:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  2268f4:	00 
  2268f5:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  2268fc:	00 
  2268fd:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  226904:	00 
  226905:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22690a:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  226911:	00 
  226912:	48 8b 8c 24 e0 01 00 	mov    0x1e0(%rsp),%rcx
  226919:	00 
  22691a:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22691f:	48 89 8c 24 d0 02 00 	mov    %rcx,0x2d0(%rsp)
  226926:	00 
  226927:	48 8b 00             	mov    (%rax),%rax
  22692a:	48 3b 01             	cmp    (%rcx),%rax
  22692d:	0f 94 c0             	sete   %al
  226930:	34 ff                	xor    $0xff,%al
  226932:	a8 01                	test   $0x1,%al
  226934:	75 42                	jne    226978 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4a8>
  226936:	eb 1a                	jmp    226952 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x482>
    let v_result_addr = phy_offset.unwrap() + phy_addr.unwrap().as_u64();
  226938:	48 8d 3d 91 c3 fd ff 	lea    -0x23c6f(%rip),%rdi        # 202cd0 <str.1>
  22693f:	48 8d 15 fa 32 01 00 	lea    0x132fa(%rip),%rdx        # 239c40 <memcmp+0x3690>
  226946:	be 1c 00 00 00       	mov    $0x1c,%esi
  22694b:	e8 10 cb 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  226950:	0f 0b                	ud2    

    log::info!(
  226952:	48 c7 84 24 20 02 00 	movq   $0x3,0x220(%rsp)
  226959:	00 03 00 00 00 
  22695e:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  226965:	00 
  226966:	48 8d 35 cb 9c fd ff 	lea    -0x26335(%rip),%rsi        # 200638 <str.0+0x118>
  22696d:	e8 7e b1 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226972:	88 44 24 37          	mov    %al,0x37(%rsp)
  226976:	eb 36                	jmp    2269ae <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4de>
  226978:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22697d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    assert_eq!(expected_value, *value);
  226982:	c6 84 24 ef 01 00 00 	movb   $0x0,0x1ef(%rsp)
  226989:	00 
  22698a:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  226991:	00 00 00 00 00 
  226996:	4c 8d 05 bb 32 01 00 	lea    0x132bb(%rip),%r8        # 239c58 <memcmp+0x36a8>
  22699d:	31 ff                	xor    %edi,%edi
  22699f:	48 8d 8c 24 f0 01 00 	lea    0x1f0(%rsp),%rcx
  2269a6:	00 
  2269a7:	e8 24 81 ff ff       	callq  21ead0 <_ZN4core9panicking13assert_failed17hf21d4688260afdf9E>
  2269ac:	0f 0b                	ud2    
  2269ae:	8a 44 24 37          	mov    0x37(%rsp),%al
    log::info!(
  2269b2:	a8 01                	test   $0x1,%al
  2269b4:	75 0c                	jne    2269c2 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4f2>
  2269b6:	eb 00                	jmp    2269b8 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x4e8>
  2269b8:	c6 84 24 2f 02 00 00 	movb   $0x0,0x22f(%rsp)
  2269bf:	00 
  2269c0:	eb 5a                	jmp    226a1c <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x54c>
  2269c2:	c6 84 24 ef 02 00 00 	movb   $0x0,0x2ef(%rsp)
  2269c9:	00 
  2269ca:	48 8b 3d 3f 47 01 00 	mov    0x1473f(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2269d1:	0f b6 b4 24 ef 02 00 	movzbl 0x2ef(%rsp),%esi
  2269d8:	00 
  2269d9:	e8 e2 22 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2269de:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  2269e5:	00 
  2269e6:	48 8b 84 24 f0 02 00 	mov    0x2f0(%rsp),%rax
  2269ed:	00 
  2269ee:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  2269f5:	00 
  2269f6:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  2269fd:	00 
  2269fe:	48 8d b4 24 30 02 00 	lea    0x230(%rsp),%rsi
  226a05:	00 
  226a06:	e8 e5 b0 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226a0b:	88 44 24 36          	mov    %al,0x36(%rsp)
  226a0f:	8a 44 24 36          	mov    0x36(%rsp),%al
  226a13:	24 01                	and    $0x1,%al
  226a15:	88 84 24 2f 02 00 00 	mov    %al,0x22f(%rsp)
  226a1c:	f6 84 24 2f 02 00 00 	testb  $0x1,0x22f(%rsp)
  226a23:	01 
  226a24:	75 08                	jne    226a2e <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x55e>
        "Virtual Memory test passed, expected=0x{:x}, got=0x{:x}",
        expected_value,
        value
    );
}
  226a26:	48 81 c4 18 03 00 00 	add    $0x318,%rsp
  226a2d:	c3                   	retq   
    log::info!(
  226a2e:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  226a35:	00 
  226a36:	48 89 84 24 88 02 00 	mov    %rax,0x288(%rsp)
  226a3d:	00 
  226a3e:	48 8d 84 24 d0 01 00 	lea    0x1d0(%rsp),%rax
  226a45:	00 
  226a46:	48 89 84 24 90 02 00 	mov    %rax,0x290(%rsp)
  226a4d:	00 
  226a4e:	48 8b bc 24 88 02 00 	mov    0x288(%rsp),%rdi
  226a55:	00 
  226a56:	48 89 bc 24 d8 02 00 	mov    %rdi,0x2d8(%rsp)
  226a5d:	00 
  226a5e:	48 8b 84 24 90 02 00 	mov    0x290(%rsp),%rax
  226a65:	00 
  226a66:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  226a6b:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  226a72:	00 
  226a73:	48 8b 35 9e 46 01 00 	mov    0x1469e(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  226a7a:	e8 c1 83 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  226a7f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  226a84:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  226a89:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  226a8e:	48 8d 35 5b 7c fe ff 	lea    -0x183a5(%rip),%rsi        # 20e6f0 <_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..LowerHex$GT$3fmt17h48c3c6680a24267dE>
  226a95:	e8 46 83 fe ff       	callq  20ede0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  226a9a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  226a9f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  226aa4:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  226aa9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  226aae:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  226ab3:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  226ab8:	48 89 b4 24 68 02 00 	mov    %rsi,0x268(%rsp)
  226abf:	00 
  226ac0:	48 89 94 24 70 02 00 	mov    %rdx,0x270(%rsp)
  226ac7:	00 
  226ac8:	48 89 8c 24 78 02 00 	mov    %rcx,0x278(%rsp)
  226acf:	00 
  226ad0:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  226ad7:	00 
  226ad8:	48 8d 8c 24 68 02 00 	lea    0x268(%rsp),%rcx
  226adf:	00 
  226ae0:	48 8d bc 24 38 02 00 	lea    0x238(%rsp),%rdi
  226ae7:	00 
  226ae8:	48 8d 35 81 31 01 00 	lea    0x13181(%rip),%rsi        # 239c70 <memcmp+0x36c0>
  226aef:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  226af5:	4c 89 c2             	mov    %r8,%rdx
  226af8:	e8 c3 f7 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  226afd:	48 8b b4 24 20 02 00 	mov    0x220(%rsp),%rsi
  226b04:	00 
  226b05:	48 8d bc 24 38 02 00 	lea    0x238(%rsp),%rdi
  226b0c:	00 
  226b0d:	48 8d 15 7c 31 01 00 	lea    0x1317c(%rip),%rdx        # 239c90 <memcmp+0x36e0>
  226b14:	e8 d7 9a 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  226b19:	e9 08 ff ff ff       	jmpq   226a26 <_ZN9r3_kernel2mm23run_initial_paging_test17h8923207866b493b2E+0x556>
  226b1e:	cc                   	int3   
  226b1f:	cc                   	int3   

0000000000226b20 <_ZN66_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..fmt..Debug$GT$3fmt17he76486db047b42f9E>:
#[derive(Debug, Clone, Copy)]
  226b20:	48 83 ec 58          	sub    $0x58,%rsp
  226b24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  226b29:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  226b2e:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct VirtualAddress(u64);
  226b33:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug, Clone, Copy)]
  226b38:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  226b3d:	48 8d 15 f0 c2 fd ff 	lea    -0x23d10(%rip),%rdx        # 202e34 <str.1+0x164>
  226b44:	b9 0e 00 00 00       	mov    $0xe,%ecx
  226b49:	e8 42 ec 00 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  226b4e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  226b53:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  226b58:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct VirtualAddress(u64);
  226b5d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  226b62:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug, Clone, Copy)]
  226b67:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  226b6c:	48 8d 15 55 31 01 00 	lea    0x13155(%rip),%rdx        # 239cc8 <memcmp+0x3718>
  226b73:	e8 98 c1 00 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  226b78:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  226b7d:	e8 fe c2 00 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  226b82:	88 44 24 0f          	mov    %al,0xf(%rsp)
  226b86:	8a 44 24 0f          	mov    0xf(%rsp),%al
  226b8a:	24 01                	and    $0x1,%al
  226b8c:	0f b6 c0             	movzbl %al,%eax
  226b8f:	48 83 c4 58          	add    $0x58,%rsp
  226b93:	c3                   	retq   
  226b94:	cc                   	int3   
  226b95:	cc                   	int3   
  226b96:	cc                   	int3   
  226b97:	cc                   	int3   
  226b98:	cc                   	int3   
  226b99:	cc                   	int3   
  226b9a:	cc                   	int3   
  226b9b:	cc                   	int3   
  226b9c:	cc                   	int3   
  226b9d:	cc                   	int3   
  226b9e:	cc                   	int3   
  226b9f:	cc                   	int3   

0000000000226ba0 <_ZN68_$LT$r3_kernel..mm..VirtualAddress$u20$as$u20$core..clone..Clone$GT$5clone17h4032ae80f4183b4aE>:
  226ba0:	50                   	push   %rax
  226ba1:	48 89 3c 24          	mov    %rdi,(%rsp)
  226ba5:	48 8b 07             	mov    (%rdi),%rax
  226ba8:	59                   	pop    %rcx
  226ba9:	c3                   	retq   
  226baa:	cc                   	int3   
  226bab:	cc                   	int3   
  226bac:	cc                   	int3   
  226bad:	cc                   	int3   
  226bae:	cc                   	int3   
  226baf:	cc                   	int3   

0000000000226bb0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
  226bb0:	48 83 ec 28          	sub    $0x28,%rsp
  226bb4:	48 89 34 24          	mov    %rsi,(%rsp)
  226bb8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  226bbd:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  226bc2:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
                    // The order here is important to generate more optimal assembly.
                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.
                    if *self < *other { Less }
  226bc7:	48 8b 07             	mov    (%rdi),%rax
  226bca:	48 3b 06             	cmp    (%rsi),%rax
  226bcd:	72 13                	jb     226be2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x32>
  226bcf:	48 8b 0c 24          	mov    (%rsp),%rcx
  226bd3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                    else if *self == *other { Equal }
  226bd8:	48 8b 00             	mov    (%rax),%rax
  226bdb:	48 3b 01             	cmp    (%rcx),%rax
  226bde:	74 17                	je     226bf7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x47>
  226be0:	eb 0e                	jmp    226bf0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x40>
                    if *self < *other { Less }
  226be2:	c6 44 24 17 ff       	movb   $0xff,0x17(%rsp)
                    else { Greater }
                }
  226be7:	8a 44 24 17          	mov    0x17(%rsp),%al
  226beb:	48 83 c4 28          	add    $0x28,%rsp
  226bef:	c3                   	retq   
                    else { Greater }
  226bf0:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
                    else if *self == *other { Equal }
  226bf5:	eb 05                	jmp    226bfc <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x4c>
  226bf7:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
                    if *self < *other { Less }
  226bfc:	eb e9                	jmp    226be7 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h9525e39ebbf565b9E+0x37>
  226bfe:	cc                   	int3   
  226bff:	cc                   	int3   

0000000000226c00 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h88ff743f82721c38E>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
  226c00:	48 83 ec 10          	sub    $0x10,%rsp
  226c04:	48 89 3c 24          	mov    %rdi,(%rsp)
  226c08:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  226c0d:	48 8b 07             	mov    (%rdi),%rax
  226c10:	48 3b 06             	cmp    (%rsi),%rax
  226c13:	0f 92 c0             	setb   %al
  226c16:	24 01                	and    $0x1,%al
  226c18:	0f b6 c0             	movzbl %al,%eax
  226c1b:	48 83 c4 10          	add    $0x10,%rsp
  226c1f:	c3                   	retq   

0000000000226c20 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE>:
use uart::UART_DRIVER;

// a logger that implements kernel logging functionalities
pub struct KernelLogger;

fn get_color(level: Level) -> Pixel {
  226c20:	48 83 ec 18          	sub    $0x18,%rsp
  226c24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    match level {
  226c29:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  226c2e:	48 89 04 24          	mov    %rax,(%rsp)
  226c32:	48 83 e8 01          	sub    $0x1,%rax
  226c36:	74 24                	je     226c5c <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x3c>
  226c38:	eb 00                	jmp    226c3a <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x1a>
  226c3a:	48 8b 04 24          	mov    (%rsp),%rax
  226c3e:	48 83 e8 02          	sub    $0x2,%rax
  226c42:	74 2e                	je     226c72 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x52>
  226c44:	eb 00                	jmp    226c46 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x26>
            b: 0,
            g: 255,
            r: 255,
            channel: 0,
        },
        _ => Pixel {
  226c46:	c6 44 24 10 ff       	movb   $0xff,0x10(%rsp)
  226c4b:	c6 44 24 11 ff       	movb   $0xff,0x11(%rsp)
  226c50:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  226c55:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
  226c5a:	eb 2a                	jmp    226c86 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x66>
        Level::Error => Pixel {
  226c5c:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  226c61:	c6 44 24 11 00       	movb   $0x0,0x11(%rsp)
  226c66:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  226c6b:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
  226c70:	eb 14                	jmp    226c86 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE+0x66>
        Level::Warn => Pixel {
  226c72:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  226c77:	c6 44 24 11 ff       	movb   $0xff,0x11(%rsp)
  226c7c:	c6 44 24 12 ff       	movb   $0xff,0x12(%rsp)
  226c81:	c6 44 24 13 00       	movb   $0x0,0x13(%rsp)
            g: 255,
            r: 255,
            channel: 0,
        },
    }
}
  226c86:	8b 44 24 10          	mov    0x10(%rsp),%eax
  226c8a:	48 83 c4 18          	add    $0x18,%rsp
  226c8e:	c3                   	retq   
  226c8f:	cc                   	int3   

0000000000226c90 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$7enabled17hb850b3dff7dd95eaE>:
        );
    };
}

impl log::Log for KernelLogger {
    fn enabled(&self, _meta: &Metadata) -> bool {
  226c90:	48 83 ec 10          	sub    $0x10,%rsp
  226c94:	48 89 3c 24          	mov    %rdi,(%rsp)
  226c98:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        // TOOD: Add level based filtering
        true
    }
  226c9d:	b0 01                	mov    $0x1,%al
  226c9f:	24 01                	and    $0x1,%al
  226ca1:	0f b6 c0             	movzbl %al,%eax
  226ca4:	48 83 c4 10          	add    $0x10,%rsp
  226ca8:	c3                   	retq   
  226ca9:	cc                   	int3   
  226caa:	cc                   	int3   
  226cab:	cc                   	int3   
  226cac:	cc                   	int3   
  226cad:	cc                   	int3   
  226cae:	cc                   	int3   
  226caf:	cc                   	int3   

0000000000226cb0 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E>:

    fn log(&self, record: &Record) {
  226cb0:	48 81 ec a8 02 00 00 	sub    $0x2a8,%rsp
  226cb7:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
  226cbe:	00 
  226cbf:	48 89 f8             	mov    %rdi,%rax
  226cc2:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  226cc9:	00 
  226cca:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  226cd1:	00 
  226cd2:	48 89 bc 24 60 02 00 	mov    %rdi,0x260(%rsp)
  226cd9:	00 
        let level = record.level();
  226cda:	e8 a1 ad fe ff       	callq  211a80 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  226cdf:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  226ce6:	00 

        if level <= LevelFilter::Trace {
  226ce7:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  226cee:	00 
  226cef:	48 8d 35 42 99 fd ff 	lea    -0x266be(%rip),%rsi        # 200638 <str.0+0x118>
  226cf6:	e8 f5 ad fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226cfb:	88 84 24 ef 00 00 00 	mov    %al,0xef(%rsp)
  226d02:	8a 84 24 ef 00 00 00 	mov    0xef(%rsp),%al
  226d09:	a8 01                	test   $0x1,%al
  226d0b:	75 22                	jne    226d2f <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x7f>
  226d0d:	eb 00                	jmp    226d0f <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
                record.level(),
                record.args()
            );
        }

        if level <= LevelFilter::Info {
  226d0f:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  226d16:	00 
  226d17:	48 8d 35 f2 98 fd ff 	lea    -0x2670e(%rip),%rsi        # 200610 <str.0+0xf0>
  226d1e:	e8 cd ad fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  226d23:	88 84 24 ee 00 00 00 	mov    %al,0xee(%rsp)
  226d2a:	e9 aa 02 00 00       	jmpq   226fd9 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x329>
            print_uart!(
  226d2f:	48 8d 3d 4c 95 fd ff 	lea    -0x26ab4(%rip),%rdi        # 200282 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE>
  226d36:	e8 c5 fc fd ff       	callq  206a00 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>
  226d3b:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  226d42:	00 
  226d43:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  226d4a:	00 
  226d4b:	e8 50 9b fe ff       	callq  2108a0 <_ZN4core6option15Option$LT$T$GT$7is_some17h9dd67ad279954858E>
  226d50:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  226d57:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  226d5e:	a8 01                	test   $0x1,%al
  226d60:	75 02                	jne    226d64 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0xb4>
  226d62:	eb ab                	jmp    226d0f <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
  226d64:	48 8d 3d 17 95 fd ff 	lea    -0x26ae9(%rip),%rdi        # 200282 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h37b5c161e9eaa29dE>
  226d6b:	e8 90 fc fd ff       	callq  206a00 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h592fdb146c1cf189E>
  226d70:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  226d77:	00 
  226d78:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  226d7f:	00 
  226d80:	e8 6b 90 fe ff       	callq  20fdf0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb16d7452005ad8a1E>
  226d85:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  226d8c:	00 
  226d8d:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  226d94:	00 
  226d95:	48 8d 35 4c 2f 01 00 	lea    0x12f4c(%rip),%rsi        # 239ce8 <memcmp+0x3738>
  226d9c:	e8 ff 95 fe ff       	callq  2103a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc3d4431f4f39d75cE>
  226da1:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  226da8:	00 
  226da9:	48 89 84 24 68 02 00 	mov    %rax,0x268(%rsp)
  226db0:	00 
  226db1:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  226db8:	00 
  226db9:	e8 72 56 00 00       	callq  22c430 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec73a184c5b52be1E>
  226dbe:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  226dc5:	00 
  226dc6:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  226dcd:	00 
  226dce:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  226dd5:	00 
  226dd6:	e8 d5 57 00 00       	callq  22c5b0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf4deabd02622e74dE>
  226ddb:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  226de2:	00 
  226de3:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  226dea:	00 
                record.target(),
  226deb:	e8 b0 ac fe ff       	callq  211aa0 <_ZN3log6Record6target17h757367dd169b837eE>
  226df0:	48 89 94 24 90 01 00 	mov    %rdx,0x190(%rsp)
  226df7:	00 
  226df8:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  226dff:	00 
  226e00:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  226e07:	00 
                record.level(),
  226e08:	e8 73 ac fe ff       	callq  211a80 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  226e0d:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  226e14:	00 
  226e15:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  226e1c:	00 
                record.args()
  226e1d:	e8 4e ac fe ff       	callq  211a70 <_ZN3log6Record4args17h9dae30359519c3ecE>
  226e22:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  226e29:	00 
            print_uart!(
  226e2a:	48 8d 84 24 88 01 00 	lea    0x188(%rsp),%rax
  226e31:	00 
  226e32:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  226e39:	00 
  226e3a:	48 8d 84 24 98 01 00 	lea    0x198(%rsp),%rax
  226e41:	00 
  226e42:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  226e49:	00 
  226e4a:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  226e51:	00 
  226e52:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  226e59:	00 
  226e5a:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  226e61:	00 
  226e62:	48 89 bc 24 70 02 00 	mov    %rdi,0x270(%rsp)
  226e69:	00 
  226e6a:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  226e71:	00 
  226e72:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  226e79:	00 
  226e7a:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  226e81:	00 
  226e82:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  226e89:	00 
  226e8a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  226e91:	00 
  226e92:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  226e99:	00 
  226e9a:	48 8b 35 7f 42 01 00 	mov    0x1427f(%rip),%rsi        # 23b120 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  226ea1:	e8 6a a6 00 00       	callq  231510 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  226ea6:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  226ead:	00 
  226eae:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  226eb5:	00 
  226eb6:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  226ebd:	00 
  226ebe:	48 8b 35 cb 42 01 00 	mov    0x142cb(%rip),%rsi        # 23b190 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe0>
  226ec5:	e8 b6 78 fe ff       	callq  20e780 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>
  226eca:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  226ed1:	00 
  226ed2:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  226ed9:	00 
  226eda:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  226ee1:	00 
  226ee2:	48 8d 35 57 77 fe ff 	lea    -0x188a9(%rip),%rsi        # 20e640 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>
  226ee9:	e8 b2 7c fe ff       	callq  20eba0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>
  226eee:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  226ef3:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  226efa:	00 
  226efb:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  226f02:	00 
  226f03:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  226f08:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  226f0f:	00 
  226f10:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  226f17:	00 
  226f18:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  226f1f:	00 
  226f20:	4c 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%r8
  226f27:	00 
  226f28:	4c 89 84 24 40 01 00 	mov    %r8,0x140(%rsp)
  226f2f:	00 
  226f30:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  226f37:	00 
  226f38:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
  226f3f:	00 
  226f40:	48 89 94 24 58 01 00 	mov    %rdx,0x158(%rsp)
  226f47:	00 
  226f48:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
  226f4f:	00 
  226f50:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  226f57:	00 
  226f58:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  226f5f:	00 
  226f60:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  226f65:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  226f6a:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  226f71:	00 
  226f72:	48 8d 35 87 2d 01 00 	lea    0x12d87(%rip),%rsi        # 239d00 <memcmp+0x3750>
  226f79:	ba 04 00 00 00       	mov    $0x4,%edx
  226f7e:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  226f84:	4c 8d 0d cd be fd ff 	lea    -0x24133(%rip),%r9        # 202e58 <str.1+0x188>
  226f8b:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  226f92:	00 
  226f93:	e8 c8 f2 fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  226f98:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
  226f9f:	00 
  226fa0:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
  226fa7:	00 
  226fa8:	e8 53 cc fe ff       	callq  213c00 <_ZN4core3fmt5Write9write_fmt17h8232e9b5417ceb89E>
  226fad:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  226fb1:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  226fb5:	0f b6 f8             	movzbl %al,%edi
  226fb8:	83 e7 01             	and    $0x1,%edi
  226fbb:	48 8d 35 26 2d 01 00 	lea    0x12d26(%rip),%rsi        # 239ce8 <memcmp+0x3738>
  226fc2:	e8 39 3e fe ff       	callq  20ae00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hbb5e1cb84926ca8eE>
  226fc7:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  226fce:	00 
  226fcf:	e8 bc 4a fe ff       	callq  20ba90 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17ha1bb7375bd21c262E>
  226fd4:	e9 36 fd ff ff       	jmpq   226d0f <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x5f>
  226fd9:	8a 84 24 ee 00 00 00 	mov    0xee(%rsp),%al
        if level <= LevelFilter::Info {
  226fe0:	a8 01                	test   $0x1,%al
  226fe2:	75 0a                	jne    226fee <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x33e>
  226fe4:	eb 00                	jmp    226fe6 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x336>
                record.target(),
                record.level(),
                record.args()
            );
        }
    }
  226fe6:	48 81 c4 a8 02 00 00 	add    $0x2a8,%rsp
  226fed:	c3                   	retq   
            print_framebuffer!(
  226fee:	48 8d 3d f7 b6 fd ff 	lea    -0x24909(%rip),%rdi        # 2026ec <_ZN9r3_kernel7drivers7display7fb_text18FRAMEBUFFER_LOGGER17h37ab90efacc0829dE>
  226ff5:	e8 36 6b ff ff       	callq  21db30 <_ZN100_$LT$r3_kernel..drivers..display..fb_text..FRAMEBUFFER_LOGGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7140a24394aa1ffE>
  226ffa:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  226fff:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  227004:	e8 e7 52 00 00       	callq  22c2f0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h728df519dd9bcd16E>
  227009:	48 89 94 24 b0 01 00 	mov    %rdx,0x1b0(%rsp)
  227010:	00 
  227011:	48 89 84 24 a8 01 00 	mov    %rax,0x1a8(%rsp)
  227018:	00 
  227019:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  227020:	00 
  227021:	e8 5a 55 00 00       	callq  22c580 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>
  227026:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
                level,
  22702b:	48 8b bc 24 f8 00 00 	mov    0xf8(%rsp),%rdi
  227032:	00 
            print_framebuffer!(
  227033:	e8 e8 fb ff ff       	callq  226c20 <_ZN9r3_kernel7logging9get_color17hc0e9436080cb118eE>
  227038:	89 84 24 8c 02 00 00 	mov    %eax,0x28c(%rsp)
  22703f:	8b 84 24 8c 02 00 00 	mov    0x28c(%rsp),%eax
  227046:	89 84 24 b8 01 00 00 	mov    %eax,0x1b8(%rsp)
  22704d:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  227052:	8b b4 24 b8 01 00 00 	mov    0x1b8(%rsp),%esi
  227059:	e8 32 69 ff ff       	callq  21d990 <_ZN9r3_kernel7drivers7display7fb_text17FramebufferLogger9set_color17h728bcd9539458d15E>
  22705e:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  227065:	00 
  227066:	e8 15 55 00 00       	callq  22c580 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>
  22706b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  227070:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  227077:	00 
                record.target(),
  227078:	e8 23 aa fe ff       	callq  211aa0 <_ZN3log6Record6target17h757367dd169b837eE>
  22707d:	48 89 94 24 40 02 00 	mov    %rdx,0x240(%rsp)
  227084:	00 
  227085:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  22708c:	00 
  22708d:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  227094:	00 
                record.level(),
  227095:	e8 e6 a9 fe ff       	callq  211a80 <_ZN3log6Record5level17h1be5adb9d5eedc77E>
  22709a:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  2270a1:	00 
  2270a2:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  2270a9:	00 
                record.args()
  2270aa:	e8 c1 a9 fe ff       	callq  211a70 <_ZN3log6Record4args17h9dae30359519c3ecE>
  2270af:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2270b6:	00 
            print_framebuffer!(
  2270b7:	48 8d 84 24 38 02 00 	lea    0x238(%rsp),%rax
  2270be:	00 
  2270bf:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  2270c6:	00 
  2270c7:	48 8d 84 24 48 02 00 	lea    0x248(%rsp),%rax
  2270ce:	00 
  2270cf:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  2270d6:	00 
  2270d7:	48 8d 84 24 50 02 00 	lea    0x250(%rsp),%rax
  2270de:	00 
  2270df:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  2270e6:	00 
  2270e7:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  2270ee:	00 
  2270ef:	48 89 bc 24 90 02 00 	mov    %rdi,0x290(%rsp)
  2270f6:	00 
  2270f7:	48 8b 84 24 28 02 00 	mov    0x228(%rsp),%rax
  2270fe:	00 
  2270ff:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  227104:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
  22710b:	00 
  22710c:	48 8b 84 24 30 02 00 	mov    0x230(%rsp),%rax
  227113:	00 
  227114:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  227119:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  227120:	00 
  227121:	48 8b 35 f8 3f 01 00 	mov    0x13ff8(%rip),%rsi        # 23b120 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  227128:	e8 e3 a3 00 00       	callq  231510 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  22712d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  227132:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  227137:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22713c:	48 8b 35 4d 40 01 00 	mov    0x1404d(%rip),%rsi        # 23b190 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe0>
  227143:	e8 38 76 fe ff       	callq  20e780 <_ZN4core3fmt10ArgumentV13new17h25391483eedd3209E>
  227148:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22714d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  227152:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  227157:	48 8d 35 e2 74 fe ff 	lea    -0x18b1e(%rip),%rsi        # 20e640 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb2484773921cbf52E>
  22715e:	e8 3d 7a fe ff       	callq  20eba0 <_ZN4core3fmt10ArgumentV13new17h8bcfc87d350b47c9E>
  227163:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227168:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22716d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  227172:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  227177:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22717c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  227181:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  227186:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  22718b:	4c 89 84 24 f0 01 00 	mov    %r8,0x1f0(%rsp)
  227192:	00 
  227193:	48 89 bc 24 f8 01 00 	mov    %rdi,0x1f8(%rsp)
  22719a:	00 
  22719b:	48 89 b4 24 00 02 00 	mov    %rsi,0x200(%rsp)
  2271a2:	00 
  2271a3:	48 89 94 24 08 02 00 	mov    %rdx,0x208(%rsp)
  2271aa:	00 
  2271ab:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  2271b2:	00 
  2271b3:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  2271ba:	00 
  2271bb:	48 8d 84 24 f0 01 00 	lea    0x1f0(%rsp),%rax
  2271c2:	00 
  2271c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2271c8:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2271cd:	48 8d bc 24 c0 01 00 	lea    0x1c0(%rsp),%rdi
  2271d4:	00 
  2271d5:	48 8d 35 24 2b 01 00 	lea    0x12b24(%rip),%rsi        # 239d00 <memcmp+0x3750>
  2271dc:	ba 04 00 00 00       	mov    $0x4,%edx
  2271e1:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  2271e7:	4c 8d 0d 6a bc fd ff 	lea    -0x24396(%rip),%r9        # 202e58 <str.1+0x188>
  2271ee:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  2271f5:	00 
  2271f6:	e8 65 f0 fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  2271fb:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  227200:	48 8d b4 24 c0 01 00 	lea    0x1c0(%rsp),%rsi
  227207:	00 
  227208:	e8 b3 14 00 00       	callq  2286c0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>
        }
  22720d:	48 8d bc 24 a8 01 00 	lea    0x1a8(%rsp),%rdi
  227214:	00 
  227215:	e8 d6 45 fe ff       	callq  20b7f0 <_ZN4core3ptr107drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$GT$$GT$17h46c9f61d2c18a255E>
  22721a:	e9 c7 fd ff ff       	jmpq   226fe6 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17h664ba06a8c876d26E+0x336>
  22721f:	cc                   	int3   

0000000000227220 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$5flush17ha1030dc08c20e4c8E>:

    fn flush(&self) {
  227220:	50                   	push   %rax
  227221:	48 89 3c 24          	mov    %rdi,(%rsp)
        // TODO: Will be used in future for dmesg
    }
  227225:	58                   	pop    %rax
  227226:	c3                   	retq   
  227227:	cc                   	int3   
  227228:	cc                   	int3   
  227229:	cc                   	int3   
  22722a:	cc                   	int3   
  22722b:	cc                   	int3   
  22722c:	cc                   	int3   
  22722d:	cc                   	int3   
  22722e:	cc                   	int3   
  22722f:	cc                   	int3   

0000000000227230 <_ZN9r3_kernel7logging4init17h648c946b5865c67bE>:
}

static KERNEL_LOGGER: KernelLogger = KernelLogger;

pub fn init() {
  227230:	50                   	push   %rax
    // unuse the result
    let _ = log::set_logger(&KERNEL_LOGGER);
  227231:	48 8d 3d c8 bc fd ff 	lea    -0x24338(%rip),%rdi        # 202f00 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE>
  227238:	48 8d 35 19 2b 01 00 	lea    0x12b19(%rip),%rsi        # 239d58 <memcmp+0x37a8>
  22723f:	e8 ac 91 00 00       	callq  2303f0 <_ZN3log10set_logger17ha1c2327ac82037ebE>
    log::set_max_level(LevelFilter::Debug);
  227244:	48 c7 04 24 04 00 00 	movq   $0x4,(%rsp)
  22724b:	00 
  22724c:	48 8b 3c 24          	mov    (%rsp),%rdi
  227250:	e8 eb a7 fe ff       	callq  211a40 <_ZN3log13set_max_level17ha683ad6dd9a2a3f2E>
}
  227255:	58                   	pop    %rax
  227256:	c3                   	retq   
  227257:	cc                   	int3   
  227258:	cc                   	int3   
  227259:	cc                   	int3   
  22725a:	cc                   	int3   
  22725b:	cc                   	int3   
  22725c:	cc                   	int3   
  22725d:	cc                   	int3   
  22725e:	cc                   	int3   
  22725f:	cc                   	int3   

0000000000227260 <rust_begin_unwind>:

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
  227260:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  227267:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    // write the panic info and loop infinitely:
    log::error!("{}", info);
  22726c:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  227273:	00 00 
  227275:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22727a:	48 8d 35 b7 93 fd ff 	lea    -0x26c49(%rip),%rsi        # 200638 <str.0+0x118>
  227281:	e8 6a a8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  227286:	88 44 24 17          	mov    %al,0x17(%rsp)
  22728a:	8a 44 24 17          	mov    0x17(%rsp),%al
  22728e:	a8 01                	test   $0x1,%al
  227290:	75 09                	jne    22729b <rust_begin_unwind+0x3b>
  227292:	eb 00                	jmp    227294 <rust_begin_unwind+0x34>
  227294:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  227299:	eb 4e                	jmp    2272e9 <rust_begin_unwind+0x89>
  22729b:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  2272a2:	00 
  2272a3:	48 8b 3d 66 3e 01 00 	mov    0x13e66(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2272aa:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  2272b1:	00 
  2272b2:	e8 09 1a 00 00       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2272b7:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2272be:	00 
  2272bf:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2272c6:	00 
  2272c7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2272cc:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2272d1:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  2272d6:	e8 15 a8 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2272db:	88 44 24 16          	mov    %al,0x16(%rsp)
  2272df:	8a 44 24 16          	mov    0x16(%rsp),%al
  2272e3:	24 01                	and    $0x1,%al
  2272e5:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2272e9:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  2272ee:	75 02                	jne    2272f2 <rust_begin_unwind+0x92>
    loop {}
  2272f0:	eb fe                	jmp    2272f0 <rust_begin_unwind+0x90>
    log::error!("{}", info);
  2272f2:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2272f7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2272fc:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  227301:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
  227308:	00 
  227309:	48 8d 35 60 54 ff ff 	lea    -0xaba0(%rip),%rsi        # 21c770 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb9bbc8b08964feefE>
  227310:	e8 ab 7c fe ff       	callq  20efc0 <_ZN4core3fmt10ArgumentV13new17hf674b26383cf8570E>
  227315:	48 89 04 24          	mov    %rax,(%rsp)
  227319:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22731e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227323:	48 8b 0c 24          	mov    (%rsp),%rcx
  227327:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22732c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  227331:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  227336:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22733b:	48 8d 35 4e 2a 01 00 	lea    0x12a4e(%rip),%rsi        # 239d90 <memcmp+0x37e0>
  227342:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  227348:	4c 89 c2             	mov    %r8,%rdx
  22734b:	e8 70 ef fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  227350:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  227355:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22735a:	48 8d 15 3f 2a 01 00 	lea    0x12a3f(%rip),%rdx        # 239da0 <memcmp+0x37f0>
  227361:	e8 8a 92 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  227366:	eb 88                	jmp    2272f0 <rust_begin_unwind+0x90>
  227368:	cc                   	int3   
  227369:	cc                   	int3   
  22736a:	cc                   	int3   
  22736b:	cc                   	int3   
  22736c:	cc                   	int3   
  22736d:	cc                   	int3   
  22736e:	cc                   	int3   
  22736f:	cc                   	int3   

0000000000227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>:
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  227370:	48 83 ec 48          	sub    $0x48,%rsp
  227374:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  227379:	48 89 f8             	mov    %rdi,%rax
  22737c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  227381:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227386:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22738b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let mut format_string = f.debug_struct("Exception Info");
  227390:	48 8d 35 7b bb fd ff 	lea    -0x24485(%rip),%rsi        # 202f12 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x12>
  227397:	ba 0e 00 00 00       	mov    $0xe,%edx
  22739c:	e8 cf e3 00 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  2273a1:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  2273a6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2273ab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2273b0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2273b5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2273ba:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2273bf:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("instruction_pointer", &self.instruction_pointer);
  2273c4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2273c9:	48 8d 35 50 bb fd ff 	lea    -0x244b0(%rip),%rsi        # 202f20 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x20>
  2273d0:	ba 13 00 00 00       	mov    $0x13,%edx
  2273d5:	4c 8d 05 fc 29 01 00 	lea    0x129fc(%rip),%r8        # 239dd8 <memcmp+0x3828>
  2273dc:	e8 1f b7 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2273e1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("code_segment", &self.code_segment);
  2273e6:	48 83 c1 08          	add    $0x8,%rcx
  2273ea:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2273ef:	48 8d 35 3d bb fd ff 	lea    -0x244c3(%rip),%rsi        # 202f33 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x33>
  2273f6:	ba 0c 00 00 00       	mov    $0xc,%edx
  2273fb:	4c 8d 05 d6 29 01 00 	lea    0x129d6(%rip),%r8        # 239dd8 <memcmp+0x3828>
  227402:	e8 f9 b6 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  227407:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("cpu_flags", &self.cpu_flags);
  22740c:	48 83 c1 10          	add    $0x10,%rcx
  227410:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  227415:	48 8d 35 23 bb fd ff 	lea    -0x244dd(%rip),%rsi        # 202f3f <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x3f>
  22741c:	ba 09 00 00 00       	mov    $0x9,%edx
  227421:	4c 8d 05 b0 29 01 00 	lea    0x129b0(%rip),%r8        # 239dd8 <memcmp+0x3828>
  227428:	e8 d3 b6 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  22742d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_pointer", &self.stack_pointer);
  227432:	48 83 c1 18          	add    $0x18,%rcx
  227436:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22743b:	48 8d 35 06 bb fd ff 	lea    -0x244fa(%rip),%rsi        # 202f48 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x48>
  227442:	ba 0d 00 00 00       	mov    $0xd,%edx
  227447:	4c 8d 05 8a 29 01 00 	lea    0x1298a(%rip),%r8        # 239dd8 <memcmp+0x3828>
  22744e:	e8 ad b6 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  227453:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_segment", &self.stack_segment);
  227458:	48 83 c1 20          	add    $0x20,%rcx
  22745c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  227461:	48 8d 35 ed ba fd ff 	lea    -0x24513(%rip),%rsi        # 202f55 <_ZN9r3_kernel7logging13KERNEL_LOGGER17hee3038d29a66e7feE+0x55>
  227468:	ba 0d 00 00 00       	mov    $0xd,%edx
  22746d:	4c 8d 05 64 29 01 00 	lea    0x12964(%rip),%r8        # 239dd8 <memcmp+0x3828>
  227474:	e8 87 b6 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
        format_string.finish()
  227479:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22747e:	e8 3d b8 00 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  227483:	88 44 24 07          	mov    %al,0x7(%rsp)
  227487:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22748b:	24 01                	and    $0x1,%al
  22748d:	0f b6 c0             	movzbl %al,%eax
  227490:	48 83 c4 48          	add    $0x48,%rsp
  227494:	c3                   	retq   
  227495:	cc                   	int3   
  227496:	cc                   	int3   
  227497:	cc                   	int3   
  227498:	cc                   	int3   
  227499:	cc                   	int3   
  22749a:	cc                   	int3   
  22749b:	cc                   	int3   
  22749c:	cc                   	int3   
  22749d:	cc                   	int3   
  22749e:	cc                   	int3   
  22749f:	cc                   	int3   

00000000002274a0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E>:
    reserved_3: InterruptDescriptorEntry<DefaultHandlerFunction>,
    pub interrupts: [InterruptDescriptorEntry<DefaultHandlerFunction>; 256 - 32],
}

impl InterruptDescriptorTable {
    pub fn empty() -> Self {
  2274a0:	48 81 ec f8 11 00 00 	sub    $0x11f8,%rsp
  2274a7:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  2274ac:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        InterruptDescriptorTable {
            divide_error: InterruptDescriptorEntry::empty(),
  2274b1:	e8 8a a1 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2274b6:	48 89 94 24 70 10 00 	mov    %rdx,0x1070(%rsp)
  2274bd:	00 
  2274be:	48 89 84 24 68 10 00 	mov    %rax,0x1068(%rsp)
  2274c5:	00 
  2274c6:	48 8b 84 24 68 10 00 	mov    0x1068(%rsp),%rax
  2274cd:	00 
  2274ce:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2274d3:	48 8b 84 24 70 10 00 	mov    0x1070(%rsp),%rax
  2274da:	00 
  2274db:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            debug: InterruptDescriptorEntry::empty(),
  2274e0:	e8 5b a1 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2274e5:	48 89 94 24 80 10 00 	mov    %rdx,0x1080(%rsp)
  2274ec:	00 
  2274ed:	48 89 84 24 78 10 00 	mov    %rax,0x1078(%rsp)
  2274f4:	00 
  2274f5:	48 8b 84 24 78 10 00 	mov    0x1078(%rsp),%rax
  2274fc:	00 
  2274fd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  227502:	48 8b 84 24 80 10 00 	mov    0x1080(%rsp),%rax
  227509:	00 
  22750a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            non_maskable_interrupt: InterruptDescriptorEntry::empty(),
  22750f:	e8 2c a1 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227514:	48 89 94 24 90 10 00 	mov    %rdx,0x1090(%rsp)
  22751b:	00 
  22751c:	48 89 84 24 88 10 00 	mov    %rax,0x1088(%rsp)
  227523:	00 
  227524:	48 8b 84 24 88 10 00 	mov    0x1088(%rsp),%rax
  22752b:	00 
  22752c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  227531:	48 8b 84 24 90 10 00 	mov    0x1090(%rsp),%rax
  227538:	00 
  227539:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            breakpoint: InterruptDescriptorEntry::empty(),
  22753e:	e8 fd a0 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227543:	48 89 94 24 a0 10 00 	mov    %rdx,0x10a0(%rsp)
  22754a:	00 
  22754b:	48 89 84 24 98 10 00 	mov    %rax,0x1098(%rsp)
  227552:	00 
  227553:	48 8b 84 24 98 10 00 	mov    0x1098(%rsp),%rax
  22755a:	00 
  22755b:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  227560:	48 8b 84 24 a0 10 00 	mov    0x10a0(%rsp),%rax
  227567:	00 
  227568:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22756f:	00 
            overflow: InterruptDescriptorEntry::empty(),
  227570:	e8 cb a0 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227575:	48 89 94 24 b0 10 00 	mov    %rdx,0x10b0(%rsp)
  22757c:	00 
  22757d:	48 89 84 24 a8 10 00 	mov    %rax,0x10a8(%rsp)
  227584:	00 
  227585:	48 8b 84 24 a8 10 00 	mov    0x10a8(%rsp),%rax
  22758c:	00 
  22758d:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  227594:	00 
  227595:	48 8b 84 24 b0 10 00 	mov    0x10b0(%rsp),%rax
  22759c:	00 
  22759d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2275a4:	00 
            bound_range_exceeded: InterruptDescriptorEntry::empty(),
  2275a5:	e8 96 a0 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2275aa:	48 89 94 24 c0 10 00 	mov    %rdx,0x10c0(%rsp)
  2275b1:	00 
  2275b2:	48 89 84 24 b8 10 00 	mov    %rax,0x10b8(%rsp)
  2275b9:	00 
  2275ba:	48 8b 84 24 b8 10 00 	mov    0x10b8(%rsp),%rax
  2275c1:	00 
  2275c2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2275c9:	00 
  2275ca:	48 8b 84 24 c0 10 00 	mov    0x10c0(%rsp),%rax
  2275d1:	00 
  2275d2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2275d9:	00 
            invalid_opcode: InterruptDescriptorEntry::empty(),
  2275da:	e8 61 a0 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2275df:	48 89 94 24 d0 10 00 	mov    %rdx,0x10d0(%rsp)
  2275e6:	00 
  2275e7:	48 89 84 24 c8 10 00 	mov    %rax,0x10c8(%rsp)
  2275ee:	00 
  2275ef:	48 8b 84 24 c8 10 00 	mov    0x10c8(%rsp),%rax
  2275f6:	00 
  2275f7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2275fe:	00 
  2275ff:	48 8b 84 24 d0 10 00 	mov    0x10d0(%rsp),%rax
  227606:	00 
  227607:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22760e:	00 
            device_not_available: InterruptDescriptorEntry::empty(),
  22760f:	e8 2c a0 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227614:	48 89 94 24 e0 10 00 	mov    %rdx,0x10e0(%rsp)
  22761b:	00 
  22761c:	48 89 84 24 d8 10 00 	mov    %rax,0x10d8(%rsp)
  227623:	00 
  227624:	48 8b 84 24 d8 10 00 	mov    0x10d8(%rsp),%rax
  22762b:	00 
  22762c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  227633:	00 
  227634:	48 8b 84 24 e0 10 00 	mov    0x10e0(%rsp),%rax
  22763b:	00 
  22763c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  227643:	00 
            double_fault: InterruptDescriptorEntry::empty(),
  227644:	e8 77 9f fe ff       	callq  2115c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>
  227649:	48 89 94 24 f0 10 00 	mov    %rdx,0x10f0(%rsp)
  227650:	00 
  227651:	48 89 84 24 e8 10 00 	mov    %rax,0x10e8(%rsp)
  227658:	00 
  227659:	48 8b 84 24 e8 10 00 	mov    0x10e8(%rsp),%rax
  227660:	00 
  227661:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  227668:	00 
  227669:	48 8b 84 24 f0 10 00 	mov    0x10f0(%rsp),%rax
  227670:	00 
  227671:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  227678:	00 
            coprocessor_segment_overrun: InterruptDescriptorEntry::empty(),
  227679:	e8 c2 9f fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  22767e:	48 89 94 24 00 11 00 	mov    %rdx,0x1100(%rsp)
  227685:	00 
  227686:	48 89 84 24 f8 10 00 	mov    %rax,0x10f8(%rsp)
  22768d:	00 
  22768e:	48 8b 84 24 f8 10 00 	mov    0x10f8(%rsp),%rax
  227695:	00 
  227696:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22769d:	00 
  22769e:	48 8b 84 24 00 11 00 	mov    0x1100(%rsp),%rax
  2276a5:	00 
  2276a6:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2276ad:	00 
            invalid_tss: InterruptDescriptorEntry::empty(),
  2276ae:	e8 cd 9e fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  2276b3:	48 89 94 24 10 11 00 	mov    %rdx,0x1110(%rsp)
  2276ba:	00 
  2276bb:	48 89 84 24 08 11 00 	mov    %rax,0x1108(%rsp)
  2276c2:	00 
  2276c3:	48 8b 84 24 08 11 00 	mov    0x1108(%rsp),%rax
  2276ca:	00 
  2276cb:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  2276d2:	00 
  2276d3:	48 8b 84 24 10 11 00 	mov    0x1110(%rsp),%rax
  2276da:	00 
  2276db:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2276e2:	00 
            segment_not_present: InterruptDescriptorEntry::empty(),
  2276e3:	e8 98 9e fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  2276e8:	48 89 94 24 20 11 00 	mov    %rdx,0x1120(%rsp)
  2276ef:	00 
  2276f0:	48 89 84 24 18 11 00 	mov    %rax,0x1118(%rsp)
  2276f7:	00 
  2276f8:	48 8b 84 24 18 11 00 	mov    0x1118(%rsp),%rax
  2276ff:	00 
  227700:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  227707:	00 
  227708:	48 8b 84 24 20 11 00 	mov    0x1120(%rsp),%rax
  22770f:	00 
  227710:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  227717:	00 
            stack_segment_fault: InterruptDescriptorEntry::empty(),
  227718:	e8 63 9e fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  22771d:	48 89 94 24 30 11 00 	mov    %rdx,0x1130(%rsp)
  227724:	00 
  227725:	48 89 84 24 28 11 00 	mov    %rax,0x1128(%rsp)
  22772c:	00 
  22772d:	48 8b 84 24 28 11 00 	mov    0x1128(%rsp),%rax
  227734:	00 
  227735:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  22773c:	00 
  22773d:	48 8b 84 24 30 11 00 	mov    0x1130(%rsp),%rax
  227744:	00 
  227745:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  22774c:	00 
            general_protection_fault: InterruptDescriptorEntry::empty(),
  22774d:	e8 2e 9e fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  227752:	48 89 94 24 40 11 00 	mov    %rdx,0x1140(%rsp)
  227759:	00 
  22775a:	48 89 84 24 38 11 00 	mov    %rax,0x1138(%rsp)
  227761:	00 
  227762:	48 8b 84 24 38 11 00 	mov    0x1138(%rsp),%rax
  227769:	00 
  22776a:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  227771:	00 
  227772:	48 8b 84 24 40 11 00 	mov    0x1140(%rsp),%rax
  227779:	00 
  22777a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  227781:	00 
            page_fault: InterruptDescriptorEntry::empty(),
  227782:	e8 f9 9e fe ff       	callq  211680 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>
  227787:	48 89 94 24 50 11 00 	mov    %rdx,0x1150(%rsp)
  22778e:	00 
  22778f:	48 89 84 24 48 11 00 	mov    %rax,0x1148(%rsp)
  227796:	00 
  227797:	48 8b 84 24 48 11 00 	mov    0x1148(%rsp),%rax
  22779e:	00 
  22779f:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2277a6:	00 
  2277a7:	48 8b 84 24 50 11 00 	mov    0x1150(%rsp),%rax
  2277ae:	00 
  2277af:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2277b6:	00 
            reserved_1: InterruptDescriptorEntry::empty(),
  2277b7:	e8 84 9e fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2277bc:	48 89 94 24 60 11 00 	mov    %rdx,0x1160(%rsp)
  2277c3:	00 
  2277c4:	48 89 84 24 58 11 00 	mov    %rax,0x1158(%rsp)
  2277cb:	00 
  2277cc:	48 8b 84 24 58 11 00 	mov    0x1158(%rsp),%rax
  2277d3:	00 
  2277d4:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2277db:	00 
  2277dc:	48 8b 84 24 60 11 00 	mov    0x1160(%rsp),%rax
  2277e3:	00 
  2277e4:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2277eb:	00 
            x87_floating_point: InterruptDescriptorEntry::empty(),
  2277ec:	e8 4f 9e fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2277f1:	48 89 94 24 70 11 00 	mov    %rdx,0x1170(%rsp)
  2277f8:	00 
  2277f9:	48 89 84 24 68 11 00 	mov    %rax,0x1168(%rsp)
  227800:	00 
  227801:	48 8b 84 24 68 11 00 	mov    0x1168(%rsp),%rax
  227808:	00 
  227809:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  227810:	00 
  227811:	48 8b 84 24 70 11 00 	mov    0x1170(%rsp),%rax
  227818:	00 
  227819:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  227820:	00 
            alignment_check: InterruptDescriptorEntry::empty(),
  227821:	e8 5a 9d fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  227826:	48 89 94 24 80 11 00 	mov    %rdx,0x1180(%rsp)
  22782d:	00 
  22782e:	48 89 84 24 78 11 00 	mov    %rax,0x1178(%rsp)
  227835:	00 
  227836:	48 8b 84 24 78 11 00 	mov    0x1178(%rsp),%rax
  22783d:	00 
  22783e:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  227845:	00 
  227846:	48 8b 84 24 80 11 00 	mov    0x1180(%rsp),%rax
  22784d:	00 
  22784e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  227855:	00 
            machine_check: InterruptDescriptorEntry::empty(),
  227856:	e8 a5 9d fe ff       	callq  211600 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hac5a2b431e8a6007E>
  22785b:	48 89 94 24 90 11 00 	mov    %rdx,0x1190(%rsp)
  227862:	00 
  227863:	48 89 84 24 88 11 00 	mov    %rax,0x1188(%rsp)
  22786a:	00 
  22786b:	48 8b 84 24 88 11 00 	mov    0x1188(%rsp),%rax
  227872:	00 
  227873:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  22787a:	00 
  22787b:	48 8b 84 24 90 11 00 	mov    0x1190(%rsp),%rax
  227882:	00 
  227883:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  22788a:	00 
            simd_floating_point: InterruptDescriptorEntry::empty(),
  22788b:	e8 b0 9d fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227890:	48 89 94 24 a0 11 00 	mov    %rdx,0x11a0(%rsp)
  227897:	00 
  227898:	48 89 84 24 98 11 00 	mov    %rax,0x1198(%rsp)
  22789f:	00 
  2278a0:	48 8b 84 24 98 11 00 	mov    0x1198(%rsp),%rax
  2278a7:	00 
  2278a8:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  2278af:	00 
  2278b0:	48 8b 84 24 a0 11 00 	mov    0x11a0(%rsp),%rax
  2278b7:	00 
  2278b8:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2278bf:	00 
            virtualization: InterruptDescriptorEntry::empty(),
  2278c0:	e8 7b 9d fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2278c5:	48 89 94 24 b0 11 00 	mov    %rdx,0x11b0(%rsp)
  2278cc:	00 
  2278cd:	48 89 84 24 a8 11 00 	mov    %rax,0x11a8(%rsp)
  2278d4:	00 
  2278d5:	48 8b 84 24 a8 11 00 	mov    0x11a8(%rsp),%rax
  2278dc:	00 
  2278dd:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  2278e4:	00 
  2278e5:	48 8b 84 24 b0 11 00 	mov    0x11b0(%rsp),%rax
  2278ec:	00 
  2278ed:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  2278f4:	00 
            reserved_2: [InterruptDescriptorEntry::empty(); 9],
  2278f5:	e8 46 9d fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2278fa:	48 89 94 24 c0 11 00 	mov    %rdx,0x11c0(%rsp)
  227901:	00 
  227902:	48 89 84 24 b8 11 00 	mov    %rax,0x11b8(%rsp)
  227909:	00 
  22790a:	48 8b 84 24 b8 11 00 	mov    0x11b8(%rsp),%rax
  227911:	00 
  227912:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  227919:	00 
  22791a:	48 8b 84 24 c0 11 00 	mov    0x11c0(%rsp),%rax
  227921:	00 
  227922:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  227929:	00 
  22792a:	48 8d 84 24 98 01 00 	lea    0x198(%rsp),%rax
  227931:	00 
  227932:	48 8d 8c 24 98 01 00 	lea    0x198(%rsp),%rcx
  227939:	00 
  22793a:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
  227941:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  227946:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22794b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  227950:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  227955:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22795a:	48 39 c8             	cmp    %rcx,%rax
  22795d:	74 27                	je     227986 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E+0x4e6>
  22795f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  227964:	48 8b 8c 24 28 02 00 	mov    0x228(%rsp),%rcx
  22796b:	00 
  22796c:	48 89 08             	mov    %rcx,(%rax)
  22796f:	48 8b 8c 24 30 02 00 	mov    0x230(%rsp),%rcx
  227976:	00 
  227977:	48 89 48 08          	mov    %rcx,0x8(%rax)
  22797b:	48 83 c0 10          	add    $0x10,%rax
  22797f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  227984:	eb c5                	jmp    22794b <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E+0x4ab>
            security_exception: InterruptDescriptorEntry::empty(),
  227986:	e8 f5 9b fe ff       	callq  211580 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f35c28cfb2236d7E>
  22798b:	48 89 94 24 d0 11 00 	mov    %rdx,0x11d0(%rsp)
  227992:	00 
  227993:	48 89 84 24 c8 11 00 	mov    %rax,0x11c8(%rsp)
  22799a:	00 
  22799b:	48 8b 84 24 c8 11 00 	mov    0x11c8(%rsp),%rax
  2279a2:	00 
  2279a3:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  2279aa:	00 
  2279ab:	48 8b 84 24 d0 11 00 	mov    0x11d0(%rsp),%rax
  2279b2:	00 
  2279b3:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  2279ba:	00 
            reserved_3: InterruptDescriptorEntry::empty(),
  2279bb:	e8 80 9c fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2279c0:	48 89 94 24 e0 11 00 	mov    %rdx,0x11e0(%rsp)
  2279c7:	00 
  2279c8:	48 89 84 24 d8 11 00 	mov    %rax,0x11d8(%rsp)
  2279cf:	00 
  2279d0:	48 8b 84 24 d8 11 00 	mov    0x11d8(%rsp),%rax
  2279d7:	00 
  2279d8:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  2279df:	00 
  2279e0:	48 8b 84 24 e0 11 00 	mov    0x11e0(%rsp),%rax
  2279e7:	00 
  2279e8:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2279ef:	00 
            interrupts: [InterruptDescriptorEntry::empty(); 256 - 32],
  2279f0:	e8 4b 9c fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  2279f5:	48 89 94 24 f0 11 00 	mov    %rdx,0x11f0(%rsp)
  2279fc:	00 
  2279fd:	48 89 84 24 e8 11 00 	mov    %rax,0x11e8(%rsp)
  227a04:	00 
  227a05:	48 8b 84 24 e8 11 00 	mov    0x11e8(%rsp),%rax
  227a0c:	00 
  227a0d:	48 89 84 24 58 10 00 	mov    %rax,0x1058(%rsp)
  227a14:	00 
  227a15:	48 8b 84 24 f0 11 00 	mov    0x11f0(%rsp),%rax
  227a1c:	00 
  227a1d:	48 89 84 24 60 10 00 	mov    %rax,0x1060(%rsp)
  227a24:	00 
  227a25:	48 8d 84 24 58 02 00 	lea    0x258(%rsp),%rax
  227a2c:	00 
  227a2d:	48 8d 8c 24 58 02 00 	lea    0x258(%rsp),%rcx
  227a34:	00 
  227a35:	48 81 c1 00 0e 00 00 	add    $0xe00,%rcx
  227a3c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  227a41:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  227a46:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  227a4b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  227a50:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227a55:	48 39 c8             	cmp    %rcx,%rax
  227a58:	74 27                	je     227a81 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E+0x5e1>
  227a5a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227a5f:	48 8b 8c 24 58 10 00 	mov    0x1058(%rsp),%rcx
  227a66:	00 
  227a67:	48 89 08             	mov    %rcx,(%rax)
  227a6a:	48 8b 8c 24 60 10 00 	mov    0x1060(%rsp),%rcx
  227a71:	00 
  227a72:	48 89 48 08          	mov    %rcx,0x8(%rax)
  227a76:	48 83 c0 10          	add    $0x10,%rax
  227a7a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  227a7f:	eb c5                	jmp    227a46 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E+0x5a6>
  227a81:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        InterruptDescriptorTable {
  227a86:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  227a8b:	48 89 07             	mov    %rax,(%rdi)
  227a8e:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  227a93:	48 89 47 08          	mov    %rax,0x8(%rdi)
  227a97:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  227a9c:	48 89 47 10          	mov    %rax,0x10(%rdi)
  227aa0:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  227aa5:	48 89 47 18          	mov    %rax,0x18(%rdi)
  227aa9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  227aae:	48 89 47 20          	mov    %rax,0x20(%rdi)
  227ab2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  227ab7:	48 89 47 28          	mov    %rax,0x28(%rdi)
  227abb:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  227ac0:	48 89 47 30          	mov    %rax,0x30(%rdi)
  227ac4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  227acb:	00 
  227acc:	48 89 47 38          	mov    %rax,0x38(%rdi)
  227ad0:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  227ad7:	00 
  227ad8:	48 89 47 40          	mov    %rax,0x40(%rdi)
  227adc:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  227ae3:	00 
  227ae4:	48 89 47 48          	mov    %rax,0x48(%rdi)
  227ae8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  227aef:	00 
  227af0:	48 89 47 50          	mov    %rax,0x50(%rdi)
  227af4:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  227afb:	00 
  227afc:	48 89 47 58          	mov    %rax,0x58(%rdi)
  227b00:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  227b07:	00 
  227b08:	48 89 47 60          	mov    %rax,0x60(%rdi)
  227b0c:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  227b13:	00 
  227b14:	48 89 47 68          	mov    %rax,0x68(%rdi)
  227b18:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  227b1f:	00 
  227b20:	48 89 47 70          	mov    %rax,0x70(%rdi)
  227b24:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  227b2b:	00 
  227b2c:	48 89 47 78          	mov    %rax,0x78(%rdi)
  227b30:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  227b37:	00 
  227b38:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  227b3f:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  227b46:	00 
  227b47:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
  227b4e:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  227b55:	00 
  227b56:	48 89 87 90 00 00 00 	mov    %rax,0x90(%rdi)
  227b5d:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  227b64:	00 
  227b65:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
  227b6c:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  227b73:	00 
  227b74:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
  227b7b:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  227b82:	00 
  227b83:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)
  227b8a:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  227b91:	00 
  227b92:	48 89 87 b0 00 00 00 	mov    %rax,0xb0(%rdi)
  227b99:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  227ba0:	00 
  227ba1:	48 89 87 b8 00 00 00 	mov    %rax,0xb8(%rdi)
  227ba8:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  227baf:	00 
  227bb0:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
  227bb7:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  227bbe:	00 
  227bbf:	48 89 87 c8 00 00 00 	mov    %rax,0xc8(%rdi)
  227bc6:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  227bcd:	00 
  227bce:	48 89 87 d0 00 00 00 	mov    %rax,0xd0(%rdi)
  227bd5:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  227bdc:	00 
  227bdd:	48 89 87 d8 00 00 00 	mov    %rax,0xd8(%rdi)
  227be4:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  227beb:	00 
  227bec:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  227bf3:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  227bfa:	00 
  227bfb:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
  227c02:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  227c09:	00 
  227c0a:	48 89 87 f0 00 00 00 	mov    %rax,0xf0(%rdi)
  227c11:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  227c18:	00 
  227c19:	48 89 87 f8 00 00 00 	mov    %rax,0xf8(%rdi)
  227c20:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  227c27:	00 
  227c28:	48 89 87 00 01 00 00 	mov    %rax,0x100(%rdi)
  227c2f:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  227c36:	00 
  227c37:	48 89 87 08 01 00 00 	mov    %rax,0x108(%rdi)
  227c3e:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  227c45:	00 
  227c46:	48 89 87 10 01 00 00 	mov    %rax,0x110(%rdi)
  227c4d:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  227c54:	00 
  227c55:	48 89 87 18 01 00 00 	mov    %rax,0x118(%rdi)
  227c5c:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  227c63:	00 
  227c64:	48 89 87 20 01 00 00 	mov    %rax,0x120(%rdi)
  227c6b:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  227c72:	00 
  227c73:	48 89 87 28 01 00 00 	mov    %rax,0x128(%rdi)
  227c7a:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  227c81:	00 
  227c82:	48 89 87 30 01 00 00 	mov    %rax,0x130(%rdi)
  227c89:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  227c90:	00 
  227c91:	48 89 87 38 01 00 00 	mov    %rax,0x138(%rdi)
  227c98:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  227c9f:	00 
  227ca0:	48 89 87 40 01 00 00 	mov    %rax,0x140(%rdi)
  227ca7:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  227cae:	00 
  227caf:	48 89 87 48 01 00 00 	mov    %rax,0x148(%rdi)
  227cb6:	48 81 c7 50 01 00 00 	add    $0x150,%rdi
  227cbd:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  227cc4:	00 
  227cc5:	ba 90 00 00 00       	mov    $0x90,%edx
  227cca:	e8 91 e8 00 00       	callq  236560 <memcpy>
  227ccf:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  227cd4:	48 8b 84 24 38 02 00 	mov    0x238(%rsp),%rax
  227cdb:	00 
  227cdc:	48 89 87 e0 01 00 00 	mov    %rax,0x1e0(%rdi)
  227ce3:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  227cea:	00 
  227ceb:	48 89 87 e8 01 00 00 	mov    %rax,0x1e8(%rdi)
  227cf2:	48 8b 84 24 48 02 00 	mov    0x248(%rsp),%rax
  227cf9:	00 
  227cfa:	48 89 87 f0 01 00 00 	mov    %rax,0x1f0(%rdi)
  227d01:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  227d08:	00 
  227d09:	48 89 87 f8 01 00 00 	mov    %rax,0x1f8(%rdi)
  227d10:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
  227d17:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  227d1e:	00 
  227d1f:	ba 00 0e 00 00       	mov    $0xe00,%edx
  227d24:	e8 37 e8 00 00       	callq  236560 <memcpy>
  227d29:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        }
    }
  227d2e:	48 81 c4 f8 11 00 00 	add    $0x11f8,%rsp
  227d35:	c3                   	retq   
  227d36:	cc                   	int3   
  227d37:	cc                   	int3   
  227d38:	cc                   	int3   
  227d39:	cc                   	int3   
  227d3a:	cc                   	int3   
  227d3b:	cc                   	int3   
  227d3c:	cc                   	int3   
  227d3d:	cc                   	int3   
  227d3e:	cc                   	int3   
  227d3f:	cc                   	int3   

0000000000227d40 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h2cbb85498213a0e5E>:

    pub fn as_pointer(&self) -> IDTPointer {
  227d40:	48 83 ec 28          	sub    $0x28,%rsp
  227d44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  227d49:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        IDTPointer {
            base_addr: (self as *const _) as u64,
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  227d4e:	b8 00 10 00 00       	mov    $0x1000,%eax
  227d53:	48 83 e8 01          	sub    $0x1,%rax
  227d57:	48 89 04 24          	mov    %rax,(%rsp)
  227d5b:	0f 92 c0             	setb   %al
  227d5e:	a8 01                	test   $0x1,%al
  227d60:	75 24                	jne    227d86 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h2cbb85498213a0e5E+0x46>
  227d62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227d67:	48 8b 0c 24          	mov    (%rsp),%rcx
        IDTPointer {
  227d6b:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
  227d70:	48 89 44 24 12       	mov    %rax,0x12(%rsp)
        }
    }
  227d75:	0f b7 44 24 18       	movzwl 0x18(%rsp),%eax
  227d7a:	89 c2                	mov    %eax,%edx
  227d7c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  227d81:	48 83 c4 28          	add    $0x28,%rsp
  227d85:	c3                   	retq   
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  227d86:	48 8d 3d f3 b1 fd ff 	lea    -0x24e0d(%rip),%rdi        # 202f80 <str.0>
  227d8d:	48 8d 15 64 20 01 00 	lea    0x12064(%rip),%rdx        # 239df8 <memcmp+0x3848>
  227d94:	be 21 00 00 00       	mov    $0x21,%esi
  227d99:	e8 c2 b6 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  227d9e:	0f 0b                	ud2    

0000000000227da0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17h952643ed3d0b9452E>:

    pub fn load_into_cpu(&self) {
  227da0:	48 83 ec 28          	sub    $0x28,%rsp
  227da4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let pointer = self.as_pointer();
  227da9:	e8 92 ff ff ff       	callq  227d40 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h2cbb85498213a0e5E>
  227dae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  227db3:	66 89 d0             	mov    %dx,%ax
  227db6:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  227dbb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  227dc0:	48 89 04 24          	mov    %rax,(%rsp)
  227dc4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  227dc9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
  227dce:	48 89 e0             	mov    %rsp,%rax
        unsafe {
            asm!(
  227dd1:	0f 01 18             	lidt   (%rax)
                "lidt [{}]", in(reg) &pointer,
                options(nomem, nostack, preserves_flags)
            );
        }
    }
  227dd4:	48 83 c4 28          	add    $0x28,%rsp
  227dd8:	c3                   	retq   
  227dd9:	cc                   	int3   
  227dda:	cc                   	int3   
  227ddb:	cc                   	int3   
  227ddc:	cc                   	int3   
  227ddd:	cc                   	int3   
  227dde:	cc                   	int3   
  227ddf:	cc                   	int3   

0000000000227de0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>:
}

pub fn prepare_default_handle(
  227de0:	48 83 ec 38          	sub    $0x38,%rsp
  227de4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: DefaultHandlerFunction,
) -> InterruptDescriptorEntry<DefaultHandlerFunction> {
    let handle_addr = func as u64;
  227de9:	48 89 f8             	mov    %rdi,%rax
  227dec:	48 89 04 24          	mov    %rax,(%rsp)
  227df0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  227df5:	e8 46 98 fe ff       	callq  211640 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hcca0c360cbe510acE>
  227dfa:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  227dff:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  227e04:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  227e09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227e0e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  227e13:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227e18:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  227e1c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  227e21:	e8 ca 9a fe ff       	callq  2118f0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hc36dc393644916b4E>
    return idt_entry;
}
  227e26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227e2b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  227e30:	48 83 c4 38          	add    $0x38,%rsp
  227e34:	c3                   	retq   
  227e35:	cc                   	int3   
  227e36:	cc                   	int3   
  227e37:	cc                   	int3   
  227e38:	cc                   	int3   
  227e39:	cc                   	int3   
  227e3a:	cc                   	int3   
  227e3b:	cc                   	int3   
  227e3c:	cc                   	int3   
  227e3d:	cc                   	int3   
  227e3e:	cc                   	int3   
  227e3f:	cc                   	int3   

0000000000227e40 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3413212289963e19E>:

pub fn prepare_no_ret_error_code_handle(
  227e40:	48 83 ec 38          	sub    $0x38,%rsp
  227e44:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: HandlerFuncNoReturnWithErr,
) -> InterruptDescriptorEntry<HandlerFuncNoReturnWithErr> {
    let handle_addr = func as u64;
  227e49:	48 89 f8             	mov    %rdi,%rax
  227e4c:	48 89 04 24          	mov    %rax,(%rsp)
  227e50:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  227e55:	e8 66 97 fe ff       	callq  2115c0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h8f6ba7f40a12e7ffE>
  227e5a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  227e5f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  227e64:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  227e69:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227e6e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  227e73:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227e78:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  227e7c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  227e81:	e8 ba 9a fe ff       	callq  211940 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf6fc0362a19ebe78E>
    return idt_entry;
}
  227e86:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227e8b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  227e90:	48 83 c4 38          	add    $0x38,%rsp
  227e94:	c3                   	retq   
  227e95:	cc                   	int3   
  227e96:	cc                   	int3   
  227e97:	cc                   	int3   
  227e98:	cc                   	int3   
  227e99:	cc                   	int3   
  227e9a:	cc                   	int3   
  227e9b:	cc                   	int3   
  227e9c:	cc                   	int3   
  227e9d:	cc                   	int3   
  227e9e:	cc                   	int3   
  227e9f:	cc                   	int3   

0000000000227ea0 <_ZN9r3_kernel3cpu10interrupts26prepare_page_fault_handler17h49693b7356911dbaE>:

pub fn prepare_page_fault_handler(
  227ea0:	48 83 ec 38          	sub    $0x38,%rsp
  227ea4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: PageFaultHandlerType,
) -> InterruptDescriptorEntry<PageFaultHandlerType> {
    let handle_addr = func as u64;
  227ea9:	48 89 f8             	mov    %rdi,%rax
  227eac:	48 89 04 24          	mov    %rax,(%rsp)
  227eb0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  227eb5:	e8 c6 97 fe ff       	callq  211680 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17he38b32d15d59323bE>
  227eba:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  227ebf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  227ec4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  227ec9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227ece:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  227ed3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  227ed8:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  227edc:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  227ee1:	e8 ba 99 fe ff       	callq  2118a0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h45b4c043149096bbE>
    return idt_entry;
}
  227ee6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  227eeb:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  227ef0:	48 83 c4 38          	add    $0x38,%rsp
  227ef4:	c3                   	retq   
  227ef5:	cc                   	int3   
  227ef6:	cc                   	int3   
  227ef7:	cc                   	int3   
  227ef8:	cc                   	int3   
  227ef9:	cc                   	int3   
  227efa:	cc                   	int3   
  227efb:	cc                   	int3   
  227efc:	cc                   	int3   
  227efd:	cc                   	int3   
  227efe:	cc                   	int3   
  227eff:	cc                   	int3   

0000000000227f00 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hf65b60d894c651b0E>:

#[unstable(feature = "ptr_internals", issue = "none")]
#[rustc_const_unstable(feature = "const_convert", issue = "88674")]
impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
    #[inline]
    fn from(unique: Unique<T>) -> Self {
  227f00:	48 83 ec 18          	sub    $0x18,%rsp
  227f04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // SAFETY: A Unique pointer cannot be null, so the conditions for
        // new_unchecked() are respected.
        unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  227f09:	e8 12 fb fe ff       	callq  217a20 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h42bf14ac60cef2f4E>
  227f0e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  227f13:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  227f18:	e8 83 8d 00 00       	callq  230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  227f1d:	48 89 04 24          	mov    %rax,(%rsp)
  227f21:	48 8b 04 24          	mov    (%rsp),%rax
    }
  227f25:	48 83 c4 18          	add    $0x18,%rsp
  227f29:	c3                   	retq   
  227f2a:	cc                   	int3   
  227f2b:	cc                   	int3   
  227f2c:	cc                   	int3   
  227f2d:	cc                   	int3   
  227f2e:	cc                   	int3   
  227f2f:	cc                   	int3   

0000000000227f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h00b7b9850ee15efeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227f30:	48 83 ec 10          	sub    $0x10,%rsp
  227f34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227f39:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  227f3d:	48 8b 04 24          	mov    (%rsp),%rax
  227f41:	48 83 c4 10          	add    $0x10,%rsp
  227f45:	c3                   	retq   
  227f46:	cc                   	int3   
  227f47:	cc                   	int3   
  227f48:	cc                   	int3   
  227f49:	cc                   	int3   
  227f4a:	cc                   	int3   
  227f4b:	cc                   	int3   
  227f4c:	cc                   	int3   
  227f4d:	cc                   	int3   
  227f4e:	cc                   	int3   
  227f4f:	cc                   	int3   

0000000000227f50 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h84d9cde669d7a789E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227f50:	48 83 ec 10          	sub    $0x10,%rsp
  227f54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227f59:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  227f5d:	48 8b 04 24          	mov    (%rsp),%rax
  227f61:	48 83 c4 10          	add    $0x10,%rsp
  227f65:	c3                   	retq   
  227f66:	cc                   	int3   
  227f67:	cc                   	int3   
  227f68:	cc                   	int3   
  227f69:	cc                   	int3   
  227f6a:	cc                   	int3   
  227f6b:	cc                   	int3   
  227f6c:	cc                   	int3   
  227f6d:	cc                   	int3   
  227f6e:	cc                   	int3   
  227f6f:	cc                   	int3   

0000000000227f70 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hbec36078dad2cf32E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227f70:	48 83 ec 20          	sub    $0x20,%rsp
  227f74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  227f79:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227f7e:	48 89 3c 24          	mov    %rdi,(%rsp)
  227f82:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  227f87:	48 8b 04 24          	mov    (%rsp),%rax
  227f8b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  227f90:	48 83 c4 20          	add    $0x20,%rsp
  227f94:	c3                   	retq   
  227f95:	cc                   	int3   
  227f96:	cc                   	int3   
  227f97:	cc                   	int3   
  227f98:	cc                   	int3   
  227f99:	cc                   	int3   
  227f9a:	cc                   	int3   
  227f9b:	cc                   	int3   
  227f9c:	cc                   	int3   
  227f9d:	cc                   	int3   
  227f9e:	cc                   	int3   
  227f9f:	cc                   	int3   

0000000000227fa0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227fa0:	48 83 ec 10          	sub    $0x10,%rsp
  227fa4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227fa9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  227fad:	48 8b 04 24          	mov    (%rsp),%rax
  227fb1:	48 83 c4 10          	add    $0x10,%rsp
  227fb5:	c3                   	retq   
  227fb6:	cc                   	int3   
  227fb7:	cc                   	int3   
  227fb8:	cc                   	int3   
  227fb9:	cc                   	int3   
  227fba:	cc                   	int3   
  227fbb:	cc                   	int3   
  227fbc:	cc                   	int3   
  227fbd:	cc                   	int3   
  227fbe:	cc                   	int3   
  227fbf:	cc                   	int3   

0000000000227fc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he80ec4780d0c73e9E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227fc0:	48 83 ec 10          	sub    $0x10,%rsp
  227fc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227fc9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  227fcd:	48 8b 04 24          	mov    (%rsp),%rax
  227fd1:	48 83 c4 10          	add    $0x10,%rsp
  227fd5:	c3                   	retq   
  227fd6:	cc                   	int3   
  227fd7:	cc                   	int3   
  227fd8:	cc                   	int3   
  227fd9:	cc                   	int3   
  227fda:	cc                   	int3   
  227fdb:	cc                   	int3   
  227fdc:	cc                   	int3   
  227fdd:	cc                   	int3   
  227fde:	cc                   	int3   
  227fdf:	cc                   	int3   

0000000000227fe0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfb95411dabe00a01E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  227fe0:	48 83 ec 10          	sub    $0x10,%rsp
  227fe4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  227fe9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  227fed:	48 8b 04 24          	mov    (%rsp),%rax
  227ff1:	48 83 c4 10          	add    $0x10,%rsp
  227ff5:	c3                   	retq   
  227ff6:	cc                   	int3   
  227ff7:	cc                   	int3   
  227ff8:	cc                   	int3   
  227ff9:	cc                   	int3   
  227ffa:	cc                   	int3   
  227ffb:	cc                   	int3   
  227ffc:	cc                   	int3   
  227ffd:	cc                   	int3   
  227ffe:	cc                   	int3   
  227fff:	cc                   	int3   

0000000000228000 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85f07a89a7a7a8a1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  228000:	48 83 ec 28          	sub    $0x28,%rsp
  228004:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228009:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22800e:	e8 dd 00 00 00       	callq  2280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  228013:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  228018:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22801d:	e8 be ff ff ff       	callq  227fe0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfb95411dabe00a01E>
  228022:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228027:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22802c:	48 83 c4 28          	add    $0x28,%rsp
  228030:	c3                   	retq   
  228031:	cc                   	int3   
  228032:	cc                   	int3   
  228033:	cc                   	int3   
  228034:	cc                   	int3   
  228035:	cc                   	int3   
  228036:	cc                   	int3   
  228037:	cc                   	int3   
  228038:	cc                   	int3   
  228039:	cc                   	int3   
  22803a:	cc                   	int3   
  22803b:	cc                   	int3   
  22803c:	cc                   	int3   
  22803d:	cc                   	int3   
  22803e:	cc                   	int3   
  22803f:	cc                   	int3   

0000000000228040 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he83c423481392309E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  228040:	48 83 ec 28          	sub    $0x28,%rsp
  228044:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228049:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22804e:	e8 9d 00 00 00       	callq  2280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  228053:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  228058:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22805d:	e8 3e ff ff ff       	callq  227fa0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hc8f8532e540bb8aeE>
  228062:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228067:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22806c:	48 83 c4 28          	add    $0x28,%rsp
  228070:	c3                   	retq   
  228071:	cc                   	int3   
  228072:	cc                   	int3   
  228073:	cc                   	int3   
  228074:	cc                   	int3   
  228075:	cc                   	int3   
  228076:	cc                   	int3   
  228077:	cc                   	int3   
  228078:	cc                   	int3   
  228079:	cc                   	int3   
  22807a:	cc                   	int3   
  22807b:	cc                   	int3   
  22807c:	cc                   	int3   
  22807d:	cc                   	int3   
  22807e:	cc                   	int3   
  22807f:	cc                   	int3   

0000000000228080 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17heceef75a4b1639c3E>:
    pub const fn cast<U>(self) -> NonNull<U> {
  228080:	48 83 ec 28          	sub    $0x28,%rsp
  228084:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228089:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  22808e:	e8 5d 00 00 00       	callq  2280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  228093:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  228098:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22809d:	e8 8e fe ff ff       	callq  227f30 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h00b7b9850ee15efeE>
  2280a2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2280a7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2280ac:	48 83 c4 28          	add    $0x28,%rsp
  2280b0:	c3                   	retq   
  2280b1:	cc                   	int3   
  2280b2:	cc                   	int3   
  2280b3:	cc                   	int3   
  2280b4:	cc                   	int3   
  2280b5:	cc                   	int3   
  2280b6:	cc                   	int3   
  2280b7:	cc                   	int3   
  2280b8:	cc                   	int3   
  2280b9:	cc                   	int3   
  2280ba:	cc                   	int3   
  2280bb:	cc                   	int3   
  2280bc:	cc                   	int3   
  2280bd:	cc                   	int3   
  2280be:	cc                   	int3   
  2280bf:	cc                   	int3   

00000000002280c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4044b6540ffdc00bE>:
    pub const fn as_ptr(self) -> *mut T {
  2280c0:	50                   	push   %rax
  2280c1:	48 89 f8             	mov    %rdi,%rax
  2280c4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  2280c8:	59                   	pop    %rcx
  2280c9:	c3                   	retq   
  2280ca:	cc                   	int3   
  2280cb:	cc                   	int3   
  2280cc:	cc                   	int3   
  2280cd:	cc                   	int3   
  2280ce:	cc                   	int3   
  2280cf:	cc                   	int3   

00000000002280d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h552a258b54bc04b4E>:
    pub const fn as_ptr(self) -> *mut T {
  2280d0:	50                   	push   %rax
  2280d1:	48 89 f8             	mov    %rdi,%rax
  2280d4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  2280d8:	59                   	pop    %rcx
  2280d9:	c3                   	retq   
  2280da:	cc                   	int3   
  2280db:	cc                   	int3   
  2280dc:	cc                   	int3   
  2280dd:	cc                   	int3   
  2280de:	cc                   	int3   
  2280df:	cc                   	int3   

00000000002280e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8347856ea7cad704E>:
    pub const fn as_ptr(self) -> *mut T {
  2280e0:	50                   	push   %rax
  2280e1:	48 89 f8             	mov    %rdi,%rax
  2280e4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  2280e8:	59                   	pop    %rcx
  2280e9:	c3                   	retq   
  2280ea:	cc                   	int3   
  2280eb:	cc                   	int3   
  2280ec:	cc                   	int3   
  2280ed:	cc                   	int3   
  2280ee:	cc                   	int3   
  2280ef:	cc                   	int3   

00000000002280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>:
    pub const fn as_ptr(self) -> *mut T {
  2280f0:	48 83 ec 10          	sub    $0x10,%rsp
  2280f4:	48 89 f2             	mov    %rsi,%rdx
  2280f7:	48 89 f8             	mov    %rdi,%rax
  2280fa:	48 89 04 24          	mov    %rax,(%rsp)
  2280fe:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  228103:	48 83 c4 10          	add    $0x10,%rsp
  228107:	c3                   	retq   
  228108:	cc                   	int3   
  228109:	cc                   	int3   
  22810a:	cc                   	int3   
  22810b:	cc                   	int3   
  22810c:	cc                   	int3   
  22810d:	cc                   	int3   
  22810e:	cc                   	int3   
  22810f:	cc                   	int3   

0000000000228110 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf19c97e50fda6e9E>:
    pub const fn as_ptr(self) -> *mut T {
  228110:	50                   	push   %rax
  228111:	48 89 f8             	mov    %rdi,%rax
  228114:	48 89 04 24          	mov    %rax,(%rsp)
    }
  228118:	59                   	pop    %rcx
  228119:	c3                   	retq   
  22811a:	cc                   	int3   
  22811b:	cc                   	int3   
  22811c:	cc                   	int3   
  22811d:	cc                   	int3   
  22811e:	cc                   	int3   
  22811f:	cc                   	int3   

0000000000228120 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd9154fdfabc914a1E>:
    pub const fn as_ptr(self) -> *mut T {
  228120:	50                   	push   %rax
  228121:	48 89 f8             	mov    %rdi,%rax
  228124:	48 89 04 24          	mov    %rax,(%rsp)
    }
  228128:	59                   	pop    %rcx
  228129:	c3                   	retq   
  22812a:	cc                   	int3   
  22812b:	cc                   	int3   
  22812c:	cc                   	int3   
  22812d:	cc                   	int3   
  22812e:	cc                   	int3   
  22812f:	cc                   	int3   

0000000000228130 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h23db806e8169f4dcE>:
    pub const fn as_mut_ptr(self) -> *mut T {
  228130:	48 83 ec 28          	sub    $0x28,%rsp
  228134:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228139:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.as_non_null_ptr().as_ptr()
  22813e:	e8 2d 00 00 00       	callq  228170 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h6b8bf6a4c591cb57E>
  228143:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  228148:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22814d:	e8 6e 8b 00 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  228152:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228157:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22815c:	48 83 c4 28          	add    $0x28,%rsp
  228160:	c3                   	retq   
  228161:	cc                   	int3   
  228162:	cc                   	int3   
  228163:	cc                   	int3   
  228164:	cc                   	int3   
  228165:	cc                   	int3   
  228166:	cc                   	int3   
  228167:	cc                   	int3   
  228168:	cc                   	int3   
  228169:	cc                   	int3   
  22816a:	cc                   	int3   
  22816b:	cc                   	int3   
  22816c:	cc                   	int3   
  22816d:	cc                   	int3   
  22816e:	cc                   	int3   
  22816f:	cc                   	int3   

0000000000228170 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h6b8bf6a4c591cb57E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
  228170:	48 83 ec 48          	sub    $0x48,%rsp
  228174:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  228179:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
  22817e:	e8 6d ff ff ff       	callq  2280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  228183:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  228188:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22818d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  228192:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  228197:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22819c:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2281a1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2281a6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2281ab:	e8 f0 8a 00 00       	callq  230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  2281b0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2281b5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2281ba:	48 83 c4 48          	add    $0x48,%rsp
  2281be:	c3                   	retq   
  2281bf:	cc                   	int3   

00000000002281c0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17hcd551bfc17ef509eE>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
  2281c0:	48 83 ec 48          	sub    $0x48,%rsp
  2281c4:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2281c9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  2281ce:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
  2281d3:	e8 e8 8a 00 00       	callq  230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  2281d8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2281dd:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  2281e2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2281e7:	e8 34 98 00 00       	callq  231a20 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  2281ec:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2281f1:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2281f6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2281fb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  228200:	e8 6b fd ff ff       	callq  227f70 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hbec36078dad2cf32E>
  228205:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22820a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22820f:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  228214:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  228219:	48 83 c4 48          	add    $0x48,%rsp
  22821d:	c3                   	retq   
  22821e:	cc                   	int3   
  22821f:	cc                   	int3   

0000000000228220 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h60ee89568f027b03E>:
    pub const fn len(self) -> usize {
  228220:	48 83 ec 38          	sub    $0x38,%rsp
  228224:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228229:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.as_ptr().len()
  22822e:	e8 bd fe ff ff       	callq  2280f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17ha64a81b753f6ad56E>
  228233:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228238:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22823d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  228242:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  228247:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22824c:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        metadata(self)
  228251:	e8 ea 75 fe ff       	callq  20f840 <_ZN4core3ptr8metadata8metadata17hcd1544afa1cfc16cE>
  228256:	48 89 04 24          	mov    %rax,(%rsp)
  22825a:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22825e:	48 83 c4 38          	add    $0x38,%rsp
  228262:	c3                   	retq   
  228263:	cc                   	int3   
  228264:	cc                   	int3   
  228265:	cc                   	int3   
  228266:	cc                   	int3   
  228267:	cc                   	int3   
  228268:	cc                   	int3   
  228269:	cc                   	int3   
  22826a:	cc                   	int3   
  22826b:	cc                   	int3   
  22826c:	cc                   	int3   
  22826d:	cc                   	int3   
  22826e:	cc                   	int3   
  22826f:	cc                   	int3   

0000000000228270 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17hced56ca8bff65c61E>:
        let legacy_checksum: usize = bytes_slice.iter().map(|val| *val as usize).sum();
  228270:	48 83 ec 10          	sub    $0x10,%rsp
  228274:	48 89 3c 24          	mov    %rdi,(%rsp)
  228278:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22827d:	0f b6 06             	movzbl (%rsi),%eax
  228280:	48 83 c4 10          	add    $0x10,%rsp
  228284:	c3                   	retq   
  228285:	cc                   	int3   
  228286:	cc                   	int3   
  228287:	cc                   	int3   
  228288:	cc                   	int3   
  228289:	cc                   	int3   
  22828a:	cc                   	int3   
  22828b:	cc                   	int3   
  22828c:	cc                   	int3   
  22828d:	cc                   	int3   
  22828e:	cc                   	int3   
  22828f:	cc                   	int3   

0000000000228290 <_ZN9r3_kernel4acpi4rsdt17AcpiRootTableKind19parse_from_bootinfo28_$u7b$$u7b$closure$u7d$$u7d$17ha90416735f970b6fE>:
            let ext_checksum: usize = ext_bytes_slice.iter().map(|val| *val as usize).sum();
  228290:	48 83 ec 10          	sub    $0x10,%rsp
  228294:	48 89 3c 24          	mov    %rdi,(%rsp)
  228298:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22829d:	0f b6 06             	movzbl (%rsi),%eax
  2282a0:	48 83 c4 10          	add    $0x10,%rsp
  2282a4:	c3                   	retq   
  2282a5:	cc                   	int3   
  2282a6:	cc                   	int3   
  2282a7:	cc                   	int3   
  2282a8:	cc                   	int3   
  2282a9:	cc                   	int3   
  2282aa:	cc                   	int3   
  2282ab:	cc                   	int3   
  2282ac:	cc                   	int3   
  2282ad:	cc                   	int3   
  2282ae:	cc                   	int3   
  2282af:	cc                   	int3   

00000000002282b0 <_ZN4core3str8converts19from_utf8_unchecked17h2610fd280a888400E>:
/// ```
#[inline]
#[must_use]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_stable(feature = "const_str_from_utf8_unchecked", since = "1.55.0")]
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
  2282b0:	48 83 ec 30          	sub    $0x30,%rsp
  2282b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2282b9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.
    // Also relies on `&str` and `&[u8]` having the same layout.
    unsafe { mem::transmute(v) }
  2282be:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2282c3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2282c8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2282cd:	48 89 04 24          	mov    %rax,(%rsp)
  2282d1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2282d6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2282db:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2282e0:	48 8b 04 24          	mov    (%rsp),%rax
}
  2282e4:	48 83 c4 30          	add    $0x30,%rsp
  2282e8:	c3                   	retq   
  2282e9:	cc                   	int3   
  2282ea:	cc                   	int3   
  2282eb:	cc                   	int3   
  2282ec:	cc                   	int3   
  2282ed:	cc                   	int3   
  2282ee:	cc                   	int3   
  2282ef:	cc                   	int3   

00000000002282f0 <_ZN4core3str8converts23from_utf8_unchecked_mut17he64a89b0752a7eafE>:
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
  2282f0:	48 83 ec 10          	sub    $0x10,%rsp
  2282f4:	48 89 f2             	mov    %rsi,%rdx
  2282f7:	48 89 f8             	mov    %rdi,%rax
  2282fa:	48 89 04 24          	mov    %rax,(%rsp)
  2282fe:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
  228303:	48 83 c4 10          	add    $0x10,%rsp
  228307:	c3                   	retq   
  228308:	cc                   	int3   
  228309:	cc                   	int3   
  22830a:	cc                   	int3   
  22830b:	cc                   	int3   
  22830c:	cc                   	int3   
  22830d:	cc                   	int3   
  22830e:	cc                   	int3   
  22830f:	cc                   	int3   

0000000000228310 <_ZN4core5slice5index74_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$5index17h0b3526a5757c1304E>:
    fn index(&self, index: I) -> &I::Output {
  228310:	48 83 ec 28          	sub    $0x28,%rsp
  228314:	48 89 14 24          	mov    %rdx,(%rsp)
  228318:	48 89 f2             	mov    %rsi,%rdx
  22831b:	48 89 fe             	mov    %rdi,%rsi
  22831e:	48 8b 3c 24          	mov    (%rsp),%rdi
  228322:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  228327:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22832c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        index.index(self)
  228331:	e8 3a 01 00 00       	callq  228470 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E>
  228336:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22833b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  228340:	48 83 c4 28          	add    $0x28,%rsp
  228344:	c3                   	retq   
  228345:	cc                   	int3   
  228346:	cc                   	int3   
  228347:	cc                   	int3   
  228348:	cc                   	int3   
  228349:	cc                   	int3   
  22834a:	cc                   	int3   
  22834b:	cc                   	int3   
  22834c:	cc                   	int3   
  22834d:	cc                   	int3   
  22834e:	cc                   	int3   
  22834f:	cc                   	int3   

0000000000228350 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h3575024572685ae9E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  228350:	48 83 ec 48          	sub    $0x48,%rsp
  228354:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  228359:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22835e:	48 89 f1             	mov    %rsi,%rcx
  228361:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  228366:	48 89 fa             	mov    %rdi,%rdx
  228369:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22836e:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  228373:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  228378:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22837d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        index.index_mut(self)
  228382:	e8 b9 44 ff ff       	callq  21c840 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd268a1c101e8d284E>
  228387:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22838c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  228391:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  228396:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22839b:	48 83 c4 48          	add    $0x48,%rsp
  22839f:	c3                   	retq   

00000000002283a0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h5d3ec839ca9d3a69E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  2283a0:	48 83 ec 38          	sub    $0x38,%rsp
  2283a4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2283a9:	48 89 f2             	mov    %rsi,%rdx
  2283ac:	48 89 fe             	mov    %rdi,%rsi
  2283af:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2283b4:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2283b9:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2283be:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  2283c3:	e8 28 45 ff ff       	callq  21c8f0 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc069e41a2953a9f8E>
  2283c8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2283cd:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2283d2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2283d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  2283dc:	48 83 c4 38          	add    $0x38,%rsp
  2283e0:	c3                   	retq   
  2283e1:	cc                   	int3   
  2283e2:	cc                   	int3   
  2283e3:	cc                   	int3   
  2283e4:	cc                   	int3   
  2283e5:	cc                   	int3   
  2283e6:	cc                   	int3   
  2283e7:	cc                   	int3   
  2283e8:	cc                   	int3   
  2283e9:	cc                   	int3   
  2283ea:	cc                   	int3   
  2283eb:	cc                   	int3   
  2283ec:	cc                   	int3   
  2283ed:	cc                   	int3   
  2283ee:	cc                   	int3   
  2283ef:	cc                   	int3   

00000000002283f0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h9f6d6ff661f6775eE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  2283f0:	48 83 ec 38          	sub    $0x38,%rsp
  2283f4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2283f9:	48 89 f2             	mov    %rsi,%rdx
  2283fc:	48 89 fe             	mov    %rdi,%rsi
  2283ff:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  228404:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  228409:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22840e:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  228413:	e8 b8 45 ff ff       	callq  21c9d0 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbb7ba9361cbbfd0aE>
  228418:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22841d:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  228422:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  228427:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22842c:	48 83 c4 38          	add    $0x38,%rsp
  228430:	c3                   	retq   
  228431:	cc                   	int3   
  228432:	cc                   	int3   
  228433:	cc                   	int3   
  228434:	cc                   	int3   
  228435:	cc                   	int3   
  228436:	cc                   	int3   
  228437:	cc                   	int3   
  228438:	cc                   	int3   
  228439:	cc                   	int3   
  22843a:	cc                   	int3   
  22843b:	cc                   	int3   
  22843c:	cc                   	int3   
  22843d:	cc                   	int3   
  22843e:	cc                   	int3   
  22843f:	cc                   	int3   

0000000000228440 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hf68e6a005a44d53cE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  228440:	48 83 ec 28          	sub    $0x28,%rsp
  228444:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228449:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        index.index_mut(self)
  22844e:	e8 3d 47 ff ff       	callq  21cb90 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h52318d6ef1667890E>
  228453:	48 89 04 24          	mov    %rax,(%rsp)
  228457:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22845c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  228461:	48 8b 04 24          	mov    (%rsp),%rax
    }
  228465:	48 83 c4 28          	add    $0x28,%rsp
  228469:	c3                   	retq   
  22846a:	cc                   	int3   
  22846b:	cc                   	int3   
  22846c:	cc                   	int3   
  22846d:	cc                   	int3   
  22846e:	cc                   	int3   
  22846f:	cc                   	int3   

0000000000228470 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E>:
    fn index(self, slice: &[T]) -> &T {
  228470:	48 83 ec 38          	sub    $0x38,%rsp
  228474:	48 89 0c 24          	mov    %rcx,(%rsp)
  228478:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22847d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  228482:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228487:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22848c:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  228491:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        &(*slice)[self]
  228496:	48 39 d7             	cmp    %rdx,%rdi
  228499:	0f 92 c0             	setb   %al
  22849c:	a8 01                	test   $0x1,%al
  22849e:	75 02                	jne    2284a2 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E+0x32>
  2284a0:	eb 16                	jmp    2284b8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd57aa1e8958a38d4E+0x48>
  2284a2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2284a7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2284ac:	48 c1 e1 03          	shl    $0x3,%rcx
  2284b0:	48 01 c8             	add    %rcx,%rax
    }
  2284b3:	48 83 c4 38          	add    $0x38,%rsp
  2284b7:	c3                   	retq   
  2284b8:	48 8b 14 24          	mov    (%rsp),%rdx
  2284bc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2284c1:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        &(*slice)[self]
  2284c6:	e8 e5 af 00 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  2284cb:	0f 0b                	ud2    
  2284cd:	cc                   	int3   
  2284ce:	cc                   	int3   
  2284cf:	cc                   	int3   

00000000002284d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
  2284d0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2284d7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2284dc:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  2284e1:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  2284e6:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
  2284eb:	48 01 f7             	add    %rsi,%rdi
  2284ee:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  2284f3:	0f 92 44 24 70       	setb   0x70(%rsp)
  2284f8:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2284fd:	8a 44 24 70          	mov    0x70(%rsp),%al
  228501:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  228506:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
            (a as Self, b)
  22850d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  228512:	88 44 24 50          	mov    %al,0x50(%rsp)
        }
  228516:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22851b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228520:	8a 44 24 50          	mov    0x50(%rsp),%al
  228524:	88 44 24 17          	mov    %al,0x17(%rsp)
  228528:	8a 44 24 17          	mov    0x17(%rsp),%al
  22852c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            let (a, b) = self.overflowing_add(rhs);
  228531:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  228536:	88 c1                	mov    %al,%cl
  228538:	80 e1 01             	and    $0x1,%cl
  22853b:	88 4c 24 46          	mov    %cl,0x46(%rsp)
            if unlikely!(b) {None} else {Some(a)}
  22853f:	24 01                	and    $0x1,%al
  228541:	88 44 24 47          	mov    %al,0x47(%rsp)
  228545:	8a 44 24 47          	mov    0x47(%rsp),%al
  228549:	88 44 24 07          	mov    %al,0x7(%rsp)
  22854d:	8a 44 24 07          	mov    0x7(%rsp),%al
  228551:	a8 01                	test   $0x1,%al
  228553:	75 17                	jne    22856c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0x9c>
  228555:	eb 00                	jmp    228557 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0x87>
  228557:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22855c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  228561:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  228568:	00 00 
  22856a:	eb 09                	jmp    228575 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h77dae21b15b51294E+0xa5>
  22856c:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  228573:	00 00 
        }
  228575:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22857a:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22857f:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  228586:	c3                   	retq   
  228587:	cc                   	int3   
  228588:	cc                   	int3   
  228589:	cc                   	int3   
  22858a:	cc                   	int3   
  22858b:	cc                   	int3   
  22858c:	cc                   	int3   
  22858d:	cc                   	int3   
  22858e:	cc                   	int3   
  22858f:	cc                   	int3   

0000000000228590 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
  228590:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  228597:	48 89 f8             	mov    %rdi,%rax
  22859a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22859f:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  2285a4:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2285a9:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
  2285ae:	48 f7 e6             	mul    %rsi
  2285b1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2285b6:	0f 90 44 24 70       	seto   0x70(%rsp)
  2285bb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2285c0:	8a 44 24 70          	mov    0x70(%rsp),%al
  2285c4:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  2285c9:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
            (a as Self, b)
  2285d0:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2285d5:	88 44 24 50          	mov    %al,0x50(%rsp)
        }
  2285d9:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2285de:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2285e3:	8a 44 24 50          	mov    0x50(%rsp),%al
  2285e7:	88 44 24 17          	mov    %al,0x17(%rsp)
  2285eb:	8a 44 24 17          	mov    0x17(%rsp),%al
  2285ef:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            let (a, b) = self.overflowing_mul(rhs);
  2285f4:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  2285f9:	88 c1                	mov    %al,%cl
  2285fb:	80 e1 01             	and    $0x1,%cl
  2285fe:	88 4c 24 46          	mov    %cl,0x46(%rsp)
            if unlikely!(b) {None} else {Some(a)}
  228602:	24 01                	and    $0x1,%al
  228604:	88 44 24 47          	mov    %al,0x47(%rsp)
  228608:	8a 44 24 47          	mov    0x47(%rsp),%al
  22860c:	88 44 24 07          	mov    %al,0x7(%rsp)
  228610:	8a 44 24 07          	mov    0x7(%rsp),%al
  228614:	a8 01                	test   $0x1,%al
  228616:	75 17                	jne    22862f <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0x9f>
  228618:	eb 00                	jmp    22861a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0x8a>
  22861a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22861f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  228624:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
  22862b:	00 00 
  22862d:	eb 09                	jmp    228638 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h808e4e5f870464b5E+0xa8>
  22862f:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  228636:	00 00 
        }
  228638:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22863d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  228642:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  228649:	c3                   	retq   
  22864a:	cc                   	int3   
  22864b:	cc                   	int3   
  22864c:	cc                   	int3   
  22864d:	cc                   	int3   
  22864e:	cc                   	int3   
  22864f:	cc                   	int3   

0000000000228650 <_ZN4core3fmt5Write10write_char17h0016a4ffe4551957E>:
    fn write_char(&mut self, c: char) -> Result {
  228650:	48 83 ec 48          	sub    $0x48,%rsp
  228654:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  228658:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22865d:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  228662:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  228666:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  22866b:	31 f6                	xor    %esi,%esi
  22866d:	ba 04 00 00 00       	mov    $0x4,%edx
  228672:	e8 09 df 00 00       	callq  236580 <memset>
  228677:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  22867b:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  228680:	ba 04 00 00 00       	mov    $0x4,%edx
  228685:	e8 d6 d7 fe ff       	callq  215e60 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h1fa8203f6128f2cfE>
  22868a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22868f:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  228694:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  228699:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22869e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2286a3:	e8 08 54 ff ff       	callq  21dab0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>
  2286a8:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2286ac:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2286b0:	24 01                	and    $0x1,%al
  2286b2:	0f b6 c0             	movzbl %al,%eax
  2286b5:	48 83 c4 48          	add    $0x48,%rsp
  2286b9:	c3                   	retq   
  2286ba:	cc                   	int3   
  2286bb:	cc                   	int3   
  2286bc:	cc                   	int3   
  2286bd:	cc                   	int3   
  2286be:	cc                   	int3   
  2286bf:	cc                   	int3   

00000000002286c0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  2286c0:	48 83 ec 48          	sub    $0x48,%rsp
  2286c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  2286c9:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2286ce:	48 89 04 24          	mov    %rax,(%rsp)
  2286d2:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2286d7:	ba 30 00 00 00       	mov    $0x30,%edx
  2286dc:	e8 7f de 00 00       	callq  236560 <memcpy>
  2286e1:	48 8b 3c 24          	mov    (%rsp),%rdi
  2286e5:	48 8d 35 24 17 01 00 	lea    0x11724(%rip),%rsi        # 239e10 <memcmp+0x3860>
  2286ec:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  2286f1:	e8 4a c6 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  2286f6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2286fa:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2286fe:	24 01                	and    $0x1,%al
  228700:	0f b6 c0             	movzbl %al,%eax
  228703:	48 83 c4 48          	add    $0x48,%rsp
  228707:	c3                   	retq   
  228708:	cc                   	int3   
  228709:	cc                   	int3   
  22870a:	cc                   	int3   
  22870b:	cc                   	int3   
  22870c:	cc                   	int3   
  22870d:	cc                   	int3   
  22870e:	cc                   	int3   
  22870f:	cc                   	int3   

0000000000228710 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h86175dd8abf9ad05E>:
    fn write_char(&mut self, c: char) -> Result {
  228710:	48 83 ec 18          	sub    $0x18,%rsp
  228714:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228719:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  22871d:	48 8b 3f             	mov    (%rdi),%rdi
  228720:	e8 2b ff ff ff       	callq  228650 <_ZN4core3fmt5Write10write_char17h0016a4ffe4551957E>
  228725:	88 44 24 07          	mov    %al,0x7(%rsp)
  228729:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22872d:	24 01                	and    $0x1,%al
  22872f:	0f b6 c0             	movzbl %al,%eax
  228732:	48 83 c4 18          	add    $0x18,%rsp
  228736:	c3                   	retq   
  228737:	cc                   	int3   
  228738:	cc                   	int3   
  228739:	cc                   	int3   
  22873a:	cc                   	int3   
  22873b:	cc                   	int3   
  22873c:	cc                   	int3   
  22873d:	cc                   	int3   
  22873e:	cc                   	int3   
  22873f:	cc                   	int3   

0000000000228740 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h018d733d208049b9E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  228740:	48 83 ec 48          	sub    $0x48,%rsp
  228744:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  228749:	48 8b 07             	mov    (%rdi),%rax
  22874c:	48 89 04 24          	mov    %rax,(%rsp)
  228750:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  228755:	ba 30 00 00 00       	mov    $0x30,%edx
  22875a:	e8 01 de 00 00       	callq  236560 <memcpy>
  22875f:	48 8b 3c 24          	mov    (%rsp),%rdi
  228763:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  228768:	e8 53 ff ff ff       	callq  2286c0 <_ZN4core3fmt5Write9write_fmt17h48762705410497dbE>
  22876d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228771:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  228775:	24 01                	and    $0x1,%al
  228777:	0f b6 c0             	movzbl %al,%eax
  22877a:	48 83 c4 48          	add    $0x48,%rsp
  22877e:	c3                   	retq   
  22877f:	cc                   	int3   

0000000000228780 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h9d849143723bade6E>:
    fn write_str(&mut self, s: &str) -> Result {
  228780:	48 83 ec 28          	sub    $0x28,%rsp
  228784:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228789:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22878e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  228793:	48 8b 3f             	mov    (%rdi),%rdi
  228796:	e8 15 53 ff ff       	callq  21dab0 <_ZN92_$LT$r3_kernel..drivers..display..fb_text..FramebufferLogger$u20$as$u20$core..fmt..Write$GT$9write_str17h252c2d21e9abc0b8E>
  22879b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22879f:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  2287a3:	24 01                	and    $0x1,%al
  2287a5:	0f b6 c0             	movzbl %al,%eax
  2287a8:	48 83 c4 28          	add    $0x28,%rsp
  2287ac:	c3                   	retq   
  2287ad:	cc                   	int3   
  2287ae:	cc                   	int3   
  2287af:	cc                   	int3   

00000000002287b0 <_ZN4core10intrinsics11write_bytes17hc743da85aa5bddaeE>:
/// // Now the box is fine
/// assert_eq!(*v, 42);
/// ```
#[stable(feature = "rust1", since = "1.0.0")]
#[inline]
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
  2287b0:	48 83 ec 18          	sub    $0x18,%rsp
  2287b4:	40 88 f0             	mov    %sil,%al
  2287b7:	48 89 3c 24          	mov    %rdi,(%rsp)
  2287bb:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2287bf:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    }

    debug_assert!(is_aligned_and_not_null(dst), "attempt to write to unaligned or null pointer");

    // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
    unsafe { write_bytes(dst, val, count) }
  2287c4:	48 c1 e2 00          	shl    $0x0,%rdx
  2287c8:	0f b6 f0             	movzbl %al,%esi
  2287cb:	e8 b0 dd 00 00       	callq  236580 <memset>
}
  2287d0:	48 83 c4 18          	add    $0x18,%rsp
  2287d4:	c3                   	retq   
  2287d5:	cc                   	int3   
  2287d6:	cc                   	int3   
  2287d7:	cc                   	int3   
  2287d8:	cc                   	int3   
  2287d9:	cc                   	int3   
  2287da:	cc                   	int3   
  2287db:	cc                   	int3   
  2287dc:	cc                   	int3   
  2287dd:	cc                   	int3   
  2287de:	cc                   	int3   
  2287df:	cc                   	int3   

00000000002287e0 <_ZN4core10intrinsics19copy_nonoverlapping17hf8238b5a76e8c658E>:
pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
  2287e0:	48 83 ec 28          	sub    $0x28,%rsp
  2287e4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2287e9:	48 89 fe             	mov    %rdi,%rsi
  2287ec:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2287f1:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2287f6:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2287fb:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    unsafe { copy_nonoverlapping(src, dst, count) }
  228800:	48 c1 e2 00          	shl    $0x0,%rdx
  228804:	e8 57 dd 00 00       	callq  236560 <memcpy>
}
  228809:	48 83 c4 28          	add    $0x28,%rsp
  22880d:	c3                   	retq   
  22880e:	cc                   	int3   
  22880f:	cc                   	int3   

0000000000228810 <_ZN4core3cmp3Ord3max17hf84761fc38d83fe8E>:
    fn max(self, other: Self) -> Self
  228810:	48 83 ec 18          	sub    $0x18,%rsp
  228814:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228819:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        max_by(self, other, Ord::cmp)
  22881e:	e8 2d 00 00 00       	callq  228850 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE>
  228823:	48 89 04 24          	mov    %rax,(%rsp)
  228827:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22882b:	48 83 c4 18          	add    $0x18,%rsp
  22882f:	c3                   	retq   

0000000000228830 <_ZN4core3cmp3max17h3ce6bdcccb4f6567E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
  228830:	48 83 ec 18          	sub    $0x18,%rsp
  228834:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228839:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    v1.max(v2)
  22883e:	e8 cd ff ff ff       	callq  228810 <_ZN4core3cmp3Ord3max17hf84761fc38d83fe8E>
  228843:	48 89 04 24          	mov    %rax,(%rsp)
  228847:	48 8b 04 24          	mov    (%rsp),%rax
}
  22884b:	48 83 c4 18          	add    $0x18,%rsp
  22884f:	c3                   	retq   

0000000000228850 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  228850:	48 83 ec 48          	sub    $0x48,%rsp
  228854:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228859:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    match compare(&v1, &v2) {
  22885e:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  228863:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  228868:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
  22886d:	c6 44 24 3e 01       	movb   $0x1,0x3e(%rsp)
  228872:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  228877:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22887c:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  228881:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  228886:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22888b:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  228890:	e8 8b 2d fe ff       	callq  20b620 <_ZN4core3ops8function6FnOnce9call_once17h764d520568e619d0E>
  228895:	88 44 24 27          	mov    %al,0x27(%rsp)
  228899:	8a 44 24 27          	mov    0x27(%rsp),%al
  22889d:	04 01                	add    $0x1,%al
  22889f:	2c 02                	sub    $0x2,%al
  2288a1:	72 06                	jb     2288a9 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x59>
  2288a3:	eb 00                	jmp    2288a5 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x55>
  2288a5:	eb 13                	jmp    2288ba <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x6a>
  2288a7:	0f 0b                	ud2    
        Ordering::Less | Ordering::Equal => v2,
  2288a9:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  2288ae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2288b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2288b8:	eb 0f                	jmp    2288c9 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x79>
        Ordering::Greater => v1,
  2288ba:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  2288bf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2288c4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
}
  2288c9:	f6 44 24 3e 01       	testb  $0x1,0x3e(%rsp)
  2288ce:	75 09                	jne    2288d9 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x89>
  2288d0:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  2288d5:	75 0e                	jne    2288e5 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x95>
  2288d7:	eb 02                	jmp    2288db <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x8b>
  2288d9:	eb f5                	jmp    2288d0 <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x80>
  2288db:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2288e0:	48 83 c4 48          	add    $0x48,%rsp
  2288e4:	c3                   	retq   
  2288e5:	eb f4                	jmp    2288db <_ZN4core3cmp6max_by17he8d43d4c432dd42fE+0x8b>
  2288e7:	cc                   	int3   
  2288e8:	cc                   	int3   
  2288e9:	cc                   	int3   
  2288ea:	cc                   	int3   
  2288eb:	cc                   	int3   
  2288ec:	cc                   	int3   
  2288ed:	cc                   	int3   
  2288ee:	cc                   	int3   
  2288ef:	cc                   	int3   

00000000002288f0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3f6f4c9db53fef0cE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
  2288f0:	48 83 ec 30          	sub    $0x30,%rsp
  2288f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2288f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2288fe:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228903:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
  228908:	48 01 f7             	add    %rsi,%rdi
  22890b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  228910:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  228915:	48 89 04 24          	mov    %rax,(%rsp)
  228919:	48 8b 04 24          	mov    (%rsp),%rax
        }
  22891d:	48 83 c4 30          	add    $0x30,%rsp
  228921:	c3                   	retq   
  228922:	cc                   	int3   
  228923:	cc                   	int3   
  228924:	cc                   	int3   
  228925:	cc                   	int3   
  228926:	cc                   	int3   
  228927:	cc                   	int3   
  228928:	cc                   	int3   
  228929:	cc                   	int3   
  22892a:	cc                   	int3   
  22892b:	cc                   	int3   
  22892c:	cc                   	int3   
  22892d:	cc                   	int3   
  22892e:	cc                   	int3   
  22892f:	cc                   	int3   

0000000000228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>:
    #[rustc_deprecated(
        since = "1.50.0",
        reason = "Use `compare_exchange` or `compare_exchange_weak` instead"
    )]
    #[cfg(target_has_atomic = "8")]
    pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
  228930:	48 83 ec 28          	sub    $0x28,%rsp
  228934:	48 89 3c 24          	mov    %rdi,(%rsp)
  228938:	88 c8                	mov    %cl,%al
  22893a:	88 44 24 0b          	mov    %al,0xb(%rsp)
  22893e:	88 d1                	mov    %dl,%cl
  228940:	88 4c 24 0c          	mov    %cl,0xc(%rsp)
  228944:	40 88 f2             	mov    %sil,%dl
  228947:	88 54 24 0d          	mov    %dl,0xd(%rsp)
  22894b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228950:	80 e2 01             	and    $0x1,%dl
  228953:	88 54 24 23          	mov    %dl,0x23(%rsp)
  228957:	80 e1 01             	and    $0x1,%cl
  22895a:	88 4c 24 24          	mov    %cl,0x24(%rsp)
  22895e:	88 44 24 25          	mov    %al,0x25(%rsp)
        match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
  228962:	0f b6 f8             	movzbl %al,%edi
  228965:	e8 36 04 00 00       	callq  228da0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>
  22896a:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22896e:	48 8b 3c 24          	mov    (%rsp),%rdi
  228972:	8a 44 24 0c          	mov    0xc(%rsp),%al
  228976:	8a 54 24 0d          	mov    0xd(%rsp),%dl
  22897a:	40 8a 74 24 0e       	mov    0xe(%rsp),%sil
  22897f:	8a 4c 24 0b          	mov    0xb(%rsp),%cl
  228983:	0f b6 c9             	movzbl %cl,%ecx
  228986:	44 0f b6 c6          	movzbl %sil,%r8d
  22898a:	0f b6 f2             	movzbl %dl,%esi
  22898d:	83 e6 01             	and    $0x1,%esi
  228990:	0f b6 d0             	movzbl %al,%edx
  228993:	83 e2 01             	and    $0x1,%edx
  228996:	e8 55 00 00 00       	callq  2289f0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE>
  22899b:	88 54 24 11          	mov    %dl,0x11(%rsp)
  22899f:	88 44 24 10          	mov    %al,0x10(%rsp)
  2289a3:	0f b6 44 24 10       	movzbl 0x10(%rsp),%eax
  2289a8:	a8 01                	test   $0x1,%al
  2289aa:	74 06                	je     2289b2 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x82>
  2289ac:	eb 00                	jmp    2289ae <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x7e>
  2289ae:	eb 17                	jmp    2289c7 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0x97>
  2289b0:	0f 0b                	ud2    
            Ok(x) => x,
  2289b2:	8a 44 24 11          	mov    0x11(%rsp),%al
  2289b6:	88 c1                	mov    %al,%cl
  2289b8:	80 e1 01             	and    $0x1,%cl
  2289bb:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  2289bf:	24 01                	and    $0x1,%al
  2289c1:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2289c5:	eb 13                	jmp    2289da <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E+0xaa>
            Err(x) => x,
  2289c7:	8a 44 24 11          	mov    0x11(%rsp),%al
  2289cb:	88 c1                	mov    %al,%cl
  2289cd:	80 e1 01             	and    $0x1,%cl
  2289d0:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  2289d4:	24 01                	and    $0x1,%al
  2289d6:	88 44 24 0f          	mov    %al,0xf(%rsp)
        }
    }
  2289da:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2289de:	24 01                	and    $0x1,%al
  2289e0:	0f b6 c0             	movzbl %al,%eax
  2289e3:	48 83 c4 28          	add    $0x28,%rsp
  2289e7:	c3                   	retq   
  2289e8:	cc                   	int3   
  2289e9:	cc                   	int3   
  2289ea:	cc                   	int3   
  2289eb:	cc                   	int3   
  2289ec:	cc                   	int3   
  2289ed:	cc                   	int3   
  2289ee:	cc                   	int3   
  2289ef:	cc                   	int3   

00000000002289f0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE>:
    /// ```
    #[inline]
    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
    #[doc(alias = "compare_and_swap")]
    #[cfg(target_has_atomic = "8")]
    pub fn compare_exchange(
  2289f0:	48 83 ec 38          	sub    $0x38,%rsp
  2289f4:	44 88 c0             	mov    %r8b,%al
  2289f7:	88 44 24 04          	mov    %al,0x4(%rsp)
  2289fb:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  2289ff:	88 54 24 06          	mov    %dl,0x6(%rsp)
  228a03:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  228a08:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228a0d:	40 80 e6 01          	and    $0x1,%sil
  228a11:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  228a16:	80 e2 01             	and    $0x1,%dl
  228a19:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  228a1d:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  228a21:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  228a25:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228a2a:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228a2f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  228a34:	8a 44 24 06          	mov    0x6(%rsp),%al
  228a38:	8a 54 24 07          	mov    0x7(%rsp),%dl
  228a3c:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  228a41:	8a 4c 24 05          	mov    0x5(%rsp),%cl
        success: Ordering,
        failure: Ordering,
    ) -> Result<bool, bool> {
        // SAFETY: data races are prevented by atomic intrinsics.
        match unsafe {
            atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
  228a45:	0f b6 c9             	movzbl %cl,%ecx
  228a48:	44 0f b6 c6          	movzbl %sil,%r8d
  228a4c:	0f b6 f2             	movzbl %dl,%esi
  228a4f:	83 e6 01             	and    $0x1,%esi
  228a52:	0f b6 d0             	movzbl %al,%edx
  228a55:	83 e2 01             	and    $0x1,%edx
  228a58:	e8 83 6d 00 00       	callq  22f7e0 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE>
  228a5d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  228a61:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  228a65:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  228a6a:	a8 01                	test   $0x1,%al
  228a6c:	74 06                	je     228a74 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x84>
  228a6e:	eb 00                	jmp    228a70 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x80>
  228a70:	eb 1c                	jmp    228a8e <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0x9e>
  228a72:	0f 0b                	ud2    
        } {
            Ok(x) => Ok(x != 0),
  228a74:	8a 44 24 19          	mov    0x19(%rsp),%al
  228a78:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228a7c:	3c 00                	cmp    $0x0,%al
  228a7e:	0f 95 c0             	setne  %al
  228a81:	24 01                	and    $0x1,%al
  228a83:	88 44 24 11          	mov    %al,0x11(%rsp)
  228a87:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  228a8c:	eb 18                	jmp    228aa6 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h96a0b75175f06a0eE+0xb6>
            Err(x) => Err(x != 0),
  228a8e:	8a 44 24 19          	mov    0x19(%rsp),%al
  228a92:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  228a96:	3c 00                	cmp    $0x0,%al
  228a98:	0f 95 c0             	setne  %al
  228a9b:	24 01                	and    $0x1,%al
  228a9d:	88 44 24 11          	mov    %al,0x11(%rsp)
  228aa1:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
        }
    }
  228aa6:	8a 44 24 10          	mov    0x10(%rsp),%al
  228aaa:	8a 54 24 11          	mov    0x11(%rsp),%dl
  228aae:	48 83 c4 38          	add    $0x38,%rsp
  228ab2:	c3                   	retq   
  228ab3:	cc                   	int3   
  228ab4:	cc                   	int3   
  228ab5:	cc                   	int3   
  228ab6:	cc                   	int3   
  228ab7:	cc                   	int3   
  228ab8:	cc                   	int3   
  228ab9:	cc                   	int3   
  228aba:	cc                   	int3   
  228abb:	cc                   	int3   
  228abc:	cc                   	int3   
  228abd:	cc                   	int3   
  228abe:	cc                   	int3   
  228abf:	cc                   	int3   

0000000000228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>:
    pub const fn new(v: bool) -> AtomicBool {
  228ac0:	48 83 ec 10          	sub    $0x10,%rsp
  228ac4:	40 88 f8             	mov    %dil,%al
  228ac7:	88 c1                	mov    %al,%cl
  228ac9:	80 e1 01             	and    $0x1,%cl
  228acc:	88 4c 24 0d          	mov    %cl,0xd(%rsp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
  228ad0:	24 01                	and    $0x1,%al
  228ad2:	88 44 24 0f          	mov    %al,0xf(%rsp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
  228ad6:	88 44 24 0e          	mov    %al,0xe(%rsp)
    }
  228ada:	8a 44 24 0e          	mov    0xe(%rsp),%al
  228ade:	88 44 24 07          	mov    %al,0x7(%rsp)
  228ae2:	8a 44 24 07          	mov    0x7(%rsp),%al
  228ae6:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  228aea:	8a 44 24 08          	mov    0x8(%rsp),%al
  228aee:	48 83 c4 10          	add    $0x10,%rsp
  228af2:	c3                   	retq   
  228af3:	cc                   	int3   
  228af4:	cc                   	int3   
  228af5:	cc                   	int3   
  228af6:	cc                   	int3   
  228af7:	cc                   	int3   
  228af8:	cc                   	int3   
  228af9:	cc                   	int3   
  228afa:	cc                   	int3   
  228afb:	cc                   	int3   
  228afc:	cc                   	int3   
  228afd:	cc                   	int3   
  228afe:	cc                   	int3   
  228aff:	cc                   	int3   

0000000000228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>:
    pub fn load(&self, order: Ordering) -> bool {
  228b00:	48 83 ec 28          	sub    $0x28,%rsp
  228b04:	40 88 f0             	mov    %sil,%al
  228b07:	88 44 24 07          	mov    %al,0x7(%rsp)
  228b0b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228b10:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  228b14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228b19:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228b1e:	8a 44 24 07          	mov    0x7(%rsp),%al
  228b22:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  228b27:	0f b6 f0             	movzbl %al,%esi
  228b2a:	e8 61 6b 00 00       	callq  22f690 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>
  228b2f:	88 44 24 06          	mov    %al,0x6(%rsp)
  228b33:	8a 44 24 06          	mov    0x6(%rsp),%al
  228b37:	3c 00                	cmp    $0x0,%al
  228b39:	0f 95 c0             	setne  %al
    }
  228b3c:	24 01                	and    $0x1,%al
  228b3e:	0f b6 c0             	movzbl %al,%eax
  228b41:	48 83 c4 28          	add    $0x28,%rsp
  228b45:	c3                   	retq   
  228b46:	cc                   	int3   
  228b47:	cc                   	int3   
  228b48:	cc                   	int3   
  228b49:	cc                   	int3   
  228b4a:	cc                   	int3   
  228b4b:	cc                   	int3   
  228b4c:	cc                   	int3   
  228b4d:	cc                   	int3   
  228b4e:	cc                   	int3   
  228b4f:	cc                   	int3   

0000000000228b50 <_ZN4core4sync6atomic10AtomicBool5store17h2d36326641320700E>:
    pub fn store(&self, val: bool, order: Ordering) {
  228b50:	48 83 ec 28          	sub    $0x28,%rsp
  228b54:	88 d0                	mov    %dl,%al
  228b56:	88 44 24 06          	mov    %al,0x6(%rsp)
  228b5a:	40 88 f1             	mov    %sil,%cl
  228b5d:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  228b61:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228b66:	80 e1 01             	and    $0x1,%cl
  228b69:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  228b6d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  228b71:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  228b76:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228b7b:	8a 44 24 06          	mov    0x6(%rsp),%al
  228b7f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  228b84:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  228b88:	80 e1 01             	and    $0x1,%cl
  228b8b:	0f b6 f1             	movzbl %cl,%esi
  228b8e:	0f b6 d0             	movzbl %al,%edx
  228b91:	e8 9a 6b 00 00       	callq  22f730 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>
    }
  228b96:	48 83 c4 28          	add    $0x28,%rsp
  228b9a:	c3                   	retq   
  228b9b:	cc                   	int3   
  228b9c:	cc                   	int3   
  228b9d:	cc                   	int3   
  228b9e:	cc                   	int3   
  228b9f:	cc                   	int3   

0000000000228ba0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE>:
            #[rustc_deprecated(
                since = "1.50.0",
                reason = "Use `compare_exchange` or `compare_exchange_weak` instead")
            ]
            #[$cfg_cas]
            pub fn compare_and_swap(&self,
  228ba0:	48 83 ec 68          	sub    $0x68,%rsp
  228ba4:	48 89 14 24          	mov    %rdx,(%rsp)
  228ba8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  228bad:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228bb2:	88 c8                	mov    %cl,%al
  228bb4:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  228bb8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  228bbd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  228bc2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  228bc7:	88 44 24 57          	mov    %al,0x57(%rsp)
                                    new: $int_type,
                                    order: Ordering) -> $int_type {
                match self.compare_exchange(current,
                                            new,
                                            order,
                                            strongest_failure_ordering(order)) {
  228bcb:	0f b6 f8             	movzbl %al,%edi
  228bce:	e8 cd 01 00 00       	callq  228da0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>
  228bd3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  228bd7:	48 8b 14 24          	mov    (%rsp),%rdx
  228bdb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  228be0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  228be5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  228be9:	8a 4c 24 1e          	mov    0x1e(%rsp),%cl
                match self.compare_exchange(current,
  228bed:	0f b6 c9             	movzbl %cl,%ecx
  228bf0:	44 0f b6 c0          	movzbl %al,%r8d
  228bf4:	e8 47 00 00 00       	callq  228c40 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h002ae8ead2402ac8E>
  228bf9:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  228bfe:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  228c03:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  228c08:	48 85 c0             	test   %rax,%rax
  228c0b:	74 06                	je     228c13 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x73>
  228c0d:	eb 00                	jmp    228c0f <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x6f>
  228c0f:	eb 13                	jmp    228c24 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x84>
  228c11:	0f 0b                	ud2    
                    Ok(x) => x,
  228c13:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  228c18:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  228c1d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  228c22:	eb 0f                	jmp    228c33 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hb896640bc65eb7abE+0x93>
                    Err(x) => x,
  228c24:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  228c29:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  228c2e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                }
            }
  228c33:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  228c38:	48 83 c4 68          	add    $0x68,%rsp
  228c3c:	c3                   	retq   
  228c3d:	cc                   	int3   
  228c3e:	cc                   	int3   
  228c3f:	cc                   	int3   

0000000000228c40 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h002ae8ead2402ac8E>:
            /// assert_eq!(some_var.load(Ordering::Relaxed), 10);
            /// ```
            #[inline]
            #[$stable_cxchg]
            #[$cfg_cas]
            pub fn compare_exchange(&self,
  228c40:	48 83 ec 58          	sub    $0x58,%rsp
  228c44:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  228c49:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  228c4e:	44 88 c0             	mov    %r8b,%al
  228c51:	88 44 24 26          	mov    %al,0x26(%rsp)
  228c55:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  228c59:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228c5e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  228c63:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  228c68:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  228c6c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  228c70:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  228c75:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  228c7a:	8a 44 24 26          	mov    0x26(%rsp),%al
  228c7e:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  228c82:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  228c87:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  228c8c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                                    current: $int_type,
                                    new: $int_type,
                                    success: Ordering,
                                    failure: Ordering) -> Result<$int_type, $int_type> {
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  228c91:	0f b6 c9             	movzbl %cl,%ecx
  228c94:	44 0f b6 c0          	movzbl %al,%r8d
  228c98:	e8 53 84 00 00       	callq  2310f0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  228c9d:	48 89 04 24          	mov    %rax,(%rsp)
  228ca1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  228ca6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  228cab:	48 8b 04 24          	mov    (%rsp),%rax
            }
  228caf:	48 83 c4 58          	add    $0x58,%rsp
  228cb3:	c3                   	retq   
  228cb4:	cc                   	int3   
  228cb5:	cc                   	int3   
  228cb6:	cc                   	int3   
  228cb7:	cc                   	int3   
  228cb8:	cc                   	int3   
  228cb9:	cc                   	int3   
  228cba:	cc                   	int3   
  228cbb:	cc                   	int3   
  228cbc:	cc                   	int3   
  228cbd:	cc                   	int3   
  228cbe:	cc                   	int3   
  228cbf:	cc                   	int3   

0000000000228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  228cc0:	48 83 ec 38          	sub    $0x38,%rsp
  228cc4:	40 88 f0             	mov    %sil,%al
  228cc7:	88 44 24 17          	mov    %al,0x17(%rsp)
  228ccb:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228cd0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228cd4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228cd9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228cde:	8a 44 24 17          	mov    0x17(%rsp),%al
  228ce2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  228ce7:	0f b6 f0             	movzbl %al,%esi
  228cea:	e8 91 82 00 00       	callq  230f80 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  228cef:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228cf4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  228cf9:	48 83 c4 38          	add    $0x38,%rsp
  228cfd:	c3                   	retq   
  228cfe:	cc                   	int3   
  228cff:	cc                   	int3   

0000000000228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  228d00:	48 83 ec 38          	sub    $0x38,%rsp
  228d04:	48 89 34 24          	mov    %rsi,(%rsp)
  228d08:	88 d0                	mov    %dl,%al
  228d0a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228d0e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228d13:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  228d18:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228d1c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228d21:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228d26:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228d2a:	48 8b 34 24          	mov    (%rsp),%rsi
  228d2e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  228d33:	0f b6 d0             	movzbl %al,%edx
  228d36:	e8 f5 82 00 00       	callq  231030 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  228d3b:	48 83 c4 38          	add    $0x38,%rsp
  228d3f:	c3                   	retq   

0000000000228d40 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6ef004abf18267a1E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
  228d40:	48 83 ec 48          	sub    $0x48,%rsp
  228d44:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  228d49:	88 d0                	mov    %dl,%al
  228d4b:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  228d4f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  228d54:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  228d59:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  228d5d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228d62:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  228d67:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  228d6b:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  228d70:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_add(self.v.get(), val, order) }
  228d75:	0f b6 d0             	movzbl %al,%edx
  228d78:	e8 33 25 00 00       	callq  22b2b0 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE>
  228d7d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228d82:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  228d87:	48 83 c4 48          	add    $0x48,%rsp
  228d8b:	c3                   	retq   
  228d8c:	cc                   	int3   
  228d8d:	cc                   	int3   
  228d8e:	cc                   	int3   
  228d8f:	cc                   	int3   

0000000000228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>:
///
/// [`hint::spin_loop`]: crate::hint::spin_loop
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[rustc_deprecated(since = "1.51.0", reason = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
  228d90:	50                   	push   %rax
    spin_loop()
  228d91:	e8 ba e9 fe ff       	callq  217750 <_ZN4core4hint9spin_loop17h4ac7c45e53932ad1E>
}
  228d96:	58                   	pop    %rax
  228d97:	c3                   	retq   
  228d98:	cc                   	int3   
  228d99:	cc                   	int3   
  228d9a:	cc                   	int3   
  228d9b:	cc                   	int3   
  228d9c:	cc                   	int3   
  228d9d:	cc                   	int3   
  228d9e:	cc                   	int3   
  228d9f:	cc                   	int3   

0000000000228da0 <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
  228da0:	48 83 ec 10          	sub    $0x10,%rsp
  228da4:	40 88 f8             	mov    %dil,%al
  228da7:	88 44 24 0e          	mov    %al,0xe(%rsp)
    match order {
  228dab:	0f b6 44 24 0e       	movzbl 0xe(%rsp),%eax
  228db0:	48 89 04 24          	mov    %rax,(%rsp)
  228db4:	48 8b 04 24          	mov    (%rsp),%rax
  228db8:	48 8d 0d e5 a1 fd ff 	lea    -0x25e1b(%rip),%rcx        # 202fa4 <str.0+0x24>
  228dbf:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  228dc3:	48 01 c8             	add    %rcx,%rax
  228dc6:	ff e0                	jmpq   *%rax
  228dc8:	0f 0b                	ud2    
        Relaxed => Relaxed,
  228dca:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  228dcf:	eb 1a                	jmp    228deb <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        Release => Relaxed,
  228dd1:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  228dd6:	eb 13                	jmp    228deb <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        Acquire => Acquire,
  228dd8:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  228ddd:	eb 0c                	jmp    228deb <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        AcqRel => Acquire,
  228ddf:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  228de4:	eb 05                	jmp    228deb <_ZN4core4sync6atomic26strongest_failure_ordering17h2470df36d4051f40E+0x4b>
        SeqCst => SeqCst,
  228de6:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
}
  228deb:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228def:	48 83 c4 10          	add    $0x10,%rsp
  228df3:	c3                   	retq   
  228df4:	cc                   	int3   
  228df5:	cc                   	int3   
  228df6:	cc                   	int3   
  228df7:	cc                   	int3   
  228df8:	cc                   	int3   
  228df9:	cc                   	int3   
  228dfa:	cc                   	int3   
  228dfb:	cc                   	int3   
  228dfc:	cc                   	int3   
  228dfd:	cc                   	int3   
  228dfe:	cc                   	int3   
  228dff:	cc                   	int3   

0000000000228e00 <_ZN4core4sync6atomic9AtomicU644load17h8406c945683f8232E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  228e00:	48 83 ec 38          	sub    $0x38,%rsp
  228e04:	40 88 f0             	mov    %sil,%al
  228e07:	88 44 24 17          	mov    %al,0x17(%rsp)
  228e0b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  228e10:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228e14:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228e19:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228e1e:	8a 44 24 17          	mov    0x17(%rsp),%al
  228e22:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  228e27:	0f b6 f0             	movzbl %al,%esi
  228e2a:	e8 41 25 00 00       	callq  22b370 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E>
  228e2f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  228e34:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  228e39:	48 83 c4 38          	add    $0x38,%rsp
  228e3d:	c3                   	retq   
  228e3e:	cc                   	int3   
  228e3f:	cc                   	int3   

0000000000228e40 <_ZN4core4sync6atomic9AtomicU645store17h5dabdcca03d941feE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  228e40:	48 83 ec 38          	sub    $0x38,%rsp
  228e44:	48 89 34 24          	mov    %rsi,(%rsp)
  228e48:	88 d0                	mov    %dl,%al
  228e4a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  228e4e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  228e53:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  228e58:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  228e5c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  228e61:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  228e66:	8a 44 24 0f          	mov    0xf(%rsp),%al
  228e6a:	48 8b 34 24          	mov    (%rsp),%rsi
  228e6e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  228e73:	0f b6 d0             	movzbl %al,%edx
  228e76:	e8 a5 25 00 00       	callq  22b420 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E>
            }
  228e7b:	48 83 c4 38          	add    $0x38,%rsp
  228e7f:	c3                   	retq   

0000000000228e80 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h4059f29c83e0e679E>:
    impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
    where
        A: PartialEq<B>,
    {
        #[inline]
        fn eq(&self, other: &&B) -> bool {
  228e80:	48 83 ec 18          	sub    $0x18,%rsp
  228e84:	48 89 f0             	mov    %rsi,%rax
  228e87:	48 89 f9             	mov    %rdi,%rcx
  228e8a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  228e8f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::eq(*self, *other)
  228e94:	48 8b 39             	mov    (%rcx),%rdi
  228e97:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  228e9b:	48 8b 10             	mov    (%rax),%rdx
  228e9e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  228ea2:	e8 d9 37 ff ff       	callq  21c680 <_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h16fc3b88bb1d607fE>
  228ea7:	88 44 24 07          	mov    %al,0x7(%rsp)
  228eab:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  228eaf:	24 01                	and    $0x1,%al
  228eb1:	0f b6 c0             	movzbl %al,%eax
  228eb4:	48 83 c4 18          	add    $0x18,%rsp
  228eb8:	c3                   	retq   
  228eb9:	cc                   	int3   
  228eba:	cc                   	int3   
  228ebb:	cc                   	int3   
  228ebc:	cc                   	int3   
  228ebd:	cc                   	int3   
  228ebe:	cc                   	int3   
  228ebf:	cc                   	int3   

0000000000228ec0 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17hc4e39ee727fe4555E>:
        fn eq(&self, other: &&B) -> bool {
  228ec0:	48 83 ec 18          	sub    $0x18,%rsp
  228ec4:	48 89 f0             	mov    %rsi,%rax
  228ec7:	48 89 f9             	mov    %rdi,%rcx
  228eca:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  228ecf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::eq(*self, *other)
  228ed4:	48 8b 39             	mov    (%rcx),%rdi
  228ed7:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  228edb:	48 8b 10             	mov    (%rax),%rdx
  228ede:	48 8b 48 08          	mov    0x8(%rax),%rcx
  228ee2:	e8 a9 3c 00 00       	callq  22cb90 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>
  228ee7:	88 44 24 07          	mov    %al,0x7(%rsp)
  228eeb:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  228eef:	24 01                	and    $0x1,%al
  228ef1:	0f b6 c0             	movzbl %al,%eax
  228ef4:	48 83 c4 18          	add    $0x18,%rsp
  228ef8:	c3                   	retq   
  228ef9:	cc                   	int3   
  228efa:	cc                   	int3   
  228efb:	cc                   	int3   
  228efc:	cc                   	int3   
  228efd:	cc                   	int3   
  228efe:	cc                   	int3   
  228eff:	cc                   	int3   

0000000000228f00 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2ne17h6a820eea19afcdd5E>:
        #[inline]
        fn ne(&self, other: &&B) -> bool {
  228f00:	48 83 ec 18          	sub    $0x18,%rsp
  228f04:	48 89 f0             	mov    %rsi,%rax
  228f07:	48 89 f9             	mov    %rdi,%rcx
  228f0a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  228f0f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            PartialEq::ne(*self, *other)
  228f14:	48 8b 39             	mov    (%rcx),%rdi
  228f17:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  228f1b:	48 8b 10             	mov    (%rax),%rdx
  228f1e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  228f22:	e8 29 3d 00 00       	callq  22cc50 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2ne17he788fbf8f176b944E>
  228f27:	88 44 24 07          	mov    %al,0x7(%rsp)
  228f2b:	8a 44 24 07          	mov    0x7(%rsp),%al
        }
  228f2f:	24 01                	and    $0x1,%al
  228f31:	0f b6 c0             	movzbl %al,%eax
  228f34:	48 83 c4 18          	add    $0x18,%rsp
  228f38:	c3                   	retq   
  228f39:	cc                   	int3   
  228f3a:	cc                   	int3   
  228f3b:	cc                   	int3   
  228f3c:	cc                   	int3   
  228f3d:	cc                   	int3   
  228f3e:	cc                   	int3   
  228f3f:	cc                   	int3   

0000000000228f40 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E>:
pub extern "x86-interrupt" fn divide_by_zero(stk: InterruptStackFrame) {
  228f40:	41 53                	push   %r11
  228f42:	41 52                	push   %r10
  228f44:	41 51                	push   %r9
  228f46:	41 50                	push   %r8
  228f48:	57                   	push   %rdi
  228f49:	56                   	push   %rsi
  228f4a:	52                   	push   %rdx
  228f4b:	51                   	push   %rcx
  228f4c:	50                   	push   %rax
  228f4d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  228f54:	fc                   	cld    
  228f55:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  228f5c:	00 
  228f5d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  228f62:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  228f69:	00 00 
  228f6b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  228f70:	48 8d 35 c1 76 fd ff 	lea    -0x2893f(%rip),%rsi        # 200638 <str.0+0x118>
  228f77:	e8 74 8b fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228f7c:	88 44 24 37          	mov    %al,0x37(%rsp)
  228f80:	8a 44 24 37          	mov    0x37(%rsp),%al
  228f84:	a8 01                	test   $0x1,%al
  228f86:	75 09                	jne    228f91 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x51>
  228f88:	eb 00                	jmp    228f8a <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x4a>
  228f8a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  228f8f:	eb 4e                	jmp    228fdf <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0x9f>
  228f91:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  228f98:	00 
  228f99:	48 8b 3d 70 21 01 00 	mov    0x12170(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  228fa0:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  228fa7:	00 
  228fa8:	e8 13 fd ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  228fad:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  228fb4:	00 
  228fb5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  228fbc:	00 
  228fbd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  228fc2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  228fc7:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  228fcc:	e8 1f 8b fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  228fd1:	88 44 24 27          	mov    %al,0x27(%rsp)
  228fd5:	8a 44 24 27          	mov    0x27(%rsp),%al
  228fd9:	24 01                	and    $0x1,%al
  228fdb:	88 44 24 47          	mov    %al,0x47(%rsp)
  228fdf:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  228fe4:	75 16                	jne    228ffc <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0xbc>
}
  228fe6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  228fed:	58                   	pop    %rax
  228fee:	59                   	pop    %rcx
  228fef:	5a                   	pop    %rdx
  228ff0:	5e                   	pop    %rsi
  228ff1:	5f                   	pop    %rdi
  228ff2:	41 58                	pop    %r8
  228ff4:	41 59                	pop    %r9
  228ff6:	41 5a                	pop    %r10
  228ff8:	41 5b                	pop    %r11
  228ffa:	48 cf                	iretq  
  228ffc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  229001:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  229008:	00 
  229009:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  229010:	00 
  229011:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  229018:	00 
  229019:	48 8d 35 50 e3 ff ff 	lea    -0x1cb0(%rip),%rsi        # 227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  229020:	e8 3b 59 fe ff       	callq  20e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  229025:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22902a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22902f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  229034:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  229039:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  229040:	00 
  229041:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  229048:	00 
  229049:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  229050:	00 
  229051:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  229056:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22905b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  229060:	48 8d 35 d9 0d 01 00 	lea    0x10dd9(%rip),%rsi        # 239e40 <memcmp+0x3890>
  229067:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22906d:	4c 8d 0d 74 9f fd ff 	lea    -0x2608c(%rip),%r9        # 202fe8 <str.0+0x68>
  229074:	4c 89 c2             	mov    %r8,%rdx
  229077:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  22907e:	00 
  22907f:	e8 dc d1 fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  229084:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  229089:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22908e:	48 8d 15 bb 0d 01 00 	lea    0x10dbb(%rip),%rdx        # 239e50 <memcmp+0x38a0>
  229095:	e8 56 75 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22909a:	e9 47 ff ff ff       	jmpq   228fe6 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E+0xa6>
  22909f:	cc                   	int3   

00000000002290a0 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E>:
extern "x86-interrupt" fn breakpoint(stk: InterruptStackFrame) {
  2290a0:	41 53                	push   %r11
  2290a2:	41 52                	push   %r10
  2290a4:	41 51                	push   %r9
  2290a6:	41 50                	push   %r8
  2290a8:	57                   	push   %rdi
  2290a9:	56                   	push   %rsi
  2290aa:	52                   	push   %rdx
  2290ab:	51                   	push   %rcx
  2290ac:	50                   	push   %rax
  2290ad:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  2290b4:	fc                   	cld    
  2290b5:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  2290bc:	00 
  2290bd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  2290c2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  2290c9:	00 00 
  2290cb:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2290d0:	48 8d 35 61 75 fd ff 	lea    -0x28a9f(%rip),%rsi        # 200638 <str.0+0x118>
  2290d7:	e8 14 8a fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2290dc:	88 44 24 37          	mov    %al,0x37(%rsp)
  2290e0:	8a 44 24 37          	mov    0x37(%rsp),%al
  2290e4:	a8 01                	test   $0x1,%al
  2290e6:	75 09                	jne    2290f1 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x51>
  2290e8:	eb 00                	jmp    2290ea <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x4a>
  2290ea:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  2290ef:	eb 4e                	jmp    22913f <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0x9f>
  2290f1:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  2290f8:	00 
  2290f9:	48 8b 3d 10 20 01 00 	mov    0x12010(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229100:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  229107:	00 
  229108:	e8 b3 fb ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22910d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  229114:	00 
  229115:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22911c:	00 
  22911d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  229122:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  229127:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  22912c:	e8 bf 89 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229131:	88 44 24 27          	mov    %al,0x27(%rsp)
  229135:	8a 44 24 27          	mov    0x27(%rsp),%al
  229139:	24 01                	and    $0x1,%al
  22913b:	88 44 24 47          	mov    %al,0x47(%rsp)
  22913f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  229144:	75 16                	jne    22915c <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0xbc>
}
  229146:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  22914d:	58                   	pop    %rax
  22914e:	59                   	pop    %rcx
  22914f:	5a                   	pop    %rdx
  229150:	5e                   	pop    %rsi
  229151:	5f                   	pop    %rdi
  229152:	41 58                	pop    %r8
  229154:	41 59                	pop    %r9
  229156:	41 5a                	pop    %r10
  229158:	41 5b                	pop    %r11
  22915a:	48 cf                	iretq  
  22915c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  229161:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  229168:	00 
  229169:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  229170:	00 
  229171:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  229178:	00 
  229179:	48 8d 35 f0 e1 ff ff 	lea    -0x1e10(%rip),%rsi        # 227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  229180:	e8 db 57 fe ff       	callq  20e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  229185:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22918a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22918f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  229194:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  229199:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  2291a0:	00 
  2291a1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  2291a8:	00 
  2291a9:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  2291b0:	00 
  2291b1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2291b6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2291bb:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2291c0:	48 8d 35 c1 0c 01 00 	lea    0x10cc1(%rip),%rsi        # 239e88 <memcmp+0x38d8>
  2291c7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2291cd:	4c 8d 0d 14 9e fd ff 	lea    -0x261ec(%rip),%r9        # 202fe8 <str.0+0x68>
  2291d4:	4c 89 c2             	mov    %r8,%rdx
  2291d7:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  2291de:	00 
  2291df:	e8 7c d0 fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  2291e4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2291e9:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2291ee:	48 8d 15 a3 0c 01 00 	lea    0x10ca3(%rip),%rdx        # 239e98 <memcmp+0x38e8>
  2291f5:	e8 f6 73 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2291fa:	e9 47 ff ff ff       	jmpq   229146 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E+0xa6>
  2291ff:	cc                   	int3   

0000000000229200 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE>:
extern "x86-interrupt" fn invalid_opcode(stk: InterruptStackFrame) {
  229200:	41 53                	push   %r11
  229202:	41 52                	push   %r10
  229204:	41 51                	push   %r9
  229206:	41 50                	push   %r8
  229208:	57                   	push   %rdi
  229209:	56                   	push   %rsi
  22920a:	52                   	push   %rdx
  22920b:	51                   	push   %rcx
  22920c:	50                   	push   %rax
  22920d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  229214:	fc                   	cld    
  229215:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  22921c:	00 
  22921d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  229222:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  229229:	00 00 
  22922b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  229230:	48 8d 35 01 74 fd ff 	lea    -0x28bff(%rip),%rsi        # 200638 <str.0+0x118>
  229237:	e8 b4 88 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22923c:	88 44 24 37          	mov    %al,0x37(%rsp)
  229240:	8a 44 24 37          	mov    0x37(%rsp),%al
  229244:	a8 01                	test   $0x1,%al
  229246:	75 09                	jne    229251 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x51>
  229248:	eb 00                	jmp    22924a <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x4a>
  22924a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  22924f:	eb 4e                	jmp    22929f <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0x9f>
  229251:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  229258:	00 
  229259:	48 8b 3d b0 1e 01 00 	mov    0x11eb0(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229260:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  229267:	00 
  229268:	e8 53 fa ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22926d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  229274:	00 
  229275:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22927c:	00 
  22927d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  229282:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  229287:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  22928c:	e8 5f 88 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229291:	88 44 24 27          	mov    %al,0x27(%rsp)
  229295:	8a 44 24 27          	mov    0x27(%rsp),%al
  229299:	24 01                	and    $0x1,%al
  22929b:	88 44 24 47          	mov    %al,0x47(%rsp)
  22929f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  2292a4:	75 16                	jne    2292bc <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0xbc>
}
  2292a6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  2292ad:	58                   	pop    %rax
  2292ae:	59                   	pop    %rcx
  2292af:	5a                   	pop    %rdx
  2292b0:	5e                   	pop    %rsi
  2292b1:	5f                   	pop    %rdi
  2292b2:	41 58                	pop    %r8
  2292b4:	41 59                	pop    %r9
  2292b6:	41 5a                	pop    %r10
  2292b8:	41 5b                	pop    %r11
  2292ba:	48 cf                	iretq  
  2292bc:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  2292c1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  2292c8:	00 
  2292c9:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  2292d0:	00 
  2292d1:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  2292d8:	00 
  2292d9:	48 8d 35 90 e0 ff ff 	lea    -0x1f70(%rip),%rsi        # 227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  2292e0:	e8 7b 56 fe ff       	callq  20e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  2292e5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2292ea:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2292ef:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2292f4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2292f9:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  229300:	00 
  229301:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  229308:	00 
  229309:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  229310:	00 
  229311:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  229316:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22931b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  229320:	48 8d 35 a9 0b 01 00 	lea    0x10ba9(%rip),%rsi        # 239ed0 <memcmp+0x3920>
  229327:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22932d:	4c 8d 0d b4 9c fd ff 	lea    -0x2634c(%rip),%r9        # 202fe8 <str.0+0x68>
  229334:	4c 89 c2             	mov    %r8,%rdx
  229337:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  22933e:	00 
  22933f:	e8 1c cf fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  229344:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  229349:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22934e:	48 8d 15 8b 0b 01 00 	lea    0x10b8b(%rip),%rdx        # 239ee0 <memcmp+0x3930>
  229355:	e8 96 72 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22935a:	e9 47 ff ff ff       	jmpq   2292a6 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE+0xa6>
  22935f:	cc                   	int3   

0000000000229360 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E>:
extern "x86-interrupt" fn double_fault(stk: InterruptStackFrame, err: u64) -> ! {
  229360:	50                   	push   %rax
  229361:	41 53                	push   %r11
  229363:	41 52                	push   %r10
  229365:	41 51                	push   %r9
  229367:	41 50                	push   %r8
  229369:	57                   	push   %rdi
  22936a:	56                   	push   %rsi
  22936b:	52                   	push   %rdx
  22936c:	51                   	push   %rcx
  22936d:	50                   	push   %rax
  22936e:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  229375:	fc                   	cld    
  229376:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  22937d:	00 
  22937e:	48 8d 84 24 50 01 00 	lea    0x150(%rsp),%rax
  229385:	00 
  229386:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  22938b:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  229392:	00 00 
  229394:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  229399:	48 8d 35 98 72 fd ff 	lea    -0x28d68(%rip),%rsi        # 200638 <str.0+0x118>
  2293a0:	e8 4b 87 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2293a5:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  2293a9:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  2293ad:	a8 01                	test   $0x1,%al
  2293af:	75 09                	jne    2293ba <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0x5a>
  2293b1:	eb 00                	jmp    2293b3 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0x53>
  2293b3:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  2293b8:	eb 4e                	jmp    229408 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xa8>
  2293ba:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  2293c1:	00 
  2293c2:	48 8b 3d 47 1d 01 00 	mov    0x11d47(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2293c9:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  2293d0:	00 
  2293d1:	e8 ea f8 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2293d6:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  2293dd:	00 
  2293de:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  2293e5:	00 
  2293e6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2293eb:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2293f0:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  2293f5:	e8 f6 86 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2293fa:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  2293fe:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  229402:	24 01                	and    $0x1,%al
  229404:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  229408:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  22940d:	75 07                	jne    229416 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xb6>
    cpu::halt_no_interrupts();
  22940f:	e8 ac 5f fe ff       	callq  20f3c0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>
  229414:	0f 0b                	ud2    
  229416:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  22941b:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  229422:	00 
  229423:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  22942a:	00 
  22942b:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  229432:	00 
  229433:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  22943a:	00 
  22943b:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  229442:	00 
  229443:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22944a:	00 
  22944b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  229450:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  229457:	00 
  229458:	48 8b 35 01 1d 01 00 	mov    0x11d01(%rip),%rsi        # 23b160 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  22945f:	e8 dc 59 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  229464:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  229469:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22946e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  229473:	48 8d 35 f6 de ff ff 	lea    -0x210a(%rip),%rsi        # 227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  22947a:	e8 e1 54 fe ff       	callq  20e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  22947f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  229484:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  229489:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22948e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  229493:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  229498:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  22949d:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  2294a4:	00 
  2294a5:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  2294ac:	00 
  2294ad:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  2294b4:	00 
  2294b5:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2294bc:	00 
  2294bd:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  2294c4:	00 
  2294c5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2294ca:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2294cf:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2294d4:	48 8d 35 3d 0a 01 00 	lea    0x10a3d(%rip),%rsi        # 239f18 <memcmp+0x3968>
  2294db:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  2294e1:	4c 8d 0d e0 9b fd ff 	lea    -0x26420(%rip),%r9        # 2030c8 <str.0+0x148>
  2294e8:	4c 89 c2             	mov    %r8,%rdx
  2294eb:	48 c7 04 24 02 00 00 	movq   $0x2,(%rsp)
  2294f2:	00 
  2294f3:	e8 68 cd fd ff       	callq  206260 <_ZN4core3fmt9Arguments16new_v1_formatted17hb670f841b43f6c4cE>
  2294f8:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  2294fd:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  229502:	48 8d 15 2f 0a 01 00 	lea    0x10a2f(%rip),%rdx        # 239f38 <memcmp+0x3988>
  229509:	e8 e2 70 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22950e:	e9 fc fe ff ff       	jmpq   22940f <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E+0xaf>
  229513:	cc                   	int3   
  229514:	cc                   	int3   
  229515:	cc                   	int3   
  229516:	cc                   	int3   
  229517:	cc                   	int3   
  229518:	cc                   	int3   
  229519:	cc                   	int3   
  22951a:	cc                   	int3   
  22951b:	cc                   	int3   
  22951c:	cc                   	int3   
  22951d:	cc                   	int3   
  22951e:	cc                   	int3   
  22951f:	cc                   	int3   

0000000000229520 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E>:
extern "x86-interrupt" fn page_fault(stk: InterruptStackFrame, err: PageFaultExceptionTypes) -> ! {
  229520:	50                   	push   %rax
  229521:	41 53                	push   %r11
  229523:	41 52                	push   %r10
  229525:	41 51                	push   %r9
  229527:	41 50                	push   %r8
  229529:	57                   	push   %rdi
  22952a:	56                   	push   %rsi
  22952b:	52                   	push   %rdx
  22952c:	51                   	push   %rcx
  22952d:	50                   	push   %rax
  22952e:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  229535:	fc                   	cld    
  229536:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  22953d:	00 
  22953e:	48 8d 84 24 70 01 00 	lea    0x170(%rsp),%rax
  229545:	00 
  229546:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    let cr2_val = read_cr2();
  22954b:	e8 00 a8 fe ff       	callq  213d50 <_ZN9r3_kernel3cpu3mmu8read_cr217hb14237c00b02fb42E>
  229550:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    log::error!(
  229555:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  22955c:	00 00 
  22955e:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  229563:	48 8d 35 ce 70 fd ff 	lea    -0x28f32(%rip),%rsi        # 200638 <str.0+0x118>
  22956a:	e8 81 85 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22956f:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  229573:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  229577:	a8 01                	test   $0x1,%al
  229579:	75 09                	jne    229584 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0x64>
  22957b:	eb 00                	jmp    22957d <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0x5d>
  22957d:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  229582:	eb 4e                	jmp    2295d2 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xb2>
  229584:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  22958b:	00 
  22958c:	48 8b 3d 7d 1b 01 00 	mov    0x11b7d(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229593:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  22959a:	00 
  22959b:	e8 20 f7 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  2295a0:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  2295a7:	00 
  2295a8:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2295af:	00 
  2295b0:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2295b5:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2295ba:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  2295bf:	e8 2c 85 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2295c4:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  2295c8:	8a 44 24 4e          	mov    0x4e(%rsp),%al
  2295cc:	24 01                	and    $0x1,%al
  2295ce:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  2295d2:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  2295d7:	75 07                	jne    2295e0 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xc0>
    cpu::halt_no_interrupts();
  2295d9:	e8 e2 5d fe ff       	callq  20f3c0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>
  2295de:	0f 0b                	ud2    
  2295e0:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!(
  2295e5:	48 8d 8c 24 68 01 00 	lea    0x168(%rsp),%rcx
  2295ec:	00 
  2295ed:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  2295f4:	00 
  2295f5:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  2295fa:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  229601:	00 
  229602:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  229609:	00 
  22960a:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
  229611:	00 
  229612:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  229619:	00 
  22961a:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  229621:	00 
  229622:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  229627:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22962e:	00 
  22962f:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  229636:	00 
  229637:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22963c:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  229643:	00 
  229644:	48 8d 35 45 a7 fe ff 	lea    -0x158bb(%rip),%rsi        # 213d90 <_ZN81_$LT$r3_kernel..cpu..mmu..PageFaultExceptionTypes$u20$as$u20$core..fmt..Debug$GT$3fmt17hb3bf0935606e9cc3E>
  22964b:	e8 f0 54 fe ff       	callq  20eb40 <_ZN4core3fmt10ArgumentV13new17h731e686b89db936cE>
  229650:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  229655:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22965a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22965f:	48 8b 35 b2 1a 01 00 	mov    0x11ab2(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  229666:	e8 d5 57 fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22966b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  229670:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  229675:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22967a:	48 8d 35 ef dc ff ff 	lea    -0x2311(%rip),%rsi        # 227370 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h6a6c0b54d47e7ca5E>
  229681:	e8 da 52 fe ff       	callq  20e960 <_ZN4core3fmt10ArgumentV13new17h5a1bae88c35febc6E>
  229686:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22968b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  229690:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  229695:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22969a:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22969f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2296a4:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2296a9:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  2296ae:	4c 89 84 24 a8 00 00 	mov    %r8,0xa8(%rsp)
  2296b5:	00 
  2296b6:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  2296bd:	00 
  2296be:	48 89 b4 24 b8 00 00 	mov    %rsi,0xb8(%rsp)
  2296c5:	00 
  2296c6:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  2296cd:	00 
  2296ce:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  2296d5:	00 
  2296d6:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  2296dd:	00 
  2296de:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  2296e5:	00 
  2296e6:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  2296eb:	48 8d 35 7e 08 01 00 	lea    0x1087e(%rip),%rsi        # 239f70 <memcmp+0x39c0>
  2296f2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  2296f8:	4c 89 c2             	mov    %r8,%rdx
  2296fb:	e8 c0 cb fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229700:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  229705:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  22970a:	48 8d 15 8f 08 01 00 	lea    0x1088f(%rip),%rdx        # 239fa0 <memcmp+0x39f0>
  229711:	e8 da 6e 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229716:	e9 be fe ff ff       	jmpq   2295d9 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E+0xb9>
  22971b:	cc                   	int3   
  22971c:	cc                   	int3   
  22971d:	cc                   	int3   
  22971e:	cc                   	int3   
  22971f:	cc                   	int3   

0000000000229720 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE>:
pub fn prepare_idt() -> InterruptDescriptorTable {
  229720:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  229727:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22972c:	48 89 f8             	mov    %rdi,%rax
  22972f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut idt = InterruptDescriptorTable::empty();
  229734:	e8 67 dd ff ff       	callq  2274a0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17hf13028ff0f1dd227E>
    idt.divide_error = prepare_default_handle(divide_by_zero);
  229739:	48 8d 3d 00 f8 ff ff 	lea    -0x800(%rip),%rdi        # 228f40 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17h9c0a38f72f9684c2E>
  229740:	e8 9b e6 ff ff       	callq  227de0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  229745:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  22974c:	00 
  22974d:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  229754:	00 
  229755:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22975c:	00 
  22975d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  229762:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  229769:	00 
  22976a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22976f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  229774:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  229779:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22977e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  229782:	48 89 08             	mov    %rcx,(%rax)
    idt.invalid_opcode = prepare_default_handle(invalid_opcode);
  229785:	48 8d 3d 74 fa ff ff 	lea    -0x58c(%rip),%rdi        # 229200 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17he080838f54b30a1fE>
  22978c:	e8 4f e6 ff ff       	callq  227de0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  229791:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  229798:	00 
  229799:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  2297a0:	00 
  2297a1:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2297a8:	00 
  2297a9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2297ae:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  2297b5:	00 
  2297b6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2297bb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2297c0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  2297c5:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  2297ca:	48 89 50 68          	mov    %rdx,0x68(%rax)
  2297ce:	48 89 48 60          	mov    %rcx,0x60(%rax)
    idt.breakpoint = prepare_default_handle(breakpoint);
  2297d2:	48 8d 3d c7 f8 ff ff 	lea    -0x739(%rip),%rdi        # 2290a0 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h7fdbdd43e4ea5e79E>
  2297d9:	e8 02 e6 ff ff       	callq  227de0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17h69732289ddb8103cE>
  2297de:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  2297e5:	00 
  2297e6:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  2297ed:	00 
  2297ee:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  2297f5:	00 
  2297f6:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2297fb:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  229802:	00 
  229803:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  229808:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22980d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  229812:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  229817:	48 89 50 38          	mov    %rdx,0x38(%rax)
  22981b:	48 89 48 30          	mov    %rcx,0x30(%rax)
    idt.double_fault = prepare_no_ret_error_code_handle(double_fault);
  22981f:	48 8d 3d 3a fb ff ff 	lea    -0x4c6(%rip),%rdi        # 229360 <_ZN9r3_kernel3cpu10exceptions12double_fault17hd9f7aaa6702535d5E>
  229826:	e8 15 e6 ff ff       	callq  227e40 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3413212289963e19E>
  22982b:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  229832:	00 
  229833:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22983a:	00 
  22983b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  229842:	00 
  229843:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  229848:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22984f:	00 
  229850:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  229855:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22985a:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22985f:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  229864:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  22986b:	48 89 88 80 00 00 00 	mov    %rcx,0x80(%rax)
    idt.page_fault = prepare_page_fault_handler(page_fault);
  229872:	48 8d 3d a7 fc ff ff 	lea    -0x359(%rip),%rdi        # 229520 <_ZN9r3_kernel3cpu10exceptions10page_fault17ha88d0288890d06e7E>
  229879:	e8 22 e6 ff ff       	callq  227ea0 <_ZN9r3_kernel3cpu10interrupts26prepare_page_fault_handler17h49693b7356911dbaE>
  22987e:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  229885:	00 
  229886:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22988d:	00 
  22988e:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  229895:	00 
  229896:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22989b:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  2298a2:	00 
  2298a3:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2298a8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2298ad:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2298b2:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  2298b9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2298be:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
    idt.double_fault.set_stack_index(0);
  2298c5:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
  2298cc:	31 f6                	xor    %esi,%esi
  2298ce:	e8 bd 80 fe ff       	callq  211990 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h6e9c4380cd687e88E>
    log::info!("Prepared basic exceptions.");
  2298d3:	48 c7 44 24 70 03 00 	movq   $0x3,0x70(%rsp)
  2298da:	00 00 
  2298dc:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  2298e1:	48 8d 35 50 6d fd ff 	lea    -0x292b0(%rip),%rsi        # 200638 <str.0+0x118>
  2298e8:	e8 03 82 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  2298ed:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2298f1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2298f5:	a8 01                	test   $0x1,%al
  2298f7:	75 09                	jne    229902 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE+0x1e2>
  2298f9:	eb 00                	jmp    2298fb <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE+0x1db>
  2298fb:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  229900:	eb 54                	jmp    229956 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE+0x236>
  229902:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  229909:	00 
  22990a:	48 8b 3d ff 17 01 00 	mov    0x117ff(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229911:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  229918:	00 
  229919:	e8 a2 f3 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22991e:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  229925:	00 
  229926:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22992d:	00 
  22992e:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  229935:	00 
  229936:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22993b:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  229942:	00 
  229943:	e8 a8 81 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229948:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22994c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  229950:	24 01                	and    $0x1,%al
  229952:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  229956:	f6 44 24 7f 01       	testb  $0x1,0x7f(%rsp)
  22995b:	75 0d                	jne    22996a <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE+0x24a>
  22995d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  229962:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  229969:	c3                   	retq   
    log::info!("Prepared basic exceptions.");
  22996a:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  229971:	00 
  229972:	48 8d 35 5f 06 01 00 	lea    0x1065f(%rip),%rsi        # 239fd8 <memcmp+0x3a28>
  229979:	ba 01 00 00 00       	mov    $0x1,%edx
  22997e:	48 8d 0d 23 98 fd ff 	lea    -0x267dd(%rip),%rcx        # 2031a8 <str.0+0x228>
  229985:	31 c0                	xor    %eax,%eax
  229987:	41 89 c0             	mov    %eax,%r8d
  22998a:	e8 31 c9 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22998f:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  229994:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  22999b:	00 
  22999c:	48 8d 15 45 06 01 00 	lea    0x10645(%rip),%rdx        # 239fe8 <memcmp+0x3a38>
  2299a3:	e8 48 6c 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2299a8:	eb b3                	jmp    22995d <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h3641a855f25b68fdE+0x23d>
  2299aa:	cc                   	int3   
  2299ab:	cc                   	int3   
  2299ac:	cc                   	int3   
  2299ad:	cc                   	int3   
  2299ae:	cc                   	int3   
  2299af:	cc                   	int3   

00000000002299b0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E>:
}

pub fn init_exceptions() {
  2299b0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    // load processor IDT
    IDT.lock().load_into_cpu();
  2299b7:	48 8d 3d 11 98 fd ff 	lea    -0x267ef(%rip),%rdi        # 2031cf <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E>
  2299be:	e8 fd 00 00 00       	callq  229ac0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h535fd7346896ff92E>
  2299c3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2299c8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2299cd:	e8 ae 2a 00 00       	callq  22c480 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hf747a5da2ef31e32E>
  2299d2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2299d7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2299dc:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2299e1:	e8 4a 2b 00 00       	callq  22c530 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd530693fc41831cbE>
  2299e6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2299eb:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2299f0:	e8 ab e3 ff ff       	callq  227da0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17h952643ed3d0b9452E>
  2299f5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2299fa:	e8 d1 1d fe ff       	callq  20b7d0 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h6b7435ddd305bf85E>
    log::info!("Initialized Interrupt descriptor table.");
  2299ff:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  229a06:	00 00 
  229a08:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  229a0d:	48 8d 35 24 6c fd ff 	lea    -0x293dc(%rip),%rsi        # 200638 <str.0+0x118>
  229a14:	e8 d7 80 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229a19:	88 44 24 0f          	mov    %al,0xf(%rsp)
  229a1d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  229a21:	a8 01                	test   $0x1,%al
  229a23:	75 09                	jne    229a2e <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0x7e>
  229a25:	eb 00                	jmp    229a27 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0x77>
  229a27:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  229a2c:	eb 48                	jmp    229a76 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xc6>
  229a2e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  229a33:	48 8b 3d d6 16 01 00 	mov    0x116d6(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229a3a:	0f b6 74 24 7f       	movzbl 0x7f(%rsp),%esi
  229a3f:	e8 7c f2 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229a44:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  229a4b:	00 
  229a4c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  229a53:	00 
  229a54:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  229a59:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  229a5e:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  229a63:	e8 88 80 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229a68:	88 44 24 0e          	mov    %al,0xe(%rsp)
  229a6c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  229a70:	24 01                	and    $0x1,%al
  229a72:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  229a76:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  229a7b:	75 08                	jne    229a85 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xd5>
}
  229a7d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  229a84:	c3                   	retq   
    log::info!("Initialized Interrupt descriptor table.");
  229a85:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  229a8a:	48 8d 35 8f 05 01 00 	lea    0x1058f(%rip),%rsi        # 23a020 <memcmp+0x3a70>
  229a91:	ba 01 00 00 00       	mov    $0x1,%edx
  229a96:	48 8d 0d 0b 97 fd ff 	lea    -0x268f5(%rip),%rcx        # 2031a8 <str.0+0x228>
  229a9d:	31 c0                	xor    %eax,%eax
  229a9f:	41 89 c0             	mov    %eax,%r8d
  229aa2:	e8 19 c8 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229aa7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  229aac:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  229ab1:	48 8d 15 78 05 01 00 	lea    0x10578(%rip),%rdx        # 23a030 <memcmp+0x3a80>
  229ab8:	e8 33 6b 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229abd:	eb be                	jmp    229a7d <_ZN9r3_kernel3cpu10exceptions15init_exceptions17h44a1d8e105f67c70E+0xcd>
  229abf:	cc                   	int3   

0000000000229ac0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h535fd7346896ff92E>:
            fn deref(&self) -> &$T {
  229ac0:	48 83 ec 18          	sub    $0x18,%rsp
  229ac4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  229ac9:	48 8d 05 30 83 01 00 	lea    0x18330(%rip),%rax        # 241e00 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2b3e99603b425090E>
  229ad0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  229ad5:	48 8d 3d 24 83 01 00 	lea    0x18324(%rip),%rdi        # 241e00 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h2b3e99603b425090E>
  229adc:	e8 5f ef fd ff       	callq  208a40 <_ZN4spin4once13Once$LT$T$GT$9call_once17h438fc23cce978391E>
  229ae1:	48 89 04 24          	mov    %rax,(%rsp)
  229ae5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  229ae9:	48 83 c4 18          	add    $0x18,%rsp
  229aed:	c3                   	retq   
  229aee:	cc                   	int3   
  229aef:	cc                   	int3   

0000000000229af0 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE>:
use boot_proto::BootProtocol;
use bootloader::BootInfo;

/// This function is called on panic.

pub fn init_basic_setup(boot_info: &'static BootInfo) {
  229af0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  229af7:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  229afe:	00 
    BootProtocol::create(boot_info);
  229aff:	e8 8c e3 fe ff       	callq  217e90 <_ZN9r3_kernel10boot_proto12BootProtocol6create17h63a7ef6bf2bc3967E>

    drivers::display::init();
  229b04:	e8 17 ae fe ff       	callq  214920 <_ZN9r3_kernel7drivers7display4init17h63234a299b3eacbbE>
    logging::init();
  229b09:	e8 22 d7 ff ff       	callq  227230 <_ZN9r3_kernel7logging4init17h648c946b5865c67bE>

    log::info!("Hello, kernel world!");
  229b0e:	48 c7 44 24 10 03 00 	movq   $0x3,0x10(%rsp)
  229b15:	00 00 
  229b17:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  229b1c:	48 8d 35 15 6b fd ff 	lea    -0x294eb(%rip),%rsi        # 200638 <str.0+0x118>
  229b23:	e8 c8 7f fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229b28:	88 44 24 0f          	mov    %al,0xf(%rsp)
  229b2c:	8a 44 24 0f          	mov    0xf(%rsp),%al
  229b30:	a8 01                	test   $0x1,%al
  229b32:	75 09                	jne    229b3d <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x4d>
  229b34:	eb 00                	jmp    229b36 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x46>
  229b36:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  229b3b:	eb 4e                	jmp    229b8b <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x9b>
  229b3d:	c6 84 24 bf 00 00 00 	movb   $0x0,0xbf(%rsp)
  229b44:	00 
  229b45:	48 8b 3d c4 15 01 00 	mov    0x115c4(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229b4c:	0f b6 b4 24 bf 00 00 	movzbl 0xbf(%rsp),%esi
  229b53:	00 
  229b54:	e8 67 f1 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229b59:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  229b60:	00 
  229b61:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  229b68:	00 
  229b69:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  229b6e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  229b73:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  229b78:	e8 73 7f fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229b7d:	88 44 24 0e          	mov    %al,0xe(%rsp)
  229b81:	8a 44 24 0e          	mov    0xe(%rsp),%al
  229b85:	24 01                	and    $0x1,%al
  229b87:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  229b8b:	f6 44 24 1f 01       	testb  $0x1,0x1f(%rsp)
  229b90:	75 07                	jne    229b99 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xa9>
    BootProtocol::print_boot_info();
  229b92:	e8 79 e5 fe ff       	callq  218110 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17hcf0dcb35738d4c52E>
  229b97:	eb 3a                	jmp    229bd3 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xe3>
    log::info!("Hello, kernel world!");
  229b99:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  229b9e:	48 8d 35 c3 04 01 00 	lea    0x104c3(%rip),%rsi        # 23a068 <memcmp+0x3ab8>
  229ba5:	ba 01 00 00 00       	mov    $0x1,%edx
  229baa:	48 8d 0d 37 96 fd ff 	lea    -0x269c9(%rip),%rcx        # 2031e8 <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x19>
  229bb1:	31 c0                	xor    %eax,%eax
  229bb3:	41 89 c0             	mov    %eax,%r8d
  229bb6:	e8 05 c7 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229bbb:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  229bc0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  229bc5:	48 8d 15 ac 04 01 00 	lea    0x104ac(%rip),%rdx        # 23a078 <memcmp+0x3ac8>
  229bcc:	e8 1f 6a 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229bd1:	eb bf                	jmp    229b92 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0xa2>

    cpu::init_base_processor_tables();
  229bd3:	e8 f8 57 fe ff       	callq  20f3d0 <_ZN9r3_kernel3cpu26init_base_processor_tables17he70b2cdd0f8622b9E>
    cpu::init_core_hardware();
  229bd8:	e8 d3 58 fe ff       	callq  20f4b0 <_ZN9r3_kernel3cpu18init_core_hardware17hec2ae6c2c89e3b83E>
    cpu::init_features_detection();
  229bdd:	e8 fe 57 fe ff       	callq  20f3e0 <_ZN9r3_kernel3cpu23init_features_detection17he58408ebd0f89f65E>
    cpu::run_test_breakpoint_recovery();
  229be2:	e8 09 58 fe ff       	callq  20f3f0 <_ZN9r3_kernel3cpu28run_test_breakpoint_recovery17hbead3723b93704deE>

    mm::init();
  229be7:	e8 54 c6 ff ff       	callq  226240 <_ZN9r3_kernel2mm4init17h6a899ad31a4745cfE>
    acpi::init();
  229bec:	e8 2f 05 ff ff       	callq  21a120 <_ZN9r3_kernel4acpi4init17haae37bb483bcdc2bE>

    // init PCI device list.
    drivers::pci::detect_devices();
  229bf1:	e8 4a 2a ff ff       	callq  21c640 <_ZN9r3_kernel7drivers3pci14detect_devices17hf40cc5a295e67b37E>

    // pit sleep for sometime:
    cpu::tsc::TSCSleeper::sleep_sec(10);
  229bf6:	bf 0a 00 00 00       	mov    $0xa,%edi
  229bfb:	e8 c0 02 ff ff       	callq  219ec0 <_ZN9r3_kernel3cpu3tsc10TSCSleeper9sleep_sec17h2703eee42a8f163aE>

    log::info!("Initial stage booted properly.");
  229c00:	48 c7 44 24 58 03 00 	movq   $0x3,0x58(%rsp)
  229c07:	00 00 
  229c09:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  229c0e:	48 8d 35 23 6a fd ff 	lea    -0x295dd(%rip),%rsi        # 200638 <str.0+0x118>
  229c15:	e8 d6 7e fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229c1a:	88 44 24 0d          	mov    %al,0xd(%rsp)
  229c1e:	8a 44 24 0d          	mov    0xd(%rsp),%al
  229c22:	a8 01                	test   $0x1,%al
  229c24:	75 09                	jne    229c2f <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x13f>
  229c26:	eb 00                	jmp    229c28 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x138>
  229c28:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
  229c2d:	eb 4e                	jmp    229c7d <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x18d>
  229c2f:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  229c36:	00 
  229c37:	48 8b 3d d2 14 01 00 	mov    0x114d2(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229c3e:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  229c45:	00 
  229c46:	e8 75 f0 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229c4b:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  229c52:	00 
  229c53:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  229c5a:	00 
  229c5b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  229c60:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  229c65:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  229c6a:	e8 81 7e fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229c6f:	88 44 24 0c          	mov    %al,0xc(%rsp)
  229c73:	8a 44 24 0c          	mov    0xc(%rsp),%al
  229c77:	24 01                	and    $0x1,%al
  229c79:	88 44 24 67          	mov    %al,0x67(%rsp)
  229c7d:	f6 44 24 67 01       	testb  $0x1,0x67(%rsp)
  229c82:	75 08                	jne    229c8c <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x19c>
}
  229c84:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  229c8b:	c3                   	retq   
    log::info!("Initial stage booted properly.");
  229c8c:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  229c91:	48 8d 35 18 04 01 00 	lea    0x10418(%rip),%rsi        # 23a0b0 <memcmp+0x3b00>
  229c98:	ba 01 00 00 00       	mov    $0x1,%edx
  229c9d:	48 8d 0d 44 95 fd ff 	lea    -0x26abc(%rip),%rcx        # 2031e8 <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x19>
  229ca4:	31 c0                	xor    %eax,%eax
  229ca6:	41 89 c0             	mov    %eax,%r8d
  229ca9:	e8 12 c6 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229cae:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  229cb3:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  229cb8:	48 8d 15 01 04 01 00 	lea    0x10401(%rip),%rdx        # 23a0c0 <memcmp+0x3b10>
  229cbf:	e8 2c 69 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229cc4:	eb be                	jmp    229c84 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE+0x194>
  229cc6:	cc                   	int3   
  229cc7:	cc                   	int3   
  229cc8:	cc                   	int3   
  229cc9:	cc                   	int3   
  229cca:	cc                   	int3   
  229ccb:	cc                   	int3   
  229ccc:	cc                   	int3   
  229ccd:	cc                   	int3   
  229cce:	cc                   	int3   
  229ccf:	cc                   	int3   

0000000000229cd0 <_start>:

#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start(boot_info: &'static BootInfo) -> ! {
  229cd0:	50                   	push   %rax
  229cd1:	48 89 3c 24          	mov    %rdi,(%rsp)
    // init basic logging through UART as of now:
    init_basic_setup(boot_info);
  229cd5:	e8 16 fe ff ff       	callq  229af0 <_ZN9r3_kernel16init_basic_setup17he597e367d26d816fE>
    cpu::halt_no_interrupts();
  229cda:	e8 e1 56 fe ff       	callq  20f3c0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h896caf5a7ab99696E>
  229cdf:	0f 0b                	ud2    
  229ce1:	cc                   	int3   
  229ce2:	cc                   	int3   
  229ce3:	cc                   	int3   
  229ce4:	cc                   	int3   
  229ce5:	cc                   	int3   
  229ce6:	cc                   	int3   
  229ce7:	cc                   	int3   
  229ce8:	cc                   	int3   
  229ce9:	cc                   	int3   
  229cea:	cc                   	int3   
  229ceb:	cc                   	int3   
  229cec:	cc                   	int3   
  229ced:	cc                   	int3   
  229cee:	cc                   	int3   
  229cef:	cc                   	int3   

0000000000229cf0 <rust_oom>:

#[global_allocator]
static KERNEL_HEAP_ALLOCATOR: LockedHeap = LockedHeap::empty();

#[alloc_error_handler]
fn alloc_error_handler(layout: alloc::alloc::Layout) -> ! {
  229cf0:	48 83 ec 78          	sub    $0x78,%rsp
  229cf4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  229cf9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    panic!("allocation error: {:?}", layout)
  229cfe:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  229d03:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  229d08:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  229d0d:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  229d12:	48 8b 35 7f 14 01 00 	mov    0x1147f(%rip),%rsi        # 23b198 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xe8>
  229d19:	e8 42 4f fe ff       	callq  20ec60 <_ZN4core3fmt10ArgumentV13new17ha12a9edfec13e26aE>
  229d1e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  229d23:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  229d28:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  229d2d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  229d32:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  229d37:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  229d3c:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  229d41:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  229d46:	48 8d 35 ab 03 01 00 	lea    0x103ab(%rip),%rsi        # 23a0f8 <memcmp+0x3b48>
  229d4d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  229d53:	4c 89 c2             	mov    %r8,%rdx
  229d56:	e8 65 c5 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229d5b:	48 8d 35 a6 03 01 00 	lea    0x103a6(%rip),%rsi        # 23a108 <memcmp+0x3b58>
  229d62:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  229d67:	e8 c4 97 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  229d6c:	0f 0b                	ud2    
  229d6e:	cc                   	int3   
  229d6f:	cc                   	int3   

0000000000229d70 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E>:
}

fn map_virtual_memory() {
  229d70:	48 81 ec 28 03 00 00 	sub    $0x328,%rsp
    let n_4k_frames: usize = (HEAP_SIZE / paging::PageSize::Page4KiB.size()) as usize;
  229d77:	48 8d 3d bc 94 fd ff 	lea    -0x26b44(%rip),%rdi        # 20323a <_ZN9r3_kernel3cpu10exceptions3IDT17h99ce11d1d2e99ef0E+0x6b>
  229d7e:	e8 dd 21 fe ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  229d83:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  229d8a:	00 
  229d8b:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  229d92:	00 
  229d93:	48 83 f8 00          	cmp    $0x0,%rax
  229d97:	0f 94 c0             	sete   %al
  229d9a:	a8 01                	test   $0x1,%al
  229d9c:	75 43                	jne    229de1 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x71>
  229d9e:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  229da5:	00 
  229da6:	b8 00 00 a0 00       	mov    $0xa00000,%eax
  229dab:	31 d2                	xor    %edx,%edx
  229dad:	48 f7 f1             	div    %rcx
  229db0:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  229db7:	00 
    log::debug!("n_heap_pages={}.", n_4k_frames);
  229db8:	48 c7 84 24 a8 00 00 	movq   $0x4,0xa8(%rsp)
  229dbf:	00 04 00 00 00 
  229dc4:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  229dcb:	00 
  229dcc:	48 8d 35 65 68 fd ff 	lea    -0x2979b(%rip),%rsi        # 200638 <str.0+0x118>
  229dd3:	e8 18 7d fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229dd8:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
  229ddf:	eb 1a                	jmp    229dfb <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x8b>
    let n_4k_frames: usize = (HEAP_SIZE / paging::PageSize::Page4KiB.size()) as usize;
  229de1:	48 8d 3d 58 94 fd ff 	lea    -0x26ba8(%rip),%rdi        # 203240 <str.0>
  229de8:	48 8d 15 31 03 01 00 	lea    0x10331(%rip),%rdx        # 23a120 <memcmp+0x3b70>
  229def:	be 19 00 00 00       	mov    $0x19,%esi
  229df4:	e8 67 96 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  229df9:	0f 0b                	ud2    
  229dfb:	8a 84 24 97 00 00 00 	mov    0x97(%rsp),%al
    log::debug!("n_heap_pages={}.", n_4k_frames);
  229e02:	a8 01                	test   $0x1,%al
  229e04:	75 0c                	jne    229e12 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0xa2>
  229e06:	eb 00                	jmp    229e08 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x98>
  229e08:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  229e0f:	00 
  229e10:	eb 60                	jmp    229e72 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x102>
  229e12:	c6 84 24 1f 03 00 00 	movb   $0x0,0x31f(%rsp)
  229e19:	00 
  229e1a:	48 8b 3d ef 12 01 00 	mov    0x112ef(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229e21:	0f b6 b4 24 1f 03 00 	movzbl 0x31f(%rsp),%esi
  229e28:	00 
  229e29:	e8 92 ee ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229e2e:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
  229e35:	00 
  229e36:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  229e3d:	00 
  229e3e:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  229e45:	00 
  229e46:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  229e4d:	00 
  229e4e:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  229e55:	00 
  229e56:	e8 95 7c fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229e5b:	88 84 24 96 00 00 00 	mov    %al,0x96(%rsp)
  229e62:	8a 84 24 96 00 00 00 	mov    0x96(%rsp),%al
  229e69:	24 01                	and    $0x1,%al
  229e6b:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  229e72:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  229e79:	01 
  229e7a:	75 1c                	jne    229e98 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x128>

    let heap_pages = paging::PageRange::new(
        mm::VirtualAddress::from_u64(HEAP_START_ADDRESS),
  229e7c:	48 bf 00 00 00 00 ff 	movabs $0x7fff00000000,%rdi
  229e83:	7f 00 00 
  229e86:	e8 85 c0 ff ff       	callq  225f10 <_ZN9r3_kernel2mm14VirtualAddress8from_u6417he88c32c02aaca8ceE>
  229e8b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  229e92:	00 
  229e93:	e9 9e 00 00 00       	jmpq   229f36 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x1c6>
    log::debug!("n_heap_pages={}.", n_4k_frames);
  229e98:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  229e9f:	00 
  229ea0:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  229ea7:	00 
  229ea8:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  229eaf:	00 
  229eb0:	48 89 bc 24 c0 02 00 	mov    %rdi,0x2c0(%rsp)
  229eb7:	00 
  229eb8:	48 8b 35 69 12 01 00 	mov    0x11269(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  229ebf:	e8 bc 4e fe ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  229ec4:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  229ec9:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  229ed0:	00 
  229ed1:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  229ed8:	00 
  229ed9:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  229ede:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  229ee5:	00 
  229ee6:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  229eed:	00 
  229eee:	48 8d 8c 24 f0 00 00 	lea    0xf0(%rsp),%rcx
  229ef5:	00 
  229ef6:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  229efd:	00 
  229efe:	48 8d 35 33 02 01 00 	lea    0x10233(%rip),%rsi        # 23a138 <memcmp+0x3b88>
  229f05:	ba 02 00 00 00       	mov    $0x2,%edx
  229f0a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  229f10:	e8 ab c3 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  229f15:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  229f1c:	00 
  229f1d:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  229f24:	00 
  229f25:	48 8d 15 2c 02 01 00 	lea    0x1022c(%rip),%rdx        # 23a158 <memcmp+0x3ba8>
  229f2c:	e8 bf 66 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  229f31:	e9 46 ff ff ff       	jmpq   229e7c <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x10c>
        (HEAP_SIZE / paging::PageSize::Page2MiB.size()) as usize,
  229f36:	48 8d 3d 3d 93 fd ff 	lea    -0x26cc3(%rip),%rdi        # 20327a <str.0+0x3a>
  229f3d:	e8 1e 20 fe ff       	callq  20bf60 <_ZN9r3_kernel2mm6paging8PageSize4size17had813da6ced09f90E>
  229f42:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  229f47:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  229f4c:	48 83 f8 00          	cmp    $0x0,%rax
  229f50:	0f 94 c0             	sete   %al
  229f53:	a8 01                	test   $0x1,%al
  229f55:	75 39                	jne    229f90 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x220>
  229f57:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
  229f5e:	00 
  229f5f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  229f64:	b8 00 00 a0 00       	mov    $0xa00000,%eax
  229f69:	31 d2                	xor    %edx,%edx
  229f6b:	48 f7 f1             	div    %rcx
  229f6e:	48 89 c2             	mov    %rax,%rdx
        paging::PageSize::Page2MiB,
  229f71:	c6 84 24 27 01 00 00 	movb   $0x1,0x127(%rsp)
  229f78:	01 
    let heap_pages = paging::PageRange::new(
  229f79:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  229f80:	00 
  229f81:	0f b6 8c 24 27 01 00 	movzbl 0x127(%rsp),%ecx
  229f88:	00 
  229f89:	e8 22 37 fe ff       	callq  20d6b0 <_ZN9r3_kernel2mm6paging9PageRange3new17h47b633cb9e347323E>
  229f8e:	eb 1a                	jmp    229faa <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x23a>
        (HEAP_SIZE / paging::PageSize::Page2MiB.size()) as usize,
  229f90:	48 8d 3d a9 92 fd ff 	lea    -0x26d57(%rip),%rdi        # 203240 <str.0>
  229f97:	48 8d 15 f2 01 01 00 	lea    0x101f2(%rip),%rdx        # 23a190 <memcmp+0x3be0>
  229f9e:	be 19 00 00 00       	mov    $0x19,%esi
  229fa3:	e8 b8 94 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  229fa8:	0f 0b                	ud2    
    );

    // map the virtual memory for heap:
    log::debug!(
  229faa:	48 c7 84 24 28 01 00 	movq   $0x4,0x128(%rsp)
  229fb1:	00 04 00 00 00 
  229fb6:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  229fbd:	00 
  229fbe:	48 8d 35 73 66 fd ff 	lea    -0x2998d(%rip),%rsi        # 200638 <str.0+0x118>
  229fc5:	e8 26 7b fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  229fca:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  229fce:	8a 44 24 6f          	mov    0x6f(%rsp),%al
  229fd2:	a8 01                	test   $0x1,%al
  229fd4:	75 0c                	jne    229fe2 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x272>
  229fd6:	eb 00                	jmp    229fd8 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x268>
  229fd8:	c6 84 24 37 01 00 00 	movb   $0x0,0x137(%rsp)
  229fdf:	00 
  229fe0:	eb 5a                	jmp    22a03c <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x2cc>
  229fe2:	c6 84 24 0f 03 00 00 	movb   $0x0,0x30f(%rsp)
  229fe9:	00 
  229fea:	48 8b 3d 1f 11 01 00 	mov    0x1111f(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  229ff1:	0f b6 b4 24 0f 03 00 	movzbl 0x30f(%rsp),%esi
  229ff8:	00 
  229ff9:	e8 c2 ec ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  229ffe:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  22a005:	00 
  22a006:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  22a00d:	00 
  22a00e:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  22a015:	00 
  22a016:	48 8d bc 24 28 01 00 	lea    0x128(%rsp),%rdi
  22a01d:	00 
  22a01e:	48 8d b4 24 38 01 00 	lea    0x138(%rsp),%rsi
  22a025:	00 
  22a026:	e8 c5 7a fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a02b:	88 44 24 6e          	mov    %al,0x6e(%rsp)
  22a02f:	8a 44 24 6e          	mov    0x6e(%rsp),%al
  22a033:	24 01                	and    $0x1,%al
  22a035:	88 84 24 37 01 00 00 	mov    %al,0x137(%rsp)
  22a03c:	f6 84 24 37 01 00 00 	testb  $0x1,0x137(%rsp)
  22a043:	01 
  22a044:	75 3f                	jne    22a085 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x315>
        "Mapping kernel virtual memory for heap at 0x{:x}",
        HEAP_START_ADDRESS
    );

    let alloc_result = paging::KernelVirtualMemoryManager::alloc_huge_page_region(
        heap_pages,
  22a046:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22a04d:	00 
  22a04e:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  22a055:	00 
  22a056:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22a05d:	00 
  22a05e:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22a065:	00 
  22a066:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  22a06d:	00 
  22a06e:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22a075:	00 
        paging::PageEntryFlags::kernel_hugepage_flags(),
  22a076:	e8 35 20 fe ff       	callq  20c0b0 <_ZN9r3_kernel2mm6paging14PageEntryFlags21kernel_hugepage_flags17he0b9fa3eb36123b3E>
  22a07b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22a080:	e9 95 00 00 00       	jmpq   22a11a <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x3aa>
    log::debug!(
  22a085:	48 8d 05 54 65 fd ff 	lea    -0x29aac(%rip),%rax        # 2005e0 <str.0+0xc0>
  22a08c:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22a093:	00 
  22a094:	48 8b bc 24 80 01 00 	mov    0x180(%rsp),%rdi
  22a09b:	00 
  22a09c:	48 89 bc 24 c8 02 00 	mov    %rdi,0x2c8(%rsp)
  22a0a3:	00 
  22a0a4:	48 8b 35 6d 10 01 00 	mov    0x1106d(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  22a0ab:	e8 90 4d fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22a0b0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22a0b5:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22a0ba:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22a0bf:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22a0c4:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  22a0cb:	00 
  22a0cc:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  22a0d3:	00 
  22a0d4:	48 8d 8c 24 70 01 00 	lea    0x170(%rsp),%rcx
  22a0db:	00 
  22a0dc:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  22a0e3:	00 
  22a0e4:	48 8d 35 bd 00 01 00 	lea    0x100bd(%rip),%rsi        # 23a1a8 <memcmp+0x3bf8>
  22a0eb:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22a0f1:	4c 89 c2             	mov    %r8,%rdx
  22a0f4:	e8 c7 c1 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a0f9:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
  22a100:	00 
  22a101:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
  22a108:	00 
  22a109:	48 8d 15 a8 00 01 00 	lea    0x100a8(%rip),%rdx        # 23a1b8 <memcmp+0x3c08>
  22a110:	e8 db 64 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a115:	e9 2c ff ff ff       	jmpq   22a046 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x2d6>
  22a11a:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
    let alloc_result = paging::KernelVirtualMemoryManager::alloc_huge_page_region(
  22a11f:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  22a126:	00 
  22a127:	48 8d b4 24 b0 01 00 	lea    0x1b0(%rsp),%rsi
  22a12e:	00 
  22a12f:	e8 4c 39 fe ff       	callq  20da80 <_ZN9r3_kernel2mm6paging26KernelVirtualMemoryManager22alloc_huge_page_region17h6ce7daa27ed08bc1E>
    );

    if alloc_result.is_err() {
  22a134:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
  22a13b:	00 
  22a13c:	e8 1f 0b fe ff       	callq  20ac60 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17hf7814dd879df2886E>
  22a141:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  22a145:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  22a149:	a8 01                	test   $0x1,%al
  22a14b:	75 2b                	jne    22a178 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x408>
  22a14d:	eb 00                	jmp    22a14f <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x3df>
            "Failed to allocate kernel heap, err={:?}",
            alloc_result.unwrap_err()
        );
    }

    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22a14f:	48 c7 84 24 48 02 00 	movq   $0x3,0x248(%rsp)
  22a156:	00 03 00 00 00 
  22a15b:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  22a162:	00 
  22a163:	48 8d 35 ce 64 fd ff 	lea    -0x29b32(%rip),%rsi        # 200638 <str.0+0x118>
  22a16a:	e8 81 79 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a16f:	88 44 24 4e          	mov    %al,0x4e(%rsp)
  22a173:	e9 1f 01 00 00       	jmpq   22a297 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x527>
            alloc_result.unwrap_err()
  22a178:	48 8b 84 24 a8 01 00 	mov    0x1a8(%rsp),%rax
  22a17f:	00 
  22a180:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  22a187:	00 
  22a188:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  22a18f:	00 
  22a190:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  22a197:	00 
  22a198:	48 8b 84 24 98 01 00 	mov    0x198(%rsp),%rax
  22a19f:	00 
  22a1a0:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  22a1a7:	00 
  22a1a8:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  22a1af:	00 
  22a1b0:	48 8b 8c 24 90 01 00 	mov    0x190(%rsp),%rcx
  22a1b7:	00 
  22a1b8:	48 89 8c 24 28 02 00 	mov    %rcx,0x228(%rsp)
  22a1bf:	00 
  22a1c0:	48 89 84 24 20 02 00 	mov    %rax,0x220(%rsp)
  22a1c7:	00 
  22a1c8:	48 8d 35 31 00 01 00 	lea    0x10031(%rip),%rsi        # 23a200 <memcmp+0x3c50>
  22a1cf:	48 8d bc 24 20 02 00 	lea    0x220(%rsp),%rdi
  22a1d6:	00 
  22a1d7:	e8 34 06 fe ff       	callq  20a810 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17h179e28ae27001b96E>
  22a1dc:	48 89 94 24 d8 02 00 	mov    %rdx,0x2d8(%rsp)
  22a1e3:	00 
  22a1e4:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
  22a1eb:	00 
  22a1ec:	48 8b 84 24 d0 02 00 	mov    0x2d0(%rsp),%rax
  22a1f3:	00 
  22a1f4:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  22a1fb:	00 
  22a1fc:	48 8b 84 24 d8 02 00 	mov    0x2d8(%rsp),%rax
  22a203:	00 
  22a204:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  22a20b:	00 
        panic!(
  22a20c:	48 8d 84 24 10 02 00 	lea    0x210(%rsp),%rax
  22a213:	00 
  22a214:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  22a21b:	00 
  22a21c:	48 8b bc 24 08 02 00 	mov    0x208(%rsp),%rdi
  22a223:	00 
  22a224:	48 89 bc 24 e0 02 00 	mov    %rdi,0x2e0(%rsp)
  22a22b:	00 
  22a22c:	48 8d 35 2d 3c fe ff 	lea    -0x1c3d3(%rip),%rsi        # 20de60 <_ZN71_$LT$r3_kernel..mm..paging..PagingError$u20$as$u20$core..fmt..Debug$GT$3fmt17h467fb4e134a5090dE>
  22a233:	e8 48 48 fe ff       	callq  20ea80 <_ZN4core3fmt10ArgumentV13new17h67af01ebbd874140E>
  22a238:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22a23d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22a242:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22a247:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22a24c:	48 89 8c 24 f8 01 00 	mov    %rcx,0x1f8(%rsp)
  22a253:	00 
  22a254:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  22a25b:	00 
  22a25c:	48 8d 8c 24 f8 01 00 	lea    0x1f8(%rsp),%rcx
  22a263:	00 
  22a264:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  22a26b:	00 
  22a26c:	48 8d 35 7d ff 00 00 	lea    0xff7d(%rip),%rsi        # 23a1f0 <memcmp+0x3c40>
  22a273:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22a279:	4c 89 c2             	mov    %r8,%rdx
  22a27c:	e8 3f c0 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a281:	48 8d 35 90 ff 00 00 	lea    0xff90(%rip),%rsi        # 23a218 <memcmp+0x3c68>
  22a288:	48 8d bc 24 c8 01 00 	lea    0x1c8(%rsp),%rdi
  22a28f:	00 
  22a290:	e8 9b 92 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22a295:	0f 0b                	ud2    
  22a297:	8a 44 24 4e          	mov    0x4e(%rsp),%al
    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22a29b:	a8 01                	test   $0x1,%al
  22a29d:	75 0c                	jne    22a2ab <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x53b>
  22a29f:	eb 00                	jmp    22a2a1 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x531>
  22a2a1:	c6 84 24 57 02 00 00 	movb   $0x0,0x257(%rsp)
  22a2a8:	00 
  22a2a9:	eb 5a                	jmp    22a305 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x595>
  22a2ab:	c6 84 24 ff 02 00 00 	movb   $0x0,0x2ff(%rsp)
  22a2b2:	00 
  22a2b3:	48 8b 3d 56 0e 01 00 	mov    0x10e56(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22a2ba:	0f b6 b4 24 ff 02 00 	movzbl 0x2ff(%rsp),%esi
  22a2c1:	00 
  22a2c2:	e8 f9 e9 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22a2c7:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  22a2ce:	00 
  22a2cf:	48 8b 84 24 00 03 00 	mov    0x300(%rsp),%rax
  22a2d6:	00 
  22a2d7:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  22a2de:	00 
  22a2df:	48 8d bc 24 48 02 00 	lea    0x248(%rsp),%rdi
  22a2e6:	00 
  22a2e7:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  22a2ee:	00 
  22a2ef:	e8 fc 77 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a2f4:	88 44 24 37          	mov    %al,0x37(%rsp)
  22a2f8:	8a 44 24 37          	mov    0x37(%rsp),%al
  22a2fc:	24 01                	and    $0x1,%al
  22a2fe:	88 84 24 57 02 00 00 	mov    %al,0x257(%rsp)
  22a305:	f6 84 24 57 02 00 00 	testb  $0x1,0x257(%rsp)
  22a30c:	01 
  22a30d:	75 08                	jne    22a317 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x5a7>
}
  22a30f:	48 81 c4 28 03 00 00 	add    $0x328,%rsp
  22a316:	c3                   	retq   
    log::info!("Allocated {}bytes at 0x{:x}", HEAP_SIZE, HEAP_START_ADDRESS);
  22a317:	48 8d 05 b2 62 fd ff 	lea    -0x29d4e(%rip),%rax        # 2005d0 <str.0+0xb0>
  22a31e:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  22a325:	00 
  22a326:	48 8d 05 b3 62 fd ff 	lea    -0x29d4d(%rip),%rax        # 2005e0 <str.0+0xc0>
  22a32d:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  22a334:	00 
  22a335:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  22a33c:	00 
  22a33d:	48 89 bc 24 e8 02 00 	mov    %rdi,0x2e8(%rsp)
  22a344:	00 
  22a345:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  22a34c:	00 
  22a34d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a352:	48 89 84 24 f0 02 00 	mov    %rax,0x2f0(%rsp)
  22a359:	00 
  22a35a:	48 8b 35 ff 0d 01 00 	mov    0x10dff(%rip),%rsi        # 23b160 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  22a361:	e8 da 4a fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22a366:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22a36b:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22a370:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22a375:	48 8b 35 9c 0d 01 00 	mov    0x10d9c(%rip),%rsi        # 23b118 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  22a37c:	e8 bf 4a fe ff       	callq  20ee40 <_ZN4core3fmt10ArgumentV13new17hc4c43b797f39fa02E>
  22a381:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a386:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22a38b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22a390:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22a395:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22a39a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22a39f:	48 89 b4 24 90 02 00 	mov    %rsi,0x290(%rsp)
  22a3a6:	00 
  22a3a7:	48 89 94 24 98 02 00 	mov    %rdx,0x298(%rsp)
  22a3ae:	00 
  22a3af:	48 89 8c 24 a0 02 00 	mov    %rcx,0x2a0(%rsp)
  22a3b6:	00 
  22a3b7:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  22a3be:	00 
  22a3bf:	48 8d 8c 24 90 02 00 	lea    0x290(%rsp),%rcx
  22a3c6:	00 
  22a3c7:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  22a3ce:	00 
  22a3cf:	48 8d 35 5a fe 00 00 	lea    0xfe5a(%rip),%rsi        # 23a230 <memcmp+0x3c80>
  22a3d6:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  22a3dc:	4c 89 c2             	mov    %r8,%rdx
  22a3df:	e8 dc be fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a3e4:	48 8b b4 24 48 02 00 	mov    0x248(%rsp),%rsi
  22a3eb:	00 
  22a3ec:	48 8d bc 24 60 02 00 	lea    0x260(%rsp),%rdi
  22a3f3:	00 
  22a3f4:	48 8d 15 55 fe 00 00 	lea    0xfe55(%rip),%rdx        # 23a250 <memcmp+0x3ca0>
  22a3fb:	e8 f0 61 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a400:	e9 0a ff ff ff       	jmpq   22a30f <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E+0x59f>
  22a405:	cc                   	int3   
  22a406:	cc                   	int3   
  22a407:	cc                   	int3   
  22a408:	cc                   	int3   
  22a409:	cc                   	int3   
  22a40a:	cc                   	int3   
  22a40b:	cc                   	int3   
  22a40c:	cc                   	int3   
  22a40d:	cc                   	int3   
  22a40e:	cc                   	int3   
  22a40f:	cc                   	int3   

000000000022a410 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE>:

pub fn init_heap() {
  22a410:	48 83 ec 78          	sub    $0x78,%rsp
    map_virtual_memory();
  22a414:	e8 57 f9 ff ff       	callq  229d70 <_ZN9r3_kernel2mm4heap18map_virtual_memory17hacd63574363e2a35E>

    unsafe {
        KERNEL_HEAP_ALLOCATOR
  22a419:	48 8d 3d 10 8a 01 00 	lea    0x18a10(%rip),%rdi        # 242e30 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22a420:	e8 2b 2d 00 00       	callq  22d150 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5b565ba2603a9672E>
  22a425:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a42a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a42f:	e8 8c 4d 00 00       	callq  22f1c0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22a434:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a439:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22a43e:	e8 4d 4d 00 00       	callq  22f190 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22a443:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a448:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22a44d:	48 be 00 00 00 00 ff 	movabs $0x7fff00000000,%rsi
  22a454:	7f 00 00 
  22a457:	ba 00 00 a0 00       	mov    $0xa00000,%edx
  22a45c:	e8 0f 2b 00 00       	callq  22cf70 <_ZN21linked_list_allocator4Heap4init17h76f7245f25ee4edfE>
            .lock()
            .init(HEAP_START_ADDRESS as usize, HEAP_SIZE as usize);
  22a461:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22a466:	e8 e5 30 00 00       	callq  22d550 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
    }

    test_heap_alloc();
  22a46b:	e8 c0 00 00 00       	callq  22a530 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE>
    log::info!("Setting up Kernel heap as Rust Global allocator is successful.");
  22a470:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  22a477:	00 00 
  22a479:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22a47e:	48 8d 35 b3 61 fd ff 	lea    -0x29e4d(%rip),%rsi        # 200638 <str.0+0x118>
  22a485:	e8 66 76 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a48a:	88 44 24 07          	mov    %al,0x7(%rsp)
  22a48e:	8a 44 24 07          	mov    0x7(%rsp),%al
  22a492:	a8 01                	test   $0x1,%al
  22a494:	75 09                	jne    22a49f <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0x8f>
  22a496:	eb 00                	jmp    22a498 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0x88>
  22a498:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  22a49d:	eb 42                	jmp    22a4e1 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xd1>
  22a49f:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22a4a4:	48 8b 3d 65 0c 01 00 	mov    0x10c65(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22a4ab:	0f b6 74 24 6f       	movzbl 0x6f(%rsp),%esi
  22a4b0:	e8 0b e8 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22a4b5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22a4ba:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22a4bf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22a4c4:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22a4c9:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  22a4ce:	e8 1d 76 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a4d3:	88 44 24 06          	mov    %al,0x6(%rsp)
  22a4d7:	8a 44 24 06          	mov    0x6(%rsp),%al
  22a4db:	24 01                	and    $0x1,%al
  22a4dd:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22a4e1:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  22a4e6:	75 05                	jne    22a4ed <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xdd>
}
  22a4e8:	48 83 c4 78          	add    $0x78,%rsp
  22a4ec:	c3                   	retq   
    log::info!("Setting up Kernel heap as Rust Global allocator is successful.");
  22a4ed:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22a4f2:	48 8d 35 8f fd 00 00 	lea    0xfd8f(%rip),%rsi        # 23a288 <memcmp+0x3cd8>
  22a4f9:	ba 01 00 00 00       	mov    $0x1,%edx
  22a4fe:	48 8d 0d 1b 8e fd ff 	lea    -0x271e5(%rip),%rcx        # 203320 <str.0+0xe0>
  22a505:	31 c0                	xor    %eax,%eax
  22a507:	41 89 c0             	mov    %eax,%r8d
  22a50a:	e8 b1 bd fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a50f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22a514:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22a519:	48 8d 15 78 fd 00 00 	lea    0xfd78(%rip),%rdx        # 23a298 <memcmp+0x3ce8>
  22a520:	e8 cb 60 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a525:	eb c1                	jmp    22a4e8 <_ZN9r3_kernel2mm4heap9init_heap17hf745ae6764fb43fbE+0xd8>
  22a527:	cc                   	int3   
  22a528:	cc                   	int3   
  22a529:	cc                   	int3   
  22a52a:	cc                   	int3   
  22a52b:	cc                   	int3   
  22a52c:	cc                   	int3   
  22a52d:	cc                   	int3   
  22a52e:	cc                   	int3   
  22a52f:	cc                   	int3   

000000000022a530 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE>:

fn test_heap_alloc() {
  22a530:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
    log::debug!("Testing heap by allocating a vector: ");
  22a537:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  22a53e:	00 00 
  22a540:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22a545:	48 8d 35 ec 60 fd ff 	lea    -0x29f14(%rip),%rsi        # 200638 <str.0+0x118>
  22a54c:	e8 9f 75 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a551:	88 44 24 47          	mov    %al,0x47(%rsp)
  22a555:	8a 44 24 47          	mov    0x47(%rsp),%al
  22a559:	a8 01                	test   $0x1,%al
  22a55b:	75 09                	jne    22a566 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x36>
  22a55d:	eb 00                	jmp    22a55f <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x2f>
  22a55f:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22a564:	eb 4e                	jmp    22a5b4 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x84>
  22a566:	c6 84 24 ff 01 00 00 	movb   $0x0,0x1ff(%rsp)
  22a56d:	00 
  22a56e:	48 8b 3d 9b 0b 01 00 	mov    0x10b9b(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22a575:	0f b6 b4 24 ff 01 00 	movzbl 0x1ff(%rsp),%esi
  22a57c:	00 
  22a57d:	e8 3e e7 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22a582:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  22a589:	00 
  22a58a:	48 8b 84 24 00 02 00 	mov    0x200(%rsp),%rax
  22a591:	00 
  22a592:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22a597:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22a59c:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  22a5a1:	e8 4a 75 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a5a6:	88 44 24 46          	mov    %al,0x46(%rsp)
  22a5aa:	8a 44 24 46          	mov    0x46(%rsp),%al
  22a5ae:	24 01                	and    $0x1,%al
  22a5b0:	88 44 24 57          	mov    %al,0x57(%rsp)
  22a5b4:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22a5b9:	75 0f                	jne    22a5ca <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x9a>
    let mut test_vec: Vec<u64> = Vec::new();
  22a5bb:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a5c2:	00 
  22a5c3:	e8 08 69 fe ff       	callq  210ed0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h683916163281641eE>
  22a5c8:	eb 3a                	jmp    22a604 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0xd4>
    log::debug!("Testing heap by allocating a vector: ");
  22a5ca:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22a5cf:	48 8d 35 fa fc 00 00 	lea    0xfcfa(%rip),%rsi        # 23a2d0 <memcmp+0x3d20>
  22a5d6:	ba 01 00 00 00       	mov    $0x1,%edx
  22a5db:	48 8d 0d 3e 8d fd ff 	lea    -0x272c2(%rip),%rcx        # 203320 <str.0+0xe0>
  22a5e2:	31 c0                	xor    %eax,%eax
  22a5e4:	41 89 c0             	mov    %eax,%r8d
  22a5e7:	e8 d4 bc fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a5ec:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  22a5f1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22a5f6:	48 8d 15 e3 fc 00 00 	lea    0xfce3(%rip),%rdx        # 23a2e0 <memcmp+0x3d30>
  22a5fd:	e8 ee 5f 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a602:	eb b7                	jmp    22a5bb <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x8b>

    // insert some elements:
    test_vec.push(10);
  22a604:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a60b:	00 
  22a60c:	be 0a 00 00 00       	mov    $0xa,%esi
  22a611:	e8 fa 69 fe ff       	callq  211010 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>
    test_vec.push(20);
  22a616:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a61d:	00 
  22a61e:	be 14 00 00 00       	mov    $0x14,%esi
  22a623:	e8 e8 69 fe ff       	callq  211010 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>
    test_vec.push(30);
  22a628:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a62f:	00 
  22a630:	be 1e 00 00 00       	mov    $0x1e,%esi
  22a635:	e8 d6 69 fe ff       	callq  211010 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3634078a782c2eb5E>

    assert_eq!(test_vec.len(), 3);
  22a63a:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a641:	00 
  22a642:	e8 b9 69 fe ff       	callq  211000 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h86fcf6085494c979E>
  22a647:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22a64e:	00 
  22a64f:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  22a656:	00 
  22a657:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22a65e:	00 
  22a65f:	48 8d 05 aa 5f fd ff 	lea    -0x2a056(%rip),%rax        # 200610 <str.0+0xf0>
  22a666:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22a66d:	00 
  22a66e:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22a675:	00 
  22a676:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22a67b:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22a682:	00 
  22a683:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  22a68a:	00 
  22a68b:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22a690:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  22a697:	00 
  22a698:	48 83 38 03          	cmpq   $0x3,(%rax)
  22a69c:	0f 94 c0             	sete   %al
  22a69f:	34 ff                	xor    $0xff,%al
  22a6a1:	a8 01                	test   $0x1,%al
  22a6a3:	75 26                	jne    22a6cb <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x19b>

    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22a6a5:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  22a6ac:	00 04 00 00 00 
  22a6b1:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22a6b8:	00 
  22a6b9:	48 8d 35 78 5f fd ff 	lea    -0x2a088(%rip),%rsi        # 200638 <str.0+0x118>
  22a6c0:	e8 2b 74 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a6c5:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22a6c9:	eb 36                	jmp    22a701 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1d1>
  22a6cb:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22a6d0:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    assert_eq!(test_vec.len(), 3);
  22a6d5:	c6 84 24 c7 00 00 00 	movb   $0x0,0xc7(%rsp)
  22a6dc:	00 
  22a6dd:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  22a6e4:	00 00 00 00 00 
  22a6e9:	4c 8d 05 28 fc 00 00 	lea    0xfc28(%rip),%r8        # 23a318 <memcmp+0x3d68>
  22a6f0:	31 ff                	xor    %edi,%edi
  22a6f2:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
  22a6f9:	00 
  22a6fa:	e8 41 4b 00 00       	callq  22f240 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  22a6ff:	0f 0b                	ud2    
  22a701:	8a 44 24 2f          	mov    0x2f(%rsp),%al
    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22a705:	a8 01                	test   $0x1,%al
  22a707:	75 0c                	jne    22a715 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1e5>
  22a709:	eb 00                	jmp    22a70b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x1db>
  22a70b:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  22a712:	00 
  22a713:	eb 5a                	jmp    22a76f <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x23f>
  22a715:	c6 84 24 ef 01 00 00 	movb   $0x0,0x1ef(%rsp)
  22a71c:	00 
  22a71d:	48 8b 3d ec 09 01 00 	mov    0x109ec(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22a724:	0f b6 b4 24 ef 01 00 	movzbl 0x1ef(%rsp),%esi
  22a72b:	00 
  22a72c:	e8 8f e5 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22a731:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
  22a738:	00 
  22a739:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
  22a740:	00 
  22a741:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  22a748:	00 
  22a749:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22a750:	00 
  22a751:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  22a758:	00 
  22a759:	e8 92 73 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a75e:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22a762:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  22a766:	24 01                	and    $0x1,%al
  22a768:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  22a76f:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  22a776:	01 
  22a777:	75 42                	jne    22a7bb <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x28b>
    core::mem::drop(test_vec);
  22a779:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  22a780:	00 
  22a781:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  22a788:	00 
  22a789:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22a790:	00 
  22a791:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  22a798:	00 
  22a799:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22a7a0:	00 
  22a7a1:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  22a7a8:	00 
  22a7a9:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  22a7b0:	00 
  22a7b1:	e8 fa 4e fe ff       	callq  20f6b0 <_ZN4core3mem4drop17hf04176b36ca2e197E>
  22a7b6:	e9 c0 00 00 00       	jmpq   22a87b <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x34b>
    log::debug!("Test vector allocated at: {:p}", &test_vec[0]);
  22a7bb:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22a7c2:	00 
  22a7c3:	31 c0                	xor    %eax,%eax
  22a7c5:	89 c6                	mov    %eax,%esi
  22a7c7:	48 8d 15 72 fb 00 00 	lea    0xfb72(%rip),%rdx        # 23a340 <memcmp+0x3d90>
  22a7ce:	e8 1d 6d fe ff       	callq  2114f0 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb9a8b3d4d7d4adebE>
  22a7d3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22a7d8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22a7dd:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  22a7e4:	00 
  22a7e5:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
  22a7ec:	00 
  22a7ed:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  22a7f4:	00 
  22a7f5:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  22a7fc:	00 
  22a7fd:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  22a804:	00 
  22a805:	48 8d 35 a4 3e fe ff 	lea    -0x1c15c(%rip),%rsi        # 20e6b0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Pointer$GT$3fmt17h9b12cfc3589b34e2E>
  22a80c:	e8 cf 45 fe ff       	callq  20ede0 <_ZN4core3fmt10ArgumentV13new17hb2277ce86c8ef49fE>
  22a811:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a816:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22a81b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22a820:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22a825:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  22a82c:	00 
  22a82d:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  22a834:	00 
  22a835:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  22a83c:	00 
  22a83d:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  22a844:	00 
  22a845:	48 8d 35 e4 fa 00 00 	lea    0xfae4(%rip),%rsi        # 23a330 <memcmp+0x3d80>
  22a84c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22a852:	4c 89 c2             	mov    %r8,%rdx
  22a855:	e8 66 ba fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a85a:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  22a861:	00 
  22a862:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  22a869:	00 
  22a86a:	48 8d 15 e7 fa 00 00 	lea    0xfae7(%rip),%rdx        # 23a358 <memcmp+0x3da8>
  22a871:	e8 7a 5d 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a876:	e9 fe fe ff ff       	jmpq   22a779 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x249>

    log::info!("Passed heap allocator test, successfully allocated and freed heap memory.");
  22a87b:	48 c7 84 24 78 01 00 	movq   $0x3,0x178(%rsp)
  22a882:	00 03 00 00 00 
  22a887:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  22a88e:	00 
  22a88f:	48 8d 35 a2 5d fd ff 	lea    -0x2a25e(%rip),%rsi        # 200638 <str.0+0x118>
  22a896:	e8 55 72 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a89b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22a89f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22a8a3:	a8 01                	test   $0x1,%al
  22a8a5:	75 0c                	jne    22a8b3 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x383>
  22a8a7:	eb 00                	jmp    22a8a9 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x379>
  22a8a9:	c6 84 24 87 01 00 00 	movb   $0x0,0x187(%rsp)
  22a8b0:	00 
  22a8b1:	eb 5a                	jmp    22a90d <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3dd>
  22a8b3:	c6 84 24 df 01 00 00 	movb   $0x0,0x1df(%rsp)
  22a8ba:	00 
  22a8bb:	48 8b 3d 4e 08 01 00 	mov    0x1084e(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22a8c2:	0f b6 b4 24 df 01 00 	movzbl 0x1df(%rsp),%esi
  22a8c9:	00 
  22a8ca:	e8 f1 e3 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22a8cf:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  22a8d6:	00 
  22a8d7:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  22a8de:	00 
  22a8df:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  22a8e6:	00 
  22a8e7:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  22a8ee:	00 
  22a8ef:	48 8d b4 24 88 01 00 	lea    0x188(%rsp),%rsi
  22a8f6:	00 
  22a8f7:	e8 f4 71 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22a8fc:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22a900:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22a904:	24 01                	and    $0x1,%al
  22a906:	88 84 24 87 01 00 00 	mov    %al,0x187(%rsp)
  22a90d:	f6 84 24 87 01 00 00 	testb  $0x1,0x187(%rsp)
  22a914:	01 
  22a915:	75 08                	jne    22a91f <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3ef>
}
  22a917:	48 81 c4 08 02 00 00 	add    $0x208,%rsp
  22a91e:	c3                   	retq   
    log::info!("Passed heap allocator test, successfully allocated and freed heap memory.");
  22a91f:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22a926:	00 
  22a927:	48 8d 35 62 fa 00 00 	lea    0xfa62(%rip),%rsi        # 23a390 <memcmp+0x3de0>
  22a92e:	ba 01 00 00 00       	mov    $0x1,%edx
  22a933:	48 8d 0d e6 89 fd ff 	lea    -0x2761a(%rip),%rcx        # 203320 <str.0+0xe0>
  22a93a:	31 c0                	xor    %eax,%eax
  22a93c:	41 89 c0             	mov    %eax,%r8d
  22a93f:	e8 7c b9 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22a944:	48 8b b4 24 78 01 00 	mov    0x178(%rsp),%rsi
  22a94b:	00 
  22a94c:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  22a953:	00 
  22a954:	48 8d 15 45 fa 00 00 	lea    0xfa45(%rip),%rdx        # 23a3a0 <memcmp+0x3df0>
  22a95b:	e8 90 5c 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22a960:	eb b5                	jmp    22a917 <_ZN9r3_kernel2mm4heap15test_heap_alloc17h5a85845a5916bcaaE+0x3e7>
  22a962:	cc                   	int3   
  22a963:	cc                   	int3   
  22a964:	cc                   	int3   
  22a965:	cc                   	int3   
  22a966:	cc                   	int3   
  22a967:	cc                   	int3   
  22a968:	cc                   	int3   
  22a969:	cc                   	int3   
  22a96a:	cc                   	int3   
  22a96b:	cc                   	int3   
  22a96c:	cc                   	int3   
  22a96d:	cc                   	int3   
  22a96e:	cc                   	int3   
  22a96f:	cc                   	int3   

000000000022a970 <__rg_alloc>:
static KERNEL_HEAP_ALLOCATOR: LockedHeap = LockedHeap::empty();
  22a970:	48 83 ec 28          	sub    $0x28,%rsp
  22a974:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22a979:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22a97e:	e8 7d fa fe ff       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22a983:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22a988:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22a98d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22a992:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22a997:	48 8d 3d 92 84 01 00 	lea    0x18492(%rip),%rdi        # 242e30 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22a99e:	e8 bd 27 00 00       	callq  22d160 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>
  22a9a3:	48 89 04 24          	mov    %rax,(%rsp)
  22a9a7:	48 8b 04 24          	mov    (%rsp),%rax
  22a9ab:	48 83 c4 28          	add    $0x28,%rsp
  22a9af:	c3                   	retq   

000000000022a9b0 <__rg_dealloc>:
  22a9b0:	48 83 ec 48          	sub    $0x48,%rsp
  22a9b4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22a9b9:	48 89 f0             	mov    %rsi,%rax
  22a9bc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22a9c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22a9c6:	48 89 f8             	mov    %rdi,%rax
  22a9c9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22a9ce:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22a9d3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22a9d8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22a9dd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22a9e2:	e8 19 fa fe ff       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22a9e7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22a9ec:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22a9f1:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22a9f6:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22a9fb:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22aa00:	48 8d 3d 29 84 01 00 	lea    0x18429(%rip),%rdi        # 242e30 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22aa07:	e8 e4 27 00 00       	callq  22d1f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>
  22aa0c:	48 83 c4 48          	add    $0x48,%rsp
  22aa10:	c3                   	retq   
  22aa11:	cc                   	int3   
  22aa12:	cc                   	int3   
  22aa13:	cc                   	int3   
  22aa14:	cc                   	int3   
  22aa15:	cc                   	int3   
  22aa16:	cc                   	int3   
  22aa17:	cc                   	int3   
  22aa18:	cc                   	int3   
  22aa19:	cc                   	int3   
  22aa1a:	cc                   	int3   
  22aa1b:	cc                   	int3   
  22aa1c:	cc                   	int3   
  22aa1d:	cc                   	int3   
  22aa1e:	cc                   	int3   
  22aa1f:	cc                   	int3   

000000000022aa20 <__rg_realloc>:
  22aa20:	48 83 ec 58          	sub    $0x58,%rsp
  22aa24:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22aa29:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22aa2e:	48 89 f0             	mov    %rsi,%rax
  22aa31:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22aa36:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22aa3b:	48 89 f8             	mov    %rdi,%rax
  22aa3e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22aa43:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22aa48:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22aa4d:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22aa52:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  22aa57:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22aa5c:	e8 9f f9 fe ff       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22aa61:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22aa66:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22aa6b:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  22aa70:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22aa75:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22aa7a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22aa7f:	48 8d 3d aa 83 01 00 	lea    0x183aa(%rip),%rdi        # 242e30 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22aa86:	e8 e5 d3 fd ff       	callq  207e70 <_ZN4core5alloc6global11GlobalAlloc7realloc17h2f0d50e7819a9f61E>
  22aa8b:	48 89 04 24          	mov    %rax,(%rsp)
  22aa8f:	48 8b 04 24          	mov    (%rsp),%rax
  22aa93:	48 83 c4 58          	add    $0x58,%rsp
  22aa97:	c3                   	retq   
  22aa98:	cc                   	int3   
  22aa99:	cc                   	int3   
  22aa9a:	cc                   	int3   
  22aa9b:	cc                   	int3   
  22aa9c:	cc                   	int3   
  22aa9d:	cc                   	int3   
  22aa9e:	cc                   	int3   
  22aa9f:	cc                   	int3   

000000000022aaa0 <__rg_alloc_zeroed>:
  22aaa0:	48 83 ec 28          	sub    $0x28,%rsp
  22aaa4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22aaa9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22aaae:	e8 4d f9 fe ff       	callq  21a400 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3fcf5f62e634fa6fE>
  22aab3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22aab8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22aabd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22aac2:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22aac7:	48 8d 3d 62 83 01 00 	lea    0x18362(%rip),%rdi        # 242e30 <_ZN9r3_kernel2mm4heap21KERNEL_HEAP_ALLOCATOR17h7442c7b41ce5cb1cE>
  22aace:	e8 1d d3 fd ff       	callq  207df0 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h2039308a8c6a1e92E>
  22aad3:	48 89 04 24          	mov    %rax,(%rsp)
  22aad7:	48 8b 04 24          	mov    (%rsp),%rax
  22aadb:	48 83 c4 28          	add    $0x28,%rsp
  22aadf:	c3                   	retq   

000000000022aae0 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>:
    pub fn can_handle(&self, interrupt_no: u8) -> bool {
  22aae0:	48 83 ec 28          	sub    $0x28,%rsp
  22aae4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22aae9:	40 88 f0             	mov    %sil,%al
  22aaec:	88 44 24 16          	mov    %al,0x16(%rsp)
  22aaf0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22aaf5:	88 44 24 27          	mov    %al,0x27(%rsp)
        self.offset <= interrupt_no && interrupt_no <= self.offset + MAX_INTERRUPTS_PER_CHIP
  22aaf9:	38 47 20             	cmp    %al,0x20(%rdi)
  22aafc:	76 07                	jbe    22ab05 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x25>
  22aafe:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
  22ab03:	eb 44                	jmp    22ab49 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x69>
  22ab05:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ab0a:	8a 40 20             	mov    0x20(%rax),%al
  22ab0d:	04 08                	add    $0x8,%al
  22ab0f:	88 44 24 07          	mov    %al,0x7(%rsp)
  22ab13:	0f 92 c0             	setb   %al
  22ab16:	a8 01                	test   $0x1,%al
  22ab18:	75 15                	jne    22ab2f <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x4f>
  22ab1a:	8a 44 24 16          	mov    0x16(%rsp),%al
  22ab1e:	8a 4c 24 07          	mov    0x7(%rsp),%cl
  22ab22:	38 c8                	cmp    %cl,%al
  22ab24:	0f 96 c0             	setbe  %al
  22ab27:	24 01                	and    $0x1,%al
  22ab29:	88 44 24 17          	mov    %al,0x17(%rsp)
  22ab2d:	eb 1a                	jmp    22ab49 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E+0x69>
  22ab2f:	48 8d 3d 8a 88 fd ff 	lea    -0x27776(%rip),%rdi        # 2033c0 <str.0>
  22ab36:	48 8d 15 9b f8 00 00 	lea    0xf89b(%rip),%rdx        # 23a3d8 <memcmp+0x3e28>
  22ab3d:	be 1c 00 00 00       	mov    $0x1c,%esi
  22ab42:	e8 19 89 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ab47:	0f 0b                	ud2    
    }
  22ab49:	8a 44 24 17          	mov    0x17(%rsp),%al
  22ab4d:	24 01                	and    $0x1,%al
  22ab4f:	0f b6 c0             	movzbl %al,%eax
  22ab52:	48 83 c4 28          	add    $0x28,%rsp
  22ab56:	c3                   	retq   
  22ab57:	cc                   	int3   
  22ab58:	cc                   	int3   
  22ab59:	cc                   	int3   
  22ab5a:	cc                   	int3   
  22ab5b:	cc                   	int3   
  22ab5c:	cc                   	int3   
  22ab5d:	cc                   	int3   
  22ab5e:	cc                   	int3   
  22ab5f:	cc                   	int3   

000000000022ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>:
    pub fn eoi(&self) {
  22ab60:	50                   	push   %rax
  22ab61:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.cmd_port.write_u8(CMD_INTERRUPT_ACK);
  22ab65:	be 20 00 00 00       	mov    $0x20,%esi
  22ab6a:	e8 41 cc fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22ab6f:	58                   	pop    %rax
  22ab70:	c3                   	retq   
  22ab71:	cc                   	int3   
  22ab72:	cc                   	int3   
  22ab73:	cc                   	int3   
  22ab74:	cc                   	int3   
  22ab75:	cc                   	int3   
  22ab76:	cc                   	int3   
  22ab77:	cc                   	int3   
  22ab78:	cc                   	int3   
  22ab79:	cc                   	int3   
  22ab7a:	cc                   	int3   
  22ab7b:	cc                   	int3   
  22ab7c:	cc                   	int3   
  22ab7d:	cc                   	int3   
  22ab7e:	cc                   	int3   
  22ab7f:	cc                   	int3   

000000000022ab80 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>:
    pub fn init(&self) {
  22ab80:	50                   	push   %rax
  22ab81:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.cmd_port.write_u8(CMD_PIC_INIT);
  22ab85:	be 11 00 00 00       	mov    $0x11,%esi
  22ab8a:	e8 21 cc fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22ab8f:	58                   	pop    %rax
  22ab90:	c3                   	retq   
  22ab91:	cc                   	int3   
  22ab92:	cc                   	int3   
  22ab93:	cc                   	int3   
  22ab94:	cc                   	int3   
  22ab95:	cc                   	int3   
  22ab96:	cc                   	int3   
  22ab97:	cc                   	int3   
  22ab98:	cc                   	int3   
  22ab99:	cc                   	int3   
  22ab9a:	cc                   	int3   
  22ab9b:	cc                   	int3   
  22ab9c:	cc                   	int3   
  22ab9d:	cc                   	int3   
  22ab9e:	cc                   	int3   
  22ab9f:	cc                   	int3   

000000000022aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>:
    pub fn write_data(&self, data: u8) {
  22aba0:	48 83 ec 18          	sub    $0x18,%rsp
  22aba4:	40 88 f0             	mov    %sil,%al
  22aba7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22abac:	88 44 24 17          	mov    %al,0x17(%rsp)
        self.data_port.write_u8(data);
  22abb0:	48 83 c7 10          	add    $0x10,%rdi
  22abb4:	0f b6 f0             	movzbl %al,%esi
  22abb7:	e8 f4 cb fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
    }
  22abbc:	48 83 c4 18          	add    $0x18,%rsp
  22abc0:	c3                   	retq   
  22abc1:	cc                   	int3   
  22abc2:	cc                   	int3   
  22abc3:	cc                   	int3   
  22abc4:	cc                   	int3   
  22abc5:	cc                   	int3   
  22abc6:	cc                   	int3   
  22abc7:	cc                   	int3   
  22abc8:	cc                   	int3   
  22abc9:	cc                   	int3   
  22abca:	cc                   	int3   
  22abcb:	cc                   	int3   
  22abcc:	cc                   	int3   
  22abcd:	cc                   	int3   
  22abce:	cc                   	int3   
  22abcf:	cc                   	int3   

000000000022abd0 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>:
    pub fn new(cmd_port_no: usize, data_port_no: usize, offset: u8) -> Self {
  22abd0:	48 83 ec 68          	sub    $0x68,%rsp
  22abd4:	89 c8                	mov    %ecx,%eax
  22abd6:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22abdb:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22abe0:	48 89 f9             	mov    %rdi,%rcx
  22abe3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22abe8:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  22abed:	88 44 24 37          	mov    %al,0x37(%rsp)
  22abf1:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22abf6:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  22abfb:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22ac00:	88 44 24 67          	mov    %al,0x67(%rsp)
            cmd_port: Port::new(cmd_port_no, false),
  22ac04:	31 f6                	xor    %esi,%esi
  22ac06:	e8 55 cb fe ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22ac0b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22ac10:	88 54 24 4f          	mov    %dl,0x4f(%rsp)
  22ac14:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            data_port: Port::new(data_port_no, false),
  22ac19:	31 f6                	xor    %esi,%esi
  22ac1b:	e8 40 cb fe ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22ac20:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ac25:	88 54 24 17          	mov    %dl,0x17(%rsp)
  22ac29:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22ac2e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22ac33:	8a 54 24 37          	mov    0x37(%rsp),%dl
  22ac37:	40 8a 74 24 17       	mov    0x17(%rsp),%sil
  22ac3c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22ac41:	44 8a 44 24 4f       	mov    0x4f(%rsp),%r8b
  22ac46:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
        PIC {
  22ac4b:	4c 89 09             	mov    %r9,(%rcx)
  22ac4e:	41 80 e0 01          	and    $0x1,%r8b
  22ac52:	44 88 41 08          	mov    %r8b,0x8(%rcx)
  22ac56:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  22ac5a:	40 80 e6 01          	and    $0x1,%sil
  22ac5e:	40 88 71 18          	mov    %sil,0x18(%rcx)
  22ac62:	88 51 20             	mov    %dl,0x20(%rcx)
    }
  22ac65:	48 83 c4 68          	add    $0x68,%rsp
  22ac69:	c3                   	retq   
  22ac6a:	cc                   	int3   
  22ac6b:	cc                   	int3   
  22ac6c:	cc                   	int3   
  22ac6d:	cc                   	int3   
  22ac6e:	cc                   	int3   
  22ac6f:	cc                   	int3   

000000000022ac70 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>:
    pub fn mask_requests(&self, master_mask: u8, slave_mask: u8) {
  22ac70:	48 83 ec 38          	sub    $0x38,%rsp
  22ac74:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ac79:	88 d0                	mov    %dl,%al
  22ac7b:	40 88 f1             	mov    %sil,%cl
  22ac7e:	88 4c 24 17          	mov    %cl,0x17(%rsp)
  22ac82:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ac87:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  22ac8b:	88 44 24 27          	mov    %al,0x27(%rsp)
        let slave: &PIC = &self.pics[1];
  22ac8f:	48 83 c7 28          	add    $0x28,%rdi
  22ac93:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        slave.data_port.write_u8(slave_mask);
  22ac98:	48 83 c7 10          	add    $0x10,%rdi
  22ac9c:	0f b6 f0             	movzbl %al,%esi
  22ac9f:	e8 0c cb fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        wait(1);
  22aca4:	bf 01 00 00 00       	mov    $0x1,%edi
  22aca9:	e8 a2 cb fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22acae:	8a 44 24 17          	mov    0x17(%rsp),%al
  22acb2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let master: &PIC = &self.pics[0];
  22acb7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        master.data_port.write_u8(master_mask);
  22acbc:	48 83 c7 10          	add    $0x10,%rdi
  22acc0:	0f b6 f0             	movzbl %al,%esi
  22acc3:	e8 e8 ca fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
        wait(1);
  22acc8:	bf 01 00 00 00       	mov    $0x1,%edi
  22accd:	e8 7e cb fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
    }
  22acd2:	48 83 c4 38          	add    $0x38,%rsp
  22acd6:	c3                   	retq   
  22acd7:	cc                   	int3   
  22acd8:	cc                   	int3   
  22acd9:	cc                   	int3   
  22acda:	cc                   	int3   
  22acdb:	cc                   	int3   
  22acdc:	cc                   	int3   
  22acdd:	cc                   	int3   
  22acde:	cc                   	int3   
  22acdf:	cc                   	int3   

000000000022ace0 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E>:
    pub fn send_eoi(&self, interrupt_no: u8) {
  22ace0:	48 83 ec 58          	sub    $0x58,%rsp
  22ace4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ace9:	40 88 f0             	mov    %sil,%al
  22acec:	88 44 24 27          	mov    %al,0x27(%rsp)
  22acf0:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22acf5:	88 44 24 47          	mov    %al,0x47(%rsp)
        let slave: &PIC = &self.pics[1];
  22acf9:	48 83 c7 28          	add    $0x28,%rdi
  22acfd:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22ad02:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
        if slave.can_handle(interrupt_no) {
  22ad07:	0f b6 f0             	movzbl %al,%esi
  22ad0a:	e8 d1 fd ff ff       	callq  22aae0 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>
  22ad0f:	88 44 24 37          	mov    %al,0x37(%rsp)
  22ad13:	8a 44 24 37          	mov    0x37(%rsp),%al
  22ad17:	a8 01                	test   $0x1,%al
  22ad19:	75 23                	jne    22ad3e <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x5e>
  22ad1b:	eb 00                	jmp    22ad1d <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x3d>
  22ad1d:	8a 44 24 27          	mov    0x27(%rsp),%al
  22ad21:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22ad26:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        let master: &PIC = &self.pics[0];
  22ad2b:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
        if master.can_handle(interrupt_no) {
  22ad30:	0f b6 f0             	movzbl %al,%esi
  22ad33:	e8 a8 fd ff ff       	callq  22aae0 <_ZN9r3_kernel3cpu3pic3PIC10can_handle17h702bb76ea64efd68E>
  22ad38:	88 44 24 17          	mov    %al,0x17(%rsp)
  22ad3c:	eb 0c                	jmp    22ad4a <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x6a>
  22ad3e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slave.eoi();
  22ad43:	e8 18 fe ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
  22ad48:	eb d3                	jmp    22ad1d <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x3d>
  22ad4a:	8a 44 24 17          	mov    0x17(%rsp),%al
        if master.can_handle(interrupt_no) {
  22ad4e:	a8 01                	test   $0x1,%al
  22ad50:	75 07                	jne    22ad59 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x79>
  22ad52:	eb 00                	jmp    22ad54 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x74>
    }
  22ad54:	48 83 c4 58          	add    $0x58,%rsp
  22ad58:	c3                   	retq   
  22ad59:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            master.eoi();
  22ad5e:	e8 fd fd ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
  22ad63:	eb ef                	jmp    22ad54 <_ZN9r3_kernel3cpu3pic10ChainedPIC8send_eoi17h67f01b5434b51e11E+0x74>
  22ad65:	cc                   	int3   
  22ad66:	cc                   	int3   
  22ad67:	cc                   	int3   
  22ad68:	cc                   	int3   
  22ad69:	cc                   	int3   
  22ad6a:	cc                   	int3   
  22ad6b:	cc                   	int3   
  22ad6c:	cc                   	int3   
  22ad6d:	cc                   	int3   
  22ad6e:	cc                   	int3   
  22ad6f:	cc                   	int3   

000000000022ad70 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E>:
    pub fn setup(&self, master_mask: u8, slave_mask: u8) {
  22ad70:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  22ad77:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22ad7c:	88 d0                	mov    %dl,%al
  22ad7e:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22ad82:	40 88 f1             	mov    %sil,%cl
  22ad85:	88 4c 24 2f          	mov    %cl,0x2f(%rsp)
  22ad89:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  22ad8e:	88 8c 24 86 00 00 00 	mov    %cl,0x86(%rsp)
  22ad95:	88 84 24 87 00 00 00 	mov    %al,0x87(%rsp)
        self.mask_requests(0xff, 0xff);
  22ad9c:	ba ff 00 00 00       	mov    $0xff,%edx
  22ada1:	89 d6                	mov    %edx,%esi
  22ada3:	e8 c8 fe ff ff       	callq  22ac70 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22ada8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        let master: &PIC = &self.pics[0];
  22adad:	48 89 c1             	mov    %rax,%rcx
  22adb0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22adb5:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  22adbc:	00 
        let slave: &PIC = &self.pics[1];
  22adbd:	48 83 c0 28          	add    $0x28,%rax
  22adc1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22adc6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22adcd:	00 
        log::debug!("After mask.");
  22adce:	48 c7 44 24 30 04 00 	movq   $0x4,0x30(%rsp)
  22add5:	00 00 
  22add7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22addc:	48 8d 35 55 58 fd ff 	lea    -0x2a7ab(%rip),%rsi        # 200638 <str.0+0x118>
  22ade3:	e8 08 6d fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ade8:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22adec:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22adf0:	a8 01                	test   $0x1,%al
  22adf2:	75 09                	jne    22adfd <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0x8d>
  22adf4:	eb 00                	jmp    22adf6 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0x86>
  22adf6:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  22adfb:	eb 4e                	jmp    22ae4b <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0xdb>
  22adfd:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  22ae04:	00 
  22ae05:	48 8b 3d 04 03 01 00 	mov    0x10304(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22ae0c:	0f b6 b4 24 9f 00 00 	movzbl 0x9f(%rsp),%esi
  22ae13:	00 
  22ae14:	e8 a7 de ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22ae19:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22ae20:	00 
  22ae21:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22ae28:	00 
  22ae29:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22ae2e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22ae33:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  22ae38:	e8 b3 6c fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ae3d:	88 44 24 07          	mov    %al,0x7(%rsp)
  22ae41:	8a 44 24 07          	mov    0x7(%rsp),%al
  22ae45:	24 01                	and    $0x1,%al
  22ae47:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  22ae4b:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  22ae50:	75 0c                	jne    22ae5e <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0xee>
  22ae52:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.eoi();
  22ae57:	e8 04 fd ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
  22ae5c:	eb 3a                	jmp    22ae98 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0x128>
        log::debug!("After mask.");
  22ae5e:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22ae63:	48 8d 35 86 f5 00 00 	lea    0xf586(%rip),%rsi        # 23a3f0 <memcmp+0x3e40>
  22ae6a:	ba 01 00 00 00       	mov    $0x1,%edx
  22ae6f:	48 8d 0d 72 85 fd ff 	lea    -0x27a8e(%rip),%rcx        # 2033e8 <str.0+0x28>
  22ae76:	31 c0                	xor    %eax,%eax
  22ae78:	41 89 c0             	mov    %eax,%r8d
  22ae7b:	e8 40 b4 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22ae80:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22ae85:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22ae8a:	48 8d 15 6f f5 00 00 	lea    0xf56f(%rip),%rdx        # 23a400 <memcmp+0x3e50>
  22ae91:	e8 5a 57 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22ae96:	eb ba                	jmp    22ae52 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E+0xe2>
        wait(1);
  22ae98:	bf 01 00 00 00       	mov    $0x1,%edi
  22ae9d:	e8 ae c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22aea2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.eoi();
  22aea7:	e8 b4 fc ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22aeac:	bf 01 00 00 00       	mov    $0x1,%edi
  22aeb1:	e8 9a c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22aeb6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.init();
  22aebb:	e8 c0 fc ff ff       	callq  22ab80 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>
        wait(1);
  22aec0:	bf 01 00 00 00       	mov    $0x1,%edi
  22aec5:	e8 86 c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22aeca:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.init();
  22aecf:	e8 ac fc ff ff       	callq  22ab80 <_ZN9r3_kernel3cpu3pic3PIC4init17h35802da4f129e80aE>
        wait(1);
  22aed4:	bf 01 00 00 00       	mov    $0x1,%edi
  22aed9:	e8 72 c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22aede:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        master.write_data(master.offset);
  22aee3:	48 89 c7             	mov    %rax,%rdi
  22aee6:	0f b6 70 20          	movzbl 0x20(%rax),%esi
  22aeea:	e8 b1 fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22aeef:	bf 01 00 00 00       	mov    $0x1,%edi
  22aef4:	e8 57 c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22aef9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        slave.write_data(slave.offset);
  22aefe:	48 89 c7             	mov    %rax,%rdi
  22af01:	0f b6 70 20          	movzbl 0x20(%rax),%esi
  22af05:	e8 96 fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22af0a:	bf 01 00 00 00       	mov    $0x1,%edi
  22af0f:	e8 3c c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22af14:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.write_data(4);
  22af19:	be 04 00 00 00       	mov    $0x4,%esi
  22af1e:	e8 7d fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22af23:	bf 01 00 00 00       	mov    $0x1,%edi
  22af28:	e8 23 c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22af2d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.write_data(2);
  22af32:	be 02 00 00 00       	mov    $0x2,%esi
  22af37:	e8 64 fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22af3c:	bf 01 00 00 00       	mov    $0x1,%edi
  22af41:	e8 0a c9 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22af46:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.write_data(DATA_MODE_8086);
  22af4b:	be 01 00 00 00       	mov    $0x1,%esi
  22af50:	e8 4b fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22af55:	bf 01 00 00 00       	mov    $0x1,%edi
  22af5a:	e8 f1 c8 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22af5f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.write_data(DATA_MODE_8086);
  22af64:	be 01 00 00 00       	mov    $0x1,%esi
  22af69:	e8 32 fc ff ff       	callq  22aba0 <_ZN9r3_kernel3cpu3pic3PIC10write_data17h7f13c324b00694caE>
        wait(1);
  22af6e:	bf 01 00 00 00       	mov    $0x1,%edi
  22af73:	e8 d8 c8 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22af78:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  22af7c:	8a 4c 24 2f          	mov    0x2f(%rsp),%cl
  22af80:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        self.mask_requests(master_mask, slave_mask);
  22af85:	0f b6 f1             	movzbl %cl,%esi
  22af88:	0f b6 d0             	movzbl %al,%edx
  22af8b:	e8 e0 fc ff ff       	callq  22ac70 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22af90:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        master.eoi();
  22af95:	e8 c6 fb ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22af9a:	bf 01 00 00 00       	mov    $0x1,%edi
  22af9f:	e8 ac c8 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
  22afa4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        slave.eoi();
  22afa9:	e8 b2 fb ff ff       	callq  22ab60 <_ZN9r3_kernel3cpu3pic3PIC3eoi17h1a6d7b3831369c94E>
        wait(1);
  22afae:	bf 01 00 00 00       	mov    $0x1,%edi
  22afb3:	e8 98 c8 fe ff       	callq  217850 <_ZN9r3_kernel3cpu2io4wait17h071267bb01225aebE>
    }
  22afb8:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  22afbf:	c3                   	retq   

000000000022afc0 <_ZN9r3_kernel3cpu3pic10ChainedPIC4init17hfc2fdf5ad2bb63a7E>:
    pub fn init(master_mask: u8, slave_mask: u8) -> ChainedPIC {
  22afc0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  22afc7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22afcc:	88 d0                	mov    %dl,%al
  22afce:	88 44 24 16          	mov    %al,0x16(%rsp)
  22afd2:	40 88 f1             	mov    %sil,%cl
  22afd5:	88 4c 24 17          	mov    %cl,0x17(%rsp)
  22afd9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22afde:	88 8c 24 c6 00 00 00 	mov    %cl,0xc6(%rsp)
  22afe5:	88 84 24 c7 00 00 00 	mov    %al,0xc7(%rsp)
                PIC::new(MASTER_CMD_PORT, MASTER_DATA_PORT, IRQ_OFFSET),
  22afec:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22aff1:	be 20 00 00 00       	mov    $0x20,%esi
  22aff6:	ba 21 00 00 00       	mov    $0x21,%edx
  22affb:	b9 20 00 00 00       	mov    $0x20,%ecx
  22b000:	e8 cb fb ff ff       	callq  22abd0 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>
                PIC::new(
  22b005:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  22b00c:	00 
  22b00d:	be a0 00 00 00       	mov    $0xa0,%esi
  22b012:	ba a1 00 00 00       	mov    $0xa1,%edx
  22b017:	b9 28 00 00 00       	mov    $0x28,%ecx
  22b01c:	e8 af fb ff ff       	callq  22abd0 <_ZN9r3_kernel3cpu3pic3PIC3new17ha7df088bb012fd48E>
            pics: [
  22b021:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22b026:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  22b02b:	ba 28 00 00 00       	mov    $0x28,%edx
  22b030:	e8 2b b5 00 00       	callq  236560 <memcpy>
  22b035:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22b03a:	48 83 c7 28          	add    $0x28,%rdi
  22b03e:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  22b045:	00 
  22b046:	ba 28 00 00 00       	mov    $0x28,%edx
  22b04b:	e8 10 b5 00 00       	callq  236560 <memcpy>
  22b050:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        let cpcis = ChainedPIC {
  22b055:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22b05a:	ba 50 00 00 00       	mov    $0x50,%edx
  22b05f:	e8 fc b4 00 00       	callq  236560 <memcpy>
  22b064:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22b069:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  22b06d:	8a 44 24 16          	mov    0x16(%rsp),%al
  22b071:	c6 47 50 00          	movb   $0x0,0x50(%rdi)
        cpcis.setup(master_mask, slave_mask);
  22b075:	0f b6 f1             	movzbl %cl,%esi
  22b078:	0f b6 d0             	movzbl %al,%edx
  22b07b:	e8 f0 fc ff ff       	callq  22ad70 <_ZN9r3_kernel3cpu3pic10ChainedPIC5setup17hffec2304de32b9c4E>
  22b080:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22b085:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  22b08c:	c3                   	retq   
  22b08d:	cc                   	int3   
  22b08e:	cc                   	int3   
  22b08f:	cc                   	int3   

000000000022b090 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE>:
}

/// Enables legacy interrupts by clearing the mask bits
/// when enabled, PIC will raise interrupts on behalf of hardware devices.
pub fn enable_legacy_interrupts() {
  22b090:	48 83 ec 28          	sub    $0x28,%rsp
    let chained_pic = CHAINED_PIC.lock();
  22b094:	48 8d 3d 8b 83 fd ff 	lea    -0x27c75(%rip),%rdi        # 203426 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  22b09b:	e8 e0 01 00 00       	callq  22b280 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  22b0a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b0a5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22b0aa:	e8 31 13 00 00       	callq  22c3e0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  22b0af:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22b0b4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if !chained_pic.is_enabled {
  22b0b9:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22b0be:	e8 4d 14 00 00       	callq  22c510 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22b0c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b0c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22b0cd:	8a 40 50             	mov    0x50(%rax),%al
  22b0d0:	34 ff                	xor    $0xff,%al
  22b0d2:	a8 01                	test   $0x1,%al
  22b0d4:	75 0c                	jne    22b0e2 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x52>
        chained_pic.mask_requests(0x00, 0x08);
    }
}
  22b0d6:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22b0db:	e8 c0 09 fe ff       	callq  20baa0 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
  22b0e0:	eb 20                	jmp    22b102 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x72>
        chained_pic.mask_requests(0x00, 0x08);
  22b0e2:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22b0e7:	e8 24 14 00 00       	callq  22c510 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22b0ec:	48 89 04 24          	mov    %rax,(%rsp)
  22b0f0:	48 8b 3c 24          	mov    (%rsp),%rdi
  22b0f4:	31 f6                	xor    %esi,%esi
  22b0f6:	ba 08 00 00 00       	mov    $0x8,%edx
  22b0fb:	e8 70 fb ff ff       	callq  22ac70 <_ZN9r3_kernel3cpu3pic10ChainedPIC13mask_requests17ha1e1aa959bbec883E>
  22b100:	eb d4                	jmp    22b0d6 <_ZN9r3_kernel3cpu3pic24enable_legacy_interrupts17h469624f897235f4bE+0x46>
}
  22b102:	48 83 c4 28          	add    $0x28,%rsp
  22b106:	c3                   	retq   
  22b107:	cc                   	int3   
  22b108:	cc                   	int3   
  22b109:	cc                   	int3   
  22b10a:	cc                   	int3   
  22b10b:	cc                   	int3   
  22b10c:	cc                   	int3   
  22b10d:	cc                   	int3   
  22b10e:	cc                   	int3   
  22b10f:	cc                   	int3   

000000000022b110 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E>:
    if chained_pic.is_enabled {
        chained_pic.mask_requests(0xff, 0xff);
    }
}

pub fn setup_pics() {
  22b110:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    log::info!(
  22b117:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
  22b11e:	00 00 
  22b120:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22b125:	48 8d 35 0c 55 fd ff 	lea    -0x2aaf4(%rip),%rsi        # 200638 <str.0+0x118>
  22b12c:	e8 bf 69 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b131:	88 44 24 27          	mov    %al,0x27(%rsp)
  22b135:	8a 44 24 27          	mov    0x27(%rsp),%al
  22b139:	a8 01                	test   $0x1,%al
  22b13b:	75 09                	jne    22b146 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x36>
  22b13d:	eb 00                	jmp    22b13f <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x2f>
  22b13f:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22b144:	eb 4e                	jmp    22b194 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x84>
  22b146:	c6 84 24 af 00 00 00 	movb   $0x0,0xaf(%rsp)
  22b14d:	00 
  22b14e:	48 8b 3d bb ff 00 00 	mov    0xffbb(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22b155:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  22b15c:	00 
  22b15d:	e8 5e db ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22b162:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22b169:	00 
  22b16a:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  22b171:	00 
  22b172:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22b177:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22b17c:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  22b181:	e8 6a 69 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22b186:	88 44 24 26          	mov    %al,0x26(%rsp)
  22b18a:	8a 44 24 26          	mov    0x26(%rsp),%al
  22b18e:	24 01                	and    $0x1,%al
  22b190:	88 44 24 37          	mov    %al,0x37(%rsp)
  22b194:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  22b199:	75 08                	jne    22b1a3 <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x93>
        "PICs initialized in chain PIC mode, n_pics={}",
        CHAINED_PIC.lock().pics.len()
    );
}
  22b19b:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  22b1a2:	c3                   	retq   
        CHAINED_PIC.lock().pics.len()
  22b1a3:	48 8d 3d 7c 82 fd ff 	lea    -0x27d84(%rip),%rdi        # 203426 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E>
  22b1aa:	e8 d1 00 00 00       	callq  22b280 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>
  22b1af:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b1b4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22b1b9:	e8 22 12 00 00       	callq  22c3e0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>
  22b1be:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  22b1c5:	00 
  22b1c6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22b1cd:	00 
  22b1ce:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22b1d5:	00 
  22b1d6:	e8 35 13 00 00       	callq  22c510 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>
  22b1db:	48 c7 84 24 88 00 00 	movq   $0x2,0x88(%rsp)
  22b1e2:	00 02 00 00 00 
    log::info!(
  22b1e7:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  22b1ee:	00 
  22b1ef:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22b1f6:	00 
  22b1f7:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  22b1fe:	00 
  22b1ff:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  22b206:	00 
  22b207:	48 8b 35 1a ff 00 00 	mov    0xff1a(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22b20e:	e8 6d 3b fe ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  22b213:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b218:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22b21d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22b222:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b227:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  22b22c:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22b231:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  22b236:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22b23b:	48 8d 35 f6 f1 00 00 	lea    0xf1f6(%rip),%rsi        # 23a438 <memcmp+0x3e88>
  22b242:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22b248:	4c 89 c2             	mov    %r8,%rdx
  22b24b:	e8 70 b0 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22b250:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22b255:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22b25a:	48 8d 15 e7 f1 00 00 	lea    0xf1e7(%rip),%rdx        # 23a448 <memcmp+0x3e98>
  22b261:	e8 8a 53 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22b266:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  22b26d:	00 
  22b26e:	e8 2d 08 fe ff       	callq  20baa0 <_ZN4core3ptr83drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..pic..ChainedPIC$GT$$GT$17h3bb57ea1af0ea9baE>
  22b273:	e9 23 ff ff ff       	jmpq   22b19b <_ZN9r3_kernel3cpu3pic10setup_pics17h124319587d4e4125E+0x8b>
  22b278:	cc                   	int3   
  22b279:	cc                   	int3   
  22b27a:	cc                   	int3   
  22b27b:	cc                   	int3   
  22b27c:	cc                   	int3   
  22b27d:	cc                   	int3   
  22b27e:	cc                   	int3   
  22b27f:	cc                   	int3   

000000000022b280 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc6f918bed647a81cE>:
            fn deref(&self) -> &$T {
  22b280:	48 83 ec 18          	sub    $0x18,%rsp
  22b284:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22b289:	48 8d 05 d0 7b 01 00 	lea    0x17bd0(%rip),%rax        # 242e60 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hba2ed68b1e5de6ddE>
  22b290:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b295:	48 8d 3d c4 7b 01 00 	lea    0x17bc4(%rip),%rdi        # 242e60 <_ZN76_$LT$r3_kernel..cpu..pic..CHAINED_PIC$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hba2ed68b1e5de6ddE>
  22b29c:	e8 df df fd ff       	callq  209280 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9716f54e37b25dc1E>
  22b2a1:	48 89 04 24          	mov    %rax,(%rsp)
  22b2a5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22b2a9:	48 83 c4 18          	add    $0x18,%rsp
  22b2ad:	c3                   	retq   
  22b2ae:	cc                   	int3   
  22b2af:	cc                   	int3   

000000000022b2b0 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE>:
unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
  22b2b0:	48 83 ec 38          	sub    $0x38,%rsp
  22b2b4:	48 89 34 24          	mov    %rsi,(%rsp)
  22b2b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22b2bd:	88 d0                	mov    %dl,%al
  22b2bf:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22b2c3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22b2c8:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  22b2cd:	0f b6 44 24 1f       	movzbl 0x1f(%rsp),%eax
  22b2d2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22b2d7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22b2dc:	48 8d 0d 45 81 fd ff 	lea    -0x27ebb(%rip),%rcx        # 203428 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x2>
  22b2e3:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22b2e7:	48 01 c8             	add    %rcx,%rax
  22b2ea:	ff e0                	jmpq   *%rax
  22b2ec:	0f 0b                	ud2    
  22b2ee:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b2f3:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
  22b2f7:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22b2fc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b301:	eb 64                	jmp    22b367 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb7>
  22b303:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b308:	48 8b 04 24          	mov    (%rsp),%rax
            Release => intrinsics::atomic_xadd_rel(dst, val),
  22b30c:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22b311:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b316:	eb 4d                	jmp    22b365 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb5>
  22b318:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b31d:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
  22b321:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22b326:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b32b:	eb 36                	jmp    22b363 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb3>
  22b32d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b332:	48 8b 04 24          	mov    (%rsp),%rax
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
  22b336:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22b33b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b340:	eb 1f                	jmp    22b361 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xb1>
  22b342:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22b347:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_xadd(dst, val),
  22b34b:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
  22b350:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22b355:	eb 00                	jmp    22b357 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
}
  22b357:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22b35c:	48 83 c4 38          	add    $0x38,%rsp
  22b360:	c3                   	retq   
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
  22b361:	eb f4                	jmp    22b357 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
  22b363:	eb f2                	jmp    22b357 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Release => intrinsics::atomic_xadd_rel(dst, val),
  22b365:	eb f0                	jmp    22b357 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
  22b367:	eb ee                	jmp    22b357 <_ZN4core4sync6atomic10atomic_add17hf3b90b02fe11b55aE+0xa7>
  22b369:	cc                   	int3   
  22b36a:	cc                   	int3   
  22b36b:	cc                   	int3   
  22b36c:	cc                   	int3   
  22b36d:	cc                   	int3   
  22b36e:	cc                   	int3   
  22b36f:	cc                   	int3   

000000000022b370 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  22b370:	48 83 ec 28          	sub    $0x28,%rsp
  22b374:	48 89 3c 24          	mov    %rdi,(%rsp)
  22b378:	40 88 f0             	mov    %sil,%al
  22b37b:	88 44 24 17          	mov    %al,0x17(%rsp)
  22b37f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  22b384:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  22b389:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22b38e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22b393:	48 8d 0d a2 80 fd ff 	lea    -0x27f5e(%rip),%rcx        # 20343c <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x16>
  22b39a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22b39e:	48 01 c8             	add    %rcx,%rax
  22b3a1:	ff e0                	jmpq   *%rax
  22b3a3:	0f 0b                	ud2    
  22b3a5:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22b3a9:	48 8b 00             	mov    (%rax),%rax
  22b3ac:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b3b1:	eb 5c                	jmp    22b40f <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  22b3b3:	48 8d 3d 53 81 fd ff 	lea    -0x27ead(%rip),%rdi        # 20350d <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0xe7>
  22b3ba:	48 8d 15 d7 f0 00 00 	lea    0xf0d7(%rip),%rdx        # 23a498 <memcmp+0x3ee8>
  22b3c1:	be 28 00 00 00       	mov    $0x28,%esi
  22b3c6:	e8 95 80 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22b3cb:	0f 0b                	ud2    
  22b3cd:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  22b3d1:	48 8b 00             	mov    (%rax),%rax
  22b3d4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b3d9:	eb 32                	jmp    22b40d <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  22b3db:	48 8d 3d 82 80 fd ff 	lea    -0x27f7e(%rip),%rdi        # 203464 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x3e>
  22b3e2:	48 8d 15 97 f0 00 00 	lea    0xf097(%rip),%rdx        # 23a480 <memcmp+0x3ed0>
  22b3e9:	be 31 00 00 00       	mov    $0x31,%esi
  22b3ee:	e8 6d 80 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22b3f3:	0f 0b                	ud2    
  22b3f5:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  22b3f9:	48 8b 00             	mov    (%rax),%rax
  22b3fc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b401:	eb 00                	jmp    22b403 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
}
  22b403:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22b408:	48 83 c4 28          	add    $0x28,%rsp
  22b40c:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  22b40d:	eb f4                	jmp    22b403 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22b40f:	eb f2                	jmp    22b403 <_ZN4core4sync6atomic11atomic_load17h0b46512e1d099846E+0x93>
  22b411:	cc                   	int3   
  22b412:	cc                   	int3   
  22b413:	cc                   	int3   
  22b414:	cc                   	int3   
  22b415:	cc                   	int3   
  22b416:	cc                   	int3   
  22b417:	cc                   	int3   
  22b418:	cc                   	int3   
  22b419:	cc                   	int3   
  22b41a:	cc                   	int3   
  22b41b:	cc                   	int3   
  22b41c:	cc                   	int3   
  22b41d:	cc                   	int3   
  22b41e:	cc                   	int3   
  22b41f:	cc                   	int3   

000000000022b420 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  22b420:	48 83 ec 38          	sub    $0x38,%rsp
  22b424:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22b429:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b42e:	88 d0                	mov    %dl,%al
  22b430:	88 44 24 27          	mov    %al,0x27(%rsp)
  22b434:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22b439:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  22b43e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  22b443:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22b448:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22b44d:	48 8d 0d fc 7f fd ff 	lea    -0x28004(%rip),%rcx        # 203450 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x2a>
  22b454:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22b458:	48 01 c8             	add    %rcx,%rax
  22b45b:	ff e0                	jmpq   *%rax
  22b45d:	0f 0b                	ud2    
  22b45f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22b464:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22b469:	48 89 08             	mov    %rcx,(%rax)
  22b46c:	eb 59                	jmp    22b4c7 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa7>
  22b46e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22b473:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  22b478:	48 89 08             	mov    %rcx,(%rax)
  22b47b:	eb 48                	jmp    22b4c5 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  22b47d:	48 8d 3d e3 80 fd ff 	lea    -0x27f1d(%rip),%rdi        # 203567 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x141>
  22b484:	48 8d 15 3d f0 00 00 	lea    0xf03d(%rip),%rdx        # 23a4c8 <memcmp+0x3f18>
  22b48b:	be 2a 00 00 00       	mov    $0x2a,%esi
  22b490:	e8 cb 7f 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22b495:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  22b497:	48 8d 3d 97 80 fd ff 	lea    -0x27f69(%rip),%rdi        # 203535 <_ZN9r3_kernel3cpu3pic11CHAINED_PIC17h409c01fff5be0f21E+0x10f>
  22b49e:	48 8d 15 0b f0 00 00 	lea    0xf00b(%rip),%rdx        # 23a4b0 <memcmp+0x3f00>
  22b4a5:	be 32 00 00 00       	mov    $0x32,%esi
  22b4aa:	e8 b1 7f 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22b4af:	0f 0b                	ud2    
  22b4b1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22b4b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  22b4bb:	48 87 01             	xchg   %rax,(%rcx)
  22b4be:	eb 00                	jmp    22b4c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
}
  22b4c0:	48 83 c4 38          	add    $0x38,%rsp
  22b4c4:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  22b4c5:	eb f9                	jmp    22b4c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22b4c7:	eb f7                	jmp    22b4c0 <_ZN4core4sync6atomic12atomic_store17hc47432ac9a133732E+0xa0>
  22b4c9:	cc                   	int3   
  22b4ca:	cc                   	int3   
  22b4cb:	cc                   	int3   
  22b4cc:	cc                   	int3   
  22b4cd:	cc                   	int3   
  22b4ce:	cc                   	int3   
  22b4cf:	cc                   	int3   

000000000022b4d0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E>:
    fn obtain_lock(&self)
  22b4d0:	48 83 ec 28          	sub    $0x28,%rsp
  22b4d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b4d9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b4de:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b4e3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b4e8:	31 f6                	xor    %esi,%esi
  22b4ea:	ba 01 00 00 00       	mov    $0x1,%edx
  22b4ef:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b4f4:	e8 37 d4 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b4f9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b4fd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b501:	a8 01                	test   $0x1,%al
  22b503:	75 07                	jne    22b50c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x3c>
  22b505:	eb 00                	jmp    22b507 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x37>
    }
  22b507:	48 83 c4 28          	add    $0x28,%rsp
  22b50b:	c3                   	retq   
  22b50c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b511:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b516:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b51b:	e8 e0 d5 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b520:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b524:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b528:	a8 01                	test   $0x1,%al
  22b52a:	75 02                	jne    22b52e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x5e>
  22b52c:	eb b0                	jmp    22b4de <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0xe>
                cpu_relax();
  22b52e:	e8 5d d8 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b533:	eb d7                	jmp    22b50c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E+0x3c>
  22b535:	cc                   	int3   
  22b536:	cc                   	int3   
  22b537:	cc                   	int3   
  22b538:	cc                   	int3   
  22b539:	cc                   	int3   
  22b53a:	cc                   	int3   
  22b53b:	cc                   	int3   
  22b53c:	cc                   	int3   
  22b53d:	cc                   	int3   
  22b53e:	cc                   	int3   
  22b53f:	cc                   	int3   

000000000022b540 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE>:
    fn obtain_lock(&self)
  22b540:	48 83 ec 28          	sub    $0x28,%rsp
  22b544:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b549:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b54e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b553:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b558:	31 f6                	xor    %esi,%esi
  22b55a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b55f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b564:	e8 c7 d3 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b569:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b56d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b571:	a8 01                	test   $0x1,%al
  22b573:	75 07                	jne    22b57c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x3c>
  22b575:	eb 00                	jmp    22b577 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x37>
    }
  22b577:	48 83 c4 28          	add    $0x28,%rsp
  22b57b:	c3                   	retq   
  22b57c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b581:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b586:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b58b:	e8 70 d5 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b590:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b594:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b598:	a8 01                	test   $0x1,%al
  22b59a:	75 02                	jne    22b59e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x5e>
  22b59c:	eb b0                	jmp    22b54e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0xe>
                cpu_relax();
  22b59e:	e8 ed d7 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b5a3:	eb d7                	jmp    22b57c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE+0x3c>
  22b5a5:	cc                   	int3   
  22b5a6:	cc                   	int3   
  22b5a7:	cc                   	int3   
  22b5a8:	cc                   	int3   
  22b5a9:	cc                   	int3   
  22b5aa:	cc                   	int3   
  22b5ab:	cc                   	int3   
  22b5ac:	cc                   	int3   
  22b5ad:	cc                   	int3   
  22b5ae:	cc                   	int3   
  22b5af:	cc                   	int3   

000000000022b5b0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E>:
    fn obtain_lock(&self)
  22b5b0:	48 83 ec 28          	sub    $0x28,%rsp
  22b5b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b5b9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b5be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b5c3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b5c8:	31 f6                	xor    %esi,%esi
  22b5ca:	ba 01 00 00 00       	mov    $0x1,%edx
  22b5cf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b5d4:	e8 57 d3 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b5d9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b5dd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b5e1:	a8 01                	test   $0x1,%al
  22b5e3:	75 07                	jne    22b5ec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x3c>
  22b5e5:	eb 00                	jmp    22b5e7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x37>
    }
  22b5e7:	48 83 c4 28          	add    $0x28,%rsp
  22b5eb:	c3                   	retq   
  22b5ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b5f1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b5f6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b5fb:	e8 00 d5 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b600:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b604:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b608:	a8 01                	test   $0x1,%al
  22b60a:	75 02                	jne    22b60e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x5e>
  22b60c:	eb b0                	jmp    22b5be <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0xe>
                cpu_relax();
  22b60e:	e8 7d d7 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b613:	eb d7                	jmp    22b5ec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E+0x3c>
  22b615:	cc                   	int3   
  22b616:	cc                   	int3   
  22b617:	cc                   	int3   
  22b618:	cc                   	int3   
  22b619:	cc                   	int3   
  22b61a:	cc                   	int3   
  22b61b:	cc                   	int3   
  22b61c:	cc                   	int3   
  22b61d:	cc                   	int3   
  22b61e:	cc                   	int3   
  22b61f:	cc                   	int3   

000000000022b620 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E>:
    fn obtain_lock(&self)
  22b620:	48 83 ec 28          	sub    $0x28,%rsp
  22b624:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b629:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b62e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b633:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b638:	31 f6                	xor    %esi,%esi
  22b63a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b63f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b644:	e8 e7 d2 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b649:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b64d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b651:	a8 01                	test   $0x1,%al
  22b653:	75 07                	jne    22b65c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E+0x3c>
  22b655:	eb 00                	jmp    22b657 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E+0x37>
    }
  22b657:	48 83 c4 28          	add    $0x28,%rsp
  22b65b:	c3                   	retq   
  22b65c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b661:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b666:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b66b:	e8 90 d4 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b670:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b674:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b678:	a8 01                	test   $0x1,%al
  22b67a:	75 02                	jne    22b67e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E+0x5e>
  22b67c:	eb b0                	jmp    22b62e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E+0xe>
                cpu_relax();
  22b67e:	e8 0d d7 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b683:	eb d7                	jmp    22b65c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E+0x3c>
  22b685:	cc                   	int3   
  22b686:	cc                   	int3   
  22b687:	cc                   	int3   
  22b688:	cc                   	int3   
  22b689:	cc                   	int3   
  22b68a:	cc                   	int3   
  22b68b:	cc                   	int3   
  22b68c:	cc                   	int3   
  22b68d:	cc                   	int3   
  22b68e:	cc                   	int3   
  22b68f:	cc                   	int3   

000000000022b690 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE>:
    fn obtain_lock(&self)
  22b690:	48 83 ec 28          	sub    $0x28,%rsp
  22b694:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b699:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b69e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b6a3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b6a8:	31 f6                	xor    %esi,%esi
  22b6aa:	ba 01 00 00 00       	mov    $0x1,%edx
  22b6af:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b6b4:	e8 77 d2 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b6b9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b6bd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b6c1:	a8 01                	test   $0x1,%al
  22b6c3:	75 07                	jne    22b6cc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x3c>
  22b6c5:	eb 00                	jmp    22b6c7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x37>
    }
  22b6c7:	48 83 c4 28          	add    $0x28,%rsp
  22b6cb:	c3                   	retq   
  22b6cc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b6d1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b6d6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b6db:	e8 20 d4 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b6e0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b6e4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b6e8:	a8 01                	test   $0x1,%al
  22b6ea:	75 02                	jne    22b6ee <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x5e>
  22b6ec:	eb b0                	jmp    22b69e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0xe>
                cpu_relax();
  22b6ee:	e8 9d d6 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b6f3:	eb d7                	jmp    22b6cc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE+0x3c>
  22b6f5:	cc                   	int3   
  22b6f6:	cc                   	int3   
  22b6f7:	cc                   	int3   
  22b6f8:	cc                   	int3   
  22b6f9:	cc                   	int3   
  22b6fa:	cc                   	int3   
  22b6fb:	cc                   	int3   
  22b6fc:	cc                   	int3   
  22b6fd:	cc                   	int3   
  22b6fe:	cc                   	int3   
  22b6ff:	cc                   	int3   

000000000022b700 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E>:
    fn obtain_lock(&self)
  22b700:	48 83 ec 28          	sub    $0x28,%rsp
  22b704:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b709:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b70e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b713:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b718:	31 f6                	xor    %esi,%esi
  22b71a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b71f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b724:	e8 07 d2 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b729:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b72d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b731:	a8 01                	test   $0x1,%al
  22b733:	75 07                	jne    22b73c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x3c>
  22b735:	eb 00                	jmp    22b737 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x37>
    }
  22b737:	48 83 c4 28          	add    $0x28,%rsp
  22b73b:	c3                   	retq   
  22b73c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b741:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b746:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b74b:	e8 b0 d3 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b750:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b754:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b758:	a8 01                	test   $0x1,%al
  22b75a:	75 02                	jne    22b75e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x5e>
  22b75c:	eb b0                	jmp    22b70e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0xe>
                cpu_relax();
  22b75e:	e8 2d d6 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b763:	eb d7                	jmp    22b73c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E+0x3c>
  22b765:	cc                   	int3   
  22b766:	cc                   	int3   
  22b767:	cc                   	int3   
  22b768:	cc                   	int3   
  22b769:	cc                   	int3   
  22b76a:	cc                   	int3   
  22b76b:	cc                   	int3   
  22b76c:	cc                   	int3   
  22b76d:	cc                   	int3   
  22b76e:	cc                   	int3   
  22b76f:	cc                   	int3   

000000000022b770 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E>:
    fn obtain_lock(&self)
  22b770:	48 83 ec 28          	sub    $0x28,%rsp
  22b774:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b779:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b77e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b783:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b788:	31 f6                	xor    %esi,%esi
  22b78a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b78f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b794:	e8 97 d1 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b799:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b79d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b7a1:	a8 01                	test   $0x1,%al
  22b7a3:	75 07                	jne    22b7ac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x3c>
  22b7a5:	eb 00                	jmp    22b7a7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x37>
    }
  22b7a7:	48 83 c4 28          	add    $0x28,%rsp
  22b7ab:	c3                   	retq   
  22b7ac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b7b1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b7b6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b7bb:	e8 40 d3 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b7c0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b7c4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b7c8:	a8 01                	test   $0x1,%al
  22b7ca:	75 02                	jne    22b7ce <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x5e>
  22b7cc:	eb b0                	jmp    22b77e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0xe>
                cpu_relax();
  22b7ce:	e8 bd d5 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b7d3:	eb d7                	jmp    22b7ac <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E+0x3c>
  22b7d5:	cc                   	int3   
  22b7d6:	cc                   	int3   
  22b7d7:	cc                   	int3   
  22b7d8:	cc                   	int3   
  22b7d9:	cc                   	int3   
  22b7da:	cc                   	int3   
  22b7db:	cc                   	int3   
  22b7dc:	cc                   	int3   
  22b7dd:	cc                   	int3   
  22b7de:	cc                   	int3   
  22b7df:	cc                   	int3   

000000000022b7e0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE>:
    fn obtain_lock(&self)
  22b7e0:	48 83 ec 28          	sub    $0x28,%rsp
  22b7e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b7e9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b7ee:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b7f3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b7f8:	31 f6                	xor    %esi,%esi
  22b7fa:	ba 01 00 00 00       	mov    $0x1,%edx
  22b7ff:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b804:	e8 27 d1 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b809:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b80d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b811:	a8 01                	test   $0x1,%al
  22b813:	75 07                	jne    22b81c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x3c>
  22b815:	eb 00                	jmp    22b817 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x37>
    }
  22b817:	48 83 c4 28          	add    $0x28,%rsp
  22b81b:	c3                   	retq   
  22b81c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b821:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b826:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b82b:	e8 d0 d2 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b830:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b834:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b838:	a8 01                	test   $0x1,%al
  22b83a:	75 02                	jne    22b83e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x5e>
  22b83c:	eb b0                	jmp    22b7ee <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0xe>
                cpu_relax();
  22b83e:	e8 4d d5 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b843:	eb d7                	jmp    22b81c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE+0x3c>
  22b845:	cc                   	int3   
  22b846:	cc                   	int3   
  22b847:	cc                   	int3   
  22b848:	cc                   	int3   
  22b849:	cc                   	int3   
  22b84a:	cc                   	int3   
  22b84b:	cc                   	int3   
  22b84c:	cc                   	int3   
  22b84d:	cc                   	int3   
  22b84e:	cc                   	int3   
  22b84f:	cc                   	int3   

000000000022b850 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E>:
    fn obtain_lock(&self)
  22b850:	48 83 ec 28          	sub    $0x28,%rsp
  22b854:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b859:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b85e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b863:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b868:	31 f6                	xor    %esi,%esi
  22b86a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b86f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b874:	e8 b7 d0 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b879:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b87d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b881:	a8 01                	test   $0x1,%al
  22b883:	75 07                	jne    22b88c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x3c>
  22b885:	eb 00                	jmp    22b887 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x37>
    }
  22b887:	48 83 c4 28          	add    $0x28,%rsp
  22b88b:	c3                   	retq   
  22b88c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b891:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b896:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b89b:	e8 60 d2 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b8a0:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b8a4:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b8a8:	a8 01                	test   $0x1,%al
  22b8aa:	75 02                	jne    22b8ae <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x5e>
  22b8ac:	eb b0                	jmp    22b85e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0xe>
                cpu_relax();
  22b8ae:	e8 dd d4 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b8b3:	eb d7                	jmp    22b88c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E+0x3c>
  22b8b5:	cc                   	int3   
  22b8b6:	cc                   	int3   
  22b8b7:	cc                   	int3   
  22b8b8:	cc                   	int3   
  22b8b9:	cc                   	int3   
  22b8ba:	cc                   	int3   
  22b8bb:	cc                   	int3   
  22b8bc:	cc                   	int3   
  22b8bd:	cc                   	int3   
  22b8be:	cc                   	int3   
  22b8bf:	cc                   	int3   

000000000022b8c0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E>:
    fn obtain_lock(&self)
  22b8c0:	48 83 ec 28          	sub    $0x28,%rsp
  22b8c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b8c9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b8ce:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b8d3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b8d8:	31 f6                	xor    %esi,%esi
  22b8da:	ba 01 00 00 00       	mov    $0x1,%edx
  22b8df:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b8e4:	e8 47 d0 ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b8e9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b8ed:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b8f1:	a8 01                	test   $0x1,%al
  22b8f3:	75 07                	jne    22b8fc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x3c>
  22b8f5:	eb 00                	jmp    22b8f7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x37>
    }
  22b8f7:	48 83 c4 28          	add    $0x28,%rsp
  22b8fb:	c3                   	retq   
  22b8fc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b901:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b906:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b90b:	e8 f0 d1 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b910:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b914:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b918:	a8 01                	test   $0x1,%al
  22b91a:	75 02                	jne    22b91e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x5e>
  22b91c:	eb b0                	jmp    22b8ce <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0xe>
                cpu_relax();
  22b91e:	e8 6d d4 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b923:	eb d7                	jmp    22b8fc <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E+0x3c>
  22b925:	cc                   	int3   
  22b926:	cc                   	int3   
  22b927:	cc                   	int3   
  22b928:	cc                   	int3   
  22b929:	cc                   	int3   
  22b92a:	cc                   	int3   
  22b92b:	cc                   	int3   
  22b92c:	cc                   	int3   
  22b92d:	cc                   	int3   
  22b92e:	cc                   	int3   
  22b92f:	cc                   	int3   

000000000022b930 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E>:
    fn obtain_lock(&self)
  22b930:	48 83 ec 28          	sub    $0x28,%rsp
  22b934:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b939:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22b93e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  22b943:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  22b948:	31 f6                	xor    %esi,%esi
  22b94a:	ba 01 00 00 00       	mov    $0x1,%edx
  22b94f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  22b954:	e8 d7 cf ff ff       	callq  228930 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h4d8d89e38c7bd520E>
  22b959:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22b95d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22b961:	a8 01                	test   $0x1,%al
  22b963:	75 07                	jne    22b96c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x3c>
  22b965:	eb 00                	jmp    22b967 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x37>
    }
  22b967:	48 83 c4 28          	add    $0x28,%rsp
  22b96b:	c3                   	retq   
  22b96c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  22b971:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  22b976:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  22b97b:	e8 80 d1 ff ff       	callq  228b00 <_ZN4core4sync6atomic10AtomicBool4load17h1e541f4d5e32494fE>
  22b980:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22b984:	8a 44 24 0e          	mov    0xe(%rsp),%al
  22b988:	a8 01                	test   $0x1,%al
  22b98a:	75 02                	jne    22b98e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x5e>
  22b98c:	eb b0                	jmp    22b93e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0xe>
                cpu_relax();
  22b98e:	e8 fd d3 ff ff       	callq  228d90 <_ZN4core4sync6atomic14spin_loop_hint17h2201e74ebeb209f7E>
  22b993:	eb d7                	jmp    22b96c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E+0x3c>
  22b995:	cc                   	int3   
  22b996:	cc                   	int3   
  22b997:	cc                   	int3   
  22b998:	cc                   	int3   
  22b999:	cc                   	int3   
  22b99a:	cc                   	int3   
  22b99b:	cc                   	int3   
  22b99c:	cc                   	int3   
  22b99d:	cc                   	int3   
  22b99e:	cc                   	int3   
  22b99f:	cc                   	int3   

000000000022b9a0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1d35398e75f8f15cE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22b9a0:	48 83 ec 78          	sub    $0x78,%rsp
  22b9a4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22b9a9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22b9ae:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22b9b3:	31 ff                	xor    %edi,%edi
  22b9b5:	e8 06 d1 ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22b9ba:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  22b9be:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  22b9c2:	88 44 24 20          	mov    %al,0x20(%rsp)
  22b9c6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            data: UnsafeCell::new(user_data),
  22b9cb:	48 8b 08             	mov    (%rax),%rcx
  22b9ce:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22b9d3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22b9d7:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22b9dc:	48 8b 40 10          	mov    0x10(%rax),%rax
  22b9e0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        UnsafeCell { value }
  22b9e5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22b9ea:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22b9ef:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22b9f4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22b9f9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22b9fe:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22ba03:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22ba08:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22ba0d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22ba12:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ba17:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22ba1c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22ba21:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ba26:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Mutex
  22ba2b:	8a 54 24 20          	mov    0x20(%rsp),%dl
  22ba2f:	88 11                	mov    %dl,(%rcx)
  22ba31:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22ba36:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22ba3a:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22ba3f:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22ba43:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22ba48:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  22ba4c:	48 83 c4 78          	add    $0x78,%rsp
  22ba50:	c3                   	retq   
  22ba51:	cc                   	int3   
  22ba52:	cc                   	int3   
  22ba53:	cc                   	int3   
  22ba54:	cc                   	int3   
  22ba55:	cc                   	int3   
  22ba56:	cc                   	int3   
  22ba57:	cc                   	int3   
  22ba58:	cc                   	int3   
  22ba59:	cc                   	int3   
  22ba5a:	cc                   	int3   
  22ba5b:	cc                   	int3   
  22ba5c:	cc                   	int3   
  22ba5d:	cc                   	int3   
  22ba5e:	cc                   	int3   
  22ba5f:	cc                   	int3   

000000000022ba60 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3237b67d888c05a7E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22ba60:	48 81 ec d8 04 00 00 	sub    $0x4d8,%rsp
  22ba67:	48 89 34 24          	mov    %rsi,(%rsp)
  22ba6b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ba70:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22ba75:	31 ff                	xor    %edi,%edi
  22ba77:	e8 44 d0 ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22ba7c:	88 84 24 47 03 00 00 	mov    %al,0x347(%rsp)
  22ba83:	8a 84 24 47 03 00 00 	mov    0x347(%rsp),%al
  22ba8a:	88 44 24 18          	mov    %al,0x18(%rsp)
  22ba8e:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22ba92:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  22ba99:	00 
  22ba9a:	ba 90 01 00 00       	mov    $0x190,%edx
  22ba9f:	e8 bc aa 00 00       	callq  236560 <memcpy>
  22baa4:	48 8d bc 24 48 03 00 	lea    0x348(%rsp),%rdi
  22baab:	00 
  22baac:	48 8d b4 24 b0 01 00 	lea    0x1b0(%rsp),%rsi
  22bab3:	00 
  22bab4:	ba 90 01 00 00       	mov    $0x190,%edx
  22bab9:	e8 a2 aa 00 00       	callq  236560 <memcpy>
  22babe:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22bac3:	48 8d b4 24 48 03 00 	lea    0x348(%rsp),%rsi
  22baca:	00 
  22bacb:	ba 90 01 00 00       	mov    $0x190,%edx
  22bad0:	e8 8b aa 00 00       	callq  236560 <memcpy>
  22bad5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  22bada:	8a 44 24 18          	mov    0x18(%rsp),%al
  22bade:	88 07                	mov    %al,(%rdi)
  22bae0:	48 83 c7 08          	add    $0x8,%rdi
  22bae4:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22bae9:	ba 90 01 00 00       	mov    $0x190,%edx
  22baee:	e8 6d aa 00 00       	callq  236560 <memcpy>
  22baf3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22baf8:	48 81 c4 d8 04 00 00 	add    $0x4d8,%rsp
  22baff:	c3                   	retq   

000000000022bb00 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h3fd6b3d9821e2ef0E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bb00:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  22bb07:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22bb0c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22bb11:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22bb16:	31 ff                	xor    %edi,%edi
  22bb18:	e8 a3 cf ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bb1d:	88 84 24 df 00 00 00 	mov    %al,0xdf(%rsp)
  22bb24:	8a 84 24 df 00 00 00 	mov    0xdf(%rsp),%al
  22bb2b:	88 44 24 20          	mov    %al,0x20(%rsp)
  22bb2f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22bb34:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  22bb3b:	00 
  22bb3c:	ba 58 00 00 00       	mov    $0x58,%edx
  22bb41:	e8 1a aa 00 00       	callq  236560 <memcpy>
  22bb46:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  22bb4d:	00 
  22bb4e:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  22bb55:	00 
  22bb56:	ba 58 00 00 00       	mov    $0x58,%edx
  22bb5b:	e8 00 aa 00 00       	callq  236560 <memcpy>
  22bb60:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22bb65:	48 8d b4 24 e0 00 00 	lea    0xe0(%rsp),%rsi
  22bb6c:	00 
  22bb6d:	ba 58 00 00 00       	mov    $0x58,%edx
  22bb72:	e8 e9 a9 00 00       	callq  236560 <memcpy>
  22bb77:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22bb7c:	8a 44 24 20          	mov    0x20(%rsp),%al
  22bb80:	88 07                	mov    %al,(%rdi)
  22bb82:	48 83 c7 08          	add    $0x8,%rdi
  22bb86:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22bb8b:	ba 58 00 00 00       	mov    $0x58,%edx
  22bb90:	e8 cb a9 00 00       	callq  236560 <memcpy>
  22bb95:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22bb9a:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  22bba1:	c3                   	retq   
  22bba2:	cc                   	int3   
  22bba3:	cc                   	int3   
  22bba4:	cc                   	int3   
  22bba5:	cc                   	int3   
  22bba6:	cc                   	int3   
  22bba7:	cc                   	int3   
  22bba8:	cc                   	int3   
  22bba9:	cc                   	int3   
  22bbaa:	cc                   	int3   
  22bbab:	cc                   	int3   
  22bbac:	cc                   	int3   
  22bbad:	cc                   	int3   
  22bbae:	cc                   	int3   
  22bbaf:	cc                   	int3   

000000000022bbb0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bbb0:	48 83 ec 78          	sub    $0x78,%rsp
  22bbb4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22bbb9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22bbbe:	88 d0                	mov    %dl,%al
  22bbc0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22bbc4:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22bbc9:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22bbce:	24 01                	and    $0x1,%al
  22bbd0:	88 44 24 48          	mov    %al,0x48(%rsp)
            lock: AtomicBool::new(false),
  22bbd4:	31 ff                	xor    %edi,%edi
  22bbd6:	e8 e5 ce ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bbdb:	88 44 24 57          	mov    %al,0x57(%rsp)
  22bbdf:	8a 44 24 57          	mov    0x57(%rsp),%al
  22bbe3:	88 44 24 38          	mov    %al,0x38(%rsp)
  22bbe7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22bbec:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  22bbf0:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22bbf5:	24 01                	and    $0x1,%al
  22bbf7:	88 44 24 70          	mov    %al,0x70(%rsp)
  22bbfb:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22bc00:	88 44 24 60          	mov    %al,0x60(%rsp)
    }
  22bc04:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22bc09:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22bc0e:	8a 44 24 60          	mov    0x60(%rsp),%al
  22bc12:	88 44 24 17          	mov    %al,0x17(%rsp)
  22bc16:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22bc1b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22bc20:	8a 54 24 17          	mov    0x17(%rsp),%dl
  22bc24:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  22bc29:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  22bc2e:	40 88 39             	mov    %dil,(%rcx)
  22bc31:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22bc35:	80 e2 01             	and    $0x1,%dl
  22bc38:	88 51 10             	mov    %dl,0x10(%rcx)
    }
  22bc3b:	48 83 c4 78          	add    $0x78,%rsp
  22bc3f:	c3                   	retq   

000000000022bc40 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h65fa35b167151302E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bc40:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  22bc47:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22bc4c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22bc51:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22bc56:	31 ff                	xor    %edi,%edi
  22bc58:	e8 63 ce ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bc5d:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  22bc61:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  22bc65:	88 44 24 20          	mov    %al,0x20(%rsp)
  22bc69:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22bc6e:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  22bc73:	ba 28 00 00 00       	mov    $0x28,%edx
  22bc78:	e8 e3 a8 00 00       	callq  236560 <memcpy>
        UnsafeCell { value }
  22bc7d:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  22bc84:	00 
  22bc85:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  22bc8a:	ba 28 00 00 00       	mov    $0x28,%edx
  22bc8f:	e8 cc a8 00 00       	callq  236560 <memcpy>
  22bc94:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22bc99:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  22bca0:	00 
  22bca1:	ba 28 00 00 00       	mov    $0x28,%edx
  22bca6:	e8 b5 a8 00 00       	callq  236560 <memcpy>
  22bcab:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22bcb0:	8a 44 24 20          	mov    0x20(%rsp),%al
  22bcb4:	88 07                	mov    %al,(%rdi)
  22bcb6:	48 83 c7 08          	add    $0x8,%rdi
  22bcba:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22bcbf:	ba 28 00 00 00       	mov    $0x28,%edx
  22bcc4:	e8 97 a8 00 00       	callq  236560 <memcpy>
  22bcc9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22bcce:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  22bcd5:	c3                   	retq   
  22bcd6:	cc                   	int3   
  22bcd7:	cc                   	int3   
  22bcd8:	cc                   	int3   
  22bcd9:	cc                   	int3   
  22bcda:	cc                   	int3   
  22bcdb:	cc                   	int3   
  22bcdc:	cc                   	int3   
  22bcdd:	cc                   	int3   
  22bcde:	cc                   	int3   
  22bcdf:	cc                   	int3   

000000000022bce0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h75f3bb8e10f24d6cE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bce0:	48 81 ec 38 30 00 00 	sub    $0x3038,%rsp
  22bce7:	48 89 34 24          	mov    %rsi,(%rsp)
  22bceb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22bcf0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22bcf5:	31 ff                	xor    %edi,%edi
  22bcf7:	e8 c4 cd ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bcfc:	88 84 24 2f 20 00 00 	mov    %al,0x202f(%rsp)
  22bd03:	8a 84 24 2f 20 00 00 	mov    0x202f(%rsp),%al
  22bd0a:	88 44 24 18          	mov    %al,0x18(%rsp)
  22bd0e:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22bd12:	48 8d bc 24 20 10 00 	lea    0x1020(%rsp),%rdi
  22bd19:	00 
  22bd1a:	ba 00 10 00 00       	mov    $0x1000,%edx
  22bd1f:	e8 3c a8 00 00       	callq  236560 <memcpy>
  22bd24:	48 8d bc 24 30 20 00 	lea    0x2030(%rsp),%rdi
  22bd2b:	00 
  22bd2c:	48 8d b4 24 20 10 00 	lea    0x1020(%rsp),%rsi
  22bd33:	00 
  22bd34:	ba 00 10 00 00       	mov    $0x1000,%edx
  22bd39:	e8 22 a8 00 00       	callq  236560 <memcpy>
  22bd3e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  22bd43:	48 8d b4 24 30 20 00 	lea    0x2030(%rsp),%rsi
  22bd4a:	00 
  22bd4b:	ba 00 10 00 00       	mov    $0x1000,%edx
  22bd50:	e8 0b a8 00 00       	callq  236560 <memcpy>
  22bd55:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  22bd5a:	8a 44 24 18          	mov    0x18(%rsp),%al
  22bd5e:	88 07                	mov    %al,(%rdi)
  22bd60:	48 83 c7 10          	add    $0x10,%rdi
  22bd64:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  22bd69:	ba 00 10 00 00       	mov    $0x1000,%edx
  22bd6e:	e8 ed a7 00 00       	callq  236560 <memcpy>
  22bd73:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  22bd78:	48 81 c4 38 30 00 00 	add    $0x3038,%rsp
  22bd7f:	c3                   	retq   

000000000022bd80 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h7b64888ecb399409E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bd80:	48 83 ec 78          	sub    $0x78,%rsp
  22bd84:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22bd89:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22bd8e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22bd93:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22bd98:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22bd9d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
            lock: AtomicBool::new(false),
  22bda2:	31 ff                	xor    %edi,%edi
  22bda4:	e8 17 cd ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bda9:	88 44 24 57          	mov    %al,0x57(%rsp)
  22bdad:	8a 44 24 57          	mov    0x57(%rsp),%al
  22bdb1:	88 44 24 38          	mov    %al,0x38(%rsp)
  22bdb5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22bdba:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  22bdbf:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22bdc4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22bdc9:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22bdce:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  22bdd3:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22bdd8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22bddd:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22bde2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22bde7:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22bdec:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22bdf1:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22bdf6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  22bdfb:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  22be00:	40 88 39             	mov    %dil,(%rcx)
  22be03:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22be07:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  22be0b:	48 83 c4 78          	add    $0x78,%rsp
  22be0f:	c3                   	retq   

000000000022be10 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb57e111c8bcb0c86E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22be10:	48 83 ec 78          	sub    $0x78,%rsp
  22be14:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22be19:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22be1e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22be23:	31 ff                	xor    %edi,%edi
  22be25:	e8 96 cc ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22be2a:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  22be2e:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  22be32:	88 44 24 20          	mov    %al,0x20(%rsp)
  22be36:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            data: UnsafeCell::new(user_data),
  22be3b:	48 8b 08             	mov    (%rax),%rcx
  22be3e:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22be43:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22be47:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22be4c:	48 8b 40 10          	mov    0x10(%rax),%rax
  22be50:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
        UnsafeCell { value }
  22be55:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22be5a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22be5f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22be64:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22be69:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22be6e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22be73:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22be78:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22be7d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22be82:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22be87:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22be8c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22be91:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22be96:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Mutex
  22be9b:	8a 54 24 20          	mov    0x20(%rsp),%dl
  22be9f:	88 11                	mov    %dl,(%rcx)
  22bea1:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22bea6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22beaa:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22beaf:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22beb3:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22beb8:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    }
  22bebc:	48 83 c4 78          	add    $0x78,%rsp
  22bec0:	c3                   	retq   
  22bec1:	cc                   	int3   
  22bec2:	cc                   	int3   
  22bec3:	cc                   	int3   
  22bec4:	cc                   	int3   
  22bec5:	cc                   	int3   
  22bec6:	cc                   	int3   
  22bec7:	cc                   	int3   
  22bec8:	cc                   	int3   
  22bec9:	cc                   	int3   
  22beca:	cc                   	int3   
  22becb:	cc                   	int3   
  22becc:	cc                   	int3   
  22becd:	cc                   	int3   
  22bece:	cc                   	int3   
  22becf:	cc                   	int3   

000000000022bed0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hb8a225ac51d82457E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bed0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22bed7:	48 89 34 24          	mov    %rsi,(%rsp)
  22bedb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22bee0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22bee5:	31 ff                	xor    %edi,%edi
  22bee7:	e8 d4 cb ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22beec:	88 44 24 67          	mov    %al,0x67(%rsp)
  22bef0:	8a 44 24 67          	mov    0x67(%rsp),%al
  22bef4:	88 44 24 18          	mov    %al,0x18(%rsp)
  22bef8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  22befc:	48 8b 08             	mov    (%rax),%rcx
  22beff:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22bf04:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22bf08:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22bf0d:	48 8b 48 10          	mov    0x10(%rax),%rcx
  22bf11:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22bf16:	48 8b 40 18          	mov    0x18(%rax),%rax
  22bf1a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22bf1f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22bf24:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22bf29:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22bf2e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22bf33:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22bf38:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22bf3d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22bf42:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22bf49:	00 
  22bf4a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22bf4f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22bf54:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22bf59:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22bf5e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  22bf63:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22bf68:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22bf6f:	00 
  22bf70:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22bf75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22bf7a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  22bf7f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  22bf83:	88 11                	mov    %dl,(%rcx)
  22bf85:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22bf8a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22bf8e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22bf93:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22bf97:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22bf9c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22bfa0:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22bfa5:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  22bfa9:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22bfb0:	c3                   	retq   
  22bfb1:	cc                   	int3   
  22bfb2:	cc                   	int3   
  22bfb3:	cc                   	int3   
  22bfb4:	cc                   	int3   
  22bfb5:	cc                   	int3   
  22bfb6:	cc                   	int3   
  22bfb7:	cc                   	int3   
  22bfb8:	cc                   	int3   
  22bfb9:	cc                   	int3   
  22bfba:	cc                   	int3   
  22bfbb:	cc                   	int3   
  22bfbc:	cc                   	int3   
  22bfbd:	cc                   	int3   
  22bfbe:	cc                   	int3   
  22bfbf:	cc                   	int3   

000000000022bfc0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hba9b1c03bd7af26fE>:
    pub const fn new(user_data: T) -> Mutex<T>
  22bfc0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22bfc7:	48 89 34 24          	mov    %rsi,(%rsp)
  22bfcb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22bfd0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  22bfd5:	31 ff                	xor    %edi,%edi
  22bfd7:	e8 e4 ca ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22bfdc:	88 44 24 67          	mov    %al,0x67(%rsp)
  22bfe0:	8a 44 24 67          	mov    0x67(%rsp),%al
  22bfe4:	88 44 24 18          	mov    %al,0x18(%rsp)
  22bfe8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  22bfec:	48 8b 08             	mov    (%rax),%rcx
  22bfef:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22bff4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22bff8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22bffd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  22c001:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22c006:	48 8b 40 18          	mov    0x18(%rax),%rax
  22c00a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22c00f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22c014:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22c019:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22c01e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22c023:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22c028:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22c02d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22c032:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22c039:	00 
  22c03a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22c03f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22c044:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  22c049:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22c04e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  22c053:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c058:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22c05f:	00 
  22c060:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22c065:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22c06a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  22c06f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  22c073:	88 11                	mov    %dl,(%rcx)
  22c075:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c07a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22c07e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22c083:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22c087:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22c08c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22c090:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22c095:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  22c099:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22c0a0:	c3                   	retq   
  22c0a1:	cc                   	int3   
  22c0a2:	cc                   	int3   
  22c0a3:	cc                   	int3   
  22c0a4:	cc                   	int3   
  22c0a5:	cc                   	int3   
  22c0a6:	cc                   	int3   
  22c0a7:	cc                   	int3   
  22c0a8:	cc                   	int3   
  22c0a9:	cc                   	int3   
  22c0aa:	cc                   	int3   
  22c0ab:	cc                   	int3   
  22c0ac:	cc                   	int3   
  22c0ad:	cc                   	int3   
  22c0ae:	cc                   	int3   
  22c0af:	cc                   	int3   

000000000022c0b0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17hd79f873b25981983E>:
    pub const fn new(user_data: T) -> Mutex<T>
  22c0b0:	48 81 ec 48 18 00 00 	sub    $0x1848,%rsp
  22c0b7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22c0bc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c0c1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
            lock: AtomicBool::new(false),
  22c0c6:	31 ff                	xor    %edi,%edi
  22c0c8:	e8 f3 c9 ff ff       	callq  228ac0 <_ZN4core4sync6atomic10AtomicBool3new17h53fa0440e99a8ae9E>
  22c0cd:	88 84 24 3f 10 00 00 	mov    %al,0x103f(%rsp)
  22c0d4:	8a 84 24 3f 10 00 00 	mov    0x103f(%rsp),%al
  22c0db:	88 44 24 20          	mov    %al,0x20(%rsp)
  22c0df:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            data: UnsafeCell::new(user_data),
  22c0e4:	48 8d bc 24 30 08 00 	lea    0x830(%rsp),%rdi
  22c0eb:	00 
  22c0ec:	ba 08 08 00 00       	mov    $0x808,%edx
  22c0f1:	e8 6a a4 00 00       	callq  236560 <memcpy>
  22c0f6:	48 8d bc 24 40 10 00 	lea    0x1040(%rsp),%rdi
  22c0fd:	00 
  22c0fe:	48 8d b4 24 30 08 00 	lea    0x830(%rsp),%rsi
  22c105:	00 
  22c106:	ba 08 08 00 00       	mov    $0x808,%edx
  22c10b:	e8 50 a4 00 00       	callq  236560 <memcpy>
  22c110:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22c115:	48 8d b4 24 40 10 00 	lea    0x1040(%rsp),%rsi
  22c11c:	00 
  22c11d:	ba 08 08 00 00       	mov    $0x808,%edx
  22c122:	e8 39 a4 00 00       	callq  236560 <memcpy>
  22c127:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        Mutex
  22c12c:	8a 44 24 20          	mov    0x20(%rsp),%al
  22c130:	88 07                	mov    %al,(%rdi)
  22c132:	48 83 c7 08          	add    $0x8,%rdi
  22c136:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22c13b:	ba 08 08 00 00       	mov    $0x808,%edx
  22c140:	e8 1b a4 00 00       	callq  236560 <memcpy>
  22c145:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  22c14a:	48 81 c4 48 18 00 00 	add    $0x1848,%rsp
  22c151:	c3                   	retq   
  22c152:	cc                   	int3   
  22c153:	cc                   	int3   
  22c154:	cc                   	int3   
  22c155:	cc                   	int3   
  22c156:	cc                   	int3   
  22c157:	cc                   	int3   
  22c158:	cc                   	int3   
  22c159:	cc                   	int3   
  22c15a:	cc                   	int3   
  22c15b:	cc                   	int3   
  22c15c:	cc                   	int3   
  22c15d:	cc                   	int3   
  22c15e:	cc                   	int3   
  22c15f:	cc                   	int3   

000000000022c160 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h160c08caa7a52bb0E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c160:	48 83 ec 38          	sub    $0x38,%rsp
  22c164:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c169:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c16e:	e8 cd f3 ff ff       	callq  22b540 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h462a8585c21489fbE>
  22c173:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c178:	48 89 c1             	mov    %rax,%rcx
  22c17b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c17f:	48 83 c0 08          	add    $0x8,%rax
  22c183:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c188:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c18d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c192:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c196:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c19b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c1a0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c1a5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c1aa:	48 83 c4 38          	add    $0x38,%rsp
  22c1ae:	c3                   	retq   
  22c1af:	cc                   	int3   

000000000022c1b0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h31f10766e1811e6aE>:
    pub fn lock(&self) -> MutexGuard<T>
  22c1b0:	48 83 ec 38          	sub    $0x38,%rsp
  22c1b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c1b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c1be:	e8 ed f3 ff ff       	callq  22b5b0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h70b8a68967906d44E>
  22c1c3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c1c8:	48 89 c1             	mov    %rax,%rcx
  22c1cb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c1cf:	48 83 c0 08          	add    $0x8,%rax
  22c1d3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c1d8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c1dd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c1e2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c1e6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c1eb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c1f0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c1f5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c1fa:	48 83 c4 38          	add    $0x38,%rsp
  22c1fe:	c3                   	retq   
  22c1ff:	cc                   	int3   

000000000022c200 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h3fd625933e3ff211E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c200:	48 83 ec 38          	sub    $0x38,%rsp
  22c204:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c209:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c20e:	e8 bd f2 ff ff       	callq  22b4d0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h21a8db4e3cbfa9d6E>
  22c213:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c218:	48 89 c1             	mov    %rax,%rcx
  22c21b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c21f:	48 83 c0 08          	add    $0x8,%rax
  22c223:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c228:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c22d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c232:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c236:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c23b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c240:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c245:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c24a:	48 83 c4 38          	add    $0x38,%rsp
  22c24e:	c3                   	retq   
  22c24f:	cc                   	int3   

000000000022c250 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h66d41be32dbc1371E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c250:	48 83 ec 38          	sub    $0x38,%rsp
  22c254:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c259:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c25e:	e8 2d f4 ff ff       	callq  22b690 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17ha30faba19c3e4b0aE>
  22c263:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c268:	48 89 c1             	mov    %rax,%rcx
  22c26b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c26f:	48 83 c0 08          	add    $0x8,%rax
  22c273:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c278:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c27d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c282:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c286:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c28b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c290:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c295:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c29a:	48 83 c4 38          	add    $0x38,%rsp
  22c29e:	c3                   	retq   
  22c29f:	cc                   	int3   

000000000022c2a0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>:
    pub fn lock(&self) -> MutexGuard<T>
  22c2a0:	48 83 ec 38          	sub    $0x38,%rsp
  22c2a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c2a9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c2ae:	e8 0d f6 ff ff       	callq  22b8c0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he65f1b6d227bbca9E>
  22c2b3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c2b8:	48 89 c1             	mov    %rax,%rcx
  22c2bb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c2bf:	48 83 c0 08          	add    $0x8,%rax
  22c2c3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c2c8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c2cd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c2d2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c2d6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c2db:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c2e0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c2e5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c2ea:	48 83 c4 38          	add    $0x38,%rsp
  22c2ee:	c3                   	retq   
  22c2ef:	cc                   	int3   

000000000022c2f0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h728df519dd9bcd16E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c2f0:	48 83 ec 38          	sub    $0x38,%rsp
  22c2f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c2f9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c2fe:	e8 dd f4 ff ff       	callq  22b7e0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a8f4a34386641fE>
  22c303:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c308:	48 89 c1             	mov    %rax,%rcx
  22c30b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c30f:	48 83 c0 08          	add    $0x8,%rax
  22c313:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c318:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c31d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c322:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c326:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c32b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c330:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c335:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c33a:	48 83 c4 38          	add    $0x38,%rsp
  22c33e:	c3                   	retq   
  22c33f:	cc                   	int3   

000000000022c340 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hb304b52f5116a261E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c340:	48 83 ec 38          	sub    $0x38,%rsp
  22c344:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c349:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c34e:	e8 ad f3 ff ff       	callq  22b700 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17haa35ab0f632878f6E>
  22c353:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c358:	48 89 c1             	mov    %rax,%rcx
  22c35b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c35f:	48 83 c0 08          	add    $0x8,%rax
  22c363:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c368:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c36d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c372:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c376:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c37b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c380:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c385:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c38a:	48 83 c4 38          	add    $0x38,%rsp
  22c38e:	c3                   	retq   
  22c38f:	cc                   	int3   

000000000022c390 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcb2bef4149e2c426E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c390:	48 83 ec 38          	sub    $0x38,%rsp
  22c394:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c399:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c39e:	e8 ad f4 ff ff       	callq  22b850 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he1973699461f3511E>
  22c3a3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c3a8:	48 89 c1             	mov    %rax,%rcx
  22c3ab:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c3af:	48 83 c0 08          	add    $0x8,%rax
  22c3b3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c3b8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c3bd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c3c2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c3c6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c3cb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c3d0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c3d5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c3da:	48 83 c4 38          	add    $0x38,%rsp
  22c3de:	c3                   	retq   
  22c3df:	cc                   	int3   

000000000022c3e0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hcef982bed7f77d39E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c3e0:	48 83 ec 38          	sub    $0x38,%rsp
  22c3e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c3e9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c3ee:	e8 7d f3 ff ff       	callq  22b770 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17he0a5d2b53359c352E>
  22c3f3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c3f8:	48 89 c1             	mov    %rax,%rcx
  22c3fb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c3ff:	48 83 c0 08          	add    $0x8,%rax
  22c403:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c408:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c40d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c412:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c416:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c41b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c420:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c425:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c42a:	48 83 c4 38          	add    $0x38,%rsp
  22c42e:	c3                   	retq   
  22c42f:	cc                   	int3   

000000000022c430 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec73a184c5b52be1E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c430:	48 83 ec 38          	sub    $0x38,%rsp
  22c434:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c439:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c43e:	e8 ed f4 ff ff       	callq  22b930 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17hf34dee2447e51756E>
  22c443:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c448:	48 89 c1             	mov    %rax,%rcx
  22c44b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c44f:	48 83 c0 08          	add    $0x8,%rax
  22c453:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c458:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c45d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c462:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c466:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c46b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c470:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c475:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c47a:	48 83 c4 38          	add    $0x38,%rsp
  22c47e:	c3                   	retq   
  22c47f:	cc                   	int3   

000000000022c480 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hf747a5da2ef31e32E>:
    pub fn lock(&self) -> MutexGuard<T>
  22c480:	48 83 ec 38          	sub    $0x38,%rsp
  22c484:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22c489:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  22c48e:	e8 8d f1 ff ff       	callq  22b620 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h98f003026b16c6d9E>
  22c493:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  22c498:	48 89 c1             	mov    %rax,%rcx
  22c49b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  22c49f:	48 83 c0 10          	add    $0x10,%rax
  22c4a3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c4a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c4ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22c4b2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  22c4b6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22c4bb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22c4c0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22c4c5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22c4ca:	48 83 c4 38          	add    $0x38,%rsp
  22c4ce:	c3                   	retq   
  22c4cf:	cc                   	int3   

000000000022c4d0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h10dc9851f8886a40E>:
    fn deref<'b>(&'b self) -> &'b T { &*self.data }
  22c4d0:	50                   	push   %rax
  22c4d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c4d5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c4d9:	59                   	pop    %rcx
  22c4da:	c3                   	retq   
  22c4db:	cc                   	int3   
  22c4dc:	cc                   	int3   
  22c4dd:	cc                   	int3   
  22c4de:	cc                   	int3   
  22c4df:	cc                   	int3   

000000000022c4e0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3348492b3ac9aa02E>:
  22c4e0:	50                   	push   %rax
  22c4e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c4e5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c4e9:	59                   	pop    %rcx
  22c4ea:	c3                   	retq   
  22c4eb:	cc                   	int3   
  22c4ec:	cc                   	int3   
  22c4ed:	cc                   	int3   
  22c4ee:	cc                   	int3   
  22c4ef:	cc                   	int3   

000000000022c4f0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e2df10100f0c6f0E>:
  22c4f0:	50                   	push   %rax
  22c4f1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c4f5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c4f9:	59                   	pop    %rcx
  22c4fa:	c3                   	retq   
  22c4fb:	cc                   	int3   
  22c4fc:	cc                   	int3   
  22c4fd:	cc                   	int3   
  22c4fe:	cc                   	int3   
  22c4ff:	cc                   	int3   

000000000022c500 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>:
  22c500:	50                   	push   %rax
  22c501:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c505:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c509:	59                   	pop    %rcx
  22c50a:	c3                   	retq   
  22c50b:	cc                   	int3   
  22c50c:	cc                   	int3   
  22c50d:	cc                   	int3   
  22c50e:	cc                   	int3   
  22c50f:	cc                   	int3   

000000000022c510 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9c7c4d96d39da19dE>:
  22c510:	50                   	push   %rax
  22c511:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c515:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c519:	59                   	pop    %rcx
  22c51a:	c3                   	retq   
  22c51b:	cc                   	int3   
  22c51c:	cc                   	int3   
  22c51d:	cc                   	int3   
  22c51e:	cc                   	int3   
  22c51f:	cc                   	int3   

000000000022c520 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb39a6dc4401dd1b9E>:
  22c520:	50                   	push   %rax
  22c521:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c525:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c529:	59                   	pop    %rcx
  22c52a:	c3                   	retq   
  22c52b:	cc                   	int3   
  22c52c:	cc                   	int3   
  22c52d:	cc                   	int3   
  22c52e:	cc                   	int3   
  22c52f:	cc                   	int3   

000000000022c530 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd530693fc41831cbE>:
  22c530:	50                   	push   %rax
  22c531:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c535:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c539:	59                   	pop    %rcx
  22c53a:	c3                   	retq   
  22c53b:	cc                   	int3   
  22c53c:	cc                   	int3   
  22c53d:	cc                   	int3   
  22c53e:	cc                   	int3   
  22c53f:	cc                   	int3   

000000000022c540 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf74ad91b97ad1486E>:
  22c540:	50                   	push   %rax
  22c541:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c545:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c549:	59                   	pop    %rcx
  22c54a:	c3                   	retq   
  22c54b:	cc                   	int3   
  22c54c:	cc                   	int3   
  22c54d:	cc                   	int3   
  22c54e:	cc                   	int3   
  22c54f:	cc                   	int3   

000000000022c550 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h002f604e3334e323E>:
    fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
  22c550:	50                   	push   %rax
  22c551:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c555:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c559:	59                   	pop    %rcx
  22c55a:	c3                   	retq   
  22c55b:	cc                   	int3   
  22c55c:	cc                   	int3   
  22c55d:	cc                   	int3   
  22c55e:	cc                   	int3   
  22c55f:	cc                   	int3   

000000000022c560 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h38ff0685dff93a09E>:
  22c560:	50                   	push   %rax
  22c561:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c565:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c569:	59                   	pop    %rcx
  22c56a:	c3                   	retq   
  22c56b:	cc                   	int3   
  22c56c:	cc                   	int3   
  22c56d:	cc                   	int3   
  22c56e:	cc                   	int3   
  22c56f:	cc                   	int3   

000000000022c570 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3ae5ac151c21364eE>:
  22c570:	50                   	push   %rax
  22c571:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c575:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c579:	59                   	pop    %rcx
  22c57a:	c3                   	retq   
  22c57b:	cc                   	int3   
  22c57c:	cc                   	int3   
  22c57d:	cc                   	int3   
  22c57e:	cc                   	int3   
  22c57f:	cc                   	int3   

000000000022c580 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h991887e63f8efb60E>:
  22c580:	50                   	push   %rax
  22c581:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c585:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c589:	59                   	pop    %rcx
  22c58a:	c3                   	retq   
  22c58b:	cc                   	int3   
  22c58c:	cc                   	int3   
  22c58d:	cc                   	int3   
  22c58e:	cc                   	int3   
  22c58f:	cc                   	int3   

000000000022c590 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9cb541df554cce1fE>:
  22c590:	50                   	push   %rax
  22c591:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c595:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c599:	59                   	pop    %rcx
  22c59a:	c3                   	retq   
  22c59b:	cc                   	int3   
  22c59c:	cc                   	int3   
  22c59d:	cc                   	int3   
  22c59e:	cc                   	int3   
  22c59f:	cc                   	int3   

000000000022c5a0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbcafc1d0b2686958E>:
  22c5a0:	50                   	push   %rax
  22c5a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c5a5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c5a9:	59                   	pop    %rcx
  22c5aa:	c3                   	retq   
  22c5ab:	cc                   	int3   
  22c5ac:	cc                   	int3   
  22c5ad:	cc                   	int3   
  22c5ae:	cc                   	int3   
  22c5af:	cc                   	int3   

000000000022c5b0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf4deabd02622e74dE>:
  22c5b0:	50                   	push   %rax
  22c5b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  22c5b5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  22c5b9:	59                   	pop    %rcx
  22c5ba:	c3                   	retq   
  22c5bb:	cc                   	int3   
  22c5bc:	cc                   	int3   
  22c5bd:	cc                   	int3   
  22c5be:	cc                   	int3   
  22c5bf:	cc                   	int3   

000000000022c5c0 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>:
    pub fn write_channel_0(&self, value: u8) {
  22c5c0:	48 83 ec 38          	sub    $0x38,%rsp
  22c5c4:	40 88 f0             	mov    %sil,%al
  22c5c7:	88 44 24 17          	mov    %al,0x17(%rsp)
  22c5cb:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22c5d0:	88 44 24 37          	mov    %al,0x37(%rsp)
        self.channel_0.lock().write_u8(value);
  22c5d4:	e8 c7 fc ff ff       	callq  22c2a0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>
  22c5d9:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22c5de:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22c5e3:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c5e8:	e8 13 ff ff ff       	callq  22c500 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>
  22c5ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c5f2:	8a 44 24 17          	mov    0x17(%rsp),%al
  22c5f6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22c5fb:	0f b6 f0             	movzbl %al,%esi
  22c5fe:	e8 ad b1 fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  22c603:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c608:	e8 33 f4 fd ff       	callq  20ba40 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>
    }
  22c60d:	48 83 c4 38          	add    $0x38,%rsp
  22c611:	c3                   	retq   
  22c612:	cc                   	int3   
  22c613:	cc                   	int3   
  22c614:	cc                   	int3   
  22c615:	cc                   	int3   
  22c616:	cc                   	int3   
  22c617:	cc                   	int3   
  22c618:	cc                   	int3   
  22c619:	cc                   	int3   
  22c61a:	cc                   	int3   
  22c61b:	cc                   	int3   
  22c61c:	cc                   	int3   
  22c61d:	cc                   	int3   
  22c61e:	cc                   	int3   
  22c61f:	cc                   	int3   

000000000022c620 <_ZN9r3_kernel3cpu3pit17PITCommandControl13write_command17h0decc7c4e0ef2021E>:
    pub fn write_command(&self, value: u8) {
  22c620:	48 83 ec 38          	sub    $0x38,%rsp
  22c624:	40 88 f0             	mov    %sil,%al
  22c627:	88 44 24 17          	mov    %al,0x17(%rsp)
  22c62b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22c630:	88 44 24 37          	mov    %al,0x37(%rsp)
        self.command.lock().write_u8(value);
  22c634:	48 83 c7 30          	add    $0x30,%rdi
  22c638:	e8 63 fc ff ff       	callq  22c2a0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h674f0f76446574daE>
  22c63d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22c642:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22c647:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c64c:	e8 af fe ff ff       	callq  22c500 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h94c346c6c4afa935E>
  22c651:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c656:	8a 44 24 17          	mov    0x17(%rsp),%al
  22c65a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22c65f:	0f b6 f0             	movzbl %al,%esi
  22c662:	e8 49 b1 fe ff       	callq  2177b0 <_ZN9r3_kernel3cpu2io4Port8write_u817h24b7bd3a07bb48c3E>
  22c667:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22c66c:	e8 cf f3 fd ff       	callq  20ba40 <_ZN4core3ptr76drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..io..Port$GT$$GT$17h4685a71d2cc0f5c8E>
    }
  22c671:	48 83 c4 38          	add    $0x38,%rsp
  22c675:	c3                   	retq   
  22c676:	cc                   	int3   
  22c677:	cc                   	int3   
  22c678:	cc                   	int3   
  22c679:	cc                   	int3   
  22c67a:	cc                   	int3   
  22c67b:	cc                   	int3   
  22c67c:	cc                   	int3   
  22c67d:	cc                   	int3   
  22c67e:	cc                   	int3   
  22c67f:	cc                   	int3   

000000000022c680 <_ZN9r3_kernel3cpu3pit17PITCommandControl3new17hb4c1e4530fd4909aE>:
    pub fn new() -> PITCommandControl {
  22c680:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22c687:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22c68c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
            channel_0: Mutex::new(Port::new(PIT_CMD_CHANNEL_0, false)),
  22c691:	bf 40 00 00 00       	mov    $0x40,%edi
  22c696:	31 f6                	xor    %esi,%esi
  22c698:	e8 c3 b0 fe ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22c69d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c6a2:	88 54 24 3f          	mov    %dl,0x3f(%rsp)
  22c6a6:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22c6ab:	8a 44 24 3f          	mov    0x3f(%rsp),%al
  22c6af:	0f b6 d0             	movzbl %al,%edx
  22c6b2:	83 e2 01             	and    $0x1,%edx
  22c6b5:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22c6ba:	e8 f1 f4 ff ff       	callq  22bbb0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
            channel_1: Mutex::new(Port::new(PIT_CMD_CHANNEL_2, false)),
  22c6bf:	bf 42 00 00 00       	mov    $0x42,%edi
  22c6c4:	31 f6                	xor    %esi,%esi
  22c6c6:	e8 95 b0 fe ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22c6cb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22c6d0:	88 54 24 1f          	mov    %dl,0x1f(%rsp)
  22c6d4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22c6d9:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22c6dd:	0f b6 d0             	movzbl %al,%edx
  22c6e0:	83 e2 01             	and    $0x1,%edx
  22c6e3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22c6e8:	e8 c3 f4 ff ff       	callq  22bbb0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
            command: Mutex::new(Port::new(PIT_COMMAND_REGISTER, false)),
  22c6ed:	bf 43 00 00 00       	mov    $0x43,%edi
  22c6f2:	31 f6                	xor    %esi,%esi
  22c6f4:	e8 67 b0 fe ff       	callq  217760 <_ZN9r3_kernel3cpu2io4Port3new17h7d2c444999b33345E>
  22c6f9:	48 89 04 24          	mov    %rax,(%rsp)
  22c6fd:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  22c701:	48 8b 34 24          	mov    (%rsp),%rsi
  22c705:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22c709:	0f b6 d0             	movzbl %al,%edx
  22c70c:	83 e2 01             	and    $0x1,%edx
  22c70f:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  22c714:	e8 97 f4 ff ff       	callq  22bbb0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h5eaea9ab5a67ae27E>
  22c719:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22c71e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        PITCommandControl {
  22c723:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22c728:	48 89 11             	mov    %rdx,(%rcx)
  22c72b:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  22c730:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  22c734:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  22c739:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  22c73d:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22c742:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  22c746:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
  22c74b:	48 89 51 20          	mov    %rdx,0x20(%rcx)
  22c74f:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  22c754:	48 89 51 28          	mov    %rdx,0x28(%rcx)
  22c758:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  22c75d:	48 89 51 30          	mov    %rdx,0x30(%rcx)
  22c761:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  22c766:	48 89 51 38          	mov    %rdx,0x38(%rcx)
  22c76a:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  22c771:	00 
  22c772:	48 89 51 40          	mov    %rdx,0x40(%rcx)
    }
  22c776:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22c77d:	c3                   	retq   
  22c77e:	cc                   	int3   
  22c77f:	cc                   	int3   

000000000022c780 <_ZN9r3_kernel3cpu3pit4init17hf03d8e373d7c27d5E>:
pub fn init() -> PITCommandControl {
  22c780:	50                   	push   %rax
  22c781:	48 89 f8             	mov    %rdi,%rax
  22c784:	48 89 04 24          	mov    %rax,(%rsp)
    let pit = PITCommandControl::new();
  22c788:	e8 f3 fe ff ff       	callq  22c680 <_ZN9r3_kernel3cpu3pit17PITCommandControl3new17hb4c1e4530fd4909aE>
  22c78d:	48 8b 04 24          	mov    (%rsp),%rax
}
  22c791:	59                   	pop    %rcx
  22c792:	c3                   	retq   
  22c793:	cc                   	int3   
  22c794:	cc                   	int3   
  22c795:	cc                   	int3   
  22c796:	cc                   	int3   
  22c797:	cc                   	int3   
  22c798:	cc                   	int3   
  22c799:	cc                   	int3   
  22c79a:	cc                   	int3   
  22c79b:	cc                   	int3   
  22c79c:	cc                   	int3   
  22c79d:	cc                   	int3   
  22c79e:	cc                   	int3   
  22c79f:	cc                   	int3   

000000000022c7a0 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E>:
}

static PIT_TICKS: AtomicUsize = AtomicUsize::new(0);

fn setup_timer(frequency: u32) -> u64 {
  22c7a0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  22c7a7:	89 7c 24 2c          	mov    %edi,0x2c(%rsp)
  22c7ab:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
    let pit: &PITCommandControl = &PIT;
  22c7b2:	48 8d 3d 4a 6e fd ff 	lea    -0x291b6(%rip),%rdi        # 203603 <_ZN9r3_kernel3cpu3pit3PIT17h1f51a7dcf045f9f5E>
  22c7b9:	e8 a2 03 00 00       	callq  22cb60 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h727fb5f3479384ceE>
  22c7be:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22c7c3:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  22c7c7:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22c7cc:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  22c7d3:	00 
    let div = PIT_OSCILLATION_FREQUENCY / frequency;
  22c7d4:	83 f8 00             	cmp    $0x0,%eax
  22c7d7:	0f 94 c0             	sete   %al
  22c7da:	a8 01                	test   $0x1,%al
  22c7dc:	75 1a                	jne    22c7f8 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x58>
  22c7de:	8b 4c 24 2c          	mov    0x2c(%rsp),%ecx
  22c7e2:	b8 de 34 12 00       	mov    $0x1234de,%eax
  22c7e7:	31 d2                	xor    %edx,%edx
  22c7e9:	f7 f1                	div    %ecx
  22c7eb:	89 44 24 28          	mov    %eax,0x28(%rsp)
  22c7ef:	89 84 24 94 00 00 00 	mov    %eax,0x94(%rsp)

    if div > (u16::max_value() as u32) {
  22c7f6:	eb 1a                	jmp    22c812 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x72>
    let div = PIT_OSCILLATION_FREQUENCY / frequency;
  22c7f8:	48 8d 3d a1 6d fd ff 	lea    -0x2925f(%rip),%rdi        # 2035a0 <str.0>
  22c7ff:	48 8d 15 da dc 00 00 	lea    0xdcda(%rip),%rdx        # 23a4e0 <memcmp+0x3f30>
  22c806:	be 19 00 00 00       	mov    $0x19,%esi
  22c80b:	e8 50 6c 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22c810:	0f 0b                	ud2    
  22c812:	8b 44 24 28          	mov    0x28(%rsp),%eax
    if div > (u16::max_value() as u32) {
  22c816:	66 b9 ff ff          	mov    $0xffff,%cx
  22c81a:	0f b7 c9             	movzwl %cx,%ecx
  22c81d:	39 c8                	cmp    %ecx,%eax
  22c81f:	77 11                	ja     22c832 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x92>
  22c821:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            "The choosen PIT frequency should be atleast > {}",
            PIT_LEAST_FREQUENCY
        );
    }

    pit.write_command(0b00_11_010_0);
  22c826:	be 34 00 00 00       	mov    $0x34,%esi
  22c82b:	e8 f0 fd ff ff       	callq  22c620 <_ZN9r3_kernel3cpu3pit17PITCommandControl13write_command17h0decc7c4e0ef2021E>
  22c830:	eb 75                	jmp    22c8a7 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x107>
        panic!(
  22c832:	48 8d 05 27 41 fd ff 	lea    -0x2bed9(%rip),%rax        # 200960 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x28>
  22c839:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22c83e:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  22c843:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22c84a:	00 
  22c84b:	48 8b 35 2e e9 00 00 	mov    0xe92e(%rip),%rsi        # 23b180 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  22c852:	e8 49 20 fe ff       	callq  20e8a0 <_ZN4core3fmt10ArgumentV13new17h4c12aebca66e1710E>
  22c857:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22c85c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22c861:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22c866:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22c86b:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22c870:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22c875:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  22c87a:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22c87f:	48 8d 35 72 dc 00 00 	lea    0xdc72(%rip),%rsi        # 23a4f8 <memcmp+0x3f48>
  22c886:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22c88c:	4c 89 c2             	mov    %r8,%rdx
  22c88f:	e8 2c 9a fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22c894:	48 8d 35 6d dc 00 00 	lea    0xdc6d(%rip),%rsi        # 23a508 <memcmp+0x3f58>
  22c89b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22c8a0:	e8 8b 6c 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  22c8a5:	0f 0b                	ud2    
  22c8a7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22c8ac:	8b 44 24 28          	mov    0x28(%rsp),%eax
    pit.write_channel_0(div as u8);
  22c8b0:	0f b6 f0             	movzbl %al,%esi
  22c8b3:	e8 08 fd ff ff       	callq  22c5c0 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>
  22c8b8:	8b 44 24 28          	mov    0x28(%rsp),%eax
    pit.write_channel_0((div >> 8) as u8);
  22c8bc:	c1 e8 08             	shr    $0x8,%eax
  22c8bf:	89 44 24 14          	mov    %eax,0x14(%rsp)
  22c8c3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22c8c8:	8b 44 24 14          	mov    0x14(%rsp),%eax
  22c8cc:	0f b6 f0             	movzbl %al,%esi
  22c8cf:	e8 ec fc ff ff       	callq  22c5c0 <_ZN9r3_kernel3cpu3pit17PITCommandControl15write_channel_017hf44f2faad6b05db4E>
  22c8d4:	8b 44 24 28          	mov    0x28(%rsp),%eax

    let running_frequency = PIT_OSCILLATION_FREQUENCY / div;
  22c8d8:	83 f8 00             	cmp    $0x0,%eax
  22c8db:	0f 94 c0             	sete   %al
  22c8de:	a8 01                	test   $0x1,%al
  22c8e0:	75 28                	jne    22c90a <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x16a>
  22c8e2:	8b 4c 24 28          	mov    0x28(%rsp),%ecx
  22c8e6:	b8 de 34 12 00       	mov    $0x1234de,%eax
  22c8eb:	31 d2                	xor    %edx,%edx
  22c8ed:	f7 f1                	div    %ecx
  22c8ef:	89 84 24 a4 00 00 00 	mov    %eax,0xa4(%rsp)

    // 1 ns
    return 1000000000 / (running_frequency as u64);
  22c8f6:	89 c0                	mov    %eax,%eax
  22c8f8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22c8fd:	48 83 f8 00          	cmp    $0x0,%rax
  22c901:	0f 94 c0             	sete   %al
  22c904:	a8 01                	test   $0x1,%al
  22c906:	75 33                	jne    22c93b <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x19b>
  22c908:	eb 1a                	jmp    22c924 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E+0x184>
    let running_frequency = PIT_OSCILLATION_FREQUENCY / div;
  22c90a:	48 8d 3d 8f 6c fd ff 	lea    -0x29371(%rip),%rdi        # 2035a0 <str.0>
  22c911:	48 8d 15 08 dc 00 00 	lea    0xdc08(%rip),%rdx        # 23a520 <memcmp+0x3f70>
  22c918:	be 19 00 00 00       	mov    $0x19,%esi
  22c91d:	e8 3e 6b 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22c922:	0f 0b                	ud2    
  22c924:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    return 1000000000 / (running_frequency as u64);
  22c929:	b8 00 ca 9a 3b       	mov    $0x3b9aca00,%eax
  22c92e:	31 d2                	xor    %edx,%edx
  22c930:	48 f7 f1             	div    %rcx
}
  22c933:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  22c93a:	c3                   	retq   
    return 1000000000 / (running_frequency as u64);
  22c93b:	48 8d 3d 5e 6c fd ff 	lea    -0x293a2(%rip),%rdi        # 2035a0 <str.0>
  22c942:	48 8d 15 ef db 00 00 	lea    0xdbef(%rip),%rdx        # 23a538 <memcmp+0x3f88>
  22c949:	be 19 00 00 00       	mov    $0x19,%esi
  22c94e:	e8 0d 6b 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22c953:	0f 0b                	ud2    
  22c955:	cc                   	int3   
  22c956:	cc                   	int3   
  22c957:	cc                   	int3   
  22c958:	cc                   	int3   
  22c959:	cc                   	int3   
  22c95a:	cc                   	int3   
  22c95b:	cc                   	int3   
  22c95c:	cc                   	int3   
  22c95d:	cc                   	int3   
  22c95e:	cc                   	int3   
  22c95f:	cc                   	int3   

000000000022c960 <_ZN9r3_kernel3cpu3pit12pit_callback17ha4008cf7d5ddd5c3E>:

#[inline]
pub fn pit_callback() {
  22c960:	50                   	push   %rax
    PIT_TICKS.fetch_add(1, Ordering::SeqCst);
  22c961:	c6 44 24 07 04       	movb   $0x4,0x7(%rsp)
  22c966:	48 8d 3d 63 65 01 00 	lea    0x16563(%rip),%rdi        # 242ed0 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22c96d:	be 01 00 00 00       	mov    $0x1,%esi
  22c972:	0f b6 54 24 07       	movzbl 0x7(%rsp),%edx
  22c977:	e8 c4 c3 ff ff       	callq  228d40 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6ef004abf18267a1E>
}
  22c97c:	58                   	pop    %rax
  22c97d:	c3                   	retq   
  22c97e:	cc                   	int3   
  22c97f:	cc                   	int3   

000000000022c980 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E>:

pub fn sleep_ns(ns: u64) {
  22c980:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  22c987:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22c98c:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  22c993:	00 
    PIT_TICKS.store(0, Ordering::SeqCst);
  22c994:	c6 44 24 3f 04       	movb   $0x4,0x3f(%rsp)
  22c999:	48 8d 3d 30 65 01 00 	lea    0x16530(%rip),%rdi        # 242ed0 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22c9a0:	31 c0                	xor    %eax,%eax
  22c9a2:	89 c6                	mov    %eax,%esi
  22c9a4:	0f b6 54 24 3f       	movzbl 0x3f(%rsp),%edx
  22c9a9:	e8 52 c3 ff ff       	callq  228d00 <_ZN4core4sync6atomic11AtomicUsize5store17h4c3fd8ca10ebd78dE>

    // set with 1000hz initially
    let ns_in_tick = setup_timer(1000);
  22c9ae:	bf e8 03 00 00       	mov    $0x3e8,%edi
  22c9b3:	e8 e8 fd ff ff       	callq  22c7a0 <_ZN9r3_kernel3cpu3pit11setup_timer17h747ec09794d38119E>
  22c9b8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22c9bd:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22c9c4:	00 
  22c9c5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax

    let n_ticks = (ns / ns_in_tick) as usize;
  22c9ca:	48 83 f8 00          	cmp    $0x0,%rax
  22c9ce:	0f 94 c0             	sete   %al
  22c9d1:	a8 01                	test   $0x1,%al
  22c9d3:	75 34                	jne    22ca09 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x89>
  22c9d5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22c9da:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22c9df:	31 d2                	xor    %edx,%edx
  22c9e1:	48 f7 f1             	div    %rcx
  22c9e4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)

    log::debug!("n_ticks: {}", n_ticks);
  22c9e9:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  22c9f0:	00 00 
  22c9f2:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22c9f7:	48 8d 35 3a 3c fd ff 	lea    -0x2c3c6(%rip),%rsi        # 200638 <str.0+0x118>
  22c9fe:	e8 ed 50 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ca03:	88 44 24 27          	mov    %al,0x27(%rsp)
  22ca07:	eb 1a                	jmp    22ca23 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xa3>
    let n_ticks = (ns / ns_in_tick) as usize;
  22ca09:	48 8d 3d 90 6b fd ff 	lea    -0x29470(%rip),%rdi        # 2035a0 <str.0>
  22ca10:	48 8d 15 39 db 00 00 	lea    0xdb39(%rip),%rdx        # 23a550 <memcmp+0x3fa0>
  22ca17:	be 19 00 00 00       	mov    $0x19,%esi
  22ca1c:	e8 3f 6a 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ca21:	0f 0b                	ud2    
  22ca23:	8a 44 24 27          	mov    0x27(%rsp),%al
    log::debug!("n_ticks: {}", n_ticks);
  22ca27:	a8 01                	test   $0x1,%al
  22ca29:	75 09                	jne    22ca34 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xb4>
  22ca2b:	eb 00                	jmp    22ca2d <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0xad>
  22ca2d:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22ca32:	eb 4e                	jmp    22ca82 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x102>
  22ca34:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  22ca3b:	00 
  22ca3c:	48 8b 3d cd e6 00 00 	mov    0xe6cd(%rip),%rdi        # 23b110 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  22ca43:	0f b6 b4 24 cf 00 00 	movzbl 0xcf(%rsp),%esi
  22ca4a:	00 
  22ca4b:	e8 70 c2 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22ca50:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22ca57:	00 
  22ca58:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22ca5f:	00 
  22ca60:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22ca65:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  22ca6a:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  22ca6f:	e8 7c 50 fe ff       	callq  211af0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5de2a90a8cac253cE>
  22ca74:	88 44 24 26          	mov    %al,0x26(%rsp)
  22ca78:	8a 44 24 26          	mov    0x26(%rsp),%al
  22ca7c:	24 01                	and    $0x1,%al
  22ca7e:	88 44 24 57          	mov    %al,0x57(%rsp)
  22ca82:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22ca87:	75 06                	jne    22ca8f <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x10f>

    unsafe {
        asm!("sti");
  22ca89:	fb                   	sti    
  22ca8a:	e9 8a 00 00 00       	jmpq   22cb19 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x199>
    log::debug!("n_ticks: {}", n_ticks);
  22ca8f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  22ca94:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22ca9b:	00 
  22ca9c:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  22caa3:	00 
  22caa4:	48 89 bc 24 c0 00 00 	mov    %rdi,0xc0(%rsp)
  22caab:	00 
  22caac:	48 8b 35 75 e6 00 00 	mov    0xe675(%rip),%rsi        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  22cab3:	e8 c8 22 fe ff       	callq  20ed80 <_ZN4core3fmt10ArgumentV13new17hac7efebe1c4fb74aE>
  22cab8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22cabd:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22cac2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22cac7:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22cacc:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  22cad3:	00 
  22cad4:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22cadb:	00 
  22cadc:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  22cae3:	00 
  22cae4:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22cae9:	48 8d 35 78 da 00 00 	lea    0xda78(%rip),%rsi        # 23a568 <memcmp+0x3fb8>
  22caf0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  22caf6:	4c 89 c2             	mov    %r8,%rdx
  22caf9:	e8 c2 97 fd ff       	callq  2062c0 <_ZN4core3fmt9Arguments6new_v117he3c1c6398bea8a81E>
  22cafe:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  22cb03:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  22cb08:	48 8d 15 69 da 00 00 	lea    0xda69(%rip),%rdx        # 23a578 <memcmp+0x3fc8>
  22cb0f:	e8 dc 3a 00 00       	callq  2305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  22cb14:	e9 70 ff ff ff       	jmpq   22ca89 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x109>
        while PIT_TICKS.load(Ordering::SeqCst) < n_ticks {
  22cb19:	c6 84 24 af 00 00 00 	movb   $0x4,0xaf(%rsp)
  22cb20:	04 
  22cb21:	48 8d 3d a8 63 01 00 	lea    0x163a8(%rip),%rdi        # 242ed0 <_ZN9r3_kernel3cpu3pit9PIT_TICKS17h9c0eda67c117e453E>
  22cb28:	0f b6 b4 24 af 00 00 	movzbl 0xaf(%rsp),%esi
  22cb2f:	00 
  22cb30:	e8 8b c1 ff ff       	callq  228cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h676aa25949b33a83E>
  22cb35:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22cb3a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22cb3f:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  22cb44:	72 03                	jb     22cb49 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x1c9>
            asm!("hlt");
        }

        asm!("cli");
  22cb46:	fa                   	cli    
  22cb47:	eb 03                	jmp    22cb4c <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x1cc>
            asm!("hlt");
  22cb49:	f4                   	hlt    
  22cb4a:	eb cd                	jmp    22cb19 <_ZN9r3_kernel3cpu3pit8sleep_ns17h4bc195b87f354f25E+0x199>
    }
}
  22cb4c:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  22cb53:	c3                   	retq   
  22cb54:	cc                   	int3   
  22cb55:	cc                   	int3   
  22cb56:	cc                   	int3   
  22cb57:	cc                   	int3   
  22cb58:	cc                   	int3   
  22cb59:	cc                   	int3   
  22cb5a:	cc                   	int3   
  22cb5b:	cc                   	int3   
  22cb5c:	cc                   	int3   
  22cb5d:	cc                   	int3   
  22cb5e:	cc                   	int3   
  22cb5f:	cc                   	int3   

000000000022cb60 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h727fb5f3479384ceE>:
            fn deref(&self) -> &$T {
  22cb60:	48 83 ec 18          	sub    $0x18,%rsp
  22cb64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22cb69:	48 8d 05 68 63 01 00 	lea    0x16368(%rip),%rax        # 242ed8 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h653ac4e4ec9d5be3E>
  22cb70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22cb75:	48 8d 3d 5c 63 01 00 	lea    0x1635c(%rip),%rdi        # 242ed8 <_ZN68_$LT$r3_kernel..cpu..pit..PIT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h653ac4e4ec9d5be3E>
  22cb7c:	e8 0f cb fd ff       	callq  209690 <_ZN4spin4once13Once$LT$T$GT$9call_once17hb642ad19db6dfdd1E>
  22cb81:	48 89 04 24          	mov    %rax,(%rsp)
  22cb85:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22cb89:	48 83 c4 18          	add    $0x18,%rsp
  22cb8d:	c3                   	retq   
  22cb8e:	cc                   	int3   
  22cb8f:	cc                   	int3   

000000000022cb90 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl PartialEq for str {
    #[inline]
    fn eq(&self, other: &str) -> bool {
  22cb90:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  22cb97:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22cb9c:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22cba1:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22cba6:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22cbab:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  22cbb0:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22cbb5:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  22cbba:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  22cbc1:	00 
  22cbc2:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  22cbc9:	00 
  22cbca:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  22cbd1:	00 
  22cbd2:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22cbd9:	00 
  22cbda:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  22cbe1:	00 
        self.as_bytes() == other.as_bytes()
  22cbe2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  22cbe7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22cbec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22cbf1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22cbf6:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  22cbfb:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22cc00:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22cc05:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22cc0a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22cc0f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22cc14:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22cc19:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22cc1e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22cc23:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  22cc28:	e8 53 c2 ff ff       	callq  228e80 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h4059f29c83e0e679E>
  22cc2d:	88 44 24 07          	mov    %al,0x7(%rsp)
  22cc31:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22cc35:	24 01                	and    $0x1,%al
  22cc37:	0f b6 c0             	movzbl %al,%eax
  22cc3a:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  22cc41:	c3                   	retq   
  22cc42:	cc                   	int3   
  22cc43:	cc                   	int3   
  22cc44:	cc                   	int3   
  22cc45:	cc                   	int3   
  22cc46:	cc                   	int3   
  22cc47:	cc                   	int3   
  22cc48:	cc                   	int3   
  22cc49:	cc                   	int3   
  22cc4a:	cc                   	int3   
  22cc4b:	cc                   	int3   
  22cc4c:	cc                   	int3   
  22cc4d:	cc                   	int3   
  22cc4e:	cc                   	int3   
  22cc4f:	cc                   	int3   

000000000022cc50 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2ne17he788fbf8f176b944E>:
    #[inline]
    fn ne(&self, other: &str) -> bool {
  22cc50:	48 83 ec 28          	sub    $0x28,%rsp
  22cc54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22cc59:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22cc5e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22cc63:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
        !(*self).eq(other)
  22cc68:	e8 23 ff ff ff       	callq  22cb90 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hb093209c7fafbfbcE>
  22cc6d:	88 44 24 07          	mov    %al,0x7(%rsp)
  22cc71:	8a 44 24 07          	mov    0x7(%rsp),%al
  22cc75:	34 ff                	xor    $0xff,%al
    }
  22cc77:	24 01                	and    $0x1,%al
  22cc79:	0f b6 c0             	movzbl %al,%eax
  22cc7c:	48 83 c4 28          	add    $0x28,%rsp
  22cc80:	c3                   	retq   
  22cc81:	cc                   	int3   
  22cc82:	cc                   	int3   
  22cc83:	cc                   	int3   
  22cc84:	cc                   	int3   
  22cc85:	cc                   	int3   
  22cc86:	cc                   	int3   
  22cc87:	cc                   	int3   
  22cc88:	cc                   	int3   
  22cc89:	cc                   	int3   
  22cc8a:	cc                   	int3   
  22cc8b:	cc                   	int3   
  22cc8c:	cc                   	int3   
  22cc8d:	cc                   	int3   
  22cc8e:	cc                   	int3   
  22cc8f:	cc                   	int3   

000000000022cc90 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h8428de84206d5ca3E>:

macro_rules! integer_sum_product {
    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(
        #[$attr]
        impl Sum for $a {
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
  22cc90:	48 83 ec 18          	sub    $0x18,%rsp
  22cc94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22cc99:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                iter.fold(
  22cc9e:	31 c0                	xor    %eax,%eax
  22cca0:	89 c2                	mov    %eax,%edx
  22cca2:	e8 f9 3e fe ff       	callq  210ba0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc18e36f70da5f5c7E>
  22cca7:	48 89 04 24          	mov    %rax,(%rsp)
  22ccab:	48 8b 04 24          	mov    (%rsp),%rax
                    $zero,
                    #[rustc_inherit_overflow_checks]
                    |a, b| a + b,
                )
            }
  22ccaf:	48 83 c4 18          	add    $0x18,%rsp
  22ccb3:	c3                   	retq   
  22ccb4:	cc                   	int3   
  22ccb5:	cc                   	int3   
  22ccb6:	cc                   	int3   
  22ccb7:	cc                   	int3   
  22ccb8:	cc                   	int3   
  22ccb9:	cc                   	int3   
  22ccba:	cc                   	int3   
  22ccbb:	cc                   	int3   
  22ccbc:	cc                   	int3   
  22ccbd:	cc                   	int3   
  22ccbe:	cc                   	int3   
  22ccbf:	cc                   	int3   

000000000022ccc0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h94087771308e1a59E>:
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
  22ccc0:	48 83 ec 18          	sub    $0x18,%rsp
  22ccc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ccc9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
                iter.fold(
  22ccce:	31 c0                	xor    %eax,%eax
  22ccd0:	89 c2                	mov    %eax,%edx
  22ccd2:	e8 19 3f fe ff       	callq  210bf0 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hd5e1626c4c81dd16E>
  22ccd7:	48 89 04 24          	mov    %rax,(%rsp)
  22ccdb:	48 8b 04 24          	mov    (%rsp),%rax
            }
  22ccdf:	48 83 c4 18          	add    $0x18,%rsp
  22cce3:	c3                   	retq   
  22cce4:	cc                   	int3   
  22cce5:	cc                   	int3   
  22cce6:	cc                   	int3   
  22cce7:	cc                   	int3   
  22cce8:	cc                   	int3   
  22cce9:	cc                   	int3   
  22ccea:	cc                   	int3   
  22cceb:	cc                   	int3   
  22ccec:	cc                   	int3   
  22cced:	cc                   	int3   
  22ccee:	cc                   	int3   
  22ccef:	cc                   	int3   

000000000022ccf0 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E>:
                    |a, b| a + b,
  22ccf0:	48 83 ec 28          	sub    $0x28,%rsp
  22ccf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ccf9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22ccfe:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22cd03:	48 01 d6             	add    %rdx,%rsi
  22cd06:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22cd0b:	0f 92 c0             	setb   %al
  22cd0e:	a8 01                	test   $0x1,%al
  22cd10:	75 0a                	jne    22cd1c <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hc2de77ca51dba765E+0x2c>
  22cd12:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22cd17:	48 83 c4 28          	add    $0x28,%rsp
  22cd1b:	c3                   	retq   
  22cd1c:	48 8d 3d 6d 69 fd ff 	lea    -0x29693(%rip),%rdi        # 203690 <str.0>
  22cd23:	48 8d 15 86 d8 00 00 	lea    0xd886(%rip),%rdx        # 23a5b0 <memcmp+0x4000>
  22cd2a:	be 1c 00 00 00       	mov    $0x1c,%esi
  22cd2f:	e8 2c 67 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22cd34:	0f 0b                	ud2    
  22cd36:	cc                   	int3   
  22cd37:	cc                   	int3   
  22cd38:	cc                   	int3   
  22cd39:	cc                   	int3   
  22cd3a:	cc                   	int3   
  22cd3b:	cc                   	int3   
  22cd3c:	cc                   	int3   
  22cd3d:	cc                   	int3   
  22cd3e:	cc                   	int3   
  22cd3f:	cc                   	int3   

000000000022cd40 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E>:
  22cd40:	48 83 ec 28          	sub    $0x28,%rsp
  22cd44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22cd49:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22cd4e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22cd53:	48 01 d6             	add    %rdx,%rsi
  22cd56:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22cd5b:	0f 92 c0             	setb   %al
  22cd5e:	a8 01                	test   $0x1,%al
  22cd60:	75 0a                	jne    22cd6c <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17hec2c6d51c1e33353E+0x2c>
  22cd62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22cd67:	48 83 c4 28          	add    $0x28,%rsp
  22cd6b:	c3                   	retq   
  22cd6c:	48 8d 3d 1d 69 fd ff 	lea    -0x296e3(%rip),%rdi        # 203690 <str.0>
  22cd73:	48 8d 15 36 d8 00 00 	lea    0xd836(%rip),%rdx        # 23a5b0 <memcmp+0x4000>
  22cd7a:	be 1c 00 00 00       	mov    $0x1c,%esi
  22cd7f:	e8 dc 66 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22cd84:	0f 0b                	ud2    
  22cd86:	cc                   	int3   
  22cd87:	cc                   	int3   
  22cd88:	cc                   	int3   
  22cd89:	cc                   	int3   
  22cd8a:	cc                   	int3   
  22cd8b:	cc                   	int3   
  22cd8c:	cc                   	int3   
  22cd8d:	cc                   	int3   
  22cd8e:	cc                   	int3   
  22cd8f:	cc                   	int3   

000000000022cd90 <__rust_alloc>:
  22cd90:	e9 db db ff ff       	jmpq   22a970 <__rg_alloc>
  22cd95:	cc                   	int3   
  22cd96:	cc                   	int3   
  22cd97:	cc                   	int3   
  22cd98:	cc                   	int3   
  22cd99:	cc                   	int3   
  22cd9a:	cc                   	int3   
  22cd9b:	cc                   	int3   
  22cd9c:	cc                   	int3   
  22cd9d:	cc                   	int3   
  22cd9e:	cc                   	int3   
  22cd9f:	cc                   	int3   

000000000022cda0 <__rust_dealloc>:
  22cda0:	e9 0b dc ff ff       	jmpq   22a9b0 <__rg_dealloc>
  22cda5:	cc                   	int3   
  22cda6:	cc                   	int3   
  22cda7:	cc                   	int3   
  22cda8:	cc                   	int3   
  22cda9:	cc                   	int3   
  22cdaa:	cc                   	int3   
  22cdab:	cc                   	int3   
  22cdac:	cc                   	int3   
  22cdad:	cc                   	int3   
  22cdae:	cc                   	int3   
  22cdaf:	cc                   	int3   

000000000022cdb0 <__rust_realloc>:
  22cdb0:	e9 6b dc ff ff       	jmpq   22aa20 <__rg_realloc>
  22cdb5:	cc                   	int3   
  22cdb6:	cc                   	int3   
  22cdb7:	cc                   	int3   
  22cdb8:	cc                   	int3   
  22cdb9:	cc                   	int3   
  22cdba:	cc                   	int3   
  22cdbb:	cc                   	int3   
  22cdbc:	cc                   	int3   
  22cdbd:	cc                   	int3   
  22cdbe:	cc                   	int3   
  22cdbf:	cc                   	int3   

000000000022cdc0 <__rust_alloc_zeroed>:
  22cdc0:	e9 db dc ff ff       	jmpq   22aaa0 <__rg_alloc_zeroed>
  22cdc5:	cc                   	int3   
  22cdc6:	cc                   	int3   
  22cdc7:	cc                   	int3   
  22cdc8:	cc                   	int3   
  22cdc9:	cc                   	int3   
  22cdca:	cc                   	int3   
  22cdcb:	cc                   	int3   
  22cdcc:	cc                   	int3   
  22cdcd:	cc                   	int3   
  22cdce:	cc                   	int3   
  22cdcf:	cc                   	int3   

000000000022cdd0 <__rust_alloc_error_handler>:
  22cdd0:	e9 4b 30 00 00       	jmpq   22fe20 <__rg_oom>
  22cdd5:	cc                   	int3   
  22cdd6:	cc                   	int3   
  22cdd7:	cc                   	int3   
  22cdd8:	cc                   	int3   
  22cdd9:	cc                   	int3   
  22cdda:	cc                   	int3   
  22cddb:	cc                   	int3   
  22cddc:	cc                   	int3   
  22cddd:	cc                   	int3   
  22cdde:	cc                   	int3   
  22cddf:	cc                   	int3   

000000000022cde0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E>:
    pub fn ok(self) -> Option<T> {
  22cde0:	48 83 ec 18          	sub    $0x18,%rsp
  22cde4:	48 89 3c 24          	mov    %rdi,(%rsp)
        match self {
  22cde8:	48 8b 04 24          	mov    (%rsp),%rax
  22cdec:	48 85 c0             	test   %rax,%rax
  22cdef:	0f 94 c0             	sete   %al
  22cdf2:	0f b6 c0             	movzbl %al,%eax
  22cdf5:	75 06                	jne    22cdfd <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x1d>
  22cdf7:	eb 00                	jmp    22cdf9 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x19>
  22cdf9:	eb 12                	jmp    22ce0d <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x2d>
  22cdfb:	0f 0b                	ud2    
            Ok(x) => Some(x),
  22cdfd:	48 8b 04 24          	mov    (%rsp),%rax
  22ce01:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22ce06:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  22ce0b:	eb 09                	jmp    22ce16 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x36>
            Err(_) => None,
  22ce0d:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  22ce14:	00 00 
    }
  22ce16:	31 c0                	xor    %eax,%eax
  22ce18:	b9 01 00 00 00       	mov    $0x1,%ecx
  22ce1d:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  22ce22:	48 0f 44 c1          	cmove  %rcx,%rax
  22ce26:	48 83 f8 00          	cmp    $0x0,%rax
  22ce2a:	75 0a                	jne    22ce36 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x56>
  22ce2c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ce31:	48 83 c4 18          	add    $0x18,%rsp
  22ce35:	c3                   	retq   
  22ce36:	eb f4                	jmp    22ce2c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E+0x4c>
  22ce38:	cc                   	int3   
  22ce39:	cc                   	int3   
  22ce3a:	cc                   	int3   
  22ce3b:	cc                   	int3   
  22ce3c:	cc                   	int3   
  22ce3d:	cc                   	int3   
  22ce3e:	cc                   	int3   
  22ce3f:	cc                   	int3   

000000000022ce40 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
  22ce40:	48 83 ec 78          	sub    $0x78,%rsp
  22ce44:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22ce49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22ce4e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ce53:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22ce58:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
        match self {
  22ce5d:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22ce62:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
  22ce67:	48 8b 06             	mov    (%rsi),%rax
  22ce6a:	48 85 c0             	test   %rax,%rax
  22ce6d:	74 06                	je     22ce75 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x35>
  22ce6f:	eb 00                	jmp    22ce71 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x31>
  22ce71:	eb 43                	jmp    22ceb6 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x76>
  22ce73:	0f 0b                	ud2    
  22ce75:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22ce7a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            Ok(t) => Ok(op(t)),
  22ce7f:	48 8b 48 08          	mov    0x8(%rax),%rcx
  22ce83:	48 8b 40 10          	mov    0x10(%rax),%rax
  22ce87:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  22ce8c:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22ce91:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  22ce96:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22ce9b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22cea0:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22cea5:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  22ceaa:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22ceaf:	e8 6c 05 00 00       	callq  22d420 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h010dcb6ff1c3dcffE>
  22ceb4:	eb 15                	jmp    22cecb <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x8b>
  22ceb6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Err(e) => Err(e),
  22cebb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
  22cec2:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  22cec7:	75 2d                	jne    22cef6 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xb6>
  22cec9:	eb 21                	jmp    22ceec <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xac>
  22cecb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Ok(t) => Ok(op(t)),
  22ced0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22ced5:	48 89 08             	mov    %rcx,(%rax)
  22ced8:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22cedd:	48 89 48 08          	mov    %rcx,0x8(%rax)
  22cee1:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22cee6:	48 89 48 10          	mov    %rcx,0x10(%rax)
  22ceea:	eb d6                	jmp    22cec2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0x82>
  22ceec:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  22cef1:	48 83 c4 78          	add    $0x78,%rsp
  22cef5:	c3                   	retq   
  22cef6:	eb f4                	jmp    22ceec <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E+0xac>
  22cef8:	cc                   	int3   
  22cef9:	cc                   	int3   
  22cefa:	cc                   	int3   
  22cefb:	cc                   	int3   
  22cefc:	cc                   	int3   
  22cefd:	cc                   	int3   
  22cefe:	cc                   	int3   
  22ceff:	cc                   	int3   

000000000022cf00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>:
    pub fn unwrap(self) -> T {
  22cf00:	48 83 ec 38          	sub    $0x38,%rsp
  22cf04:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22cf09:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22cf0e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  22cf13:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22cf18:	48 85 c0             	test   %rax,%rax
  22cf1b:	0f 94 c0             	sete   %al
  22cf1e:	0f b6 c0             	movzbl %al,%eax
  22cf21:	75 06                	jne    22cf29 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x29>
  22cf23:	eb 00                	jmp    22cf25 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x25>
  22cf25:	eb 1b                	jmp    22cf42 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E+0x42>
  22cf27:	0f 0b                	ud2    
            Ok(t) => t,
  22cf29:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22cf2e:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  22cf33:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22cf38:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    }
  22cf3d:	48 83 c4 38          	add    $0x38,%rsp
  22cf41:	c3                   	retq   
  22cf42:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  22cf47:	48 8d 3d 5e 67 fd ff 	lea    -0x298a2(%rip),%rdi        # 2036ac <str.0+0x1c>
  22cf4e:	48 8d 0d 73 d6 00 00 	lea    0xd673(%rip),%rcx        # 23a5c8 <memcmp+0x4018>
  22cf55:	be 2b 00 00 00       	mov    $0x2b,%esi
  22cf5a:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
  22cf5f:	e8 2c 59 00 00       	callq  232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  22cf64:	0f 0b                	ud2    
  22cf66:	cc                   	int3   
  22cf67:	cc                   	int3   
  22cf68:	cc                   	int3   
  22cf69:	cc                   	int3   
  22cf6a:	cc                   	int3   
  22cf6b:	cc                   	int3   
  22cf6c:	cc                   	int3   
  22cf6d:	cc                   	int3   
  22cf6e:	cc                   	int3   
  22cf6f:	cc                   	int3   

000000000022cf70 <_ZN21linked_list_allocator4Heap4init17h76f7245f25ee4edfE>:
    ///
    /// # Unsafety
    ///
    /// This function must be called at most once and must only be used on an
    /// empty heap.
    pub unsafe fn init(&mut self, heap_bottom: usize, heap_size: usize) {
  22cf70:	48 83 ec 48          	sub    $0x48,%rsp
  22cf74:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22cf79:	48 89 f0             	mov    %rsi,%rax
  22cf7c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22cf81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22cf86:	48 89 f8             	mov    %rdi,%rax
  22cf89:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22cf8e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22cf93:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22cf98:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22cf9d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
        self.bottom = heap_bottom;
  22cfa2:	48 89 38             	mov    %rdi,(%rax)
        self.size = heap_size;
  22cfa5:	48 89 70 08          	mov    %rsi,0x8(%rax)
        self.used = 0;
  22cfa9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  22cfb0:	00 
        self.holes = HoleList::new(heap_bottom, heap_size);
  22cfb1:	e8 da 05 00 00       	callq  22d590 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE>
  22cfb6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22cfbb:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22cfc0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22cfc5:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22cfca:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22cfcf:	48 89 50 18          	mov    %rdx,0x18(%rax)
  22cfd3:	48 89 48 20          	mov    %rcx,0x20(%rax)
    }
  22cfd7:	48 83 c4 48          	add    $0x48,%rsp
  22cfdb:	c3                   	retq   
  22cfdc:	cc                   	int3   
  22cfdd:	cc                   	int3   
  22cfde:	cc                   	int3   
  22cfdf:	cc                   	int3   

000000000022cfe0 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E>:
    /// Allocates a chunk of the given size with the given alignment. Returns a pointer to the
    /// beginning of that chunk if it was successful. Else it returns `None`.
    /// This function scans the list of free memory blocks and uses the first block that is big
    /// enough. The runtime is in O(n) where n is the number of free blocks, but it should be
    /// reasonably fast for small allocations.
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<NonNull<u8>, ()> {
  22cfe0:	48 83 ec 78          	sub    $0x78,%rsp
  22cfe4:	48 89 d1             	mov    %rdx,%rcx
  22cfe7:	48 89 f2             	mov    %rsi,%rdx
  22cfea:	48 89 fe             	mov    %rdi,%rsi
  22cfed:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22cff2:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  22cff7:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  22cffc:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
        match self.holes.allocate_first_fit(layout) {
  22d001:	48 83 c6 18          	add    $0x18,%rsi
  22d005:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  22d00a:	e8 51 08 00 00       	callq  22d860 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17he523fc05be7cab08E>
  22d00f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22d014:	48 85 c0             	test   %rax,%rax
  22d017:	0f 94 c0             	sete   %al
  22d01a:	0f b6 c0             	movzbl %al,%eax
  22d01d:	75 06                	jne    22d025 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x45>
  22d01f:	eb 00                	jmp    22d021 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x41>
  22d021:	eb 36                	jmp    22d059 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x79>
  22d023:	0f 0b                	ud2    
            Ok((ptr, aligned_layout)) => {
  22d025:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22d02a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d02f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22d034:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22d039:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22d03e:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22d043:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
                self.used += aligned_layout.size();
  22d048:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22d04d:	e8 ee 20 00 00       	callq  22f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22d052:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d057:	eb 13                	jmp    22d06c <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x8c>
                Ok(ptr)
            }
            Err(err) => Err(err),
  22d059:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  22d060:	00 00 
        }
    }
  22d062:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22d067:	48 83 c4 78          	add    $0x78,%rsp
  22d06b:	c3                   	retq   
  22d06c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22d071:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                self.used += aligned_layout.size();
  22d076:	48 03 41 10          	add    0x10(%rcx),%rax
  22d07a:	48 89 04 24          	mov    %rax,(%rsp)
  22d07e:	0f 92 c0             	setb   %al
  22d081:	a8 01                	test   $0x1,%al
  22d083:	75 19                	jne    22d09e <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0xbe>
  22d085:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d08a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22d08f:	48 8b 14 24          	mov    (%rsp),%rdx
  22d093:	48 89 51 10          	mov    %rdx,0x10(%rcx)
                Ok(ptr)
  22d097:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            }
  22d09c:	eb c4                	jmp    22d062 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E+0x82>
                self.used += aligned_layout.size();
  22d09e:	48 8d 3d 8b 66 fd ff 	lea    -0x29975(%rip),%rdi        # 203730 <str.0>
  22d0a5:	48 8d 15 3c d5 00 00 	lea    0xd53c(%rip),%rdx        # 23a5e8 <memcmp+0x4038>
  22d0ac:	be 1c 00 00 00       	mov    $0x1c,%esi
  22d0b1:	e8 aa 63 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d0b6:	0f 0b                	ud2    
  22d0b8:	cc                   	int3   
  22d0b9:	cc                   	int3   
  22d0ba:	cc                   	int3   
  22d0bb:	cc                   	int3   
  22d0bc:	cc                   	int3   
  22d0bd:	cc                   	int3   
  22d0be:	cc                   	int3   
  22d0bf:	cc                   	int3   

000000000022d0c0 <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE>:
    /// behavior may occur for invalid arguments, thus this function is unsafe.
    ///
    /// This function walks the list of free memory blocks and inserts the freed block at the
    /// correct place. If the freed block is adjacent to another free block, the blocks are merged
    /// again. This operation is in `O(n)` since the list needs to be sorted by address.
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) {
  22d0c0:	48 83 ec 48          	sub    $0x48,%rsp
  22d0c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22d0c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d0ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22d0d3:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  22d0d8:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
        self.used -= self.holes.deallocate(ptr, layout).size();
  22d0dd:	48 83 c7 18          	add    $0x18,%rdi
  22d0e1:	e8 0a 08 00 00       	callq  22d8f0 <_ZN21linked_list_allocator4hole8HoleList10deallocate17hf1075ec97cc2155bE>
  22d0e6:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22d0eb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d0f0:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  22d0f5:	e8 46 20 00 00       	callq  22f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22d0fa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d0ff:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d104:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d109:	48 8b 40 10          	mov    0x10(%rax),%rax
  22d10d:	48 29 c8             	sub    %rcx,%rax
  22d110:	48 89 04 24          	mov    %rax,(%rsp)
  22d114:	0f 92 c0             	setb   %al
  22d117:	a8 01                	test   $0x1,%al
  22d119:	75 12                	jne    22d12d <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE+0x6d>
  22d11b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22d120:	48 8b 0c 24          	mov    (%rsp),%rcx
  22d124:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  22d128:	48 83 c4 48          	add    $0x48,%rsp
  22d12c:	c3                   	retq   
        self.used -= self.holes.deallocate(ptr, layout).size();
  22d12d:	48 8d 3d 1c 66 fd ff 	lea    -0x299e4(%rip),%rdi        # 203750 <str.1>
  22d134:	48 8d 15 c5 d4 00 00 	lea    0xd4c5(%rip),%rdx        # 23a600 <memcmp+0x4050>
  22d13b:	be 21 00 00 00       	mov    $0x21,%esi
  22d140:	e8 1b 63 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d145:	0f 0b                	ud2    
  22d147:	cc                   	int3   
  22d148:	cc                   	int3   
  22d149:	cc                   	int3   
  22d14a:	cc                   	int3   
  22d14b:	cc                   	int3   
  22d14c:	cc                   	int3   
  22d14d:	cc                   	int3   
  22d14e:	cc                   	int3   
  22d14f:	cc                   	int3   

000000000022d150 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5b565ba2603a9672E>:

#[cfg(feature = "use_spin")]
impl Deref for LockedHeap {
    type Target = Spinlock<Heap>;

    fn deref(&self) -> &Spinlock<Heap> {
  22d150:	50                   	push   %rax
  22d151:	48 89 f8             	mov    %rdi,%rax
  22d154:	48 89 04 24          	mov    %rax,(%rsp)
        &self.0
    }
  22d158:	59                   	pop    %rcx
  22d159:	c3                   	retq   
  22d15a:	cc                   	int3   
  22d15b:	cc                   	int3   
  22d15c:	cc                   	int3   
  22d15d:	cc                   	int3   
  22d15e:	cc                   	int3   
  22d15f:	cc                   	int3   

000000000022d160 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hf251c236b058a1a6E>:
}

#[cfg(feature = "use_spin")]
unsafe impl GlobalAlloc for LockedHeap {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
  22d160:	48 83 ec 58          	sub    $0x58,%rsp
  22d164:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22d169:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22d16e:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22d173:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  22d178:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        self.0
  22d17d:	e8 3e 20 00 00       	callq  22f1c0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22d182:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22d187:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22d18c:	e8 ff 1f 00 00       	callq  22f190 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22d191:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d196:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22d19b:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  22d1a0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22d1a5:	e8 36 fe ff ff       	callq  22cfe0 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h59fb8ecd5d71d3a4E>
  22d1aa:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d1af:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d1b4:	e8 27 fc ff ff       	callq  22cde0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hceb0c457a7b1b6c3E>
  22d1b9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d1be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d1c3:	31 c0                	xor    %eax,%eax
  22d1c5:	89 c6                	mov    %eax,%esi
  22d1c7:	e8 44 1b 00 00       	callq  22ed10 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE>
  22d1cc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            .lock()
            .allocate_first_fit(layout)
            .ok()
            .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
    }
  22d1d1:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22d1d6:	e8 75 03 00 00       	callq  22d550 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
  22d1db:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d1e0:	48 83 c4 58          	add    $0x58,%rsp
  22d1e4:	c3                   	retq   
  22d1e5:	cc                   	int3   
  22d1e6:	cc                   	int3   
  22d1e7:	cc                   	int3   
  22d1e8:	cc                   	int3   
  22d1e9:	cc                   	int3   
  22d1ea:	cc                   	int3   
  22d1eb:	cc                   	int3   
  22d1ec:	cc                   	int3   
  22d1ed:	cc                   	int3   
  22d1ee:	cc                   	int3   
  22d1ef:	cc                   	int3   

000000000022d1f0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h08c76504a2751a9dE>:

    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
  22d1f0:	48 83 ec 58          	sub    $0x58,%rsp
  22d1f4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22d1f9:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22d1fe:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  22d203:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22d208:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  22d20d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  22d212:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        self.0
  22d217:	e8 a4 1f 00 00       	callq  22f1c0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>
  22d21c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22d221:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22d226:	e8 65 1f 00 00       	callq  22f190 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>
  22d22b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d230:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            .lock()
            .deallocate(NonNull::new_unchecked(ptr), layout)
  22d235:	e8 26 1d 00 00       	callq  22ef60 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>
  22d23a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d23f:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22d244:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22d249:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22d24e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.0
  22d253:	e8 68 fe ff ff       	callq  22d0c0 <_ZN21linked_list_allocator4Heap10deallocate17hf494e8459ff9a9efE>
    }
  22d258:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  22d25d:	e8 ee 02 00 00       	callq  22d550 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>
  22d262:	48 83 c4 58          	add    $0x58,%rsp
  22d266:	c3                   	retq   
  22d267:	cc                   	int3   
  22d268:	cc                   	int3   
  22d269:	cc                   	int3   
  22d26a:	cc                   	int3   
  22d26b:	cc                   	int3   
  22d26c:	cc                   	int3   
  22d26d:	cc                   	int3   
  22d26e:	cc                   	int3   
  22d26f:	cc                   	int3   

000000000022d270 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E>:
}

/// Align downwards. Returns the greatest x with alignment `align`
/// so that x <= addr. The alignment must be a power of 2.
pub fn align_down(addr: usize, align: usize) -> usize {
  22d270:	48 83 ec 58          	sub    $0x58,%rsp
  22d274:	48 89 f1             	mov    %rsi,%rcx
  22d277:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  22d27c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d281:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22d286:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22d28b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22d290:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  22d295:	48 89 c8             	mov    %rcx,%rax
  22d298:	48 d1 e8             	shr    %rax
  22d29b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  22d2a2:	55 55 55 
  22d2a5:	48 21 d0             	and    %rdx,%rax
  22d2a8:	48 29 c1             	sub    %rax,%rcx
  22d2ab:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  22d2b2:	33 33 33 
  22d2b5:	48 89 c8             	mov    %rcx,%rax
  22d2b8:	48 21 d0             	and    %rdx,%rax
  22d2bb:	48 c1 e9 02          	shr    $0x2,%rcx
  22d2bf:	48 21 d1             	and    %rdx,%rcx
  22d2c2:	48 01 c8             	add    %rcx,%rax
  22d2c5:	48 89 c1             	mov    %rax,%rcx
  22d2c8:	48 c1 e9 04          	shr    $0x4,%rcx
  22d2cc:	48 01 c8             	add    %rcx,%rax
  22d2cf:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  22d2d6:	0f 0f 0f 
  22d2d9:	48 21 c8             	and    %rcx,%rax
  22d2dc:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  22d2e3:	01 01 01 
  22d2e6:	48 0f af c1          	imul   %rcx,%rax
  22d2ea:	48 c1 e8 38          	shr    $0x38,%rax
  22d2ee:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22d2f3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            self.count_ones() == 1
  22d2f8:	83 f8 01             	cmp    $0x1,%eax
  22d2fb:	0f 94 c0             	sete   %al
  22d2fe:	88 44 24 27          	mov    %al,0x27(%rsp)
  22d302:	8a 44 24 27          	mov    0x27(%rsp),%al
    if align.is_power_of_two() {
  22d306:	a8 01                	test   $0x1,%al
  22d308:	75 0f                	jne    22d319 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xa9>
  22d30a:	eb 00                	jmp    22d30c <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0x9c>
  22d30c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        addr & !(align - 1)
    } else if align == 0 {
  22d311:	48 83 f8 00          	cmp    $0x0,%rax
  22d315:	74 53                	je     22d36a <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xfa>
  22d317:	eb 5d                	jmp    22d376 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0x106>
  22d319:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        addr & !(align - 1)
  22d31e:	48 83 e8 01          	sub    $0x1,%rax
  22d322:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d327:	0f 92 c0             	setb   %al
  22d32a:	a8 01                	test   $0x1,%al
  22d32c:	75 18                	jne    22d346 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xd6>
  22d32e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22d333:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22d338:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
  22d33c:	48 21 c8             	and    %rcx,%rax
  22d33f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if align.is_power_of_two() {
  22d344:	eb 1a                	jmp    22d360 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xf0>
        addr & !(align - 1)
  22d346:	48 8d 3d 03 64 fd ff 	lea    -0x29bfd(%rip),%rdi        # 203750 <str.1>
  22d34d:	48 8d 15 c4 d2 00 00 	lea    0xd2c4(%rip),%rdx        # 23a618 <memcmp+0x4068>
  22d354:	be 21 00 00 00       	mov    $0x21,%esi
  22d359:	e8 02 61 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d35e:	0f 0b                	ud2    
        addr
    } else {
        panic!("`align` must be a power of 2");
    }
}
  22d360:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22d365:	48 83 c4 58          	add    $0x58,%rsp
  22d369:	c3                   	retq   
  22d36a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        addr
  22d36f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if align.is_power_of_two() {
  22d374:	eb ea                	jmp    22d360 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E+0xf0>
        panic!("`align` must be a power of 2");
  22d376:	48 8d 3d f4 63 fd ff 	lea    -0x29c0c(%rip),%rdi        # 203771 <str.1+0x21>
  22d37d:	48 8d 15 ac d2 00 00 	lea    0xd2ac(%rip),%rdx        # 23a630 <memcmp+0x4080>
  22d384:	be 1c 00 00 00       	mov    $0x1c,%esi
  22d389:	e8 d2 60 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d38e:	0f 0b                	ud2    

000000000022d390 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>:

/// Align upwards. Returns the smallest x with alignment `align`
/// so that x >= addr. The alignment must be a power of 2.
pub fn align_up(addr: usize, align: usize) -> usize {
  22d390:	48 83 ec 38          	sub    $0x38,%rsp
  22d394:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  22d399:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22d39e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    align_down(addr + align - 1, align)
  22d3a3:	48 01 f7             	add    %rsi,%rdi
  22d3a6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22d3ab:	0f 92 c0             	setb   %al
  22d3ae:	a8 01                	test   $0x1,%al
  22d3b0:	75 17                	jne    22d3c9 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x39>
  22d3b2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22d3b7:	48 83 e8 01          	sub    $0x1,%rax
  22d3bb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d3c0:	0f 92 c0             	setb   %al
  22d3c3:	a8 01                	test   $0x1,%al
  22d3c5:	75 32                	jne    22d3f9 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x69>
  22d3c7:	eb 1a                	jmp    22d3e3 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x53>
  22d3c9:	48 8d 3d 60 63 fd ff 	lea    -0x29ca0(%rip),%rdi        # 203730 <str.0>
  22d3d0:	48 8d 15 71 d2 00 00 	lea    0xd271(%rip),%rdx        # 23a648 <memcmp+0x4098>
  22d3d7:	be 1c 00 00 00       	mov    $0x1c,%esi
  22d3dc:	e8 7f 60 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d3e1:	0f 0b                	ud2    
  22d3e3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22d3e8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d3ed:	e8 7e fe ff ff       	callq  22d270 <_ZN21linked_list_allocator10align_down17h988cc8dae5d17442E>
  22d3f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d3f7:	eb 1a                	jmp    22d413 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE+0x83>
  22d3f9:	48 8d 3d 50 63 fd ff 	lea    -0x29cb0(%rip),%rdi        # 203750 <str.1>
  22d400:	48 8d 15 41 d2 00 00 	lea    0xd241(%rip),%rdx        # 23a648 <memcmp+0x4098>
  22d407:	be 21 00 00 00       	mov    $0x21,%esi
  22d40c:	e8 4f 60 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d411:	0f 0b                	ud2    
  22d413:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  22d418:	48 83 c4 38          	add    $0x38,%rsp
  22d41c:	c3                   	retq   
  22d41d:	cc                   	int3   
  22d41e:	cc                   	int3   
  22d41f:	cc                   	int3   

000000000022d420 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h010dcb6ff1c3dcffE>:
    /// This function uses the “first fit” strategy, so it uses the first hole that is big
    /// enough. Thus the runtime is in O(n) but it should be reasonably fast for small allocations.
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<(NonNull<u8>, Layout), ()> {
        let aligned_layout = Self::align_layout(layout);

        allocate_first_fit(&mut self.first, aligned_layout).map(|holeinfo| {
  22d420:	48 83 ec 48          	sub    $0x48,%rsp
  22d424:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22d429:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22d42e:	48 89 f8             	mov    %rdi,%rax
  22d431:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d436:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d43b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d440:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22d445:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22d44a:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
            (
                NonNull::new(holeinfo.addr as *mut u8).unwrap(),
  22d44f:	e8 2c 1b 00 00       	callq  22ef80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>
  22d454:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22d459:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22d45e:	48 8d 35 fb d1 00 00 	lea    0xd1fb(%rip),%rsi        # 23a660 <memcmp+0x40b0>
  22d465:	e8 46 19 00 00       	callq  22edb0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E>
  22d46a:	48 89 04 24          	mov    %rax,(%rsp)
  22d46e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22d473:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22d478:	48 8b 3c 24          	mov    (%rsp),%rdi
  22d47c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
                aligned_layout,
  22d481:	48 8b 32             	mov    (%rdx),%rsi
  22d484:	48 8b 52 08          	mov    0x8(%rdx),%rdx
            (
  22d488:	48 89 39             	mov    %rdi,(%rcx)
  22d48b:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  22d48f:	48 89 51 10          	mov    %rdx,0x10(%rcx)
            )
        })
  22d493:	48 83 c4 48          	add    $0x48,%rsp
  22d497:	c3                   	retq   
  22d498:	cc                   	int3   
  22d499:	cc                   	int3   
  22d49a:	cc                   	int3   
  22d49b:	cc                   	int3   
  22d49c:	cc                   	int3   
  22d49d:	cc                   	int3   
  22d49e:	cc                   	int3   
  22d49f:	cc                   	int3   

000000000022d4a0 <_ZN21linked_list_allocator4hole18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h722a943daf4b1ee7E>:
fn allocate_first_fit(mut previous: &mut Hole, layout: Layout) -> Result<HoleInfo, ()> {
    loop {
        let allocation: Option<Allocation> = previous
            .next
            .as_mut()
            .and_then(|current| split_hole(current.info(), layout.clone()));
  22d4a0:	48 83 ec 48          	sub    $0x48,%rsp
  22d4a4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22d4a9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22d4ae:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22d4b3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  22d4b8:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22d4bd:	48 8b 3a             	mov    (%rdx),%rdi
  22d4c0:	e8 fb 04 00 00       	callq  22d9c0 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>
  22d4c5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22d4ca:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  22d4cf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22d4d4:	e8 a7 1c 00 00       	callq  22f180 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h05f73b6f8579d946E>
  22d4d9:	48 89 04 24          	mov    %rax,(%rsp)
  22d4dd:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22d4e2:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  22d4e7:	48 8b 0c 24          	mov    (%rsp),%rcx
  22d4eb:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22d4f0:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22d4f5:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d4fa:	e8 f1 04 00 00       	callq  22d9f0 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE>
  22d4ff:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22d504:	48 83 c4 48          	add    $0x48,%rsp
  22d508:	c3                   	retq   
  22d509:	cc                   	int3   
  22d50a:	cc                   	int3   
  22d50b:	cc                   	int3   
  22d50c:	cc                   	int3   
  22d50d:	cc                   	int3   
  22d50e:	cc                   	int3   
  22d50f:	cc                   	int3   

000000000022d510 <_ZN21linked_list_allocator4hole10deallocate28_$u7b$$u7b$closure$u7d$$u7d$17hce09692d5969a953E>:
            hole_addr + hole.size <= addr,
            "invalid deallocation (probably a double free)"
        );

        // get information about the next block
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  22d510:	48 83 ec 28          	sub    $0x28,%rsp
  22d514:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22d519:	48 8b 3f             	mov    (%rdi),%rdi
  22d51c:	e8 9f 04 00 00       	callq  22d9c0 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>
  22d521:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d526:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22d52b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22d530:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22d535:	48 83 c4 28          	add    $0x28,%rsp
  22d539:	c3                   	retq   
  22d53a:	cc                   	int3   
  22d53b:	cc                   	int3   
  22d53c:	cc                   	int3   
  22d53d:	cc                   	int3   
  22d53e:	cc                   	int3   
  22d53f:	cc                   	int3   

000000000022d540 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>:
/// By default, references are reborrowed instead of moved (equivalent to `&mut *reference`). This
/// function forces a move.
///
/// for more information, see section “id Forces References To Move” in:
/// https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/
fn move_helper<T>(x: T) -> T {
  22d540:	50                   	push   %rax
  22d541:	48 89 f8             	mov    %rdi,%rax
  22d544:	48 89 04 24          	mov    %rax,(%rsp)
    x
}
  22d548:	59                   	pop    %rcx
  22d549:	c3                   	retq   
  22d54a:	cc                   	int3   
  22d54b:	cc                   	int3   
  22d54c:	cc                   	int3   
  22d54d:	cc                   	int3   
  22d54e:	cc                   	int3   
  22d54f:	cc                   	int3   

000000000022d550 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17hfd1ccdb5662b2a91E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  22d550:	50                   	push   %rax
  22d551:	48 89 3c 24          	mov    %rdi,(%rsp)
  22d555:	e8 26 00 00 00       	callq  22d580 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1be6e4616425855E>
  22d55a:	58                   	pop    %rax
  22d55b:	c3                   	retq   
  22d55c:	cc                   	int3   
  22d55d:	cc                   	int3   
  22d55e:	cc                   	int3   
  22d55f:	cc                   	int3   

000000000022d560 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h18b8e4e6315d4dbfE>:
  22d560:	50                   	push   %rax
  22d561:	48 89 3c 24          	mov    %rdi,(%rsp)
  22d565:	58                   	pop    %rax
  22d566:	c3                   	retq   
  22d567:	cc                   	int3   
  22d568:	cc                   	int3   
  22d569:	cc                   	int3   
  22d56a:	cc                   	int3   
  22d56b:	cc                   	int3   
  22d56c:	cc                   	int3   
  22d56d:	cc                   	int3   
  22d56e:	cc                   	int3   
  22d56f:	cc                   	int3   

000000000022d570 <_ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17hd0eec959715c1c93E>:
  22d570:	50                   	push   %rax
  22d571:	48 89 3c 24          	mov    %rdi,(%rsp)
  22d575:	58                   	pop    %rax
  22d576:	c3                   	retq   
  22d577:	cc                   	int3   
  22d578:	cc                   	int3   
  22d579:	cc                   	int3   
  22d57a:	cc                   	int3   
  22d57b:	cc                   	int3   
  22d57c:	cc                   	int3   
  22d57d:	cc                   	int3   
  22d57e:	cc                   	int3   
  22d57f:	cc                   	int3   

000000000022d580 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1be6e4616425855E>:
    }
}

impl<'a, R: RawMutex + 'a, T: ?Sized + 'a> Drop for MutexGuard<'a, R, T> {
    #[inline]
    fn drop(&mut self) {
  22d580:	50                   	push   %rax
  22d581:	48 89 3c 24          	mov    %rdi,(%rsp)
        // Safety: A MutexGuard always holds the lock.
        unsafe {
            self.mutex.raw.unlock();
  22d585:	48 8b 3f             	mov    (%rdi),%rdi
  22d588:	e8 03 1f 00 00       	callq  22f490 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h718bd9fc65a01bf2E>
        }
    }
  22d58d:	58                   	pop    %rax
  22d58e:	c3                   	retq   
  22d58f:	cc                   	int3   

000000000022d590 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE>:
    pub unsafe fn new(hole_addr: usize, hole_size: usize) -> HoleList {
  22d590:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  22d597:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  22d59c:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  22d5a1:	48 89 bc 24 c8 00 00 	mov    %rdi,0xc8(%rsp)
  22d5a8:	00 
  22d5a9:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  22d5b0:	00 
        assert_eq!(size_of::<Hole>(), Self::min_size());
  22d5b1:	e8 ca 03 00 00       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22d5b6:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22d5bb:	48 8d 05 66 30 fd ff 	lea    -0x2cf9a(%rip),%rax        # 200628 <str.0+0x108>
  22d5c2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22d5c7:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  22d5cc:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22d5d1:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  22d5d6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d5db:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22d5e2:	00 
  22d5e3:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  22d5e8:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  22d5ed:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
  22d5f4:	00 
  22d5f5:	48 8b 00             	mov    (%rax),%rax
  22d5f8:	48 3b 01             	cmp    (%rcx),%rax
  22d5fb:	0f 94 c0             	sete   %al
  22d5fe:	34 ff                	xor    $0xff,%al
  22d600:	a8 01                	test   $0x1,%al
  22d602:	75 02                	jne    22d606 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x76>
        let aligned_hole_addr = align_up(hole_addr, align_of::<Hole>());
  22d604:	eb 2d                	jmp    22d633 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0xa3>
  22d606:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22d60b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
        assert_eq!(size_of::<Hole>(), Self::min_size());
  22d610:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  22d615:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  22d61c:	00 00 
  22d61e:	4c 8d 05 53 d0 00 00 	lea    0xd053(%rip),%r8        # 23a678 <memcmp+0x40c8>
  22d625:	31 ff                	xor    %edi,%edi
  22d627:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
  22d62c:	e8 0f 1c 00 00       	callq  22f240 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  22d631:	0f 0b                	ud2    
  22d633:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        let aligned_hole_addr = align_up(hole_addr, align_of::<Hole>());
  22d638:	be 08 00 00 00       	mov    $0x8,%esi
  22d63d:	e8 4e fd ff ff       	callq  22d390 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22d642:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d647:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22d64e:	00 
  22d64f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22d654:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        let ptr = aligned_hole_addr as *mut Hole;
  22d659:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22d660:	00 
            size: hole_size.saturating_sub(aligned_hole_addr - hole_addr),
  22d661:	48 29 c8             	sub    %rcx,%rax
  22d664:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d669:	0f 92 c0             	setb   %al
  22d66c:	a8 01                	test   $0x1,%al
  22d66e:	75 3a                	jne    22d6aa <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x11a>
  22d670:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22d675:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22d67a:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22d681:	00 
  22d682:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
  22d689:	00 
  22d68a:	31 c9                	xor    %ecx,%ecx
            intrinsics::saturating_sub(self, rhs)
  22d68c:	48 29 d0             	sub    %rdx,%rax
  22d68f:	48 0f 42 c1          	cmovb  %rcx,%rax
  22d693:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  22d69a:	00 
  22d69b:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22d6a2:	00 
  22d6a3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d6a8:	eb 1a                	jmp    22d6c4 <_ZN21linked_list_allocator4hole8HoleList3new17hc1804c3e81cf6aeaE+0x134>
  22d6aa:	48 8d 3d 7f 61 fd ff 	lea    -0x29e81(%rip),%rdi        # 203830 <str.0>
  22d6b1:	48 8d 15 d8 cf 00 00 	lea    0xcfd8(%rip),%rdx        # 23a690 <memcmp+0x40e0>
  22d6b8:	be 21 00 00 00       	mov    $0x21,%esi
  22d6bd:	e8 9e 5d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d6c2:	0f 0b                	ud2    
  22d6c4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d6c9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        ptr.write(Hole {
  22d6ce:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22d6d5:	00 
  22d6d6:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
  22d6dd:	00 00 00 00 00 
  22d6e2:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  22d6e9:	00 
  22d6ea:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  22d6f1:	00 
  22d6f2:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  22d6f9:	00 
  22d6fa:	48 89 b4 24 18 01 00 	mov    %rsi,0x118(%rsp)
  22d701:	00 
  22d702:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  22d709:	00 
        unsafe { write(self, val) }
  22d70a:	e8 11 1c 00 00       	callq  22f320 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  22d70f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                next: Some(&mut *ptr),
  22d714:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22d71b:	00 
            first: Hole {
  22d71c:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  22d723:	00 00 00 00 00 
  22d728:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22d72f:	00 
  22d730:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22d737:	00 
        HoleList {
  22d738:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  22d73f:	00 
  22d740:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22d747:	00 
  22d748:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22d74d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    }
  22d752:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22d757:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  22d75c:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  22d763:	c3                   	retq   
  22d764:	cc                   	int3   
  22d765:	cc                   	int3   
  22d766:	cc                   	int3   
  22d767:	cc                   	int3   
  22d768:	cc                   	int3   
  22d769:	cc                   	int3   
  22d76a:	cc                   	int3   
  22d76b:	cc                   	int3   
  22d76c:	cc                   	int3   
  22d76d:	cc                   	int3   
  22d76e:	cc                   	int3   
  22d76f:	cc                   	int3   

000000000022d770 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>:
    pub fn align_layout(layout: Layout) -> Layout {
  22d770:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  22d777:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22d77c:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        let mut size = layout.size();
  22d781:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22d786:	e8 b5 19 00 00       	callq  22f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22d78b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if size < Self::min_size() {
  22d790:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22d795:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22d79a:	e8 e1 01 00 00       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22d79f:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22d7a4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22d7a9:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  22d7ae:	48 39 c8             	cmp    %rcx,%rax
  22d7b1:	72 0c                	jb     22d7bf <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x4f>
        let size = align_up(size, mem::align_of::<Hole>());
  22d7b3:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22d7b8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22d7bd:	eb 16                	jmp    22d7d5 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x65>
            size = Self::min_size();
  22d7bf:	e8 bc 01 00 00       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22d7c4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22d7c9:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22d7ce:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if size < Self::min_size() {
  22d7d3:	eb de                	jmp    22d7b3 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE+0x43>
  22d7d5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
        let size = align_up(size, mem::align_of::<Hole>());
  22d7da:	be 08 00 00 00       	mov    $0x8,%esi
  22d7df:	e8 ac fb ff ff       	callq  22d390 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22d7e4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22d7e9:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        let layout = Layout::from_size_align(size, layout.align()).unwrap();
  22d7ee:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  22d7f3:	e8 58 19 00 00       	callq  22f150 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>
  22d7f8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22d7fd:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  22d802:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  22d807:	e8 d4 17 00 00       	callq  22efe0 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE>
  22d80c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22d811:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22d816:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  22d81b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d820:	48 8d 15 81 ce 00 00 	lea    0xce81(%rip),%rdx        # 23a6a8 <memcmp+0x40f8>
  22d827:	e8 d4 f6 ff ff       	callq  22cf00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h797aadfdc70d0638E>
  22d82c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d831:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22d836:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22d83b:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  22d842:	00 
  22d843:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  22d848:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22d84d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  22d854:	c3                   	retq   
  22d855:	cc                   	int3   
  22d856:	cc                   	int3   
  22d857:	cc                   	int3   
  22d858:	cc                   	int3   
  22d859:	cc                   	int3   
  22d85a:	cc                   	int3   
  22d85b:	cc                   	int3   
  22d85c:	cc                   	int3   
  22d85d:	cc                   	int3   
  22d85e:	cc                   	int3   
  22d85f:	cc                   	int3   

000000000022d860 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17he523fc05be7cab08E>:
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<(NonNull<u8>, Layout), ()> {
  22d860:	48 83 ec 78          	sub    $0x78,%rsp
  22d864:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22d869:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  22d86e:	48 89 f0             	mov    %rsi,%rax
  22d871:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22d876:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22d87b:	48 89 f9             	mov    %rdi,%rcx
  22d87e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22d883:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  22d888:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  22d88d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22d892:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  22d897:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
        let aligned_layout = Self::align_layout(layout);
  22d89c:	e8 cf fe ff ff       	callq  22d770 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>
  22d8a1:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  22d8a6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22d8ab:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
        allocate_first_fit(&mut self.first, aligned_layout).map(|holeinfo| {
  22d8b0:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22d8b5:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22d8ba:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  22d8bf:	e8 2c 07 00 00       	callq  22dff0 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E>
  22d8c4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22d8c9:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  22d8ce:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22d8d3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  22d8d8:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  22d8dd:	e8 5e f5 ff ff       	callq  22ce40 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h7481971e00537a60E>
  22d8e2:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    }
  22d8e7:	48 83 c4 78          	add    $0x78,%rsp
  22d8eb:	c3                   	retq   
  22d8ec:	cc                   	int3   
  22d8ed:	cc                   	int3   
  22d8ee:	cc                   	int3   
  22d8ef:	cc                   	int3   

000000000022d8f0 <_ZN21linked_list_allocator4hole8HoleList10deallocate17hf1075ec97cc2155bE>:
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) -> Layout {
  22d8f0:	48 83 ec 68          	sub    $0x68,%rsp
  22d8f4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22d8f9:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22d8fe:	48 89 f0             	mov    %rsi,%rax
  22d901:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22d906:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22d90b:	48 89 f9             	mov    %rdi,%rcx
  22d90e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22d913:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22d918:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22d91d:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22d922:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22d927:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        let aligned_layout = Self::align_layout(layout);
  22d92c:	e8 3f fe ff ff       	callq  22d770 <_ZN21linked_list_allocator4hole8HoleList12align_layout17h84d3078c1e47b3cdE>
  22d931:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  22d936:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22d93b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            ptr.as_ptr() as usize,
  22d940:	e8 8b 16 00 00       	callq  22efd0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>
  22d945:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            aligned_layout.size(),
  22d94a:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  22d94f:	e8 ec 17 00 00       	callq  22f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22d954:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22d959:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22d95e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22d963:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        deallocate(
  22d968:	e8 23 0a 00 00       	callq  22e390 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E>
    }
  22d96d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22d972:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  22d977:	48 83 c4 68          	add    $0x68,%rsp
  22d97b:	c3                   	retq   
  22d97c:	cc                   	int3   
  22d97d:	cc                   	int3   
  22d97e:	cc                   	int3   
  22d97f:	cc                   	int3   

000000000022d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>:
    pub fn min_size() -> usize {
  22d980:	50                   	push   %rax
        size_of::<usize>() * 2
  22d981:	eb 00                	jmp    22d983 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE+0x3>
  22d983:	b8 08 00 00 00       	mov    $0x8,%eax
  22d988:	b9 02 00 00 00       	mov    $0x2,%ecx
  22d98d:	48 f7 e1             	mul    %rcx
  22d990:	48 89 04 24          	mov    %rax,(%rsp)
  22d994:	0f 90 c0             	seto   %al
  22d997:	a8 01                	test   $0x1,%al
  22d999:	75 06                	jne    22d9a1 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE+0x21>
  22d99b:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22d99f:	59                   	pop    %rcx
  22d9a0:	c3                   	retq   
        size_of::<usize>() * 2
  22d9a1:	48 8d 3d b8 5e fd ff 	lea    -0x2a148(%rip),%rdi        # 203860 <str.1>
  22d9a8:	48 8d 15 11 cd 00 00 	lea    0xcd11(%rip),%rdx        # 23a6c0 <memcmp+0x4110>
  22d9af:	be 21 00 00 00       	mov    $0x21,%esi
  22d9b4:	e8 a7 5a 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22d9b9:	0f 0b                	ud2    
  22d9bb:	cc                   	int3   
  22d9bc:	cc                   	int3   
  22d9bd:	cc                   	int3   
  22d9be:	cc                   	int3   
  22d9bf:	cc                   	int3   

000000000022d9c0 <_ZN21linked_list_allocator4hole4Hole4info17h1434dd039c33e849E>:
    fn info(&self) -> HoleInfo {
  22d9c0:	48 83 ec 18          	sub    $0x18,%rsp
  22d9c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            size: self.size,
  22d9c9:	48 8b 07             	mov    (%rdi),%rax
        HoleInfo {
  22d9cc:	48 89 3c 24          	mov    %rdi,(%rsp)
  22d9d0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  22d9d5:	48 8b 04 24          	mov    (%rsp),%rax
  22d9d9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22d9de:	48 83 c4 18          	add    $0x18,%rsp
  22d9e2:	c3                   	retq   
  22d9e3:	cc                   	int3   
  22d9e4:	cc                   	int3   
  22d9e5:	cc                   	int3   
  22d9e6:	cc                   	int3   
  22d9e7:	cc                   	int3   
  22d9e8:	cc                   	int3   
  22d9e9:	cc                   	int3   
  22d9ea:	cc                   	int3   
  22d9eb:	cc                   	int3   
  22d9ec:	cc                   	int3   
  22d9ed:	cc                   	int3   
  22d9ee:	cc                   	int3   
  22d9ef:	cc                   	int3   

000000000022d9f0 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE>:
fn split_hole(hole: HoleInfo, required_layout: Layout) -> Option<Allocation> {
  22d9f0:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
  22d9f7:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  22d9fe:	00 
  22d9ff:	48 89 b4 24 88 00 00 	mov    %rsi,0x88(%rsp)
  22da06:	00 
  22da07:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  22da0e:	00 
  22da0f:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  22da16:	00 
  22da17:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  22da1e:	00 
  22da1f:	4c 89 84 24 b0 00 00 	mov    %r8,0xb0(%rsp)
  22da26:	00 
  22da27:	48 89 b4 24 e8 01 00 	mov    %rsi,0x1e8(%rsp)
  22da2e:	00 
  22da2f:	48 89 94 24 f0 01 00 	mov    %rdx,0x1f0(%rsp)
  22da36:	00 
    let required_size = required_layout.size();
  22da37:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  22da3e:	00 
  22da3f:	e8 fc 16 00 00       	callq  22f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>
  22da44:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22da4b:	00 
  22da4c:	48 89 84 24 f8 01 00 	mov    %rax,0x1f8(%rsp)
  22da53:	00 
    let required_align = required_layout.align();
  22da54:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  22da5b:	00 
  22da5c:	e8 ef 16 00 00       	callq  22f150 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>
  22da61:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22da66:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  22da6d:	00 
  22da6e:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  22da73:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  22da7a:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  22da7b:	e8 10 f9 ff ff       	callq  22d390 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22da80:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22da85:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22da8c:	00 
  22da8d:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22da92:	48 39 c8             	cmp    %rcx,%rax
  22da95:	74 0f                	je     22daa6 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0xb6>
        let aligned_addr = align_up(hole.addr + HoleList::min_size(), required_align);
  22da97:	e8 e4 fe ff ff       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22da9c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22daa1:	e9 b1 00 00 00       	jmpq   22db57 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x167>
  22daa6:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22daad:	00 
        (hole.addr, None)
  22daae:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  22dab5:	00 00 00 00 00 
  22daba:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22dac1:	00 
  22dac2:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22dac9:	00 
  22daca:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22dad1:	00 
  22dad2:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22dad9:	00 
  22dada:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  22dae1:	00 
  22dae2:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  22dae9:	00 
  22daea:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22daf1:	00 
  22daf2:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  22daf9:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  22dafa:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22db01:	00 
  22db02:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22db07:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
  22db0e:	00 
  22db0f:	48 8b 94 24 d8 00 00 	mov    0xd8(%rsp),%rdx
  22db16:	00 
  22db17:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  22db1e:	00 
  22db1f:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  22db26:	00 
  22db27:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  22db2e:	00 
  22db2f:	48 8b 94 24 e8 00 00 	mov    0xe8(%rsp),%rdx
  22db36:	00 
  22db37:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  22db3e:	00 
        if aligned_addr + required_size > hole.addr + hole.size {
  22db3f:	48 01 c8             	add    %rcx,%rax
  22db42:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22db47:	0f 92 c0             	setb   %al
  22db4a:	a8 01                	test   $0x1,%al
  22db4c:	0f 85 3f 01 00 00    	jne    22dc91 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2a1>
  22db52:	e9 19 01 00 00       	jmpq   22dc70 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x280>
  22db57:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  22db5c:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22db63:	00 
        let aligned_addr = align_up(hole.addr + HoleList::min_size(), required_align);
  22db64:	48 01 c8             	add    %rcx,%rax
  22db67:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  22db6c:	0f 92 c0             	setb   %al
  22db6f:	a8 01                	test   $0x1,%al
  22db71:	75 1e                	jne    22db91 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x1a1>
  22db73:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  22db78:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  22db7d:	e8 0e f8 ff ff       	callq  22d390 <_ZN21linked_list_allocator8align_up17h8e0b968f173e7b6fE>
  22db82:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22db87:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  22db8e:	00 
  22db8f:	eb 1a                	jmp    22dbab <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x1bb>
  22db91:	48 8d 3d f8 5c fd ff 	lea    -0x2a308(%rip),%rdi        # 203890 <str.2>
  22db98:	48 8d 15 39 cb 00 00 	lea    0xcb39(%rip),%rdx        # 23a6d8 <memcmp+0x4128>
  22db9f:	be 1c 00 00 00       	mov    $0x1c,%esi
  22dba4:	e8 b7 58 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dba9:	0f 0b                	ud2    
  22dbab:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  22dbb2:	00 
  22dbb3:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                size: aligned_addr - hole.addr,
  22dbb8:	48 29 c8             	sub    %rcx,%rax
  22dbbb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22dbc0:	0f 92 c0             	setb   %al
  22dbc3:	a8 01                	test   $0x1,%al
  22dbc5:	0f 85 8b 00 00 00    	jne    22dc56 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x266>
  22dbcb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  22dbd0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  22dbd5:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  22dbdc:	00 
            Some(HoleInfo {
  22dbdd:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  22dbe4:	00 
  22dbe5:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
  22dbec:	00 
  22dbed:	48 8b 94 24 20 01 00 	mov    0x120(%rsp),%rdx
  22dbf4:	00 
  22dbf5:	48 8b 8c 24 28 01 00 	mov    0x128(%rsp),%rcx
  22dbfc:	00 
  22dbfd:	48 89 94 24 10 01 00 	mov    %rdx,0x110(%rsp)
  22dc04:	00 
  22dc05:	48 89 8c 24 18 01 00 	mov    %rcx,0x118(%rsp)
  22dc0c:	00 
  22dc0d:	48 c7 84 24 08 01 00 	movq   $0x1,0x108(%rsp)
  22dc14:	00 01 00 00 00 
        (
  22dc19:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22dc20:	00 
  22dc21:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  22dc28:	00 
  22dc29:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22dc30:	00 
  22dc31:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22dc38:	00 
  22dc39:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  22dc40:	00 
  22dc41:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  22dc48:	00 
  22dc49:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22dc50:	00 
    let (aligned_addr, front_padding) = if hole.addr == align_up(hole.addr, required_align) {
  22dc51:	e9 9c fe ff ff       	jmpq   22daf2 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x102>
                size: aligned_addr - hole.addr,
  22dc56:	48 8d 3d d3 5b fd ff 	lea    -0x2a42d(%rip),%rdi        # 203830 <str.0>
  22dc5d:	48 8d 15 8c ca 00 00 	lea    0xca8c(%rip),%rdx        # 23a6f0 <memcmp+0x4140>
  22dc64:	be 21 00 00 00       	mov    $0x21,%esi
  22dc69:	e8 f2 57 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dc6e:	0f 0b                	ud2    
  22dc70:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  22dc77:	00 
  22dc78:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22dc7f:	00 
        if aligned_addr + required_size > hole.addr + hole.size {
  22dc80:	48 01 c8             	add    %rcx,%rax
  22dc83:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22dc88:	0f 92 c0             	setb   %al
  22dc8b:	a8 01                	test   $0x1,%al
  22dc8d:	75 2d                	jne    22dcbc <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2cc>
  22dc8f:	eb 1a                	jmp    22dcab <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2bb>
  22dc91:	48 8d 3d f8 5b fd ff 	lea    -0x2a408(%rip),%rdi        # 203890 <str.2>
  22dc98:	48 8d 15 69 ca 00 00 	lea    0xca69(%rip),%rdx        # 23a708 <memcmp+0x4158>
  22dc9f:	be 1c 00 00 00       	mov    $0x1c,%esi
  22dca4:	e8 b7 57 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dca9:	0f 0b                	ud2    
  22dcab:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  22dcb0:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  22dcb5:	48 39 c8             	cmp    %rcx,%rax
  22dcb8:	77 3a                	ja     22dcf4 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x304>
  22dcba:	eb 1a                	jmp    22dcd6 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x2e6>
  22dcbc:	48 8d 3d cd 5b fd ff 	lea    -0x2a433(%rip),%rdi        # 203890 <str.2>
  22dcc3:	48 8d 15 56 ca 00 00 	lea    0xca56(%rip),%rdx        # 23a720 <memcmp+0x4170>
  22dcca:	be 1c 00 00 00       	mov    $0x1c,%esi
  22dccf:	e8 8c 57 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dcd4:	0f 0b                	ud2    
  22dcd6:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  22dcdd:	00 
  22dcde:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
            size: hole.size - (aligned_addr - hole.addr),
  22dce3:	48 29 c8             	sub    %rcx,%rax
  22dce6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22dceb:	0f 92 c0             	setb   %al
  22dcee:	a8 01                	test   $0x1,%al
  22dcf0:	75 40                	jne    22dd32 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x342>
  22dcf2:	eb 20                	jmp    22dd14 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x324>
  22dcf4:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  22dcfb:	00 
            return None;
  22dcfc:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  22dd03:	00 
  22dd04:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22dd0b:	00 
}
  22dd0c:	48 81 c4 18 02 00 00 	add    $0x218,%rsp
  22dd13:	c3                   	retq   
  22dd14:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  22dd19:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22dd20:	00 
            size: hole.size - (aligned_addr - hole.addr),
  22dd21:	48 29 c8             	sub    %rcx,%rax
  22dd24:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22dd29:	0f 92 c0             	setb   %al
  22dd2c:	a8 01                	test   $0x1,%al
  22dd2e:	75 4a                	jne    22dd7a <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x38a>
  22dd30:	eb 1a                	jmp    22dd4c <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x35c>
  22dd32:	48 8d 3d f7 5a fd ff 	lea    -0x2a509(%rip),%rdi        # 203830 <str.0>
  22dd39:	48 8d 15 f8 c9 00 00 	lea    0xc9f8(%rip),%rdx        # 23a738 <memcmp+0x4188>
  22dd40:	be 21 00 00 00       	mov    $0x21,%esi
  22dd45:	e8 16 57 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dd4a:	0f 0b                	ud2    
  22dd4c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22dd53:	00 
  22dd54:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22dd59:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
        HoleInfo {
  22dd5e:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
  22dd65:	00 
  22dd66:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  22dd6d:	00 
    let back_padding = if aligned_hole.size == required_size {
  22dd6e:	48 39 84 24 38 01 00 	cmp    %rax,0x138(%rsp)
  22dd75:	00 
  22dd76:	74 44                	je     22ddbc <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3cc>
  22dd78:	eb 1a                	jmp    22dd94 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3a4>
            size: hole.size - (aligned_addr - hole.addr),
  22dd7a:	48 8d 3d af 5a fd ff 	lea    -0x2a551(%rip),%rdi        # 203830 <str.0>
  22dd81:	48 8d 15 c8 c9 00 00 	lea    0xc9c8(%rip),%rdx        # 23a750 <memcmp+0x41a0>
  22dd88:	be 21 00 00 00       	mov    $0x21,%esi
  22dd8d:	e8 ce 56 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dd92:	0f 0b                	ud2    
  22dd94:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  22dd9b:	00 
    } else if aligned_hole.size - required_size < HoleList::min_size() {
  22dd9c:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  22dda3:	00 
  22dda4:	48 29 c8             	sub    %rcx,%rax
  22dda7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22ddac:	0f 92 c0             	setb   %al
  22ddaf:	a8 01                	test   $0x1,%al
  22ddb1:	0f 85 3c 01 00 00    	jne    22def3 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x503>
  22ddb7:	e9 2b 01 00 00       	jmpq   22dee7 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x4f7>
        None
  22ddbc:	48 c7 84 24 40 01 00 	movq   $0x0,0x140(%rsp)
  22ddc3:	00 00 00 00 00 
  22ddc8:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  22ddcf:	00 
  22ddd0:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22ddd7:	00 
            addr: aligned_hole.addr,
  22ddd8:	48 8b 8c 24 30 01 00 	mov    0x130(%rsp),%rcx
  22dddf:	00 
        info: HoleInfo {
  22dde0:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  22dde7:	00 
  22dde8:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
  22ddef:	00 
        front_padding: front_padding,
  22ddf0:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22ddf7:	00 
  22ddf8:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22ddff:	00 
  22de00:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22de07:	00 
  22de08:	48 89 84 24 c0 01 00 	mov    %rax,0x1c0(%rsp)
  22de0f:	00 
  22de10:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  22de17:	00 
  22de18:	48 89 84 24 c8 01 00 	mov    %rax,0x1c8(%rsp)
  22de1f:	00 
        back_padding: back_padding,
  22de20:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  22de27:	00 
  22de28:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  22de2f:	00 
  22de30:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  22de37:	00 
  22de38:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  22de3f:	00 
  22de40:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  22de47:	00 
  22de48:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  22de4f:	00 
    Some(Allocation {
  22de50:	48 8b 8c 24 a8 01 00 	mov    0x1a8(%rsp),%rcx
  22de57:	00 
  22de58:	48 8b 84 24 b0 01 00 	mov    0x1b0(%rsp),%rax
  22de5f:	00 
  22de60:	48 89 8c 24 68 01 00 	mov    %rcx,0x168(%rsp)
  22de67:	00 
  22de68:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  22de6f:	00 
  22de70:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
  22de77:	00 
  22de78:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  22de7f:	00 
  22de80:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  22de87:	00 
  22de88:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22de8f:	00 
  22de90:	48 8b 84 24 c8 01 00 	mov    0x1c8(%rsp),%rax
  22de97:	00 
  22de98:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  22de9f:	00 
  22dea0:	48 8b 84 24 d0 01 00 	mov    0x1d0(%rsp),%rax
  22dea7:	00 
  22dea8:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  22deaf:	00 
  22deb0:	48 8b 84 24 d8 01 00 	mov    0x1d8(%rsp),%rax
  22deb7:	00 
  22deb8:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  22debf:	00 
  22dec0:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  22dec7:	00 
  22dec8:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22decf:	00 
  22ded0:	48 8d b4 24 68 01 00 	lea    0x168(%rsp),%rsi
  22ded7:	00 
  22ded8:	ba 40 00 00 00       	mov    $0x40,%edx
  22dedd:	e8 7e 86 00 00       	callq  236560 <memcpy>
}
  22dee2:	e9 1d fe ff ff       	jmpq   22dd04 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x314>
    } else if aligned_hole.size - required_size < HoleList::min_size() {
  22dee7:	e8 94 fa ff ff       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22deec:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22def1:	eb 1a                	jmp    22df0d <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x51d>
  22def3:	48 8d 3d 36 59 fd ff 	lea    -0x2a6ca(%rip),%rdi        # 203830 <str.0>
  22defa:	48 8d 15 67 c8 00 00 	lea    0xc867(%rip),%rdx        # 23a768 <memcmp+0x41b8>
  22df01:	be 21 00 00 00       	mov    $0x21,%esi
  22df06:	e8 55 55 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22df0b:	0f 0b                	ud2    
  22df0d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22df12:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  22df17:	48 39 c8             	cmp    %rcx,%rax
  22df1a:	72 1e                	jb     22df3a <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x54a>
  22df1c:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22df23:	00 
            addr: aligned_hole.addr + required_size,
  22df24:	48 03 84 24 30 01 00 	add    0x130(%rsp),%rax
  22df2b:	00 
  22df2c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22df31:	0f 92 c0             	setb   %al
  22df34:	a8 01                	test   $0x1,%al
  22df36:	75 38                	jne    22df70 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x580>
  22df38:	eb 15                	jmp    22df4f <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x55f>
  22df3a:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  22df41:	00 
        return None;
  22df42:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  22df49:	00 
#![cfg_attr(feature = "const_mut_refs", feature(const_mut_refs))]
  22df4a:	e9 b5 fd ff ff       	jmpq   22dd04 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x314>
  22df4f:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  22df56:	00 
            size: aligned_hole.size - required_size,
  22df57:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  22df5e:	00 
  22df5f:	48 29 c8             	sub    %rcx,%rax
  22df62:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22df67:	0f 92 c0             	setb   %al
  22df6a:	a8 01                	test   $0x1,%al
  22df6c:	75 67                	jne    22dfd5 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x5e5>
  22df6e:	eb 1a                	jmp    22df8a <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x59a>
            addr: aligned_hole.addr + required_size,
  22df70:	48 8d 3d 19 59 fd ff 	lea    -0x2a6e7(%rip),%rdi        # 203890 <str.2>
  22df77:	48 8d 15 02 c8 00 00 	lea    0xc802(%rip),%rdx        # 23a780 <memcmp+0x41d0>
  22df7e:	be 1c 00 00 00       	mov    $0x1c,%esi
  22df83:	e8 d8 54 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22df88:	0f 0b                	ud2    
  22df8a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22df8f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Some(HoleInfo {
  22df94:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
  22df9b:	00 
  22df9c:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  22dfa3:	00 
  22dfa4:	48 8b 8c 24 58 01 00 	mov    0x158(%rsp),%rcx
  22dfab:	00 
  22dfac:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  22dfb3:	00 
  22dfb4:	48 89 8c 24 48 01 00 	mov    %rcx,0x148(%rsp)
  22dfbb:	00 
  22dfbc:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  22dfc3:	00 
  22dfc4:	48 c7 84 24 40 01 00 	movq   $0x1,0x140(%rsp)
  22dfcb:	00 01 00 00 00 
    let back_padding = if aligned_hole.size == required_size {
  22dfd0:	e9 f3 fd ff ff       	jmpq   22ddc8 <_ZN21linked_list_allocator4hole10split_hole17hfbe1bc3c9b30f3caE+0x3d8>
            size: aligned_hole.size - required_size,
  22dfd5:	48 8d 3d 54 58 fd ff 	lea    -0x2a7ac(%rip),%rdi        # 203830 <str.0>
  22dfdc:	48 8d 15 b5 c7 00 00 	lea    0xc7b5(%rip),%rdx        # 23a798 <memcmp+0x41e8>
  22dfe3:	be 21 00 00 00       	mov    $0x21,%esi
  22dfe8:	e8 73 54 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22dfed:	0f 0b                	ud2    
  22dfef:	cc                   	int3   

000000000022dff0 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E>:
fn allocate_first_fit(mut previous: &mut Hole, layout: Layout) -> Result<HoleInfo, ()> {
  22dff0:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  22dff7:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
  22dffe:	00 
  22dfff:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  22e006:	00 
  22e007:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
  22e00e:	00 
  22e00f:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  22e016:	00 
  22e017:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  22e01e:	00 
        let allocation: Option<Allocation> = previous
  22e01f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e026:	00 
  22e027:	48 83 c7 08          	add    $0x8,%rdi
  22e02b:	e8 40 0c 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e030:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22e037:	00 
  22e038:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  22e03f:	00 
            .and_then(|current| split_hole(current.info(), layout.clone()));
  22e040:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  22e047:	00 
  22e048:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22e04f:	00 
        let allocation: Option<Allocation> = previous
  22e050:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  22e057:	00 
  22e058:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  22e05f:	00 
  22e060:	e8 2b 0e 00 00       	callq  22ee90 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E>
        match allocation {
  22e065:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  22e06c:	00 
  22e06d:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  22e071:	0f 95 c0             	setne  %al
  22e074:	0f b6 c0             	movzbl %al,%eax
  22e077:	74 06                	je     22e07f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x8f>
  22e079:	eb 00                	jmp    22e07b <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x8b>
  22e07b:	eb 1c                	jmp    22e099 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0xa9>
  22e07d:	0f 0b                	ud2    
            None if previous.next.is_some() => {
  22e07f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e086:	00 
  22e087:	48 83 c7 08          	add    $0x8,%rdi
  22e08b:	e8 c0 0d 00 00       	callq  22ee50 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE>
  22e090:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  22e094:	e9 88 02 00 00       	jmpq   22e321 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x331>
            Some(allocation) => {
  22e099:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  22e0a0:	00 
  22e0a1:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  22e0a8:	00 
  22e0a9:	ba 40 00 00 00       	mov    $0x40,%edx
  22e0ae:	e8 ad 84 00 00       	callq  236560 <memcpy>
                previous.next = previous.next.as_mut().unwrap().next.take();
  22e0b3:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e0ba:	00 
  22e0bb:	48 83 c7 08          	add    $0x8,%rdi
  22e0bf:	e8 ac 0b 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e0c4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e0c9:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  22e0ce:	48 8d 35 db c6 00 00 	lea    0xc6db(%rip),%rsi        # 23a7b0 <memcmp+0x4200>
  22e0d5:	e8 26 0d 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e0da:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e0df:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e0e4:	48 8b 38             	mov    (%rax),%rdi
  22e0e7:	48 83 c7 08          	add    $0x8,%rdi
  22e0eb:	e8 50 0b 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e0f0:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22e0f5:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  22e0fa:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22e101:	00 
  22e102:	48 89 48 08          	mov    %rcx,0x8(%rax)
                if let Some(padding) = allocation.front_padding {
  22e106:	48 83 bc 24 08 01 00 	cmpq   $0x1,0x108(%rsp)
  22e10d:	00 01 
  22e10f:	75 4a                	jne    22e15b <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x16b>
  22e111:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22e118:	00 
  22e119:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22e11e:	48 8b 8c 24 18 01 00 	mov    0x118(%rsp),%rcx
  22e125:	00 
  22e126:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22e12b:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  22e132:	00 
  22e133:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  22e13a:	00 
                    let ptr = padding.addr as *mut Hole;
  22e13b:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  22e142:	00 
                            next: previous.next.take(),
  22e143:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e14a:	00 
  22e14b:	48 83 c7 08          	add    $0x8,%rdi
  22e14f:	e8 ec 0a 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e154:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22e159:	eb 14                	jmp    22e16f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x17f>
                if let Some(padding) = allocation.back_padding {
  22e15b:	48 83 bc 24 20 01 00 	cmpq   $0x1,0x120(%rsp)
  22e162:	00 01 
  22e164:	0f 84 c2 00 00 00    	je     22e22c <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x23c>
  22e16a:	e9 07 01 00 00       	jmpq   22e276 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x286>
  22e16f:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  22e174:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e179:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        ptr.write(Hole {
  22e17e:	48 89 8c 24 38 01 00 	mov    %rcx,0x138(%rsp)
  22e185:	00 
  22e186:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  22e18d:	00 
  22e18e:	48 8b b4 24 38 01 00 	mov    0x138(%rsp),%rsi
  22e195:	00 
  22e196:	48 8b 94 24 40 01 00 	mov    0x140(%rsp),%rdx
  22e19d:	00 
  22e19e:	48 89 bc 24 b0 01 00 	mov    %rdi,0x1b0(%rsp)
  22e1a5:	00 
  22e1a6:	48 89 b4 24 b8 01 00 	mov    %rsi,0x1b8(%rsp)
  22e1ad:	00 
  22e1ae:	48 89 94 24 c0 01 00 	mov    %rdx,0x1c0(%rsp)
  22e1b5:	00 
  22e1b6:	e8 65 11 00 00       	callq  22f320 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  22e1bb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
                    previous.next = Some(unsafe { &mut *ptr });
  22e1c0:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  22e1c7:	00 
  22e1c8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22e1cf:	00 
  22e1d0:	48 8b 8c 24 48 01 00 	mov    0x148(%rsp),%rcx
  22e1d7:	00 
  22e1d8:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    previous = move_helper(previous).next.as_mut().unwrap();
  22e1dc:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e1e3:	00 
  22e1e4:	e8 57 f3 ff ff       	callq  22d540 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  22e1e9:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22e1ee:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  22e1f3:	48 83 c7 08          	add    $0x8,%rdi
  22e1f7:	e8 74 0a 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e1fc:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e201:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  22e206:	48 8d 35 bb c5 00 00 	lea    0xc5bb(%rip),%rsi        # 23a7c8 <memcmp+0x4218>
  22e20d:	e8 ee 0b 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e212:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e217:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22e21c:	48 8b 00             	mov    (%rax),%rax
  22e21f:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22e226:	00 
                if let Some(padding) = allocation.front_padding {
  22e227:	e9 2f ff ff ff       	jmpq   22e15b <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x16b>
                if let Some(padding) = allocation.back_padding {
  22e22c:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  22e233:	00 
  22e234:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22e239:	48 8b 8c 24 30 01 00 	mov    0x130(%rsp),%rcx
  22e240:	00 
  22e241:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  22e246:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22e24d:	00 
  22e24e:	48 89 8c 24 88 01 00 	mov    %rcx,0x188(%rsp)
  22e255:	00 
                    let ptr = padding.addr as *mut Hole;
  22e256:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  22e25d:	00 
                            next: previous.next.take(),
  22e25e:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e265:	00 
  22e266:	48 83 c7 08          	add    $0x8,%rdi
  22e26a:	e8 d1 09 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e26f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e274:	eb 29                	jmp    22e29f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x2af>
  22e276:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22e27d:	00 
                return Ok(allocation.info);
  22e27e:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
  22e285:	00 
  22e286:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  22e28d:	00 
  22e28e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  22e292:	48 89 48 10          	mov    %rcx,0x10(%rax)
  22e296:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  22e29d:	eb 72                	jmp    22e311 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x321>
  22e29f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22e2a4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22e2a9:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
                        ptr.write(Hole {
  22e2ae:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  22e2b5:	00 
  22e2b6:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  22e2bd:	00 
  22e2be:	48 8b b4 24 50 01 00 	mov    0x150(%rsp),%rsi
  22e2c5:	00 
  22e2c6:	48 8b 94 24 58 01 00 	mov    0x158(%rsp),%rdx
  22e2cd:	00 
  22e2ce:	48 89 bc 24 98 01 00 	mov    %rdi,0x198(%rsp)
  22e2d5:	00 
  22e2d6:	48 89 b4 24 a0 01 00 	mov    %rsi,0x1a0(%rsp)
  22e2dd:	00 
  22e2de:	48 89 94 24 a8 01 00 	mov    %rdx,0x1a8(%rsp)
  22e2e5:	00 
  22e2e6:	e8 35 10 00 00       	callq  22f320 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  22e2eb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
                    previous.next = Some(unsafe { &mut *ptr });
  22e2f0:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  22e2f7:	00 
  22e2f8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22e2ff:	00 
  22e300:	48 8b 8c 24 60 01 00 	mov    0x160(%rsp),%rcx
  22e307:	00 
  22e308:	48 89 48 08          	mov    %rcx,0x8(%rax)
                if let Some(padding) = allocation.back_padding {
  22e30c:	e9 65 ff ff ff       	jmpq   22e276 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x286>
  22e311:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  22e318:	00 
}
  22e319:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  22e320:	c3                   	retq   
  22e321:	8a 44 24 7f          	mov    0x7f(%rsp),%al
            None if previous.next.is_some() => {
  22e325:	a8 01                	test   $0x1,%al
  22e327:	75 13                	jne    22e33c <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x34c>
  22e329:	eb 00                	jmp    22e32b <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x33b>
  22e32b:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  22e332:	00 
                return Err(());
  22e333:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  22e33a:	eb d5                	jmp    22e311 <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x321>
                previous = move_helper(previous).next.as_mut().unwrap();
  22e33c:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  22e343:	00 
  22e344:	e8 f7 f1 ff ff       	callq  22d540 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  22e349:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22e34e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22e353:	48 83 c7 08          	add    $0x8,%rdi
  22e357:	e8 14 09 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e35c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22e361:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22e366:	48 8d 35 73 c4 00 00 	lea    0xc473(%rip),%rsi        # 23a7e0 <memcmp+0x4230>
  22e36d:	e8 8e 0a 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e372:	48 89 04 24          	mov    %rax,(%rsp)
  22e376:	48 8b 04 24          	mov    (%rsp),%rax
  22e37a:	48 8b 00             	mov    (%rax),%rax
  22e37d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22e384:	00 
    loop {
  22e385:	e9 95 fc ff ff       	jmpq   22e01f <_ZN21linked_list_allocator4hole18allocate_first_fit17hbee277ab42005c23E+0x2f>
  22e38a:	cc                   	int3   
  22e38b:	cc                   	int3   
  22e38c:	cc                   	int3   
  22e38d:	cc                   	int3   
  22e38e:	cc                   	int3   
  22e38f:	cc                   	int3   

000000000022e390 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E>:
fn deallocate(mut hole: &mut Hole, addr: usize, mut size: usize) {
  22e390:	48 81 ec 08 02 00 00 	sub    $0x208,%rsp
  22e397:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  22e39e:	00 
  22e39f:	48 89 bc 24 e8 00 00 	mov    %rdi,0xe8(%rsp)
  22e3a6:	00 
  22e3a7:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  22e3ae:	00 
  22e3af:	48 89 b4 24 88 01 00 	mov    %rsi,0x188(%rsp)
  22e3b6:	00 
        assert!(size >= HoleList::min_size());
  22e3b7:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22e3be:	00 
  22e3bf:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  22e3c6:	00 
  22e3c7:	e8 b4 f5 ff ff       	callq  22d980 <_ZN21linked_list_allocator4hole8HoleList8min_size17hbee20cd8c693e12aE>
  22e3cc:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  22e3d3:	00 
  22e3d4:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  22e3db:	00 
  22e3dc:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  22e3e3:	00 
  22e3e4:	48 39 c8             	cmp    %rcx,%rax
  22e3e7:	0f 93 c0             	setae  %al
  22e3ea:	34 ff                	xor    $0xff,%al
  22e3ec:	a8 01                	test   $0x1,%al
  22e3ee:	75 10                	jne    22e400 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x70>
        let hole_addr = if hole.size == 0 {
  22e3f0:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22e3f7:	00 
  22e3f8:	48 83 38 00          	cmpq   $0x0,(%rax)
  22e3fc:	74 1c                	je     22e41a <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x8a>
  22e3fe:	eb 28                	jmp    22e428 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x98>
        assert!(size >= HoleList::min_size());
  22e400:	48 8d 3d a5 54 fd ff 	lea    -0x2ab5b(%rip),%rdi        # 2038ac <str.2+0x1c>
  22e407:	48 8d 15 ea c3 00 00 	lea    0xc3ea(%rip),%rdx        # 23a7f8 <memcmp+0x4248>
  22e40e:	be 2e 00 00 00       	mov    $0x2e,%esi
  22e413:	e8 48 50 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e418:	0f 0b                	ud2    
            0
  22e41a:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
  22e421:	00 00 00 00 00 
        let hole_addr = if hole.size == 0 {
  22e426:	eb 10                	jmp    22e438 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0xa8>
            hole as *mut _ as usize
  22e428:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22e42f:	00 
  22e430:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  22e437:	00 
            hole_addr + hole.size <= addr,
  22e438:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22e43f:	00 
  22e440:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e447:	00 
  22e448:	48 03 01             	add    (%rcx),%rax
  22e44b:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  22e452:	00 
  22e453:	0f 92 c0             	setb   %al
  22e456:	a8 01                	test   $0x1,%al
  22e458:	75 1e                	jne    22e478 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0xe8>
  22e45a:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  22e461:	00 
  22e462:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  22e469:	00 
  22e46a:	48 39 c8             	cmp    %rcx,%rax
  22e46d:	0f 96 c0             	setbe  %al
        assert!(
  22e470:	34 ff                	xor    $0xff,%al
  22e472:	a8 01                	test   $0x1,%al
  22e474:	75 37                	jne    22e4ad <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x11d>
  22e476:	eb 1a                	jmp    22e492 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x102>
            hole_addr + hole.size <= addr,
  22e478:	48 8d 3d 11 54 fd ff 	lea    -0x2abef(%rip),%rdi        # 203890 <str.2>
  22e47f:	48 8d 15 8a c3 00 00 	lea    0xc38a(%rip),%rdx        # 23a810 <memcmp+0x4260>
  22e486:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e48b:	e8 d0 4f 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e490:	0f 0b                	ud2    
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  22e492:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  22e499:	00 
  22e49a:	48 83 c7 08          	add    $0x8,%rdi
  22e49e:	e8 1d 08 00 00       	callq  22ecc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E>
  22e4a3:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  22e4aa:	00 
  22e4ab:	eb 1a                	jmp    22e4c7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x137>
        assert!(
  22e4ad:	48 8d 3d 26 54 fd ff 	lea    -0x2abda(%rip),%rdi        # 2038da <str.2+0x4a>
  22e4b4:	48 8d 15 6d c3 00 00 	lea    0xc36d(%rip),%rdx        # 23a828 <memcmp+0x4278>
  22e4bb:	be 2d 00 00 00       	mov    $0x2d,%esi
  22e4c0:	e8 9b 4f 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e4c5:	0f 0b                	ud2    
  22e4c7:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  22e4ce:	00 
        let next_hole_info = hole.next.as_ref().map(|next| next.info());
  22e4cf:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  22e4d6:	00 
  22e4d7:	e8 c4 06 00 00       	callq  22eba0 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E>
        match next_hole_info {
  22e4dc:	48 83 bc 24 00 01 00 	cmpq   $0x1,0x100(%rsp)
  22e4e3:	00 01 
  22e4e5:	75 40                	jne    22e527 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x197>
            Some(next) if hole_addr + hole.size == addr && addr + size == next.addr => {
  22e4e7:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  22e4ee:	00 
  22e4ef:	48 83 c0 08          	add    $0x8,%rax
  22e4f3:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  22e4fa:	00 
  22e4fb:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  22e502:	00 
  22e503:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22e50a:	00 
  22e50b:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e512:	00 
  22e513:	48 03 01             	add    (%rcx),%rax
  22e516:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  22e51d:	00 
  22e51e:	0f 92 c0             	setb   %al
  22e521:	a8 01                	test   $0x1,%al
  22e523:	75 44                	jne    22e569 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1d9>
  22e525:	eb 2b                	jmp    22e552 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1c2>
            _ if hole_addr + hole.size == addr => {
  22e527:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  22e52e:	00 
  22e52f:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e536:	00 
  22e537:	48 03 01             	add    (%rcx),%rax
  22e53a:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  22e541:	00 
  22e542:	0f 92 c0             	setb   %al
  22e545:	a8 01                	test   $0x1,%al
  22e547:	0f 85 ca 01 00 00    	jne    22e717 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x387>
  22e54d:	e9 ae 01 00 00       	jmpq   22e700 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x370>
  22e552:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  22e559:	00 
  22e55a:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  22e561:	00 
            Some(next) if hole_addr + hole.size == addr && addr + size == next.addr => {
  22e562:	48 39 c8             	cmp    %rcx,%rax
  22e565:	74 26                	je     22e58d <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1fd>
  22e567:	eb 1a                	jmp    22e583 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x1f3>
  22e569:	48 8d 3d 20 53 fd ff 	lea    -0x2ace0(%rip),%rdi        # 203890 <str.2>
  22e570:	48 8d 15 c9 c2 00 00 	lea    0xc2c9(%rip),%rdx        # 23a840 <memcmp+0x4290>
  22e577:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e57c:	e8 df 4e 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e581:	0f 0b                	ud2    
  22e583:	c6 84 24 1f 01 00 00 	movb   $0x0,0x11f(%rsp)
  22e58a:	00 
  22e58b:	eb 5a                	jmp    22e5e7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x257>
  22e58d:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22e594:	00 
  22e595:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  22e59c:	00 
  22e59d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  22e5a4:	00 
  22e5a5:	0f 92 c0             	setb   %al
  22e5a8:	a8 01                	test   $0x1,%al
  22e5aa:	75 21                	jne    22e5cd <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x23d>
  22e5ac:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  22e5b3:	00 
  22e5b4:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  22e5bb:	00 
  22e5bc:	48 3b 01             	cmp    (%rcx),%rax
  22e5bf:	0f 94 c0             	sete   %al
  22e5c2:	24 01                	and    $0x1,%al
  22e5c4:	88 84 24 1f 01 00 00 	mov    %al,0x11f(%rsp)
  22e5cb:	eb 1a                	jmp    22e5e7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x257>
  22e5cd:	48 8d 3d bc 52 fd ff 	lea    -0x2ad44(%rip),%rdi        # 203890 <str.2>
  22e5d4:	48 8d 15 7d c2 00 00 	lea    0xc27d(%rip),%rdx        # 23a858 <memcmp+0x42a8>
  22e5db:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e5e0:	e8 7b 4e 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e5e5:	0f 0b                	ud2    
  22e5e7:	f6 84 24 1f 01 00 00 	testb  $0x1,0x11f(%rsp)
  22e5ee:	01 
  22e5ef:	0f 84 32 ff ff ff    	je     22e527 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x197>
  22e5f5:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  22e5fc:	00 
  22e5fd:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22e604:	00 
  22e605:	48 89 8c 24 98 01 00 	mov    %rcx,0x198(%rsp)
  22e60c:	00 
  22e60d:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  22e614:	00 
                hole.size += size + next.size; // merge the F and Y blocks to this X block
  22e615:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  22e61c:	00 
  22e61d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  22e624:	00 
  22e625:	0f 92 c0             	setb   %al
  22e628:	a8 01                	test   $0x1,%al
  22e62a:	75 24                	jne    22e650 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x2c0>
  22e62c:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  22e633:	00 
  22e634:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e63b:	00 
  22e63c:	48 03 01             	add    (%rcx),%rax
  22e63f:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  22e646:	00 
  22e647:	0f 92 c0             	setb   %al
  22e64a:	a8 01                	test   $0x1,%al
  22e64c:	75 4a                	jne    22e698 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x308>
  22e64e:	eb 1a                	jmp    22e66a <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x2da>
  22e650:	48 8d 3d 39 52 fd ff 	lea    -0x2adc7(%rip),%rdi        # 203890 <str.2>
  22e657:	48 8d 15 12 c2 00 00 	lea    0xc212(%rip),%rdx        # 23a870 <memcmp+0x42c0>
  22e65e:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e663:	e8 f8 4d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e668:	0f 0b                	ud2    
  22e66a:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  22e671:	00 
  22e672:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22e679:	00 
  22e67a:	48 89 08             	mov    %rcx,(%rax)
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  22e67d:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  22e684:	00 
  22e685:	48 83 c7 08          	add    $0x8,%rdi
  22e689:	e8 e2 05 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e68e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  22e695:	00 
  22e696:	eb 1a                	jmp    22e6b2 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x322>
                hole.size += size + next.size; // merge the F and Y blocks to this X block
  22e698:	48 8d 3d f1 51 fd ff 	lea    -0x2ae0f(%rip),%rdi        # 203890 <str.2>
  22e69f:	48 8d 15 e2 c1 00 00 	lea    0xc1e2(%rip),%rdx        # 23a888 <memcmp+0x42d8>
  22e6a6:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e6ab:	e8 b0 4d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e6b0:	0f 0b                	ud2    
  22e6b2:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  22e6b9:	00 
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  22e6ba:	48 8d 35 df c1 00 00 	lea    0xc1df(%rip),%rsi        # 23a8a0 <memcmp+0x42f0>
  22e6c1:	e8 3a 07 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e6c6:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  22e6cd:	00 
  22e6ce:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  22e6d5:	00 
  22e6d6:	48 8b 38             	mov    (%rax),%rdi
  22e6d9:	48 83 c7 08          	add    $0x8,%rdi
  22e6dd:	e8 5e 05 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e6e2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  22e6e7:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  22e6ec:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22e6f3:	00 
  22e6f4:	48 89 48 08          	mov    %rcx,0x8(%rax)
}
  22e6f8:	48 81 c4 08 02 00 00 	add    $0x208,%rsp
  22e6ff:	c3                   	retq   
  22e700:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  22e707:	00 
  22e708:	48 8b 8c 24 e0 00 00 	mov    0xe0(%rsp),%rcx
  22e70f:	00 
            _ if hole_addr + hole.size == addr => {
  22e710:	48 39 c8             	cmp    %rcx,%rax
  22e713:	74 2c                	je     22e741 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3b1>
  22e715:	eb 1a                	jmp    22e731 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3a1>
  22e717:	48 8d 3d 72 51 fd ff 	lea    -0x2ae8e(%rip),%rdi        # 203890 <str.2>
  22e71e:	48 8d 15 93 c1 00 00 	lea    0xc193(%rip),%rdx        # 23a8b8 <memcmp+0x4308>
  22e725:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e72a:	e8 31 4d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e72f:	0f 0b                	ud2    
        match next_hole_info {
  22e731:	48 83 bc 24 00 01 00 	cmpq   $0x1,0x100(%rsp)
  22e738:	00 01 
  22e73a:	74 50                	je     22e78c <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3fc>
  22e73c:	e9 82 00 00 00       	jmpq   22e7c3 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x433>
                hole.size += size; // merge the F block to this X block
  22e741:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22e748:	00 
  22e749:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e750:	00 
  22e751:	48 03 01             	add    (%rcx),%rax
  22e754:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  22e759:	0f 92 c0             	setb   %al
  22e75c:	a8 01                	test   $0x1,%al
  22e75e:	75 12                	jne    22e772 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x3e2>
  22e760:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  22e765:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22e76c:	00 
  22e76d:	48 89 08             	mov    %rcx,(%rax)
            _ if hole_addr + hole.size == addr => {
  22e770:	eb 86                	jmp    22e6f8 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x368>
                hole.size += size; // merge the F block to this X block
  22e772:	48 8d 3d 17 51 fd ff 	lea    -0x2aee9(%rip),%rdi        # 203890 <str.2>
  22e779:	48 8d 15 50 c1 00 00 	lea    0xc150(%rip),%rdx        # 23a8d0 <memcmp+0x4320>
  22e780:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e785:	e8 d6 4c 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e78a:	0f 0b                	ud2    
  22e78c:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22e793:	00 
            Some(next) if addr + size == next.addr => {
  22e794:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  22e79b:	00 
  22e79c:	48 83 c1 08          	add    $0x8,%rcx
  22e7a0:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  22e7a5:	48 89 8c 24 a8 01 00 	mov    %rcx,0x1a8(%rsp)
  22e7ac:	00 
  22e7ad:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  22e7b4:	00 
  22e7b5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  22e7ba:	0f 92 c0             	setb   %al
  22e7bd:	a8 01                	test   $0x1,%al
  22e7bf:	75 3b                	jne    22e7fc <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x46c>
  22e7c1:	eb 28                	jmp    22e7eb <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x45b>
                    size: size,
  22e7c3:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  22e7ca:	00 
  22e7cb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
                    next: hole.next.take(), // the reference to the Y block (if it exists)
  22e7d0:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  22e7d7:	00 
  22e7d8:	48 83 c7 08          	add    $0x8,%rdi
  22e7dc:	e8 5f 04 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e7e1:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  22e7e6:	e9 84 01 00 00       	jmpq   22e96f <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x5df>
  22e7eb:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  22e7f0:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            Some(next) if addr + size == next.addr => {
  22e7f5:	48 3b 01             	cmp    (%rcx),%rax
  22e7f8:	74 48                	je     22e842 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x4b2>
  22e7fa:	eb 1a                	jmp    22e816 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x486>
  22e7fc:	48 8d 3d 8d 50 fd ff 	lea    -0x2af73(%rip),%rdi        # 203890 <str.2>
  22e803:	48 8d 15 de c0 00 00 	lea    0xc0de(%rip),%rdx        # 23a8e8 <memcmp+0x4338>
  22e80a:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e80f:	e8 4c 4c 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e814:	0f 0b                	ud2    
  22e816:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22e81d:	00 
            Some(next) if next.addr <= addr => {
  22e81e:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  22e825:	00 
  22e826:	48 83 c1 08          	add    $0x8,%rcx
  22e82a:	48 89 8c 24 c0 01 00 	mov    %rcx,0x1c0(%rsp)
  22e831:	00 
  22e832:	48 39 84 24 08 01 00 	cmp    %rax,0x108(%rsp)
  22e839:	00 
  22e83a:	0f 86 bf 00 00 00    	jbe    22e8ff <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x56f>
  22e840:	eb 81                	jmp    22e7c3 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x433>
            Some(next) if addr + size == next.addr => {
  22e842:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  22e849:	00 
  22e84a:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22e851:	00 
  22e852:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22e857:	48 89 8c 24 b0 01 00 	mov    %rcx,0x1b0(%rsp)
  22e85e:	00 
  22e85f:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
  22e866:	00 
                hole.next = hole.next.as_mut().unwrap().next.take(); // remove the Y block
  22e867:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  22e86e:	00 
  22e86f:	48 83 c7 08          	add    $0x8,%rdi
  22e873:	e8 f8 03 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e878:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  22e87d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  22e882:	48 8d 35 77 c0 00 00 	lea    0xc077(%rip),%rsi        # 23a900 <memcmp+0x4350>
  22e889:	e8 72 05 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e88e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22e893:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22e898:	48 8b 38             	mov    (%rax),%rdi
  22e89b:	48 83 c7 08          	add    $0x8,%rdi
  22e89f:	e8 9c 03 00 00       	callq  22ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>
  22e8a4:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22e8a9:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  22e8ae:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  22e8b3:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  22e8ba:	00 
  22e8bb:	48 89 51 08          	mov    %rdx,0x8(%rcx)
                size += next.size; // free the merged F/Y block in next iteration
  22e8bf:	48 03 84 24 f0 00 00 	add    0xf0(%rsp),%rax
  22e8c6:	00 
  22e8c7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22e8cc:	0f 92 c0             	setb   %al
  22e8cf:	a8 01                	test   $0x1,%al
  22e8d1:	75 12                	jne    22e8e5 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x555>
  22e8d3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  22e8d8:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  22e8df:	00 
  22e8e0:	e9 d2 fa ff ff       	jmpq   22e3b7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x27>
  22e8e5:	48 8d 3d a4 4f fd ff 	lea    -0x2b05c(%rip),%rdi        # 203890 <str.2>
  22e8ec:	48 8d 15 25 c0 00 00 	lea    0xc025(%rip),%rdx        # 23a918 <memcmp+0x4368>
  22e8f3:	be 1c 00 00 00       	mov    $0x1c,%esi
  22e8f8:	e8 63 4b 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22e8fd:	0f 0b                	ud2    
            Some(next) if next.addr <= addr => {
  22e8ff:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
  22e906:	00 
  22e907:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  22e90e:	00 
  22e90f:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  22e916:	00 
  22e917:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  22e91e:	00 
                hole = move_helper(hole).next.as_mut().unwrap(); // start next iteration at next hole
  22e91f:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  22e926:	00 
  22e927:	e8 14 ec ff ff       	callq  22d540 <_ZN21linked_list_allocator4hole11move_helper17h76f02b5240f45bcdE>
  22e92c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22e931:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22e936:	48 83 c7 08          	add    $0x8,%rdi
  22e93a:	e8 31 03 00 00       	callq  22ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>
  22e93f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22e944:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  22e949:	48 8d 35 e0 bf 00 00 	lea    0xbfe0(%rip),%rsi        # 23a930 <memcmp+0x4380>
  22e950:	e8 ab 04 00 00       	callq  22ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>
  22e955:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22e95a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22e95f:	48 8b 00             	mov    (%rax),%rax
  22e962:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  22e969:	00 
  22e96a:	e9 48 fa ff ff       	jmpq   22e3b7 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x27>
  22e96f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  22e974:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                let new_hole = Hole {
  22e979:	48 89 8c 24 20 01 00 	mov    %rcx,0x120(%rsp)
  22e980:	00 
  22e981:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  22e988:	00 
                debug_assert_eq!(addr % align_of::<Hole>(), 0);
  22e989:	b8 08 00 00 00       	mov    $0x8,%eax
  22e98e:	48 83 f8 00          	cmp    $0x0,%rax
  22e992:	0f 94 c0             	sete   %al
  22e995:	a8 01                	test   $0x1,%al
  22e997:	75 6b                	jne    22ea04 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x674>
  22e999:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22e9a0:	00 
  22e9a1:	48 83 e0 07          	and    $0x7,%rax
  22e9a5:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  22e9ac:	00 
  22e9ad:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  22e9b4:	00 
  22e9b5:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  22e9bc:	00 
  22e9bd:	48 8d 05 5c 1c fd ff 	lea    -0x2e3a4(%rip),%rax        # 200620 <str.0+0x100>
  22e9c4:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  22e9cb:	00 
  22e9cc:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  22e9d3:	00 
  22e9d4:	48 89 04 24          	mov    %rax,(%rsp)
  22e9d8:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
  22e9df:	00 
  22e9e0:	48 8b 8c 24 38 01 00 	mov    0x138(%rsp),%rcx
  22e9e7:	00 
  22e9e8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22e9ed:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  22e9f4:	00 
  22e9f5:	48 83 38 00          	cmpq   $0x0,(%rax)
  22e9f9:	0f 94 c0             	sete   %al
  22e9fc:	34 ff                	xor    $0xff,%al
  22e9fe:	a8 01                	test   $0x1,%al
  22ea00:	75 5b                	jne    22ea5d <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x6cd>
  22ea02:	eb 1a                	jmp    22ea1e <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x68e>
  22ea04:	48 8d 3d 05 4f fd ff 	lea    -0x2b0fb(%rip),%rdi        # 203910 <str.3>
  22ea0b:	48 8d 15 36 bf 00 00 	lea    0xbf36(%rip),%rdx        # 23a948 <memcmp+0x4398>
  22ea12:	be 39 00 00 00       	mov    $0x39,%esi
  22ea17:	e8 44 4a 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ea1c:	0f 0b                	ud2    
  22ea1e:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  22ea25:	00 
                let ptr = addr as *mut Hole;
  22ea26:	48 89 bc 24 e8 01 00 	mov    %rdi,0x1e8(%rsp)
  22ea2d:	00 
                unsafe { ptr.write(new_hole) };
  22ea2e:	48 8b b4 24 20 01 00 	mov    0x120(%rsp),%rsi
  22ea35:	00 
  22ea36:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  22ea3d:	00 
  22ea3e:	48 89 bc 24 f0 01 00 	mov    %rdi,0x1f0(%rsp)
  22ea45:	00 
  22ea46:	48 89 b4 24 f8 01 00 	mov    %rsi,0x1f8(%rsp)
  22ea4d:	00 
  22ea4e:	48 89 94 24 00 02 00 	mov    %rdx,0x200(%rsp)
  22ea55:	00 
  22ea56:	e8 c5 08 00 00       	callq  22f320 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>
  22ea5b:	eb 35                	jmp    22ea92 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x702>
  22ea5d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22ea62:	48 8b 34 24          	mov    (%rsp),%rsi
                debug_assert_eq!(addr % align_of::<Hole>(), 0);
  22ea66:	c6 84 24 4f 01 00 00 	movb   $0x0,0x14f(%rsp)
  22ea6d:	00 
  22ea6e:	48 c7 84 24 50 01 00 	movq   $0x0,0x150(%rsp)
  22ea75:	00 00 00 00 00 
  22ea7a:	4c 8d 05 df be 00 00 	lea    0xbedf(%rip),%r8        # 23a960 <memcmp+0x43b0>
  22ea81:	31 ff                	xor    %edi,%edi
  22ea83:	48 8d 8c 24 50 01 00 	lea    0x150(%rsp),%rcx
  22ea8a:	00 
  22ea8b:	e8 b0 07 00 00       	callq  22f240 <_ZN4core9panicking13assert_failed17h495489438e8657baE>
  22ea90:	0f 0b                	ud2    
  22ea92:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  22ea99:	00 
                hole.next = Some(unsafe { &mut *ptr });
  22ea9a:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  22eaa1:	00 
  22eaa2:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  22eaa9:	00 
  22eaaa:	48 8b 8c 24 80 01 00 	mov    0x180(%rsp),%rcx
  22eab1:	00 
  22eab2:	48 89 48 08          	mov    %rcx,0x8(%rax)
            }
  22eab6:	e9 3d fc ff ff       	jmpq   22e6f8 <_ZN21linked_list_allocator4hole10deallocate17h741b6f61a7c05564E+0x368>
  22eabb:	cc                   	int3   
  22eabc:	cc                   	int3   
  22eabd:	cc                   	int3   
  22eabe:	cc                   	int3   
  22eabf:	cc                   	int3   

000000000022eac0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbbaec3072ab18b17E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  22eac0:	48 83 ec 18          	sub    $0x18,%rsp
  22eac4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22eac9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22eace:	48 8b 3f             	mov    (%rdi),%rdi
  22ead1:	e8 1a 00 00 00       	callq  22eaf0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E>
  22ead6:	88 44 24 07          	mov    %al,0x7(%rsp)
  22eada:	8a 44 24 07          	mov    0x7(%rsp),%al
  22eade:	24 01                	and    $0x1,%al
  22eae0:	0f b6 c0             	movzbl %al,%eax
  22eae3:	48 83 c4 18          	add    $0x18,%rsp
  22eae7:	c3                   	retq   
  22eae8:	cc                   	int3   
  22eae9:	cc                   	int3   
  22eaea:	cc                   	int3   
  22eaeb:	cc                   	int3   
  22eaec:	cc                   	int3   
  22eaed:	cc                   	int3   
  22eaee:	cc                   	int3   
  22eaef:	cc                   	int3   

000000000022eaf0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  22eaf0:	48 83 ec 38          	sub    $0x38,%rsp
  22eaf4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22eaf9:	48 89 f8             	mov    %rdi,%rax
  22eafc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22eb01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22eb06:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22eb0b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  22eb10:	e8 3b 6c 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  22eb15:	88 44 24 26          	mov    %al,0x26(%rsp)
  22eb19:	8a 44 24 26          	mov    0x26(%rsp),%al
  22eb1d:	a8 01                	test   $0x1,%al
  22eb1f:	75 12                	jne    22eb33 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x43>
  22eb21:	eb 00                	jmp    22eb23 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x33>
  22eb23:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  22eb28:	e8 33 6c 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  22eb2d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22eb31:	eb 25                	jmp    22eb58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x68>
  22eb33:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22eb38:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  22eb3d:	e8 fe 3b 00 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  22eb42:	24 01                	and    $0x1,%al
  22eb44:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  22eb48:	eb 00                	jmp    22eb4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x5a>
            }
  22eb4a:	8a 44 24 27          	mov    0x27(%rsp),%al
  22eb4e:	24 01                	and    $0x1,%al
  22eb50:	0f b6 c0             	movzbl %al,%eax
  22eb53:	48 83 c4 38          	add    $0x38,%rsp
  22eb57:	c3                   	retq   
  22eb58:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  22eb5c:	a8 01                	test   $0x1,%al
  22eb5e:	75 19                	jne    22eb79 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x89>
  22eb60:	eb 00                	jmp    22eb62 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x72>
  22eb62:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22eb67:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  22eb6c:	e8 ff 59 00 00       	callq  234570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  22eb71:	24 01                	and    $0x1,%al
  22eb73:	88 44 24 27          	mov    %al,0x27(%rsp)
  22eb77:	eb 19                	jmp    22eb92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa2>
  22eb79:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  22eb7e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  22eb83:	e8 58 3c 00 00       	callq  2327e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  22eb88:	24 01                	and    $0x1,%al
  22eb8a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  22eb8e:	eb 00                	jmp    22eb90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa0>
                if f.debug_lower_hex() {
  22eb90:	eb b8                	jmp    22eb4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0x5a>
                } else if f.debug_upper_hex() {
  22eb92:	eb fc                	jmp    22eb90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17he0ddc563961c5d88E+0xa0>
  22eb94:	cc                   	int3   
  22eb95:	cc                   	int3   
  22eb96:	cc                   	int3   
  22eb97:	cc                   	int3   
  22eb98:	cc                   	int3   
  22eb99:	cc                   	int3   
  22eb9a:	cc                   	int3   
  22eb9b:	cc                   	int3   
  22eb9c:	cc                   	int3   
  22eb9d:	cc                   	int3   
  22eb9e:	cc                   	int3   
  22eb9f:	cc                   	int3   

000000000022eba0 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  22eba0:	48 83 ec 48          	sub    $0x48,%rsp
  22eba4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22eba9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22ebae:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        match self {
  22ebb3:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22ebb8:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  22ebbd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22ebc2:	48 85 c0             	test   %rax,%rax
  22ebc5:	0f 95 c0             	setne  %al
  22ebc8:	0f b6 c0             	movzbl %al,%eax
  22ebcb:	74 06                	je     22ebd3 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x33>
  22ebcd:	eb 00                	jmp    22ebcf <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x2f>
  22ebcf:	eb 10                	jmp    22ebe1 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x41>
  22ebd1:	0f 0b                	ud2    
  22ebd3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  22ebd8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  22ebdf:	eb 44                	jmp    22ec25 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x85>
            Some(x) => Some(f(x)),
  22ebe1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22ebe6:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22ebeb:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22ebf0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22ebf5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  22ebfa:	e8 11 e9 ff ff       	callq  22d510 <_ZN21linked_list_allocator4hole10deallocate28_$u7b$$u7b$closure$u7d$$u7d$17hce09692d5969a953E>
  22ebff:	48 89 04 24          	mov    %rax,(%rsp)
  22ec03:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22ec08:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ec0d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22ec12:	48 8b 14 24          	mov    (%rsp),%rdx
  22ec16:	48 89 50 08          	mov    %rdx,0x8(%rax)
  22ec1a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  22ec1e:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    }
  22ec25:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  22ec2a:	75 0a                	jne    22ec36 <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x96>
  22ec2c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ec31:	48 83 c4 48          	add    $0x48,%rsp
  22ec35:	c3                   	retq   
  22ec36:	eb f4                	jmp    22ec2c <_ZN4core6option15Option$LT$T$GT$3map17he68d412902be0dc5E+0x8c>
  22ec38:	cc                   	int3   
  22ec39:	cc                   	int3   
  22ec3a:	cc                   	int3   
  22ec3b:	cc                   	int3   
  22ec3c:	cc                   	int3   
  22ec3d:	cc                   	int3   
  22ec3e:	cc                   	int3   
  22ec3f:	cc                   	int3   

000000000022ec40 <_ZN4core6option15Option$LT$T$GT$4take17h167f260a6344d0d8E>:
    pub const fn take(&mut self) -> Option<T> {
  22ec40:	48 83 ec 18          	sub    $0x18,%rsp
  22ec44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        mem::replace(self, None)
  22ec49:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  22ec50:	00 00 
  22ec52:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22ec57:	e8 c4 02 00 00       	callq  22ef20 <_ZN4core3mem7replace17h8cfda8e0b29e0426E>
  22ec5c:	48 89 04 24          	mov    %rax,(%rsp)
  22ec60:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22ec64:	48 83 c4 18          	add    $0x18,%rsp
  22ec68:	c3                   	retq   
  22ec69:	cc                   	int3   
  22ec6a:	cc                   	int3   
  22ec6b:	cc                   	int3   
  22ec6c:	cc                   	int3   
  22ec6d:	cc                   	int3   
  22ec6e:	cc                   	int3   
  22ec6f:	cc                   	int3   

000000000022ec70 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE>:
    pub const fn as_mut(&mut self) -> Option<&mut T> {
  22ec70:	48 83 ec 20          	sub    $0x20,%rsp
  22ec74:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ec78:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  22ec7d:	48 8b 07             	mov    (%rdi),%rax
  22ec80:	48 85 c0             	test   %rax,%rax
  22ec83:	0f 95 c0             	setne  %al
  22ec86:	0f b6 c0             	movzbl %al,%eax
  22ec89:	74 06                	je     22ec91 <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x21>
  22ec8b:	eb 00                	jmp    22ec8d <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x1d>
  22ec8d:	eb 0d                	jmp    22ec9c <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x2c>
  22ec8f:	0f 0b                	ud2    
            None => None,
  22ec91:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  22ec98:	00 00 
  22ec9a:	eb 0e                	jmp    22ecaa <_ZN4core6option15Option$LT$T$GT$6as_mut17h340d06b43508b1fdE+0x3a>
  22ec9c:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref mut x) => Some(x),
  22eca0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22eca5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  22ecaa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ecaf:	48 83 c4 20          	add    $0x20,%rsp
  22ecb3:	c3                   	retq   
  22ecb4:	cc                   	int3   
  22ecb5:	cc                   	int3   
  22ecb6:	cc                   	int3   
  22ecb7:	cc                   	int3   
  22ecb8:	cc                   	int3   
  22ecb9:	cc                   	int3   
  22ecba:	cc                   	int3   
  22ecbb:	cc                   	int3   
  22ecbc:	cc                   	int3   
  22ecbd:	cc                   	int3   
  22ecbe:	cc                   	int3   
  22ecbf:	cc                   	int3   

000000000022ecc0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E>:
    pub const fn as_ref(&self) -> Option<&T> {
  22ecc0:	48 83 ec 20          	sub    $0x20,%rsp
  22ecc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  22ecc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  22eccd:	48 8b 07             	mov    (%rdi),%rax
  22ecd0:	48 85 c0             	test   %rax,%rax
  22ecd3:	0f 95 c0             	setne  %al
  22ecd6:	0f b6 c0             	movzbl %al,%eax
  22ecd9:	74 06                	je     22ece1 <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x21>
  22ecdb:	eb 00                	jmp    22ecdd <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x1d>
  22ecdd:	eb 0d                	jmp    22ecec <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x2c>
  22ecdf:	0f 0b                	ud2    
            None => None,
  22ece1:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  22ece8:	00 00 
  22ecea:	eb 0e                	jmp    22ecfa <_ZN4core6option15Option$LT$T$GT$6as_ref17hc7c4b9b53d0e7bd4E+0x3a>
  22ecec:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  22ecf0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ecf5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  22ecfa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ecff:	48 83 c4 20          	add    $0x20,%rsp
  22ed03:	c3                   	retq   
  22ed04:	cc                   	int3   
  22ed05:	cc                   	int3   
  22ed06:	cc                   	int3   
  22ed07:	cc                   	int3   
  22ed08:	cc                   	int3   
  22ed09:	cc                   	int3   
  22ed0a:	cc                   	int3   
  22ed0b:	cc                   	int3   
  22ed0c:	cc                   	int3   
  22ed0d:	cc                   	int3   
  22ed0e:	cc                   	int3   
  22ed0f:	cc                   	int3   

000000000022ed10 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE>:
    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
  22ed10:	48 83 ec 48          	sub    $0x48,%rsp
  22ed14:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22ed19:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ed1e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match self {
  22ed23:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  22ed28:	c6 44 24 2e 00       	movb   $0x0,0x2e(%rsp)
  22ed2d:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  22ed32:	c6 44 24 2e 01       	movb   $0x1,0x2e(%rsp)
  22ed37:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ed3c:	48 85 c0             	test   %rax,%rax
  22ed3f:	0f 95 c0             	setne  %al
  22ed42:	0f b6 c0             	movzbl %al,%eax
  22ed45:	74 06                	je     22ed4d <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x3d>
  22ed47:	eb 00                	jmp    22ed49 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x39>
  22ed49:	eb 13                	jmp    22ed5e <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x4e>
  22ed4b:	0f 0b                	ud2    
  22ed4d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            None => default,
  22ed52:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  22ed57:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ed5c:	eb 25                	jmp    22ed83 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x73>
            Some(t) => f(t),
  22ed5e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ed63:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22ed68:	c6 44 24 2e 00       	movb   $0x0,0x2e(%rsp)
  22ed6d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22ed72:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  22ed77:	e8 f4 05 00 00       	callq  22f370 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h6c2ffa1bccbae6d3E>
  22ed7c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  22ed81:	eb 00                	jmp    22ed83 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x73>
  22ed83:	f6 44 24 2e 01       	testb  $0x1,0x2e(%rsp)
  22ed88:	75 09                	jne    22ed93 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x83>
  22ed8a:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  22ed8f:	75 0e                	jne    22ed9f <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x8f>
  22ed91:	eb 02                	jmp    22ed95 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x85>
  22ed93:	eb f5                	jmp    22ed8a <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x7a>
  22ed95:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ed9a:	48 83 c4 48          	add    $0x48,%rsp
  22ed9e:	c3                   	retq   
  22ed9f:	eb f4                	jmp    22ed95 <_ZN4core6option15Option$LT$T$GT$6map_or17hf4c46f94ad2bbb8cE+0x85>
  22eda1:	cc                   	int3   
  22eda2:	cc                   	int3   
  22eda3:	cc                   	int3   
  22eda4:	cc                   	int3   
  22eda5:	cc                   	int3   
  22eda6:	cc                   	int3   
  22eda7:	cc                   	int3   
  22eda8:	cc                   	int3   
  22eda9:	cc                   	int3   
  22edaa:	cc                   	int3   
  22edab:	cc                   	int3   
  22edac:	cc                   	int3   
  22edad:	cc                   	int3   
  22edae:	cc                   	int3   
  22edaf:	cc                   	int3   

000000000022edb0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E>:
    pub const fn unwrap(self) -> T {
  22edb0:	48 83 ec 18          	sub    $0x18,%rsp
  22edb4:	48 89 34 24          	mov    %rsi,(%rsp)
  22edb8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  22edbd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22edc2:	48 85 c0             	test   %rax,%rax
  22edc5:	0f 95 c0             	setne  %al
  22edc8:	0f b6 c0             	movzbl %al,%eax
  22edcb:	74 06                	je     22edd3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x23>
  22edcd:	eb 00                	jmp    22edcf <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x1f>
  22edcf:	eb 19                	jmp    22edea <_ZN4core6option15Option$LT$T$GT$6unwrap17hb987a8c486dac7a8E+0x3a>
  22edd1:	0f 0b                	ud2    
  22edd3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  22edd7:	48 8d 3d 6b 4b fd ff 	lea    -0x2b495(%rip),%rdi        # 203949 <str.3+0x39>
  22edde:	be 2b 00 00 00       	mov    $0x2b,%esi
  22ede3:	e8 78 46 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ede8:	0f 0b                	ud2    
            Some(val) => val,
  22edea:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22edef:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  22edf4:	48 83 c4 18          	add    $0x18,%rsp
  22edf8:	c3                   	retq   
  22edf9:	cc                   	int3   
  22edfa:	cc                   	int3   
  22edfb:	cc                   	int3   
  22edfc:	cc                   	int3   
  22edfd:	cc                   	int3   
  22edfe:	cc                   	int3   
  22edff:	cc                   	int3   

000000000022ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE>:
    pub const fn unwrap(self) -> T {
  22ee00:	48 83 ec 18          	sub    $0x18,%rsp
  22ee04:	48 89 34 24          	mov    %rsi,(%rsp)
  22ee08:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  22ee0d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ee12:	48 85 c0             	test   %rax,%rax
  22ee15:	0f 95 c0             	setne  %al
  22ee18:	0f b6 c0             	movzbl %al,%eax
  22ee1b:	74 06                	je     22ee23 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x23>
  22ee1d:	eb 00                	jmp    22ee1f <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x1f>
  22ee1f:	eb 19                	jmp    22ee3a <_ZN4core6option15Option$LT$T$GT$6unwrap17hf812c1c285c19eecE+0x3a>
  22ee21:	0f 0b                	ud2    
  22ee23:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  22ee27:	48 8d 3d 1b 4b fd ff 	lea    -0x2b4e5(%rip),%rdi        # 203949 <str.3+0x39>
  22ee2e:	be 2b 00 00 00       	mov    $0x2b,%esi
  22ee33:	e8 28 46 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ee38:	0f 0b                	ud2    
            Some(val) => val,
  22ee3a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22ee3f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  22ee44:	48 83 c4 18          	add    $0x18,%rsp
  22ee48:	c3                   	retq   
  22ee49:	cc                   	int3   
  22ee4a:	cc                   	int3   
  22ee4b:	cc                   	int3   
  22ee4c:	cc                   	int3   
  22ee4d:	cc                   	int3   
  22ee4e:	cc                   	int3   
  22ee4f:	cc                   	int3   

000000000022ee50 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE>:
    pub const fn is_some(&self) -> bool {
  22ee50:	48 83 ec 10          	sub    $0x10,%rsp
  22ee54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  22ee59:	b8 01 00 00 00       	mov    $0x1,%eax
  22ee5e:	31 c9                	xor    %ecx,%ecx
  22ee60:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22ee64:	48 0f 44 c1          	cmove  %rcx,%rax
  22ee68:	48 83 f8 01          	cmp    $0x1,%rax
  22ee6c:	75 07                	jne    22ee75 <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE+0x25>
  22ee6e:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  22ee73:	eb 05                	jmp    22ee7a <_ZN4core6option15Option$LT$T$GT$7is_some17h2396bca3682d6bedE+0x2a>
  22ee75:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  22ee7a:	8a 44 24 07          	mov    0x7(%rsp),%al
  22ee7e:	24 01                	and    $0x1,%al
  22ee80:	0f b6 c0             	movzbl %al,%eax
  22ee83:	48 83 c4 10          	add    $0x10,%rsp
  22ee87:	c3                   	retq   
  22ee88:	cc                   	int3   
  22ee89:	cc                   	int3   
  22ee8a:	cc                   	int3   
  22ee8b:	cc                   	int3   
  22ee8c:	cc                   	int3   
  22ee8d:	cc                   	int3   
  22ee8e:	cc                   	int3   
  22ee8f:	cc                   	int3   

000000000022ee90 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E>:
    pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {
  22ee90:	48 83 ec 48          	sub    $0x48,%rsp
  22ee94:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22ee99:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ee9e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22eea3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22eea8:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
        match self {
  22eead:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22eeb2:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  22eeb7:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22eebc:	48 85 c0             	test   %rax,%rax
  22eebf:	0f 95 c0             	setne  %al
  22eec2:	0f b6 c0             	movzbl %al,%eax
  22eec5:	74 06                	je     22eecd <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x3d>
  22eec7:	eb 00                	jmp    22eec9 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x39>
  22eec9:	eb 11                	jmp    22eedc <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x4c>
  22eecb:	0f 0b                	ud2    
  22eecd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  22eed2:	48 c7 40 10 02 00 00 	movq   $0x2,0x10(%rax)
  22eed9:	00 
  22eeda:	eb 2a                	jmp    22ef06 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x76>
  22eedc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22eee1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            Some(x) => f(x),
  22eee6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22eeeb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22eef0:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
  22eef5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22eefa:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  22eeff:	e8 9c e5 ff ff       	callq  22d4a0 <_ZN21linked_list_allocator4hole18allocate_first_fit28_$u7b$$u7b$closure$u7d$$u7d$17h722a943daf4b1ee7E>
    }
  22ef04:	eb 00                	jmp    22ef06 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x76>
  22ef06:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  22ef0b:	75 0a                	jne    22ef17 <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x87>
  22ef0d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22ef12:	48 83 c4 48          	add    $0x48,%rsp
  22ef16:	c3                   	retq   
  22ef17:	eb f4                	jmp    22ef0d <_ZN4core6option15Option$LT$T$GT$8and_then17h50179159ddbf4239E+0x7d>
  22ef19:	cc                   	int3   
  22ef1a:	cc                   	int3   
  22ef1b:	cc                   	int3   
  22ef1c:	cc                   	int3   
  22ef1d:	cc                   	int3   
  22ef1e:	cc                   	int3   
  22ef1f:	cc                   	int3   

000000000022ef20 <_ZN4core3mem7replace17h8cfda8e0b29e0426E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  22ef20:	48 83 ec 38          	sub    $0x38,%rsp
  22ef24:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22ef29:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22ef2e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22ef33:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        let result = ptr::read(dest);
  22ef38:	e8 83 03 00 00       	callq  22f2c0 <_ZN4core3ptr4read17hdd7dbfb036171af8E>
  22ef3d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ef42:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22ef47:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  22ef4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  22ef51:	e8 fa 03 00 00       	callq  22f350 <_ZN4core3ptr5write17hab16ce5a0dfde322E>
  22ef56:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
}
  22ef5b:	48 83 c4 38          	add    $0x38,%rsp
  22ef5f:	c3                   	retq   

000000000022ef60 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  22ef60:	48 83 ec 10          	sub    $0x10,%rsp
  22ef64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  22ef69:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22ef6d:	48 8b 04 24          	mov    (%rsp),%rax
  22ef71:	48 83 c4 10          	add    $0x10,%rsp
  22ef75:	c3                   	retq   
  22ef76:	cc                   	int3   
  22ef77:	cc                   	int3   
  22ef78:	cc                   	int3   
  22ef79:	cc                   	int3   
  22ef7a:	cc                   	int3   
  22ef7b:	cc                   	int3   
  22ef7c:	cc                   	int3   
  22ef7d:	cc                   	int3   
  22ef7e:	cc                   	int3   
  22ef7f:	cc                   	int3   

000000000022ef80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
  22ef80:	48 83 ec 28          	sub    $0x28,%rsp
  22ef84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22ef89:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        if !ptr.is_null() {
  22ef8e:	e8 2d 04 00 00       	callq  22f3c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>
  22ef93:	88 44 24 17          	mov    %al,0x17(%rsp)
  22ef97:	8a 44 24 17          	mov    0x17(%rsp),%al
  22ef9b:	34 ff                	xor    $0xff,%al
  22ef9d:	a8 01                	test   $0x1,%al
  22ef9f:	75 0b                	jne    22efac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E+0x2c>
            None
  22efa1:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  22efa8:	00 00 
        if !ptr.is_null() {
  22efaa:	eb 17                	jmp    22efc3 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h4dd53abc4880dea7E+0x43>
  22efac:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(unsafe { Self::new_unchecked(ptr) })
  22efb1:	e8 aa ff ff ff       	callq  22ef60 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h35ecdccd5286bd57E>
  22efb6:	48 89 04 24          	mov    %rax,(%rsp)
  22efba:	48 8b 04 24          	mov    (%rsp),%rax
  22efbe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  22efc3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22efc8:	48 83 c4 28          	add    $0x28,%rsp
  22efcc:	c3                   	retq   
  22efcd:	cc                   	int3   
  22efce:	cc                   	int3   
  22efcf:	cc                   	int3   

000000000022efd0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>:
    pub const fn as_ptr(self) -> *mut T {
  22efd0:	50                   	push   %rax
  22efd1:	48 89 f8             	mov    %rdi,%rax
  22efd4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  22efd8:	59                   	pop    %rcx
  22efd9:	c3                   	retq   
  22efda:	cc                   	int3   
  22efdb:	cc                   	int3   
  22efdc:	cc                   	int3   
  22efdd:	cc                   	int3   
  22efde:	cc                   	int3   
  22efdf:	cc                   	int3   

000000000022efe0 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
  22efe0:	48 83 ec 68          	sub    $0x68,%rsp
  22efe4:	48 89 f1             	mov    %rsi,%rcx
  22efe7:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22efec:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22eff1:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  22eff6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22effb:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  22f000:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
            intrinsics::ctpop(self as $ActualT) as u32
  22f005:	48 89 c8             	mov    %rcx,%rax
  22f008:	48 d1 e8             	shr    %rax
  22f00b:	48 ba 55 55 55 55 55 	movabs $0x5555555555555555,%rdx
  22f012:	55 55 55 
  22f015:	48 21 d0             	and    %rdx,%rax
  22f018:	48 29 c1             	sub    %rax,%rcx
  22f01b:	48 ba 33 33 33 33 33 	movabs $0x3333333333333333,%rdx
  22f022:	33 33 33 
  22f025:	48 89 c8             	mov    %rcx,%rax
  22f028:	48 21 d0             	and    %rdx,%rax
  22f02b:	48 c1 e9 02          	shr    $0x2,%rcx
  22f02f:	48 21 d1             	and    %rdx,%rcx
  22f032:	48 01 c8             	add    %rcx,%rax
  22f035:	48 89 c1             	mov    %rax,%rcx
  22f038:	48 c1 e9 04          	shr    $0x4,%rcx
  22f03c:	48 01 c8             	add    %rcx,%rax
  22f03f:	48 b9 0f 0f 0f 0f 0f 	movabs $0xf0f0f0f0f0f0f0f,%rcx
  22f046:	0f 0f 0f 
  22f049:	48 21 c8             	and    %rcx,%rax
  22f04c:	48 b9 01 01 01 01 01 	movabs $0x101010101010101,%rcx
  22f053:	01 01 01 
  22f056:	48 0f af c1          	imul   %rcx,%rax
  22f05a:	48 c1 e8 38          	shr    $0x38,%rax
  22f05e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  22f063:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            self.count_ones() == 1
  22f068:	83 f8 01             	cmp    $0x1,%eax
  22f06b:	0f 94 c0             	sete   %al
  22f06e:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22f072:	8a 44 24 2f          	mov    0x2f(%rsp),%al
        if !align.is_power_of_two() {
  22f076:	34 ff                	xor    $0xff,%al
  22f078:	a8 01                	test   $0x1,%al
  22f07a:	75 1f                	jne    22f09b <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xbb>
  22f07c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22f081:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        if size > usize::MAX - (align - 1) {
  22f086:	48 83 ea 01          	sub    $0x1,%rdx
  22f08a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  22f091:	48 29 d1             	sub    %rdx,%rcx
  22f094:	48 39 c8             	cmp    %rcx,%rax
  22f097:	77 35                	ja     22f0ce <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xee>
  22f099:	eb 18                	jmp    22f0b3 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xd3>
            return Err(LayoutError);
  22f09b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  22f0a2:	00 00 
    }
  22f0a4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  22f0a9:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  22f0ae:	48 83 c4 68          	add    $0x68,%rsp
  22f0b2:	c3                   	retq   
  22f0b3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22f0b8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  22f0bd:	e8 2e 00 00 00       	callq  22f0f0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h4e6253542dc56179E>
  22f0c2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f0c7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  22f0cc:	eb 0b                	jmp    22f0d9 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xf9>
            return Err(LayoutError);
  22f0ce:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  22f0d5:	00 00 
  22f0d7:	eb cb                	jmp    22f0a4 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xc4>
  22f0d9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f0de:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
  22f0e3:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22f0e8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    }
  22f0ed:	eb b5                	jmp    22f0a4 <_ZN4core5alloc6layout6Layout15from_size_align17h77043264bd36ccceE+0xc4>
  22f0ef:	cc                   	int3   

000000000022f0f0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h4e6253542dc56179E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
  22f0f0:	48 83 ec 38          	sub    $0x38,%rsp
  22f0f4:	48 89 34 24          	mov    %rsi,(%rsp)
  22f0f8:	48 89 f8             	mov    %rdi,%rax
  22f0fb:	48 8b 3c 24          	mov    (%rsp),%rdi
  22f0ff:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f104:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  22f109:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
  22f10e:	e8 fd 00 00 00       	callq  22f210 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h03b3691e373d07dfE>
  22f113:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f118:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f11d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22f122:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22f127:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  22f12c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f131:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22f136:	48 83 c4 38          	add    $0x38,%rsp
  22f13a:	c3                   	retq   
  22f13b:	cc                   	int3   
  22f13c:	cc                   	int3   
  22f13d:	cc                   	int3   
  22f13e:	cc                   	int3   
  22f13f:	cc                   	int3   

000000000022f140 <_ZN4core5alloc6layout6Layout4size17h51485fe077726a3cE>:
    pub const fn size(&self) -> usize {
  22f140:	50                   	push   %rax
  22f141:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.size_
  22f145:	48 8b 07             	mov    (%rdi),%rax
    }
  22f148:	59                   	pop    %rcx
  22f149:	c3                   	retq   
  22f14a:	cc                   	int3   
  22f14b:	cc                   	int3   
  22f14c:	cc                   	int3   
  22f14d:	cc                   	int3   
  22f14e:	cc                   	int3   
  22f14f:	cc                   	int3   

000000000022f150 <_ZN4core5alloc6layout6Layout5align17h6d78eb0b3c40b9aaE>:
    pub const fn align(&self) -> usize {
  22f150:	48 83 ec 18          	sub    $0x18,%rsp
  22f154:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.align_.get()
  22f159:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  22f15d:	e8 ce 00 00 00       	callq  22f230 <_ZN4core3num7nonzero12NonZeroUsize3get17hcc61901f7ed5caa6E>
  22f162:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f167:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  22f16c:	48 83 c4 18          	add    $0x18,%rsp
  22f170:	c3                   	retq   
  22f171:	cc                   	int3   
  22f172:	cc                   	int3   
  22f173:	cc                   	int3   
  22f174:	cc                   	int3   
  22f175:	cc                   	int3   
  22f176:	cc                   	int3   
  22f177:	cc                   	int3   
  22f178:	cc                   	int3   
  22f179:	cc                   	int3   
  22f17a:	cc                   	int3   
  22f17b:	cc                   	int3   
  22f17c:	cc                   	int3   
  22f17d:	cc                   	int3   
  22f17e:	cc                   	int3   
  22f17f:	cc                   	int3   

000000000022f180 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h05f73b6f8579d946E>:
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
  22f180:	50                   	push   %rax
  22f181:	48 89 3c 24          	mov    %rdi,(%rsp)
  22f185:	48 8b 07             	mov    (%rdi),%rax
  22f188:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  22f18c:	59                   	pop    %rcx
  22f18d:	c3                   	retq   
  22f18e:	cc                   	int3   
  22f18f:	cc                   	int3   

000000000022f190 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h94bd06d3c8494998E>:
    fn deref_mut(&mut self) -> &mut T {
  22f190:	48 83 ec 18          	sub    $0x18,%rsp
  22f194:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { &mut *self.mutex.data.get() }
  22f199:	48 8b 07             	mov    (%rdi),%rax
  22f19c:	48 83 c0 08          	add    $0x8,%rax
  22f1a0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f1a5:	48 89 04 24          	mov    %rax,(%rsp)
  22f1a9:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22f1ad:	48 83 c4 18          	add    $0x18,%rsp
  22f1b1:	c3                   	retq   
  22f1b2:	cc                   	int3   
  22f1b3:	cc                   	int3   
  22f1b4:	cc                   	int3   
  22f1b5:	cc                   	int3   
  22f1b6:	cc                   	int3   
  22f1b7:	cc                   	int3   
  22f1b8:	cc                   	int3   
  22f1b9:	cc                   	int3   
  22f1ba:	cc                   	int3   
  22f1bb:	cc                   	int3   
  22f1bc:	cc                   	int3   
  22f1bd:	cc                   	int3   
  22f1be:	cc                   	int3   
  22f1bf:	cc                   	int3   

000000000022f1c0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17h555073cefe04da8cE>:
    pub fn lock(&self) -> MutexGuard<'_, R, T> {
  22f1c0:	48 83 ec 18          	sub    $0x18,%rsp
  22f1c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f1c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.raw.lock();
  22f1ce:	e8 6d 02 00 00       	callq  22f440 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE>
  22f1d3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { self.guard() }
  22f1d8:	e8 13 00 00 00       	callq  22f1f0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$5guard17h9370ddc551871dc3E>
  22f1dd:	48 89 04 24          	mov    %rax,(%rsp)
  22f1e1:	48 8b 04 24          	mov    (%rsp),%rax
    }
  22f1e5:	48 83 c4 18          	add    $0x18,%rsp
  22f1e9:	c3                   	retq   
  22f1ea:	cc                   	int3   
  22f1eb:	cc                   	int3   
  22f1ec:	cc                   	int3   
  22f1ed:	cc                   	int3   
  22f1ee:	cc                   	int3   
  22f1ef:	cc                   	int3   

000000000022f1f0 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$5guard17h9370ddc551871dc3E>:
    unsafe fn guard(&self) -> MutexGuard<'_, R, T> {
  22f1f0:	48 83 ec 10          	sub    $0x10,%rsp
  22f1f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        MutexGuard {
  22f1f9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  22f1fd:	48 8b 04 24          	mov    (%rsp),%rax
  22f201:	48 83 c4 10          	add    $0x10,%rsp
  22f205:	c3                   	retq   
  22f206:	cc                   	int3   
  22f207:	cc                   	int3   
  22f208:	cc                   	int3   
  22f209:	cc                   	int3   
  22f20a:	cc                   	int3   
  22f20b:	cc                   	int3   
  22f20c:	cc                   	int3   
  22f20d:	cc                   	int3   
  22f20e:	cc                   	int3   
  22f20f:	cc                   	int3   

000000000022f210 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h03b3691e373d07dfE>:
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
  22f210:	48 83 ec 10          	sub    $0x10,%rsp
  22f214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                    unsafe { Self(n) }
  22f219:	48 89 3c 24          	mov    %rdi,(%rsp)
                }
  22f21d:	48 8b 04 24          	mov    (%rsp),%rax
  22f221:	48 83 c4 10          	add    $0x10,%rsp
  22f225:	c3                   	retq   
  22f226:	cc                   	int3   
  22f227:	cc                   	int3   
  22f228:	cc                   	int3   
  22f229:	cc                   	int3   
  22f22a:	cc                   	int3   
  22f22b:	cc                   	int3   
  22f22c:	cc                   	int3   
  22f22d:	cc                   	int3   
  22f22e:	cc                   	int3   
  22f22f:	cc                   	int3   

000000000022f230 <_ZN4core3num7nonzero12NonZeroUsize3get17hcc61901f7ed5caa6E>:
                pub const fn get(self) -> $Int {
  22f230:	50                   	push   %rax
  22f231:	48 89 f8             	mov    %rdi,%rax
  22f234:	48 89 04 24          	mov    %rax,(%rsp)
                }
  22f238:	59                   	pop    %rcx
  22f239:	c3                   	retq   
  22f23a:	cc                   	int3   
  22f23b:	cc                   	int3   
  22f23c:	cc                   	int3   
  22f23d:	cc                   	int3   
  22f23e:	cc                   	int3   
  22f23f:	cc                   	int3   

000000000022f240 <_ZN4core9panicking13assert_failed17h495489438e8657baE>:
pub fn assert_failed<T, U>(
  22f240:	48 83 ec 58          	sub    $0x58,%rsp
  22f244:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  22f249:	48 89 d1             	mov    %rdx,%rcx
  22f24c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22f251:	40 88 f8             	mov    %dil,%al
  22f254:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22f259:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  22f25e:	88 44 24 57          	mov    %al,0x57(%rsp)
    assert_failed_inner(kind, &left, &right, args)
  22f262:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  22f266:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  22f26b:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  22f26f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  22f274:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  22f278:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  22f27d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  22f281:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  22f286:	48 8b 0a             	mov    (%rdx),%rcx
  22f289:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  22f28d:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  22f292:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  22f297:	48 89 e1             	mov    %rsp,%rcx
  22f29a:	4c 89 01             	mov    %r8,(%rcx)
  22f29d:	0f b6 f8             	movzbl %al,%edi
  22f2a0:	4c 8d 05 d1 b6 00 00 	lea    0xb6d1(%rip),%r8        # 23a978 <memcmp+0x43c8>
  22f2a7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  22f2ac:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  22f2b1:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  22f2b6:	4c 89 c2             	mov    %r8,%rdx
  22f2b9:	e8 b2 42 00 00       	callq  233570 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  22f2be:	0f 0b                	ud2    

000000000022f2c0 <_ZN4core3ptr4read17hdd7dbfb036171af8E>:
pub const unsafe fn read<T>(src: *const T) -> T {
  22f2c0:	48 83 ec 48          	sub    $0x48,%rsp
  22f2c4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f2c9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22f2ce:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    let mut tmp = MaybeUninit::<T>::uninit();
  22f2d3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f2d8:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  22f2dd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_unstable(feature = "const_maybe_uninit_as_ptr", issue = "75251")]
    #[inline(always)]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.
        self as *mut _ as *mut T
  22f2e2:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  22f2e7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f2ec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f2f1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  22f2f6:	48 8b 09             	mov    (%rcx),%rcx
  22f2f9:	48 89 08             	mov    %rcx,(%rax)
        tmp.assume_init()
  22f2fc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f301:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  22f306:	48 89 04 24          	mov    %rax,(%rsp)
  22f30a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  22f30f:	48 8b 04 24          	mov    (%rsp),%rax
}
  22f313:	48 83 c4 48          	add    $0x48,%rsp
  22f317:	c3                   	retq   
  22f318:	cc                   	int3   
  22f319:	cc                   	int3   
  22f31a:	cc                   	int3   
  22f31b:	cc                   	int3   
  22f31c:	cc                   	int3   
  22f31d:	cc                   	int3   
  22f31e:	cc                   	int3   
  22f31f:	cc                   	int3   

000000000022f320 <_ZN4core3ptr5write17h34b1e481bffd3c9aE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  22f320:	48 83 ec 18          	sub    $0x18,%rsp
  22f324:	48 89 34 24          	mov    %rsi,(%rsp)
  22f328:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22f32d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  22f332:	48 8b 04 24          	mov    (%rsp),%rax
  22f336:	48 89 07             	mov    %rax,(%rdi)
  22f339:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f33e:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
  22f342:	48 83 c4 18          	add    $0x18,%rsp
  22f346:	c3                   	retq   
  22f347:	cc                   	int3   
  22f348:	cc                   	int3   
  22f349:	cc                   	int3   
  22f34a:	cc                   	int3   
  22f34b:	cc                   	int3   
  22f34c:	cc                   	int3   
  22f34d:	cc                   	int3   
  22f34e:	cc                   	int3   
  22f34f:	cc                   	int3   

000000000022f350 <_ZN4core3ptr5write17hab16ce5a0dfde322E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  22f350:	48 83 ec 10          	sub    $0x10,%rsp
  22f354:	48 89 34 24          	mov    %rsi,(%rsp)
  22f358:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        copy_nonoverlapping(&src as *const T, dst, 1);
  22f35d:	48 8b 04 24          	mov    (%rsp),%rax
  22f361:	48 89 07             	mov    %rax,(%rdi)
}
  22f364:	48 83 c4 10          	add    $0x10,%rsp
  22f368:	c3                   	retq   
  22f369:	cc                   	int3   
  22f36a:	cc                   	int3   
  22f36b:	cc                   	int3   
  22f36c:	cc                   	int3   
  22f36d:	cc                   	int3   
  22f36e:	cc                   	int3   
  22f36f:	cc                   	int3   

000000000022f370 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h6c2ffa1bccbae6d3E>:
            .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
  22f370:	48 83 ec 18          	sub    $0x18,%rsp
  22f374:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f379:	e8 52 fc ff ff       	callq  22efd0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfbbcd6fcd90299d1E>
  22f37e:	48 89 04 24          	mov    %rax,(%rsp)
  22f382:	48 8b 04 24          	mov    (%rsp),%rax
  22f386:	48 83 c4 18          	add    $0x18,%rsp
  22f38a:	c3                   	retq   
  22f38b:	cc                   	int3   
  22f38c:	cc                   	int3   
  22f38d:	cc                   	int3   
  22f38e:	cc                   	int3   
  22f38f:	cc                   	int3   

000000000022f390 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h7684fdc8db94093aE>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  22f390:	48 83 ec 20          	sub    $0x20,%rsp
  22f394:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f399:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  22f39e:	48 39 f7             	cmp    %rsi,%rdi
  22f3a1:	0f 94 c0             	sete   %al
  22f3a4:	24 01                	and    $0x1,%al
  22f3a6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f3aa:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22f3ae:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f3b2:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22f3b6:	24 01                	and    $0x1,%al
  22f3b8:	0f b6 c0             	movzbl %al,%eax
  22f3bb:	48 83 c4 20          	add    $0x20,%rsp
  22f3bf:	c3                   	retq   

000000000022f3c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h0231856cce4670d1E>:
    pub const fn is_null(self) -> bool {
  22f3c0:	48 83 ec 18          	sub    $0x18,%rsp
  22f3c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f3c9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f3ce:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  22f3d3:	31 c0                	xor    %eax,%eax
  22f3d5:	89 c6                	mov    %eax,%esi
  22f3d7:	e8 b4 ff ff ff       	callq  22f390 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h7684fdc8db94093aE>
  22f3dc:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f3e0:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  22f3e4:	24 01                	and    $0x1,%al
  22f3e6:	0f b6 c0             	movzbl %al,%eax
  22f3e9:	48 83 c4 18          	add    $0x18,%rsp
  22f3ed:	c3                   	retq   
  22f3ee:	cc                   	int3   
  22f3ef:	cc                   	int3   

000000000022f3f0 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h42b408fa10232bccE>:
}

impl RawSpinlock {
    // Can fail to lock even if the spinlock is not locked. May be more efficient than `try_lock`
    // when called in a loop.
    fn try_lock_weak(&self) -> bool {
  22f3f0:	48 83 ec 18          	sub    $0x18,%rsp
  22f3f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // The Orderings are the same as try_lock, and are still correct here.
        self.locked
            .compare_exchange_weak(false, true, Ordering::Acquire, Ordering::Relaxed)
  22f3f9:	c6 44 24 0e 02       	movb   $0x2,0xe(%rsp)
  22f3fe:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
        self.locked
  22f403:	44 0f b6 44 24 0f    	movzbl 0xf(%rsp),%r8d
  22f409:	0f b6 4c 24 0e       	movzbl 0xe(%rsp),%ecx
  22f40e:	31 f6                	xor    %esi,%esi
  22f410:	ba 01 00 00 00       	mov    $0x1,%edx
  22f415:	e8 06 01 00 00       	callq  22f520 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E>
  22f41a:	88 54 24 09          	mov    %dl,0x9(%rsp)
  22f41e:	88 44 24 08          	mov    %al,0x8(%rsp)
  22f422:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  22f427:	e8 b4 00 00 00       	callq  22f4e0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E>
  22f42c:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f430:	8a 44 24 07          	mov    0x7(%rsp),%al
            .is_ok()
    }
  22f434:	24 01                	and    $0x1,%al
  22f436:	0f b6 c0             	movzbl %al,%eax
  22f439:	48 83 c4 18          	add    $0x18,%rsp
  22f43d:	c3                   	retq   
  22f43e:	cc                   	int3   
  22f43f:	cc                   	int3   

000000000022f440 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE>:
    };

    // A spinlock guard can be sent to another thread and unlocked there
    type GuardMarker = GuardSend;

    fn lock(&self) {
  22f440:	48 83 ec 18          	sub    $0x18,%rsp
  22f444:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f449:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f44e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.try_lock_weak() {
  22f453:	e8 98 ff ff ff       	callq  22f3f0 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h42b408fa10232bccE>
  22f458:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f45c:	8a 44 24 07          	mov    0x7(%rsp),%al
  22f460:	34 ff                	xor    $0xff,%al
  22f462:	a8 01                	test   $0x1,%al
  22f464:	75 05                	jne    22f46b <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x2b>
            while self.is_locked() {
                // Tell the CPU that we're inside a busy-wait loop
                hint::spin_loop();
            }
        }
    }
  22f466:	48 83 c4 18          	add    $0x18,%rsp
  22f46a:	c3                   	retq   
  22f46b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            while self.is_locked() {
  22f470:	e8 3b 00 00 00       	callq  22f4b0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17he45ba76a08c21356E>
  22f475:	88 44 24 06          	mov    %al,0x6(%rsp)
  22f479:	8a 44 24 06          	mov    0x6(%rsp),%al
  22f47d:	a8 01                	test   $0x1,%al
  22f47f:	75 02                	jne    22f483 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x43>
  22f481:	eb cb                	jmp    22f44e <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0xe>
                hint::spin_loop();
  22f483:	e8 88 00 00 00       	callq  22f510 <_ZN4core4hint9spin_loop17h83dea54b06ee1384E>
  22f488:	eb e1                	jmp    22f46b <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1bfcff04b33c337fE+0x2b>
  22f48a:	cc                   	int3   
  22f48b:	cc                   	int3   
  22f48c:	cc                   	int3   
  22f48d:	cc                   	int3   
  22f48e:	cc                   	int3   
  22f48f:	cc                   	int3   

000000000022f490 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h718bd9fc65a01bf2E>:
        self.locked
            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)
            .is_ok()
    }

    unsafe fn unlock(&self) {
  22f490:	48 83 ec 18          	sub    $0x18,%rsp
  22f494:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.locked.store(false, Ordering::Release);
  22f499:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  22f49e:	31 f6                	xor    %esi,%esi
  22f4a0:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  22f4a5:	e8 96 01 00 00       	callq  22f640 <_ZN4core4sync6atomic10AtomicBool5store17h017267f79f2d7932E>
    }
  22f4aa:	48 83 c4 18          	add    $0x18,%rsp
  22f4ae:	c3                   	retq   
  22f4af:	cc                   	int3   

000000000022f4b0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17he45ba76a08c21356E>:

    fn is_locked(&self) -> bool {
  22f4b0:	48 83 ec 18          	sub    $0x18,%rsp
  22f4b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        // Relaxed is sufficient because this operation does not provide synchronization, only atomicity.
        self.locked.load(Ordering::Relaxed)
  22f4b9:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  22f4be:	0f b6 74 24 0f       	movzbl 0xf(%rsp),%esi
  22f4c3:	e8 28 01 00 00       	callq  22f5f0 <_ZN4core4sync6atomic10AtomicBool4load17hdbaf089ba471b8dfE>
  22f4c8:	88 44 24 0e          	mov    %al,0xe(%rsp)
  22f4cc:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  22f4d0:	24 01                	and    $0x1,%al
  22f4d2:	0f b6 c0             	movzbl %al,%eax
  22f4d5:	48 83 c4 18          	add    $0x18,%rsp
  22f4d9:	c3                   	retq   
  22f4da:	cc                   	int3   
  22f4db:	cc                   	int3   
  22f4dc:	cc                   	int3   
  22f4dd:	cc                   	int3   
  22f4de:	cc                   	int3   
  22f4df:	cc                   	int3   

000000000022f4e0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E>:
    pub const fn is_ok(&self) -> bool {
  22f4e0:	48 83 ec 10          	sub    $0x10,%rsp
  22f4e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  22f4e9:	8a 07                	mov    (%rdi),%al
  22f4eb:	24 01                	and    $0x1,%al
  22f4ed:	0f b6 c0             	movzbl %al,%eax
  22f4f0:	48 83 f8 00          	cmp    $0x0,%rax
  22f4f4:	75 07                	jne    22f4fd <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E+0x1d>
  22f4f6:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  22f4fb:	eb 05                	jmp    22f502 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17he991b5a23d0fd434E+0x22>
  22f4fd:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  22f502:	8a 44 24 07          	mov    0x7(%rsp),%al
  22f506:	24 01                	and    $0x1,%al
  22f508:	0f b6 c0             	movzbl %al,%eax
  22f50b:	48 83 c4 10          	add    $0x10,%rsp
  22f50f:	c3                   	retq   

000000000022f510 <_ZN4core4hint9spin_loop17h83dea54b06ee1384E>:
  22f510:	c3                   	retq   
  22f511:	cc                   	int3   
  22f512:	cc                   	int3   
  22f513:	cc                   	int3   
  22f514:	cc                   	int3   
  22f515:	cc                   	int3   
  22f516:	cc                   	int3   
  22f517:	cc                   	int3   
  22f518:	cc                   	int3   
  22f519:	cc                   	int3   
  22f51a:	cc                   	int3   
  22f51b:	cc                   	int3   
  22f51c:	cc                   	int3   
  22f51d:	cc                   	int3   
  22f51e:	cc                   	int3   
  22f51f:	cc                   	int3   

000000000022f520 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E>:
    pub fn compare_exchange_weak(
  22f520:	48 83 ec 38          	sub    $0x38,%rsp
  22f524:	44 88 c0             	mov    %r8b,%al
  22f527:	88 44 24 04          	mov    %al,0x4(%rsp)
  22f52b:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  22f52f:	88 54 24 06          	mov    %dl,0x6(%rsp)
  22f533:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  22f538:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22f53d:	40 80 e6 01          	and    $0x1,%sil
  22f541:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  22f546:	80 e2 01             	and    $0x1,%dl
  22f549:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  22f54d:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  22f551:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  22f555:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f55a:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22f55f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22f564:	8a 44 24 06          	mov    0x6(%rsp),%al
  22f568:	8a 54 24 07          	mov    0x7(%rsp),%dl
  22f56c:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  22f571:	8a 4c 24 05          	mov    0x5(%rsp),%cl
            atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8, success, failure)
  22f575:	0f b6 c9             	movzbl %cl,%ecx
  22f578:	44 0f b6 c6          	movzbl %sil,%r8d
  22f57c:	0f b6 f2             	movzbl %dl,%esi
  22f57f:	83 e6 01             	and    $0x1,%esi
  22f582:	0f b6 d0             	movzbl %al,%edx
  22f585:	83 e2 01             	and    $0x1,%edx
  22f588:	e8 63 05 00 00       	callq  22faf0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE>
  22f58d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  22f591:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  22f595:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  22f59a:	a8 01                	test   $0x1,%al
  22f59c:	74 06                	je     22f5a4 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x84>
  22f59e:	eb 00                	jmp    22f5a0 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x80>
  22f5a0:	eb 1c                	jmp    22f5be <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0x9e>
  22f5a2:	0f 0b                	ud2    
            Ok(x) => Ok(x != 0),
  22f5a4:	8a 44 24 19          	mov    0x19(%rsp),%al
  22f5a8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22f5ac:	3c 00                	cmp    $0x0,%al
  22f5ae:	0f 95 c0             	setne  %al
  22f5b1:	24 01                	and    $0x1,%al
  22f5b3:	88 44 24 11          	mov    %al,0x11(%rsp)
  22f5b7:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  22f5bc:	eb 18                	jmp    22f5d6 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdcdacfef3e75c211E+0xb6>
            Err(x) => Err(x != 0),
  22f5be:	8a 44 24 19          	mov    0x19(%rsp),%al
  22f5c2:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  22f5c6:	3c 00                	cmp    $0x0,%al
  22f5c8:	0f 95 c0             	setne  %al
  22f5cb:	24 01                	and    $0x1,%al
  22f5cd:	88 44 24 11          	mov    %al,0x11(%rsp)
  22f5d1:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
    }
  22f5d6:	8a 44 24 10          	mov    0x10(%rsp),%al
  22f5da:	8a 54 24 11          	mov    0x11(%rsp),%dl
  22f5de:	48 83 c4 38          	add    $0x38,%rsp
  22f5e2:	c3                   	retq   
  22f5e3:	cc                   	int3   
  22f5e4:	cc                   	int3   
  22f5e5:	cc                   	int3   
  22f5e6:	cc                   	int3   
  22f5e7:	cc                   	int3   
  22f5e8:	cc                   	int3   
  22f5e9:	cc                   	int3   
  22f5ea:	cc                   	int3   
  22f5eb:	cc                   	int3   
  22f5ec:	cc                   	int3   
  22f5ed:	cc                   	int3   
  22f5ee:	cc                   	int3   
  22f5ef:	cc                   	int3   

000000000022f5f0 <_ZN4core4sync6atomic10AtomicBool4load17hdbaf089ba471b8dfE>:
    pub fn load(&self, order: Ordering) -> bool {
  22f5f0:	48 83 ec 28          	sub    $0x28,%rsp
  22f5f4:	40 88 f0             	mov    %sil,%al
  22f5f7:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f5fb:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f600:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f604:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f609:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22f60e:	8a 44 24 07          	mov    0x7(%rsp),%al
  22f612:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  22f617:	0f b6 f0             	movzbl %al,%esi
  22f61a:	e8 71 00 00 00       	callq  22f690 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>
  22f61f:	88 44 24 06          	mov    %al,0x6(%rsp)
  22f623:	8a 44 24 06          	mov    0x6(%rsp),%al
  22f627:	3c 00                	cmp    $0x0,%al
  22f629:	0f 95 c0             	setne  %al
    }
  22f62c:	24 01                	and    $0x1,%al
  22f62e:	0f b6 c0             	movzbl %al,%eax
  22f631:	48 83 c4 28          	add    $0x28,%rsp
  22f635:	c3                   	retq   
  22f636:	cc                   	int3   
  22f637:	cc                   	int3   
  22f638:	cc                   	int3   
  22f639:	cc                   	int3   
  22f63a:	cc                   	int3   
  22f63b:	cc                   	int3   
  22f63c:	cc                   	int3   
  22f63d:	cc                   	int3   
  22f63e:	cc                   	int3   
  22f63f:	cc                   	int3   

000000000022f640 <_ZN4core4sync6atomic10AtomicBool5store17h017267f79f2d7932E>:
    pub fn store(&self, val: bool, order: Ordering) {
  22f640:	48 83 ec 28          	sub    $0x28,%rsp
  22f644:	88 d0                	mov    %dl,%al
  22f646:	88 44 24 06          	mov    %al,0x6(%rsp)
  22f64a:	40 88 f1             	mov    %sil,%cl
  22f64d:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  22f651:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22f656:	80 e1 01             	and    $0x1,%cl
  22f659:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  22f65d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f661:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f666:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  22f66b:	8a 44 24 06          	mov    0x6(%rsp),%al
  22f66f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  22f674:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  22f678:	80 e1 01             	and    $0x1,%cl
  22f67b:	0f b6 f1             	movzbl %cl,%esi
  22f67e:	0f b6 d0             	movzbl %al,%edx
  22f681:	e8 aa 00 00 00       	callq  22f730 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>
    }
  22f686:	48 83 c4 28          	add    $0x28,%rsp
  22f68a:	c3                   	retq   
  22f68b:	cc                   	int3   
  22f68c:	cc                   	int3   
  22f68d:	cc                   	int3   
  22f68e:	cc                   	int3   
  22f68f:	cc                   	int3   

000000000022f690 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  22f690:	48 83 ec 28          	sub    $0x28,%rsp
  22f694:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f699:	40 88 f0             	mov    %sil,%al
  22f69c:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  22f6a0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  22f6a5:	0f b6 44 24 1e       	movzbl 0x1e(%rsp),%eax
  22f6aa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f6af:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f6b4:	48 8d 0d b9 42 fd ff 	lea    -0x2bd47(%rip),%rcx        # 203974 <str.3+0x64>
  22f6bb:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22f6bf:	48 01 c8             	add    %rcx,%rax
  22f6c2:	ff e0                	jmpq   *%rax
  22f6c4:	0f 0b                	ud2    
  22f6c6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22f6cb:	8a 00                	mov    (%rax),%al
  22f6cd:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f6d1:	eb 59                	jmp    22f72c <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x9c>
            Release => panic!("there is no such thing as a release load"),
  22f6d3:	48 8d 3d 93 43 fd ff 	lea    -0x2bc6d(%rip),%rdi        # 203a6d <str.3+0x15d>
  22f6da:	48 8d 15 cf b2 00 00 	lea    0xb2cf(%rip),%rdx        # 23a9b0 <memcmp+0x4400>
  22f6e1:	be 28 00 00 00       	mov    $0x28,%esi
  22f6e6:	e8 75 3d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f6eb:	0f 0b                	ud2    
  22f6ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  22f6f2:	8a 00                	mov    (%rax),%al
  22f6f4:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f6f8:	eb 30                	jmp    22f72a <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x9a>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  22f6fa:	48 8d 3d c3 42 fd ff 	lea    -0x2bd3d(%rip),%rdi        # 2039c4 <str.3+0xb4>
  22f701:	48 8d 15 90 b2 00 00 	lea    0xb290(%rip),%rdx        # 23a998 <memcmp+0x43e8>
  22f708:	be 31 00 00 00       	mov    $0x31,%esi
  22f70d:	e8 4e 3d 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f712:	0f 0b                	ud2    
  22f714:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  22f719:	8a 00                	mov    (%rax),%al
  22f71b:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  22f71f:	eb 00                	jmp    22f721 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
}
  22f721:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  22f725:	48 83 c4 28          	add    $0x28,%rsp
  22f729:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  22f72a:	eb f5                	jmp    22f721 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  22f72c:	eb f3                	jmp    22f721 <_ZN4core4sync6atomic11atomic_load17h215b2960e5e3d2c2E+0x91>
  22f72e:	cc                   	int3   
  22f72f:	cc                   	int3   

000000000022f730 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  22f730:	48 83 ec 38          	sub    $0x38,%rsp
  22f734:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  22f739:	88 d1                	mov    %dl,%cl
  22f73b:	40 88 f0             	mov    %sil,%al
  22f73e:	88 44 24 17          	mov    %al,0x17(%rsp)
  22f742:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  22f746:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22f74b:	88 44 24 37          	mov    %al,0x37(%rsp)
        match order {
  22f74f:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  22f754:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f759:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f75e:	48 8d 0d 23 42 fd ff 	lea    -0x2bddd(%rip),%rcx        # 203988 <str.3+0x78>
  22f765:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22f769:	48 01 c8             	add    %rcx,%rax
  22f76c:	ff e0                	jmpq   *%rax
  22f76e:	0f 0b                	ud2    
  22f770:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f775:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22f779:	88 08                	mov    %cl,(%rax)
  22f77b:	eb 55                	jmp    22f7d2 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0xa2>
  22f77d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f782:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Release => intrinsics::atomic_store_rel(dst, val),
  22f786:	88 08                	mov    %cl,(%rax)
  22f788:	eb 46                	jmp    22f7d0 <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0xa0>
            Acquire => panic!("there is no such thing as an acquire store"),
  22f78a:	48 8d 3d 36 43 fd ff 	lea    -0x2bcca(%rip),%rdi        # 203ac7 <str.3+0x1b7>
  22f791:	48 8d 15 48 b2 00 00 	lea    0xb248(%rip),%rdx        # 23a9e0 <memcmp+0x4430>
  22f798:	be 2a 00 00 00       	mov    $0x2a,%esi
  22f79d:	e8 be 3c 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f7a2:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  22f7a4:	48 8d 3d ea 42 fd ff 	lea    -0x2bd16(%rip),%rdi        # 203a95 <str.3+0x185>
  22f7ab:	48 8d 15 16 b2 00 00 	lea    0xb216(%rip),%rdx        # 23a9c8 <memcmp+0x4418>
  22f7b2:	be 32 00 00 00       	mov    $0x32,%esi
  22f7b7:	e8 a4 3c 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22f7bc:	0f 0b                	ud2    
  22f7be:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22f7c3:	8a 44 24 17          	mov    0x17(%rsp),%al
            SeqCst => intrinsics::atomic_store(dst, val),
  22f7c7:	86 01                	xchg   %al,(%rcx)
  22f7c9:	eb 00                	jmp    22f7cb <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
}
  22f7cb:	48 83 c4 38          	add    $0x38,%rsp
  22f7cf:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  22f7d0:	eb f9                	jmp    22f7cb <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22f7d2:	eb f7                	jmp    22f7cb <_ZN4core4sync6atomic12atomic_store17h6728ab0f95b2c562E+0x9b>
  22f7d4:	cc                   	int3   
  22f7d5:	cc                   	int3   
  22f7d6:	cc                   	int3   
  22f7d7:	cc                   	int3   
  22f7d8:	cc                   	int3   
  22f7d9:	cc                   	int3   
  22f7da:	cc                   	int3   
  22f7db:	cc                   	int3   
  22f7dc:	cc                   	int3   
  22f7dd:	cc                   	int3   
  22f7de:	cc                   	int3   
  22f7df:	cc                   	int3   

000000000022f7e0 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  22f7e0:	48 83 ec 68          	sub    $0x68,%rsp
  22f7e4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22f7e9:	44 88 c0             	mov    %r8b,%al
  22f7ec:	88 54 24 36          	mov    %dl,0x36(%rsp)
  22f7f0:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  22f7f5:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22f7fa:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  22f7ff:	88 54 24 63          	mov    %dl,0x63(%rsp)
  22f803:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  22f807:	88 44 24 65          	mov    %al,0x65(%rsp)
        match (success, failure) {
  22f80b:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  22f80f:	88 44 24 51          	mov    %al,0x51(%rsp)
  22f813:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  22f818:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22f81d:	48 83 e8 04          	sub    $0x4,%rax
  22f821:	77 15                	ja     22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f823:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22f828:	48 8d 0d 6d 41 fd ff 	lea    -0x2be93(%rip),%rcx        # 20399c <str.3+0x8c>
  22f82f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22f833:	48 01 c8             	add    %rcx,%rax
  22f836:	ff e0                	jmpq   *%rax
  22f838:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f83d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22f842:	48 83 e8 01          	sub    $0x1,%rax
  22f846:	0f 84 38 02 00 00    	je     22fa84 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2a4>
  22f84c:	eb 00                	jmp    22f84e <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x6e>
  22f84e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22f853:	48 83 e8 03          	sub    $0x3,%rax
  22f857:	0f 84 41 02 00 00    	je     22fa9e <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2be>
  22f85d:	e9 08 02 00 00       	jmpq   22fa6a <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x28a>
  22f862:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f867:	48 83 f8 00          	cmp    $0x0,%rax
  22f86b:	0f 84 d7 01 00 00    	je     22fa48 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x268>
  22f871:	eb c5                	jmp    22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f873:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f878:	48 83 f8 00          	cmp    $0x0,%rax
  22f87c:	0f 84 a1 01 00 00    	je     22fa23 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x243>
  22f882:	eb b4                	jmp    22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f884:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f889:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22f88e:	48 85 c0             	test   %rax,%rax
  22f891:	0f 84 40 01 00 00    	je     22f9d7 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1f7>
  22f897:	eb 00                	jmp    22f899 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0xb9>
  22f899:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22f89e:	48 83 e8 02          	sub    $0x2,%rax
  22f8a2:	0f 84 51 01 00 00    	je     22f9f9 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x219>
  22f8a8:	eb 8e                	jmp    22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f8aa:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f8af:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22f8b4:	48 85 c0             	test   %rax,%rax
  22f8b7:	0f 84 d4 00 00 00    	je     22f991 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1b1>
  22f8bd:	eb 00                	jmp    22f8bf <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0xdf>
  22f8bf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22f8c4:	48 83 e8 02          	sub    $0x2,%rax
  22f8c8:	0f 84 e5 00 00 00    	je     22f9b3 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1d3>
  22f8ce:	e9 65 ff ff ff       	jmpq   22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f8d3:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22f8d8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22f8dd:	48 85 c0             	test   %rax,%rax
  22f8e0:	74 1f                	je     22f901 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x121>
  22f8e2:	eb 00                	jmp    22f8e4 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x104>
  22f8e4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f8e9:	48 83 e8 02          	sub    $0x2,%rax
  22f8ed:	74 34                	je     22f923 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x143>
  22f8ef:	eb 00                	jmp    22f8f1 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x111>
  22f8f1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22f8f6:	48 83 e8 04          	sub    $0x4,%rax
  22f8fa:	74 49                	je     22f945 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x165>
  22f8fc:	e9 37 ff ff ff       	jmpq   22f838 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x58>
  22f901:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f906:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f90a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  22f90e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f912:	88 c1                	mov    %al,%cl
  22f914:	0f 94 c0             	sete   %al
  22f917:	24 01                	and    $0x1,%al
  22f919:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f91d:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f921:	eb 6c                	jmp    22f98f <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1af>
  22f923:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f928:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f92c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  22f930:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f934:	88 c1                	mov    %al,%cl
  22f936:	0f 94 c0             	sete   %al
  22f939:	24 01                	and    $0x1,%al
  22f93b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f93f:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f943:	eb 48                	jmp    22f98d <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1ad>
  22f945:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f94a:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f94e:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  22f952:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f956:	88 c1                	mov    %al,%cl
  22f958:	0f 94 c0             	sete   %al
  22f95b:	24 01                	and    $0x1,%al
  22f95d:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f961:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f965:	eb 00                	jmp    22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
    let (val, ok) = unsafe {
  22f967:	8a 44 24 48          	mov    0x48(%rsp),%al
  22f96b:	88 44 24 07          	mov    %al,0x7(%rsp)
  22f96f:	88 44 24 66          	mov    %al,0x66(%rsp)
  22f973:	8a 44 24 49          	mov    0x49(%rsp),%al
  22f977:	88 c1                	mov    %al,%cl
  22f979:	80 e1 01             	and    $0x1,%cl
  22f97c:	88 4c 24 67          	mov    %cl,0x67(%rsp)
    if ok { Ok(val) } else { Err(val) }
  22f980:	a8 01                	test   $0x1,%al
  22f982:	0f 85 44 01 00 00    	jne    22facc <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2ec>
  22f988:	e9 30 01 00 00       	jmpq   22fabd <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  22f98d:	eb d8                	jmp    22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  22f98f:	eb d6                	jmp    22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  22f991:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f996:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f99a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  22f99e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f9a2:	88 c1                	mov    %al,%cl
  22f9a4:	0f 94 c0             	sete   %al
  22f9a7:	24 01                	and    $0x1,%al
  22f9a9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f9ad:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f9b1:	eb 22                	jmp    22f9d5 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x1f5>
  22f9b3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f9b8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f9bc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  22f9c0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f9c4:	88 c1                	mov    %al,%cl
  22f9c6:	0f 94 c0             	sete   %al
  22f9c9:	24 01                	and    $0x1,%al
  22f9cb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f9cf:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f9d3:	eb 92                	jmp    22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  22f9d5:	eb 90                	jmp    22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  22f9d7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f9dc:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22f9e0:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  22f9e4:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22f9e8:	88 c1                	mov    %al,%cl
  22f9ea:	0f 94 c0             	sete   %al
  22f9ed:	24 01                	and    $0x1,%al
  22f9ef:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22f9f3:	88 44 24 49          	mov    %al,0x49(%rsp)
  22f9f7:	eb 25                	jmp    22fa1e <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x23e>
  22f9f9:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22f9fe:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fa02:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  22fa06:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fa0a:	88 c1                	mov    %al,%cl
  22fa0c:	0f 94 c0             	sete   %al
  22fa0f:	24 01                	and    $0x1,%al
  22fa11:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fa15:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fa19:	e9 49 ff ff ff       	jmpq   22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  22fa1e:	e9 44 ff ff ff       	jmpq   22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  22fa23:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fa28:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fa2c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  22fa30:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fa34:	88 c1                	mov    %al,%cl
  22fa36:	0f 94 c0             	sete   %al
  22fa39:	24 01                	and    $0x1,%al
  22fa3b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fa3f:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fa43:	e9 1f ff ff ff       	jmpq   22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  22fa48:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fa4d:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fa51:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  22fa55:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fa59:	88 c1                	mov    %al,%cl
  22fa5b:	0f 94 c0             	sete   %al
  22fa5e:	24 01                	and    $0x1,%al
  22fa60:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fa64:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fa68:	eb 4e                	jmp    22fab8 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  22fa6a:	48 8d 3d 80 40 fd ff 	lea    -0x2bf80(%rip),%rdi        # 203af1 <str.3+0x1e1>
  22fa71:	48 8d 15 80 af 00 00 	lea    0xaf80(%rip),%rdx        # 23a9f8 <memcmp+0x4448>
  22fa78:	be 3c 00 00 00       	mov    $0x3c,%esi
  22fa7d:	e8 de 39 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fa82:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  22fa84:	48 8d 3d df 40 fd ff 	lea    -0x2bf21(%rip),%rdi        # 203b6a <str.3+0x25a>
  22fa8b:	48 8d 15 96 af 00 00 	lea    0xaf96(%rip),%rdx        # 23aa28 <memcmp+0x4478>
  22fa92:	be 34 00 00 00       	mov    $0x34,%esi
  22fa97:	e8 c4 39 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fa9c:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  22fa9e:	48 8d 3d 88 40 fd ff 	lea    -0x2bf78(%rip),%rdi        # 203b2d <str.3+0x21d>
  22faa5:	48 8d 15 64 af 00 00 	lea    0xaf64(%rip),%rdx        # 23aa10 <memcmp+0x4460>
  22faac:	be 3d 00 00 00       	mov    $0x3d,%esi
  22fab1:	e8 aa 39 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fab6:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  22fab8:	e9 aa fe ff ff       	jmpq   22f967 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x187>
  22fabd:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  22fac1:	88 44 24 41          	mov    %al,0x41(%rsp)
  22fac5:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  22faca:	eb 0d                	jmp    22fad9 <_ZN4core4sync6atomic23atomic_compare_exchange17hec6b13d247563b8fE+0x2f9>
  22facc:	8a 44 24 07          	mov    0x7(%rsp),%al
  22fad0:	88 44 24 41          	mov    %al,0x41(%rsp)
  22fad4:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  22fad9:	8a 44 24 40          	mov    0x40(%rsp),%al
  22fadd:	8a 54 24 41          	mov    0x41(%rsp),%dl
  22fae1:	48 83 c4 68          	add    $0x68,%rsp
  22fae5:	c3                   	retq   
  22fae6:	cc                   	int3   
  22fae7:	cc                   	int3   
  22fae8:	cc                   	int3   
  22fae9:	cc                   	int3   
  22faea:	cc                   	int3   
  22faeb:	cc                   	int3   
  22faec:	cc                   	int3   
  22faed:	cc                   	int3   
  22faee:	cc                   	int3   
  22faef:	cc                   	int3   

000000000022faf0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE>:
unsafe fn atomic_compare_exchange_weak<T: Copy>(
  22faf0:	48 83 ec 68          	sub    $0x68,%rsp
  22faf4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22faf9:	44 88 c0             	mov    %r8b,%al
  22fafc:	88 54 24 36          	mov    %dl,0x36(%rsp)
  22fb00:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  22fb05:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  22fb0a:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  22fb0f:	88 54 24 63          	mov    %dl,0x63(%rsp)
  22fb13:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  22fb17:	88 44 24 65          	mov    %al,0x65(%rsp)
        match (success, failure) {
  22fb1b:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  22fb1f:	88 44 24 51          	mov    %al,0x51(%rsp)
  22fb23:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  22fb28:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  22fb2d:	48 83 e8 04          	sub    $0x4,%rax
  22fb31:	77 15                	ja     22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fb33:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  22fb38:	48 8d 0d 71 3e fd ff 	lea    -0x2c18f(%rip),%rcx        # 2039b0 <str.3+0xa0>
  22fb3f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22fb43:	48 01 c8             	add    %rcx,%rax
  22fb46:	ff e0                	jmpq   *%rax
  22fb48:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fb4d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  22fb52:	48 83 e8 01          	sub    $0x1,%rax
  22fb56:	0f 84 38 02 00 00    	je     22fd94 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2a4>
  22fb5c:	eb 00                	jmp    22fb5e <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x6e>
  22fb5e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  22fb63:	48 83 e8 03          	sub    $0x3,%rax
  22fb67:	0f 84 41 02 00 00    	je     22fdae <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2be>
  22fb6d:	e9 08 02 00 00       	jmpq   22fd7a <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x28a>
  22fb72:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fb77:	48 83 f8 00          	cmp    $0x0,%rax
  22fb7b:	0f 84 d7 01 00 00    	je     22fd58 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x268>
  22fb81:	eb c5                	jmp    22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fb83:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fb88:	48 83 f8 00          	cmp    $0x0,%rax
  22fb8c:	0f 84 a1 01 00 00    	je     22fd33 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x243>
  22fb92:	eb b4                	jmp    22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fb94:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fb99:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22fb9e:	48 85 c0             	test   %rax,%rax
  22fba1:	0f 84 40 01 00 00    	je     22fce7 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1f7>
  22fba7:	eb 00                	jmp    22fba9 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0xb9>
  22fba9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22fbae:	48 83 e8 02          	sub    $0x2,%rax
  22fbb2:	0f 84 51 01 00 00    	je     22fd09 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x219>
  22fbb8:	eb 8e                	jmp    22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fbba:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fbbf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  22fbc4:	48 85 c0             	test   %rax,%rax
  22fbc7:	0f 84 d4 00 00 00    	je     22fca1 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1b1>
  22fbcd:	eb 00                	jmp    22fbcf <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0xdf>
  22fbcf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22fbd4:	48 83 e8 02          	sub    $0x2,%rax
  22fbd8:	0f 84 e5 00 00 00    	je     22fcc3 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1d3>
  22fbde:	e9 65 ff ff ff       	jmpq   22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fbe3:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  22fbe8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22fbed:	48 85 c0             	test   %rax,%rax
  22fbf0:	74 1f                	je     22fc11 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x121>
  22fbf2:	eb 00                	jmp    22fbf4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x104>
  22fbf4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22fbf9:	48 83 e8 02          	sub    $0x2,%rax
  22fbfd:	74 34                	je     22fc33 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x143>
  22fbff:	eb 00                	jmp    22fc01 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x111>
  22fc01:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  22fc06:	48 83 e8 04          	sub    $0x4,%rax
  22fc0a:	74 49                	je     22fc55 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x165>
  22fc0c:	e9 37 ff ff ff       	jmpq   22fb48 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x58>
  22fc11:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fc16:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fc1a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),
  22fc1e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fc22:	88 c1                	mov    %al,%cl
  22fc24:	0f 94 c0             	sete   %al
  22fc27:	24 01                	and    $0x1,%al
  22fc29:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fc2d:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fc31:	eb 6c                	jmp    22fc9f <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1af>
  22fc33:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fc38:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fc3c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),
  22fc40:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fc44:	88 c1                	mov    %al,%cl
  22fc46:	0f 94 c0             	sete   %al
  22fc49:	24 01                	and    $0x1,%al
  22fc4b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fc4f:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fc53:	eb 48                	jmp    22fc9d <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1ad>
  22fc55:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fc5a:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fc5e:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak(dst, old, new),
  22fc62:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fc66:	88 c1                	mov    %al,%cl
  22fc68:	0f 94 c0             	sete   %al
  22fc6b:	24 01                	and    $0x1,%al
  22fc6d:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fc71:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fc75:	eb 00                	jmp    22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
    let (val, ok) = unsafe {
  22fc77:	8a 44 24 48          	mov    0x48(%rsp),%al
  22fc7b:	88 44 24 07          	mov    %al,0x7(%rsp)
  22fc7f:	88 44 24 66          	mov    %al,0x66(%rsp)
  22fc83:	8a 44 24 49          	mov    0x49(%rsp),%al
  22fc87:	88 c1                	mov    %al,%cl
  22fc89:	80 e1 01             	and    $0x1,%cl
  22fc8c:	88 4c 24 67          	mov    %cl,0x67(%rsp)
    if ok { Ok(val) } else { Err(val) }
  22fc90:	a8 01                	test   $0x1,%al
  22fc92:	0f 85 44 01 00 00    	jne    22fddc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2ec>
  22fc98:	e9 30 01 00 00       	jmpq   22fdcd <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),
  22fc9d:	eb d8                	jmp    22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),
  22fc9f:	eb d6                	jmp    22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  22fca1:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fca6:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fcaa:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),
  22fcae:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fcb2:	88 c1                	mov    %al,%cl
  22fcb4:	0f 94 c0             	sete   %al
  22fcb7:	24 01                	and    $0x1,%al
  22fcb9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fcbd:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fcc1:	eb 22                	jmp    22fce5 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x1f5>
  22fcc3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fcc8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fccc:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),
  22fcd0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fcd4:	88 c1                	mov    %al,%cl
  22fcd6:	0f 94 c0             	sete   %al
  22fcd9:	24 01                	and    $0x1,%al
  22fcdb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fcdf:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fce3:	eb 92                	jmp    22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),
  22fce5:	eb 90                	jmp    22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  22fce7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fcec:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fcf0:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),
  22fcf4:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fcf8:	88 c1                	mov    %al,%cl
  22fcfa:	0f 94 c0             	sete   %al
  22fcfd:	24 01                	and    $0x1,%al
  22fcff:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fd03:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fd07:	eb 25                	jmp    22fd2e <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x23e>
  22fd09:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fd0e:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fd12:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acq(dst, old, new),
  22fd16:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fd1a:	88 c1                	mov    %al,%cl
  22fd1c:	0f 94 c0             	sete   %al
  22fd1f:	24 01                	and    $0x1,%al
  22fd21:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fd25:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fd29:	e9 49 ff ff ff       	jmpq   22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),
  22fd2e:	e9 44 ff ff ff       	jmpq   22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  22fd33:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fd38:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fd3c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchgweak_rel(dst, old, new),
  22fd40:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fd44:	88 c1                	mov    %al,%cl
  22fd46:	0f 94 c0             	sete   %al
  22fd49:	24 01                	and    $0x1,%al
  22fd4b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fd4f:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fd53:	e9 1f ff ff ff       	jmpq   22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  22fd58:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  22fd5d:	8a 54 24 36          	mov    0x36(%rsp),%dl
  22fd61:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),
  22fd65:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  22fd69:	88 c1                	mov    %al,%cl
  22fd6b:	0f 94 c0             	sete   %al
  22fd6e:	24 01                	and    $0x1,%al
  22fd70:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  22fd74:	88 44 24 49          	mov    %al,0x49(%rsp)
  22fd78:	eb 4e                	jmp    22fdc8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  22fd7a:	48 8d 3d 70 3d fd ff 	lea    -0x2c290(%rip),%rdi        # 203af1 <str.3+0x1e1>
  22fd81:	48 8d 15 b8 ac 00 00 	lea    0xacb8(%rip),%rdx        # 23aa40 <memcmp+0x4490>
  22fd88:	be 3c 00 00 00       	mov    $0x3c,%esi
  22fd8d:	e8 ce 36 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fd92:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  22fd94:	48 8d 3d cf 3d fd ff 	lea    -0x2c231(%rip),%rdi        # 203b6a <str.3+0x25a>
  22fd9b:	48 8d 15 ce ac 00 00 	lea    0xacce(%rip),%rdx        # 23aa70 <memcmp+0x44c0>
  22fda2:	be 34 00 00 00       	mov    $0x34,%esi
  22fda7:	e8 b4 36 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fdac:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  22fdae:	48 8d 3d 78 3d fd ff 	lea    -0x2c288(%rip),%rdi        # 203b2d <str.3+0x21d>
  22fdb5:	48 8d 15 9c ac 00 00 	lea    0xac9c(%rip),%rdx        # 23aa58 <memcmp+0x44a8>
  22fdbc:	be 3d 00 00 00       	mov    $0x3d,%esi
  22fdc1:	e8 9a 36 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fdc6:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),
  22fdc8:	e9 aa fe ff ff       	jmpq   22fc77 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x187>
  22fdcd:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  22fdd1:	88 44 24 41          	mov    %al,0x41(%rsp)
  22fdd5:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  22fdda:	eb 0d                	jmp    22fde9 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hd08e5a27e94fa00fE+0x2f9>
  22fddc:	8a 44 24 07          	mov    0x7(%rsp),%al
  22fde0:	88 44 24 41          	mov    %al,0x41(%rsp)
  22fde4:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  22fde9:	8a 44 24 40          	mov    0x40(%rsp),%al
  22fded:	8a 54 24 41          	mov    0x41(%rsp),%dl
  22fdf1:	48 83 c4 68          	add    $0x68,%rsp
  22fdf5:	c3                   	retq   
  22fdf6:	cc                   	int3   
  22fdf7:	cc                   	int3   
  22fdf8:	cc                   	int3   
  22fdf9:	cc                   	int3   
  22fdfa:	cc                   	int3   
  22fdfb:	cc                   	int3   
  22fdfc:	cc                   	int3   
  22fdfd:	cc                   	int3   
  22fdfe:	cc                   	int3   
  22fdff:	cc                   	int3   

000000000022fe00 <_ZN5alloc7raw_vec17capacity_overflow17h99a87b7ff45619d7E>:
  22fe00:	50                   	push   %rax
  22fe01:	48 8d 3d 0b 3e fd ff 	lea    -0x2c1f5(%rip),%rdi        # 203c13 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820>
  22fe08:	48 8d 15 79 ac 00 00 	lea    0xac79(%rip),%rdx        # 23aa88 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820>
  22fe0f:	be 11 00 00 00       	mov    $0x11,%esi
  22fe14:	e8 47 36 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22fe19:	0f 0b                	ud2    
  22fe1b:	cc                   	int3   
  22fe1c:	cc                   	int3   
  22fe1d:	cc                   	int3   
  22fe1e:	cc                   	int3   
  22fe1f:	cc                   	int3   

000000000022fe20 <__rg_oom>:
  22fe20:	50                   	push   %rax
  22fe21:	e8 ca 9e ff ff       	callq  229cf0 <rust_oom>
  22fe26:	0f 0b                	ud2    
  22fe28:	cc                   	int3   
  22fe29:	cc                   	int3   
  22fe2a:	cc                   	int3   
  22fe2b:	cc                   	int3   
  22fe2c:	cc                   	int3   
  22fe2d:	cc                   	int3   
  22fe2e:	cc                   	int3   
  22fe2f:	cc                   	int3   

000000000022fe30 <_ZN5alloc5alloc18handle_alloc_error17hd9bd3602b1600516E>:
  22fe30:	50                   	push   %rax
  22fe31:	e8 9a cf ff ff       	callq  22cdd0 <__rust_alloc_error_handler>
  22fe36:	0f 0b                	ud2    
  22fe38:	cc                   	int3   
  22fe39:	cc                   	int3   
  22fe3a:	cc                   	int3   
  22fe3b:	cc                   	int3   
  22fe3c:	cc                   	int3   
  22fe3d:	cc                   	int3   
  22fe3e:	cc                   	int3   
  22fe3f:	cc                   	int3   

000000000022fe40 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
  22fe40:	48 83 ec 18          	sub    $0x18,%rsp
  22fe44:	48 89 3c 24          	mov    %rdi,(%rsp)
  22fe48:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if self.panicked {
  22fe4d:	f6 47 08 01          	testb  $0x1,0x8(%rdi)
  22fe51:	75 05                	jne    22fe58 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x18>
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
  22fe53:	48 83 c4 18          	add    $0x18,%rsp
  22fe57:	c3                   	retq   
  22fe58:	48 8b 04 24          	mov    (%rsp),%rax
            self.state.store(PANICKED, Ordering::SeqCst);
  22fe5c:	48 8b 38             	mov    (%rax),%rdi
  22fe5f:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  22fe64:	be 03 00 00 00       	mov    $0x3,%esi
  22fe69:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  22fe6e:	e8 0d 00 00 00       	callq  22fe80 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>
  22fe73:	eb de                	jmp    22fe53 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x13>
  22fe75:	cc                   	int3   
  22fe76:	cc                   	int3   
  22fe77:	cc                   	int3   
  22fe78:	cc                   	int3   
  22fe79:	cc                   	int3   
  22fe7a:	cc                   	int3   
  22fe7b:	cc                   	int3   
  22fe7c:	cc                   	int3   
  22fe7d:	cc                   	int3   
  22fe7e:	cc                   	int3   
  22fe7f:	cc                   	int3   

000000000022fe80 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  22fe80:	48 83 ec 38          	sub    $0x38,%rsp
  22fe84:	48 89 34 24          	mov    %rsi,(%rsp)
  22fe88:	88 d0                	mov    %dl,%al
  22fe8a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22fe8e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  22fe93:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  22fe98:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  22fe9c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22fea1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  22fea6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  22feaa:	48 8b 34 24          	mov    (%rsp),%rsi
  22feae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  22feb3:	0f b6 d0             	movzbl %al,%edx
  22feb6:	e8 05 00 00 00       	callq  22fec0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>
            }
  22febb:	48 83 c4 38          	add    $0x38,%rsp
  22febf:	c3                   	retq   

000000000022fec0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  22fec0:	48 83 ec 38          	sub    $0x38,%rsp
  22fec4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  22fec9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  22fece:	88 d0                	mov    %dl,%al
  22fed0:	88 44 24 27          	mov    %al,0x27(%rsp)
  22fed4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22fed9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  22fede:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  22fee3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22fee8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  22feed:	48 8d 0d 30 3d fd ff 	lea    -0x2c2d0(%rip),%rcx        # 203c24 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0x11>
  22fef4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  22fef8:	48 01 c8             	add    %rcx,%rax
  22fefb:	ff e0                	jmpq   *%rax
  22fefd:	0f 0b                	ud2    
  22feff:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ff04:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22ff09:	48 89 08             	mov    %rcx,(%rax)
  22ff0c:	eb 59                	jmp    22ff67 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa7>
  22ff0e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  22ff13:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  22ff18:	48 89 08             	mov    %rcx,(%rax)
  22ff1b:	eb 48                	jmp    22ff65 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  22ff1d:	48 8d 3d be 3d fd ff 	lea    -0x2c242(%rip),%rdi        # 203ce2 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0xcf>
  22ff24:	48 8d 15 8d ab 00 00 	lea    0xab8d(%rip),%rdx        # 23aab8 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820+0x30>
  22ff2b:	be 2a 00 00 00       	mov    $0x2a,%esi
  22ff30:	e8 2b 35 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ff35:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  22ff37:	48 8d 3d fa 3c fd ff 	lea    -0x2c306(%rip),%rdi        # 203c38 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0x25>
  22ff3e:	48 8d 15 5b ab 00 00 	lea    0xab5b(%rip),%rdx        # 23aaa0 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820+0x18>
  22ff45:	be 32 00 00 00       	mov    $0x32,%esi
  22ff4a:	e8 11 35 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  22ff4f:	0f 0b                	ud2    
  22ff51:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  22ff56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  22ff5b:	48 87 01             	xchg   %rax,(%rcx)
  22ff5e:	eb 00                	jmp    22ff60 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
}
  22ff60:	48 83 c4 38          	add    $0x38,%rsp
  22ff64:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  22ff65:	eb f9                	jmp    22ff60 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  22ff67:	eb f7                	jmp    22ff60 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
  22ff69:	cc                   	int3   
  22ff6a:	cc                   	int3   
  22ff6b:	cc                   	int3   
  22ff6c:	cc                   	int3   
  22ff6d:	cc                   	int3   
  22ff6e:	cc                   	int3   
  22ff6f:	cc                   	int3   

000000000022ff70 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>:
    fn clone(&self) -> Level {
  22ff70:	50                   	push   %rax
  22ff71:	48 89 3c 24          	mov    %rdi,(%rsp)
        *self
  22ff75:	48 8b 07             	mov    (%rdi),%rax
    }
  22ff78:	59                   	pop    %rcx
  22ff79:	c3                   	retq   
  22ff7a:	cc                   	int3   
  22ff7b:	cc                   	int3   
  22ff7c:	cc                   	int3   
  22ff7d:	cc                   	int3   
  22ff7e:	cc                   	int3   
  22ff7f:	cc                   	int3   

000000000022ff80 <_ZN49_$LT$log..Level$u20$as$u20$core..fmt..Display$GT$3fmt17h774fa8d468057f7dE>:
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
  22ff80:	48 83 ec 38          	sub    $0x38,%rsp
  22ff84:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  22ff89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  22ff8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt.pad(self.as_str())
  22ff93:	e8 38 00 00 00       	callq  22ffd0 <_ZN3log5Level6as_str17h940f0b247dae748dE>
  22ff98:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  22ff9d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  22ffa2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  22ffa7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  22ffac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  22ffb1:	e8 ea 53 00 00       	callq  2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  22ffb6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  22ffba:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  22ffbe:	24 01                	and    $0x1,%al
  22ffc0:	0f b6 c0             	movzbl %al,%eax
  22ffc3:	48 83 c4 38          	add    $0x38,%rsp
  22ffc7:	c3                   	retq   
  22ffc8:	cc                   	int3   
  22ffc9:	cc                   	int3   
  22ffca:	cc                   	int3   
  22ffcb:	cc                   	int3   
  22ffcc:	cc                   	int3   
  22ffcd:	cc                   	int3   
  22ffce:	cc                   	int3   
  22ffcf:	cc                   	int3   

000000000022ffd0 <_ZN3log5Level6as_str17h940f0b247dae748dE>:
    pub fn as_str(&self) -> &'static str {
  22ffd0:	48 83 ec 18          	sub    $0x18,%rsp
  22ffd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        LOG_LEVEL_NAMES[*self as usize]
  22ffd9:	48 8b 07             	mov    (%rdi),%rax
  22ffdc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22ffe1:	48 83 f8 06          	cmp    $0x6,%rax
  22ffe5:	0f 92 c0             	setb   %al
  22ffe8:	a8 01                	test   $0x1,%al
  22ffea:	75 02                	jne    22ffee <_ZN3log5Level6as_str17h940f0b247dae748dE+0x1e>
  22ffec:	eb 1e                	jmp    23000c <_ZN3log5Level6as_str17h940f0b247dae748dE+0x3c>
  22ffee:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  22fff3:	48 c1 e1 04          	shl    $0x4,%rcx
  22fff7:	48 8d 15 22 ab 00 00 	lea    0xab22(%rip),%rdx        # 23ab20 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E>
  22fffe:	48 8b 04 11          	mov    (%rcx,%rdx,1),%rax
  230002:	48 8b 54 11 08       	mov    0x8(%rcx,%rdx,1),%rdx
    }
  230007:	48 83 c4 18          	add    $0x18,%rsp
  23000b:	c3                   	retq   
  23000c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        LOG_LEVEL_NAMES[*self as usize]
  230011:	48 8d 15 68 ab 00 00 	lea    0xab68(%rip),%rdx        # 23ab80 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x60>
  230018:	be 06 00 00 00       	mov    $0x6,%esi
  23001d:	e8 8e 34 00 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  230022:	0f 0b                	ud2    
  230024:	cc                   	int3   
  230025:	cc                   	int3   
  230026:	cc                   	int3   
  230027:	cc                   	int3   
  230028:	cc                   	int3   
  230029:	cc                   	int3   
  23002a:	cc                   	int3   
  23002b:	cc                   	int3   
  23002c:	cc                   	int3   
  23002d:	cc                   	int3   
  23002e:	cc                   	int3   
  23002f:	cc                   	int3   

0000000000230030 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>:
    pub fn builder() -> RecordBuilder<'a> {
  230030:	50                   	push   %rax
  230031:	48 89 f8             	mov    %rdi,%rax
  230034:	48 89 04 24          	mov    %rax,(%rsp)
        RecordBuilder::new()
  230038:	e8 13 00 00 00       	callq  230050 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>
  23003d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  230041:	59                   	pop    %rcx
  230042:	c3                   	retq   
  230043:	cc                   	int3   
  230044:	cc                   	int3   
  230045:	cc                   	int3   
  230046:	cc                   	int3   
  230047:	cc                   	int3   
  230048:	cc                   	int3   
  230049:	cc                   	int3   
  23004a:	cc                   	int3   
  23004b:	cc                   	int3   
  23004c:	cc                   	int3   
  23004d:	cc                   	int3   
  23004e:	cc                   	int3   
  23004f:	cc                   	int3   

0000000000230050 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>:
    pub fn new() -> RecordBuilder<'a> {
  230050:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  230057:	48 89 3c 24          	mov    %rdi,(%rsp)
  23005b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                args: format_args!(""),
  230060:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  230067:	00 
  230068:	48 8d 0d a1 3c fd ff 	lea    -0x2c35f(%rip),%rcx        # 203d10 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0xfd>
  23006f:	48 89 ce             	mov    %rcx,%rsi
  230072:	31 c0                	xor    %eax,%eax
  230074:	41 89 c0             	mov    %eax,%r8d
  230077:	4c 89 c2             	mov    %r8,%rdx
  23007a:	e8 f1 14 00 00       	callq  231570 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>
                metadata: Metadata::builder().build(),
  23007f:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  230086:	00 
  230087:	e8 84 02 00 00       	callq  230310 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>
  23008c:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  230093:	00 
  230094:	48 8d b4 24 d8 00 00 	lea    0xd8(%rsp),%rsi
  23009b:	00 
  23009c:	e8 df 02 00 00       	callq  230380 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>
                module_path: None,
  2300a1:	48 c7 84 24 f0 00 00 	movq   $0x2,0xf0(%rsp)
  2300a8:	00 02 00 00 00 
                file: None,
  2300ad:	48 c7 84 24 08 01 00 	movq   $0x2,0x108(%rsp)
  2300b4:	00 02 00 00 00 
                line: None,
  2300b9:	c7 84 24 20 01 00 00 	movl   $0x0,0x120(%rsp)
  2300c0:	00 00 00 00 
            record: Record {
  2300c4:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2300cb:	00 
  2300cc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2300d1:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2300d8:	00 
  2300d9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2300de:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  2300e5:	00 
  2300e6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2300eb:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2300f0:	48 83 c7 18          	add    $0x18,%rdi
  2300f4:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  2300fb:	00 
  2300fc:	ba 30 00 00 00       	mov    $0x30,%edx
  230101:	e8 5a 64 00 00       	callq  236560 <memcpy>
  230106:	48 8b 3c 24          	mov    (%rsp),%rdi
  23010a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  230111:	00 
  230112:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230117:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  23011e:	00 
  23011f:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  230124:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  23012b:	00 
  23012c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  230131:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  230138:	00 
  230139:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  23013e:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  230145:	00 
  230146:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  23014b:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  230152:	00 
  230153:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  23015a:	00 
  23015b:	8b 8c 24 20 01 00 00 	mov    0x120(%rsp),%ecx
  230162:	8b 84 24 24 01 00 00 	mov    0x124(%rsp),%eax
  230169:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
  230170:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%rsp)
        RecordBuilder {
  230177:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  23017c:	ba 80 00 00 00       	mov    $0x80,%edx
  230181:	e8 da 63 00 00       	callq  236560 <memcpy>
  230186:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  23018b:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  230192:	c3                   	retq   
  230193:	cc                   	int3   
  230194:	cc                   	int3   
  230195:	cc                   	int3   
  230196:	cc                   	int3   
  230197:	cc                   	int3   
  230198:	cc                   	int3   
  230199:	cc                   	int3   
  23019a:	cc                   	int3   
  23019b:	cc                   	int3   
  23019c:	cc                   	int3   
  23019d:	cc                   	int3   
  23019e:	cc                   	int3   
  23019f:	cc                   	int3   

00000000002301a0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
  2301a0:	48 83 ec 48          	sub    $0x48,%rsp
  2301a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2301a9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        self.record.args = args;
  2301ae:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  2301b3:	ba 30 00 00 00       	mov    $0x30,%edx
  2301b8:	e8 a3 63 00 00       	callq  236560 <memcpy>
  2301bd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2301c2:	48 83 c7 18          	add    $0x18,%rdi
  2301c6:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  2301cb:	ba 30 00 00 00       	mov    $0x30,%edx
  2301d0:	e8 8b 63 00 00       	callq  236560 <memcpy>
  2301d5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  2301da:	48 83 c4 48          	add    $0x48,%rsp
  2301de:	c3                   	retq   
  2301df:	cc                   	int3   

00000000002301e0 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
  2301e0:	48 83 ec 10          	sub    $0x10,%rsp
  2301e4:	48 89 f8             	mov    %rdi,%rax
  2301e7:	48 89 04 24          	mov    %rax,(%rsp)
  2301eb:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        self.record.metadata.level = level;
  2301f0:	48 89 30             	mov    %rsi,(%rax)
    }
  2301f3:	48 83 c4 10          	add    $0x10,%rsp
  2301f7:	c3                   	retq   
  2301f8:	cc                   	int3   
  2301f9:	cc                   	int3   
  2301fa:	cc                   	int3   
  2301fb:	cc                   	int3   
  2301fc:	cc                   	int3   
  2301fd:	cc                   	int3   
  2301fe:	cc                   	int3   
  2301ff:	cc                   	int3   

0000000000230200 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
  230200:	48 83 ec 18          	sub    $0x18,%rsp
  230204:	48 89 f8             	mov    %rdi,%rax
  230207:	48 89 04 24          	mov    %rax,(%rsp)
  23020b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  230210:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.record.metadata.target = target;
  230215:	48 89 70 08          	mov    %rsi,0x8(%rax)
  230219:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  23021d:	48 83 c4 18          	add    $0x18,%rsp
  230221:	c3                   	retq   
  230222:	cc                   	int3   
  230223:	cc                   	int3   
  230224:	cc                   	int3   
  230225:	cc                   	int3   
  230226:	cc                   	int3   
  230227:	cc                   	int3   
  230228:	cc                   	int3   
  230229:	cc                   	int3   
  23022a:	cc                   	int3   
  23022b:	cc                   	int3   
  23022c:	cc                   	int3   
  23022d:	cc                   	int3   
  23022e:	cc                   	int3   
  23022f:	cc                   	int3   

0000000000230230 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
  230230:	48 83 ec 38          	sub    $0x38,%rsp
  230234:	48 89 3c 24          	mov    %rdi,(%rsp)
  230238:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  23023d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  230242:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.module_path = path.map(MaybeStaticStr::Static);
  230247:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  23024c:	e8 9f 0a 00 00       	callq  230cf0 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  230251:	48 8b 04 24          	mov    (%rsp),%rax
  230255:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  23025a:	48 89 48 48          	mov    %rcx,0x48(%rax)
  23025e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  230263:	48 89 48 50          	mov    %rcx,0x50(%rax)
  230267:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  23026c:	48 89 48 58          	mov    %rcx,0x58(%rax)
    }
  230270:	48 83 c4 38          	add    $0x38,%rsp
  230274:	c3                   	retq   
  230275:	cc                   	int3   
  230276:	cc                   	int3   
  230277:	cc                   	int3   
  230278:	cc                   	int3   
  230279:	cc                   	int3   
  23027a:	cc                   	int3   
  23027b:	cc                   	int3   
  23027c:	cc                   	int3   
  23027d:	cc                   	int3   
  23027e:	cc                   	int3   
  23027f:	cc                   	int3   

0000000000230280 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
  230280:	48 83 ec 38          	sub    $0x38,%rsp
  230284:	48 89 3c 24          	mov    %rdi,(%rsp)
  230288:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  23028d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  230292:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.file = file.map(MaybeStaticStr::Static);
  230297:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  23029c:	e8 4f 0a 00 00       	callq  230cf0 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  2302a1:	48 8b 04 24          	mov    (%rsp),%rax
  2302a5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  2302aa:	48 89 48 60          	mov    %rcx,0x60(%rax)
  2302ae:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2302b3:	48 89 48 68          	mov    %rcx,0x68(%rax)
  2302b7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2302bc:	48 89 48 70          	mov    %rcx,0x70(%rax)
    }
  2302c0:	48 83 c4 38          	add    $0x38,%rsp
  2302c4:	c3                   	retq   
  2302c5:	cc                   	int3   
  2302c6:	cc                   	int3   
  2302c7:	cc                   	int3   
  2302c8:	cc                   	int3   
  2302c9:	cc                   	int3   
  2302ca:	cc                   	int3   
  2302cb:	cc                   	int3   
  2302cc:	cc                   	int3   
  2302cd:	cc                   	int3   
  2302ce:	cc                   	int3   
  2302cf:	cc                   	int3   

00000000002302d0 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
  2302d0:	48 83 ec 10          	sub    $0x10,%rsp
  2302d4:	48 89 f8             	mov    %rdi,%rax
  2302d7:	48 89 04 24          	mov    %rax,(%rsp)
  2302db:	89 74 24 08          	mov    %esi,0x8(%rsp)
  2302df:	89 54 24 0c          	mov    %edx,0xc(%rsp)
        self.record.line = line;
  2302e3:	89 70 78             	mov    %esi,0x78(%rax)
  2302e6:	89 50 7c             	mov    %edx,0x7c(%rax)
    }
  2302e9:	48 83 c4 10          	add    $0x10,%rsp
  2302ed:	c3                   	retq   
  2302ee:	cc                   	int3   
  2302ef:	cc                   	int3   

00000000002302f0 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>:
    pub fn build(&self) -> Record<'a> {
  2302f0:	48 83 ec 18          	sub    $0x18,%rsp
  2302f4:	48 89 f8             	mov    %rdi,%rax
  2302f7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2302fc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.record.clone()
  230301:	e8 3a 05 00 00       	callq  230840 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>
  230306:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  23030b:	48 83 c4 18          	add    $0x18,%rsp
  23030f:	c3                   	retq   

0000000000230310 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>:
    pub fn builder() -> MetadataBuilder<'a> {
  230310:	50                   	push   %rax
  230311:	48 89 f8             	mov    %rdi,%rax
  230314:	48 89 04 24          	mov    %rax,(%rsp)
        MetadataBuilder::new()
  230318:	e8 13 00 00 00       	callq  230330 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>
  23031d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  230321:	59                   	pop    %rcx
  230322:	c3                   	retq   
  230323:	cc                   	int3   
  230324:	cc                   	int3   
  230325:	cc                   	int3   
  230326:	cc                   	int3   
  230327:	cc                   	int3   
  230328:	cc                   	int3   
  230329:	cc                   	int3   
  23032a:	cc                   	int3   
  23032b:	cc                   	int3   
  23032c:	cc                   	int3   
  23032d:	cc                   	int3   
  23032e:	cc                   	int3   
  23032f:	cc                   	int3   

0000000000230330 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>:
    pub fn new() -> MetadataBuilder<'a> {
  230330:	48 83 ec 18          	sub    $0x18,%rsp
  230334:	48 89 f8             	mov    %rdi,%rax
            metadata: Metadata {
  230337:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  23033e:	00 
  23033f:	48 8d 0d ca 39 fd ff 	lea    -0x2c636(%rip),%rcx        # 203d10 <anon.b2227533a593aab1cb91e412cae8018e.7.llvm.11249371108142859820+0xfd>
  230346:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  23034b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  230352:	00 00 
        MetadataBuilder {
  230354:	48 8b 0c 24          	mov    (%rsp),%rcx
  230358:	48 89 0f             	mov    %rcx,(%rdi)
  23035b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  230360:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  230364:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  230369:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    }
  23036d:	48 83 c4 18          	add    $0x18,%rsp
  230371:	c3                   	retq   
  230372:	cc                   	int3   
  230373:	cc                   	int3   
  230374:	cc                   	int3   
  230375:	cc                   	int3   
  230376:	cc                   	int3   
  230377:	cc                   	int3   
  230378:	cc                   	int3   
  230379:	cc                   	int3   
  23037a:	cc                   	int3   
  23037b:	cc                   	int3   
  23037c:	cc                   	int3   
  23037d:	cc                   	int3   
  23037e:	cc                   	int3   
  23037f:	cc                   	int3   

0000000000230380 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>:
    pub fn build(&self) -> Metadata<'a> {
  230380:	48 83 ec 18          	sub    $0x18,%rsp
  230384:	48 89 f8             	mov    %rdi,%rax
  230387:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23038c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.metadata.clone()
  230391:	e8 0a 06 00 00       	callq  2309a0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  230396:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  23039b:	48 83 c4 18          	add    $0x18,%rsp
  23039f:	c3                   	retq   

00000000002303a0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h56ee4da12616bf71E>:
    fn enabled(&self, _: &Metadata) -> bool {
  2303a0:	48 83 ec 10          	sub    $0x10,%rsp
  2303a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2303a8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  2303ad:	31 c0                	xor    %eax,%eax
  2303af:	24 01                	and    $0x1,%al
  2303b1:	0f b6 c0             	movzbl %al,%eax
  2303b4:	48 83 c4 10          	add    $0x10,%rsp
  2303b8:	c3                   	retq   
  2303b9:	cc                   	int3   
  2303ba:	cc                   	int3   
  2303bb:	cc                   	int3   
  2303bc:	cc                   	int3   
  2303bd:	cc                   	int3   
  2303be:	cc                   	int3   
  2303bf:	cc                   	int3   

00000000002303c0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17h2de79af78304e972E>:
    fn log(&self, _: &Record) {}
  2303c0:	48 83 ec 10          	sub    $0x10,%rsp
  2303c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2303c8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2303cd:	48 83 c4 10          	add    $0x10,%rsp
  2303d1:	c3                   	retq   
  2303d2:	cc                   	int3   
  2303d3:	cc                   	int3   
  2303d4:	cc                   	int3   
  2303d5:	cc                   	int3   
  2303d6:	cc                   	int3   
  2303d7:	cc                   	int3   
  2303d8:	cc                   	int3   
  2303d9:	cc                   	int3   
  2303da:	cc                   	int3   
  2303db:	cc                   	int3   
  2303dc:	cc                   	int3   
  2303dd:	cc                   	int3   
  2303de:	cc                   	int3   
  2303df:	cc                   	int3   

00000000002303e0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h85912e3b490f95beE>:
    fn flush(&self) {}
  2303e0:	50                   	push   %rax
  2303e1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2303e5:	58                   	pop    %rax
  2303e6:	c3                   	retq   
  2303e7:	cc                   	int3   
  2303e8:	cc                   	int3   
  2303e9:	cc                   	int3   
  2303ea:	cc                   	int3   
  2303eb:	cc                   	int3   
  2303ec:	cc                   	int3   
  2303ed:	cc                   	int3   
  2303ee:	cc                   	int3   
  2303ef:	cc                   	int3   

00000000002303f0 <_ZN3log10set_logger17ha1c2327ac82037ebE>:
/// # }
/// ```
///
/// [`set_logger_racy`]: fn.set_logger_racy.html
#[cfg(atomic_cas)]
pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {
  2303f0:	48 83 ec 28          	sub    $0x28,%rsp
  2303f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2303f9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    set_logger_inner(|| logger)
  2303fe:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  230403:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  230408:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  23040d:	e8 2e 00 00 00       	callq  230440 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>
  230412:	88 44 24 0f          	mov    %al,0xf(%rsp)
  230416:	8a 44 24 0f          	mov    0xf(%rsp),%al
}
  23041a:	24 01                	and    $0x1,%al
  23041c:	0f b6 c0             	movzbl %al,%eax
  23041f:	48 83 c4 28          	add    $0x28,%rsp
  230423:	c3                   	retq   
  230424:	cc                   	int3   
  230425:	cc                   	int3   
  230426:	cc                   	int3   
  230427:	cc                   	int3   
  230428:	cc                   	int3   
  230429:	cc                   	int3   
  23042a:	cc                   	int3   
  23042b:	cc                   	int3   
  23042c:	cc                   	int3   
  23042d:	cc                   	int3   
  23042e:	cc                   	int3   
  23042f:	cc                   	int3   

0000000000230430 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>:
    set_logger_inner(|| logger)
  230430:	50                   	push   %rax
  230431:	48 89 3c 24          	mov    %rdi,(%rsp)
  230435:	48 8b 07             	mov    (%rdi),%rax
  230438:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  23043c:	59                   	pop    %rcx
  23043d:	c3                   	retq   
  23043e:	cc                   	int3   
  23043f:	cc                   	int3   

0000000000230440 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>:

#[cfg(atomic_cas)]
fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
  230440:	48 83 ec 68          	sub    $0x68,%rsp
  230444:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  230449:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
where
    F: FnOnce() -> &'static dyn Log,
{
    let old_state = match STATE.compare_exchange(
  23044e:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  230453:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
        UNINITIALIZED,
        INITIALIZING,
        Ordering::SeqCst,
  230458:	c6 44 24 46 04       	movb   $0x4,0x46(%rsp)
        Ordering::SeqCst,
  23045d:	c6 44 24 47 04       	movb   $0x4,0x47(%rsp)
    let old_state = match STATE.compare_exchange(
  230462:	44 0f b6 44 24 47    	movzbl 0x47(%rsp),%r8d
  230468:	0f b6 4c 24 46       	movzbl 0x46(%rsp),%ecx
  23046d:	48 8d 3d bc 2a 01 00 	lea    0x12abc(%rip),%rdi        # 242f30 <_ZN3log5STATE17hb7f15395e9efabeeE>
  230474:	31 c0                	xor    %eax,%eax
  230476:	89 c6                	mov    %eax,%esi
  230478:	ba 01 00 00 00       	mov    $0x1,%edx
  23047d:	e8 fe 09 00 00       	callq  230e80 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>
  230482:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  230487:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  23048c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  230491:	48 85 c0             	test   %rax,%rax
  230494:	74 06                	je     23049c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x5c>
  230496:	eb 00                	jmp    230498 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x58>
  230498:	eb 0e                	jmp    2304a8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x68>
  23049a:	0f 0b                	ud2    
    ) {
        Ok(s) | Err(s) => s,
  23049c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2304a1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    let old_state = match STATE.compare_exchange(
  2304a6:	eb 0a                	jmp    2304b2 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x72>
        Ok(s) | Err(s) => s,
  2304a8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  2304ad:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2304b2:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2304b7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2304bc:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };
    match old_state {
  2304c1:	48 85 c0             	test   %rax,%rax
  2304c4:	74 16                	je     2304dc <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x9c>
  2304c6:	eb 00                	jmp    2304c8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x88>
  2304c8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2304cd:	48 83 e8 01          	sub    $0x1,%rax
  2304d1:	74 24                	je     2304f7 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  2304d3:	eb 00                	jmp    2304d5 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x95>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
                std::sync::atomic::spin_loop_hint();
            }
            Err(SetLoggerError(()))
        }
        _ => Err(SetLoggerError(())),
  2304d5:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  2304da:	eb 37                	jmp    230513 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
  2304dc:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                LOGGER = make_logger();
  2304e1:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  2304e6:	e8 45 ff ff ff       	callq  230430 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>
  2304eb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2304f0:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2304f5:	eb 3d                	jmp    230534 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xf4>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  2304f7:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  2304fc:	48 8d 3d 2d 2a 01 00 	lea    0x12a2d(%rip),%rdi        # 242f30 <_ZN3log5STATE17hb7f15395e9efabeeE>
  230503:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  230508:	e8 f3 09 00 00       	callq  230f00 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  23050d:	48 89 04 24          	mov    %rax,(%rsp)
  230511:	eb 09                	jmp    23051c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xdc>
    }
}
  230513:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  230518:	75 62                	jne    23057c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x13c>
  23051a:	eb 52                	jmp    23056e <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  23051c:	48 8b 04 24          	mov    (%rsp),%rax
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  230520:	48 83 f8 01          	cmp    $0x1,%rax
  230524:	74 07                	je     23052d <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xed>
            Err(SetLoggerError(()))
  230526:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  23052b:	eb e6                	jmp    230513 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
                std::sync::atomic::spin_loop_hint();
  23052d:	e8 ae 0b 00 00       	callq  2310e0 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>
  230532:	eb c3                	jmp    2304f7 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  230534:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  230539:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                LOGGER = make_logger();
  23053e:	48 89 0d e3 bc 00 00 	mov    %rcx,0xbce3(%rip)        # 23c228 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  230545:	48 89 05 e4 bc 00 00 	mov    %rax,0xbce4(%rip)        # 23c230 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
            STATE.store(INITIALIZED, Ordering::SeqCst);
  23054c:	c6 44 24 55 04       	movb   $0x4,0x55(%rsp)
  230551:	48 8d 3d d8 29 01 00 	lea    0x129d8(%rip),%rdi        # 242f30 <_ZN3log5STATE17hb7f15395e9efabeeE>
  230558:	be 02 00 00 00       	mov    $0x2,%esi
  23055d:	0f b6 54 24 55       	movzbl 0x55(%rsp),%edx
  230562:	e8 d9 09 00 00       	callq  230f40 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>
            Ok(())
  230567:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  23056c:	eb a5                	jmp    230513 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
}
  23056e:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  230572:	24 01                	and    $0x1,%al
  230574:	0f b6 c0             	movzbl %al,%eax
  230577:	48 83 c4 68          	add    $0x68,%rsp
  23057b:	c3                   	retq   
  23057c:	eb f0                	jmp    23056e <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  23057e:	cc                   	int3   
  23057f:	cc                   	int3   

0000000000230580 <_ZN3log6logger17hb619d971bb0802d6E>:
impl error::Error for ParseLevelError {}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static dyn Log {
  230580:	48 83 ec 28          	sub    $0x28,%rsp
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  230584:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  230589:	48 8d 3d a0 29 01 00 	lea    0x129a0(%rip),%rdi        # 242f30 <_ZN3log5STATE17hb7f15395e9efabeeE>
  230590:	0f b6 74 24 27       	movzbl 0x27(%rsp),%esi
  230595:	e8 66 09 00 00       	callq  230f00 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  23059a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23059f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2305a4:	48 83 f8 02          	cmp    $0x2,%rax
  2305a8:	75 1a                	jne    2305c4 <_ZN3log6logger17hb619d971bb0802d6E+0x44>
        static NOP: NopLogger = NopLogger;
        &NOP
    } else {
        unsafe { LOGGER }
  2305aa:	48 8b 0d 77 bc 00 00 	mov    0xbc77(%rip),%rcx        # 23c228 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  2305b1:	48 8b 05 78 bc 00 00 	mov    0xbc78(%rip),%rax        # 23c230 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
  2305b8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2305bd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  2305c2:	eb 18                	jmp    2305dc <_ZN3log6logger17hb619d971bb0802d6E+0x5c>
        &NOP
  2305c4:	48 8d 05 ac 37 fd ff 	lea    -0x2c854(%rip),%rax        # 203d77 <_ZN3log6logger3NOP17ha8b888e78aa907e8E>
  2305cb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2305d0:	48 8d 05 11 a5 00 00 	lea    0xa511(%rip),%rax        # 23aae8 <anon.b2227533a593aab1cb91e412cae8018e.8.llvm.11249371108142859820+0x60>
  2305d7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  2305dc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2305e1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    }
}
  2305e6:	48 83 c4 28          	add    $0x28,%rsp
  2305ea:	c3                   	retq   
  2305eb:	cc                   	int3   
  2305ec:	cc                   	int3   
  2305ed:	cc                   	int3   
  2305ee:	cc                   	int3   
  2305ef:	cc                   	int3   

00000000002305f0 <_ZN3log17__private_api_log17ha4b636ffcba62793E>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
  2305f0:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  2305f7:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  2305fc:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  230601:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  230606:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  23060d:	00 
  23060e:	48 89 94 24 f8 01 00 	mov    %rdx,0x1f8(%rsp)
  230615:	00 
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
  230616:	48 8b 0a             	mov    (%rdx),%rcx
  230619:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  23061e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  230622:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230627:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  23062e:	00 
  23062f:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  230636:	00 
  230637:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  23063b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  230640:	48 8b 42 18          	mov    0x18(%rdx),%rax
  230644:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  230649:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  230650:	00 
  230651:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  230658:	00 
  230659:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  23065d:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  230662:	48 8b 42 28          	mov    0x28(%rdx),%rax
  230666:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  23066b:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  230672:	00 
  230673:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  23067a:	00 
  23067b:	8b 42 30             	mov    0x30(%rdx),%eax
  23067e:	89 84 24 84 00 00 00 	mov    %eax,0x84(%rsp)
  230685:	89 84 24 34 02 00 00 	mov    %eax,0x234(%rsp)
) {
    logger().log(
  23068c:	e8 ef fe ff ff       	callq  230580 <_ZN3log6logger17hb619d971bb0802d6E>
  230691:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  230698:	00 
  230699:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2306a0:	00 
        &Record::builder()
  2306a1:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  2306a8:	00 
  2306a9:	e8 82 f9 ff ff       	callq  230030 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>
  2306ae:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
            .args(args)
  2306b3:	48 8d bc 24 98 01 00 	lea    0x198(%rsp),%rdi
  2306ba:	00 
  2306bb:	ba 30 00 00 00       	mov    $0x30,%edx
  2306c0:	e8 9b 5e 00 00       	callq  236560 <memcpy>
        &Record::builder()
  2306c5:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  2306cc:	00 
  2306cd:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  2306d4:	00 
  2306d5:	e8 c6 fa ff ff       	callq  2301a0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>
  2306da:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2306df:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  2306e4:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  2306e9:	e8 f2 fa ff ff       	callq  2301e0 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>
  2306ee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2306f3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  2306f8:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  2306fd:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  230702:	e8 f9 fa ff ff       	callq  230200 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>
  230707:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23070c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  230711:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  230716:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
  23071b:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  230722:	00 
  230723:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  23072a:	00 
        &Record::builder()
  23072b:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
  230732:	00 
  230733:	48 8b 94 24 d0 01 00 	mov    0x1d0(%rsp),%rdx
  23073a:	00 
  23073b:	e8 f0 fa ff ff       	callq  230230 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>
  230740:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  230745:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  23074a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  23074f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            .file_static(Some(file))
  230754:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  23075b:	00 
  23075c:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  230763:	00 
        &Record::builder()
  230764:	48 8b b4 24 d8 01 00 	mov    0x1d8(%rsp),%rsi
  23076b:	00 
  23076c:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  230773:	00 
  230774:	e8 07 fb ff ff       	callq  230280 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>
  230779:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  23077e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  230783:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
            .line(Some(line))
  23078a:	89 84 24 ec 01 00 00 	mov    %eax,0x1ec(%rsp)
  230791:	c7 84 24 e8 01 00 00 	movl   $0x1,0x1e8(%rsp)
  230798:	01 00 00 00 
        &Record::builder()
  23079c:	8b b4 24 e8 01 00 00 	mov    0x1e8(%rsp),%esi
  2307a3:	8b 94 24 ec 01 00 00 	mov    0x1ec(%rsp),%edx
  2307aa:	e8 21 fb ff ff       	callq  2302d0 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>
  2307af:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2307b4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2307b9:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  2307c0:	00 
  2307c1:	e8 2a fb ff ff       	callq  2302f0 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>
  2307c6:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2307cd:	00 
  2307ce:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  2307d5:	00 
    logger().log(
  2307d6:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  2307dd:	00 
  2307de:	ff 50 28             	callq  *0x28(%rax)
            .build(),
    );
}
  2307e1:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  2307e8:	c3                   	retq   
  2307e9:	cc                   	int3   
  2307ea:	cc                   	int3   
  2307eb:	cc                   	int3   
  2307ec:	cc                   	int3   
  2307ed:	cc                   	int3   
  2307ee:	cc                   	int3   
  2307ef:	cc                   	int3   

00000000002307f0 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>:
    Static(&'static str),
  2307f0:	48 83 ec 10          	sub    $0x10,%rsp
  2307f4:	48 89 f8             	mov    %rdi,%rax
  2307f7:	48 89 34 24          	mov    %rsi,(%rsp)
  2307fb:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  230800:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  230804:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  230808:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  23080f:	48 83 c4 10          	add    $0x10,%rsp
  230813:	c3                   	retq   
  230814:	cc                   	int3   
  230815:	cc                   	int3   
  230816:	cc                   	int3   
  230817:	cc                   	int3   
  230818:	cc                   	int3   
  230819:	cc                   	int3   
  23081a:	cc                   	int3   
  23081b:	cc                   	int3   
  23081c:	cc                   	int3   
  23081d:	cc                   	int3   
  23081e:	cc                   	int3   
  23081f:	cc                   	int3   

0000000000230820 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  230820:	50                   	push   %rax
  230821:	48 89 f8             	mov    %rdi,%rax
  230824:	48 89 34 24          	mov    %rsi,(%rsp)
  230828:	48 8b 0e             	mov    (%rsi),%rcx
  23082b:	48 89 0f             	mov    %rcx,(%rdi)
  23082e:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  230832:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  230836:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  23083a:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  23083e:	59                   	pop    %rcx
  23083f:	c3                   	retq   

0000000000230840 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>:
#[derive(Clone, Debug)]
  230840:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  230847:	48 89 f0             	mov    %rsi,%rax
  23084a:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23084f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230854:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  23085b:	00 
    metadata: Metadata<'a>,
  23085c:	48 89 c6             	mov    %rax,%rsi
  23085f:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  230866:	00 
    args: fmt::Arguments<'a>,
  230867:	48 89 c1             	mov    %rax,%rcx
  23086a:	48 83 c1 18          	add    $0x18,%rcx
  23086e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  230873:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  23087a:	00 
    module_path: Option<MaybeStaticStr<'a>>,
  23087b:	48 89 c1             	mov    %rax,%rcx
  23087e:	48 83 c1 48          	add    $0x48,%rcx
  230882:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  230887:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  23088e:	00 
    file: Option<MaybeStaticStr<'a>>,
  23088f:	48 89 c1             	mov    %rax,%rcx
  230892:	48 83 c1 60          	add    $0x60,%rcx
  230896:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  23089b:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  2308a2:	00 
    line: Option<u32>,
  2308a3:	48 83 c0 78          	add    $0x78,%rax
  2308a7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2308ac:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  2308b3:	00 
    metadata: Metadata<'a>,
  2308b4:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  2308b9:	e8 e2 00 00 00       	callq  2309a0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  2308be:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    args: fmt::Arguments<'a>,
  2308c3:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2308c8:	e8 73 0d 00 00       	callq  231640 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>
  2308cd:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    module_path: Option<MaybeStaticStr<'a>>,
  2308d2:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  2308d9:	00 
  2308da:	e8 21 05 00 00       	callq  230e00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  2308df:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    file: Option<MaybeStaticStr<'a>>,
  2308e4:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  2308eb:	00 
  2308ec:	e8 0f 05 00 00       	callq  230e00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  2308f1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    line: Option<u32>,
  2308f6:	e8 a5 04 00 00       	callq  230da0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>
  2308fb:	89 44 24 08          	mov    %eax,0x8(%rsp)
  2308ff:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  230903:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
#[derive(Clone, Debug)]
  230908:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  23090d:	48 89 07             	mov    %rax,(%rdi)
  230910:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  230915:	48 89 47 08          	mov    %rax,0x8(%rdi)
  230919:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  23091e:	48 89 47 10          	mov    %rax,0x10(%rdi)
  230922:	48 83 c7 18          	add    $0x18,%rdi
  230926:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  23092b:	ba 30 00 00 00       	mov    $0x30,%edx
  230930:	e8 2b 5c 00 00       	callq  236560 <memcpy>
  230935:	8b 74 24 08          	mov    0x8(%rsp),%esi
  230939:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  23093d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  230942:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  230947:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  23094e:	00 
  23094f:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  230953:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  23095a:	00 
  23095b:	48 89 79 50          	mov    %rdi,0x50(%rcx)
  23095f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  230966:	00 
  230967:	48 89 79 58          	mov    %rdi,0x58(%rcx)
  23096b:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  230972:	00 
  230973:	48 89 79 60          	mov    %rdi,0x60(%rcx)
  230977:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  23097e:	00 
  23097f:	48 89 79 68          	mov    %rdi,0x68(%rcx)
  230983:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  23098a:	00 
  23098b:	48 89 79 70          	mov    %rdi,0x70(%rcx)
  23098f:	89 71 78             	mov    %esi,0x78(%rcx)
  230992:	89 51 7c             	mov    %edx,0x7c(%rcx)
  230995:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  23099c:	c3                   	retq   
  23099d:	cc                   	int3   
  23099e:	cc                   	int3   
  23099f:	cc                   	int3   

00000000002309a0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  2309a0:	48 83 ec 48          	sub    $0x48,%rsp
  2309a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2309a9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2309ae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    level: Level,
  2309b3:	48 89 f7             	mov    %rsi,%rdi
  2309b6:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
    target: &'a str,
  2309bb:	48 83 c6 08          	add    $0x8,%rsi
  2309bf:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  2309c4:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
    level: Level,
  2309c9:	e8 a2 f5 ff ff       	callq  22ff70 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>
  2309ce:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2309d3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    target: &'a str,
  2309d8:	e8 03 0e 00 00       	callq  2317e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>
  2309dd:	48 89 04 24          	mov    %rax,(%rsp)
  2309e1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2309e6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2309eb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2309f0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2309f5:	48 8b 34 24          	mov    (%rsp),%rsi
  2309f9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  2309fe:	48 89 39             	mov    %rdi,(%rcx)
  230a01:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  230a05:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  230a09:	48 83 c4 48          	add    $0x48,%rsp
  230a0d:	c3                   	retq   
  230a0e:	cc                   	int3   
  230a0f:	cc                   	int3   

0000000000230a10 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>:
    fn copied<'a, T: 'a>(self) -> Copied<Self>
  230a10:	48 83 ec 28          	sub    $0x28,%rsp
  230a14:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230a19:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Copied::new(self)
  230a1e:	e8 fd 01 00 00       	callq  230c20 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>
  230a23:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230a28:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  230a2d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  230a32:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  230a37:	48 83 c4 28          	add    $0x28,%rsp
  230a3b:	c3                   	retq   
  230a3c:	cc                   	int3   
  230a3d:	cc                   	int3   
  230a3e:	cc                   	int3   
  230a3f:	cc                   	int3   

0000000000230a40 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
  230a40:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  230a47:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  230a4c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  230a51:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  230a56:	e8 25 02 00 00       	callq  230c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  230a5b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  230a60:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  230a65:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            assume(!ptr.is_null());
  230a6a:	e8 01 0e 00 00       	callq  231870 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
            let end = if mem::size_of::<T>() == 0 {
  230a6f:	eb 00                	jmp    230a71 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x31>
  230a71:	b8 01 00 00 00       	mov    $0x1,%eax
  230a76:	48 83 f8 00          	cmp    $0x0,%rax
  230a7a:	75 32                	jne    230aae <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x6e>
  230a7c:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  230a81:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  230a86:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  230a8b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  230a90:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  230a95:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
        unsafe { intrinsics::arith_offset(self, count) }
  230a9a:	48 01 c8             	add    %rcx,%rax
  230a9d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  230aa2:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  230aa7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  230aac:	eb 55                	jmp    230b03 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xc3>
  230aae:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  230ab3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  230ab8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  230abf:	00 
  230ac0:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  230ac7:	00 
  230ac8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  230acf:	00 
  230ad0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  230ad7:	00 
        unsafe { intrinsics::offset(self, count) }
  230ad8:	48 01 c8             	add    %rcx,%rax
  230adb:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  230ae2:	00 
  230ae3:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  230aea:	00 
                ptr.add(slice.len())
  230aeb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  230af0:	eb 00                	jmp    230af2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  230af2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  230af7:	e8 a4 01 00 00       	callq  230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  230afc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230b01:	eb 0c                	jmp    230b0f <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xcf>
  230b03:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  230b08:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  230b0d:	eb e3                	jmp    230af2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  230b0f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  230b14:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  230b19:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  230b1e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    }
  230b23:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  230b28:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  230b2d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  230b34:	c3                   	retq   
  230b35:	cc                   	int3   
  230b36:	cc                   	int3   
  230b37:	cc                   	int3   
  230b38:	cc                   	int3   
  230b39:	cc                   	int3   
  230b3a:	cc                   	int3   
  230b3b:	cc                   	int3   
  230b3c:	cc                   	int3   
  230b3d:	cc                   	int3   
  230b3e:	cc                   	int3   
  230b3f:	cc                   	int3   

0000000000230b40 <_ZN4core3cmp3Ord3min17hb6348d27f3eef709E>:
    fn min(self, other: Self) -> Self
  230b40:	48 83 ec 18          	sub    $0x18,%rsp
  230b44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  230b49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        min_by(self, other, Ord::cmp)
  230b4e:	e8 2d 00 00 00       	callq  230b80 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE>
  230b53:	48 89 04 24          	mov    %rax,(%rsp)
  230b57:	48 8b 04 24          	mov    (%rsp),%rax
    }
  230b5b:	48 83 c4 18          	add    $0x18,%rsp
  230b5f:	c3                   	retq   

0000000000230b60 <_ZN4core3cmp3min17he6f664f09d7a8d9bE>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
  230b60:	48 83 ec 18          	sub    $0x18,%rsp
  230b64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  230b69:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    v1.min(v2)
  230b6e:	e8 cd ff ff ff       	callq  230b40 <_ZN4core3cmp3Ord3min17hb6348d27f3eef709E>
  230b73:	48 89 04 24          	mov    %rax,(%rsp)
  230b77:	48 8b 04 24          	mov    (%rsp),%rax
}
  230b7b:	48 83 c4 18          	add    $0x18,%rsp
  230b7f:	c3                   	retq   

0000000000230b80 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  230b80:	48 83 ec 48          	sub    $0x48,%rsp
  230b84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  230b89:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    match compare(&v1, &v2) {
  230b8e:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  230b93:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  230b98:	c6 44 24 3f 01       	movb   $0x1,0x3f(%rsp)
  230b9d:	c6 44 24 3e 01       	movb   $0x1,0x3e(%rsp)
  230ba2:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  230ba7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  230bac:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  230bb1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  230bb6:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  230bbb:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  230bc0:	e8 8b 0b 00 00       	callq  231750 <_ZN4core3ops8function6FnOnce9call_once17hc43e9fddc4999b9bE>
  230bc5:	88 44 24 27          	mov    %al,0x27(%rsp)
  230bc9:	8a 44 24 27          	mov    0x27(%rsp),%al
  230bcd:	04 01                	add    $0x1,%al
  230bcf:	2c 02                	sub    $0x2,%al
  230bd1:	72 06                	jb     230bd9 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x59>
  230bd3:	eb 00                	jmp    230bd5 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x55>
  230bd5:	eb 13                	jmp    230bea <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x6a>
  230bd7:	0f 0b                	ud2    
        Ordering::Less | Ordering::Equal => v1,
  230bd9:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  230bde:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  230be3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  230be8:	eb 0f                	jmp    230bf9 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x79>
        Ordering::Greater => v2,
  230bea:	c6 44 24 3e 00       	movb   $0x0,0x3e(%rsp)
  230bef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  230bf4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
}
  230bf9:	f6 44 24 3e 01       	testb  $0x1,0x3e(%rsp)
  230bfe:	75 09                	jne    230c09 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x89>
  230c00:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  230c05:	75 0e                	jne    230c15 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x95>
  230c07:	eb 02                	jmp    230c0b <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x8b>
  230c09:	eb f5                	jmp    230c00 <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x80>
  230c0b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  230c10:	48 83 c4 48          	add    $0x48,%rsp
  230c14:	c3                   	retq   
  230c15:	eb f4                	jmp    230c0b <_ZN4core3cmp6min_by17h1fa8c54a643a1fcbE+0x8b>
  230c17:	cc                   	int3   
  230c18:	cc                   	int3   
  230c19:	cc                   	int3   
  230c1a:	cc                   	int3   
  230c1b:	cc                   	int3   
  230c1c:	cc                   	int3   
  230c1d:	cc                   	int3   
  230c1e:	cc                   	int3   
  230c1f:	cc                   	int3   

0000000000230c20 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
  230c20:	48 83 ec 20          	sub    $0x20,%rsp
  230c24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  230c29:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Copied { it }
  230c2e:	48 89 3c 24          	mov    %rdi,(%rsp)
  230c32:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  230c37:	48 8b 04 24          	mov    (%rsp),%rax
  230c3b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  230c40:	48 83 c4 20          	add    $0x20,%rsp
  230c44:	c3                   	retq   
  230c45:	cc                   	int3   
  230c46:	cc                   	int3   
  230c47:	cc                   	int3   
  230c48:	cc                   	int3   
  230c49:	cc                   	int3   
  230c4a:	cc                   	int3   
  230c4b:	cc                   	int3   
  230c4c:	cc                   	int3   
  230c4d:	cc                   	int3   
  230c4e:	cc                   	int3   
  230c4f:	cc                   	int3   

0000000000230c50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>:
    pub fn iter(&self) -> Iter<'_, T> {
  230c50:	48 83 ec 28          	sub    $0x28,%rsp
  230c54:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230c59:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  230c5e:	e8 dd fd ff ff       	callq  230a40 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>
  230c63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230c68:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  230c6d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  230c72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  230c77:	48 83 c4 28          	add    $0x28,%rsp
  230c7b:	c3                   	retq   
  230c7c:	cc                   	int3   
  230c7d:	cc                   	int3   
  230c7e:	cc                   	int3   
  230c7f:	cc                   	int3   

0000000000230c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>:
    pub const fn as_ptr(&self) -> *const T {
  230c80:	48 83 ec 10          	sub    $0x10,%rsp
  230c84:	48 89 f8             	mov    %rdi,%rax
  230c87:	48 89 04 24          	mov    %rax,(%rsp)
  230c8b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  230c90:	48 83 c4 10          	add    $0x10,%rsp
  230c94:	c3                   	retq   
  230c95:	cc                   	int3   
  230c96:	cc                   	int3   
  230c97:	cc                   	int3   
  230c98:	cc                   	int3   
  230c99:	cc                   	int3   
  230c9a:	cc                   	int3   
  230c9b:	cc                   	int3   
  230c9c:	cc                   	int3   
  230c9d:	cc                   	int3   
  230c9e:	cc                   	int3   
  230c9f:	cc                   	int3   

0000000000230ca0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  230ca0:	48 83 ec 10          	sub    $0x10,%rsp
  230ca4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        unsafe { NonNull { pointer: ptr as _ } }
  230ca9:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  230cad:	48 8b 04 24          	mov    (%rsp),%rax
  230cb1:	48 83 c4 10          	add    $0x10,%rsp
  230cb5:	c3                   	retq   
  230cb6:	cc                   	int3   
  230cb7:	cc                   	int3   
  230cb8:	cc                   	int3   
  230cb9:	cc                   	int3   
  230cba:	cc                   	int3   
  230cbb:	cc                   	int3   
  230cbc:	cc                   	int3   
  230cbd:	cc                   	int3   
  230cbe:	cc                   	int3   
  230cbf:	cc                   	int3   

0000000000230cc0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>:
    pub const fn as_ptr(self) -> *mut T {
  230cc0:	50                   	push   %rax
  230cc1:	48 89 f8             	mov    %rdi,%rax
  230cc4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  230cc8:	59                   	pop    %rcx
  230cc9:	c3                   	retq   
  230cca:	cc                   	int3   
  230ccb:	cc                   	int3   
  230ccc:	cc                   	int3   
  230ccd:	cc                   	int3   
  230cce:	cc                   	int3   
  230ccf:	cc                   	int3   

0000000000230cd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>:
    fn into_iter(self) -> I {
  230cd0:	48 83 ec 10          	sub    $0x10,%rsp
  230cd4:	48 89 f2             	mov    %rsi,%rdx
  230cd7:	48 89 f8             	mov    %rdi,%rax
  230cda:	48 89 04 24          	mov    %rax,(%rsp)
  230cde:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  230ce3:	48 83 c4 10          	add    $0x10,%rsp
  230ce7:	c3                   	retq   
  230ce8:	cc                   	int3   
  230ce9:	cc                   	int3   
  230cea:	cc                   	int3   
  230ceb:	cc                   	int3   
  230cec:	cc                   	int3   
  230ced:	cc                   	int3   
  230cee:	cc                   	int3   
  230cef:	cc                   	int3   

0000000000230cf0 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  230cf0:	48 83 ec 68          	sub    $0x68,%rsp
  230cf4:	48 89 3c 24          	mov    %rdi,(%rsp)
  230cf8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  230cfd:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  230d02:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
        match self {
  230d07:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  230d0c:	c6 44 24 4f 01       	movb   $0x1,0x4f(%rsp)
  230d11:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  230d16:	48 85 c0             	test   %rax,%rax
  230d19:	0f 95 c0             	setne  %al
  230d1c:	0f b6 c0             	movzbl %al,%eax
  230d1f:	74 06                	je     230d27 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x37>
  230d21:	eb 00                	jmp    230d23 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x33>
  230d23:	eb 0f                	jmp    230d34 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x44>
  230d25:	0f 0b                	ud2    
  230d27:	48 8b 04 24          	mov    (%rsp),%rax
            None => None,
  230d2b:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  230d32:	eb 55                	jmp    230d89 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x99>
            Some(x) => Some(f(x)),
  230d34:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  230d39:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  230d3e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  230d43:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  230d48:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  230d4d:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  230d52:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  230d57:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  230d5c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  230d61:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  230d66:	e8 b5 09 00 00       	callq  231720 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>
  230d6b:	48 8b 04 24          	mov    (%rsp),%rax
  230d6f:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  230d74:	48 89 08             	mov    %rcx,(%rax)
  230d77:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  230d7c:	48 89 48 08          	mov    %rcx,0x8(%rax)
  230d80:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  230d85:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  230d89:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  230d8e:	75 0a                	jne    230d9a <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xaa>
  230d90:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  230d95:	48 83 c4 68          	add    $0x68,%rsp
  230d99:	c3                   	retq   
  230d9a:	eb f4                	jmp    230d90 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xa0>
  230d9c:	cc                   	int3   
  230d9d:	cc                   	int3   
  230d9e:	cc                   	int3   
  230d9f:	cc                   	int3   

0000000000230da0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>:
/////////////////////////////////////////////////////////////////////////////

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: Clone> Clone for Option<T> {
    #[inline]
    fn clone(&self) -> Self {
  230da0:	48 83 ec 28          	sub    $0x28,%rsp
  230da4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  230da9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  230dae:	8b 07                	mov    (%rdi),%eax
  230db0:	48 85 c0             	test   %rax,%rax
  230db3:	74 06                	je     230dbb <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x1b>
  230db5:	eb 00                	jmp    230db7 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x17>
  230db7:	eb 0c                	jmp    230dc5 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x25>
  230db9:	0f 0b                	ud2    
            Some(x) => Some(x.clone()),
            None => None,
  230dbb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  230dc2:	00 
  230dc3:	eb 27                	jmp    230dec <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x4c>
  230dc5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(x) => Some(x.clone()),
  230dca:	48 83 c7 04          	add    $0x4,%rdi
  230dce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  230dd3:	e8 f8 09 00 00       	callq  2317d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>
  230dd8:	89 44 24 04          	mov    %eax,0x4(%rsp)
  230ddc:	8b 44 24 04          	mov    0x4(%rsp),%eax
  230de0:	89 44 24 14          	mov    %eax,0x14(%rsp)
  230de4:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%rsp)
  230deb:	00 
        }
    }
  230dec:	8b 44 24 10          	mov    0x10(%rsp),%eax
  230df0:	8b 54 24 14          	mov    0x14(%rsp),%edx
  230df4:	48 83 c4 28          	add    $0x28,%rsp
  230df8:	c3                   	retq   
  230df9:	cc                   	int3   
  230dfa:	cc                   	int3   
  230dfb:	cc                   	int3   
  230dfc:	cc                   	int3   
  230dfd:	cc                   	int3   
  230dfe:	cc                   	int3   
  230dff:	cc                   	int3   

0000000000230e00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>:
    fn clone(&self) -> Self {
  230e00:	48 83 ec 48          	sub    $0x48,%rsp
  230e04:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  230e09:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  230e0e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230e13:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        match self {
  230e18:	48 8b 06             	mov    (%rsi),%rax
  230e1b:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  230e1f:	0f 95 c0             	setne  %al
  230e22:	0f b6 c0             	movzbl %al,%eax
  230e25:	74 06                	je     230e2d <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x2d>
  230e27:	eb 00                	jmp    230e29 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x29>
  230e29:	eb 10                	jmp    230e3b <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x3b>
  230e2b:	0f 0b                	ud2    
  230e2d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  230e32:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  230e39:	eb 33                	jmp    230e6e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x6e>
  230e3b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            Some(x) => Some(x.clone()),
  230e40:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  230e45:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  230e4a:	e8 d1 f9 ff ff       	callq  230820 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>
  230e4f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  230e54:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  230e59:	48 89 08             	mov    %rcx,(%rax)
  230e5c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  230e61:	48 89 48 08          	mov    %rcx,0x8(%rax)
  230e65:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  230e6a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  230e6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  230e73:	48 83 c4 48          	add    $0x48,%rsp
  230e77:	c3                   	retq   
  230e78:	cc                   	int3   
  230e79:	cc                   	int3   
  230e7a:	cc                   	int3   
  230e7b:	cc                   	int3   
  230e7c:	cc                   	int3   
  230e7d:	cc                   	int3   
  230e7e:	cc                   	int3   
  230e7f:	cc                   	int3   

0000000000230e80 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>:
            pub fn compare_exchange(&self,
  230e80:	48 83 ec 58          	sub    $0x58,%rsp
  230e84:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  230e89:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  230e8e:	44 88 c0             	mov    %r8b,%al
  230e91:	88 44 24 26          	mov    %al,0x26(%rsp)
  230e95:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  230e99:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  230e9e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  230ea3:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  230ea8:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  230eac:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  230eb0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  230eb5:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  230eba:	8a 44 24 26          	mov    0x26(%rsp),%al
  230ebe:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  230ec2:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  230ec7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  230ecc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  230ed1:	0f b6 c9             	movzbl %cl,%ecx
  230ed4:	44 0f b6 c0          	movzbl %al,%r8d
  230ed8:	e8 13 02 00 00       	callq  2310f0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  230edd:	48 89 04 24          	mov    %rax,(%rsp)
  230ee1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  230ee6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  230eeb:	48 8b 04 24          	mov    (%rsp),%rax
            }
  230eef:	48 83 c4 58          	add    $0x58,%rsp
  230ef3:	c3                   	retq   
  230ef4:	cc                   	int3   
  230ef5:	cc                   	int3   
  230ef6:	cc                   	int3   
  230ef7:	cc                   	int3   
  230ef8:	cc                   	int3   
  230ef9:	cc                   	int3   
  230efa:	cc                   	int3   
  230efb:	cc                   	int3   
  230efc:	cc                   	int3   
  230efd:	cc                   	int3   
  230efe:	cc                   	int3   
  230eff:	cc                   	int3   

0000000000230f00 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  230f00:	48 83 ec 38          	sub    $0x38,%rsp
  230f04:	40 88 f0             	mov    %sil,%al
  230f07:	88 44 24 17          	mov    %al,0x17(%rsp)
  230f0b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  230f10:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  230f14:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230f19:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  230f1e:	8a 44 24 17          	mov    0x17(%rsp),%al
  230f22:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  230f27:	0f b6 f0             	movzbl %al,%esi
  230f2a:	e8 51 00 00 00       	callq  230f80 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  230f2f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230f34:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  230f39:	48 83 c4 38          	add    $0x38,%rsp
  230f3d:	c3                   	retq   
  230f3e:	cc                   	int3   
  230f3f:	cc                   	int3   

0000000000230f40 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  230f40:	48 83 ec 38          	sub    $0x38,%rsp
  230f44:	48 89 34 24          	mov    %rsi,(%rsp)
  230f48:	88 d0                	mov    %dl,%al
  230f4a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  230f4e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  230f53:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  230f58:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  230f5c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  230f61:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  230f66:	8a 44 24 0f          	mov    0xf(%rsp),%al
  230f6a:	48 8b 34 24          	mov    (%rsp),%rsi
  230f6e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  230f73:	0f b6 d0             	movzbl %al,%edx
  230f76:	e8 b5 00 00 00       	callq  231030 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  230f7b:	48 83 c4 38          	add    $0x38,%rsp
  230f7f:	c3                   	retq   

0000000000230f80 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  230f80:	48 83 ec 28          	sub    $0x28,%rsp
  230f84:	48 89 3c 24          	mov    %rdi,(%rsp)
  230f88:	40 88 f0             	mov    %sil,%al
  230f8b:	88 44 24 17          	mov    %al,0x17(%rsp)
  230f8f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  230f94:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  230f99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  230f9e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  230fa3:	48 8d 0d ce 2d fd ff 	lea    -0x2d232(%rip),%rcx        # 203d78 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1>
  230faa:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  230fae:	48 01 c8             	add    %rcx,%rax
  230fb1:	ff e0                	jmpq   *%rax
  230fb3:	0f 0b                	ud2    
  230fb5:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  230fb9:	48 8b 00             	mov    (%rax),%rax
  230fbc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  230fc1:	eb 5c                	jmp    23101f <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  230fc3:	48 8d 3d 93 2e fd ff 	lea    -0x2d16d(%rip),%rdi        # 203e5d <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0xe6>
  230fca:	48 8d 15 df 9b 00 00 	lea    0x9bdf(%rip),%rdx        # 23abb0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x90>
  230fd1:	be 28 00 00 00       	mov    $0x28,%esi
  230fd6:	e8 85 24 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  230fdb:	0f 0b                	ud2    
  230fdd:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  230fe1:	48 8b 00             	mov    (%rax),%rax
  230fe4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  230fe9:	eb 32                	jmp    23101d <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  230feb:	48 8d 3d c2 2d fd ff 	lea    -0x2d23e(%rip),%rdi        # 203db4 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x3d>
  230ff2:	48 8d 15 9f 9b 00 00 	lea    0x9b9f(%rip),%rdx        # 23ab98 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x78>
  230ff9:	be 31 00 00 00       	mov    $0x31,%esi
  230ffe:	e8 5d 24 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231003:	0f 0b                	ud2    
  231005:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  231009:	48 8b 00             	mov    (%rax),%rax
  23100c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231011:	eb 00                	jmp    231013 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
}
  231013:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231018:	48 83 c4 28          	add    $0x28,%rsp
  23101c:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  23101d:	eb f4                	jmp    231013 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  23101f:	eb f2                	jmp    231013 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
  231021:	cc                   	int3   
  231022:	cc                   	int3   
  231023:	cc                   	int3   
  231024:	cc                   	int3   
  231025:	cc                   	int3   
  231026:	cc                   	int3   
  231027:	cc                   	int3   
  231028:	cc                   	int3   
  231029:	cc                   	int3   
  23102a:	cc                   	int3   
  23102b:	cc                   	int3   
  23102c:	cc                   	int3   
  23102d:	cc                   	int3   
  23102e:	cc                   	int3   
  23102f:	cc                   	int3   

0000000000231030 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  231030:	48 83 ec 38          	sub    $0x38,%rsp
  231034:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  231039:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23103e:	88 d0                	mov    %dl,%al
  231040:	88 44 24 27          	mov    %al,0x27(%rsp)
  231044:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  231049:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  23104e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  231053:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231058:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23105d:	48 8d 0d 28 2d fd ff 	lea    -0x2d2d8(%rip),%rcx        # 203d8c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x15>
  231064:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  231068:	48 01 c8             	add    %rcx,%rax
  23106b:	ff e0                	jmpq   *%rax
  23106d:	0f 0b                	ud2    
  23106f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  231074:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  231079:	48 89 08             	mov    %rcx,(%rax)
  23107c:	eb 59                	jmp    2310d7 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa7>
  23107e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  231083:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  231088:	48 89 08             	mov    %rcx,(%rax)
  23108b:	eb 48                	jmp    2310d5 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  23108d:	48 8d 3d 23 2e fd ff 	lea    -0x2d1dd(%rip),%rdi        # 203eb7 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x140>
  231094:	48 8d 15 45 9b 00 00 	lea    0x9b45(%rip),%rdx        # 23abe0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xc0>
  23109b:	be 2a 00 00 00       	mov    $0x2a,%esi
  2310a0:	e8 bb 23 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2310a5:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  2310a7:	48 8d 3d d7 2d fd ff 	lea    -0x2d229(%rip),%rdi        # 203e85 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x10e>
  2310ae:	48 8d 15 13 9b 00 00 	lea    0x9b13(%rip),%rdx        # 23abc8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xa8>
  2310b5:	be 32 00 00 00       	mov    $0x32,%esi
  2310ba:	e8 a1 23 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2310bf:	0f 0b                	ud2    
  2310c1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2310c6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  2310cb:	48 87 01             	xchg   %rax,(%rcx)
  2310ce:	eb 00                	jmp    2310d0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
}
  2310d0:	48 83 c4 38          	add    $0x38,%rsp
  2310d4:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  2310d5:	eb f9                	jmp    2310d0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  2310d7:	eb f7                	jmp    2310d0 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
  2310d9:	cc                   	int3   
  2310da:	cc                   	int3   
  2310db:	cc                   	int3   
  2310dc:	cc                   	int3   
  2310dd:	cc                   	int3   
  2310de:	cc                   	int3   
  2310df:	cc                   	int3   

00000000002310e0 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>:
pub fn spin_loop_hint() {
  2310e0:	50                   	push   %rax
    spin_loop()
  2310e1:	e8 da 06 00 00       	callq  2317c0 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>
}
  2310e6:	58                   	pop    %rax
  2310e7:	c3                   	retq   
  2310e8:	cc                   	int3   
  2310e9:	cc                   	int3   
  2310ea:	cc                   	int3   
  2310eb:	cc                   	int3   
  2310ec:	cc                   	int3   
  2310ed:	cc                   	int3   
  2310ee:	cc                   	int3   
  2310ef:	cc                   	int3   

00000000002310f0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  2310f0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  2310f7:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2310fc:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  231101:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  231106:	44 88 c0             	mov    %r8b,%al
  231109:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  23110e:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  231115:	00 
  231116:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  23111d:	00 
  23111e:	88 8c 24 96 00 00 00 	mov    %cl,0x96(%rsp)
  231125:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
        match (success, failure) {
  23112c:	88 4c 24 70          	mov    %cl,0x70(%rsp)
  231130:	88 44 24 71          	mov    %al,0x71(%rsp)
  231134:	0f b6 44 24 70       	movzbl 0x70(%rsp),%eax
  231139:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  23113e:	48 83 e8 04          	sub    $0x4,%rax
  231142:	77 15                	ja     231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  231144:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  231149:	48 8d 0d 50 2c fd ff 	lea    -0x2d3b0(%rip),%rcx        # 203da0 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x29>
  231150:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  231154:	48 01 c8             	add    %rcx,%rax
  231157:	ff e0                	jmpq   *%rax
  231159:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  23115e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231163:	48 83 e8 01          	sub    $0x1,%rax
  231167:	0f 84 74 02 00 00    	je     2313e1 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2f1>
  23116d:	eb 00                	jmp    23116f <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x7f>
  23116f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  231174:	48 83 e8 03          	sub    $0x3,%rax
  231178:	0f 84 7d 02 00 00    	je     2313fb <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x30b>
  23117e:	e9 44 02 00 00       	jmpq   2313c7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2d7>
  231183:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  231188:	48 83 f8 00          	cmp    $0x0,%rax
  23118c:	0f 84 0e 02 00 00    	je     2313a0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2b0>
  231192:	eb c5                	jmp    231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  231194:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  231199:	48 83 f8 00          	cmp    $0x0,%rax
  23119d:	0f 84 d3 01 00 00    	je     231376 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x286>
  2311a3:	eb b4                	jmp    231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2311a5:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2311aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2311af:	48 85 c0             	test   %rax,%rax
  2311b2:	0f 84 68 01 00 00    	je     231320 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x230>
  2311b8:	eb 00                	jmp    2311ba <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xca>
  2311ba:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2311bf:	48 83 e8 02          	sub    $0x2,%rax
  2311c3:	0f 84 7e 01 00 00    	je     231347 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x257>
  2311c9:	eb 8e                	jmp    231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2311cb:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2311d0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2311d5:	48 85 c0             	test   %rax,%rax
  2311d8:	0f 84 ec 00 00 00    	je     2312ca <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1da>
  2311de:	eb 00                	jmp    2311e0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xf0>
  2311e0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2311e5:	48 83 e8 02          	sub    $0x2,%rax
  2311e9:	0f 84 02 01 00 00    	je     2312f1 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x201>
  2311ef:	e9 65 ff ff ff       	jmpq   231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  2311f4:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  2311f9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2311fe:	48 85 c0             	test   %rax,%rax
  231201:	74 1f                	je     231222 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x132>
  231203:	eb 00                	jmp    231205 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x115>
  231205:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23120a:	48 83 e8 02          	sub    $0x2,%rax
  23120e:	74 39                	je     231249 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x159>
  231210:	eb 00                	jmp    231212 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x122>
  231212:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  231217:	48 83 e8 04          	sub    $0x4,%rax
  23121b:	74 53                	je     231270 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x180>
  23121d:	e9 37 ff ff ff       	jmpq   231159 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  231222:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  231227:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  23122c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  231231:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  231236:	48 89 c1             	mov    %rax,%rcx
  231239:	0f 94 c0             	sete   %al
  23123c:	24 01                	and    $0x1,%al
  23123e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231243:	88 44 24 68          	mov    %al,0x68(%rsp)
  231247:	eb 7f                	jmp    2312c8 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d8>
  231249:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  23124e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  231253:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  231258:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  23125d:	48 89 c1             	mov    %rax,%rcx
  231260:	0f 94 c0             	sete   %al
  231263:	24 01                	and    $0x1,%al
  231265:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  23126a:	88 44 24 68          	mov    %al,0x68(%rsp)
  23126e:	eb 56                	jmp    2312c6 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d6>
  231270:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  231275:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  23127a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  23127f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  231284:	48 89 c1             	mov    %rax,%rcx
  231287:	0f 94 c0             	sete   %al
  23128a:	24 01                	and    $0x1,%al
  23128c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231291:	88 44 24 68          	mov    %al,0x68(%rsp)
  231295:	eb 00                	jmp    231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
    let (val, ok) = unsafe {
  231297:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  23129c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2312a1:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2312a8:	00 
  2312a9:	8a 44 24 68          	mov    0x68(%rsp),%al
  2312ad:	88 c1                	mov    %al,%cl
  2312af:	80 e1 01             	and    $0x1,%cl
  2312b2:	88 8c 24 a7 00 00 00 	mov    %cl,0xa7(%rsp)
    if ok { Ok(val) } else { Err(val) }
  2312b9:	a8 01                	test   $0x1,%al
  2312bb:	0f 85 6e 01 00 00    	jne    23142f <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x33f>
  2312c1:	e9 54 01 00 00       	jmpq   23141a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x32a>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  2312c6:	eb cf                	jmp    231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  2312c8:	eb cd                	jmp    231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  2312ca:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2312cf:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2312d4:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  2312d9:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2312de:	48 89 c1             	mov    %rax,%rcx
  2312e1:	0f 94 c0             	sete   %al
  2312e4:	24 01                	and    $0x1,%al
  2312e6:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2312eb:	88 44 24 68          	mov    %al,0x68(%rsp)
  2312ef:	eb 2a                	jmp    23131b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x22b>
  2312f1:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2312f6:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2312fb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  231300:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  231305:	48 89 c1             	mov    %rax,%rcx
  231308:	0f 94 c0             	sete   %al
  23130b:	24 01                	and    $0x1,%al
  23130d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231312:	88 44 24 68          	mov    %al,0x68(%rsp)
  231316:	e9 7c ff ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  23131b:	e9 77 ff ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  231320:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  231325:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  23132a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  23132f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  231334:	48 89 c1             	mov    %rax,%rcx
  231337:	0f 94 c0             	sete   %al
  23133a:	24 01                	and    $0x1,%al
  23133c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231341:	88 44 24 68          	mov    %al,0x68(%rsp)
  231345:	eb 2a                	jmp    231371 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x281>
  231347:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  23134c:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  231351:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  231356:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  23135b:	48 89 c1             	mov    %rax,%rcx
  23135e:	0f 94 c0             	sete   %al
  231361:	24 01                	and    $0x1,%al
  231363:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231368:	88 44 24 68          	mov    %al,0x68(%rsp)
  23136c:	e9 26 ff ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  231371:	e9 21 ff ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  231376:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  23137b:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  231380:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  231385:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  23138a:	48 89 c1             	mov    %rax,%rcx
  23138d:	0f 94 c0             	sete   %al
  231390:	24 01                	and    $0x1,%al
  231392:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  231397:	88 44 24 68          	mov    %al,0x68(%rsp)
  23139b:	e9 f7 fe ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  2313a0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2313a5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2313aa:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  2313af:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  2313b4:	48 89 c1             	mov    %rax,%rcx
  2313b7:	0f 94 c0             	sete   %al
  2313ba:	24 01                	and    $0x1,%al
  2313bc:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  2313c1:	88 44 24 68          	mov    %al,0x68(%rsp)
  2313c5:	eb 4e                	jmp    231415 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x325>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  2313c7:	48 8d 3d 13 2b fd ff 	lea    -0x2d4ed(%rip),%rdi        # 203ee1 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x16a>
  2313ce:	48 8d 15 23 98 00 00 	lea    0x9823(%rip),%rdx        # 23abf8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xd8>
  2313d5:	be 3c 00 00 00       	mov    $0x3c,%esi
  2313da:	e8 81 20 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2313df:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  2313e1:	48 8d 3d 72 2b fd ff 	lea    -0x2d48e(%rip),%rdi        # 203f5a <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1e3>
  2313e8:	48 8d 15 39 98 00 00 	lea    0x9839(%rip),%rdx        # 23ac28 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x108>
  2313ef:	be 34 00 00 00       	mov    $0x34,%esi
  2313f4:	e8 67 20 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2313f9:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  2313fb:	48 8d 3d 1b 2b fd ff 	lea    -0x2d4e5(%rip),%rdi        # 203f1d <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1a6>
  231402:	48 8d 15 07 98 00 00 	lea    0x9807(%rip),%rdx        # 23ac10 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xf0>
  231409:	be 3d 00 00 00       	mov    $0x3d,%esi
  23140e:	e8 4d 20 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231413:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  231415:	e9 7d fe ff ff       	jmpq   231297 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  23141a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    if ok { Ok(val) } else { Err(val) }
  23141f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  231424:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  23142b:	00 00 
  23142d:	eb 13                	jmp    231442 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x352>
  23142f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231434:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  231439:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  231440:	00 00 
}
  231442:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  231447:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  23144c:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  231453:	c3                   	retq   
  231454:	cc                   	int3   
  231455:	cc                   	int3   
  231456:	cc                   	int3   
  231457:	cc                   	int3   
  231458:	cc                   	int3   
  231459:	cc                   	int3   
  23145a:	cc                   	int3   
  23145b:	cc                   	int3   
  23145c:	cc                   	int3   
  23145d:	cc                   	int3   
  23145e:	cc                   	int3   
  23145f:	cc                   	int3   

0000000000231460 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3fa8054ddf20da4cE>:
  231460:	48 83 ec 18          	sub    $0x18,%rsp
  231464:	48 89 f2             	mov    %rsi,%rdx
  231467:	48 89 f8             	mov    %rdi,%rax
  23146a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23146f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  231474:	48 8b 38             	mov    (%rax),%rdi
  231477:	48 8b 70 08          	mov    0x8(%rax),%rsi
  23147b:	e8 b0 43 00 00       	callq  235830 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>
  231480:	88 44 24 07          	mov    %al,0x7(%rsp)
  231484:	8a 44 24 07          	mov    0x7(%rsp),%al
  231488:	24 01                	and    $0x1,%al
  23148a:	0f b6 c0             	movzbl %al,%eax
  23148d:	48 83 c4 18          	add    $0x18,%rsp
  231491:	c3                   	retq   
  231492:	cc                   	int3   
  231493:	cc                   	int3   
  231494:	cc                   	int3   
  231495:	cc                   	int3   
  231496:	cc                   	int3   
  231497:	cc                   	int3   
  231498:	cc                   	int3   
  231499:	cc                   	int3   
  23149a:	cc                   	int3   
  23149b:	cc                   	int3   
  23149c:	cc                   	int3   
  23149d:	cc                   	int3   
  23149e:	cc                   	int3   
  23149f:	cc                   	int3   

00000000002314a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa69829319a95313E>:
  2314a0:	48 83 ec 18          	sub    $0x18,%rsp
  2314a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2314a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2314ae:	48 8b 3f             	mov    (%rdi),%rdi
  2314b1:	e8 ba 01 00 00       	callq  231670 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE>
  2314b6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2314ba:	8a 44 24 07          	mov    0x7(%rsp),%al
  2314be:	24 01                	and    $0x1,%al
  2314c0:	0f b6 c0             	movzbl %al,%eax
  2314c3:	48 83 c4 18          	add    $0x18,%rsp
  2314c7:	c3                   	retq   
  2314c8:	cc                   	int3   
  2314c9:	cc                   	int3   
  2314ca:	cc                   	int3   
  2314cb:	cc                   	int3   
  2314cc:	cc                   	int3   
  2314cd:	cc                   	int3   
  2314ce:	cc                   	int3   
  2314cf:	cc                   	int3   

00000000002314d0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h72ffccc9870a62adE>:
  2314d0:	48 83 ec 18          	sub    $0x18,%rsp
  2314d4:	48 89 f2             	mov    %rsi,%rdx
  2314d7:	48 89 f8             	mov    %rdi,%rax
  2314da:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2314df:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2314e4:	48 8b 38             	mov    (%rax),%rdi
  2314e7:	48 8b 70 08          	mov    0x8(%rax),%rsi
  2314eb:	e8 00 49 00 00       	callq  235df0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>
  2314f0:	88 44 24 07          	mov    %al,0x7(%rsp)
  2314f4:	8a 44 24 07          	mov    0x7(%rsp),%al
  2314f8:	24 01                	and    $0x1,%al
  2314fa:	0f b6 c0             	movzbl %al,%eax
  2314fd:	48 83 c4 18          	add    $0x18,%rsp
  231501:	c3                   	retq   
  231502:	cc                   	int3   
  231503:	cc                   	int3   
  231504:	cc                   	int3   
  231505:	cc                   	int3   
  231506:	cc                   	int3   
  231507:	cc                   	int3   
  231508:	cc                   	int3   
  231509:	cc                   	int3   
  23150a:	cc                   	int3   
  23150b:	cc                   	int3   
  23150c:	cc                   	int3   
  23150d:	cc                   	int3   
  23150e:	cc                   	int3   
  23150f:	cc                   	int3   

0000000000231510 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  231510:	48 83 ec 48          	sub    $0x48,%rsp
  231514:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231519:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  23151e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  231523:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  231528:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  23152d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  231532:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231537:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23153c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  231541:	48 89 04 24          	mov    %rax,(%rsp)
  231545:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23154a:	48 8b 0c 24          	mov    (%rsp),%rcx
  23154e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  231553:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  231558:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23155d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  231562:	48 83 c4 48          	add    $0x48,%rsp
  231566:	c3                   	retq   
  231567:	cc                   	int3   
  231568:	cc                   	int3   
  231569:	cc                   	int3   
  23156a:	cc                   	int3   
  23156b:	cc                   	int3   
  23156c:	cc                   	int3   
  23156d:	cc                   	int3   
  23156e:	cc                   	int3   
  23156f:	cc                   	int3   

0000000000231570 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  231570:	48 83 ec 68          	sub    $0x68,%rsp
  231574:	4c 89 04 24          	mov    %r8,(%rsp)
  231578:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  23157d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  231582:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  231587:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  23158c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  231591:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  231596:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  23159b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2315a0:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  2315a5:	4c 39 c2             	cmp    %r8,%rdx
  2315a8:	72 1b                	jb     2315c5 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x55>
  2315aa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2315af:	48 8b 0c 24          	mov    (%rsp),%rcx
  2315b3:	48 83 c1 01          	add    $0x1,%rcx
  2315b7:	48 39 c8             	cmp    %rcx,%rax
  2315ba:	0f 97 c0             	seta   %al
  2315bd:	24 01                	and    $0x1,%al
  2315bf:	88 44 24 37          	mov    %al,0x37(%rsp)
  2315c3:	eb 05                	jmp    2315ca <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x5a>
  2315c5:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  2315ca:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  2315cf:	75 4c                	jne    23161d <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0xad>
  2315d1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2315d6:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2315db:	48 8b 14 24          	mov    (%rsp),%rdx
  2315df:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2315e4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2315e9:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  2315ee:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  2315f5:	00 00 
  2315f7:	4c 89 01             	mov    %r8,(%rcx)
  2315fa:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  2315fe:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  231603:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  231608:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  23160c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  231610:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  231614:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  231618:	48 83 c4 68          	add    $0x68,%rsp
  23161c:	c3                   	retq   
            panic!("invalid args");
  23161d:	48 8d 3d 6a 29 fd ff 	lea    -0x2d696(%rip),%rdi        # 203f8e <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x217>
  231624:	48 8d 15 15 96 00 00 	lea    0x9615(%rip),%rdx        # 23ac40 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x120>
  23162b:	be 0c 00 00 00       	mov    $0xc,%esi
  231630:	e8 2b 1e 00 00       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  231635:	0f 0b                	ud2    
  231637:	cc                   	int3   
  231638:	cc                   	int3   
  231639:	cc                   	int3   
  23163a:	cc                   	int3   
  23163b:	cc                   	int3   
  23163c:	cc                   	int3   
  23163d:	cc                   	int3   
  23163e:	cc                   	int3   
  23163f:	cc                   	int3   

0000000000231640 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>:
#[derive(Copy, Clone)]
  231640:	48 83 ec 18          	sub    $0x18,%rsp
  231644:	48 89 f8             	mov    %rdi,%rax
  231647:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23164c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231651:	ba 30 00 00 00       	mov    $0x30,%edx
  231656:	e8 05 4f 00 00       	callq  236560 <memcpy>
  23165b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231660:	48 83 c4 18          	add    $0x18,%rsp
  231664:	c3                   	retq   
  231665:	cc                   	int3   
  231666:	cc                   	int3   
  231667:	cc                   	int3   
  231668:	cc                   	int3   
  231669:	cc                   	int3   
  23166a:	cc                   	int3   
  23166b:	cc                   	int3   
  23166c:	cc                   	int3   
  23166d:	cc                   	int3   
  23166e:	cc                   	int3   
  23166f:	cc                   	int3   

0000000000231670 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231670:	48 83 ec 38          	sub    $0x38,%rsp
  231674:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231679:	48 89 f8             	mov    %rdi,%rax
  23167c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231681:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231686:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23168b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  231690:	e8 bb 40 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  231695:	88 44 24 26          	mov    %al,0x26(%rsp)
  231699:	8a 44 24 26          	mov    0x26(%rsp),%al
  23169d:	a8 01                	test   $0x1,%al
  23169f:	75 12                	jne    2316b3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x43>
  2316a1:	eb 00                	jmp    2316a3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x33>
  2316a3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  2316a8:	e8 b3 40 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  2316ad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2316b1:	eb 25                	jmp    2316d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x68>
  2316b3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2316b8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  2316bd:	e8 5e 0f 00 00       	callq  232620 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  2316c2:	24 01                	and    $0x1,%al
  2316c4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  2316c8:	eb 00                	jmp    2316ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x5a>
            }
  2316ca:	8a 44 24 27          	mov    0x27(%rsp),%al
  2316ce:	24 01                	and    $0x1,%al
  2316d0:	0f b6 c0             	movzbl %al,%eax
  2316d3:	48 83 c4 38          	add    $0x38,%rsp
  2316d7:	c3                   	retq   
  2316d8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  2316dc:	a8 01                	test   $0x1,%al
  2316de:	75 19                	jne    2316f9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x89>
  2316e0:	eb 00                	jmp    2316e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x72>
  2316e2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2316e7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  2316ec:	e8 4f 2d 00 00       	callq  234440 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  2316f1:	24 01                	and    $0x1,%al
  2316f3:	88 44 24 27          	mov    %al,0x27(%rsp)
  2316f7:	eb 19                	jmp    231712 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa2>
  2316f9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2316fe:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231703:	e8 a8 0f 00 00       	callq  2326b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  231708:	24 01                	and    $0x1,%al
  23170a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  23170e:	eb 00                	jmp    231710 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa0>
                if f.debug_lower_hex() {
  231710:	eb b8                	jmp    2316ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0x5a>
                } else if f.debug_upper_hex() {
  231712:	eb fc                	jmp    231710 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h9ba903954ca540aaE+0xa0>
  231714:	cc                   	int3   
  231715:	cc                   	int3   
  231716:	cc                   	int3   
  231717:	cc                   	int3   
  231718:	cc                   	int3   
  231719:	cc                   	int3   
  23171a:	cc                   	int3   
  23171b:	cc                   	int3   
  23171c:	cc                   	int3   
  23171d:	cc                   	int3   
  23171e:	cc                   	int3   
  23171f:	cc                   	int3   

0000000000231720 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>:
  231720:	48 83 ec 28          	sub    $0x28,%rsp
  231724:	48 89 f8             	mov    %rdi,%rax
  231727:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23172c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231731:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  231736:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  23173b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  231740:	e8 ab f0 ff ff       	callq  2307f0 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>
  231745:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23174a:	48 83 c4 28          	add    $0x28,%rsp
  23174e:	c3                   	retq   
  23174f:	cc                   	int3   

0000000000231750 <_ZN4core3ops8function6FnOnce9call_once17hc43e9fddc4999b9bE>:
  231750:	48 83 ec 28          	sub    $0x28,%rsp
  231754:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231759:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  23175e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231763:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  231768:	e8 83 00 00 00       	callq  2317f0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE>
  23176d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231771:	8a 44 24 0f          	mov    0xf(%rsp),%al
  231775:	48 83 c4 28          	add    $0x28,%rsp
  231779:	c3                   	retq   
  23177a:	cc                   	int3   
  23177b:	cc                   	int3   
  23177c:	cc                   	int3   
  23177d:	cc                   	int3   
  23177e:	cc                   	int3   
  23177f:	cc                   	int3   

0000000000231780 <_ZN4core3ptr35drop_in_place$LT$log..NopLogger$GT$17heb548e4daff7e4f7E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  231780:	50                   	push   %rax
  231781:	48 89 3c 24          	mov    %rdi,(%rsp)
  231785:	58                   	pop    %rax
  231786:	c3                   	retq   
  231787:	cc                   	int3   
  231788:	cc                   	int3   
  231789:	cc                   	int3   
  23178a:	cc                   	int3   
  23178b:	cc                   	int3   
  23178c:	cc                   	int3   
  23178d:	cc                   	int3   
  23178e:	cc                   	int3   
  23178f:	cc                   	int3   

0000000000231790 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  231790:	48 83 ec 20          	sub    $0x20,%rsp
  231794:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231799:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  23179e:	48 39 f7             	cmp    %rsi,%rdi
  2317a1:	0f 94 c0             	sete   %al
  2317a4:	24 01                	and    $0x1,%al
  2317a6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  2317aa:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  2317ae:	88 44 24 07          	mov    %al,0x7(%rsp)
  2317b2:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  2317b6:	24 01                	and    $0x1,%al
  2317b8:	0f b6 c0             	movzbl %al,%eax
  2317bb:	48 83 c4 20          	add    $0x20,%rsp
  2317bf:	c3                   	retq   

00000000002317c0 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>:
  2317c0:	c3                   	retq   
  2317c1:	cc                   	int3   
  2317c2:	cc                   	int3   
  2317c3:	cc                   	int3   
  2317c4:	cc                   	int3   
  2317c5:	cc                   	int3   
  2317c6:	cc                   	int3   
  2317c7:	cc                   	int3   
  2317c8:	cc                   	int3   
  2317c9:	cc                   	int3   
  2317ca:	cc                   	int3   
  2317cb:	cc                   	int3   
  2317cc:	cc                   	int3   
  2317cd:	cc                   	int3   
  2317ce:	cc                   	int3   
  2317cf:	cc                   	int3   

00000000002317d0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>:
                    fn clone(&self) -> Self {
  2317d0:	50                   	push   %rax
  2317d1:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  2317d5:	8b 07                	mov    (%rdi),%eax
                    }
  2317d7:	59                   	pop    %rcx
  2317d8:	c3                   	retq   
  2317d9:	cc                   	int3   
  2317da:	cc                   	int3   
  2317db:	cc                   	int3   
  2317dc:	cc                   	int3   
  2317dd:	cc                   	int3   
  2317de:	cc                   	int3   
  2317df:	cc                   	int3   

00000000002317e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>:
    /// Shared references can be cloned, but mutable references *cannot*!
    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for &T {
        #[inline]
        #[rustc_diagnostic_item = "noop_method_clone"]
        fn clone(&self) -> Self {
  2317e0:	50                   	push   %rax
  2317e1:	48 89 3c 24          	mov    %rdi,(%rsp)
            *self
  2317e5:	48 8b 07             	mov    (%rdi),%rax
  2317e8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
        }
  2317ec:	59                   	pop    %rcx
  2317ed:	c3                   	retq   
  2317ee:	cc                   	int3   
  2317ef:	cc                   	int3   

00000000002317f0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE>:
                fn cmp(&self, other: &$t) -> Ordering {
  2317f0:	48 83 ec 28          	sub    $0x28,%rsp
  2317f4:	48 89 34 24          	mov    %rsi,(%rsp)
  2317f8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2317fd:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  231802:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
                    if *self < *other { Less }
  231807:	48 8b 07             	mov    (%rdi),%rax
  23180a:	48 3b 06             	cmp    (%rsi),%rax
  23180d:	72 13                	jb     231822 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x32>
  23180f:	48 8b 0c 24          	mov    (%rsp),%rcx
  231813:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
                    else if *self == *other { Equal }
  231818:	48 8b 00             	mov    (%rax),%rax
  23181b:	48 3b 01             	cmp    (%rcx),%rax
  23181e:	74 17                	je     231837 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x47>
  231820:	eb 0e                	jmp    231830 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x40>
                    if *self < *other { Less }
  231822:	c6 44 24 17 ff       	movb   $0xff,0x17(%rsp)
                }
  231827:	8a 44 24 17          	mov    0x17(%rsp),%al
  23182b:	48 83 c4 28          	add    $0x28,%rsp
  23182f:	c3                   	retq   
                    else { Greater }
  231830:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
                    else if *self == *other { Equal }
  231835:	eb 05                	jmp    23183c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x4c>
  231837:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
                    if *self < *other { Less }
  23183c:	eb e9                	jmp    231827 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h7c839ceea9da568eE+0x37>
  23183e:	cc                   	int3   
  23183f:	cc                   	int3   

0000000000231840 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *const T) -> bool
  231840:	48 83 ec 20          	sub    $0x20,%rsp
  231844:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231849:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self, other)
  23184e:	48 39 f7             	cmp    %rsi,%rdi
  231851:	0f 94 c0             	sete   %al
  231854:	24 01                	and    $0x1,%al
  231856:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  23185a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  23185e:	88 44 24 07          	mov    %al,0x7(%rsp)
  231862:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  231866:	24 01                	and    $0x1,%al
  231868:	0f b6 c0             	movzbl %al,%eax
  23186b:	48 83 c4 20          	add    $0x20,%rsp
  23186f:	c3                   	retq   

0000000000231870 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>:
    pub const fn is_null(self) -> bool {
  231870:	48 83 ec 18          	sub    $0x18,%rsp
  231874:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231879:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  23187e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  231883:	31 c0                	xor    %eax,%eax
  231885:	89 c6                	mov    %eax,%esi
  231887:	e8 b4 ff ff ff       	callq  231840 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  23188c:	88 44 24 07          	mov    %al,0x7(%rsp)
  231890:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  231894:	24 01                	and    $0x1,%al
  231896:	0f b6 c0             	movzbl %al,%eax
  231899:	48 83 c4 18          	add    $0x18,%rsp
  23189d:	c3                   	retq   
  23189e:	cc                   	int3   
  23189f:	cc                   	int3   

00000000002318a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a0f9f2c6a34554E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  2318a0:	48 83 ec 18          	sub    $0x18,%rsp
  2318a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2318a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2318ae:	48 8b 3f             	mov    (%rdi),%rdi
  2318b1:	e8 7a 08 00 00       	callq  232130 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>
  2318b6:	88 44 24 07          	mov    %al,0x7(%rsp)
  2318ba:	8a 44 24 07          	mov    0x7(%rsp),%al
  2318be:	24 01                	and    $0x1,%al
  2318c0:	0f b6 c0             	movzbl %al,%eax
  2318c3:	48 83 c4 18          	add    $0x18,%rsp
  2318c7:	c3                   	retq   
  2318c8:	cc                   	int3   
  2318c9:	cc                   	int3   
  2318ca:	cc                   	int3   
  2318cb:	cc                   	int3   
  2318cc:	cc                   	int3   
  2318cd:	cc                   	int3   
  2318ce:	cc                   	int3   
  2318cf:	cc                   	int3   

00000000002318d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>:
    pub const fn cast<U>(self) -> *const U {
  2318d0:	50                   	push   %rax
  2318d1:	48 89 f8             	mov    %rdi,%rax
  2318d4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  2318d8:	59                   	pop    %rcx
  2318d9:	c3                   	retq   
  2318da:	cc                   	int3   
  2318db:	cc                   	int3   
  2318dc:	cc                   	int3   
  2318dd:	cc                   	int3   
  2318de:	cc                   	int3   
  2318df:	cc                   	int3   

00000000002318e0 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  2318e0:	48 83 ec 68          	sub    $0x68,%rsp
  2318e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2318e9:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  2318ee:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  2318f3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2318f8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2318fd:	8b 00                	mov    (%rax),%eax
  2318ff:	48 85 c0             	test   %rax,%rax
  231902:	74 06                	je     23190a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x2a>
  231904:	eb 00                	jmp    231906 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x26>
  231906:	eb 32                	jmp    23193a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x5a>
  231908:	0f 0b                	ud2    
  23190a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    Some(T),
  23190f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  231914:	48 83 c0 08          	add    $0x8,%rax
  231918:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23191d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  231922:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  231927:	48 8d 15 fe ef fc ff 	lea    -0x31002(%rip),%rdx        # 20092c <str.2+0xec>
  23192e:	b9 04 00 00 00       	mov    $0x4,%ecx
  231933:	e8 58 3e 00 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  231938:	eb 2a                	jmp    231964 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x84>
  23193a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  23193f:	48 8d 35 26 f0 fc ff 	lea    -0x30fda(%rip),%rsi        # 20096c <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0x34>
  231946:	ba 04 00 00 00       	mov    $0x4,%edx
  23194b:	e8 d0 3d 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  231950:	24 01                	and    $0x1,%al
  231952:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  231956:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  23195a:	24 01                	and    $0x1,%al
  23195c:	0f b6 c0             	movzbl %al,%eax
  23195f:	48 83 c4 68          	add    $0x68,%rsp
  231963:	c3                   	retq   
  231964:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  231969:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  23196e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    Some(T),
  231973:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  231978:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  23197d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  231982:	48 8d 15 cf 92 00 00 	lea    0x92cf(%rip),%rdx        # 23ac58 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x138>
  231989:	e8 82 13 00 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  23198e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  231993:	e8 e8 14 00 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  231998:	24 01                	and    $0x1,%al
  23199a:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  23199e:	eb b6                	jmp    231956 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x76>

00000000002319a0 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17h7ca190daa7803da4E>:
  2319a0:	50                   	push   %rax
  2319a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2319a5:	58                   	pop    %rax
  2319a6:	c3                   	retq   
  2319a7:	cc                   	int3   
  2319a8:	cc                   	int3   
  2319a9:	cc                   	int3   
  2319aa:	cc                   	int3   
  2319ab:	cc                   	int3   
  2319ac:	cc                   	int3   
  2319ad:	cc                   	int3   
  2319ae:	cc                   	int3   
  2319af:	cc                   	int3   

00000000002319b0 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h6df45f2823794112E>:
  2319b0:	50                   	push   %rax
  2319b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2319b5:	58                   	pop    %rax
  2319b6:	c3                   	retq   
  2319b7:	cc                   	int3   
  2319b8:	cc                   	int3   
  2319b9:	cc                   	int3   
  2319ba:	cc                   	int3   
  2319bb:	cc                   	int3   
  2319bc:	cc                   	int3   
  2319bd:	cc                   	int3   
  2319be:	cc                   	int3   
  2319bf:	cc                   	int3   

00000000002319c0 <_ZN4core3ptr64drop_in_place$LT$$RF$bootloader..boot_info..MemoryRegionKind$GT$17h091086770a55a35bE>:
  2319c0:	50                   	push   %rax
  2319c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  2319c5:	58                   	pop    %rax
  2319c6:	c3                   	retq   
  2319c7:	cc                   	int3   
  2319c8:	cc                   	int3   
  2319c9:	cc                   	int3   
  2319ca:	cc                   	int3   
  2319cb:	cc                   	int3   
  2319cc:	cc                   	int3   
  2319cd:	cc                   	int3   
  2319ce:	cc                   	int3   
  2319cf:	cc                   	int3   

00000000002319d0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  2319d0:	48 83 ec 38          	sub    $0x38,%rsp
  2319d4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  2319d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2319de:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  2319e3:	e8 e8 fe ff ff       	callq  2318d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>
  2319e8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2319ed:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2319f2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2319f7:	e8 74 00 00 00       	callq  231a70 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>
  2319fc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231a01:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  231a06:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  231a0b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  231a10:	48 83 c4 38          	add    $0x38,%rsp
  231a14:	c3                   	retq   
  231a15:	cc                   	int3   
  231a16:	cc                   	int3   
  231a17:	cc                   	int3   
  231a18:	cc                   	int3   
  231a19:	cc                   	int3   
  231a1a:	cc                   	int3   
  231a1b:	cc                   	int3   
  231a1c:	cc                   	int3   
  231a1d:	cc                   	int3   
  231a1e:	cc                   	int3   
  231a1f:	cc                   	int3   

0000000000231a20 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  231a20:	48 83 ec 38          	sub    $0x38,%rsp
  231a24:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231a29:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231a2e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  231a33:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  231a38:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  231a3d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231a42:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  231a47:	e8 64 00 00 00       	callq  231ab0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>
  231a4c:	48 89 04 24          	mov    %rax,(%rsp)
  231a50:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231a55:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  231a5a:	48 8b 04 24          	mov    (%rsp),%rax
}
  231a5e:	48 83 c4 38          	add    $0x38,%rsp
  231a62:	c3                   	retq   
  231a63:	cc                   	int3   
  231a64:	cc                   	int3   
  231a65:	cc                   	int3   
  231a66:	cc                   	int3   
  231a67:	cc                   	int3   
  231a68:	cc                   	int3   
  231a69:	cc                   	int3   
  231a6a:	cc                   	int3   
  231a6b:	cc                   	int3   
  231a6c:	cc                   	int3   
  231a6d:	cc                   	int3   
  231a6e:	cc                   	int3   
  231a6f:	cc                   	int3   

0000000000231a70 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>:
pub const fn from_raw_parts<T: ?Sized>(
  231a70:	48 83 ec 30          	sub    $0x30,%rsp
  231a74:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231a79:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  231a7e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231a83:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  231a88:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  231a8d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231a92:	48 89 0c 24          	mov    %rcx,(%rsp)
  231a96:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231a9b:	48 8b 04 24          	mov    (%rsp),%rax
  231a9f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  231aa4:	48 83 c4 30          	add    $0x30,%rsp
  231aa8:	c3                   	retq   
  231aa9:	cc                   	int3   
  231aaa:	cc                   	int3   
  231aab:	cc                   	int3   
  231aac:	cc                   	int3   
  231aad:	cc                   	int3   
  231aae:	cc                   	int3   
  231aaf:	cc                   	int3   

0000000000231ab0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>:
pub const fn from_raw_parts_mut<T: ?Sized>(
  231ab0:	48 83 ec 30          	sub    $0x30,%rsp
  231ab4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  231ab9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  231abe:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  231ac3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  231ac8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  231acd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  231ad2:	48 89 0c 24          	mov    %rcx,(%rsp)
  231ad6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231adb:	48 8b 04 24          	mov    (%rsp),%rax
  231adf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  231ae4:	48 83 c4 30          	add    $0x30,%rsp
  231ae8:	c3                   	retq   
  231ae9:	cc                   	int3   
  231aea:	cc                   	int3   
  231aeb:	cc                   	int3   
  231aec:	cc                   	int3   
  231aed:	cc                   	int3   
  231aee:	cc                   	int3   
  231aef:	cc                   	int3   

0000000000231af0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0c27f5ed08988334E>:
  231af0:	48 83 ec 18          	sub    $0x18,%rsp
  231af4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231af9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231afe:	48 8b 3f             	mov    (%rdi),%rdi
  231b01:	e8 ea 02 00 00       	callq  231df0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE>
  231b06:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b0a:	8a 44 24 07          	mov    0x7(%rsp),%al
  231b0e:	24 01                	and    $0x1,%al
  231b10:	0f b6 c0             	movzbl %al,%eax
  231b13:	48 83 c4 18          	add    $0x18,%rsp
  231b17:	c3                   	retq   
  231b18:	cc                   	int3   
  231b19:	cc                   	int3   
  231b1a:	cc                   	int3   
  231b1b:	cc                   	int3   
  231b1c:	cc                   	int3   
  231b1d:	cc                   	int3   
  231b1e:	cc                   	int3   
  231b1f:	cc                   	int3   

0000000000231b20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h110c2e9d0d22ff67E>:
  231b20:	48 83 ec 18          	sub    $0x18,%rsp
  231b24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231b29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231b2e:	48 8b 3f             	mov    (%rdi),%rdi
  231b31:	e8 6a 03 00 00       	callq  231ea0 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>
  231b36:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b3a:	8a 44 24 07          	mov    0x7(%rsp),%al
  231b3e:	24 01                	and    $0x1,%al
  231b40:	0f b6 c0             	movzbl %al,%eax
  231b43:	48 83 c4 18          	add    $0x18,%rsp
  231b47:	c3                   	retq   
  231b48:	cc                   	int3   
  231b49:	cc                   	int3   
  231b4a:	cc                   	int3   
  231b4b:	cc                   	int3   
  231b4c:	cc                   	int3   
  231b4d:	cc                   	int3   
  231b4e:	cc                   	int3   
  231b4f:	cc                   	int3   

0000000000231b50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a95e3f68e858f27E>:
  231b50:	48 83 ec 18          	sub    $0x18,%rsp
  231b54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231b59:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231b5e:	48 8b 3f             	mov    (%rdi),%rdi
  231b61:	e8 7a 00 00 00       	callq  231be0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>
  231b66:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b6a:	8a 44 24 07          	mov    0x7(%rsp),%al
  231b6e:	24 01                	and    $0x1,%al
  231b70:	0f b6 c0             	movzbl %al,%eax
  231b73:	48 83 c4 18          	add    $0x18,%rsp
  231b77:	c3                   	retq   
  231b78:	cc                   	int3   
  231b79:	cc                   	int3   
  231b7a:	cc                   	int3   
  231b7b:	cc                   	int3   
  231b7c:	cc                   	int3   
  231b7d:	cc                   	int3   
  231b7e:	cc                   	int3   
  231b7f:	cc                   	int3   

0000000000231b80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4835aefd08962e6eE>:
  231b80:	48 83 ec 18          	sub    $0x18,%rsp
  231b84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231b89:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231b8e:	48 8b 3f             	mov    (%rdi),%rdi
  231b91:	e8 aa 01 00 00       	callq  231d40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>
  231b96:	88 44 24 07          	mov    %al,0x7(%rsp)
  231b9a:	8a 44 24 07          	mov    0x7(%rsp),%al
  231b9e:	24 01                	and    $0x1,%al
  231ba0:	0f b6 c0             	movzbl %al,%eax
  231ba3:	48 83 c4 18          	add    $0x18,%rsp
  231ba7:	c3                   	retq   
  231ba8:	cc                   	int3   
  231ba9:	cc                   	int3   
  231baa:	cc                   	int3   
  231bab:	cc                   	int3   
  231bac:	cc                   	int3   
  231bad:	cc                   	int3   
  231bae:	cc                   	int3   
  231baf:	cc                   	int3   

0000000000231bb0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c907112cc167dadE>:
  231bb0:	48 83 ec 18          	sub    $0x18,%rsp
  231bb4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231bb9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231bbe:	48 8b 3f             	mov    (%rdi),%rdi
  231bc1:	e8 ca 00 00 00       	callq  231c90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>
  231bc6:	88 44 24 07          	mov    %al,0x7(%rsp)
  231bca:	8a 44 24 07          	mov    0x7(%rsp),%al
  231bce:	24 01                	and    $0x1,%al
  231bd0:	0f b6 c0             	movzbl %al,%eax
  231bd3:	48 83 c4 18          	add    $0x18,%rsp
  231bd7:	c3                   	retq   
  231bd8:	cc                   	int3   
  231bd9:	cc                   	int3   
  231bda:	cc                   	int3   
  231bdb:	cc                   	int3   
  231bdc:	cc                   	int3   
  231bdd:	cc                   	int3   
  231bde:	cc                   	int3   
  231bdf:	cc                   	int3   

0000000000231be0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231be0:	48 83 ec 38          	sub    $0x38,%rsp
  231be4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231be9:	48 89 f8             	mov    %rdi,%rax
  231bec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231bf1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231bf6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231bfb:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  231c00:	e8 4b 3b 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  231c05:	88 44 24 26          	mov    %al,0x26(%rsp)
  231c09:	8a 44 24 26          	mov    0x26(%rsp),%al
  231c0d:	a8 01                	test   $0x1,%al
  231c0f:	75 12                	jne    231c23 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x43>
  231c11:	eb 00                	jmp    231c13 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x33>
  231c13:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  231c18:	e8 43 3b 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  231c1d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231c21:	eb 25                	jmp    231c48 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x68>
  231c23:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231c28:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  231c2d:	e8 ae 08 00 00       	callq  2324e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>
  231c32:	24 01                	and    $0x1,%al
  231c34:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  231c38:	eb 00                	jmp    231c3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
            }
  231c3a:	8a 44 24 27          	mov    0x27(%rsp),%al
  231c3e:	24 01                	and    $0x1,%al
  231c40:	0f b6 c0             	movzbl %al,%eax
  231c43:	48 83 c4 38          	add    $0x38,%rsp
  231c47:	c3                   	retq   
  231c48:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  231c4c:	a8 01                	test   $0x1,%al
  231c4e:	75 19                	jne    231c69 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x89>
  231c50:	eb 00                	jmp    231c52 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x72>
  231c52:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231c57:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  231c5c:	e8 cf 26 00 00       	callq  234330 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>
  231c61:	24 01                	and    $0x1,%al
  231c63:	88 44 24 27          	mov    %al,0x27(%rsp)
  231c67:	eb 19                	jmp    231c82 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa2>
  231c69:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231c6e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231c73:	e8 08 09 00 00       	callq  232580 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>
  231c78:	24 01                	and    $0x1,%al
  231c7a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  231c7e:	eb 00                	jmp    231c80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
                if f.debug_lower_hex() {
  231c80:	eb b8                	jmp    231c3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
                } else if f.debug_upper_hex() {
  231c82:	eb fc                	jmp    231c80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
  231c84:	cc                   	int3   
  231c85:	cc                   	int3   
  231c86:	cc                   	int3   
  231c87:	cc                   	int3   
  231c88:	cc                   	int3   
  231c89:	cc                   	int3   
  231c8a:	cc                   	int3   
  231c8b:	cc                   	int3   
  231c8c:	cc                   	int3   
  231c8d:	cc                   	int3   
  231c8e:	cc                   	int3   
  231c8f:	cc                   	int3   

0000000000231c90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231c90:	48 83 ec 38          	sub    $0x38,%rsp
  231c94:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231c99:	48 89 f8             	mov    %rdi,%rax
  231c9c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231ca1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231ca6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231cab:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  231cb0:	e8 9b 3a 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  231cb5:	88 44 24 26          	mov    %al,0x26(%rsp)
  231cb9:	8a 44 24 26          	mov    0x26(%rsp),%al
  231cbd:	a8 01                	test   $0x1,%al
  231cbf:	75 12                	jne    231cd3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x43>
  231cc1:	eb 00                	jmp    231cc3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x33>
  231cc3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  231cc8:	e8 93 3a 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  231ccd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231cd1:	eb 25                	jmp    231cf8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x68>
  231cd3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231cd8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  231cdd:	e8 3e 09 00 00       	callq  232620 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  231ce2:	24 01                	and    $0x1,%al
  231ce4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  231ce8:	eb 00                	jmp    231cea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
            }
  231cea:	8a 44 24 27          	mov    0x27(%rsp),%al
  231cee:	24 01                	and    $0x1,%al
  231cf0:	0f b6 c0             	movzbl %al,%eax
  231cf3:	48 83 c4 38          	add    $0x38,%rsp
  231cf7:	c3                   	retq   
  231cf8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  231cfc:	a8 01                	test   $0x1,%al
  231cfe:	75 19                	jne    231d19 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x89>
  231d00:	eb 00                	jmp    231d02 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x72>
  231d02:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231d07:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  231d0c:	e8 2f 27 00 00       	callq  234440 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  231d11:	24 01                	and    $0x1,%al
  231d13:	88 44 24 27          	mov    %al,0x27(%rsp)
  231d17:	eb 19                	jmp    231d32 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa2>
  231d19:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231d1e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231d23:	e8 88 09 00 00       	callq  2326b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  231d28:	24 01                	and    $0x1,%al
  231d2a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  231d2e:	eb 00                	jmp    231d30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
                if f.debug_lower_hex() {
  231d30:	eb b8                	jmp    231cea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
                } else if f.debug_upper_hex() {
  231d32:	eb fc                	jmp    231d30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
  231d34:	cc                   	int3   
  231d35:	cc                   	int3   
  231d36:	cc                   	int3   
  231d37:	cc                   	int3   
  231d38:	cc                   	int3   
  231d39:	cc                   	int3   
  231d3a:	cc                   	int3   
  231d3b:	cc                   	int3   
  231d3c:	cc                   	int3   
  231d3d:	cc                   	int3   
  231d3e:	cc                   	int3   
  231d3f:	cc                   	int3   

0000000000231d40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231d40:	48 83 ec 38          	sub    $0x38,%rsp
  231d44:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231d49:	48 89 f8             	mov    %rdi,%rax
  231d4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231d51:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231d56:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231d5b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  231d60:	e8 eb 39 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  231d65:	88 44 24 26          	mov    %al,0x26(%rsp)
  231d69:	8a 44 24 26          	mov    0x26(%rsp),%al
  231d6d:	a8 01                	test   $0x1,%al
  231d6f:	75 12                	jne    231d83 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x43>
  231d71:	eb 00                	jmp    231d73 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x33>
  231d73:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  231d78:	e8 e3 39 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  231d7d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231d81:	eb 25                	jmp    231da8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x68>
  231d83:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231d88:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  231d8d:	e8 ae 09 00 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  231d92:	24 01                	and    $0x1,%al
  231d94:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  231d98:	eb 00                	jmp    231d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
            }
  231d9a:	8a 44 24 27          	mov    0x27(%rsp),%al
  231d9e:	24 01                	and    $0x1,%al
  231da0:	0f b6 c0             	movzbl %al,%eax
  231da3:	48 83 c4 38          	add    $0x38,%rsp
  231da7:	c3                   	retq   
  231da8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  231dac:	a8 01                	test   $0x1,%al
  231dae:	75 19                	jne    231dc9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x89>
  231db0:	eb 00                	jmp    231db2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x72>
  231db2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231db7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  231dbc:	e8 af 27 00 00       	callq  234570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  231dc1:	24 01                	and    $0x1,%al
  231dc3:	88 44 24 27          	mov    %al,0x27(%rsp)
  231dc7:	eb 19                	jmp    231de2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa2>
  231dc9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231dce:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231dd3:	e8 08 0a 00 00       	callq  2327e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  231dd8:	24 01                	and    $0x1,%al
  231dda:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  231dde:	eb 00                	jmp    231de0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
                if f.debug_lower_hex() {
  231de0:	eb b8                	jmp    231d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
                } else if f.debug_upper_hex() {
  231de2:	eb fc                	jmp    231de0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
  231de4:	cc                   	int3   
  231de5:	cc                   	int3   
  231de6:	cc                   	int3   
  231de7:	cc                   	int3   
  231de8:	cc                   	int3   
  231de9:	cc                   	int3   
  231dea:	cc                   	int3   
  231deb:	cc                   	int3   
  231dec:	cc                   	int3   
  231ded:	cc                   	int3   
  231dee:	cc                   	int3   
  231def:	cc                   	int3   

0000000000231df0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  231df0:	48 83 ec 38          	sub    $0x38,%rsp
  231df4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231df9:	48 89 f8             	mov    %rdi,%rax
  231dfc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  231e01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  231e06:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  231e0b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  231e10:	e8 3b 39 00 00       	callq  235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  231e15:	88 44 24 26          	mov    %al,0x26(%rsp)
  231e19:	8a 44 24 26          	mov    0x26(%rsp),%al
  231e1d:	a8 01                	test   $0x1,%al
  231e1f:	75 12                	jne    231e33 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x43>
  231e21:	eb 00                	jmp    231e23 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x33>
  231e23:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  231e28:	e8 33 39 00 00       	callq  235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  231e2d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231e31:	eb 25                	jmp    231e58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x68>
  231e33:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231e38:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  231e3d:	e8 fe 08 00 00       	callq  232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  231e42:	24 01                	and    $0x1,%al
  231e44:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  231e48:	eb 00                	jmp    231e4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x5a>
            }
  231e4a:	8a 44 24 27          	mov    0x27(%rsp),%al
  231e4e:	24 01                	and    $0x1,%al
  231e50:	0f b6 c0             	movzbl %al,%eax
  231e53:	48 83 c4 38          	add    $0x38,%rsp
  231e57:	c3                   	retq   
  231e58:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  231e5c:	a8 01                	test   $0x1,%al
  231e5e:	75 19                	jne    231e79 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x89>
  231e60:	eb 00                	jmp    231e62 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x72>
  231e62:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231e67:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  231e6c:	e8 ff 26 00 00       	callq  234570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  231e71:	24 01                	and    $0x1,%al
  231e73:	88 44 24 27          	mov    %al,0x27(%rsp)
  231e77:	eb 19                	jmp    231e92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa2>
  231e79:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  231e7e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  231e83:	e8 58 09 00 00       	callq  2327e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  231e88:	24 01                	and    $0x1,%al
  231e8a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  231e8e:	eb 00                	jmp    231e90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa0>
                if f.debug_lower_hex() {
  231e90:	eb b8                	jmp    231e4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0x5a>
                } else if f.debug_upper_hex() {
  231e92:	eb fc                	jmp    231e90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h14a421fca64d3c7eE+0xa0>
  231e94:	cc                   	int3   
  231e95:	cc                   	int3   
  231e96:	cc                   	int3   
  231e97:	cc                   	int3   
  231e98:	cc                   	int3   
  231e99:	cc                   	int3   
  231e9a:	cc                   	int3   
  231e9b:	cc                   	int3   
  231e9c:	cc                   	int3   
  231e9d:	cc                   	int3   
  231e9e:	cc                   	int3   
  231e9f:	cc                   	int3   

0000000000231ea0 <_ZN41_$LT$bool$u20$as$u20$core..fmt..Debug$GT$3fmt17h36795a1d477bf97bE>:
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  231ea0:	48 83 ec 18          	sub    $0x18,%rsp
  231ea4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  231ea9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        Display::fmt(self, f)
  231eae:	e8 4d 39 00 00       	callq  235800 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>
  231eb3:	88 44 24 07          	mov    %al,0x7(%rsp)
  231eb7:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  231ebb:	24 01                	and    $0x1,%al
  231ebd:	0f b6 c0             	movzbl %al,%eax
  231ec0:	48 83 c4 18          	add    $0x18,%rsp
  231ec4:	c3                   	retq   
  231ec5:	cc                   	int3   
  231ec6:	cc                   	int3   
  231ec7:	cc                   	int3   
  231ec8:	cc                   	int3   
  231ec9:	cc                   	int3   
  231eca:	cc                   	int3   
  231ecb:	cc                   	int3   
  231ecc:	cc                   	int3   
  231ecd:	cc                   	int3   
  231ece:	cc                   	int3   
  231ecf:	cc                   	int3   

0000000000231ed0 <_ZN4core6option15Option$LT$T$GT$7is_none17h22a1b2710adb0f42E>:
    pub const fn is_none(&self) -> bool {
  231ed0:	48 83 ec 18          	sub    $0x18,%rsp
  231ed4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_some()
  231ed9:	e8 22 00 00 00       	callq  231f00 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>
  231ede:	88 44 24 0f          	mov    %al,0xf(%rsp)
  231ee2:	8a 44 24 0f          	mov    0xf(%rsp),%al
  231ee6:	34 ff                	xor    $0xff,%al
    }
  231ee8:	24 01                	and    $0x1,%al
  231eea:	0f b6 c0             	movzbl %al,%eax
  231eed:	48 83 c4 18          	add    $0x18,%rsp
  231ef1:	c3                   	retq   
  231ef2:	cc                   	int3   
  231ef3:	cc                   	int3   
  231ef4:	cc                   	int3   
  231ef5:	cc                   	int3   
  231ef6:	cc                   	int3   
  231ef7:	cc                   	int3   
  231ef8:	cc                   	int3   
  231ef9:	cc                   	int3   
  231efa:	cc                   	int3   
  231efb:	cc                   	int3   
  231efc:	cc                   	int3   
  231efd:	cc                   	int3   
  231efe:	cc                   	int3   
  231eff:	cc                   	int3   

0000000000231f00 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE>:
    pub const fn is_some(&self) -> bool {
  231f00:	48 83 ec 10          	sub    $0x10,%rsp
  231f04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  231f09:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  231f0d:	75 07                	jne    231f16 <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x16>
  231f0f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  231f14:	eb 05                	jmp    231f1b <_ZN4core6option15Option$LT$T$GT$7is_some17hccaa3e5c1b50beefE+0x1b>
  231f16:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  231f1b:	8a 44 24 07          	mov    0x7(%rsp),%al
  231f1f:	24 01                	and    $0x1,%al
  231f21:	0f b6 c0             	movzbl %al,%eax
  231f24:	48 83 c4 10          	add    $0x10,%rsp
  231f28:	c3                   	retq   
  231f29:	cc                   	int3   
  231f2a:	cc                   	int3   
  231f2b:	cc                   	int3   
  231f2c:	cc                   	int3   
  231f2d:	cc                   	int3   
  231f2e:	cc                   	int3   
  231f2f:	cc                   	int3   

0000000000231f30 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>:
    fn deref(&self) -> &Self::Target {
  231f30:	48 83 ec 18          	sub    $0x18,%rsp
  231f34:	48 89 f8             	mov    %rdi,%rax
  231f37:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts(self.ptr, self.len) }
  231f3c:	48 8b 38             	mov    (%rax),%rdi
  231f3f:	48 8b 70 08          	mov    0x8(%rax),%rsi
  231f43:	e8 18 04 00 00       	callq  232360 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>
  231f48:	48 89 04 24          	mov    %rax,(%rsp)
  231f4c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231f51:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  231f56:	48 8b 04 24          	mov    (%rsp),%rax
    }
  231f5a:	48 83 c4 18          	add    $0x18,%rsp
  231f5e:	c3                   	retq   
  231f5f:	cc                   	int3   

0000000000231f60 <_ZN10bootloader9boot_info11FrameBuffer10buffer_mut17h3ebde5336f9f1ed1E>:
    pub fn buffer_mut(&mut self) -> &mut [u8] {
  231f60:	48 83 ec 18          	sub    $0x18,%rsp
  231f64:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        unsafe { self.create_buffer() }
  231f69:	e8 22 00 00 00       	callq  231f90 <_ZN10bootloader9boot_info11FrameBuffer13create_buffer17h9d518b0da1fcd6d4E>
  231f6e:	48 89 04 24          	mov    %rax,(%rsp)
  231f72:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231f77:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  231f7c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  231f80:	48 83 c4 18          	add    $0x18,%rsp
  231f84:	c3                   	retq   
  231f85:	cc                   	int3   
  231f86:	cc                   	int3   
  231f87:	cc                   	int3   
  231f88:	cc                   	int3   
  231f89:	cc                   	int3   
  231f8a:	cc                   	int3   
  231f8b:	cc                   	int3   
  231f8c:	cc                   	int3   
  231f8d:	cc                   	int3   
  231f8e:	cc                   	int3   
  231f8f:	cc                   	int3   

0000000000231f90 <_ZN10bootloader9boot_info11FrameBuffer13create_buffer17h9d518b0da1fcd6d4E>:
    unsafe fn create_buffer<'a>(&self) -> &'a mut [u8] {
  231f90:	48 83 ec 18          	sub    $0x18,%rsp
  231f94:	48 89 f8             	mov    %rdi,%rax
  231f97:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts_mut(self.buffer_start as *mut u8, self.buffer_byte_len) }
  231f9c:	48 8b 38             	mov    (%rax),%rdi
  231f9f:	48 8b 70 08          	mov    0x8(%rax),%rsi
  231fa3:	e8 e8 03 00 00       	callq  232390 <_ZN4core5slice3raw18from_raw_parts_mut17ha7cf18624446d048E>
  231fa8:	48 89 04 24          	mov    %rax,(%rsp)
  231fac:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  231fb1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  231fb6:	48 8b 04 24          	mov    (%rsp),%rax
    }
  231fba:	48 83 c4 18          	add    $0x18,%rsp
  231fbe:	c3                   	retq   
  231fbf:	cc                   	int3   

0000000000231fc0 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>:
    pub fn info(&self) -> FrameBufferInfo {
  231fc0:	48 83 ec 18          	sub    $0x18,%rsp
  231fc4:	48 89 f8             	mov    %rdi,%rax
  231fc7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  231fcc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.info
  231fd1:	48 83 c6 10          	add    $0x10,%rsi
  231fd5:	ba 30 00 00 00       	mov    $0x30,%edx
  231fda:	e8 81 45 00 00       	callq  236560 <memcpy>
  231fdf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  231fe4:	48 83 c4 18          	add    $0x18,%rsp
  231fe8:	c3                   	retq   
  231fe9:	cc                   	int3   
  231fea:	cc                   	int3   
  231feb:	cc                   	int3   
  231fec:	cc                   	int3   
  231fed:	cc                   	int3   
  231fee:	cc                   	int3   
  231fef:	cc                   	int3   

0000000000231ff0 <_ZN72_$LT$bootloader..boot_info..MemoryRegion$u20$as$u20$core..fmt..Debug$GT$3fmt17h7b7f29e9503f8715E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  231ff0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  231ff7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  231ffc:	48 89 f8             	mov    %rdi,%rax
  231fff:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  232004:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  232009:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: u64,
  23200e:	48 89 c1             	mov    %rax,%rcx
  232011:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  232016:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub end: u64,
  23201b:	48 89 c1             	mov    %rax,%rcx
  23201e:	48 83 c1 08          	add    $0x8,%rcx
  232022:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  232027:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub kind: MemoryRegionKind,
  23202c:	48 83 c0 10          	add    $0x10,%rax
  232030:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  232035:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  23203a:	48 8d 35 df 1f fd ff 	lea    -0x2e021(%rip),%rsi        # 204020 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2a9>
  232041:	ba 0c 00 00 00       	mov    $0xc,%edx
  232046:	e8 25 37 00 00       	callq  235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  23204b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  232052:	00 
  232053:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  23205a:	00 
  23205b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  232062:	00 
  232063:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  232068:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  23206f:	00 
  232070:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  232075:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  23207a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  23207f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  232086:	00 
    pub start: u64,
  232087:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  23208c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  232091:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  232096:	48 8d 35 8f 1f fd ff 	lea    -0x2e071(%rip),%rsi        # 20402c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2b5>
  23209d:	ba 05 00 00 00       	mov    $0x5,%edx
  2320a2:	4c 8d 05 cf 8b 00 00 	lea    0x8bcf(%rip),%r8        # 23ac78 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  2320a9:	e8 52 0a 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2320ae:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub end: u64,
  2320b3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2320b8:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2320bd:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2320c2:	48 8d 35 68 1f fd ff 	lea    -0x2e098(%rip),%rsi        # 204031 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2ba>
  2320c9:	ba 03 00 00 00       	mov    $0x3,%edx
  2320ce:	4c 8d 05 a3 8b 00 00 	lea    0x8ba3(%rip),%r8        # 23ac78 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  2320d5:	e8 26 0a 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  2320da:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub kind: MemoryRegionKind,
  2320df:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2320e4:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2320e9:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2320ee:	48 8d 35 4f e8 fc ff 	lea    -0x317b1(%rip),%rsi        # 200944 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467+0xc>
  2320f5:	ba 04 00 00 00       	mov    $0x4,%edx
  2320fa:	4c 8d 05 97 8b 00 00 	lea    0x8b97(%rip),%r8        # 23ac98 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x178>
  232101:	e8 fa 09 00 00       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  232106:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  23210b:	e8 b0 0b 00 00       	callq  232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  232110:	88 44 24 0f          	mov    %al,0xf(%rsp)
  232114:	8a 44 24 0f          	mov    0xf(%rsp),%al
  232118:	24 01                	and    $0x1,%al
  23211a:	0f b6 c0             	movzbl %al,%eax
  23211d:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  232124:	c3                   	retq   
  232125:	cc                   	int3   
  232126:	cc                   	int3   
  232127:	cc                   	int3   
  232128:	cc                   	int3   
  232129:	cc                   	int3   
  23212a:	cc                   	int3   
  23212b:	cc                   	int3   
  23212c:	cc                   	int3   
  23212d:	cc                   	int3   
  23212e:	cc                   	int3   
  23212f:	cc                   	int3   

0000000000232130 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  232130:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  232137:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  23213c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  232141:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  232148:	00 
  232149:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  23214e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  232153:	8b 00                	mov    (%rax),%eax
  232155:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  23215a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  23215f:	48 8d 0d aa 1e fd ff 	lea    -0x2e156(%rip),%rcx        # 204010 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x299>
  232166:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23216a:	48 01 c8             	add    %rcx,%rax
  23216d:	ff e0                	jmpq   *%rax
  23216f:	0f 0b                	ud2    
  232171:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  232176:	48 8d 35 d7 1e fd ff 	lea    -0x2e129(%rip),%rsi        # 204054 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2dd>
  23217d:	ba 06 00 00 00       	mov    $0x6,%edx
  232182:	e8 99 35 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  232187:	24 01                	and    $0x1,%al
  232189:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  23218d:	e9 c2 00 00 00       	jmpq   232254 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  232192:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  232197:	48 8d 35 ac 1e fd ff 	lea    -0x2e154(%rip),%rsi        # 20404a <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2d3>
  23219e:	ba 0a 00 00 00       	mov    $0xa,%edx
  2321a3:	e8 78 35 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  2321a8:	24 01                	and    $0x1,%al
  2321aa:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2321ae:	e9 a1 00 00 00       	jmpq   232254 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  2321b3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownUefi(u32),
  2321b8:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2321bd:	48 83 c0 04          	add    $0x4,%rax
  2321c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2321c6:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2321cd:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  2321ce:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2321d3:	48 8d 15 65 1e fd ff 	lea    -0x2e19b(%rip),%rdx        # 20403f <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2c8>
  2321da:	b9 0b 00 00 00       	mov    $0xb,%ecx
  2321df:	e8 ac 35 00 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2321e4:	eb 7f                	jmp    232265 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x135>
  2321e6:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownBios(u32),
  2321eb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2321f0:	48 83 c0 04          	add    $0x4,%rax
  2321f4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2321f9:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  232200:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  232201:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  232206:	48 8d 15 27 1e fd ff 	lea    -0x2e1d9(%rip),%rdx        # 204034 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2bd>
  23220d:	b9 0b 00 00 00       	mov    $0xb,%ecx
  232212:	e8 79 35 00 00       	callq  235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  232217:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23221c:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  232221:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  232228:	00 
    UnknownBios(u32),
  232229:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  23222e:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  232233:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  232238:	48 8d 15 79 8a 00 00 	lea    0x8a79(%rip),%rdx        # 23acb8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  23223f:	e8 cc 0a 00 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  232244:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  232249:	e8 32 0c 00 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  23224e:	24 01                	and    $0x1,%al
  232250:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  232254:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  232258:	24 01                	and    $0x1,%al
  23225a:	0f b6 c0             	movzbl %al,%eax
  23225d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  232264:	c3                   	retq   
  232265:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23226a:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
  23226f:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  232276:	00 
    UnknownUefi(u32),
  232277:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  23227c:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  232281:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  232286:	48 8d 15 2b 8a 00 00 	lea    0x8a2b(%rip),%rdx        # 23acb8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  23228d:	e8 7e 0a 00 00       	callq  232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  232292:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  232297:	e8 e4 0b 00 00       	callq  232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  23229c:	24 01                	and    $0x1,%al
  23229e:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2322a2:	eb b0                	jmp    232254 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  2322a4:	cc                   	int3   
  2322a5:	cc                   	int3   
  2322a6:	cc                   	int3   
  2322a7:	cc                   	int3   
  2322a8:	cc                   	int3   
  2322a9:	cc                   	int3   
  2322aa:	cc                   	int3   
  2322ab:	cc                   	int3   
  2322ac:	cc                   	int3   
  2322ad:	cc                   	int3   
  2322ae:	cc                   	int3   
  2322af:	cc                   	int3   

00000000002322b0 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
  2322b0:	48 83 ec 38          	sub    $0x38,%rsp
  2322b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2322b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2322be:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  2322c3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2322c8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2322cd:	8b 00                	mov    (%rax),%eax
  2322cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2322d4:	48 85 c0             	test   %rax,%rax
  2322d7:	74 13                	je     2322ec <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x3c>
  2322d9:	eb 00                	jmp    2322db <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x2b>
  2322db:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2322e0:	48 83 e8 01          	sub    $0x1,%rax
  2322e4:	74 24                	je     23230a <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x5a>
  2322e6:	eb 00                	jmp    2322e8 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x38>
  2322e8:	eb 3e                	jmp    232328 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x78>
  2322ea:	0f 0b                	ud2    
  2322ec:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2322f1:	48 8d 35 67 1d fd ff 	lea    -0x2e299(%rip),%rsi        # 20405f <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e8>
  2322f8:	ba 03 00 00 00       	mov    $0x3,%edx
  2322fd:	e8 1e 34 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  232302:	24 01                	and    $0x1,%al
  232304:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  232308:	eb 3a                	jmp    232344 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  23230a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  23230f:	48 8d 35 46 1d fd ff 	lea    -0x2e2ba(%rip),%rsi        # 20405c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e5>
  232316:	ba 03 00 00 00       	mov    $0x3,%edx
  23231b:	e8 00 34 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  232320:	24 01                	and    $0x1,%al
  232322:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  232326:	eb 1c                	jmp    232344 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  232328:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  23232d:	48 8d 35 26 1d fd ff 	lea    -0x2e2da(%rip),%rsi        # 20405a <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e3>
  232334:	ba 02 00 00 00       	mov    $0x2,%edx
  232339:	e8 e2 33 00 00       	callq  235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  23233e:	24 01                	and    $0x1,%al
  232340:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  232344:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  232348:	24 01                	and    $0x1,%al
  23234a:	0f b6 c0             	movzbl %al,%eax
  23234d:	48 83 c4 38          	add    $0x38,%rsp
  232351:	c3                   	retq   
  232352:	cc                   	int3   
  232353:	cc                   	int3   
  232354:	cc                   	int3   
  232355:	cc                   	int3   
  232356:	cc                   	int3   
  232357:	cc                   	int3   
  232358:	cc                   	int3   
  232359:	cc                   	int3   
  23235a:	cc                   	int3   
  23235b:	cc                   	int3   
  23235c:	cc                   	int3   
  23235d:	cc                   	int3   
  23235e:	cc                   	int3   
  23235f:	cc                   	int3   

0000000000232360 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  232360:	48 83 ec 28          	sub    $0x28,%rsp
  232364:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  232369:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  23236e:	e8 5d f6 ff ff       	callq  2319d0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>
  232373:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  232378:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  23237d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  232382:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  232387:	48 83 c4 28          	add    $0x28,%rsp
  23238b:	c3                   	retq   
  23238c:	cc                   	int3   
  23238d:	cc                   	int3   
  23238e:	cc                   	int3   
  23238f:	cc                   	int3   

0000000000232390 <_ZN4core5slice3raw18from_raw_parts_mut17ha7cf18624446d048E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
  232390:	48 83 ec 28          	sub    $0x28,%rsp
  232394:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  232399:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }
  23239e:	e8 7d f6 ff ff       	callq  231a20 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  2323a3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2323a8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2323ad:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  2323b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  2323b7:	48 83 c4 28          	add    $0x28,%rsp
  2323bb:	c3                   	retq   
  2323bc:	cc                   	int3   
  2323bd:	cc                   	int3   
  2323be:	cc                   	int3   
  2323bf:	cc                   	int3   

00000000002323c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE>:
  2323c0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2323c7:	8a 0f                	mov    (%rdi),%cl
  2323c9:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  2323d0:	00 
  2323d1:	45 31 c9             	xor    %r9d,%r9d
  2323d4:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  2323da:	89 ca                	mov    %ecx,%edx
  2323dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2323e0:	89 c8                	mov    %ecx,%eax
  2323e2:	24 0f                	and    $0xf,%al
  2323e4:	c0 ea 04             	shr    $0x4,%dl
  2323e7:	3c 0a                	cmp    $0xa,%al
  2323e9:	bf 57 00 00 00       	mov    $0x57,%edi
  2323ee:	41 0f 42 fa          	cmovb  %r10d,%edi
  2323f2:	40 00 c7             	add    %al,%dil
  2323f5:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  2323f9:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  2323fd:	49 83 c1 01          	add    $0x1,%r9
  232401:	80 f9 0f             	cmp    $0xf,%cl
  232404:	89 d1                	mov    %edx,%ecx
  232406:	77 d8                	ja     2323e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE+0x20>
  232408:	bf 80 00 00 00       	mov    $0x80,%edi
  23240d:	4c 29 cf             	sub    %r9,%rdi
  232410:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  232417:	73 21                	jae    23243a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17h309ef31bc0a937feE+0x7a>
  232419:	48 8d 15 b6 1c fd ff 	lea    -0x2e34a(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  232420:	b9 02 00 00 00       	mov    $0x2,%ecx
  232425:	48 89 f7             	mov    %rsi,%rdi
  232428:	be 01 00 00 00       	mov    $0x1,%esi
  23242d:	e8 4e 2b 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  232432:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  232439:	c3                   	retq   
  23243a:	48 8d 15 97 88 00 00 	lea    0x8897(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  232441:	be 80 00 00 00       	mov    $0x80,%esi
  232446:	e8 15 13 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  23244b:	0f 0b                	ud2    
  23244d:	cc                   	int3   
  23244e:	cc                   	int3   
  23244f:	cc                   	int3   

0000000000232450 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E>:
  232450:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  232457:	8a 0f                	mov    (%rdi),%cl
  232459:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  232460:	00 
  232461:	45 31 c9             	xor    %r9d,%r9d
  232464:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  23246a:	89 ca                	mov    %ecx,%edx
  23246c:	0f 1f 40 00          	nopl   0x0(%rax)
  232470:	89 c8                	mov    %ecx,%eax
  232472:	24 0f                	and    $0xf,%al
  232474:	c0 ea 04             	shr    $0x4,%dl
  232477:	3c 0a                	cmp    $0xa,%al
  232479:	bf 37 00 00 00       	mov    $0x37,%edi
  23247e:	41 0f 42 fa          	cmovb  %r10d,%edi
  232482:	40 00 c7             	add    %al,%dil
  232485:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  232489:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23248d:	49 83 c1 01          	add    $0x1,%r9
  232491:	80 f9 0f             	cmp    $0xf,%cl
  232494:	89 d1                	mov    %edx,%ecx
  232496:	77 d8                	ja     232470 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E+0x20>
  232498:	bf 80 00 00 00       	mov    $0x80,%edi
  23249d:	4c 29 cf             	sub    %r9,%rdi
  2324a0:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  2324a7:	73 21                	jae    2324ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9dd59abae2add245E+0x7a>
  2324a9:	48 8d 15 26 1c fd ff 	lea    -0x2e3da(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  2324b0:	b9 02 00 00 00       	mov    $0x2,%ecx
  2324b5:	48 89 f7             	mov    %rsi,%rdi
  2324b8:	be 01 00 00 00       	mov    $0x1,%esi
  2324bd:	e8 be 2a 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2324c2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2324c9:	c3                   	retq   
  2324ca:	48 8d 15 07 88 00 00 	lea    0x8807(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  2324d1:	be 80 00 00 00       	mov    $0x80,%esi
  2324d6:	e8 85 12 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  2324db:	0f 0b                	ud2    
  2324dd:	cc                   	int3   
  2324de:	cc                   	int3   
  2324df:	cc                   	int3   

00000000002324e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>:
  2324e0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2324e7:	0f b7 07             	movzwl (%rdi),%eax
  2324ea:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  2324f1:	00 
  2324f2:	45 31 c9             	xor    %r9d,%r9d
  2324f5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  2324fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  232500:	0f b7 d0             	movzwl %ax,%edx
  232503:	89 d0                	mov    %edx,%eax
  232505:	c1 e8 04             	shr    $0x4,%eax
  232508:	89 d1                	mov    %edx,%ecx
  23250a:	80 e1 0f             	and    $0xf,%cl
  23250d:	80 f9 0a             	cmp    $0xa,%cl
  232510:	bf 57 00 00 00       	mov    $0x57,%edi
  232515:	41 0f 42 fa          	cmovb  %r10d,%edi
  232519:	40 00 cf             	add    %cl,%dil
  23251c:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  232520:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  232524:	49 83 c1 01          	add    $0x1,%r9
  232528:	66 83 fa 0f          	cmp    $0xf,%dx
  23252c:	77 d2                	ja     232500 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x20>
  23252e:	bf 80 00 00 00       	mov    $0x80,%edi
  232533:	4c 29 cf             	sub    %r9,%rdi
  232536:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  23253d:	73 21                	jae    232560 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x80>
  23253f:	48 8d 15 90 1b fd ff 	lea    -0x2e470(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  232546:	b9 02 00 00 00       	mov    $0x2,%ecx
  23254b:	48 89 f7             	mov    %rsi,%rdi
  23254e:	be 01 00 00 00       	mov    $0x1,%esi
  232553:	e8 28 2a 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  232558:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  23255f:	c3                   	retq   
  232560:	48 8d 15 71 87 00 00 	lea    0x8771(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  232567:	be 80 00 00 00       	mov    $0x80,%esi
  23256c:	e8 ef 11 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  232571:	0f 0b                	ud2    
  232573:	cc                   	int3   
  232574:	cc                   	int3   
  232575:	cc                   	int3   
  232576:	cc                   	int3   
  232577:	cc                   	int3   
  232578:	cc                   	int3   
  232579:	cc                   	int3   
  23257a:	cc                   	int3   
  23257b:	cc                   	int3   
  23257c:	cc                   	int3   
  23257d:	cc                   	int3   
  23257e:	cc                   	int3   
  23257f:	cc                   	int3   

0000000000232580 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>:
  232580:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  232587:	0f b7 07             	movzwl (%rdi),%eax
  23258a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  232591:	00 
  232592:	45 31 c9             	xor    %r9d,%r9d
  232595:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  23259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  2325a0:	0f b7 d0             	movzwl %ax,%edx
  2325a3:	89 d0                	mov    %edx,%eax
  2325a5:	c1 e8 04             	shr    $0x4,%eax
  2325a8:	89 d1                	mov    %edx,%ecx
  2325aa:	80 e1 0f             	and    $0xf,%cl
  2325ad:	80 f9 0a             	cmp    $0xa,%cl
  2325b0:	bf 37 00 00 00       	mov    $0x37,%edi
  2325b5:	41 0f 42 fa          	cmovb  %r10d,%edi
  2325b9:	40 00 cf             	add    %cl,%dil
  2325bc:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  2325c0:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  2325c4:	49 83 c1 01          	add    $0x1,%r9
  2325c8:	66 83 fa 0f          	cmp    $0xf,%dx
  2325cc:	77 d2                	ja     2325a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x20>
  2325ce:	bf 80 00 00 00       	mov    $0x80,%edi
  2325d3:	4c 29 cf             	sub    %r9,%rdi
  2325d6:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  2325dd:	73 21                	jae    232600 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x80>
  2325df:	48 8d 15 f0 1a fd ff 	lea    -0x2e510(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  2325e6:	b9 02 00 00 00       	mov    $0x2,%ecx
  2325eb:	48 89 f7             	mov    %rsi,%rdi
  2325ee:	be 01 00 00 00       	mov    $0x1,%esi
  2325f3:	e8 88 29 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2325f8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2325ff:	c3                   	retq   
  232600:	48 8d 15 d1 86 00 00 	lea    0x86d1(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  232607:	be 80 00 00 00       	mov    $0x80,%esi
  23260c:	e8 4f 11 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  232611:	0f 0b                	ud2    
  232613:	cc                   	int3   
  232614:	cc                   	int3   
  232615:	cc                   	int3   
  232616:	cc                   	int3   
  232617:	cc                   	int3   
  232618:	cc                   	int3   
  232619:	cc                   	int3   
  23261a:	cc                   	int3   
  23261b:	cc                   	int3   
  23261c:	cc                   	int3   
  23261d:	cc                   	int3   
  23261e:	cc                   	int3   
  23261f:	cc                   	int3   

0000000000232620 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>:
  232620:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  232627:	8b 07                	mov    (%rdi),%eax
  232629:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  232630:	00 
  232631:	45 31 c9             	xor    %r9d,%r9d
  232634:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  23263a:	89 c2                	mov    %eax,%edx
  23263c:	0f 1f 40 00          	nopl   0x0(%rax)
  232640:	c1 ea 04             	shr    $0x4,%edx
  232643:	89 c1                	mov    %eax,%ecx
  232645:	80 e1 0f             	and    $0xf,%cl
  232648:	80 f9 0a             	cmp    $0xa,%cl
  23264b:	bf 57 00 00 00       	mov    $0x57,%edi
  232650:	41 0f 42 fa          	cmovb  %r10d,%edi
  232654:	40 00 cf             	add    %cl,%dil
  232657:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23265b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  23265f:	49 83 c1 01          	add    $0x1,%r9
  232663:	83 f8 0f             	cmp    $0xf,%eax
  232666:	89 d0                	mov    %edx,%eax
  232668:	77 d6                	ja     232640 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x20>
  23266a:	bf 80 00 00 00       	mov    $0x80,%edi
  23266f:	4c 29 cf             	sub    %r9,%rdi
  232672:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  232679:	73 21                	jae    23269c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x7c>
  23267b:	48 8d 15 54 1a fd ff 	lea    -0x2e5ac(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  232682:	b9 02 00 00 00       	mov    $0x2,%ecx
  232687:	48 89 f7             	mov    %rsi,%rdi
  23268a:	be 01 00 00 00       	mov    $0x1,%esi
  23268f:	e8 ec 28 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  232694:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  23269b:	c3                   	retq   
  23269c:	48 8d 15 35 86 00 00 	lea    0x8635(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  2326a3:	be 80 00 00 00       	mov    $0x80,%esi
  2326a8:	e8 b3 10 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  2326ad:	0f 0b                	ud2    
  2326af:	cc                   	int3   

00000000002326b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>:
  2326b0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2326b7:	8b 07                	mov    (%rdi),%eax
  2326b9:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  2326c0:	00 
  2326c1:	45 31 c9             	xor    %r9d,%r9d
  2326c4:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  2326ca:	89 c2                	mov    %eax,%edx
  2326cc:	0f 1f 40 00          	nopl   0x0(%rax)
  2326d0:	c1 ea 04             	shr    $0x4,%edx
  2326d3:	89 c1                	mov    %eax,%ecx
  2326d5:	80 e1 0f             	and    $0xf,%cl
  2326d8:	80 f9 0a             	cmp    $0xa,%cl
  2326db:	bf 37 00 00 00       	mov    $0x37,%edi
  2326e0:	41 0f 42 fa          	cmovb  %r10d,%edi
  2326e4:	40 00 cf             	add    %cl,%dil
  2326e7:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  2326eb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  2326ef:	49 83 c1 01          	add    $0x1,%r9
  2326f3:	83 f8 0f             	cmp    $0xf,%eax
  2326f6:	89 d0                	mov    %edx,%eax
  2326f8:	77 d6                	ja     2326d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x20>
  2326fa:	bf 80 00 00 00       	mov    $0x80,%edi
  2326ff:	4c 29 cf             	sub    %r9,%rdi
  232702:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  232709:	73 21                	jae    23272c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x7c>
  23270b:	48 8d 15 c4 19 fd ff 	lea    -0x2e63c(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  232712:	b9 02 00 00 00       	mov    $0x2,%ecx
  232717:	48 89 f7             	mov    %rsi,%rdi
  23271a:	be 01 00 00 00       	mov    $0x1,%esi
  23271f:	e8 5c 28 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  232724:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  23272b:	c3                   	retq   
  23272c:	48 8d 15 a5 85 00 00 	lea    0x85a5(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  232733:	be 80 00 00 00       	mov    $0x80,%esi
  232738:	e8 23 10 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  23273d:	0f 0b                	ud2    
  23273f:	cc                   	int3   

0000000000232740 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>:
  232740:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  232747:	48 8b 07             	mov    (%rdi),%rax
  23274a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  232751:	00 
  232752:	45 31 c9             	xor    %r9d,%r9d
  232755:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  23275b:	48 89 c2             	mov    %rax,%rdx
  23275e:	66 90                	xchg   %ax,%ax
  232760:	48 c1 ea 04          	shr    $0x4,%rdx
  232764:	89 c1                	mov    %eax,%ecx
  232766:	80 e1 0f             	and    $0xf,%cl
  232769:	80 f9 0a             	cmp    $0xa,%cl
  23276c:	bf 57 00 00 00       	mov    $0x57,%edi
  232771:	41 0f 42 fa          	cmovb  %r10d,%edi
  232775:	40 00 cf             	add    %cl,%dil
  232778:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23277c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  232780:	49 83 c1 01          	add    $0x1,%r9
  232784:	48 83 f8 0f          	cmp    $0xf,%rax
  232788:	48 89 d0             	mov    %rdx,%rax
  23278b:	77 d3                	ja     232760 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x20>
  23278d:	bf 80 00 00 00       	mov    $0x80,%edi
  232792:	4c 29 cf             	sub    %r9,%rdi
  232795:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  23279c:	73 21                	jae    2327bf <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x7f>
  23279e:	48 8d 15 31 19 fd ff 	lea    -0x2e6cf(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  2327a5:	b9 02 00 00 00       	mov    $0x2,%ecx
  2327aa:	48 89 f7             	mov    %rsi,%rdi
  2327ad:	be 01 00 00 00       	mov    $0x1,%esi
  2327b2:	e8 c9 27 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  2327b7:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2327be:	c3                   	retq   
  2327bf:	48 8d 15 12 85 00 00 	lea    0x8512(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  2327c6:	be 80 00 00 00       	mov    $0x80,%esi
  2327cb:	e8 90 0f 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  2327d0:	0f 0b                	ud2    
  2327d2:	cc                   	int3   
  2327d3:	cc                   	int3   
  2327d4:	cc                   	int3   
  2327d5:	cc                   	int3   
  2327d6:	cc                   	int3   
  2327d7:	cc                   	int3   
  2327d8:	cc                   	int3   
  2327d9:	cc                   	int3   
  2327da:	cc                   	int3   
  2327db:	cc                   	int3   
  2327dc:	cc                   	int3   
  2327dd:	cc                   	int3   
  2327de:	cc                   	int3   
  2327df:	cc                   	int3   

00000000002327e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>:
  2327e0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2327e7:	48 8b 07             	mov    (%rdi),%rax
  2327ea:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  2327f1:	00 
  2327f2:	45 31 c9             	xor    %r9d,%r9d
  2327f5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  2327fb:	48 89 c2             	mov    %rax,%rdx
  2327fe:	66 90                	xchg   %ax,%ax
  232800:	48 c1 ea 04          	shr    $0x4,%rdx
  232804:	89 c1                	mov    %eax,%ecx
  232806:	80 e1 0f             	and    $0xf,%cl
  232809:	80 f9 0a             	cmp    $0xa,%cl
  23280c:	bf 37 00 00 00       	mov    $0x37,%edi
  232811:	41 0f 42 fa          	cmovb  %r10d,%edi
  232815:	40 00 cf             	add    %cl,%dil
  232818:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23281c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  232820:	49 83 c1 01          	add    $0x1,%r9
  232824:	48 83 f8 0f          	cmp    $0xf,%rax
  232828:	48 89 d0             	mov    %rdx,%rax
  23282b:	77 d3                	ja     232800 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x20>
  23282d:	bf 80 00 00 00       	mov    $0x80,%edi
  232832:	4c 29 cf             	sub    %r9,%rdi
  232835:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  23283c:	73 21                	jae    23285f <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x7f>
  23283e:	48 8d 15 91 18 fd ff 	lea    -0x2e76f(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  232845:	b9 02 00 00 00       	mov    $0x2,%ecx
  23284a:	48 89 f7             	mov    %rsi,%rdi
  23284d:	be 01 00 00 00       	mov    $0x1,%esi
  232852:	e8 29 27 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  232857:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  23285e:	c3                   	retq   
  23285f:	48 8d 15 72 84 00 00 	lea    0x8472(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  232866:	be 80 00 00 00       	mov    $0x80,%esi
  23286b:	e8 f0 0e 00 00       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  232870:	0f 0b                	ud2    
  232872:	cc                   	int3   
  232873:	cc                   	int3   
  232874:	cc                   	int3   
  232875:	cc                   	int3   
  232876:	cc                   	int3   
  232877:	cc                   	int3   
  232878:	cc                   	int3   
  232879:	cc                   	int3   
  23287a:	cc                   	int3   
  23287b:	cc                   	int3   
  23287c:	cc                   	int3   
  23287d:	cc                   	int3   
  23287e:	cc                   	int3   
  23287f:	cc                   	int3   

0000000000232880 <_ZN4core3ptr25drop_in_place$LT$char$GT$17h7170306f6109ec38E.llvm.142292087146638061>:
  232880:	c3                   	retq   
  232881:	cc                   	int3   
  232882:	cc                   	int3   
  232883:	cc                   	int3   
  232884:	cc                   	int3   
  232885:	cc                   	int3   
  232886:	cc                   	int3   
  232887:	cc                   	int3   
  232888:	cc                   	int3   
  232889:	cc                   	int3   
  23288a:	cc                   	int3   
  23288b:	cc                   	int3   
  23288c:	cc                   	int3   
  23288d:	cc                   	int3   
  23288e:	cc                   	int3   
  23288f:	cc                   	int3   

0000000000232890 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>:
  232890:	48 83 ec 78          	sub    $0x78,%rsp
  232894:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  232899:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23289e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2328a3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2328a8:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  2328ad:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2328b2:	48 8d 05 87 3c 00 00 	lea    0x3c87(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  2328b9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2328be:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2328c3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2328c8:	48 8d 05 b1 39 00 00 	lea    0x39b1(%rip),%rax        # 236280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  2328cf:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2328d4:	48 8d 05 15 84 00 00 	lea    0x8415(%rip),%rax        # 23acf0 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x18>
  2328db:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2328e0:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
  2328e7:	00 00 
  2328e9:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  2328f0:	00 00 
  2328f2:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  2328f7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2328fc:	48 c7 44 24 70 02 00 	movq   $0x2,0x70(%rsp)
  232903:	00 00 
  232905:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  23290a:	4c 89 c6             	mov    %r8,%rsi
  23290d:	e8 1e 0c 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  232912:	0f 0b                	ud2    
  232914:	cc                   	int3   
  232915:	cc                   	int3   
  232916:	cc                   	int3   
  232917:	cc                   	int3   
  232918:	cc                   	int3   
  232919:	cc                   	int3   
  23291a:	cc                   	int3   
  23291b:	cc                   	int3   
  23291c:	cc                   	int3   
  23291d:	cc                   	int3   
  23291e:	cc                   	int3   
  23291f:	cc                   	int3   

0000000000232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>:
  232920:	55                   	push   %rbp
  232921:	41 57                	push   %r15
  232923:	41 56                	push   %r14
  232925:	41 55                	push   %r13
  232927:	41 54                	push   %r12
  232929:	53                   	push   %rbx
  23292a:	50                   	push   %rax
  23292b:	48 85 d2             	test   %rdx,%rdx
  23292e:	0f 84 83 01 00 00    	je     232ab7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  232934:	49 89 d5             	mov    %rdx,%r13
  232937:	49 89 f6             	mov    %rsi,%r14
  23293a:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  23293e:	4c 8b 3f             	mov    (%rdi),%r15
  232941:	48 8b 47 08          	mov    0x8(%rdi),%rax
  232945:	48 89 04 24          	mov    %rax,(%rsp)
  232949:	eb 2d                	jmp    232978 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x58>
  23294b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  232950:	4c 89 ff             	mov    %r15,%rdi
  232953:	4c 89 f6             	mov    %r14,%rsi
  232956:	31 d2                	xor    %edx,%edx
  232958:	48 8b 04 24          	mov    (%rsp),%rax
  23295c:	ff 50 18             	callq  *0x18(%rax)
  23295f:	bb 00 00 00 00       	mov    $0x0,%ebx
  232964:	84 c0                	test   %al,%al
  232966:	0f 85 47 01 00 00    	jne    232ab3 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  23296c:	49 01 de             	add    %rbx,%r14
  23296f:	49 29 dd             	sub    %rbx,%r13
  232972:	0f 84 3f 01 00 00    	je     232ab7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  232978:	80 7d 00 00          	cmpb   $0x0,0x0(%rbp)
  23297c:	74 1e                	je     23299c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x7c>
  23297e:	ba 04 00 00 00       	mov    $0x4,%edx
  232983:	4c 89 ff             	mov    %r15,%rdi
  232986:	48 8d 35 8f df fc ff 	lea    -0x32071(%rip),%rsi        # 20091c <str.2+0xdc>
  23298d:	48 8b 04 24          	mov    (%rsp),%rax
  232991:	ff 50 18             	callq  *0x18(%rax)
  232994:	84 c0                	test   %al,%al
  232996:	0f 85 17 01 00 00    	jne    232ab3 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  23299c:	45 31 e4             	xor    %r12d,%r12d
  23299f:	4c 89 e8             	mov    %r13,%rax
  2329a2:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  2329a6:	48 83 f8 10          	cmp    $0x10,%rax
  2329aa:	72 24                	jb     2329d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  2329ac:	0f 1f 40 00          	nopl   0x0(%rax)
  2329b0:	bf 0a 00 00 00       	mov    $0xa,%edi
  2329b5:	48 89 c2             	mov    %rax,%rdx
  2329b8:	e8 c3 17 00 00       	callq  234180 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>
  2329bd:	48 83 f8 01          	cmp    $0x1,%rax
  2329c1:	74 4d                	je     232a10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  2329c3:	e9 88 00 00 00       	jmpq   232a50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  2329c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  2329cf:	00 
  2329d0:	31 d2                	xor    %edx,%edx
  2329d2:	48 85 c0             	test   %rax,%rax
  2329d5:	74 1b                	je     2329f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xd2>
  2329d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  2329de:	00 00 
  2329e0:	80 3c 16 0a          	cmpb   $0xa,(%rsi,%rdx,1)
  2329e4:	74 1a                	je     232a00 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xe0>
  2329e6:	48 83 c2 01          	add    $0x1,%rdx
  2329ea:	48 39 d0             	cmp    %rdx,%rax
  2329ed:	75 f1                	jne    2329e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xc0>
  2329ef:	48 89 c2             	mov    %rax,%rdx
  2329f2:	31 c0                	xor    %eax,%eax
  2329f4:	48 83 f8 01          	cmp    $0x1,%rax
  2329f8:	74 16                	je     232a10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  2329fa:	eb 54                	jmp    232a50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  2329fc:	0f 1f 40 00          	nopl   0x0(%rax)
  232a00:	b8 01 00 00 00       	mov    $0x1,%eax
  232a05:	48 83 f8 01          	cmp    $0x1,%rax
  232a09:	75 45                	jne    232a50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  232a0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  232a10:	49 01 d4             	add    %rdx,%r12
  232a13:	4c 89 e3             	mov    %r12,%rbx
  232a16:	48 ff c3             	inc    %rbx
  232a19:	74 0c                	je     232a27 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  232a1b:	49 39 dd             	cmp    %rbx,%r13
  232a1e:	72 07                	jb     232a27 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  232a20:	43 80 3c 26 0a       	cmpb   $0xa,(%r14,%r12,1)
  232a25:	74 66                	je     232a8d <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x16d>
  232a27:	4c 89 e8             	mov    %r13,%rax
  232a2a:	48 29 d8             	sub    %rbx,%rax
  232a2d:	72 21                	jb     232a50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  232a2f:	49 89 dc             	mov    %rbx,%r12
  232a32:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  232a36:	48 83 f8 10          	cmp    $0x10,%rax
  232a3a:	72 94                	jb     2329d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  232a3c:	e9 6f ff ff ff       	jmpq   2329b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x90>
  232a41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  232a48:	00 00 00 
  232a4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  232a50:	c6 45 00 00          	movb   $0x0,0x0(%rbp)
  232a54:	4c 89 eb             	mov    %r13,%rbx
  232a57:	4d 85 ed             	test   %r13,%r13
  232a5a:	0f 84 f0 fe ff ff    	je     232950 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x30>
  232a60:	49 39 dd             	cmp    %rbx,%r13
  232a63:	76 31                	jbe    232a96 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x176>
  232a65:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  232a6a:	7e 5c                	jle    232ac8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  232a6c:	4c 89 ff             	mov    %r15,%rdi
  232a6f:	4c 89 f6             	mov    %r14,%rsi
  232a72:	48 89 da             	mov    %rbx,%rdx
  232a75:	48 8b 04 24          	mov    (%rsp),%rax
  232a79:	ff 50 18             	callq  *0x18(%rax)
  232a7c:	84 c0                	test   %al,%al
  232a7e:	75 33                	jne    232ab3 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  232a80:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  232a85:	0f 8f e1 fe ff ff    	jg     23296c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  232a8b:	eb 54                	jmp    232ae1 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1c1>
  232a8d:	c6 45 00 01          	movb   $0x1,0x0(%rbp)
  232a91:	49 39 dd             	cmp    %rbx,%r13
  232a94:	77 cf                	ja     232a65 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x145>
  232a96:	75 30                	jne    232ac8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  232a98:	4c 89 ff             	mov    %r15,%rdi
  232a9b:	4c 89 f6             	mov    %r14,%rsi
  232a9e:	4c 89 ea             	mov    %r13,%rdx
  232aa1:	48 8b 04 24          	mov    (%rsp),%rax
  232aa5:	ff 50 18             	callq  *0x18(%rax)
  232aa8:	4c 89 eb             	mov    %r13,%rbx
  232aab:	84 c0                	test   %al,%al
  232aad:	0f 84 b9 fe ff ff    	je     23296c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  232ab3:	b0 01                	mov    $0x1,%al
  232ab5:	eb 02                	jmp    232ab9 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x199>
  232ab7:	31 c0                	xor    %eax,%eax
  232ab9:	48 83 c4 08          	add    $0x8,%rsp
  232abd:	5b                   	pop    %rbx
  232abe:	41 5c                	pop    %r12
  232ac0:	41 5d                	pop    %r13
  232ac2:	41 5e                	pop    %r14
  232ac4:	41 5f                	pop    %r15
  232ac6:	5d                   	pop    %rbp
  232ac7:	c3                   	retq   
  232ac8:	4c 8d 05 41 82 00 00 	lea    0x8241(%rip),%r8        # 23ad10 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x38>
  232acf:	4c 89 f7             	mov    %r14,%rdi
  232ad2:	4c 89 ee             	mov    %r13,%rsi
  232ad5:	31 d2                	xor    %edx,%edx
  232ad7:	48 89 d9             	mov    %rbx,%rcx
  232ada:	e8 c1 1b 00 00       	callq  2346a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  232adf:	0f 0b                	ud2    
  232ae1:	4c 8d 05 40 82 00 00 	lea    0x8240(%rip),%r8        # 23ad28 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x50>
  232ae8:	4c 89 f7             	mov    %r14,%rdi
  232aeb:	4c 89 ee             	mov    %r13,%rsi
  232aee:	48 89 da             	mov    %rbx,%rdx
  232af1:	4c 89 e9             	mov    %r13,%rcx
  232af4:	e8 a7 1b 00 00       	callq  2346a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  232af9:	0f 0b                	ud2    
  232afb:	cc                   	int3   
  232afc:	cc                   	int3   
  232afd:	cc                   	int3   
  232afe:	cc                   	int3   
  232aff:	cc                   	int3   

0000000000232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>:
  232b00:	55                   	push   %rbp
  232b01:	41 57                	push   %r15
  232b03:	41 56                	push   %r14
  232b05:	41 55                	push   %r13
  232b07:	41 54                	push   %r12
  232b09:	53                   	push   %rbx
  232b0a:	48 83 ec 68          	sub    $0x68,%rsp
  232b0e:	48 89 fb             	mov    %rdi,%rbx
  232b11:	41 b4 01             	mov    $0x1,%r12b
  232b14:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  232b18:	74 1a                	je     232b34 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x34>
  232b1a:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  232b1e:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  232b22:	48 89 d8             	mov    %rbx,%rax
  232b25:	48 83 c4 68          	add    $0x68,%rsp
  232b29:	5b                   	pop    %rbx
  232b2a:	41 5c                	pop    %r12
  232b2c:	41 5d                	pop    %r13
  232b2e:	41 5e                	pop    %r14
  232b30:	41 5f                	pop    %r15
  232b32:	5d                   	pop    %rbp
  232b33:	c3                   	retq   
  232b34:	49 89 cf             	mov    %rcx,%r15
  232b37:	49 89 d5             	mov    %rdx,%r13
  232b3a:	49 89 f6             	mov    %rsi,%r14
  232b3d:	48 8b 2b             	mov    (%rbx),%rbp
  232b40:	8b 45 30             	mov    0x30(%rbp),%eax
  232b43:	8a 4b 09             	mov    0x9(%rbx),%cl
  232b46:	a8 04                	test   $0x4,%al
  232b48:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  232b4d:	75 73                	jne    232bc2 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xc2>
  232b4f:	31 d2                	xor    %edx,%edx
  232b51:	84 c9                	test   %cl,%cl
  232b53:	48 8d 05 c8 16 fd ff 	lea    -0x2e938(%rip),%rax        # 204222 <anon.8c5785e28e68a0869ce162bce53fbf2c.27.llvm.142292087146638061>
  232b5a:	48 8d 35 bf 16 fd ff 	lea    -0x2e941(%rip),%rsi        # 204220 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  232b61:	48 0f 44 f0          	cmove  %rax,%rsi
  232b65:	0f 94 c2             	sete   %dl
  232b68:	48 83 ca 02          	or     $0x2,%rdx
  232b6c:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232b70:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232b74:	ff 50 18             	callq  *0x18(%rax)
  232b77:	84 c0                	test   %al,%al
  232b79:	75 9f                	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232b7b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232b7f:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232b83:	4c 89 f6             	mov    %r14,%rsi
  232b86:	4c 89 ea             	mov    %r13,%rdx
  232b89:	ff 50 18             	callq  *0x18(%rax)
  232b8c:	84 c0                	test   %al,%al
  232b8e:	75 8a                	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232b90:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232b94:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232b98:	48 8d 35 01 16 fd ff 	lea    -0x2e9ff(%rip),%rsi        # 2041a0 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  232b9f:	ba 02 00 00 00       	mov    $0x2,%edx
  232ba4:	ff 50 18             	callq  *0x18(%rax)
  232ba7:	84 c0                	test   %al,%al
  232ba9:	0f 85 6b ff ff ff    	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232baf:	4c 89 ff             	mov    %r15,%rdi
  232bb2:	48 89 ee             	mov    %rbp,%rsi
  232bb5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232bba:	ff 50 18             	callq  *0x18(%rax)
  232bbd:	e9 f5 00 00 00       	jmpq   232cb7 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1b7>
  232bc2:	84 c9                	test   %cl,%cl
  232bc4:	75 22                	jne    232be8 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xe8>
  232bc6:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232bca:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232bce:	48 8d 35 46 16 fd ff 	lea    -0x2e9ba(%rip),%rsi        # 20421b <anon.8c5785e28e68a0869ce162bce53fbf2c.24.llvm.142292087146638061>
  232bd5:	ba 03 00 00 00       	mov    $0x3,%edx
  232bda:	ff 50 18             	callq  *0x18(%rax)
  232bdd:	84 c0                	test   %al,%al
  232bdf:	0f 85 35 ff ff ff    	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232be5:	8b 45 30             	mov    0x30(%rbp),%eax
  232be8:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  232bed:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  232bf1:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  232bf5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  232bfa:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  232bff:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  232c04:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  232c09:	8b 4d 34             	mov    0x34(%rbp),%ecx
  232c0c:	8a 55 38             	mov    0x38(%rbp),%dl
  232c0f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  232c13:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  232c17:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  232c1b:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  232c1f:	89 44 24 58          	mov    %eax,0x58(%rsp)
  232c23:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
  232c27:	88 54 24 60          	mov    %dl,0x60(%rsp)
  232c2b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  232c30:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  232c35:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  232c3a:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  232c3f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  232c44:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  232c49:	48 8d 05 60 84 00 00 	lea    0x8460(%rip),%rax        # 23b0b0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  232c50:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  232c55:	4c 89 f6             	mov    %r14,%rsi
  232c58:	4c 89 ea             	mov    %r13,%rdx
  232c5b:	e8 c0 fc ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  232c60:	84 c0                	test   %al,%al
  232c62:	0f 85 b2 fe ff ff    	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232c68:	48 8d 35 31 15 fd ff 	lea    -0x2eacf(%rip),%rsi        # 2041a0 <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  232c6f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  232c74:	ba 02 00 00 00       	mov    $0x2,%edx
  232c79:	e8 a2 fc ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  232c7e:	84 c0                	test   %al,%al
  232c80:	0f 85 94 fe ff ff    	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232c86:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  232c8b:	4c 89 ff             	mov    %r15,%rdi
  232c8e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  232c93:	ff 50 18             	callq  *0x18(%rax)
  232c96:	84 c0                	test   %al,%al
  232c98:	0f 85 7c fe ff ff    	jne    232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232c9e:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  232ca3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  232ca8:	48 8d 35 6f 15 fd ff 	lea    -0x2ea91(%rip),%rsi        # 20421e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  232caf:	ba 02 00 00 00       	mov    $0x2,%edx
  232cb4:	ff 50 18             	callq  *0x18(%rax)
  232cb7:	41 89 c4             	mov    %eax,%r12d
  232cba:	e9 5b fe ff ff       	jmpq   232b1a <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  232cbf:	cc                   	int3   

0000000000232cc0 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>:
  232cc0:	53                   	push   %rbx
  232cc1:	80 7f 09 00          	cmpb   $0x0,0x9(%rdi)
  232cc5:	8a 47 08             	mov    0x8(%rdi),%al
  232cc8:	74 42                	je     232d0c <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x4c>
  232cca:	48 89 fb             	mov    %rdi,%rbx
  232ccd:	84 c0                	test   %al,%al
  232ccf:	b0 01                	mov    $0x1,%al
  232cd1:	75 36                	jne    232d09 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x49>
  232cd3:	48 8b 03             	mov    (%rbx),%rax
  232cd6:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  232cda:	75 16                	jne    232cf2 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x32>
  232cdc:	48 8b 78 20          	mov    0x20(%rax),%rdi
  232ce0:	48 8b 40 28          	mov    0x28(%rax),%rax
  232ce4:	48 8d 35 3b 15 fd ff 	lea    -0x2eac5(%rip),%rsi        # 204226 <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  232ceb:	ba 02 00 00 00       	mov    $0x2,%edx
  232cf0:	eb 14                	jmp    232d06 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x46>
  232cf2:	48 8b 78 20          	mov    0x20(%rax),%rdi
  232cf6:	48 8b 40 28          	mov    0x28(%rax),%rax
  232cfa:	48 8d 35 24 15 fd ff 	lea    -0x2eadc(%rip),%rsi        # 204225 <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  232d01:	ba 01 00 00 00       	mov    $0x1,%edx
  232d06:	ff 50 18             	callq  *0x18(%rax)
  232d09:	88 43 08             	mov    %al,0x8(%rbx)
  232d0c:	5b                   	pop    %rbx
  232d0d:	c3                   	retq   
  232d0e:	cc                   	int3   
  232d0f:	cc                   	int3   

0000000000232d10 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>:
  232d10:	41 57                	push   %r15
  232d12:	41 56                	push   %r14
  232d14:	41 55                	push   %r13
  232d16:	41 54                	push   %r12
  232d18:	53                   	push   %rbx
  232d19:	48 83 ec 60          	sub    $0x60,%rsp
  232d1d:	48 89 fb             	mov    %rdi,%rbx
  232d20:	80 7f 10 00          	cmpb   $0x0,0x10(%rdi)
  232d24:	74 22                	je     232d48 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x38>
  232d26:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  232d2a:	b0 01                	mov    $0x1,%al
  232d2c:	88 43 10             	mov    %al,0x10(%rbx)
  232d2f:	49 83 c5 01          	add    $0x1,%r13
  232d33:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
  232d37:	48 89 d8             	mov    %rbx,%rax
  232d3a:	48 83 c4 60          	add    $0x60,%rsp
  232d3e:	5b                   	pop    %rbx
  232d3f:	41 5c                	pop    %r12
  232d41:	41 5d                	pop    %r13
  232d43:	41 5e                	pop    %r14
  232d45:	41 5f                	pop    %r15
  232d47:	c3                   	retq   
  232d48:	49 89 d6             	mov    %rdx,%r14
  232d4b:	49 89 f7             	mov    %rsi,%r15
  232d4e:	4c 8b 23             	mov    (%rbx),%r12
  232d51:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  232d55:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  232d5a:	a8 04                	test   $0x4,%al
  232d5c:	75 43                	jne    232da1 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x91>
  232d5e:	31 c0                	xor    %eax,%eax
  232d60:	4d 85 ed             	test   %r13,%r13
  232d63:	0f 94 c0             	sete   %al
  232d66:	48 8d 0d bd 14 fd ff 	lea    -0x2eb43(%rip),%rcx        # 20422a <anon.8c5785e28e68a0869ce162bce53fbf2c.34.llvm.142292087146638061>
  232d6d:	48 8d 35 ac 14 fd ff 	lea    -0x2eb54(%rip),%rsi        # 204220 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  232d74:	48 0f 44 f1          	cmove  %rcx,%rsi
  232d78:	ba 02 00 00 00       	mov    $0x2,%edx
  232d7d:	48 29 c2             	sub    %rax,%rdx
  232d80:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  232d85:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  232d8a:	ff 50 18             	callq  *0x18(%rax)
  232d8d:	89 c1                	mov    %eax,%ecx
  232d8f:	b0 01                	mov    $0x1,%al
  232d91:	84 c9                	test   %cl,%cl
  232d93:	75 97                	jne    232d2c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  232d95:	4c 89 ff             	mov    %r15,%rdi
  232d98:	4c 89 e6             	mov    %r12,%rsi
  232d9b:	41 ff 56 18          	callq  *0x18(%r14)
  232d9f:	eb 8b                	jmp    232d2c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  232da1:	4d 85 ed             	test   %r13,%r13
  232da4:	75 2c                	jne    232dd2 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xc2>
  232da6:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  232dab:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  232db0:	48 8d 35 71 14 fd ff 	lea    -0x2eb8f(%rip),%rsi        # 204228 <anon.8c5785e28e68a0869ce162bce53fbf2c.33.llvm.142292087146638061>
  232db7:	ba 02 00 00 00       	mov    $0x2,%edx
  232dbc:	ff 50 18             	callq  *0x18(%rax)
  232dbf:	84 c0                	test   %al,%al
  232dc1:	74 0a                	je     232dcd <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xbd>
  232dc3:	b0 01                	mov    $0x1,%al
  232dc5:	45 31 ed             	xor    %r13d,%r13d
  232dc8:	e9 5f ff ff ff       	jmpq   232d2c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  232dcd:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  232dd2:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  232dd7:	49 8b 4c 24 20       	mov    0x20(%r12),%rcx
  232ddc:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
  232de1:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  232de6:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  232deb:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  232df0:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  232df5:	41 8b 4c 24 34       	mov    0x34(%r12),%ecx
  232dfa:	41 8a 54 24 38       	mov    0x38(%r12),%dl
  232dff:	49 8b 34 24          	mov    (%r12),%rsi
  232e03:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  232e08:	4d 8b 44 24 10       	mov    0x10(%r12),%r8
  232e0d:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
  232e12:	89 44 24 38          	mov    %eax,0x38(%rsp)
  232e16:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  232e1a:	88 54 24 40          	mov    %dl,0x40(%rsp)
  232e1e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  232e23:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  232e28:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  232e2d:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
  232e32:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  232e37:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  232e3c:	48 8d 05 6d 82 00 00 	lea    0x826d(%rip),%rax        # 23b0b0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  232e43:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  232e48:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  232e4d:	4c 89 ff             	mov    %r15,%rdi
  232e50:	41 ff 56 18          	callq  *0x18(%r14)
  232e54:	84 c0                	test   %al,%al
  232e56:	0f 85 ce fe ff ff    	jne    232d2a <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1a>
  232e5c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  232e61:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  232e66:	48 8d 35 b1 13 fd ff 	lea    -0x2ec4f(%rip),%rsi        # 20421e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  232e6d:	ba 02 00 00 00       	mov    $0x2,%edx
  232e72:	ff 50 18             	callq  *0x18(%rax)
  232e75:	e9 b2 fe ff ff       	jmpq   232d2c <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  232e7a:	cc                   	int3   
  232e7b:	cc                   	int3   
  232e7c:	cc                   	int3   
  232e7d:	cc                   	int3   
  232e7e:	cc                   	int3   
  232e7f:	cc                   	int3   

0000000000232e80 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>:
  232e80:	55                   	push   %rbp
  232e81:	53                   	push   %rbx
  232e82:	50                   	push   %rax
  232e83:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  232e87:	8a 47 10             	mov    0x10(%rdi),%al
  232e8a:	48 85 c9             	test   %rcx,%rcx
  232e8d:	74 5c                	je     232eeb <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x6b>
  232e8f:	48 89 fb             	mov    %rdi,%rbx
  232e92:	40 b5 01             	mov    $0x1,%bpl
  232e95:	84 c0                	test   %al,%al
  232e97:	75 4c                	jne    232ee5 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  232e99:	48 83 f9 01          	cmp    $0x1,%rcx
  232e9d:	75 2a                	jne    232ec9 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  232e9f:	80 7b 11 00          	cmpb   $0x0,0x11(%rbx)
  232ea3:	74 24                	je     232ec9 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  232ea5:	48 8b 03             	mov    (%rbx),%rax
  232ea8:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  232eac:	75 1b                	jne    232ec9 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  232eae:	48 8b 78 20          	mov    0x20(%rax),%rdi
  232eb2:	48 8b 40 28          	mov    0x28(%rax),%rax
  232eb6:	48 8d 35 6e 13 fd ff 	lea    -0x2ec92(%rip),%rsi        # 20422b <anon.8c5785e28e68a0869ce162bce53fbf2c.35.llvm.142292087146638061>
  232ebd:	ba 01 00 00 00       	mov    $0x1,%edx
  232ec2:	ff 50 18             	callq  *0x18(%rax)
  232ec5:	84 c0                	test   %al,%al
  232ec7:	75 1c                	jne    232ee5 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  232ec9:	48 8b 03             	mov    (%rbx),%rax
  232ecc:	48 8b 78 20          	mov    0x20(%rax),%rdi
  232ed0:	48 8b 40 28          	mov    0x28(%rax),%rax
  232ed4:	48 8d 35 51 13 fd ff 	lea    -0x2ecaf(%rip),%rsi        # 20422c <anon.8c5785e28e68a0869ce162bce53fbf2c.36.llvm.142292087146638061>
  232edb:	ba 01 00 00 00       	mov    $0x1,%edx
  232ee0:	ff 50 18             	callq  *0x18(%rax)
  232ee3:	89 c5                	mov    %eax,%ebp
  232ee5:	40 88 6b 10          	mov    %bpl,0x10(%rbx)
  232ee9:	89 e8                	mov    %ebp,%eax
  232eeb:	48 83 c4 08          	add    $0x8,%rsp
  232eef:	5b                   	pop    %rbx
  232ef0:	5d                   	pop    %rbp
  232ef1:	c3                   	retq   
  232ef2:	cc                   	int3   
  232ef3:	cc                   	int3   
  232ef4:	cc                   	int3   
  232ef5:	cc                   	int3   
  232ef6:	cc                   	int3   
  232ef7:	cc                   	int3   
  232ef8:	cc                   	int3   
  232ef9:	cc                   	int3   
  232efa:	cc                   	int3   
  232efb:	cc                   	int3   
  232efc:	cc                   	int3   
  232efd:	cc                   	int3   
  232efe:	cc                   	int3   
  232eff:	cc                   	int3   

0000000000232f00 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061>:
  232f00:	55                   	push   %rbp
  232f01:	41 57                	push   %r15
  232f03:	41 56                	push   %r14
  232f05:	41 54                	push   %r12
  232f07:	53                   	push   %rbx
  232f08:	48 83 ec 60          	sub    $0x60,%rsp
  232f0c:	48 89 fb             	mov    %rdi,%rbx
  232f0f:	41 b4 01             	mov    $0x1,%r12b
  232f12:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  232f16:	74 15                	je     232f2d <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x2d>
  232f18:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  232f1c:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  232f20:	48 83 c4 60          	add    $0x60,%rsp
  232f24:	5b                   	pop    %rbx
  232f25:	41 5c                	pop    %r12
  232f27:	41 5e                	pop    %r14
  232f29:	41 5f                	pop    %r15
  232f2b:	5d                   	pop    %rbp
  232f2c:	c3                   	retq   
  232f2d:	49 89 d6             	mov    %rdx,%r14
  232f30:	49 89 f7             	mov    %rsi,%r15
  232f33:	48 8b 2b             	mov    (%rbx),%rbp
  232f36:	8b 45 30             	mov    0x30(%rbp),%eax
  232f39:	8a 4b 09             	mov    0x9(%rbx),%cl
  232f3c:	a8 04                	test   $0x4,%al
  232f3e:	75 2e                	jne    232f6e <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x6e>
  232f40:	84 c9                	test   %cl,%cl
  232f42:	74 1b                	je     232f5f <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x5f>
  232f44:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232f48:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232f4c:	48 8d 35 cd 12 fd ff 	lea    -0x2ed33(%rip),%rsi        # 204220 <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  232f53:	ba 02 00 00 00       	mov    $0x2,%edx
  232f58:	ff 50 18             	callq  *0x18(%rax)
  232f5b:	84 c0                	test   %al,%al
  232f5d:	75 b9                	jne    232f18 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  232f5f:	4c 89 ff             	mov    %r15,%rdi
  232f62:	48 89 ee             	mov    %rbp,%rsi
  232f65:	41 ff 56 18          	callq  *0x18(%r14)
  232f69:	41 89 c4             	mov    %eax,%r12d
  232f6c:	eb aa                	jmp    232f18 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  232f6e:	84 c9                	test   %cl,%cl
  232f70:	75 1e                	jne    232f90 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x90>
  232f72:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  232f76:	48 8b 45 28          	mov    0x28(%rbp),%rax
  232f7a:	48 8d 35 ac 12 fd ff 	lea    -0x2ed54(%rip),%rsi        # 20422d <anon.8c5785e28e68a0869ce162bce53fbf2c.37.llvm.142292087146638061>
  232f81:	ba 01 00 00 00       	mov    $0x1,%edx
  232f86:	ff 50 18             	callq  *0x18(%rax)
  232f89:	84 c0                	test   %al,%al
  232f8b:	75 8b                	jne    232f18 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  232f8d:	8b 45 30             	mov    0x30(%rbp),%eax
  232f90:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  232f95:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  232f99:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  232f9d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  232fa2:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  232fa7:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  232fac:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  232fb1:	8b 4d 34             	mov    0x34(%rbp),%ecx
  232fb4:	8a 55 38             	mov    0x38(%rbp),%dl
  232fb7:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  232fbb:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  232fbf:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  232fc3:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  232fc7:	89 44 24 38          	mov    %eax,0x38(%rsp)
  232fcb:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  232fcf:	88 54 24 40          	mov    %dl,0x40(%rsp)
  232fd3:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  232fd8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  232fdd:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  232fe2:	48 89 6c 24 20       	mov    %rbp,0x20(%rsp)
  232fe7:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  232fec:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  232ff1:	48 8d 05 b8 80 00 00 	lea    0x80b8(%rip),%rax        # 23b0b0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  232ff8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  232ffd:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  233002:	4c 89 ff             	mov    %r15,%rdi
  233005:	41 ff 56 18          	callq  *0x18(%r14)
  233009:	84 c0                	test   %al,%al
  23300b:	0f 85 07 ff ff ff    	jne    232f18 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  233011:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  233016:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  23301b:	48 8d 35 fc 11 fd ff 	lea    -0x2ee04(%rip),%rsi        # 20421e <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  233022:	ba 02 00 00 00       	mov    $0x2,%edx
  233027:	ff 50 18             	callq  *0x18(%rax)
  23302a:	41 89 c4             	mov    %eax,%r12d
  23302d:	e9 e6 fe ff ff       	jmpq   232f18 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061+0x18>
  233032:	cc                   	int3   
  233033:	cc                   	int3   
  233034:	cc                   	int3   
  233035:	cc                   	int3   
  233036:	cc                   	int3   
  233037:	cc                   	int3   
  233038:	cc                   	int3   
  233039:	cc                   	int3   
  23303a:	cc                   	int3   
  23303b:	cc                   	int3   
  23303c:	cc                   	int3   
  23303d:	cc                   	int3   
  23303e:	cc                   	int3   
  23303f:	cc                   	int3   

0000000000233040 <_ZN4core3fmt8builders8DebugSet5entry17ha462e373088cbeaaE>:
  233040:	53                   	push   %rbx
  233041:	48 89 fb             	mov    %rdi,%rbx
  233044:	e8 b7 fe ff ff       	callq  232f00 <_ZN4core3fmt8builders10DebugInner5entry17haede7c3b9c883841E.llvm.142292087146638061>
  233049:	48 89 d8             	mov    %rbx,%rax
  23304c:	5b                   	pop    %rbx
  23304d:	c3                   	retq   
  23304e:	cc                   	int3   
  23304f:	cc                   	int3   

0000000000233050 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E>:
  233050:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  233054:	74 03                	je     233059 <_ZN4core3fmt8builders9DebugList6finish17h08321570a49e5d02E+0x9>
  233056:	b0 01                	mov    $0x1,%al
  233058:	c3                   	retq   
  233059:	48 8b 07             	mov    (%rdi),%rax
  23305c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  233060:	48 8b 40 28          	mov    0x28(%rax),%rax
  233064:	48 8b 40 18          	mov    0x18(%rax),%rax
  233068:	48 8d 35 c0 11 fd ff 	lea    -0x2ee40(%rip),%rsi        # 20422f <anon.8c5785e28e68a0869ce162bce53fbf2c.43.llvm.142292087146638061>
  23306f:	ba 01 00 00 00       	mov    $0x1,%edx
  233074:	ff e0                	jmpq   *%rax
  233076:	cc                   	int3   
  233077:	cc                   	int3   
  233078:	cc                   	int3   
  233079:	cc                   	int3   
  23307a:	cc                   	int3   
  23307b:	cc                   	int3   
  23307c:	cc                   	int3   
  23307d:	cc                   	int3   
  23307e:	cc                   	int3   
  23307f:	cc                   	int3   

0000000000233080 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E>:
  233080:	50                   	push   %rax
  233081:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  233088:	00 
  233089:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  23308f:	73 16                	jae    2330a7 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x27>
  233091:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  233096:	ba 01 00 00 00       	mov    $0x1,%edx
  23309b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2330a0:	e8 7b f8 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2330a5:	59                   	pop    %rcx
  2330a6:	c3                   	retq   
  2330a7:	89 f0                	mov    %esi,%eax
  2330a9:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  2330af:	73 27                	jae    2330d8 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x58>
  2330b1:	c1 e8 06             	shr    $0x6,%eax
  2330b4:	0c c0                	or     $0xc0,%al
  2330b6:	88 44 24 04          	mov    %al,0x4(%rsp)
  2330ba:	40 80 e6 3f          	and    $0x3f,%sil
  2330be:	40 80 ce 80          	or     $0x80,%sil
  2330c2:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  2330c7:	ba 02 00 00 00       	mov    $0x2,%edx
  2330cc:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2330d1:	e8 4a f8 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2330d6:	59                   	pop    %rcx
  2330d7:	c3                   	retq   
  2330d8:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  2330de:	73 34                	jae    233114 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x94>
  2330e0:	c1 e8 0c             	shr    $0xc,%eax
  2330e3:	0c e0                	or     $0xe0,%al
  2330e5:	88 44 24 04          	mov    %al,0x4(%rsp)
  2330e9:	89 f0                	mov    %esi,%eax
  2330eb:	c1 e8 06             	shr    $0x6,%eax
  2330ee:	24 3f                	and    $0x3f,%al
  2330f0:	0c 80                	or     $0x80,%al
  2330f2:	88 44 24 05          	mov    %al,0x5(%rsp)
  2330f6:	40 80 e6 3f          	and    $0x3f,%sil
  2330fa:	40 80 ce 80          	or     $0x80,%sil
  2330fe:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  233103:	ba 03 00 00 00       	mov    $0x3,%edx
  233108:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  23310d:	e8 0e f8 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  233112:	59                   	pop    %rcx
  233113:	c3                   	retq   
  233114:	c1 e8 12             	shr    $0x12,%eax
  233117:	0c f0                	or     $0xf0,%al
  233119:	88 44 24 04          	mov    %al,0x4(%rsp)
  23311d:	89 f0                	mov    %esi,%eax
  23311f:	c1 e8 0c             	shr    $0xc,%eax
  233122:	24 3f                	and    $0x3f,%al
  233124:	0c 80                	or     $0x80,%al
  233126:	88 44 24 05          	mov    %al,0x5(%rsp)
  23312a:	89 f0                	mov    %esi,%eax
  23312c:	c1 e8 06             	shr    $0x6,%eax
  23312f:	24 3f                	and    $0x3f,%al
  233131:	0c 80                	or     $0x80,%al
  233133:	88 44 24 06          	mov    %al,0x6(%rsp)
  233137:	40 80 e6 3f          	and    $0x3f,%sil
  23313b:	40 80 ce 80          	or     $0x80,%sil
  23313f:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  233144:	ba 04 00 00 00       	mov    $0x4,%edx
  233149:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  23314e:	e8 cd f7 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  233153:	59                   	pop    %rcx
  233154:	c3                   	retq   
  233155:	cc                   	int3   
  233156:	cc                   	int3   
  233157:	cc                   	int3   
  233158:	cc                   	int3   
  233159:	cc                   	int3   
  23315a:	cc                   	int3   
  23315b:	cc                   	int3   
  23315c:	cc                   	int3   
  23315d:	cc                   	int3   
  23315e:	cc                   	int3   
  23315f:	cc                   	int3   

0000000000233160 <_ZN4core3fmt5Write9write_fmt17h3844688a471abbbcE>:
  233160:	48 83 ec 38          	sub    $0x38,%rsp
  233164:	48 89 3c 24          	mov    %rdi,(%rsp)
  233168:	48 8b 46 28          	mov    0x28(%rsi),%rax
  23316c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233171:	48 8b 46 20          	mov    0x20(%rsi),%rax
  233175:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23317a:	48 8b 46 18          	mov    0x18(%rsi),%rax
  23317e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233183:	48 8b 46 10          	mov    0x10(%rsi),%rax
  233187:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23318c:	48 8b 06             	mov    (%rsi),%rax
  23318f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  233193:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  233198:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23319d:	48 8d 35 9c 7b 00 00 	lea    0x7b9c(%rip),%rsi        # 23ad40 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  2331a4:	48 89 e7             	mov    %rsp,%rdi
  2331a7:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  2331ac:	e8 8f 1b 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  2331b1:	48 83 c4 38          	add    $0x38,%rsp
  2331b5:	c3                   	retq   
  2331b6:	cc                   	int3   
  2331b7:	cc                   	int3   
  2331b8:	cc                   	int3   
  2331b9:	cc                   	int3   
  2331ba:	cc                   	int3   
  2331bb:	cc                   	int3   
  2331bc:	cc                   	int3   
  2331bd:	cc                   	int3   
  2331be:	cc                   	int3   
  2331bf:	cc                   	int3   

00000000002331c0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h8d11a5cbe002f1bcE>:
  2331c0:	48 8b 3f             	mov    (%rdi),%rdi
  2331c3:	e9 58 f7 ff ff       	jmpq   232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2331c8:	cc                   	int3   
  2331c9:	cc                   	int3   
  2331ca:	cc                   	int3   
  2331cb:	cc                   	int3   
  2331cc:	cc                   	int3   
  2331cd:	cc                   	int3   
  2331ce:	cc                   	int3   
  2331cf:	cc                   	int3   

00000000002331d0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E>:
  2331d0:	50                   	push   %rax
  2331d1:	48 8b 3f             	mov    (%rdi),%rdi
  2331d4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  2331db:	00 
  2331dc:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  2331e2:	73 16                	jae    2331fa <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x2a>
  2331e4:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  2331e9:	ba 01 00 00 00       	mov    $0x1,%edx
  2331ee:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2331f3:	e8 28 f7 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2331f8:	59                   	pop    %rcx
  2331f9:	c3                   	retq   
  2331fa:	89 f0                	mov    %esi,%eax
  2331fc:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  233202:	73 27                	jae    23322b <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x5b>
  233204:	c1 e8 06             	shr    $0x6,%eax
  233207:	0c c0                	or     $0xc0,%al
  233209:	88 44 24 04          	mov    %al,0x4(%rsp)
  23320d:	40 80 e6 3f          	and    $0x3f,%sil
  233211:	40 80 ce 80          	or     $0x80,%sil
  233215:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  23321a:	ba 02 00 00 00       	mov    $0x2,%edx
  23321f:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  233224:	e8 f7 f6 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  233229:	59                   	pop    %rcx
  23322a:	c3                   	retq   
  23322b:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  233231:	73 34                	jae    233267 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x97>
  233233:	c1 e8 0c             	shr    $0xc,%eax
  233236:	0c e0                	or     $0xe0,%al
  233238:	88 44 24 04          	mov    %al,0x4(%rsp)
  23323c:	89 f0                	mov    %esi,%eax
  23323e:	c1 e8 06             	shr    $0x6,%eax
  233241:	24 3f                	and    $0x3f,%al
  233243:	0c 80                	or     $0x80,%al
  233245:	88 44 24 05          	mov    %al,0x5(%rsp)
  233249:	40 80 e6 3f          	and    $0x3f,%sil
  23324d:	40 80 ce 80          	or     $0x80,%sil
  233251:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  233256:	ba 03 00 00 00       	mov    $0x3,%edx
  23325b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  233260:	e8 bb f6 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  233265:	59                   	pop    %rcx
  233266:	c3                   	retq   
  233267:	c1 e8 12             	shr    $0x12,%eax
  23326a:	0c f0                	or     $0xf0,%al
  23326c:	88 44 24 04          	mov    %al,0x4(%rsp)
  233270:	89 f0                	mov    %esi,%eax
  233272:	c1 e8 0c             	shr    $0xc,%eax
  233275:	24 3f                	and    $0x3f,%al
  233277:	0c 80                	or     $0x80,%al
  233279:	88 44 24 05          	mov    %al,0x5(%rsp)
  23327d:	89 f0                	mov    %esi,%eax
  23327f:	c1 e8 06             	shr    $0x6,%eax
  233282:	24 3f                	and    $0x3f,%al
  233284:	0c 80                	or     $0x80,%al
  233286:	88 44 24 06          	mov    %al,0x6(%rsp)
  23328a:	40 80 e6 3f          	and    $0x3f,%sil
  23328e:	40 80 ce 80          	or     $0x80,%sil
  233292:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  233297:	ba 04 00 00 00       	mov    $0x4,%edx
  23329c:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  2332a1:	e8 7a f6 ff ff       	callq  232920 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  2332a6:	59                   	pop    %rcx
  2332a7:	c3                   	retq   
  2332a8:	cc                   	int3   
  2332a9:	cc                   	int3   
  2332aa:	cc                   	int3   
  2332ab:	cc                   	int3   
  2332ac:	cc                   	int3   
  2332ad:	cc                   	int3   
  2332ae:	cc                   	int3   
  2332af:	cc                   	int3   

00000000002332b0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h2f268ff30ef8847bE>:
  2332b0:	48 83 ec 38          	sub    $0x38,%rsp
  2332b4:	48 8b 07             	mov    (%rdi),%rax
  2332b7:	48 89 04 24          	mov    %rax,(%rsp)
  2332bb:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2332bf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2332c4:	48 8b 46 20          	mov    0x20(%rsi),%rax
  2332c8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2332cd:	48 8b 46 18          	mov    0x18(%rsi),%rax
  2332d1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2332d6:	48 8b 46 10          	mov    0x10(%rsi),%rax
  2332da:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2332df:	48 8b 06             	mov    (%rsi),%rax
  2332e2:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  2332e6:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2332eb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2332f0:	48 8d 35 49 7a 00 00 	lea    0x7a49(%rip),%rsi        # 23ad40 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  2332f7:	48 89 e7             	mov    %rsp,%rdi
  2332fa:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  2332ff:	e8 3c 1a 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  233304:	48 83 c4 38          	add    $0x38,%rsp
  233308:	c3                   	retq   
  233309:	cc                   	int3   
  23330a:	cc                   	int3   
  23330b:	cc                   	int3   
  23330c:	cc                   	int3   
  23330d:	cc                   	int3   
  23330e:	cc                   	int3   
  23330f:	cc                   	int3   

0000000000233310 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>:
  233310:	50                   	push   %rax
  233311:	41 89 f9             	mov    %edi,%r9d
  233314:	41 c1 e1 0b          	shl    $0xb,%r9d
  233318:	b9 20 00 00 00       	mov    $0x20,%ecx
  23331d:	31 c0                	xor    %eax,%eax
  23331f:	4c 8d 05 8e 0f fd ff 	lea    -0x2f072(%rip),%r8        # 2042b4 <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h68677736f581025fE.llvm.142292087146638061>
  233326:	ba 20 00 00 00       	mov    $0x20,%edx
  23332b:	eb 12                	jmp    23333f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  23332d:	0f 1f 00             	nopl   (%rax)
  233330:	48 83 c1 01          	add    $0x1,%rcx
  233334:	48 89 c8             	mov    %rcx,%rax
  233337:	48 89 d1             	mov    %rdx,%rcx
  23333a:	48 29 c1             	sub    %rax,%rcx
  23333d:	76 25                	jbe    233364 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  23333f:	48 d1 e9             	shr    %rcx
  233342:	48 01 c1             	add    %rax,%rcx
  233345:	41 8b 34 88          	mov    (%r8,%rcx,4),%esi
  233349:	c1 e6 0b             	shl    $0xb,%esi
  23334c:	44 39 ce             	cmp    %r9d,%esi
  23334f:	72 df                	jb     233330 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x20>
  233351:	74 0a                	je     23335d <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x4d>
  233353:	48 89 ca             	mov    %rcx,%rdx
  233356:	48 29 c1             	sub    %rax,%rcx
  233359:	77 e4                	ja     23333f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  23335b:	eb 07                	jmp    233364 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  23335d:	48 83 c1 01          	add    $0x1,%rcx
  233361:	48 89 c8             	mov    %rcx,%rax
  233364:	48 83 f8 1f          	cmp    $0x1f,%rax
  233368:	0f 87 a8 00 00 00    	ja     233416 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x106>
  23336e:	41 b9 c3 02 00 00    	mov    $0x2c3,%r9d
  233374:	48 83 f8 1f          	cmp    $0x1f,%rax
  233378:	74 09                	je     233383 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x73>
  23337a:	45 8b 4c 80 04       	mov    0x4(%r8,%rax,4),%r9d
  23337f:	49 c1 e9 15          	shr    $0x15,%r9
  233383:	31 d2                	xor    %edx,%edx
  233385:	48 89 c1             	mov    %rax,%rcx
  233388:	48 83 e9 01          	sub    $0x1,%rcx
  23338c:	72 13                	jb     2333a1 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x91>
  23338e:	48 83 f9 20          	cmp    $0x20,%rcx
  233392:	0f 83 94 00 00 00    	jae    23342c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x11c>
  233398:	ba ff ff 1f 00       	mov    $0x1fffff,%edx
  23339d:	41 23 14 88          	and    (%r8,%rcx,4),%edx
  2333a1:	41 8b 04 80          	mov    (%r8,%rax,4),%eax
  2333a5:	48 c1 e8 15          	shr    $0x15,%rax
  2333a9:	48 89 c1             	mov    %rax,%rcx
  2333ac:	48 f7 d1             	not    %rcx
  2333af:	4c 01 c9             	add    %r9,%rcx
  2333b2:	74 48                	je     2333fc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  2333b4:	29 d7                	sub    %edx,%edi
  2333b6:	48 3d c4 02 00 00    	cmp    $0x2c4,%rax
  2333bc:	b9 c3 02 00 00       	mov    $0x2c3,%ecx
  2333c1:	48 0f 43 c8          	cmovae %rax,%rcx
  2333c5:	49 83 c1 ff          	add    $0xffffffffffffffff,%r9
  2333c9:	31 d2                	xor    %edx,%edx
  2333cb:	4c 8d 05 62 0f fd ff 	lea    -0x2f09e(%rip),%r8        # 204334 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061>
  2333d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2333d9:	00 00 00 
  2333dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2333e0:	48 39 c1             	cmp    %rax,%rcx
  2333e3:	74 1b                	je     233400 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xf0>
  2333e5:	42 0f b6 34 00       	movzbl (%rax,%r8,1),%esi
  2333ea:	01 f2                	add    %esi,%edx
  2333ec:	39 fa                	cmp    %edi,%edx
  2333ee:	77 0c                	ja     2333fc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  2333f0:	48 83 c0 01          	add    $0x1,%rax
  2333f4:	49 39 c1             	cmp    %rax,%r9
  2333f7:	75 e7                	jne    2333e0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xd0>
  2333f9:	4c 89 c8             	mov    %r9,%rax
  2333fc:	24 01                	and    $0x1,%al
  2333fe:	59                   	pop    %rcx
  2333ff:	c3                   	retq   
  233400:	48 8d 15 81 79 00 00 	lea    0x7981(%rip),%rdx        # 23ad88 <anon.8c5785e28e68a0869ce162bce53fbf2c.56.llvm.142292087146638061>
  233407:	be c3 02 00 00       	mov    $0x2c3,%esi
  23340c:	48 89 cf             	mov    %rcx,%rdi
  23340f:	e8 9c 00 00 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  233414:	0f 0b                	ud2    
  233416:	48 8d 15 53 79 00 00 	lea    0x7953(%rip),%rdx        # 23ad70 <anon.8c5785e28e68a0869ce162bce53fbf2c.55.llvm.142292087146638061>
  23341d:	be 20 00 00 00       	mov    $0x20,%esi
  233422:	48 89 c7             	mov    %rax,%rdi
  233425:	e8 86 00 00 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  23342a:	0f 0b                	ud2    
  23342c:	48 8d 15 6d 79 00 00 	lea    0x796d(%rip),%rdx        # 23ada0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061>
  233433:	be 20 00 00 00       	mov    $0x20,%esi
  233438:	48 89 cf             	mov    %rcx,%rdi
  23343b:	e8 70 00 00 00       	callq  2334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  233440:	0f 0b                	ud2    
  233442:	cc                   	int3   
  233443:	cc                   	int3   
  233444:	cc                   	int3   
  233445:	cc                   	int3   
  233446:	cc                   	int3   
  233447:	cc                   	int3   
  233448:	cc                   	int3   
  233449:	cc                   	int3   
  23344a:	cc                   	int3   
  23344b:	cc                   	int3   
  23344c:	cc                   	int3   
  23344d:	cc                   	int3   
  23344e:	cc                   	int3   
  23344f:	cc                   	int3   

0000000000233450 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h1ecee3ae2cf00d6eE.llvm.5832540808935662489>:
  233450:	c3                   	retq   
  233451:	cc                   	int3   
  233452:	cc                   	int3   
  233453:	cc                   	int3   
  233454:	cc                   	int3   
  233455:	cc                   	int3   
  233456:	cc                   	int3   
  233457:	cc                   	int3   
  233458:	cc                   	int3   
  233459:	cc                   	int3   
  23345a:	cc                   	int3   
  23345b:	cc                   	int3   
  23345c:	cc                   	int3   
  23345d:	cc                   	int3   
  23345e:	cc                   	int3   
  23345f:	cc                   	int3   

0000000000233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>:
  233460:	48 83 ec 48          	sub    $0x48,%rsp
  233464:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233469:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23346e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233473:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233478:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  23347f:	00 00 
  233481:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  233488:	00 00 
  23348a:	48 8d 05 67 11 fd ff 	lea    -0x2ee99(%rip),%rax        # 2045f8 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  233491:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  233496:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  23349d:	00 00 
  23349f:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2334a4:	48 89 d6             	mov    %rdx,%rsi
  2334a7:	e8 84 00 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2334ac:	0f 0b                	ud2    
  2334ae:	cc                   	int3   
  2334af:	cc                   	int3   

00000000002334b0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>:
  2334b0:	48 83 ec 68          	sub    $0x68,%rsp
  2334b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2334b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2334be:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2334c3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2334c8:	48 8b 05 59 7c 00 00 	mov    0x7c59(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2334cf:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2334d4:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  2334d9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2334de:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2334e3:	48 8d 05 ee 78 00 00 	lea    0x78ee(%rip),%rax        # 23add8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x38>
  2334ea:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2334ef:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2334f6:	00 00 
  2334f8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  2334ff:	00 00 
  233501:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  233506:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23350b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  233512:	00 00 
  233514:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  233519:	48 89 d6             	mov    %rdx,%rsi
  23351c:	e8 0f 00 00 00       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  233521:	0f 0b                	ud2    
  233523:	cc                   	int3   
  233524:	cc                   	int3   
  233525:	cc                   	int3   
  233526:	cc                   	int3   
  233527:	cc                   	int3   
  233528:	cc                   	int3   
  233529:	cc                   	int3   
  23352a:	cc                   	int3   
  23352b:	cc                   	int3   
  23352c:	cc                   	int3   
  23352d:	cc                   	int3   
  23352e:	cc                   	int3   
  23352f:	cc                   	int3   

0000000000233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>:
  233530:	48 83 ec 28          	sub    $0x28,%rsp
  233534:	48 8d 05 bd 10 fd ff 	lea    -0x2ef43(%rip),%rax        # 2045f8 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  23353b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233540:	48 8d 05 71 78 00 00 	lea    0x7871(%rip),%rax        # 23adb8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x18>
  233547:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  23354c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  233551:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  233556:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  23355b:	e8 00 3d ff ff       	callq  227260 <rust_begin_unwind>
  233560:	0f 0b                	ud2    
  233562:	cc                   	int3   
  233563:	cc                   	int3   
  233564:	cc                   	int3   
  233565:	cc                   	int3   
  233566:	cc                   	int3   
  233567:	cc                   	int3   
  233568:	cc                   	int3   
  233569:	cc                   	int3   
  23356a:	cc                   	int3   
  23356b:	cc                   	int3   
  23356c:	cc                   	int3   
  23356d:	cc                   	int3   
  23356e:	cc                   	int3   
  23356f:	cc                   	int3   

0000000000233570 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>:
  233570:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  233577:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  23357c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  233581:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  233586:	4c 89 44 24 30       	mov    %r8,0x30(%rsp)
  23358b:	40 84 ff             	test   %dil,%dil
  23358e:	74 13                	je     2335a3 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x33>
  233590:	40 80 ff 01          	cmp    $0x1,%dil
  233594:	0f 85 b5 00 00 00    	jne    23364f <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0xdf>
  23359a:	48 8d 05 70 10 fd ff 	lea    -0x2ef90(%rip),%rax        # 204611 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2dd>
  2335a1:	eb 07                	jmp    2335aa <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x3a>
  2335a3:	48 8d 05 69 10 fd ff 	lea    -0x2ef97(%rip),%rax        # 204613 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2df>
  2335aa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2335af:	b8 02 00 00 00       	mov    $0x2,%eax
  2335b4:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  2335bb:	00 
  2335bc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2335c1:	49 83 39 00          	cmpq   $0x0,(%r9)
  2335c5:	0f 85 ac 00 00 00    	jne    233677 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x107>
  2335cb:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  2335d0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2335d5:	48 8d 05 64 2f 00 00 	lea    0x2f64(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  2335dc:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2335e1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2335e6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2335eb:	48 8d 05 8e 2c 00 00 	lea    0x2c8e(%rip),%rax        # 236280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  2335f2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2335f7:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  2335fc:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  233601:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  233606:	48 8d 05 2b 78 00 00 	lea    0x782b(%rip),%rax        # 23ae38 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x98>
  23360d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  233612:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  233619:	00 04 00 00 00 
  23361e:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  233625:	00 00 00 00 00 
  23362a:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  23362f:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  233636:	00 
  233637:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  23363e:	00 03 00 00 00 
  233643:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  233648:	e8 e3 fe ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  23364d:	0f 0b                	ud2    
  23364f:	48 8d 05 b4 0f fd ff 	lea    -0x2f04c(%rip),%rax        # 20460a <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2d6>
  233656:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23365b:	b8 07 00 00 00       	mov    $0x7,%eax
  233660:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  233667:	00 
  233668:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  23366d:	49 83 39 00          	cmpq   $0x0,(%r9)
  233671:	0f 84 54 ff ff ff    	je     2335cb <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x5b>
  233677:	49 8b 41 28          	mov    0x28(%r9),%rax
  23367b:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  233682:	00 
  233683:	49 8b 41 20          	mov    0x20(%r9),%rax
  233687:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  23368e:	00 
  23368f:	49 8b 41 18          	mov    0x18(%r9),%rax
  233693:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  23369a:	00 
  23369b:	49 8b 41 10          	mov    0x10(%r9),%rax
  23369f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  2336a6:	00 
  2336a7:	49 8b 01             	mov    (%r9),%rax
  2336aa:	49 8b 49 08          	mov    0x8(%r9),%rcx
  2336ae:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  2336b5:	00 
  2336b6:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  2336bd:	00 
  2336be:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  2336c3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2336c8:	48 8d 05 71 2e 00 00 	lea    0x2e71(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  2336cf:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2336d4:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2336d9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2336de:	48 8d 05 9b 2b 00 00 	lea    0x2b9b(%rip),%rax        # 236280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  2336e5:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2336ea:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  2336ef:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2336f4:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2336f9:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  233700:	00 
  233701:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  233706:	48 8b 05 93 7a 00 00 	mov    0x7a93(%rip),%rax        # 23b1a0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xf0>
  23370d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  233712:	48 8d 05 df 76 00 00 	lea    0x76df(%rip),%rax        # 23adf8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x58>
  233719:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  23371e:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  233725:	00 04 00 00 00 
  23372a:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  233731:	00 00 00 00 00 
  233736:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  23373b:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  233742:	00 
  233743:	48 c7 84 24 a0 00 00 	movq   $0x4,0xa0(%rsp)
  23374a:	00 04 00 00 00 
  23374f:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  233754:	e8 d7 fd ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  233759:	0f 0b                	ud2    
  23375b:	cc                   	int3   
  23375c:	cc                   	int3   
  23375d:	cc                   	int3   
  23375e:	cc                   	int3   
  23375f:	cc                   	int3   

0000000000233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>:
  233760:	48 83 ec 68          	sub    $0x68,%rsp
  233764:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233769:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23376e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233773:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233778:	48 8b 05 a9 79 00 00 	mov    0x79a9(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23377f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233784:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  233789:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23378e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233793:	48 8d 05 de 76 00 00 	lea    0x76de(%rip),%rax        # 23ae78 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xd8>
  23379a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  23379f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2337a6:	00 00 
  2337a8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  2337af:	00 00 
  2337b1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2337b6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2337bb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  2337c2:	00 00 
  2337c4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2337c9:	48 89 d6             	mov    %rdx,%rsi
  2337cc:	e8 5f fd ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2337d1:	0f 0b                	ud2    
  2337d3:	cc                   	int3   
  2337d4:	cc                   	int3   
  2337d5:	cc                   	int3   
  2337d6:	cc                   	int3   
  2337d7:	cc                   	int3   
  2337d8:	cc                   	int3   
  2337d9:	cc                   	int3   
  2337da:	cc                   	int3   
  2337db:	cc                   	int3   
  2337dc:	cc                   	int3   
  2337dd:	cc                   	int3   
  2337de:	cc                   	int3   
  2337df:	cc                   	int3   

00000000002337e0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>:
  2337e0:	48 83 ec 68          	sub    $0x68,%rsp
  2337e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2337e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2337ee:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  2337f3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2337f8:	48 8b 05 29 79 00 00 	mov    0x7929(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2337ff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233804:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  233809:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23380e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233813:	48 8d 05 7e 76 00 00 	lea    0x767e(%rip),%rax        # 23ae98 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xf8>
  23381a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  23381f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  233826:	00 00 
  233828:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  23382f:	00 00 
  233831:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  233836:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23383b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  233842:	00 00 
  233844:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  233849:	48 89 d6             	mov    %rdx,%rsi
  23384c:	e8 df fc ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  233851:	0f 0b                	ud2    
  233853:	cc                   	int3   
  233854:	cc                   	int3   
  233855:	cc                   	int3   
  233856:	cc                   	int3   
  233857:	cc                   	int3   
  233858:	cc                   	int3   
  233859:	cc                   	int3   
  23385a:	cc                   	int3   
  23385b:	cc                   	int3   
  23385c:	cc                   	int3   
  23385d:	cc                   	int3   
  23385e:	cc                   	int3   
  23385f:	cc                   	int3   

0000000000233860 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>:
  233860:	48 83 ec 68          	sub    $0x68,%rsp
  233864:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  233869:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  23386e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233873:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233878:	48 8b 05 a9 78 00 00 	mov    0x78a9(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23387f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233884:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  233889:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  23388e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233893:	48 8d 05 1e 76 00 00 	lea    0x761e(%rip),%rax        # 23aeb8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x118>
  23389a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  23389f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2338a6:	00 00 
  2338a8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  2338af:	00 00 
  2338b1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2338b6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2338bb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  2338c2:	00 00 
  2338c4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  2338c9:	48 89 d6             	mov    %rdx,%rsi
  2338cc:	e8 5f fc ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2338d1:	0f 0b                	ud2    
  2338d3:	cc                   	int3   
  2338d4:	cc                   	int3   
  2338d5:	cc                   	int3   
  2338d6:	cc                   	int3   
  2338d7:	cc                   	int3   
  2338d8:	cc                   	int3   
  2338d9:	cc                   	int3   
  2338da:	cc                   	int3   
  2338db:	cc                   	int3   
  2338dc:	cc                   	int3   
  2338dd:	cc                   	int3   
  2338de:	cc                   	int3   
  2338df:	cc                   	int3   

00000000002338e0 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE>:
  2338e0:	41 57                	push   %r15
  2338e2:	41 56                	push   %r14
  2338e4:	53                   	push   %rbx
  2338e5:	48 83 ec 20          	sub    $0x20,%rsp
  2338e9:	48 89 f3             	mov    %rsi,%rbx
  2338ec:	49 89 fe             	mov    %rdi,%r14
  2338ef:	4c 8d 7f 08          	lea    0x8(%rdi),%r15
  2338f3:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2338f7:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2338fb:	48 8d 35 a5 0d fd ff 	lea    -0x2f25b(%rip),%rsi        # 2046a7 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x373>
  233902:	ba 06 00 00 00       	mov    $0x6,%edx
  233907:	ff 50 18             	callq  *0x18(%rax)
  23390a:	0f b6 c0             	movzbl %al,%eax
  23390d:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  233912:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  233917:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  23391c:	48 8d 35 8a 0d fd ff 	lea    -0x2f276(%rip),%rsi        # 2046ad <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x379>
  233923:	4c 8d 05 ae 75 00 00 	lea    0x75ae(%rip),%r8        # 23aed8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x138>
  23392a:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  23392f:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  233934:	ba 05 00 00 00       	mov    $0x5,%edx
  233939:	48 89 df             	mov    %rbx,%rdi
  23393c:	e8 bf f1 ff ff       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  233941:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
  233946:	48 8d 35 65 0d fd ff 	lea    -0x2f29b(%rip),%rsi        # 2046b2 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x37e>
  23394d:	4c 8d 05 a4 75 00 00 	lea    0x75a4(%rip),%r8        # 23aef8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x158>
  233954:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  233959:	ba 06 00 00 00       	mov    $0x6,%edx
  23395e:	48 89 df             	mov    %rbx,%rdi
  233961:	e8 9a f1 ff ff       	callq  232b00 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  233966:	80 7c 24 19 00       	cmpb   $0x0,0x19(%rsp)
  23396b:	8a 44 24 18          	mov    0x18(%rsp),%al
  23396f:	74 3e                	je     2339af <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcf>
  233971:	84 c0                	test   %al,%al
  233973:	b0 01                	mov    $0x1,%al
  233975:	75 38                	jne    2339af <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcf>
  233977:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23397c:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  233980:	75 16                	jne    233998 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xb8>
  233982:	48 8b 78 20          	mov    0x20(%rax),%rdi
  233986:	48 8b 40 28          	mov    0x28(%rax),%rax
  23398a:	48 8d 35 95 08 fd ff 	lea    -0x2f76b(%rip),%rsi        # 204226 <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  233991:	ba 02 00 00 00       	mov    $0x2,%edx
  233996:	eb 14                	jmp    2339ac <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h7de2490af3c590bbE+0xcc>
  233998:	48 8b 78 20          	mov    0x20(%rax),%rdi
  23399c:	48 8b 40 28          	mov    0x28(%rax),%rax
  2339a0:	48 8d 35 7e 08 fd ff 	lea    -0x2f782(%rip),%rsi        # 204225 <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  2339a7:	ba 01 00 00 00       	mov    $0x1,%edx
  2339ac:	ff 50 18             	callq  *0x18(%rax)
  2339af:	48 83 c4 20          	add    $0x20,%rsp
  2339b3:	5b                   	pop    %rbx
  2339b4:	41 5e                	pop    %r14
  2339b6:	41 5f                	pop    %r15
  2339b8:	c3                   	retq   
  2339b9:	cc                   	int3   
  2339ba:	cc                   	int3   
  2339bb:	cc                   	int3   
  2339bc:	cc                   	int3   
  2339bd:	cc                   	int3   
  2339be:	cc                   	int3   
  2339bf:	cc                   	int3   

00000000002339c0 <_ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h194858f334be382dE>:
  2339c0:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2339c4:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2339c8:	48 8b 40 18          	mov    0x18(%rax),%rax
  2339cc:	48 8d 35 e5 0c fd ff 	lea    -0x2f31b(%rip),%rsi        # 2046b8 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x384>
  2339d3:	ba 0b 00 00 00       	mov    $0xb,%edx
  2339d8:	ff e0                	jmpq   *%rax
  2339da:	cc                   	int3   
  2339db:	cc                   	int3   
  2339dc:	cc                   	int3   
  2339dd:	cc                   	int3   
  2339de:	cc                   	int3   
  2339df:	cc                   	int3   

00000000002339e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h92a18e41e7a79e49E>:
  2339e0:	48 83 ec 68          	sub    $0x68,%rsp
  2339e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2339e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2339ee:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2339f3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2339f8:	48 8b 05 29 77 00 00 	mov    0x7729(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2339ff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233a04:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  233a09:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  233a0e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233a13:	48 8d 05 fe 74 00 00 	lea    0x74fe(%rip),%rax        # 23af18 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x178>
  233a1a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  233a1f:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  233a26:	00 00 
  233a28:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  233a2f:	00 00 
  233a31:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  233a36:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  233a3b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  233a42:	00 00 
  233a44:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  233a49:	48 89 d6             	mov    %rdx,%rsi
  233a4c:	e8 df fa ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  233a51:	0f 0b                	ud2    
  233a53:	cc                   	int3   
  233a54:	cc                   	int3   
  233a55:	cc                   	int3   
  233a56:	cc                   	int3   
  233a57:	cc                   	int3   
  233a58:	cc                   	int3   
  233a59:	cc                   	int3   
  233a5a:	cc                   	int3   
  233a5b:	cc                   	int3   
  233a5c:	cc                   	int3   
  233a5d:	cc                   	int3   
  233a5e:	cc                   	int3   
  233a5f:	cc                   	int3   

0000000000233a60 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h12e93e433f98118dE>:
  233a60:	48 b8 25 61 0f d8 19 	movabs $0x254ed619d80f6125,%rax
  233a67:	d6 4e 25 
  233a6a:	c3                   	retq   
  233a6b:	cc                   	int3   
  233a6c:	cc                   	int3   
  233a6d:	cc                   	int3   
  233a6e:	cc                   	int3   
  233a6f:	cc                   	int3   

0000000000233a70 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>:
  233a70:	41 57                	push   %r15
  233a72:	41 56                	push   %r14
  233a74:	41 55                	push   %r13
  233a76:	41 54                	push   %r12
  233a78:	53                   	push   %rbx
  233a79:	48 83 ec 70          	sub    $0x70,%rsp
  233a7d:	49 89 ff             	mov    %rdi,%r15
  233a80:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  233a84:	4c 8b 76 28          	mov    0x28(%rsi),%r14
  233a88:	48 8d 35 75 0c fd ff 	lea    -0x2f38b(%rip),%rsi        # 204704 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3d0>
  233a8f:	ba 0c 00 00 00       	mov    $0xc,%edx
  233a94:	4c 89 e7             	mov    %r12,%rdi
  233a97:	41 ff 56 18          	callq  *0x18(%r14)
  233a9b:	b3 01                	mov    $0x1,%bl
  233a9d:	84 c0                	test   %al,%al
  233a9f:	0f 85 18 01 00 00    	jne    233bbd <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  233aa5:	49 8b 47 10          	mov    0x10(%r15),%rax
  233aa9:	48 85 c0             	test   %rax,%rax
  233aac:	74 18                	je     233ac6 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x56>
  233aae:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  233ab3:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233ab8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  233abd:	48 8d 05 fc 29 00 00 	lea    0x29fc(%rip),%rax        # 2364c0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>
  233ac4:	eb 32                	jmp    233af8 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x88>
  233ac6:	4d 8b 2f             	mov    (%r15),%r13
  233ac9:	49 8b 47 08          	mov    0x8(%r15),%rax
  233acd:	4c 89 ef             	mov    %r13,%rdi
  233ad0:	ff 50 18             	callq  *0x18(%rax)
  233ad3:	48 b9 f4 bc c7 ec 1e 	movabs $0x7ef2a91eecc7bcf4,%rcx
  233ada:	a9 f2 7e 
  233add:	48 39 c8             	cmp    %rcx,%rax
  233ae0:	75 60                	jne    233b42 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0xd2>
  233ae2:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  233ae7:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  233aec:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  233af1:	48 8d 05 28 2a 00 00 	lea    0x2a28(%rip),%rax        # 236520 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>
  233af8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  233afd:	48 8d 05 44 74 00 00 	lea    0x7444(%rip),%rax        # 23af48 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1a8>
  233b04:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  233b09:	48 c7 44 24 18 02 00 	movq   $0x2,0x18(%rsp)
  233b10:	00 00 
  233b12:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  233b19:	00 00 
  233b1b:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  233b20:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233b25:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  233b2c:	00 00 
  233b2e:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  233b33:	4c 89 e7             	mov    %r12,%rdi
  233b36:	4c 89 f6             	mov    %r14,%rsi
  233b39:	e8 02 12 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  233b3e:	84 c0                	test   %al,%al
  233b40:	75 7b                	jne    233bbd <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  233b42:	49 8b 47 18          	mov    0x18(%r15),%rax
  233b46:	48 8d 48 10          	lea    0x10(%rax),%rcx
  233b4a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  233b4f:	48 83 c0 14          	add    $0x14,%rax
  233b53:	48 8d 15 e6 29 00 00 	lea    0x29e6(%rip),%rdx        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  233b5a:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  233b5f:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  233b64:	48 8b 0d 15 76 00 00 	mov    0x7615(%rip),%rcx        # 23b180 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  233b6b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  233b70:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  233b75:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  233b7a:	48 8d 05 ff 74 00 00 	lea    0x74ff(%rip),%rax        # 23b080 <anon.675a8c007e0eb0dbd1338020c4dcf401.6.llvm.17324098355855342093>
  233b81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  233b86:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
  233b8d:	00 00 
  233b8f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  233b96:	00 00 
  233b98:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  233b9d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  233ba2:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
  233ba9:	00 00 
  233bab:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  233bb0:	4c 89 e7             	mov    %r12,%rdi
  233bb3:	4c 89 f6             	mov    %r14,%rsi
  233bb6:	e8 85 11 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  233bbb:	89 c3                	mov    %eax,%ebx
  233bbd:	89 d8                	mov    %ebx,%eax
  233bbf:	48 83 c4 70          	add    $0x70,%rsp
  233bc3:	5b                   	pop    %rbx
  233bc4:	41 5c                	pop    %r12
  233bc6:	41 5d                	pop    %r13
  233bc8:	41 5e                	pop    %r14
  233bca:	41 5f                	pop    %r15
  233bcc:	c3                   	retq   
  233bcd:	cc                   	int3   
  233bce:	cc                   	int3   
  233bcf:	cc                   	int3   

0000000000233bd0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>:
  233bd0:	41 57                	push   %r15
  233bd2:	41 56                	push   %r14
  233bd4:	53                   	push   %rbx
  233bd5:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  233bdc:	49 89 f7             	mov    %rsi,%r15
  233bdf:	49 89 fe             	mov    %rdi,%r14
  233be2:	8b 46 30             	mov    0x30(%rsi),%eax
  233be5:	a8 10                	test   $0x10,%al
  233be7:	0f 85 d3 00 00 00    	jne    233cc0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xf0>
  233bed:	a8 20                	test   $0x20,%al
  233bef:	0f 85 19 01 00 00    	jne    233d0e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x13e>
  233bf5:	49 8b 36             	mov    (%r14),%rsi
  233bf8:	b8 27 00 00 00       	mov    $0x27,%eax
  233bfd:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  233c04:	0f 82 89 01 00 00    	jb     233d93 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1c3>
  233c0a:	bb 27 00 00 00       	mov    $0x27,%ebx
  233c0f:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  233c16:	c5 6d 34 
  233c19:	4c 8d 0d b8 04 fd ff 	lea    -0x2fb48(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  233c20:	48 89 f0             	mov    %rsi,%rax
  233c23:	49 f7 e0             	mul    %r8
  233c26:	48 c1 ea 0b          	shr    $0xb,%rdx
  233c2a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  233c30:	89 f1                	mov    %esi,%ecx
  233c32:	29 c1                	sub    %eax,%ecx
  233c34:	0f b7 c1             	movzwl %cx,%eax
  233c37:	c1 e8 02             	shr    $0x2,%eax
  233c3a:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  233c40:	c1 ef 11             	shr    $0x11,%edi
  233c43:	6b c7 64             	imul   $0x64,%edi,%eax
  233c46:	29 c1                	sub    %eax,%ecx
  233c48:	0f b7 c9             	movzwl %cx,%ecx
  233c4b:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  233c4f:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  233c54:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  233c59:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  233c5e:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  233c63:	48 89 c3             	mov    %rax,%rbx
  233c66:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  233c6d:	48 89 d6             	mov    %rdx,%rsi
  233c70:	77 ae                	ja     233c20 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x50>
  233c72:	48 83 fa 63          	cmp    $0x63,%rdx
  233c76:	7e 2e                	jle    233ca6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  233c78:	0f b7 ca             	movzwl %dx,%ecx
  233c7b:	c1 e9 02             	shr    $0x2,%ecx
  233c7e:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  233c84:	c1 e9 11             	shr    $0x11,%ecx
  233c87:	6b f1 64             	imul   $0x64,%ecx,%esi
  233c8a:	29 f2                	sub    %esi,%edx
  233c8c:	0f b7 d2             	movzwl %dx,%edx
  233c8f:	48 8d 35 42 04 fd ff 	lea    -0x2fbbe(%rip),%rsi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  233c96:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  233c9a:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  233c9f:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  233ca3:	48 89 ca             	mov    %rcx,%rdx
  233ca6:	48 83 fa 0a          	cmp    $0xa,%rdx
  233caa:	0f 8d f5 00 00 00    	jge    233da5 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1d5>
  233cb0:	80 c2 30             	add    $0x30,%dl
  233cb3:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  233cb7:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  233cbb:	e9 f9 00 00 00       	jmpq   233db9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1e9>
  233cc0:	49 8b 06             	mov    (%r14),%rax
  233cc3:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  233cca:	00 
  233ccb:	45 31 c9             	xor    %r9d,%r9d
  233cce:	b9 30 00 00 00       	mov    $0x30,%ecx
  233cd3:	48 89 c2             	mov    %rax,%rdx
  233cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  233cdd:	00 00 00 
  233ce0:	48 c1 ea 04          	shr    $0x4,%rdx
  233ce4:	89 c3                	mov    %eax,%ebx
  233ce6:	80 e3 0f             	and    $0xf,%bl
  233ce9:	80 fb 0a             	cmp    $0xa,%bl
  233cec:	be 57 00 00 00       	mov    $0x57,%esi
  233cf1:	0f 42 f1             	cmovb  %ecx,%esi
  233cf4:	40 00 de             	add    %bl,%sil
  233cf7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  233cfb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  233cff:	49 83 c1 01          	add    $0x1,%r9
  233d03:	48 83 f8 0f          	cmp    $0xf,%rax
  233d07:	48 89 d0             	mov    %rdx,%rax
  233d0a:	77 d4                	ja     233ce0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x110>
  233d0c:	eb 4e                	jmp    233d5c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x18c>
  233d0e:	49 8b 06             	mov    (%r14),%rax
  233d11:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  233d18:	00 
  233d19:	45 31 c9             	xor    %r9d,%r9d
  233d1c:	b9 30 00 00 00       	mov    $0x30,%ecx
  233d21:	48 89 c2             	mov    %rax,%rdx
  233d24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  233d2b:	00 00 00 
  233d2e:	66 90                	xchg   %ax,%ax
  233d30:	48 c1 ea 04          	shr    $0x4,%rdx
  233d34:	89 c3                	mov    %eax,%ebx
  233d36:	80 e3 0f             	and    $0xf,%bl
  233d39:	80 fb 0a             	cmp    $0xa,%bl
  233d3c:	be 37 00 00 00       	mov    $0x37,%esi
  233d41:	0f 42 f1             	cmovb  %ecx,%esi
  233d44:	40 00 de             	add    %bl,%sil
  233d47:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  233d4b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  233d4f:	49 83 c1 01          	add    $0x1,%r9
  233d53:	48 83 f8 0f          	cmp    $0xf,%rax
  233d57:	48 89 d0             	mov    %rdx,%rax
  233d5a:	77 d4                	ja     233d30 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x160>
  233d5c:	bf 80 00 00 00       	mov    $0x80,%edi
  233d61:	4c 29 cf             	sub    %r9,%rdi
  233d64:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  233d6b:	0f 83 2c 02 00 00    	jae    233f9d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  233d71:	48 8d 15 5e 03 fd ff 	lea    -0x2fca2(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  233d78:	b9 02 00 00 00       	mov    $0x2,%ecx
  233d7d:	4c 89 ff             	mov    %r15,%rdi
  233d80:	be 01 00 00 00       	mov    $0x1,%esi
  233d85:	e8 f6 11 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  233d8a:	84 c0                	test   %al,%al
  233d8c:	74 56                	je     233de4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x214>
  233d8e:	e9 a4 02 00 00       	jmpq   234037 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  233d93:	48 89 f2             	mov    %rsi,%rdx
  233d96:	48 83 fa 63          	cmp    $0x63,%rdx
  233d9a:	0f 8f d8 fe ff ff    	jg     233c78 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xa8>
  233da0:	e9 01 ff ff ff       	jmpq   233ca6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  233da5:	48 8d 0d 2c 03 fd ff 	lea    -0x2fcd4(%rip),%rcx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  233dac:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  233db0:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  233db5:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  233db9:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  233dbd:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  233dc3:	49 29 c1             	sub    %rax,%r9
  233dc6:	48 8d 15 5d 0f fd ff 	lea    -0x2f0a3(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  233dcd:	4c 89 ff             	mov    %r15,%rdi
  233dd0:	be 01 00 00 00       	mov    $0x1,%esi
  233dd5:	31 c9                	xor    %ecx,%ecx
  233dd7:	e8 a4 11 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  233ddc:	84 c0                	test   %al,%al
  233dde:	0f 85 53 02 00 00    	jne    234037 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  233de4:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  233de8:	49 8b 77 28          	mov    0x28(%r15),%rsi
  233dec:	48 8d 05 75 71 00 00 	lea    0x7175(%rip),%rax        # 23af68 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1c8>
  233df3:	48 89 04 24          	mov    %rax,(%rsp)
  233df7:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  233dfe:	00 00 
  233e00:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  233e07:	00 00 
  233e09:	48 8d 05 08 09 fd ff 	lea    -0x2f6f8(%rip),%rax        # 204718 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3e4>
  233e10:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  233e15:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  233e1c:	00 00 
  233e1e:	48 89 e2             	mov    %rsp,%rdx
  233e21:	e8 1a 0f 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  233e26:	84 c0                	test   %al,%al
  233e28:	0f 85 09 02 00 00    	jne    234037 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  233e2e:	41 8b 47 30          	mov    0x30(%r15),%eax
  233e32:	a8 10                	test   $0x10,%al
  233e34:	0f 85 8d 00 00 00    	jne    233ec7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2f7>
  233e3a:	a8 20                	test   $0x20,%al
  233e3c:	0f 85 07 01 00 00    	jne    233f49 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x379>
  233e42:	49 8b 76 08          	mov    0x8(%r14),%rsi
  233e46:	b8 27 00 00 00       	mov    $0x27,%eax
  233e4b:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  233e52:	0f 82 58 01 00 00    	jb     233fb0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e0>
  233e58:	bb 27 00 00 00       	mov    $0x27,%ebx
  233e5d:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  233e64:	c5 6d 34 
  233e67:	4c 8d 0d 6a 02 fd ff 	lea    -0x2fd96(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  233e6e:	66 90                	xchg   %ax,%ax
  233e70:	48 89 f0             	mov    %rsi,%rax
  233e73:	49 f7 e0             	mul    %r8
  233e76:	48 c1 ea 0b          	shr    $0xb,%rdx
  233e7a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  233e80:	89 f1                	mov    %esi,%ecx
  233e82:	29 c1                	sub    %eax,%ecx
  233e84:	0f b7 c1             	movzwl %cx,%eax
  233e87:	c1 e8 02             	shr    $0x2,%eax
  233e8a:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  233e90:	c1 ef 11             	shr    $0x11,%edi
  233e93:	6b c7 64             	imul   $0x64,%edi,%eax
  233e96:	29 c1                	sub    %eax,%ecx
  233e98:	0f b7 c9             	movzwl %cx,%ecx
  233e9b:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  233e9f:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  233ea4:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  233ea9:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  233eae:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  233eb3:	48 89 c3             	mov    %rax,%rbx
  233eb6:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  233ebd:	48 89 d6             	mov    %rdx,%rsi
  233ec0:	77 ae                	ja     233e70 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2a0>
  233ec2:	e9 ec 00 00 00       	jmpq   233fb3 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e3>
  233ec7:	49 8b 46 08          	mov    0x8(%r14),%rax
  233ecb:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  233ed2:	00 
  233ed3:	45 31 c9             	xor    %r9d,%r9d
  233ed6:	b9 30 00 00 00       	mov    $0x30,%ecx
  233edb:	48 89 c2             	mov    %rax,%rdx
  233ede:	66 90                	xchg   %ax,%ax
  233ee0:	48 c1 ea 04          	shr    $0x4,%rdx
  233ee4:	89 c3                	mov    %eax,%ebx
  233ee6:	80 e3 0f             	and    $0xf,%bl
  233ee9:	80 fb 0a             	cmp    $0xa,%bl
  233eec:	be 57 00 00 00       	mov    $0x57,%esi
  233ef1:	0f 42 f1             	cmovb  %ecx,%esi
  233ef4:	40 00 de             	add    %bl,%sil
  233ef7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  233efb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  233eff:	49 83 c1 01          	add    $0x1,%r9
  233f03:	48 83 f8 0f          	cmp    $0xf,%rax
  233f07:	48 89 d0             	mov    %rdx,%rax
  233f0a:	77 d4                	ja     233ee0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x310>
  233f0c:	bf 80 00 00 00       	mov    $0x80,%edi
  233f11:	4c 29 cf             	sub    %r9,%rdi
  233f14:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  233f1b:	0f 83 7c 00 00 00    	jae    233f9d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  233f21:	48 8d 15 ae 01 fd ff 	lea    -0x2fe52(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  233f28:	b9 02 00 00 00       	mov    $0x2,%ecx
  233f2d:	4c 89 ff             	mov    %r15,%rdi
  233f30:	be 01 00 00 00       	mov    $0x1,%esi
  233f35:	e8 46 10 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  233f3a:	84 c0                	test   %al,%al
  233f3c:	0f 85 f5 00 00 00    	jne    234037 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  233f42:	31 db                	xor    %ebx,%ebx
  233f44:	e9 f0 00 00 00       	jmpq   234039 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  233f49:	49 8b 46 08          	mov    0x8(%r14),%rax
  233f4d:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  233f54:	00 
  233f55:	45 31 c9             	xor    %r9d,%r9d
  233f58:	b9 30 00 00 00       	mov    $0x30,%ecx
  233f5d:	48 89 c2             	mov    %rax,%rdx
  233f60:	48 c1 ea 04          	shr    $0x4,%rdx
  233f64:	89 c3                	mov    %eax,%ebx
  233f66:	80 e3 0f             	and    $0xf,%bl
  233f69:	80 fb 0a             	cmp    $0xa,%bl
  233f6c:	be 37 00 00 00       	mov    $0x37,%esi
  233f71:	0f 42 f1             	cmovb  %ecx,%esi
  233f74:	40 00 de             	add    %bl,%sil
  233f77:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  233f7b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  233f7f:	49 83 c1 01          	add    $0x1,%r9
  233f83:	48 83 f8 0f          	cmp    $0xf,%rax
  233f87:	48 89 d0             	mov    %rdx,%rax
  233f8a:	77 d4                	ja     233f60 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x390>
  233f8c:	bf 80 00 00 00       	mov    $0x80,%edi
  233f91:	4c 29 cf             	sub    %r9,%rdi
  233f94:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  233f9b:	72 84                	jb     233f21 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x351>
  233f9d:	48 8d 15 34 6d 00 00 	lea    0x6d34(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  233fa4:	be 80 00 00 00       	mov    $0x80,%esi
  233fa9:	e8 b2 f7 ff ff       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  233fae:	0f 0b                	ud2    
  233fb0:	48 89 f2             	mov    %rsi,%rdx
  233fb3:	48 83 fa 63          	cmp    $0x63,%rdx
  233fb7:	7e 2e                	jle    233fe7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x417>
  233fb9:	0f b7 ca             	movzwl %dx,%ecx
  233fbc:	c1 e9 02             	shr    $0x2,%ecx
  233fbf:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  233fc5:	c1 e9 11             	shr    $0x11,%ecx
  233fc8:	6b f1 64             	imul   $0x64,%ecx,%esi
  233fcb:	29 f2                	sub    %esi,%edx
  233fcd:	0f b7 d2             	movzwl %dx,%edx
  233fd0:	48 8d 35 01 01 fd ff 	lea    -0x2feff(%rip),%rsi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  233fd7:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  233fdb:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  233fe0:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  233fe4:	48 89 ca             	mov    %rcx,%rdx
  233fe7:	48 83 fa 0a          	cmp    $0xa,%rdx
  233feb:	7d 0d                	jge    233ffa <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x42a>
  233fed:	80 c2 30             	add    $0x30,%dl
  233ff0:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  233ff4:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  233ff8:	eb 14                	jmp    23400e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x43e>
  233ffa:	48 8d 0d d7 00 fd ff 	lea    -0x2ff29(%rip),%rcx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234001:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  234005:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  23400a:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  23400e:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  234012:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  234018:	49 29 c1             	sub    %rax,%r9
  23401b:	48 8d 15 08 0d fd ff 	lea    -0x2f2f8(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234022:	31 db                	xor    %ebx,%ebx
  234024:	4c 89 ff             	mov    %r15,%rdi
  234027:	be 01 00 00 00       	mov    $0x1,%esi
  23402c:	31 c9                	xor    %ecx,%ecx
  23402e:	e8 4d 0f 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234033:	84 c0                	test   %al,%al
  234035:	74 02                	je     234039 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  234037:	b3 01                	mov    $0x1,%bl
  234039:	89 d8                	mov    %ebx,%eax
  23403b:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  234042:	5b                   	pop    %rbx
  234043:	41 5e                	pop    %r14
  234045:	41 5f                	pop    %r15
  234047:	c3                   	retq   
  234048:	cc                   	int3   
  234049:	cc                   	int3   
  23404a:	cc                   	int3   
  23404b:	cc                   	int3   
  23404c:	cc                   	int3   
  23404d:	cc                   	int3   
  23404e:	cc                   	int3   
  23404f:	cc                   	int3   

0000000000234050 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>:
  234050:	41 57                	push   %r15
  234052:	41 56                	push   %r14
  234054:	53                   	push   %rbx
  234055:	48 85 d2             	test   %rdx,%rdx
  234058:	74 70                	je     2340ca <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  23405a:	41 89 fb             	mov    %edi,%r11d
  23405d:	41 c1 eb 08          	shr    $0x8,%r11d
  234061:	4c 8d 34 56          	lea    (%rsi,%rdx,2),%r14
  234065:	45 31 ff             	xor    %r15d,%r15d
  234068:	48 89 f2             	mov    %rsi,%rdx
  23406b:	0f b6 5e 01          	movzbl 0x1(%rsi),%ebx
  23406f:	48 83 c6 02          	add    $0x2,%rsi
  234073:	4d 8d 14 1f          	lea    (%r15,%rbx,1),%r10
  234077:	44 38 1a             	cmp    %r11b,(%rdx)
  23407a:	75 44                	jne    2340c0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x70>
  23407c:	4d 39 fa             	cmp    %r15,%r10
  23407f:	0f 82 c6 00 00 00    	jb     23414b <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xfb>
  234085:	4d 39 c2             	cmp    %r8,%r10
  234088:	0f 87 d1 00 00 00    	ja     23415f <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x10f>
  23408e:	49 01 cf             	add    %rcx,%r15
  234091:	31 d2                	xor    %edx,%edx
  234093:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23409a:	00 00 00 
  23409d:	0f 1f 00             	nopl   (%rax)
  2340a0:	48 39 d3             	cmp    %rdx,%rbx
  2340a3:	74 1d                	je     2340c2 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x72>
  2340a5:	48 8d 42 01          	lea    0x1(%rdx),%rax
  2340a9:	41 38 3c 17          	cmp    %dil,(%r15,%rdx,1)
  2340ad:	48 89 c2             	mov    %rax,%rdx
  2340b0:	75 ee                	jne    2340a0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x50>
  2340b2:	eb 6f                	jmp    234123 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd3>
  2340b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2340bb:	00 00 00 
  2340be:	66 90                	xchg   %ax,%ax
  2340c0:	77 08                	ja     2340ca <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  2340c2:	4d 89 d7             	mov    %r10,%r15
  2340c5:	4c 39 f6             	cmp    %r14,%rsi
  2340c8:	75 9e                	jne    234068 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x18>
  2340ca:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2340cf:	48 85 c9             	test   %rcx,%rcx
  2340d2:	74 53                	je     234127 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd7>
  2340d4:	4c 01 c9             	add    %r9,%rcx
  2340d7:	0f b7 d7             	movzwl %di,%edx
  2340da:	b0 01                	mov    $0x1,%al
  2340dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2340e0:	49 8d 79 01          	lea    0x1(%r9),%rdi
  2340e4:	41 0f b6 31          	movzbl (%r9),%esi
  2340e8:	40 84 f6             	test   %sil,%sil
  2340eb:	78 13                	js     234100 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xb0>
  2340ed:	49 89 f9             	mov    %rdi,%r9
  2340f0:	29 f2                	sub    %esi,%edx
  2340f2:	79 26                	jns    23411a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xca>
  2340f4:	eb 33                	jmp    234129 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  2340f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2340fd:	00 00 00 
  234100:	48 39 cf             	cmp    %rcx,%rdi
  234103:	74 2c                	je     234131 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xe1>
  234105:	41 0f b6 79 01       	movzbl 0x1(%r9),%edi
  23410a:	49 83 c1 02          	add    $0x2,%r9
  23410e:	83 e6 7f             	and    $0x7f,%esi
  234111:	c1 e6 08             	shl    $0x8,%esi
  234114:	09 fe                	or     %edi,%esi
  234116:	29 f2                	sub    %esi,%edx
  234118:	78 0f                	js     234129 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  23411a:	34 01                	xor    $0x1,%al
  23411c:	49 39 c9             	cmp    %rcx,%r9
  23411f:	75 bf                	jne    2340e0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x90>
  234121:	eb 06                	jmp    234129 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  234123:	31 c0                	xor    %eax,%eax
  234125:	eb 02                	jmp    234129 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  234127:	b0 01                	mov    $0x1,%al
  234129:	24 01                	and    $0x1,%al
  23412b:	5b                   	pop    %rbx
  23412c:	41 5e                	pop    %r14
  23412e:	41 5f                	pop    %r15
  234130:	c3                   	retq   
  234131:	48 8d 3d e0 05 fd ff 	lea    -0x2fa20(%rip),%rdi        # 204718 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3e4>
  234138:	48 8d 15 51 6e 00 00 	lea    0x6e51(%rip),%rdx        # 23af90 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1f0>
  23413f:	be 2b 00 00 00       	mov    $0x2b,%esi
  234144:	e8 17 f3 ff ff       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  234149:	0f 0b                	ud2    
  23414b:	48 8d 15 26 6e 00 00 	lea    0x6e26(%rip),%rdx        # 23af78 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1d8>
  234152:	4c 89 ff             	mov    %r15,%rdi
  234155:	4c 89 d6             	mov    %r10,%rsi
  234158:	e8 03 f7 ff ff       	callq  233860 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  23415d:	0f 0b                	ud2    
  23415f:	48 8d 15 12 6e 00 00 	lea    0x6e12(%rip),%rdx        # 23af78 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x1d8>
  234166:	4c 89 d7             	mov    %r10,%rdi
  234169:	4c 89 c6             	mov    %r8,%rsi
  23416c:	e8 6f f6 ff ff       	callq  2337e0 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  234171:	0f 0b                	ud2    
  234173:	cc                   	int3   
  234174:	cc                   	int3   
  234175:	cc                   	int3   
  234176:	cc                   	int3   
  234177:	cc                   	int3   
  234178:	cc                   	int3   
  234179:	cc                   	int3   
  23417a:	cc                   	int3   
  23417b:	cc                   	int3   
  23417c:	cc                   	int3   
  23417d:	cc                   	int3   
  23417e:	cc                   	int3   
  23417f:	cc                   	int3   

0000000000234180 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>:
  234180:	41 57                	push   %r15
  234182:	41 56                	push   %r14
  234184:	53                   	push   %rbx
  234185:	41 89 f8             	mov    %edi,%r8d
  234188:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
  23418c:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  234190:	48 29 f7             	sub    %rsi,%rdi
  234193:	74 39                	je     2341ce <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  234195:	48 39 d7             	cmp    %rdx,%rdi
  234198:	48 0f 47 fa          	cmova  %rdx,%rdi
  23419c:	48 85 ff             	test   %rdi,%rdi
  23419f:	74 2d                	je     2341ce <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  2341a1:	31 c9                	xor    %ecx,%ecx
  2341a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2341aa:	00 00 00 
  2341ad:	0f 1f 00             	nopl   (%rax)
  2341b0:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  2341b4:	0f 84 c4 00 00 00    	je     23427e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xfe>
  2341ba:	48 83 c1 01          	add    $0x1,%rcx
  2341be:	48 39 cf             	cmp    %rcx,%rdi
  2341c1:	75 ed                	jne    2341b0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x30>
  2341c3:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  2341c7:	4c 39 cf             	cmp    %r9,%rdi
  2341ca:	76 08                	jbe    2341d4 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x54>
  2341cc:	eb 72                	jmp    234240 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc0>
  2341ce:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  2341d2:	31 ff                	xor    %edi,%edi
  2341d4:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  2341db:	fe fe fe 
  2341de:	49 be 80 80 80 80 80 	movabs $0x8080808080808080,%r14
  2341e5:	80 80 80 
  2341e8:	45 0f b6 d8          	movzbl %r8b,%r11d
  2341ec:	49 bf 01 01 01 01 01 	movabs $0x101010101010101,%r15
  2341f3:	01 01 01 
  2341f6:	4d 0f af fb          	imul   %r11,%r15
  2341fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  234200:	48 8b 04 3e          	mov    (%rsi,%rdi,1),%rax
  234204:	4c 31 f8             	xor    %r15,%rax
  234207:	48 89 c3             	mov    %rax,%rbx
  23420a:	48 f7 d3             	not    %rbx
  23420d:	4c 01 d0             	add    %r10,%rax
  234210:	4c 21 f3             	and    %r14,%rbx
  234213:	48 21 c3             	and    %rax,%rbx
  234216:	48 8b 4c 3e 08       	mov    0x8(%rsi,%rdi,1),%rcx
  23421b:	4c 31 f9             	xor    %r15,%rcx
  23421e:	48 89 c8             	mov    %rcx,%rax
  234221:	48 f7 d0             	not    %rax
  234224:	4c 01 d1             	add    %r10,%rcx
  234227:	4c 21 f0             	and    %r14,%rax
  23422a:	48 21 c8             	and    %rcx,%rax
  23422d:	48 09 d8             	or     %rbx,%rax
  234230:	75 09                	jne    23423b <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xbb>
  234232:	48 83 c7 10          	add    $0x10,%rdi
  234236:	4c 39 cf             	cmp    %r9,%rdi
  234239:	76 c5                	jbe    234200 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x80>
  23423b:	48 39 d7             	cmp    %rdx,%rdi
  23423e:	77 4c                	ja     23428c <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x10c>
  234240:	48 39 d7             	cmp    %rdx,%rdi
  234243:	75 04                	jne    234249 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc9>
  234245:	31 c0                	xor    %eax,%eax
  234247:	eb 3a                	jmp    234283 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  234249:	48 01 fe             	add    %rdi,%rsi
  23424c:	48 29 fa             	sub    %rdi,%rdx
  23424f:	31 c0                	xor    %eax,%eax
  234251:	31 c9                	xor    %ecx,%ecx
  234253:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23425a:	00 00 00 
  23425d:	0f 1f 00             	nopl   (%rax)
  234260:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  234264:	74 0b                	je     234271 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xf1>
  234266:	48 83 c1 01          	add    $0x1,%rcx
  23426a:	48 39 ca             	cmp    %rcx,%rdx
  23426d:	75 f1                	jne    234260 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xe0>
  23426f:	eb 12                	jmp    234283 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  234271:	48 01 cf             	add    %rcx,%rdi
  234274:	b8 01 00 00 00       	mov    $0x1,%eax
  234279:	48 89 f9             	mov    %rdi,%rcx
  23427c:	eb 05                	jmp    234283 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  23427e:	b8 01 00 00 00       	mov    $0x1,%eax
  234283:	48 89 ca             	mov    %rcx,%rdx
  234286:	5b                   	pop    %rbx
  234287:	41 5e                	pop    %r14
  234289:	41 5f                	pop    %r15
  23428b:	c3                   	retq   
  23428c:	48 8d 05 15 6d 00 00 	lea    0x6d15(%rip),%rax        # 23afa8 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522>
  234293:	48 89 d6             	mov    %rdx,%rsi
  234296:	48 89 c2             	mov    %rax,%rdx
  234299:	e8 c2 f4 ff ff       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  23429e:	0f 0b                	ud2    

00000000002342a0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E>:
  2342a0:	48 83 ec 28          	sub    $0x28,%rsp
  2342a4:	0f b6 07             	movzbl (%rdi),%eax
  2342a7:	48 83 f8 63          	cmp    $0x63,%rax
  2342ab:	76 2d                	jbe    2342da <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x3a>
  2342ad:	0f b6 c8             	movzbl %al,%ecx
  2342b0:	8d 14 89             	lea    (%rcx,%rcx,4),%edx
  2342b3:	8d 14 d1             	lea    (%rcx,%rdx,8),%edx
  2342b6:	c1 ea 0c             	shr    $0xc,%edx
  2342b9:	6b ca 64             	imul   $0x64,%edx,%ecx
  2342bc:	28 c8                	sub    %cl,%al
  2342be:	0f b6 c0             	movzbl %al,%eax
  2342c1:	48 8d 0d 10 fe fc ff 	lea    -0x301f0(%rip),%rcx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2342c8:	0f b7 04 41          	movzwl (%rcx,%rax,2),%eax
  2342cc:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  2342d1:	b9 24 00 00 00       	mov    $0x24,%ecx
  2342d6:	89 d0                	mov    %edx,%eax
  2342d8:	eb 09                	jmp    2342e3 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x43>
  2342da:	b9 26 00 00 00       	mov    $0x26,%ecx
  2342df:	3c 0a                	cmp    $0xa,%al
  2342e1:	73 08                	jae    2342eb <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x4b>
  2342e3:	04 30                	add    $0x30,%al
  2342e5:	88 44 0c 01          	mov    %al,0x1(%rsp,%rcx,1)
  2342e9:	eb 15                	jmp    234300 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h50098038a0544ce4E+0x60>
  2342eb:	48 8d 0d e6 fd fc ff 	lea    -0x3021a(%rip),%rcx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2342f2:	0f b7 04 41          	movzwl (%rcx,%rax,2),%eax
  2342f6:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  2342fb:	b9 25 00 00 00       	mov    $0x25,%ecx
  234300:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  234304:	49 83 c0 01          	add    $0x1,%r8
  234308:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  23430e:	49 29 c9             	sub    %rcx,%r9
  234311:	48 8d 15 12 0a fd ff 	lea    -0x2f5ee(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234318:	48 89 f7             	mov    %rsi,%rdi
  23431b:	be 01 00 00 00       	mov    $0x1,%esi
  234320:	31 c9                	xor    %ecx,%ecx
  234322:	e8 59 0c 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234327:	48 83 c4 28          	add    $0x28,%rsp
  23432b:	c3                   	retq   
  23432c:	cc                   	int3   
  23432d:	cc                   	int3   
  23432e:	cc                   	int3   
  23432f:	cc                   	int3   

0000000000234330 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>:
  234330:	48 83 ec 28          	sub    $0x28,%rsp
  234334:	0f b7 07             	movzwl (%rdi),%eax
  234337:	b9 27 00 00 00       	mov    $0x27,%ecx
  23433c:	48 3d 10 27 00 00    	cmp    $0x2710,%rax
  234342:	73 1d                	jae    234361 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x31>
  234344:	83 f8 63             	cmp    $0x63,%eax
  234347:	77 7a                	ja     2343c3 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x93>
  234349:	48 83 f8 0a          	cmp    $0xa,%rax
  23434d:	0f 8d a7 00 00 00    	jge    2343fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xca>
  234353:	04 30                	add    $0x30,%al
  234355:	88 04 0c             	mov    %al,(%rsp,%rcx,1)
  234358:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  23435c:	e9 ad 00 00 00       	jmpq   23440e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xde>
  234361:	89 c1                	mov    %eax,%ecx
  234363:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
  234368:	48 0f af d0          	imul   %rax,%rdx
  23436c:	c1 e8 04             	shr    $0x4,%eax
  23436f:	69 c0 47 03 00 00    	imul   $0x347,%eax,%eax
  234375:	c1 e8 13             	shr    $0x13,%eax
  234378:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  23437e:	29 c1                	sub    %eax,%ecx
  234380:	0f b7 c1             	movzwl %cx,%eax
  234383:	89 c1                	mov    %eax,%ecx
  234385:	c1 e9 02             	shr    $0x2,%ecx
  234388:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  23438e:	c1 e9 11             	shr    $0x11,%ecx
  234391:	6b f9 64             	imul   $0x64,%ecx,%edi
  234394:	29 f8                	sub    %edi,%eax
  234396:	0f b7 c0             	movzwl %ax,%eax
  234399:	48 8d 3d 38 fd fc ff 	lea    -0x302c8(%rip),%rdi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2343a0:	0f b7 0c 4f          	movzwl (%rdi,%rcx,2),%ecx
  2343a4:	66 89 4c 24 24       	mov    %cx,0x24(%rsp)
  2343a9:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  2343ad:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  2343b2:	48 c1 ea 2d          	shr    $0x2d,%rdx
  2343b6:	b9 23 00 00 00       	mov    $0x23,%ecx
  2343bb:	48 89 d0             	mov    %rdx,%rax
  2343be:	83 f8 63             	cmp    $0x63,%eax
  2343c1:	76 86                	jbe    234349 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x19>
  2343c3:	89 c2                	mov    %eax,%edx
  2343c5:	c1 ea 02             	shr    $0x2,%edx
  2343c8:	69 d2 7b 14 00 00    	imul   $0x147b,%edx,%edx
  2343ce:	c1 ea 11             	shr    $0x11,%edx
  2343d1:	6b fa 64             	imul   $0x64,%edx,%edi
  2343d4:	29 f8                	sub    %edi,%eax
  2343d6:	0f b7 c0             	movzwl %ax,%eax
  2343d9:	48 8d 3d f8 fc fc ff 	lea    -0x30308(%rip),%rdi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2343e0:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  2343e4:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  2343e9:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  2343ed:	48 89 d0             	mov    %rdx,%rax
  2343f0:	48 83 f8 0a          	cmp    $0xa,%rax
  2343f4:	0f 8c 59 ff ff ff    	jl     234353 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x23>
  2343fa:	48 8d 15 d7 fc fc ff 	lea    -0x30329(%rip),%rdx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234401:	0f b7 04 42          	movzwl (%rdx,%rax,2),%eax
  234405:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  23440a:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  23440e:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  234412:	49 83 c0 01          	add    $0x1,%r8
  234416:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  23441c:	49 29 c9             	sub    %rcx,%r9
  23441f:	48 8d 15 04 09 fd ff 	lea    -0x2f6fc(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234426:	48 89 f7             	mov    %rsi,%rdi
  234429:	be 01 00 00 00       	mov    $0x1,%esi
  23442e:	31 c9                	xor    %ecx,%ecx
  234430:	e8 4b 0b 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234435:	48 83 c4 28          	add    $0x28,%rsp
  234439:	c3                   	retq   
  23443a:	cc                   	int3   
  23443b:	cc                   	int3   
  23443c:	cc                   	int3   
  23443d:	cc                   	int3   
  23443e:	cc                   	int3   
  23443f:	cc                   	int3   

0000000000234440 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>:
  234440:	48 83 ec 28          	sub    $0x28,%rsp
  234444:	49 89 f2             	mov    %rsi,%r10
  234447:	44 8b 1f             	mov    (%rdi),%r11d
  23444a:	b9 27 00 00 00       	mov    $0x27,%ecx
  23444f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  234456:	0f 82 bd 00 00 00    	jb     234519 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xd9>
  23445c:	bf 27 00 00 00       	mov    $0x27,%edi
  234461:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  234468:	c5 6d 34 
  23446b:	4c 8d 0d 66 fc fc ff 	lea    -0x3039a(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234472:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  234479:	00 00 00 
  23447c:	0f 1f 40 00          	nopl   0x0(%rax)
  234480:	4c 89 d8             	mov    %r11,%rax
  234483:	49 f7 e0             	mul    %r8
  234486:	48 c1 ea 0b          	shr    $0xb,%rdx
  23448a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  234490:	44 89 d9             	mov    %r11d,%ecx
  234493:	29 c1                	sub    %eax,%ecx
  234495:	0f b7 c1             	movzwl %cx,%eax
  234498:	c1 e8 02             	shr    $0x2,%eax
  23449b:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  2344a1:	c1 e8 11             	shr    $0x11,%eax
  2344a4:	6b f0 64             	imul   $0x64,%eax,%esi
  2344a7:	29 f1                	sub    %esi,%ecx
  2344a9:	0f b7 f1             	movzwl %cx,%esi
  2344ac:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  2344b0:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  2344b5:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  2344ba:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  2344bf:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  2344c4:	48 89 cf             	mov    %rcx,%rdi
  2344c7:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  2344ce:	49 89 d3             	mov    %rdx,%r11
  2344d1:	77 ad                	ja     234480 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x40>
  2344d3:	48 83 fa 63          	cmp    $0x63,%rdx
  2344d7:	76 2e                	jbe    234507 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  2344d9:	0f b7 c2             	movzwl %dx,%eax
  2344dc:	c1 e8 02             	shr    $0x2,%eax
  2344df:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  2344e5:	c1 e8 11             	shr    $0x11,%eax
  2344e8:	6b f0 64             	imul   $0x64,%eax,%esi
  2344eb:	29 f2                	sub    %esi,%edx
  2344ed:	0f b7 d2             	movzwl %dx,%edx
  2344f0:	48 8d 35 e1 fb fc ff 	lea    -0x3041f(%rip),%rsi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2344f7:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  2344fb:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  234500:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  234504:	48 89 c2             	mov    %rax,%rdx
  234507:	48 83 fa 0a          	cmp    $0xa,%rdx
  23450b:	7d 17                	jge    234524 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xe4>
  23450d:	80 c2 30             	add    $0x30,%dl
  234510:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  234513:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  234517:	eb 1f                	jmp    234538 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xf8>
  234519:	4c 89 da             	mov    %r11,%rdx
  23451c:	48 83 fa 63          	cmp    $0x63,%rdx
  234520:	77 b7                	ja     2344d9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x99>
  234522:	eb e3                	jmp    234507 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  234524:	48 8d 05 ad fb fc ff 	lea    -0x30453(%rip),%rax        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  23452b:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  23452f:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  234534:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  234538:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  23453c:	49 83 c0 01          	add    $0x1,%r8
  234540:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  234546:	49 29 c9             	sub    %rcx,%r9
  234549:	48 8d 15 da 07 fd ff 	lea    -0x2f826(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234550:	4c 89 d7             	mov    %r10,%rdi
  234553:	be 01 00 00 00       	mov    $0x1,%esi
  234558:	31 c9                	xor    %ecx,%ecx
  23455a:	e8 21 0a 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  23455f:	48 83 c4 28          	add    $0x28,%rsp
  234563:	c3                   	retq   
  234564:	cc                   	int3   
  234565:	cc                   	int3   
  234566:	cc                   	int3   
  234567:	cc                   	int3   
  234568:	cc                   	int3   
  234569:	cc                   	int3   
  23456a:	cc                   	int3   
  23456b:	cc                   	int3   
  23456c:	cc                   	int3   
  23456d:	cc                   	int3   
  23456e:	cc                   	int3   
  23456f:	cc                   	int3   

0000000000234570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>:
  234570:	48 83 ec 28          	sub    $0x28,%rsp
  234574:	49 89 f2             	mov    %rsi,%r10
  234577:	4c 8b 1f             	mov    (%rdi),%r11
  23457a:	b9 27 00 00 00       	mov    $0x27,%ecx
  23457f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  234586:	0f 82 bd 00 00 00    	jb     234649 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xd9>
  23458c:	bf 27 00 00 00       	mov    $0x27,%edi
  234591:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  234598:	c5 6d 34 
  23459b:	4c 8d 0d 36 fb fc ff 	lea    -0x304ca(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2345a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2345a9:	00 00 00 
  2345ac:	0f 1f 40 00          	nopl   0x0(%rax)
  2345b0:	4c 89 d8             	mov    %r11,%rax
  2345b3:	49 f7 e0             	mul    %r8
  2345b6:	48 c1 ea 0b          	shr    $0xb,%rdx
  2345ba:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  2345c0:	44 89 d9             	mov    %r11d,%ecx
  2345c3:	29 c1                	sub    %eax,%ecx
  2345c5:	0f b7 c1             	movzwl %cx,%eax
  2345c8:	c1 e8 02             	shr    $0x2,%eax
  2345cb:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  2345d1:	c1 e8 11             	shr    $0x11,%eax
  2345d4:	6b f0 64             	imul   $0x64,%eax,%esi
  2345d7:	29 f1                	sub    %esi,%ecx
  2345d9:	0f b7 f1             	movzwl %cx,%esi
  2345dc:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  2345e0:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  2345e5:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  2345ea:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  2345ef:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  2345f4:	48 89 cf             	mov    %rcx,%rdi
  2345f7:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  2345fe:	49 89 d3             	mov    %rdx,%r11
  234601:	77 ad                	ja     2345b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x40>
  234603:	48 83 fa 63          	cmp    $0x63,%rdx
  234607:	7e 2e                	jle    234637 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  234609:	0f b7 c2             	movzwl %dx,%eax
  23460c:	c1 e8 02             	shr    $0x2,%eax
  23460f:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  234615:	c1 e8 11             	shr    $0x11,%eax
  234618:	6b f0 64             	imul   $0x64,%eax,%esi
  23461b:	29 f2                	sub    %esi,%edx
  23461d:	0f b7 d2             	movzwl %dx,%edx
  234620:	48 8d 35 b1 fa fc ff 	lea    -0x3054f(%rip),%rsi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234627:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  23462b:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  234630:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  234634:	48 89 c2             	mov    %rax,%rdx
  234637:	48 83 fa 0a          	cmp    $0xa,%rdx
  23463b:	7d 17                	jge    234654 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xe4>
  23463d:	80 c2 30             	add    $0x30,%dl
  234640:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  234643:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  234647:	eb 1f                	jmp    234668 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xf8>
  234649:	4c 89 da             	mov    %r11,%rdx
  23464c:	48 83 fa 63          	cmp    $0x63,%rdx
  234650:	7f b7                	jg     234609 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x99>
  234652:	eb e3                	jmp    234637 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  234654:	48 8d 05 7d fa fc ff 	lea    -0x30583(%rip),%rax        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  23465b:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  23465f:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  234664:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  234668:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  23466c:	49 83 c0 01          	add    $0x1,%r8
  234670:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  234676:	49 29 c9             	sub    %rcx,%r9
  234679:	48 8d 15 aa 06 fd ff 	lea    -0x2f956(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234680:	4c 89 d7             	mov    %r10,%rdi
  234683:	be 01 00 00 00       	mov    $0x1,%esi
  234688:	31 c9                	xor    %ecx,%ecx
  23468a:	e8 f1 08 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  23468f:	48 83 c4 28          	add    $0x28,%rsp
  234693:	c3                   	retq   
  234694:	cc                   	int3   
  234695:	cc                   	int3   
  234696:	cc                   	int3   
  234697:	cc                   	int3   
  234698:	cc                   	int3   
  234699:	cc                   	int3   
  23469a:	cc                   	int3   
  23469b:	cc                   	int3   
  23469c:	cc                   	int3   
  23469d:	cc                   	int3   
  23469e:	cc                   	int3   
  23469f:	cc                   	int3   

00000000002346a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>:
  2346a0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  2346a7:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  2346ae:	00 
  2346af:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  2346b6:	00 
  2346b7:	48 81 fe 01 01 00 00 	cmp    $0x101,%rsi
  2346be:	72 51                	jb     234711 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x71>
  2346c0:	b8 00 01 00 00       	mov    $0x100,%eax
  2346c5:	4c 8d 0d 04 07 fd ff 	lea    -0x2f8fc(%rip),%r9        # 204dd0 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  2346cc:	41 ba 05 00 00 00    	mov    $0x5,%r10d
  2346d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2346d9:	00 00 00 
  2346dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2346e0:	80 3c 07 bf          	cmpb   $0xbf,(%rdi,%rax,1)
  2346e4:	7f 38                	jg     23471e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2346e6:	80 7c 07 ff c0       	cmpb   $0xc0,-0x1(%rdi,%rax,1)
  2346eb:	0f 8d bb 01 00 00    	jge    2348ac <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x20c>
  2346f1:	80 7c 07 fe bf       	cmpb   $0xbf,-0x2(%rdi,%rax,1)
  2346f6:	0f 8f b9 01 00 00    	jg     2348b5 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x215>
  2346fc:	80 7c 07 fd bf       	cmpb   $0xbf,-0x3(%rdi,%rax,1)
  234701:	0f 8f b7 01 00 00    	jg     2348be <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x21e>
  234707:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  23470b:	75 d3                	jne    2346e0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x40>
  23470d:	31 c0                	xor    %eax,%eax
  23470f:	eb 0d                	jmp    23471e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  234711:	4c 8d 0d b8 06 fd ff 	lea    -0x2f948(%rip),%r9        # 204dd0 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  234718:	45 31 d2             	xor    %r10d,%r10d
  23471b:	48 89 f0             	mov    %rsi,%rax
  23471e:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  234725:	00 
  234726:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  23472d:	00 
  23472e:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
  234735:	00 
  234736:	4c 89 94 24 b0 00 00 	mov    %r10,0xb0(%rsp)
  23473d:	00 
  23473e:	48 39 f2             	cmp    %rsi,%rdx
  234741:	77 0c                	ja     23474f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0xaf>
  234743:	48 39 f1             	cmp    %rsi,%rcx
  234746:	0f 86 8f 00 00 00    	jbe    2347db <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x13b>
  23474c:	48 89 ca             	mov    %rcx,%rdx
  23474f:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  234756:	00 
  234757:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  23475e:	00 
  23475f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  234764:	48 8b 05 bd 69 00 00 	mov    0x69bd(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  23476b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  234770:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  234777:	00 
  234778:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  23477d:	48 8d 05 bc 1d 00 00 	lea    0x1dbc(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  234784:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  234789:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  234790:	00 
  234791:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  234796:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  23479b:	48 8d 05 1e 68 00 00 	lea    0x681e(%rip),%rax        # 23afc0 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x18>
  2347a2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2347a7:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  2347ae:	00 00 
  2347b0:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  2347b7:	00 00 
  2347b9:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  2347be:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2347c3:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  2347ca:	00 00 
  2347cc:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2347d1:	4c 89 c6             	mov    %r8,%rsi
  2347d4:	e8 57 ed ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2347d9:	0f 0b                	ud2    
  2347db:	48 39 ca             	cmp    %rcx,%rdx
  2347de:	0f 86 99 00 00 00    	jbe    23487d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1dd>
  2347e4:	48 8d 84 24 c8 00 00 	lea    0xc8(%rsp),%rax
  2347eb:	00 
  2347ec:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2347f1:	48 8b 05 30 69 00 00 	mov    0x6930(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2347f8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2347fd:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  234804:	00 
  234805:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  23480a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  23480f:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  234816:	00 
  234817:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  23481c:	48 8d 05 1d 1d 00 00 	lea    0x1d1d(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  234823:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  234828:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  23482f:	00 
  234830:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  234835:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  23483c:	00 
  23483d:	48 8d 05 ac 67 00 00 	lea    0x67ac(%rip),%rax        # 23aff0 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x48>
  234844:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  234849:	48 c7 44 24 20 04 00 	movq   $0x4,0x20(%rsp)
  234850:	00 00 
  234852:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  234859:	00 00 
  23485b:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  234860:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  234865:	48 c7 44 24 40 04 00 	movq   $0x4,0x40(%rsp)
  23486c:	00 00 
  23486e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  234873:	4c 89 c6             	mov    %r8,%rsi
  234876:	e8 b5 ec ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  23487b:	0f 0b                	ud2    
  23487d:	48 85 d2             	test   %rdx,%rdx
  234880:	75 45                	jne    2348c7 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x227>
  234882:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  234887:	48 85 c9             	test   %rcx,%rcx
  23488a:	75 60                	jne    2348ec <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  23488c:	31 c9                	xor    %ecx,%ecx
  23488e:	48 39 f1             	cmp    %rsi,%rcx
  234891:	74 63                	je     2348f6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  234893:	48 8d 04 0f          	lea    (%rdi,%rcx,1),%rax
  234897:	0f b6 10             	movzbl (%rax),%edx
  23489a:	84 d2                	test   %dl,%dl
  23489c:	78 6e                	js     23490c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x26c>
  23489e:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  2348a2:	b8 01 00 00 00       	mov    $0x1,%eax
  2348a7:	e9 0e 01 00 00       	jmpq   2349ba <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  2348ac:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  2348b0:	e9 69 fe ff ff       	jmpq   23471e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2348b5:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  2348b9:	e9 60 fe ff ff       	jmpq   23471e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2348be:	48 83 c0 fd          	add    $0xfffffffffffffffd,%rax
  2348c2:	e9 57 fe ff ff       	jmpq   23471e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2348c7:	48 39 f2             	cmp    %rsi,%rdx
  2348ca:	73 08                	jae    2348d4 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x234>
  2348cc:	80 3c 17 bf          	cmpb   $0xbf,(%rdi,%rdx,1)
  2348d0:	7f b0                	jg     234882 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  2348d2:	eb 02                	jmp    2348d6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x236>
  2348d4:	74 ac                	je     234882 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  2348d6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2348db:	48 89 d1             	mov    %rdx,%rcx
  2348de:	eb 0c                	jmp    2348ec <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  2348e0:	80 3c 0f bf          	cmpb   $0xbf,(%rdi,%rcx,1)
  2348e4:	7f a8                	jg     23488e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ee>
  2348e6:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  2348ea:	74 a0                	je     23488c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ec>
  2348ec:	48 39 f1             	cmp    %rsi,%rcx
  2348ef:	72 ef                	jb     2348e0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x240>
  2348f1:	48 39 ce             	cmp    %rcx,%rsi
  2348f4:	75 f0                	jne    2348e6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x246>
  2348f6:	48 8d 3d a6 04 fd ff 	lea    -0x2fb5a(%rip),%rdi        # 204da3 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0x79>
  2348fd:	be 2b 00 00 00       	mov    $0x2b,%esi
  234902:	4c 89 c2             	mov    %r8,%rdx
  234905:	e8 56 eb ff ff       	callq  233460 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  23490a:	0f 0b                	ud2    
  23490c:	48 01 f7             	add    %rsi,%rdi
  23490f:	4c 8d 50 01          	lea    0x1(%rax),%r10
  234913:	31 f6                	xor    %esi,%esi
  234915:	49 89 f9             	mov    %rdi,%r9
  234918:	49 39 fa             	cmp    %rdi,%r10
  23491b:	74 0e                	je     23492b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x28b>
  23491d:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  234921:	48 83 c0 02          	add    $0x2,%rax
  234925:	83 e6 3f             	and    $0x3f,%esi
  234928:	49 89 c1             	mov    %rax,%r9
  23492b:	89 d0                	mov    %edx,%eax
  23492d:	83 e0 1f             	and    $0x1f,%eax
  234930:	80 fa df             	cmp    $0xdf,%dl
  234933:	76 4e                	jbe    234983 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e3>
  234935:	45 31 db             	xor    %r11d,%r11d
  234938:	49 89 fa             	mov    %rdi,%r10
  23493b:	49 39 f9             	cmp    %rdi,%r9
  23493e:	74 0f                	je     23494f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2af>
  234940:	45 0f b6 19          	movzbl (%r9),%r11d
  234944:	49 83 c1 01          	add    $0x1,%r9
  234948:	41 83 e3 3f          	and    $0x3f,%r11d
  23494c:	4d 89 ca             	mov    %r9,%r10
  23494f:	c1 e6 06             	shl    $0x6,%esi
  234952:	44 09 de             	or     %r11d,%esi
  234955:	80 fa f0             	cmp    $0xf0,%dl
  234958:	72 2e                	jb     234988 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e8>
  23495a:	31 d2                	xor    %edx,%edx
  23495c:	49 39 fa             	cmp    %rdi,%r10
  23495f:	74 07                	je     234968 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2c8>
  234961:	41 0f b6 12          	movzbl (%r10),%edx
  234965:	83 e2 3f             	and    $0x3f,%edx
  234968:	83 e0 07             	and    $0x7,%eax
  23496b:	c1 e0 12             	shl    $0x12,%eax
  23496e:	c1 e6 06             	shl    $0x6,%esi
  234971:	09 c6                	or     %eax,%esi
  234973:	09 d6                	or     %edx,%esi
  234975:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  23497b:	0f 84 75 ff ff ff    	je     2348f6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  234981:	eb 0a                	jmp    23498d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2ed>
  234983:	c1 e0 06             	shl    $0x6,%eax
  234986:	eb 03                	jmp    23498b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2eb>
  234988:	c1 e0 0c             	shl    $0xc,%eax
  23498b:	09 c6                	or     %eax,%esi
  23498d:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  234991:	b8 01 00 00 00       	mov    $0x1,%eax
  234996:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  23499c:	72 1c                	jb     2349ba <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  23499e:	b8 02 00 00 00       	mov    $0x2,%eax
  2349a3:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  2349a9:	72 0f                	jb     2349ba <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  2349ab:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  2349b1:	b8 04 00 00 00       	mov    $0x4,%eax
  2349b6:	48 83 d8 00          	sbb    $0x0,%rax
  2349ba:	48 01 c8             	add    %rcx,%rax
  2349bd:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  2349c4:	00 
  2349c5:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2349cc:	00 
  2349cd:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2349d2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2349d7:	48 8b 05 4a 67 00 00 	mov    0x674a(%rip),%rax        # 23b128 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  2349de:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2349e3:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
  2349e8:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2349ed:	48 8b 05 b4 67 00 00 	mov    0x67b4(%rip),%rax        # 23b1a8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xf8>
  2349f4:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2349f9:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  234a00:	00 
  234a01:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  234a06:	48 8d 05 c3 f1 ff ff 	lea    -0xe3d(%rip),%rax        # 233bd0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>
  234a0d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  234a12:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  234a19:	00 
  234a1a:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  234a1f:	48 8d 05 1a 1b 00 00 	lea    0x1b1a(%rip),%rax        # 236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  234a26:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  234a2d:	00 
  234a2e:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  234a35:	00 
  234a36:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  234a3d:	00 
  234a3e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  234a45:	00 
  234a46:	48 8d 05 e3 65 00 00 	lea    0x65e3(%rip),%rax        # 23b030 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x88>
  234a4d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  234a52:	48 c7 44 24 20 05 00 	movq   $0x5,0x20(%rsp)
  234a59:	00 00 
  234a5b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  234a62:	00 00 
  234a64:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  234a69:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  234a6e:	48 c7 44 24 40 05 00 	movq   $0x5,0x40(%rsp)
  234a75:	00 00 
  234a77:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  234a7c:	4c 89 c6             	mov    %r8,%rsi
  234a7f:	e8 ac ea ff ff       	callq  233530 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  234a84:	0f 0b                	ud2    
  234a86:	cc                   	int3   
  234a87:	cc                   	int3   
  234a88:	cc                   	int3   
  234a89:	cc                   	int3   
  234a8a:	cc                   	int3   
  234a8b:	cc                   	int3   
  234a8c:	cc                   	int3   
  234a8d:	cc                   	int3   
  234a8e:	cc                   	int3   
  234a8f:	cc                   	int3   

0000000000234a90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E>:
  234a90:	53                   	push   %rbx
  234a91:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  234a98:	48 8b 07             	mov    (%rdi),%rax
  234a9b:	48 8b 08             	mov    (%rax),%rcx
  234a9e:	8b 46 30             	mov    0x30(%rsi),%eax
  234aa1:	a8 10                	test   $0x10,%al
  234aa3:	0f 85 de 00 00 00    	jne    234b87 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xf7>
  234aa9:	a8 20                	test   $0x20,%al
  234aab:	0f 85 1c 01 00 00    	jne    234bcd <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x13d>
  234ab1:	bb 27 00 00 00       	mov    $0x27,%ebx
  234ab6:	48 81 f9 10 27 00 00 	cmp    $0x2710,%rcx
  234abd:	0f 82 7c 01 00 00    	jb     234c3f <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1af>
  234ac3:	41 bb 27 00 00 00    	mov    $0x27,%r11d
  234ac9:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  234ad0:	c5 6d 34 
  234ad3:	4c 8d 0d fe f5 fc ff 	lea    -0x30a02(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234ada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  234ae0:	48 89 c8             	mov    %rcx,%rax
  234ae3:	49 f7 e0             	mul    %r8
  234ae6:	48 c1 ea 0b          	shr    $0xb,%rdx
  234aea:	44 69 d2 10 27 00 00 	imul   $0x2710,%edx,%r10d
  234af1:	89 c8                	mov    %ecx,%eax
  234af3:	44 29 d0             	sub    %r10d,%eax
  234af6:	0f b7 f8             	movzwl %ax,%edi
  234af9:	c1 ef 02             	shr    $0x2,%edi
  234afc:	44 69 d7 7b 14 00 00 	imul   $0x147b,%edi,%r10d
  234b03:	41 c1 ea 11          	shr    $0x11,%r10d
  234b07:	41 6b fa 64          	imul   $0x64,%r10d,%edi
  234b0b:	29 f8                	sub    %edi,%eax
  234b0d:	0f b7 f8             	movzwl %ax,%edi
  234b10:	49 8d 5b fc          	lea    -0x4(%r11),%rbx
  234b14:	43 0f b7 04 51       	movzwl (%r9,%r10,2),%eax
  234b19:	66 42 89 44 1c fc    	mov    %ax,-0x4(%rsp,%r11,1)
  234b1f:	41 0f b7 04 79       	movzwl (%r9,%rdi,2),%eax
  234b24:	66 42 89 44 1c fe    	mov    %ax,-0x2(%rsp,%r11,1)
  234b2a:	49 89 db             	mov    %rbx,%r11
  234b2d:	48 81 f9 ff e0 f5 05 	cmp    $0x5f5e0ff,%rcx
  234b34:	48 89 d1             	mov    %rdx,%rcx
  234b37:	77 a7                	ja     234ae0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x50>
  234b39:	48 83 fa 63          	cmp    $0x63,%rdx
  234b3d:	7e 2e                	jle    234b6d <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xdd>
  234b3f:	0f b7 c2             	movzwl %dx,%eax
  234b42:	c1 e8 02             	shr    $0x2,%eax
  234b45:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  234b4b:	c1 e8 11             	shr    $0x11,%eax
  234b4e:	6b c8 64             	imul   $0x64,%eax,%ecx
  234b51:	29 ca                	sub    %ecx,%edx
  234b53:	0f b7 ca             	movzwl %dx,%ecx
  234b56:	48 8d 15 7b f5 fc ff 	lea    -0x30a85(%rip),%rdx        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234b5d:	0f b7 0c 4a          	movzwl (%rdx,%rcx,2),%ecx
  234b61:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  234b66:	48 83 c3 fe          	add    $0xfffffffffffffffe,%rbx
  234b6a:	48 89 c2             	mov    %rax,%rdx
  234b6d:	48 83 fa 0a          	cmp    $0xa,%rdx
  234b71:	0f 8d da 00 00 00    	jge    234c51 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1c1>
  234b77:	80 c2 30             	add    $0x30,%dl
  234b7a:	88 54 1c ff          	mov    %dl,-0x1(%rsp,%rbx,1)
  234b7e:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  234b82:	e9 de 00 00 00       	jmpq   234c65 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x1d5>
  234b87:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  234b8e:	00 
  234b8f:	45 31 c9             	xor    %r9d,%r9d
  234b92:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  234b98:	48 89 ca             	mov    %rcx,%rdx
  234b9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  234ba0:	48 c1 ea 04          	shr    $0x4,%rdx
  234ba4:	89 c8                	mov    %ecx,%eax
  234ba6:	24 0f                	and    $0xf,%al
  234ba8:	3c 0a                	cmp    $0xa,%al
  234baa:	bf 57 00 00 00       	mov    $0x57,%edi
  234baf:	41 0f 42 fa          	cmovb  %r10d,%edi
  234bb3:	40 00 c7             	add    %al,%dil
  234bb6:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234bba:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234bbe:	49 83 c1 01          	add    $0x1,%r9
  234bc2:	48 83 f9 0f          	cmp    $0xf,%rcx
  234bc6:	48 89 d1             	mov    %rdx,%rcx
  234bc9:	77 d5                	ja     234ba0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x110>
  234bcb:	eb 3f                	jmp    234c0c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x17c>
  234bcd:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  234bd4:	00 
  234bd5:	45 31 c9             	xor    %r9d,%r9d
  234bd8:	b8 30 00 00 00       	mov    $0x30,%eax
  234bdd:	48 89 ca             	mov    %rcx,%rdx
  234be0:	48 c1 ea 04          	shr    $0x4,%rdx
  234be4:	89 cb                	mov    %ecx,%ebx
  234be6:	80 e3 0f             	and    $0xf,%bl
  234be9:	80 fb 0a             	cmp    $0xa,%bl
  234bec:	bf 37 00 00 00       	mov    $0x37,%edi
  234bf1:	0f 42 f8             	cmovb  %eax,%edi
  234bf4:	40 00 df             	add    %bl,%dil
  234bf7:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  234bfb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  234bff:	49 83 c1 01          	add    $0x1,%r9
  234c03:	48 83 f9 0f          	cmp    $0xf,%rcx
  234c07:	48 89 d1             	mov    %rdx,%rcx
  234c0a:	77 d4                	ja     234be0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x150>
  234c0c:	bf 80 00 00 00       	mov    $0x80,%edi
  234c11:	4c 29 cf             	sub    %r9,%rdi
  234c14:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  234c1b:	73 74                	jae    234c91 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0x201>
  234c1d:	48 8d 15 b2 f4 fc ff 	lea    -0x30b4e(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  234c24:	b9 02 00 00 00       	mov    $0x2,%ecx
  234c29:	48 89 f7             	mov    %rsi,%rdi
  234c2c:	be 01 00 00 00       	mov    $0x1,%esi
  234c31:	e8 4a 03 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234c36:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  234c3d:	5b                   	pop    %rbx
  234c3e:	c3                   	retq   
  234c3f:	48 89 ca             	mov    %rcx,%rdx
  234c42:	48 83 fa 63          	cmp    $0x63,%rdx
  234c46:	0f 8f f3 fe ff ff    	jg     234b3f <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xaf>
  234c4c:	e9 1c ff ff ff       	jmpq   234b6d <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc80f80011fb55562E+0xdd>
  234c51:	48 8d 05 80 f4 fc ff 	lea    -0x30b80(%rip),%rax        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  234c58:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  234c5c:	66 89 44 1c fe       	mov    %ax,-0x2(%rsp,%rbx,1)
  234c61:	48 83 c3 fe          	add    $0xfffffffffffffffe,%rbx
  234c65:	4c 8d 04 1c          	lea    (%rsp,%rbx,1),%r8
  234c69:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  234c6f:	49 29 d9             	sub    %rbx,%r9
  234c72:	48 8d 15 b1 00 fd ff 	lea    -0x2ff4f(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  234c79:	48 89 f7             	mov    %rsi,%rdi
  234c7c:	be 01 00 00 00       	mov    $0x1,%esi
  234c81:	31 c9                	xor    %ecx,%ecx
  234c83:	e8 f8 02 00 00       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  234c88:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  234c8f:	5b                   	pop    %rbx
  234c90:	c3                   	retq   
  234c91:	48 8d 15 40 60 00 00 	lea    0x6040(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  234c98:	be 80 00 00 00       	mov    $0x80,%esi
  234c9d:	e8 be ea ff ff       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  234ca2:	0f 0b                	ud2    
  234ca4:	cc                   	int3   
  234ca5:	cc                   	int3   
  234ca6:	cc                   	int3   
  234ca7:	cc                   	int3   
  234ca8:	cc                   	int3   
  234ca9:	cc                   	int3   
  234caa:	cc                   	int3   
  234cab:	cc                   	int3   
  234cac:	cc                   	int3   
  234cad:	cc                   	int3   
  234cae:	cc                   	int3   
  234caf:	cc                   	int3   

0000000000234cb0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>:
  234cb0:	48 8b 07             	mov    (%rdi),%rax
  234cb3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  234cba:	00 00 00 
  234cbd:	0f 1f 00             	nopl   (%rax)
  234cc0:	eb fe                	jmp    234cc0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467+0x10>
  234cc2:	cc                   	int3   
  234cc3:	cc                   	int3   
  234cc4:	cc                   	int3   
  234cc5:	cc                   	int3   
  234cc6:	cc                   	int3   
  234cc7:	cc                   	int3   
  234cc8:	cc                   	int3   
  234cc9:	cc                   	int3   
  234cca:	cc                   	int3   
  234ccb:	cc                   	int3   
  234ccc:	cc                   	int3   
  234ccd:	cc                   	int3   
  234cce:	cc                   	int3   
  234ccf:	cc                   	int3   

0000000000234cd0 <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hbd463aa3be6e96dfE.llvm.2324975589069524467>:
  234cd0:	c3                   	retq   
  234cd1:	cc                   	int3   
  234cd2:	cc                   	int3   
  234cd3:	cc                   	int3   
  234cd4:	cc                   	int3   
  234cd5:	cc                   	int3   
  234cd6:	cc                   	int3   
  234cd7:	cc                   	int3   
  234cd8:	cc                   	int3   
  234cd9:	cc                   	int3   
  234cda:	cc                   	int3   
  234cdb:	cc                   	int3   
  234cdc:	cc                   	int3   
  234cdd:	cc                   	int3   
  234cde:	cc                   	int3   
  234cdf:	cc                   	int3   

0000000000234ce0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>:
  234ce0:	48 83 ec 38          	sub    $0x38,%rsp
  234ce4:	48 8b 46 20          	mov    0x20(%rsi),%rax
  234ce8:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  234cec:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  234cf0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  234cf5:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
  234cf9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  234cfe:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  234d02:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  234d07:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  234d0b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  234d10:	48 8b 0f             	mov    (%rdi),%rcx
  234d13:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  234d17:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  234d1c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  234d21:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  234d26:	48 89 c7             	mov    %rax,%rdi
  234d29:	e8 12 00 00 00       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  234d2e:	48 83 c4 38          	add    $0x38,%rsp
  234d32:	c3                   	retq   
  234d33:	cc                   	int3   
  234d34:	cc                   	int3   
  234d35:	cc                   	int3   
  234d36:	cc                   	int3   
  234d37:	cc                   	int3   
  234d38:	cc                   	int3   
  234d39:	cc                   	int3   
  234d3a:	cc                   	int3   
  234d3b:	cc                   	int3   
  234d3c:	cc                   	int3   
  234d3d:	cc                   	int3   
  234d3e:	cc                   	int3   
  234d3f:	cc                   	int3   

0000000000234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>:
  234d40:	55                   	push   %rbp
  234d41:	41 57                	push   %r15
  234d43:	41 56                	push   %r14
  234d45:	41 55                	push   %r13
  234d47:	41 54                	push   %r12
  234d49:	53                   	push   %rbx
  234d4a:	48 83 ec 48          	sub    $0x48,%rsp
  234d4e:	49 89 d4             	mov    %rdx,%r12
  234d51:	48 b8 00 00 00 00 20 	movabs $0x2000000000,%rax
  234d58:	00 00 00 
  234d5b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  234d60:	c6 44 24 38 03       	movb   $0x3,0x38(%rsp)
  234d65:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  234d6c:	00 
  234d6d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  234d74:	00 00 
  234d76:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  234d7b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  234d80:	48 8b 5a 10          	mov    0x10(%rdx),%rbx
  234d84:	48 85 db             	test   %rbx,%rbx
  234d87:	0f 84 28 01 00 00    	je     234eb5 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x175>
  234d8d:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  234d92:	4c 6b e8 38          	imul   $0x38,%rax,%r13
  234d96:	4d 85 ed             	test   %r13,%r13
  234d99:	0f 84 91 01 00 00    	je     234f30 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  234d9f:	49 8b 2c 24          	mov    (%r12),%rbp
  234da3:	4c 8d 3c c5 f8 ff ff 	lea    -0x8(,%rax,8),%r15
  234daa:	ff 
  234dab:	49 c1 ef 03          	shr    $0x3,%r15
  234daf:	49 83 c7 01          	add    $0x1,%r15
  234db3:	48 83 c5 08          	add    $0x8,%rbp
  234db7:	45 31 f6             	xor    %r14d,%r14d
  234dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  234dc0:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  234dc4:	48 85 d2             	test   %rdx,%rdx
  234dc7:	74 19                	je     234de2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xa2>
  234dc9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  234dce:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  234dd3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  234dd7:	ff 50 18             	callq  *0x18(%rax)
  234dda:	84 c0                	test   %al,%al
  234ddc:	0f 85 80 01 00 00    	jne    234f62 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  234de2:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  234de7:	42 8b 4c 33 28       	mov    0x28(%rbx,%r14,1),%ecx
  234dec:	89 4c 24 34          	mov    %ecx,0x34(%rsp)
  234df0:	42 0f b6 4c 33 30    	movzbl 0x30(%rbx,%r14,1),%ecx
  234df6:	88 4c 24 38          	mov    %cl,0x38(%rsp)
  234dfa:	42 8b 4c 33 2c       	mov    0x2c(%rbx,%r14,1),%ecx
  234dff:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
  234e03:	4a 8b 54 33 18       	mov    0x18(%rbx,%r14,1),%rdx
  234e08:	4a 8b 4c 33 20       	mov    0x20(%rbx,%r14,1),%rcx
  234e0d:	48 85 d2             	test   %rdx,%rdx
  234e10:	74 23                	je     234e35 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xf5>
  234e12:	48 83 fa 01          	cmp    $0x1,%rdx
  234e16:	75 12                	jne    234e2a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xea>
  234e18:	48 c1 e1 04          	shl    $0x4,%rcx
  234e1c:	48 8d 15 8d fe ff ff 	lea    -0x173(%rip),%rdx        # 234cb0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  234e23:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  234e28:	74 04                	je     234e2e <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xee>
  234e2a:	31 d2                	xor    %edx,%edx
  234e2c:	eb 0c                	jmp    234e3a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xfa>
  234e2e:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  234e32:	48 8b 09             	mov    (%rcx),%rcx
  234e35:	ba 01 00 00 00       	mov    $0x1,%edx
  234e3a:	48 89 14 24          	mov    %rdx,(%rsp)
  234e3e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  234e43:	4a 8b 54 33 08       	mov    0x8(%rbx,%r14,1),%rdx
  234e48:	4a 8b 4c 33 10       	mov    0x10(%rbx,%r14,1),%rcx
  234e4d:	48 85 d2             	test   %rdx,%rdx
  234e50:	74 23                	je     234e75 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x135>
  234e52:	48 83 fa 01          	cmp    $0x1,%rdx
  234e56:	75 12                	jne    234e6a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12a>
  234e58:	48 c1 e1 04          	shl    $0x4,%rcx
  234e5c:	48 8d 15 4d fe ff ff 	lea    -0x1b3(%rip),%rdx        # 234cb0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  234e63:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  234e68:	74 04                	je     234e6e <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12e>
  234e6a:	31 d2                	xor    %edx,%edx
  234e6c:	eb 0c                	jmp    234e7a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x13a>
  234e6e:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  234e72:	48 8b 09             	mov    (%rcx),%rcx
  234e75:	ba 01 00 00 00       	mov    $0x1,%edx
  234e7a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  234e7f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  234e84:	4a 8b 0c 33          	mov    (%rbx,%r14,1),%rcx
  234e88:	48 c1 e1 04          	shl    $0x4,%rcx
  234e8c:	48 8b 3c 08          	mov    (%rax,%rcx,1),%rdi
  234e90:	48 89 e6             	mov    %rsp,%rsi
  234e93:	ff 54 08 08          	callq  *0x8(%rax,%rcx,1)
  234e97:	84 c0                	test   %al,%al
  234e99:	0f 85 c3 00 00 00    	jne    234f62 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  234e9f:	48 83 c5 10          	add    $0x10,%rbp
  234ea3:	49 83 c6 38          	add    $0x38,%r14
  234ea7:	4d 39 f5             	cmp    %r14,%r13
  234eaa:	0f 85 10 ff ff ff    	jne    234dc0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x80>
  234eb0:	4c 89 fa             	mov    %r15,%rdx
  234eb3:	eb 7d                	jmp    234f32 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  234eb5:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  234eba:	4d 85 ed             	test   %r13,%r13
  234ebd:	74 71                	je     234f30 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  234ebf:	49 8b 6c 24 20       	mov    0x20(%r12),%rbp
  234ec4:	49 8b 1c 24          	mov    (%r12),%rbx
  234ec8:	49 c1 e5 04          	shl    $0x4,%r13
  234ecc:	49 8d 45 f0          	lea    -0x10(%r13),%rax
  234ed0:	48 c1 e8 04          	shr    $0x4,%rax
  234ed4:	48 83 c0 01          	add    $0x1,%rax
  234ed8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  234edd:	45 31 ff             	xor    %r15d,%r15d
  234ee0:	49 89 e6             	mov    %rsp,%r14
  234ee3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  234eea:	00 00 00 
  234eed:	0f 1f 00             	nopl   (%rax)
  234ef0:	4a 8b 54 3b 08       	mov    0x8(%rbx,%r15,1),%rdx
  234ef5:	48 85 d2             	test   %rdx,%rdx
  234ef8:	74 15                	je     234f0f <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1cf>
  234efa:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  234eff:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  234f04:	4a 8b 34 3b          	mov    (%rbx,%r15,1),%rsi
  234f08:	ff 50 18             	callq  *0x18(%rax)
  234f0b:	84 c0                	test   %al,%al
  234f0d:	75 53                	jne    234f62 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  234f0f:	4a 8b 7c 3d 00       	mov    0x0(%rbp,%r15,1),%rdi
  234f14:	4c 89 f6             	mov    %r14,%rsi
  234f17:	42 ff 54 3d 08       	callq  *0x8(%rbp,%r15,1)
  234f1c:	84 c0                	test   %al,%al
  234f1e:	75 42                	jne    234f62 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  234f20:	49 83 c7 10          	add    $0x10,%r15
  234f24:	4d 39 fd             	cmp    %r15,%r13
  234f27:	75 c7                	jne    234ef0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1b0>
  234f29:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  234f2e:	eb 02                	jmp    234f32 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  234f30:	31 d2                	xor    %edx,%edx
  234f32:	48 89 d1             	mov    %rdx,%rcx
  234f35:	48 c1 e1 04          	shl    $0x4,%rcx
  234f39:	49 03 0c 24          	add    (%r12),%rcx
  234f3d:	31 c0                	xor    %eax,%eax
  234f3f:	49 3b 54 24 08       	cmp    0x8(%r12),%rdx
  234f44:	48 0f 42 c1          	cmovb  %rcx,%rax
  234f48:	73 1c                	jae    234f66 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  234f4a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  234f4f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  234f54:	48 8b 30             	mov    (%rax),%rsi
  234f57:	48 8b 50 08          	mov    0x8(%rax),%rdx
  234f5b:	ff 51 18             	callq  *0x18(%rcx)
  234f5e:	84 c0                	test   %al,%al
  234f60:	74 04                	je     234f66 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  234f62:	b0 01                	mov    $0x1,%al
  234f64:	eb 02                	jmp    234f68 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x228>
  234f66:	31 c0                	xor    %eax,%eax
  234f68:	48 83 c4 48          	add    $0x48,%rsp
  234f6c:	5b                   	pop    %rbx
  234f6d:	41 5c                	pop    %r12
  234f6f:	41 5d                	pop    %r13
  234f71:	41 5e                	pop    %r14
  234f73:	41 5f                	pop    %r15
  234f75:	5d                   	pop    %rbp
  234f76:	c3                   	retq   
  234f77:	cc                   	int3   
  234f78:	cc                   	int3   
  234f79:	cc                   	int3   
  234f7a:	cc                   	int3   
  234f7b:	cc                   	int3   
  234f7c:	cc                   	int3   
  234f7d:	cc                   	int3   
  234f7e:	cc                   	int3   
  234f7f:	cc                   	int3   

0000000000234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>:
  234f80:	55                   	push   %rbp
  234f81:	41 57                	push   %r15
  234f83:	41 56                	push   %r14
  234f85:	41 55                	push   %r13
  234f87:	41 54                	push   %r12
  234f89:	53                   	push   %rbx
  234f8a:	48 83 ec 38          	sub    $0x38,%rsp
  234f8e:	4d 89 ce             	mov    %r9,%r14
  234f91:	4d 89 c4             	mov    %r8,%r12
  234f94:	49 89 fd             	mov    %rdi,%r13
  234f97:	85 f6                	test   %esi,%esi
  234f99:	74 47                	je     234fe2 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x62>
  234f9b:	45 8b 45 30          	mov    0x30(%r13),%r8d
  234f9f:	45 89 c2             	mov    %r8d,%r10d
  234fa2:	41 83 e2 01          	and    $0x1,%r10d
  234fa6:	4d 85 d2             	test   %r10,%r10
  234fa9:	b8 00 00 11 00       	mov    $0x110000,%eax
  234fae:	41 bf 2b 00 00 00    	mov    $0x2b,%r15d
  234fb4:	44 0f 44 f8          	cmove  %eax,%r15d
  234fb8:	4d 01 f2             	add    %r14,%r10
  234fbb:	41 f6 c0 04          	test   $0x4,%r8b
  234fbf:	74 35                	je     234ff6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x76>
  234fc1:	48 85 c9             	test   %rcx,%rcx
  234fc4:	74 57                	je     23501d <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x9d>
  234fc6:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
  234fca:	89 c8                	mov    %ecx,%eax
  234fcc:	83 e0 03             	and    $0x3,%eax
  234fcf:	48 83 fe 03          	cmp    $0x3,%rsi
  234fd3:	73 52                	jae    235027 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xa7>
  234fd5:	49 89 c9             	mov    %rcx,%r9
  234fd8:	31 f6                	xor    %esi,%esi
  234fda:	48 89 d7             	mov    %rdx,%rdi
  234fdd:	e9 99 00 00 00       	jmpq   23507b <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xfb>
  234fe2:	4d 8d 56 01          	lea    0x1(%r14),%r10
  234fe6:	45 8b 45 30          	mov    0x30(%r13),%r8d
  234fea:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  234ff0:	41 f6 c0 04          	test   $0x4,%r8b
  234ff4:	75 cb                	jne    234fc1 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x41>
  234ff6:	31 d2                	xor    %edx,%edx
  234ff8:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  234ffd:	0f 84 b3 00 00 00    	je     2350b6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x136>
  235003:	4c 89 ef             	mov    %r13,%rdi
  235006:	44 89 fe             	mov    %r15d,%esi
  235009:	e8 42 03 00 00       	callq  235350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  23500e:	b1 01                	mov    $0x1,%cl
  235010:	84 c0                	test   %al,%al
  235012:	0f 84 0c 01 00 00    	je     235124 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1a4>
  235018:	e9 cc 02 00 00       	jmpq   2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  23501d:	49 89 c9             	mov    %rcx,%r9
  235020:	31 f6                	xor    %esi,%esi
  235022:	e9 7e 00 00 00       	jmpq   2350a5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  235027:	49 89 c9             	mov    %rcx,%r9
  23502a:	48 89 cd             	mov    %rcx,%rbp
  23502d:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  235031:	48 f7 dd             	neg    %rbp
  235034:	31 f6                	xor    %esi,%esi
  235036:	48 89 d7             	mov    %rdx,%rdi
  235039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  235040:	31 db                	xor    %ebx,%ebx
  235042:	80 3f c0             	cmpb   $0xc0,(%rdi)
  235045:	0f 9d c3             	setge  %bl
  235048:	48 01 f3             	add    %rsi,%rbx
  23504b:	31 f6                	xor    %esi,%esi
  23504d:	80 7f 01 c0          	cmpb   $0xc0,0x1(%rdi)
  235051:	40 0f 9d c6          	setge  %sil
  235055:	48 01 de             	add    %rbx,%rsi
  235058:	31 db                	xor    %ebx,%ebx
  23505a:	80 7f 02 c0          	cmpb   $0xc0,0x2(%rdi)
  23505e:	0f 9d c3             	setge  %bl
  235061:	48 01 f3             	add    %rsi,%rbx
  235064:	31 f6                	xor    %esi,%esi
  235066:	80 7f 03 c0          	cmpb   $0xc0,0x3(%rdi)
  23506a:	48 8d 7f 04          	lea    0x4(%rdi),%rdi
  23506e:	40 0f 9d c6          	setge  %sil
  235072:	48 01 de             	add    %rbx,%rsi
  235075:	48 83 c5 04          	add    $0x4,%rbp
  235079:	75 c5                	jne    235040 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xc0>
  23507b:	48 85 c0             	test   %rax,%rax
  23507e:	74 25                	je     2350a5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  235080:	31 ed                	xor    %ebp,%ebp
  235082:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  235089:	00 00 00 
  23508c:	0f 1f 40 00          	nopl   0x0(%rax)
  235090:	31 db                	xor    %ebx,%ebx
  235092:	80 3c 2f c0          	cmpb   $0xc0,(%rdi,%rbp,1)
  235096:	0f 9d c3             	setge  %bl
  235099:	48 01 de             	add    %rbx,%rsi
  23509c:	48 83 c5 01          	add    $0x1,%rbp
  2350a0:	48 39 e8             	cmp    %rbp,%rax
  2350a3:	75 eb                	jne    235090 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x110>
  2350a5:	49 01 f2             	add    %rsi,%r10
  2350a8:	4c 89 c9             	mov    %r9,%rcx
  2350ab:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  2350b0:	0f 85 4d ff ff ff    	jne    235003 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x83>
  2350b6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2350bb:	49 8b 6d 08          	mov    0x8(%r13),%rbp
  2350bf:	48 89 eb             	mov    %rbp,%rbx
  2350c2:	4c 29 d3             	sub    %r10,%rbx
  2350c5:	76 43                	jbe    23510a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x18a>
  2350c7:	41 f6 c0 08          	test   $0x8,%r8b
  2350cb:	75 79                	jne    235146 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1c6>
  2350cd:	4c 29 d5             	sub    %r10,%rbp
  2350d0:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  2350d4:	80 f9 03             	cmp    $0x3,%cl
  2350d7:	b8 01 00 00 00       	mov    $0x1,%eax
  2350dc:	0f 45 c1             	cmovne %ecx,%eax
  2350df:	84 c0                	test   %al,%al
  2350e1:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  2350e6:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  2350eb:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2350f0:	0f 84 b8 00 00 00    	je     2351ae <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x22e>
  2350f6:	3c 01                	cmp    $0x1,%al
  2350f8:	0f 85 b9 00 00 00    	jne    2351b7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x237>
  2350fe:	31 c0                	xor    %eax,%eax
  235100:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  235105:	e9 c2 00 00 00       	jmpq   2351cc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  23510a:	4c 89 ef             	mov    %r13,%rdi
  23510d:	44 89 fe             	mov    %r15d,%esi
  235110:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  235115:	e8 36 02 00 00       	callq  235350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  23511a:	b1 01                	mov    $0x1,%cl
  23511c:	84 c0                	test   %al,%al
  23511e:	0f 85 c5 01 00 00    	jne    2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  235124:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  235128:	49 8b 45 28          	mov    0x28(%r13),%rax
  23512c:	48 8b 40 18          	mov    0x18(%rax),%rax
  235130:	4c 89 e6             	mov    %r12,%rsi
  235133:	4c 89 f2             	mov    %r14,%rdx
  235136:	48 83 c4 38          	add    $0x38,%rsp
  23513a:	5b                   	pop    %rbx
  23513b:	41 5c                	pop    %r12
  23513d:	41 5d                	pop    %r13
  23513f:	41 5e                	pop    %r14
  235141:	41 5f                	pop    %r15
  235143:	5d                   	pop    %rbp
  235144:	ff e0                	jmpq   *%rax
  235146:	41 8b 6d 34          	mov    0x34(%r13),%ebp
  23514a:	41 c7 45 34 30 00 00 	movl   $0x30,0x34(%r13)
  235151:	00 
  235152:	41 8a 45 38          	mov    0x38(%r13),%al
  235156:	88 44 24 08          	mov    %al,0x8(%rsp)
  23515a:	41 c6 45 38 01       	movb   $0x1,0x38(%r13)
  23515f:	4c 89 ef             	mov    %r13,%rdi
  235162:	44 89 fe             	mov    %r15d,%esi
  235165:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  23516a:	e8 e1 01 00 00       	callq  235350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  23516f:	b1 01                	mov    $0x1,%cl
  235171:	84 c0                	test   %al,%al
  235173:	0f 85 70 01 00 00    	jne    2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  235179:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  23517d:	80 f9 03             	cmp    $0x3,%cl
  235180:	b8 01 00 00 00       	mov    $0x1,%eax
  235185:	0f 45 c1             	cmovne %ecx,%eax
  235188:	84 c0                	test   %al,%al
  23518a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  23518f:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  235194:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  235198:	0f 84 e7 00 00 00    	je     235285 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x305>
  23519e:	3c 01                	cmp    $0x1,%al
  2351a0:	0f 85 e6 00 00 00    	jne    23528c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x30c>
  2351a6:	45 31 e4             	xor    %r12d,%r12d
  2351a9:	e9 f1 00 00 00       	jmpq   23529f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  2351ae:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  2351b3:	31 ed                	xor    %ebp,%ebp
  2351b5:	eb 15                	jmp    2351cc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  2351b7:	48 89 e8             	mov    %rbp,%rax
  2351ba:	48 d1 e8             	shr    %rax
  2351bd:	48 83 c5 01          	add    $0x1,%rbp
  2351c1:	48 d1 ed             	shr    %rbp
  2351c4:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  2351c9:	48 89 c5             	mov    %rax,%rbp
  2351cc:	49 8b 5d 20          	mov    0x20(%r13),%rbx
  2351d0:	4d 8b 65 28          	mov    0x28(%r13),%r12
  2351d4:	45 8b 75 34          	mov    0x34(%r13),%r14d
  2351d8:	48 83 c5 01          	add    $0x1,%rbp
  2351dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2351e0:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  2351e4:	74 14                	je     2351fa <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x27a>
  2351e6:	48 89 df             	mov    %rbx,%rdi
  2351e9:	44 89 f6             	mov    %r14d,%esi
  2351ec:	41 ff 54 24 20       	callq  *0x20(%r12)
  2351f1:	84 c0                	test   %al,%al
  2351f3:	74 eb                	je     2351e0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x260>
  2351f5:	e9 ed 00 00 00       	jmpq   2352e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2351fa:	b1 01                	mov    $0x1,%cl
  2351fc:	41 81 fe 00 00 11 00 	cmp    $0x110000,%r14d
  235203:	0f 84 e0 00 00 00    	je     2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  235209:	4c 89 ef             	mov    %r13,%rdi
  23520c:	44 89 fe             	mov    %r15d,%esi
  23520f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  235214:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  235219:	e8 32 01 00 00       	callq  235350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  23521e:	84 c0                	test   %al,%al
  235220:	0f 85 c1 00 00 00    	jne    2352e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  235226:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  23522a:	49 8b 45 28          	mov    0x28(%r13),%rax
  23522e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  235233:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  235238:	ff 50 18             	callq  *0x18(%rax)
  23523b:	84 c0                	test   %al,%al
  23523d:	b1 01                	mov    $0x1,%cl
  23523f:	0f 85 a4 00 00 00    	jne    2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  235245:	4d 8b 7d 20          	mov    0x20(%r13),%r15
  235249:	4d 8b 65 28          	mov    0x28(%r13),%r12
  23524d:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  235252:	4c 89 ed             	mov    %r13,%rbp
  235255:	48 f7 dd             	neg    %rbp
  235258:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  23525f:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  235263:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  235267:	0f 84 d3 00 00 00    	je     235340 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c0>
  23526d:	4c 89 ff             	mov    %r15,%rdi
  235270:	44 89 f6             	mov    %r14d,%esi
  235273:	41 ff 54 24 20       	callq  *0x20(%r12)
  235278:	48 83 c3 01          	add    $0x1,%rbx
  23527c:	84 c0                	test   %al,%al
  23527e:	74 df                	je     23525f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x2df>
  235280:	e9 be 00 00 00       	jmpq   235343 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c3>
  235285:	49 89 dc             	mov    %rbx,%r12
  235288:	31 db                	xor    %ebx,%ebx
  23528a:	eb 13                	jmp    23529f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  23528c:	48 89 d8             	mov    %rbx,%rax
  23528f:	48 d1 e8             	shr    %rax
  235292:	48 83 c3 01          	add    $0x1,%rbx
  235296:	48 d1 eb             	shr    %rbx
  235299:	49 89 dc             	mov    %rbx,%r12
  23529c:	48 89 c3             	mov    %rax,%rbx
  23529f:	4d 8b 75 20          	mov    0x20(%r13),%r14
  2352a3:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  2352a7:	45 8b 7d 34          	mov    0x34(%r13),%r15d
  2352ab:	48 83 c3 01          	add    $0x1,%rbx
  2352af:	90                   	nop
  2352b0:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  2352b4:	74 0f                	je     2352c5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x345>
  2352b6:	4c 89 f7             	mov    %r14,%rdi
  2352b9:	44 89 fe             	mov    %r15d,%esi
  2352bc:	ff 55 20             	callq  *0x20(%rbp)
  2352bf:	84 c0                	test   %al,%al
  2352c1:	74 ed                	je     2352b0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x330>
  2352c3:	eb 22                	jmp    2352e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2352c5:	41 81 ff 00 00 11 00 	cmp    $0x110000,%r15d
  2352cc:	74 19                	je     2352e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2352ce:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  2352d2:	49 8b 45 28          	mov    0x28(%r13),%rax
  2352d6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2352db:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2352e0:	ff 50 18             	callq  *0x18(%rax)
  2352e3:	84 c0                	test   %al,%al
  2352e5:	74 13                	je     2352fa <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x37a>
  2352e7:	b1 01                	mov    $0x1,%cl
  2352e9:	89 c8                	mov    %ecx,%eax
  2352eb:	48 83 c4 38          	add    $0x38,%rsp
  2352ef:	5b                   	pop    %rbx
  2352f0:	41 5c                	pop    %r12
  2352f2:	41 5d                	pop    %r13
  2352f4:	41 5e                	pop    %r14
  2352f6:	41 5f                	pop    %r15
  2352f8:	5d                   	pop    %rbp
  2352f9:	c3                   	retq   
  2352fa:	4d 8b 75 20          	mov    0x20(%r13),%r14
  2352fe:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  235302:	bb 01 00 00 00       	mov    $0x1,%ebx
  235307:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  23530b:	48 83 f8 01          	cmp    $0x1,%rax
  23530f:	74 1b                	je     23532c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3ac>
  235311:	4c 89 f7             	mov    %r14,%rdi
  235314:	44 89 fe             	mov    %r15d,%esi
  235317:	ff 55 20             	callq  *0x20(%rbp)
  23531a:	b1 01                	mov    $0x1,%cl
  23531c:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  235320:	84 c0                	test   %al,%al
  235322:	74 e3                	je     235307 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x387>
  235324:	48 f7 db             	neg    %rbx
  235327:	4c 39 e3             	cmp    %r12,%rbx
  23532a:	72 bd                	jb     2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  23532c:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  235330:	41 89 45 34          	mov    %eax,0x34(%r13)
  235334:	8a 44 24 08          	mov    0x8(%rsp),%al
  235338:	41 88 45 38          	mov    %al,0x38(%r13)
  23533c:	31 c9                	xor    %ecx,%ecx
  23533e:	eb a9                	jmp    2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  235340:	4c 89 eb             	mov    %r13,%rbx
  235343:	4c 39 eb             	cmp    %r13,%rbx
  235346:	0f 92 c1             	setb   %cl
  235349:	eb 9e                	jmp    2352e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  23534b:	cc                   	int3   
  23534c:	cc                   	int3   
  23534d:	cc                   	int3   
  23534e:	cc                   	int3   
  23534f:	cc                   	int3   

0000000000235350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>:
  235350:	41 57                	push   %r15
  235352:	41 56                	push   %r14
  235354:	53                   	push   %rbx
  235355:	49 89 ce             	mov    %rcx,%r14
  235358:	49 89 d7             	mov    %rdx,%r15
  23535b:	48 89 fb             	mov    %rdi,%rbx
  23535e:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  235364:	74 13                	je     235379 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x29>
  235366:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  23536a:	48 8b 43 28          	mov    0x28(%rbx),%rax
  23536e:	ff 50 20             	callq  *0x20(%rax)
  235371:	89 c1                	mov    %eax,%ecx
  235373:	b0 01                	mov    $0x1,%al
  235375:	84 c9                	test   %cl,%cl
  235377:	75 20                	jne    235399 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x49>
  235379:	4d 85 ff             	test   %r15,%r15
  23537c:	74 19                	je     235397 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x47>
  23537e:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  235382:	48 8b 43 28          	mov    0x28(%rbx),%rax
  235386:	48 8b 40 18          	mov    0x18(%rax),%rax
  23538a:	4c 89 fe             	mov    %r15,%rsi
  23538d:	4c 89 f2             	mov    %r14,%rdx
  235390:	5b                   	pop    %rbx
  235391:	41 5e                	pop    %r14
  235393:	41 5f                	pop    %r15
  235395:	ff e0                	jmpq   *%rax
  235397:	31 c0                	xor    %eax,%eax
  235399:	5b                   	pop    %rbx
  23539a:	41 5e                	pop    %r14
  23539c:	41 5f                	pop    %r15
  23539e:	c3                   	retq   
  23539f:	cc                   	int3   

00000000002353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>:
  2353a0:	55                   	push   %rbp
  2353a1:	41 57                	push   %r15
  2353a3:	41 56                	push   %r14
  2353a5:	41 55                	push   %r13
  2353a7:	41 54                	push   %r12
  2353a9:	53                   	push   %rbx
  2353aa:	50                   	push   %rax
  2353ab:	49 89 d7             	mov    %rdx,%r15
  2353ae:	49 89 f4             	mov    %rsi,%r12
  2353b1:	4c 8b 07             	mov    (%rdi),%r8
  2353b4:	48 8b 47 10          	mov    0x10(%rdi),%rax
  2353b8:	49 83 f8 01          	cmp    $0x1,%r8
  2353bc:	75 0b                	jne    2353c9 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x29>
  2353be:	48 83 f8 01          	cmp    $0x1,%rax
  2353c2:	74 0f                	je     2353d3 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x33>
  2353c4:	e9 46 01 00 00       	jmpq   23550f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x16f>
  2353c9:	48 83 f8 01          	cmp    $0x1,%rax
  2353cd:	0f 85 02 02 00 00    	jne    2355d5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  2353d3:	48 8b 6f 18          	mov    0x18(%rdi),%rbp
  2353d7:	4f 8d 0c 3c          	lea    (%r12,%r15,1),%r9
  2353db:	31 c9                	xor    %ecx,%ecx
  2353dd:	48 85 ed             	test   %rbp,%rbp
  2353e0:	0f 84 b1 00 00 00    	je     235497 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xf7>
  2353e6:	4c 89 e6             	mov    %r12,%rsi
  2353e9:	eb 44                	jmp    23542f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x8f>
  2353eb:	44 0f b6 1a          	movzbl (%rdx),%r11d
  2353ef:	48 83 c2 01          	add    $0x1,%rdx
  2353f3:	41 83 e3 3f          	and    $0x3f,%r11d
  2353f7:	83 e0 07             	and    $0x7,%eax
  2353fa:	c1 e0 12             	shl    $0x12,%eax
  2353fd:	41 c1 e2 0c          	shl    $0xc,%r10d
  235401:	41 09 c2             	or     %eax,%r10d
  235404:	c1 e3 06             	shl    $0x6,%ebx
  235407:	44 09 d3             	or     %r10d,%ebx
  23540a:	44 09 db             	or     %r11d,%ebx
  23540d:	81 fb 00 00 11 00    	cmp    $0x110000,%ebx
  235413:	0f 84 ec 00 00 00    	je     235505 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  235419:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  235420:	48 29 f1             	sub    %rsi,%rcx
  235423:	48 01 d1             	add    %rdx,%rcx
  235426:	48 89 d6             	mov    %rdx,%rsi
  235429:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  23542d:	74 6b                	je     23549a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xfa>
  23542f:	4c 39 ce             	cmp    %r9,%rsi
  235432:	0f 84 cd 00 00 00    	je     235505 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  235438:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  23543c:	0f b6 06             	movzbl (%rsi),%eax
  23543f:	84 c0                	test   %al,%al
  235441:	79 dd                	jns    235420 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  235443:	4c 39 ca             	cmp    %r9,%rdx
  235446:	74 13                	je     23545b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xbb>
  235448:	48 8d 56 02          	lea    0x2(%rsi),%rdx
  23544c:	44 0f b6 56 01       	movzbl 0x1(%rsi),%r10d
  235451:	41 83 e2 3f          	and    $0x3f,%r10d
  235455:	3c e0                	cmp    $0xe0,%al
  235457:	72 c7                	jb     235420 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  235459:	eb 0a                	jmp    235465 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xc5>
  23545b:	45 31 d2             	xor    %r10d,%r10d
  23545e:	4c 89 ca             	mov    %r9,%rdx
  235461:	3c e0                	cmp    $0xe0,%al
  235463:	72 bb                	jb     235420 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  235465:	4c 39 ca             	cmp    %r9,%rdx
  235468:	74 10                	je     23547a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xda>
  23546a:	0f b6 1a             	movzbl (%rdx),%ebx
  23546d:	48 83 c2 01          	add    $0x1,%rdx
  235471:	83 e3 3f             	and    $0x3f,%ebx
  235474:	3c f0                	cmp    $0xf0,%al
  235476:	72 a8                	jb     235420 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  235478:	eb 09                	jmp    235483 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xe3>
  23547a:	31 db                	xor    %ebx,%ebx
  23547c:	4c 89 ca             	mov    %r9,%rdx
  23547f:	3c f0                	cmp    $0xf0,%al
  235481:	72 9d                	jb     235420 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  235483:	4c 39 ca             	cmp    %r9,%rdx
  235486:	0f 85 5f ff ff ff    	jne    2353eb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x4b>
  23548c:	45 31 db             	xor    %r11d,%r11d
  23548f:	4c 89 ca             	mov    %r9,%rdx
  235492:	e9 60 ff ff ff       	jmpq   2353f7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x57>
  235497:	4c 89 e2             	mov    %r12,%rdx
  23549a:	4c 39 ca             	cmp    %r9,%rdx
  23549d:	74 66                	je     235505 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  23549f:	0f b6 32             	movzbl (%rdx),%esi
  2354a2:	40 84 f6             	test   %sil,%sil
  2354a5:	78 16                	js     2354bd <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x11d>
  2354a7:	48 85 c9             	test   %rcx,%rcx
  2354aa:	74 38                	je     2354e4 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x144>
  2354ac:	4c 39 f9             	cmp    %r15,%rcx
  2354af:	73 37                	jae    2354e8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x148>
  2354b1:	41 80 3c 0c c0       	cmpb   $0xc0,(%r12,%rcx,1)
  2354b6:	7c 40                	jl     2354f8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  2354b8:	48 89 c8             	mov    %rcx,%rax
  2354bb:	eb 33                	jmp    2354f0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  2354bd:	48 8d 42 01          	lea    0x1(%rdx),%rax
  2354c1:	4c 39 c8             	cmp    %r9,%rax
  2354c4:	0f 84 d3 01 00 00    	je     23569d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2fd>
  2354ca:	0f b6 42 01          	movzbl 0x1(%rdx),%eax
  2354ce:	48 83 c2 02          	add    $0x2,%rdx
  2354d2:	83 e0 3f             	and    $0x3f,%eax
  2354d5:	c1 e0 06             	shl    $0x6,%eax
  2354d8:	40 80 fe e0          	cmp    $0xe0,%sil
  2354dc:	0f 83 ca 01 00 00    	jae    2356ac <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x30c>
  2354e2:	eb c3                	jmp    2354a7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  2354e4:	31 c0                	xor    %eax,%eax
  2354e6:	eb 08                	jmp    2354f0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  2354e8:	4c 89 f8             	mov    %r15,%rax
  2354eb:	4c 39 f9             	cmp    %r15,%rcx
  2354ee:	75 08                	jne    2354f8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  2354f0:	48 89 c1             	mov    %rax,%rcx
  2354f3:	4c 89 e0             	mov    %r12,%rax
  2354f6:	eb 02                	jmp    2354fa <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x15a>
  2354f8:	31 c0                	xor    %eax,%eax
  2354fa:	48 85 c0             	test   %rax,%rax
  2354fd:	4c 0f 45 e0          	cmovne %rax,%r12
  235501:	4c 0f 45 f9          	cmovne %rcx,%r15
  235505:	49 83 f8 01          	cmp    $0x1,%r8
  235509:	0f 85 c6 00 00 00    	jne    2355d5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  23550f:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
  235513:	4d 85 ff             	test   %r15,%r15
  235516:	74 17                	je     23552f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x18f>
  235518:	49 8d 4f ff          	lea    -0x1(%r15),%rcx
  23551c:	44 89 f8             	mov    %r15d,%eax
  23551f:	83 e0 03             	and    $0x3,%eax
  235522:	48 83 f9 03          	cmp    $0x3,%rcx
  235526:	73 0e                	jae    235536 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x196>
  235528:	31 c9                	xor    %ecx,%ecx
  23552a:	4c 89 e2             	mov    %r12,%rdx
  23552d:	eb 5c                	jmp    23558b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1eb>
  23552f:	31 c9                	xor    %ecx,%ecx
  235531:	e9 80 00 00 00       	jmpq   2355b6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  235536:	4c 89 fe             	mov    %r15,%rsi
  235539:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  23553d:	48 f7 de             	neg    %rsi
  235540:	31 c9                	xor    %ecx,%ecx
  235542:	4c 89 e2             	mov    %r12,%rdx
  235545:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23554c:	00 00 00 
  23554f:	90                   	nop
  235550:	31 ed                	xor    %ebp,%ebp
  235552:	80 3a c0             	cmpb   $0xc0,(%rdx)
  235555:	40 0f 9d c5          	setge  %bpl
  235559:	48 01 cd             	add    %rcx,%rbp
  23555c:	31 c9                	xor    %ecx,%ecx
  23555e:	80 7a 01 c0          	cmpb   $0xc0,0x1(%rdx)
  235562:	0f 9d c1             	setge  %cl
  235565:	48 01 e9             	add    %rbp,%rcx
  235568:	31 ed                	xor    %ebp,%ebp
  23556a:	80 7a 02 c0          	cmpb   $0xc0,0x2(%rdx)
  23556e:	40 0f 9d c5          	setge  %bpl
  235572:	48 01 cd             	add    %rcx,%rbp
  235575:	31 c9                	xor    %ecx,%ecx
  235577:	80 7a 03 c0          	cmpb   $0xc0,0x3(%rdx)
  23557b:	48 8d 52 04          	lea    0x4(%rdx),%rdx
  23557f:	0f 9d c1             	setge  %cl
  235582:	48 01 e9             	add    %rbp,%rcx
  235585:	48 83 c6 04          	add    $0x4,%rsi
  235589:	75 c5                	jne    235550 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1b0>
  23558b:	48 85 c0             	test   %rax,%rax
  23558e:	74 26                	je     2355b6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  235590:	31 f6                	xor    %esi,%esi
  235592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  235599:	00 00 00 
  23559c:	0f 1f 40 00          	nopl   0x0(%rax)
  2355a0:	31 ed                	xor    %ebp,%ebp
  2355a2:	80 3c 32 c0          	cmpb   $0xc0,(%rdx,%rsi,1)
  2355a6:	40 0f 9d c5          	setge  %bpl
  2355aa:	48 01 e9             	add    %rbp,%rcx
  2355ad:	48 83 c6 01          	add    $0x1,%rsi
  2355b1:	48 39 f0             	cmp    %rsi,%rax
  2355b4:	75 ea                	jne    2355a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x200>
  2355b6:	48 29 cb             	sub    %rcx,%rbx
  2355b9:	76 1a                	jbe    2355d5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  2355bb:	8b 47 38             	mov    0x38(%rdi),%eax
  2355be:	31 c9                	xor    %ecx,%ecx
  2355c0:	3c 03                	cmp    $0x3,%al
  2355c2:	0f 44 c1             	cmove  %ecx,%eax
  2355c5:	84 c0                	test   %al,%al
  2355c7:	74 31                	je     2355fa <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x25a>
  2355c9:	3c 01                	cmp    $0x1,%al
  2355cb:	75 35                	jne    235602 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x262>
  2355cd:	31 c0                	xor    %eax,%eax
  2355cf:	48 89 04 24          	mov    %rax,(%rsp)
  2355d3:	eb 41                	jmp    235616 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  2355d5:	48 8b 47 20          	mov    0x20(%rdi),%rax
  2355d9:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  2355dd:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  2355e1:	48 89 c7             	mov    %rax,%rdi
  2355e4:	4c 89 e6             	mov    %r12,%rsi
  2355e7:	4c 89 fa             	mov    %r15,%rdx
  2355ea:	48 83 c4 08          	add    $0x8,%rsp
  2355ee:	5b                   	pop    %rbx
  2355ef:	41 5c                	pop    %r12
  2355f1:	41 5d                	pop    %r13
  2355f3:	41 5e                	pop    %r14
  2355f5:	41 5f                	pop    %r15
  2355f7:	5d                   	pop    %rbp
  2355f8:	ff e1                	jmpq   *%rcx
  2355fa:	48 89 1c 24          	mov    %rbx,(%rsp)
  2355fe:	31 db                	xor    %ebx,%ebx
  235600:	eb 14                	jmp    235616 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  235602:	48 89 d8             	mov    %rbx,%rax
  235605:	48 d1 e8             	shr    %rax
  235608:	48 83 c3 01          	add    $0x1,%rbx
  23560c:	48 d1 eb             	shr    %rbx
  23560f:	48 89 1c 24          	mov    %rbx,(%rsp)
  235613:	48 89 c3             	mov    %rax,%rbx
  235616:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
  23561a:	4c 8b 77 28          	mov    0x28(%rdi),%r14
  23561e:	8b 6f 34             	mov    0x34(%rdi),%ebp
  235621:	48 83 c3 01          	add    $0x1,%rbx
  235625:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23562c:	00 00 00 
  23562f:	90                   	nop
  235630:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  235634:	74 15                	je     23564b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2ab>
  235636:	4c 89 ef             	mov    %r13,%rdi
  235639:	89 ee                	mov    %ebp,%esi
  23563b:	41 ff 56 20          	callq  *0x20(%r14)
  23563f:	84 c0                	test   %al,%al
  235641:	74 ed                	je     235630 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x290>
  235643:	41 b4 01             	mov    $0x1,%r12b
  235646:	e9 85 00 00 00       	jmpq   2356d0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  23564b:	4c 89 e6             	mov    %r12,%rsi
  23564e:	41 b4 01             	mov    $0x1,%r12b
  235651:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  235657:	74 77                	je     2356d0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  235659:	4c 89 ef             	mov    %r13,%rdi
  23565c:	4c 89 fa             	mov    %r15,%rdx
  23565f:	41 ff 56 18          	callq  *0x18(%r14)
  235663:	84 c0                	test   %al,%al
  235665:	75 69                	jne    2356d0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  235667:	4c 8b 24 24          	mov    (%rsp),%r12
  23566b:	4d 89 e7             	mov    %r12,%r15
  23566e:	49 f7 df             	neg    %r15
  235671:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  235678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  23567f:	00 
  235680:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  235684:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  235688:	74 3c                	je     2356c6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x326>
  23568a:	4c 89 ef             	mov    %r13,%rdi
  23568d:	89 ee                	mov    %ebp,%esi
  23568f:	41 ff 56 20          	callq  *0x20(%r14)
  235693:	48 83 c3 01          	add    $0x1,%rbx
  235697:	84 c0                	test   %al,%al
  235699:	74 e5                	je     235680 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2e0>
  23569b:	eb 2c                	jmp    2356c9 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x329>
  23569d:	31 c0                	xor    %eax,%eax
  23569f:	4c 89 ca             	mov    %r9,%rdx
  2356a2:	40 80 fe e0          	cmp    $0xe0,%sil
  2356a6:	0f 82 fb fd ff ff    	jb     2354a7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  2356ac:	4c 39 ca             	cmp    %r9,%rdx
  2356af:	74 31                	je     2356e2 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x342>
  2356b1:	0f b6 2a             	movzbl (%rdx),%ebp
  2356b4:	48 83 c2 01          	add    $0x1,%rdx
  2356b8:	83 e5 3f             	and    $0x3f,%ebp
  2356bb:	40 80 fe f0          	cmp    $0xf0,%sil
  2356bf:	73 30                	jae    2356f1 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x351>
  2356c1:	e9 e1 fd ff ff       	jmpq   2354a7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  2356c6:	4c 89 e3             	mov    %r12,%rbx
  2356c9:	4c 39 e3             	cmp    %r12,%rbx
  2356cc:	41 0f 92 c4          	setb   %r12b
  2356d0:	44 89 e0             	mov    %r12d,%eax
  2356d3:	48 83 c4 08          	add    $0x8,%rsp
  2356d7:	5b                   	pop    %rbx
  2356d8:	41 5c                	pop    %r12
  2356da:	41 5d                	pop    %r13
  2356dc:	41 5e                	pop    %r14
  2356de:	41 5f                	pop    %r15
  2356e0:	5d                   	pop    %rbp
  2356e1:	c3                   	retq   
  2356e2:	31 ed                	xor    %ebp,%ebp
  2356e4:	4c 89 ca             	mov    %r9,%rdx
  2356e7:	40 80 fe f0          	cmp    $0xf0,%sil
  2356eb:	0f 82 b6 fd ff ff    	jb     2354a7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  2356f1:	09 c5                	or     %eax,%ebp
  2356f3:	4c 39 ca             	cmp    %r9,%rdx
  2356f6:	74 08                	je     235700 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x360>
  2356f8:	0f b6 02             	movzbl (%rdx),%eax
  2356fb:	83 e0 3f             	and    $0x3f,%eax
  2356fe:	eb 02                	jmp    235702 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x362>
  235700:	31 c0                	xor    %eax,%eax
  235702:	83 e6 07             	and    $0x7,%esi
  235705:	c1 e6 12             	shl    $0x12,%esi
  235708:	c1 e5 06             	shl    $0x6,%ebp
  23570b:	09 f5                	or     %esi,%ebp
  23570d:	09 c5                	or     %eax,%ebp
  23570f:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  235715:	0f 84 ea fd ff ff    	je     235505 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  23571b:	e9 87 fd ff ff       	jmpq   2354a7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>

0000000000235720 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>:
  235720:	48 8b 47 20          	mov    0x20(%rdi),%rax
  235724:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  235728:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  23572c:	48 89 c7             	mov    %rax,%rdi
  23572f:	ff e1                	jmpq   *%rcx
  235731:	cc                   	int3   
  235732:	cc                   	int3   
  235733:	cc                   	int3   
  235734:	cc                   	int3   
  235735:	cc                   	int3   
  235736:	cc                   	int3   
  235737:	cc                   	int3   
  235738:	cc                   	int3   
  235739:	cc                   	int3   
  23573a:	cc                   	int3   
  23573b:	cc                   	int3   
  23573c:	cc                   	int3   
  23573d:	cc                   	int3   
  23573e:	cc                   	int3   
  23573f:	cc                   	int3   

0000000000235740 <_ZN4core3fmt9Formatter9alternate17h3468ac77601007eaE>:
  235740:	8a 47 30             	mov    0x30(%rdi),%al
  235743:	24 04                	and    $0x4,%al
  235745:	c0 e8 02             	shr    $0x2,%al
  235748:	c3                   	retq   
  235749:	cc                   	int3   
  23574a:	cc                   	int3   
  23574b:	cc                   	int3   
  23574c:	cc                   	int3   
  23574d:	cc                   	int3   
  23574e:	cc                   	int3   
  23574f:	cc                   	int3   

0000000000235750 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>:
  235750:	8a 47 30             	mov    0x30(%rdi),%al
  235753:	24 10                	and    $0x10,%al
  235755:	c0 e8 04             	shr    $0x4,%al
  235758:	c3                   	retq   
  235759:	cc                   	int3   
  23575a:	cc                   	int3   
  23575b:	cc                   	int3   
  23575c:	cc                   	int3   
  23575d:	cc                   	int3   
  23575e:	cc                   	int3   
  23575f:	cc                   	int3   

0000000000235760 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>:
  235760:	8a 47 30             	mov    0x30(%rdi),%al
  235763:	24 20                	and    $0x20,%al
  235765:	c0 e8 05             	shr    $0x5,%al
  235768:	c3                   	retq   
  235769:	cc                   	int3   
  23576a:	cc                   	int3   
  23576b:	cc                   	int3   
  23576c:	cc                   	int3   
  23576d:	cc                   	int3   
  23576e:	cc                   	int3   
  23576f:	cc                   	int3   

0000000000235770 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>:
  235770:	53                   	push   %rbx
  235771:	48 89 fb             	mov    %rdi,%rbx
  235774:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  235778:	48 8b 43 28          	mov    0x28(%rbx),%rax
  23577c:	ff 50 18             	callq  *0x18(%rax)
  23577f:	0f b6 d0             	movzbl %al,%edx
  235782:	48 89 d8             	mov    %rbx,%rax
  235785:	5b                   	pop    %rbx
  235786:	c3                   	retq   
  235787:	cc                   	int3   
  235788:	cc                   	int3   
  235789:	cc                   	int3   
  23578a:	cc                   	int3   
  23578b:	cc                   	int3   
  23578c:	cc                   	int3   
  23578d:	cc                   	int3   
  23578e:	cc                   	int3   
  23578f:	cc                   	int3   

0000000000235790 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>:
  235790:	41 57                	push   %r15
  235792:	41 56                	push   %r14
  235794:	53                   	push   %rbx
  235795:	49 89 ce             	mov    %rcx,%r14
  235798:	49 89 f7             	mov    %rsi,%r15
  23579b:	48 89 fb             	mov    %rdi,%rbx
  23579e:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2357a2:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2357a6:	48 89 d6             	mov    %rdx,%rsi
  2357a9:	48 89 ca             	mov    %rcx,%rdx
  2357ac:	ff 50 18             	callq  *0x18(%rax)
  2357af:	4d 85 f6             	test   %r14,%r14
  2357b2:	4c 89 3b             	mov    %r15,(%rbx)
  2357b5:	88 43 10             	mov    %al,0x10(%rbx)
  2357b8:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  2357bf:	00 
  2357c0:	0f 94 43 11          	sete   0x11(%rbx)
  2357c4:	48 89 d8             	mov    %rbx,%rax
  2357c7:	5b                   	pop    %rbx
  2357c8:	41 5e                	pop    %r14
  2357ca:	41 5f                	pop    %r15
  2357cc:	c3                   	retq   
  2357cd:	cc                   	int3   
  2357ce:	cc                   	int3   
  2357cf:	cc                   	int3   

00000000002357d0 <_ZN4core3fmt9Formatter10debug_list17h63f19364d11dcc32E>:
  2357d0:	53                   	push   %rbx
  2357d1:	48 89 fb             	mov    %rdi,%rbx
  2357d4:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  2357d8:	48 8b 43 28          	mov    0x28(%rbx),%rax
  2357dc:	48 8d 35 4b ea fc ff 	lea    -0x315b5(%rip),%rsi        # 20422e <anon.8c5785e28e68a0869ce162bce53fbf2c.39.llvm.142292087146638061>
  2357e3:	ba 01 00 00 00       	mov    $0x1,%edx
  2357e8:	ff 50 18             	callq  *0x18(%rax)
  2357eb:	0f b6 d0             	movzbl %al,%edx
  2357ee:	48 89 d8             	mov    %rbx,%rax
  2357f1:	5b                   	pop    %rbx
  2357f2:	c3                   	retq   
  2357f3:	cc                   	int3   
  2357f4:	cc                   	int3   
  2357f5:	cc                   	int3   
  2357f6:	cc                   	int3   
  2357f7:	cc                   	int3   
  2357f8:	cc                   	int3   
  2357f9:	cc                   	int3   
  2357fa:	cc                   	int3   
  2357fb:	cc                   	int3   
  2357fc:	cc                   	int3   
  2357fd:	cc                   	int3   
  2357fe:	cc                   	int3   
  2357ff:	cc                   	int3   

0000000000235800 <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E>:
  235800:	48 89 f0             	mov    %rsi,%rax
  235803:	80 3f 00             	cmpb   $0x0,(%rdi)
  235806:	74 14                	je     23581c <_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hf12fa22fbb8264b8E+0x1c>
  235808:	48 8d 35 29 b1 fc ff 	lea    -0x34ed7(%rip),%rsi        # 200938 <anon.3bd2d5117e953c23f99d470f07b1e03a.9.llvm.2324975589069524467>
  23580f:	ba 04 00 00 00       	mov    $0x4,%edx
  235814:	48 89 c7             	mov    %rax,%rdi
  235817:	e9 84 fb ff ff       	jmpq   2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  23581c:	48 8d 35 b9 f7 fc ff 	lea    -0x30847(%rip),%rsi        # 204fdc <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467>
  235823:	ba 05 00 00 00       	mov    $0x5,%edx
  235828:	48 89 c7             	mov    %rax,%rdi
  23582b:	e9 70 fb ff ff       	jmpq   2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>

0000000000235830 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>:
  235830:	55                   	push   %rbp
  235831:	41 57                	push   %r15
  235833:	41 56                	push   %r14
  235835:	41 55                	push   %r13
  235837:	41 54                	push   %r12
  235839:	53                   	push   %rbx
  23583a:	48 83 ec 58          	sub    $0x58,%rsp
  23583e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  235843:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  235848:	48 8b 5a 20          	mov    0x20(%rdx),%rbx
  23584c:	48 8b 42 28          	mov    0x28(%rdx),%rax
  235850:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  235855:	48 8b 40 20          	mov    0x20(%rax),%rax
  235859:	48 89 df             	mov    %rbx,%rdi
  23585c:	be 22 00 00 00       	mov    $0x22,%esi
  235861:	49 89 c7             	mov    %rax,%r15
  235864:	ff d0                	callq  *%rax
  235866:	84 c0                	test   %al,%al
  235868:	74 11                	je     23587b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b>
  23586a:	b0 01                	mov    $0x1,%al
  23586c:	48 83 c4 58          	add    $0x58,%rsp
  235870:	5b                   	pop    %rbx
  235871:	41 5c                	pop    %r12
  235873:	41 5d                	pop    %r13
  235875:	41 5e                	pop    %r14
  235877:	41 5f                	pop    %r15
  235879:	5d                   	pop    %rbp
  23587a:	c3                   	retq   
  23587b:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  235880:	4d 85 c9             	test   %r9,%r9
  235883:	0f 84 e4 04 00 00    	je     235d6d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  235889:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  23588e:	4a 8d 34 08          	lea    (%rax,%r9,1),%rsi
  235892:	45 31 d2             	xor    %r10d,%r10d
  235895:	4c 8d 35 00 f6 fc ff 	lea    -0x30a00(%rip),%r14        # 204e9c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x6b>
  23589c:	48 8d 15 91 f5 fc ff 	lea    -0x30a6f(%rip),%rdx        # 204e34 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  2358a3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2358a8:	49 89 c4             	mov    %rax,%r12
  2358ab:	31 c9                	xor    %ecx,%ecx
  2358ad:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  2358b2:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  2358b7:	41 0f b6 3c 24       	movzbl (%r12),%edi
  2358bc:	40 84 ff             	test   %dil,%dil
  2358bf:	78 08                	js     2358c9 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x99>
  2358c1:	49 89 c4             	mov    %rax,%r12
  2358c4:	e9 a7 00 00 00       	jmpq   235970 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  2358c9:	48 39 f0             	cmp    %rsi,%rax
  2358cc:	74 49                	je     235917 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xe7>
  2358ce:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  2358d4:	49 83 c4 02          	add    $0x2,%r12
  2358d8:	83 e0 3f             	and    $0x3f,%eax
  2358db:	89 fd                	mov    %edi,%ebp
  2358dd:	83 e5 1f             	and    $0x1f,%ebp
  2358e0:	40 80 ff df          	cmp    $0xdf,%dil
  2358e4:	76 41                	jbe    235927 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xf7>
  2358e6:	49 39 f4             	cmp    %rsi,%r12
  2358e9:	74 41                	je     23592c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xfc>
  2358eb:	45 0f b6 04 24       	movzbl (%r12),%r8d
  2358f0:	49 83 c4 01          	add    $0x1,%r12
  2358f4:	41 83 e0 3f          	and    $0x3f,%r8d
  2358f8:	c1 e0 06             	shl    $0x6,%eax
  2358fb:	44 09 c0             	or     %r8d,%eax
  2358fe:	40 80 ff f0          	cmp    $0xf0,%dil
  235902:	72 3a                	jb     23593e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x10e>
  235904:	49 39 f4             	cmp    %rsi,%r12
  235907:	74 3e                	je     235947 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x117>
  235909:	41 0f b6 3c 24       	movzbl (%r12),%edi
  23590e:	49 83 c4 01          	add    $0x1,%r12
  235912:	83 e7 3f             	and    $0x3f,%edi
  235915:	eb 35                	jmp    23594c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x11c>
  235917:	31 c0                	xor    %eax,%eax
  235919:	49 89 f4             	mov    %rsi,%r12
  23591c:	89 fd                	mov    %edi,%ebp
  23591e:	83 e5 1f             	and    $0x1f,%ebp
  235921:	40 80 ff df          	cmp    $0xdf,%dil
  235925:	77 bf                	ja     2358e6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xb6>
  235927:	c1 e5 06             	shl    $0x6,%ebp
  23592a:	eb 15                	jmp    235941 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x111>
  23592c:	45 31 c0             	xor    %r8d,%r8d
  23592f:	49 89 f4             	mov    %rsi,%r12
  235932:	c1 e0 06             	shl    $0x6,%eax
  235935:	44 09 c0             	or     %r8d,%eax
  235938:	40 80 ff f0          	cmp    $0xf0,%dil
  23593c:	73 c6                	jae    235904 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xd4>
  23593e:	c1 e5 0c             	shl    $0xc,%ebp
  235941:	09 e8                	or     %ebp,%eax
  235943:	89 c7                	mov    %eax,%edi
  235945:	eb 29                	jmp    235970 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  235947:	31 ff                	xor    %edi,%edi
  235949:	49 89 f4             	mov    %rsi,%r12
  23594c:	83 e5 07             	and    $0x7,%ebp
  23594f:	c1 e5 12             	shl    $0x12,%ebp
  235952:	c1 e0 06             	shl    $0x6,%eax
  235955:	09 e8                	or     %ebp,%eax
  235957:	09 f8                	or     %edi,%eax
  235959:	89 c7                	mov    %eax,%edi
  23595b:	3d 00 00 11 00       	cmp    $0x110000,%eax
  235960:	0f 84 ec 03 00 00    	je     235d52 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x522>
  235966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  23596d:	00 00 00 
  235970:	bd 02 00 00 00       	mov    $0x2,%ebp
  235975:	8d 47 f7             	lea    -0x9(%rdi),%eax
  235978:	83 f8 19             	cmp    $0x19,%eax
  23597b:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  235980:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  235985:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  23598a:	77 1e                	ja     2359aa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x17a>
  23598c:	c7 44 24 0c 74 00 00 	movl   $0x74,0xc(%rsp)
  235993:	00 
  235994:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
  235998:	48 01 d0             	add    %rdx,%rax
  23599b:	ff e0                	jmpq   *%rax
  23599d:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  2359a4:	00 
  2359a5:	e9 86 01 00 00       	jmpq   235b30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  2359aa:	83 ff 5c             	cmp    $0x5c,%edi
  2359ad:	75 0b                	jne    2359ba <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x18a>
  2359af:	89 f8                	mov    %edi,%eax
  2359b1:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  2359b5:	e9 76 01 00 00       	jmpq   235b30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  2359ba:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  2359bf:	e8 4c d9 ff ff       	callq  233310 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  2359c4:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2359c9:	84 c0                	test   %al,%al
  2359cb:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  2359d0:	0f 85 19 01 00 00    	jne    235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  2359d6:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  2359dc:	73 4c                	jae    235a2a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x1fa>
  2359de:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  2359e5:	00 
  2359e6:	ba 28 00 00 00       	mov    $0x28,%edx
  2359eb:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  2359f1:	48 8d 35 c9 ed fc ff 	lea    -0x31237(%rip),%rsi        # 2047c1 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  2359f8:	48 8d 0d 12 ee fc ff 	lea    -0x311ee(%rip),%rcx        # 204811 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  2359ff:	4c 8d 0d 2b ef fc ff 	lea    -0x310d5(%rip),%r9        # 204931 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  235a06:	e8 45 e6 ff ff       	callq  234050 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  235a0b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  235a10:	84 c0                	test   %al,%al
  235a12:	0f 84 d7 00 00 00    	je     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a18:	e9 ad 00 00 00       	jmpq   235aca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  235a1d:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  235a24:	00 
  235a25:	e9 06 01 00 00       	jmpq   235b30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  235a2a:	81 ff 00 00 02 00    	cmp    $0x20000,%edi
  235a30:	73 3b                	jae    235a6d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x23d>
  235a32:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  235a39:	00 
  235a3a:	ba 2a 00 00 00       	mov    $0x2a,%edx
  235a3f:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  235a45:	48 8d 35 14 f0 fc ff 	lea    -0x30fec(%rip),%rsi        # 204a60 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  235a4c:	48 8d 0d 61 f0 fc ff 	lea    -0x30f9f(%rip),%rcx        # 204ab4 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  235a53:	4c 8d 0d 1a f1 fc ff 	lea    -0x30ee6(%rip),%r9        # 204b74 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  235a5a:	e8 f1 e5 ff ff       	callq  234050 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  235a5f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  235a64:	84 c0                	test   %al,%al
  235a66:	75 62                	jne    235aca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  235a68:	e9 82 00 00 00       	jmpq   235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a6d:	89 f8                	mov    %edi,%eax
  235a6f:	83 e0 e0             	and    $0xffffffe0,%eax
  235a72:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  235a77:	74 76                	je     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a79:	8d 87 c7 48 fd ff    	lea    -0x2b739(%rdi),%eax
  235a7f:	83 f8 07             	cmp    $0x7,%eax
  235a82:	72 6b                	jb     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a84:	89 f8                	mov    %edi,%eax
  235a86:	83 e0 fe             	and    $0xfffffffe,%eax
  235a89:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  235a8e:	74 5f                	je     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a90:	8d 87 5e 31 fd ff    	lea    -0x2cea2(%rdi),%eax
  235a96:	83 f8 0e             	cmp    $0xe,%eax
  235a99:	72 54                	jb     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235a9b:	8d 87 1f 14 fd ff    	lea    -0x2ebe1(%rdi),%eax
  235aa1:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  235aa6:	72 47                	jb     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235aa8:	8d 87 e2 05 fd ff    	lea    -0x2fa1e(%rdi),%eax
  235aae:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  235ab3:	72 3a                	jb     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235ab5:	8d 87 b5 ec fc ff    	lea    -0x3134b(%rdi),%eax
  235abb:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  235ac0:	72 2d                	jb     235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235ac2:	81 ff f0 01 0e 00    	cmp    $0xe01f0,%edi
  235ac8:	73 25                	jae    235aef <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  235aca:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  235acf:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  235ad4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  235ad9:	48 8d 15 54 f3 fc ff 	lea    -0x30cac(%rip),%rdx        # 204e34 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  235ae0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  235ae5:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  235aea:	e9 4f 02 00 00       	jmpq   235d3e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x50e>
  235aef:	89 f8                	mov    %edi,%eax
  235af1:	83 c8 01             	or     $0x1,%eax
  235af4:	44 0f bd e0          	bsr    %eax,%r12d
  235af8:	41 83 f4 1c          	xor    $0x1c,%r12d
  235afc:	41 c1 ec 02          	shr    $0x2,%r12d
  235b00:	41 83 f4 07          	xor    $0x7,%r12d
  235b04:	41 89 fd             	mov    %edi,%r13d
  235b07:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
  235b0e:	00 00 00 
  235b11:	49 09 c5             	or     %rax,%r13
  235b14:	bd 03 00 00 00       	mov    $0x3,%ebp
  235b19:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  235b1e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  235b23:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  235b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  235b2f:	00 
  235b30:	48 89 ca             	mov    %rcx,%rdx
  235b33:	4c 29 d2             	sub    %r10,%rdx
  235b36:	0f 82 90 02 00 00    	jb     235dcc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  235b3c:	4d 85 d2             	test   %r10,%r10
  235b3f:	74 1c                	je     235b5d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  235b41:	4d 39 ca             	cmp    %r9,%r10
  235b44:	73 11                	jae    235b57 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x327>
  235b46:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  235b4b:	42 80 3c 10 c0       	cmpb   $0xc0,(%rax,%r10,1)
  235b50:	7d 0b                	jge    235b5d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  235b52:	e9 75 02 00 00       	jmpq   235dcc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  235b57:	0f 85 6f 02 00 00    	jne    235dcc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  235b5d:	48 85 c9             	test   %rcx,%rcx
  235b60:	74 1b                	je     235b7d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  235b62:	4c 39 c9             	cmp    %r9,%rcx
  235b65:	73 10                	jae    235b77 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x347>
  235b67:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  235b6c:	80 3c 08 bf          	cmpb   $0xbf,(%rax,%rcx,1)
  235b70:	7f 0b                	jg     235b7d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  235b72:	e9 55 02 00 00       	jmpq   235dcc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  235b77:	0f 85 4f 02 00 00    	jne    235dcc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  235b7d:	4c 03 54 24 10       	add    0x10(%rsp),%r10
  235b82:	48 89 df             	mov    %rbx,%rdi
  235b85:	4c 89 d6             	mov    %r10,%rsi
  235b88:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  235b8d:	ff 50 18             	callq  *0x18(%rax)
  235b90:	eb 1a                	jmp    235bac <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x37c>
  235b92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  235b99:	00 00 00 
  235b9c:	0f 1f 40 00          	nopl   0x0(%rax)
  235ba0:	31 ed                	xor    %ebp,%ebp
  235ba2:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  235ba6:	48 89 df             	mov    %rbx,%rdi
  235ba9:	41 ff d7             	callq  *%r15
  235bac:	84 c0                	test   %al,%al
  235bae:	0f 85 b6 fc ff ff    	jne    23586a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  235bb4:	be 5c 00 00 00       	mov    $0x5c,%esi
  235bb9:	89 e8                	mov    %ebp,%eax
  235bbb:	49 63 04 86          	movslq (%r14,%rax,4),%rax
  235bbf:	4c 01 f0             	add    %r14,%rax
  235bc2:	bd 01 00 00 00       	mov    $0x1,%ebp
  235bc7:	ff e0                	jmpq   *%rax
  235bc9:	4c 89 e8             	mov    %r13,%rax
  235bcc:	48 c1 e8 20          	shr    $0x20,%rax
  235bd0:	0f b6 c0             	movzbl %al,%eax
  235bd3:	48 8d 0d d2 f2 fc ff 	lea    -0x30d2e(%rip),%rcx        # 204eac <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x7b>
  235bda:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235bde:	48 01 c8             	add    %rcx,%rax
  235be1:	ff e0                	jmpq   *%rax
  235be3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  235bea:	49 21 c4             	and    %rax,%r12
  235bed:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  235bf4:	ff ff ff 
  235bf7:	49 21 c5             	and    %rax,%r13
  235bfa:	bd 03 00 00 00       	mov    $0x3,%ebp
  235bff:	be 7d 00 00 00       	mov    $0x7d,%esi
  235c04:	eb a0                	jmp    235ba6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  235c06:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  235c0d:	49 21 c4             	and    %rax,%r12
  235c10:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  235c17:	ff ff ff 
  235c1a:	49 21 c5             	and    %rax,%r13
  235c1d:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  235c24:	00 00 00 
  235c27:	49 09 c5             	or     %rax,%r13
  235c2a:	bd 03 00 00 00       	mov    $0x3,%ebp
  235c2f:	be 75 00 00 00       	mov    $0x75,%esi
  235c34:	e9 6d ff ff ff       	jmpq   235ba6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  235c39:	42 8d 0c a5 00 00 00 	lea    0x0(,%r12,4),%ecx
  235c40:	00 
  235c41:	44 89 e8             	mov    %r13d,%eax
  235c44:	d3 e8                	shr    %cl,%eax
  235c46:	83 e0 0f             	and    $0xf,%eax
  235c49:	8d 48 57             	lea    0x57(%rax),%ecx
  235c4c:	89 c6                	mov    %eax,%esi
  235c4e:	83 ce 30             	or     $0x30,%esi
  235c51:	3c 0a                	cmp    $0xa,%al
  235c53:	0f 43 f1             	cmovae %ecx,%esi
  235c56:	4d 85 e4             	test   %r12,%r12
  235c59:	74 64                	je     235cbf <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x48f>
  235c5b:	49 83 c4 ff          	add    $0xffffffffffffffff,%r12
  235c5f:	bd 03 00 00 00       	mov    $0x3,%ebp
  235c64:	e9 3d ff ff ff       	jmpq   235ba6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  235c69:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  235c70:	49 21 c4             	and    %rax,%r12
  235c73:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  235c7a:	ff ff ff 
  235c7d:	49 21 c5             	and    %rax,%r13
  235c80:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  235c87:	00 00 00 
  235c8a:	49 09 c5             	or     %rax,%r13
  235c8d:	bd 03 00 00 00       	mov    $0x3,%ebp
  235c92:	be 7b 00 00 00       	mov    $0x7b,%esi
  235c97:	e9 0a ff ff ff       	jmpq   235ba6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  235c9c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  235ca3:	49 21 c4             	and    %rax,%r12
  235ca6:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  235cad:	ff ff ff 
  235cb0:	49 21 c5             	and    %rax,%r13
  235cb3:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  235cba:	00 00 00 
  235cbd:	eb 21                	jmp    235ce0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b0>
  235cbf:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  235cc6:	49 21 c4             	and    %rax,%r12
  235cc9:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  235cd0:	ff ff ff 
  235cd3:	49 21 c5             	and    %rax,%r13
  235cd6:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  235cdd:	00 00 00 
  235ce0:	49 09 c5             	or     %rax,%r13
  235ce3:	bd 03 00 00 00       	mov    $0x3,%ebp
  235ce8:	e9 b9 fe ff ff       	jmpq   235ba6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  235ced:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  235cf3:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  235cf8:	3d 80 00 00 00       	cmp    $0x80,%eax
  235cfd:	72 1c                	jb     235d1b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  235cff:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  235d05:	3d 00 08 00 00       	cmp    $0x800,%eax
  235d0a:	72 0f                	jb     235d1b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  235d0c:	3d 00 00 01 00       	cmp    $0x10000,%eax
  235d11:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  235d17:	49 83 da 00          	sbb    $0x0,%r10
  235d1b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  235d20:	49 01 ca             	add    %rcx,%r10
  235d23:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  235d28:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  235d2d:	48 8d 15 00 f1 fc ff 	lea    -0x30f00(%rip),%rdx        # 204e34 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  235d34:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  235d39:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  235d3e:	48 29 c1             	sub    %rax,%rcx
  235d41:	4c 01 e1             	add    %r12,%rcx
  235d44:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  235d49:	49 39 f4             	cmp    %rsi,%r12
  235d4c:	0f 85 60 fb ff ff    	jne    2358b2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x82>
  235d52:	4d 85 d2             	test   %r10,%r10
  235d55:	74 16                	je     235d6d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  235d57:	4d 39 ca             	cmp    %r9,%r10
  235d5a:	73 4f                	jae    235dab <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x57b>
  235d5c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  235d61:	42 80 3c 10 bf       	cmpb   $0xbf,(%rax,%r10,1)
  235d66:	7e 48                	jle    235db0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x580>
  235d68:	4c 89 d0             	mov    %r10,%rax
  235d6b:	eb 02                	jmp    235d6f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  235d6d:	31 c0                	xor    %eax,%eax
  235d6f:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  235d74:	48 01 c6             	add    %rax,%rsi
  235d77:	49 29 c1             	sub    %rax,%r9
  235d7a:	48 89 df             	mov    %rbx,%rdi
  235d7d:	4c 89 ca             	mov    %r9,%rdx
  235d80:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  235d85:	ff 50 18             	callq  *0x18(%rax)
  235d88:	84 c0                	test   %al,%al
  235d8a:	0f 85 da fa ff ff    	jne    23586a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  235d90:	48 89 df             	mov    %rbx,%rdi
  235d93:	be 22 00 00 00       	mov    $0x22,%esi
  235d98:	4c 89 f8             	mov    %r15,%rax
  235d9b:	48 83 c4 58          	add    $0x58,%rsp
  235d9f:	5b                   	pop    %rbx
  235da0:	41 5c                	pop    %r12
  235da2:	41 5d                	pop    %r13
  235da4:	41 5e                	pop    %r14
  235da6:	41 5f                	pop    %r15
  235da8:	5d                   	pop    %rbp
  235da9:	ff e0                	jmpq   *%rax
  235dab:	4c 89 c8             	mov    %r9,%rax
  235dae:	74 bf                	je     235d6f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  235db0:	4c 8d 05 41 53 00 00 	lea    0x5341(%rip),%r8        # 23b0f8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x48>
  235db7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  235dbc:	4c 89 ce             	mov    %r9,%rsi
  235dbf:	4c 89 d2             	mov    %r10,%rdx
  235dc2:	4c 89 c9             	mov    %r9,%rcx
  235dc5:	e8 d6 e8 ff ff       	callq  2346a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  235dca:	0f 0b                	ud2    
  235dcc:	4c 8d 05 0d 53 00 00 	lea    0x530d(%rip),%r8        # 23b0e0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x30>
  235dd3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  235dd8:	4c 89 ce             	mov    %r9,%rsi
  235ddb:	4c 89 d2             	mov    %r10,%rdx
  235dde:	e8 bd e8 ff ff       	callq  2346a0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  235de3:	0f 0b                	ud2    
  235de5:	cc                   	int3   
  235de6:	cc                   	int3   
  235de7:	cc                   	int3   
  235de8:	cc                   	int3   
  235de9:	cc                   	int3   
  235dea:	cc                   	int3   
  235deb:	cc                   	int3   
  235dec:	cc                   	int3   
  235ded:	cc                   	int3   
  235dee:	cc                   	int3   
  235def:	cc                   	int3   

0000000000235df0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>:
  235df0:	48 89 d0             	mov    %rdx,%rax
  235df3:	48 89 f2             	mov    %rsi,%rdx
  235df6:	48 89 fe             	mov    %rdi,%rsi
  235df9:	48 89 c7             	mov    %rax,%rdi
  235dfc:	e9 9f f5 ff ff       	jmpq   2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  235e01:	cc                   	int3   
  235e02:	cc                   	int3   
  235e03:	cc                   	int3   
  235e04:	cc                   	int3   
  235e05:	cc                   	int3   
  235e06:	cc                   	int3   
  235e07:	cc                   	int3   
  235e08:	cc                   	int3   
  235e09:	cc                   	int3   
  235e0a:	cc                   	int3   
  235e0b:	cc                   	int3   
  235e0c:	cc                   	int3   
  235e0d:	cc                   	int3   
  235e0e:	cc                   	int3   
  235e0f:	cc                   	int3   

0000000000235e10 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E>:
  235e10:	55                   	push   %rbp
  235e11:	41 57                	push   %r15
  235e13:	41 56                	push   %r14
  235e15:	41 55                	push   %r13
  235e17:	41 54                	push   %r12
  235e19:	53                   	push   %rbx
  235e1a:	48 83 ec 18          	sub    $0x18,%rsp
  235e1e:	49 89 fe             	mov    %rdi,%r14
  235e21:	48 8b 5e 20          	mov    0x20(%rsi),%rbx
  235e25:	48 8b 46 28          	mov    0x28(%rsi),%rax
  235e29:	48 8b 40 20          	mov    0x20(%rax),%rax
  235e2d:	48 89 df             	mov    %rbx,%rdi
  235e30:	be 27 00 00 00       	mov    $0x27,%esi
  235e35:	49 89 c7             	mov    %rax,%r15
  235e38:	ff d0                	callq  *%rax
  235e3a:	84 c0                	test   %al,%al
  235e3c:	74 11                	je     235e4f <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x3f>
  235e3e:	b0 01                	mov    $0x1,%al
  235e40:	48 83 c4 18          	add    $0x18,%rsp
  235e44:	5b                   	pop    %rbx
  235e45:	41 5c                	pop    %r12
  235e47:	41 5d                	pop    %r13
  235e49:	41 5e                	pop    %r14
  235e4b:	41 5f                	pop    %r15
  235e4d:	5d                   	pop    %rbp
  235e4e:	c3                   	retq   
  235e4f:	41 8b 3e             	mov    (%r14),%edi
  235e52:	8d 4f f7             	lea    -0x9(%rdi),%ecx
  235e55:	83 f9 1e             	cmp    $0x1e,%ecx
  235e58:	77 5a                	ja     235eb4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xa4>
  235e5a:	be 74 00 00 00       	mov    $0x74,%esi
  235e5f:	b8 02 00 00 00       	mov    $0x2,%eax
  235e64:	48 8d 15 59 f0 fc ff 	lea    -0x30fa7(%rip),%rdx        # 204ec4 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x93>
  235e6b:	48 63 0c 8a          	movslq (%rdx,%rcx,4),%rcx
  235e6f:	48 01 d1             	add    %rdx,%rcx
  235e72:	ff e1                	jmpq   *%rcx
  235e74:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  235e7b:	00 
  235e7c:	b8 02 00 00 00       	mov    $0x2,%eax
  235e81:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  235e88:	ff ff ff 
  235e8b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235e90:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  235e97:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  235e9d:	be 5c 00 00 00       	mov    $0x5c,%esi
  235ea2:	89 c0                	mov    %eax,%eax
  235ea4:	48 8d 0d 95 f0 fc ff 	lea    -0x30f6b(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  235eab:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235eaf:	48 01 c8             	add    %rcx,%rax
  235eb2:	ff e0                	jmpq   *%rax
  235eb4:	83 ff 5c             	cmp    $0x5c,%edi
  235eb7:	75 3e                	jne    235ef7 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xe7>
  235eb9:	b8 02 00 00 00       	mov    $0x2,%eax
  235ebe:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  235ec5:	ff ff ff 
  235ec8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235ecd:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  235ed4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  235eda:	be 5c 00 00 00       	mov    $0x5c,%esi
  235edf:	89 c0                	mov    %eax,%eax
  235ee1:	48 8d 0d 58 f0 fc ff 	lea    -0x30fa8(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  235ee8:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235eec:	48 01 c8             	add    %rcx,%rax
  235eef:	89 f9                	mov    %edi,%ecx
  235ef1:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  235ef5:	ff e0                	jmpq   *%rax
  235ef7:	48 89 fd             	mov    %rdi,%rbp
  235efa:	e8 11 d4 ff ff       	callq  233310 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  235eff:	84 c0                	test   %al,%al
  235f01:	0f 84 d4 00 00 00    	je     235fdb <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x1cb>
  235f07:	89 e8                	mov    %ebp,%eax
  235f09:	83 cd 01             	or     $0x1,%ebp
  235f0c:	0f bd ed             	bsr    %ebp,%ebp
  235f0f:	83 f5 1c             	xor    $0x1c,%ebp
  235f12:	c1 ed 02             	shr    $0x2,%ebp
  235f15:	83 f5 07             	xor    $0x7,%ebp
  235f18:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  235f1f:	00 00 00 
  235f22:	49 09 c6             	or     %rax,%r14
  235f25:	b8 03 00 00 00       	mov    $0x3,%eax
  235f2a:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  235f31:	ff ff ff 
  235f34:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235f39:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  235f40:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  235f46:	be 5c 00 00 00       	mov    $0x5c,%esi
  235f4b:	89 c0                	mov    %eax,%eax
  235f4d:	48 8d 0d ec ef fc ff 	lea    -0x31014(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  235f54:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235f58:	48 01 c8             	add    %rcx,%rax
  235f5b:	ff e0                	jmpq   *%rax
  235f5d:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  235f64:	00 
  235f65:	b8 02 00 00 00       	mov    $0x2,%eax
  235f6a:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  235f71:	ff ff ff 
  235f74:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235f79:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  235f80:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  235f86:	be 5c 00 00 00       	mov    $0x5c,%esi
  235f8b:	89 c0                	mov    %eax,%eax
  235f8d:	48 8d 0d ac ef fc ff 	lea    -0x31054(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  235f94:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235f98:	48 01 c8             	add    %rcx,%rax
  235f9b:	ff e0                	jmpq   *%rax
  235f9d:	b8 02 00 00 00       	mov    $0x2,%eax
  235fa2:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  235fa9:	ff ff ff 
  235fac:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  235fb1:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  235fb8:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  235fbe:	be 5c 00 00 00       	mov    $0x5c,%esi
  235fc3:	89 c0                	mov    %eax,%eax
  235fc5:	48 8d 0d 74 ef fc ff 	lea    -0x3108c(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  235fcc:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  235fd0:	48 01 c8             	add    %rcx,%rax
  235fd3:	89 f9                	mov    %edi,%ecx
  235fd5:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  235fd9:	ff e0                	jmpq   *%rax
  235fdb:	81 fd 00 00 01 00    	cmp    $0x10000,%ebp
  235fe1:	73 3c                	jae    23601f <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x20f>
  235fe3:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  235fea:	00 
  235feb:	48 8d 35 cf e7 fc ff 	lea    -0x31831(%rip),%rsi        # 2047c1 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  235ff2:	48 8d 0d 18 e8 fc ff 	lea    -0x317e8(%rip),%rcx        # 204811 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  235ff9:	4c 8d 0d 31 e9 fc ff 	lea    -0x316cf(%rip),%r9        # 204931 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  236000:	ba 28 00 00 00       	mov    $0x28,%edx
  236005:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  23600b:	89 ef                	mov    %ebp,%edi
  23600d:	e8 3e e0 ff ff       	callq  234050 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  236012:	84 c0                	test   %al,%al
  236014:	0f 85 9f 00 00 00    	jne    2360b9 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  23601a:	e9 a3 00 00 00       	jmpq   2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23601f:	81 fd 00 00 02 00    	cmp    $0x20000,%ebp
  236025:	73 35                	jae    23605c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x24c>
  236027:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  23602e:	00 
  23602f:	48 8d 35 2a ea fc ff 	lea    -0x315d6(%rip),%rsi        # 204a60 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  236036:	48 8d 0d 77 ea fc ff 	lea    -0x31589(%rip),%rcx        # 204ab4 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  23603d:	4c 8d 0d 30 eb fc ff 	lea    -0x314d0(%rip),%r9        # 204b74 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  236044:	ba 2a 00 00 00       	mov    $0x2a,%edx
  236049:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  23604f:	89 ef                	mov    %ebp,%edi
  236051:	e8 fa df ff ff       	callq  234050 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  236056:	84 c0                	test   %al,%al
  236058:	75 5f                	jne    2360b9 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  23605a:	eb 66                	jmp    2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23605c:	89 e8                	mov    %ebp,%eax
  23605e:	83 e0 e0             	and    $0xffffffe0,%eax
  236061:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  236066:	74 5a                	je     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  236068:	8d 85 c7 48 fd ff    	lea    -0x2b739(%rbp),%eax
  23606e:	83 f8 07             	cmp    $0x7,%eax
  236071:	72 4f                	jb     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  236073:	89 e8                	mov    %ebp,%eax
  236075:	83 e0 fe             	and    $0xfffffffe,%eax
  236078:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  23607d:	74 43                	je     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23607f:	8d 85 5e 31 fd ff    	lea    -0x2cea2(%rbp),%eax
  236085:	83 f8 0e             	cmp    $0xe,%eax
  236088:	72 38                	jb     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  23608a:	8d 85 1f 14 fd ff    	lea    -0x2ebe1(%rbp),%eax
  236090:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  236095:	72 2b                	jb     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  236097:	8d 85 e2 05 fd ff    	lea    -0x2fa1e(%rbp),%eax
  23609d:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  2360a2:	72 1e                	jb     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2360a4:	8d 85 b5 ec fc ff    	lea    -0x3134b(%rbp),%eax
  2360aa:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  2360af:	72 11                	jb     2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2360b1:	81 fd f0 01 0e 00    	cmp    $0xe01f0,%ebp
  2360b7:	73 09                	jae    2360c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2360b9:	b8 01 00 00 00       	mov    $0x1,%eax
  2360be:	89 ee                	mov    %ebp,%esi
  2360c0:	eb 23                	jmp    2360e5 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2d5>
  2360c2:	89 e8                	mov    %ebp,%eax
  2360c4:	83 cd 01             	or     $0x1,%ebp
  2360c7:	0f bd ed             	bsr    %ebp,%ebp
  2360ca:	83 f5 1c             	xor    $0x1c,%ebp
  2360cd:	c1 ed 02             	shr    $0x2,%ebp
  2360d0:	83 f5 07             	xor    $0x7,%ebp
  2360d3:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  2360da:	00 00 00 
  2360dd:	49 09 c6             	or     %rax,%r14
  2360e0:	b8 03 00 00 00       	mov    $0x3,%eax
  2360e5:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  2360e9:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  2360f0:	ff ff ff 
  2360f3:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2360f8:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  2360ff:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  236105:	be 5c 00 00 00       	mov    $0x5c,%esi
  23610a:	89 c0                	mov    %eax,%eax
  23610c:	48 8d 0d 2d ee fc ff 	lea    -0x311d3(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  236113:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  236117:	48 01 c8             	add    %rcx,%rax
  23611a:	ff e0                	jmpq   *%rax
  23611c:	0f 1f 40 00          	nopl   0x0(%rax)
  236120:	48 89 df             	mov    %rbx,%rdi
  236123:	41 ff d7             	callq  *%r15
  236126:	84 c0                	test   %al,%al
  236128:	0f 85 10 fd ff ff    	jne    235e3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2e>
  23612e:	be 5c 00 00 00       	mov    $0x5c,%esi
  236133:	44 89 e0             	mov    %r12d,%eax
  236136:	48 8d 0d 03 ee fc ff 	lea    -0x311fd(%rip),%rcx        # 204f40 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  23613d:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  236141:	48 01 c8             	add    %rcx,%rax
  236144:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  23614a:	ff e0                	jmpq   *%rax
  23614c:	45 31 e4             	xor    %r12d,%r12d
  23614f:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  236153:	eb cb                	jmp    236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  236155:	4c 89 f0             	mov    %r14,%rax
  236158:	48 c1 e8 20          	shr    $0x20,%rax
  23615c:	0f b6 c0             	movzbl %al,%eax
  23615f:	48 8d 0d ea ed fc ff 	lea    -0x31216(%rip),%rcx        # 204f50 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x11f>
  236166:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  23616a:	48 01 c8             	add    %rcx,%rax
  23616d:	ff e0                	jmpq   *%rax
  23616f:	4c 21 ed             	and    %r13,%rbp
  236172:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  236177:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  23617d:	be 7d 00 00 00       	mov    $0x7d,%esi
  236182:	eb 9c                	jmp    236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  236184:	8d 0c ad 00 00 00 00 	lea    0x0(,%rbp,4),%ecx
  23618b:	44 89 f0             	mov    %r14d,%eax
  23618e:	d3 e8                	shr    %cl,%eax
  236190:	83 e0 0f             	and    $0xf,%eax
  236193:	8d 48 57             	lea    0x57(%rax),%ecx
  236196:	89 c6                	mov    %eax,%esi
  236198:	83 ce 30             	or     $0x30,%esi
  23619b:	3c 0a                	cmp    $0xa,%al
  23619d:	0f 43 f1             	cmovae %ecx,%esi
  2361a0:	48 85 ed             	test   %rbp,%rbp
  2361a3:	74 7e                	je     236223 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x413>
  2361a5:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  2361a9:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2361af:	e9 6c ff ff ff       	jmpq   236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2361b4:	4c 21 ed             	and    %r13,%rbp
  2361b7:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  2361bc:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  2361c3:	00 00 00 
  2361c6:	49 09 c6             	or     %rax,%r14
  2361c9:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2361cf:	be 7b 00 00 00       	mov    $0x7b,%esi
  2361d4:	e9 47 ff ff ff       	jmpq   236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2361d9:	4c 21 ed             	and    %r13,%rbp
  2361dc:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  2361e1:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  2361e8:	00 00 00 
  2361eb:	49 09 c6             	or     %rax,%r14
  2361ee:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2361f4:	be 75 00 00 00       	mov    $0x75,%esi
  2361f9:	e9 22 ff ff ff       	jmpq   236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2361fe:	4c 21 ed             	and    %r13,%rbp
  236201:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  236206:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  23620d:	00 00 00 
  236210:	49 09 c6             	or     %rax,%r14
  236213:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  236219:	be 5c 00 00 00       	mov    $0x5c,%esi
  23621e:	e9 fd fe ff ff       	jmpq   236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  236223:	4c 21 ed             	and    %r13,%rbp
  236226:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  23622b:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  236232:	00 00 00 
  236235:	49 09 c6             	or     %rax,%r14
  236238:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  23623e:	e9 dd fe ff ff       	jmpq   236120 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  236243:	48 89 df             	mov    %rbx,%rdi
  236246:	be 27 00 00 00       	mov    $0x27,%esi
  23624b:	4c 89 f8             	mov    %r15,%rax
  23624e:	48 83 c4 18          	add    $0x18,%rsp
  236252:	5b                   	pop    %rbx
  236253:	41 5c                	pop    %r12
  236255:	41 5d                	pop    %r13
  236257:	41 5e                	pop    %r14
  236259:	41 5f                	pop    %r15
  23625b:	5d                   	pop    %rbp
  23625c:	ff e0                	jmpq   *%rax
  23625e:	cc                   	int3   
  23625f:	cc                   	int3   

0000000000236260 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h558b5ba4ec7667bfE>:
  236260:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  236264:	48 8b 46 28          	mov    0x28(%rsi),%rax
  236268:	48 8b 40 18          	mov    0x18(%rax),%rax
  23626c:	48 8d 35 6e ed fc ff 	lea    -0x31292(%rip),%rsi        # 204fe1 <anon.3bd2d5117e953c23f99d470f07b1e03a.10.llvm.2324975589069524467+0x5>
  236273:	ba 05 00 00 00       	mov    $0x5,%edx
  236278:	ff e0                	jmpq   *%rax
  23627a:	cc                   	int3   
  23627b:	cc                   	int3   
  23627c:	cc                   	int3   
  23627d:	cc                   	int3   
  23627e:	cc                   	int3   
  23627f:	cc                   	int3   

0000000000236280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>:
  236280:	48 8b 07             	mov    (%rdi),%rax
  236283:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  236287:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  23628b:	48 89 c7             	mov    %rax,%rdi
  23628e:	ff e1                	jmpq   *%rcx

0000000000236290 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE>:
  236290:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  236297:	48 8b 07             	mov    (%rdi),%rax
  23629a:	8b 4e 30             	mov    0x30(%rsi),%ecx
  23629d:	f6 c1 10             	test   $0x10,%cl
  2362a0:	0f 85 dd 00 00 00    	jne    236383 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xf3>
  2362a6:	f6 c1 20             	test   $0x20,%cl
  2362a9:	0f 85 20 01 00 00    	jne    2363cf <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x13f>
  2362af:	4c 8b 10             	mov    (%rax),%r10
  2362b2:	b9 27 00 00 00       	mov    $0x27,%ecx
  2362b7:	49 81 fa 10 27 00 00 	cmp    $0x2710,%r10
  2362be:	0f 82 8b 01 00 00    	jb     23644f <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1bf>
  2362c4:	41 bb 27 00 00 00    	mov    $0x27,%r11d
  2362ca:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  2362d1:	c5 6d 34 
  2362d4:	4c 8d 0d fd dd fc ff 	lea    -0x32203(%rip),%r9        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  2362db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  2362e0:	4c 89 d0             	mov    %r10,%rax
  2362e3:	49 f7 e0             	mul    %r8
  2362e6:	48 c1 ea 0b          	shr    $0xb,%rdx
  2362ea:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  2362f0:	44 89 d1             	mov    %r10d,%ecx
  2362f3:	29 c1                	sub    %eax,%ecx
  2362f5:	0f b7 c1             	movzwl %cx,%eax
  2362f8:	c1 e8 02             	shr    $0x2,%eax
  2362fb:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236301:	c1 e8 11             	shr    $0x11,%eax
  236304:	6b f8 64             	imul   $0x64,%eax,%edi
  236307:	29 f9                	sub    %edi,%ecx
  236309:	0f b7 f9             	movzwl %cx,%edi
  23630c:	49 8d 4b fc          	lea    -0x4(%r11),%rcx
  236310:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  236315:	66 42 89 44 1c 04    	mov    %ax,0x4(%rsp,%r11,1)
  23631b:	41 0f b7 04 79       	movzwl (%r9,%rdi,2),%eax
  236320:	66 42 89 44 1c 06    	mov    %ax,0x6(%rsp,%r11,1)
  236326:	49 89 cb             	mov    %rcx,%r11
  236329:	49 81 fa ff e0 f5 05 	cmp    $0x5f5e0ff,%r10
  236330:	49 89 d2             	mov    %rdx,%r10
  236333:	77 ab                	ja     2362e0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x50>
  236335:	48 83 fa 63          	cmp    $0x63,%rdx
  236339:	7e 2e                	jle    236369 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xd9>
  23633b:	0f b7 c2             	movzwl %dx,%eax
  23633e:	c1 e8 02             	shr    $0x2,%eax
  236341:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  236347:	c1 e8 11             	shr    $0x11,%eax
  23634a:	6b f8 64             	imul   $0x64,%eax,%edi
  23634d:	29 fa                	sub    %edi,%edx
  23634f:	0f b7 d2             	movzwl %dx,%edx
  236352:	48 8d 3d 7f dd fc ff 	lea    -0x32281(%rip),%rdi        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236359:	0f b7 14 57          	movzwl (%rdi,%rdx,2),%edx
  23635d:	66 89 54 0c 06       	mov    %dx,0x6(%rsp,%rcx,1)
  236362:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236366:	48 89 c2             	mov    %rax,%rdx
  236369:	48 83 fa 0a          	cmp    $0xa,%rdx
  23636d:	0f 8d ee 00 00 00    	jge    236461 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1d1>
  236373:	80 c2 30             	add    $0x30,%dl
  236376:	88 54 0c 07          	mov    %dl,0x7(%rsp,%rcx,1)
  23637a:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  23637e:	e9 f2 00 00 00       	jmpq   236475 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x1e5>
  236383:	48 8b 00             	mov    (%rax),%rax
  236386:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  23638d:	00 
  23638e:	45 31 c9             	xor    %r9d,%r9d
  236391:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  236397:	48 89 c2             	mov    %rax,%rdx
  23639a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  2363a0:	48 c1 ea 04          	shr    $0x4,%rdx
  2363a4:	89 c1                	mov    %eax,%ecx
  2363a6:	80 e1 0f             	and    $0xf,%cl
  2363a9:	80 f9 0a             	cmp    $0xa,%cl
  2363ac:	bf 57 00 00 00       	mov    $0x57,%edi
  2363b1:	41 0f 42 fa          	cmovb  %r10d,%edi
  2363b5:	40 00 cf             	add    %cl,%dil
  2363b8:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  2363bc:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  2363c0:	49 83 c1 01          	add    $0x1,%r9
  2363c4:	48 83 f8 0f          	cmp    $0xf,%rax
  2363c8:	48 89 d0             	mov    %rdx,%rax
  2363cb:	77 d3                	ja     2363a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x110>
  2363cd:	eb 4e                	jmp    23641d <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x18d>
  2363cf:	48 8b 00             	mov    (%rax),%rax
  2363d2:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  2363d9:	00 
  2363da:	45 31 c9             	xor    %r9d,%r9d
  2363dd:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  2363e3:	48 89 c2             	mov    %rax,%rdx
  2363e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2363ed:	00 00 00 
  2363f0:	48 c1 ea 04          	shr    $0x4,%rdx
  2363f4:	89 c1                	mov    %eax,%ecx
  2363f6:	80 e1 0f             	and    $0xf,%cl
  2363f9:	80 f9 0a             	cmp    $0xa,%cl
  2363fc:	bf 37 00 00 00       	mov    $0x37,%edi
  236401:	41 0f 42 fa          	cmovb  %r10d,%edi
  236405:	40 00 cf             	add    %cl,%dil
  236408:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  23640c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  236410:	49 83 c1 01          	add    $0x1,%r9
  236414:	48 83 f8 0f          	cmp    $0xf,%rax
  236418:	48 89 d0             	mov    %rdx,%rax
  23641b:	77 d3                	ja     2363f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x160>
  23641d:	bf 80 00 00 00       	mov    $0x80,%edi
  236422:	4c 29 cf             	sub    %r9,%rdi
  236425:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  23642c:	73 76                	jae    2364a4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0x214>
  23642e:	48 8d 15 a1 dc fc ff 	lea    -0x3235f(%rip),%rdx        # 2040d6 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  236435:	b9 02 00 00 00       	mov    $0x2,%ecx
  23643a:	48 89 f7             	mov    %rsi,%rdi
  23643d:	be 01 00 00 00       	mov    $0x1,%esi
  236442:	e8 39 eb ff ff       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  236447:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  23644e:	c3                   	retq   
  23644f:	4c 89 d2             	mov    %r10,%rdx
  236452:	48 83 fa 63          	cmp    $0x63,%rdx
  236456:	0f 8f df fe ff ff    	jg     23633b <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xab>
  23645c:	e9 08 ff ff ff       	jmpq   236369 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3bed4cacd4c6a98fE+0xd9>
  236461:	48 8d 05 70 dc fc ff 	lea    -0x32390(%rip),%rax        # 2040d8 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  236468:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  23646c:	66 89 44 0c 06       	mov    %ax,0x6(%rsp,%rcx,1)
  236471:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  236475:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  236479:	49 83 c0 08          	add    $0x8,%r8
  23647d:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  236483:	49 29 c9             	sub    %rcx,%r9
  236486:	48 8d 15 9d e8 fc ff 	lea    -0x31763(%rip),%rdx        # 204d2a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  23648d:	48 89 f7             	mov    %rsi,%rdi
  236490:	be 01 00 00 00       	mov    $0x1,%esi
  236495:	31 c9                	xor    %ecx,%ecx
  236497:	e8 e4 ea ff ff       	callq  234f80 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  23649c:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2364a3:	c3                   	retq   
  2364a4:	48 8d 15 2d 48 00 00 	lea    0x482d(%rip),%rdx        # 23acd8 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  2364ab:	be 80 00 00 00       	mov    $0x80,%esi
  2364b0:	e8 ab d2 ff ff       	callq  233760 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  2364b5:	0f 0b                	ud2    
  2364b7:	cc                   	int3   
  2364b8:	cc                   	int3   
  2364b9:	cc                   	int3   
  2364ba:	cc                   	int3   
  2364bb:	cc                   	int3   
  2364bc:	cc                   	int3   
  2364bd:	cc                   	int3   
  2364be:	cc                   	int3   
  2364bf:	cc                   	int3   

00000000002364c0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>:
  2364c0:	48 83 ec 38          	sub    $0x38,%rsp
  2364c4:	48 8b 07             	mov    (%rdi),%rax
  2364c7:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2364cb:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  2364cf:	48 8b 48 28          	mov    0x28(%rax),%rcx
  2364d3:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2364d8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  2364dc:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2364e1:	48 8b 48 18          	mov    0x18(%rax),%rcx
  2364e5:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2364ea:	48 8b 48 10          	mov    0x10(%rax),%rcx
  2364ee:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2364f3:	48 8b 08             	mov    (%rax),%rcx
  2364f6:	48 8b 40 08          	mov    0x8(%rax),%rax
  2364fa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2364ff:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  236504:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  236509:	e8 32 e8 ff ff       	callq  234d40 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  23650e:	48 83 c4 38          	add    $0x38,%rsp
  236512:	c3                   	retq   
  236513:	cc                   	int3   
  236514:	cc                   	int3   
  236515:	cc                   	int3   
  236516:	cc                   	int3   
  236517:	cc                   	int3   
  236518:	cc                   	int3   
  236519:	cc                   	int3   
  23651a:	cc                   	int3   
  23651b:	cc                   	int3   
  23651c:	cc                   	int3   
  23651d:	cc                   	int3   
  23651e:	cc                   	int3   
  23651f:	cc                   	int3   

0000000000236520 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>:
  236520:	48 89 f0             	mov    %rsi,%rax
  236523:	48 8b 0f             	mov    (%rdi),%rcx
  236526:	48 8b 31             	mov    (%rcx),%rsi
  236529:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  23652d:	48 89 c7             	mov    %rax,%rdi
  236530:	e9 6b ee ff ff       	jmpq   2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  236535:	cc                   	int3   
  236536:	cc                   	int3   
  236537:	cc                   	int3   
  236538:	cc                   	int3   
  236539:	cc                   	int3   
  23653a:	cc                   	int3   
  23653b:	cc                   	int3   
  23653c:	cc                   	int3   
  23653d:	cc                   	int3   
  23653e:	cc                   	int3   
  23653f:	cc                   	int3   

0000000000236540 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>:
  236540:	48 89 f0             	mov    %rsi,%rax
  236543:	48 8b 37             	mov    (%rdi),%rsi
  236546:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  23654a:	48 89 c7             	mov    %rax,%rdi
  23654d:	e9 4e ee ff ff       	jmpq   2353a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  236552:	cc                   	int3   
  236553:	cc                   	int3   
  236554:	cc                   	int3   
  236555:	cc                   	int3   
  236556:	cc                   	int3   
  236557:	cc                   	int3   
  236558:	cc                   	int3   
  236559:	cc                   	int3   
  23655a:	cc                   	int3   
  23655b:	cc                   	int3   
  23655c:	cc                   	int3   
  23655d:	cc                   	int3   
  23655e:	cc                   	int3   
  23655f:	cc                   	int3   

0000000000236560 <memcpy>:
  236560:	48 89 f8             	mov    %rdi,%rax
  236563:	48 89 d1             	mov    %rdx,%rcx
  236566:	48 c1 e9 03          	shr    $0x3,%rcx
  23656a:	83 e2 07             	and    $0x7,%edx
  23656d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  236570:	89 d1                	mov    %edx,%ecx
  236572:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  236574:	c3                   	retq   
  236575:	cc                   	int3   
  236576:	cc                   	int3   
  236577:	cc                   	int3   
  236578:	cc                   	int3   
  236579:	cc                   	int3   
  23657a:	cc                   	int3   
  23657b:	cc                   	int3   
  23657c:	cc                   	int3   
  23657d:	cc                   	int3   
  23657e:	cc                   	int3   
  23657f:	cc                   	int3   

0000000000236580 <memset>:
  236580:	49 89 f8             	mov    %rdi,%r8
  236583:	48 89 d1             	mov    %rdx,%rcx
  236586:	48 c1 e9 03          	shr    $0x3,%rcx
  23658a:	83 e2 07             	and    $0x7,%edx
  23658d:	40 0f b6 f6          	movzbl %sil,%esi
  236591:	48 b8 01 01 01 01 01 	movabs $0x101010101010101,%rax
  236598:	01 01 01 
  23659b:	48 0f af c6          	imul   %rsi,%rax
  23659f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  2365a2:	89 d1                	mov    %edx,%ecx
  2365a4:	f3 aa                	rep stos %al,%es:(%rdi)
  2365a6:	4c 89 c0             	mov    %r8,%rax
  2365a9:	c3                   	retq   
  2365aa:	cc                   	int3   
  2365ab:	cc                   	int3   
  2365ac:	cc                   	int3   
  2365ad:	cc                   	int3   
  2365ae:	cc                   	int3   
  2365af:	cc                   	int3   

00000000002365b0 <memcmp>:
  2365b0:	48 85 d2             	test   %rdx,%rdx
  2365b3:	74 22                	je     2365d7 <memcmp+0x27>
  2365b5:	31 c9                	xor    %ecx,%ecx
  2365b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  2365be:	00 00 
  2365c0:	0f b6 04 0f          	movzbl (%rdi,%rcx,1),%eax
  2365c4:	44 0f b6 04 0e       	movzbl (%rsi,%rcx,1),%r8d
  2365c9:	44 38 c0             	cmp    %r8b,%al
  2365cc:	75 0c                	jne    2365da <memcmp+0x2a>
  2365ce:	48 83 c1 01          	add    $0x1,%rcx
  2365d2:	48 39 ca             	cmp    %rcx,%rdx
  2365d5:	75 e9                	jne    2365c0 <memcmp+0x10>
  2365d7:	31 c0                	xor    %eax,%eax
  2365d9:	c3                   	retq   
  2365da:	44 29 c0             	sub    %r8d,%eax
  2365dd:	c3                   	retq   
